// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4214
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// ComMoveUnit ( Heike , Johnny ) ;
3340: LD_EXP 16
3344: PPUSH
3345: LD_EXP 25
3349: PPUSH
3350: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3361: LD_EXP 25
3365: PPUSH
3366: LD_EXP 16
3370: PPUSH
3371: CALL_OW 296
3375: PUSH
3376: LD_INT 4
3378: LESS
3379: IFFALSE 3354
// ComTurnUnit ( Johnny , Heike ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_EXP 16
3390: PPUSH
3391: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3395: LD_EXP 25
3399: PPUSH
3400: LD_STRING DJ-ambush-2
3402: PPUSH
3403: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING DH-ambush-2
3414: PPUSH
3415: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3419: LD_EXP 25
3423: PPUSH
3424: LD_STRING DJ-ambush-3
3426: PPUSH
3427: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING DH-ambush-3
3438: PPUSH
3439: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3443: LD_EXP 25
3447: PPUSH
3448: LD_STRING DJ-ambush-4
3450: PPUSH
3451: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3455: LD_EXP 16
3459: PPUSH
3460: LD_INT 39
3462: PPUSH
3463: LD_INT 22
3465: PPUSH
3466: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING DH-ambush-4
3477: PPUSH
3478: CALL_OW 88
// PrepareRussianPatrol ;
3482: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3486: LD_INT 39
3488: PPUSH
3489: LD_INT 22
3491: PPUSH
3492: LD_INT 2
3494: PPUSH
3495: LD_INT 12
3497: NEG
3498: PPUSH
3499: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3503: LD_INT 39
3505: PPUSH
3506: LD_INT 22
3508: PPUSH
3509: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3513: LD_EXP 21
3517: PPUSH
3518: LD_INT 39
3520: PPUSH
3521: LD_INT 23
3523: PPUSH
3524: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3528: LD_EXP 16
3532: PUSH
3533: LD_EXP 25
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: LD_INT 39
3544: PPUSH
3545: LD_INT 7
3547: PPUSH
3548: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3552: LD_EXP 16
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PPUSH
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3579: LD_EXP 21
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_STRING DR-ambush-5
3590: PPUSH
3591: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3595: LD_EXP 21
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_STRING DR1-ambush-5
3606: PPUSH
3607: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3611: LD_INT 35
3613: PPUSH
3614: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_INT 39
3625: PPUSH
3626: LD_INT 7
3628: PPUSH
3629: CALL_OW 297
3633: PUSH
3634: LD_INT 6
3636: LESS
3637: IFFALSE 3611
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3639: LD_EXP 16
3643: PPUSH
3644: LD_EXP 21
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_EXP 16
3666: PPUSH
3667: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3671: LD_EXP 25
3675: PPUSH
3676: LD_STRING DJ-ambush-6
3678: PPUSH
3679: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3683: LD_EXP 16
3687: PPUSH
3688: LD_STRING DH-ambush-6
3690: PPUSH
3691: CALL_OW 88
// InGameOff ;
3695: CALL_OW 9
// meetJohnny := true ;
3699: LD_ADDR_EXP 3
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// ComFree ( Johnny ) ;
3707: LD_EXP 25
3711: PPUSH
3712: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3716: LD_STRING O2_ambush_cont
3718: PPUSH
3719: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3723: LD_EXP 21
3727: PUSH
3728: LD_EXP 21
3732: ARRAY
3733: PPUSH
3734: LD_INT 29
3736: PPUSH
3737: LD_INT 15
3739: PPUSH
3740: CALL_OW 111
// wait ( 0 0$2 ) ;
3744: LD_INT 70
3746: PPUSH
3747: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 16
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: PUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_EXP 25
3772: PPUSH
3773: CALL_OW 292
3777: NOT
3778: AND
3779: IFFALSE 3800
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3781: LD_EXP 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 58
3792: PPUSH
3793: LD_INT 32
3795: PPUSH
3796: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3800: LD_INT 1750
3802: PUSH
3803: LD_INT 1400
3805: PUSH
3806: LD_INT 1225
3808: PUSH
3809: LD_INT 1050
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_OWVAR 67
3822: ARRAY
3823: PPUSH
3824: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3828: LD_EXP 21
3832: PPUSH
3833: LD_INT 43
3835: PPUSH
3836: LD_INT 13
3838: PPUSH
3839: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3843: LD_INT 35
3845: PPUSH
3846: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3850: LD_EXP 21
3854: NOT
3855: PUSH
3856: LD_EXP 25
3860: PPUSH
3861: CALL_OW 302
3865: NOT
3866: OR
3867: IFFALSE 3843
// RemoveSeeing ( 39 , 22 , 2 ) ;
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 22
3874: PPUSH
3875: LD_INT 2
3877: PPUSH
3878: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 81
3892: PUSH
3893: LD_INT 2
3895: EQUAL
3896: IFFALSE 3900
// exit ;
3898: GO 4214
// if not IsOk ( Johnny ) then
3900: LD_EXP 25
3904: PPUSH
3905: CALL_OW 302
3909: NOT
3910: IFFALSE 3921
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3912: LD_STRING O2_ambush_out_cont
3914: PPUSH
3915: CALL_OW 337
// exit ;
3919: GO 4214
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3921: LD_EXP 16
3925: PPUSH
3926: LD_EXP 25
3930: PPUSH
3931: CALL_OW 296
3935: PUSH
3936: LD_INT 10
3938: GREATER
3939: IFFALSE 4000
// begin ComMoveUnit ( Johnny , Heike ) ;
3941: LD_EXP 25
3945: PPUSH
3946: LD_EXP 16
3950: PPUSH
3951: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// if GetAttitude ( 1 , 2 ) = att_enemy then
3962: LD_INT 1
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 81
3972: PUSH
3973: LD_INT 2
3975: EQUAL
3976: IFFALSE 3980
// exit ;
3978: GO 4214
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 296
3994: PUSH
3995: LD_INT 6
3997: LESS
3998: IFFALSE 3955
// end ; CenterNowOnUnits ( Heike ) ;
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 87
// InGameOn ;
4009: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
4013: LD_EXP 16
4017: PPUSH
4018: LD_EXP 25
4022: PPUSH
4023: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
4027: LD_EXP 25
4031: PPUSH
4032: LD_EXP 16
4036: PPUSH
4037: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4041: LD_EXP 25
4045: PPUSH
4046: LD_STRING DJ-thanks-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4053: LD_EXP 16
4057: PPUSH
4058: LD_STRING DH-thanks-1
4060: PPUSH
4061: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4065: LD_EXP 25
4069: PPUSH
4070: LD_STRING DJ-thanks-2
4072: PPUSH
4073: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4077: LD_EXP 25
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 3
4087: PPUSH
4088: CALL_OW 111
// wait ( 0 0$1 ) ;
4092: LD_INT 35
4094: PPUSH
4095: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4099: LD_EXP 16
4103: PPUSH
4104: LD_STRING DH-thanks-2
4106: PPUSH
4107: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 25
4125: PPUSH
4126: CALL_OW 292
4130: NOT
4131: IFFALSE 4111
// Say ( Heike , DH-thanks-2a ) ;
4133: LD_EXP 16
4137: PPUSH
4138: LD_STRING DH-thanks-2a
4140: PPUSH
4141: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4145: LD_EXP 25
4149: PPUSH
4150: CALL_OW 64
// InGameOff ;
4154: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4158: LD_STRING O2_ambush_out_cont
4160: PPUSH
4161: CALL_OW 337
// johnnySaved := true ;
4165: LD_ADDR_EXP 4
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4173: LD_EXP 16
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 600
4183: PPUSH
4184: CALL_OW 492
// if IsOk ( Olaf ) then
4188: LD_EXP 17
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4214
// ComMoveXY ( Olaf , 44 , 25 ) ;
4199: LD_EXP 17
4203: PPUSH
4204: LD_INT 44
4206: PPUSH
4207: LD_INT 25
4209: PPUSH
4210: CALL_OW 111
// end ;
4214: END
// every 0 0$1 trigger russianPatrol do var i ;
4215: LD_EXP 21
4219: IFFALSE 4287
4221: GO 4223
4223: DISABLE
4224: LD_INT 0
4226: PPUSH
// begin enable ;
4227: ENABLE
// for i in russianPatrol do
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_EXP 21
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4285
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 256
4250: PUSH
4251: LD_INT 1000
4253: LESS
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 314
4264: NOT
4265: AND
4266: IFFALSE 4283
// ComAgressiveMove ( i , 42 , 12 ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 42
4275: PPUSH
4276: LD_INT 12
4278: PPUSH
4279: CALL_OW 114
4283: GO 4238
4285: POP
4286: POP
// end ;
4287: PPOPN 1
4289: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 81
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: PUSH
4305: LD_EXP 25
4309: PPUSH
4310: CALL_OW 302
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4320: LD_EXP 25
4324: PPUSH
4325: LD_STRING DJ-fire-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4333: LD_EXP 7
4337: NOT
4338: PUSH
4339: LD_EXP 23
4343: PPUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: AND
4359: IFFALSE 4479
4361: GO 4363
4363: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4364: LD_EXP 16
4368: PPUSH
4369: CALL_OW 87
// DialogueOn ;
4373: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4377: LD_EXP 16
4381: PPUSH
4382: LD_STRING DH-see-enemy-patrol-1
4384: PPUSH
4385: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4389: LD_EXP 23
4393: PPUSH
4394: LD_INT 26
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: LD_INT 1
4411: ARRAY
4412: PPUSH
4413: LD_STRING DR-see-enemy-patrol-1
4415: PPUSH
4416: CALL_OW 88
// DialogueOff ;
4420: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4424: LD_EXP 23
4428: PPUSH
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 114
// wait ( 0 0$10 ) ;
4439: LD_INT 350
4441: PPUSH
4442: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4446: LD_EXP 23
4450: PPUSH
4451: LD_INT 175
4453: PPUSH
4454: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4458: LD_EXP 23
4462: PPUSH
4463: LD_INT 9
4465: PPUSH
4466: CALL_OW 173
// AddComFree ( russianForces ) ;
4470: LD_EXP 23
4474: PPUSH
4475: CALL_OW 199
// end ;
4479: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4480: LD_EXP 23
4484: PPUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 24
4490: PUSH
4491: LD_INT 960
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 72
4506: IFFALSE 4759
4508: GO 4510
4510: DISABLE
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
// begin enable ;
4517: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: LD_EXP 23
4547: PPUSH
4548: LD_INT 1
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 960
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 500
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4588: LD_ADDR_VAR 0 4
4592: PUSH
4593: LD_EXP 23
4597: PPUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 24
4603: PUSH
4604: LD_INT 500
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if not tmp then
4620: LD_VAR 0 2
4624: NOT
4625: IFFALSE 4629
// exit ;
4627: GO 4759
// for i in tmp2 do
4629: LD_ADDR_VAR 0 1
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4698
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 1
4656: PPUSH
4657: CALL_OW 74
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 10
4669: LESS
4670: IFFALSE 4696
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 1
4686: PPUSH
4687: CALL_OW 74
4691: PPUSH
4692: CALL_OW 115
4696: GO 4639
4698: POP
4699: POP
// if tmp3 then
4700: LD_VAR 0 4
4704: IFFALSE 4759
// for i in tmp3 do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 4
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4757
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4719: LD_VAR 0 1
4723: PPUSH
4724: LD_INT 119
4726: PPUSH
4727: LD_INT 21
4729: PPUSH
4730: CALL_OW 297
4734: PUSH
4735: LD_INT 10
4737: GREATER
4738: IFFALSE 4755
// ComMoveXY ( i , 119 , 21 ) ;
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 119
4747: PPUSH
4748: LD_INT 21
4750: PPUSH
4751: CALL_OW 111
4755: GO 4716
4757: POP
4758: POP
// end ;
4759: PPOPN 4
4761: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4762: LD_EXP 1
4766: PUSH
4767: LD_EXP 16
4771: PPUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 14
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 69
4786: PPUSH
4787: LD_EXP 16
4791: PPUSH
4792: CALL_OW 74
4796: PPUSH
4797: CALL_OW 296
4801: PUSH
4802: LD_INT 6
4804: LESS
4805: AND
4806: IFFALSE 4837
4808: GO 4810
4810: DISABLE
// begin animalCounter := animalCounter + 1 ;
4811: LD_ADDR_EXP 15
4815: PUSH
4816: LD_EXP 15
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4825: LD_EXP 16
4829: PPUSH
4830: LD_STRING DH-tiger-1
4832: PPUSH
4833: CALL_OW 88
// end ;
4837: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4838: LD_EXP 1
4842: PUSH
4843: LD_EXP 16
4847: PPUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 12
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PPUSH
4858: CALL_OW 69
4862: PPUSH
4863: LD_EXP 16
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 296
4877: PUSH
4878: LD_INT 6
4880: LESS
4881: AND
4882: IFFALSE 4913
4884: GO 4886
4886: DISABLE
// begin animalCounter := animalCounter + 1 ;
4887: LD_ADDR_EXP 15
4891: PUSH
4892: LD_EXP 15
4896: PUSH
4897: LD_INT 1
4899: PLUS
4900: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4901: LD_EXP 16
4905: PPUSH
4906: LD_STRING DH-ape-1
4908: PPUSH
4909: CALL_OW 88
// end ;
4913: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4914: LD_EXP 1
4918: PUSH
4919: LD_EXP 16
4923: PPUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 74
4948: PPUSH
4949: CALL_OW 296
4953: PUSH
4954: LD_INT 6
4956: LESS
4957: AND
4958: IFFALSE 4989
4960: GO 4962
4962: DISABLE
// begin animalCounter := animalCounter + 1 ;
4963: LD_ADDR_EXP 15
4967: PUSH
4968: LD_EXP 15
4972: PUSH
4973: LD_INT 1
4975: PLUS
4976: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4977: LD_EXP 16
4981: PPUSH
4982: LD_STRING DH-bird-1
4984: PPUSH
4985: CALL_OW 88
// end ;
4989: END
// every 0 0$2 trigger animalCounter = 3 do
4990: LD_EXP 15
4994: PUSH
4995: LD_INT 3
4997: EQUAL
4998: IFFALSE 5010
5000: GO 5002
5002: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
5003: LD_STRING ACH_ZOOLIGST
5005: PPUSH
5006: CALL_OW 543
5010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 101
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: IFFALSE 5052
5041: GO 5043
5043: DISABLE
// russianSpotted := true ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
5052: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5053: LD_EXP 16
5057: PPUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 21
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PPUSH
5087: LD_EXP 16
5091: PPUSH
5092: CALL_OW 74
5096: PPUSH
5097: CALL_OW 296
5101: PUSH
5102: LD_INT 8
5104: LESS
5105: IFFALSE 5122
5107: GO 5109
5109: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5110: LD_EXP 16
5114: PPUSH
5115: LD_STRING DH-enemy-base
5117: PPUSH
5118: CALL_OW 88
5122: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5123: LD_EXP 25
5127: PPUSH
5128: CALL_OW 305
5132: NOT
5133: PUSH
5134: LD_EXP 6
5138: NOT
5139: AND
5140: PUSH
5141: LD_EXP 5
5145: AND
5146: PUSH
5147: LD_EXP 12
5151: NOT
5152: AND
5153: PUSH
5154: LD_EXP 11
5158: NOT
5159: AND
5160: IFFALSE 5318
5162: GO 5164
5164: DISABLE
5165: LD_INT 0
5167: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// for i in dogTag do
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_EXP 5
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5235
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5188: LD_EXP 16
5192: PPUSH
5193: LD_VAR 0 1
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PPUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 2
5209: ARRAY
5210: PPUSH
5211: CALL_OW 297
5215: PUSH
5216: LD_INT 3
5218: LESS
5219: IFFALSE 5233
// begin dogTagFound := i ;
5221: LD_ADDR_EXP 6
5225: PUSH
5226: LD_VAR 0 1
5230: ST_TO_ADDR
// break ;
5231: GO 5235
// end ;
5233: GO 5185
5235: POP
5236: POP
// until dogTagFound ;
5237: LD_EXP 6
5241: IFFALSE 5168
// CenterNowOnUnits ( Heike ) ;
5243: LD_EXP 16
5247: PPUSH
5248: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5252: LD_EXP 16
5256: PPUSH
5257: LD_EXP 6
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_EXP 6
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PPUSH
5275: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5279: LD_STRING ACH_DOGTAG
5281: PPUSH
5282: CALL_OW 543
// if mercenariesQuestReady then
5286: LD_EXP 10
5290: IFFALSE 5306
// Say ( Heike , DH-dogtag-found-quest ) else
5292: LD_EXP 16
5296: PPUSH
5297: LD_STRING DH-dogtag-found-quest
5299: PPUSH
5300: CALL_OW 88
5304: GO 5318
// Say ( Heike , DH-dogtag-found ) ;
5306: LD_EXP 16
5310: PPUSH
5311: LD_STRING DH-dogtag-found
5313: PPUSH
5314: CALL_OW 88
// end ;
5318: PPOPN 1
5320: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5321: LD_EXP 8
5325: NOT
5326: PUSH
5327: LD_EXP 7
5331: NOT
5332: AND
5333: PUSH
5334: LD_INT 5
5336: PPUSH
5337: LD_EXP 16
5341: PPUSH
5342: CALL_OW 292
5346: AND
5347: PUSH
5348: LD_EXP 16
5352: PPUSH
5353: LD_EXP 17
5357: PPUSH
5358: CALL_OW 296
5362: PUSH
5363: LD_INT 8
5365: LESS
5366: AND
5367: IFFALSE 5759
5369: GO 5371
5371: DISABLE
// begin olafSpotted := true ;
5372: LD_ADDR_EXP 8
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if HasTask ( Olaf ) then
5380: LD_EXP 17
5384: PPUSH
5385: CALL_OW 314
5389: IFFALSE 5400
// ComStop ( Olaf ) ;
5391: LD_EXP 17
5395: PPUSH
5396: CALL_OW 141
// InGameOn ;
5400: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5404: LD_EXP 17
5408: PPUSH
5409: LD_EXP 16
5413: PPUSH
5414: CALL_OW 296
5418: PUSH
5419: LD_INT 8
5421: GREATER
5422: IFFALSE 5438
// ComMoveUnit ( Olaf , Heike ) ;
5424: LD_EXP 17
5428: PPUSH
5429: LD_EXP 16
5433: PPUSH
5434: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5438: LD_INT 35
5440: PPUSH
5441: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5445: LD_EXP 17
5449: PPUSH
5450: LD_EXP 16
5454: PPUSH
5455: CALL_OW 296
5459: PUSH
5460: LD_INT 8
5462: LESSEQUAL
5463: IFFALSE 5438
// ComTurnUnit ( Heike , Olaf ) ;
5465: LD_EXP 16
5469: PPUSH
5470: LD_EXP 17
5474: PPUSH
5475: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5479: LD_EXP 17
5483: PPUSH
5484: LD_EXP 16
5488: PPUSH
5489: CALL_OW 119
// wait ( 0 0$0.5 ) ;
5493: LD_INT 18
5495: PPUSH
5496: CALL_OW 67
// DialogueOn ;
5500: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5504: LD_EXP 17
5508: PPUSH
5509: LD_STRING DO-olaf-1
5511: PPUSH
5512: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5516: LD_EXP 16
5520: PPUSH
5521: LD_STRING DH-olaf-1
5523: PPUSH
5524: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5528: LD_EXP 17
5532: PPUSH
5533: LD_STRING DO-olaf-2
5535: PPUSH
5536: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5540: LD_EXP 16
5544: PPUSH
5545: LD_STRING DH-olaf-2
5547: PPUSH
5548: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5552: LD_EXP 17
5556: PPUSH
5557: LD_STRING DO-olaf-3
5559: PPUSH
5560: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5564: LD_EXP 17
5568: PPUSH
5569: LD_STRING DO-olaf-4
5571: PPUSH
5572: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5576: LD_EXP 16
5580: PPUSH
5581: LD_STRING DH-olaf-4
5583: PPUSH
5584: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5588: LD_EXP 17
5592: PPUSH
5593: LD_STRING DO-olaf-5
5595: PPUSH
5596: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5600: LD_EXP 16
5604: PPUSH
5605: LD_STRING DH-olaf-5
5607: PPUSH
5608: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5612: LD_EXP 17
5616: PPUSH
5617: LD_STRING DO-olaf-6
5619: PPUSH
5620: CALL_OW 88
// if russianSpotted or johnnySaved then
5624: LD_EXP 9
5628: PUSH
5629: LD_EXP 4
5633: OR
5634: IFFALSE 5662
// begin Say ( Heike , DH-olaf-6a ) ;
5636: LD_EXP 16
5640: PPUSH
5641: LD_STRING DH-olaf-6a
5643: PPUSH
5644: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5648: LD_EXP 17
5652: PPUSH
5653: LD_STRING DO-olaf-7a
5655: PPUSH
5656: CALL_OW 88
// end else
5660: GO 5686
// begin Say ( Heike , DH-olaf-6b ) ;
5662: LD_EXP 16
5666: PPUSH
5667: LD_STRING DH-olaf-6b
5669: PPUSH
5670: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5674: LD_EXP 17
5678: PPUSH
5679: LD_STRING DO-olaf-7b
5681: PPUSH
5682: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5686: LD_EXP 17
5690: PPUSH
5691: LD_STRING DO-olaf-8
5693: PPUSH
5694: CALL_OW 88
// DialogueOff ;
5698: CALL_OW 7
// InGameOff ;
5702: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5706: LD_STRING O3_camp_cont
5708: PPUSH
5709: CALL_OW 337
// if not johnnySaved then
5713: LD_EXP 4
5717: NOT
5718: IFFALSE 5729
// KillUnit ( Johnny ) ;
5720: LD_EXP 25
5724: PPUSH
5725: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5729: LD_EXP 17
5733: PPUSH
5734: LD_INT 52
5736: PPUSH
5737: LD_INT 90
5739: PPUSH
5740: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5744: LD_EXP 17
5748: PPUSH
5749: LD_INT 53
5751: PPUSH
5752: LD_INT 89
5754: PPUSH
5755: CALL_OW 178
// end ;
5759: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5760: LD_EXP 8
5764: NOT
5765: PUSH
5766: LD_EXP 16
5770: PPUSH
5771: LD_EXP 18
5775: PPUSH
5776: CALL_OW 296
5780: PUSH
5781: LD_INT 36
5783: LESS
5784: AND
5785: IFFALSE 5805
5787: GO 5789
5789: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5790: LD_EXP 17
5794: PPUSH
5795: LD_INT 39
5797: PPUSH
5798: LD_INT 71
5800: PPUSH
5801: CALL_OW 111
5805: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5806: LD_EXP 7
5810: NOT
5811: PUSH
5812: LD_INT 2
5814: PPUSH
5815: LD_EXP 19
5819: PPUSH
5820: CALL_OW 292
5824: PUSH
5825: LD_INT 2
5827: PPUSH
5828: LD_EXP 18
5832: PPUSH
5833: CALL_OW 292
5837: OR
5838: AND
5839: IFFALSE 7160
5841: GO 5843
5843: DISABLE
5844: LD_INT 0
5846: PPUSH
5847: PPUSH
5848: PPUSH
// begin if not johnnySaved then
5849: LD_EXP 4
5853: NOT
5854: IFFALSE 5865
// KillUnit ( Johnny ) ;
5856: LD_EXP 25
5860: PPUSH
5861: CALL_OW 66
// mercenariesSpotted := true ;
5865: LD_ADDR_EXP 7
5869: PUSH
5870: LD_INT 1
5872: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5873: LD_STRING O4_camp_cont
5875: PPUSH
5876: CALL_OW 337
// InGameOn ;
5880: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5884: LD_INT 53
5886: PPUSH
5887: LD_INT 89
5889: PPUSH
5890: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5894: LD_INT 53
5896: PPUSH
5897: LD_INT 89
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: LD_INT 8
5905: NEG
5906: PPUSH
5907: CALL_OW 330
// if olafSpotted then
5911: LD_EXP 8
5915: IFFALSE 6033
// begin AddComTurnUnit ( Olaf , Heike ) ;
5917: LD_EXP 17
5921: PPUSH
5922: LD_EXP 16
5926: PPUSH
5927: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5931: LD_EXP 16
5935: PPUSH
5936: LD_INT 51
5938: PPUSH
5939: LD_INT 86
5941: PPUSH
5942: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5946: LD_EXP 16
5950: PPUSH
5951: LD_EXP 17
5955: PPUSH
5956: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5960: LD_EXP 17
5964: PPUSH
5965: LD_STRING DO-camp-1
5967: PPUSH
5968: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5972: LD_EXP 18
5976: PUSH
5977: LD_EXP 19
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PPUSH
5986: LD_EXP 16
5990: PPUSH
5991: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5995: LD_EXP 18
5999: PPUSH
6000: LD_STRING DG-camp-1
6002: PPUSH
6003: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
6007: LD_EXP 16
6011: PPUSH
6012: LD_STRING DH-camp-1
6014: PPUSH
6015: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
6019: LD_EXP 17
6023: PPUSH
6024: LD_STRING DO-camp-2
6026: PPUSH
6027: CALL_OW 88
// end else
6031: GO 6428
// begin ComMoveXY ( Heike , 51 , 86 ) ;
6033: LD_EXP 16
6037: PPUSH
6038: LD_INT 51
6040: PPUSH
6041: LD_INT 86
6043: PPUSH
6044: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6048: LD_EXP 16
6052: PPUSH
6053: LD_EXP 18
6057: PPUSH
6058: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6062: LD_EXP 18
6066: PUSH
6067: LD_EXP 19
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PPUSH
6076: LD_EXP 16
6080: PPUSH
6081: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6085: LD_EXP 18
6089: PPUSH
6090: LD_STRING DG-camp-1a
6092: PPUSH
6093: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6097: LD_EXP 16
6101: PPUSH
6102: LD_STRING DH-camp-1a
6104: PPUSH
6105: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6116: LD_EXP 19
6120: PPUSH
6121: LD_EXP 17
6125: PPUSH
6126: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6130: LD_EXP 19
6134: PPUSH
6135: LD_STRING DM-camp-1a
6137: PPUSH
6138: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6142: LD_EXP 17
6146: PPUSH
6147: LD_INT 52
6149: PPUSH
6150: LD_INT 90
6152: PPUSH
6153: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6157: LD_EXP 19
6161: PPUSH
6162: LD_EXP 16
6166: PPUSH
6167: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6171: LD_EXP 18
6175: PPUSH
6176: LD_STRING DG-camp-2a
6178: PPUSH
6179: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6183: LD_EXP 16
6187: PPUSH
6188: LD_STRING DH-camp-2a
6190: PPUSH
6191: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6195: LD_EXP 19
6199: PPUSH
6200: LD_STRING DM-camp-2a
6202: PPUSH
6203: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6207: LD_INT 35
6209: PPUSH
6210: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6214: LD_EXP 17
6218: PPUSH
6219: LD_EXP 16
6223: PPUSH
6224: CALL_OW 296
6228: PUSH
6229: LD_INT 10
6231: LESS
6232: IFFALSE 6207
// AddComTurnUnit ( Olaf , Heike ) ;
6234: LD_EXP 17
6238: PPUSH
6239: LD_EXP 16
6243: PPUSH
6244: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6248: LD_EXP 19
6252: PPUSH
6253: LD_EXP 16
6257: PPUSH
6258: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6262: LD_EXP 17
6266: PPUSH
6267: LD_STRING DO-camp-2a
6269: PPUSH
6270: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6274: LD_EXP 16
6278: PPUSH
6279: LD_EXP 17
6283: PPUSH
6284: CALL_OW 119
// if russianSpotted then
6288: LD_EXP 9
6292: IFFALSE 6332
// begin Say ( Heike , DH-camp-2aa ) ;
6294: LD_EXP 16
6298: PPUSH
6299: LD_STRING DH-camp-2aa
6301: PPUSH
6302: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6306: LD_EXP 18
6310: PPUSH
6311: LD_STRING DG-camp-2aa
6313: PPUSH
6314: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6318: LD_EXP 19
6322: PPUSH
6323: LD_STRING DM-camp-2aa
6325: PPUSH
6326: CALL_OW 88
// end else
6330: GO 6356
// begin Say ( Heike , DH-camp-2ab ) ;
6332: LD_EXP 16
6336: PPUSH
6337: LD_STRING DH-camp-2ab
6339: PPUSH
6340: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6344: LD_EXP 19
6348: PPUSH
6349: LD_STRING DM-camp-2ab
6351: PPUSH
6352: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6356: LD_EXP 16
6360: PPUSH
6361: LD_STRING DH-camp-3a
6363: PPUSH
6364: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6368: LD_EXP 17
6372: PPUSH
6373: LD_STRING DO-camp-3a
6375: PPUSH
6376: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6380: LD_EXP 18
6384: PPUSH
6385: LD_STRING DG-camp-3a
6387: PPUSH
6388: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6392: LD_EXP 16
6396: PPUSH
6397: LD_STRING DH-camp-4aa
6399: PPUSH
6400: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6404: LD_EXP 19
6408: PPUSH
6409: LD_STRING DM-camp-4aa
6411: PPUSH
6412: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6416: LD_EXP 17
6420: PPUSH
6421: LD_STRING DO-camp-4a
6423: PPUSH
6424: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6428: LD_EXP 17
6432: PPUSH
6433: LD_STRING DO-camp-3
6435: PPUSH
6436: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6440: LD_EXP 17
6444: PPUSH
6445: LD_STRING DO-camp-4
6447: PPUSH
6448: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6452: LD_EXP 18
6456: PPUSH
6457: LD_EXP 17
6461: PPUSH
6462: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6466: LD_EXP 18
6470: PPUSH
6471: LD_STRING DG-camp-4
6473: PPUSH
6474: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6478: LD_EXP 16
6482: PPUSH
6483: LD_EXP 18
6487: PPUSH
6488: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6492: LD_EXP 16
6496: PPUSH
6497: LD_STRING DH-camp-4
6499: PPUSH
6500: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6504: LD_EXP 19
6508: PUSH
6509: LD_EXP 17
6513: PUSH
6514: LD_EXP 18
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PPUSH
6524: LD_EXP 16
6528: PPUSH
6529: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6533: LD_EXP 18
6537: PPUSH
6538: LD_STRING DG-camp-5
6540: PPUSH
6541: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6545: LD_EXP 18
6549: PPUSH
6550: LD_STRING DG-camp-6
6552: PPUSH
6553: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6557: LD_EXP 16
6561: PPUSH
6562: LD_STRING DH-camp-6
6564: PPUSH
6565: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6569: LD_EXP 18
6573: PPUSH
6574: LD_STRING DG-camp-7
6576: PPUSH
6577: CALL_OW 88
// if DogTagFound then
6581: LD_EXP 6
6585: IFFALSE 6625
// begin Say ( Heike , DH-quest-1a ) ;
6587: LD_EXP 16
6591: PPUSH
6592: LD_STRING DH-quest-1a
6594: PPUSH
6595: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6599: LD_EXP 18
6603: PPUSH
6604: LD_STRING DG-quest-1a
6606: PPUSH
6607: CALL_OW 88
// mercenariesQuestDone := true ;
6611: LD_ADDR_EXP 11
6615: PUSH
6616: LD_INT 1
6618: ST_TO_ADDR
// InGameOff ;
6619: CALL_OW 9
// end else
6623: GO 6791
// begin Say ( Heike , DH-camp-7 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_STRING DH-camp-7
6632: PPUSH
6633: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6637: LD_EXP 16
6641: PPUSH
6642: CALL_OW 256
6646: PUSH
6647: LD_INT 1000
6649: LESS
6650: IFFALSE 6742
// begin Say ( Olaf , DO-heal-1 ) ;
6652: LD_EXP 17
6656: PPUSH
6657: LD_STRING DO-heal-1
6659: PPUSH
6660: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6664: LD_EXP 16
6668: PPUSH
6669: LD_INT 51
6671: PPUSH
6672: LD_INT 88
6674: PPUSH
6675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6679: LD_INT 35
6681: PPUSH
6682: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6686: LD_EXP 16
6690: PPUSH
6691: LD_EXP 17
6695: PPUSH
6696: CALL_OW 296
6700: PUSH
6701: LD_INT 4
6703: LESS
6704: PUSH
6705: LD_EXP 16
6709: PPUSH
6710: LD_INT 51
6712: PPUSH
6713: LD_INT 88
6715: PPUSH
6716: CALL_OW 307
6720: OR
6721: IFFALSE 6679
// SetLives ( Heike , 1000 ) ;
6723: LD_EXP 16
6727: PPUSH
6728: LD_INT 1000
6730: PPUSH
6731: CALL_OW 234
// wait ( 0 0$2 ) ;
6735: LD_INT 70
6737: PPUSH
6738: CALL_OW 67
// end ; InGameOff ;
6742: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6746: LD_EXP 17
6750: PUSH
6751: LD_EXP 18
6755: PUSH
6756: LD_EXP 19
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: PPUSH
6766: LD_INT 53
6768: PPUSH
6769: LD_INT 89
6771: PPUSH
6772: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6776: LD_STRING O5_proof_cont
6778: PPUSH
6779: CALL_OW 337
// mercenariesQuestReady := true ;
6783: LD_ADDR_EXP 10
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6791: LD_EXP 10
6795: NOT
6796: IFFALSE 6800
// exit ;
6798: GO 7160
// wait ( 0 0$35 ) ;
6800: LD_INT 1225
6802: PPUSH
6803: CALL_OW 67
// driver := PreparePatrolTank ;
6807: LD_ADDR_VAR 0 2
6811: PUSH
6812: CALL 2821 0 0
6816: ST_TO_ADDR
// if not driver then
6817: LD_VAR 0 2
6821: NOT
6822: IFFALSE 6826
// exit ;
6824: GO 7160
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6826: LD_INT 2
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: LD_INT 1
6837: PPUSH
6838: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6842: LD_ADDR_VAR 0 3
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL_OW 310
6856: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6857: LD_VAR 0 3
6861: PPUSH
6862: LD_INT 500
6864: PPUSH
6865: CALL_OW 234
// SetLives ( driver , 450 ) ;
6869: LD_VAR 0 2
6873: PPUSH
6874: LD_INT 450
6876: PPUSH
6877: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_INT 59
6888: PPUSH
6889: LD_INT 60
6891: PPUSH
6892: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6896: LD_INT 35
6898: PPUSH
6899: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6903: LD_VAR 0 3
6907: PPUSH
6908: LD_INT 59
6910: PPUSH
6911: LD_INT 60
6913: PPUSH
6914: CALL_OW 307
6918: IFFALSE 6896
// if not See ( 1 , Heike ) then
6920: LD_INT 1
6922: PPUSH
6923: LD_EXP 16
6927: PPUSH
6928: CALL_OW 292
6932: NOT
6933: IFFALSE 7057
// begin if Difficulty < 3 then
6935: LD_OWVAR 67
6939: PUSH
6940: LD_INT 3
6942: LESS
6943: IFFALSE 6961
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6945: LD_INT 59
6947: PPUSH
6948: LD_INT 60
6950: PPUSH
6951: LD_INT 2
6953: PPUSH
6954: LD_INT 6
6956: PPUSH
6957: CALL_OW 330
// ComExitVehicle ( driver ) ;
6961: LD_VAR 0 2
6965: PPUSH
6966: CALL_OW 121
// wait ( 0 0$1 ) ;
6970: LD_INT 35
6972: PPUSH
6973: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6977: LD_VAR 0 2
6981: PPUSH
6982: LD_INT 58
6984: PPUSH
6985: LD_INT 54
6987: PPUSH
6988: CALL_OW 171
// wait ( 0 0$1 ) ;
6992: LD_INT 35
6994: PPUSH
6995: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6999: LD_VAR 0 2
7003: PPUSH
7004: LD_INT 57
7006: PPUSH
7007: LD_INT 53
7009: PPUSH
7010: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 350
7021: PPUSH
7022: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
7026: LD_VAR 0 2
7030: PPUSH
7031: LD_VAR 0 3
7035: PPUSH
7036: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 171
// end else
7055: GO 7072
// begin ComMoveXY ( driver , 107 , 118 ) ;
7057: LD_VAR 0 2
7061: PPUSH
7062: LD_INT 107
7064: PPUSH
7065: LD_INT 118
7067: PPUSH
7068: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7072: LD_INT 35
7074: PPUSH
7075: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7079: LD_VAR 0 3
7083: PPUSH
7084: LD_INT 107
7086: PPUSH
7087: LD_INT 118
7089: PPUSH
7090: CALL_OW 307
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 301
7104: OR
7105: IFFALSE 7072
// if IsDead ( driver [ 1 ] ) then
7107: LD_VAR 0 2
7111: PUSH
7112: LD_INT 1
7114: ARRAY
7115: PPUSH
7116: CALL_OW 301
7120: IFFALSE 7124
// exit ;
7122: GO 7160
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 22
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: PUSH
7144: FOR_IN
7145: IFFALSE 7158
// RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
7156: GO 7144
7158: POP
7159: POP
// end ;
7160: PPOPN 3
7162: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7163: LD_INT 10
7165: PPUSH
7166: LD_INT 22
7168: PUSH
7169: LD_INT 2
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 21
7178: PUSH
7179: LD_INT 2
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PPUSH
7190: CALL_OW 70
7194: IFFALSE 7268
7196: GO 7198
7198: DISABLE
// begin InGameOn ;
7199: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7203: LD_EXP 17
7207: PUSH
7208: LD_EXP 19
7212: PUSH
7213: LD_EXP 18
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: PPUSH
7223: LD_EXP 16
7227: PPUSH
7228: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7232: LD_EXP 19
7236: PPUSH
7237: LD_STRING DM-quest-1
7239: PPUSH
7240: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7244: LD_EXP 18
7248: PPUSH
7249: LD_STRING DG-quest-1
7251: PPUSH
7252: CALL_OW 88
// InGameOff ;
7256: CALL_OW 9
// mercenariesQuestDone := true ;
7260: LD_ADDR_EXP 11
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// end ;
7268: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7269: LD_EXP 16
7273: PPUSH
7274: LD_INT 10
7276: PPUSH
7277: CALL_OW 308
7281: PUSH
7282: LD_EXP 6
7286: AND
7287: PUSH
7288: LD_EXP 10
7292: AND
7293: PUSH
7294: LD_INT 10
7296: PPUSH
7297: LD_INT 22
7299: PUSH
7300: LD_INT 2
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 21
7309: PUSH
7310: LD_INT 2
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 70
7325: NOT
7326: AND
7327: IFFALSE 7499
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
// begin InGameOn ;
7335: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7339: LD_EXP 17
7343: PUSH
7344: LD_EXP 19
7348: PUSH
7349: LD_EXP 18
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PPUSH
7359: LD_EXP 16
7363: PPUSH
7364: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7368: LD_EXP 16
7372: PPUSH
7373: LD_INT 54
7375: PPUSH
7376: LD_INT 86
7378: PPUSH
7379: CALL_OW 111
// p := p + 1 ;
7383: LD_ADDR_VAR 0 1
7387: PUSH
7388: LD_VAR 0 1
7392: PUSH
7393: LD_INT 1
7395: PLUS
7396: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7397: LD_INT 35
7399: PPUSH
7400: CALL_OW 67
// p := p + 1 ;
7404: LD_ADDR_VAR 0 1
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: LD_INT 1
7416: PLUS
7417: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7418: LD_EXP 16
7422: PPUSH
7423: LD_EXP 18
7427: PPUSH
7428: CALL_OW 296
7432: PUSH
7433: LD_INT 4
7435: LESS
7436: PUSH
7437: LD_VAR 0 1
7441: PUSH
7442: LD_INT 5
7444: GREATER
7445: OR
7446: IFFALSE 7397
// Say ( Mike , DM-quest-1 ) ;
7448: LD_EXP 19
7452: PPUSH
7453: LD_STRING DM-quest-1
7455: PPUSH
7456: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7460: LD_EXP 18
7464: PPUSH
7465: LD_STRING DG-quest-1
7467: PPUSH
7468: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7472: LD_EXP 16
7476: PPUSH
7477: LD_INT 55
7479: PPUSH
7480: LD_INT 87
7482: PPUSH
7483: CALL_OW 111
// InGameOff ;
7487: CALL_OW 9
// mercenariesQuestDone := true ;
7491: LD_ADDR_EXP 11
7495: PUSH
7496: LD_INT 1
7498: ST_TO_ADDR
// end ;
7499: PPOPN 1
7501: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7502: LD_EXP 16
7506: PUSH
7507: LD_INT 55
7509: PUSH
7510: EMPTY
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IN
7518: IFFALSE 7558
7520: GO 7522
7522: DISABLE
// begin if Difficulty < 3 then
7523: LD_OWVAR 67
7527: PUSH
7528: LD_INT 3
7530: LESS
7531: IFFALSE 7546
// RemoveSeeing ( 59 , 60 , 2 ) ;
7533: LD_INT 59
7535: PPUSH
7536: LD_INT 60
7538: PPUSH
7539: LD_INT 2
7541: PPUSH
7542: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7546: LD_EXP 16
7550: PPUSH
7551: LD_STRING DH-driver
7553: PPUSH
7554: CALL_OW 88
// end ;
7558: END
// every 0 0$1 trigger mercenariesQuestDone do
7559: LD_EXP 11
7563: IFFALSE 8051
7565: GO 7567
7567: DISABLE
// begin if mercenariesQuestReady then
7568: LD_EXP 10
7572: IFFALSE 7581
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7574: LD_STRING O5_proof_cont_out
7576: PPUSH
7577: CALL_OW 337
// InGameOn ;
7581: CALL_OW 8
// if IsInUnit ( Heike ) then
7585: LD_EXP 16
7589: PPUSH
7590: CALL_OW 310
7594: IFFALSE 7605
// ComExitVehicle ( Heike ) ;
7596: LD_EXP 16
7600: PPUSH
7601: CALL_OW 121
// wait ( 3 ) ;
7605: LD_INT 3
7607: PPUSH
7608: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7612: LD_EXP 16
7616: PPUSH
7617: LD_EXP 18
7621: PPUSH
7622: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7626: LD_EXP 17
7630: PUSH
7631: LD_EXP 19
7635: PUSH
7636: LD_EXP 18
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: PPUSH
7646: LD_EXP 16
7650: PPUSH
7651: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7655: LD_EXP 16
7659: PPUSH
7660: LD_STRING DH-quest-done-1
7662: PPUSH
7663: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7667: LD_EXP 19
7671: PPUSH
7672: LD_STRING DM-quest-done-1
7674: PPUSH
7675: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7679: LD_EXP 18
7683: PPUSH
7684: LD_STRING DG-quest-done-1
7686: PPUSH
7687: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7691: LD_EXP 16
7695: PPUSH
7696: LD_EXP 17
7700: PPUSH
7701: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7705: LD_EXP 16
7709: PPUSH
7710: LD_STRING DH-quest-done-2
7712: PPUSH
7713: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7717: LD_EXP 17
7721: PPUSH
7722: LD_STRING DO-quest-done-2
7724: PPUSH
7725: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7729: LD_EXP 17
7733: PPUSH
7734: LD_STRING DO-quest-done-3
7736: PPUSH
7737: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7741: LD_EXP 18
7745: PPUSH
7746: LD_INT 51
7748: PPUSH
7749: LD_INT 90
7751: PPUSH
7752: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7756: LD_EXP 18
7760: PPUSH
7761: LD_INT 50
7763: PPUSH
7764: LD_INT 89
7766: PPUSH
7767: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7771: LD_EXP 16
7775: PPUSH
7776: LD_EXP 18
7780: PPUSH
7781: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7785: LD_EXP 18
7789: PPUSH
7790: LD_STRING DG-quest-done-4
7792: PPUSH
7793: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7797: LD_EXP 18
7801: PPUSH
7802: LD_EXP 16
7806: PPUSH
7807: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7811: LD_EXP 16
7815: PPUSH
7816: CALL_OW 256
7820: PUSH
7821: LD_INT 1000
7823: LESS
7824: IFFALSE 7916
// begin Say ( Olaf , DO-heal-1 ) ;
7826: LD_EXP 17
7830: PPUSH
7831: LD_STRING DO-heal-1
7833: PPUSH
7834: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7838: LD_EXP 16
7842: PPUSH
7843: LD_INT 51
7845: PPUSH
7846: LD_INT 88
7848: PPUSH
7849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7853: LD_INT 35
7855: PPUSH
7856: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7860: LD_EXP 16
7864: PPUSH
7865: LD_EXP 17
7869: PPUSH
7870: CALL_OW 296
7874: PUSH
7875: LD_INT 4
7877: LESS
7878: PUSH
7879: LD_EXP 16
7883: PPUSH
7884: LD_INT 51
7886: PPUSH
7887: LD_INT 88
7889: PPUSH
7890: CALL_OW 307
7894: OR
7895: IFFALSE 7853
// SetLives ( Heike , 1000 ) ;
7897: LD_EXP 16
7901: PPUSH
7902: LD_INT 1000
7904: PPUSH
7905: CALL_OW 234
// wait ( 0 0$2 ) ;
7909: LD_INT 70
7911: PPUSH
7912: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7916: LD_EXP 16
7920: PPUSH
7921: LD_STRING DH-quest-done-4
7923: PPUSH
7924: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7928: LD_EXP 17
7932: PPUSH
7933: LD_STRING DO-quest-done-4
7935: PPUSH
7936: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7940: LD_EXP 16
7944: PPUSH
7945: LD_EXP 17
7949: PPUSH
7950: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7954: LD_EXP 16
7958: PPUSH
7959: LD_STRING DH-quest-done-5
7961: PPUSH
7962: CALL_OW 88
// InGameOff ;
7966: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7970: LD_STRING O6_end_cont
7972: PPUSH
7973: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7977: LD_EXP 18
7981: PPUSH
7982: LD_INT 2
7984: PPUSH
7985: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7989: LD_EXP 19
7993: PPUSH
7994: LD_INT 2
7996: PPUSH
7997: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
8001: LD_INT 42
8003: PPUSH
8004: LD_INT 2
8006: PPUSH
8007: LD_INT 2
8009: PPUSH
8010: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
8014: LD_EXP 17
8018: PPUSH
8019: LD_INT 53
8021: PPUSH
8022: LD_INT 89
8024: PPUSH
8025: CALL_OW 118
// lastObjectiveActive := true ;
8029: LD_ADDR_EXP 12
8033: PUSH
8034: LD_INT 1
8036: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 1
8042: PPUSH
8043: CALL_OW 424
// PreparePrison ;
8047: CALL 1164 0 0
// end ;
8051: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8052: LD_INT 22
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 91
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: LD_INT 4
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: IFFALSE 8242
8086: GO 8088
8088: DISABLE
8089: LD_INT 0
8091: PPUSH
8092: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8093: LD_INT 245
8095: PUSH
8096: LD_INT 210
8098: PUSH
8099: LD_INT 210
8101: PUSH
8102: LD_INT 175
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: LD_OWVAR 67
8115: ARRAY
8116: PPUSH
8117: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_INT 22
8128: PUSH
8129: LD_INT 3
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 25
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 54
8148: PUSH
8149: EMPTY
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: PPUSH
8157: CALL_OW 69
8161: ST_TO_ADDR
// if not tmp then
8162: LD_VAR 0 2
8166: NOT
8167: IFFALSE 8171
// exit ;
8169: GO 8242
// for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8210
// begin ComExitBuilding ( i ) ;
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 121
8200: PPUSH
8201: LD_INT 22
8203: PPUSH
8204: CALL_OW 174
// end ;
8208: GO 8181
8210: POP
8211: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8212: LD_EXP 23
8216: PPUSH
8217: LD_INT 121
8219: PPUSH
8220: LD_INT 22
8222: PPUSH
8223: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8227: LD_EXP 24
8231: PPUSH
8232: LD_INT 121
8234: PPUSH
8235: LD_INT 22
8237: PPUSH
8238: CALL_OW 114
// end ;
8242: PPOPN 2
8244: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8245: LD_INT 22
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 91
8257: PUSH
8258: LD_INT 8
8260: PUSH
8261: LD_INT 4
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PPUSH
8273: CALL_OW 69
8277: IFFALSE 8435
8279: GO 8281
8281: DISABLE
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8286: LD_INT 315
8288: PUSH
8289: LD_INT 280
8291: PUSH
8292: LD_INT 245
8294: PUSH
8295: LD_INT 210
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: LD_OWVAR 67
8308: ARRAY
8309: PPUSH
8310: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_INT 3
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 54
8341: PUSH
8342: EMPTY
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: PPUSH
8350: CALL_OW 69
8354: ST_TO_ADDR
// if not tmp then
8355: LD_VAR 0 2
8359: NOT
8360: IFFALSE 8364
// exit ;
8362: GO 8435
// for i in tmp do
8364: LD_ADDR_VAR 0 1
8368: PUSH
8369: LD_VAR 0 2
8373: PUSH
8374: FOR_IN
8375: IFFALSE 8403
// begin ComExitBuilding ( i ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8386: LD_VAR 0 1
8390: PPUSH
8391: LD_INT 142
8393: PPUSH
8394: LD_INT 71
8396: PPUSH
8397: CALL_OW 174
// end ;
8401: GO 8374
8403: POP
8404: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8405: LD_EXP 23
8409: PPUSH
8410: LD_INT 142
8412: PPUSH
8413: LD_INT 71
8415: PPUSH
8416: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8420: LD_EXP 24
8424: PPUSH
8425: LD_INT 142
8427: PPUSH
8428: LD_INT 71
8430: PPUSH
8431: CALL_OW 114
// end ;
8435: PPOPN 2
8437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8438: LD_INT 22
8440: PUSH
8441: LD_INT 2
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 2
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 58
8460: PUSH
8461: EMPTY
8462: LIST
8463: PUSH
8464: LD_INT 3
8466: PUSH
8467: LD_INT 24
8469: PUSH
8470: LD_INT 1000
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 91
8483: PUSH
8484: LD_EXP 17
8488: PUSH
8489: LD_INT 8
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PPUSH
8504: CALL_OW 69
8508: PUSH
8509: LD_EXP 17
8513: PPUSH
8514: CALL_OW 302
8518: AND
8519: IFFALSE 8633
8521: GO 8523
8523: DISABLE
// begin enable ;
8524: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8525: LD_EXP 17
8529: PPUSH
8530: LD_INT 22
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 21
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 58
8552: PUSH
8553: EMPTY
8554: LIST
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 24
8561: PUSH
8562: LD_INT 1000
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PUSH
8573: LD_INT 91
8575: PUSH
8576: LD_EXP 17
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: PPUSH
8596: CALL_OW 69
8600: PUSH
8601: LD_INT 1
8603: ARRAY
8604: PPUSH
8605: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8609: LD_EXP 17
8613: PPUSH
8614: LD_INT 52
8616: PPUSH
8617: LD_INT 90
8619: PPUSH
8620: CALL_OW 171
// AddComHold ( Olaf ) ;
8624: LD_EXP 17
8628: PPUSH
8629: CALL_OW 200
// end ;
8633: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8634: LD_EXP 12
8638: PUSH
8639: LD_INT 2
8641: PPUSH
8642: CALL_OW 302
8646: NOT
8647: AND
8648: PUSH
8649: LD_OWVAR 67
8653: PUSH
8654: LD_INT 1
8656: EQUAL
8657: AND
8658: PUSH
8659: LD_EXP 13
8663: NOT
8664: AND
8665: IFFALSE 8682
8667: GO 8669
8669: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8670: LD_EXP 16
8674: PPUSH
8675: LD_STRING DH-prison-missing
8677: PPUSH
8678: CALL_OW 88
// end ;
8682: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8683: LD_EXP 12
8687: PUSH
8688: LD_INT 8
8690: PPUSH
8691: CALL_OW 302
8695: NOT
8696: AND
8697: PUSH
8698: LD_OWVAR 67
8702: PUSH
8703: LD_INT 1
8705: GREATER
8706: AND
8707: PUSH
8708: LD_EXP 13
8712: NOT
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8719: LD_EXP 16
8723: PPUSH
8724: LD_STRING DH-prison-missing
8726: PPUSH
8727: CALL_OW 88
// end ;
8731: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8732: LD_EXP 12
8736: PUSH
8737: LD_INT 3
8739: PPUSH
8740: CALL_OW 302
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 13
8751: NOT
8752: AND
8753: IFFALSE 8770
8755: GO 8757
8757: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8758: LD_EXP 16
8762: PPUSH
8763: LD_STRING DH-prison-missing-a
8765: PPUSH
8766: CALL_OW 88
// end ;
8770: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8771: LD_EXP 12
8775: PUSH
8776: LD_INT 10
8778: PPUSH
8779: CALL_OW 302
8783: NOT
8784: AND
8785: PUSH
8786: LD_EXP 13
8790: NOT
8791: AND
8792: IFFALSE 8809
8794: GO 8796
8796: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8797: LD_EXP 16
8801: PPUSH
8802: LD_STRING DH-prison-missing-a
8804: PPUSH
8805: CALL_OW 88
// end ;
8809: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8810: LD_EXP 13
8814: NOT
8815: PUSH
8816: LD_EXP 12
8820: AND
8821: PUSH
8822: LD_INT 2
8824: PPUSH
8825: LD_EXP 20
8829: PPUSH
8830: CALL_OW 292
8834: AND
8835: IFFALSE 8922
8837: GO 8839
8839: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8840: LD_EXP 20
8844: PPUSH
8845: LD_EXP 16
8849: PPUSH
8850: CALL_OW 119
// DialogueOn ;
8854: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8858: LD_EXP 20
8862: PPUSH
8863: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8867: LD_EXP 20
8871: PPUSH
8872: LD_STRING DK-prison-found
8874: PPUSH
8875: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8879: LD_EXP 16
8883: PPUSH
8884: LD_STRING DH-prison-found
8886: PPUSH
8887: CALL_OW 88
// DialogueOff ;
8891: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8895: LD_EXP 20
8899: PPUSH
8900: LD_INT 2
8902: PPUSH
8903: CALL_OW 235
// prisonFound := true ;
8907: LD_ADDR_EXP 13
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8915: LD_STRING O6_prison_out
8917: PPUSH
8918: CALL_OW 337
// end ;
8922: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8923: LD_EXP 16
8927: PPUSH
8928: CALL_OW 256
8932: PUSH
8933: LD_INT 500
8935: LESS
8936: IFFALSE 8949
8938: GO 8940
8940: DISABLE
// heikeHurt := true ;
8941: LD_ADDR_EXP 14
8945: PUSH
8946: LD_INT 1
8948: ST_TO_ADDR
8949: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8950: LD_INT 22
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 21
8962: PUSH
8963: LD_INT 3
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PPUSH
8974: CALL_OW 69
8978: IFFALSE 9294
8980: GO 8982
8982: DISABLE
8983: LD_INT 0
8985: PPUSH
8986: PPUSH
8987: PPUSH
// begin uc_side := 3 ;
8988: LD_ADDR_OWVAR 20
8992: PUSH
8993: LD_INT 3
8995: ST_TO_ADDR
// uc_nation := 3 ;
8996: LD_ADDR_OWVAR 21
9000: PUSH
9001: LD_INT 3
9003: ST_TO_ADDR
// tmp := [ ] ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// for i := 1 to 5 do
9011: LD_ADDR_VAR 0 1
9015: PUSH
9016: DOUBLE
9017: LD_INT 1
9019: DEC
9020: ST_TO_ADDR
9021: LD_INT 5
9023: PUSH
9024: FOR_TO
9025: IFFALSE 9133
// begin PrepareHuman ( false , 1 , 4 ) ;
9027: LD_INT 0
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: LD_INT 4
9035: PPUSH
9036: CALL_OW 380
// un := CreateHuman ;
9040: LD_ADDR_VAR 0 3
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9050: LD_VAR 0 3
9054: PPUSH
9055: LD_INT 4
9057: PPUSH
9058: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9062: LD_VAR 0 3
9066: PPUSH
9067: LD_INT 158
9069: PPUSH
9070: LD_INT 80
9072: PPUSH
9073: LD_INT 0
9075: PPUSH
9076: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_INT 147
9087: PPUSH
9088: LD_INT 75
9090: PPUSH
9091: CALL_OW 111
// wait ( 0 0$1 ) ;
9095: LD_INT 35
9097: PPUSH
9098: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_VAR 0 2
9111: PPUSH
9112: LD_VAR 0 2
9116: PUSH
9117: LD_INT 1
9119: PLUS
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: CALL_OW 1
9130: ST_TO_ADDR
// end ;
9131: GO 9024
9133: POP
9134: POP
// repeat wait ( 0 0$1 ) ;
9135: LD_INT 35
9137: PPUSH
9138: CALL_OW 67
// for i in tmp do
9142: LD_ADDR_VAR 0 1
9146: PUSH
9147: LD_VAR 0 2
9151: PUSH
9152: FOR_IN
9153: IFFALSE 9274
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9155: LD_ADDR_VAR 0 3
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PPUSH
9175: LD_VAR 0 1
9179: PPUSH
9180: CALL_OW 74
9184: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 250
9198: PPUSH
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: CALL_OW 251
9212: PPUSH
9213: CALL_OW 428
9217: IFFALSE 9258
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_VAR 0 3
9228: PUSH
9229: LD_INT 1
9231: ARRAY
9232: PPUSH
9233: CALL_OW 250
9237: PPUSH
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 1
9245: ARRAY
9246: PPUSH
9247: CALL_OW 251
9251: PPUSH
9252: CALL_OW 114
9256: GO 9272
// ComAttackUnit ( i , Heike ) ;
9258: LD_VAR 0 1
9262: PPUSH
9263: LD_EXP 16
9267: PPUSH
9268: CALL_OW 115
// end ;
9272: GO 9152
9274: POP
9275: POP
// until IsDead ( Heike ) or not tmp ;
9276: LD_EXP 16
9280: PPUSH
9281: CALL_OW 301
9285: PUSH
9286: LD_VAR 0 2
9290: NOT
9291: OR
9292: IFFALSE 9135
// end ;
9294: PPOPN 3
9296: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9297: LD_EXP 12
9301: PUSH
9302: LD_EXP 16
9306: PPUSH
9307: CALL_OW 302
9311: AND
9312: PUSH
9313: LD_INT 1
9315: PPUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 50
9338: PUSH
9339: EMPTY
9340: LIST
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 71
9351: PUSH
9352: LD_INT 0
9354: EQUAL
9355: AND
9356: IFFALSE 9755
9358: GO 9360
9360: DISABLE
9361: LD_INT 0
9363: PPUSH
// begin if not heikeHurt then
9364: LD_EXP 14
9368: NOT
9369: IFFALSE 9378
// SetAchievement ( ACH_INVINCIBLE ) ;
9371: LD_STRING ACH_INVINCIBLE
9373: PPUSH
9374: CALL_OW 543
// if tick <= 6 6$00 then
9378: LD_OWVAR 1
9382: PUSH
9383: LD_INT 12600
9385: LESSEQUAL
9386: IFFALSE 9395
// SetAchievement ( ACH_HSPEED_1 ) ;
9388: LD_STRING ACH_HSPEED_1
9390: PPUSH
9391: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9395: LD_STRING enableBioCharacter(BIO_GIVI)
9397: PPUSH
9398: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9402: LD_STRING enableBioCharacter(BIO_MIKE)
9404: PPUSH
9405: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9409: LD_STRING enableBioCharacter(BIO_OLAF)
9411: PPUSH
9412: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 50
9443: PUSH
9444: EMPTY
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 69
9456: ST_TO_ADDR
// if Kamil in tmp then
9457: LD_EXP 20
9461: PUSH
9462: LD_VAR 0 1
9466: IN
9467: IFFALSE 9476
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
9469: LD_STRING enableBioCharacter(BIO_KAMI)
9471: PPUSH
9472: CALL_OW 559
// if prisonFound then
9476: LD_EXP 13
9480: IFFALSE 9494
// AddMedal ( med1 , 1 ) else
9482: LD_STRING med1
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 101
9492: GO 9505
// AddMedal ( med1 , - 1 ) ;
9494: LD_STRING med1
9496: PPUSH
9497: LD_INT 1
9499: NEG
9500: PPUSH
9501: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9505: LD_VAR 0 1
9509: PUSH
9510: LD_INT 3
9512: LESS
9513: PUSH
9514: LD_EXP 13
9518: NOT
9519: AND
9520: PUSH
9521: LD_VAR 0 1
9525: PUSH
9526: LD_INT 4
9528: LESS
9529: PUSH
9530: LD_EXP 13
9534: AND
9535: OR
9536: IFFALSE 9551
// AddMedal ( med2 , - 1 ) else
9538: LD_STRING med2
9540: PPUSH
9541: LD_INT 1
9543: NEG
9544: PPUSH
9545: CALL_OW 101
9549: GO 9561
// AddMedal ( med2 , 1 ) ;
9551: LD_STRING med2
9553: PPUSH
9554: LD_INT 1
9556: PPUSH
9557: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9561: LD_EXP 13
9565: PUSH
9566: LD_EXP 4
9570: AND
9571: PUSH
9572: LD_VAR 0 1
9576: PUSH
9577: LD_INT 4
9579: GREATEREQUAL
9580: AND
9581: IFFALSE 9595
// AddMedal ( med3 , 1 ) else
9583: LD_STRING med3
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: CALL_OW 101
9593: GO 9606
// AddMedal ( med3 , - 1 ) ;
9595: LD_STRING med3
9597: PPUSH
9598: LD_INT 1
9600: NEG
9601: PPUSH
9602: CALL_OW 101
// GiveMedals ( MAIN ) ;
9606: LD_STRING MAIN
9608: PPUSH
9609: CALL_OW 102
// RewardPeople ( tmp ) ;
9613: LD_VAR 0 1
9617: PPUSH
9618: CALL_OW 43
// SaveVariable ( johnnySaved , 01_JohnnySaved ) ;
9622: LD_EXP 4
9626: PPUSH
9627: LD_STRING 01_JohnnySaved
9629: PPUSH
9630: CALL_OW 39
// SaveCharacters ( Heike , 01_Heike ) ;
9634: LD_EXP 16
9638: PPUSH
9639: LD_STRING 01_Heike
9641: PPUSH
9642: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9646: LD_EXP 18
9650: PPUSH
9651: CALL_OW 302
9655: PUSH
9656: LD_EXP 18
9660: PUSH
9661: LD_VAR 0 1
9665: IN
9666: AND
9667: IFFALSE 9681
// SaveCharacters ( Givi , 01_Givi ) ;
9669: LD_EXP 18
9673: PPUSH
9674: LD_STRING 01_Givi
9676: PPUSH
9677: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9681: LD_EXP 19
9685: PPUSH
9686: CALL_OW 302
9690: PUSH
9691: LD_EXP 19
9695: PUSH
9696: LD_VAR 0 1
9700: IN
9701: AND
9702: IFFALSE 9716
// SaveCharacters ( Mike , 01_Mike ) ;
9704: LD_EXP 19
9708: PPUSH
9709: LD_STRING 01_Mike
9711: PPUSH
9712: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9716: LD_EXP 20
9720: PPUSH
9721: CALL_OW 302
9725: PUSH
9726: LD_EXP 20
9730: PUSH
9731: LD_VAR 0 1
9735: IN
9736: AND
9737: IFFALSE 9751
// SaveCharacters ( Kamil , 01_Kamil ) ;
9739: LD_EXP 20
9743: PPUSH
9744: LD_STRING 01_Kamil
9746: PPUSH
9747: CALL_OW 38
// YouWin ;
9751: CALL_OW 103
// end ; end_of_file
9755: PPOPN 1
9757: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9758: LD_VAR 0 1
9762: PUSH
9763: LD_EXP 16
9767: EQUAL
9768: IFFALSE 9777
// YouLost ( Heike ) ;
9770: LD_STRING Heike
9772: PPUSH
9773: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9777: LD_VAR 0 1
9781: PUSH
9782: LD_INT 22
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 25
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 69
9810: IN
9811: IFFALSE 9917
// begin if un in russianPatrol then
9813: LD_VAR 0 1
9817: PUSH
9818: LD_EXP 21
9822: IN
9823: IFFALSE 9841
// russianPatrol := russianPatrol diff un ;
9825: LD_ADDR_EXP 21
9829: PUSH
9830: LD_EXP 21
9834: PUSH
9835: LD_VAR 0 1
9839: DIFF
9840: ST_TO_ADDR
// if un in russianForestPatrol then
9841: LD_VAR 0 1
9845: PUSH
9846: LD_EXP 22
9850: IN
9851: IFFALSE 9869
// russianForestPatrol := russianForestPatrol diff un ;
9853: LD_ADDR_EXP 22
9857: PUSH
9858: LD_EXP 22
9862: PUSH
9863: LD_VAR 0 1
9867: DIFF
9868: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9869: LD_ADDR_EXP 5
9873: PUSH
9874: LD_EXP 5
9878: PPUSH
9879: LD_EXP 5
9883: PUSH
9884: LD_INT 1
9886: PLUS
9887: PPUSH
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 250
9897: PUSH
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 251
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PPUSH
9912: CALL_OW 1
9916: ST_TO_ADDR
// end ; end ;
9917: PPOPN 1
9919: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9920: LD_VAR 0 1
9924: PUSH
9925: LD_EXP 16
9929: EQUAL
9930: IFFALSE 9939
// YouLost ( Heike ) ;
9932: LD_STRING Heike
9934: PPUSH
9935: CALL_OW 104
// if un = Olaf then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_EXP 17
9948: EQUAL
9949: IFFALSE 9958
// YouLost ( Olaf ) ;
9951: LD_STRING Olaf
9953: PPUSH
9954: CALL_OW 104
// end ;
9958: PPOPN 1
9960: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9961: LD_VAR 0 1
9965: PUSH
9966: LD_INT 2
9968: EQUAL
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 5
9977: EQUAL
9978: AND
9979: IFFALSE 9988
// YouLost ( FriendlyFire ) ;
9981: LD_STRING FriendlyFire
9983: PPUSH
9984: CALL_OW 104
// end ; end_of_file
9988: PPOPN 2
9990: END
// export globalGameSaveCounter ; every 0 0$1 do
9991: GO 9993
9993: DISABLE
// begin enable ;
9994: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9995: LD_STRING updateTimer(
9997: PUSH
9998: LD_OWVAR 1
10002: STR
10003: PUSH
10004: LD_STRING );
10006: STR
10007: PPUSH
10008: CALL_OW 559
// end ;
10012: END
// every 0 0$1 do
10013: GO 10015
10015: DISABLE
// begin globalGameSaveCounter := 0 ;
10016: LD_ADDR_EXP 26
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10024: LD_STRING setGameSaveCounter(0)
10026: PPUSH
10027: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10031: LD_STRING initStreamRollete();
10033: PPUSH
10034: CALL_OW 559
// InitStreamMode ;
10038: CALL 11364 0 0
// DefineStreamItems ( false ) ;
10042: LD_INT 0
10044: PPUSH
10045: CALL 11828 0 1
// end ;
10049: END
// export function SOS_MapStart ( ) ; begin
10050: LD_INT 0
10052: PPUSH
// if streamModeActive then
10053: LD_EXP 27
10057: IFFALSE 10066
// DefineStreamItems ( true ) ;
10059: LD_INT 1
10061: PPUSH
10062: CALL 11828 0 1
// UpdateLuaVariables ( ) ;
10066: CALL 10083 0 0
// UpdateFactoryWaypoints ( ) ;
10070: CALL 24697 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10074: CALL 24954 0 0
// end ;
10078: LD_VAR 0 1
10082: RET
// function UpdateLuaVariables ( ) ; begin
10083: LD_INT 0
10085: PPUSH
// if globalGameSaveCounter then
10086: LD_EXP 26
10090: IFFALSE 10124
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10092: LD_ADDR_EXP 26
10096: PUSH
10097: LD_EXP 26
10101: PPUSH
10102: CALL 69584 0 1
10106: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10107: LD_STRING setGameSaveCounter(
10109: PUSH
10110: LD_EXP 26
10114: STR
10115: PUSH
10116: LD_STRING )
10118: STR
10119: PPUSH
10120: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10124: LD_STRING setGameDifficulty(
10126: PUSH
10127: LD_OWVAR 67
10131: STR
10132: PUSH
10133: LD_STRING )
10135: STR
10136: PPUSH
10137: CALL_OW 559
// end ;
10141: LD_VAR 0 1
10145: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10146: LD_INT 0
10148: PPUSH
// if p2 = stream_mode then
10149: LD_VAR 0 2
10153: PUSH
10154: LD_INT 100
10156: EQUAL
10157: IFFALSE 11160
// begin if not StreamModeActive then
10159: LD_EXP 27
10163: NOT
10164: IFFALSE 10174
// StreamModeActive := true ;
10166: LD_ADDR_EXP 27
10170: PUSH
10171: LD_INT 1
10173: ST_TO_ADDR
// if p3 = 0 then
10174: LD_VAR 0 3
10178: PUSH
10179: LD_INT 0
10181: EQUAL
10182: IFFALSE 10188
// InitStreamMode ;
10184: CALL 11364 0 0
// if p3 = 1 then
10188: LD_VAR 0 3
10192: PUSH
10193: LD_INT 1
10195: EQUAL
10196: IFFALSE 10206
// sRocket := true ;
10198: LD_ADDR_EXP 32
10202: PUSH
10203: LD_INT 1
10205: ST_TO_ADDR
// if p3 = 2 then
10206: LD_VAR 0 3
10210: PUSH
10211: LD_INT 2
10213: EQUAL
10214: IFFALSE 10224
// sSpeed := true ;
10216: LD_ADDR_EXP 31
10220: PUSH
10221: LD_INT 1
10223: ST_TO_ADDR
// if p3 = 3 then
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 3
10231: EQUAL
10232: IFFALSE 10242
// sEngine := true ;
10234: LD_ADDR_EXP 33
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// if p3 = 4 then
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 4
10249: EQUAL
10250: IFFALSE 10260
// sSpec := true ;
10252: LD_ADDR_EXP 30
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// if p3 = 5 then
10260: LD_VAR 0 3
10264: PUSH
10265: LD_INT 5
10267: EQUAL
10268: IFFALSE 10278
// sLevel := true ;
10270: LD_ADDR_EXP 34
10274: PUSH
10275: LD_INT 1
10277: ST_TO_ADDR
// if p3 = 6 then
10278: LD_VAR 0 3
10282: PUSH
10283: LD_INT 6
10285: EQUAL
10286: IFFALSE 10296
// sArmoury := true ;
10288: LD_ADDR_EXP 35
10292: PUSH
10293: LD_INT 1
10295: ST_TO_ADDR
// if p3 = 7 then
10296: LD_VAR 0 3
10300: PUSH
10301: LD_INT 7
10303: EQUAL
10304: IFFALSE 10314
// sRadar := true ;
10306: LD_ADDR_EXP 36
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// if p3 = 8 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 8
10321: EQUAL
10322: IFFALSE 10332
// sBunker := true ;
10324: LD_ADDR_EXP 37
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 9 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 9
10339: EQUAL
10340: IFFALSE 10350
// sHack := true ;
10342: LD_ADDR_EXP 38
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 10 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 10
10357: EQUAL
10358: IFFALSE 10368
// sFire := true ;
10360: LD_ADDR_EXP 39
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 11 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 11
10375: EQUAL
10376: IFFALSE 10386
// sRefresh := true ;
10378: LD_ADDR_EXP 40
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 12 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 12
10393: EQUAL
10394: IFFALSE 10404
// sExp := true ;
10396: LD_ADDR_EXP 41
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 13 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 13
10411: EQUAL
10412: IFFALSE 10422
// sDepot := true ;
10414: LD_ADDR_EXP 42
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 14 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 14
10429: EQUAL
10430: IFFALSE 10440
// sFlag := true ;
10432: LD_ADDR_EXP 43
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 15 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 15
10447: EQUAL
10448: IFFALSE 10458
// sKamikadze := true ;
10450: LD_ADDR_EXP 51
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 16 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 16
10465: EQUAL
10466: IFFALSE 10476
// sTroll := true ;
10468: LD_ADDR_EXP 52
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 17 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 17
10483: EQUAL
10484: IFFALSE 10494
// sSlow := true ;
10486: LD_ADDR_EXP 53
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 18 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 18
10501: EQUAL
10502: IFFALSE 10512
// sLack := true ;
10504: LD_ADDR_EXP 54
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 19 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 19
10519: EQUAL
10520: IFFALSE 10530
// sTank := true ;
10522: LD_ADDR_EXP 56
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 20 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 20
10537: EQUAL
10538: IFFALSE 10548
// sRemote := true ;
10540: LD_ADDR_EXP 57
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 21 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 21
10555: EQUAL
10556: IFFALSE 10566
// sPowell := true ;
10558: LD_ADDR_EXP 58
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 22 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 22
10573: EQUAL
10574: IFFALSE 10584
// sTeleport := true ;
10576: LD_ADDR_EXP 61
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 23 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 23
10591: EQUAL
10592: IFFALSE 10602
// sOilTower := true ;
10594: LD_ADDR_EXP 63
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 24 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 24
10609: EQUAL
10610: IFFALSE 10620
// sShovel := true ;
10612: LD_ADDR_EXP 64
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 25 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 25
10627: EQUAL
10628: IFFALSE 10638
// sSheik := true ;
10630: LD_ADDR_EXP 65
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 26 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 26
10645: EQUAL
10646: IFFALSE 10656
// sEarthquake := true ;
10648: LD_ADDR_EXP 67
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 27 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 27
10663: EQUAL
10664: IFFALSE 10674
// sAI := true ;
10666: LD_ADDR_EXP 68
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 28 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 28
10681: EQUAL
10682: IFFALSE 10692
// sCargo := true ;
10684: LD_ADDR_EXP 71
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 29 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 29
10699: EQUAL
10700: IFFALSE 10710
// sDLaser := true ;
10702: LD_ADDR_EXP 72
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 30 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 30
10717: EQUAL
10718: IFFALSE 10728
// sExchange := true ;
10720: LD_ADDR_EXP 73
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 31 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 31
10735: EQUAL
10736: IFFALSE 10746
// sFac := true ;
10738: LD_ADDR_EXP 74
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 32 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 32
10753: EQUAL
10754: IFFALSE 10764
// sPower := true ;
10756: LD_ADDR_EXP 75
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 33 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 33
10771: EQUAL
10772: IFFALSE 10782
// sRandom := true ;
10774: LD_ADDR_EXP 76
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 34 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 34
10789: EQUAL
10790: IFFALSE 10800
// sShield := true ;
10792: LD_ADDR_EXP 77
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 35 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 35
10807: EQUAL
10808: IFFALSE 10818
// sTime := true ;
10810: LD_ADDR_EXP 78
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 36 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 36
10825: EQUAL
10826: IFFALSE 10836
// sTools := true ;
10828: LD_ADDR_EXP 79
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// if p3 = 101 then
10836: LD_VAR 0 3
10840: PUSH
10841: LD_INT 101
10843: EQUAL
10844: IFFALSE 10854
// sSold := true ;
10846: LD_ADDR_EXP 44
10850: PUSH
10851: LD_INT 1
10853: ST_TO_ADDR
// if p3 = 102 then
10854: LD_VAR 0 3
10858: PUSH
10859: LD_INT 102
10861: EQUAL
10862: IFFALSE 10872
// sDiff := true ;
10864: LD_ADDR_EXP 45
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// if p3 = 103 then
10872: LD_VAR 0 3
10876: PUSH
10877: LD_INT 103
10879: EQUAL
10880: IFFALSE 10890
// sFog := true ;
10882: LD_ADDR_EXP 48
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if p3 = 104 then
10890: LD_VAR 0 3
10894: PUSH
10895: LD_INT 104
10897: EQUAL
10898: IFFALSE 10908
// sReset := true ;
10900: LD_ADDR_EXP 49
10904: PUSH
10905: LD_INT 1
10907: ST_TO_ADDR
// if p3 = 105 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 105
10915: EQUAL
10916: IFFALSE 10926
// sSun := true ;
10918: LD_ADDR_EXP 50
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if p3 = 106 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 106
10933: EQUAL
10934: IFFALSE 10944
// sTiger := true ;
10936: LD_ADDR_EXP 46
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// if p3 = 107 then
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 107
10951: EQUAL
10952: IFFALSE 10962
// sBomb := true ;
10954: LD_ADDR_EXP 47
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// if p3 = 108 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 108
10969: EQUAL
10970: IFFALSE 10980
// sWound := true ;
10972: LD_ADDR_EXP 55
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// if p3 = 109 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 109
10987: EQUAL
10988: IFFALSE 10998
// sBetray := true ;
10990: LD_ADDR_EXP 59
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// if p3 = 110 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 110
11005: EQUAL
11006: IFFALSE 11016
// sContamin := true ;
11008: LD_ADDR_EXP 60
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if p3 = 111 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 111
11023: EQUAL
11024: IFFALSE 11034
// sOil := true ;
11026: LD_ADDR_EXP 62
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// if p3 = 112 then
11034: LD_VAR 0 3
11038: PUSH
11039: LD_INT 112
11041: EQUAL
11042: IFFALSE 11052
// sStu := true ;
11044: LD_ADDR_EXP 66
11048: PUSH
11049: LD_INT 1
11051: ST_TO_ADDR
// if p3 = 113 then
11052: LD_VAR 0 3
11056: PUSH
11057: LD_INT 113
11059: EQUAL
11060: IFFALSE 11070
// sBazooka := true ;
11062: LD_ADDR_EXP 69
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// if p3 = 114 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 114
11077: EQUAL
11078: IFFALSE 11088
// sMortar := true ;
11080: LD_ADDR_EXP 70
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// if p3 = 115 then
11088: LD_VAR 0 3
11092: PUSH
11093: LD_INT 115
11095: EQUAL
11096: IFFALSE 11106
// sRanger := true ;
11098: LD_ADDR_EXP 80
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// if p3 = 116 then
11106: LD_VAR 0 3
11110: PUSH
11111: LD_INT 116
11113: EQUAL
11114: IFFALSE 11124
// sComputer := true ;
11116: LD_ADDR_EXP 81
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// if p3 = 117 then
11124: LD_VAR 0 3
11128: PUSH
11129: LD_INT 117
11131: EQUAL
11132: IFFALSE 11142
// s30 := true ;
11134: LD_ADDR_EXP 82
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// if p3 = 118 then
11142: LD_VAR 0 3
11146: PUSH
11147: LD_INT 118
11149: EQUAL
11150: IFFALSE 11160
// s60 := true ;
11152: LD_ADDR_EXP 83
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
// end ; if p2 = hack_mode then
11160: LD_VAR 0 2
11164: PUSH
11165: LD_INT 101
11167: EQUAL
11168: IFFALSE 11296
// begin case p3 of 1 :
11170: LD_VAR 0 3
11174: PUSH
11175: LD_INT 1
11177: DOUBLE
11178: EQUAL
11179: IFTRUE 11183
11181: GO 11190
11183: POP
// hHackUnlimitedResources ; 2 :
11184: CALL 23443 0 0
11188: GO 11296
11190: LD_INT 2
11192: DOUBLE
11193: EQUAL
11194: IFTRUE 11198
11196: GO 11205
11198: POP
// hHackSetLevel10 ; 3 :
11199: CALL 23576 0 0
11203: GO 11296
11205: LD_INT 3
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11220
11213: POP
// hHackSetLevel10YourUnits ; 4 :
11214: CALL 23661 0 0
11218: GO 11296
11220: LD_INT 4
11222: DOUBLE
11223: EQUAL
11224: IFTRUE 11228
11226: GO 11235
11228: POP
// hHackInvincible ; 5 :
11229: CALL 24109 0 0
11233: GO 11296
11235: LD_INT 5
11237: DOUBLE
11238: EQUAL
11239: IFTRUE 11243
11241: GO 11250
11243: POP
// hHackInvisible ; 6 :
11244: CALL 24220 0 0
11248: GO 11296
11250: LD_INT 6
11252: DOUBLE
11253: EQUAL
11254: IFTRUE 11258
11256: GO 11265
11258: POP
// hHackChangeYourSide ; 7 :
11259: CALL 24277 0 0
11263: GO 11296
11265: LD_INT 7
11267: DOUBLE
11268: EQUAL
11269: IFTRUE 11273
11271: GO 11280
11273: POP
// hHackChangeUnitSide ; 8 :
11274: CALL 24319 0 0
11278: GO 11296
11280: LD_INT 8
11282: DOUBLE
11283: EQUAL
11284: IFTRUE 11288
11286: GO 11295
11288: POP
// hHackFog ; end ;
11289: CALL 24420 0 0
11293: GO 11296
11295: POP
// end ; if p2 = game_save_mode then
11296: LD_VAR 0 2
11300: PUSH
11301: LD_INT 102
11303: EQUAL
11304: IFFALSE 11359
// begin if p3 = 1 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 1
11313: EQUAL
11314: IFFALSE 11326
// globalGameSaveCounter := p4 ;
11316: LD_ADDR_EXP 26
11320: PUSH
11321: LD_VAR 0 4
11325: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11326: LD_VAR 0 3
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: PUSH
11335: LD_EXP 26
11339: AND
11340: IFFALSE 11359
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11342: LD_STRING setGameSaveCounter(
11344: PUSH
11345: LD_EXP 26
11349: STR
11350: PUSH
11351: LD_STRING )
11353: STR
11354: PPUSH
11355: CALL_OW 559
// end ; end ;
11359: LD_VAR 0 7
11363: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11364: LD_INT 0
11366: PPUSH
// streamModeActive := false ;
11367: LD_ADDR_EXP 27
11371: PUSH
11372: LD_INT 0
11374: ST_TO_ADDR
// normalCounter := 36 ;
11375: LD_ADDR_EXP 28
11379: PUSH
11380: LD_INT 36
11382: ST_TO_ADDR
// hardcoreCounter := 18 ;
11383: LD_ADDR_EXP 29
11387: PUSH
11388: LD_INT 18
11390: ST_TO_ADDR
// sRocket := false ;
11391: LD_ADDR_EXP 32
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// sSpeed := false ;
11399: LD_ADDR_EXP 31
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// sEngine := false ;
11407: LD_ADDR_EXP 33
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// sSpec := false ;
11415: LD_ADDR_EXP 30
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// sLevel := false ;
11423: LD_ADDR_EXP 34
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// sArmoury := false ;
11431: LD_ADDR_EXP 35
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// sRadar := false ;
11439: LD_ADDR_EXP 36
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// sBunker := false ;
11447: LD_ADDR_EXP 37
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// sHack := false ;
11455: LD_ADDR_EXP 38
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// sFire := false ;
11463: LD_ADDR_EXP 39
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// sRefresh := false ;
11471: LD_ADDR_EXP 40
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// sExp := false ;
11479: LD_ADDR_EXP 41
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// sDepot := false ;
11487: LD_ADDR_EXP 42
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// sFlag := false ;
11495: LD_ADDR_EXP 43
11499: PUSH
11500: LD_INT 0
11502: ST_TO_ADDR
// sKamikadze := false ;
11503: LD_ADDR_EXP 51
11507: PUSH
11508: LD_INT 0
11510: ST_TO_ADDR
// sTroll := false ;
11511: LD_ADDR_EXP 52
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sSlow := false ;
11519: LD_ADDR_EXP 53
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sLack := false ;
11527: LD_ADDR_EXP 54
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sTank := false ;
11535: LD_ADDR_EXP 56
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sRemote := false ;
11543: LD_ADDR_EXP 57
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sPowell := false ;
11551: LD_ADDR_EXP 58
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sTeleport := false ;
11559: LD_ADDR_EXP 61
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sOilTower := false ;
11567: LD_ADDR_EXP 63
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// sShovel := false ;
11575: LD_ADDR_EXP 64
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// sSheik := false ;
11583: LD_ADDR_EXP 65
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// sEarthquake := false ;
11591: LD_ADDR_EXP 67
11595: PUSH
11596: LD_INT 0
11598: ST_TO_ADDR
// sAI := false ;
11599: LD_ADDR_EXP 68
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// sCargo := false ;
11607: LD_ADDR_EXP 71
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// sDLaser := false ;
11615: LD_ADDR_EXP 72
11619: PUSH
11620: LD_INT 0
11622: ST_TO_ADDR
// sExchange := false ;
11623: LD_ADDR_EXP 73
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// sFac := false ;
11631: LD_ADDR_EXP 74
11635: PUSH
11636: LD_INT 0
11638: ST_TO_ADDR
// sPower := false ;
11639: LD_ADDR_EXP 75
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// sRandom := false ;
11647: LD_ADDR_EXP 76
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// sShield := false ;
11655: LD_ADDR_EXP 77
11659: PUSH
11660: LD_INT 0
11662: ST_TO_ADDR
// sTime := false ;
11663: LD_ADDR_EXP 78
11667: PUSH
11668: LD_INT 0
11670: ST_TO_ADDR
// sTools := false ;
11671: LD_ADDR_EXP 79
11675: PUSH
11676: LD_INT 0
11678: ST_TO_ADDR
// sSold := false ;
11679: LD_ADDR_EXP 44
11683: PUSH
11684: LD_INT 0
11686: ST_TO_ADDR
// sDiff := false ;
11687: LD_ADDR_EXP 45
11691: PUSH
11692: LD_INT 0
11694: ST_TO_ADDR
// sFog := false ;
11695: LD_ADDR_EXP 48
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// sReset := false ;
11703: LD_ADDR_EXP 49
11707: PUSH
11708: LD_INT 0
11710: ST_TO_ADDR
// sSun := false ;
11711: LD_ADDR_EXP 50
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// sTiger := false ;
11719: LD_ADDR_EXP 46
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sBomb := false ;
11727: LD_ADDR_EXP 47
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sWound := false ;
11735: LD_ADDR_EXP 55
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sBetray := false ;
11743: LD_ADDR_EXP 59
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sContamin := false ;
11751: LD_ADDR_EXP 60
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sOil := false ;
11759: LD_ADDR_EXP 62
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sStu := false ;
11767: LD_ADDR_EXP 66
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sBazooka := false ;
11775: LD_ADDR_EXP 69
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sMortar := false ;
11783: LD_ADDR_EXP 70
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sRanger := false ;
11791: LD_ADDR_EXP 80
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sComputer := false ;
11799: LD_ADDR_EXP 81
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// s30 := false ;
11807: LD_ADDR_EXP 82
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// s60 := false ;
11815: LD_ADDR_EXP 83
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// end ;
11823: LD_VAR 0 1
11827: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11828: LD_INT 0
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
11835: PPUSH
11836: PPUSH
// result := [ ] ;
11837: LD_ADDR_VAR 0 2
11841: PUSH
11842: EMPTY
11843: ST_TO_ADDR
// if campaign_id = 1 then
11844: LD_OWVAR 69
11848: PUSH
11849: LD_INT 1
11851: EQUAL
11852: IFFALSE 15018
// begin case mission_number of 1 :
11854: LD_OWVAR 70
11858: PUSH
11859: LD_INT 1
11861: DOUBLE
11862: EQUAL
11863: IFTRUE 11867
11865: GO 11943
11867: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11868: LD_ADDR_VAR 0 2
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 4
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 15
11887: PUSH
11888: LD_INT 16
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_INT 23
11896: PUSH
11897: LD_INT 26
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 101
11913: PUSH
11914: LD_INT 102
11916: PUSH
11917: LD_INT 106
11919: PUSH
11920: LD_INT 116
11922: PUSH
11923: LD_INT 117
11925: PUSH
11926: LD_INT 118
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: ST_TO_ADDR
11941: GO 15016
11943: LD_INT 2
11945: DOUBLE
11946: EQUAL
11947: IFTRUE 11951
11949: GO 12035
11951: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: LD_INT 4
11962: PUSH
11963: LD_INT 11
11965: PUSH
11966: LD_INT 12
11968: PUSH
11969: LD_INT 15
11971: PUSH
11972: LD_INT 16
11974: PUSH
11975: LD_INT 22
11977: PUSH
11978: LD_INT 23
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 101
11997: PUSH
11998: LD_INT 102
12000: PUSH
12001: LD_INT 105
12003: PUSH
12004: LD_INT 106
12006: PUSH
12007: LD_INT 108
12009: PUSH
12010: LD_INT 116
12012: PUSH
12013: LD_INT 117
12015: PUSH
12016: LD_INT 118
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: ST_TO_ADDR
12033: GO 15016
12035: LD_INT 3
12037: DOUBLE
12038: EQUAL
12039: IFTRUE 12043
12041: GO 12131
12043: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12044: LD_ADDR_VAR 0 2
12048: PUSH
12049: LD_INT 2
12051: PUSH
12052: LD_INT 4
12054: PUSH
12055: LD_INT 5
12057: PUSH
12058: LD_INT 11
12060: PUSH
12061: LD_INT 12
12063: PUSH
12064: LD_INT 15
12066: PUSH
12067: LD_INT 16
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_INT 26
12075: PUSH
12076: LD_INT 36
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 101
12093: PUSH
12094: LD_INT 102
12096: PUSH
12097: LD_INT 105
12099: PUSH
12100: LD_INT 106
12102: PUSH
12103: LD_INT 108
12105: PUSH
12106: LD_INT 116
12108: PUSH
12109: LD_INT 117
12111: PUSH
12112: LD_INT 118
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: ST_TO_ADDR
12129: GO 15016
12131: LD_INT 4
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12235
12139: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12140: LD_ADDR_VAR 0 2
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 4
12150: PUSH
12151: LD_INT 5
12153: PUSH
12154: LD_INT 8
12156: PUSH
12157: LD_INT 11
12159: PUSH
12160: LD_INT 12
12162: PUSH
12163: LD_INT 15
12165: PUSH
12166: LD_INT 16
12168: PUSH
12169: LD_INT 22
12171: PUSH
12172: LD_INT 23
12174: PUSH
12175: LD_INT 26
12177: PUSH
12178: LD_INT 36
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 101
12197: PUSH
12198: LD_INT 102
12200: PUSH
12201: LD_INT 105
12203: PUSH
12204: LD_INT 106
12206: PUSH
12207: LD_INT 108
12209: PUSH
12210: LD_INT 116
12212: PUSH
12213: LD_INT 117
12215: PUSH
12216: LD_INT 118
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: ST_TO_ADDR
12233: GO 15016
12235: LD_INT 5
12237: DOUBLE
12238: EQUAL
12239: IFTRUE 12243
12241: GO 12355
12243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12244: LD_ADDR_VAR 0 2
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 4
12254: PUSH
12255: LD_INT 5
12257: PUSH
12258: LD_INT 6
12260: PUSH
12261: LD_INT 8
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: LD_INT 12
12269: PUSH
12270: LD_INT 15
12272: PUSH
12273: LD_INT 16
12275: PUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 23
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 26
12287: PUSH
12288: LD_INT 36
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 101
12309: PUSH
12310: LD_INT 102
12312: PUSH
12313: LD_INT 105
12315: PUSH
12316: LD_INT 106
12318: PUSH
12319: LD_INT 108
12321: PUSH
12322: LD_INT 109
12324: PUSH
12325: LD_INT 112
12327: PUSH
12328: LD_INT 116
12330: PUSH
12331: LD_INT 117
12333: PUSH
12334: LD_INT 118
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: ST_TO_ADDR
12353: GO 15016
12355: LD_INT 6
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12495
12363: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12364: LD_ADDR_VAR 0 2
12368: PUSH
12369: LD_INT 2
12371: PUSH
12372: LD_INT 4
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: LD_INT 6
12380: PUSH
12381: LD_INT 8
12383: PUSH
12384: LD_INT 11
12386: PUSH
12387: LD_INT 12
12389: PUSH
12390: LD_INT 15
12392: PUSH
12393: LD_INT 16
12395: PUSH
12396: LD_INT 20
12398: PUSH
12399: LD_INT 21
12401: PUSH
12402: LD_INT 22
12404: PUSH
12405: LD_INT 23
12407: PUSH
12408: LD_INT 25
12410: PUSH
12411: LD_INT 26
12413: PUSH
12414: LD_INT 30
12416: PUSH
12417: LD_INT 31
12419: PUSH
12420: LD_INT 32
12422: PUSH
12423: LD_INT 36
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 101
12449: PUSH
12450: LD_INT 102
12452: PUSH
12453: LD_INT 105
12455: PUSH
12456: LD_INT 106
12458: PUSH
12459: LD_INT 108
12461: PUSH
12462: LD_INT 109
12464: PUSH
12465: LD_INT 112
12467: PUSH
12468: LD_INT 116
12470: PUSH
12471: LD_INT 117
12473: PUSH
12474: LD_INT 118
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: ST_TO_ADDR
12493: GO 15016
12495: LD_INT 7
12497: DOUBLE
12498: EQUAL
12499: IFTRUE 12503
12501: GO 12615
12503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12504: LD_ADDR_VAR 0 2
12508: PUSH
12509: LD_INT 2
12511: PUSH
12512: LD_INT 4
12514: PUSH
12515: LD_INT 5
12517: PUSH
12518: LD_INT 7
12520: PUSH
12521: LD_INT 11
12523: PUSH
12524: LD_INT 12
12526: PUSH
12527: LD_INT 15
12529: PUSH
12530: LD_INT 16
12532: PUSH
12533: LD_INT 20
12535: PUSH
12536: LD_INT 21
12538: PUSH
12539: LD_INT 22
12541: PUSH
12542: LD_INT 23
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 26
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 101
12569: PUSH
12570: LD_INT 102
12572: PUSH
12573: LD_INT 103
12575: PUSH
12576: LD_INT 105
12578: PUSH
12579: LD_INT 106
12581: PUSH
12582: LD_INT 108
12584: PUSH
12585: LD_INT 112
12587: PUSH
12588: LD_INT 116
12590: PUSH
12591: LD_INT 117
12593: PUSH
12594: LD_INT 118
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: ST_TO_ADDR
12613: GO 15016
12615: LD_INT 8
12617: DOUBLE
12618: EQUAL
12619: IFTRUE 12623
12621: GO 12763
12623: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 4
12634: PUSH
12635: LD_INT 5
12637: PUSH
12638: LD_INT 6
12640: PUSH
12641: LD_INT 7
12643: PUSH
12644: LD_INT 8
12646: PUSH
12647: LD_INT 11
12649: PUSH
12650: LD_INT 12
12652: PUSH
12653: LD_INT 15
12655: PUSH
12656: LD_INT 16
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: LD_INT 21
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_INT 23
12670: PUSH
12671: LD_INT 25
12673: PUSH
12674: LD_INT 26
12676: PUSH
12677: LD_INT 30
12679: PUSH
12680: LD_INT 31
12682: PUSH
12683: LD_INT 32
12685: PUSH
12686: LD_INT 36
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 101
12713: PUSH
12714: LD_INT 102
12716: PUSH
12717: LD_INT 103
12719: PUSH
12720: LD_INT 105
12722: PUSH
12723: LD_INT 106
12725: PUSH
12726: LD_INT 108
12728: PUSH
12729: LD_INT 109
12731: PUSH
12732: LD_INT 112
12734: PUSH
12735: LD_INT 116
12737: PUSH
12738: LD_INT 117
12740: PUSH
12741: LD_INT 118
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: ST_TO_ADDR
12761: GO 15016
12763: LD_INT 9
12765: DOUBLE
12766: EQUAL
12767: IFTRUE 12771
12769: GO 12919
12771: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12772: LD_ADDR_VAR 0 2
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: LD_INT 5
12785: PUSH
12786: LD_INT 6
12788: PUSH
12789: LD_INT 7
12791: PUSH
12792: LD_INT 8
12794: PUSH
12795: LD_INT 11
12797: PUSH
12798: LD_INT 12
12800: PUSH
12801: LD_INT 15
12803: PUSH
12804: LD_INT 16
12806: PUSH
12807: LD_INT 20
12809: PUSH
12810: LD_INT 21
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 23
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 26
12824: PUSH
12825: LD_INT 28
12827: PUSH
12828: LD_INT 30
12830: PUSH
12831: LD_INT 31
12833: PUSH
12834: LD_INT 32
12836: PUSH
12837: LD_INT 36
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 101
12865: PUSH
12866: LD_INT 102
12868: PUSH
12869: LD_INT 103
12871: PUSH
12872: LD_INT 105
12874: PUSH
12875: LD_INT 106
12877: PUSH
12878: LD_INT 108
12880: PUSH
12881: LD_INT 109
12883: PUSH
12884: LD_INT 112
12886: PUSH
12887: LD_INT 114
12889: PUSH
12890: LD_INT 116
12892: PUSH
12893: LD_INT 117
12895: PUSH
12896: LD_INT 118
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: ST_TO_ADDR
12917: GO 15016
12919: LD_INT 10
12921: DOUBLE
12922: EQUAL
12923: IFTRUE 12927
12925: GO 13123
12927: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: LD_INT 4
12938: PUSH
12939: LD_INT 5
12941: PUSH
12942: LD_INT 6
12944: PUSH
12945: LD_INT 7
12947: PUSH
12948: LD_INT 8
12950: PUSH
12951: LD_INT 9
12953: PUSH
12954: LD_INT 10
12956: PUSH
12957: LD_INT 11
12959: PUSH
12960: LD_INT 12
12962: PUSH
12963: LD_INT 13
12965: PUSH
12966: LD_INT 14
12968: PUSH
12969: LD_INT 15
12971: PUSH
12972: LD_INT 16
12974: PUSH
12975: LD_INT 17
12977: PUSH
12978: LD_INT 18
12980: PUSH
12981: LD_INT 19
12983: PUSH
12984: LD_INT 20
12986: PUSH
12987: LD_INT 21
12989: PUSH
12990: LD_INT 22
12992: PUSH
12993: LD_INT 23
12995: PUSH
12996: LD_INT 24
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 26
13004: PUSH
13005: LD_INT 28
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 31
13013: PUSH
13014: LD_INT 32
13016: PUSH
13017: LD_INT 36
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 101
13053: PUSH
13054: LD_INT 102
13056: PUSH
13057: LD_INT 103
13059: PUSH
13060: LD_INT 104
13062: PUSH
13063: LD_INT 105
13065: PUSH
13066: LD_INT 106
13068: PUSH
13069: LD_INT 107
13071: PUSH
13072: LD_INT 108
13074: PUSH
13075: LD_INT 109
13077: PUSH
13078: LD_INT 110
13080: PUSH
13081: LD_INT 111
13083: PUSH
13084: LD_INT 112
13086: PUSH
13087: LD_INT 114
13089: PUSH
13090: LD_INT 116
13092: PUSH
13093: LD_INT 117
13095: PUSH
13096: LD_INT 118
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: ST_TO_ADDR
13121: GO 15016
13123: LD_INT 11
13125: DOUBLE
13126: EQUAL
13127: IFTRUE 13131
13129: GO 13335
13131: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_INT 2
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 4
13145: PUSH
13146: LD_INT 5
13148: PUSH
13149: LD_INT 6
13151: PUSH
13152: LD_INT 7
13154: PUSH
13155: LD_INT 8
13157: PUSH
13158: LD_INT 9
13160: PUSH
13161: LD_INT 10
13163: PUSH
13164: LD_INT 11
13166: PUSH
13167: LD_INT 12
13169: PUSH
13170: LD_INT 13
13172: PUSH
13173: LD_INT 14
13175: PUSH
13176: LD_INT 15
13178: PUSH
13179: LD_INT 16
13181: PUSH
13182: LD_INT 17
13184: PUSH
13185: LD_INT 18
13187: PUSH
13188: LD_INT 19
13190: PUSH
13191: LD_INT 20
13193: PUSH
13194: LD_INT 21
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 23
13202: PUSH
13203: LD_INT 24
13205: PUSH
13206: LD_INT 25
13208: PUSH
13209: LD_INT 26
13211: PUSH
13212: LD_INT 28
13214: PUSH
13215: LD_INT 30
13217: PUSH
13218: LD_INT 31
13220: PUSH
13221: LD_INT 32
13223: PUSH
13224: LD_INT 34
13226: PUSH
13227: LD_INT 36
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 101
13265: PUSH
13266: LD_INT 102
13268: PUSH
13269: LD_INT 103
13271: PUSH
13272: LD_INT 104
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 107
13283: PUSH
13284: LD_INT 108
13286: PUSH
13287: LD_INT 109
13289: PUSH
13290: LD_INT 110
13292: PUSH
13293: LD_INT 111
13295: PUSH
13296: LD_INT 112
13298: PUSH
13299: LD_INT 114
13301: PUSH
13302: LD_INT 116
13304: PUSH
13305: LD_INT 117
13307: PUSH
13308: LD_INT 118
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: ST_TO_ADDR
13333: GO 15016
13335: LD_INT 12
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13343
13341: GO 13563
13343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: LD_INT 3
13357: PUSH
13358: LD_INT 4
13360: PUSH
13361: LD_INT 5
13363: PUSH
13364: LD_INT 6
13366: PUSH
13367: LD_INT 7
13369: PUSH
13370: LD_INT 8
13372: PUSH
13373: LD_INT 9
13375: PUSH
13376: LD_INT 10
13378: PUSH
13379: LD_INT 11
13381: PUSH
13382: LD_INT 12
13384: PUSH
13385: LD_INT 13
13387: PUSH
13388: LD_INT 14
13390: PUSH
13391: LD_INT 15
13393: PUSH
13394: LD_INT 16
13396: PUSH
13397: LD_INT 17
13399: PUSH
13400: LD_INT 18
13402: PUSH
13403: LD_INT 19
13405: PUSH
13406: LD_INT 20
13408: PUSH
13409: LD_INT 21
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 24
13420: PUSH
13421: LD_INT 25
13423: PUSH
13424: LD_INT 26
13426: PUSH
13427: LD_INT 27
13429: PUSH
13430: LD_INT 28
13432: PUSH
13433: LD_INT 30
13435: PUSH
13436: LD_INT 31
13438: PUSH
13439: LD_INT 32
13441: PUSH
13442: LD_INT 33
13444: PUSH
13445: LD_INT 34
13447: PUSH
13448: LD_INT 36
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 101
13489: PUSH
13490: LD_INT 102
13492: PUSH
13493: LD_INT 103
13495: PUSH
13496: LD_INT 104
13498: PUSH
13499: LD_INT 105
13501: PUSH
13502: LD_INT 106
13504: PUSH
13505: LD_INT 107
13507: PUSH
13508: LD_INT 108
13510: PUSH
13511: LD_INT 109
13513: PUSH
13514: LD_INT 110
13516: PUSH
13517: LD_INT 111
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 113
13525: PUSH
13526: LD_INT 114
13528: PUSH
13529: LD_INT 116
13531: PUSH
13532: LD_INT 117
13534: PUSH
13535: LD_INT 118
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: ST_TO_ADDR
13561: GO 15016
13563: LD_INT 13
13565: DOUBLE
13566: EQUAL
13567: IFTRUE 13571
13569: GO 13779
13571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13572: LD_ADDR_VAR 0 2
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: LD_INT 3
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: LD_INT 5
13591: PUSH
13592: LD_INT 8
13594: PUSH
13595: LD_INT 9
13597: PUSH
13598: LD_INT 10
13600: PUSH
13601: LD_INT 11
13603: PUSH
13604: LD_INT 12
13606: PUSH
13607: LD_INT 14
13609: PUSH
13610: LD_INT 15
13612: PUSH
13613: LD_INT 16
13615: PUSH
13616: LD_INT 17
13618: PUSH
13619: LD_INT 18
13621: PUSH
13622: LD_INT 19
13624: PUSH
13625: LD_INT 20
13627: PUSH
13628: LD_INT 21
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 23
13636: PUSH
13637: LD_INT 24
13639: PUSH
13640: LD_INT 25
13642: PUSH
13643: LD_INT 26
13645: PUSH
13646: LD_INT 27
13648: PUSH
13649: LD_INT 28
13651: PUSH
13652: LD_INT 30
13654: PUSH
13655: LD_INT 31
13657: PUSH
13658: LD_INT 32
13660: PUSH
13661: LD_INT 33
13663: PUSH
13664: LD_INT 34
13666: PUSH
13667: LD_INT 36
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 101
13705: PUSH
13706: LD_INT 102
13708: PUSH
13709: LD_INT 103
13711: PUSH
13712: LD_INT 104
13714: PUSH
13715: LD_INT 105
13717: PUSH
13718: LD_INT 106
13720: PUSH
13721: LD_INT 107
13723: PUSH
13724: LD_INT 108
13726: PUSH
13727: LD_INT 109
13729: PUSH
13730: LD_INT 110
13732: PUSH
13733: LD_INT 111
13735: PUSH
13736: LD_INT 112
13738: PUSH
13739: LD_INT 113
13741: PUSH
13742: LD_INT 114
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 15016
13779: LD_INT 14
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 14011
13787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 7
13813: PUSH
13814: LD_INT 8
13816: PUSH
13817: LD_INT 9
13819: PUSH
13820: LD_INT 10
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 13
13831: PUSH
13832: LD_INT 14
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 17
13843: PUSH
13844: LD_INT 18
13846: PUSH
13847: LD_INT 19
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 26
13870: PUSH
13871: LD_INT 27
13873: PUSH
13874: LD_INT 28
13876: PUSH
13877: LD_INT 29
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 31
13885: PUSH
13886: LD_INT 32
13888: PUSH
13889: LD_INT 33
13891: PUSH
13892: LD_INT 34
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 101
13937: PUSH
13938: LD_INT 102
13940: PUSH
13941: LD_INT 103
13943: PUSH
13944: LD_INT 104
13946: PUSH
13947: LD_INT 105
13949: PUSH
13950: LD_INT 106
13952: PUSH
13953: LD_INT 107
13955: PUSH
13956: LD_INT 108
13958: PUSH
13959: LD_INT 109
13961: PUSH
13962: LD_INT 110
13964: PUSH
13965: LD_INT 111
13967: PUSH
13968: LD_INT 112
13970: PUSH
13971: LD_INT 113
13973: PUSH
13974: LD_INT 114
13976: PUSH
13977: LD_INT 116
13979: PUSH
13980: LD_INT 117
13982: PUSH
13983: LD_INT 118
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: ST_TO_ADDR
14009: GO 15016
14011: LD_INT 15
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14243
14019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 4
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: LD_INT 6
14042: PUSH
14043: LD_INT 7
14045: PUSH
14046: LD_INT 8
14048: PUSH
14049: LD_INT 9
14051: PUSH
14052: LD_INT 10
14054: PUSH
14055: LD_INT 11
14057: PUSH
14058: LD_INT 12
14060: PUSH
14061: LD_INT 13
14063: PUSH
14064: LD_INT 14
14066: PUSH
14067: LD_INT 15
14069: PUSH
14070: LD_INT 16
14072: PUSH
14073: LD_INT 17
14075: PUSH
14076: LD_INT 18
14078: PUSH
14079: LD_INT 19
14081: PUSH
14082: LD_INT 20
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 22
14090: PUSH
14091: LD_INT 23
14093: PUSH
14094: LD_INT 24
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 26
14102: PUSH
14103: LD_INT 27
14105: PUSH
14106: LD_INT 28
14108: PUSH
14109: LD_INT 29
14111: PUSH
14112: LD_INT 30
14114: PUSH
14115: LD_INT 31
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 33
14123: PUSH
14124: LD_INT 34
14126: PUSH
14127: LD_INT 36
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 101
14169: PUSH
14170: LD_INT 102
14172: PUSH
14173: LD_INT 103
14175: PUSH
14176: LD_INT 104
14178: PUSH
14179: LD_INT 105
14181: PUSH
14182: LD_INT 106
14184: PUSH
14185: LD_INT 107
14187: PUSH
14188: LD_INT 108
14190: PUSH
14191: LD_INT 109
14193: PUSH
14194: LD_INT 110
14196: PUSH
14197: LD_INT 111
14199: PUSH
14200: LD_INT 112
14202: PUSH
14203: LD_INT 113
14205: PUSH
14206: LD_INT 114
14208: PUSH
14209: LD_INT 116
14211: PUSH
14212: LD_INT 117
14214: PUSH
14215: LD_INT 118
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: ST_TO_ADDR
14241: GO 15016
14243: LD_INT 16
14245: DOUBLE
14246: EQUAL
14247: IFTRUE 14251
14249: GO 14387
14251: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14252: LD_ADDR_VAR 0 2
14256: PUSH
14257: LD_INT 2
14259: PUSH
14260: LD_INT 4
14262: PUSH
14263: LD_INT 5
14265: PUSH
14266: LD_INT 7
14268: PUSH
14269: LD_INT 11
14271: PUSH
14272: LD_INT 12
14274: PUSH
14275: LD_INT 15
14277: PUSH
14278: LD_INT 16
14280: PUSH
14281: LD_INT 20
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 22
14289: PUSH
14290: LD_INT 23
14292: PUSH
14293: LD_INT 25
14295: PUSH
14296: LD_INT 26
14298: PUSH
14299: LD_INT 30
14301: PUSH
14302: LD_INT 31
14304: PUSH
14305: LD_INT 32
14307: PUSH
14308: LD_INT 33
14310: PUSH
14311: LD_INT 34
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 101
14337: PUSH
14338: LD_INT 102
14340: PUSH
14341: LD_INT 103
14343: PUSH
14344: LD_INT 106
14346: PUSH
14347: LD_INT 108
14349: PUSH
14350: LD_INT 112
14352: PUSH
14353: LD_INT 113
14355: PUSH
14356: LD_INT 114
14358: PUSH
14359: LD_INT 116
14361: PUSH
14362: LD_INT 117
14364: PUSH
14365: LD_INT 118
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 15016
14387: LD_INT 17
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14619
14395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14396: LD_ADDR_VAR 0 2
14400: PUSH
14401: LD_INT 1
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: LD_INT 3
14409: PUSH
14410: LD_INT 4
14412: PUSH
14413: LD_INT 5
14415: PUSH
14416: LD_INT 6
14418: PUSH
14419: LD_INT 7
14421: PUSH
14422: LD_INT 8
14424: PUSH
14425: LD_INT 9
14427: PUSH
14428: LD_INT 10
14430: PUSH
14431: LD_INT 11
14433: PUSH
14434: LD_INT 12
14436: PUSH
14437: LD_INT 13
14439: PUSH
14440: LD_INT 14
14442: PUSH
14443: LD_INT 15
14445: PUSH
14446: LD_INT 16
14448: PUSH
14449: LD_INT 17
14451: PUSH
14452: LD_INT 18
14454: PUSH
14455: LD_INT 19
14457: PUSH
14458: LD_INT 20
14460: PUSH
14461: LD_INT 21
14463: PUSH
14464: LD_INT 22
14466: PUSH
14467: LD_INT 23
14469: PUSH
14470: LD_INT 24
14472: PUSH
14473: LD_INT 25
14475: PUSH
14476: LD_INT 26
14478: PUSH
14479: LD_INT 27
14481: PUSH
14482: LD_INT 28
14484: PUSH
14485: LD_INT 29
14487: PUSH
14488: LD_INT 30
14490: PUSH
14491: LD_INT 31
14493: PUSH
14494: LD_INT 32
14496: PUSH
14497: LD_INT 33
14499: PUSH
14500: LD_INT 34
14502: PUSH
14503: LD_INT 36
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 101
14545: PUSH
14546: LD_INT 102
14548: PUSH
14549: LD_INT 103
14551: PUSH
14552: LD_INT 104
14554: PUSH
14555: LD_INT 105
14557: PUSH
14558: LD_INT 106
14560: PUSH
14561: LD_INT 107
14563: PUSH
14564: LD_INT 108
14566: PUSH
14567: LD_INT 109
14569: PUSH
14570: LD_INT 110
14572: PUSH
14573: LD_INT 111
14575: PUSH
14576: LD_INT 112
14578: PUSH
14579: LD_INT 113
14581: PUSH
14582: LD_INT 114
14584: PUSH
14585: LD_INT 116
14587: PUSH
14588: LD_INT 117
14590: PUSH
14591: LD_INT 118
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: ST_TO_ADDR
14617: GO 15016
14619: LD_INT 18
14621: DOUBLE
14622: EQUAL
14623: IFTRUE 14627
14625: GO 14775
14627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: LD_INT 4
14638: PUSH
14639: LD_INT 5
14641: PUSH
14642: LD_INT 7
14644: PUSH
14645: LD_INT 11
14647: PUSH
14648: LD_INT 12
14650: PUSH
14651: LD_INT 15
14653: PUSH
14654: LD_INT 16
14656: PUSH
14657: LD_INT 20
14659: PUSH
14660: LD_INT 21
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_INT 23
14668: PUSH
14669: LD_INT 25
14671: PUSH
14672: LD_INT 26
14674: PUSH
14675: LD_INT 30
14677: PUSH
14678: LD_INT 31
14680: PUSH
14681: LD_INT 32
14683: PUSH
14684: LD_INT 33
14686: PUSH
14687: LD_INT 34
14689: PUSH
14690: LD_INT 35
14692: PUSH
14693: LD_INT 36
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 101
14721: PUSH
14722: LD_INT 102
14724: PUSH
14725: LD_INT 103
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 108
14733: PUSH
14734: LD_INT 112
14736: PUSH
14737: LD_INT 113
14739: PUSH
14740: LD_INT 114
14742: PUSH
14743: LD_INT 115
14745: PUSH
14746: LD_INT 116
14748: PUSH
14749: LD_INT 117
14751: PUSH
14752: LD_INT 118
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: ST_TO_ADDR
14773: GO 15016
14775: LD_INT 19
14777: DOUBLE
14778: EQUAL
14779: IFTRUE 14783
14781: GO 15015
14783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14784: LD_ADDR_VAR 0 2
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: LD_INT 4
14800: PUSH
14801: LD_INT 5
14803: PUSH
14804: LD_INT 6
14806: PUSH
14807: LD_INT 7
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 9
14815: PUSH
14816: LD_INT 10
14818: PUSH
14819: LD_INT 11
14821: PUSH
14822: LD_INT 12
14824: PUSH
14825: LD_INT 13
14827: PUSH
14828: LD_INT 14
14830: PUSH
14831: LD_INT 15
14833: PUSH
14834: LD_INT 16
14836: PUSH
14837: LD_INT 17
14839: PUSH
14840: LD_INT 18
14842: PUSH
14843: LD_INT 19
14845: PUSH
14846: LD_INT 20
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 22
14854: PUSH
14855: LD_INT 23
14857: PUSH
14858: LD_INT 24
14860: PUSH
14861: LD_INT 25
14863: PUSH
14864: LD_INT 26
14866: PUSH
14867: LD_INT 27
14869: PUSH
14870: LD_INT 28
14872: PUSH
14873: LD_INT 29
14875: PUSH
14876: LD_INT 30
14878: PUSH
14879: LD_INT 31
14881: PUSH
14882: LD_INT 32
14884: PUSH
14885: LD_INT 33
14887: PUSH
14888: LD_INT 34
14890: PUSH
14891: LD_INT 35
14893: PUSH
14894: LD_INT 36
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 101
14937: PUSH
14938: LD_INT 102
14940: PUSH
14941: LD_INT 103
14943: PUSH
14944: LD_INT 104
14946: PUSH
14947: LD_INT 105
14949: PUSH
14950: LD_INT 106
14952: PUSH
14953: LD_INT 107
14955: PUSH
14956: LD_INT 108
14958: PUSH
14959: LD_INT 109
14961: PUSH
14962: LD_INT 110
14964: PUSH
14965: LD_INT 111
14967: PUSH
14968: LD_INT 112
14970: PUSH
14971: LD_INT 113
14973: PUSH
14974: LD_INT 114
14976: PUSH
14977: LD_INT 115
14979: PUSH
14980: LD_INT 116
14982: PUSH
14983: LD_INT 117
14985: PUSH
14986: LD_INT 118
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: ST_TO_ADDR
15013: GO 15016
15015: POP
// end else
15016: GO 15247
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: LD_INT 4
15034: PUSH
15035: LD_INT 5
15037: PUSH
15038: LD_INT 6
15040: PUSH
15041: LD_INT 7
15043: PUSH
15044: LD_INT 8
15046: PUSH
15047: LD_INT 9
15049: PUSH
15050: LD_INT 10
15052: PUSH
15053: LD_INT 11
15055: PUSH
15056: LD_INT 12
15058: PUSH
15059: LD_INT 13
15061: PUSH
15062: LD_INT 14
15064: PUSH
15065: LD_INT 15
15067: PUSH
15068: LD_INT 16
15070: PUSH
15071: LD_INT 17
15073: PUSH
15074: LD_INT 18
15076: PUSH
15077: LD_INT 19
15079: PUSH
15080: LD_INT 20
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 22
15088: PUSH
15089: LD_INT 23
15091: PUSH
15092: LD_INT 24
15094: PUSH
15095: LD_INT 25
15097: PUSH
15098: LD_INT 26
15100: PUSH
15101: LD_INT 27
15103: PUSH
15104: LD_INT 28
15106: PUSH
15107: LD_INT 29
15109: PUSH
15110: LD_INT 30
15112: PUSH
15113: LD_INT 31
15115: PUSH
15116: LD_INT 32
15118: PUSH
15119: LD_INT 33
15121: PUSH
15122: LD_INT 34
15124: PUSH
15125: LD_INT 35
15127: PUSH
15128: LD_INT 36
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 101
15171: PUSH
15172: LD_INT 102
15174: PUSH
15175: LD_INT 103
15177: PUSH
15178: LD_INT 104
15180: PUSH
15181: LD_INT 105
15183: PUSH
15184: LD_INT 106
15186: PUSH
15187: LD_INT 107
15189: PUSH
15190: LD_INT 108
15192: PUSH
15193: LD_INT 109
15195: PUSH
15196: LD_INT 110
15198: PUSH
15199: LD_INT 111
15201: PUSH
15202: LD_INT 112
15204: PUSH
15205: LD_INT 113
15207: PUSH
15208: LD_INT 114
15210: PUSH
15211: LD_INT 115
15213: PUSH
15214: LD_INT 116
15216: PUSH
15217: LD_INT 117
15219: PUSH
15220: LD_INT 118
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: ST_TO_ADDR
// if result then
15247: LD_VAR 0 2
15251: IFFALSE 16037
// begin normal :=  ;
15253: LD_ADDR_VAR 0 5
15257: PUSH
15258: LD_STRING 
15260: ST_TO_ADDR
// hardcore :=  ;
15261: LD_ADDR_VAR 0 6
15265: PUSH
15266: LD_STRING 
15268: ST_TO_ADDR
// active :=  ;
15269: LD_ADDR_VAR 0 7
15273: PUSH
15274: LD_STRING 
15276: ST_TO_ADDR
// for i = 1 to normalCounter do
15277: LD_ADDR_VAR 0 8
15281: PUSH
15282: DOUBLE
15283: LD_INT 1
15285: DEC
15286: ST_TO_ADDR
15287: LD_EXP 28
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15394
// begin tmp := 0 ;
15295: LD_ADDR_VAR 0 3
15299: PUSH
15300: LD_STRING 0
15302: ST_TO_ADDR
// if result [ 1 ] then
15303: LD_VAR 0 2
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: IFFALSE 15376
// if result [ 1 ] [ 1 ] = i then
15313: LD_VAR 0 2
15317: PUSH
15318: LD_INT 1
15320: ARRAY
15321: PUSH
15322: LD_INT 1
15324: ARRAY
15325: PUSH
15326: LD_VAR 0 8
15330: EQUAL
15331: IFFALSE 15376
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15333: LD_ADDR_VAR 0 2
15337: PUSH
15338: LD_VAR 0 2
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: LD_VAR 0 2
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 3
15362: PPUSH
15363: CALL_OW 1
15367: ST_TO_ADDR
// tmp := 1 ;
15368: LD_ADDR_VAR 0 3
15372: PUSH
15373: LD_STRING 1
15375: ST_TO_ADDR
// end ; normal := normal & tmp ;
15376: LD_ADDR_VAR 0 5
15380: PUSH
15381: LD_VAR 0 5
15385: PUSH
15386: LD_VAR 0 3
15390: STR
15391: ST_TO_ADDR
// end ;
15392: GO 15292
15394: POP
15395: POP
// for i = 1 to hardcoreCounter do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_EXP 29
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15517
// begin tmp := 0 ;
15414: LD_ADDR_VAR 0 3
15418: PUSH
15419: LD_STRING 0
15421: ST_TO_ADDR
// if result [ 2 ] then
15422: LD_VAR 0 2
15426: PUSH
15427: LD_INT 2
15429: ARRAY
15430: IFFALSE 15499
// if result [ 2 ] [ 1 ] = 100 + i then
15432: LD_VAR 0 2
15436: PUSH
15437: LD_INT 2
15439: ARRAY
15440: PUSH
15441: LD_INT 1
15443: ARRAY
15444: PUSH
15445: LD_INT 100
15447: PUSH
15448: LD_VAR 0 8
15452: PLUS
15453: EQUAL
15454: IFFALSE 15499
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15456: LD_ADDR_VAR 0 2
15460: PUSH
15461: LD_VAR 0 2
15465: PPUSH
15466: LD_INT 2
15468: PPUSH
15469: LD_VAR 0 2
15473: PUSH
15474: LD_INT 2
15476: ARRAY
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 3
15485: PPUSH
15486: CALL_OW 1
15490: ST_TO_ADDR
// tmp := 1 ;
15491: LD_ADDR_VAR 0 3
15495: PUSH
15496: LD_STRING 1
15498: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15499: LD_ADDR_VAR 0 6
15503: PUSH
15504: LD_VAR 0 6
15508: PUSH
15509: LD_VAR 0 3
15513: STR
15514: ST_TO_ADDR
// end ;
15515: GO 15411
15517: POP
15518: POP
// if isGameLoad then
15519: LD_VAR 0 1
15523: IFFALSE 15998
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15525: LD_ADDR_VAR 0 4
15529: PUSH
15530: LD_EXP 32
15534: PUSH
15535: LD_EXP 31
15539: PUSH
15540: LD_EXP 33
15544: PUSH
15545: LD_EXP 30
15549: PUSH
15550: LD_EXP 34
15554: PUSH
15555: LD_EXP 35
15559: PUSH
15560: LD_EXP 36
15564: PUSH
15565: LD_EXP 37
15569: PUSH
15570: LD_EXP 38
15574: PUSH
15575: LD_EXP 39
15579: PUSH
15580: LD_EXP 40
15584: PUSH
15585: LD_EXP 41
15589: PUSH
15590: LD_EXP 42
15594: PUSH
15595: LD_EXP 43
15599: PUSH
15600: LD_EXP 51
15604: PUSH
15605: LD_EXP 52
15609: PUSH
15610: LD_EXP 53
15614: PUSH
15615: LD_EXP 54
15619: PUSH
15620: LD_EXP 56
15624: PUSH
15625: LD_EXP 57
15629: PUSH
15630: LD_EXP 58
15634: PUSH
15635: LD_EXP 61
15639: PUSH
15640: LD_EXP 63
15644: PUSH
15645: LD_EXP 64
15649: PUSH
15650: LD_EXP 65
15654: PUSH
15655: LD_EXP 67
15659: PUSH
15660: LD_EXP 68
15664: PUSH
15665: LD_EXP 71
15669: PUSH
15670: LD_EXP 72
15674: PUSH
15675: LD_EXP 73
15679: PUSH
15680: LD_EXP 74
15684: PUSH
15685: LD_EXP 75
15689: PUSH
15690: LD_EXP 76
15694: PUSH
15695: LD_EXP 77
15699: PUSH
15700: LD_EXP 78
15704: PUSH
15705: LD_EXP 79
15709: PUSH
15710: LD_EXP 44
15714: PUSH
15715: LD_EXP 45
15719: PUSH
15720: LD_EXP 48
15724: PUSH
15725: LD_EXP 49
15729: PUSH
15730: LD_EXP 50
15734: PUSH
15735: LD_EXP 46
15739: PUSH
15740: LD_EXP 47
15744: PUSH
15745: LD_EXP 55
15749: PUSH
15750: LD_EXP 59
15754: PUSH
15755: LD_EXP 60
15759: PUSH
15760: LD_EXP 62
15764: PUSH
15765: LD_EXP 66
15769: PUSH
15770: LD_EXP 69
15774: PUSH
15775: LD_EXP 70
15779: PUSH
15780: LD_EXP 80
15784: PUSH
15785: LD_EXP 81
15789: PUSH
15790: LD_EXP 82
15794: PUSH
15795: LD_EXP 83
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
// tmp :=  ;
15856: LD_ADDR_VAR 0 3
15860: PUSH
15861: LD_STRING 
15863: ST_TO_ADDR
// for i = 1 to normalCounter do
15864: LD_ADDR_VAR 0 8
15868: PUSH
15869: DOUBLE
15870: LD_INT 1
15872: DEC
15873: ST_TO_ADDR
15874: LD_EXP 28
15878: PUSH
15879: FOR_TO
15880: IFFALSE 15916
// begin if flags [ i ] then
15882: LD_VAR 0 4
15886: PUSH
15887: LD_VAR 0 8
15891: ARRAY
15892: IFFALSE 15914
// tmp := tmp & i & ; ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 8
15908: STR
15909: PUSH
15910: LD_STRING ;
15912: STR
15913: ST_TO_ADDR
// end ;
15914: GO 15879
15916: POP
15917: POP
// for i = 1 to hardcoreCounter do
15918: LD_ADDR_VAR 0 8
15922: PUSH
15923: DOUBLE
15924: LD_INT 1
15926: DEC
15927: ST_TO_ADDR
15928: LD_EXP 29
15932: PUSH
15933: FOR_TO
15934: IFFALSE 15980
// begin if flags [ normalCounter + i ] then
15936: LD_VAR 0 4
15940: PUSH
15941: LD_EXP 28
15945: PUSH
15946: LD_VAR 0 8
15950: PLUS
15951: ARRAY
15952: IFFALSE 15978
// tmp := tmp & ( 100 + i ) & ; ;
15954: LD_ADDR_VAR 0 3
15958: PUSH
15959: LD_VAR 0 3
15963: PUSH
15964: LD_INT 100
15966: PUSH
15967: LD_VAR 0 8
15971: PLUS
15972: STR
15973: PUSH
15974: LD_STRING ;
15976: STR
15977: ST_TO_ADDR
// end ;
15978: GO 15933
15980: POP
15981: POP
// if tmp then
15982: LD_VAR 0 3
15986: IFFALSE 15998
// active := tmp ;
15988: LD_ADDR_VAR 0 7
15992: PUSH
15993: LD_VAR 0 3
15997: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15998: LD_STRING getStreamItemsFromMission("
16000: PUSH
16001: LD_VAR 0 5
16005: STR
16006: PUSH
16007: LD_STRING ","
16009: STR
16010: PUSH
16011: LD_VAR 0 6
16015: STR
16016: PUSH
16017: LD_STRING ","
16019: STR
16020: PUSH
16021: LD_VAR 0 7
16025: STR
16026: PUSH
16027: LD_STRING ")
16029: STR
16030: PPUSH
16031: CALL_OW 559
// end else
16035: GO 16044
// ToLua ( getStreamItemsFromMission("","","") ) ;
16037: LD_STRING getStreamItemsFromMission("","","")
16039: PPUSH
16040: CALL_OW 559
// end ;
16044: LD_VAR 0 2
16048: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16049: LD_EXP 27
16053: PUSH
16054: LD_EXP 32
16058: AND
16059: IFFALSE 16183
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// begin enable ;
16068: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_INT 22
16076: PUSH
16077: LD_OWVAR 2
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: PUSH
16089: LD_INT 34
16091: PUSH
16092: LD_INT 7
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 34
16101: PUSH
16102: LD_INT 45
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 34
16111: PUSH
16112: LD_INT 28
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 34
16121: PUSH
16122: LD_INT 47
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL_OW 69
16144: ST_TO_ADDR
// if not tmp then
16145: LD_VAR 0 2
16149: NOT
16150: IFFALSE 16154
// exit ;
16152: GO 16183
// for i in tmp do
16154: LD_ADDR_VAR 0 1
16158: PUSH
16159: LD_VAR 0 2
16163: PUSH
16164: FOR_IN
16165: IFFALSE 16181
// begin SetLives ( i , 0 ) ;
16167: LD_VAR 0 1
16171: PPUSH
16172: LD_INT 0
16174: PPUSH
16175: CALL_OW 234
// end ;
16179: GO 16164
16181: POP
16182: POP
// end ;
16183: PPOPN 2
16185: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16186: LD_EXP 27
16190: PUSH
16191: LD_EXP 33
16195: AND
16196: IFFALSE 16280
16198: GO 16200
16200: DISABLE
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
// begin enable ;
16205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: LD_INT 3
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PPUSH
16237: CALL_OW 69
16241: ST_TO_ADDR
// if not tmp then
16242: LD_VAR 0 2
16246: NOT
16247: IFFALSE 16251
// exit ;
16249: GO 16280
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 2
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16278
// begin SetLives ( i , 0 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 0
16271: PPUSH
16272: CALL_OW 234
// end ;
16276: GO 16261
16278: POP
16279: POP
// end ;
16280: PPOPN 2
16282: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16283: LD_EXP 27
16287: PUSH
16288: LD_EXP 30
16292: AND
16293: IFFALSE 16386
16295: GO 16297
16297: DISABLE
16298: LD_INT 0
16300: PPUSH
// begin enable ;
16301: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16302: LD_ADDR_VAR 0 1
16306: PUSH
16307: LD_INT 22
16309: PUSH
16310: LD_OWVAR 2
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: LD_INT 25
16324: PUSH
16325: LD_INT 5
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 25
16334: PUSH
16335: LD_INT 9
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 25
16344: PUSH
16345: LD_INT 8
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: PUSH
16367: FOR_IN
16368: IFFALSE 16384
// begin SetClass ( i , 1 ) ;
16370: LD_VAR 0 1
16374: PPUSH
16375: LD_INT 1
16377: PPUSH
16378: CALL_OW 336
// end ;
16382: GO 16367
16384: POP
16385: POP
// end ;
16386: PPOPN 1
16388: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16389: LD_EXP 27
16393: PUSH
16394: LD_EXP 31
16398: AND
16399: PUSH
16400: LD_OWVAR 65
16404: PUSH
16405: LD_INT 7
16407: LESS
16408: AND
16409: IFFALSE 16423
16411: GO 16413
16413: DISABLE
// begin enable ;
16414: ENABLE
// game_speed := 7 ;
16415: LD_ADDR_OWVAR 65
16419: PUSH
16420: LD_INT 7
16422: ST_TO_ADDR
// end ;
16423: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16424: LD_EXP 27
16428: PUSH
16429: LD_EXP 34
16433: AND
16434: IFFALSE 16636
16436: GO 16438
16438: DISABLE
16439: LD_INT 0
16441: PPUSH
16442: PPUSH
16443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16444: LD_ADDR_VAR 0 3
16448: PUSH
16449: LD_INT 81
16451: PUSH
16452: LD_OWVAR 2
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PPUSH
16475: CALL_OW 69
16479: ST_TO_ADDR
// if not tmp then
16480: LD_VAR 0 3
16484: NOT
16485: IFFALSE 16489
// exit ;
16487: GO 16636
// if tmp > 5 then
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 5
16496: GREATER
16497: IFFALSE 16509
// k := 5 else
16499: LD_ADDR_VAR 0 2
16503: PUSH
16504: LD_INT 5
16506: ST_TO_ADDR
16507: GO 16519
// k := tmp ;
16509: LD_ADDR_VAR 0 2
16513: PUSH
16514: LD_VAR 0 3
16518: ST_TO_ADDR
// for i := 1 to k do
16519: LD_ADDR_VAR 0 1
16523: PUSH
16524: DOUBLE
16525: LD_INT 1
16527: DEC
16528: ST_TO_ADDR
16529: LD_VAR 0 2
16533: PUSH
16534: FOR_TO
16535: IFFALSE 16634
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16537: LD_VAR 0 3
16541: PUSH
16542: LD_VAR 0 1
16546: ARRAY
16547: PPUSH
16548: LD_VAR 0 1
16552: PUSH
16553: LD_INT 4
16555: MOD
16556: PUSH
16557: LD_INT 1
16559: PLUS
16560: PPUSH
16561: CALL_OW 259
16565: PUSH
16566: LD_INT 10
16568: LESS
16569: IFFALSE 16632
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16571: LD_VAR 0 3
16575: PUSH
16576: LD_VAR 0 1
16580: ARRAY
16581: PPUSH
16582: LD_VAR 0 1
16586: PUSH
16587: LD_INT 4
16589: MOD
16590: PUSH
16591: LD_INT 1
16593: PLUS
16594: PPUSH
16595: LD_VAR 0 3
16599: PUSH
16600: LD_VAR 0 1
16604: ARRAY
16605: PPUSH
16606: LD_VAR 0 1
16610: PUSH
16611: LD_INT 4
16613: MOD
16614: PUSH
16615: LD_INT 1
16617: PLUS
16618: PPUSH
16619: CALL_OW 259
16623: PUSH
16624: LD_INT 1
16626: PLUS
16627: PPUSH
16628: CALL_OW 237
16632: GO 16534
16634: POP
16635: POP
// end ;
16636: PPOPN 3
16638: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16639: LD_EXP 27
16643: PUSH
16644: LD_EXP 35
16648: AND
16649: IFFALSE 16669
16651: GO 16653
16653: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16654: LD_INT 4
16656: PPUSH
16657: LD_OWVAR 2
16661: PPUSH
16662: LD_INT 0
16664: PPUSH
16665: CALL_OW 324
16669: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16670: LD_EXP 27
16674: PUSH
16675: LD_EXP 64
16679: AND
16680: IFFALSE 16700
16682: GO 16684
16684: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16685: LD_INT 19
16687: PPUSH
16688: LD_OWVAR 2
16692: PPUSH
16693: LD_INT 0
16695: PPUSH
16696: CALL_OW 324
16700: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16701: LD_EXP 27
16705: PUSH
16706: LD_EXP 36
16710: AND
16711: IFFALSE 16813
16713: GO 16715
16715: DISABLE
16716: LD_INT 0
16718: PPUSH
16719: PPUSH
// begin enable ;
16720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16721: LD_ADDR_VAR 0 2
16725: PUSH
16726: LD_INT 22
16728: PUSH
16729: LD_OWVAR 2
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 34
16743: PUSH
16744: LD_INT 11
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 34
16753: PUSH
16754: LD_INT 30
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PPUSH
16770: CALL_OW 69
16774: ST_TO_ADDR
// if not tmp then
16775: LD_VAR 0 2
16779: NOT
16780: IFFALSE 16784
// exit ;
16782: GO 16813
// for i in tmp do
16784: LD_ADDR_VAR 0 1
16788: PUSH
16789: LD_VAR 0 2
16793: PUSH
16794: FOR_IN
16795: IFFALSE 16811
// begin SetLives ( i , 0 ) ;
16797: LD_VAR 0 1
16801: PPUSH
16802: LD_INT 0
16804: PPUSH
16805: CALL_OW 234
// end ;
16809: GO 16794
16811: POP
16812: POP
// end ;
16813: PPOPN 2
16815: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16816: LD_EXP 27
16820: PUSH
16821: LD_EXP 37
16825: AND
16826: IFFALSE 16846
16828: GO 16830
16830: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16831: LD_INT 32
16833: PPUSH
16834: LD_OWVAR 2
16838: PPUSH
16839: LD_INT 0
16841: PPUSH
16842: CALL_OW 324
16846: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16847: LD_EXP 27
16851: PUSH
16852: LD_EXP 38
16856: AND
16857: IFFALSE 17038
16859: GO 16861
16861: DISABLE
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
16866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16867: LD_ADDR_VAR 0 2
16871: PUSH
16872: LD_INT 22
16874: PUSH
16875: LD_OWVAR 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 33
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 69
16902: ST_TO_ADDR
// if not tmp then
16903: LD_VAR 0 2
16907: NOT
16908: IFFALSE 16912
// exit ;
16910: GO 17038
// side := 0 ;
16912: LD_ADDR_VAR 0 3
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// for i := 1 to 8 do
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: DOUBLE
16926: LD_INT 1
16928: DEC
16929: ST_TO_ADDR
16930: LD_INT 8
16932: PUSH
16933: FOR_TO
16934: IFFALSE 16982
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16936: LD_OWVAR 2
16940: PUSH
16941: LD_VAR 0 1
16945: NONEQUAL
16946: PUSH
16947: LD_OWVAR 2
16951: PPUSH
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 81
16961: PUSH
16962: LD_INT 2
16964: EQUAL
16965: AND
16966: IFFALSE 16980
// begin side := i ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_VAR 0 1
16977: ST_TO_ADDR
// break ;
16978: GO 16982
// end ;
16980: GO 16933
16982: POP
16983: POP
// if not side then
16984: LD_VAR 0 3
16988: NOT
16989: IFFALSE 16993
// exit ;
16991: GO 17038
// for i := 1 to tmp do
16993: LD_ADDR_VAR 0 1
16997: PUSH
16998: DOUBLE
16999: LD_INT 1
17001: DEC
17002: ST_TO_ADDR
17003: LD_VAR 0 2
17007: PUSH
17008: FOR_TO
17009: IFFALSE 17036
// if Prob ( 60 ) then
17011: LD_INT 60
17013: PPUSH
17014: CALL_OW 13
17018: IFFALSE 17034
// SetSide ( i , side ) ;
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: CALL_OW 235
17034: GO 17008
17036: POP
17037: POP
// end ;
17038: PPOPN 3
17040: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17041: LD_EXP 27
17045: PUSH
17046: LD_EXP 40
17050: AND
17051: IFFALSE 17170
17053: GO 17055
17055: DISABLE
17056: LD_INT 0
17058: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17059: LD_ADDR_VAR 0 1
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_OWVAR 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 3
17088: PUSH
17089: LD_INT 23
17091: PUSH
17092: LD_INT 0
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: PUSH
17113: FOR_IN
17114: IFFALSE 17168
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 257
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: LD_INT 2
17131: PUSH
17132: LD_INT 3
17134: PUSH
17135: LD_INT 4
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: IN
17144: IFFALSE 17166
// SetClass ( un , rand ( 1 , 4 ) ) ;
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_INT 1
17153: PPUSH
17154: LD_INT 4
17156: PPUSH
17157: CALL_OW 12
17161: PPUSH
17162: CALL_OW 336
17166: GO 17113
17168: POP
17169: POP
// end ;
17170: PPOPN 1
17172: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17173: LD_EXP 27
17177: PUSH
17178: LD_EXP 39
17182: AND
17183: IFFALSE 17262
17185: GO 17187
17187: DISABLE
17188: LD_INT 0
17190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_OWVAR 2
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 21
17210: PUSH
17211: LD_INT 3
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 69
17226: ST_TO_ADDR
// if not tmp then
17227: LD_VAR 0 1
17231: NOT
17232: IFFALSE 17236
// exit ;
17234: GO 17262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17236: LD_VAR 0 1
17240: PUSH
17241: LD_INT 1
17243: PPUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 12
17253: ARRAY
17254: PPUSH
17255: LD_INT 100
17257: PPUSH
17258: CALL_OW 234
// end ;
17262: PPOPN 1
17264: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17265: LD_EXP 27
17269: PUSH
17270: LD_EXP 41
17274: AND
17275: IFFALSE 17373
17277: GO 17279
17279: DISABLE
17280: LD_INT 0
17282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17283: LD_ADDR_VAR 0 1
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_OWVAR 2
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 21
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 69
17318: ST_TO_ADDR
// if not tmp then
17319: LD_VAR 0 1
17323: NOT
17324: IFFALSE 17328
// exit ;
17326: GO 17373
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17328: LD_VAR 0 1
17332: PUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 12
17345: ARRAY
17346: PPUSH
17347: LD_INT 1
17349: PPUSH
17350: LD_INT 4
17352: PPUSH
17353: CALL_OW 12
17357: PPUSH
17358: LD_INT 3000
17360: PPUSH
17361: LD_INT 9000
17363: PPUSH
17364: CALL_OW 12
17368: PPUSH
17369: CALL_OW 492
// end ;
17373: PPOPN 1
17375: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17376: LD_EXP 27
17380: PUSH
17381: LD_EXP 42
17385: AND
17386: IFFALSE 17406
17388: GO 17390
17390: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17391: LD_INT 1
17393: PPUSH
17394: LD_OWVAR 2
17398: PPUSH
17399: LD_INT 0
17401: PPUSH
17402: CALL_OW 324
17406: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17407: LD_EXP 27
17411: PUSH
17412: LD_EXP 43
17416: AND
17417: IFFALSE 17500
17419: GO 17421
17421: DISABLE
17422: LD_INT 0
17424: PPUSH
17425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17426: LD_ADDR_VAR 0 2
17430: PUSH
17431: LD_INT 22
17433: PUSH
17434: LD_OWVAR 2
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 21
17445: PUSH
17446: LD_INT 3
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: ST_TO_ADDR
// if not tmp then
17462: LD_VAR 0 2
17466: NOT
17467: IFFALSE 17471
// exit ;
17469: GO 17500
// for i in tmp do
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_VAR 0 2
17480: PUSH
17481: FOR_IN
17482: IFFALSE 17498
// SetBLevel ( i , 10 ) ;
17484: LD_VAR 0 1
17488: PPUSH
17489: LD_INT 10
17491: PPUSH
17492: CALL_OW 241
17496: GO 17481
17498: POP
17499: POP
// end ;
17500: PPOPN 2
17502: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17503: LD_EXP 27
17507: PUSH
17508: LD_EXP 44
17512: AND
17513: IFFALSE 17624
17515: GO 17517
17517: DISABLE
17518: LD_INT 0
17520: PPUSH
17521: PPUSH
17522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: LD_INT 22
17530: PUSH
17531: LD_OWVAR 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 25
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PPUSH
17554: CALL_OW 69
17558: ST_TO_ADDR
// if not tmp then
17559: LD_VAR 0 3
17563: NOT
17564: IFFALSE 17568
// exit ;
17566: GO 17624
// un := tmp [ rand ( 1 , tmp ) ] ;
17568: LD_ADDR_VAR 0 2
17572: PUSH
17573: LD_VAR 0 3
17577: PUSH
17578: LD_INT 1
17580: PPUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL_OW 12
17590: ARRAY
17591: ST_TO_ADDR
// if Crawls ( un ) then
17592: LD_VAR 0 2
17596: PPUSH
17597: CALL_OW 318
17601: IFFALSE 17612
// ComWalk ( un ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17612: LD_VAR 0 2
17616: PPUSH
17617: LD_INT 5
17619: PPUSH
17620: CALL_OW 336
// end ;
17624: PPOPN 3
17626: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17627: LD_EXP 27
17631: PUSH
17632: LD_EXP 45
17636: AND
17637: PUSH
17638: LD_OWVAR 67
17642: PUSH
17643: LD_INT 4
17645: LESS
17646: AND
17647: IFFALSE 17666
17649: GO 17651
17651: DISABLE
// begin Difficulty := Difficulty + 1 ;
17652: LD_ADDR_OWVAR 67
17656: PUSH
17657: LD_OWVAR 67
17661: PUSH
17662: LD_INT 1
17664: PLUS
17665: ST_TO_ADDR
// end ;
17666: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17667: LD_EXP 27
17671: PUSH
17672: LD_EXP 46
17676: AND
17677: IFFALSE 17780
17679: GO 17681
17681: DISABLE
17682: LD_INT 0
17684: PPUSH
// begin for i := 1 to 5 do
17685: LD_ADDR_VAR 0 1
17689: PUSH
17690: DOUBLE
17691: LD_INT 1
17693: DEC
17694: ST_TO_ADDR
17695: LD_INT 5
17697: PUSH
17698: FOR_TO
17699: IFFALSE 17778
// begin uc_nation := nation_nature ;
17701: LD_ADDR_OWVAR 21
17705: PUSH
17706: LD_INT 0
17708: ST_TO_ADDR
// uc_side := 0 ;
17709: LD_ADDR_OWVAR 20
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17717: LD_ADDR_OWVAR 29
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 12
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: ST_TO_ADDR
// hc_agressivity := 20 ;
17732: LD_ADDR_OWVAR 35
17736: PUSH
17737: LD_INT 20
17739: ST_TO_ADDR
// hc_class := class_tiger ;
17740: LD_ADDR_OWVAR 28
17744: PUSH
17745: LD_INT 14
17747: ST_TO_ADDR
// hc_gallery :=  ;
17748: LD_ADDR_OWVAR 33
17752: PUSH
17753: LD_STRING 
17755: ST_TO_ADDR
// hc_name :=  ;
17756: LD_ADDR_OWVAR 26
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17764: CALL_OW 44
17768: PPUSH
17769: LD_INT 0
17771: PPUSH
17772: CALL_OW 51
// end ;
17776: GO 17698
17778: POP
17779: POP
// end ;
17780: PPOPN 1
17782: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17783: LD_EXP 27
17787: PUSH
17788: LD_EXP 47
17792: AND
17793: IFFALSE 17802
17795: GO 17797
17797: DISABLE
// StreamSibBomb ;
17798: CALL 17803 0 0
17802: END
// export function StreamSibBomb ; var i , x , y ; begin
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
// result := false ;
17809: LD_ADDR_VAR 0 1
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
// for i := 1 to 16 do
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: DOUBLE
17823: LD_INT 1
17825: DEC
17826: ST_TO_ADDR
17827: LD_INT 16
17829: PUSH
17830: FOR_TO
17831: IFFALSE 18030
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17833: LD_ADDR_VAR 0 3
17837: PUSH
17838: LD_INT 10
17840: PUSH
17841: LD_INT 20
17843: PUSH
17844: LD_INT 30
17846: PUSH
17847: LD_INT 40
17849: PUSH
17850: LD_INT 50
17852: PUSH
17853: LD_INT 60
17855: PUSH
17856: LD_INT 70
17858: PUSH
17859: LD_INT 80
17861: PUSH
17862: LD_INT 90
17864: PUSH
17865: LD_INT 100
17867: PUSH
17868: LD_INT 110
17870: PUSH
17871: LD_INT 120
17873: PUSH
17874: LD_INT 130
17876: PUSH
17877: LD_INT 140
17879: PUSH
17880: LD_INT 150
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 15
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17912: LD_ADDR_VAR 0 4
17916: PUSH
17917: LD_INT 10
17919: PUSH
17920: LD_INT 20
17922: PUSH
17923: LD_INT 30
17925: PUSH
17926: LD_INT 40
17928: PUSH
17929: LD_INT 50
17931: PUSH
17932: LD_INT 60
17934: PUSH
17935: LD_INT 70
17937: PUSH
17938: LD_INT 80
17940: PUSH
17941: LD_INT 90
17943: PUSH
17944: LD_INT 100
17946: PUSH
17947: LD_INT 110
17949: PUSH
17950: LD_INT 120
17952: PUSH
17953: LD_INT 130
17955: PUSH
17956: LD_INT 140
17958: PUSH
17959: LD_INT 150
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 1
17981: PPUSH
17982: LD_INT 15
17984: PPUSH
17985: CALL_OW 12
17989: ARRAY
17990: ST_TO_ADDR
// if ValidHex ( x , y ) then
17991: LD_VAR 0 3
17995: PPUSH
17996: LD_VAR 0 4
18000: PPUSH
18001: CALL_OW 488
18005: IFFALSE 18028
// begin result := [ x , y ] ;
18007: LD_ADDR_VAR 0 1
18011: PUSH
18012: LD_VAR 0 3
18016: PUSH
18017: LD_VAR 0 4
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: ST_TO_ADDR
// break ;
18026: GO 18030
// end ; end ;
18028: GO 17830
18030: POP
18031: POP
// if result then
18032: LD_VAR 0 1
18036: IFFALSE 18096
// begin ToLua ( playSibBomb() ) ;
18038: LD_STRING playSibBomb()
18040: PPUSH
18041: CALL_OW 559
// wait ( 0 0$14 ) ;
18045: LD_INT 490
18047: PPUSH
18048: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18052: LD_VAR 0 1
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: PPUSH
18061: LD_VAR 0 1
18065: PUSH
18066: LD_INT 2
18068: ARRAY
18069: PPUSH
18070: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18074: LD_VAR 0 1
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 2
18090: ARRAY
18091: PPUSH
18092: CALL_OW 429
// end ; end ;
18096: LD_VAR 0 1
18100: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18101: LD_EXP 27
18105: PUSH
18106: LD_EXP 49
18110: AND
18111: IFFALSE 18123
18113: GO 18115
18115: DISABLE
// YouLost (  ) ;
18116: LD_STRING 
18118: PPUSH
18119: CALL_OW 104
18123: END
// every 0 0$1 trigger StreamModeActive and sFog do
18124: LD_EXP 27
18128: PUSH
18129: LD_EXP 48
18133: AND
18134: IFFALSE 18148
18136: GO 18138
18138: DISABLE
// FogOff ( your_side ) ;
18139: LD_OWVAR 2
18143: PPUSH
18144: CALL_OW 344
18148: END
// every 0 0$1 trigger StreamModeActive and sSun do
18149: LD_EXP 27
18153: PUSH
18154: LD_EXP 50
18158: AND
18159: IFFALSE 18187
18161: GO 18163
18163: DISABLE
// begin solar_recharge_percent := 0 ;
18164: LD_ADDR_OWVAR 79
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18172: LD_INT 10500
18174: PPUSH
18175: CALL_OW 67
// solar_recharge_percent := 100 ;
18179: LD_ADDR_OWVAR 79
18183: PUSH
18184: LD_INT 100
18186: ST_TO_ADDR
// end ;
18187: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18188: LD_EXP 27
18192: PUSH
18193: LD_EXP 51
18197: AND
18198: IFFALSE 18437
18200: GO 18202
18202: DISABLE
18203: LD_INT 0
18205: PPUSH
18206: PPUSH
18207: PPUSH
// begin tmp := [ ] ;
18208: LD_ADDR_VAR 0 3
18212: PUSH
18213: EMPTY
18214: ST_TO_ADDR
// for i := 1 to 6 do
18215: LD_ADDR_VAR 0 1
18219: PUSH
18220: DOUBLE
18221: LD_INT 1
18223: DEC
18224: ST_TO_ADDR
18225: LD_INT 6
18227: PUSH
18228: FOR_TO
18229: IFFALSE 18334
// begin uc_nation := nation_nature ;
18231: LD_ADDR_OWVAR 21
18235: PUSH
18236: LD_INT 0
18238: ST_TO_ADDR
// uc_side := 0 ;
18239: LD_ADDR_OWVAR 20
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18247: LD_ADDR_OWVAR 29
18251: PUSH
18252: LD_INT 12
18254: PUSH
18255: LD_INT 12
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: ST_TO_ADDR
// hc_agressivity := 20 ;
18262: LD_ADDR_OWVAR 35
18266: PUSH
18267: LD_INT 20
18269: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18270: LD_ADDR_OWVAR 28
18274: PUSH
18275: LD_INT 17
18277: ST_TO_ADDR
// hc_gallery :=  ;
18278: LD_ADDR_OWVAR 33
18282: PUSH
18283: LD_STRING 
18285: ST_TO_ADDR
// hc_name :=  ;
18286: LD_ADDR_OWVAR 26
18290: PUSH
18291: LD_STRING 
18293: ST_TO_ADDR
// un := CreateHuman ;
18294: LD_ADDR_VAR 0 2
18298: PUSH
18299: CALL_OW 44
18303: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: CALL_OW 51
// tmp := tmp ^ un ;
18316: LD_ADDR_VAR 0 3
18320: PUSH
18321: LD_VAR 0 3
18325: PUSH
18326: LD_VAR 0 2
18330: ADD
18331: ST_TO_ADDR
// end ;
18332: GO 18228
18334: POP
18335: POP
// repeat wait ( 0 0$1 ) ;
18336: LD_INT 35
18338: PPUSH
18339: CALL_OW 67
// for un in tmp do
18343: LD_ADDR_VAR 0 2
18347: PUSH
18348: LD_VAR 0 3
18352: PUSH
18353: FOR_IN
18354: IFFALSE 18428
// begin if IsDead ( un ) then
18356: LD_VAR 0 2
18360: PPUSH
18361: CALL_OW 301
18365: IFFALSE 18385
// begin tmp := tmp diff un ;
18367: LD_ADDR_VAR 0 3
18371: PUSH
18372: LD_VAR 0 3
18376: PUSH
18377: LD_VAR 0 2
18381: DIFF
18382: ST_TO_ADDR
// continue ;
18383: GO 18353
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18385: LD_VAR 0 2
18389: PPUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 22
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PPUSH
18407: CALL_OW 69
18411: PPUSH
18412: LD_VAR 0 2
18416: PPUSH
18417: CALL_OW 74
18421: PPUSH
18422: CALL_OW 115
// end ;
18426: GO 18353
18428: POP
18429: POP
// until not tmp ;
18430: LD_VAR 0 3
18434: NOT
18435: IFFALSE 18336
// end ;
18437: PPOPN 3
18439: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18440: LD_EXP 27
18444: PUSH
18445: LD_EXP 52
18449: AND
18450: IFFALSE 18504
18452: GO 18454
18454: DISABLE
// begin ToLua ( displayTroll(); ) ;
18455: LD_STRING displayTroll();
18457: PPUSH
18458: CALL_OW 559
// wait ( 3 3$00 ) ;
18462: LD_INT 6300
18464: PPUSH
18465: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18469: LD_STRING hideTroll();
18471: PPUSH
18472: CALL_OW 559
// wait ( 1 1$00 ) ;
18476: LD_INT 2100
18478: PPUSH
18479: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18483: LD_STRING displayTroll();
18485: PPUSH
18486: CALL_OW 559
// wait ( 1 1$00 ) ;
18490: LD_INT 2100
18492: PPUSH
18493: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18497: LD_STRING hideTroll();
18499: PPUSH
18500: CALL_OW 559
// end ;
18504: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18505: LD_EXP 27
18509: PUSH
18510: LD_EXP 53
18514: AND
18515: IFFALSE 18578
18517: GO 18519
18519: DISABLE
18520: LD_INT 0
18522: PPUSH
// begin p := 0 ;
18523: LD_ADDR_VAR 0 1
18527: PUSH
18528: LD_INT 0
18530: ST_TO_ADDR
// repeat game_speed := 1 ;
18531: LD_ADDR_OWVAR 65
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18539: LD_INT 35
18541: PPUSH
18542: CALL_OW 67
// p := p + 1 ;
18546: LD_ADDR_VAR 0 1
18550: PUSH
18551: LD_VAR 0 1
18555: PUSH
18556: LD_INT 1
18558: PLUS
18559: ST_TO_ADDR
// until p >= 60 ;
18560: LD_VAR 0 1
18564: PUSH
18565: LD_INT 60
18567: GREATEREQUAL
18568: IFFALSE 18531
// game_speed := 4 ;
18570: LD_ADDR_OWVAR 65
18574: PUSH
18575: LD_INT 4
18577: ST_TO_ADDR
// end ;
18578: PPOPN 1
18580: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18581: LD_EXP 27
18585: PUSH
18586: LD_EXP 54
18590: AND
18591: IFFALSE 18737
18593: GO 18595
18595: DISABLE
18596: LD_INT 0
18598: PPUSH
18599: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: LD_INT 22
18607: PUSH
18608: LD_OWVAR 2
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 30
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 30
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: ST_TO_ADDR
// if not depot then
18654: LD_VAR 0 1
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 18737
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_VAR 0 1
18672: PUSH
18673: LD_INT 1
18675: PPUSH
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 12
18685: ARRAY
18686: PPUSH
18687: CALL_OW 274
18691: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18692: LD_VAR 0 2
18696: PPUSH
18697: LD_INT 1
18699: PPUSH
18700: LD_INT 0
18702: PPUSH
18703: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18707: LD_VAR 0 2
18711: PPUSH
18712: LD_INT 2
18714: PPUSH
18715: LD_INT 0
18717: PPUSH
18718: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18722: LD_VAR 0 2
18726: PPUSH
18727: LD_INT 3
18729: PPUSH
18730: LD_INT 0
18732: PPUSH
18733: CALL_OW 277
// end ;
18737: PPOPN 2
18739: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18740: LD_EXP 27
18744: PUSH
18745: LD_EXP 55
18749: AND
18750: IFFALSE 18847
18752: GO 18754
18754: DISABLE
18755: LD_INT 0
18757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18758: LD_ADDR_VAR 0 1
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_OWVAR 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 21
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: LD_INT 23
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 69
18811: ST_TO_ADDR
// if not tmp then
18812: LD_VAR 0 1
18816: NOT
18817: IFFALSE 18821
// exit ;
18819: GO 18847
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18821: LD_VAR 0 1
18825: PUSH
18826: LD_INT 1
18828: PPUSH
18829: LD_VAR 0 1
18833: PPUSH
18834: CALL_OW 12
18838: ARRAY
18839: PPUSH
18840: LD_INT 200
18842: PPUSH
18843: CALL_OW 234
// end ;
18847: PPOPN 1
18849: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18850: LD_EXP 27
18854: PUSH
18855: LD_EXP 56
18859: AND
18860: IFFALSE 18939
18862: GO 18864
18864: DISABLE
18865: LD_INT 0
18867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18868: LD_ADDR_VAR 0 1
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_OWVAR 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 21
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: ST_TO_ADDR
// if not tmp then
18904: LD_VAR 0 1
18908: NOT
18909: IFFALSE 18913
// exit ;
18911: GO 18939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18913: LD_VAR 0 1
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 12
18930: ARRAY
18931: PPUSH
18932: LD_INT 60
18934: PPUSH
18935: CALL_OW 234
// end ;
18939: PPOPN 1
18941: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18942: LD_EXP 27
18946: PUSH
18947: LD_EXP 57
18951: AND
18952: IFFALSE 19051
18954: GO 18956
18956: DISABLE
18957: LD_INT 0
18959: PPUSH
18960: PPUSH
// begin enable ;
18961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18962: LD_ADDR_VAR 0 1
18966: PUSH
18967: LD_INT 22
18969: PUSH
18970: LD_OWVAR 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 61
18981: PUSH
18982: EMPTY
18983: LIST
18984: PUSH
18985: LD_INT 33
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: PPUSH
19000: CALL_OW 69
19004: ST_TO_ADDR
// if not tmp then
19005: LD_VAR 0 1
19009: NOT
19010: IFFALSE 19014
// exit ;
19012: GO 19051
// for i in tmp do
19014: LD_ADDR_VAR 0 2
19018: PUSH
19019: LD_VAR 0 1
19023: PUSH
19024: FOR_IN
19025: IFFALSE 19049
// if IsControledBy ( i ) then
19027: LD_VAR 0 2
19031: PPUSH
19032: CALL_OW 312
19036: IFFALSE 19047
// ComUnlink ( i ) ;
19038: LD_VAR 0 2
19042: PPUSH
19043: CALL_OW 136
19047: GO 19024
19049: POP
19050: POP
// end ;
19051: PPOPN 2
19053: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19054: LD_EXP 27
19058: PUSH
19059: LD_EXP 58
19063: AND
19064: IFFALSE 19204
19066: GO 19068
19068: DISABLE
19069: LD_INT 0
19071: PPUSH
19072: PPUSH
// begin ToLua ( displayPowell(); ) ;
19073: LD_STRING displayPowell();
19075: PPUSH
19076: CALL_OW 559
// uc_side := 0 ;
19080: LD_ADDR_OWVAR 20
19084: PUSH
19085: LD_INT 0
19087: ST_TO_ADDR
// uc_nation := 2 ;
19088: LD_ADDR_OWVAR 21
19092: PUSH
19093: LD_INT 2
19095: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19096: LD_ADDR_OWVAR 37
19100: PUSH
19101: LD_INT 14
19103: ST_TO_ADDR
// vc_engine := engine_siberite ;
19104: LD_ADDR_OWVAR 39
19108: PUSH
19109: LD_INT 3
19111: ST_TO_ADDR
// vc_control := control_apeman ;
19112: LD_ADDR_OWVAR 38
19116: PUSH
19117: LD_INT 5
19119: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19120: LD_ADDR_OWVAR 40
19124: PUSH
19125: LD_INT 29
19127: ST_TO_ADDR
// un := CreateVehicle ;
19128: LD_ADDR_VAR 0 2
19132: PUSH
19133: CALL_OW 45
19137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19138: LD_VAR 0 2
19142: PPUSH
19143: LD_INT 1
19145: PPUSH
19146: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19150: LD_INT 35
19152: PPUSH
19153: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19157: LD_VAR 0 2
19161: PPUSH
19162: LD_INT 22
19164: PUSH
19165: LD_OWVAR 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: PPUSH
19179: LD_VAR 0 2
19183: PPUSH
19184: CALL_OW 74
19188: PPUSH
19189: CALL_OW 115
// until IsDead ( un ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: CALL_OW 301
19202: IFFALSE 19150
// end ;
19204: PPOPN 2
19206: END
// every 0 0$1 trigger StreamModeActive and sStu do
19207: LD_EXP 27
19211: PUSH
19212: LD_EXP 66
19216: AND
19217: IFFALSE 19233
19219: GO 19221
19221: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19222: LD_STRING displayStucuk();
19224: PPUSH
19225: CALL_OW 559
// ResetFog ;
19229: CALL_OW 335
// end ;
19233: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19234: LD_EXP 27
19238: PUSH
19239: LD_EXP 59
19243: AND
19244: IFFALSE 19385
19246: GO 19248
19248: DISABLE
19249: LD_INT 0
19251: PPUSH
19252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19253: LD_ADDR_VAR 0 2
19257: PUSH
19258: LD_INT 22
19260: PUSH
19261: LD_OWVAR 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 21
19272: PUSH
19273: LD_INT 1
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 69
19288: ST_TO_ADDR
// if not tmp then
19289: LD_VAR 0 2
19293: NOT
19294: IFFALSE 19298
// exit ;
19296: GO 19385
// un := tmp [ rand ( 1 , tmp ) ] ;
19298: LD_ADDR_VAR 0 1
19302: PUSH
19303: LD_VAR 0 2
19307: PUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_VAR 0 2
19315: PPUSH
19316: CALL_OW 12
19320: ARRAY
19321: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_INT 0
19329: PPUSH
19330: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: LD_OWVAR 3
19343: PUSH
19344: LD_VAR 0 1
19348: DIFF
19349: PPUSH
19350: LD_VAR 0 1
19354: PPUSH
19355: CALL_OW 74
19359: PPUSH
19360: CALL_OW 115
// wait ( 0 0$20 ) ;
19364: LD_INT 700
19366: PPUSH
19367: CALL_OW 67
// SetSide ( un , your_side ) ;
19371: LD_VAR 0 1
19375: PPUSH
19376: LD_OWVAR 2
19380: PPUSH
19381: CALL_OW 235
// end ;
19385: PPOPN 2
19387: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19388: LD_EXP 27
19392: PUSH
19393: LD_EXP 60
19397: AND
19398: IFFALSE 19504
19400: GO 19402
19402: DISABLE
19403: LD_INT 0
19405: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_OWVAR 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: LD_INT 30
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 30
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PPUSH
19455: CALL_OW 69
19459: ST_TO_ADDR
// if not depot then
19460: LD_VAR 0 1
19464: NOT
19465: IFFALSE 19469
// exit ;
19467: GO 19504
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19469: LD_VAR 0 1
19473: PUSH
19474: LD_INT 1
19476: ARRAY
19477: PPUSH
19478: CALL_OW 250
19482: PPUSH
19483: LD_VAR 0 1
19487: PUSH
19488: LD_INT 1
19490: ARRAY
19491: PPUSH
19492: CALL_OW 251
19496: PPUSH
19497: LD_INT 70
19499: PPUSH
19500: CALL_OW 495
// end ;
19504: PPOPN 1
19506: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19507: LD_EXP 27
19511: PUSH
19512: LD_EXP 61
19516: AND
19517: IFFALSE 19728
19519: GO 19521
19521: DISABLE
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
19528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19529: LD_ADDR_VAR 0 5
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_OWVAR 2
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 21
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PPUSH
19560: CALL_OW 69
19564: ST_TO_ADDR
// if not tmp then
19565: LD_VAR 0 5
19569: NOT
19570: IFFALSE 19574
// exit ;
19572: GO 19728
// for i in tmp do
19574: LD_ADDR_VAR 0 1
19578: PUSH
19579: LD_VAR 0 5
19583: PUSH
19584: FOR_IN
19585: IFFALSE 19726
// begin d := rand ( 0 , 5 ) ;
19587: LD_ADDR_VAR 0 4
19591: PUSH
19592: LD_INT 0
19594: PPUSH
19595: LD_INT 5
19597: PPUSH
19598: CALL_OW 12
19602: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19603: LD_ADDR_VAR 0 2
19607: PUSH
19608: LD_VAR 0 1
19612: PPUSH
19613: CALL_OW 250
19617: PPUSH
19618: LD_VAR 0 4
19622: PPUSH
19623: LD_INT 3
19625: PPUSH
19626: LD_INT 12
19628: PPUSH
19629: CALL_OW 12
19633: PPUSH
19634: CALL_OW 272
19638: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 251
19653: PPUSH
19654: LD_VAR 0 4
19658: PPUSH
19659: LD_INT 3
19661: PPUSH
19662: LD_INT 12
19664: PPUSH
19665: CALL_OW 12
19669: PPUSH
19670: CALL_OW 273
19674: ST_TO_ADDR
// if ValidHex ( x , y ) then
19675: LD_VAR 0 2
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: CALL_OW 488
19689: IFFALSE 19724
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19691: LD_VAR 0 1
19695: PPUSH
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_VAR 0 3
19705: PPUSH
19706: LD_INT 3
19708: PPUSH
19709: LD_INT 6
19711: PPUSH
19712: CALL_OW 12
19716: PPUSH
19717: LD_INT 1
19719: PPUSH
19720: CALL_OW 483
// end ;
19724: GO 19584
19726: POP
19727: POP
// end ;
19728: PPOPN 5
19730: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19731: LD_EXP 27
19735: PUSH
19736: LD_EXP 62
19740: AND
19741: IFFALSE 19835
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
19749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 32
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 69
19796: ST_TO_ADDR
// if not tmp then
19797: LD_VAR 0 2
19801: NOT
19802: IFFALSE 19806
// exit ;
19804: GO 19835
// for i in tmp do
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_VAR 0 2
19815: PUSH
19816: FOR_IN
19817: IFFALSE 19833
// SetFuel ( i , 0 ) ;
19819: LD_VAR 0 1
19823: PPUSH
19824: LD_INT 0
19826: PPUSH
19827: CALL_OW 240
19831: GO 19816
19833: POP
19834: POP
// end ;
19835: PPOPN 2
19837: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19838: LD_EXP 27
19842: PUSH
19843: LD_EXP 63
19847: AND
19848: IFFALSE 19914
19850: GO 19852
19852: DISABLE
19853: LD_INT 0
19855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19856: LD_ADDR_VAR 0 1
19860: PUSH
19861: LD_INT 22
19863: PUSH
19864: LD_OWVAR 2
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 30
19875: PUSH
19876: LD_INT 29
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: ST_TO_ADDR
// if not tmp then
19892: LD_VAR 0 1
19896: NOT
19897: IFFALSE 19901
// exit ;
19899: GO 19914
// DestroyUnit ( tmp [ 1 ] ) ;
19901: LD_VAR 0 1
19905: PUSH
19906: LD_INT 1
19908: ARRAY
19909: PPUSH
19910: CALL_OW 65
// end ;
19914: PPOPN 1
19916: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19917: LD_EXP 27
19921: PUSH
19922: LD_EXP 65
19926: AND
19927: IFFALSE 20056
19929: GO 19931
19931: DISABLE
19932: LD_INT 0
19934: PPUSH
// begin uc_side := 0 ;
19935: LD_ADDR_OWVAR 20
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// uc_nation := nation_arabian ;
19943: LD_ADDR_OWVAR 21
19947: PUSH
19948: LD_INT 2
19950: ST_TO_ADDR
// hc_gallery :=  ;
19951: LD_ADDR_OWVAR 33
19955: PUSH
19956: LD_STRING 
19958: ST_TO_ADDR
// hc_name :=  ;
19959: LD_ADDR_OWVAR 26
19963: PUSH
19964: LD_STRING 
19966: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19967: LD_INT 1
19969: PPUSH
19970: LD_INT 11
19972: PPUSH
19973: LD_INT 10
19975: PPUSH
19976: CALL_OW 380
// un := CreateHuman ;
19980: LD_ADDR_VAR 0 1
19984: PUSH
19985: CALL_OW 44
19989: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19990: LD_VAR 0 1
19994: PPUSH
19995: LD_INT 1
19997: PPUSH
19998: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20002: LD_INT 35
20004: PPUSH
20005: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20009: LD_VAR 0 1
20013: PPUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: PPUSH
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 74
20040: PPUSH
20041: CALL_OW 115
// until IsDead ( un ) ;
20045: LD_VAR 0 1
20049: PPUSH
20050: CALL_OW 301
20054: IFFALSE 20002
// end ;
20056: PPOPN 1
20058: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20059: LD_EXP 27
20063: PUSH
20064: LD_EXP 67
20068: AND
20069: IFFALSE 20081
20071: GO 20073
20073: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20074: LD_STRING earthquake(getX(game), 0, 32)
20076: PPUSH
20077: CALL_OW 559
20081: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20082: LD_EXP 27
20086: PUSH
20087: LD_EXP 68
20091: AND
20092: IFFALSE 20183
20094: GO 20096
20096: DISABLE
20097: LD_INT 0
20099: PPUSH
// begin enable ;
20100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20101: LD_ADDR_VAR 0 1
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_OWVAR 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 21
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 33
20130: PUSH
20131: LD_INT 3
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 69
20147: ST_TO_ADDR
// if not tmp then
20148: LD_VAR 0 1
20152: NOT
20153: IFFALSE 20157
// exit ;
20155: GO 20183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20157: LD_VAR 0 1
20161: PUSH
20162: LD_INT 1
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 12
20174: ARRAY
20175: PPUSH
20176: LD_INT 1
20178: PPUSH
20179: CALL_OW 234
// end ;
20183: PPOPN 1
20185: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20186: LD_EXP 27
20190: PUSH
20191: LD_EXP 69
20195: AND
20196: IFFALSE 20337
20198: GO 20200
20200: DISABLE
20201: LD_INT 0
20203: PPUSH
20204: PPUSH
20205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20206: LD_ADDR_VAR 0 3
20210: PUSH
20211: LD_INT 22
20213: PUSH
20214: LD_OWVAR 2
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 25
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 69
20241: ST_TO_ADDR
// if not tmp then
20242: LD_VAR 0 3
20246: NOT
20247: IFFALSE 20251
// exit ;
20249: GO 20337
// un := tmp [ rand ( 1 , tmp ) ] ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 1
20263: PPUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: CALL_OW 12
20273: ARRAY
20274: ST_TO_ADDR
// if Crawls ( un ) then
20275: LD_VAR 0 2
20279: PPUSH
20280: CALL_OW 318
20284: IFFALSE 20295
// ComWalk ( un ) ;
20286: LD_VAR 0 2
20290: PPUSH
20291: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20295: LD_VAR 0 2
20299: PPUSH
20300: LD_INT 9
20302: PPUSH
20303: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20307: LD_INT 28
20309: PPUSH
20310: LD_OWVAR 2
20314: PPUSH
20315: LD_INT 2
20317: PPUSH
20318: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20322: LD_INT 29
20324: PPUSH
20325: LD_OWVAR 2
20329: PPUSH
20330: LD_INT 2
20332: PPUSH
20333: CALL_OW 322
// end ;
20337: PPOPN 3
20339: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20340: LD_EXP 27
20344: PUSH
20345: LD_EXP 70
20349: AND
20350: IFFALSE 20461
20352: GO 20354
20354: DISABLE
20355: LD_INT 0
20357: PPUSH
20358: PPUSH
20359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_INT 22
20367: PUSH
20368: LD_OWVAR 2
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 25
20379: PUSH
20380: LD_INT 1
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PPUSH
20391: CALL_OW 69
20395: ST_TO_ADDR
// if not tmp then
20396: LD_VAR 0 3
20400: NOT
20401: IFFALSE 20405
// exit ;
20403: GO 20461
// un := tmp [ rand ( 1 , tmp ) ] ;
20405: LD_ADDR_VAR 0 2
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 1
20417: PPUSH
20418: LD_VAR 0 3
20422: PPUSH
20423: CALL_OW 12
20427: ARRAY
20428: ST_TO_ADDR
// if Crawls ( un ) then
20429: LD_VAR 0 2
20433: PPUSH
20434: CALL_OW 318
20438: IFFALSE 20449
// ComWalk ( un ) ;
20440: LD_VAR 0 2
20444: PPUSH
20445: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20449: LD_VAR 0 2
20453: PPUSH
20454: LD_INT 8
20456: PPUSH
20457: CALL_OW 336
// end ;
20461: PPOPN 3
20463: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20464: LD_EXP 27
20468: PUSH
20469: LD_EXP 71
20473: AND
20474: IFFALSE 20618
20476: GO 20478
20478: DISABLE
20479: LD_INT 0
20481: PPUSH
20482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20483: LD_ADDR_VAR 0 2
20487: PUSH
20488: LD_INT 22
20490: PUSH
20491: LD_OWVAR 2
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 21
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: LD_INT 34
20515: PUSH
20516: LD_INT 12
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 34
20525: PUSH
20526: LD_INT 51
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 34
20535: PUSH
20536: LD_INT 32
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 69
20558: ST_TO_ADDR
// if not tmp then
20559: LD_VAR 0 2
20563: NOT
20564: IFFALSE 20568
// exit ;
20566: GO 20618
// for i in tmp do
20568: LD_ADDR_VAR 0 1
20572: PUSH
20573: LD_VAR 0 2
20577: PUSH
20578: FOR_IN
20579: IFFALSE 20616
// if GetCargo ( i , mat_artifact ) = 0 then
20581: LD_VAR 0 1
20585: PPUSH
20586: LD_INT 4
20588: PPUSH
20589: CALL_OW 289
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20614
// SetCargo ( i , mat_siberit , 100 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: LD_INT 3
20606: PPUSH
20607: LD_INT 100
20609: PPUSH
20610: CALL_OW 290
20614: GO 20578
20616: POP
20617: POP
// end ;
20618: PPOPN 2
20620: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20621: LD_EXP 27
20625: PUSH
20626: LD_EXP 72
20630: AND
20631: IFFALSE 20814
20633: GO 20635
20635: DISABLE
20636: LD_INT 0
20638: PPUSH
20639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20640: LD_ADDR_VAR 0 2
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_OWVAR 2
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PPUSH
20657: CALL_OW 69
20661: ST_TO_ADDR
// if not tmp then
20662: LD_VAR 0 2
20666: NOT
20667: IFFALSE 20671
// exit ;
20669: GO 20814
// for i := 1 to 2 do
20671: LD_ADDR_VAR 0 1
20675: PUSH
20676: DOUBLE
20677: LD_INT 1
20679: DEC
20680: ST_TO_ADDR
20681: LD_INT 2
20683: PUSH
20684: FOR_TO
20685: IFFALSE 20812
// begin uc_side := your_side ;
20687: LD_ADDR_OWVAR 20
20691: PUSH
20692: LD_OWVAR 2
20696: ST_TO_ADDR
// uc_nation := nation_american ;
20697: LD_ADDR_OWVAR 21
20701: PUSH
20702: LD_INT 1
20704: ST_TO_ADDR
// vc_chassis := us_morphling ;
20705: LD_ADDR_OWVAR 37
20709: PUSH
20710: LD_INT 5
20712: ST_TO_ADDR
// vc_engine := engine_siberite ;
20713: LD_ADDR_OWVAR 39
20717: PUSH
20718: LD_INT 3
20720: ST_TO_ADDR
// vc_control := control_computer ;
20721: LD_ADDR_OWVAR 38
20725: PUSH
20726: LD_INT 3
20728: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20729: LD_ADDR_OWVAR 40
20733: PUSH
20734: LD_INT 10
20736: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20737: LD_VAR 0 2
20741: PUSH
20742: LD_INT 1
20744: ARRAY
20745: PPUSH
20746: CALL_OW 310
20750: NOT
20751: IFFALSE 20798
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20753: CALL_OW 45
20757: PPUSH
20758: LD_VAR 0 2
20762: PUSH
20763: LD_INT 1
20765: ARRAY
20766: PPUSH
20767: CALL_OW 250
20771: PPUSH
20772: LD_VAR 0 2
20776: PUSH
20777: LD_INT 1
20779: ARRAY
20780: PPUSH
20781: CALL_OW 251
20785: PPUSH
20786: LD_INT 12
20788: PPUSH
20789: LD_INT 1
20791: PPUSH
20792: CALL_OW 50
20796: GO 20810
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20798: CALL_OW 45
20802: PPUSH
20803: LD_INT 1
20805: PPUSH
20806: CALL_OW 51
// end ;
20810: GO 20684
20812: POP
20813: POP
// end ;
20814: PPOPN 2
20816: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20817: LD_EXP 27
20821: PUSH
20822: LD_EXP 73
20826: AND
20827: IFFALSE 21049
20829: GO 20831
20831: DISABLE
20832: LD_INT 0
20834: PPUSH
20835: PPUSH
20836: PPUSH
20837: PPUSH
20838: PPUSH
20839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20840: LD_ADDR_VAR 0 6
20844: PUSH
20845: LD_INT 22
20847: PUSH
20848: LD_OWVAR 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 21
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 3
20869: PUSH
20870: LD_INT 23
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: ST_TO_ADDR
// if not tmp then
20894: LD_VAR 0 6
20898: NOT
20899: IFFALSE 20903
// exit ;
20901: GO 21049
// s1 := rand ( 1 , 4 ) ;
20903: LD_ADDR_VAR 0 2
20907: PUSH
20908: LD_INT 1
20910: PPUSH
20911: LD_INT 4
20913: PPUSH
20914: CALL_OW 12
20918: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_VAR 0 6
20928: PUSH
20929: LD_INT 1
20931: ARRAY
20932: PPUSH
20933: LD_VAR 0 2
20937: PPUSH
20938: CALL_OW 259
20942: ST_TO_ADDR
// if s1 = 1 then
20943: LD_VAR 0 2
20947: PUSH
20948: LD_INT 1
20950: EQUAL
20951: IFFALSE 20971
// s2 := rand ( 2 , 4 ) else
20953: LD_ADDR_VAR 0 3
20957: PUSH
20958: LD_INT 2
20960: PPUSH
20961: LD_INT 4
20963: PPUSH
20964: CALL_OW 12
20968: ST_TO_ADDR
20969: GO 20979
// s2 := 1 ;
20971: LD_ADDR_VAR 0 3
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20979: LD_ADDR_VAR 0 5
20983: PUSH
20984: LD_VAR 0 6
20988: PUSH
20989: LD_INT 1
20991: ARRAY
20992: PPUSH
20993: LD_VAR 0 3
20997: PPUSH
20998: CALL_OW 259
21002: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21003: LD_VAR 0 6
21007: PUSH
21008: LD_INT 1
21010: ARRAY
21011: PPUSH
21012: LD_VAR 0 2
21016: PPUSH
21017: LD_VAR 0 5
21021: PPUSH
21022: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: PPUSH
21035: LD_VAR 0 3
21039: PPUSH
21040: LD_VAR 0 4
21044: PPUSH
21045: CALL_OW 237
// end ;
21049: PPOPN 6
21051: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21052: LD_EXP 27
21056: PUSH
21057: LD_EXP 74
21061: AND
21062: IFFALSE 21141
21064: GO 21066
21066: DISABLE
21067: LD_INT 0
21069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21070: LD_ADDR_VAR 0 1
21074: PUSH
21075: LD_INT 22
21077: PUSH
21078: LD_OWVAR 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 30
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: CALL_OW 69
21105: ST_TO_ADDR
// if not tmp then
21106: LD_VAR 0 1
21110: NOT
21111: IFFALSE 21115
// exit ;
21113: GO 21141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21115: LD_VAR 0 1
21119: PUSH
21120: LD_INT 1
21122: PPUSH
21123: LD_VAR 0 1
21127: PPUSH
21128: CALL_OW 12
21132: ARRAY
21133: PPUSH
21134: LD_INT 1
21136: PPUSH
21137: CALL_OW 234
// end ;
21141: PPOPN 1
21143: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21144: LD_EXP 27
21148: PUSH
21149: LD_EXP 75
21153: AND
21154: IFFALSE 21266
21156: GO 21158
21158: DISABLE
21159: LD_INT 0
21161: PPUSH
21162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21163: LD_ADDR_VAR 0 2
21167: PUSH
21168: LD_INT 22
21170: PUSH
21171: LD_OWVAR 2
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: LD_INT 27
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 30
21195: PUSH
21196: LD_INT 26
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 30
21205: PUSH
21206: LD_INT 28
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 69
21227: ST_TO_ADDR
// if not tmp then
21228: LD_VAR 0 2
21232: NOT
21233: IFFALSE 21237
// exit ;
21235: GO 21266
// for i in tmp do
21237: LD_ADDR_VAR 0 1
21241: PUSH
21242: LD_VAR 0 2
21246: PUSH
21247: FOR_IN
21248: IFFALSE 21264
// SetLives ( i , 1 ) ;
21250: LD_VAR 0 1
21254: PPUSH
21255: LD_INT 1
21257: PPUSH
21258: CALL_OW 234
21262: GO 21247
21264: POP
21265: POP
// end ;
21266: PPOPN 2
21268: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21269: LD_EXP 27
21273: PUSH
21274: LD_EXP 76
21278: AND
21279: IFFALSE 21566
21281: GO 21283
21283: DISABLE
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
// begin i := rand ( 1 , 7 ) ;
21289: LD_ADDR_VAR 0 1
21293: PUSH
21294: LD_INT 1
21296: PPUSH
21297: LD_INT 7
21299: PPUSH
21300: CALL_OW 12
21304: ST_TO_ADDR
// case i of 1 :
21305: LD_VAR 0 1
21309: PUSH
21310: LD_INT 1
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21328
21318: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21319: LD_STRING earthquake(getX(game), 0, 32)
21321: PPUSH
21322: CALL_OW 559
21326: GO 21566
21328: LD_INT 2
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21350
21336: POP
// begin ToLua ( displayStucuk(); ) ;
21337: LD_STRING displayStucuk();
21339: PPUSH
21340: CALL_OW 559
// ResetFog ;
21344: CALL_OW 335
// end ; 3 :
21348: GO 21566
21350: LD_INT 3
21352: DOUBLE
21353: EQUAL
21354: IFTRUE 21358
21356: GO 21462
21358: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21359: LD_ADDR_VAR 0 2
21363: PUSH
21364: LD_INT 22
21366: PUSH
21367: LD_OWVAR 2
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 25
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PPUSH
21390: CALL_OW 69
21394: ST_TO_ADDR
// if not tmp then
21395: LD_VAR 0 2
21399: NOT
21400: IFFALSE 21404
// exit ;
21402: GO 21566
// un := tmp [ rand ( 1 , tmp ) ] ;
21404: LD_ADDR_VAR 0 3
21408: PUSH
21409: LD_VAR 0 2
21413: PUSH
21414: LD_INT 1
21416: PPUSH
21417: LD_VAR 0 2
21421: PPUSH
21422: CALL_OW 12
21426: ARRAY
21427: ST_TO_ADDR
// if Crawls ( un ) then
21428: LD_VAR 0 3
21432: PPUSH
21433: CALL_OW 318
21437: IFFALSE 21448
// ComWalk ( un ) ;
21439: LD_VAR 0 3
21443: PPUSH
21444: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21448: LD_VAR 0 3
21452: PPUSH
21453: LD_INT 8
21455: PPUSH
21456: CALL_OW 336
// end ; 4 :
21460: GO 21566
21462: LD_INT 4
21464: DOUBLE
21465: EQUAL
21466: IFTRUE 21470
21468: GO 21544
21470: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21471: LD_ADDR_VAR 0 2
21475: PUSH
21476: LD_INT 22
21478: PUSH
21479: LD_OWVAR 2
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 30
21490: PUSH
21491: LD_INT 29
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PPUSH
21502: CALL_OW 69
21506: ST_TO_ADDR
// if not tmp then
21507: LD_VAR 0 2
21511: NOT
21512: IFFALSE 21516
// exit ;
21514: GO 21566
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21516: LD_VAR 0 2
21520: PUSH
21521: LD_INT 1
21523: ARRAY
21524: PPUSH
21525: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21529: LD_VAR 0 2
21533: PUSH
21534: LD_INT 1
21536: ARRAY
21537: PPUSH
21538: CALL_OW 65
// end ; 5 .. 7 :
21542: GO 21566
21544: LD_INT 5
21546: DOUBLE
21547: GREATEREQUAL
21548: IFFALSE 21556
21550: LD_INT 7
21552: DOUBLE
21553: LESSEQUAL
21554: IFTRUE 21558
21556: GO 21565
21558: POP
// StreamSibBomb ; end ;
21559: CALL 17803 0 0
21563: GO 21566
21565: POP
// end ;
21566: PPOPN 3
21568: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21569: LD_EXP 27
21573: PUSH
21574: LD_EXP 77
21578: AND
21579: IFFALSE 21735
21581: GO 21583
21583: DISABLE
21584: LD_INT 0
21586: PPUSH
21587: PPUSH
21588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 81
21596: PUSH
21597: LD_OWVAR 2
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 21
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 21
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PPUSH
21638: CALL_OW 69
21642: ST_TO_ADDR
// if not tmp then
21643: LD_VAR 0 2
21647: NOT
21648: IFFALSE 21652
// exit ;
21650: GO 21735
// p := 0 ;
21652: LD_ADDR_VAR 0 3
21656: PUSH
21657: LD_INT 0
21659: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21660: LD_INT 35
21662: PPUSH
21663: CALL_OW 67
// p := p + 1 ;
21667: LD_ADDR_VAR 0 3
21671: PUSH
21672: LD_VAR 0 3
21676: PUSH
21677: LD_INT 1
21679: PLUS
21680: ST_TO_ADDR
// for i in tmp do
21681: LD_ADDR_VAR 0 1
21685: PUSH
21686: LD_VAR 0 2
21690: PUSH
21691: FOR_IN
21692: IFFALSE 21723
// if GetLives ( i ) < 1000 then
21694: LD_VAR 0 1
21698: PPUSH
21699: CALL_OW 256
21703: PUSH
21704: LD_INT 1000
21706: LESS
21707: IFFALSE 21721
// SetLives ( i , 1000 ) ;
21709: LD_VAR 0 1
21713: PPUSH
21714: LD_INT 1000
21716: PPUSH
21717: CALL_OW 234
21721: GO 21691
21723: POP
21724: POP
// until p > 20 ;
21725: LD_VAR 0 3
21729: PUSH
21730: LD_INT 20
21732: GREATER
21733: IFFALSE 21660
// end ;
21735: PPOPN 3
21737: END
// every 0 0$1 trigger StreamModeActive and sTime do
21738: LD_EXP 27
21742: PUSH
21743: LD_EXP 78
21747: AND
21748: IFFALSE 21783
21750: GO 21752
21752: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21753: LD_INT 28
21755: PPUSH
21756: LD_OWVAR 2
21760: PPUSH
21761: LD_INT 2
21763: PPUSH
21764: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21768: LD_INT 30
21770: PPUSH
21771: LD_OWVAR 2
21775: PPUSH
21776: LD_INT 2
21778: PPUSH
21779: CALL_OW 322
// end ;
21783: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21784: LD_EXP 27
21788: PUSH
21789: LD_EXP 79
21793: AND
21794: IFFALSE 21915
21796: GO 21798
21798: DISABLE
21799: LD_INT 0
21801: PPUSH
21802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21803: LD_ADDR_VAR 0 2
21807: PUSH
21808: LD_INT 22
21810: PUSH
21811: LD_OWVAR 2
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 21
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: LD_INT 23
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: PPUSH
21852: CALL_OW 69
21856: ST_TO_ADDR
// if not tmp then
21857: LD_VAR 0 2
21861: NOT
21862: IFFALSE 21866
// exit ;
21864: GO 21915
// for i in tmp do
21866: LD_ADDR_VAR 0 1
21870: PUSH
21871: LD_VAR 0 2
21875: PUSH
21876: FOR_IN
21877: IFFALSE 21913
// begin if Crawls ( i ) then
21879: LD_VAR 0 1
21883: PPUSH
21884: CALL_OW 318
21888: IFFALSE 21899
// ComWalk ( i ) ;
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 138
// SetClass ( i , 2 ) ;
21899: LD_VAR 0 1
21903: PPUSH
21904: LD_INT 2
21906: PPUSH
21907: CALL_OW 336
// end ;
21911: GO 21876
21913: POP
21914: POP
// end ;
21915: PPOPN 2
21917: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21918: LD_EXP 27
21922: PUSH
21923: LD_EXP 80
21927: AND
21928: IFFALSE 22216
21930: GO 21932
21932: DISABLE
21933: LD_INT 0
21935: PPUSH
21936: PPUSH
21937: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21938: LD_OWVAR 2
21942: PPUSH
21943: LD_INT 9
21945: PPUSH
21946: LD_INT 1
21948: PPUSH
21949: LD_INT 1
21951: PPUSH
21952: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21956: LD_INT 9
21958: PPUSH
21959: LD_OWVAR 2
21963: PPUSH
21964: CALL_OW 343
// uc_side := 9 ;
21968: LD_ADDR_OWVAR 20
21972: PUSH
21973: LD_INT 9
21975: ST_TO_ADDR
// uc_nation := 2 ;
21976: LD_ADDR_OWVAR 21
21980: PUSH
21981: LD_INT 2
21983: ST_TO_ADDR
// hc_name := Dark Warrior ;
21984: LD_ADDR_OWVAR 26
21988: PUSH
21989: LD_STRING Dark Warrior
21991: ST_TO_ADDR
// hc_gallery :=  ;
21992: LD_ADDR_OWVAR 33
21996: PUSH
21997: LD_STRING 
21999: ST_TO_ADDR
// hc_noskilllimit := true ;
22000: LD_ADDR_OWVAR 76
22004: PUSH
22005: LD_INT 1
22007: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22008: LD_ADDR_OWVAR 31
22012: PUSH
22013: LD_INT 30
22015: PUSH
22016: LD_INT 30
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 30
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: ST_TO_ADDR
// un := CreateHuman ;
22031: LD_ADDR_VAR 0 3
22035: PUSH
22036: CALL_OW 44
22040: ST_TO_ADDR
// hc_noskilllimit := false ;
22041: LD_ADDR_OWVAR 76
22045: PUSH
22046: LD_INT 0
22048: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22049: LD_VAR 0 3
22053: PPUSH
22054: LD_INT 1
22056: PPUSH
22057: CALL_OW 51
// ToLua ( playRanger() ) ;
22061: LD_STRING playRanger()
22063: PPUSH
22064: CALL_OW 559
// p := 0 ;
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 0
22075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22076: LD_INT 35
22078: PPUSH
22079: CALL_OW 67
// p := p + 1 ;
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_VAR 0 2
22092: PUSH
22093: LD_INT 1
22095: PLUS
22096: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22097: LD_VAR 0 3
22101: PPUSH
22102: CALL_OW 256
22106: PUSH
22107: LD_INT 1000
22109: LESS
22110: IFFALSE 22124
// SetLives ( un , 1000 ) ;
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_INT 1000
22119: PPUSH
22120: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22124: LD_VAR 0 3
22128: PPUSH
22129: LD_INT 81
22131: PUSH
22132: LD_OWVAR 2
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 91
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_INT 30
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PPUSH
22161: CALL_OW 69
22165: PPUSH
22166: LD_VAR 0 3
22170: PPUSH
22171: CALL_OW 74
22175: PPUSH
22176: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22180: LD_VAR 0 2
22184: PUSH
22185: LD_INT 80
22187: GREATER
22188: PUSH
22189: LD_VAR 0 3
22193: PPUSH
22194: CALL_OW 301
22198: OR
22199: IFFALSE 22076
// if un then
22201: LD_VAR 0 3
22205: IFFALSE 22216
// RemoveUnit ( un ) ;
22207: LD_VAR 0 3
22211: PPUSH
22212: CALL_OW 64
// end ;
22216: PPOPN 3
22218: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22219: LD_EXP 81
22223: IFFALSE 22339
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
22231: PPUSH
22232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22233: LD_ADDR_VAR 0 2
22237: PUSH
22238: LD_INT 81
22240: PUSH
22241: LD_OWVAR 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 21
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL_OW 69
22268: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22269: LD_STRING playComputer()
22271: PPUSH
22272: CALL_OW 559
// if not tmp then
22276: LD_VAR 0 2
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 22339
// for i in tmp do
22285: LD_ADDR_VAR 0 1
22289: PUSH
22290: LD_VAR 0 2
22294: PUSH
22295: FOR_IN
22296: IFFALSE 22337
// for j := 1 to 4 do
22298: LD_ADDR_VAR 0 3
22302: PUSH
22303: DOUBLE
22304: LD_INT 1
22306: DEC
22307: ST_TO_ADDR
22308: LD_INT 4
22310: PUSH
22311: FOR_TO
22312: IFFALSE 22333
// SetSkill ( i , j , 10 ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_VAR 0 3
22323: PPUSH
22324: LD_INT 10
22326: PPUSH
22327: CALL_OW 237
22331: GO 22311
22333: POP
22334: POP
22335: GO 22295
22337: POP
22338: POP
// end ;
22339: PPOPN 3
22341: END
// every 0 0$1 trigger s30 do var i , tmp ;
22342: LD_EXP 82
22346: IFFALSE 22415
22348: GO 22350
22350: DISABLE
22351: LD_INT 0
22353: PPUSH
22354: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22355: LD_ADDR_VAR 0 2
22359: PUSH
22360: LD_INT 22
22362: PUSH
22363: LD_OWVAR 2
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PPUSH
22372: CALL_OW 69
22376: ST_TO_ADDR
// if not tmp then
22377: LD_VAR 0 2
22381: NOT
22382: IFFALSE 22386
// exit ;
22384: GO 22415
// for i in tmp do
22386: LD_ADDR_VAR 0 1
22390: PUSH
22391: LD_VAR 0 2
22395: PUSH
22396: FOR_IN
22397: IFFALSE 22413
// SetLives ( i , 300 ) ;
22399: LD_VAR 0 1
22403: PPUSH
22404: LD_INT 300
22406: PPUSH
22407: CALL_OW 234
22411: GO 22396
22413: POP
22414: POP
// end ;
22415: PPOPN 2
22417: END
// every 0 0$1 trigger s60 do var i , tmp ;
22418: LD_EXP 83
22422: IFFALSE 22491
22424: GO 22426
22426: DISABLE
22427: LD_INT 0
22429: PPUSH
22430: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 22
22438: PUSH
22439: LD_OWVAR 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 69
22452: ST_TO_ADDR
// if not tmp then
22453: LD_VAR 0 2
22457: NOT
22458: IFFALSE 22462
// exit ;
22460: GO 22491
// for i in tmp do
22462: LD_ADDR_VAR 0 1
22466: PUSH
22467: LD_VAR 0 2
22471: PUSH
22472: FOR_IN
22473: IFFALSE 22489
// SetLives ( i , 600 ) ;
22475: LD_VAR 0 1
22479: PPUSH
22480: LD_INT 600
22482: PPUSH
22483: CALL_OW 234
22487: GO 22472
22489: POP
22490: POP
// end ;
22491: PPOPN 2
22493: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22494: LD_INT 0
22496: PPUSH
// case cmd of 301 :
22497: LD_VAR 0 1
22501: PUSH
22502: LD_INT 301
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22542
22510: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22511: LD_VAR 0 6
22515: PPUSH
22516: LD_VAR 0 7
22520: PPUSH
22521: LD_VAR 0 8
22525: PPUSH
22526: LD_VAR 0 4
22530: PPUSH
22531: LD_VAR 0 5
22535: PPUSH
22536: CALL 23751 0 5
22540: GO 22663
22542: LD_INT 302
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22587
22550: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22551: LD_VAR 0 6
22555: PPUSH
22556: LD_VAR 0 7
22560: PPUSH
22561: LD_VAR 0 8
22565: PPUSH
22566: LD_VAR 0 9
22570: PPUSH
22571: LD_VAR 0 4
22575: PPUSH
22576: LD_VAR 0 5
22580: PPUSH
22581: CALL 23842 0 6
22585: GO 22663
22587: LD_INT 303
22589: DOUBLE
22590: EQUAL
22591: IFTRUE 22595
22593: GO 22632
22595: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22596: LD_VAR 0 6
22600: PPUSH
22601: LD_VAR 0 7
22605: PPUSH
22606: LD_VAR 0 8
22610: PPUSH
22611: LD_VAR 0 9
22615: PPUSH
22616: LD_VAR 0 4
22620: PPUSH
22621: LD_VAR 0 5
22625: PPUSH
22626: CALL 22668 0 6
22630: GO 22663
22632: LD_INT 304
22634: DOUBLE
22635: EQUAL
22636: IFTRUE 22640
22638: GO 22662
22640: POP
// hHackTeleport ( unit , x , y ) ; end ;
22641: LD_VAR 0 2
22645: PPUSH
22646: LD_VAR 0 4
22650: PPUSH
22651: LD_VAR 0 5
22655: PPUSH
22656: CALL 24435 0 3
22660: GO 22663
22662: POP
// end ;
22663: LD_VAR 0 12
22667: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22672: LD_VAR 0 1
22676: PUSH
22677: LD_INT 1
22679: LESS
22680: PUSH
22681: LD_VAR 0 1
22685: PUSH
22686: LD_INT 3
22688: GREATER
22689: OR
22690: PUSH
22691: LD_VAR 0 5
22695: PPUSH
22696: LD_VAR 0 6
22700: PPUSH
22701: CALL_OW 428
22705: OR
22706: IFFALSE 22710
// exit ;
22708: GO 23438
// uc_side := your_side ;
22710: LD_ADDR_OWVAR 20
22714: PUSH
22715: LD_OWVAR 2
22719: ST_TO_ADDR
// uc_nation := nation ;
22720: LD_ADDR_OWVAR 21
22724: PUSH
22725: LD_VAR 0 1
22729: ST_TO_ADDR
// bc_level = 1 ;
22730: LD_ADDR_OWVAR 43
22734: PUSH
22735: LD_INT 1
22737: ST_TO_ADDR
// case btype of 1 :
22738: LD_VAR 0 2
22742: PUSH
22743: LD_INT 1
22745: DOUBLE
22746: EQUAL
22747: IFTRUE 22751
22749: GO 22762
22751: POP
// bc_type := b_depot ; 2 :
22752: LD_ADDR_OWVAR 42
22756: PUSH
22757: LD_INT 0
22759: ST_TO_ADDR
22760: GO 23382
22762: LD_INT 2
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 22781
22770: POP
// bc_type := b_warehouse ; 3 :
22771: LD_ADDR_OWVAR 42
22775: PUSH
22776: LD_INT 1
22778: ST_TO_ADDR
22779: GO 23382
22781: LD_INT 3
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22800
22789: POP
// bc_type := b_lab ; 4 .. 9 :
22790: LD_ADDR_OWVAR 42
22794: PUSH
22795: LD_INT 6
22797: ST_TO_ADDR
22798: GO 23382
22800: LD_INT 4
22802: DOUBLE
22803: GREATEREQUAL
22804: IFFALSE 22812
22806: LD_INT 9
22808: DOUBLE
22809: LESSEQUAL
22810: IFTRUE 22814
22812: GO 22874
22814: POP
// begin bc_type := b_lab_half ;
22815: LD_ADDR_OWVAR 42
22819: PUSH
22820: LD_INT 7
22822: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22823: LD_ADDR_OWVAR 44
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 15
22839: PUSH
22840: LD_INT 14
22842: PUSH
22843: LD_INT 13
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: PUSH
22854: LD_VAR 0 2
22858: PUSH
22859: LD_INT 3
22861: MINUS
22862: ARRAY
22863: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22864: LD_ADDR_OWVAR 45
22868: PUSH
22869: LD_INT 9
22871: ST_TO_ADDR
// end ; 10 .. 13 :
22872: GO 23382
22874: LD_INT 10
22876: DOUBLE
22877: GREATEREQUAL
22878: IFFALSE 22886
22880: LD_INT 13
22882: DOUBLE
22883: LESSEQUAL
22884: IFTRUE 22888
22886: GO 22965
22888: POP
// begin bc_type := b_lab_full ;
22889: LD_ADDR_OWVAR 42
22893: PUSH
22894: LD_INT 8
22896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22897: LD_ADDR_OWVAR 44
22901: PUSH
22902: LD_INT 10
22904: PUSH
22905: LD_INT 12
22907: PUSH
22908: LD_INT 14
22910: PUSH
22911: LD_INT 13
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: LD_VAR 0 2
22924: PUSH
22925: LD_INT 9
22927: MINUS
22928: ARRAY
22929: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22930: LD_ADDR_OWVAR 45
22934: PUSH
22935: LD_INT 11
22937: PUSH
22938: LD_INT 15
22940: PUSH
22941: LD_INT 12
22943: PUSH
22944: LD_INT 15
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: LD_VAR 0 2
22957: PUSH
22958: LD_INT 9
22960: MINUS
22961: ARRAY
22962: ST_TO_ADDR
// end ; 14 :
22963: GO 23382
22965: LD_INT 14
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 22984
22973: POP
// bc_type := b_workshop ; 15 :
22974: LD_ADDR_OWVAR 42
22978: PUSH
22979: LD_INT 2
22981: ST_TO_ADDR
22982: GO 23382
22984: LD_INT 15
22986: DOUBLE
22987: EQUAL
22988: IFTRUE 22992
22990: GO 23003
22992: POP
// bc_type := b_factory ; 16 :
22993: LD_ADDR_OWVAR 42
22997: PUSH
22998: LD_INT 3
23000: ST_TO_ADDR
23001: GO 23382
23003: LD_INT 16
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23022
23011: POP
// bc_type := b_ext_gun ; 17 :
23012: LD_ADDR_OWVAR 42
23016: PUSH
23017: LD_INT 17
23019: ST_TO_ADDR
23020: GO 23382
23022: LD_INT 17
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23058
23030: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23031: LD_ADDR_OWVAR 42
23035: PUSH
23036: LD_INT 19
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 19
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: LD_VAR 0 1
23054: ARRAY
23055: ST_TO_ADDR
23056: GO 23382
23058: LD_INT 18
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23077
23066: POP
// bc_type := b_ext_radar ; 19 :
23067: LD_ADDR_OWVAR 42
23071: PUSH
23072: LD_INT 20
23074: ST_TO_ADDR
23075: GO 23382
23077: LD_INT 19
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23096
23085: POP
// bc_type := b_ext_radio ; 20 :
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 22
23093: ST_TO_ADDR
23094: GO 23382
23096: LD_INT 20
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23104
23102: GO 23115
23104: POP
// bc_type := b_ext_siberium ; 21 :
23105: LD_ADDR_OWVAR 42
23109: PUSH
23110: LD_INT 21
23112: ST_TO_ADDR
23113: GO 23382
23115: LD_INT 21
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23134
23123: POP
// bc_type := b_ext_computer ; 22 :
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 24
23131: ST_TO_ADDR
23132: GO 23382
23134: LD_INT 22
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23153
23142: POP
// bc_type := b_ext_track ; 23 :
23143: LD_ADDR_OWVAR 42
23147: PUSH
23148: LD_INT 16
23150: ST_TO_ADDR
23151: GO 23382
23153: LD_INT 23
23155: DOUBLE
23156: EQUAL
23157: IFTRUE 23161
23159: GO 23172
23161: POP
// bc_type := b_ext_laser ; 24 :
23162: LD_ADDR_OWVAR 42
23166: PUSH
23167: LD_INT 25
23169: ST_TO_ADDR
23170: GO 23382
23172: LD_INT 24
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23191
23180: POP
// bc_type := b_control_tower ; 25 :
23181: LD_ADDR_OWVAR 42
23185: PUSH
23186: LD_INT 36
23188: ST_TO_ADDR
23189: GO 23382
23191: LD_INT 25
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23210
23199: POP
// bc_type := b_breastwork ; 26 :
23200: LD_ADDR_OWVAR 42
23204: PUSH
23205: LD_INT 31
23207: ST_TO_ADDR
23208: GO 23382
23210: LD_INT 26
23212: DOUBLE
23213: EQUAL
23214: IFTRUE 23218
23216: GO 23229
23218: POP
// bc_type := b_bunker ; 27 :
23219: LD_ADDR_OWVAR 42
23223: PUSH
23224: LD_INT 32
23226: ST_TO_ADDR
23227: GO 23382
23229: LD_INT 27
23231: DOUBLE
23232: EQUAL
23233: IFTRUE 23237
23235: GO 23248
23237: POP
// bc_type := b_turret ; 28 :
23238: LD_ADDR_OWVAR 42
23242: PUSH
23243: LD_INT 33
23245: ST_TO_ADDR
23246: GO 23382
23248: LD_INT 28
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23267
23256: POP
// bc_type := b_armoury ; 29 :
23257: LD_ADDR_OWVAR 42
23261: PUSH
23262: LD_INT 4
23264: ST_TO_ADDR
23265: GO 23382
23267: LD_INT 29
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23286
23275: POP
// bc_type := b_barracks ; 30 :
23276: LD_ADDR_OWVAR 42
23280: PUSH
23281: LD_INT 5
23283: ST_TO_ADDR
23284: GO 23382
23286: LD_INT 30
23288: DOUBLE
23289: EQUAL
23290: IFTRUE 23294
23292: GO 23305
23294: POP
// bc_type := b_solar_power ; 31 :
23295: LD_ADDR_OWVAR 42
23299: PUSH
23300: LD_INT 27
23302: ST_TO_ADDR
23303: GO 23382
23305: LD_INT 31
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23324
23313: POP
// bc_type := b_oil_power ; 32 :
23314: LD_ADDR_OWVAR 42
23318: PUSH
23319: LD_INT 26
23321: ST_TO_ADDR
23322: GO 23382
23324: LD_INT 32
23326: DOUBLE
23327: EQUAL
23328: IFTRUE 23332
23330: GO 23343
23332: POP
// bc_type := b_siberite_power ; 33 :
23333: LD_ADDR_OWVAR 42
23337: PUSH
23338: LD_INT 28
23340: ST_TO_ADDR
23341: GO 23382
23343: LD_INT 33
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23362
23351: POP
// bc_type := b_oil_mine ; 34 :
23352: LD_ADDR_OWVAR 42
23356: PUSH
23357: LD_INT 29
23359: ST_TO_ADDR
23360: GO 23382
23362: LD_INT 34
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23381
23370: POP
// bc_type := b_siberite_mine ; end ;
23371: LD_ADDR_OWVAR 42
23375: PUSH
23376: LD_INT 30
23378: ST_TO_ADDR
23379: GO 23382
23381: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23382: LD_ADDR_VAR 0 8
23386: PUSH
23387: LD_VAR 0 5
23391: PPUSH
23392: LD_VAR 0 6
23396: PPUSH
23397: LD_VAR 0 3
23401: PPUSH
23402: CALL_OW 47
23406: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23407: LD_OWVAR 42
23411: PUSH
23412: LD_INT 32
23414: PUSH
23415: LD_INT 33
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: IN
23422: IFFALSE 23438
// PlaceWeaponTurret ( b , weapon ) ;
23424: LD_VAR 0 8
23428: PPUSH
23429: LD_VAR 0 4
23433: PPUSH
23434: CALL_OW 431
// end ;
23438: LD_VAR 0 7
23442: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23443: LD_INT 0
23445: PPUSH
23446: PPUSH
23447: PPUSH
23448: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23449: LD_ADDR_VAR 0 4
23453: PUSH
23454: LD_INT 22
23456: PUSH
23457: LD_OWVAR 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 30
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 69
23502: ST_TO_ADDR
// if not tmp then
23503: LD_VAR 0 4
23507: NOT
23508: IFFALSE 23512
// exit ;
23510: GO 23571
// for i in tmp do
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_VAR 0 4
23521: PUSH
23522: FOR_IN
23523: IFFALSE 23569
// for j = 1 to 3 do
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: DOUBLE
23531: LD_INT 1
23533: DEC
23534: ST_TO_ADDR
23535: LD_INT 3
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23565
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23541: LD_VAR 0 2
23545: PPUSH
23546: CALL_OW 274
23550: PPUSH
23551: LD_VAR 0 3
23555: PPUSH
23556: LD_INT 99999
23558: PPUSH
23559: CALL_OW 277
23563: GO 23538
23565: POP
23566: POP
23567: GO 23522
23569: POP
23570: POP
// end ;
23571: LD_VAR 0 1
23575: RET
// export function hHackSetLevel10 ; var i , j ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 21
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 69
23600: PUSH
23601: FOR_IN
23602: IFFALSE 23654
// if IsSelected ( i ) then
23604: LD_VAR 0 2
23608: PPUSH
23609: CALL_OW 306
23613: IFFALSE 23652
// begin for j := 1 to 4 do
23615: LD_ADDR_VAR 0 3
23619: PUSH
23620: DOUBLE
23621: LD_INT 1
23623: DEC
23624: ST_TO_ADDR
23625: LD_INT 4
23627: PUSH
23628: FOR_TO
23629: IFFALSE 23650
// SetSkill ( i , j , 10 ) ;
23631: LD_VAR 0 2
23635: PPUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: LD_INT 10
23643: PPUSH
23644: CALL_OW 237
23648: GO 23628
23650: POP
23651: POP
// end ;
23652: GO 23601
23654: POP
23655: POP
// end ;
23656: LD_VAR 0 1
23660: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23661: LD_INT 0
23663: PPUSH
23664: PPUSH
23665: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23666: LD_ADDR_VAR 0 2
23670: PUSH
23671: LD_INT 22
23673: PUSH
23674: LD_OWVAR 2
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 21
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PPUSH
23697: CALL_OW 69
23701: PUSH
23702: FOR_IN
23703: IFFALSE 23744
// begin for j := 1 to 4 do
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: DOUBLE
23711: LD_INT 1
23713: DEC
23714: ST_TO_ADDR
23715: LD_INT 4
23717: PUSH
23718: FOR_TO
23719: IFFALSE 23740
// SetSkill ( i , j , 10 ) ;
23721: LD_VAR 0 2
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: LD_INT 10
23733: PPUSH
23734: CALL_OW 237
23738: GO 23718
23740: POP
23741: POP
// end ;
23742: GO 23702
23744: POP
23745: POP
// end ;
23746: LD_VAR 0 1
23750: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23751: LD_INT 0
23753: PPUSH
// uc_side := your_side ;
23754: LD_ADDR_OWVAR 20
23758: PUSH
23759: LD_OWVAR 2
23763: ST_TO_ADDR
// uc_nation := nation ;
23764: LD_ADDR_OWVAR 21
23768: PUSH
23769: LD_VAR 0 1
23773: ST_TO_ADDR
// InitHc ;
23774: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23778: LD_INT 0
23780: PPUSH
23781: LD_VAR 0 2
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23795: LD_VAR 0 4
23799: PPUSH
23800: LD_VAR 0 5
23804: PPUSH
23805: CALL_OW 428
23809: PUSH
23810: LD_INT 0
23812: EQUAL
23813: IFFALSE 23837
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23815: CALL_OW 44
23819: PPUSH
23820: LD_VAR 0 4
23824: PPUSH
23825: LD_VAR 0 5
23829: PPUSH
23830: LD_INT 1
23832: PPUSH
23833: CALL_OW 48
// end ;
23837: LD_VAR 0 6
23841: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
// uc_side := your_side ;
23846: LD_ADDR_OWVAR 20
23850: PUSH
23851: LD_OWVAR 2
23855: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23856: LD_VAR 0 1
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: LD_INT 3
23869: PUSH
23870: LD_INT 4
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: IN
23883: IFFALSE 23895
// uc_nation := nation_american else
23885: LD_ADDR_OWVAR 21
23889: PUSH
23890: LD_INT 1
23892: ST_TO_ADDR
23893: GO 23938
// if chassis in [ 11 , 12 , 13 , 14 ] then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 11
23902: PUSH
23903: LD_INT 12
23905: PUSH
23906: LD_INT 13
23908: PUSH
23909: LD_INT 14
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: IN
23918: IFFALSE 23930
// uc_nation := nation_arabian else
23920: LD_ADDR_OWVAR 21
23924: PUSH
23925: LD_INT 2
23927: ST_TO_ADDR
23928: GO 23938
// uc_nation := nation_russian ;
23930: LD_ADDR_OWVAR 21
23934: PUSH
23935: LD_INT 3
23937: ST_TO_ADDR
// vc_chassis := chassis ;
23938: LD_ADDR_OWVAR 37
23942: PUSH
23943: LD_VAR 0 1
23947: ST_TO_ADDR
// vc_engine := engine ;
23948: LD_ADDR_OWVAR 39
23952: PUSH
23953: LD_VAR 0 2
23957: ST_TO_ADDR
// vc_control := control ;
23958: LD_ADDR_OWVAR 38
23962: PUSH
23963: LD_VAR 0 3
23967: ST_TO_ADDR
// vc_weapon := weapon ;
23968: LD_ADDR_OWVAR 40
23972: PUSH
23973: LD_VAR 0 4
23977: ST_TO_ADDR
// un := CreateVehicle ;
23978: LD_ADDR_VAR 0 8
23982: PUSH
23983: CALL_OW 45
23987: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23988: LD_VAR 0 8
23992: PPUSH
23993: LD_INT 0
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24008: LD_VAR 0 8
24012: PPUSH
24013: LD_VAR 0 5
24017: PPUSH
24018: LD_VAR 0 6
24022: PPUSH
24023: LD_INT 1
24025: PPUSH
24026: CALL_OW 48
// end ;
24030: LD_VAR 0 7
24034: RET
// export hInvincible ; every 1 do
24035: GO 24037
24037: DISABLE
// hInvincible := [ ] ;
24038: LD_ADDR_EXP 84
24042: PUSH
24043: EMPTY
24044: ST_TO_ADDR
24045: END
// every 10 do var i ;
24046: GO 24048
24048: DISABLE
24049: LD_INT 0
24051: PPUSH
// begin enable ;
24052: ENABLE
// if not hInvincible then
24053: LD_EXP 84
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24106
// for i in hInvincible do
24062: LD_ADDR_VAR 0 1
24066: PUSH
24067: LD_EXP 84
24071: PUSH
24072: FOR_IN
24073: IFFALSE 24104
// if GetLives ( i ) < 1000 then
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 256
24084: PUSH
24085: LD_INT 1000
24087: LESS
24088: IFFALSE 24102
// SetLives ( i , 1000 ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_INT 1000
24097: PPUSH
24098: CALL_OW 234
24102: GO 24072
24104: POP
24105: POP
// end ;
24106: PPOPN 1
24108: END
// export function hHackInvincible ; var i ; begin
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 21
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 21
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: PPUSH
24146: CALL_OW 69
24150: PUSH
24151: FOR_IN
24152: IFFALSE 24213
// if IsSelected ( i ) then
24154: LD_VAR 0 2
24158: PPUSH
24159: CALL_OW 306
24163: IFFALSE 24211
// begin if i in hInvincible then
24165: LD_VAR 0 2
24169: PUSH
24170: LD_EXP 84
24174: IN
24175: IFFALSE 24195
// hInvincible := hInvincible diff i else
24177: LD_ADDR_EXP 84
24181: PUSH
24182: LD_EXP 84
24186: PUSH
24187: LD_VAR 0 2
24191: DIFF
24192: ST_TO_ADDR
24193: GO 24211
// hInvincible := hInvincible union i ;
24195: LD_ADDR_EXP 84
24199: PUSH
24200: LD_EXP 84
24204: PUSH
24205: LD_VAR 0 2
24209: UNION
24210: ST_TO_ADDR
// end ;
24211: GO 24151
24213: POP
24214: POP
// end ;
24215: LD_VAR 0 1
24219: RET
// export function hHackInvisible ; var i , j ; begin
24220: LD_INT 0
24222: PPUSH
24223: PPUSH
24224: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 69
24244: PUSH
24245: FOR_IN
24246: IFFALSE 24270
// if IsSelected ( i ) then
24248: LD_VAR 0 2
24252: PPUSH
24253: CALL_OW 306
24257: IFFALSE 24268
// ComForceInvisible ( i ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: CALL_OW 496
24268: GO 24245
24270: POP
24271: POP
// end ;
24272: LD_VAR 0 1
24276: RET
// export function hHackChangeYourSide ; begin
24277: LD_INT 0
24279: PPUSH
// if your_side = 8 then
24280: LD_OWVAR 2
24284: PUSH
24285: LD_INT 8
24287: EQUAL
24288: IFFALSE 24300
// your_side := 0 else
24290: LD_ADDR_OWVAR 2
24294: PUSH
24295: LD_INT 0
24297: ST_TO_ADDR
24298: GO 24314
// your_side := your_side + 1 ;
24300: LD_ADDR_OWVAR 2
24304: PUSH
24305: LD_OWVAR 2
24309: PUSH
24310: LD_INT 1
24312: PLUS
24313: ST_TO_ADDR
// end ;
24314: LD_VAR 0 1
24318: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24319: LD_INT 0
24321: PPUSH
24322: PPUSH
24323: PPUSH
// for i in all_units do
24324: LD_ADDR_VAR 0 2
24328: PUSH
24329: LD_OWVAR 3
24333: PUSH
24334: FOR_IN
24335: IFFALSE 24413
// if IsSelected ( i ) then
24337: LD_VAR 0 2
24341: PPUSH
24342: CALL_OW 306
24346: IFFALSE 24411
// begin j := GetSide ( i ) ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_VAR 0 2
24357: PPUSH
24358: CALL_OW 255
24362: ST_TO_ADDR
// if j = 8 then
24363: LD_VAR 0 3
24367: PUSH
24368: LD_INT 8
24370: EQUAL
24371: IFFALSE 24383
// j := 0 else
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
24381: GO 24397
// j := j + 1 ;
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_VAR 0 3
24392: PUSH
24393: LD_INT 1
24395: PLUS
24396: ST_TO_ADDR
// SetSide ( i , j ) ;
24397: LD_VAR 0 2
24401: PPUSH
24402: LD_VAR 0 3
24406: PPUSH
24407: CALL_OW 235
// end ;
24411: GO 24334
24413: POP
24414: POP
// end ;
24415: LD_VAR 0 1
24419: RET
// export function hHackFog ; begin
24420: LD_INT 0
24422: PPUSH
// FogOff ( true ) ;
24423: LD_INT 1
24425: PPUSH
24426: CALL_OW 344
// end ;
24430: LD_VAR 0 1
24434: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24435: LD_INT 0
24437: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24438: LD_VAR 0 1
24442: PPUSH
24443: LD_VAR 0 2
24447: PPUSH
24448: LD_VAR 0 3
24452: PPUSH
24453: LD_INT 1
24455: PPUSH
24456: LD_INT 1
24458: PPUSH
24459: CALL_OW 483
// CenterOnXY ( x , y ) ;
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_VAR 0 3
24472: PPUSH
24473: CALL_OW 84
// end ;
24477: LD_VAR 0 4
24481: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24482: LD_INT 0
24484: PPUSH
24485: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24486: LD_VAR 0 1
24490: NOT
24491: PUSH
24492: LD_VAR 0 2
24496: PPUSH
24497: LD_VAR 0 3
24501: PPUSH
24502: CALL_OW 488
24506: NOT
24507: OR
24508: PUSH
24509: LD_VAR 0 1
24513: PPUSH
24514: CALL_OW 266
24518: PUSH
24519: LD_INT 3
24521: NONEQUAL
24522: PUSH
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 247
24532: PUSH
24533: LD_INT 1
24535: EQUAL
24536: NOT
24537: AND
24538: OR
24539: IFFALSE 24543
// exit ;
24541: GO 24692
// if GetType ( factory ) = unit_human then
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 247
24552: PUSH
24553: LD_INT 1
24555: EQUAL
24556: IFFALSE 24573
// factory := IsInUnit ( factory ) ;
24558: LD_ADDR_VAR 0 1
24562: PUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 310
24572: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24573: LD_VAR 0 1
24577: PPUSH
24578: CALL_OW 266
24582: PUSH
24583: LD_INT 3
24585: NONEQUAL
24586: IFFALSE 24590
// exit ;
24588: GO 24692
// if HexInfo ( x , y ) = factory then
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL_OW 428
24604: PUSH
24605: LD_VAR 0 1
24609: EQUAL
24610: IFFALSE 24637
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24612: LD_ADDR_EXP 85
24616: PUSH
24617: LD_EXP 85
24621: PPUSH
24622: LD_VAR 0 1
24626: PPUSH
24627: LD_INT 0
24629: PPUSH
24630: CALL_OW 1
24634: ST_TO_ADDR
24635: GO 24688
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24637: LD_ADDR_EXP 85
24641: PUSH
24642: LD_EXP 85
24646: PPUSH
24647: LD_VAR 0 1
24651: PPUSH
24652: LD_VAR 0 1
24656: PPUSH
24657: CALL_OW 255
24661: PUSH
24662: LD_VAR 0 1
24666: PUSH
24667: LD_VAR 0 2
24671: PUSH
24672: LD_VAR 0 3
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: PPUSH
24683: CALL_OW 1
24687: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24688: CALL 24697 0 0
// end ;
24692: LD_VAR 0 4
24696: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24697: LD_INT 0
24699: PPUSH
24700: PPUSH
24701: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24702: LD_STRING resetFactoryWaypoint();
24704: PPUSH
24705: CALL_OW 559
// if factoryWaypoints then
24709: LD_EXP 85
24713: IFFALSE 24839
// begin list := PrepareArray ( factoryWaypoints ) ;
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: LD_EXP 85
24724: PPUSH
24725: CALL 71981 0 1
24729: ST_TO_ADDR
// for i := 1 to list do
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: DOUBLE
24736: LD_INT 1
24738: DEC
24739: ST_TO_ADDR
24740: LD_VAR 0 3
24744: PUSH
24745: FOR_TO
24746: IFFALSE 24837
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24748: LD_STRING setFactoryWaypointXY(
24750: PUSH
24751: LD_VAR 0 3
24755: PUSH
24756: LD_VAR 0 2
24760: ARRAY
24761: PUSH
24762: LD_INT 1
24764: ARRAY
24765: STR
24766: PUSH
24767: LD_STRING ,
24769: STR
24770: PUSH
24771: LD_VAR 0 3
24775: PUSH
24776: LD_VAR 0 2
24780: ARRAY
24781: PUSH
24782: LD_INT 2
24784: ARRAY
24785: STR
24786: PUSH
24787: LD_STRING ,
24789: STR
24790: PUSH
24791: LD_VAR 0 3
24795: PUSH
24796: LD_VAR 0 2
24800: ARRAY
24801: PUSH
24802: LD_INT 3
24804: ARRAY
24805: STR
24806: PUSH
24807: LD_STRING ,
24809: STR
24810: PUSH
24811: LD_VAR 0 3
24815: PUSH
24816: LD_VAR 0 2
24820: ARRAY
24821: PUSH
24822: LD_INT 4
24824: ARRAY
24825: STR
24826: PUSH
24827: LD_STRING )
24829: STR
24830: PPUSH
24831: CALL_OW 559
24835: GO 24745
24837: POP
24838: POP
// end ; end ;
24839: LD_VAR 0 1
24843: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24844: LD_INT 0
24846: PPUSH
// if HexInfo ( x , y ) = warehouse then
24847: LD_VAR 0 2
24851: PPUSH
24852: LD_VAR 0 3
24856: PPUSH
24857: CALL_OW 428
24861: PUSH
24862: LD_VAR 0 1
24866: EQUAL
24867: IFFALSE 24894
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24869: LD_ADDR_EXP 86
24873: PUSH
24874: LD_EXP 86
24878: PPUSH
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_INT 0
24886: PPUSH
24887: CALL_OW 1
24891: ST_TO_ADDR
24892: GO 24945
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24894: LD_ADDR_EXP 86
24898: PUSH
24899: LD_EXP 86
24903: PPUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 255
24918: PUSH
24919: LD_VAR 0 1
24923: PUSH
24924: LD_VAR 0 2
24928: PUSH
24929: LD_VAR 0 3
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL_OW 1
24944: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24945: CALL 24954 0 0
// end ;
24949: LD_VAR 0 4
24953: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24954: LD_INT 0
24956: PPUSH
24957: PPUSH
24958: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24959: LD_STRING resetWarehouseGatheringPoints();
24961: PPUSH
24962: CALL_OW 559
// if warehouseGatheringPoints then
24966: LD_EXP 86
24970: IFFALSE 25096
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_EXP 86
24981: PPUSH
24982: CALL 71981 0 1
24986: ST_TO_ADDR
// for i := 1 to list do
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: DOUBLE
24993: LD_INT 1
24995: DEC
24996: ST_TO_ADDR
24997: LD_VAR 0 3
25001: PUSH
25002: FOR_TO
25003: IFFALSE 25094
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25005: LD_STRING setWarehouseGatheringPointXY(
25007: PUSH
25008: LD_VAR 0 3
25012: PUSH
25013: LD_VAR 0 2
25017: ARRAY
25018: PUSH
25019: LD_INT 1
25021: ARRAY
25022: STR
25023: PUSH
25024: LD_STRING ,
25026: STR
25027: PUSH
25028: LD_VAR 0 3
25032: PUSH
25033: LD_VAR 0 2
25037: ARRAY
25038: PUSH
25039: LD_INT 2
25041: ARRAY
25042: STR
25043: PUSH
25044: LD_STRING ,
25046: STR
25047: PUSH
25048: LD_VAR 0 3
25052: PUSH
25053: LD_VAR 0 2
25057: ARRAY
25058: PUSH
25059: LD_INT 3
25061: ARRAY
25062: STR
25063: PUSH
25064: LD_STRING ,
25066: STR
25067: PUSH
25068: LD_VAR 0 3
25072: PUSH
25073: LD_VAR 0 2
25077: ARRAY
25078: PUSH
25079: LD_INT 4
25081: ARRAY
25082: STR
25083: PUSH
25084: LD_STRING )
25086: STR
25087: PPUSH
25088: CALL_OW 559
25092: GO 25002
25094: POP
25095: POP
// end ; end ;
25096: LD_VAR 0 1
25100: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25101: LD_EXP 86
25105: IFFALSE 25790
25107: GO 25109
25109: DISABLE
25110: LD_INT 0
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
25116: PPUSH
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
// begin enable ;
25121: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_EXP 86
25131: PPUSH
25132: CALL 71981 0 1
25136: ST_TO_ADDR
// if not list then
25137: LD_VAR 0 3
25141: NOT
25142: IFFALSE 25146
// exit ;
25144: GO 25790
// for i := 1 to list do
25146: LD_ADDR_VAR 0 1
25150: PUSH
25151: DOUBLE
25152: LD_INT 1
25154: DEC
25155: ST_TO_ADDR
25156: LD_VAR 0 3
25160: PUSH
25161: FOR_TO
25162: IFFALSE 25788
// begin depot := list [ i ] [ 2 ] ;
25164: LD_ADDR_VAR 0 8
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_VAR 0 1
25178: ARRAY
25179: PUSH
25180: LD_INT 2
25182: ARRAY
25183: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25184: LD_ADDR_VAR 0 5
25188: PUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 1
25198: ARRAY
25199: PUSH
25200: LD_INT 1
25202: ARRAY
25203: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25204: LD_VAR 0 8
25208: PPUSH
25209: CALL_OW 301
25213: PUSH
25214: LD_VAR 0 5
25218: PUSH
25219: LD_VAR 0 8
25223: PPUSH
25224: CALL_OW 255
25228: NONEQUAL
25229: OR
25230: IFFALSE 25259
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25232: LD_ADDR_EXP 86
25236: PUSH
25237: LD_EXP 86
25241: PPUSH
25242: LD_VAR 0 8
25246: PPUSH
25247: LD_INT 0
25249: PPUSH
25250: CALL_OW 1
25254: ST_TO_ADDR
// exit ;
25255: POP
25256: POP
25257: GO 25790
// end ; x := list [ i ] [ 3 ] ;
25259: LD_ADDR_VAR 0 6
25263: PUSH
25264: LD_VAR 0 3
25268: PUSH
25269: LD_VAR 0 1
25273: ARRAY
25274: PUSH
25275: LD_INT 3
25277: ARRAY
25278: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25279: LD_ADDR_VAR 0 7
25283: PUSH
25284: LD_VAR 0 3
25288: PUSH
25289: LD_VAR 0 1
25293: ARRAY
25294: PUSH
25295: LD_INT 4
25297: ARRAY
25298: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25299: LD_ADDR_VAR 0 9
25303: PUSH
25304: LD_VAR 0 6
25308: PPUSH
25309: LD_VAR 0 7
25313: PPUSH
25314: LD_INT 16
25316: PPUSH
25317: CALL 70569 0 3
25321: ST_TO_ADDR
// if not cratesNearbyPoint then
25322: LD_VAR 0 9
25326: NOT
25327: IFFALSE 25333
// exit ;
25329: POP
25330: POP
25331: GO 25790
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25333: LD_ADDR_VAR 0 4
25337: PUSH
25338: LD_INT 22
25340: PUSH
25341: LD_VAR 0 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 60
25355: PUSH
25356: EMPTY
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 91
25365: PUSH
25366: LD_VAR 0 8
25370: PUSH
25371: LD_INT 6
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 25
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 25
25394: PUSH
25395: LD_INT 16
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: PUSH
25418: LD_VAR 0 8
25422: PPUSH
25423: CALL_OW 313
25427: PPUSH
25428: LD_INT 3
25430: PUSH
25431: LD_INT 60
25433: PUSH
25434: EMPTY
25435: LIST
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 2
25443: PUSH
25444: LD_INT 25
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 25
25456: PUSH
25457: LD_INT 16
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 72
25477: UNION
25478: ST_TO_ADDR
// if tmp then
25479: LD_VAR 0 4
25483: IFFALSE 25563
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25485: LD_ADDR_VAR 0 4
25489: PUSH
25490: LD_VAR 0 4
25494: PPUSH
25495: LD_INT 3
25497: PPUSH
25498: CALL 68538 0 2
25502: ST_TO_ADDR
// for j in tmp do
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_VAR 0 4
25512: PUSH
25513: FOR_IN
25514: IFFALSE 25557
// begin if IsInUnit ( j ) then
25516: LD_VAR 0 2
25520: PPUSH
25521: CALL_OW 310
25525: IFFALSE 25536
// ComExit ( j ) ;
25527: LD_VAR 0 2
25531: PPUSH
25532: CALL 68621 0 1
// AddComCollect ( j , x , y ) ;
25536: LD_VAR 0 2
25540: PPUSH
25541: LD_VAR 0 6
25545: PPUSH
25546: LD_VAR 0 7
25550: PPUSH
25551: CALL_OW 177
// end ;
25555: GO 25513
25557: POP
25558: POP
// exit ;
25559: POP
25560: POP
25561: GO 25790
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25563: LD_ADDR_VAR 0 4
25567: PUSH
25568: LD_INT 22
25570: PUSH
25571: LD_VAR 0 5
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 91
25582: PUSH
25583: LD_VAR 0 8
25587: PUSH
25588: LD_INT 8
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: PUSH
25599: LD_INT 34
25601: PUSH
25602: LD_INT 12
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 34
25611: PUSH
25612: LD_INT 51
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 34
25621: PUSH
25622: LD_INT 32
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 34
25631: PUSH
25632: LD_INT 89
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 69
25655: ST_TO_ADDR
// if tmp then
25656: LD_VAR 0 4
25660: IFFALSE 25786
// begin for j in tmp do
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_VAR 0 4
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25784
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25675: LD_VAR 0 2
25679: PPUSH
25680: CALL_OW 262
25684: PUSH
25685: LD_INT 3
25687: EQUAL
25688: PUSH
25689: LD_VAR 0 2
25693: PPUSH
25694: CALL_OW 261
25698: PUSH
25699: LD_INT 20
25701: GREATER
25702: OR
25703: PUSH
25704: LD_VAR 0 2
25708: PPUSH
25709: CALL_OW 314
25713: NOT
25714: AND
25715: PUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: CALL_OW 263
25725: PUSH
25726: LD_INT 1
25728: NONEQUAL
25729: PUSH
25730: LD_VAR 0 2
25734: PPUSH
25735: CALL_OW 311
25739: OR
25740: AND
25741: IFFALSE 25782
// begin ComCollect ( j , x , y ) ;
25743: LD_VAR 0 2
25747: PPUSH
25748: LD_VAR 0 6
25752: PPUSH
25753: LD_VAR 0 7
25757: PPUSH
25758: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: LD_VAR 0 8
25771: PPUSH
25772: CALL_OW 172
// exit ;
25776: POP
25777: POP
25778: POP
25779: POP
25780: GO 25790
// end ;
25782: GO 25672
25784: POP
25785: POP
// end ; end ;
25786: GO 25161
25788: POP
25789: POP
// end ; end_of_file end_of_file
25790: PPOPN 9
25792: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25793: LD_INT 0
25795: PPUSH
25796: PPUSH
25797: PPUSH
25798: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25799: LD_VAR 0 1
25803: PPUSH
25804: CALL_OW 264
25808: PUSH
25809: LD_INT 91
25811: EQUAL
25812: IFFALSE 25884
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25814: LD_INT 68
25816: PPUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 255
25826: PPUSH
25827: CALL_OW 321
25831: PUSH
25832: LD_INT 2
25834: EQUAL
25835: IFFALSE 25847
// eff := 70 else
25837: LD_ADDR_VAR 0 4
25841: PUSH
25842: LD_INT 70
25844: ST_TO_ADDR
25845: GO 25855
// eff := 30 ;
25847: LD_ADDR_VAR 0 4
25851: PUSH
25852: LD_INT 30
25854: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25855: LD_VAR 0 1
25859: PPUSH
25860: CALL_OW 250
25864: PPUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 251
25874: PPUSH
25875: LD_VAR 0 4
25879: PPUSH
25880: CALL_OW 495
// end ; end ;
25884: LD_VAR 0 2
25888: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25889: LD_INT 0
25891: PPUSH
// end ;
25892: LD_VAR 0 4
25896: RET
// export function SOS_Command ( cmd ) ; begin
25897: LD_INT 0
25899: PPUSH
// end ;
25900: LD_VAR 0 2
25904: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25905: LD_INT 0
25907: PPUSH
// end ;
25908: LD_VAR 0 6
25912: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
// if not vehicle or not factory then
25917: LD_VAR 0 1
25921: NOT
25922: PUSH
25923: LD_VAR 0 2
25927: NOT
25928: OR
25929: IFFALSE 25933
// exit ;
25931: GO 26164
// if factoryWaypoints >= factory then
25933: LD_EXP 85
25937: PUSH
25938: LD_VAR 0 2
25942: GREATEREQUAL
25943: IFFALSE 26164
// if factoryWaypoints [ factory ] then
25945: LD_EXP 85
25949: PUSH
25950: LD_VAR 0 2
25954: ARRAY
25955: IFFALSE 26164
// begin if GetControl ( vehicle ) = control_manual then
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL_OW 263
25966: PUSH
25967: LD_INT 1
25969: EQUAL
25970: IFFALSE 26051
// begin driver := IsDrivenBy ( vehicle ) ;
25972: LD_ADDR_VAR 0 4
25976: PUSH
25977: LD_VAR 0 1
25981: PPUSH
25982: CALL_OW 311
25986: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25987: LD_VAR 0 4
25991: PPUSH
25992: LD_EXP 85
25996: PUSH
25997: LD_VAR 0 2
26001: ARRAY
26002: PUSH
26003: LD_INT 3
26005: ARRAY
26006: PPUSH
26007: LD_EXP 85
26011: PUSH
26012: LD_VAR 0 2
26016: ARRAY
26017: PUSH
26018: LD_INT 4
26020: ARRAY
26021: PPUSH
26022: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26026: LD_VAR 0 4
26030: PPUSH
26031: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26035: LD_VAR 0 4
26039: PPUSH
26040: LD_VAR 0 2
26044: PPUSH
26045: CALL_OW 180
// end else
26049: GO 26164
// if GetControl ( vehicle ) = control_remote then
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 263
26060: PUSH
26061: LD_INT 2
26063: EQUAL
26064: IFFALSE 26125
// begin wait ( 0 0$2 ) ;
26066: LD_INT 70
26068: PPUSH
26069: CALL_OW 67
// if Connect ( vehicle ) then
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL 38829 0 1
26082: IFFALSE 26123
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26084: LD_VAR 0 1
26088: PPUSH
26089: LD_EXP 85
26093: PUSH
26094: LD_VAR 0 2
26098: ARRAY
26099: PUSH
26100: LD_INT 3
26102: ARRAY
26103: PPUSH
26104: LD_EXP 85
26108: PUSH
26109: LD_VAR 0 2
26113: ARRAY
26114: PUSH
26115: LD_INT 4
26117: ARRAY
26118: PPUSH
26119: CALL_OW 171
// end else
26123: GO 26164
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26125: LD_VAR 0 1
26129: PPUSH
26130: LD_EXP 85
26134: PUSH
26135: LD_VAR 0 2
26139: ARRAY
26140: PUSH
26141: LD_INT 3
26143: ARRAY
26144: PPUSH
26145: LD_EXP 85
26149: PUSH
26150: LD_VAR 0 2
26154: ARRAY
26155: PUSH
26156: LD_INT 4
26158: ARRAY
26159: PPUSH
26160: CALL_OW 171
// end ; end ;
26164: LD_VAR 0 3
26168: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26169: LD_INT 0
26171: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26172: LD_VAR 0 1
26176: PUSH
26177: LD_INT 250
26179: EQUAL
26180: PUSH
26181: LD_VAR 0 2
26185: PPUSH
26186: CALL_OW 264
26190: PUSH
26191: LD_INT 81
26193: EQUAL
26194: AND
26195: IFFALSE 26216
// MinerPlaceMine ( unit , x , y ) ;
26197: LD_VAR 0 2
26201: PPUSH
26202: LD_VAR 0 4
26206: PPUSH
26207: LD_VAR 0 5
26211: PPUSH
26212: CALL 29040 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26216: LD_VAR 0 1
26220: PUSH
26221: LD_INT 251
26223: EQUAL
26224: PUSH
26225: LD_VAR 0 2
26229: PPUSH
26230: CALL_OW 264
26234: PUSH
26235: LD_INT 81
26237: EQUAL
26238: AND
26239: IFFALSE 26260
// MinerDetonateMine ( unit , x , y ) ;
26241: LD_VAR 0 2
26245: PPUSH
26246: LD_VAR 0 4
26250: PPUSH
26251: LD_VAR 0 5
26255: PPUSH
26256: CALL 29315 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26260: LD_VAR 0 1
26264: PUSH
26265: LD_INT 252
26267: EQUAL
26268: PUSH
26269: LD_VAR 0 2
26273: PPUSH
26274: CALL_OW 264
26278: PUSH
26279: LD_INT 81
26281: EQUAL
26282: AND
26283: IFFALSE 26304
// MinerCreateMinefield ( unit , x , y ) ;
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_VAR 0 4
26294: PPUSH
26295: LD_VAR 0 5
26299: PPUSH
26300: CALL 29732 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26304: LD_VAR 0 1
26308: PUSH
26309: LD_INT 253
26311: EQUAL
26312: PUSH
26313: LD_VAR 0 2
26317: PPUSH
26318: CALL_OW 257
26322: PUSH
26323: LD_INT 5
26325: EQUAL
26326: AND
26327: IFFALSE 26348
// ComBinocular ( unit , x , y ) ;
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_VAR 0 4
26338: PPUSH
26339: LD_VAR 0 5
26343: PPUSH
26344: CALL 30101 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26348: LD_VAR 0 1
26352: PUSH
26353: LD_INT 254
26355: EQUAL
26356: PUSH
26357: LD_VAR 0 2
26361: PPUSH
26362: CALL_OW 264
26366: PUSH
26367: LD_INT 99
26369: EQUAL
26370: AND
26371: PUSH
26372: LD_VAR 0 3
26376: PPUSH
26377: CALL_OW 263
26381: PUSH
26382: LD_INT 3
26384: EQUAL
26385: AND
26386: IFFALSE 26402
// HackDestroyVehicle ( unit , selectedUnit ) ;
26388: LD_VAR 0 2
26392: PPUSH
26393: LD_VAR 0 3
26397: PPUSH
26398: CALL 28404 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26402: LD_VAR 0 1
26406: PUSH
26407: LD_INT 255
26409: EQUAL
26410: PUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: CALL_OW 264
26420: PUSH
26421: LD_INT 14
26423: PUSH
26424: LD_INT 53
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: IN
26431: AND
26432: PUSH
26433: LD_VAR 0 4
26437: PPUSH
26438: LD_VAR 0 5
26442: PPUSH
26443: CALL_OW 488
26447: AND
26448: IFFALSE 26472
// CutTreeXYR ( unit , x , y , 12 ) ;
26450: LD_VAR 0 2
26454: PPUSH
26455: LD_VAR 0 4
26459: PPUSH
26460: LD_VAR 0 5
26464: PPUSH
26465: LD_INT 12
26467: PPUSH
26468: CALL 26567 0 4
// if cmd = 256 then
26472: LD_VAR 0 1
26476: PUSH
26477: LD_INT 256
26479: EQUAL
26480: IFFALSE 26501
// SetFactoryWaypoint ( unit , x , y ) ;
26482: LD_VAR 0 2
26486: PPUSH
26487: LD_VAR 0 4
26491: PPUSH
26492: LD_VAR 0 5
26496: PPUSH
26497: CALL 24482 0 3
// if cmd = 257 then
26501: LD_VAR 0 1
26505: PUSH
26506: LD_INT 257
26508: EQUAL
26509: IFFALSE 26530
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26511: LD_VAR 0 2
26515: PPUSH
26516: LD_VAR 0 4
26520: PPUSH
26521: LD_VAR 0 5
26525: PPUSH
26526: CALL 24844 0 3
// if cmd = 258 then
26530: LD_VAR 0 1
26534: PUSH
26535: LD_INT 258
26537: EQUAL
26538: IFFALSE 26562
// BurnTreeXYR ( unit , x , y , 8 ) ;
26540: LD_VAR 0 2
26544: PPUSH
26545: LD_VAR 0 4
26549: PPUSH
26550: LD_VAR 0 5
26554: PPUSH
26555: LD_INT 8
26557: PPUSH
26558: CALL 26961 0 4
// end ;
26562: LD_VAR 0 6
26566: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26567: LD_INT 0
26569: PPUSH
26570: PPUSH
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26578: LD_VAR 0 1
26582: PPUSH
26583: CALL_OW 302
26587: NOT
26588: PUSH
26589: LD_VAR 0 2
26593: PPUSH
26594: LD_VAR 0 3
26598: PPUSH
26599: CALL_OW 488
26603: NOT
26604: OR
26605: PUSH
26606: LD_VAR 0 4
26610: NOT
26611: OR
26612: IFFALSE 26616
// exit ;
26614: GO 26956
// list := [ ] ;
26616: LD_ADDR_VAR 0 13
26620: PUSH
26621: EMPTY
26622: ST_TO_ADDR
// if x - r < 0 then
26623: LD_VAR 0 2
26627: PUSH
26628: LD_VAR 0 4
26632: MINUS
26633: PUSH
26634: LD_INT 0
26636: LESS
26637: IFFALSE 26649
// min_x := 0 else
26639: LD_ADDR_VAR 0 7
26643: PUSH
26644: LD_INT 0
26646: ST_TO_ADDR
26647: GO 26665
// min_x := x - r ;
26649: LD_ADDR_VAR 0 7
26653: PUSH
26654: LD_VAR 0 2
26658: PUSH
26659: LD_VAR 0 4
26663: MINUS
26664: ST_TO_ADDR
// if y - r < 0 then
26665: LD_VAR 0 3
26669: PUSH
26670: LD_VAR 0 4
26674: MINUS
26675: PUSH
26676: LD_INT 0
26678: LESS
26679: IFFALSE 26691
// min_y := 0 else
26681: LD_ADDR_VAR 0 8
26685: PUSH
26686: LD_INT 0
26688: ST_TO_ADDR
26689: GO 26707
// min_y := y - r ;
26691: LD_ADDR_VAR 0 8
26695: PUSH
26696: LD_VAR 0 3
26700: PUSH
26701: LD_VAR 0 4
26705: MINUS
26706: ST_TO_ADDR
// max_x := x + r ;
26707: LD_ADDR_VAR 0 9
26711: PUSH
26712: LD_VAR 0 2
26716: PUSH
26717: LD_VAR 0 4
26721: PLUS
26722: ST_TO_ADDR
// max_y := y + r ;
26723: LD_ADDR_VAR 0 10
26727: PUSH
26728: LD_VAR 0 3
26732: PUSH
26733: LD_VAR 0 4
26737: PLUS
26738: ST_TO_ADDR
// for _x = min_x to max_x do
26739: LD_ADDR_VAR 0 11
26743: PUSH
26744: DOUBLE
26745: LD_VAR 0 7
26749: DEC
26750: ST_TO_ADDR
26751: LD_VAR 0 9
26755: PUSH
26756: FOR_TO
26757: IFFALSE 26874
// for _y = min_y to max_y do
26759: LD_ADDR_VAR 0 12
26763: PUSH
26764: DOUBLE
26765: LD_VAR 0 8
26769: DEC
26770: ST_TO_ADDR
26771: LD_VAR 0 10
26775: PUSH
26776: FOR_TO
26777: IFFALSE 26870
// begin if not ValidHex ( _x , _y ) then
26779: LD_VAR 0 11
26783: PPUSH
26784: LD_VAR 0 12
26788: PPUSH
26789: CALL_OW 488
26793: NOT
26794: IFFALSE 26798
// continue ;
26796: GO 26776
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26798: LD_VAR 0 11
26802: PPUSH
26803: LD_VAR 0 12
26807: PPUSH
26808: CALL_OW 351
26812: PUSH
26813: LD_VAR 0 11
26817: PPUSH
26818: LD_VAR 0 12
26822: PPUSH
26823: CALL_OW 554
26827: AND
26828: IFFALSE 26868
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26830: LD_ADDR_VAR 0 13
26834: PUSH
26835: LD_VAR 0 13
26839: PPUSH
26840: LD_VAR 0 13
26844: PUSH
26845: LD_INT 1
26847: PLUS
26848: PPUSH
26849: LD_VAR 0 11
26853: PUSH
26854: LD_VAR 0 12
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PPUSH
26863: CALL_OW 2
26867: ST_TO_ADDR
// end ;
26868: GO 26776
26870: POP
26871: POP
26872: GO 26756
26874: POP
26875: POP
// if not list then
26876: LD_VAR 0 13
26880: NOT
26881: IFFALSE 26885
// exit ;
26883: GO 26956
// for i in list do
26885: LD_ADDR_VAR 0 6
26889: PUSH
26890: LD_VAR 0 13
26894: PUSH
26895: FOR_IN
26896: IFFALSE 26954
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26898: LD_VAR 0 1
26902: PPUSH
26903: LD_STRING M
26905: PUSH
26906: LD_VAR 0 6
26910: PUSH
26911: LD_INT 1
26913: ARRAY
26914: PUSH
26915: LD_VAR 0 6
26919: PUSH
26920: LD_INT 2
26922: ARRAY
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: PUSH
26945: EMPTY
26946: LIST
26947: PPUSH
26948: CALL_OW 447
26952: GO 26895
26954: POP
26955: POP
// end ;
26956: LD_VAR 0 5
26960: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26961: LD_INT 0
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL_OW 302
26981: NOT
26982: PUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: LD_VAR 0 3
26992: PPUSH
26993: CALL_OW 488
26997: NOT
26998: OR
26999: PUSH
27000: LD_VAR 0 4
27004: NOT
27005: OR
27006: IFFALSE 27010
// exit ;
27008: GO 27358
// list := [ ] ;
27010: LD_ADDR_VAR 0 13
27014: PUSH
27015: EMPTY
27016: ST_TO_ADDR
// if x - r < 0 then
27017: LD_VAR 0 2
27021: PUSH
27022: LD_VAR 0 4
27026: MINUS
27027: PUSH
27028: LD_INT 0
27030: LESS
27031: IFFALSE 27043
// min_x := 0 else
27033: LD_ADDR_VAR 0 7
27037: PUSH
27038: LD_INT 0
27040: ST_TO_ADDR
27041: GO 27059
// min_x := x - r ;
27043: LD_ADDR_VAR 0 7
27047: PUSH
27048: LD_VAR 0 2
27052: PUSH
27053: LD_VAR 0 4
27057: MINUS
27058: ST_TO_ADDR
// if y - r < 0 then
27059: LD_VAR 0 3
27063: PUSH
27064: LD_VAR 0 4
27068: MINUS
27069: PUSH
27070: LD_INT 0
27072: LESS
27073: IFFALSE 27085
// min_y := 0 else
27075: LD_ADDR_VAR 0 8
27079: PUSH
27080: LD_INT 0
27082: ST_TO_ADDR
27083: GO 27101
// min_y := y - r ;
27085: LD_ADDR_VAR 0 8
27089: PUSH
27090: LD_VAR 0 3
27094: PUSH
27095: LD_VAR 0 4
27099: MINUS
27100: ST_TO_ADDR
// max_x := x + r ;
27101: LD_ADDR_VAR 0 9
27105: PUSH
27106: LD_VAR 0 2
27110: PUSH
27111: LD_VAR 0 4
27115: PLUS
27116: ST_TO_ADDR
// max_y := y + r ;
27117: LD_ADDR_VAR 0 10
27121: PUSH
27122: LD_VAR 0 3
27126: PUSH
27127: LD_VAR 0 4
27131: PLUS
27132: ST_TO_ADDR
// for _x = min_x to max_x do
27133: LD_ADDR_VAR 0 11
27137: PUSH
27138: DOUBLE
27139: LD_VAR 0 7
27143: DEC
27144: ST_TO_ADDR
27145: LD_VAR 0 9
27149: PUSH
27150: FOR_TO
27151: IFFALSE 27268
// for _y = min_y to max_y do
27153: LD_ADDR_VAR 0 12
27157: PUSH
27158: DOUBLE
27159: LD_VAR 0 8
27163: DEC
27164: ST_TO_ADDR
27165: LD_VAR 0 10
27169: PUSH
27170: FOR_TO
27171: IFFALSE 27264
// begin if not ValidHex ( _x , _y ) then
27173: LD_VAR 0 11
27177: PPUSH
27178: LD_VAR 0 12
27182: PPUSH
27183: CALL_OW 488
27187: NOT
27188: IFFALSE 27192
// continue ;
27190: GO 27170
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27192: LD_VAR 0 11
27196: PPUSH
27197: LD_VAR 0 12
27201: PPUSH
27202: CALL_OW 351
27206: PUSH
27207: LD_VAR 0 11
27211: PPUSH
27212: LD_VAR 0 12
27216: PPUSH
27217: CALL_OW 554
27221: AND
27222: IFFALSE 27262
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27224: LD_ADDR_VAR 0 13
27228: PUSH
27229: LD_VAR 0 13
27233: PPUSH
27234: LD_VAR 0 13
27238: PUSH
27239: LD_INT 1
27241: PLUS
27242: PPUSH
27243: LD_VAR 0 11
27247: PUSH
27248: LD_VAR 0 12
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PPUSH
27257: CALL_OW 2
27261: ST_TO_ADDR
// end ;
27262: GO 27170
27264: POP
27265: POP
27266: GO 27150
27268: POP
27269: POP
// if not list then
27270: LD_VAR 0 13
27274: NOT
27275: IFFALSE 27279
// exit ;
27277: GO 27358
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27279: LD_ADDR_VAR 0 13
27283: PUSH
27284: LD_VAR 0 1
27288: PPUSH
27289: LD_VAR 0 13
27293: PPUSH
27294: LD_INT 1
27296: PPUSH
27297: LD_INT 1
27299: PPUSH
27300: CALL 35971 0 4
27304: ST_TO_ADDR
// ComStop ( flame ) ;
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 141
// for i in list do
27314: LD_ADDR_VAR 0 6
27318: PUSH
27319: LD_VAR 0 13
27323: PUSH
27324: FOR_IN
27325: IFFALSE 27356
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27327: LD_VAR 0 1
27331: PPUSH
27332: LD_VAR 0 6
27336: PUSH
27337: LD_INT 1
27339: ARRAY
27340: PPUSH
27341: LD_VAR 0 6
27345: PUSH
27346: LD_INT 2
27348: ARRAY
27349: PPUSH
27350: CALL_OW 176
27354: GO 27324
27356: POP
27357: POP
// end ;
27358: LD_VAR 0 5
27362: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27363: LD_EXP 88
27367: NOT
27368: IFFALSE 27418
27370: GO 27372
27372: DISABLE
// begin initHack := true ;
27373: LD_ADDR_EXP 88
27377: PUSH
27378: LD_INT 1
27380: ST_TO_ADDR
// hackTanks := [ ] ;
27381: LD_ADDR_EXP 89
27385: PUSH
27386: EMPTY
27387: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27388: LD_ADDR_EXP 90
27392: PUSH
27393: EMPTY
27394: ST_TO_ADDR
// hackLimit := 3 ;
27395: LD_ADDR_EXP 91
27399: PUSH
27400: LD_INT 3
27402: ST_TO_ADDR
// hackDist := 12 ;
27403: LD_ADDR_EXP 92
27407: PUSH
27408: LD_INT 12
27410: ST_TO_ADDR
// hackCounter := [ ] ;
27411: LD_ADDR_EXP 93
27415: PUSH
27416: EMPTY
27417: ST_TO_ADDR
// end ;
27418: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27419: LD_EXP 88
27423: PUSH
27424: LD_INT 34
27426: PUSH
27427: LD_INT 99
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PPUSH
27434: CALL_OW 69
27438: AND
27439: IFFALSE 27692
27441: GO 27443
27443: DISABLE
27444: LD_INT 0
27446: PPUSH
27447: PPUSH
// begin enable ;
27448: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: LD_INT 34
27456: PUSH
27457: LD_INT 99
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PPUSH
27464: CALL_OW 69
27468: PUSH
27469: FOR_IN
27470: IFFALSE 27690
// begin if not i in hackTanks then
27472: LD_VAR 0 1
27476: PUSH
27477: LD_EXP 89
27481: IN
27482: NOT
27483: IFFALSE 27566
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27485: LD_ADDR_EXP 89
27489: PUSH
27490: LD_EXP 89
27494: PPUSH
27495: LD_EXP 89
27499: PUSH
27500: LD_INT 1
27502: PLUS
27503: PPUSH
27504: LD_VAR 0 1
27508: PPUSH
27509: CALL_OW 1
27513: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27514: LD_ADDR_EXP 90
27518: PUSH
27519: LD_EXP 90
27523: PPUSH
27524: LD_EXP 90
27528: PUSH
27529: LD_INT 1
27531: PLUS
27532: PPUSH
27533: EMPTY
27534: PPUSH
27535: CALL_OW 1
27539: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27540: LD_ADDR_EXP 93
27544: PUSH
27545: LD_EXP 93
27549: PPUSH
27550: LD_EXP 93
27554: PUSH
27555: LD_INT 1
27557: PLUS
27558: PPUSH
27559: EMPTY
27560: PPUSH
27561: CALL_OW 1
27565: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27566: LD_VAR 0 1
27570: PPUSH
27571: CALL_OW 302
27575: NOT
27576: IFFALSE 27589
// begin HackUnlinkAll ( i ) ;
27578: LD_VAR 0 1
27582: PPUSH
27583: CALL 27695 0 1
// continue ;
27587: GO 27469
// end ; HackCheckCapturedStatus ( i ) ;
27589: LD_VAR 0 1
27593: PPUSH
27594: CALL 28138 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: LD_INT 81
27605: PUSH
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 255
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 33
27622: PUSH
27623: LD_INT 3
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 91
27632: PUSH
27633: LD_VAR 0 1
27637: PUSH
27638: LD_EXP 92
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 50
27650: PUSH
27651: EMPTY
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL_OW 69
27664: ST_TO_ADDR
// if not tmp then
27665: LD_VAR 0 2
27669: NOT
27670: IFFALSE 27674
// continue ;
27672: GO 27469
// HackLink ( i , tmp ) ;
27674: LD_VAR 0 1
27678: PPUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: CALL 27831 0 2
// end ;
27688: GO 27469
27690: POP
27691: POP
// end ;
27692: PPOPN 2
27694: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27695: LD_INT 0
27697: PPUSH
27698: PPUSH
27699: PPUSH
// if not hack in hackTanks then
27700: LD_VAR 0 1
27704: PUSH
27705: LD_EXP 89
27709: IN
27710: NOT
27711: IFFALSE 27715
// exit ;
27713: GO 27826
// index := GetElementIndex ( hackTanks , hack ) ;
27715: LD_ADDR_VAR 0 4
27719: PUSH
27720: LD_EXP 89
27724: PPUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL 35268 0 2
27734: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27735: LD_EXP 90
27739: PUSH
27740: LD_VAR 0 4
27744: ARRAY
27745: IFFALSE 27826
// begin for i in hackTanksCaptured [ index ] do
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: LD_EXP 90
27756: PUSH
27757: LD_VAR 0 4
27761: ARRAY
27762: PUSH
27763: FOR_IN
27764: IFFALSE 27790
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27766: LD_VAR 0 3
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PPUSH
27775: LD_VAR 0 3
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PPUSH
27784: CALL_OW 235
27788: GO 27763
27790: POP
27791: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27792: LD_ADDR_EXP 90
27796: PUSH
27797: LD_EXP 90
27801: PPUSH
27802: LD_VAR 0 4
27806: PPUSH
27807: EMPTY
27808: PPUSH
27809: CALL_OW 1
27813: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 0
27821: PPUSH
27822: CALL_OW 505
// end ; end ;
27826: LD_VAR 0 2
27830: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27831: LD_INT 0
27833: PPUSH
27834: PPUSH
27835: PPUSH
// if not hack in hackTanks or not vehicles then
27836: LD_VAR 0 1
27840: PUSH
27841: LD_EXP 89
27845: IN
27846: NOT
27847: PUSH
27848: LD_VAR 0 2
27852: NOT
27853: OR
27854: IFFALSE 27858
// exit ;
27856: GO 28133
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27858: LD_ADDR_VAR 0 2
27862: PUSH
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_VAR 0 2
27872: PPUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_INT 1
27878: PPUSH
27879: CALL 35918 0 4
27883: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27884: LD_ADDR_VAR 0 5
27888: PUSH
27889: LD_EXP 89
27893: PPUSH
27894: LD_VAR 0 1
27898: PPUSH
27899: CALL 35268 0 2
27903: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27904: LD_EXP 90
27908: PUSH
27909: LD_VAR 0 5
27913: ARRAY
27914: PUSH
27915: LD_EXP 91
27919: LESS
27920: IFFALSE 28109
// begin for i := 1 to vehicles do
27922: LD_ADDR_VAR 0 4
27926: PUSH
27927: DOUBLE
27928: LD_INT 1
27930: DEC
27931: ST_TO_ADDR
27932: LD_VAR 0 2
27936: PUSH
27937: FOR_TO
27938: IFFALSE 28107
// begin if hackTanksCaptured [ index ] = hackLimit then
27940: LD_EXP 90
27944: PUSH
27945: LD_VAR 0 5
27949: ARRAY
27950: PUSH
27951: LD_EXP 91
27955: EQUAL
27956: IFFALSE 27960
// break ;
27958: GO 28107
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27960: LD_ADDR_EXP 93
27964: PUSH
27965: LD_EXP 93
27969: PPUSH
27970: LD_VAR 0 5
27974: PPUSH
27975: LD_EXP 93
27979: PUSH
27980: LD_VAR 0 5
27984: ARRAY
27985: PUSH
27986: LD_INT 1
27988: PLUS
27989: PPUSH
27990: CALL_OW 1
27994: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27995: LD_ADDR_EXP 90
27999: PUSH
28000: LD_EXP 90
28004: PPUSH
28005: LD_VAR 0 5
28009: PUSH
28010: LD_EXP 90
28014: PUSH
28015: LD_VAR 0 5
28019: ARRAY
28020: PUSH
28021: LD_INT 1
28023: PLUS
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PPUSH
28029: LD_VAR 0 2
28033: PUSH
28034: LD_VAR 0 4
28038: ARRAY
28039: PUSH
28040: LD_VAR 0 2
28044: PUSH
28045: LD_VAR 0 4
28049: ARRAY
28050: PPUSH
28051: CALL_OW 255
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL 35483 0 3
28064: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28065: LD_VAR 0 2
28069: PUSH
28070: LD_VAR 0 4
28074: ARRAY
28075: PPUSH
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 255
28085: PPUSH
28086: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28090: LD_VAR 0 2
28094: PUSH
28095: LD_VAR 0 4
28099: ARRAY
28100: PPUSH
28101: CALL_OW 141
// end ;
28105: GO 27937
28107: POP
28108: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28109: LD_VAR 0 1
28113: PPUSH
28114: LD_EXP 90
28118: PUSH
28119: LD_VAR 0 5
28123: ARRAY
28124: PUSH
28125: LD_INT 0
28127: PLUS
28128: PPUSH
28129: CALL_OW 505
// end ;
28133: LD_VAR 0 3
28137: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28138: LD_INT 0
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
// if not hack in hackTanks then
28144: LD_VAR 0 1
28148: PUSH
28149: LD_EXP 89
28153: IN
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28399
// index := GetElementIndex ( hackTanks , hack ) ;
28159: LD_ADDR_VAR 0 4
28163: PUSH
28164: LD_EXP 89
28168: PPUSH
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL 35268 0 2
28178: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: DOUBLE
28185: LD_EXP 90
28189: PUSH
28190: LD_VAR 0 4
28194: ARRAY
28195: INC
28196: ST_TO_ADDR
28197: LD_INT 1
28199: PUSH
28200: FOR_DOWNTO
28201: IFFALSE 28373
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28203: LD_ADDR_VAR 0 5
28207: PUSH
28208: LD_EXP 90
28212: PUSH
28213: LD_VAR 0 4
28217: ARRAY
28218: PUSH
28219: LD_VAR 0 3
28223: ARRAY
28224: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28225: LD_VAR 0 5
28229: PUSH
28230: LD_INT 1
28232: ARRAY
28233: PPUSH
28234: CALL_OW 302
28238: NOT
28239: PUSH
28240: LD_VAR 0 5
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: PPUSH
28249: CALL_OW 255
28253: PUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 255
28263: NONEQUAL
28264: OR
28265: IFFALSE 28371
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28267: LD_VAR 0 5
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PPUSH
28276: CALL_OW 305
28280: PUSH
28281: LD_VAR 0 5
28285: PUSH
28286: LD_INT 1
28288: ARRAY
28289: PPUSH
28290: CALL_OW 255
28294: PUSH
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 255
28304: EQUAL
28305: AND
28306: IFFALSE 28330
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28308: LD_VAR 0 5
28312: PUSH
28313: LD_INT 1
28315: ARRAY
28316: PPUSH
28317: LD_VAR 0 5
28321: PUSH
28322: LD_INT 2
28324: ARRAY
28325: PPUSH
28326: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28330: LD_ADDR_EXP 90
28334: PUSH
28335: LD_EXP 90
28339: PPUSH
28340: LD_VAR 0 4
28344: PPUSH
28345: LD_EXP 90
28349: PUSH
28350: LD_VAR 0 4
28354: ARRAY
28355: PPUSH
28356: LD_VAR 0 3
28360: PPUSH
28361: CALL_OW 3
28365: PPUSH
28366: CALL_OW 1
28370: ST_TO_ADDR
// end ; end ;
28371: GO 28200
28373: POP
28374: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28375: LD_VAR 0 1
28379: PPUSH
28380: LD_EXP 90
28384: PUSH
28385: LD_VAR 0 4
28389: ARRAY
28390: PUSH
28391: LD_INT 0
28393: PLUS
28394: PPUSH
28395: CALL_OW 505
// end ;
28399: LD_VAR 0 2
28403: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28404: LD_INT 0
28406: PPUSH
28407: PPUSH
28408: PPUSH
28409: PPUSH
// if not hack in hackTanks then
28410: LD_VAR 0 1
28414: PUSH
28415: LD_EXP 89
28419: IN
28420: NOT
28421: IFFALSE 28425
// exit ;
28423: GO 28510
// index := GetElementIndex ( hackTanks , hack ) ;
28425: LD_ADDR_VAR 0 5
28429: PUSH
28430: LD_EXP 89
28434: PPUSH
28435: LD_VAR 0 1
28439: PPUSH
28440: CALL 35268 0 2
28444: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28445: LD_ADDR_VAR 0 4
28449: PUSH
28450: DOUBLE
28451: LD_INT 1
28453: DEC
28454: ST_TO_ADDR
28455: LD_EXP 90
28459: PUSH
28460: LD_VAR 0 5
28464: ARRAY
28465: PUSH
28466: FOR_TO
28467: IFFALSE 28508
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28469: LD_EXP 90
28473: PUSH
28474: LD_VAR 0 5
28478: ARRAY
28479: PUSH
28480: LD_VAR 0 4
28484: ARRAY
28485: PUSH
28486: LD_INT 1
28488: ARRAY
28489: PUSH
28490: LD_VAR 0 2
28494: EQUAL
28495: IFFALSE 28506
// KillUnit ( vehicle ) ;
28497: LD_VAR 0 2
28501: PPUSH
28502: CALL_OW 66
28506: GO 28466
28508: POP
28509: POP
// end ;
28510: LD_VAR 0 3
28514: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28515: LD_EXP 94
28519: NOT
28520: IFFALSE 28555
28522: GO 28524
28524: DISABLE
// begin initMiner := true ;
28525: LD_ADDR_EXP 94
28529: PUSH
28530: LD_INT 1
28532: ST_TO_ADDR
// minersList := [ ] ;
28533: LD_ADDR_EXP 95
28537: PUSH
28538: EMPTY
28539: ST_TO_ADDR
// minerMinesList := [ ] ;
28540: LD_ADDR_EXP 96
28544: PUSH
28545: EMPTY
28546: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28547: LD_ADDR_EXP 97
28551: PUSH
28552: LD_INT 5
28554: ST_TO_ADDR
// end ;
28555: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28556: LD_EXP 94
28560: PUSH
28561: LD_INT 34
28563: PUSH
28564: LD_INT 81
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: AND
28576: IFFALSE 29037
28578: GO 28580
28580: DISABLE
28581: LD_INT 0
28583: PPUSH
28584: PPUSH
28585: PPUSH
28586: PPUSH
// begin enable ;
28587: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28588: LD_ADDR_VAR 0 1
28592: PUSH
28593: LD_INT 34
28595: PUSH
28596: LD_INT 81
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PPUSH
28603: CALL_OW 69
28607: PUSH
28608: FOR_IN
28609: IFFALSE 28681
// begin if not i in minersList then
28611: LD_VAR 0 1
28615: PUSH
28616: LD_EXP 95
28620: IN
28621: NOT
28622: IFFALSE 28679
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28624: LD_ADDR_EXP 95
28628: PUSH
28629: LD_EXP 95
28633: PPUSH
28634: LD_EXP 95
28638: PUSH
28639: LD_INT 1
28641: PLUS
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 1
28652: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28653: LD_ADDR_EXP 96
28657: PUSH
28658: LD_EXP 96
28662: PPUSH
28663: LD_EXP 96
28667: PUSH
28668: LD_INT 1
28670: PLUS
28671: PPUSH
28672: EMPTY
28673: PPUSH
28674: CALL_OW 1
28678: ST_TO_ADDR
// end end ;
28679: GO 28608
28681: POP
28682: POP
// for i := minerMinesList downto 1 do
28683: LD_ADDR_VAR 0 1
28687: PUSH
28688: DOUBLE
28689: LD_EXP 96
28693: INC
28694: ST_TO_ADDR
28695: LD_INT 1
28697: PUSH
28698: FOR_DOWNTO
28699: IFFALSE 29035
// begin if IsLive ( minersList [ i ] ) then
28701: LD_EXP 95
28705: PUSH
28706: LD_VAR 0 1
28710: ARRAY
28711: PPUSH
28712: CALL_OW 300
28716: IFFALSE 28744
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28718: LD_EXP 95
28722: PUSH
28723: LD_VAR 0 1
28727: ARRAY
28728: PPUSH
28729: LD_EXP 96
28733: PUSH
28734: LD_VAR 0 1
28738: ARRAY
28739: PPUSH
28740: CALL_OW 505
// if not minerMinesList [ i ] then
28744: LD_EXP 96
28748: PUSH
28749: LD_VAR 0 1
28753: ARRAY
28754: NOT
28755: IFFALSE 28759
// continue ;
28757: GO 28698
// for j := minerMinesList [ i ] downto 1 do
28759: LD_ADDR_VAR 0 2
28763: PUSH
28764: DOUBLE
28765: LD_EXP 96
28769: PUSH
28770: LD_VAR 0 1
28774: ARRAY
28775: INC
28776: ST_TO_ADDR
28777: LD_INT 1
28779: PUSH
28780: FOR_DOWNTO
28781: IFFALSE 29031
// begin side := GetSide ( minersList [ i ] ) ;
28783: LD_ADDR_VAR 0 3
28787: PUSH
28788: LD_EXP 95
28792: PUSH
28793: LD_VAR 0 1
28797: ARRAY
28798: PPUSH
28799: CALL_OW 255
28803: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28804: LD_ADDR_VAR 0 4
28808: PUSH
28809: LD_EXP 96
28813: PUSH
28814: LD_VAR 0 1
28818: ARRAY
28819: PUSH
28820: LD_VAR 0 2
28824: ARRAY
28825: PUSH
28826: LD_INT 1
28828: ARRAY
28829: PPUSH
28830: LD_EXP 96
28834: PUSH
28835: LD_VAR 0 1
28839: ARRAY
28840: PUSH
28841: LD_VAR 0 2
28845: ARRAY
28846: PUSH
28847: LD_INT 2
28849: ARRAY
28850: PPUSH
28851: CALL_OW 428
28855: ST_TO_ADDR
// if not tmp then
28856: LD_VAR 0 4
28860: NOT
28861: IFFALSE 28865
// continue ;
28863: GO 28780
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28865: LD_VAR 0 4
28869: PUSH
28870: LD_INT 81
28872: PUSH
28873: LD_VAR 0 3
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PPUSH
28882: CALL_OW 69
28886: IN
28887: PUSH
28888: LD_EXP 96
28892: PUSH
28893: LD_VAR 0 1
28897: ARRAY
28898: PUSH
28899: LD_VAR 0 2
28903: ARRAY
28904: PUSH
28905: LD_INT 1
28907: ARRAY
28908: PPUSH
28909: LD_EXP 96
28913: PUSH
28914: LD_VAR 0 1
28918: ARRAY
28919: PUSH
28920: LD_VAR 0 2
28924: ARRAY
28925: PUSH
28926: LD_INT 2
28928: ARRAY
28929: PPUSH
28930: CALL_OW 458
28934: AND
28935: IFFALSE 29029
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28937: LD_EXP 96
28941: PUSH
28942: LD_VAR 0 1
28946: ARRAY
28947: PUSH
28948: LD_VAR 0 2
28952: ARRAY
28953: PUSH
28954: LD_INT 1
28956: ARRAY
28957: PPUSH
28958: LD_EXP 96
28962: PUSH
28963: LD_VAR 0 1
28967: ARRAY
28968: PUSH
28969: LD_VAR 0 2
28973: ARRAY
28974: PUSH
28975: LD_INT 2
28977: ARRAY
28978: PPUSH
28979: LD_VAR 0 3
28983: PPUSH
28984: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28988: LD_ADDR_EXP 96
28992: PUSH
28993: LD_EXP 96
28997: PPUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: LD_EXP 96
29007: PUSH
29008: LD_VAR 0 1
29012: ARRAY
29013: PPUSH
29014: LD_VAR 0 2
29018: PPUSH
29019: CALL_OW 3
29023: PPUSH
29024: CALL_OW 1
29028: ST_TO_ADDR
// end ; end ;
29029: GO 28780
29031: POP
29032: POP
// end ;
29033: GO 28698
29035: POP
29036: POP
// end ;
29037: PPOPN 4
29039: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29040: LD_INT 0
29042: PPUSH
29043: PPUSH
// result := false ;
29044: LD_ADDR_VAR 0 4
29048: PUSH
29049: LD_INT 0
29051: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 264
29061: PUSH
29062: LD_INT 81
29064: EQUAL
29065: NOT
29066: IFFALSE 29070
// exit ;
29068: GO 29310
// index := GetElementIndex ( minersList , unit ) ;
29070: LD_ADDR_VAR 0 5
29074: PUSH
29075: LD_EXP 95
29079: PPUSH
29080: LD_VAR 0 1
29084: PPUSH
29085: CALL 35268 0 2
29089: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29090: LD_EXP 96
29094: PUSH
29095: LD_VAR 0 5
29099: ARRAY
29100: PUSH
29101: LD_EXP 97
29105: GREATEREQUAL
29106: IFFALSE 29110
// exit ;
29108: GO 29310
// ComMoveXY ( unit , x , y ) ;
29110: LD_VAR 0 1
29114: PPUSH
29115: LD_VAR 0 2
29119: PPUSH
29120: LD_VAR 0 3
29124: PPUSH
29125: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29129: LD_INT 35
29131: PPUSH
29132: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29136: LD_VAR 0 1
29140: PPUSH
29141: LD_VAR 0 2
29145: PPUSH
29146: LD_VAR 0 3
29150: PPUSH
29151: CALL 67020 0 3
29155: NOT
29156: PUSH
29157: LD_VAR 0 1
29161: PPUSH
29162: CALL_OW 314
29166: AND
29167: IFFALSE 29171
// exit ;
29169: GO 29310
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_VAR 0 3
29180: PPUSH
29181: CALL_OW 428
29185: PUSH
29186: LD_VAR 0 1
29190: EQUAL
29191: PUSH
29192: LD_VAR 0 1
29196: PPUSH
29197: CALL_OW 314
29201: NOT
29202: AND
29203: IFFALSE 29129
// PlaySoundXY ( x , y , PlantMine ) ;
29205: LD_VAR 0 2
29209: PPUSH
29210: LD_VAR 0 3
29214: PPUSH
29215: LD_STRING PlantMine
29217: PPUSH
29218: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29222: LD_VAR 0 2
29226: PPUSH
29227: LD_VAR 0 3
29231: PPUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL_OW 255
29241: PPUSH
29242: LD_INT 0
29244: PPUSH
29245: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29249: LD_ADDR_EXP 96
29253: PUSH
29254: LD_EXP 96
29258: PPUSH
29259: LD_VAR 0 5
29263: PUSH
29264: LD_EXP 96
29268: PUSH
29269: LD_VAR 0 5
29273: ARRAY
29274: PUSH
29275: LD_INT 1
29277: PLUS
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PPUSH
29283: LD_VAR 0 2
29287: PUSH
29288: LD_VAR 0 3
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PPUSH
29297: CALL 35483 0 3
29301: ST_TO_ADDR
// result := true ;
29302: LD_ADDR_VAR 0 4
29306: PUSH
29307: LD_INT 1
29309: ST_TO_ADDR
// end ;
29310: LD_VAR 0 4
29314: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29315: LD_INT 0
29317: PPUSH
29318: PPUSH
29319: PPUSH
// if not unit in minersList then
29320: LD_VAR 0 1
29324: PUSH
29325: LD_EXP 95
29329: IN
29330: NOT
29331: IFFALSE 29335
// exit ;
29333: GO 29727
// index := GetElementIndex ( minersList , unit ) ;
29335: LD_ADDR_VAR 0 6
29339: PUSH
29340: LD_EXP 95
29344: PPUSH
29345: LD_VAR 0 1
29349: PPUSH
29350: CALL 35268 0 2
29354: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29355: LD_ADDR_VAR 0 5
29359: PUSH
29360: DOUBLE
29361: LD_EXP 96
29365: PUSH
29366: LD_VAR 0 6
29370: ARRAY
29371: INC
29372: ST_TO_ADDR
29373: LD_INT 1
29375: PUSH
29376: FOR_DOWNTO
29377: IFFALSE 29538
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29379: LD_EXP 96
29383: PUSH
29384: LD_VAR 0 6
29388: ARRAY
29389: PUSH
29390: LD_VAR 0 5
29394: ARRAY
29395: PUSH
29396: LD_INT 1
29398: ARRAY
29399: PUSH
29400: LD_VAR 0 2
29404: EQUAL
29405: PUSH
29406: LD_EXP 96
29410: PUSH
29411: LD_VAR 0 6
29415: ARRAY
29416: PUSH
29417: LD_VAR 0 5
29421: ARRAY
29422: PUSH
29423: LD_INT 2
29425: ARRAY
29426: PUSH
29427: LD_VAR 0 3
29431: EQUAL
29432: AND
29433: IFFALSE 29536
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29435: LD_EXP 96
29439: PUSH
29440: LD_VAR 0 6
29444: ARRAY
29445: PUSH
29446: LD_VAR 0 5
29450: ARRAY
29451: PUSH
29452: LD_INT 1
29454: ARRAY
29455: PPUSH
29456: LD_EXP 96
29460: PUSH
29461: LD_VAR 0 6
29465: ARRAY
29466: PUSH
29467: LD_VAR 0 5
29471: ARRAY
29472: PUSH
29473: LD_INT 2
29475: ARRAY
29476: PPUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL_OW 255
29486: PPUSH
29487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29491: LD_ADDR_EXP 96
29495: PUSH
29496: LD_EXP 96
29500: PPUSH
29501: LD_VAR 0 6
29505: PPUSH
29506: LD_EXP 96
29510: PUSH
29511: LD_VAR 0 6
29515: ARRAY
29516: PPUSH
29517: LD_VAR 0 5
29521: PPUSH
29522: CALL_OW 3
29526: PPUSH
29527: CALL_OW 1
29531: ST_TO_ADDR
// exit ;
29532: POP
29533: POP
29534: GO 29727
// end ; end ;
29536: GO 29376
29538: POP
29539: POP
// for i := minerMinesList [ index ] downto 1 do
29540: LD_ADDR_VAR 0 5
29544: PUSH
29545: DOUBLE
29546: LD_EXP 96
29550: PUSH
29551: LD_VAR 0 6
29555: ARRAY
29556: INC
29557: ST_TO_ADDR
29558: LD_INT 1
29560: PUSH
29561: FOR_DOWNTO
29562: IFFALSE 29725
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29564: LD_EXP 96
29568: PUSH
29569: LD_VAR 0 6
29573: ARRAY
29574: PUSH
29575: LD_VAR 0 5
29579: ARRAY
29580: PUSH
29581: LD_INT 1
29583: ARRAY
29584: PPUSH
29585: LD_EXP 96
29589: PUSH
29590: LD_VAR 0 6
29594: ARRAY
29595: PUSH
29596: LD_VAR 0 5
29600: ARRAY
29601: PUSH
29602: LD_INT 2
29604: ARRAY
29605: PPUSH
29606: LD_VAR 0 2
29610: PPUSH
29611: LD_VAR 0 3
29615: PPUSH
29616: CALL_OW 298
29620: PUSH
29621: LD_INT 6
29623: LESS
29624: IFFALSE 29723
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29626: LD_EXP 96
29630: PUSH
29631: LD_VAR 0 6
29635: ARRAY
29636: PUSH
29637: LD_VAR 0 5
29641: ARRAY
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PPUSH
29647: LD_EXP 96
29651: PUSH
29652: LD_VAR 0 6
29656: ARRAY
29657: PUSH
29658: LD_VAR 0 5
29662: ARRAY
29663: PUSH
29664: LD_INT 2
29666: ARRAY
29667: PPUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: CALL_OW 255
29677: PPUSH
29678: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29682: LD_ADDR_EXP 96
29686: PUSH
29687: LD_EXP 96
29691: PPUSH
29692: LD_VAR 0 6
29696: PPUSH
29697: LD_EXP 96
29701: PUSH
29702: LD_VAR 0 6
29706: ARRAY
29707: PPUSH
29708: LD_VAR 0 5
29712: PPUSH
29713: CALL_OW 3
29717: PPUSH
29718: CALL_OW 1
29722: ST_TO_ADDR
// end ; end ;
29723: GO 29561
29725: POP
29726: POP
// end ;
29727: LD_VAR 0 4
29731: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29732: LD_INT 0
29734: PPUSH
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 264
29752: PUSH
29753: LD_INT 81
29755: EQUAL
29756: NOT
29757: PUSH
29758: LD_VAR 0 1
29762: PUSH
29763: LD_EXP 95
29767: IN
29768: NOT
29769: OR
29770: IFFALSE 29774
// exit ;
29772: GO 30096
// index := GetElementIndex ( minersList , unit ) ;
29774: LD_ADDR_VAR 0 6
29778: PUSH
29779: LD_EXP 95
29783: PPUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL 35268 0 2
29793: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29794: LD_ADDR_VAR 0 8
29798: PUSH
29799: LD_EXP 97
29803: PUSH
29804: LD_EXP 96
29808: PUSH
29809: LD_VAR 0 6
29813: ARRAY
29814: MINUS
29815: ST_TO_ADDR
// if not minesFreeAmount then
29816: LD_VAR 0 8
29820: NOT
29821: IFFALSE 29825
// exit ;
29823: GO 30096
// tmp := [ ] ;
29825: LD_ADDR_VAR 0 7
29829: PUSH
29830: EMPTY
29831: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29832: LD_ADDR_VAR 0 5
29836: PUSH
29837: DOUBLE
29838: LD_INT 1
29840: DEC
29841: ST_TO_ADDR
29842: LD_VAR 0 8
29846: PUSH
29847: FOR_TO
29848: IFFALSE 30043
// begin _d := rand ( 0 , 5 ) ;
29850: LD_ADDR_VAR 0 11
29854: PUSH
29855: LD_INT 0
29857: PPUSH
29858: LD_INT 5
29860: PPUSH
29861: CALL_OW 12
29865: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29866: LD_ADDR_VAR 0 12
29870: PUSH
29871: LD_INT 2
29873: PPUSH
29874: LD_INT 6
29876: PPUSH
29877: CALL_OW 12
29881: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29882: LD_ADDR_VAR 0 9
29886: PUSH
29887: LD_VAR 0 2
29891: PPUSH
29892: LD_VAR 0 11
29896: PPUSH
29897: LD_VAR 0 12
29901: PPUSH
29902: CALL_OW 272
29906: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29907: LD_ADDR_VAR 0 10
29911: PUSH
29912: LD_VAR 0 3
29916: PPUSH
29917: LD_VAR 0 11
29921: PPUSH
29922: LD_VAR 0 12
29926: PPUSH
29927: CALL_OW 273
29931: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29932: LD_VAR 0 9
29936: PPUSH
29937: LD_VAR 0 10
29941: PPUSH
29942: CALL_OW 488
29946: PUSH
29947: LD_VAR 0 9
29951: PUSH
29952: LD_VAR 0 10
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_VAR 0 7
29965: IN
29966: NOT
29967: AND
29968: PUSH
29969: LD_VAR 0 9
29973: PPUSH
29974: LD_VAR 0 10
29978: PPUSH
29979: CALL_OW 458
29983: NOT
29984: AND
29985: IFFALSE 30027
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29987: LD_ADDR_VAR 0 7
29991: PUSH
29992: LD_VAR 0 7
29996: PPUSH
29997: LD_VAR 0 7
30001: PUSH
30002: LD_INT 1
30004: PLUS
30005: PPUSH
30006: LD_VAR 0 9
30010: PUSH
30011: LD_VAR 0 10
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PPUSH
30020: CALL_OW 1
30024: ST_TO_ADDR
30025: GO 30041
// i := i - 1 ;
30027: LD_ADDR_VAR 0 5
30031: PUSH
30032: LD_VAR 0 5
30036: PUSH
30037: LD_INT 1
30039: MINUS
30040: ST_TO_ADDR
// end ;
30041: GO 29847
30043: POP
30044: POP
// for i in tmp do
30045: LD_ADDR_VAR 0 5
30049: PUSH
30050: LD_VAR 0 7
30054: PUSH
30055: FOR_IN
30056: IFFALSE 30094
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30058: LD_VAR 0 1
30062: PPUSH
30063: LD_VAR 0 5
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: PPUSH
30072: LD_VAR 0 5
30076: PUSH
30077: LD_INT 2
30079: ARRAY
30080: PPUSH
30081: CALL 29040 0 3
30085: NOT
30086: IFFALSE 30092
// exit ;
30088: POP
30089: POP
30090: GO 30096
30092: GO 30055
30094: POP
30095: POP
// end ;
30096: LD_VAR 0 4
30100: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30101: LD_INT 0
30103: PPUSH
30104: PPUSH
30105: PPUSH
30106: PPUSH
30107: PPUSH
30108: PPUSH
30109: PPUSH
// if not GetClass ( unit ) = class_sniper then
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 257
30119: PUSH
30120: LD_INT 5
30122: EQUAL
30123: NOT
30124: IFFALSE 30128
// exit ;
30126: GO 30516
// dist := 8 ;
30128: LD_ADDR_VAR 0 5
30132: PUSH
30133: LD_INT 8
30135: ST_TO_ADDR
// viewRange := 12 ;
30136: LD_ADDR_VAR 0 7
30140: PUSH
30141: LD_INT 12
30143: ST_TO_ADDR
// side := GetSide ( unit ) ;
30144: LD_ADDR_VAR 0 6
30148: PUSH
30149: LD_VAR 0 1
30153: PPUSH
30154: CALL_OW 255
30158: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30159: LD_INT 61
30161: PPUSH
30162: LD_VAR 0 6
30166: PPUSH
30167: CALL_OW 321
30171: PUSH
30172: LD_INT 2
30174: EQUAL
30175: IFFALSE 30185
// viewRange := 16 ;
30177: LD_ADDR_VAR 0 7
30181: PUSH
30182: LD_INT 16
30184: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30185: LD_VAR 0 1
30189: PPUSH
30190: LD_VAR 0 2
30194: PPUSH
30195: LD_VAR 0 3
30199: PPUSH
30200: CALL_OW 297
30204: PUSH
30205: LD_VAR 0 5
30209: GREATER
30210: IFFALSE 30289
// begin ComMoveXY ( unit , x , y ) ;
30212: LD_VAR 0 1
30216: PPUSH
30217: LD_VAR 0 2
30221: PPUSH
30222: LD_VAR 0 3
30226: PPUSH
30227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30231: LD_INT 35
30233: PPUSH
30234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30238: LD_VAR 0 1
30242: PPUSH
30243: LD_VAR 0 2
30247: PPUSH
30248: LD_VAR 0 3
30252: PPUSH
30253: CALL 67020 0 3
30257: NOT
30258: IFFALSE 30262
// exit ;
30260: GO 30516
// until GetDistUnitXY ( unit , x , y ) < dist ;
30262: LD_VAR 0 1
30266: PPUSH
30267: LD_VAR 0 2
30271: PPUSH
30272: LD_VAR 0 3
30276: PPUSH
30277: CALL_OW 297
30281: PUSH
30282: LD_VAR 0 5
30286: LESS
30287: IFFALSE 30231
// end ; ComTurnXY ( unit , x , y ) ;
30289: LD_VAR 0 1
30293: PPUSH
30294: LD_VAR 0 2
30298: PPUSH
30299: LD_VAR 0 3
30303: PPUSH
30304: CALL_OW 118
// wait ( 5 ) ;
30308: LD_INT 5
30310: PPUSH
30311: CALL_OW 67
// _d := GetDir ( unit ) ;
30315: LD_ADDR_VAR 0 10
30319: PUSH
30320: LD_VAR 0 1
30324: PPUSH
30325: CALL_OW 254
30329: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30330: LD_ADDR_VAR 0 8
30334: PUSH
30335: LD_VAR 0 1
30339: PPUSH
30340: CALL_OW 250
30344: PPUSH
30345: LD_VAR 0 10
30349: PPUSH
30350: LD_VAR 0 5
30354: PPUSH
30355: CALL_OW 272
30359: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30360: LD_ADDR_VAR 0 9
30364: PUSH
30365: LD_VAR 0 1
30369: PPUSH
30370: CALL_OW 251
30374: PPUSH
30375: LD_VAR 0 10
30379: PPUSH
30380: LD_VAR 0 5
30384: PPUSH
30385: CALL_OW 273
30389: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30390: LD_VAR 0 8
30394: PPUSH
30395: LD_VAR 0 9
30399: PPUSH
30400: CALL_OW 488
30404: NOT
30405: IFFALSE 30409
// exit ;
30407: GO 30516
// ComAnimCustom ( unit , 1 ) ;
30409: LD_VAR 0 1
30413: PPUSH
30414: LD_INT 1
30416: PPUSH
30417: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30421: LD_VAR 0 8
30425: PPUSH
30426: LD_VAR 0 9
30430: PPUSH
30431: LD_VAR 0 6
30435: PPUSH
30436: LD_VAR 0 7
30440: PPUSH
30441: CALL_OW 330
// repeat wait ( 1 ) ;
30445: LD_INT 1
30447: PPUSH
30448: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30452: LD_VAR 0 1
30456: PPUSH
30457: CALL_OW 316
30461: PUSH
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 314
30471: OR
30472: PUSH
30473: LD_VAR 0 1
30477: PPUSH
30478: CALL_OW 302
30482: NOT
30483: OR
30484: PUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 301
30494: OR
30495: IFFALSE 30445
// RemoveSeeing ( _x , _y , side ) ;
30497: LD_VAR 0 8
30501: PPUSH
30502: LD_VAR 0 9
30506: PPUSH
30507: LD_VAR 0 6
30511: PPUSH
30512: CALL_OW 331
// end ; end_of_file
30516: LD_VAR 0 4
30520: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30521: LD_INT 0
30523: PPUSH
30524: PPUSH
// if exist_mode then
30525: LD_VAR 0 2
30529: IFFALSE 30554
// unit := CreateCharacter ( prefix & ident ) else
30531: LD_ADDR_VAR 0 5
30535: PUSH
30536: LD_VAR 0 3
30540: PUSH
30541: LD_VAR 0 1
30545: STR
30546: PPUSH
30547: CALL_OW 34
30551: ST_TO_ADDR
30552: GO 30569
// unit := NewCharacter ( ident ) ;
30554: LD_ADDR_VAR 0 5
30558: PUSH
30559: LD_VAR 0 1
30563: PPUSH
30564: CALL_OW 25
30568: ST_TO_ADDR
// result := unit ;
30569: LD_ADDR_VAR 0 4
30573: PUSH
30574: LD_VAR 0 5
30578: ST_TO_ADDR
// end ;
30579: LD_VAR 0 4
30583: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30584: LD_INT 0
30586: PPUSH
30587: PPUSH
// if not side or not nation then
30588: LD_VAR 0 1
30592: NOT
30593: PUSH
30594: LD_VAR 0 2
30598: NOT
30599: OR
30600: IFFALSE 30604
// exit ;
30602: GO 31372
// case nation of nation_american :
30604: LD_VAR 0 2
30608: PUSH
30609: LD_INT 1
30611: DOUBLE
30612: EQUAL
30613: IFTRUE 30617
30615: GO 30831
30617: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30618: LD_ADDR_VAR 0 4
30622: PUSH
30623: LD_INT 35
30625: PUSH
30626: LD_INT 45
30628: PUSH
30629: LD_INT 46
30631: PUSH
30632: LD_INT 47
30634: PUSH
30635: LD_INT 82
30637: PUSH
30638: LD_INT 83
30640: PUSH
30641: LD_INT 84
30643: PUSH
30644: LD_INT 85
30646: PUSH
30647: LD_INT 86
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 6
30658: PUSH
30659: LD_INT 15
30661: PUSH
30662: LD_INT 16
30664: PUSH
30665: LD_INT 7
30667: PUSH
30668: LD_INT 12
30670: PUSH
30671: LD_INT 13
30673: PUSH
30674: LD_INT 10
30676: PUSH
30677: LD_INT 14
30679: PUSH
30680: LD_INT 20
30682: PUSH
30683: LD_INT 21
30685: PUSH
30686: LD_INT 22
30688: PUSH
30689: LD_INT 25
30691: PUSH
30692: LD_INT 32
30694: PUSH
30695: LD_INT 27
30697: PUSH
30698: LD_INT 36
30700: PUSH
30701: LD_INT 69
30703: PUSH
30704: LD_INT 39
30706: PUSH
30707: LD_INT 34
30709: PUSH
30710: LD_INT 40
30712: PUSH
30713: LD_INT 48
30715: PUSH
30716: LD_INT 49
30718: PUSH
30719: LD_INT 50
30721: PUSH
30722: LD_INT 51
30724: PUSH
30725: LD_INT 52
30727: PUSH
30728: LD_INT 53
30730: PUSH
30731: LD_INT 54
30733: PUSH
30734: LD_INT 55
30736: PUSH
30737: LD_INT 56
30739: PUSH
30740: LD_INT 57
30742: PUSH
30743: LD_INT 58
30745: PUSH
30746: LD_INT 59
30748: PUSH
30749: LD_INT 60
30751: PUSH
30752: LD_INT 61
30754: PUSH
30755: LD_INT 62
30757: PUSH
30758: LD_INT 80
30760: PUSH
30761: LD_INT 82
30763: PUSH
30764: LD_INT 83
30766: PUSH
30767: LD_INT 84
30769: PUSH
30770: LD_INT 85
30772: PUSH
30773: LD_INT 86
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
30829: GO 31296
30831: LD_INT 2
30833: DOUBLE
30834: EQUAL
30835: IFTRUE 30839
30837: GO 31065
30839: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30840: LD_ADDR_VAR 0 4
30844: PUSH
30845: LD_INT 35
30847: PUSH
30848: LD_INT 45
30850: PUSH
30851: LD_INT 46
30853: PUSH
30854: LD_INT 47
30856: PUSH
30857: LD_INT 82
30859: PUSH
30860: LD_INT 83
30862: PUSH
30863: LD_INT 84
30865: PUSH
30866: LD_INT 85
30868: PUSH
30869: LD_INT 87
30871: PUSH
30872: LD_INT 70
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 11
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: LD_INT 5
30889: PUSH
30890: LD_INT 6
30892: PUSH
30893: LD_INT 15
30895: PUSH
30896: LD_INT 18
30898: PUSH
30899: LD_INT 7
30901: PUSH
30902: LD_INT 17
30904: PUSH
30905: LD_INT 8
30907: PUSH
30908: LD_INT 20
30910: PUSH
30911: LD_INT 21
30913: PUSH
30914: LD_INT 22
30916: PUSH
30917: LD_INT 72
30919: PUSH
30920: LD_INT 26
30922: PUSH
30923: LD_INT 69
30925: PUSH
30926: LD_INT 39
30928: PUSH
30929: LD_INT 40
30931: PUSH
30932: LD_INT 41
30934: PUSH
30935: LD_INT 42
30937: PUSH
30938: LD_INT 43
30940: PUSH
30941: LD_INT 48
30943: PUSH
30944: LD_INT 49
30946: PUSH
30947: LD_INT 50
30949: PUSH
30950: LD_INT 51
30952: PUSH
30953: LD_INT 52
30955: PUSH
30956: LD_INT 53
30958: PUSH
30959: LD_INT 54
30961: PUSH
30962: LD_INT 55
30964: PUSH
30965: LD_INT 56
30967: PUSH
30968: LD_INT 60
30970: PUSH
30971: LD_INT 61
30973: PUSH
30974: LD_INT 62
30976: PUSH
30977: LD_INT 66
30979: PUSH
30980: LD_INT 67
30982: PUSH
30983: LD_INT 68
30985: PUSH
30986: LD_INT 81
30988: PUSH
30989: LD_INT 82
30991: PUSH
30992: LD_INT 83
30994: PUSH
30995: LD_INT 84
30997: PUSH
30998: LD_INT 85
31000: PUSH
31001: LD_INT 87
31003: PUSH
31004: LD_INT 88
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
31063: GO 31296
31065: LD_INT 3
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31073
31071: GO 31295
31073: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: LD_INT 46
31081: PUSH
31082: LD_INT 47
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 82
31093: PUSH
31094: LD_INT 83
31096: PUSH
31097: LD_INT 84
31099: PUSH
31100: LD_INT 85
31102: PUSH
31103: LD_INT 86
31105: PUSH
31106: LD_INT 11
31108: PUSH
31109: LD_INT 9
31111: PUSH
31112: LD_INT 20
31114: PUSH
31115: LD_INT 19
31117: PUSH
31118: LD_INT 21
31120: PUSH
31121: LD_INT 24
31123: PUSH
31124: LD_INT 22
31126: PUSH
31127: LD_INT 25
31129: PUSH
31130: LD_INT 28
31132: PUSH
31133: LD_INT 29
31135: PUSH
31136: LD_INT 30
31138: PUSH
31139: LD_INT 31
31141: PUSH
31142: LD_INT 37
31144: PUSH
31145: LD_INT 38
31147: PUSH
31148: LD_INT 32
31150: PUSH
31151: LD_INT 27
31153: PUSH
31154: LD_INT 33
31156: PUSH
31157: LD_INT 69
31159: PUSH
31160: LD_INT 39
31162: PUSH
31163: LD_INT 34
31165: PUSH
31166: LD_INT 40
31168: PUSH
31169: LD_INT 71
31171: PUSH
31172: LD_INT 23
31174: PUSH
31175: LD_INT 44
31177: PUSH
31178: LD_INT 48
31180: PUSH
31181: LD_INT 49
31183: PUSH
31184: LD_INT 50
31186: PUSH
31187: LD_INT 51
31189: PUSH
31190: LD_INT 52
31192: PUSH
31193: LD_INT 53
31195: PUSH
31196: LD_INT 54
31198: PUSH
31199: LD_INT 55
31201: PUSH
31202: LD_INT 56
31204: PUSH
31205: LD_INT 57
31207: PUSH
31208: LD_INT 58
31210: PUSH
31211: LD_INT 59
31213: PUSH
31214: LD_INT 63
31216: PUSH
31217: LD_INT 64
31219: PUSH
31220: LD_INT 65
31222: PUSH
31223: LD_INT 82
31225: PUSH
31226: LD_INT 83
31228: PUSH
31229: LD_INT 84
31231: PUSH
31232: LD_INT 85
31234: PUSH
31235: LD_INT 86
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: ST_TO_ADDR
31293: GO 31296
31295: POP
// if state > - 1 and state < 3 then
31296: LD_VAR 0 3
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: GREATER
31305: PUSH
31306: LD_VAR 0 3
31310: PUSH
31311: LD_INT 3
31313: LESS
31314: AND
31315: IFFALSE 31372
// for i in result do
31317: LD_ADDR_VAR 0 5
31321: PUSH
31322: LD_VAR 0 4
31326: PUSH
31327: FOR_IN
31328: IFFALSE 31370
// if GetTech ( i , side ) <> state then
31330: LD_VAR 0 5
31334: PPUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 321
31344: PUSH
31345: LD_VAR 0 3
31349: NONEQUAL
31350: IFFALSE 31368
// result := result diff i ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_VAR 0 4
31361: PUSH
31362: LD_VAR 0 5
31366: DIFF
31367: ST_TO_ADDR
31368: GO 31327
31370: POP
31371: POP
// end ;
31372: LD_VAR 0 4
31376: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31377: LD_INT 0
31379: PPUSH
31380: PPUSH
31381: PPUSH
// result := true ;
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: LD_INT 1
31389: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31390: LD_ADDR_VAR 0 5
31394: PUSH
31395: LD_VAR 0 2
31399: PPUSH
31400: CALL_OW 480
31404: ST_TO_ADDR
// if not tmp then
31405: LD_VAR 0 5
31409: NOT
31410: IFFALSE 31414
// exit ;
31412: GO 31463
// for i in tmp do
31414: LD_ADDR_VAR 0 4
31418: PUSH
31419: LD_VAR 0 5
31423: PUSH
31424: FOR_IN
31425: IFFALSE 31461
// if GetTech ( i , side ) <> state_researched then
31427: LD_VAR 0 4
31431: PPUSH
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 321
31441: PUSH
31442: LD_INT 2
31444: NONEQUAL
31445: IFFALSE 31459
// begin result := false ;
31447: LD_ADDR_VAR 0 3
31451: PUSH
31452: LD_INT 0
31454: ST_TO_ADDR
// exit ;
31455: POP
31456: POP
31457: GO 31463
// end ;
31459: GO 31424
31461: POP
31462: POP
// end ;
31463: LD_VAR 0 3
31467: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
31472: PPUSH
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31483: LD_VAR 0 1
31487: NOT
31488: PUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 257
31498: PUSH
31499: LD_INT 9
31501: NONEQUAL
31502: OR
31503: IFFALSE 31507
// exit ;
31505: GO 32080
// side := GetSide ( unit ) ;
31507: LD_ADDR_VAR 0 9
31511: PUSH
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 255
31521: ST_TO_ADDR
// tech_space := tech_spacanom ;
31522: LD_ADDR_VAR 0 12
31526: PUSH
31527: LD_INT 29
31529: ST_TO_ADDR
// tech_time := tech_taurad ;
31530: LD_ADDR_VAR 0 13
31534: PUSH
31535: LD_INT 28
31537: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31538: LD_ADDR_VAR 0 11
31542: PUSH
31543: LD_VAR 0 1
31547: PPUSH
31548: CALL_OW 310
31552: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31553: LD_VAR 0 11
31557: PPUSH
31558: CALL_OW 247
31562: PUSH
31563: LD_INT 2
31565: EQUAL
31566: IFFALSE 31570
// exit ;
31568: GO 32080
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31570: LD_ADDR_VAR 0 8
31574: PUSH
31575: LD_INT 81
31577: PUSH
31578: LD_VAR 0 9
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: LD_INT 21
31592: PUSH
31593: LD_INT 3
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PPUSH
31608: CALL_OW 69
31612: ST_TO_ADDR
// if not tmp then
31613: LD_VAR 0 8
31617: NOT
31618: IFFALSE 31622
// exit ;
31620: GO 32080
// if in_unit then
31622: LD_VAR 0 11
31626: IFFALSE 31650
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31628: LD_ADDR_VAR 0 10
31632: PUSH
31633: LD_VAR 0 8
31637: PPUSH
31638: LD_VAR 0 11
31642: PPUSH
31643: CALL_OW 74
31647: ST_TO_ADDR
31648: GO 31670
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31650: LD_ADDR_VAR 0 10
31654: PUSH
31655: LD_VAR 0 8
31659: PPUSH
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 74
31669: ST_TO_ADDR
// if not enemy then
31670: LD_VAR 0 10
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 32080
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31679: LD_VAR 0 11
31683: PUSH
31684: LD_VAR 0 11
31688: PPUSH
31689: LD_VAR 0 10
31693: PPUSH
31694: CALL_OW 296
31698: PUSH
31699: LD_INT 13
31701: GREATER
31702: AND
31703: PUSH
31704: LD_VAR 0 1
31708: PPUSH
31709: LD_VAR 0 10
31713: PPUSH
31714: CALL_OW 296
31718: PUSH
31719: LD_INT 12
31721: GREATER
31722: OR
31723: IFFALSE 31727
// exit ;
31725: GO 32080
// missile := [ 1 ] ;
31727: LD_ADDR_VAR 0 14
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31738: LD_VAR 0 9
31742: PPUSH
31743: LD_VAR 0 12
31747: PPUSH
31748: CALL_OW 325
31752: IFFALSE 31781
// missile := Replace ( missile , missile + 1 , 2 ) ;
31754: LD_ADDR_VAR 0 14
31758: PUSH
31759: LD_VAR 0 14
31763: PPUSH
31764: LD_VAR 0 14
31768: PUSH
31769: LD_INT 1
31771: PLUS
31772: PPUSH
31773: LD_INT 2
31775: PPUSH
31776: CALL_OW 1
31780: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31781: LD_VAR 0 9
31785: PPUSH
31786: LD_VAR 0 13
31790: PPUSH
31791: CALL_OW 325
31795: PUSH
31796: LD_VAR 0 10
31800: PPUSH
31801: CALL_OW 255
31805: PPUSH
31806: LD_VAR 0 13
31810: PPUSH
31811: CALL_OW 325
31815: NOT
31816: AND
31817: IFFALSE 31846
// missile := Replace ( missile , missile + 1 , 3 ) ;
31819: LD_ADDR_VAR 0 14
31823: PUSH
31824: LD_VAR 0 14
31828: PPUSH
31829: LD_VAR 0 14
31833: PUSH
31834: LD_INT 1
31836: PLUS
31837: PPUSH
31838: LD_INT 3
31840: PPUSH
31841: CALL_OW 1
31845: ST_TO_ADDR
// if missile < 2 then
31846: LD_VAR 0 14
31850: PUSH
31851: LD_INT 2
31853: LESS
31854: IFFALSE 31858
// exit ;
31856: GO 32080
// x := GetX ( enemy ) ;
31858: LD_ADDR_VAR 0 4
31862: PUSH
31863: LD_VAR 0 10
31867: PPUSH
31868: CALL_OW 250
31872: ST_TO_ADDR
// y := GetY ( enemy ) ;
31873: LD_ADDR_VAR 0 5
31877: PUSH
31878: LD_VAR 0 10
31882: PPUSH
31883: CALL_OW 251
31887: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31888: LD_ADDR_VAR 0 6
31892: PUSH
31893: LD_VAR 0 4
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PPUSH
31902: LD_INT 1
31904: PPUSH
31905: CALL_OW 12
31909: PLUS
31910: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31911: LD_ADDR_VAR 0 7
31915: PUSH
31916: LD_VAR 0 5
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PPUSH
31925: LD_INT 1
31927: PPUSH
31928: CALL_OW 12
31932: PLUS
31933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31934: LD_VAR 0 6
31938: PPUSH
31939: LD_VAR 0 7
31943: PPUSH
31944: CALL_OW 488
31948: NOT
31949: IFFALSE 31971
// begin _x := x ;
31951: LD_ADDR_VAR 0 6
31955: PUSH
31956: LD_VAR 0 4
31960: ST_TO_ADDR
// _y := y ;
31961: LD_ADDR_VAR 0 7
31965: PUSH
31966: LD_VAR 0 5
31970: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31971: LD_ADDR_VAR 0 3
31975: PUSH
31976: LD_INT 1
31978: PPUSH
31979: LD_VAR 0 14
31983: PPUSH
31984: CALL_OW 12
31988: ST_TO_ADDR
// case i of 1 :
31989: LD_VAR 0 3
31993: PUSH
31994: LD_INT 1
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32019
32002: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32003: LD_VAR 0 1
32007: PPUSH
32008: LD_VAR 0 10
32012: PPUSH
32013: CALL_OW 115
32017: GO 32080
32019: LD_INT 2
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32049
32027: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32028: LD_VAR 0 1
32032: PPUSH
32033: LD_VAR 0 6
32037: PPUSH
32038: LD_VAR 0 7
32042: PPUSH
32043: CALL_OW 153
32047: GO 32080
32049: LD_INT 3
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 32079
32057: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32058: LD_VAR 0 1
32062: PPUSH
32063: LD_VAR 0 6
32067: PPUSH
32068: LD_VAR 0 7
32072: PPUSH
32073: CALL_OW 154
32077: GO 32080
32079: POP
// end ;
32080: LD_VAR 0 2
32084: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
32092: PPUSH
// if not unit or not building then
32093: LD_VAR 0 1
32097: NOT
32098: PUSH
32099: LD_VAR 0 2
32103: NOT
32104: OR
32105: IFFALSE 32109
// exit ;
32107: GO 32267
// x := GetX ( building ) ;
32109: LD_ADDR_VAR 0 5
32113: PUSH
32114: LD_VAR 0 2
32118: PPUSH
32119: CALL_OW 250
32123: ST_TO_ADDR
// y := GetY ( building ) ;
32124: LD_ADDR_VAR 0 6
32128: PUSH
32129: LD_VAR 0 2
32133: PPUSH
32134: CALL_OW 251
32138: ST_TO_ADDR
// for i = 0 to 5 do
32139: LD_ADDR_VAR 0 4
32143: PUSH
32144: DOUBLE
32145: LD_INT 0
32147: DEC
32148: ST_TO_ADDR
32149: LD_INT 5
32151: PUSH
32152: FOR_TO
32153: IFFALSE 32265
// begin _x := ShiftX ( x , i , 3 ) ;
32155: LD_ADDR_VAR 0 7
32159: PUSH
32160: LD_VAR 0 5
32164: PPUSH
32165: LD_VAR 0 4
32169: PPUSH
32170: LD_INT 3
32172: PPUSH
32173: CALL_OW 272
32177: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32178: LD_ADDR_VAR 0 8
32182: PUSH
32183: LD_VAR 0 6
32187: PPUSH
32188: LD_VAR 0 4
32192: PPUSH
32193: LD_INT 3
32195: PPUSH
32196: CALL_OW 273
32200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32201: LD_VAR 0 7
32205: PPUSH
32206: LD_VAR 0 8
32210: PPUSH
32211: CALL_OW 488
32215: NOT
32216: IFFALSE 32220
// continue ;
32218: GO 32152
// if HexInfo ( _x , _y ) = 0 then
32220: LD_VAR 0 7
32224: PPUSH
32225: LD_VAR 0 8
32229: PPUSH
32230: CALL_OW 428
32234: PUSH
32235: LD_INT 0
32237: EQUAL
32238: IFFALSE 32263
// begin ComMoveXY ( unit , _x , _y ) ;
32240: LD_VAR 0 1
32244: PPUSH
32245: LD_VAR 0 7
32249: PPUSH
32250: LD_VAR 0 8
32254: PPUSH
32255: CALL_OW 111
// exit ;
32259: POP
32260: POP
32261: GO 32267
// end ; end ;
32263: GO 32152
32265: POP
32266: POP
// end ;
32267: LD_VAR 0 3
32271: RET
// export function ScanBase ( side , base_area ) ; begin
32272: LD_INT 0
32274: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_VAR 0 2
32284: PPUSH
32285: LD_INT 81
32287: PUSH
32288: LD_VAR 0 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PPUSH
32297: CALL_OW 70
32301: ST_TO_ADDR
// end ;
32302: LD_VAR 0 3
32306: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32307: LD_INT 0
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
// result := false ;
32313: LD_ADDR_VAR 0 2
32317: PUSH
32318: LD_INT 0
32320: ST_TO_ADDR
// side := GetSide ( unit ) ;
32321: LD_ADDR_VAR 0 3
32325: PUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 255
32335: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32336: LD_ADDR_VAR 0 4
32340: PUSH
32341: LD_VAR 0 1
32345: PPUSH
32346: CALL_OW 248
32350: ST_TO_ADDR
// case nat of 1 :
32351: LD_VAR 0 4
32355: PUSH
32356: LD_INT 1
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32375
32364: POP
// tech := tech_lassight ; 2 :
32365: LD_ADDR_VAR 0 5
32369: PUSH
32370: LD_INT 12
32372: ST_TO_ADDR
32373: GO 32414
32375: LD_INT 2
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32383
32381: GO 32394
32383: POP
// tech := tech_mortar ; 3 :
32384: LD_ADDR_VAR 0 5
32388: PUSH
32389: LD_INT 41
32391: ST_TO_ADDR
32392: GO 32414
32394: LD_INT 3
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32413
32402: POP
// tech := tech_bazooka ; end ;
32403: LD_ADDR_VAR 0 5
32407: PUSH
32408: LD_INT 44
32410: ST_TO_ADDR
32411: GO 32414
32413: POP
// if Researched ( side , tech ) then
32414: LD_VAR 0 3
32418: PPUSH
32419: LD_VAR 0 5
32423: PPUSH
32424: CALL_OW 325
32428: IFFALSE 32455
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_INT 5
32437: PUSH
32438: LD_INT 8
32440: PUSH
32441: LD_INT 9
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: PUSH
32449: LD_VAR 0 4
32453: ARRAY
32454: ST_TO_ADDR
// end ;
32455: LD_VAR 0 2
32459: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32460: LD_INT 0
32462: PPUSH
32463: PPUSH
32464: PPUSH
// if not mines then
32465: LD_VAR 0 2
32469: NOT
32470: IFFALSE 32474
// exit ;
32472: GO 32618
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_INT 81
32481: PUSH
32482: LD_VAR 0 1
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: LD_INT 21
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PPUSH
32512: CALL_OW 69
32516: ST_TO_ADDR
// for i in mines do
32517: LD_ADDR_VAR 0 4
32521: PUSH
32522: LD_VAR 0 2
32526: PUSH
32527: FOR_IN
32528: IFFALSE 32616
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32530: LD_VAR 0 4
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: PPUSH
32539: LD_VAR 0 4
32543: PUSH
32544: LD_INT 2
32546: ARRAY
32547: PPUSH
32548: CALL_OW 458
32552: NOT
32553: IFFALSE 32557
// continue ;
32555: GO 32527
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32557: LD_VAR 0 4
32561: PUSH
32562: LD_INT 1
32564: ARRAY
32565: PPUSH
32566: LD_VAR 0 4
32570: PUSH
32571: LD_INT 2
32573: ARRAY
32574: PPUSH
32575: CALL_OW 428
32579: PUSH
32580: LD_VAR 0 5
32584: IN
32585: IFFALSE 32614
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32587: LD_VAR 0 4
32591: PUSH
32592: LD_INT 1
32594: ARRAY
32595: PPUSH
32596: LD_VAR 0 4
32600: PUSH
32601: LD_INT 2
32603: ARRAY
32604: PPUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 456
// end ;
32614: GO 32527
32616: POP
32617: POP
// end ;
32618: LD_VAR 0 3
32622: RET
// export function Count ( array ) ; begin
32623: LD_INT 0
32625: PPUSH
// result := array + 0 ;
32626: LD_ADDR_VAR 0 2
32630: PUSH
32631: LD_VAR 0 1
32635: PUSH
32636: LD_INT 0
32638: PLUS
32639: ST_TO_ADDR
// end ;
32640: LD_VAR 0 2
32644: RET
// export function IsEmpty ( building ) ; begin
32645: LD_INT 0
32647: PPUSH
// if not building then
32648: LD_VAR 0 1
32652: NOT
32653: IFFALSE 32657
// exit ;
32655: GO 32700
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32657: LD_ADDR_VAR 0 2
32661: PUSH
32662: LD_VAR 0 1
32666: PUSH
32667: LD_INT 22
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 255
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 58
32686: PUSH
32687: EMPTY
32688: LIST
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PPUSH
32694: CALL_OW 69
32698: IN
32699: ST_TO_ADDR
// end ;
32700: LD_VAR 0 2
32704: RET
// export function IsNotFull ( building ) ; var places ; begin
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
// if not building then
32709: LD_VAR 0 1
32713: NOT
32714: IFFALSE 32718
// exit ;
32716: GO 32746
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32718: LD_ADDR_VAR 0 2
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: LD_INT 3
32730: PUSH
32731: LD_INT 62
32733: PUSH
32734: EMPTY
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PPUSH
32741: CALL_OW 72
32745: ST_TO_ADDR
// end ;
32746: LD_VAR 0 2
32750: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32751: LD_INT 0
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
// tmp := [ ] ;
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: EMPTY
32763: ST_TO_ADDR
// list := [ ] ;
32764: LD_ADDR_VAR 0 5
32768: PUSH
32769: EMPTY
32770: ST_TO_ADDR
// for i = 16 to 25 do
32771: LD_ADDR_VAR 0 4
32775: PUSH
32776: DOUBLE
32777: LD_INT 16
32779: DEC
32780: ST_TO_ADDR
32781: LD_INT 25
32783: PUSH
32784: FOR_TO
32785: IFFALSE 32858
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_VAR 0 3
32796: PUSH
32797: LD_INT 22
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 255
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 91
32816: PUSH
32817: LD_VAR 0 1
32821: PUSH
32822: LD_INT 6
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 30
32832: PUSH
32833: LD_VAR 0 4
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: PPUSH
32850: CALL_OW 69
32854: ADD
32855: ST_TO_ADDR
32856: GO 32784
32858: POP
32859: POP
// for i = 1 to tmp do
32860: LD_ADDR_VAR 0 4
32864: PUSH
32865: DOUBLE
32866: LD_INT 1
32868: DEC
32869: ST_TO_ADDR
32870: LD_VAR 0 3
32874: PUSH
32875: FOR_TO
32876: IFFALSE 32964
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32878: LD_ADDR_VAR 0 5
32882: PUSH
32883: LD_VAR 0 5
32887: PUSH
32888: LD_VAR 0 3
32892: PUSH
32893: LD_VAR 0 4
32897: ARRAY
32898: PPUSH
32899: CALL_OW 266
32903: PUSH
32904: LD_VAR 0 3
32908: PUSH
32909: LD_VAR 0 4
32913: ARRAY
32914: PPUSH
32915: CALL_OW 250
32919: PUSH
32920: LD_VAR 0 3
32924: PUSH
32925: LD_VAR 0 4
32929: ARRAY
32930: PPUSH
32931: CALL_OW 251
32935: PUSH
32936: LD_VAR 0 3
32940: PUSH
32941: LD_VAR 0 4
32945: ARRAY
32946: PPUSH
32947: CALL_OW 254
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: PUSH
32958: EMPTY
32959: LIST
32960: ADD
32961: ST_TO_ADDR
32962: GO 32875
32964: POP
32965: POP
// result := list ;
32966: LD_ADDR_VAR 0 2
32970: PUSH
32971: LD_VAR 0 5
32975: ST_TO_ADDR
// end ;
32976: LD_VAR 0 2
32980: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32981: LD_INT 0
32983: PPUSH
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
// if not factory then
32990: LD_VAR 0 1
32994: NOT
32995: IFFALSE 32999
// exit ;
32997: GO 33592
// if control = control_apeman then
32999: LD_VAR 0 4
33003: PUSH
33004: LD_INT 5
33006: EQUAL
33007: IFFALSE 33116
// begin tmp := UnitsInside ( factory ) ;
33009: LD_ADDR_VAR 0 8
33013: PUSH
33014: LD_VAR 0 1
33018: PPUSH
33019: CALL_OW 313
33023: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33024: LD_VAR 0 8
33028: PPUSH
33029: LD_INT 25
33031: PUSH
33032: LD_INT 12
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 72
33043: NOT
33044: IFFALSE 33054
// control := control_manual ;
33046: LD_ADDR_VAR 0 4
33050: PUSH
33051: LD_INT 1
33053: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33054: LD_ADDR_VAR 0 8
33058: PUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL 32751 0 1
33068: ST_TO_ADDR
// if tmp then
33069: LD_VAR 0 8
33073: IFFALSE 33116
// begin for i in tmp do
33075: LD_ADDR_VAR 0 7
33079: PUSH
33080: LD_VAR 0 8
33084: PUSH
33085: FOR_IN
33086: IFFALSE 33114
// if i [ 1 ] = b_ext_radio then
33088: LD_VAR 0 7
33092: PUSH
33093: LD_INT 1
33095: ARRAY
33096: PUSH
33097: LD_INT 22
33099: EQUAL
33100: IFFALSE 33112
// begin control := control_remote ;
33102: LD_ADDR_VAR 0 4
33106: PUSH
33107: LD_INT 2
33109: ST_TO_ADDR
// break ;
33110: GO 33114
// end ;
33112: GO 33085
33114: POP
33115: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33116: LD_VAR 0 1
33120: PPUSH
33121: LD_VAR 0 2
33125: PPUSH
33126: LD_VAR 0 3
33130: PPUSH
33131: LD_VAR 0 4
33135: PPUSH
33136: LD_VAR 0 5
33140: PPUSH
33141: CALL_OW 448
33145: IFFALSE 33180
// begin result := [ chassis , engine , control , weapon ] ;
33147: LD_ADDR_VAR 0 6
33151: PUSH
33152: LD_VAR 0 2
33156: PUSH
33157: LD_VAR 0 3
33161: PUSH
33162: LD_VAR 0 4
33166: PUSH
33167: LD_VAR 0 5
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: ST_TO_ADDR
// exit ;
33178: GO 33592
// end ; _chassis := AvailableChassisList ( factory ) ;
33180: LD_ADDR_VAR 0 9
33184: PUSH
33185: LD_VAR 0 1
33189: PPUSH
33190: CALL_OW 475
33194: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33195: LD_ADDR_VAR 0 11
33199: PUSH
33200: LD_VAR 0 1
33204: PPUSH
33205: CALL_OW 476
33209: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33210: LD_ADDR_VAR 0 12
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 477
33224: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33225: LD_ADDR_VAR 0 10
33229: PUSH
33230: LD_VAR 0 1
33234: PPUSH
33235: CALL_OW 478
33239: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33240: LD_VAR 0 9
33244: NOT
33245: PUSH
33246: LD_VAR 0 11
33250: NOT
33251: OR
33252: PUSH
33253: LD_VAR 0 12
33257: NOT
33258: OR
33259: PUSH
33260: LD_VAR 0 10
33264: NOT
33265: OR
33266: IFFALSE 33301
// begin result := [ chassis , engine , control , weapon ] ;
33268: LD_ADDR_VAR 0 6
33272: PUSH
33273: LD_VAR 0 2
33277: PUSH
33278: LD_VAR 0 3
33282: PUSH
33283: LD_VAR 0 4
33287: PUSH
33288: LD_VAR 0 5
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
// exit ;
33299: GO 33592
// end ; if not chassis in _chassis then
33301: LD_VAR 0 2
33305: PUSH
33306: LD_VAR 0 9
33310: IN
33311: NOT
33312: IFFALSE 33338
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33314: LD_ADDR_VAR 0 2
33318: PUSH
33319: LD_VAR 0 9
33323: PUSH
33324: LD_INT 1
33326: PPUSH
33327: LD_VAR 0 9
33331: PPUSH
33332: CALL_OW 12
33336: ARRAY
33337: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33338: LD_VAR 0 2
33342: PPUSH
33343: LD_VAR 0 3
33347: PPUSH
33348: CALL 33597 0 2
33352: NOT
33353: IFFALSE 33412
// repeat engine := _engine [ 1 ] ;
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_VAR 0 11
33364: PUSH
33365: LD_INT 1
33367: ARRAY
33368: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33369: LD_ADDR_VAR 0 11
33373: PUSH
33374: LD_VAR 0 11
33378: PPUSH
33379: LD_INT 1
33381: PPUSH
33382: CALL_OW 3
33386: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33387: LD_VAR 0 2
33391: PPUSH
33392: LD_VAR 0 3
33396: PPUSH
33397: CALL 33597 0 2
33401: PUSH
33402: LD_VAR 0 11
33406: PUSH
33407: EMPTY
33408: EQUAL
33409: OR
33410: IFFALSE 33355
// if not control in _control then
33412: LD_VAR 0 4
33416: PUSH
33417: LD_VAR 0 12
33421: IN
33422: NOT
33423: IFFALSE 33449
// control := _control [ rand ( 1 , _control ) ] ;
33425: LD_ADDR_VAR 0 4
33429: PUSH
33430: LD_VAR 0 12
33434: PUSH
33435: LD_INT 1
33437: PPUSH
33438: LD_VAR 0 12
33442: PPUSH
33443: CALL_OW 12
33447: ARRAY
33448: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33449: LD_VAR 0 2
33453: PPUSH
33454: LD_VAR 0 5
33458: PPUSH
33459: CALL 33817 0 2
33463: NOT
33464: IFFALSE 33523
// repeat weapon := _weapon [ 1 ] ;
33466: LD_ADDR_VAR 0 5
33470: PUSH
33471: LD_VAR 0 10
33475: PUSH
33476: LD_INT 1
33478: ARRAY
33479: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33480: LD_ADDR_VAR 0 10
33484: PUSH
33485: LD_VAR 0 10
33489: PPUSH
33490: LD_INT 1
33492: PPUSH
33493: CALL_OW 3
33497: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33498: LD_VAR 0 2
33502: PPUSH
33503: LD_VAR 0 5
33507: PPUSH
33508: CALL 33817 0 2
33512: PUSH
33513: LD_VAR 0 10
33517: PUSH
33518: EMPTY
33519: EQUAL
33520: OR
33521: IFFALSE 33466
// result := [ ] ;
33523: LD_ADDR_VAR 0 6
33527: PUSH
33528: EMPTY
33529: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33530: LD_VAR 0 1
33534: PPUSH
33535: LD_VAR 0 2
33539: PPUSH
33540: LD_VAR 0 3
33544: PPUSH
33545: LD_VAR 0 4
33549: PPUSH
33550: LD_VAR 0 5
33554: PPUSH
33555: CALL_OW 448
33559: IFFALSE 33592
// result := [ chassis , engine , control , weapon ] ;
33561: LD_ADDR_VAR 0 6
33565: PUSH
33566: LD_VAR 0 2
33570: PUSH
33571: LD_VAR 0 3
33575: PUSH
33576: LD_VAR 0 4
33580: PUSH
33581: LD_VAR 0 5
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: ST_TO_ADDR
// end ;
33592: LD_VAR 0 6
33596: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33597: LD_INT 0
33599: PPUSH
// if not chassis or not engine then
33600: LD_VAR 0 1
33604: NOT
33605: PUSH
33606: LD_VAR 0 2
33610: NOT
33611: OR
33612: IFFALSE 33616
// exit ;
33614: GO 33812
// case engine of engine_solar :
33616: LD_VAR 0 2
33620: PUSH
33621: LD_INT 2
33623: DOUBLE
33624: EQUAL
33625: IFTRUE 33629
33627: GO 33667
33629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 11
33637: PUSH
33638: LD_INT 12
33640: PUSH
33641: LD_INT 13
33643: PUSH
33644: LD_INT 14
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 33796
33667: LD_INT 1
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33737
33675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 11
33683: PUSH
33684: LD_INT 12
33686: PUSH
33687: LD_INT 13
33689: PUSH
33690: LD_INT 14
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: LD_INT 4
33704: PUSH
33705: LD_INT 5
33707: PUSH
33708: LD_INT 21
33710: PUSH
33711: LD_INT 23
33713: PUSH
33714: LD_INT 22
33716: PUSH
33717: LD_INT 24
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
33735: GO 33796
33737: LD_INT 3
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33795
33745: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_INT 13
33753: PUSH
33754: LD_INT 14
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: LD_INT 4
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: LD_INT 21
33771: PUSH
33772: LD_INT 22
33774: PUSH
33775: LD_INT 23
33777: PUSH
33778: LD_INT 24
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 33796
33795: POP
// result := ( chassis in result ) ;
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_VAR 0 1
33805: PUSH
33806: LD_VAR 0 3
33810: IN
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 3
33816: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33817: LD_INT 0
33819: PPUSH
// if not chassis or not weapon then
33820: LD_VAR 0 1
33824: NOT
33825: PUSH
33826: LD_VAR 0 2
33830: NOT
33831: OR
33832: IFFALSE 33836
// exit ;
33834: GO 34896
// case weapon of us_machine_gun :
33836: LD_VAR 0 2
33840: PUSH
33841: LD_INT 2
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33879
33849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 3
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
33877: GO 34880
33879: LD_INT 3
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33887
33885: GO 33917
33887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33888: LD_ADDR_VAR 0 3
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 4
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: ST_TO_ADDR
33915: GO 34880
33917: LD_INT 11
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33925
33923: GO 33955
33925: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33926: LD_ADDR_VAR 0 3
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: LD_INT 4
33942: PUSH
33943: LD_INT 5
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: ST_TO_ADDR
33953: GO 34880
33955: LD_INT 4
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33963
33961: GO 33989
33963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33964: LD_ADDR_VAR 0 3
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 3
33974: PUSH
33975: LD_INT 4
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: ST_TO_ADDR
33987: GO 34880
33989: LD_INT 5
33991: DOUBLE
33992: EQUAL
33993: IFTRUE 33997
33995: GO 34023
33997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33998: LD_ADDR_VAR 0 3
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
34021: GO 34880
34023: LD_INT 9
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34031
34029: GO 34057
34031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: LD_INT 3
34042: PUSH
34043: LD_INT 4
34045: PUSH
34046: LD_INT 5
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
34055: GO 34880
34057: LD_INT 7
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34091
34065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 3
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
34089: GO 34880
34091: LD_INT 12
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34125
34099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34100: LD_ADDR_VAR 0 3
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: LD_INT 4
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
34123: GO 34880
34125: LD_INT 13
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34133
34131: GO 34159
34133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34134: LD_ADDR_VAR 0 3
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 3
34144: PUSH
34145: LD_INT 4
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
34157: GO 34880
34159: LD_INT 14
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34167
34165: GO 34185
34167: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34168: LD_ADDR_VAR 0 3
34172: PUSH
34173: LD_INT 4
34175: PUSH
34176: LD_INT 5
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: ST_TO_ADDR
34183: GO 34880
34185: LD_INT 6
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34211
34193: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 4
34201: PUSH
34202: LD_INT 5
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: ST_TO_ADDR
34209: GO 34880
34211: LD_INT 10
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34219
34217: GO 34237
34219: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34220: LD_ADDR_VAR 0 3
34224: PUSH
34225: LD_INT 4
34227: PUSH
34228: LD_INT 5
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: ST_TO_ADDR
34235: GO 34880
34237: LD_INT 22
34239: DOUBLE
34240: EQUAL
34241: IFTRUE 34245
34243: GO 34271
34245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34246: LD_ADDR_VAR 0 3
34250: PUSH
34251: LD_INT 11
34253: PUSH
34254: LD_INT 12
34256: PUSH
34257: LD_INT 13
34259: PUSH
34260: LD_INT 14
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: ST_TO_ADDR
34269: GO 34880
34271: LD_INT 23
34273: DOUBLE
34274: EQUAL
34275: IFTRUE 34279
34277: GO 34305
34279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34280: LD_ADDR_VAR 0 3
34284: PUSH
34285: LD_INT 11
34287: PUSH
34288: LD_INT 12
34290: PUSH
34291: LD_INT 13
34293: PUSH
34294: LD_INT 14
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: ST_TO_ADDR
34303: GO 34880
34305: LD_INT 24
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34339
34313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34314: LD_ADDR_VAR 0 3
34318: PUSH
34319: LD_INT 11
34321: PUSH
34322: LD_INT 12
34324: PUSH
34325: LD_INT 13
34327: PUSH
34328: LD_INT 14
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: ST_TO_ADDR
34337: GO 34880
34339: LD_INT 30
34341: DOUBLE
34342: EQUAL
34343: IFTRUE 34347
34345: GO 34373
34347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34348: LD_ADDR_VAR 0 3
34352: PUSH
34353: LD_INT 11
34355: PUSH
34356: LD_INT 12
34358: PUSH
34359: LD_INT 13
34361: PUSH
34362: LD_INT 14
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: ST_TO_ADDR
34371: GO 34880
34373: LD_INT 25
34375: DOUBLE
34376: EQUAL
34377: IFTRUE 34381
34379: GO 34399
34381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34382: LD_ADDR_VAR 0 3
34386: PUSH
34387: LD_INT 13
34389: PUSH
34390: LD_INT 14
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: ST_TO_ADDR
34397: GO 34880
34399: LD_INT 27
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34425
34407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: LD_INT 13
34415: PUSH
34416: LD_INT 14
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: ST_TO_ADDR
34423: GO 34880
34425: LD_INT 92
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34433
34431: GO 34459
34433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34434: LD_ADDR_VAR 0 3
34438: PUSH
34439: LD_INT 11
34441: PUSH
34442: LD_INT 12
34444: PUSH
34445: LD_INT 13
34447: PUSH
34448: LD_INT 14
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
34457: GO 34880
34459: LD_INT 28
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34485
34467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34468: LD_ADDR_VAR 0 3
34472: PUSH
34473: LD_INT 13
34475: PUSH
34476: LD_INT 14
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: ST_TO_ADDR
34483: GO 34880
34485: LD_INT 29
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34511
34493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34494: LD_ADDR_VAR 0 3
34498: PUSH
34499: LD_INT 13
34501: PUSH
34502: LD_INT 14
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 34880
34511: LD_INT 31
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34537
34519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34520: LD_ADDR_VAR 0 3
34524: PUSH
34525: LD_INT 13
34527: PUSH
34528: LD_INT 14
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: ST_TO_ADDR
34535: GO 34880
34537: LD_INT 26
34539: DOUBLE
34540: EQUAL
34541: IFTRUE 34545
34543: GO 34563
34545: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34546: LD_ADDR_VAR 0 3
34550: PUSH
34551: LD_INT 13
34553: PUSH
34554: LD_INT 14
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: ST_TO_ADDR
34561: GO 34880
34563: LD_INT 42
34565: DOUBLE
34566: EQUAL
34567: IFTRUE 34571
34569: GO 34597
34571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34572: LD_ADDR_VAR 0 3
34576: PUSH
34577: LD_INT 21
34579: PUSH
34580: LD_INT 22
34582: PUSH
34583: LD_INT 23
34585: PUSH
34586: LD_INT 24
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: ST_TO_ADDR
34595: GO 34880
34597: LD_INT 43
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34605
34603: GO 34631
34605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: LD_INT 21
34613: PUSH
34614: LD_INT 22
34616: PUSH
34617: LD_INT 23
34619: PUSH
34620: LD_INT 24
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: ST_TO_ADDR
34629: GO 34880
34631: LD_INT 44
34633: DOUBLE
34634: EQUAL
34635: IFTRUE 34639
34637: GO 34665
34639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34640: LD_ADDR_VAR 0 3
34644: PUSH
34645: LD_INT 21
34647: PUSH
34648: LD_INT 22
34650: PUSH
34651: LD_INT 23
34653: PUSH
34654: LD_INT 24
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: ST_TO_ADDR
34663: GO 34880
34665: LD_INT 45
34667: DOUBLE
34668: EQUAL
34669: IFTRUE 34673
34671: GO 34699
34673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34674: LD_ADDR_VAR 0 3
34678: PUSH
34679: LD_INT 21
34681: PUSH
34682: LD_INT 22
34684: PUSH
34685: LD_INT 23
34687: PUSH
34688: LD_INT 24
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: ST_TO_ADDR
34697: GO 34880
34699: LD_INT 49
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34733
34707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_INT 21
34715: PUSH
34716: LD_INT 22
34718: PUSH
34719: LD_INT 23
34721: PUSH
34722: LD_INT 24
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: ST_TO_ADDR
34731: GO 34880
34733: LD_INT 51
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34741
34739: GO 34767
34741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: LD_INT 21
34749: PUSH
34750: LD_INT 22
34752: PUSH
34753: LD_INT 23
34755: PUSH
34756: LD_INT 24
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
34765: GO 34880
34767: LD_INT 52
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34801
34775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_INT 21
34783: PUSH
34784: LD_INT 22
34786: PUSH
34787: LD_INT 23
34789: PUSH
34790: LD_INT 24
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: ST_TO_ADDR
34799: GO 34880
34801: LD_INT 53
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34809
34807: GO 34827
34809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34810: LD_ADDR_VAR 0 3
34814: PUSH
34815: LD_INT 23
34817: PUSH
34818: LD_INT 24
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: ST_TO_ADDR
34825: GO 34880
34827: LD_INT 46
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34835
34833: GO 34853
34835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34836: LD_ADDR_VAR 0 3
34840: PUSH
34841: LD_INT 23
34843: PUSH
34844: LD_INT 24
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: ST_TO_ADDR
34851: GO 34880
34853: LD_INT 47
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 34879
34861: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34862: LD_ADDR_VAR 0 3
34866: PUSH
34867: LD_INT 23
34869: PUSH
34870: LD_INT 24
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: ST_TO_ADDR
34877: GO 34880
34879: POP
// result := ( chassis in result ) ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 1
34889: PUSH
34890: LD_VAR 0 3
34894: IN
34895: ST_TO_ADDR
// end ;
34896: LD_VAR 0 3
34900: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34901: LD_INT 0
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
// result := array ;
34910: LD_ADDR_VAR 0 5
34914: PUSH
34915: LD_VAR 0 1
34919: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34920: LD_VAR 0 1
34924: NOT
34925: PUSH
34926: LD_VAR 0 2
34930: NOT
34931: OR
34932: PUSH
34933: LD_VAR 0 3
34937: NOT
34938: OR
34939: PUSH
34940: LD_VAR 0 2
34944: PUSH
34945: LD_VAR 0 1
34949: GREATER
34950: OR
34951: PUSH
34952: LD_VAR 0 3
34956: PUSH
34957: LD_VAR 0 1
34961: GREATER
34962: OR
34963: IFFALSE 34967
// exit ;
34965: GO 35263
// if direction then
34967: LD_VAR 0 4
34971: IFFALSE 35035
// begin d := 1 ;
34973: LD_ADDR_VAR 0 9
34977: PUSH
34978: LD_INT 1
34980: ST_TO_ADDR
// if i_from > i_to then
34981: LD_VAR 0 2
34985: PUSH
34986: LD_VAR 0 3
34990: GREATER
34991: IFFALSE 35017
// length := ( array - i_from ) + i_to else
34993: LD_ADDR_VAR 0 11
34997: PUSH
34998: LD_VAR 0 1
35002: PUSH
35003: LD_VAR 0 2
35007: MINUS
35008: PUSH
35009: LD_VAR 0 3
35013: PLUS
35014: ST_TO_ADDR
35015: GO 35033
// length := i_to - i_from ;
35017: LD_ADDR_VAR 0 11
35021: PUSH
35022: LD_VAR 0 3
35026: PUSH
35027: LD_VAR 0 2
35031: MINUS
35032: ST_TO_ADDR
// end else
35033: GO 35096
// begin d := - 1 ;
35035: LD_ADDR_VAR 0 9
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: ST_TO_ADDR
// if i_from > i_to then
35044: LD_VAR 0 2
35048: PUSH
35049: LD_VAR 0 3
35053: GREATER
35054: IFFALSE 35074
// length := i_from - i_to else
35056: LD_ADDR_VAR 0 11
35060: PUSH
35061: LD_VAR 0 2
35065: PUSH
35066: LD_VAR 0 3
35070: MINUS
35071: ST_TO_ADDR
35072: GO 35096
// length := ( array - i_to ) + i_from ;
35074: LD_ADDR_VAR 0 11
35078: PUSH
35079: LD_VAR 0 1
35083: PUSH
35084: LD_VAR 0 3
35088: MINUS
35089: PUSH
35090: LD_VAR 0 2
35094: PLUS
35095: ST_TO_ADDR
// end ; if not length then
35096: LD_VAR 0 11
35100: NOT
35101: IFFALSE 35105
// exit ;
35103: GO 35263
// tmp := array ;
35105: LD_ADDR_VAR 0 10
35109: PUSH
35110: LD_VAR 0 1
35114: ST_TO_ADDR
// for i = 1 to length do
35115: LD_ADDR_VAR 0 6
35119: PUSH
35120: DOUBLE
35121: LD_INT 1
35123: DEC
35124: ST_TO_ADDR
35125: LD_VAR 0 11
35129: PUSH
35130: FOR_TO
35131: IFFALSE 35251
// begin for j = 1 to array do
35133: LD_ADDR_VAR 0 7
35137: PUSH
35138: DOUBLE
35139: LD_INT 1
35141: DEC
35142: ST_TO_ADDR
35143: LD_VAR 0 1
35147: PUSH
35148: FOR_TO
35149: IFFALSE 35237
// begin k := j + d ;
35151: LD_ADDR_VAR 0 8
35155: PUSH
35156: LD_VAR 0 7
35160: PUSH
35161: LD_VAR 0 9
35165: PLUS
35166: ST_TO_ADDR
// if k > array then
35167: LD_VAR 0 8
35171: PUSH
35172: LD_VAR 0 1
35176: GREATER
35177: IFFALSE 35187
// k := 1 ;
35179: LD_ADDR_VAR 0 8
35183: PUSH
35184: LD_INT 1
35186: ST_TO_ADDR
// if not k then
35187: LD_VAR 0 8
35191: NOT
35192: IFFALSE 35204
// k := array ;
35194: LD_ADDR_VAR 0 8
35198: PUSH
35199: LD_VAR 0 1
35203: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35204: LD_ADDR_VAR 0 10
35208: PUSH
35209: LD_VAR 0 10
35213: PPUSH
35214: LD_VAR 0 8
35218: PPUSH
35219: LD_VAR 0 1
35223: PUSH
35224: LD_VAR 0 7
35228: ARRAY
35229: PPUSH
35230: CALL_OW 1
35234: ST_TO_ADDR
// end ;
35235: GO 35148
35237: POP
35238: POP
// array := tmp ;
35239: LD_ADDR_VAR 0 1
35243: PUSH
35244: LD_VAR 0 10
35248: ST_TO_ADDR
// end ;
35249: GO 35130
35251: POP
35252: POP
// result := array ;
35253: LD_ADDR_VAR 0 5
35257: PUSH
35258: LD_VAR 0 1
35262: ST_TO_ADDR
// end ;
35263: LD_VAR 0 5
35267: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35268: LD_INT 0
35270: PPUSH
35271: PPUSH
// result := 0 ;
35272: LD_ADDR_VAR 0 3
35276: PUSH
35277: LD_INT 0
35279: ST_TO_ADDR
// if not array or not value in array then
35280: LD_VAR 0 1
35284: NOT
35285: PUSH
35286: LD_VAR 0 2
35290: PUSH
35291: LD_VAR 0 1
35295: IN
35296: NOT
35297: OR
35298: IFFALSE 35302
// exit ;
35300: GO 35356
// for i = 1 to array do
35302: LD_ADDR_VAR 0 4
35306: PUSH
35307: DOUBLE
35308: LD_INT 1
35310: DEC
35311: ST_TO_ADDR
35312: LD_VAR 0 1
35316: PUSH
35317: FOR_TO
35318: IFFALSE 35354
// if value = array [ i ] then
35320: LD_VAR 0 2
35324: PUSH
35325: LD_VAR 0 1
35329: PUSH
35330: LD_VAR 0 4
35334: ARRAY
35335: EQUAL
35336: IFFALSE 35352
// begin result := i ;
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: LD_VAR 0 4
35347: ST_TO_ADDR
// exit ;
35348: POP
35349: POP
35350: GO 35356
// end ;
35352: GO 35317
35354: POP
35355: POP
// end ;
35356: LD_VAR 0 3
35360: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35361: LD_INT 0
35363: PPUSH
// vc_chassis := chassis ;
35364: LD_ADDR_OWVAR 37
35368: PUSH
35369: LD_VAR 0 1
35373: ST_TO_ADDR
// vc_engine := engine ;
35374: LD_ADDR_OWVAR 39
35378: PUSH
35379: LD_VAR 0 2
35383: ST_TO_ADDR
// vc_control := control ;
35384: LD_ADDR_OWVAR 38
35388: PUSH
35389: LD_VAR 0 3
35393: ST_TO_ADDR
// vc_weapon := weapon ;
35394: LD_ADDR_OWVAR 40
35398: PUSH
35399: LD_VAR 0 4
35403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35404: LD_ADDR_OWVAR 41
35408: PUSH
35409: LD_VAR 0 5
35413: ST_TO_ADDR
// end ;
35414: LD_VAR 0 6
35418: RET
// export function WantPlant ( unit ) ; var task ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
// result := false ;
35423: LD_ADDR_VAR 0 2
35427: PUSH
35428: LD_INT 0
35430: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35431: LD_ADDR_VAR 0 3
35435: PUSH
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 437
35445: ST_TO_ADDR
// if task then
35446: LD_VAR 0 3
35450: IFFALSE 35478
// if task [ 1 ] [ 1 ] = p then
35452: LD_VAR 0 3
35456: PUSH
35457: LD_INT 1
35459: ARRAY
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PUSH
35465: LD_STRING p
35467: EQUAL
35468: IFFALSE 35478
// result := true ;
35470: LD_ADDR_VAR 0 2
35474: PUSH
35475: LD_INT 1
35477: ST_TO_ADDR
// end ;
35478: LD_VAR 0 2
35482: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35483: LD_INT 0
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
// if pos < 1 then
35489: LD_VAR 0 2
35493: PUSH
35494: LD_INT 1
35496: LESS
35497: IFFALSE 35501
// exit ;
35499: GO 35804
// if pos = 1 then
35501: LD_VAR 0 2
35505: PUSH
35506: LD_INT 1
35508: EQUAL
35509: IFFALSE 35542
// result := Replace ( arr , pos [ 1 ] , value ) else
35511: LD_ADDR_VAR 0 4
35515: PUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: LD_VAR 0 2
35525: PUSH
35526: LD_INT 1
35528: ARRAY
35529: PPUSH
35530: LD_VAR 0 3
35534: PPUSH
35535: CALL_OW 1
35539: ST_TO_ADDR
35540: GO 35804
// begin tmp := arr ;
35542: LD_ADDR_VAR 0 6
35546: PUSH
35547: LD_VAR 0 1
35551: ST_TO_ADDR
// s_arr := [ tmp ] ;
35552: LD_ADDR_VAR 0 7
35556: PUSH
35557: LD_VAR 0 6
35561: PUSH
35562: EMPTY
35563: LIST
35564: ST_TO_ADDR
// for i = 1 to pos - 1 do
35565: LD_ADDR_VAR 0 5
35569: PUSH
35570: DOUBLE
35571: LD_INT 1
35573: DEC
35574: ST_TO_ADDR
35575: LD_VAR 0 2
35579: PUSH
35580: LD_INT 1
35582: MINUS
35583: PUSH
35584: FOR_TO
35585: IFFALSE 35630
// begin tmp := tmp [ pos [ i ] ] ;
35587: LD_ADDR_VAR 0 6
35591: PUSH
35592: LD_VAR 0 6
35596: PUSH
35597: LD_VAR 0 2
35601: PUSH
35602: LD_VAR 0 5
35606: ARRAY
35607: ARRAY
35608: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35609: LD_ADDR_VAR 0 7
35613: PUSH
35614: LD_VAR 0 7
35618: PUSH
35619: LD_VAR 0 6
35623: PUSH
35624: EMPTY
35625: LIST
35626: ADD
35627: ST_TO_ADDR
// end ;
35628: GO 35584
35630: POP
35631: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35632: LD_ADDR_VAR 0 6
35636: PUSH
35637: LD_VAR 0 6
35641: PPUSH
35642: LD_VAR 0 2
35646: PUSH
35647: LD_VAR 0 2
35651: ARRAY
35652: PPUSH
35653: LD_VAR 0 3
35657: PPUSH
35658: CALL_OW 1
35662: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35663: LD_ADDR_VAR 0 7
35667: PUSH
35668: LD_VAR 0 7
35672: PPUSH
35673: LD_VAR 0 7
35677: PPUSH
35678: LD_VAR 0 6
35682: PPUSH
35683: CALL_OW 1
35687: ST_TO_ADDR
// for i = s_arr downto 2 do
35688: LD_ADDR_VAR 0 5
35692: PUSH
35693: DOUBLE
35694: LD_VAR 0 7
35698: INC
35699: ST_TO_ADDR
35700: LD_INT 2
35702: PUSH
35703: FOR_DOWNTO
35704: IFFALSE 35788
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35706: LD_ADDR_VAR 0 6
35710: PUSH
35711: LD_VAR 0 7
35715: PUSH
35716: LD_VAR 0 5
35720: PUSH
35721: LD_INT 1
35723: MINUS
35724: ARRAY
35725: PPUSH
35726: LD_VAR 0 2
35730: PUSH
35731: LD_VAR 0 5
35735: PUSH
35736: LD_INT 1
35738: MINUS
35739: ARRAY
35740: PPUSH
35741: LD_VAR 0 7
35745: PUSH
35746: LD_VAR 0 5
35750: ARRAY
35751: PPUSH
35752: CALL_OW 1
35756: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35757: LD_ADDR_VAR 0 7
35761: PUSH
35762: LD_VAR 0 7
35766: PPUSH
35767: LD_VAR 0 5
35771: PUSH
35772: LD_INT 1
35774: MINUS
35775: PPUSH
35776: LD_VAR 0 6
35780: PPUSH
35781: CALL_OW 1
35785: ST_TO_ADDR
// end ;
35786: GO 35703
35788: POP
35789: POP
// result := s_arr [ 1 ] ;
35790: LD_ADDR_VAR 0 4
35794: PUSH
35795: LD_VAR 0 7
35799: PUSH
35800: LD_INT 1
35802: ARRAY
35803: ST_TO_ADDR
// end ; end ;
35804: LD_VAR 0 4
35808: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35809: LD_INT 0
35811: PPUSH
35812: PPUSH
// if not list then
35813: LD_VAR 0 1
35817: NOT
35818: IFFALSE 35822
// exit ;
35820: GO 35913
// i := list [ pos1 ] ;
35822: LD_ADDR_VAR 0 5
35826: PUSH
35827: LD_VAR 0 1
35831: PUSH
35832: LD_VAR 0 2
35836: ARRAY
35837: ST_TO_ADDR
// if not i then
35838: LD_VAR 0 5
35842: NOT
35843: IFFALSE 35847
// exit ;
35845: GO 35913
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35847: LD_ADDR_VAR 0 1
35851: PUSH
35852: LD_VAR 0 1
35856: PPUSH
35857: LD_VAR 0 2
35861: PPUSH
35862: LD_VAR 0 1
35866: PUSH
35867: LD_VAR 0 3
35871: ARRAY
35872: PPUSH
35873: CALL_OW 1
35877: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35878: LD_ADDR_VAR 0 1
35882: PUSH
35883: LD_VAR 0 1
35887: PPUSH
35888: LD_VAR 0 3
35892: PPUSH
35893: LD_VAR 0 5
35897: PPUSH
35898: CALL_OW 1
35902: ST_TO_ADDR
// result := list ;
35903: LD_ADDR_VAR 0 4
35907: PUSH
35908: LD_VAR 0 1
35912: ST_TO_ADDR
// end ;
35913: LD_VAR 0 4
35917: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35918: LD_INT 0
35920: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35921: LD_ADDR_VAR 0 5
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: CALL_OW 250
35935: PPUSH
35936: LD_VAR 0 1
35940: PPUSH
35941: CALL_OW 251
35945: PPUSH
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 3
35955: PPUSH
35956: LD_VAR 0 4
35960: PPUSH
35961: CALL 36339 0 5
35965: ST_TO_ADDR
// end ;
35966: LD_VAR 0 5
35970: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35971: LD_INT 0
35973: PPUSH
35974: PPUSH
35975: PPUSH
35976: PPUSH
// if not list or not unit then
35977: LD_VAR 0 2
35981: NOT
35982: PUSH
35983: LD_VAR 0 1
35987: NOT
35988: OR
35989: IFFALSE 35993
// exit ;
35991: GO 36334
// result := [ ] ;
35993: LD_ADDR_VAR 0 5
35997: PUSH
35998: EMPTY
35999: ST_TO_ADDR
// for i in list do
36000: LD_ADDR_VAR 0 6
36004: PUSH
36005: LD_VAR 0 2
36009: PUSH
36010: FOR_IN
36011: IFFALSE 36229
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36013: LD_ADDR_VAR 0 8
36017: PUSH
36018: LD_VAR 0 1
36022: PPUSH
36023: LD_VAR 0 6
36027: PUSH
36028: LD_INT 1
36030: ARRAY
36031: PPUSH
36032: LD_VAR 0 6
36036: PUSH
36037: LD_INT 2
36039: ARRAY
36040: PPUSH
36041: CALL_OW 297
36045: ST_TO_ADDR
// if not Count ( result ) then
36046: LD_VAR 0 5
36050: PPUSH
36051: CALL 32623 0 1
36055: NOT
36056: IFFALSE 36089
// begin result := Join ( result , [ i , tmp ] ) ;
36058: LD_ADDR_VAR 0 5
36062: PUSH
36063: LD_VAR 0 5
36067: PPUSH
36068: LD_VAR 0 6
36072: PUSH
36073: LD_VAR 0 8
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PPUSH
36082: CALL 68223 0 2
36086: ST_TO_ADDR
// continue ;
36087: GO 36010
// end ; if result [ result ] [ 2 ] <= tmp then
36089: LD_VAR 0 5
36093: PUSH
36094: LD_VAR 0 5
36098: ARRAY
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PUSH
36104: LD_VAR 0 8
36108: LESSEQUAL
36109: IFFALSE 36142
// result := Join ( result , [ i , tmp ] ) else
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_VAR 0 5
36120: PPUSH
36121: LD_VAR 0 6
36125: PUSH
36126: LD_VAR 0 8
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PPUSH
36135: CALL 68223 0 2
36139: ST_TO_ADDR
36140: GO 36227
// begin for j := 1 to Count ( result ) do
36142: LD_ADDR_VAR 0 7
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_VAR 0 5
36156: PPUSH
36157: CALL 32623 0 1
36161: PUSH
36162: FOR_TO
36163: IFFALSE 36225
// begin if tmp < result [ j ] [ 2 ] then
36165: LD_VAR 0 8
36169: PUSH
36170: LD_VAR 0 5
36174: PUSH
36175: LD_VAR 0 7
36179: ARRAY
36180: PUSH
36181: LD_INT 2
36183: ARRAY
36184: LESS
36185: IFFALSE 36223
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36187: LD_ADDR_VAR 0 5
36191: PUSH
36192: LD_VAR 0 5
36196: PPUSH
36197: LD_VAR 0 7
36201: PPUSH
36202: LD_VAR 0 6
36206: PUSH
36207: LD_VAR 0 8
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PPUSH
36216: CALL_OW 2
36220: ST_TO_ADDR
// break ;
36221: GO 36225
// end ; end ;
36223: GO 36162
36225: POP
36226: POP
// end ; end ;
36227: GO 36010
36229: POP
36230: POP
// if result and not asc then
36231: LD_VAR 0 5
36235: PUSH
36236: LD_VAR 0 3
36240: NOT
36241: AND
36242: IFFALSE 36259
// result := ReverseArray ( result ) ;
36244: LD_ADDR_VAR 0 5
36248: PUSH
36249: LD_VAR 0 5
36253: PPUSH
36254: CALL 63499 0 1
36258: ST_TO_ADDR
// tmp := [ ] ;
36259: LD_ADDR_VAR 0 8
36263: PUSH
36264: EMPTY
36265: ST_TO_ADDR
// if mode then
36266: LD_VAR 0 4
36270: IFFALSE 36334
// begin for i := 1 to result do
36272: LD_ADDR_VAR 0 6
36276: PUSH
36277: DOUBLE
36278: LD_INT 1
36280: DEC
36281: ST_TO_ADDR
36282: LD_VAR 0 5
36286: PUSH
36287: FOR_TO
36288: IFFALSE 36322
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36290: LD_ADDR_VAR 0 8
36294: PUSH
36295: LD_VAR 0 8
36299: PPUSH
36300: LD_VAR 0 5
36304: PUSH
36305: LD_VAR 0 6
36309: ARRAY
36310: PUSH
36311: LD_INT 1
36313: ARRAY
36314: PPUSH
36315: CALL 68223 0 2
36319: ST_TO_ADDR
36320: GO 36287
36322: POP
36323: POP
// result := tmp ;
36324: LD_ADDR_VAR 0 5
36328: PUSH
36329: LD_VAR 0 8
36333: ST_TO_ADDR
// end ; end ;
36334: LD_VAR 0 5
36338: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36339: LD_INT 0
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
// if not list then
36345: LD_VAR 0 3
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 36742
// result := [ ] ;
36354: LD_ADDR_VAR 0 6
36358: PUSH
36359: EMPTY
36360: ST_TO_ADDR
// for i in list do
36361: LD_ADDR_VAR 0 7
36365: PUSH
36366: LD_VAR 0 3
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36574
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: LD_VAR 0 7
36383: PPUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: LD_VAR 0 2
36393: PPUSH
36394: CALL_OW 297
36398: ST_TO_ADDR
// if not result then
36399: LD_VAR 0 6
36403: NOT
36404: IFFALSE 36430
// result := [ [ i , tmp ] ] else
36406: LD_ADDR_VAR 0 6
36410: PUSH
36411: LD_VAR 0 7
36415: PUSH
36416: LD_VAR 0 9
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: EMPTY
36426: LIST
36427: ST_TO_ADDR
36428: GO 36572
// begin if result [ result ] [ 2 ] < tmp then
36430: LD_VAR 0 6
36434: PUSH
36435: LD_VAR 0 6
36439: ARRAY
36440: PUSH
36441: LD_INT 2
36443: ARRAY
36444: PUSH
36445: LD_VAR 0 9
36449: LESS
36450: IFFALSE 36492
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36452: LD_ADDR_VAR 0 6
36456: PUSH
36457: LD_VAR 0 6
36461: PPUSH
36462: LD_VAR 0 6
36466: PUSH
36467: LD_INT 1
36469: PLUS
36470: PPUSH
36471: LD_VAR 0 7
36475: PUSH
36476: LD_VAR 0 9
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PPUSH
36485: CALL_OW 2
36489: ST_TO_ADDR
36490: GO 36572
// for j = 1 to result do
36492: LD_ADDR_VAR 0 8
36496: PUSH
36497: DOUBLE
36498: LD_INT 1
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 6
36506: PUSH
36507: FOR_TO
36508: IFFALSE 36570
// begin if tmp < result [ j ] [ 2 ] then
36510: LD_VAR 0 9
36514: PUSH
36515: LD_VAR 0 6
36519: PUSH
36520: LD_VAR 0 8
36524: ARRAY
36525: PUSH
36526: LD_INT 2
36528: ARRAY
36529: LESS
36530: IFFALSE 36568
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36532: LD_ADDR_VAR 0 6
36536: PUSH
36537: LD_VAR 0 6
36541: PPUSH
36542: LD_VAR 0 8
36546: PPUSH
36547: LD_VAR 0 7
36551: PUSH
36552: LD_VAR 0 9
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PPUSH
36561: CALL_OW 2
36565: ST_TO_ADDR
// break ;
36566: GO 36570
// end ; end ;
36568: GO 36507
36570: POP
36571: POP
// end ; end ;
36572: GO 36371
36574: POP
36575: POP
// if result and not asc then
36576: LD_VAR 0 6
36580: PUSH
36581: LD_VAR 0 4
36585: NOT
36586: AND
36587: IFFALSE 36662
// begin tmp := result ;
36589: LD_ADDR_VAR 0 9
36593: PUSH
36594: LD_VAR 0 6
36598: ST_TO_ADDR
// for i = tmp downto 1 do
36599: LD_ADDR_VAR 0 7
36603: PUSH
36604: DOUBLE
36605: LD_VAR 0 9
36609: INC
36610: ST_TO_ADDR
36611: LD_INT 1
36613: PUSH
36614: FOR_DOWNTO
36615: IFFALSE 36660
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36617: LD_ADDR_VAR 0 6
36621: PUSH
36622: LD_VAR 0 6
36626: PPUSH
36627: LD_VAR 0 9
36631: PUSH
36632: LD_VAR 0 7
36636: MINUS
36637: PUSH
36638: LD_INT 1
36640: PLUS
36641: PPUSH
36642: LD_VAR 0 9
36646: PUSH
36647: LD_VAR 0 7
36651: ARRAY
36652: PPUSH
36653: CALL_OW 1
36657: ST_TO_ADDR
36658: GO 36614
36660: POP
36661: POP
// end ; tmp := [ ] ;
36662: LD_ADDR_VAR 0 9
36666: PUSH
36667: EMPTY
36668: ST_TO_ADDR
// if mode then
36669: LD_VAR 0 5
36673: IFFALSE 36742
// begin for i = 1 to result do
36675: LD_ADDR_VAR 0 7
36679: PUSH
36680: DOUBLE
36681: LD_INT 1
36683: DEC
36684: ST_TO_ADDR
36685: LD_VAR 0 6
36689: PUSH
36690: FOR_TO
36691: IFFALSE 36730
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36693: LD_ADDR_VAR 0 9
36697: PUSH
36698: LD_VAR 0 9
36702: PPUSH
36703: LD_VAR 0 7
36707: PPUSH
36708: LD_VAR 0 6
36712: PUSH
36713: LD_VAR 0 7
36717: ARRAY
36718: PUSH
36719: LD_INT 1
36721: ARRAY
36722: PPUSH
36723: CALL_OW 1
36727: ST_TO_ADDR
36728: GO 36690
36730: POP
36731: POP
// result := tmp ;
36732: LD_ADDR_VAR 0 6
36736: PUSH
36737: LD_VAR 0 9
36741: ST_TO_ADDR
// end ; end ;
36742: LD_VAR 0 6
36746: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36747: LD_INT 0
36749: PPUSH
36750: PPUSH
36751: PPUSH
36752: PPUSH
36753: PPUSH
36754: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36755: LD_ADDR_VAR 0 5
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: ST_TO_ADDR
// if not x or not y then
36777: LD_VAR 0 2
36781: NOT
36782: PUSH
36783: LD_VAR 0 3
36787: NOT
36788: OR
36789: IFFALSE 36793
// exit ;
36791: GO 38443
// if not range then
36793: LD_VAR 0 4
36797: NOT
36798: IFFALSE 36808
// range := 10 ;
36800: LD_ADDR_VAR 0 4
36804: PUSH
36805: LD_INT 10
36807: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36808: LD_ADDR_VAR 0 8
36812: PUSH
36813: LD_INT 81
36815: PUSH
36816: LD_VAR 0 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 92
36827: PUSH
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 3
36837: PUSH
36838: LD_VAR 0 4
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: LD_INT 21
36854: PUSH
36855: LD_INT 3
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: PPUSH
36871: CALL_OW 69
36875: ST_TO_ADDR
// if not tmp then
36876: LD_VAR 0 8
36880: NOT
36881: IFFALSE 36885
// exit ;
36883: GO 38443
// for i in tmp do
36885: LD_ADDR_VAR 0 6
36889: PUSH
36890: LD_VAR 0 8
36894: PUSH
36895: FOR_IN
36896: IFFALSE 38418
// begin points := [ 0 , 0 , 0 ] ;
36898: LD_ADDR_VAR 0 9
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: ST_TO_ADDR
// bpoints := 1 ;
36917: LD_ADDR_VAR 0 10
36921: PUSH
36922: LD_INT 1
36924: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36925: LD_VAR 0 6
36929: PPUSH
36930: CALL_OW 247
36934: PUSH
36935: LD_INT 1
36937: DOUBLE
36938: EQUAL
36939: IFTRUE 36943
36941: GO 37521
36943: POP
// begin if GetClass ( i ) = 1 then
36944: LD_VAR 0 6
36948: PPUSH
36949: CALL_OW 257
36953: PUSH
36954: LD_INT 1
36956: EQUAL
36957: IFFALSE 36978
// points := [ 10 , 5 , 3 ] ;
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_INT 10
36966: PUSH
36967: LD_INT 5
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36978: LD_VAR 0 6
36982: PPUSH
36983: CALL_OW 257
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: LD_INT 4
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: IN
37002: IFFALSE 37023
// points := [ 3 , 2 , 1 ] ;
37004: LD_ADDR_VAR 0 9
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37023: LD_VAR 0 6
37027: PPUSH
37028: CALL_OW 257
37032: PUSH
37033: LD_INT 5
37035: EQUAL
37036: IFFALSE 37057
// points := [ 130 , 5 , 2 ] ;
37038: LD_ADDR_VAR 0 9
37042: PUSH
37043: LD_INT 130
37045: PUSH
37046: LD_INT 5
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37057: LD_VAR 0 6
37061: PPUSH
37062: CALL_OW 257
37066: PUSH
37067: LD_INT 8
37069: EQUAL
37070: IFFALSE 37091
// points := [ 35 , 35 , 30 ] ;
37072: LD_ADDR_VAR 0 9
37076: PUSH
37077: LD_INT 35
37079: PUSH
37080: LD_INT 35
37082: PUSH
37083: LD_INT 30
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37091: LD_VAR 0 6
37095: PPUSH
37096: CALL_OW 257
37100: PUSH
37101: LD_INT 9
37103: EQUAL
37104: IFFALSE 37125
// points := [ 20 , 55 , 40 ] ;
37106: LD_ADDR_VAR 0 9
37110: PUSH
37111: LD_INT 20
37113: PUSH
37114: LD_INT 55
37116: PUSH
37117: LD_INT 40
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37125: LD_VAR 0 6
37129: PPUSH
37130: CALL_OW 257
37134: PUSH
37135: LD_INT 12
37137: PUSH
37138: LD_INT 16
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: IN
37145: IFFALSE 37166
// points := [ 5 , 3 , 2 ] ;
37147: LD_ADDR_VAR 0 9
37151: PUSH
37152: LD_INT 5
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37166: LD_VAR 0 6
37170: PPUSH
37171: CALL_OW 257
37175: PUSH
37176: LD_INT 17
37178: EQUAL
37179: IFFALSE 37200
// points := [ 100 , 50 , 75 ] ;
37181: LD_ADDR_VAR 0 9
37185: PUSH
37186: LD_INT 100
37188: PUSH
37189: LD_INT 50
37191: PUSH
37192: LD_INT 75
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37200: LD_VAR 0 6
37204: PPUSH
37205: CALL_OW 257
37209: PUSH
37210: LD_INT 15
37212: EQUAL
37213: IFFALSE 37234
// points := [ 10 , 5 , 3 ] ;
37215: LD_ADDR_VAR 0 9
37219: PUSH
37220: LD_INT 10
37222: PUSH
37223: LD_INT 5
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37234: LD_VAR 0 6
37238: PPUSH
37239: CALL_OW 257
37243: PUSH
37244: LD_INT 14
37246: EQUAL
37247: IFFALSE 37268
// points := [ 10 , 0 , 0 ] ;
37249: LD_ADDR_VAR 0 9
37253: PUSH
37254: LD_INT 10
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37268: LD_VAR 0 6
37272: PPUSH
37273: CALL_OW 257
37277: PUSH
37278: LD_INT 11
37280: EQUAL
37281: IFFALSE 37302
// points := [ 30 , 10 , 5 ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_INT 30
37290: PUSH
37291: LD_INT 10
37293: PUSH
37294: LD_INT 5
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37302: LD_VAR 0 1
37306: PPUSH
37307: LD_INT 5
37309: PPUSH
37310: CALL_OW 321
37314: PUSH
37315: LD_INT 2
37317: EQUAL
37318: IFFALSE 37335
// bpoints := bpoints * 1.8 ;
37320: LD_ADDR_VAR 0 10
37324: PUSH
37325: LD_VAR 0 10
37329: PUSH
37330: LD_REAL  1.80000000000000E+0000
37333: MUL
37334: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37335: LD_VAR 0 6
37339: PPUSH
37340: CALL_OW 257
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 3
37353: PUSH
37354: LD_INT 4
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: IN
37363: PUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: LD_INT 51
37371: PPUSH
37372: CALL_OW 321
37376: PUSH
37377: LD_INT 2
37379: EQUAL
37380: AND
37381: IFFALSE 37398
// bpoints := bpoints * 1.2 ;
37383: LD_ADDR_VAR 0 10
37387: PUSH
37388: LD_VAR 0 10
37392: PUSH
37393: LD_REAL  1.20000000000000E+0000
37396: MUL
37397: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37398: LD_VAR 0 6
37402: PPUSH
37403: CALL_OW 257
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: LD_INT 7
37413: PUSH
37414: LD_INT 9
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: IN
37422: PUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: LD_INT 52
37430: PPUSH
37431: CALL_OW 321
37435: PUSH
37436: LD_INT 2
37438: EQUAL
37439: AND
37440: IFFALSE 37457
// bpoints := bpoints * 1.5 ;
37442: LD_ADDR_VAR 0 10
37446: PUSH
37447: LD_VAR 0 10
37451: PUSH
37452: LD_REAL  1.50000000000000E+0000
37455: MUL
37456: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37457: LD_VAR 0 1
37461: PPUSH
37462: LD_INT 66
37464: PPUSH
37465: CALL_OW 321
37469: PUSH
37470: LD_INT 2
37472: EQUAL
37473: IFFALSE 37490
// bpoints := bpoints * 1.1 ;
37475: LD_ADDR_VAR 0 10
37479: PUSH
37480: LD_VAR 0 10
37484: PUSH
37485: LD_REAL  1.10000000000000E+0000
37488: MUL
37489: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37490: LD_ADDR_VAR 0 10
37494: PUSH
37495: LD_VAR 0 10
37499: PUSH
37500: LD_VAR 0 6
37504: PPUSH
37505: LD_INT 1
37507: PPUSH
37508: CALL_OW 259
37512: PUSH
37513: LD_REAL  1.15000000000000E+0000
37516: MUL
37517: MUL
37518: ST_TO_ADDR
// end ; unit_vehicle :
37519: GO 38347
37521: LD_INT 2
37523: DOUBLE
37524: EQUAL
37525: IFTRUE 37529
37527: GO 38335
37529: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37530: LD_VAR 0 6
37534: PPUSH
37535: CALL_OW 264
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 42
37545: PUSH
37546: LD_INT 24
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: IN
37554: IFFALSE 37575
// points := [ 25 , 5 , 3 ] ;
37556: LD_ADDR_VAR 0 9
37560: PUSH
37561: LD_INT 25
37563: PUSH
37564: LD_INT 5
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37575: LD_VAR 0 6
37579: PPUSH
37580: CALL_OW 264
37584: PUSH
37585: LD_INT 4
37587: PUSH
37588: LD_INT 43
37590: PUSH
37591: LD_INT 25
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: IN
37599: IFFALSE 37620
// points := [ 40 , 15 , 5 ] ;
37601: LD_ADDR_VAR 0 9
37605: PUSH
37606: LD_INT 40
37608: PUSH
37609: LD_INT 15
37611: PUSH
37612: LD_INT 5
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37620: LD_VAR 0 6
37624: PPUSH
37625: CALL_OW 264
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: LD_INT 23
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: IN
37640: IFFALSE 37661
// points := [ 7 , 25 , 8 ] ;
37642: LD_ADDR_VAR 0 9
37646: PUSH
37647: LD_INT 7
37649: PUSH
37650: LD_INT 25
37652: PUSH
37653: LD_INT 8
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37661: LD_VAR 0 6
37665: PPUSH
37666: CALL_OW 264
37670: PUSH
37671: LD_INT 5
37673: PUSH
37674: LD_INT 27
37676: PUSH
37677: LD_INT 44
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: LIST
37684: IN
37685: IFFALSE 37706
// points := [ 14 , 50 , 16 ] ;
37687: LD_ADDR_VAR 0 9
37691: PUSH
37692: LD_INT 14
37694: PUSH
37695: LD_INT 50
37697: PUSH
37698: LD_INT 16
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37706: LD_VAR 0 6
37710: PPUSH
37711: CALL_OW 264
37715: PUSH
37716: LD_INT 6
37718: PUSH
37719: LD_INT 46
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: IN
37726: IFFALSE 37747
// points := [ 32 , 120 , 70 ] ;
37728: LD_ADDR_VAR 0 9
37732: PUSH
37733: LD_INT 32
37735: PUSH
37736: LD_INT 120
37738: PUSH
37739: LD_INT 70
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37747: LD_VAR 0 6
37751: PPUSH
37752: CALL_OW 264
37756: PUSH
37757: LD_INT 7
37759: PUSH
37760: LD_INT 28
37762: PUSH
37763: LD_INT 45
37765: PUSH
37766: LD_INT 92
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: IN
37775: IFFALSE 37796
// points := [ 35 , 20 , 45 ] ;
37777: LD_ADDR_VAR 0 9
37781: PUSH
37782: LD_INT 35
37784: PUSH
37785: LD_INT 20
37787: PUSH
37788: LD_INT 45
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37796: LD_VAR 0 6
37800: PPUSH
37801: CALL_OW 264
37805: PUSH
37806: LD_INT 47
37808: PUSH
37809: EMPTY
37810: LIST
37811: IN
37812: IFFALSE 37833
// points := [ 67 , 45 , 75 ] ;
37814: LD_ADDR_VAR 0 9
37818: PUSH
37819: LD_INT 67
37821: PUSH
37822: LD_INT 45
37824: PUSH
37825: LD_INT 75
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37833: LD_VAR 0 6
37837: PPUSH
37838: CALL_OW 264
37842: PUSH
37843: LD_INT 26
37845: PUSH
37846: EMPTY
37847: LIST
37848: IN
37849: IFFALSE 37870
// points := [ 120 , 30 , 80 ] ;
37851: LD_ADDR_VAR 0 9
37855: PUSH
37856: LD_INT 120
37858: PUSH
37859: LD_INT 30
37861: PUSH
37862: LD_INT 80
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37870: LD_VAR 0 6
37874: PPUSH
37875: CALL_OW 264
37879: PUSH
37880: LD_INT 22
37882: PUSH
37883: EMPTY
37884: LIST
37885: IN
37886: IFFALSE 37907
// points := [ 40 , 1 , 1 ] ;
37888: LD_ADDR_VAR 0 9
37892: PUSH
37893: LD_INT 40
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37907: LD_VAR 0 6
37911: PPUSH
37912: CALL_OW 264
37916: PUSH
37917: LD_INT 29
37919: PUSH
37920: EMPTY
37921: LIST
37922: IN
37923: IFFALSE 37944
// points := [ 70 , 200 , 400 ] ;
37925: LD_ADDR_VAR 0 9
37929: PUSH
37930: LD_INT 70
37932: PUSH
37933: LD_INT 200
37935: PUSH
37936: LD_INT 400
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37944: LD_VAR 0 6
37948: PPUSH
37949: CALL_OW 264
37953: PUSH
37954: LD_INT 14
37956: PUSH
37957: LD_INT 53
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: IN
37964: IFFALSE 37985
// points := [ 40 , 10 , 20 ] ;
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_INT 40
37973: PUSH
37974: LD_INT 10
37976: PUSH
37977: LD_INT 20
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37985: LD_VAR 0 6
37989: PPUSH
37990: CALL_OW 264
37994: PUSH
37995: LD_INT 9
37997: PUSH
37998: EMPTY
37999: LIST
38000: IN
38001: IFFALSE 38022
// points := [ 5 , 70 , 20 ] ;
38003: LD_ADDR_VAR 0 9
38007: PUSH
38008: LD_INT 5
38010: PUSH
38011: LD_INT 70
38013: PUSH
38014: LD_INT 20
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38022: LD_VAR 0 6
38026: PPUSH
38027: CALL_OW 264
38031: PUSH
38032: LD_INT 10
38034: PUSH
38035: EMPTY
38036: LIST
38037: IN
38038: IFFALSE 38059
// points := [ 35 , 110 , 70 ] ;
38040: LD_ADDR_VAR 0 9
38044: PUSH
38045: LD_INT 35
38047: PUSH
38048: LD_INT 110
38050: PUSH
38051: LD_INT 70
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38059: LD_VAR 0 6
38063: PPUSH
38064: CALL_OW 265
38068: PUSH
38069: LD_INT 25
38071: EQUAL
38072: IFFALSE 38093
// points := [ 80 , 65 , 100 ] ;
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: LD_INT 80
38081: PUSH
38082: LD_INT 65
38084: PUSH
38085: LD_INT 100
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38093: LD_VAR 0 6
38097: PPUSH
38098: CALL_OW 263
38102: PUSH
38103: LD_INT 1
38105: EQUAL
38106: IFFALSE 38141
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38108: LD_ADDR_VAR 0 10
38112: PUSH
38113: LD_VAR 0 10
38117: PUSH
38118: LD_VAR 0 6
38122: PPUSH
38123: CALL_OW 311
38127: PPUSH
38128: LD_INT 3
38130: PPUSH
38131: CALL_OW 259
38135: PUSH
38136: LD_INT 4
38138: MUL
38139: MUL
38140: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38141: LD_VAR 0 6
38145: PPUSH
38146: CALL_OW 263
38150: PUSH
38151: LD_INT 2
38153: EQUAL
38154: IFFALSE 38205
// begin j := IsControledBy ( i ) ;
38156: LD_ADDR_VAR 0 7
38160: PUSH
38161: LD_VAR 0 6
38165: PPUSH
38166: CALL_OW 312
38170: ST_TO_ADDR
// if j then
38171: LD_VAR 0 7
38175: IFFALSE 38205
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38177: LD_ADDR_VAR 0 10
38181: PUSH
38182: LD_VAR 0 10
38186: PUSH
38187: LD_VAR 0 7
38191: PPUSH
38192: LD_INT 3
38194: PPUSH
38195: CALL_OW 259
38199: PUSH
38200: LD_INT 3
38202: MUL
38203: MUL
38204: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38205: LD_VAR 0 6
38209: PPUSH
38210: CALL_OW 264
38214: PUSH
38215: LD_INT 5
38217: PUSH
38218: LD_INT 6
38220: PUSH
38221: LD_INT 46
38223: PUSH
38224: LD_INT 44
38226: PUSH
38227: LD_INT 47
38229: PUSH
38230: LD_INT 45
38232: PUSH
38233: LD_INT 28
38235: PUSH
38236: LD_INT 7
38238: PUSH
38239: LD_INT 27
38241: PUSH
38242: LD_INT 29
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: IN
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: LD_INT 52
38265: PPUSH
38266: CALL_OW 321
38270: PUSH
38271: LD_INT 2
38273: EQUAL
38274: AND
38275: IFFALSE 38292
// bpoints := bpoints * 1.2 ;
38277: LD_ADDR_VAR 0 10
38281: PUSH
38282: LD_VAR 0 10
38286: PUSH
38287: LD_REAL  1.20000000000000E+0000
38290: MUL
38291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38292: LD_VAR 0 6
38296: PPUSH
38297: CALL_OW 264
38301: PUSH
38302: LD_INT 6
38304: PUSH
38305: LD_INT 46
38307: PUSH
38308: LD_INT 47
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: LIST
38315: IN
38316: IFFALSE 38333
// bpoints := bpoints * 1.2 ;
38318: LD_ADDR_VAR 0 10
38322: PUSH
38323: LD_VAR 0 10
38327: PUSH
38328: LD_REAL  1.20000000000000E+0000
38331: MUL
38332: ST_TO_ADDR
// end ; unit_building :
38333: GO 38347
38335: LD_INT 3
38337: DOUBLE
38338: EQUAL
38339: IFTRUE 38343
38341: GO 38346
38343: POP
// ; end ;
38344: GO 38347
38346: POP
// for j = 1 to 3 do
38347: LD_ADDR_VAR 0 7
38351: PUSH
38352: DOUBLE
38353: LD_INT 1
38355: DEC
38356: ST_TO_ADDR
38357: LD_INT 3
38359: PUSH
38360: FOR_TO
38361: IFFALSE 38414
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 5
38372: PPUSH
38373: LD_VAR 0 7
38377: PPUSH
38378: LD_VAR 0 5
38382: PUSH
38383: LD_VAR 0 7
38387: ARRAY
38388: PUSH
38389: LD_VAR 0 9
38393: PUSH
38394: LD_VAR 0 7
38398: ARRAY
38399: PUSH
38400: LD_VAR 0 10
38404: MUL
38405: PLUS
38406: PPUSH
38407: CALL_OW 1
38411: ST_TO_ADDR
38412: GO 38360
38414: POP
38415: POP
// end ;
38416: GO 36895
38418: POP
38419: POP
// result := Replace ( result , 4 , tmp ) ;
38420: LD_ADDR_VAR 0 5
38424: PUSH
38425: LD_VAR 0 5
38429: PPUSH
38430: LD_INT 4
38432: PPUSH
38433: LD_VAR 0 8
38437: PPUSH
38438: CALL_OW 1
38442: ST_TO_ADDR
// end ;
38443: LD_VAR 0 5
38447: RET
// export function DangerAtRange ( unit , range ) ; begin
38448: LD_INT 0
38450: PPUSH
// if not unit then
38451: LD_VAR 0 1
38455: NOT
38456: IFFALSE 38460
// exit ;
38458: GO 38505
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38460: LD_ADDR_VAR 0 3
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: CALL_OW 255
38474: PPUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 250
38484: PPUSH
38485: LD_VAR 0 1
38489: PPUSH
38490: CALL_OW 251
38494: PPUSH
38495: LD_VAR 0 2
38499: PPUSH
38500: CALL 36747 0 4
38504: ST_TO_ADDR
// end ;
38505: LD_VAR 0 3
38509: RET
// export function DangerInArea ( side , area ) ; begin
38510: LD_INT 0
38512: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38513: LD_ADDR_VAR 0 3
38517: PUSH
38518: LD_VAR 0 2
38522: PPUSH
38523: LD_INT 81
38525: PUSH
38526: LD_VAR 0 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PPUSH
38535: CALL_OW 70
38539: ST_TO_ADDR
// end ;
38540: LD_VAR 0 3
38544: RET
// export function IsExtension ( b ) ; begin
38545: LD_INT 0
38547: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38548: LD_ADDR_VAR 0 2
38552: PUSH
38553: LD_VAR 0 1
38557: PUSH
38558: LD_INT 23
38560: PUSH
38561: LD_INT 20
38563: PUSH
38564: LD_INT 22
38566: PUSH
38567: LD_INT 17
38569: PUSH
38570: LD_INT 24
38572: PUSH
38573: LD_INT 21
38575: PUSH
38576: LD_INT 19
38578: PUSH
38579: LD_INT 16
38581: PUSH
38582: LD_INT 25
38584: PUSH
38585: LD_INT 18
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: IN
38600: ST_TO_ADDR
// end ;
38601: LD_VAR 0 2
38605: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38606: LD_INT 0
38608: PPUSH
38609: PPUSH
38610: PPUSH
// result := [ ] ;
38611: LD_ADDR_VAR 0 4
38615: PUSH
38616: EMPTY
38617: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38618: LD_ADDR_VAR 0 5
38622: PUSH
38623: LD_VAR 0 2
38627: PPUSH
38628: LD_INT 21
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PPUSH
38638: CALL_OW 70
38642: ST_TO_ADDR
// if not tmp then
38643: LD_VAR 0 5
38647: NOT
38648: IFFALSE 38652
// exit ;
38650: GO 38716
// if checkLink then
38652: LD_VAR 0 3
38656: IFFALSE 38706
// begin for i in tmp do
38658: LD_ADDR_VAR 0 6
38662: PUSH
38663: LD_VAR 0 5
38667: PUSH
38668: FOR_IN
38669: IFFALSE 38704
// if GetBase ( i ) <> base then
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 274
38680: PUSH
38681: LD_VAR 0 1
38685: NONEQUAL
38686: IFFALSE 38702
// ComLinkToBase ( base , i ) ;
38688: LD_VAR 0 1
38692: PPUSH
38693: LD_VAR 0 6
38697: PPUSH
38698: CALL_OW 169
38702: GO 38668
38704: POP
38705: POP
// end ; result := tmp ;
38706: LD_ADDR_VAR 0 4
38710: PUSH
38711: LD_VAR 0 5
38715: ST_TO_ADDR
// end ;
38716: LD_VAR 0 4
38720: RET
// export function ComComplete ( units , b ) ; var i ; begin
38721: LD_INT 0
38723: PPUSH
38724: PPUSH
// if not units then
38725: LD_VAR 0 1
38729: NOT
38730: IFFALSE 38734
// exit ;
38732: GO 38824
// for i in units do
38734: LD_ADDR_VAR 0 4
38738: PUSH
38739: LD_VAR 0 1
38743: PUSH
38744: FOR_IN
38745: IFFALSE 38822
// if BuildingStatus ( b ) = bs_build then
38747: LD_VAR 0 2
38751: PPUSH
38752: CALL_OW 461
38756: PUSH
38757: LD_INT 1
38759: EQUAL
38760: IFFALSE 38820
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38762: LD_VAR 0 4
38766: PPUSH
38767: LD_STRING h
38769: PUSH
38770: LD_VAR 0 2
38774: PPUSH
38775: CALL_OW 250
38779: PUSH
38780: LD_VAR 0 2
38784: PPUSH
38785: CALL_OW 251
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: PPUSH
38816: CALL_OW 446
38820: GO 38744
38822: POP
38823: POP
// end ;
38824: LD_VAR 0 3
38828: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38829: LD_INT 0
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38837: LD_VAR 0 1
38841: NOT
38842: PUSH
38843: LD_VAR 0 1
38847: PPUSH
38848: CALL_OW 263
38852: PUSH
38853: LD_INT 2
38855: NONEQUAL
38856: OR
38857: IFFALSE 38861
// exit ;
38859: GO 39177
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38861: LD_ADDR_VAR 0 6
38865: PUSH
38866: LD_INT 22
38868: PUSH
38869: LD_VAR 0 1
38873: PPUSH
38874: CALL_OW 255
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 30
38888: PUSH
38889: LD_INT 36
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 34
38898: PUSH
38899: LD_INT 31
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PPUSH
38915: CALL_OW 69
38919: ST_TO_ADDR
// if not tmp then
38920: LD_VAR 0 6
38924: NOT
38925: IFFALSE 38929
// exit ;
38927: GO 39177
// result := [ ] ;
38929: LD_ADDR_VAR 0 2
38933: PUSH
38934: EMPTY
38935: ST_TO_ADDR
// for i in tmp do
38936: LD_ADDR_VAR 0 3
38940: PUSH
38941: LD_VAR 0 6
38945: PUSH
38946: FOR_IN
38947: IFFALSE 39018
// begin t := UnitsInside ( i ) ;
38949: LD_ADDR_VAR 0 4
38953: PUSH
38954: LD_VAR 0 3
38958: PPUSH
38959: CALL_OW 313
38963: ST_TO_ADDR
// if t then
38964: LD_VAR 0 4
38968: IFFALSE 39016
// for j in t do
38970: LD_ADDR_VAR 0 7
38974: PUSH
38975: LD_VAR 0 4
38979: PUSH
38980: FOR_IN
38981: IFFALSE 39014
// result := Replace ( result , result + 1 , j ) ;
38983: LD_ADDR_VAR 0 2
38987: PUSH
38988: LD_VAR 0 2
38992: PPUSH
38993: LD_VAR 0 2
38997: PUSH
38998: LD_INT 1
39000: PLUS
39001: PPUSH
39002: LD_VAR 0 7
39006: PPUSH
39007: CALL_OW 1
39011: ST_TO_ADDR
39012: GO 38980
39014: POP
39015: POP
// end ;
39016: GO 38946
39018: POP
39019: POP
// if not result then
39020: LD_VAR 0 2
39024: NOT
39025: IFFALSE 39029
// exit ;
39027: GO 39177
// mech := result [ 1 ] ;
39029: LD_ADDR_VAR 0 5
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: ST_TO_ADDR
// if result > 1 then
39043: LD_VAR 0 2
39047: PUSH
39048: LD_INT 1
39050: GREATER
39051: IFFALSE 39163
// begin for i = 2 to result do
39053: LD_ADDR_VAR 0 3
39057: PUSH
39058: DOUBLE
39059: LD_INT 2
39061: DEC
39062: ST_TO_ADDR
39063: LD_VAR 0 2
39067: PUSH
39068: FOR_TO
39069: IFFALSE 39161
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39071: LD_ADDR_VAR 0 4
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_VAR 0 3
39085: ARRAY
39086: PPUSH
39087: LD_INT 3
39089: PPUSH
39090: CALL_OW 259
39094: PUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_VAR 0 3
39104: ARRAY
39105: PPUSH
39106: CALL_OW 432
39110: MINUS
39111: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39112: LD_VAR 0 4
39116: PUSH
39117: LD_VAR 0 5
39121: PPUSH
39122: LD_INT 3
39124: PPUSH
39125: CALL_OW 259
39129: PUSH
39130: LD_VAR 0 5
39134: PPUSH
39135: CALL_OW 432
39139: MINUS
39140: GREATEREQUAL
39141: IFFALSE 39159
// mech := result [ i ] ;
39143: LD_ADDR_VAR 0 5
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_VAR 0 3
39157: ARRAY
39158: ST_TO_ADDR
// end ;
39159: GO 39068
39161: POP
39162: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39163: LD_VAR 0 1
39167: PPUSH
39168: LD_VAR 0 5
39172: PPUSH
39173: CALL_OW 135
// end ;
39177: LD_VAR 0 2
39181: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39182: LD_INT 0
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
// result := [ ] ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: EMPTY
39203: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39204: LD_VAR 0 1
39208: PPUSH
39209: CALL_OW 266
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: IN
39224: NOT
39225: IFFALSE 39229
// exit ;
39227: GO 40863
// if name then
39229: LD_VAR 0 3
39233: IFFALSE 39249
// SetBName ( base_dep , name ) ;
39235: LD_VAR 0 1
39239: PPUSH
39240: LD_VAR 0 3
39244: PPUSH
39245: CALL_OW 500
// base := GetBase ( base_dep ) ;
39249: LD_ADDR_VAR 0 15
39253: PUSH
39254: LD_VAR 0 1
39258: PPUSH
39259: CALL_OW 274
39263: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39264: LD_ADDR_VAR 0 16
39268: PUSH
39269: LD_VAR 0 1
39273: PPUSH
39274: CALL_OW 255
39278: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39279: LD_ADDR_VAR 0 17
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 248
39293: ST_TO_ADDR
// if sources then
39294: LD_VAR 0 5
39298: IFFALSE 39345
// for i = 1 to 3 do
39300: LD_ADDR_VAR 0 8
39304: PUSH
39305: DOUBLE
39306: LD_INT 1
39308: DEC
39309: ST_TO_ADDR
39310: LD_INT 3
39312: PUSH
39313: FOR_TO
39314: IFFALSE 39343
// AddResourceType ( base , i , sources [ i ] ) ;
39316: LD_VAR 0 15
39320: PPUSH
39321: LD_VAR 0 8
39325: PPUSH
39326: LD_VAR 0 5
39330: PUSH
39331: LD_VAR 0 8
39335: ARRAY
39336: PPUSH
39337: CALL_OW 276
39341: GO 39313
39343: POP
39344: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39345: LD_ADDR_VAR 0 18
39349: PUSH
39350: LD_VAR 0 15
39354: PPUSH
39355: LD_VAR 0 2
39359: PPUSH
39360: LD_INT 1
39362: PPUSH
39363: CALL 38606 0 3
39367: ST_TO_ADDR
// InitHc ;
39368: CALL_OW 19
// InitUc ;
39372: CALL_OW 18
// uc_side := side ;
39376: LD_ADDR_OWVAR 20
39380: PUSH
39381: LD_VAR 0 16
39385: ST_TO_ADDR
// uc_nation := nation ;
39386: LD_ADDR_OWVAR 21
39390: PUSH
39391: LD_VAR 0 17
39395: ST_TO_ADDR
// if buildings then
39396: LD_VAR 0 18
39400: IFFALSE 40722
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39402: LD_ADDR_VAR 0 19
39406: PUSH
39407: LD_VAR 0 18
39411: PPUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 30
39417: PUSH
39418: LD_INT 29
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 30
39427: PUSH
39428: LD_INT 30
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: PPUSH
39440: CALL_OW 72
39444: ST_TO_ADDR
// if tmp then
39445: LD_VAR 0 19
39449: IFFALSE 39497
// for i in tmp do
39451: LD_ADDR_VAR 0 8
39455: PUSH
39456: LD_VAR 0 19
39460: PUSH
39461: FOR_IN
39462: IFFALSE 39495
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39464: LD_VAR 0 8
39468: PPUSH
39469: CALL_OW 250
39473: PPUSH
39474: LD_VAR 0 8
39478: PPUSH
39479: CALL_OW 251
39483: PPUSH
39484: LD_VAR 0 16
39488: PPUSH
39489: CALL_OW 441
39493: GO 39461
39495: POP
39496: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39497: LD_VAR 0 18
39501: PPUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 30
39507: PUSH
39508: LD_INT 32
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 30
39517: PUSH
39518: LD_INT 33
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL_OW 72
39534: IFFALSE 39622
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39536: LD_ADDR_VAR 0 8
39540: PUSH
39541: LD_VAR 0 18
39545: PPUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 30
39551: PUSH
39552: LD_INT 32
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 30
39561: PUSH
39562: LD_INT 33
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: PPUSH
39574: CALL_OW 72
39578: PUSH
39579: FOR_IN
39580: IFFALSE 39620
// begin if not GetBWeapon ( i ) then
39582: LD_VAR 0 8
39586: PPUSH
39587: CALL_OW 269
39591: NOT
39592: IFFALSE 39618
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39594: LD_VAR 0 8
39598: PPUSH
39599: LD_VAR 0 8
39603: PPUSH
39604: LD_VAR 0 2
39608: PPUSH
39609: CALL 40868 0 2
39613: PPUSH
39614: CALL_OW 431
// end ;
39618: GO 39579
39620: POP
39621: POP
// end ; for i = 1 to personel do
39622: LD_ADDR_VAR 0 8
39626: PUSH
39627: DOUBLE
39628: LD_INT 1
39630: DEC
39631: ST_TO_ADDR
39632: LD_VAR 0 6
39636: PUSH
39637: FOR_TO
39638: IFFALSE 40702
// begin if i > 4 then
39640: LD_VAR 0 8
39644: PUSH
39645: LD_INT 4
39647: GREATER
39648: IFFALSE 39652
// break ;
39650: GO 40702
// case i of 1 :
39652: LD_VAR 0 8
39656: PUSH
39657: LD_INT 1
39659: DOUBLE
39660: EQUAL
39661: IFTRUE 39665
39663: GO 39745
39665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39666: LD_ADDR_VAR 0 12
39670: PUSH
39671: LD_VAR 0 18
39675: PPUSH
39676: LD_INT 22
39678: PUSH
39679: LD_VAR 0 16
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 58
39690: PUSH
39691: EMPTY
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 30
39699: PUSH
39700: LD_INT 32
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 30
39709: PUSH
39710: LD_INT 4
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 30
39719: PUSH
39720: LD_INT 5
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: PPUSH
39738: CALL_OW 72
39742: ST_TO_ADDR
39743: GO 39967
39745: LD_INT 2
39747: DOUBLE
39748: EQUAL
39749: IFTRUE 39753
39751: GO 39815
39753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39754: LD_ADDR_VAR 0 12
39758: PUSH
39759: LD_VAR 0 18
39763: PPUSH
39764: LD_INT 22
39766: PUSH
39767: LD_VAR 0 16
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: LD_INT 30
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 30
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PPUSH
39808: CALL_OW 72
39812: ST_TO_ADDR
39813: GO 39967
39815: LD_INT 3
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 39885
39823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39824: LD_ADDR_VAR 0 12
39828: PUSH
39829: LD_VAR 0 18
39833: PPUSH
39834: LD_INT 22
39836: PUSH
39837: LD_VAR 0 16
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 30
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 30
39861: PUSH
39862: LD_INT 3
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PPUSH
39878: CALL_OW 72
39882: ST_TO_ADDR
39883: GO 39967
39885: LD_INT 4
39887: DOUBLE
39888: EQUAL
39889: IFTRUE 39893
39891: GO 39966
39893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39894: LD_ADDR_VAR 0 12
39898: PUSH
39899: LD_VAR 0 18
39903: PPUSH
39904: LD_INT 22
39906: PUSH
39907: LD_VAR 0 16
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 30
39921: PUSH
39922: LD_INT 6
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 30
39931: PUSH
39932: LD_INT 7
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 30
39941: PUSH
39942: LD_INT 8
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PPUSH
39959: CALL_OW 72
39963: ST_TO_ADDR
39964: GO 39967
39966: POP
// if i = 1 then
39967: LD_VAR 0 8
39971: PUSH
39972: LD_INT 1
39974: EQUAL
39975: IFFALSE 40086
// begin tmp := [ ] ;
39977: LD_ADDR_VAR 0 19
39981: PUSH
39982: EMPTY
39983: ST_TO_ADDR
// for j in f do
39984: LD_ADDR_VAR 0 9
39988: PUSH
39989: LD_VAR 0 12
39993: PUSH
39994: FOR_IN
39995: IFFALSE 40068
// if GetBType ( j ) = b_bunker then
39997: LD_VAR 0 9
40001: PPUSH
40002: CALL_OW 266
40006: PUSH
40007: LD_INT 32
40009: EQUAL
40010: IFFALSE 40037
// tmp := Insert ( tmp , 1 , j ) else
40012: LD_ADDR_VAR 0 19
40016: PUSH
40017: LD_VAR 0 19
40021: PPUSH
40022: LD_INT 1
40024: PPUSH
40025: LD_VAR 0 9
40029: PPUSH
40030: CALL_OW 2
40034: ST_TO_ADDR
40035: GO 40066
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40037: LD_ADDR_VAR 0 19
40041: PUSH
40042: LD_VAR 0 19
40046: PPUSH
40047: LD_VAR 0 19
40051: PUSH
40052: LD_INT 1
40054: PLUS
40055: PPUSH
40056: LD_VAR 0 9
40060: PPUSH
40061: CALL_OW 2
40065: ST_TO_ADDR
40066: GO 39994
40068: POP
40069: POP
// if tmp then
40070: LD_VAR 0 19
40074: IFFALSE 40086
// f := tmp ;
40076: LD_ADDR_VAR 0 12
40080: PUSH
40081: LD_VAR 0 19
40085: ST_TO_ADDR
// end ; x := personel [ i ] ;
40086: LD_ADDR_VAR 0 13
40090: PUSH
40091: LD_VAR 0 6
40095: PUSH
40096: LD_VAR 0 8
40100: ARRAY
40101: ST_TO_ADDR
// if x = - 1 then
40102: LD_VAR 0 13
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: EQUAL
40111: IFFALSE 40320
// begin for j in f do
40113: LD_ADDR_VAR 0 9
40117: PUSH
40118: LD_VAR 0 12
40122: PUSH
40123: FOR_IN
40124: IFFALSE 40316
// repeat InitHc ;
40126: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40130: LD_VAR 0 9
40134: PPUSH
40135: CALL_OW 266
40139: PUSH
40140: LD_INT 5
40142: EQUAL
40143: IFFALSE 40213
// begin if UnitsInside ( j ) < 3 then
40145: LD_VAR 0 9
40149: PPUSH
40150: CALL_OW 313
40154: PUSH
40155: LD_INT 3
40157: LESS
40158: IFFALSE 40194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40160: LD_INT 0
40162: PPUSH
40163: LD_INT 5
40165: PUSH
40166: LD_INT 8
40168: PUSH
40169: LD_INT 9
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: PUSH
40177: LD_VAR 0 17
40181: ARRAY
40182: PPUSH
40183: LD_VAR 0 4
40187: PPUSH
40188: CALL_OW 380
40192: GO 40211
// PrepareHuman ( false , i , skill ) ;
40194: LD_INT 0
40196: PPUSH
40197: LD_VAR 0 8
40201: PPUSH
40202: LD_VAR 0 4
40206: PPUSH
40207: CALL_OW 380
// end else
40211: GO 40230
// PrepareHuman ( false , i , skill ) ;
40213: LD_INT 0
40215: PPUSH
40216: LD_VAR 0 8
40220: PPUSH
40221: LD_VAR 0 4
40225: PPUSH
40226: CALL_OW 380
// un := CreateHuman ;
40230: LD_ADDR_VAR 0 14
40234: PUSH
40235: CALL_OW 44
40239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40240: LD_ADDR_VAR 0 7
40244: PUSH
40245: LD_VAR 0 7
40249: PPUSH
40250: LD_INT 1
40252: PPUSH
40253: LD_VAR 0 14
40257: PPUSH
40258: CALL_OW 2
40262: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40263: LD_VAR 0 14
40267: PPUSH
40268: LD_VAR 0 9
40272: PPUSH
40273: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40277: LD_VAR 0 9
40281: PPUSH
40282: CALL_OW 313
40286: PUSH
40287: LD_INT 6
40289: EQUAL
40290: PUSH
40291: LD_VAR 0 9
40295: PPUSH
40296: CALL_OW 266
40300: PUSH
40301: LD_INT 32
40303: PUSH
40304: LD_INT 31
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: IN
40311: OR
40312: IFFALSE 40126
40314: GO 40123
40316: POP
40317: POP
// end else
40318: GO 40700
// for j = 1 to x do
40320: LD_ADDR_VAR 0 9
40324: PUSH
40325: DOUBLE
40326: LD_INT 1
40328: DEC
40329: ST_TO_ADDR
40330: LD_VAR 0 13
40334: PUSH
40335: FOR_TO
40336: IFFALSE 40698
// begin InitHc ;
40338: CALL_OW 19
// if not f then
40342: LD_VAR 0 12
40346: NOT
40347: IFFALSE 40436
// begin PrepareHuman ( false , i , skill ) ;
40349: LD_INT 0
40351: PPUSH
40352: LD_VAR 0 8
40356: PPUSH
40357: LD_VAR 0 4
40361: PPUSH
40362: CALL_OW 380
// un := CreateHuman ;
40366: LD_ADDR_VAR 0 14
40370: PUSH
40371: CALL_OW 44
40375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40376: LD_ADDR_VAR 0 7
40380: PUSH
40381: LD_VAR 0 7
40385: PPUSH
40386: LD_INT 1
40388: PPUSH
40389: LD_VAR 0 14
40393: PPUSH
40394: CALL_OW 2
40398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40399: LD_VAR 0 14
40403: PPUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 250
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 251
40423: PPUSH
40424: LD_INT 10
40426: PPUSH
40427: LD_INT 0
40429: PPUSH
40430: CALL_OW 50
// continue ;
40434: GO 40335
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40436: LD_VAR 0 12
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: PPUSH
40445: CALL_OW 313
40449: PUSH
40450: LD_VAR 0 12
40454: PUSH
40455: LD_INT 1
40457: ARRAY
40458: PPUSH
40459: CALL_OW 266
40463: PUSH
40464: LD_INT 32
40466: PUSH
40467: LD_INT 31
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: IN
40474: AND
40475: PUSH
40476: LD_VAR 0 12
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PPUSH
40485: CALL_OW 313
40489: PUSH
40490: LD_INT 6
40492: EQUAL
40493: OR
40494: IFFALSE 40514
// f := Delete ( f , 1 ) ;
40496: LD_ADDR_VAR 0 12
40500: PUSH
40501: LD_VAR 0 12
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 3
40513: ST_TO_ADDR
// if not f then
40514: LD_VAR 0 12
40518: NOT
40519: IFFALSE 40537
// begin x := x + 2 ;
40521: LD_ADDR_VAR 0 13
40525: PUSH
40526: LD_VAR 0 13
40530: PUSH
40531: LD_INT 2
40533: PLUS
40534: ST_TO_ADDR
// continue ;
40535: GO 40335
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40537: LD_VAR 0 12
40541: PUSH
40542: LD_INT 1
40544: ARRAY
40545: PPUSH
40546: CALL_OW 266
40550: PUSH
40551: LD_INT 5
40553: EQUAL
40554: IFFALSE 40628
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40556: LD_VAR 0 12
40560: PUSH
40561: LD_INT 1
40563: ARRAY
40564: PPUSH
40565: CALL_OW 313
40569: PUSH
40570: LD_INT 3
40572: LESS
40573: IFFALSE 40609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40575: LD_INT 0
40577: PPUSH
40578: LD_INT 5
40580: PUSH
40581: LD_INT 8
40583: PUSH
40584: LD_INT 9
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: LD_VAR 0 17
40596: ARRAY
40597: PPUSH
40598: LD_VAR 0 4
40602: PPUSH
40603: CALL_OW 380
40607: GO 40626
// PrepareHuman ( false , i , skill ) ;
40609: LD_INT 0
40611: PPUSH
40612: LD_VAR 0 8
40616: PPUSH
40617: LD_VAR 0 4
40621: PPUSH
40622: CALL_OW 380
// end else
40626: GO 40645
// PrepareHuman ( false , i , skill ) ;
40628: LD_INT 0
40630: PPUSH
40631: LD_VAR 0 8
40635: PPUSH
40636: LD_VAR 0 4
40640: PPUSH
40641: CALL_OW 380
// un := CreateHuman ;
40645: LD_ADDR_VAR 0 14
40649: PUSH
40650: CALL_OW 44
40654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40655: LD_ADDR_VAR 0 7
40659: PUSH
40660: LD_VAR 0 7
40664: PPUSH
40665: LD_INT 1
40667: PPUSH
40668: LD_VAR 0 14
40672: PPUSH
40673: CALL_OW 2
40677: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40678: LD_VAR 0 14
40682: PPUSH
40683: LD_VAR 0 12
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: CALL_OW 52
// end ;
40696: GO 40335
40698: POP
40699: POP
// end ;
40700: GO 39637
40702: POP
40703: POP
// result := result ^ buildings ;
40704: LD_ADDR_VAR 0 7
40708: PUSH
40709: LD_VAR 0 7
40713: PUSH
40714: LD_VAR 0 18
40718: ADD
40719: ST_TO_ADDR
// end else
40720: GO 40863
// begin for i = 1 to personel do
40722: LD_ADDR_VAR 0 8
40726: PUSH
40727: DOUBLE
40728: LD_INT 1
40730: DEC
40731: ST_TO_ADDR
40732: LD_VAR 0 6
40736: PUSH
40737: FOR_TO
40738: IFFALSE 40861
// begin if i > 4 then
40740: LD_VAR 0 8
40744: PUSH
40745: LD_INT 4
40747: GREATER
40748: IFFALSE 40752
// break ;
40750: GO 40861
// x := personel [ i ] ;
40752: LD_ADDR_VAR 0 13
40756: PUSH
40757: LD_VAR 0 6
40761: PUSH
40762: LD_VAR 0 8
40766: ARRAY
40767: ST_TO_ADDR
// if x = - 1 then
40768: LD_VAR 0 13
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: EQUAL
40777: IFFALSE 40781
// continue ;
40779: GO 40737
// PrepareHuman ( false , i , skill ) ;
40781: LD_INT 0
40783: PPUSH
40784: LD_VAR 0 8
40788: PPUSH
40789: LD_VAR 0 4
40793: PPUSH
40794: CALL_OW 380
// un := CreateHuman ;
40798: LD_ADDR_VAR 0 14
40802: PUSH
40803: CALL_OW 44
40807: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40808: LD_VAR 0 14
40812: PPUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 250
40822: PPUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: CALL_OW 251
40832: PPUSH
40833: LD_INT 10
40835: PPUSH
40836: LD_INT 0
40838: PPUSH
40839: CALL_OW 50
// result := result ^ un ;
40843: LD_ADDR_VAR 0 7
40847: PUSH
40848: LD_VAR 0 7
40852: PUSH
40853: LD_VAR 0 14
40857: ADD
40858: ST_TO_ADDR
// end ;
40859: GO 40737
40861: POP
40862: POP
// end ; end ;
40863: LD_VAR 0 7
40867: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
40880: PPUSH
40881: PPUSH
40882: PPUSH
40883: PPUSH
40884: PPUSH
40885: PPUSH
// result := false ;
40886: LD_ADDR_VAR 0 3
40890: PUSH
40891: LD_INT 0
40893: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40894: LD_VAR 0 1
40898: NOT
40899: PUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 266
40909: PUSH
40910: LD_INT 32
40912: PUSH
40913: LD_INT 33
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: IN
40920: NOT
40921: OR
40922: IFFALSE 40926
// exit ;
40924: GO 42035
// nat := GetNation ( tower ) ;
40926: LD_ADDR_VAR 0 12
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: CALL_OW 248
40940: ST_TO_ADDR
// side := GetSide ( tower ) ;
40941: LD_ADDR_VAR 0 16
40945: PUSH
40946: LD_VAR 0 1
40950: PPUSH
40951: CALL_OW 255
40955: ST_TO_ADDR
// x := GetX ( tower ) ;
40956: LD_ADDR_VAR 0 10
40960: PUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: CALL_OW 250
40970: ST_TO_ADDR
// y := GetY ( tower ) ;
40971: LD_ADDR_VAR 0 11
40975: PUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 251
40985: ST_TO_ADDR
// if not x or not y then
40986: LD_VAR 0 10
40990: NOT
40991: PUSH
40992: LD_VAR 0 11
40996: NOT
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 42035
// weapon := 0 ;
41002: LD_ADDR_VAR 0 18
41006: PUSH
41007: LD_INT 0
41009: ST_TO_ADDR
// fac_list := [ ] ;
41010: LD_ADDR_VAR 0 17
41014: PUSH
41015: EMPTY
41016: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41017: LD_ADDR_VAR 0 6
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 274
41031: PPUSH
41032: LD_VAR 0 2
41036: PPUSH
41037: LD_INT 0
41039: PPUSH
41040: CALL 38606 0 3
41044: PPUSH
41045: LD_INT 30
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PPUSH
41055: CALL_OW 72
41059: ST_TO_ADDR
// if not factories then
41060: LD_VAR 0 6
41064: NOT
41065: IFFALSE 41069
// exit ;
41067: GO 42035
// for i in factories do
41069: LD_ADDR_VAR 0 8
41073: PUSH
41074: LD_VAR 0 6
41078: PUSH
41079: FOR_IN
41080: IFFALSE 41105
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41082: LD_ADDR_VAR 0 17
41086: PUSH
41087: LD_VAR 0 17
41091: PUSH
41092: LD_VAR 0 8
41096: PPUSH
41097: CALL_OW 478
41101: UNION
41102: ST_TO_ADDR
41103: GO 41079
41105: POP
41106: POP
// if not fac_list then
41107: LD_VAR 0 17
41111: NOT
41112: IFFALSE 41116
// exit ;
41114: GO 42035
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41116: LD_ADDR_VAR 0 5
41120: PUSH
41121: LD_INT 4
41123: PUSH
41124: LD_INT 5
41126: PUSH
41127: LD_INT 9
41129: PUSH
41130: LD_INT 10
41132: PUSH
41133: LD_INT 6
41135: PUSH
41136: LD_INT 7
41138: PUSH
41139: LD_INT 11
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 27
41153: PUSH
41154: LD_INT 28
41156: PUSH
41157: LD_INT 26
41159: PUSH
41160: LD_INT 30
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 43
41171: PUSH
41172: LD_INT 44
41174: PUSH
41175: LD_INT 46
41177: PUSH
41178: LD_INT 45
41180: PUSH
41181: LD_INT 47
41183: PUSH
41184: LD_INT 49
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: PUSH
41200: LD_VAR 0 12
41204: ARRAY
41205: ST_TO_ADDR
// list := list isect fac_list ;
41206: LD_ADDR_VAR 0 5
41210: PUSH
41211: LD_VAR 0 5
41215: PUSH
41216: LD_VAR 0 17
41220: ISECT
41221: ST_TO_ADDR
// if not list then
41222: LD_VAR 0 5
41226: NOT
41227: IFFALSE 41231
// exit ;
41229: GO 42035
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41231: LD_VAR 0 12
41235: PUSH
41236: LD_INT 3
41238: EQUAL
41239: PUSH
41240: LD_INT 49
41242: PUSH
41243: LD_VAR 0 5
41247: IN
41248: AND
41249: PUSH
41250: LD_INT 31
41252: PPUSH
41253: LD_VAR 0 16
41257: PPUSH
41258: CALL_OW 321
41262: PUSH
41263: LD_INT 2
41265: EQUAL
41266: AND
41267: IFFALSE 41327
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41269: LD_INT 22
41271: PUSH
41272: LD_VAR 0 16
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 35
41283: PUSH
41284: LD_INT 49
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 91
41293: PUSH
41294: LD_VAR 0 1
41298: PUSH
41299: LD_INT 10
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PPUSH
41312: CALL_OW 69
41316: NOT
41317: IFFALSE 41327
// weapon := ru_time_lapser ;
41319: LD_ADDR_VAR 0 18
41323: PUSH
41324: LD_INT 49
41326: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41327: LD_VAR 0 12
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: IN
41342: PUSH
41343: LD_INT 11
41345: PUSH
41346: LD_VAR 0 5
41350: IN
41351: PUSH
41352: LD_INT 30
41354: PUSH
41355: LD_VAR 0 5
41359: IN
41360: OR
41361: AND
41362: PUSH
41363: LD_INT 6
41365: PPUSH
41366: LD_VAR 0 16
41370: PPUSH
41371: CALL_OW 321
41375: PUSH
41376: LD_INT 2
41378: EQUAL
41379: AND
41380: IFFALSE 41545
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41382: LD_INT 22
41384: PUSH
41385: LD_VAR 0 16
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 35
41399: PUSH
41400: LD_INT 11
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 35
41409: PUSH
41410: LD_INT 30
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 91
41424: PUSH
41425: LD_VAR 0 1
41429: PUSH
41430: LD_INT 18
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: PPUSH
41443: CALL_OW 69
41447: NOT
41448: PUSH
41449: LD_INT 22
41451: PUSH
41452: LD_VAR 0 16
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 30
41466: PUSH
41467: LD_INT 32
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 30
41476: PUSH
41477: LD_INT 33
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 91
41491: PUSH
41492: LD_VAR 0 1
41496: PUSH
41497: LD_INT 12
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: PPUSH
41513: CALL_OW 69
41517: PUSH
41518: LD_INT 2
41520: GREATER
41521: AND
41522: IFFALSE 41545
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41524: LD_ADDR_VAR 0 18
41528: PUSH
41529: LD_INT 11
41531: PUSH
41532: LD_INT 30
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_VAR 0 12
41543: ARRAY
41544: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41545: LD_VAR 0 18
41549: NOT
41550: PUSH
41551: LD_INT 40
41553: PPUSH
41554: LD_VAR 0 16
41558: PPUSH
41559: CALL_OW 321
41563: PUSH
41564: LD_INT 2
41566: EQUAL
41567: AND
41568: PUSH
41569: LD_INT 7
41571: PUSH
41572: LD_VAR 0 5
41576: IN
41577: PUSH
41578: LD_INT 28
41580: PUSH
41581: LD_VAR 0 5
41585: IN
41586: OR
41587: PUSH
41588: LD_INT 45
41590: PUSH
41591: LD_VAR 0 5
41595: IN
41596: OR
41597: AND
41598: IFFALSE 41852
// begin hex := GetHexInfo ( x , y ) ;
41600: LD_ADDR_VAR 0 4
41604: PUSH
41605: LD_VAR 0 10
41609: PPUSH
41610: LD_VAR 0 11
41614: PPUSH
41615: CALL_OW 546
41619: ST_TO_ADDR
// if hex [ 1 ] then
41620: LD_VAR 0 4
41624: PUSH
41625: LD_INT 1
41627: ARRAY
41628: IFFALSE 41632
// exit ;
41630: GO 42035
// height := hex [ 2 ] ;
41632: LD_ADDR_VAR 0 15
41636: PUSH
41637: LD_VAR 0 4
41641: PUSH
41642: LD_INT 2
41644: ARRAY
41645: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41646: LD_ADDR_VAR 0 14
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: LD_INT 5
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// for i in tmp do
41669: LD_ADDR_VAR 0 8
41673: PUSH
41674: LD_VAR 0 14
41678: PUSH
41679: FOR_IN
41680: IFFALSE 41850
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41682: LD_ADDR_VAR 0 9
41686: PUSH
41687: LD_VAR 0 10
41691: PPUSH
41692: LD_VAR 0 8
41696: PPUSH
41697: LD_INT 5
41699: PPUSH
41700: CALL_OW 272
41704: PUSH
41705: LD_VAR 0 11
41709: PPUSH
41710: LD_VAR 0 8
41714: PPUSH
41715: LD_INT 5
41717: PPUSH
41718: CALL_OW 273
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41727: LD_VAR 0 9
41731: PUSH
41732: LD_INT 1
41734: ARRAY
41735: PPUSH
41736: LD_VAR 0 9
41740: PUSH
41741: LD_INT 2
41743: ARRAY
41744: PPUSH
41745: CALL_OW 488
41749: IFFALSE 41848
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41751: LD_ADDR_VAR 0 4
41755: PUSH
41756: LD_VAR 0 9
41760: PUSH
41761: LD_INT 1
41763: ARRAY
41764: PPUSH
41765: LD_VAR 0 9
41769: PUSH
41770: LD_INT 2
41772: ARRAY
41773: PPUSH
41774: CALL_OW 546
41778: ST_TO_ADDR
// if hex [ 1 ] then
41779: LD_VAR 0 4
41783: PUSH
41784: LD_INT 1
41786: ARRAY
41787: IFFALSE 41791
// continue ;
41789: GO 41679
// h := hex [ 2 ] ;
41791: LD_ADDR_VAR 0 13
41795: PUSH
41796: LD_VAR 0 4
41800: PUSH
41801: LD_INT 2
41803: ARRAY
41804: ST_TO_ADDR
// if h + 7 < height then
41805: LD_VAR 0 13
41809: PUSH
41810: LD_INT 7
41812: PLUS
41813: PUSH
41814: LD_VAR 0 15
41818: LESS
41819: IFFALSE 41848
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41821: LD_ADDR_VAR 0 18
41825: PUSH
41826: LD_INT 7
41828: PUSH
41829: LD_INT 28
41831: PUSH
41832: LD_INT 45
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: PUSH
41840: LD_VAR 0 12
41844: ARRAY
41845: ST_TO_ADDR
// break ;
41846: GO 41850
// end ; end ; end ;
41848: GO 41679
41850: POP
41851: POP
// end ; if not weapon then
41852: LD_VAR 0 18
41856: NOT
41857: IFFALSE 41917
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_VAR 0 5
41868: PUSH
41869: LD_INT 11
41871: PUSH
41872: LD_INT 30
41874: PUSH
41875: LD_INT 49
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: DIFF
41883: ST_TO_ADDR
// if not list then
41884: LD_VAR 0 5
41888: NOT
41889: IFFALSE 41893
// exit ;
41891: GO 42035
// weapon := list [ rand ( 1 , list ) ] ;
41893: LD_ADDR_VAR 0 18
41897: PUSH
41898: LD_VAR 0 5
41902: PUSH
41903: LD_INT 1
41905: PPUSH
41906: LD_VAR 0 5
41910: PPUSH
41911: CALL_OW 12
41915: ARRAY
41916: ST_TO_ADDR
// end ; if weapon then
41917: LD_VAR 0 18
41921: IFFALSE 42035
// begin tmp := CostOfWeapon ( weapon ) ;
41923: LD_ADDR_VAR 0 14
41927: PUSH
41928: LD_VAR 0 18
41932: PPUSH
41933: CALL_OW 451
41937: ST_TO_ADDR
// j := GetBase ( tower ) ;
41938: LD_ADDR_VAR 0 9
41942: PUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: CALL_OW 274
41952: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41953: LD_VAR 0 9
41957: PPUSH
41958: LD_INT 1
41960: PPUSH
41961: CALL_OW 275
41965: PUSH
41966: LD_VAR 0 14
41970: PUSH
41971: LD_INT 1
41973: ARRAY
41974: GREATEREQUAL
41975: PUSH
41976: LD_VAR 0 9
41980: PPUSH
41981: LD_INT 2
41983: PPUSH
41984: CALL_OW 275
41988: PUSH
41989: LD_VAR 0 14
41993: PUSH
41994: LD_INT 2
41996: ARRAY
41997: GREATEREQUAL
41998: AND
41999: PUSH
42000: LD_VAR 0 9
42004: PPUSH
42005: LD_INT 3
42007: PPUSH
42008: CALL_OW 275
42012: PUSH
42013: LD_VAR 0 14
42017: PUSH
42018: LD_INT 3
42020: ARRAY
42021: GREATEREQUAL
42022: AND
42023: IFFALSE 42035
// result := weapon ;
42025: LD_ADDR_VAR 0 3
42029: PUSH
42030: LD_VAR 0 18
42034: ST_TO_ADDR
// end ; end ;
42035: LD_VAR 0 3
42039: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42040: LD_INT 0
42042: PPUSH
42043: PPUSH
// result := true ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_INT 1
42051: ST_TO_ADDR
// if array1 = array2 then
42052: LD_VAR 0 1
42056: PUSH
42057: LD_VAR 0 2
42061: EQUAL
42062: IFFALSE 42122
// begin for i = 1 to array1 do
42064: LD_ADDR_VAR 0 4
42068: PUSH
42069: DOUBLE
42070: LD_INT 1
42072: DEC
42073: ST_TO_ADDR
42074: LD_VAR 0 1
42078: PUSH
42079: FOR_TO
42080: IFFALSE 42118
// if array1 [ i ] <> array2 [ i ] then
42082: LD_VAR 0 1
42086: PUSH
42087: LD_VAR 0 4
42091: ARRAY
42092: PUSH
42093: LD_VAR 0 2
42097: PUSH
42098: LD_VAR 0 4
42102: ARRAY
42103: NONEQUAL
42104: IFFALSE 42116
// begin result := false ;
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_INT 0
42113: ST_TO_ADDR
// break ;
42114: GO 42118
// end ;
42116: GO 42079
42118: POP
42119: POP
// end else
42120: GO 42130
// result := false ;
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_INT 0
42129: ST_TO_ADDR
// end ;
42130: LD_VAR 0 3
42134: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42135: LD_INT 0
42137: PPUSH
42138: PPUSH
// if not array1 or not array2 then
42139: LD_VAR 0 1
42143: NOT
42144: PUSH
42145: LD_VAR 0 2
42149: NOT
42150: OR
42151: IFFALSE 42155
// exit ;
42153: GO 42219
// result := true ;
42155: LD_ADDR_VAR 0 3
42159: PUSH
42160: LD_INT 1
42162: ST_TO_ADDR
// for i = 1 to array1 do
42163: LD_ADDR_VAR 0 4
42167: PUSH
42168: DOUBLE
42169: LD_INT 1
42171: DEC
42172: ST_TO_ADDR
42173: LD_VAR 0 1
42177: PUSH
42178: FOR_TO
42179: IFFALSE 42217
// if array1 [ i ] <> array2 [ i ] then
42181: LD_VAR 0 1
42185: PUSH
42186: LD_VAR 0 4
42190: ARRAY
42191: PUSH
42192: LD_VAR 0 2
42196: PUSH
42197: LD_VAR 0 4
42201: ARRAY
42202: NONEQUAL
42203: IFFALSE 42215
// begin result := false ;
42205: LD_ADDR_VAR 0 3
42209: PUSH
42210: LD_INT 0
42212: ST_TO_ADDR
// break ;
42213: GO 42217
// end ;
42215: GO 42178
42217: POP
42218: POP
// end ;
42219: LD_VAR 0 3
42223: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42224: LD_INT 0
42226: PPUSH
42227: PPUSH
42228: PPUSH
// pom := GetBase ( fac ) ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: CALL_OW 274
42243: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42244: LD_ADDR_VAR 0 4
42248: PUSH
42249: LD_VAR 0 2
42253: PUSH
42254: LD_INT 1
42256: ARRAY
42257: PPUSH
42258: LD_VAR 0 2
42262: PUSH
42263: LD_INT 2
42265: ARRAY
42266: PPUSH
42267: LD_VAR 0 2
42271: PUSH
42272: LD_INT 3
42274: ARRAY
42275: PPUSH
42276: LD_VAR 0 2
42280: PUSH
42281: LD_INT 4
42283: ARRAY
42284: PPUSH
42285: CALL_OW 449
42289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_VAR 0 5
42299: PPUSH
42300: LD_INT 1
42302: PPUSH
42303: CALL_OW 275
42307: PUSH
42308: LD_VAR 0 4
42312: PUSH
42313: LD_INT 1
42315: ARRAY
42316: GREATEREQUAL
42317: PUSH
42318: LD_VAR 0 5
42322: PPUSH
42323: LD_INT 2
42325: PPUSH
42326: CALL_OW 275
42330: PUSH
42331: LD_VAR 0 4
42335: PUSH
42336: LD_INT 2
42338: ARRAY
42339: GREATEREQUAL
42340: AND
42341: PUSH
42342: LD_VAR 0 5
42346: PPUSH
42347: LD_INT 3
42349: PPUSH
42350: CALL_OW 275
42354: PUSH
42355: LD_VAR 0 4
42359: PUSH
42360: LD_INT 3
42362: ARRAY
42363: GREATEREQUAL
42364: AND
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 3
42370: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
// pom := GetBase ( building ) ;
42377: LD_ADDR_VAR 0 3
42381: PUSH
42382: LD_VAR 0 1
42386: PPUSH
42387: CALL_OW 274
42391: ST_TO_ADDR
// if not pom then
42392: LD_VAR 0 3
42396: NOT
42397: IFFALSE 42401
// exit ;
42399: GO 42571
// btype := GetBType ( building ) ;
42401: LD_ADDR_VAR 0 5
42405: PUSH
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 266
42415: ST_TO_ADDR
// if btype = b_armoury then
42416: LD_VAR 0 5
42420: PUSH
42421: LD_INT 4
42423: EQUAL
42424: IFFALSE 42434
// btype := b_barracks ;
42426: LD_ADDR_VAR 0 5
42430: PUSH
42431: LD_INT 5
42433: ST_TO_ADDR
// if btype = b_depot then
42434: LD_VAR 0 5
42438: PUSH
42439: LD_INT 0
42441: EQUAL
42442: IFFALSE 42452
// btype := b_warehouse ;
42444: LD_ADDR_VAR 0 5
42448: PUSH
42449: LD_INT 1
42451: ST_TO_ADDR
// if btype = b_workshop then
42452: LD_VAR 0 5
42456: PUSH
42457: LD_INT 2
42459: EQUAL
42460: IFFALSE 42470
// btype := b_factory ;
42462: LD_ADDR_VAR 0 5
42466: PUSH
42467: LD_INT 3
42469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42470: LD_ADDR_VAR 0 4
42474: PUSH
42475: LD_VAR 0 5
42479: PPUSH
42480: LD_VAR 0 1
42484: PPUSH
42485: CALL_OW 248
42489: PPUSH
42490: CALL_OW 450
42494: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42495: LD_ADDR_VAR 0 2
42499: PUSH
42500: LD_VAR 0 3
42504: PPUSH
42505: LD_INT 1
42507: PPUSH
42508: CALL_OW 275
42512: PUSH
42513: LD_VAR 0 4
42517: PUSH
42518: LD_INT 1
42520: ARRAY
42521: GREATEREQUAL
42522: PUSH
42523: LD_VAR 0 3
42527: PPUSH
42528: LD_INT 2
42530: PPUSH
42531: CALL_OW 275
42535: PUSH
42536: LD_VAR 0 4
42540: PUSH
42541: LD_INT 2
42543: ARRAY
42544: GREATEREQUAL
42545: AND
42546: PUSH
42547: LD_VAR 0 3
42551: PPUSH
42552: LD_INT 3
42554: PPUSH
42555: CALL_OW 275
42559: PUSH
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 3
42567: ARRAY
42568: GREATEREQUAL
42569: AND
42570: ST_TO_ADDR
// end ;
42571: LD_VAR 0 2
42575: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42576: LD_INT 0
42578: PPUSH
42579: PPUSH
42580: PPUSH
// pom := GetBase ( building ) ;
42581: LD_ADDR_VAR 0 4
42585: PUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 274
42595: ST_TO_ADDR
// if not pom then
42596: LD_VAR 0 4
42600: NOT
42601: IFFALSE 42605
// exit ;
42603: GO 42706
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42605: LD_ADDR_VAR 0 5
42609: PUSH
42610: LD_VAR 0 2
42614: PPUSH
42615: LD_VAR 0 1
42619: PPUSH
42620: CALL_OW 248
42624: PPUSH
42625: CALL_OW 450
42629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_VAR 0 4
42639: PPUSH
42640: LD_INT 1
42642: PPUSH
42643: CALL_OW 275
42647: PUSH
42648: LD_VAR 0 5
42652: PUSH
42653: LD_INT 1
42655: ARRAY
42656: GREATEREQUAL
42657: PUSH
42658: LD_VAR 0 4
42662: PPUSH
42663: LD_INT 2
42665: PPUSH
42666: CALL_OW 275
42670: PUSH
42671: LD_VAR 0 5
42675: PUSH
42676: LD_INT 2
42678: ARRAY
42679: GREATEREQUAL
42680: AND
42681: PUSH
42682: LD_VAR 0 4
42686: PPUSH
42687: LD_INT 3
42689: PPUSH
42690: CALL_OW 275
42694: PUSH
42695: LD_VAR 0 5
42699: PUSH
42700: LD_INT 3
42702: ARRAY
42703: GREATEREQUAL
42704: AND
42705: ST_TO_ADDR
// end ;
42706: LD_VAR 0 3
42710: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42711: LD_INT 0
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
// result := false ;
42724: LD_ADDR_VAR 0 8
42728: PUSH
42729: LD_INT 0
42731: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42732: LD_VAR 0 5
42736: NOT
42737: PUSH
42738: LD_VAR 0 1
42742: NOT
42743: OR
42744: PUSH
42745: LD_VAR 0 2
42749: NOT
42750: OR
42751: PUSH
42752: LD_VAR 0 3
42756: NOT
42757: OR
42758: IFFALSE 42762
// exit ;
42760: GO 43576
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42762: LD_ADDR_VAR 0 14
42766: PUSH
42767: LD_VAR 0 1
42771: PPUSH
42772: LD_VAR 0 2
42776: PPUSH
42777: LD_VAR 0 3
42781: PPUSH
42782: LD_VAR 0 4
42786: PPUSH
42787: LD_VAR 0 5
42791: PUSH
42792: LD_INT 1
42794: ARRAY
42795: PPUSH
42796: CALL_OW 248
42800: PPUSH
42801: LD_INT 0
42803: PPUSH
42804: CALL 44829 0 6
42808: ST_TO_ADDR
// if not hexes then
42809: LD_VAR 0 14
42813: NOT
42814: IFFALSE 42818
// exit ;
42816: GO 43576
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42818: LD_ADDR_VAR 0 17
42822: PUSH
42823: LD_VAR 0 5
42827: PPUSH
42828: LD_INT 22
42830: PUSH
42831: LD_VAR 0 13
42835: PPUSH
42836: CALL_OW 255
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 30
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 30
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PPUSH
42877: CALL_OW 72
42881: ST_TO_ADDR
// for i = 1 to hexes do
42882: LD_ADDR_VAR 0 9
42886: PUSH
42887: DOUBLE
42888: LD_INT 1
42890: DEC
42891: ST_TO_ADDR
42892: LD_VAR 0 14
42896: PUSH
42897: FOR_TO
42898: IFFALSE 43574
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42900: LD_ADDR_VAR 0 13
42904: PUSH
42905: LD_VAR 0 14
42909: PUSH
42910: LD_VAR 0 9
42914: ARRAY
42915: PUSH
42916: LD_INT 1
42918: ARRAY
42919: PPUSH
42920: LD_VAR 0 14
42924: PUSH
42925: LD_VAR 0 9
42929: ARRAY
42930: PUSH
42931: LD_INT 2
42933: ARRAY
42934: PPUSH
42935: CALL_OW 428
42939: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42940: LD_VAR 0 14
42944: PUSH
42945: LD_VAR 0 9
42949: ARRAY
42950: PUSH
42951: LD_INT 1
42953: ARRAY
42954: PPUSH
42955: LD_VAR 0 14
42959: PUSH
42960: LD_VAR 0 9
42964: ARRAY
42965: PUSH
42966: LD_INT 2
42968: ARRAY
42969: PPUSH
42970: CALL_OW 351
42974: PUSH
42975: LD_VAR 0 14
42979: PUSH
42980: LD_VAR 0 9
42984: ARRAY
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PPUSH
42990: LD_VAR 0 14
42994: PUSH
42995: LD_VAR 0 9
42999: ARRAY
43000: PUSH
43001: LD_INT 2
43003: ARRAY
43004: PPUSH
43005: CALL_OW 488
43009: NOT
43010: OR
43011: PUSH
43012: LD_VAR 0 13
43016: PPUSH
43017: CALL_OW 247
43021: PUSH
43022: LD_INT 3
43024: EQUAL
43025: OR
43026: IFFALSE 43032
// exit ;
43028: POP
43029: POP
43030: GO 43576
// if not tmp then
43032: LD_VAR 0 13
43036: NOT
43037: IFFALSE 43041
// continue ;
43039: GO 42897
// result := true ;
43041: LD_ADDR_VAR 0 8
43045: PUSH
43046: LD_INT 1
43048: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43049: LD_VAR 0 6
43053: PUSH
43054: LD_VAR 0 13
43058: PPUSH
43059: CALL_OW 247
43063: PUSH
43064: LD_INT 2
43066: EQUAL
43067: AND
43068: PUSH
43069: LD_VAR 0 13
43073: PPUSH
43074: CALL_OW 263
43078: PUSH
43079: LD_INT 1
43081: EQUAL
43082: AND
43083: IFFALSE 43247
// begin if IsDrivenBy ( tmp ) then
43085: LD_VAR 0 13
43089: PPUSH
43090: CALL_OW 311
43094: IFFALSE 43098
// continue ;
43096: GO 42897
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43098: LD_VAR 0 6
43102: PPUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 60
43108: PUSH
43109: EMPTY
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 55
43121: PUSH
43122: EMPTY
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PPUSH
43133: CALL_OW 72
43137: IFFALSE 43245
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43139: LD_ADDR_VAR 0 18
43143: PUSH
43144: LD_VAR 0 6
43148: PPUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 60
43154: PUSH
43155: EMPTY
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: LD_INT 55
43167: PUSH
43168: EMPTY
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PPUSH
43179: CALL_OW 72
43183: PUSH
43184: LD_INT 1
43186: ARRAY
43187: ST_TO_ADDR
// if IsInUnit ( driver ) then
43188: LD_VAR 0 18
43192: PPUSH
43193: CALL_OW 310
43197: IFFALSE 43208
// ComExit ( driver ) ;
43199: LD_VAR 0 18
43203: PPUSH
43204: CALL 68621 0 1
// AddComEnterUnit ( driver , tmp ) ;
43208: LD_VAR 0 18
43212: PPUSH
43213: LD_VAR 0 13
43217: PPUSH
43218: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43222: LD_VAR 0 18
43226: PPUSH
43227: LD_VAR 0 7
43231: PPUSH
43232: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43236: LD_VAR 0 18
43240: PPUSH
43241: CALL_OW 181
// end ; continue ;
43245: GO 42897
// end ; if not cleaners or not tmp in cleaners then
43247: LD_VAR 0 6
43251: NOT
43252: PUSH
43253: LD_VAR 0 13
43257: PUSH
43258: LD_VAR 0 6
43262: IN
43263: NOT
43264: OR
43265: IFFALSE 43572
// begin if dep then
43267: LD_VAR 0 17
43271: IFFALSE 43407
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43273: LD_ADDR_VAR 0 16
43277: PUSH
43278: LD_VAR 0 17
43282: PUSH
43283: LD_INT 1
43285: ARRAY
43286: PPUSH
43287: CALL_OW 250
43291: PPUSH
43292: LD_VAR 0 17
43296: PUSH
43297: LD_INT 1
43299: ARRAY
43300: PPUSH
43301: CALL_OW 254
43305: PPUSH
43306: LD_INT 5
43308: PPUSH
43309: CALL_OW 272
43313: PUSH
43314: LD_VAR 0 17
43318: PUSH
43319: LD_INT 1
43321: ARRAY
43322: PPUSH
43323: CALL_OW 251
43327: PPUSH
43328: LD_VAR 0 17
43332: PUSH
43333: LD_INT 1
43335: ARRAY
43336: PPUSH
43337: CALL_OW 254
43341: PPUSH
43342: LD_INT 5
43344: PPUSH
43345: CALL_OW 273
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43354: LD_VAR 0 16
43358: PUSH
43359: LD_INT 1
43361: ARRAY
43362: PPUSH
43363: LD_VAR 0 16
43367: PUSH
43368: LD_INT 2
43370: ARRAY
43371: PPUSH
43372: CALL_OW 488
43376: IFFALSE 43407
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43378: LD_VAR 0 13
43382: PPUSH
43383: LD_VAR 0 16
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: PPUSH
43392: LD_VAR 0 16
43396: PUSH
43397: LD_INT 2
43399: ARRAY
43400: PPUSH
43401: CALL_OW 111
// continue ;
43405: GO 42897
// end ; end ; r := GetDir ( tmp ) ;
43407: LD_ADDR_VAR 0 15
43411: PUSH
43412: LD_VAR 0 13
43416: PPUSH
43417: CALL_OW 254
43421: ST_TO_ADDR
// if r = 5 then
43422: LD_VAR 0 15
43426: PUSH
43427: LD_INT 5
43429: EQUAL
43430: IFFALSE 43440
// r := 0 ;
43432: LD_ADDR_VAR 0 15
43436: PUSH
43437: LD_INT 0
43439: ST_TO_ADDR
// for j = r to 5 do
43440: LD_ADDR_VAR 0 10
43444: PUSH
43445: DOUBLE
43446: LD_VAR 0 15
43450: DEC
43451: ST_TO_ADDR
43452: LD_INT 5
43454: PUSH
43455: FOR_TO
43456: IFFALSE 43570
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43458: LD_ADDR_VAR 0 11
43462: PUSH
43463: LD_VAR 0 13
43467: PPUSH
43468: CALL_OW 250
43472: PPUSH
43473: LD_VAR 0 10
43477: PPUSH
43478: LD_INT 2
43480: PPUSH
43481: CALL_OW 272
43485: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43486: LD_ADDR_VAR 0 12
43490: PUSH
43491: LD_VAR 0 13
43495: PPUSH
43496: CALL_OW 251
43500: PPUSH
43501: LD_VAR 0 10
43505: PPUSH
43506: LD_INT 2
43508: PPUSH
43509: CALL_OW 273
43513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43514: LD_VAR 0 11
43518: PPUSH
43519: LD_VAR 0 12
43523: PPUSH
43524: CALL_OW 488
43528: PUSH
43529: LD_VAR 0 11
43533: PPUSH
43534: LD_VAR 0 12
43538: PPUSH
43539: CALL_OW 428
43543: NOT
43544: AND
43545: IFFALSE 43568
// begin ComMoveXY ( tmp , _x , _y ) ;
43547: LD_VAR 0 13
43551: PPUSH
43552: LD_VAR 0 11
43556: PPUSH
43557: LD_VAR 0 12
43561: PPUSH
43562: CALL_OW 111
// break ;
43566: GO 43570
// end ; end ;
43568: GO 43455
43570: POP
43571: POP
// end ; end ;
43572: GO 42897
43574: POP
43575: POP
// end ;
43576: LD_VAR 0 8
43580: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43581: LD_INT 0
43583: PPUSH
// result := true ;
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_INT 1
43591: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43592: LD_VAR 0 2
43596: PUSH
43597: LD_INT 24
43599: DOUBLE
43600: EQUAL
43601: IFTRUE 43611
43603: LD_INT 33
43605: DOUBLE
43606: EQUAL
43607: IFTRUE 43611
43609: GO 43636
43611: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43612: LD_ADDR_VAR 0 3
43616: PUSH
43617: LD_INT 32
43619: PPUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: CALL_OW 321
43629: PUSH
43630: LD_INT 2
43632: EQUAL
43633: ST_TO_ADDR
43634: GO 43952
43636: LD_INT 20
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43669
43644: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 6
43652: PPUSH
43653: LD_VAR 0 1
43657: PPUSH
43658: CALL_OW 321
43662: PUSH
43663: LD_INT 2
43665: EQUAL
43666: ST_TO_ADDR
43667: GO 43952
43669: LD_INT 22
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43683
43675: LD_INT 36
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43708
43683: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_INT 15
43691: PPUSH
43692: LD_VAR 0 1
43696: PPUSH
43697: CALL_OW 321
43701: PUSH
43702: LD_INT 2
43704: EQUAL
43705: ST_TO_ADDR
43706: GO 43952
43708: LD_INT 30
43710: DOUBLE
43711: EQUAL
43712: IFTRUE 43716
43714: GO 43741
43716: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 20
43724: PPUSH
43725: LD_VAR 0 1
43729: PPUSH
43730: CALL_OW 321
43734: PUSH
43735: LD_INT 2
43737: EQUAL
43738: ST_TO_ADDR
43739: GO 43952
43741: LD_INT 28
43743: DOUBLE
43744: EQUAL
43745: IFTRUE 43755
43747: LD_INT 21
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 43780
43755: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43756: LD_ADDR_VAR 0 3
43760: PUSH
43761: LD_INT 21
43763: PPUSH
43764: LD_VAR 0 1
43768: PPUSH
43769: CALL_OW 321
43773: PUSH
43774: LD_INT 2
43776: EQUAL
43777: ST_TO_ADDR
43778: GO 43952
43780: LD_INT 16
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43788
43786: GO 43813
43788: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43789: LD_ADDR_VAR 0 3
43793: PUSH
43794: LD_INT 84
43796: PPUSH
43797: LD_VAR 0 1
43801: PPUSH
43802: CALL_OW 321
43806: PUSH
43807: LD_INT 2
43809: EQUAL
43810: ST_TO_ADDR
43811: GO 43952
43813: LD_INT 19
43815: DOUBLE
43816: EQUAL
43817: IFTRUE 43827
43819: LD_INT 23
43821: DOUBLE
43822: EQUAL
43823: IFTRUE 43827
43825: GO 43852
43827: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_INT 83
43835: PPUSH
43836: LD_VAR 0 1
43840: PPUSH
43841: CALL_OW 321
43845: PUSH
43846: LD_INT 2
43848: EQUAL
43849: ST_TO_ADDR
43850: GO 43952
43852: LD_INT 17
43854: DOUBLE
43855: EQUAL
43856: IFTRUE 43860
43858: GO 43885
43860: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43861: LD_ADDR_VAR 0 3
43865: PUSH
43866: LD_INT 39
43868: PPUSH
43869: LD_VAR 0 1
43873: PPUSH
43874: CALL_OW 321
43878: PUSH
43879: LD_INT 2
43881: EQUAL
43882: ST_TO_ADDR
43883: GO 43952
43885: LD_INT 18
43887: DOUBLE
43888: EQUAL
43889: IFTRUE 43893
43891: GO 43918
43893: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43894: LD_ADDR_VAR 0 3
43898: PUSH
43899: LD_INT 40
43901: PPUSH
43902: LD_VAR 0 1
43906: PPUSH
43907: CALL_OW 321
43911: PUSH
43912: LD_INT 2
43914: EQUAL
43915: ST_TO_ADDR
43916: GO 43952
43918: LD_INT 27
43920: DOUBLE
43921: EQUAL
43922: IFTRUE 43926
43924: GO 43951
43926: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43927: LD_ADDR_VAR 0 3
43931: PUSH
43932: LD_INT 35
43934: PPUSH
43935: LD_VAR 0 1
43939: PPUSH
43940: CALL_OW 321
43944: PUSH
43945: LD_INT 2
43947: EQUAL
43948: ST_TO_ADDR
43949: GO 43952
43951: POP
// end ;
43952: LD_VAR 0 3
43956: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43957: LD_INT 0
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
// result := false ;
43970: LD_ADDR_VAR 0 6
43974: PUSH
43975: LD_INT 0
43977: ST_TO_ADDR
// if btype = b_depot then
43978: LD_VAR 0 2
43982: PUSH
43983: LD_INT 0
43985: EQUAL
43986: IFFALSE 43998
// begin result := true ;
43988: LD_ADDR_VAR 0 6
43992: PUSH
43993: LD_INT 1
43995: ST_TO_ADDR
// exit ;
43996: GO 44824
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43998: LD_VAR 0 1
44002: NOT
44003: PUSH
44004: LD_VAR 0 1
44008: PPUSH
44009: CALL_OW 266
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: IN
44024: NOT
44025: OR
44026: PUSH
44027: LD_VAR 0 2
44031: NOT
44032: OR
44033: PUSH
44034: LD_VAR 0 5
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 3
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: LD_INT 5
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: IN
44065: NOT
44066: OR
44067: PUSH
44068: LD_VAR 0 3
44072: PPUSH
44073: LD_VAR 0 4
44077: PPUSH
44078: CALL_OW 488
44082: NOT
44083: OR
44084: IFFALSE 44088
// exit ;
44086: GO 44824
// side := GetSide ( depot ) ;
44088: LD_ADDR_VAR 0 9
44092: PUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 255
44102: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44103: LD_VAR 0 9
44107: PPUSH
44108: LD_VAR 0 2
44112: PPUSH
44113: CALL 43581 0 2
44117: NOT
44118: IFFALSE 44122
// exit ;
44120: GO 44824
// pom := GetBase ( depot ) ;
44122: LD_ADDR_VAR 0 10
44126: PUSH
44127: LD_VAR 0 1
44131: PPUSH
44132: CALL_OW 274
44136: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44137: LD_ADDR_VAR 0 11
44141: PUSH
44142: LD_VAR 0 2
44146: PPUSH
44147: LD_VAR 0 1
44151: PPUSH
44152: CALL_OW 248
44156: PPUSH
44157: CALL_OW 450
44161: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44162: LD_VAR 0 10
44166: PPUSH
44167: LD_INT 1
44169: PPUSH
44170: CALL_OW 275
44174: PUSH
44175: LD_VAR 0 11
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: GREATEREQUAL
44184: PUSH
44185: LD_VAR 0 10
44189: PPUSH
44190: LD_INT 2
44192: PPUSH
44193: CALL_OW 275
44197: PUSH
44198: LD_VAR 0 11
44202: PUSH
44203: LD_INT 2
44205: ARRAY
44206: GREATEREQUAL
44207: AND
44208: PUSH
44209: LD_VAR 0 10
44213: PPUSH
44214: LD_INT 3
44216: PPUSH
44217: CALL_OW 275
44221: PUSH
44222: LD_VAR 0 11
44226: PUSH
44227: LD_INT 3
44229: ARRAY
44230: GREATEREQUAL
44231: AND
44232: NOT
44233: IFFALSE 44237
// exit ;
44235: GO 44824
// if GetBType ( depot ) = b_depot then
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 266
44246: PUSH
44247: LD_INT 0
44249: EQUAL
44250: IFFALSE 44262
// dist := 28 else
44252: LD_ADDR_VAR 0 14
44256: PUSH
44257: LD_INT 28
44259: ST_TO_ADDR
44260: GO 44270
// dist := 36 ;
44262: LD_ADDR_VAR 0 14
44266: PUSH
44267: LD_INT 36
44269: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44270: LD_VAR 0 1
44274: PPUSH
44275: LD_VAR 0 3
44279: PPUSH
44280: LD_VAR 0 4
44284: PPUSH
44285: CALL_OW 297
44289: PUSH
44290: LD_VAR 0 14
44294: GREATER
44295: IFFALSE 44299
// exit ;
44297: GO 44824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44299: LD_ADDR_VAR 0 12
44303: PUSH
44304: LD_VAR 0 2
44308: PPUSH
44309: LD_VAR 0 3
44313: PPUSH
44314: LD_VAR 0 4
44318: PPUSH
44319: LD_VAR 0 5
44323: PPUSH
44324: LD_VAR 0 1
44328: PPUSH
44329: CALL_OW 248
44333: PPUSH
44334: LD_INT 0
44336: PPUSH
44337: CALL 44829 0 6
44341: ST_TO_ADDR
// if not hexes then
44342: LD_VAR 0 12
44346: NOT
44347: IFFALSE 44351
// exit ;
44349: GO 44824
// hex := GetHexInfo ( x , y ) ;
44351: LD_ADDR_VAR 0 15
44355: PUSH
44356: LD_VAR 0 3
44360: PPUSH
44361: LD_VAR 0 4
44365: PPUSH
44366: CALL_OW 546
44370: ST_TO_ADDR
// if hex [ 1 ] then
44371: LD_VAR 0 15
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: IFFALSE 44383
// exit ;
44381: GO 44824
// height := hex [ 2 ] ;
44383: LD_ADDR_VAR 0 13
44387: PUSH
44388: LD_VAR 0 15
44392: PUSH
44393: LD_INT 2
44395: ARRAY
44396: ST_TO_ADDR
// for i = 1 to hexes do
44397: LD_ADDR_VAR 0 7
44401: PUSH
44402: DOUBLE
44403: LD_INT 1
44405: DEC
44406: ST_TO_ADDR
44407: LD_VAR 0 12
44411: PUSH
44412: FOR_TO
44413: IFFALSE 44743
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44415: LD_VAR 0 12
44419: PUSH
44420: LD_VAR 0 7
44424: ARRAY
44425: PUSH
44426: LD_INT 1
44428: ARRAY
44429: PPUSH
44430: LD_VAR 0 12
44434: PUSH
44435: LD_VAR 0 7
44439: ARRAY
44440: PUSH
44441: LD_INT 2
44443: ARRAY
44444: PPUSH
44445: CALL_OW 488
44449: NOT
44450: PUSH
44451: LD_VAR 0 12
44455: PUSH
44456: LD_VAR 0 7
44460: ARRAY
44461: PUSH
44462: LD_INT 1
44464: ARRAY
44465: PPUSH
44466: LD_VAR 0 12
44470: PUSH
44471: LD_VAR 0 7
44475: ARRAY
44476: PUSH
44477: LD_INT 2
44479: ARRAY
44480: PPUSH
44481: CALL_OW 428
44485: PUSH
44486: LD_INT 0
44488: GREATER
44489: OR
44490: PUSH
44491: LD_VAR 0 12
44495: PUSH
44496: LD_VAR 0 7
44500: ARRAY
44501: PUSH
44502: LD_INT 1
44504: ARRAY
44505: PPUSH
44506: LD_VAR 0 12
44510: PUSH
44511: LD_VAR 0 7
44515: ARRAY
44516: PUSH
44517: LD_INT 2
44519: ARRAY
44520: PPUSH
44521: CALL_OW 351
44525: OR
44526: IFFALSE 44532
// exit ;
44528: POP
44529: POP
44530: GO 44824
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44532: LD_ADDR_VAR 0 8
44536: PUSH
44537: LD_VAR 0 12
44541: PUSH
44542: LD_VAR 0 7
44546: ARRAY
44547: PUSH
44548: LD_INT 1
44550: ARRAY
44551: PPUSH
44552: LD_VAR 0 12
44556: PUSH
44557: LD_VAR 0 7
44561: ARRAY
44562: PUSH
44563: LD_INT 2
44565: ARRAY
44566: PPUSH
44567: CALL_OW 546
44571: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44572: LD_VAR 0 8
44576: PUSH
44577: LD_INT 1
44579: ARRAY
44580: PUSH
44581: LD_VAR 0 8
44585: PUSH
44586: LD_INT 2
44588: ARRAY
44589: PUSH
44590: LD_VAR 0 13
44594: PUSH
44595: LD_INT 2
44597: PLUS
44598: GREATER
44599: OR
44600: PUSH
44601: LD_VAR 0 8
44605: PUSH
44606: LD_INT 2
44608: ARRAY
44609: PUSH
44610: LD_VAR 0 13
44614: PUSH
44615: LD_INT 2
44617: MINUS
44618: LESS
44619: OR
44620: PUSH
44621: LD_VAR 0 8
44625: PUSH
44626: LD_INT 3
44628: ARRAY
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 8
44635: PUSH
44636: LD_INT 9
44638: PUSH
44639: LD_INT 10
44641: PUSH
44642: LD_INT 11
44644: PUSH
44645: LD_INT 12
44647: PUSH
44648: LD_INT 13
44650: PUSH
44651: LD_INT 16
44653: PUSH
44654: LD_INT 17
44656: PUSH
44657: LD_INT 18
44659: PUSH
44660: LD_INT 19
44662: PUSH
44663: LD_INT 20
44665: PUSH
44666: LD_INT 21
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: IN
44684: NOT
44685: OR
44686: PUSH
44687: LD_VAR 0 8
44691: PUSH
44692: LD_INT 5
44694: ARRAY
44695: NOT
44696: OR
44697: PUSH
44698: LD_VAR 0 8
44702: PUSH
44703: LD_INT 6
44705: ARRAY
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 7
44715: PUSH
44716: LD_INT 9
44718: PUSH
44719: LD_INT 10
44721: PUSH
44722: LD_INT 11
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: IN
44733: NOT
44734: OR
44735: IFFALSE 44741
// exit ;
44737: POP
44738: POP
44739: GO 44824
// end ;
44741: GO 44412
44743: POP
44744: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44745: LD_VAR 0 9
44749: PPUSH
44750: LD_VAR 0 3
44754: PPUSH
44755: LD_VAR 0 4
44759: PPUSH
44760: LD_INT 20
44762: PPUSH
44763: CALL 36747 0 4
44767: PUSH
44768: LD_INT 4
44770: ARRAY
44771: IFFALSE 44775
// exit ;
44773: GO 44824
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44775: LD_VAR 0 2
44779: PUSH
44780: LD_INT 29
44782: PUSH
44783: LD_INT 30
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: IN
44790: PUSH
44791: LD_VAR 0 3
44795: PPUSH
44796: LD_VAR 0 4
44800: PPUSH
44801: LD_VAR 0 9
44805: PPUSH
44806: CALL_OW 440
44810: NOT
44811: AND
44812: IFFALSE 44816
// exit ;
44814: GO 44824
// result := true ;
44816: LD_ADDR_VAR 0 6
44820: PUSH
44821: LD_INT 1
44823: ST_TO_ADDR
// end ;
44824: LD_VAR 0 6
44828: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44829: LD_INT 0
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
// result = [ ] ;
44889: LD_ADDR_VAR 0 7
44893: PUSH
44894: EMPTY
44895: ST_TO_ADDR
// temp_list = [ ] ;
44896: LD_ADDR_VAR 0 9
44900: PUSH
44901: EMPTY
44902: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44903: LD_VAR 0 4
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 3
44919: PUSH
44920: LD_INT 4
44922: PUSH
44923: LD_INT 5
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: IN
44934: NOT
44935: PUSH
44936: LD_VAR 0 1
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: IN
44951: PUSH
44952: LD_VAR 0 5
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: IN
44971: NOT
44972: AND
44973: OR
44974: IFFALSE 44978
// exit ;
44976: GO 63369
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44978: LD_VAR 0 1
44982: PUSH
44983: LD_INT 6
44985: PUSH
44986: LD_INT 7
44988: PUSH
44989: LD_INT 8
44991: PUSH
44992: LD_INT 13
44994: PUSH
44995: LD_INT 12
44997: PUSH
44998: LD_INT 15
45000: PUSH
45001: LD_INT 11
45003: PUSH
45004: LD_INT 14
45006: PUSH
45007: LD_INT 10
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: IN
45021: IFFALSE 45031
// btype = b_lab ;
45023: LD_ADDR_VAR 0 1
45027: PUSH
45028: LD_INT 6
45030: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45031: LD_VAR 0 6
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: IN
45050: NOT
45051: PUSH
45052: LD_VAR 0 1
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: LD_INT 6
45071: PUSH
45072: LD_INT 36
45074: PUSH
45075: LD_INT 4
45077: PUSH
45078: LD_INT 5
45080: PUSH
45081: LD_INT 31
45083: PUSH
45084: LD_INT 32
45086: PUSH
45087: LD_INT 33
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: IN
45103: NOT
45104: PUSH
45105: LD_VAR 0 6
45109: PUSH
45110: LD_INT 1
45112: EQUAL
45113: AND
45114: OR
45115: PUSH
45116: LD_VAR 0 1
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: IN
45131: NOT
45132: PUSH
45133: LD_VAR 0 6
45137: PUSH
45138: LD_INT 2
45140: EQUAL
45141: AND
45142: OR
45143: IFFALSE 45153
// mode = 0 ;
45145: LD_ADDR_VAR 0 6
45149: PUSH
45150: LD_INT 0
45152: ST_TO_ADDR
// case mode of 0 :
45153: LD_VAR 0 6
45157: PUSH
45158: LD_INT 0
45160: DOUBLE
45161: EQUAL
45162: IFTRUE 45166
45164: GO 56619
45166: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45167: LD_ADDR_VAR 0 11
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45360: LD_ADDR_VAR 0 12
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45556: LD_ADDR_VAR 0 13
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: NEG
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 3
45727: NEG
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45755: LD_ADDR_VAR 0 14
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45951: LD_ADDR_VAR 0 15
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46144: LD_ADDR_VAR 0 16
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46337: LD_ADDR_VAR 0 17
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46567: LD_ADDR_VAR 0 18
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46797: LD_ADDR_VAR 0 19
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47027: LD_ADDR_VAR 0 20
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47257: LD_ADDR_VAR 0 21
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47487: LD_ADDR_VAR 0 22
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47717: LD_ADDR_VAR 0 23
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 3
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47997: LD_ADDR_VAR 0 24
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48273: LD_ADDR_VAR 0 25
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 3
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48547: LD_ADDR_VAR 0 26
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48823: LD_ADDR_VAR 0 27
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49103: LD_ADDR_VAR 0 28
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: NEG
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49385: LD_ADDR_VAR 0 29
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 3
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49664: LD_ADDR_VAR 0 30
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 3
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49942: LD_ADDR_VAR 0 31
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50220: LD_ADDR_VAR 0 32
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50498: LD_ADDR_VAR 0 33
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 3
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50777: LD_ADDR_VAR 0 34
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 3
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51057: LD_ADDR_VAR 0 35
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51169: LD_ADDR_VAR 0 36
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51281: LD_ADDR_VAR 0 37
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51393: LD_ADDR_VAR 0 38
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51505: LD_ADDR_VAR 0 39
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51617: LD_ADDR_VAR 0 40
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51729: LD_ADDR_VAR 0 41
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 3
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52079: LD_ADDR_VAR 0 42
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52429: LD_ADDR_VAR 0 43
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52777: LD_ADDR_VAR 0 44
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53127: LD_ADDR_VAR 0 45
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: NEG
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53477: LD_ADDR_VAR 0 46
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53825: LD_ADDR_VAR 0 47
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53976: LD_ADDR_VAR 0 48
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54123: LD_ADDR_VAR 0 49
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54267: LD_ADDR_VAR 0 50
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54411: LD_ADDR_VAR 0 51
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54558: LD_ADDR_VAR 0 52
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54709: LD_ADDR_VAR 0 53
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54939: LD_ADDR_VAR 0 54
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55169: LD_ADDR_VAR 0 55
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55399: LD_ADDR_VAR 0 56
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55629: LD_ADDR_VAR 0 57
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55859: LD_ADDR_VAR 0 58
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56089: LD_ADDR_VAR 0 59
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56177: LD_ADDR_VAR 0 60
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56265: LD_ADDR_VAR 0 61
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56353: LD_ADDR_VAR 0 62
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56441: LD_ADDR_VAR 0 63
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56529: LD_ADDR_VAR 0 64
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// end ; 1 :
56617: GO 62514
56619: LD_INT 1
56621: DOUBLE
56622: EQUAL
56623: IFTRUE 56627
56625: GO 59250
56627: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56628: LD_ADDR_VAR 0 11
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56672: LD_ADDR_VAR 0 12
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56713: LD_ADDR_VAR 0 13
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56753: LD_ADDR_VAR 0 14
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56794: LD_ADDR_VAR 0 15
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56838: LD_ADDR_VAR 0 16
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56884: LD_ADDR_VAR 0 17
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56928: LD_ADDR_VAR 0 18
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56969: LD_ADDR_VAR 0 19
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57009: LD_ADDR_VAR 0 20
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57050: LD_ADDR_VAR 0 21
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57094: LD_ADDR_VAR 0 22
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57140: LD_ADDR_VAR 0 23
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57184: LD_ADDR_VAR 0 24
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 4
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57225: LD_ADDR_VAR 0 25
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 4
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: LD_INT 4
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57265: LD_ADDR_VAR 0 26
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57306: LD_ADDR_VAR 0 27
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57350: LD_ADDR_VAR 0 28
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57396: LD_ADDR_VAR 0 29
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 5
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 5
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 4
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 6
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 6
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 5
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57551: LD_ADDR_VAR 0 30
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 5
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 5
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 5
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 6
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 6
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57694: LD_ADDR_VAR 0 31
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 4
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: PUSH
57742: LD_INT 4
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 5
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: PUSH
57772: LD_INT 5
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 6
57791: PUSH
57792: LD_INT 5
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 6
57801: PUSH
57802: LD_INT 6
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 5
57811: PUSH
57812: LD_INT 6
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57833: LD_ADDR_VAR 0 32
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 4
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 5
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 5
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 4
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 6
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 6
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 5
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57976: LD_ADDR_VAR 0 33
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 4
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 5
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 5
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 5
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 6
58096: NEG
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 6
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58131: LD_ADDR_VAR 0 34
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: LD_INT 3
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: LD_INT 4
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: LD_INT 5
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 5
58222: NEG
58223: PUSH
58224: LD_INT 4
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 5
58234: NEG
58235: PUSH
58236: LD_INT 5
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 5
58246: NEG
58247: PUSH
58248: LD_INT 6
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 6
58258: NEG
58259: PUSH
58260: LD_INT 5
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 6
58270: NEG
58271: PUSH
58272: LD_INT 6
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58294: LD_ADDR_VAR 0 41
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 3
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58338: LD_ADDR_VAR 0 42
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58379: LD_ADDR_VAR 0 43
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58419: LD_ADDR_VAR 0 44
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58460: LD_ADDR_VAR 0 45
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58504: LD_ADDR_VAR 0 46
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58550: LD_ADDR_VAR 0 47
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58583: LD_ADDR_VAR 0 48
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58614: LD_ADDR_VAR 0 49
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58643: LD_ADDR_VAR 0 50
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58672: LD_ADDR_VAR 0 51
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58703: LD_ADDR_VAR 0 52
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58736: LD_ADDR_VAR 0 53
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58780: LD_ADDR_VAR 0 54
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58821: LD_ADDR_VAR 0 55
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58861: LD_ADDR_VAR 0 56
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58902: LD_ADDR_VAR 0 57
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58946: LD_ADDR_VAR 0 58
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58992: LD_ADDR_VAR 0 59
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59036: LD_ADDR_VAR 0 60
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59077: LD_ADDR_VAR 0 61
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59117: LD_ADDR_VAR 0 62
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59158: LD_ADDR_VAR 0 63
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59202: LD_ADDR_VAR 0 64
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// end ; 2 :
59248: GO 62514
59250: LD_INT 2
59252: DOUBLE
59253: EQUAL
59254: IFTRUE 59258
59256: GO 62513
59258: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59259: LD_ADDR_VAR 0 29
59263: PUSH
59264: LD_INT 4
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 4
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 4
59389: PUSH
59390: LD_INT 4
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 4
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 4
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 4
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 5
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: LD_INT 5
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 4
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: LD_INT 5
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: LD_INT 4
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 4
59656: NEG
59657: PUSH
59658: LD_INT 5
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: NEG
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 4
59692: NEG
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: LD_INT 4
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 5
59716: NEG
59717: PUSH
59718: LD_INT 5
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: NEG
59729: PUSH
59730: LD_INT 5
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59797: LD_ADDR_VAR 0 30
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 4
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: LD_INT 4
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 5
59834: PUSH
59835: LD_INT 5
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: LD_INT 5
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: LD_INT 4
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 5
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 3
59884: PUSH
59885: LD_INT 5
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 4
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: LD_INT 4
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 4
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 4
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 4
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 5
60043: NEG
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 5
60066: NEG
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: LD_INT 4
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: NEG
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: LD_INT 4
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 4
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 5
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 4
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 5
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 5
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60344: LD_ADDR_VAR 0 31
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 4
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 4
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 5
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 5
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: LD_INT 5
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 3
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 4
60523: NEG
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 4
60546: NEG
60547: PUSH
60548: LD_INT 4
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: NEG
60559: PUSH
60560: LD_INT 5
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: LD_INT 4
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 3
60582: NEG
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 4
60594: NEG
60595: PUSH
60596: LD_INT 3
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: LD_INT 4
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 5
60618: NEG
60619: PUSH
60620: LD_INT 5
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: LD_INT 5
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 5
60642: NEG
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 4
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 4
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: LD_INT 4
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 4
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 5
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 4
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 5
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60894: LD_ADDR_VAR 0 32
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 4
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 5
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 5
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 5
60980: NEG
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: LD_INT 4
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: LD_INT 4
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 4
61099: NEG
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 5
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 4
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 4
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 5
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 3
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: NEG
61202: PUSH
61203: LD_INT 5
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 4
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 2
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 4
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 4
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 5
61326: PUSH
61327: LD_INT 4
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 5
61336: PUSH
61337: LD_INT 5
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: LD_INT 5
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: LD_INT 3
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 5
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 5
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61441: LD_ADDR_VAR 0 33
61445: PUSH
61446: LD_INT 4
61448: NEG
61449: PUSH
61450: LD_INT 4
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 4
61460: NEG
61461: PUSH
61462: LD_INT 5
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: LD_INT 4
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: NEG
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 4
61496: NEG
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 5
61508: NEG
61509: PUSH
61510: LD_INT 4
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: LD_INT 5
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: LD_INT 5
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 5
61544: NEG
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 4
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 3
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 4
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 4
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 4
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 5
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 5
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 4
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 5
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 4
61781: PUSH
61782: LD_INT 4
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 4
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 4
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 4
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 4
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 5
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: LD_INT 5
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: LD_INT 5
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61979: LD_ADDR_VAR 0 34
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 4
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 5
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: LD_INT 4
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 3
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 4
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: LD_INT 5
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 5
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 4
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 4
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 4
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: PUSH
62202: LD_INT 4
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 5
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 4
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 3
62231: PUSH
62232: LD_INT 4
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 3
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 5
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 3
62261: PUSH
62262: LD_INT 5
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 3
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: LD_INT 3
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 4
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: LD_INT 4
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 4
62375: NEG
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 4
62409: NEG
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 5
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 5
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 5
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 3
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: ST_TO_ADDR
// end ; end ;
62511: GO 62514
62513: POP
// case btype of b_depot , b_warehouse :
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 0
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62533
62525: LD_INT 1
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62533
62531: GO 62734
62533: POP
// case nation of nation_american :
62534: LD_VAR 0 5
62538: PUSH
62539: LD_INT 1
62541: DOUBLE
62542: EQUAL
62543: IFTRUE 62547
62545: GO 62603
62547: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62548: LD_ADDR_VAR 0 9
62552: PUSH
62553: LD_VAR 0 11
62557: PUSH
62558: LD_VAR 0 12
62562: PUSH
62563: LD_VAR 0 13
62567: PUSH
62568: LD_VAR 0 14
62572: PUSH
62573: LD_VAR 0 15
62577: PUSH
62578: LD_VAR 0 16
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: LD_VAR 0 4
62595: PUSH
62596: LD_INT 1
62598: PLUS
62599: ARRAY
62600: ST_TO_ADDR
62601: GO 62732
62603: LD_INT 2
62605: DOUBLE
62606: EQUAL
62607: IFTRUE 62611
62609: GO 62667
62611: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62612: LD_ADDR_VAR 0 9
62616: PUSH
62617: LD_VAR 0 17
62621: PUSH
62622: LD_VAR 0 18
62626: PUSH
62627: LD_VAR 0 19
62631: PUSH
62632: LD_VAR 0 20
62636: PUSH
62637: LD_VAR 0 21
62641: PUSH
62642: LD_VAR 0 22
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: PUSH
62655: LD_VAR 0 4
62659: PUSH
62660: LD_INT 1
62662: PLUS
62663: ARRAY
62664: ST_TO_ADDR
62665: GO 62732
62667: LD_INT 3
62669: DOUBLE
62670: EQUAL
62671: IFTRUE 62675
62673: GO 62731
62675: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62676: LD_ADDR_VAR 0 9
62680: PUSH
62681: LD_VAR 0 23
62685: PUSH
62686: LD_VAR 0 24
62690: PUSH
62691: LD_VAR 0 25
62695: PUSH
62696: LD_VAR 0 26
62700: PUSH
62701: LD_VAR 0 27
62705: PUSH
62706: LD_VAR 0 28
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: PUSH
62719: LD_VAR 0 4
62723: PUSH
62724: LD_INT 1
62726: PLUS
62727: ARRAY
62728: ST_TO_ADDR
62729: GO 62732
62731: POP
62732: GO 63287
62734: LD_INT 2
62736: DOUBLE
62737: EQUAL
62738: IFTRUE 62748
62740: LD_INT 3
62742: DOUBLE
62743: EQUAL
62744: IFTRUE 62748
62746: GO 62804
62748: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62749: LD_ADDR_VAR 0 9
62753: PUSH
62754: LD_VAR 0 29
62758: PUSH
62759: LD_VAR 0 30
62763: PUSH
62764: LD_VAR 0 31
62768: PUSH
62769: LD_VAR 0 32
62773: PUSH
62774: LD_VAR 0 33
62778: PUSH
62779: LD_VAR 0 34
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: PUSH
62792: LD_VAR 0 4
62796: PUSH
62797: LD_INT 1
62799: PLUS
62800: ARRAY
62801: ST_TO_ADDR
62802: GO 63287
62804: LD_INT 16
62806: DOUBLE
62807: EQUAL
62808: IFTRUE 62866
62810: LD_INT 17
62812: DOUBLE
62813: EQUAL
62814: IFTRUE 62866
62816: LD_INT 18
62818: DOUBLE
62819: EQUAL
62820: IFTRUE 62866
62822: LD_INT 19
62824: DOUBLE
62825: EQUAL
62826: IFTRUE 62866
62828: LD_INT 22
62830: DOUBLE
62831: EQUAL
62832: IFTRUE 62866
62834: LD_INT 20
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62866
62840: LD_INT 21
62842: DOUBLE
62843: EQUAL
62844: IFTRUE 62866
62846: LD_INT 23
62848: DOUBLE
62849: EQUAL
62850: IFTRUE 62866
62852: LD_INT 24
62854: DOUBLE
62855: EQUAL
62856: IFTRUE 62866
62858: LD_INT 25
62860: DOUBLE
62861: EQUAL
62862: IFTRUE 62866
62864: GO 62922
62866: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62867: LD_ADDR_VAR 0 9
62871: PUSH
62872: LD_VAR 0 35
62876: PUSH
62877: LD_VAR 0 36
62881: PUSH
62882: LD_VAR 0 37
62886: PUSH
62887: LD_VAR 0 38
62891: PUSH
62892: LD_VAR 0 39
62896: PUSH
62897: LD_VAR 0 40
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: PUSH
62910: LD_VAR 0 4
62914: PUSH
62915: LD_INT 1
62917: PLUS
62918: ARRAY
62919: ST_TO_ADDR
62920: GO 63287
62922: LD_INT 6
62924: DOUBLE
62925: EQUAL
62926: IFTRUE 62978
62928: LD_INT 7
62930: DOUBLE
62931: EQUAL
62932: IFTRUE 62978
62934: LD_INT 8
62936: DOUBLE
62937: EQUAL
62938: IFTRUE 62978
62940: LD_INT 13
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62978
62946: LD_INT 12
62948: DOUBLE
62949: EQUAL
62950: IFTRUE 62978
62952: LD_INT 15
62954: DOUBLE
62955: EQUAL
62956: IFTRUE 62978
62958: LD_INT 11
62960: DOUBLE
62961: EQUAL
62962: IFTRUE 62978
62964: LD_INT 14
62966: DOUBLE
62967: EQUAL
62968: IFTRUE 62978
62970: LD_INT 10
62972: DOUBLE
62973: EQUAL
62974: IFTRUE 62978
62976: GO 63034
62978: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62979: LD_ADDR_VAR 0 9
62983: PUSH
62984: LD_VAR 0 41
62988: PUSH
62989: LD_VAR 0 42
62993: PUSH
62994: LD_VAR 0 43
62998: PUSH
62999: LD_VAR 0 44
63003: PUSH
63004: LD_VAR 0 45
63008: PUSH
63009: LD_VAR 0 46
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: PUSH
63022: LD_VAR 0 4
63026: PUSH
63027: LD_INT 1
63029: PLUS
63030: ARRAY
63031: ST_TO_ADDR
63032: GO 63287
63034: LD_INT 36
63036: DOUBLE
63037: EQUAL
63038: IFTRUE 63042
63040: GO 63098
63042: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63043: LD_ADDR_VAR 0 9
63047: PUSH
63048: LD_VAR 0 47
63052: PUSH
63053: LD_VAR 0 48
63057: PUSH
63058: LD_VAR 0 49
63062: PUSH
63063: LD_VAR 0 50
63067: PUSH
63068: LD_VAR 0 51
63072: PUSH
63073: LD_VAR 0 52
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: PUSH
63086: LD_VAR 0 4
63090: PUSH
63091: LD_INT 1
63093: PLUS
63094: ARRAY
63095: ST_TO_ADDR
63096: GO 63287
63098: LD_INT 4
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63124
63104: LD_INT 5
63106: DOUBLE
63107: EQUAL
63108: IFTRUE 63124
63110: LD_INT 34
63112: DOUBLE
63113: EQUAL
63114: IFTRUE 63124
63116: LD_INT 37
63118: DOUBLE
63119: EQUAL
63120: IFTRUE 63124
63122: GO 63180
63124: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63125: LD_ADDR_VAR 0 9
63129: PUSH
63130: LD_VAR 0 53
63134: PUSH
63135: LD_VAR 0 54
63139: PUSH
63140: LD_VAR 0 55
63144: PUSH
63145: LD_VAR 0 56
63149: PUSH
63150: LD_VAR 0 57
63154: PUSH
63155: LD_VAR 0 58
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: PUSH
63168: LD_VAR 0 4
63172: PUSH
63173: LD_INT 1
63175: PLUS
63176: ARRAY
63177: ST_TO_ADDR
63178: GO 63287
63180: LD_INT 31
63182: DOUBLE
63183: EQUAL
63184: IFTRUE 63230
63186: LD_INT 32
63188: DOUBLE
63189: EQUAL
63190: IFTRUE 63230
63192: LD_INT 33
63194: DOUBLE
63195: EQUAL
63196: IFTRUE 63230
63198: LD_INT 27
63200: DOUBLE
63201: EQUAL
63202: IFTRUE 63230
63204: LD_INT 26
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63230
63210: LD_INT 28
63212: DOUBLE
63213: EQUAL
63214: IFTRUE 63230
63216: LD_INT 29
63218: DOUBLE
63219: EQUAL
63220: IFTRUE 63230
63222: LD_INT 30
63224: DOUBLE
63225: EQUAL
63226: IFTRUE 63230
63228: GO 63286
63230: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63231: LD_ADDR_VAR 0 9
63235: PUSH
63236: LD_VAR 0 59
63240: PUSH
63241: LD_VAR 0 60
63245: PUSH
63246: LD_VAR 0 61
63250: PUSH
63251: LD_VAR 0 62
63255: PUSH
63256: LD_VAR 0 63
63260: PUSH
63261: LD_VAR 0 64
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: PUSH
63274: LD_VAR 0 4
63278: PUSH
63279: LD_INT 1
63281: PLUS
63282: ARRAY
63283: ST_TO_ADDR
63284: GO 63287
63286: POP
// temp_list2 = [ ] ;
63287: LD_ADDR_VAR 0 10
63291: PUSH
63292: EMPTY
63293: ST_TO_ADDR
// for i in temp_list do
63294: LD_ADDR_VAR 0 8
63298: PUSH
63299: LD_VAR 0 9
63303: PUSH
63304: FOR_IN
63305: IFFALSE 63357
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63307: LD_ADDR_VAR 0 10
63311: PUSH
63312: LD_VAR 0 10
63316: PUSH
63317: LD_VAR 0 8
63321: PUSH
63322: LD_INT 1
63324: ARRAY
63325: PUSH
63326: LD_VAR 0 2
63330: PLUS
63331: PUSH
63332: LD_VAR 0 8
63336: PUSH
63337: LD_INT 2
63339: ARRAY
63340: PUSH
63341: LD_VAR 0 3
63345: PLUS
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: ADD
63354: ST_TO_ADDR
63355: GO 63304
63357: POP
63358: POP
// result = temp_list2 ;
63359: LD_ADDR_VAR 0 7
63363: PUSH
63364: LD_VAR 0 10
63368: ST_TO_ADDR
// end ;
63369: LD_VAR 0 7
63373: RET
// export function EnemyInRange ( unit , dist ) ; begin
63374: LD_INT 0
63376: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63377: LD_ADDR_VAR 0 3
63381: PUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 255
63391: PPUSH
63392: LD_VAR 0 1
63396: PPUSH
63397: CALL_OW 250
63401: PPUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 251
63411: PPUSH
63412: LD_VAR 0 2
63416: PPUSH
63417: CALL 36747 0 4
63421: PUSH
63422: LD_INT 4
63424: ARRAY
63425: ST_TO_ADDR
// end ;
63426: LD_VAR 0 3
63430: RET
// export function PlayerSeeMe ( unit ) ; begin
63431: LD_INT 0
63433: PPUSH
// result := See ( your_side , unit ) ;
63434: LD_ADDR_VAR 0 2
63438: PUSH
63439: LD_OWVAR 2
63443: PPUSH
63444: LD_VAR 0 1
63448: PPUSH
63449: CALL_OW 292
63453: ST_TO_ADDR
// end ;
63454: LD_VAR 0 2
63458: RET
// export function ReverseDir ( unit ) ; begin
63459: LD_INT 0
63461: PPUSH
// if not unit then
63462: LD_VAR 0 1
63466: NOT
63467: IFFALSE 63471
// exit ;
63469: GO 63494
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63471: LD_ADDR_VAR 0 2
63475: PUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 254
63485: PUSH
63486: LD_INT 3
63488: PLUS
63489: PUSH
63490: LD_INT 6
63492: MOD
63493: ST_TO_ADDR
// end ;
63494: LD_VAR 0 2
63498: RET
// export function ReverseArray ( array ) ; var i ; begin
63499: LD_INT 0
63501: PPUSH
63502: PPUSH
// if not array then
63503: LD_VAR 0 1
63507: NOT
63508: IFFALSE 63512
// exit ;
63510: GO 63567
// result := [ ] ;
63512: LD_ADDR_VAR 0 2
63516: PUSH
63517: EMPTY
63518: ST_TO_ADDR
// for i := array downto 1 do
63519: LD_ADDR_VAR 0 3
63523: PUSH
63524: DOUBLE
63525: LD_VAR 0 1
63529: INC
63530: ST_TO_ADDR
63531: LD_INT 1
63533: PUSH
63534: FOR_DOWNTO
63535: IFFALSE 63565
// result := Join ( result , array [ i ] ) ;
63537: LD_ADDR_VAR 0 2
63541: PUSH
63542: LD_VAR 0 2
63546: PPUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_VAR 0 3
63556: ARRAY
63557: PPUSH
63558: CALL 68223 0 2
63562: ST_TO_ADDR
63563: GO 63534
63565: POP
63566: POP
// end ;
63567: LD_VAR 0 2
63571: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63572: LD_INT 0
63574: PPUSH
63575: PPUSH
63576: PPUSH
63577: PPUSH
63578: PPUSH
63579: PPUSH
// if not unit or not hexes then
63580: LD_VAR 0 1
63584: NOT
63585: PUSH
63586: LD_VAR 0 2
63590: NOT
63591: OR
63592: IFFALSE 63596
// exit ;
63594: GO 63719
// dist := 9999 ;
63596: LD_ADDR_VAR 0 5
63600: PUSH
63601: LD_INT 9999
63603: ST_TO_ADDR
// for i = 1 to hexes do
63604: LD_ADDR_VAR 0 4
63608: PUSH
63609: DOUBLE
63610: LD_INT 1
63612: DEC
63613: ST_TO_ADDR
63614: LD_VAR 0 2
63618: PUSH
63619: FOR_TO
63620: IFFALSE 63707
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63622: LD_ADDR_VAR 0 6
63626: PUSH
63627: LD_VAR 0 1
63631: PPUSH
63632: LD_VAR 0 2
63636: PUSH
63637: LD_VAR 0 4
63641: ARRAY
63642: PUSH
63643: LD_INT 1
63645: ARRAY
63646: PPUSH
63647: LD_VAR 0 2
63651: PUSH
63652: LD_VAR 0 4
63656: ARRAY
63657: PUSH
63658: LD_INT 2
63660: ARRAY
63661: PPUSH
63662: CALL_OW 297
63666: ST_TO_ADDR
// if tdist < dist then
63667: LD_VAR 0 6
63671: PUSH
63672: LD_VAR 0 5
63676: LESS
63677: IFFALSE 63705
// begin hex := hexes [ i ] ;
63679: LD_ADDR_VAR 0 8
63683: PUSH
63684: LD_VAR 0 2
63688: PUSH
63689: LD_VAR 0 4
63693: ARRAY
63694: ST_TO_ADDR
// dist := tdist ;
63695: LD_ADDR_VAR 0 5
63699: PUSH
63700: LD_VAR 0 6
63704: ST_TO_ADDR
// end ; end ;
63705: GO 63619
63707: POP
63708: POP
// result := hex ;
63709: LD_ADDR_VAR 0 3
63713: PUSH
63714: LD_VAR 0 8
63718: ST_TO_ADDR
// end ;
63719: LD_VAR 0 3
63723: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63724: LD_INT 0
63726: PPUSH
63727: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63728: LD_VAR 0 1
63732: NOT
63733: PUSH
63734: LD_VAR 0 1
63738: PUSH
63739: LD_INT 21
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 23
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PPUSH
63763: CALL_OW 69
63767: IN
63768: NOT
63769: OR
63770: IFFALSE 63774
// exit ;
63772: GO 63821
// for i = 1 to 3 do
63774: LD_ADDR_VAR 0 3
63778: PUSH
63779: DOUBLE
63780: LD_INT 1
63782: DEC
63783: ST_TO_ADDR
63784: LD_INT 3
63786: PUSH
63787: FOR_TO
63788: IFFALSE 63819
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63790: LD_VAR 0 1
63794: PPUSH
63795: CALL_OW 250
63799: PPUSH
63800: LD_VAR 0 1
63804: PPUSH
63805: CALL_OW 251
63809: PPUSH
63810: LD_INT 1
63812: PPUSH
63813: CALL_OW 453
63817: GO 63787
63819: POP
63820: POP
// end ;
63821: LD_VAR 0 2
63825: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63826: LD_INT 0
63828: PPUSH
63829: PPUSH
63830: PPUSH
63831: PPUSH
63832: PPUSH
63833: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63834: LD_VAR 0 1
63838: NOT
63839: PUSH
63840: LD_VAR 0 2
63844: NOT
63845: OR
63846: PUSH
63847: LD_VAR 0 1
63851: PPUSH
63852: CALL_OW 314
63856: OR
63857: IFFALSE 63861
// exit ;
63859: GO 64328
// if GetLives ( i ) < 250 then
63861: LD_VAR 0 4
63865: PPUSH
63866: CALL_OW 256
63870: PUSH
63871: LD_INT 250
63873: LESS
63874: IFFALSE 63887
// begin ComAutodestruct ( i ) ;
63876: LD_VAR 0 4
63880: PPUSH
63881: CALL 63724 0 1
// exit ;
63885: GO 64328
// end ; x := GetX ( enemy_unit ) ;
63887: LD_ADDR_VAR 0 7
63891: PUSH
63892: LD_VAR 0 2
63896: PPUSH
63897: CALL_OW 250
63901: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63902: LD_ADDR_VAR 0 8
63906: PUSH
63907: LD_VAR 0 2
63911: PPUSH
63912: CALL_OW 251
63916: ST_TO_ADDR
// if not x or not y then
63917: LD_VAR 0 7
63921: NOT
63922: PUSH
63923: LD_VAR 0 8
63927: NOT
63928: OR
63929: IFFALSE 63933
// exit ;
63931: GO 64328
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63933: LD_ADDR_VAR 0 6
63937: PUSH
63938: LD_VAR 0 7
63942: PPUSH
63943: LD_INT 0
63945: PPUSH
63946: LD_INT 4
63948: PPUSH
63949: CALL_OW 272
63953: PUSH
63954: LD_VAR 0 8
63958: PPUSH
63959: LD_INT 0
63961: PPUSH
63962: LD_INT 4
63964: PPUSH
63965: CALL_OW 273
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_VAR 0 7
63978: PPUSH
63979: LD_INT 1
63981: PPUSH
63982: LD_INT 4
63984: PPUSH
63985: CALL_OW 272
63989: PUSH
63990: LD_VAR 0 8
63994: PPUSH
63995: LD_INT 1
63997: PPUSH
63998: LD_INT 4
64000: PPUSH
64001: CALL_OW 273
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_VAR 0 7
64014: PPUSH
64015: LD_INT 2
64017: PPUSH
64018: LD_INT 4
64020: PPUSH
64021: CALL_OW 272
64025: PUSH
64026: LD_VAR 0 8
64030: PPUSH
64031: LD_INT 2
64033: PPUSH
64034: LD_INT 4
64036: PPUSH
64037: CALL_OW 273
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_VAR 0 7
64050: PPUSH
64051: LD_INT 3
64053: PPUSH
64054: LD_INT 4
64056: PPUSH
64057: CALL_OW 272
64061: PUSH
64062: LD_VAR 0 8
64066: PPUSH
64067: LD_INT 3
64069: PPUSH
64070: LD_INT 4
64072: PPUSH
64073: CALL_OW 273
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_VAR 0 7
64086: PPUSH
64087: LD_INT 4
64089: PPUSH
64090: LD_INT 4
64092: PPUSH
64093: CALL_OW 272
64097: PUSH
64098: LD_VAR 0 8
64102: PPUSH
64103: LD_INT 4
64105: PPUSH
64106: LD_INT 4
64108: PPUSH
64109: CALL_OW 273
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_VAR 0 7
64122: PPUSH
64123: LD_INT 5
64125: PPUSH
64126: LD_INT 4
64128: PPUSH
64129: CALL_OW 272
64133: PUSH
64134: LD_VAR 0 8
64138: PPUSH
64139: LD_INT 5
64141: PPUSH
64142: LD_INT 4
64144: PPUSH
64145: CALL_OW 273
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// for i = tmp downto 1 do
64162: LD_ADDR_VAR 0 4
64166: PUSH
64167: DOUBLE
64168: LD_VAR 0 6
64172: INC
64173: ST_TO_ADDR
64174: LD_INT 1
64176: PUSH
64177: FOR_DOWNTO
64178: IFFALSE 64279
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64180: LD_VAR 0 6
64184: PUSH
64185: LD_VAR 0 4
64189: ARRAY
64190: PUSH
64191: LD_INT 1
64193: ARRAY
64194: PPUSH
64195: LD_VAR 0 6
64199: PUSH
64200: LD_VAR 0 4
64204: ARRAY
64205: PUSH
64206: LD_INT 2
64208: ARRAY
64209: PPUSH
64210: CALL_OW 488
64214: NOT
64215: PUSH
64216: LD_VAR 0 6
64220: PUSH
64221: LD_VAR 0 4
64225: ARRAY
64226: PUSH
64227: LD_INT 1
64229: ARRAY
64230: PPUSH
64231: LD_VAR 0 6
64235: PUSH
64236: LD_VAR 0 4
64240: ARRAY
64241: PUSH
64242: LD_INT 2
64244: ARRAY
64245: PPUSH
64246: CALL_OW 428
64250: PUSH
64251: LD_INT 0
64253: NONEQUAL
64254: OR
64255: IFFALSE 64277
// tmp := Delete ( tmp , i ) ;
64257: LD_ADDR_VAR 0 6
64261: PUSH
64262: LD_VAR 0 6
64266: PPUSH
64267: LD_VAR 0 4
64271: PPUSH
64272: CALL_OW 3
64276: ST_TO_ADDR
64277: GO 64177
64279: POP
64280: POP
// j := GetClosestHex ( unit , tmp ) ;
64281: LD_ADDR_VAR 0 5
64285: PUSH
64286: LD_VAR 0 1
64290: PPUSH
64291: LD_VAR 0 6
64295: PPUSH
64296: CALL 63572 0 2
64300: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64301: LD_VAR 0 1
64305: PPUSH
64306: LD_VAR 0 5
64310: PUSH
64311: LD_INT 1
64313: ARRAY
64314: PPUSH
64315: LD_VAR 0 5
64319: PUSH
64320: LD_INT 2
64322: ARRAY
64323: PPUSH
64324: CALL_OW 111
// end ;
64328: LD_VAR 0 3
64332: RET
// export function PrepareApemanSoldier ( ) ; begin
64333: LD_INT 0
64335: PPUSH
// uc_nation := 0 ;
64336: LD_ADDR_OWVAR 21
64340: PUSH
64341: LD_INT 0
64343: ST_TO_ADDR
// hc_sex := sex_male ;
64344: LD_ADDR_OWVAR 27
64348: PUSH
64349: LD_INT 1
64351: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64352: LD_ADDR_OWVAR 28
64356: PUSH
64357: LD_INT 15
64359: ST_TO_ADDR
// hc_gallery :=  ;
64360: LD_ADDR_OWVAR 33
64364: PUSH
64365: LD_STRING 
64367: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64368: LD_ADDR_OWVAR 31
64372: PUSH
64373: LD_INT 0
64375: PPUSH
64376: LD_INT 3
64378: PPUSH
64379: CALL_OW 12
64383: PUSH
64384: LD_INT 0
64386: PPUSH
64387: LD_INT 3
64389: PPUSH
64390: CALL_OW 12
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: ST_TO_ADDR
// end ;
64407: LD_VAR 0 1
64411: RET
// export function PrepareApemanEngineer ( ) ; begin
64412: LD_INT 0
64414: PPUSH
// uc_nation := 0 ;
64415: LD_ADDR_OWVAR 21
64419: PUSH
64420: LD_INT 0
64422: ST_TO_ADDR
// hc_sex := sex_male ;
64423: LD_ADDR_OWVAR 27
64427: PUSH
64428: LD_INT 1
64430: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64431: LD_ADDR_OWVAR 28
64435: PUSH
64436: LD_INT 16
64438: ST_TO_ADDR
// hc_gallery :=  ;
64439: LD_ADDR_OWVAR 33
64443: PUSH
64444: LD_STRING 
64446: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64447: LD_ADDR_OWVAR 31
64451: PUSH
64452: LD_INT 0
64454: PPUSH
64455: LD_INT 3
64457: PPUSH
64458: CALL_OW 12
64462: PUSH
64463: LD_INT 0
64465: PPUSH
64466: LD_INT 3
64468: PPUSH
64469: CALL_OW 12
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: ST_TO_ADDR
// end ;
64486: LD_VAR 0 1
64490: RET
// export function PrepareApeman ( agressivity ) ; begin
64491: LD_INT 0
64493: PPUSH
// uc_side := 0 ;
64494: LD_ADDR_OWVAR 20
64498: PUSH
64499: LD_INT 0
64501: ST_TO_ADDR
// uc_nation := 0 ;
64502: LD_ADDR_OWVAR 21
64506: PUSH
64507: LD_INT 0
64509: ST_TO_ADDR
// hc_sex := sex_male ;
64510: LD_ADDR_OWVAR 27
64514: PUSH
64515: LD_INT 1
64517: ST_TO_ADDR
// hc_class := class_apeman ;
64518: LD_ADDR_OWVAR 28
64522: PUSH
64523: LD_INT 12
64525: ST_TO_ADDR
// hc_gallery :=  ;
64526: LD_ADDR_OWVAR 33
64530: PUSH
64531: LD_STRING 
64533: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64534: LD_ADDR_OWVAR 35
64538: PUSH
64539: LD_VAR 0 1
64543: NEG
64544: PPUSH
64545: LD_VAR 0 1
64549: PPUSH
64550: CALL_OW 12
64554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64555: LD_ADDR_OWVAR 31
64559: PUSH
64560: LD_INT 0
64562: PPUSH
64563: LD_INT 3
64565: PPUSH
64566: CALL_OW 12
64570: PUSH
64571: LD_INT 0
64573: PPUSH
64574: LD_INT 3
64576: PPUSH
64577: CALL_OW 12
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// end ;
64594: LD_VAR 0 2
64598: RET
// export function PrepareTiger ( agressivity ) ; begin
64599: LD_INT 0
64601: PPUSH
// uc_side := 0 ;
64602: LD_ADDR_OWVAR 20
64606: PUSH
64607: LD_INT 0
64609: ST_TO_ADDR
// uc_nation := 0 ;
64610: LD_ADDR_OWVAR 21
64614: PUSH
64615: LD_INT 0
64617: ST_TO_ADDR
// hc_class := class_tiger ;
64618: LD_ADDR_OWVAR 28
64622: PUSH
64623: LD_INT 14
64625: ST_TO_ADDR
// hc_gallery :=  ;
64626: LD_ADDR_OWVAR 33
64630: PUSH
64631: LD_STRING 
64633: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64634: LD_ADDR_OWVAR 35
64638: PUSH
64639: LD_VAR 0 1
64643: NEG
64644: PPUSH
64645: LD_VAR 0 1
64649: PPUSH
64650: CALL_OW 12
64654: ST_TO_ADDR
// end ;
64655: LD_VAR 0 2
64659: RET
// export function PrepareEnchidna ( ) ; begin
64660: LD_INT 0
64662: PPUSH
// uc_side := 0 ;
64663: LD_ADDR_OWVAR 20
64667: PUSH
64668: LD_INT 0
64670: ST_TO_ADDR
// uc_nation := 0 ;
64671: LD_ADDR_OWVAR 21
64675: PUSH
64676: LD_INT 0
64678: ST_TO_ADDR
// hc_class := class_baggie ;
64679: LD_ADDR_OWVAR 28
64683: PUSH
64684: LD_INT 13
64686: ST_TO_ADDR
// hc_gallery :=  ;
64687: LD_ADDR_OWVAR 33
64691: PUSH
64692: LD_STRING 
64694: ST_TO_ADDR
// end ;
64695: LD_VAR 0 1
64699: RET
// export function PrepareFrog ( ) ; begin
64700: LD_INT 0
64702: PPUSH
// uc_side := 0 ;
64703: LD_ADDR_OWVAR 20
64707: PUSH
64708: LD_INT 0
64710: ST_TO_ADDR
// uc_nation := 0 ;
64711: LD_ADDR_OWVAR 21
64715: PUSH
64716: LD_INT 0
64718: ST_TO_ADDR
// hc_class := class_frog ;
64719: LD_ADDR_OWVAR 28
64723: PUSH
64724: LD_INT 19
64726: ST_TO_ADDR
// hc_gallery :=  ;
64727: LD_ADDR_OWVAR 33
64731: PUSH
64732: LD_STRING 
64734: ST_TO_ADDR
// end ;
64735: LD_VAR 0 1
64739: RET
// export function PrepareFish ( ) ; begin
64740: LD_INT 0
64742: PPUSH
// uc_side := 0 ;
64743: LD_ADDR_OWVAR 20
64747: PUSH
64748: LD_INT 0
64750: ST_TO_ADDR
// uc_nation := 0 ;
64751: LD_ADDR_OWVAR 21
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// hc_class := class_fish ;
64759: LD_ADDR_OWVAR 28
64763: PUSH
64764: LD_INT 20
64766: ST_TO_ADDR
// hc_gallery :=  ;
64767: LD_ADDR_OWVAR 33
64771: PUSH
64772: LD_STRING 
64774: ST_TO_ADDR
// end ;
64775: LD_VAR 0 1
64779: RET
// export function PrepareBird ( ) ; begin
64780: LD_INT 0
64782: PPUSH
// uc_side := 0 ;
64783: LD_ADDR_OWVAR 20
64787: PUSH
64788: LD_INT 0
64790: ST_TO_ADDR
// uc_nation := 0 ;
64791: LD_ADDR_OWVAR 21
64795: PUSH
64796: LD_INT 0
64798: ST_TO_ADDR
// hc_class := class_phororhacos ;
64799: LD_ADDR_OWVAR 28
64803: PUSH
64804: LD_INT 18
64806: ST_TO_ADDR
// hc_gallery :=  ;
64807: LD_ADDR_OWVAR 33
64811: PUSH
64812: LD_STRING 
64814: ST_TO_ADDR
// end ;
64815: LD_VAR 0 1
64819: RET
// export function PrepareHorse ( ) ; begin
64820: LD_INT 0
64822: PPUSH
// uc_side := 0 ;
64823: LD_ADDR_OWVAR 20
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// uc_nation := 0 ;
64831: LD_ADDR_OWVAR 21
64835: PUSH
64836: LD_INT 0
64838: ST_TO_ADDR
// hc_class := class_horse ;
64839: LD_ADDR_OWVAR 28
64843: PUSH
64844: LD_INT 21
64846: ST_TO_ADDR
// hc_gallery :=  ;
64847: LD_ADDR_OWVAR 33
64851: PUSH
64852: LD_STRING 
64854: ST_TO_ADDR
// end ;
64855: LD_VAR 0 1
64859: RET
// export function PrepareMastodont ( ) ; begin
64860: LD_INT 0
64862: PPUSH
// uc_side := 0 ;
64863: LD_ADDR_OWVAR 20
64867: PUSH
64868: LD_INT 0
64870: ST_TO_ADDR
// uc_nation := 0 ;
64871: LD_ADDR_OWVAR 21
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64879: LD_ADDR_OWVAR 37
64883: PUSH
64884: LD_INT 31
64886: ST_TO_ADDR
// vc_control := control_rider ;
64887: LD_ADDR_OWVAR 38
64891: PUSH
64892: LD_INT 4
64894: ST_TO_ADDR
// end ;
64895: LD_VAR 0 1
64899: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64900: LD_INT 0
64902: PPUSH
64903: PPUSH
64904: PPUSH
// uc_side = 0 ;
64905: LD_ADDR_OWVAR 20
64909: PUSH
64910: LD_INT 0
64912: ST_TO_ADDR
// uc_nation = 0 ;
64913: LD_ADDR_OWVAR 21
64917: PUSH
64918: LD_INT 0
64920: ST_TO_ADDR
// InitHc_All ( ) ;
64921: CALL_OW 584
// InitVc ;
64925: CALL_OW 20
// if mastodonts then
64929: LD_VAR 0 6
64933: IFFALSE 65000
// for i = 1 to mastodonts do
64935: LD_ADDR_VAR 0 11
64939: PUSH
64940: DOUBLE
64941: LD_INT 1
64943: DEC
64944: ST_TO_ADDR
64945: LD_VAR 0 6
64949: PUSH
64950: FOR_TO
64951: IFFALSE 64998
// begin vc_chassis := 31 ;
64953: LD_ADDR_OWVAR 37
64957: PUSH
64958: LD_INT 31
64960: ST_TO_ADDR
// vc_control := control_rider ;
64961: LD_ADDR_OWVAR 38
64965: PUSH
64966: LD_INT 4
64968: ST_TO_ADDR
// animal := CreateVehicle ;
64969: LD_ADDR_VAR 0 12
64973: PUSH
64974: CALL_OW 45
64978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64979: LD_VAR 0 12
64983: PPUSH
64984: LD_VAR 0 8
64988: PPUSH
64989: LD_INT 0
64991: PPUSH
64992: CALL 67128 0 3
// end ;
64996: GO 64950
64998: POP
64999: POP
// if horses then
65000: LD_VAR 0 5
65004: IFFALSE 65071
// for i = 1 to horses do
65006: LD_ADDR_VAR 0 11
65010: PUSH
65011: DOUBLE
65012: LD_INT 1
65014: DEC
65015: ST_TO_ADDR
65016: LD_VAR 0 5
65020: PUSH
65021: FOR_TO
65022: IFFALSE 65069
// begin hc_class := 21 ;
65024: LD_ADDR_OWVAR 28
65028: PUSH
65029: LD_INT 21
65031: ST_TO_ADDR
// hc_gallery :=  ;
65032: LD_ADDR_OWVAR 33
65036: PUSH
65037: LD_STRING 
65039: ST_TO_ADDR
// animal := CreateHuman ;
65040: LD_ADDR_VAR 0 12
65044: PUSH
65045: CALL_OW 44
65049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65050: LD_VAR 0 12
65054: PPUSH
65055: LD_VAR 0 8
65059: PPUSH
65060: LD_INT 0
65062: PPUSH
65063: CALL 67128 0 3
// end ;
65067: GO 65021
65069: POP
65070: POP
// if birds then
65071: LD_VAR 0 1
65075: IFFALSE 65142
// for i = 1 to birds do
65077: LD_ADDR_VAR 0 11
65081: PUSH
65082: DOUBLE
65083: LD_INT 1
65085: DEC
65086: ST_TO_ADDR
65087: LD_VAR 0 1
65091: PUSH
65092: FOR_TO
65093: IFFALSE 65140
// begin hc_class := 18 ;
65095: LD_ADDR_OWVAR 28
65099: PUSH
65100: LD_INT 18
65102: ST_TO_ADDR
// hc_gallery =  ;
65103: LD_ADDR_OWVAR 33
65107: PUSH
65108: LD_STRING 
65110: ST_TO_ADDR
// animal := CreateHuman ;
65111: LD_ADDR_VAR 0 12
65115: PUSH
65116: CALL_OW 44
65120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65121: LD_VAR 0 12
65125: PPUSH
65126: LD_VAR 0 8
65130: PPUSH
65131: LD_INT 0
65133: PPUSH
65134: CALL 67128 0 3
// end ;
65138: GO 65092
65140: POP
65141: POP
// if tigers then
65142: LD_VAR 0 2
65146: IFFALSE 65230
// for i = 1 to tigers do
65148: LD_ADDR_VAR 0 11
65152: PUSH
65153: DOUBLE
65154: LD_INT 1
65156: DEC
65157: ST_TO_ADDR
65158: LD_VAR 0 2
65162: PUSH
65163: FOR_TO
65164: IFFALSE 65228
// begin hc_class = class_tiger ;
65166: LD_ADDR_OWVAR 28
65170: PUSH
65171: LD_INT 14
65173: ST_TO_ADDR
// hc_gallery =  ;
65174: LD_ADDR_OWVAR 33
65178: PUSH
65179: LD_STRING 
65181: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65182: LD_ADDR_OWVAR 35
65186: PUSH
65187: LD_INT 7
65189: NEG
65190: PPUSH
65191: LD_INT 7
65193: PPUSH
65194: CALL_OW 12
65198: ST_TO_ADDR
// animal := CreateHuman ;
65199: LD_ADDR_VAR 0 12
65203: PUSH
65204: CALL_OW 44
65208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65209: LD_VAR 0 12
65213: PPUSH
65214: LD_VAR 0 8
65218: PPUSH
65219: LD_INT 0
65221: PPUSH
65222: CALL 67128 0 3
// end ;
65226: GO 65163
65228: POP
65229: POP
// if apemans then
65230: LD_VAR 0 3
65234: IFFALSE 65357
// for i = 1 to apemans do
65236: LD_ADDR_VAR 0 11
65240: PUSH
65241: DOUBLE
65242: LD_INT 1
65244: DEC
65245: ST_TO_ADDR
65246: LD_VAR 0 3
65250: PUSH
65251: FOR_TO
65252: IFFALSE 65355
// begin hc_class = class_apeman ;
65254: LD_ADDR_OWVAR 28
65258: PUSH
65259: LD_INT 12
65261: ST_TO_ADDR
// hc_gallery =  ;
65262: LD_ADDR_OWVAR 33
65266: PUSH
65267: LD_STRING 
65269: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65270: LD_ADDR_OWVAR 35
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PPUSH
65279: LD_INT 2
65281: PPUSH
65282: CALL_OW 12
65286: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65287: LD_ADDR_OWVAR 31
65291: PUSH
65292: LD_INT 1
65294: PPUSH
65295: LD_INT 3
65297: PPUSH
65298: CALL_OW 12
65302: PUSH
65303: LD_INT 1
65305: PPUSH
65306: LD_INT 3
65308: PPUSH
65309: CALL_OW 12
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// animal := CreateHuman ;
65326: LD_ADDR_VAR 0 12
65330: PUSH
65331: CALL_OW 44
65335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65336: LD_VAR 0 12
65340: PPUSH
65341: LD_VAR 0 8
65345: PPUSH
65346: LD_INT 0
65348: PPUSH
65349: CALL 67128 0 3
// end ;
65353: GO 65251
65355: POP
65356: POP
// if enchidnas then
65357: LD_VAR 0 4
65361: IFFALSE 65428
// for i = 1 to enchidnas do
65363: LD_ADDR_VAR 0 11
65367: PUSH
65368: DOUBLE
65369: LD_INT 1
65371: DEC
65372: ST_TO_ADDR
65373: LD_VAR 0 4
65377: PUSH
65378: FOR_TO
65379: IFFALSE 65426
// begin hc_class = 13 ;
65381: LD_ADDR_OWVAR 28
65385: PUSH
65386: LD_INT 13
65388: ST_TO_ADDR
// hc_gallery =  ;
65389: LD_ADDR_OWVAR 33
65393: PUSH
65394: LD_STRING 
65396: ST_TO_ADDR
// animal := CreateHuman ;
65397: LD_ADDR_VAR 0 12
65401: PUSH
65402: CALL_OW 44
65406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65407: LD_VAR 0 12
65411: PPUSH
65412: LD_VAR 0 8
65416: PPUSH
65417: LD_INT 0
65419: PPUSH
65420: CALL 67128 0 3
// end ;
65424: GO 65378
65426: POP
65427: POP
// if fishes then
65428: LD_VAR 0 7
65432: IFFALSE 65499
// for i = 1 to fishes do
65434: LD_ADDR_VAR 0 11
65438: PUSH
65439: DOUBLE
65440: LD_INT 1
65442: DEC
65443: ST_TO_ADDR
65444: LD_VAR 0 7
65448: PUSH
65449: FOR_TO
65450: IFFALSE 65497
// begin hc_class = 20 ;
65452: LD_ADDR_OWVAR 28
65456: PUSH
65457: LD_INT 20
65459: ST_TO_ADDR
// hc_gallery =  ;
65460: LD_ADDR_OWVAR 33
65464: PUSH
65465: LD_STRING 
65467: ST_TO_ADDR
// animal := CreateHuman ;
65468: LD_ADDR_VAR 0 12
65472: PUSH
65473: CALL_OW 44
65477: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65478: LD_VAR 0 12
65482: PPUSH
65483: LD_VAR 0 9
65487: PPUSH
65488: LD_INT 0
65490: PPUSH
65491: CALL 67128 0 3
// end ;
65495: GO 65449
65497: POP
65498: POP
// end ;
65499: LD_VAR 0 10
65503: RET
// export function WantHeal ( sci , unit ) ; begin
65504: LD_INT 0
65506: PPUSH
// if GetTaskList ( sci ) > 0 then
65507: LD_VAR 0 1
65511: PPUSH
65512: CALL_OW 437
65516: PUSH
65517: LD_INT 0
65519: GREATER
65520: IFFALSE 65590
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65522: LD_VAR 0 1
65526: PPUSH
65527: CALL_OW 437
65531: PUSH
65532: LD_INT 1
65534: ARRAY
65535: PUSH
65536: LD_INT 1
65538: ARRAY
65539: PUSH
65540: LD_STRING l
65542: EQUAL
65543: PUSH
65544: LD_VAR 0 1
65548: PPUSH
65549: CALL_OW 437
65553: PUSH
65554: LD_INT 1
65556: ARRAY
65557: PUSH
65558: LD_INT 4
65560: ARRAY
65561: PUSH
65562: LD_VAR 0 2
65566: EQUAL
65567: AND
65568: IFFALSE 65580
// result := true else
65570: LD_ADDR_VAR 0 3
65574: PUSH
65575: LD_INT 1
65577: ST_TO_ADDR
65578: GO 65588
// result := false ;
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: LD_INT 0
65587: ST_TO_ADDR
// end else
65588: GO 65598
// result := false ;
65590: LD_ADDR_VAR 0 3
65594: PUSH
65595: LD_INT 0
65597: ST_TO_ADDR
// end ;
65598: LD_VAR 0 3
65602: RET
// export function HealTarget ( sci ) ; begin
65603: LD_INT 0
65605: PPUSH
// if not sci then
65606: LD_VAR 0 1
65610: NOT
65611: IFFALSE 65615
// exit ;
65613: GO 65680
// result := 0 ;
65615: LD_ADDR_VAR 0 2
65619: PUSH
65620: LD_INT 0
65622: ST_TO_ADDR
// if GetTaskList ( sci ) then
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 437
65632: IFFALSE 65680
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65634: LD_VAR 0 1
65638: PPUSH
65639: CALL_OW 437
65643: PUSH
65644: LD_INT 1
65646: ARRAY
65647: PUSH
65648: LD_INT 1
65650: ARRAY
65651: PUSH
65652: LD_STRING l
65654: EQUAL
65655: IFFALSE 65680
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65657: LD_ADDR_VAR 0 2
65661: PUSH
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL_OW 437
65671: PUSH
65672: LD_INT 1
65674: ARRAY
65675: PUSH
65676: LD_INT 4
65678: ARRAY
65679: ST_TO_ADDR
// end ;
65680: LD_VAR 0 2
65684: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65685: LD_INT 0
65687: PPUSH
65688: PPUSH
65689: PPUSH
65690: PPUSH
// if not base_units then
65691: LD_VAR 0 1
65695: NOT
65696: IFFALSE 65700
// exit ;
65698: GO 65787
// result := false ;
65700: LD_ADDR_VAR 0 2
65704: PUSH
65705: LD_INT 0
65707: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65708: LD_ADDR_VAR 0 5
65712: PUSH
65713: LD_VAR 0 1
65717: PPUSH
65718: LD_INT 21
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PPUSH
65728: CALL_OW 72
65732: ST_TO_ADDR
// if not tmp then
65733: LD_VAR 0 5
65737: NOT
65738: IFFALSE 65742
// exit ;
65740: GO 65787
// for i in tmp do
65742: LD_ADDR_VAR 0 3
65746: PUSH
65747: LD_VAR 0 5
65751: PUSH
65752: FOR_IN
65753: IFFALSE 65785
// begin result := EnemyInRange ( i , 22 ) ;
65755: LD_ADDR_VAR 0 2
65759: PUSH
65760: LD_VAR 0 3
65764: PPUSH
65765: LD_INT 22
65767: PPUSH
65768: CALL 63374 0 2
65772: ST_TO_ADDR
// if result then
65773: LD_VAR 0 2
65777: IFFALSE 65783
// exit ;
65779: POP
65780: POP
65781: GO 65787
// end ;
65783: GO 65752
65785: POP
65786: POP
// end ;
65787: LD_VAR 0 2
65791: RET
// export function FilterByTag ( units , tag ) ; begin
65792: LD_INT 0
65794: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65795: LD_ADDR_VAR 0 3
65799: PUSH
65800: LD_VAR 0 1
65804: PPUSH
65805: LD_INT 120
65807: PUSH
65808: LD_VAR 0 2
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PPUSH
65817: CALL_OW 72
65821: ST_TO_ADDR
// end ;
65822: LD_VAR 0 3
65826: RET
// export function IsDriver ( un ) ; begin
65827: LD_INT 0
65829: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65830: LD_ADDR_VAR 0 2
65834: PUSH
65835: LD_VAR 0 1
65839: PUSH
65840: LD_INT 55
65842: PUSH
65843: EMPTY
65844: LIST
65845: PPUSH
65846: CALL_OW 69
65850: IN
65851: ST_TO_ADDR
// end ;
65852: LD_VAR 0 2
65856: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65857: LD_INT 0
65859: PPUSH
65860: PPUSH
// list := [ ] ;
65861: LD_ADDR_VAR 0 5
65865: PUSH
65866: EMPTY
65867: ST_TO_ADDR
// case d of 0 :
65868: LD_VAR 0 3
65872: PUSH
65873: LD_INT 0
65875: DOUBLE
65876: EQUAL
65877: IFTRUE 65881
65879: GO 66014
65881: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65882: LD_ADDR_VAR 0 5
65886: PUSH
65887: LD_VAR 0 1
65891: PUSH
65892: LD_INT 4
65894: MINUS
65895: PUSH
65896: LD_VAR 0 2
65900: PUSH
65901: LD_INT 4
65903: MINUS
65904: PUSH
65905: LD_INT 2
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: PUSH
65913: LD_VAR 0 1
65917: PUSH
65918: LD_INT 3
65920: MINUS
65921: PUSH
65922: LD_VAR 0 2
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: PUSH
65935: LD_VAR 0 1
65939: PUSH
65940: LD_INT 4
65942: PLUS
65943: PUSH
65944: LD_VAR 0 2
65948: PUSH
65949: LD_INT 4
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: LIST
65956: PUSH
65957: LD_VAR 0 1
65961: PUSH
65962: LD_INT 3
65964: PLUS
65965: PUSH
65966: LD_VAR 0 2
65970: PUSH
65971: LD_INT 3
65973: PLUS
65974: PUSH
65975: LD_INT 5
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: PUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_VAR 0 2
65992: PUSH
65993: LD_INT 4
65995: PLUS
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: ST_TO_ADDR
// end ; 1 :
66012: GO 66712
66014: LD_INT 1
66016: DOUBLE
66017: EQUAL
66018: IFTRUE 66022
66020: GO 66155
66022: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66023: LD_ADDR_VAR 0 5
66027: PUSH
66028: LD_VAR 0 1
66032: PUSH
66033: LD_VAR 0 2
66037: PUSH
66038: LD_INT 4
66040: MINUS
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: PUSH
66050: LD_VAR 0 1
66054: PUSH
66055: LD_INT 3
66057: MINUS
66058: PUSH
66059: LD_VAR 0 2
66063: PUSH
66064: LD_INT 3
66066: MINUS
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: PUSH
66076: LD_VAR 0 1
66080: PUSH
66081: LD_INT 4
66083: MINUS
66084: PUSH
66085: LD_VAR 0 2
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: PUSH
66098: LD_VAR 0 1
66102: PUSH
66103: LD_VAR 0 2
66107: PUSH
66108: LD_INT 3
66110: PLUS
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: PUSH
66120: LD_VAR 0 1
66124: PUSH
66125: LD_INT 4
66127: PLUS
66128: PUSH
66129: LD_VAR 0 2
66133: PUSH
66134: LD_INT 4
66136: PLUS
66137: PUSH
66138: LD_INT 5
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: ST_TO_ADDR
// end ; 2 :
66153: GO 66712
66155: LD_INT 2
66157: DOUBLE
66158: EQUAL
66159: IFTRUE 66163
66161: GO 66292
66163: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66164: LD_ADDR_VAR 0 5
66168: PUSH
66169: LD_VAR 0 1
66173: PUSH
66174: LD_VAR 0 2
66178: PUSH
66179: LD_INT 3
66181: MINUS
66182: PUSH
66183: LD_INT 3
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: PUSH
66191: LD_VAR 0 1
66195: PUSH
66196: LD_INT 4
66198: PLUS
66199: PUSH
66200: LD_VAR 0 2
66204: PUSH
66205: LD_INT 4
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: PUSH
66213: LD_VAR 0 1
66217: PUSH
66218: LD_VAR 0 2
66222: PUSH
66223: LD_INT 4
66225: PLUS
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: PUSH
66235: LD_VAR 0 1
66239: PUSH
66240: LD_INT 3
66242: MINUS
66243: PUSH
66244: LD_VAR 0 2
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: PUSH
66257: LD_VAR 0 1
66261: PUSH
66262: LD_INT 4
66264: MINUS
66265: PUSH
66266: LD_VAR 0 2
66270: PUSH
66271: LD_INT 4
66273: MINUS
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: ST_TO_ADDR
// end ; 3 :
66290: GO 66712
66292: LD_INT 3
66294: DOUBLE
66295: EQUAL
66296: IFTRUE 66300
66298: GO 66433
66300: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66301: LD_ADDR_VAR 0 5
66305: PUSH
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 3
66313: PLUS
66314: PUSH
66315: LD_VAR 0 2
66319: PUSH
66320: LD_INT 4
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: LIST
66327: PUSH
66328: LD_VAR 0 1
66332: PUSH
66333: LD_INT 4
66335: PLUS
66336: PUSH
66337: LD_VAR 0 2
66341: PUSH
66342: LD_INT 4
66344: PLUS
66345: PUSH
66346: LD_INT 5
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: PUSH
66354: LD_VAR 0 1
66358: PUSH
66359: LD_INT 4
66361: MINUS
66362: PUSH
66363: LD_VAR 0 2
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: LIST
66375: PUSH
66376: LD_VAR 0 1
66380: PUSH
66381: LD_VAR 0 2
66385: PUSH
66386: LD_INT 4
66388: MINUS
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: LIST
66397: PUSH
66398: LD_VAR 0 1
66402: PUSH
66403: LD_INT 3
66405: MINUS
66406: PUSH
66407: LD_VAR 0 2
66411: PUSH
66412: LD_INT 3
66414: MINUS
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: ST_TO_ADDR
// end ; 4 :
66431: GO 66712
66433: LD_INT 4
66435: DOUBLE
66436: EQUAL
66437: IFTRUE 66441
66439: GO 66574
66441: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66442: LD_ADDR_VAR 0 5
66446: PUSH
66447: LD_VAR 0 1
66451: PUSH
66452: LD_VAR 0 2
66456: PUSH
66457: LD_INT 4
66459: PLUS
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: PUSH
66469: LD_VAR 0 1
66473: PUSH
66474: LD_INT 3
66476: PLUS
66477: PUSH
66478: LD_VAR 0 2
66482: PUSH
66483: LD_INT 3
66485: PLUS
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: PUSH
66495: LD_VAR 0 1
66499: PUSH
66500: LD_INT 4
66502: PLUS
66503: PUSH
66504: LD_VAR 0 2
66508: PUSH
66509: LD_INT 4
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: LD_VAR 0 1
66521: PUSH
66522: LD_VAR 0 2
66526: PUSH
66527: LD_INT 3
66529: MINUS
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: LIST
66538: PUSH
66539: LD_VAR 0 1
66543: PUSH
66544: LD_INT 4
66546: MINUS
66547: PUSH
66548: LD_VAR 0 2
66552: PUSH
66553: LD_INT 4
66555: MINUS
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: LIST
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// end ; 5 :
66572: GO 66712
66574: LD_INT 5
66576: DOUBLE
66577: EQUAL
66578: IFTRUE 66582
66580: GO 66711
66582: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66583: LD_ADDR_VAR 0 5
66587: PUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_INT 4
66595: MINUS
66596: PUSH
66597: LD_VAR 0 2
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: PUSH
66610: LD_VAR 0 1
66614: PUSH
66615: LD_VAR 0 2
66619: PUSH
66620: LD_INT 4
66622: MINUS
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: PUSH
66632: LD_VAR 0 1
66636: PUSH
66637: LD_INT 4
66639: PLUS
66640: PUSH
66641: LD_VAR 0 2
66645: PUSH
66646: LD_INT 4
66648: PLUS
66649: PUSH
66650: LD_INT 5
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: PUSH
66658: LD_VAR 0 1
66662: PUSH
66663: LD_INT 3
66665: PLUS
66666: PUSH
66667: LD_VAR 0 2
66671: PUSH
66672: LD_INT 4
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: PUSH
66680: LD_VAR 0 1
66684: PUSH
66685: LD_VAR 0 2
66689: PUSH
66690: LD_INT 3
66692: PLUS
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// end ; end ;
66709: GO 66712
66711: POP
// result := list ;
66712: LD_ADDR_VAR 0 4
66716: PUSH
66717: LD_VAR 0 5
66721: ST_TO_ADDR
// end ;
66722: LD_VAR 0 4
66726: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66727: LD_INT 0
66729: PPUSH
66730: PPUSH
66731: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66732: LD_VAR 0 1
66736: NOT
66737: PUSH
66738: LD_VAR 0 2
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 4
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: IN
66761: NOT
66762: OR
66763: IFFALSE 66767
// exit ;
66765: GO 66850
// tmp := [ ] ;
66767: LD_ADDR_VAR 0 5
66771: PUSH
66772: EMPTY
66773: ST_TO_ADDR
// for i in units do
66774: LD_ADDR_VAR 0 4
66778: PUSH
66779: LD_VAR 0 1
66783: PUSH
66784: FOR_IN
66785: IFFALSE 66819
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66787: LD_ADDR_VAR 0 5
66791: PUSH
66792: LD_VAR 0 5
66796: PPUSH
66797: LD_VAR 0 4
66801: PPUSH
66802: LD_VAR 0 2
66806: PPUSH
66807: CALL_OW 259
66811: PPUSH
66812: CALL 68223 0 2
66816: ST_TO_ADDR
66817: GO 66784
66819: POP
66820: POP
// if not tmp then
66821: LD_VAR 0 5
66825: NOT
66826: IFFALSE 66830
// exit ;
66828: GO 66850
// result := SortListByListDesc ( units , tmp ) ;
66830: LD_ADDR_VAR 0 3
66834: PUSH
66835: LD_VAR 0 1
66839: PPUSH
66840: LD_VAR 0 5
66844: PPUSH
66845: CALL_OW 77
66849: ST_TO_ADDR
// end ;
66850: LD_VAR 0 3
66854: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66855: LD_INT 0
66857: PPUSH
66858: PPUSH
66859: PPUSH
// result := false ;
66860: LD_ADDR_VAR 0 3
66864: PUSH
66865: LD_INT 0
66867: ST_TO_ADDR
// if not building then
66868: LD_VAR 0 2
66872: NOT
66873: IFFALSE 66877
// exit ;
66875: GO 67015
// x := GetX ( building ) ;
66877: LD_ADDR_VAR 0 4
66881: PUSH
66882: LD_VAR 0 2
66886: PPUSH
66887: CALL_OW 250
66891: ST_TO_ADDR
// y := GetY ( building ) ;
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: LD_VAR 0 2
66901: PPUSH
66902: CALL_OW 251
66906: ST_TO_ADDR
// if not x or not y then
66907: LD_VAR 0 4
66911: NOT
66912: PUSH
66913: LD_VAR 0 5
66917: NOT
66918: OR
66919: IFFALSE 66923
// exit ;
66921: GO 67015
// if GetTaskList ( unit ) then
66923: LD_VAR 0 1
66927: PPUSH
66928: CALL_OW 437
66932: IFFALSE 67015
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66934: LD_STRING e
66936: PUSH
66937: LD_VAR 0 1
66941: PPUSH
66942: CALL_OW 437
66946: PUSH
66947: LD_INT 1
66949: ARRAY
66950: PUSH
66951: LD_INT 1
66953: ARRAY
66954: EQUAL
66955: PUSH
66956: LD_VAR 0 4
66960: PUSH
66961: LD_VAR 0 1
66965: PPUSH
66966: CALL_OW 437
66970: PUSH
66971: LD_INT 1
66973: ARRAY
66974: PUSH
66975: LD_INT 2
66977: ARRAY
66978: EQUAL
66979: AND
66980: PUSH
66981: LD_VAR 0 5
66985: PUSH
66986: LD_VAR 0 1
66990: PPUSH
66991: CALL_OW 437
66995: PUSH
66996: LD_INT 1
66998: ARRAY
66999: PUSH
67000: LD_INT 3
67002: ARRAY
67003: EQUAL
67004: AND
67005: IFFALSE 67015
// result := true end ;
67007: LD_ADDR_VAR 0 3
67011: PUSH
67012: LD_INT 1
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 3
67019: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67020: LD_INT 0
67022: PPUSH
// result := false ;
67023: LD_ADDR_VAR 0 4
67027: PUSH
67028: LD_INT 0
67030: ST_TO_ADDR
// if GetTaskList ( unit ) then
67031: LD_VAR 0 1
67035: PPUSH
67036: CALL_OW 437
67040: IFFALSE 67123
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67042: LD_STRING M
67044: PUSH
67045: LD_VAR 0 1
67049: PPUSH
67050: CALL_OW 437
67054: PUSH
67055: LD_INT 1
67057: ARRAY
67058: PUSH
67059: LD_INT 1
67061: ARRAY
67062: EQUAL
67063: PUSH
67064: LD_VAR 0 2
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 437
67078: PUSH
67079: LD_INT 1
67081: ARRAY
67082: PUSH
67083: LD_INT 2
67085: ARRAY
67086: EQUAL
67087: AND
67088: PUSH
67089: LD_VAR 0 3
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 437
67103: PUSH
67104: LD_INT 1
67106: ARRAY
67107: PUSH
67108: LD_INT 3
67110: ARRAY
67111: EQUAL
67112: AND
67113: IFFALSE 67123
// result := true ;
67115: LD_ADDR_VAR 0 4
67119: PUSH
67120: LD_INT 1
67122: ST_TO_ADDR
// end ; end ;
67123: LD_VAR 0 4
67127: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67128: LD_INT 0
67130: PPUSH
67131: PPUSH
67132: PPUSH
67133: PPUSH
// if not unit or not area then
67134: LD_VAR 0 1
67138: NOT
67139: PUSH
67140: LD_VAR 0 2
67144: NOT
67145: OR
67146: IFFALSE 67150
// exit ;
67148: GO 67326
// tmp := AreaToList ( area , i ) ;
67150: LD_ADDR_VAR 0 6
67154: PUSH
67155: LD_VAR 0 2
67159: PPUSH
67160: LD_VAR 0 5
67164: PPUSH
67165: CALL_OW 517
67169: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67170: LD_ADDR_VAR 0 5
67174: PUSH
67175: DOUBLE
67176: LD_INT 1
67178: DEC
67179: ST_TO_ADDR
67180: LD_VAR 0 6
67184: PUSH
67185: LD_INT 1
67187: ARRAY
67188: PUSH
67189: FOR_TO
67190: IFFALSE 67324
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67192: LD_ADDR_VAR 0 7
67196: PUSH
67197: LD_VAR 0 6
67201: PUSH
67202: LD_INT 1
67204: ARRAY
67205: PUSH
67206: LD_VAR 0 5
67210: ARRAY
67211: PUSH
67212: LD_VAR 0 6
67216: PUSH
67217: LD_INT 2
67219: ARRAY
67220: PUSH
67221: LD_VAR 0 5
67225: ARRAY
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67231: LD_INT 92
67233: PUSH
67234: LD_VAR 0 7
67238: PUSH
67239: LD_INT 1
67241: ARRAY
67242: PUSH
67243: LD_VAR 0 7
67247: PUSH
67248: LD_INT 2
67250: ARRAY
67251: PUSH
67252: LD_INT 2
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: PPUSH
67261: CALL_OW 69
67265: PUSH
67266: LD_INT 0
67268: EQUAL
67269: IFFALSE 67322
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67271: LD_VAR 0 1
67275: PPUSH
67276: LD_VAR 0 7
67280: PUSH
67281: LD_INT 1
67283: ARRAY
67284: PPUSH
67285: LD_VAR 0 7
67289: PUSH
67290: LD_INT 2
67292: ARRAY
67293: PPUSH
67294: LD_VAR 0 3
67298: PPUSH
67299: CALL_OW 48
// result := IsPlaced ( unit ) ;
67303: LD_ADDR_VAR 0 4
67307: PUSH
67308: LD_VAR 0 1
67312: PPUSH
67313: CALL_OW 305
67317: ST_TO_ADDR
// exit ;
67318: POP
67319: POP
67320: GO 67326
// end ; end ;
67322: GO 67189
67324: POP
67325: POP
// end ;
67326: LD_VAR 0 4
67330: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67331: LD_INT 0
67333: PPUSH
67334: PPUSH
67335: PPUSH
// if not side or side > 8 then
67336: LD_VAR 0 1
67340: NOT
67341: PUSH
67342: LD_VAR 0 1
67346: PUSH
67347: LD_INT 8
67349: GREATER
67350: OR
67351: IFFALSE 67355
// exit ;
67353: GO 67542
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67355: LD_ADDR_VAR 0 4
67359: PUSH
67360: LD_INT 22
67362: PUSH
67363: LD_VAR 0 1
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 21
67374: PUSH
67375: LD_INT 3
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PPUSH
67386: CALL_OW 69
67390: ST_TO_ADDR
// if not tmp then
67391: LD_VAR 0 4
67395: NOT
67396: IFFALSE 67400
// exit ;
67398: GO 67542
// enable_addtolog := true ;
67400: LD_ADDR_OWVAR 81
67404: PUSH
67405: LD_INT 1
67407: ST_TO_ADDR
// AddToLog ( [ ) ;
67408: LD_STRING [
67410: PPUSH
67411: CALL_OW 561
// for i in tmp do
67415: LD_ADDR_VAR 0 3
67419: PUSH
67420: LD_VAR 0 4
67424: PUSH
67425: FOR_IN
67426: IFFALSE 67533
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67428: LD_STRING [
67430: PUSH
67431: LD_VAR 0 3
67435: PPUSH
67436: CALL_OW 266
67440: STR
67441: PUSH
67442: LD_STRING , 
67444: STR
67445: PUSH
67446: LD_VAR 0 3
67450: PPUSH
67451: CALL_OW 250
67455: STR
67456: PUSH
67457: LD_STRING , 
67459: STR
67460: PUSH
67461: LD_VAR 0 3
67465: PPUSH
67466: CALL_OW 251
67470: STR
67471: PUSH
67472: LD_STRING , 
67474: STR
67475: PUSH
67476: LD_VAR 0 3
67480: PPUSH
67481: CALL_OW 254
67485: STR
67486: PUSH
67487: LD_STRING , 
67489: STR
67490: PUSH
67491: LD_VAR 0 3
67495: PPUSH
67496: LD_INT 1
67498: PPUSH
67499: CALL_OW 268
67503: STR
67504: PUSH
67505: LD_STRING , 
67507: STR
67508: PUSH
67509: LD_VAR 0 3
67513: PPUSH
67514: LD_INT 2
67516: PPUSH
67517: CALL_OW 268
67521: STR
67522: PUSH
67523: LD_STRING ],
67525: STR
67526: PPUSH
67527: CALL_OW 561
// end ;
67531: GO 67425
67533: POP
67534: POP
// AddToLog ( ]; ) ;
67535: LD_STRING ];
67537: PPUSH
67538: CALL_OW 561
// end ;
67542: LD_VAR 0 2
67546: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67547: LD_INT 0
67549: PPUSH
67550: PPUSH
67551: PPUSH
67552: PPUSH
67553: PPUSH
// if not area or not rate or not max then
67554: LD_VAR 0 1
67558: NOT
67559: PUSH
67560: LD_VAR 0 2
67564: NOT
67565: OR
67566: PUSH
67567: LD_VAR 0 4
67571: NOT
67572: OR
67573: IFFALSE 67577
// exit ;
67575: GO 67766
// while 1 do
67577: LD_INT 1
67579: IFFALSE 67766
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67581: LD_ADDR_VAR 0 9
67585: PUSH
67586: LD_VAR 0 1
67590: PPUSH
67591: LD_INT 1
67593: PPUSH
67594: CALL_OW 287
67598: PUSH
67599: LD_INT 10
67601: MUL
67602: ST_TO_ADDR
// r := rate / 10 ;
67603: LD_ADDR_VAR 0 7
67607: PUSH
67608: LD_VAR 0 2
67612: PUSH
67613: LD_INT 10
67615: DIVREAL
67616: ST_TO_ADDR
// time := 1 1$00 ;
67617: LD_ADDR_VAR 0 8
67621: PUSH
67622: LD_INT 2100
67624: ST_TO_ADDR
// if amount < min then
67625: LD_VAR 0 9
67629: PUSH
67630: LD_VAR 0 3
67634: LESS
67635: IFFALSE 67653
// r := r * 2 else
67637: LD_ADDR_VAR 0 7
67641: PUSH
67642: LD_VAR 0 7
67646: PUSH
67647: LD_INT 2
67649: MUL
67650: ST_TO_ADDR
67651: GO 67679
// if amount > max then
67653: LD_VAR 0 9
67657: PUSH
67658: LD_VAR 0 4
67662: GREATER
67663: IFFALSE 67679
// r := r / 2 ;
67665: LD_ADDR_VAR 0 7
67669: PUSH
67670: LD_VAR 0 7
67674: PUSH
67675: LD_INT 2
67677: DIVREAL
67678: ST_TO_ADDR
// time := time / r ;
67679: LD_ADDR_VAR 0 8
67683: PUSH
67684: LD_VAR 0 8
67688: PUSH
67689: LD_VAR 0 7
67693: DIVREAL
67694: ST_TO_ADDR
// if time < 0 then
67695: LD_VAR 0 8
67699: PUSH
67700: LD_INT 0
67702: LESS
67703: IFFALSE 67720
// time := time * - 1 ;
67705: LD_ADDR_VAR 0 8
67709: PUSH
67710: LD_VAR 0 8
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: MUL
67719: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67720: LD_VAR 0 8
67724: PUSH
67725: LD_INT 35
67727: PPUSH
67728: LD_INT 875
67730: PPUSH
67731: CALL_OW 12
67735: PLUS
67736: PPUSH
67737: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67741: LD_INT 1
67743: PPUSH
67744: LD_INT 5
67746: PPUSH
67747: CALL_OW 12
67751: PPUSH
67752: LD_VAR 0 1
67756: PPUSH
67757: LD_INT 1
67759: PPUSH
67760: CALL_OW 55
// end ;
67764: GO 67577
// end ;
67766: LD_VAR 0 5
67770: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67771: LD_INT 0
67773: PPUSH
67774: PPUSH
67775: PPUSH
67776: PPUSH
67777: PPUSH
67778: PPUSH
67779: PPUSH
67780: PPUSH
// if not turrets or not factories then
67781: LD_VAR 0 1
67785: NOT
67786: PUSH
67787: LD_VAR 0 2
67791: NOT
67792: OR
67793: IFFALSE 67797
// exit ;
67795: GO 68104
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67797: LD_ADDR_VAR 0 10
67801: PUSH
67802: LD_INT 5
67804: PUSH
67805: LD_INT 6
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 4
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: LD_INT 5
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 24
67839: PUSH
67840: LD_INT 25
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 23
67849: PUSH
67850: LD_INT 27
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 42
67863: PUSH
67864: LD_INT 43
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 44
67873: PUSH
67874: LD_INT 46
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 45
67883: PUSH
67884: LD_INT 47
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: ST_TO_ADDR
// result := [ ] ;
67901: LD_ADDR_VAR 0 3
67905: PUSH
67906: EMPTY
67907: ST_TO_ADDR
// for i in turrets do
67908: LD_ADDR_VAR 0 4
67912: PUSH
67913: LD_VAR 0 1
67917: PUSH
67918: FOR_IN
67919: IFFALSE 68102
// begin nat := GetNation ( i ) ;
67921: LD_ADDR_VAR 0 7
67925: PUSH
67926: LD_VAR 0 4
67930: PPUSH
67931: CALL_OW 248
67935: ST_TO_ADDR
// weapon := 0 ;
67936: LD_ADDR_VAR 0 8
67940: PUSH
67941: LD_INT 0
67943: ST_TO_ADDR
// if not nat then
67944: LD_VAR 0 7
67948: NOT
67949: IFFALSE 67953
// continue ;
67951: GO 67918
// for j in list [ nat ] do
67953: LD_ADDR_VAR 0 5
67957: PUSH
67958: LD_VAR 0 10
67962: PUSH
67963: LD_VAR 0 7
67967: ARRAY
67968: PUSH
67969: FOR_IN
67970: IFFALSE 68011
// if GetBWeapon ( i ) = j [ 1 ] then
67972: LD_VAR 0 4
67976: PPUSH
67977: CALL_OW 269
67981: PUSH
67982: LD_VAR 0 5
67986: PUSH
67987: LD_INT 1
67989: ARRAY
67990: EQUAL
67991: IFFALSE 68009
// begin weapon := j [ 2 ] ;
67993: LD_ADDR_VAR 0 8
67997: PUSH
67998: LD_VAR 0 5
68002: PUSH
68003: LD_INT 2
68005: ARRAY
68006: ST_TO_ADDR
// break ;
68007: GO 68011
// end ;
68009: GO 67969
68011: POP
68012: POP
// if not weapon then
68013: LD_VAR 0 8
68017: NOT
68018: IFFALSE 68022
// continue ;
68020: GO 67918
// for k in factories do
68022: LD_ADDR_VAR 0 6
68026: PUSH
68027: LD_VAR 0 2
68031: PUSH
68032: FOR_IN
68033: IFFALSE 68098
// begin weapons := AvailableWeaponList ( k ) ;
68035: LD_ADDR_VAR 0 9
68039: PUSH
68040: LD_VAR 0 6
68044: PPUSH
68045: CALL_OW 478
68049: ST_TO_ADDR
// if not weapons then
68050: LD_VAR 0 9
68054: NOT
68055: IFFALSE 68059
// continue ;
68057: GO 68032
// if weapon in weapons then
68059: LD_VAR 0 8
68063: PUSH
68064: LD_VAR 0 9
68068: IN
68069: IFFALSE 68096
// begin result := [ i , weapon ] ;
68071: LD_ADDR_VAR 0 3
68075: PUSH
68076: LD_VAR 0 4
68080: PUSH
68081: LD_VAR 0 8
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: ST_TO_ADDR
// exit ;
68090: POP
68091: POP
68092: POP
68093: POP
68094: GO 68104
// end ; end ;
68096: GO 68032
68098: POP
68099: POP
// end ;
68100: GO 67918
68102: POP
68103: POP
// end ;
68104: LD_VAR 0 3
68108: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68109: LD_INT 0
68111: PPUSH
// if not side or side > 8 then
68112: LD_VAR 0 3
68116: NOT
68117: PUSH
68118: LD_VAR 0 3
68122: PUSH
68123: LD_INT 8
68125: GREATER
68126: OR
68127: IFFALSE 68131
// exit ;
68129: GO 68190
// if not range then
68131: LD_VAR 0 4
68135: NOT
68136: IFFALSE 68147
// range := - 12 ;
68138: LD_ADDR_VAR 0 4
68142: PUSH
68143: LD_INT 12
68145: NEG
68146: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68147: LD_VAR 0 1
68151: PPUSH
68152: LD_VAR 0 2
68156: PPUSH
68157: LD_VAR 0 3
68161: PPUSH
68162: LD_VAR 0 4
68166: PPUSH
68167: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68171: LD_VAR 0 1
68175: PPUSH
68176: LD_VAR 0 2
68180: PPUSH
68181: LD_VAR 0 3
68185: PPUSH
68186: CALL_OW 331
// end ;
68190: LD_VAR 0 5
68194: RET
// export function Video ( mode ) ; begin
68195: LD_INT 0
68197: PPUSH
// ingame_video = mode ;
68198: LD_ADDR_OWVAR 52
68202: PUSH
68203: LD_VAR 0 1
68207: ST_TO_ADDR
// interface_hidden = mode ;
68208: LD_ADDR_OWVAR 54
68212: PUSH
68213: LD_VAR 0 1
68217: ST_TO_ADDR
// end ;
68218: LD_VAR 0 2
68222: RET
// export function Join ( array , element ) ; begin
68223: LD_INT 0
68225: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68226: LD_ADDR_VAR 0 3
68230: PUSH
68231: LD_VAR 0 1
68235: PPUSH
68236: LD_VAR 0 1
68240: PUSH
68241: LD_INT 1
68243: PLUS
68244: PPUSH
68245: LD_VAR 0 2
68249: PPUSH
68250: CALL_OW 1
68254: ST_TO_ADDR
// end ;
68255: LD_VAR 0 3
68259: RET
// export function JoinUnion ( array , element ) ; begin
68260: LD_INT 0
68262: PPUSH
// result := array union element ;
68263: LD_ADDR_VAR 0 3
68267: PUSH
68268: LD_VAR 0 1
68272: PUSH
68273: LD_VAR 0 2
68277: UNION
68278: ST_TO_ADDR
// end ;
68279: LD_VAR 0 3
68283: RET
// export function GetBehemoths ( side ) ; begin
68284: LD_INT 0
68286: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68287: LD_ADDR_VAR 0 2
68291: PUSH
68292: LD_INT 22
68294: PUSH
68295: LD_VAR 0 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 31
68306: PUSH
68307: LD_INT 25
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PPUSH
68318: CALL_OW 69
68322: ST_TO_ADDR
// end ;
68323: LD_VAR 0 2
68327: RET
// export function Shuffle ( array ) ; var i , index ; begin
68328: LD_INT 0
68330: PPUSH
68331: PPUSH
68332: PPUSH
// result := [ ] ;
68333: LD_ADDR_VAR 0 2
68337: PUSH
68338: EMPTY
68339: ST_TO_ADDR
// if not array then
68340: LD_VAR 0 1
68344: NOT
68345: IFFALSE 68349
// exit ;
68347: GO 68448
// Randomize ;
68349: CALL_OW 10
// for i = array downto 1 do
68353: LD_ADDR_VAR 0 3
68357: PUSH
68358: DOUBLE
68359: LD_VAR 0 1
68363: INC
68364: ST_TO_ADDR
68365: LD_INT 1
68367: PUSH
68368: FOR_DOWNTO
68369: IFFALSE 68446
// begin index := rand ( 1 , array ) ;
68371: LD_ADDR_VAR 0 4
68375: PUSH
68376: LD_INT 1
68378: PPUSH
68379: LD_VAR 0 1
68383: PPUSH
68384: CALL_OW 12
68388: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68389: LD_ADDR_VAR 0 2
68393: PUSH
68394: LD_VAR 0 2
68398: PPUSH
68399: LD_VAR 0 2
68403: PUSH
68404: LD_INT 1
68406: PLUS
68407: PPUSH
68408: LD_VAR 0 1
68412: PUSH
68413: LD_VAR 0 4
68417: ARRAY
68418: PPUSH
68419: CALL_OW 2
68423: ST_TO_ADDR
// array := Delete ( array , index ) ;
68424: LD_ADDR_VAR 0 1
68428: PUSH
68429: LD_VAR 0 1
68433: PPUSH
68434: LD_VAR 0 4
68438: PPUSH
68439: CALL_OW 3
68443: ST_TO_ADDR
// end ;
68444: GO 68368
68446: POP
68447: POP
// end ;
68448: LD_VAR 0 2
68452: RET
// export function GetBaseMaterials ( base ) ; begin
68453: LD_INT 0
68455: PPUSH
// result := [ 0 , 0 , 0 ] ;
68456: LD_ADDR_VAR 0 2
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: ST_TO_ADDR
// if not base then
68475: LD_VAR 0 1
68479: NOT
68480: IFFALSE 68484
// exit ;
68482: GO 68533
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68484: LD_ADDR_VAR 0 2
68488: PUSH
68489: LD_VAR 0 1
68493: PPUSH
68494: LD_INT 1
68496: PPUSH
68497: CALL_OW 275
68501: PUSH
68502: LD_VAR 0 1
68506: PPUSH
68507: LD_INT 2
68509: PPUSH
68510: CALL_OW 275
68514: PUSH
68515: LD_VAR 0 1
68519: PPUSH
68520: LD_INT 3
68522: PPUSH
68523: CALL_OW 275
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: ST_TO_ADDR
// end ;
68533: LD_VAR 0 2
68537: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68538: LD_INT 0
68540: PPUSH
68541: PPUSH
// result := array ;
68542: LD_ADDR_VAR 0 3
68546: PUSH
68547: LD_VAR 0 1
68551: ST_TO_ADDR
// if size >= result then
68552: LD_VAR 0 2
68556: PUSH
68557: LD_VAR 0 3
68561: GREATEREQUAL
68562: IFFALSE 68566
// exit ;
68564: GO 68616
// if size then
68566: LD_VAR 0 2
68570: IFFALSE 68616
// for i := array downto size do
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: DOUBLE
68578: LD_VAR 0 1
68582: INC
68583: ST_TO_ADDR
68584: LD_VAR 0 2
68588: PUSH
68589: FOR_DOWNTO
68590: IFFALSE 68614
// result := Delete ( result , result ) ;
68592: LD_ADDR_VAR 0 3
68596: PUSH
68597: LD_VAR 0 3
68601: PPUSH
68602: LD_VAR 0 3
68606: PPUSH
68607: CALL_OW 3
68611: ST_TO_ADDR
68612: GO 68589
68614: POP
68615: POP
// end ;
68616: LD_VAR 0 3
68620: RET
// export function ComExit ( unit ) ; var tmp ; begin
68621: LD_INT 0
68623: PPUSH
68624: PPUSH
// if not IsInUnit ( unit ) then
68625: LD_VAR 0 1
68629: PPUSH
68630: CALL_OW 310
68634: NOT
68635: IFFALSE 68639
// exit ;
68637: GO 68699
// tmp := IsInUnit ( unit ) ;
68639: LD_ADDR_VAR 0 3
68643: PUSH
68644: LD_VAR 0 1
68648: PPUSH
68649: CALL_OW 310
68653: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68654: LD_VAR 0 3
68658: PPUSH
68659: CALL_OW 247
68663: PUSH
68664: LD_INT 2
68666: EQUAL
68667: IFFALSE 68680
// ComExitVehicle ( unit ) else
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 121
68678: GO 68689
// ComExitBuilding ( unit ) ;
68680: LD_VAR 0 1
68684: PPUSH
68685: CALL_OW 122
// result := tmp ;
68689: LD_ADDR_VAR 0 2
68693: PUSH
68694: LD_VAR 0 3
68698: ST_TO_ADDR
// end ;
68699: LD_VAR 0 2
68703: RET
// export function ComExitAll ( units ) ; var i ; begin
68704: LD_INT 0
68706: PPUSH
68707: PPUSH
// if not units then
68708: LD_VAR 0 1
68712: NOT
68713: IFFALSE 68717
// exit ;
68715: GO 68743
// for i in units do
68717: LD_ADDR_VAR 0 3
68721: PUSH
68722: LD_VAR 0 1
68726: PUSH
68727: FOR_IN
68728: IFFALSE 68741
// ComExit ( i ) ;
68730: LD_VAR 0 3
68734: PPUSH
68735: CALL 68621 0 1
68739: GO 68727
68741: POP
68742: POP
// end ;
68743: LD_VAR 0 2
68747: RET
// export function ResetHc ; begin
68748: LD_INT 0
68750: PPUSH
// InitHc ;
68751: CALL_OW 19
// hc_importance := 0 ;
68755: LD_ADDR_OWVAR 32
68759: PUSH
68760: LD_INT 0
68762: ST_TO_ADDR
// end ;
68763: LD_VAR 0 1
68767: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68768: LD_INT 0
68770: PPUSH
68771: PPUSH
68772: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68773: LD_ADDR_VAR 0 6
68777: PUSH
68778: LD_VAR 0 1
68782: PUSH
68783: LD_VAR 0 3
68787: PLUS
68788: PUSH
68789: LD_INT 2
68791: DIV
68792: ST_TO_ADDR
// if _x < 0 then
68793: LD_VAR 0 6
68797: PUSH
68798: LD_INT 0
68800: LESS
68801: IFFALSE 68818
// _x := _x * - 1 ;
68803: LD_ADDR_VAR 0 6
68807: PUSH
68808: LD_VAR 0 6
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: MUL
68817: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68818: LD_ADDR_VAR 0 7
68822: PUSH
68823: LD_VAR 0 2
68827: PUSH
68828: LD_VAR 0 4
68832: PLUS
68833: PUSH
68834: LD_INT 2
68836: DIV
68837: ST_TO_ADDR
// if _y < 0 then
68838: LD_VAR 0 7
68842: PUSH
68843: LD_INT 0
68845: LESS
68846: IFFALSE 68863
// _y := _y * - 1 ;
68848: LD_ADDR_VAR 0 7
68852: PUSH
68853: LD_VAR 0 7
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: MUL
68862: ST_TO_ADDR
// result := [ _x , _y ] ;
68863: LD_ADDR_VAR 0 5
68867: PUSH
68868: LD_VAR 0 6
68872: PUSH
68873: LD_VAR 0 7
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: ST_TO_ADDR
// end ;
68882: LD_VAR 0 5
68886: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68887: LD_INT 0
68889: PPUSH
68890: PPUSH
68891: PPUSH
68892: PPUSH
// task := GetTaskList ( unit ) ;
68893: LD_ADDR_VAR 0 7
68897: PUSH
68898: LD_VAR 0 1
68902: PPUSH
68903: CALL_OW 437
68907: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68908: LD_VAR 0 7
68912: NOT
68913: PUSH
68914: LD_VAR 0 1
68918: PPUSH
68919: LD_VAR 0 2
68923: PPUSH
68924: CALL_OW 308
68928: NOT
68929: AND
68930: IFFALSE 68934
// exit ;
68932: GO 69052
// if IsInArea ( unit , area ) then
68934: LD_VAR 0 1
68938: PPUSH
68939: LD_VAR 0 2
68943: PPUSH
68944: CALL_OW 308
68948: IFFALSE 68966
// begin ComMoveToArea ( unit , goAway ) ;
68950: LD_VAR 0 1
68954: PPUSH
68955: LD_VAR 0 3
68959: PPUSH
68960: CALL_OW 113
// exit ;
68964: GO 69052
// end ; if task [ 1 ] [ 1 ] <> M then
68966: LD_VAR 0 7
68970: PUSH
68971: LD_INT 1
68973: ARRAY
68974: PUSH
68975: LD_INT 1
68977: ARRAY
68978: PUSH
68979: LD_STRING M
68981: NONEQUAL
68982: IFFALSE 68986
// exit ;
68984: GO 69052
// x := task [ 1 ] [ 2 ] ;
68986: LD_ADDR_VAR 0 5
68990: PUSH
68991: LD_VAR 0 7
68995: PUSH
68996: LD_INT 1
68998: ARRAY
68999: PUSH
69000: LD_INT 2
69002: ARRAY
69003: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69004: LD_ADDR_VAR 0 6
69008: PUSH
69009: LD_VAR 0 7
69013: PUSH
69014: LD_INT 1
69016: ARRAY
69017: PUSH
69018: LD_INT 3
69020: ARRAY
69021: ST_TO_ADDR
// if InArea ( x , y , area ) then
69022: LD_VAR 0 5
69026: PPUSH
69027: LD_VAR 0 6
69031: PPUSH
69032: LD_VAR 0 2
69036: PPUSH
69037: CALL_OW 309
69041: IFFALSE 69052
// ComStop ( unit ) ;
69043: LD_VAR 0 1
69047: PPUSH
69048: CALL_OW 141
// end ;
69052: LD_VAR 0 4
69056: RET
// export function Abs ( value ) ; begin
69057: LD_INT 0
69059: PPUSH
// result := value ;
69060: LD_ADDR_VAR 0 2
69064: PUSH
69065: LD_VAR 0 1
69069: ST_TO_ADDR
// if value < 0 then
69070: LD_VAR 0 1
69074: PUSH
69075: LD_INT 0
69077: LESS
69078: IFFALSE 69095
// result := value * - 1 ;
69080: LD_ADDR_VAR 0 2
69084: PUSH
69085: LD_VAR 0 1
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: MUL
69094: ST_TO_ADDR
// end ;
69095: LD_VAR 0 2
69099: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69100: LD_INT 0
69102: PPUSH
69103: PPUSH
69104: PPUSH
69105: PPUSH
69106: PPUSH
69107: PPUSH
69108: PPUSH
69109: PPUSH
// if not unit or not building then
69110: LD_VAR 0 1
69114: NOT
69115: PUSH
69116: LD_VAR 0 2
69120: NOT
69121: OR
69122: IFFALSE 69126
// exit ;
69124: GO 69352
// x := GetX ( building ) ;
69126: LD_ADDR_VAR 0 4
69130: PUSH
69131: LD_VAR 0 2
69135: PPUSH
69136: CALL_OW 250
69140: ST_TO_ADDR
// y := GetY ( building ) ;
69141: LD_ADDR_VAR 0 6
69145: PUSH
69146: LD_VAR 0 2
69150: PPUSH
69151: CALL_OW 251
69155: ST_TO_ADDR
// d := GetDir ( building ) ;
69156: LD_ADDR_VAR 0 8
69160: PUSH
69161: LD_VAR 0 2
69165: PPUSH
69166: CALL_OW 254
69170: ST_TO_ADDR
// r := 4 ;
69171: LD_ADDR_VAR 0 9
69175: PUSH
69176: LD_INT 4
69178: ST_TO_ADDR
// for i := 1 to 5 do
69179: LD_ADDR_VAR 0 10
69183: PUSH
69184: DOUBLE
69185: LD_INT 1
69187: DEC
69188: ST_TO_ADDR
69189: LD_INT 5
69191: PUSH
69192: FOR_TO
69193: IFFALSE 69350
// begin _x := ShiftX ( x , d , r + i ) ;
69195: LD_ADDR_VAR 0 5
69199: PUSH
69200: LD_VAR 0 4
69204: PPUSH
69205: LD_VAR 0 8
69209: PPUSH
69210: LD_VAR 0 9
69214: PUSH
69215: LD_VAR 0 10
69219: PLUS
69220: PPUSH
69221: CALL_OW 272
69225: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69226: LD_ADDR_VAR 0 7
69230: PUSH
69231: LD_VAR 0 6
69235: PPUSH
69236: LD_VAR 0 8
69240: PPUSH
69241: LD_VAR 0 9
69245: PUSH
69246: LD_VAR 0 10
69250: PLUS
69251: PPUSH
69252: CALL_OW 273
69256: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69257: LD_VAR 0 5
69261: PPUSH
69262: LD_VAR 0 7
69266: PPUSH
69267: CALL_OW 488
69271: PUSH
69272: LD_VAR 0 5
69276: PPUSH
69277: LD_VAR 0 7
69281: PPUSH
69282: CALL_OW 428
69286: PPUSH
69287: CALL_OW 247
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: LD_INT 2
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: IN
69302: NOT
69303: AND
69304: IFFALSE 69348
// begin ComMoveXY ( unit , _x , _y ) ;
69306: LD_VAR 0 1
69310: PPUSH
69311: LD_VAR 0 5
69315: PPUSH
69316: LD_VAR 0 7
69320: PPUSH
69321: CALL_OW 111
// result := [ _x , _y ] ;
69325: LD_ADDR_VAR 0 3
69329: PUSH
69330: LD_VAR 0 5
69334: PUSH
69335: LD_VAR 0 7
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// exit ;
69344: POP
69345: POP
69346: GO 69352
// end ; end ;
69348: GO 69192
69350: POP
69351: POP
// end ;
69352: LD_VAR 0 3
69356: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69357: LD_INT 0
69359: PPUSH
69360: PPUSH
69361: PPUSH
// result := 0 ;
69362: LD_ADDR_VAR 0 3
69366: PUSH
69367: LD_INT 0
69369: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69370: LD_VAR 0 1
69374: PUSH
69375: LD_INT 0
69377: LESS
69378: PUSH
69379: LD_VAR 0 1
69383: PUSH
69384: LD_INT 8
69386: GREATER
69387: OR
69388: PUSH
69389: LD_VAR 0 2
69393: PUSH
69394: LD_INT 0
69396: LESS
69397: OR
69398: PUSH
69399: LD_VAR 0 2
69403: PUSH
69404: LD_INT 8
69406: GREATER
69407: OR
69408: IFFALSE 69412
// exit ;
69410: GO 69487
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: LD_INT 22
69419: PUSH
69420: LD_VAR 0 2
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PPUSH
69429: CALL_OW 69
69433: PUSH
69434: FOR_IN
69435: IFFALSE 69485
// begin un := UnitShoot ( i ) ;
69437: LD_ADDR_VAR 0 5
69441: PUSH
69442: LD_VAR 0 4
69446: PPUSH
69447: CALL_OW 504
69451: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69452: LD_VAR 0 5
69456: PPUSH
69457: CALL_OW 255
69461: PUSH
69462: LD_VAR 0 1
69466: EQUAL
69467: IFFALSE 69483
// begin result := un ;
69469: LD_ADDR_VAR 0 3
69473: PUSH
69474: LD_VAR 0 5
69478: ST_TO_ADDR
// exit ;
69479: POP
69480: POP
69481: GO 69487
// end ; end ;
69483: GO 69434
69485: POP
69486: POP
// end ;
69487: LD_VAR 0 3
69491: RET
// export function GetCargoBay ( units ) ; begin
69492: LD_INT 0
69494: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69495: LD_ADDR_VAR 0 2
69499: PUSH
69500: LD_VAR 0 1
69504: PPUSH
69505: LD_INT 2
69507: PUSH
69508: LD_INT 34
69510: PUSH
69511: LD_INT 12
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 34
69520: PUSH
69521: LD_INT 51
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 34
69530: PUSH
69531: LD_INT 32
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 34
69540: PUSH
69541: LD_INT 89
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: PPUSH
69555: CALL_OW 72
69559: ST_TO_ADDR
// end ;
69560: LD_VAR 0 2
69564: RET
// export function Negate ( value ) ; begin
69565: LD_INT 0
69567: PPUSH
// result := not value ;
69568: LD_ADDR_VAR 0 2
69572: PUSH
69573: LD_VAR 0 1
69577: NOT
69578: ST_TO_ADDR
// end ;
69579: LD_VAR 0 2
69583: RET
// export function Inc ( value ) ; begin
69584: LD_INT 0
69586: PPUSH
// result := value + 1 ;
69587: LD_ADDR_VAR 0 2
69591: PUSH
69592: LD_VAR 0 1
69596: PUSH
69597: LD_INT 1
69599: PLUS
69600: ST_TO_ADDR
// end ;
69601: LD_VAR 0 2
69605: RET
// export function Dec ( value ) ; begin
69606: LD_INT 0
69608: PPUSH
// result := value - 1 ;
69609: LD_ADDR_VAR 0 2
69613: PUSH
69614: LD_VAR 0 1
69618: PUSH
69619: LD_INT 1
69621: MINUS
69622: ST_TO_ADDR
// end ;
69623: LD_VAR 0 2
69627: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69628: LD_INT 0
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
69637: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69638: LD_VAR 0 1
69642: PPUSH
69643: LD_VAR 0 2
69647: PPUSH
69648: CALL_OW 488
69652: NOT
69653: PUSH
69654: LD_VAR 0 3
69658: PPUSH
69659: LD_VAR 0 4
69663: PPUSH
69664: CALL_OW 488
69668: NOT
69669: OR
69670: IFFALSE 69683
// begin result := - 1 ;
69672: LD_ADDR_VAR 0 5
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: ST_TO_ADDR
// exit ;
69681: GO 69918
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69683: LD_ADDR_VAR 0 12
69687: PUSH
69688: LD_VAR 0 1
69692: PPUSH
69693: LD_VAR 0 2
69697: PPUSH
69698: LD_VAR 0 3
69702: PPUSH
69703: LD_VAR 0 4
69707: PPUSH
69708: CALL 68768 0 4
69712: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69713: LD_ADDR_VAR 0 11
69717: PUSH
69718: LD_VAR 0 1
69722: PPUSH
69723: LD_VAR 0 2
69727: PPUSH
69728: LD_VAR 0 12
69732: PUSH
69733: LD_INT 1
69735: ARRAY
69736: PPUSH
69737: LD_VAR 0 12
69741: PUSH
69742: LD_INT 2
69744: ARRAY
69745: PPUSH
69746: CALL_OW 298
69750: ST_TO_ADDR
// distance := 9999 ;
69751: LD_ADDR_VAR 0 10
69755: PUSH
69756: LD_INT 9999
69758: ST_TO_ADDR
// for i := 0 to 5 do
69759: LD_ADDR_VAR 0 6
69763: PUSH
69764: DOUBLE
69765: LD_INT 0
69767: DEC
69768: ST_TO_ADDR
69769: LD_INT 5
69771: PUSH
69772: FOR_TO
69773: IFFALSE 69916
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69775: LD_ADDR_VAR 0 7
69779: PUSH
69780: LD_VAR 0 1
69784: PPUSH
69785: LD_VAR 0 6
69789: PPUSH
69790: LD_VAR 0 11
69794: PPUSH
69795: CALL_OW 272
69799: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69800: LD_ADDR_VAR 0 8
69804: PUSH
69805: LD_VAR 0 2
69809: PPUSH
69810: LD_VAR 0 6
69814: PPUSH
69815: LD_VAR 0 11
69819: PPUSH
69820: CALL_OW 273
69824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69825: LD_VAR 0 7
69829: PPUSH
69830: LD_VAR 0 8
69834: PPUSH
69835: CALL_OW 488
69839: NOT
69840: IFFALSE 69844
// continue ;
69842: GO 69772
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69844: LD_ADDR_VAR 0 9
69848: PUSH
69849: LD_VAR 0 12
69853: PUSH
69854: LD_INT 1
69856: ARRAY
69857: PPUSH
69858: LD_VAR 0 12
69862: PUSH
69863: LD_INT 2
69865: ARRAY
69866: PPUSH
69867: LD_VAR 0 7
69871: PPUSH
69872: LD_VAR 0 8
69876: PPUSH
69877: CALL_OW 298
69881: ST_TO_ADDR
// if tmp < distance then
69882: LD_VAR 0 9
69886: PUSH
69887: LD_VAR 0 10
69891: LESS
69892: IFFALSE 69914
// begin result := i ;
69894: LD_ADDR_VAR 0 5
69898: PUSH
69899: LD_VAR 0 6
69903: ST_TO_ADDR
// distance := tmp ;
69904: LD_ADDR_VAR 0 10
69908: PUSH
69909: LD_VAR 0 9
69913: ST_TO_ADDR
// end ; end ;
69914: GO 69772
69916: POP
69917: POP
// end ;
69918: LD_VAR 0 5
69922: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69923: LD_INT 0
69925: PPUSH
69926: PPUSH
// if not driver or not IsInUnit ( driver ) then
69927: LD_VAR 0 1
69931: NOT
69932: PUSH
69933: LD_VAR 0 1
69937: PPUSH
69938: CALL_OW 310
69942: NOT
69943: OR
69944: IFFALSE 69948
// exit ;
69946: GO 70038
// vehicle := IsInUnit ( driver ) ;
69948: LD_ADDR_VAR 0 3
69952: PUSH
69953: LD_VAR 0 1
69957: PPUSH
69958: CALL_OW 310
69962: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69963: LD_VAR 0 1
69967: PPUSH
69968: LD_STRING \
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: LD_INT 0
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: PUSH
69998: LD_STRING E
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: LD_VAR 0 3
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PPUSH
70034: CALL_OW 446
// end ;
70038: LD_VAR 0 2
70042: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70043: LD_INT 0
70045: PPUSH
70046: PPUSH
// if not driver or not IsInUnit ( driver ) then
70047: LD_VAR 0 1
70051: NOT
70052: PUSH
70053: LD_VAR 0 1
70057: PPUSH
70058: CALL_OW 310
70062: NOT
70063: OR
70064: IFFALSE 70068
// exit ;
70066: GO 70158
// vehicle := IsInUnit ( driver ) ;
70068: LD_ADDR_VAR 0 3
70072: PUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: CALL_OW 310
70082: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70083: LD_VAR 0 1
70087: PPUSH
70088: LD_STRING \
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: LD_INT 0
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: LD_INT 0
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: PUSH
70118: LD_STRING E
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_VAR 0 3
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PPUSH
70154: CALL_OW 447
// end ;
70158: LD_VAR 0 2
70162: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70163: LD_INT 0
70165: PPUSH
70166: PPUSH
70167: PPUSH
// tmp := [ ] ;
70168: LD_ADDR_VAR 0 5
70172: PUSH
70173: EMPTY
70174: ST_TO_ADDR
// for i in units do
70175: LD_ADDR_VAR 0 4
70179: PUSH
70180: LD_VAR 0 1
70184: PUSH
70185: FOR_IN
70186: IFFALSE 70224
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70188: LD_ADDR_VAR 0 5
70192: PUSH
70193: LD_VAR 0 5
70197: PPUSH
70198: LD_VAR 0 5
70202: PUSH
70203: LD_INT 1
70205: PLUS
70206: PPUSH
70207: LD_VAR 0 4
70211: PPUSH
70212: CALL_OW 256
70216: PPUSH
70217: CALL_OW 2
70221: ST_TO_ADDR
70222: GO 70185
70224: POP
70225: POP
// if not tmp then
70226: LD_VAR 0 5
70230: NOT
70231: IFFALSE 70235
// exit ;
70233: GO 70283
// if asc then
70235: LD_VAR 0 2
70239: IFFALSE 70263
// result := SortListByListAsc ( units , tmp ) else
70241: LD_ADDR_VAR 0 3
70245: PUSH
70246: LD_VAR 0 1
70250: PPUSH
70251: LD_VAR 0 5
70255: PPUSH
70256: CALL_OW 76
70260: ST_TO_ADDR
70261: GO 70283
// result := SortListByListDesc ( units , tmp ) ;
70263: LD_ADDR_VAR 0 3
70267: PUSH
70268: LD_VAR 0 1
70272: PPUSH
70273: LD_VAR 0 5
70277: PPUSH
70278: CALL_OW 77
70282: ST_TO_ADDR
// end ;
70283: LD_VAR 0 3
70287: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70288: LD_INT 0
70290: PPUSH
70291: PPUSH
// task := GetTaskList ( mech ) ;
70292: LD_ADDR_VAR 0 4
70296: PUSH
70297: LD_VAR 0 1
70301: PPUSH
70302: CALL_OW 437
70306: ST_TO_ADDR
// if not task then
70307: LD_VAR 0 4
70311: NOT
70312: IFFALSE 70316
// exit ;
70314: GO 70358
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70316: LD_ADDR_VAR 0 3
70320: PUSH
70321: LD_VAR 0 4
70325: PUSH
70326: LD_INT 1
70328: ARRAY
70329: PUSH
70330: LD_INT 1
70332: ARRAY
70333: PUSH
70334: LD_STRING r
70336: EQUAL
70337: PUSH
70338: LD_VAR 0 4
70342: PUSH
70343: LD_INT 1
70345: ARRAY
70346: PUSH
70347: LD_INT 4
70349: ARRAY
70350: PUSH
70351: LD_VAR 0 2
70355: EQUAL
70356: AND
70357: ST_TO_ADDR
// end ;
70358: LD_VAR 0 3
70362: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70363: LD_INT 0
70365: PPUSH
// SetDir ( unit , d ) ;
70366: LD_VAR 0 1
70370: PPUSH
70371: LD_VAR 0 4
70375: PPUSH
70376: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70380: LD_VAR 0 1
70384: PPUSH
70385: LD_VAR 0 2
70389: PPUSH
70390: LD_VAR 0 3
70394: PPUSH
70395: LD_VAR 0 5
70399: PPUSH
70400: CALL_OW 48
// end ;
70404: LD_VAR 0 6
70408: RET
// export function ToNaturalNumber ( number ) ; begin
70409: LD_INT 0
70411: PPUSH
// result := number div 1 ;
70412: LD_ADDR_VAR 0 2
70416: PUSH
70417: LD_VAR 0 1
70421: PUSH
70422: LD_INT 1
70424: DIV
70425: ST_TO_ADDR
// if number < 0 then
70426: LD_VAR 0 1
70430: PUSH
70431: LD_INT 0
70433: LESS
70434: IFFALSE 70444
// result := 0 ;
70436: LD_ADDR_VAR 0 2
70440: PUSH
70441: LD_INT 0
70443: ST_TO_ADDR
// end ;
70444: LD_VAR 0 2
70448: RET
// export function SortByClass ( units , class ) ; var un ; begin
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
// if not units or not class then
70453: LD_VAR 0 1
70457: NOT
70458: PUSH
70459: LD_VAR 0 2
70463: NOT
70464: OR
70465: IFFALSE 70469
// exit ;
70467: GO 70564
// result := [ ] ;
70469: LD_ADDR_VAR 0 3
70473: PUSH
70474: EMPTY
70475: ST_TO_ADDR
// for un in units do
70476: LD_ADDR_VAR 0 4
70480: PUSH
70481: LD_VAR 0 1
70485: PUSH
70486: FOR_IN
70487: IFFALSE 70562
// if GetClass ( un ) = class then
70489: LD_VAR 0 4
70493: PPUSH
70494: CALL_OW 257
70498: PUSH
70499: LD_VAR 0 2
70503: EQUAL
70504: IFFALSE 70531
// result := Insert ( result , 1 , un ) else
70506: LD_ADDR_VAR 0 3
70510: PUSH
70511: LD_VAR 0 3
70515: PPUSH
70516: LD_INT 1
70518: PPUSH
70519: LD_VAR 0 4
70523: PPUSH
70524: CALL_OW 2
70528: ST_TO_ADDR
70529: GO 70560
// result := Replace ( result , result + 1 , un ) ;
70531: LD_ADDR_VAR 0 3
70535: PUSH
70536: LD_VAR 0 3
70540: PPUSH
70541: LD_VAR 0 3
70545: PUSH
70546: LD_INT 1
70548: PLUS
70549: PPUSH
70550: LD_VAR 0 4
70554: PPUSH
70555: CALL_OW 1
70559: ST_TO_ADDR
70560: GO 70486
70562: POP
70563: POP
// end ;
70564: LD_VAR 0 3
70568: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
70573: PPUSH
70574: PPUSH
70575: PPUSH
70576: PPUSH
70577: PPUSH
// result := [ ] ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: EMPTY
70584: ST_TO_ADDR
// if x - r < 0 then
70585: LD_VAR 0 1
70589: PUSH
70590: LD_VAR 0 3
70594: MINUS
70595: PUSH
70596: LD_INT 0
70598: LESS
70599: IFFALSE 70611
// min_x := 0 else
70601: LD_ADDR_VAR 0 8
70605: PUSH
70606: LD_INT 0
70608: ST_TO_ADDR
70609: GO 70627
// min_x := x - r ;
70611: LD_ADDR_VAR 0 8
70615: PUSH
70616: LD_VAR 0 1
70620: PUSH
70621: LD_VAR 0 3
70625: MINUS
70626: ST_TO_ADDR
// if y - r < 0 then
70627: LD_VAR 0 2
70631: PUSH
70632: LD_VAR 0 3
70636: MINUS
70637: PUSH
70638: LD_INT 0
70640: LESS
70641: IFFALSE 70653
// min_y := 0 else
70643: LD_ADDR_VAR 0 7
70647: PUSH
70648: LD_INT 0
70650: ST_TO_ADDR
70651: GO 70669
// min_y := y - r ;
70653: LD_ADDR_VAR 0 7
70657: PUSH
70658: LD_VAR 0 2
70662: PUSH
70663: LD_VAR 0 3
70667: MINUS
70668: ST_TO_ADDR
// max_x := x + r ;
70669: LD_ADDR_VAR 0 9
70673: PUSH
70674: LD_VAR 0 1
70678: PUSH
70679: LD_VAR 0 3
70683: PLUS
70684: ST_TO_ADDR
// max_y := y + r ;
70685: LD_ADDR_VAR 0 10
70689: PUSH
70690: LD_VAR 0 2
70694: PUSH
70695: LD_VAR 0 3
70699: PLUS
70700: ST_TO_ADDR
// for _x = min_x to max_x do
70701: LD_ADDR_VAR 0 5
70705: PUSH
70706: DOUBLE
70707: LD_VAR 0 8
70711: DEC
70712: ST_TO_ADDR
70713: LD_VAR 0 9
70717: PUSH
70718: FOR_TO
70719: IFFALSE 70820
// for _y = min_y to max_y do
70721: LD_ADDR_VAR 0 6
70725: PUSH
70726: DOUBLE
70727: LD_VAR 0 7
70731: DEC
70732: ST_TO_ADDR
70733: LD_VAR 0 10
70737: PUSH
70738: FOR_TO
70739: IFFALSE 70816
// begin if not ValidHex ( _x , _y ) then
70741: LD_VAR 0 5
70745: PPUSH
70746: LD_VAR 0 6
70750: PPUSH
70751: CALL_OW 488
70755: NOT
70756: IFFALSE 70760
// continue ;
70758: GO 70738
// if GetResourceTypeXY ( _x , _y ) then
70760: LD_VAR 0 5
70764: PPUSH
70765: LD_VAR 0 6
70769: PPUSH
70770: CALL_OW 283
70774: IFFALSE 70814
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70776: LD_ADDR_VAR 0 4
70780: PUSH
70781: LD_VAR 0 4
70785: PPUSH
70786: LD_VAR 0 4
70790: PUSH
70791: LD_INT 1
70793: PLUS
70794: PPUSH
70795: LD_VAR 0 5
70799: PUSH
70800: LD_VAR 0 6
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PPUSH
70809: CALL_OW 1
70813: ST_TO_ADDR
// end ;
70814: GO 70738
70816: POP
70817: POP
70818: GO 70718
70820: POP
70821: POP
// end ;
70822: LD_VAR 0 4
70826: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70827: LD_INT 0
70829: PPUSH
70830: PPUSH
70831: PPUSH
70832: PPUSH
70833: PPUSH
70834: PPUSH
70835: PPUSH
70836: PPUSH
// if not units then
70837: LD_VAR 0 1
70841: NOT
70842: IFFALSE 70846
// exit ;
70844: GO 71370
// result := UnitFilter ( units , [ f_ok ] ) ;
70846: LD_ADDR_VAR 0 3
70850: PUSH
70851: LD_VAR 0 1
70855: PPUSH
70856: LD_INT 50
70858: PUSH
70859: EMPTY
70860: LIST
70861: PPUSH
70862: CALL_OW 72
70866: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70867: LD_ADDR_VAR 0 8
70871: PUSH
70872: LD_VAR 0 1
70876: PUSH
70877: LD_INT 1
70879: ARRAY
70880: PPUSH
70881: CALL_OW 255
70885: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70886: LD_ADDR_VAR 0 10
70890: PUSH
70891: LD_INT 29
70893: PUSH
70894: LD_INT 91
70896: PUSH
70897: LD_INT 49
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: LIST
70904: ST_TO_ADDR
// if not result then
70905: LD_VAR 0 3
70909: NOT
70910: IFFALSE 70914
// exit ;
70912: GO 71370
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70914: LD_ADDR_VAR 0 5
70918: PUSH
70919: LD_INT 81
70921: PUSH
70922: LD_VAR 0 8
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PPUSH
70931: CALL_OW 69
70935: ST_TO_ADDR
// for i in result do
70936: LD_ADDR_VAR 0 4
70940: PUSH
70941: LD_VAR 0 3
70945: PUSH
70946: FOR_IN
70947: IFFALSE 71368
// begin tag := GetTag ( i ) + 1 ;
70949: LD_ADDR_VAR 0 9
70953: PUSH
70954: LD_VAR 0 4
70958: PPUSH
70959: CALL_OW 110
70963: PUSH
70964: LD_INT 1
70966: PLUS
70967: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70968: LD_ADDR_VAR 0 7
70972: PUSH
70973: LD_VAR 0 4
70977: PPUSH
70978: CALL_OW 250
70982: PPUSH
70983: LD_VAR 0 4
70987: PPUSH
70988: CALL_OW 251
70992: PPUSH
70993: LD_INT 6
70995: PPUSH
70996: CALL 70569 0 3
71000: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71001: LD_VAR 0 4
71005: PPUSH
71006: CALL_OW 247
71010: PUSH
71011: LD_INT 2
71013: EQUAL
71014: PUSH
71015: LD_VAR 0 7
71019: AND
71020: PUSH
71021: LD_VAR 0 4
71025: PPUSH
71026: CALL_OW 264
71030: PUSH
71031: LD_VAR 0 10
71035: IN
71036: NOT
71037: AND
71038: IFFALSE 71077
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71040: LD_VAR 0 4
71044: PPUSH
71045: LD_VAR 0 7
71049: PUSH
71050: LD_INT 1
71052: ARRAY
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: PPUSH
71058: LD_VAR 0 7
71062: PUSH
71063: LD_INT 1
71065: ARRAY
71066: PUSH
71067: LD_INT 2
71069: ARRAY
71070: PPUSH
71071: CALL_OW 116
71075: GO 71366
// if path > tag then
71077: LD_VAR 0 2
71081: PUSH
71082: LD_VAR 0 9
71086: GREATER
71087: IFFALSE 71295
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71089: LD_ADDR_VAR 0 6
71093: PUSH
71094: LD_VAR 0 5
71098: PPUSH
71099: LD_INT 91
71101: PUSH
71102: LD_VAR 0 4
71106: PUSH
71107: LD_INT 8
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: PPUSH
71115: CALL_OW 72
71119: ST_TO_ADDR
// if nearEnemy then
71120: LD_VAR 0 6
71124: IFFALSE 71193
// begin if GetWeapon ( i ) = ru_time_lapser then
71126: LD_VAR 0 4
71130: PPUSH
71131: CALL_OW 264
71135: PUSH
71136: LD_INT 49
71138: EQUAL
71139: IFFALSE 71167
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71141: LD_VAR 0 4
71145: PPUSH
71146: LD_VAR 0 6
71150: PPUSH
71151: LD_VAR 0 4
71155: PPUSH
71156: CALL_OW 74
71160: PPUSH
71161: CALL_OW 112
71165: GO 71191
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71167: LD_VAR 0 4
71171: PPUSH
71172: LD_VAR 0 6
71176: PPUSH
71177: LD_VAR 0 4
71181: PPUSH
71182: CALL_OW 74
71186: PPUSH
71187: CALL 72295 0 2
// end else
71191: GO 71293
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71193: LD_VAR 0 4
71197: PPUSH
71198: LD_VAR 0 2
71202: PUSH
71203: LD_VAR 0 9
71207: ARRAY
71208: PUSH
71209: LD_INT 1
71211: ARRAY
71212: PPUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_VAR 0 9
71222: ARRAY
71223: PUSH
71224: LD_INT 2
71226: ARRAY
71227: PPUSH
71228: CALL_OW 297
71232: PUSH
71233: LD_INT 6
71235: GREATER
71236: IFFALSE 71279
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71238: LD_VAR 0 4
71242: PPUSH
71243: LD_VAR 0 2
71247: PUSH
71248: LD_VAR 0 9
71252: ARRAY
71253: PUSH
71254: LD_INT 1
71256: ARRAY
71257: PPUSH
71258: LD_VAR 0 2
71262: PUSH
71263: LD_VAR 0 9
71267: ARRAY
71268: PUSH
71269: LD_INT 2
71271: ARRAY
71272: PPUSH
71273: CALL_OW 114
71277: GO 71293
// SetTag ( i , tag ) ;
71279: LD_VAR 0 4
71283: PPUSH
71284: LD_VAR 0 9
71288: PPUSH
71289: CALL_OW 109
// end else
71293: GO 71366
// if enemy then
71295: LD_VAR 0 5
71299: IFFALSE 71366
// begin if GetWeapon ( i ) = ru_time_lapser then
71301: LD_VAR 0 4
71305: PPUSH
71306: CALL_OW 264
71310: PUSH
71311: LD_INT 49
71313: EQUAL
71314: IFFALSE 71342
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71316: LD_VAR 0 4
71320: PPUSH
71321: LD_VAR 0 5
71325: PPUSH
71326: LD_VAR 0 4
71330: PPUSH
71331: CALL_OW 74
71335: PPUSH
71336: CALL_OW 112
71340: GO 71366
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71342: LD_VAR 0 4
71346: PPUSH
71347: LD_VAR 0 5
71351: PPUSH
71352: LD_VAR 0 4
71356: PPUSH
71357: CALL_OW 74
71361: PPUSH
71362: CALL 72295 0 2
// end ; end ;
71366: GO 70946
71368: POP
71369: POP
// end ;
71370: LD_VAR 0 3
71374: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71375: LD_INT 0
71377: PPUSH
71378: PPUSH
71379: PPUSH
// if not unit or IsInUnit ( unit ) then
71380: LD_VAR 0 1
71384: NOT
71385: PUSH
71386: LD_VAR 0 1
71390: PPUSH
71391: CALL_OW 310
71395: OR
71396: IFFALSE 71400
// exit ;
71398: GO 71491
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71400: LD_ADDR_VAR 0 4
71404: PUSH
71405: LD_VAR 0 1
71409: PPUSH
71410: CALL_OW 250
71414: PPUSH
71415: LD_VAR 0 2
71419: PPUSH
71420: LD_INT 1
71422: PPUSH
71423: CALL_OW 272
71427: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71428: LD_ADDR_VAR 0 5
71432: PUSH
71433: LD_VAR 0 1
71437: PPUSH
71438: CALL_OW 251
71442: PPUSH
71443: LD_VAR 0 2
71447: PPUSH
71448: LD_INT 1
71450: PPUSH
71451: CALL_OW 273
71455: ST_TO_ADDR
// if ValidHex ( x , y ) then
71456: LD_VAR 0 4
71460: PPUSH
71461: LD_VAR 0 5
71465: PPUSH
71466: CALL_OW 488
71470: IFFALSE 71491
// ComTurnXY ( unit , x , y ) ;
71472: LD_VAR 0 1
71476: PPUSH
71477: LD_VAR 0 4
71481: PPUSH
71482: LD_VAR 0 5
71486: PPUSH
71487: CALL_OW 118
// end ;
71491: LD_VAR 0 3
71495: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
// result := false ;
71500: LD_ADDR_VAR 0 3
71504: PUSH
71505: LD_INT 0
71507: ST_TO_ADDR
// if not units then
71508: LD_VAR 0 2
71512: NOT
71513: IFFALSE 71517
// exit ;
71515: GO 71562
// for i in units do
71517: LD_ADDR_VAR 0 4
71521: PUSH
71522: LD_VAR 0 2
71526: PUSH
71527: FOR_IN
71528: IFFALSE 71560
// if See ( side , i ) then
71530: LD_VAR 0 1
71534: PPUSH
71535: LD_VAR 0 4
71539: PPUSH
71540: CALL_OW 292
71544: IFFALSE 71558
// begin result := true ;
71546: LD_ADDR_VAR 0 3
71550: PUSH
71551: LD_INT 1
71553: ST_TO_ADDR
// exit ;
71554: POP
71555: POP
71556: GO 71562
// end ;
71558: GO 71527
71560: POP
71561: POP
// end ;
71562: LD_VAR 0 3
71566: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71567: LD_INT 0
71569: PPUSH
71570: PPUSH
71571: PPUSH
71572: PPUSH
// if not unit or not points then
71573: LD_VAR 0 1
71577: NOT
71578: PUSH
71579: LD_VAR 0 2
71583: NOT
71584: OR
71585: IFFALSE 71589
// exit ;
71587: GO 71679
// dist := 99999 ;
71589: LD_ADDR_VAR 0 5
71593: PUSH
71594: LD_INT 99999
71596: ST_TO_ADDR
// for i in points do
71597: LD_ADDR_VAR 0 4
71601: PUSH
71602: LD_VAR 0 2
71606: PUSH
71607: FOR_IN
71608: IFFALSE 71677
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71610: LD_ADDR_VAR 0 6
71614: PUSH
71615: LD_VAR 0 1
71619: PPUSH
71620: LD_VAR 0 4
71624: PUSH
71625: LD_INT 1
71627: ARRAY
71628: PPUSH
71629: LD_VAR 0 4
71633: PUSH
71634: LD_INT 2
71636: ARRAY
71637: PPUSH
71638: CALL_OW 297
71642: ST_TO_ADDR
// if tmpDist < dist then
71643: LD_VAR 0 6
71647: PUSH
71648: LD_VAR 0 5
71652: LESS
71653: IFFALSE 71675
// begin result := i ;
71655: LD_ADDR_VAR 0 3
71659: PUSH
71660: LD_VAR 0 4
71664: ST_TO_ADDR
// dist := tmpDist ;
71665: LD_ADDR_VAR 0 5
71669: PUSH
71670: LD_VAR 0 6
71674: ST_TO_ADDR
// end ; end ;
71675: GO 71607
71677: POP
71678: POP
// end ;
71679: LD_VAR 0 3
71683: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71684: LD_INT 0
71686: PPUSH
// uc_side := side ;
71687: LD_ADDR_OWVAR 20
71691: PUSH
71692: LD_VAR 0 1
71696: ST_TO_ADDR
// uc_nation := 3 ;
71697: LD_ADDR_OWVAR 21
71701: PUSH
71702: LD_INT 3
71704: ST_TO_ADDR
// vc_chassis := 25 ;
71705: LD_ADDR_OWVAR 37
71709: PUSH
71710: LD_INT 25
71712: ST_TO_ADDR
// vc_engine := engine_siberite ;
71713: LD_ADDR_OWVAR 39
71717: PUSH
71718: LD_INT 3
71720: ST_TO_ADDR
// vc_control := control_computer ;
71721: LD_ADDR_OWVAR 38
71725: PUSH
71726: LD_INT 3
71728: ST_TO_ADDR
// vc_weapon := 59 ;
71729: LD_ADDR_OWVAR 40
71733: PUSH
71734: LD_INT 59
71736: ST_TO_ADDR
// result := CreateVehicle ;
71737: LD_ADDR_VAR 0 5
71741: PUSH
71742: CALL_OW 45
71746: ST_TO_ADDR
// SetDir ( result , d ) ;
71747: LD_VAR 0 5
71751: PPUSH
71752: LD_VAR 0 4
71756: PPUSH
71757: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71761: LD_VAR 0 5
71765: PPUSH
71766: LD_VAR 0 2
71770: PPUSH
71771: LD_VAR 0 3
71775: PPUSH
71776: LD_INT 0
71778: PPUSH
71779: CALL_OW 48
// end ;
71783: LD_VAR 0 5
71787: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71788: LD_INT 0
71790: PPUSH
71791: PPUSH
71792: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71793: LD_ADDR_VAR 0 2
71797: PUSH
71798: LD_INT 0
71800: PUSH
71801: LD_INT 0
71803: PUSH
71804: LD_INT 0
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71816: LD_VAR 0 1
71820: NOT
71821: PUSH
71822: LD_VAR 0 1
71826: PPUSH
71827: CALL_OW 264
71831: PUSH
71832: LD_INT 12
71834: PUSH
71835: LD_INT 51
71837: PUSH
71838: LD_INT 32
71840: PUSH
71841: LD_INT 89
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: IN
71850: NOT
71851: OR
71852: IFFALSE 71856
// exit ;
71854: GO 71954
// for i := 1 to 3 do
71856: LD_ADDR_VAR 0 3
71860: PUSH
71861: DOUBLE
71862: LD_INT 1
71864: DEC
71865: ST_TO_ADDR
71866: LD_INT 3
71868: PUSH
71869: FOR_TO
71870: IFFALSE 71952
// begin tmp := GetCargo ( cargo , i ) ;
71872: LD_ADDR_VAR 0 4
71876: PUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: LD_VAR 0 3
71886: PPUSH
71887: CALL_OW 289
71891: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71892: LD_ADDR_VAR 0 2
71896: PUSH
71897: LD_VAR 0 2
71901: PPUSH
71902: LD_VAR 0 3
71906: PPUSH
71907: LD_VAR 0 4
71911: PPUSH
71912: CALL_OW 1
71916: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71917: LD_ADDR_VAR 0 2
71921: PUSH
71922: LD_VAR 0 2
71926: PPUSH
71927: LD_INT 4
71929: PPUSH
71930: LD_VAR 0 2
71934: PUSH
71935: LD_INT 4
71937: ARRAY
71938: PUSH
71939: LD_VAR 0 4
71943: PLUS
71944: PPUSH
71945: CALL_OW 1
71949: ST_TO_ADDR
// end ;
71950: GO 71869
71952: POP
71953: POP
// end ;
71954: LD_VAR 0 2
71958: RET
// export function Length ( array ) ; begin
71959: LD_INT 0
71961: PPUSH
// result := array + 0 ;
71962: LD_ADDR_VAR 0 2
71966: PUSH
71967: LD_VAR 0 1
71971: PUSH
71972: LD_INT 0
71974: PLUS
71975: ST_TO_ADDR
// end ;
71976: LD_VAR 0 2
71980: RET
// export function PrepareArray ( array ) ; begin
71981: LD_INT 0
71983: PPUSH
// result := array diff 0 ;
71984: LD_ADDR_VAR 0 2
71988: PUSH
71989: LD_VAR 0 1
71993: PUSH
71994: LD_INT 0
71996: DIFF
71997: ST_TO_ADDR
// if not result [ 1 ] then
71998: LD_VAR 0 2
72002: PUSH
72003: LD_INT 1
72005: ARRAY
72006: NOT
72007: IFFALSE 72027
// result := Delete ( result , 1 ) ;
72009: LD_ADDR_VAR 0 2
72013: PUSH
72014: LD_VAR 0 2
72018: PPUSH
72019: LD_INT 1
72021: PPUSH
72022: CALL_OW 3
72026: ST_TO_ADDR
// end ;
72027: LD_VAR 0 2
72031: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72032: LD_INT 0
72034: PPUSH
72035: PPUSH
72036: PPUSH
72037: PPUSH
// sibRocketRange := 25 ;
72038: LD_ADDR_VAR 0 6
72042: PUSH
72043: LD_INT 25
72045: ST_TO_ADDR
// result := false ;
72046: LD_ADDR_VAR 0 4
72050: PUSH
72051: LD_INT 0
72053: ST_TO_ADDR
// for i := 0 to 5 do
72054: LD_ADDR_VAR 0 5
72058: PUSH
72059: DOUBLE
72060: LD_INT 0
72062: DEC
72063: ST_TO_ADDR
72064: LD_INT 5
72066: PUSH
72067: FOR_TO
72068: IFFALSE 72135
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72070: LD_VAR 0 1
72074: PPUSH
72075: LD_VAR 0 5
72079: PPUSH
72080: LD_VAR 0 6
72084: PPUSH
72085: CALL_OW 272
72089: PPUSH
72090: LD_VAR 0 2
72094: PPUSH
72095: LD_VAR 0 5
72099: PPUSH
72100: LD_VAR 0 6
72104: PPUSH
72105: CALL_OW 273
72109: PPUSH
72110: LD_VAR 0 3
72114: PPUSH
72115: CALL_OW 309
72119: IFFALSE 72133
// begin result := true ;
72121: LD_ADDR_VAR 0 4
72125: PUSH
72126: LD_INT 1
72128: ST_TO_ADDR
// exit ;
72129: POP
72130: POP
72131: GO 72137
// end ;
72133: GO 72067
72135: POP
72136: POP
// end ;
72137: LD_VAR 0 4
72141: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72142: LD_INT 0
72144: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72145: LD_VAR 0 1
72149: PPUSH
72150: LD_VAR 0 2
72154: PPUSH
72155: LD_INT 0
72157: PPUSH
72158: LD_INT 0
72160: PPUSH
72161: LD_INT 1
72163: PPUSH
72164: LD_INT 0
72166: PPUSH
72167: CALL_OW 587
// end ;
72171: LD_VAR 0 3
72175: RET
// export function CenterOnNow ( unit ) ; begin
72176: LD_INT 0
72178: PPUSH
// result := IsInUnit ( unit ) ;
72179: LD_ADDR_VAR 0 2
72183: PUSH
72184: LD_VAR 0 1
72188: PPUSH
72189: CALL_OW 310
72193: ST_TO_ADDR
// if not result then
72194: LD_VAR 0 2
72198: NOT
72199: IFFALSE 72211
// result := unit ;
72201: LD_ADDR_VAR 0 2
72205: PUSH
72206: LD_VAR 0 1
72210: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72211: LD_VAR 0 1
72215: PPUSH
72216: CALL_OW 87
// end ;
72220: LD_VAR 0 2
72224: RET
// export function ComMoveHex ( unit , hex ) ; begin
72225: LD_INT 0
72227: PPUSH
// if not hex then
72228: LD_VAR 0 2
72232: NOT
72233: IFFALSE 72237
// exit ;
72235: GO 72290
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72237: LD_VAR 0 2
72241: PUSH
72242: LD_INT 1
72244: ARRAY
72245: PPUSH
72246: LD_VAR 0 2
72250: PUSH
72251: LD_INT 2
72253: ARRAY
72254: PPUSH
72255: CALL_OW 428
72259: IFFALSE 72263
// exit ;
72261: GO 72290
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72263: LD_VAR 0 1
72267: PPUSH
72268: LD_VAR 0 2
72272: PUSH
72273: LD_INT 1
72275: ARRAY
72276: PPUSH
72277: LD_VAR 0 2
72281: PUSH
72282: LD_INT 2
72284: ARRAY
72285: PPUSH
72286: CALL_OW 111
// end ;
72290: LD_VAR 0 3
72294: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72295: LD_INT 0
72297: PPUSH
72298: PPUSH
72299: PPUSH
// if not unit or not enemy then
72300: LD_VAR 0 1
72304: NOT
72305: PUSH
72306: LD_VAR 0 2
72310: NOT
72311: OR
72312: IFFALSE 72316
// exit ;
72314: GO 72440
// x := GetX ( enemy ) ;
72316: LD_ADDR_VAR 0 4
72320: PUSH
72321: LD_VAR 0 2
72325: PPUSH
72326: CALL_OW 250
72330: ST_TO_ADDR
// y := GetY ( enemy ) ;
72331: LD_ADDR_VAR 0 5
72335: PUSH
72336: LD_VAR 0 2
72340: PPUSH
72341: CALL_OW 251
72345: ST_TO_ADDR
// if ValidHex ( x , y ) then
72346: LD_VAR 0 4
72350: PPUSH
72351: LD_VAR 0 5
72355: PPUSH
72356: CALL_OW 488
72360: IFFALSE 72440
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72362: LD_VAR 0 2
72366: PPUSH
72367: CALL_OW 247
72371: PUSH
72372: LD_INT 3
72374: PUSH
72375: LD_INT 2
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: IN
72382: PUSH
72383: LD_VAR 0 1
72387: PPUSH
72388: CALL_OW 255
72392: PPUSH
72393: LD_VAR 0 2
72397: PPUSH
72398: CALL_OW 292
72402: AND
72403: IFFALSE 72421
// ComAttackUnit ( unit , enemy ) else
72405: LD_VAR 0 1
72409: PPUSH
72410: LD_VAR 0 2
72414: PPUSH
72415: CALL_OW 115
72419: GO 72440
// ComAgressiveMove ( unit , x , y ) ;
72421: LD_VAR 0 1
72425: PPUSH
72426: LD_VAR 0 4
72430: PPUSH
72431: LD_VAR 0 5
72435: PPUSH
72436: CALL_OW 114
// end ; end_of_file
72440: LD_VAR 0 3
72444: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72445: LD_VAR 0 1
72449: PUSH
72450: LD_INT 200
72452: DOUBLE
72453: GREATEREQUAL
72454: IFFALSE 72462
72456: LD_INT 299
72458: DOUBLE
72459: LESSEQUAL
72460: IFTRUE 72464
72462: GO 72496
72464: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72465: LD_VAR 0 1
72469: PPUSH
72470: LD_VAR 0 2
72474: PPUSH
72475: LD_VAR 0 3
72479: PPUSH
72480: LD_VAR 0 4
72484: PPUSH
72485: LD_VAR 0 5
72489: PPUSH
72490: CALL 26169 0 5
72494: GO 72573
72496: LD_INT 300
72498: DOUBLE
72499: GREATEREQUAL
72500: IFFALSE 72508
72502: LD_INT 399
72504: DOUBLE
72505: LESSEQUAL
72506: IFTRUE 72510
72508: GO 72572
72510: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72511: LD_VAR 0 1
72515: PPUSH
72516: LD_VAR 0 2
72520: PPUSH
72521: LD_VAR 0 3
72525: PPUSH
72526: LD_VAR 0 4
72530: PPUSH
72531: LD_VAR 0 5
72535: PPUSH
72536: LD_VAR 0 6
72540: PPUSH
72541: LD_VAR 0 7
72545: PPUSH
72546: LD_VAR 0 8
72550: PPUSH
72551: LD_VAR 0 9
72555: PPUSH
72556: LD_VAR 0 10
72560: PPUSH
72561: LD_VAR 0 11
72565: PPUSH
72566: CALL 22494 0 11
72570: GO 72573
72572: POP
// end ;
72573: PPOPN 11
72575: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72576: LD_VAR 0 1
72580: PPUSH
72581: LD_VAR 0 2
72585: PPUSH
72586: LD_VAR 0 3
72590: PPUSH
72591: LD_VAR 0 4
72595: PPUSH
72596: LD_VAR 0 5
72600: PPUSH
72601: CALL 25905 0 5
// end ; end_of_file
72605: PPOPN 5
72607: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72608: LD_VAR 0 1
72612: PPUSH
72613: LD_VAR 0 2
72617: PPUSH
72618: LD_VAR 0 3
72622: PPUSH
72623: LD_VAR 0 4
72627: PPUSH
72628: LD_VAR 0 5
72632: PPUSH
72633: LD_VAR 0 6
72637: PPUSH
72638: CALL 10146 0 6
// end ;
72642: PPOPN 6
72644: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72645: LD_INT 0
72647: PPUSH
// begin if not units then
72648: LD_VAR 0 1
72652: NOT
72653: IFFALSE 72657
// exit ;
72655: GO 72657
// end ;
72657: PPOPN 7
72659: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72660: CALL 10050 0 0
// end ;
72664: PPOPN 1
72666: END
