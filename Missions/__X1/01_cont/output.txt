// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1447 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2984 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty > 1 then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: GREATER
1204: IFFALSE 1220
// PlaceHumanInUnit ( Kamil , northDep ) else
1206: LD_EXP 20
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 52
1218: GO 1232
// PlaceHumanInUnit ( Kamil , southDep ) ;
1220: LD_EXP 20
1224: PPUSH
1225: LD_INT 8
1227: PPUSH
1228: CALL_OW 52
// uc_side := 3 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// uc_nation := 3 ;
1240: LD_ADDR_OWVAR 21
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1248: LD_INT 0
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 380
// if Difficulty > 1 then
1261: LD_OWVAR 67
1265: PUSH
1266: LD_INT 1
1268: GREATER
1269: IFFALSE 1285
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1271: CALL_OW 44
1275: PPUSH
1276: LD_INT 8
1278: PPUSH
1279: CALL_OW 52
1283: GO 1297
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1285: CALL_OW 44
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL_OW 52
// end ; end_of_file
1297: LD_VAR 0 1
1301: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1302: LD_INT 0
1304: PPUSH
1305: PPUSH
1306: PPUSH
// uc_side := 3 ;
1307: LD_ADDR_OWVAR 20
1311: PUSH
1312: LD_INT 3
1314: ST_TO_ADDR
// uc_nation := 3 ;
1315: LD_ADDR_OWVAR 21
1319: PUSH
1320: LD_INT 3
1322: ST_TO_ADDR
// russianPatrol := [ ] ;
1323: LD_ADDR_EXP 21
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// for i = 1 to 3 do
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: DOUBLE
1336: LD_INT 1
1338: DEC
1339: ST_TO_ADDR
1340: LD_INT 3
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1440
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1359: LD_ADDR_OWVAR 29
1363: PUSH
1364: LD_INT 9
1366: PUSH
1367: LD_INT 10
1369: PPUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// un := CreateHuman ;
1382: LD_ADDR_VAR 0 3
1386: PUSH
1387: CALL_OW 44
1391: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1392: LD_ADDR_EXP 21
1396: PUSH
1397: LD_EXP 21
1401: PPUSH
1402: LD_VAR 0 2
1406: PPUSH
1407: LD_VAR 0 3
1411: PPUSH
1412: CALL_OW 1
1416: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 26
1424: PPUSH
1425: LD_INT 22
1427: PPUSH
1428: LD_INT 4
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// end ;
1438: GO 1343
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
// uc_side := 3 ;
1454: LD_ADDR_OWVAR 20
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// uc_nation := 3 ;
1462: LD_ADDR_OWVAR 21
1466: PUSH
1467: LD_INT 3
1469: ST_TO_ADDR
// russianForces := [ ] ;
1470: LD_ADDR_EXP 23
1474: PUSH
1475: EMPTY
1476: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1477: LD_ADDR_EXP 22
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1484: LD_ADDR_VAR 0 5
1488: PUSH
1489: LD_INT 11
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 517
1499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: LD_INT 21
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: PUSH
1520: FOR_IN
1521: IFFALSE 1565
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 274
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 200
1538: PPUSH
1539: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 274
1552: PPUSH
1553: LD_INT 2
1555: PPUSH
1556: LD_INT 10
1558: PPUSH
1559: CALL_OW 277
// end ;
1563: GO 1520
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 31
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1662
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1590: LD_INT 0
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: LD_OWVAR 67
1600: PUSH
1601: LD_INT 1
1603: MINUS
1604: PPUSH
1605: CALL_OW 380
// un := CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 254
1633: PUSH
1634: LD_INT 3
1636: MINUS
1637: PUSH
1638: LD_INT 6
1640: MOD
1641: PPUSH
1642: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1646: LD_VAR 0 4
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ;
1660: GO 1587
1662: POP
1663: POP
// for i = 1 to 5 do
1664: LD_ADDR_VAR 0 2
1668: PUSH
1669: DOUBLE
1670: LD_INT 1
1672: DEC
1673: ST_TO_ADDR
1674: LD_INT 5
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1760
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_OWVAR 67
1690: PPUSH
1691: CALL_OW 380
// un := CreateHuman ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// ComHold ( un ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_EXP 23
1738: PPUSH
1739: LD_EXP 23
1743: PUSH
1744: LD_INT 1
1746: PLUS
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL_OW 1
1757: ST_TO_ADDR
// end ;
1758: GO 1677
1760: POP
1761: POP
// for i := 1 to Difficulty + 1 do
1762: LD_ADDR_VAR 0 2
1766: PUSH
1767: DOUBLE
1768: LD_INT 1
1770: DEC
1771: ST_TO_ADDR
1772: LD_OWVAR 67
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1882
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1784: LD_INT 0
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_OWVAR 67
1794: PPUSH
1795: CALL_OW 380
// un := CreateHuman ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_VAR 0 5
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_VAR 0 5
1833: PUSH
1834: LD_INT 2
1836: ARRAY
1837: PUSH
1838: LD_VAR 0 2
1842: ARRAY
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1851: LD_ADDR_EXP 22
1855: PUSH
1856: LD_EXP 22
1860: PPUSH
1861: LD_EXP 22
1865: PUSH
1866: LD_INT 1
1868: PLUS
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL_OW 1
1879: ST_TO_ADDR
// end ;
1880: GO 1781
1882: POP
1883: POP
// vc_chassis := ru_medium_wheeled ;
1884: LD_ADDR_OWVAR 37
1888: PUSH
1889: LD_INT 21
1891: ST_TO_ADDR
// vc_engine := engine_combustion ;
1892: LD_ADDR_OWVAR 39
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// vc_control := control_manual ;
1900: LD_ADDR_OWVAR 38
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 42
1915: ST_TO_ADDR
// russianTank := CreateVehicle ;
1916: LD_ADDR_EXP 24
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1926: LD_EXP 24
1930: PPUSH
1931: LD_INT 121
1933: PPUSH
1934: LD_INT 25
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1944: LD_INT 0
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_OWVAR 67
1954: PPUSH
1955: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1959: CALL_OW 44
1963: PPUSH
1964: LD_EXP 24
1968: PPUSH
1969: CALL_OW 52
// if Difficulty > 1 then
1973: LD_OWVAR 67
1977: PUSH
1978: LD_INT 1
1980: GREATER
1981: IFFALSE 2067
// begin bc_type := b_breastwork ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 31
1990: ST_TO_ADDR
// bc_level := 2 ;
1991: LD_ADDR_OWVAR 43
1995: PUSH
1996: LD_INT 2
1998: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 143
2006: PPUSH
2007: LD_INT 88
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 47
2017: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 4
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2041: LD_VAR 0 4
2045: PPUSH
2046: LD_INT 4
2048: PPUSH
2049: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2053: LD_VAR 0 4
2057: PPUSH
2058: LD_VAR 0 3
2062: PPUSH
2063: CALL_OW 52
// end ; if Difficulty > 2 then
2067: LD_OWVAR 67
2071: PUSH
2072: LD_INT 2
2074: GREATER
2075: IFFALSE 2131
// begin for i := 1 to 2 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 2
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2129
// begin PrepareHuman ( false , 1 , 2 ) ;
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 2
2101: PPUSH
2102: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2106: CALL_OW 44
2110: PPUSH
2111: LD_INT 156
2113: PPUSH
2114: LD_INT 108
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 50
// end ;
2127: GO 2090
2129: POP
2130: POP
// end ; end ;
2131: LD_VAR 0 1
2135: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2136: LD_EXP 22
2140: IFFALSE 2446
2142: GO 2144
2144: DISABLE
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// begin enable ;
2153: ENABLE
// for i in russianForestPatrol do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_EXP 22
2163: PUSH
2164: FOR_IN
2165: IFFALSE 2444
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 89
2177: PPUSH
2178: CALL_OW 297
2182: PUSH
2183: LD_INT 30
2185: LESS
2186: IFFALSE 2205
// begin ComMoveXY ( i , 114 , 80 ) ;
2188: LD_VAR 0 1
2192: PPUSH
2193: LD_INT 114
2195: PPUSH
2196: LD_INT 80
2198: PPUSH
2199: CALL_OW 111
// continue ;
2203: GO 2164
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2205: LD_ADDR_VAR 0 6
2209: PUSH
2210: LD_EXP 22
2214: PUSH
2215: LD_VAR 0 1
2219: DIFF
2220: PPUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 74
2230: ST_TO_ADDR
// if tmp then
2231: LD_VAR 0 6
2235: IFFALSE 2303
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 6
2246: PPUSH
2247: CALL_OW 296
2251: PUSH
2252: LD_INT 14
2254: LESS
2255: PUSH
2256: LD_VAR 0 6
2260: PPUSH
2261: CALL_OW 256
2265: PUSH
2266: LD_INT 999
2268: LESS
2269: AND
2270: IFFALSE 2303
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_VAR 0 6
2281: PPUSH
2282: CALL_OW 250
2286: PPUSH
2287: LD_VAR 0 6
2291: PPUSH
2292: CALL_OW 251
2296: PPUSH
2297: CALL_OW 114
// break ;
2301: GO 2444
// end ; if not HasTask ( i ) then
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 314
2312: NOT
2313: IFFALSE 2442
// begin d := rand ( 0 , 5 ) ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 0
2322: PPUSH
2323: LD_INT 5
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: LD_INT 3
2338: PPUSH
2339: LD_INT 7
2341: PPUSH
2342: CALL_OW 12
2346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_VAR 0 1
2356: PPUSH
2357: CALL_OW 250
2361: PPUSH
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: CALL_OW 272
2376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2377: LD_ADDR_VAR 0 5
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 273
2406: ST_TO_ADDR
// if ValidHex ( x , y ) then
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_VAR 0 5
2416: PPUSH
2417: CALL_OW 488
2421: IFFALSE 2442
// ComAgressiveMove ( i , x , y ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: LD_VAR 0 4
2432: PPUSH
2433: LD_VAR 0 5
2437: PPUSH
2438: CALL_OW 114
// end ; end ;
2442: GO 2164
2444: POP
2445: POP
// end ;
2446: PPOPN 6
2448: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2449: LD_EXP 24
2453: PPUSH
2454: CALL_OW 302
2458: PUSH
2459: LD_EXP 24
2463: PPUSH
2464: CALL_OW 255
2468: PUSH
2469: LD_INT 3
2471: EQUAL
2472: AND
2473: IFFALSE 2740
2475: GO 2477
2477: DISABLE
// begin enable ;
2478: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2479: LD_EXP 24
2483: PPUSH
2484: LD_INT 124
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: CALL_OW 307
2494: IFFALSE 2508
// SetFuel ( russianTank , 100 ) ;
2496: LD_EXP 24
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL_OW 240
// if HasTask ( russianTank ) then
2508: LD_EXP 24
2512: PPUSH
2513: CALL_OW 314
2517: IFFALSE 2521
// exit ;
2519: GO 2740
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2521: LD_EXP 24
2525: PPUSH
2526: LD_INT 121
2528: PPUSH
2529: LD_INT 25
2531: PPUSH
2532: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2536: LD_EXP 24
2540: PPUSH
2541: LD_INT 122
2543: PPUSH
2544: LD_INT 48
2546: PPUSH
2547: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2551: LD_EXP 24
2555: PPUSH
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2563: LD_EXP 24
2567: PPUSH
2568: LD_INT 107
2570: PPUSH
2571: LD_INT 57
2573: PPUSH
2574: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2578: LD_EXP 24
2582: PPUSH
2583: LD_INT 70
2585: PPUSH
2586: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2590: LD_EXP 24
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: LD_INT 61
2600: PPUSH
2601: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2605: LD_EXP 24
2609: PPUSH
2610: LD_INT 105
2612: PPUSH
2613: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 64
2627: PPUSH
2628: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2632: LD_EXP 24
2636: PPUSH
2637: LD_INT 140
2639: PPUSH
2640: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2644: LD_EXP 24
2648: PPUSH
2649: LD_INT 100
2651: PPUSH
2652: LD_INT 61
2654: PPUSH
2655: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2659: LD_EXP 24
2663: PPUSH
2664: LD_INT 105
2666: PPUSH
2667: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2671: LD_EXP 24
2675: PPUSH
2676: LD_INT 107
2678: PPUSH
2679: LD_INT 57
2681: PPUSH
2682: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2686: LD_EXP 24
2690: PPUSH
2691: LD_INT 70
2693: PPUSH
2694: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2698: LD_EXP 24
2702: PPUSH
2703: LD_INT 122
2705: PPUSH
2706: LD_INT 48
2708: PPUSH
2709: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2713: LD_EXP 24
2717: PPUSH
2718: LD_INT 70
2720: PPUSH
2721: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2725: LD_EXP 24
2729: PPUSH
2730: LD_INT 124
2732: PPUSH
2733: LD_INT 25
2735: PPUSH
2736: CALL_OW 171
// end ; end_of_file
2740: END
// export Johnny ; export function PrepareJohnny ; begin
2741: LD_INT 0
2743: PPUSH
// uc_side := 1 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// uc_nation := 1 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 1
2759: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Harris
2767: PPUSH
2768: CALL_OW 25
2772: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2785: LD_EXP 25
2789: PPUSH
2790: LD_INT 8
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// ComCrawl ( Johnny ) ;
2800: LD_EXP 25
2804: PPUSH
2805: CALL_OW 137
// end ;
2809: LD_VAR 0 1
2813: RET
// export function PreparePatrolTank ; var veh , un ; begin
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side := 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation := 1 ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 3
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: CALL_OW 380
// un := CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2858: LD_ADDR_OWVAR 37
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_engine := engine_combustion ;
2866: LD_ADDR_OWVAR 39
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_control := control_manual ;
2874: LD_ADDR_OWVAR 38
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2882: LD_ADDR_OWVAR 40
2886: PUSH
2887: LD_INT 2
2889: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 ] [ Difficulty ] ;
2890: LD_ADDR_OWVAR 41
2894: PUSH
2895: LD_INT 72
2897: PUSH
2898: LD_INT 54
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_OWVAR 67
2913: ARRAY
2914: ST_TO_ADDR
// veh := CreateVehicle ;
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: CALL_OW 45
2924: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2937: LD_VAR 0 2
2941: PPUSH
2942: LD_INT 31
2944: PPUSH
2945: LD_INT 58
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2955: LD_VAR 0 3
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: CALL_OW 52
// result := un ;
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 3
2978: ST_TO_ADDR
// end ; end_of_file
2979: LD_VAR 0 1
2983: RET
// export function Action ; begin
2984: LD_INT 0
2986: PPUSH
// InGameOn ;
2987: CALL_OW 8
// wait ( 0 0$4 ) ;
2991: LD_INT 140
2993: PPUSH
2994: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
2998: LD_EXP 16
3002: PPUSH
3003: LD_STRING DH-start-1
3005: PPUSH
3006: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3010: LD_EXP 16
3014: PPUSH
3015: LD_INT 71
3017: PPUSH
3018: LD_INT 29
3020: PPUSH
3021: CALL_OW 111
// wait ( 0 0$4 ) ;
3025: LD_INT 140
3027: PPUSH
3028: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3032: LD_EXP 16
3036: PPUSH
3037: LD_INT 71
3039: PPUSH
3040: LD_INT 33
3042: PPUSH
3043: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3047: LD_EXP 16
3051: PPUSH
3052: LD_INT 71
3054: PPUSH
3055: LD_INT 34
3057: PPUSH
3058: CALL_OW 178
// wait ( 0 0$4 ) ;
3062: LD_INT 140
3064: PPUSH
3065: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3069: LD_EXP 16
3073: PPUSH
3074: LD_STRING DH-start-2
3076: PPUSH
3077: CALL_OW 88
// wait ( 0 0$4 ) ;
3081: LD_INT 140
3083: PPUSH
3084: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_INT 65
3095: PPUSH
3096: LD_INT 26
3098: PPUSH
3099: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3103: LD_EXP 16
3107: PPUSH
3108: LD_STRING DH-start-3
3110: PPUSH
3111: CALL_OW 88
// InGameOff ;
3115: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3119: LD_STRING O1_cont
3121: PPUSH
3122: CALL_OW 337
// SaveForQuickRestart ;
3126: CALL_OW 22
// missionStarted := true ;
3130: LD_ADDR_EXP 1
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// PrepareJohnny ;
3138: CALL 2741 0 0
// end ;
3142: LD_VAR 0 1
3146: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3147: LD_EXP 8
3151: NOT
3152: PUSH
3153: LD_EXP 7
3157: NOT
3158: AND
3159: PUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_EXP 25
3167: PPUSH
3168: CALL_OW 292
3172: AND
3173: PUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_EXP 16
3181: PPUSH
3182: CALL_OW 292
3186: NOT
3187: AND
3188: PUSH
3189: LD_INT 22
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: CALL_OW 74
3213: PUSH
3214: LD_EXP 25
3218: EQUAL
3219: AND
3220: PUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: CALL_OW 81
3231: PUSH
3232: LD_INT 0
3234: EQUAL
3235: AND
3236: IFFALSE 4167
3238: GO 3240
3240: DISABLE
// begin InGameOn ;
3241: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3245: LD_EXP 16
3249: PPUSH
3250: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3254: LD_EXP 25
3258: PPUSH
3259: LD_STRING DJ-ambush-1
3261: PPUSH
3262: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 25
3282: PPUSH
3283: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3287: LD_EXP 16
3291: PPUSH
3292: LD_STRING DH-ambush-1
3294: PPUSH
3295: CALL_OW 88
// wait ( 0 0$1 ) ;
3299: LD_INT 35
3301: PPUSH
3302: CALL_OW 67
// ComWalk ( Johnny ) ;
3306: LD_EXP 25
3310: PPUSH
3311: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3315: LD_EXP 25
3319: PPUSH
3320: LD_EXP 16
3324: PPUSH
3325: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3329: LD_INT 35
3331: PPUSH
3332: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3336: LD_EXP 25
3340: PPUSH
3341: LD_EXP 16
3345: PPUSH
3346: CALL_OW 296
3350: PUSH
3351: LD_INT 4
3353: LESS
3354: IFFALSE 3329
// ComTurnUnit ( Johnny , Heike ) ;
3356: LD_EXP 25
3360: PPUSH
3361: LD_EXP 16
3365: PPUSH
3366: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3370: LD_EXP 25
3374: PPUSH
3375: LD_STRING DJ-ambush-2
3377: PPUSH
3378: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3382: LD_EXP 16
3386: PPUSH
3387: LD_STRING DH-ambush-2
3389: PPUSH
3390: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3394: LD_EXP 25
3398: PPUSH
3399: LD_STRING DJ-ambush-3
3401: PPUSH
3402: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3406: LD_EXP 16
3410: PPUSH
3411: LD_STRING DH-ambush-3
3413: PPUSH
3414: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3418: LD_EXP 25
3422: PPUSH
3423: LD_STRING DJ-ambush-4
3425: PPUSH
3426: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3430: LD_EXP 16
3434: PPUSH
3435: LD_INT 39
3437: PPUSH
3438: LD_INT 22
3440: PPUSH
3441: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3445: LD_EXP 16
3449: PPUSH
3450: LD_STRING DH-ambush-4
3452: PPUSH
3453: CALL_OW 88
// PrepareRussianPatrol ;
3457: CALL 1302 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3461: LD_INT 39
3463: PPUSH
3464: LD_INT 22
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_INT 12
3472: NEG
3473: PPUSH
3474: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3478: LD_INT 39
3480: PPUSH
3481: LD_INT 22
3483: PPUSH
3484: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3488: LD_EXP 21
3492: PPUSH
3493: LD_INT 39
3495: PPUSH
3496: LD_INT 23
3498: PPUSH
3499: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3503: LD_EXP 16
3507: PUSH
3508: LD_EXP 25
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PPUSH
3517: LD_INT 39
3519: PPUSH
3520: LD_INT 7
3522: PPUSH
3523: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3527: LD_EXP 16
3531: PUSH
3532: LD_EXP 25
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_EXP 21
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3554: LD_EXP 21
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: LD_STRING DR-ambush-5
3565: PPUSH
3566: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3570: LD_EXP 21
3574: PUSH
3575: LD_INT 2
3577: ARRAY
3578: PPUSH
3579: LD_STRING DR1-ambush-5
3581: PPUSH
3582: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3593: LD_EXP 16
3597: PPUSH
3598: LD_INT 39
3600: PPUSH
3601: LD_INT 7
3603: PPUSH
3604: CALL_OW 297
3608: PUSH
3609: LD_INT 6
3611: LESS
3612: IFFALSE 3586
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3614: LD_EXP 16
3618: PPUSH
3619: LD_EXP 21
3623: PUSH
3624: LD_INT 1
3626: ARRAY
3627: PPUSH
3628: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3632: LD_EXP 25
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_STRING DJ-ambush-6
3653: PPUSH
3654: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_STRING DH-ambush-6
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// meetJohnny := true ;
3674: LD_ADDR_EXP 3
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// ComFree ( Johnny ) ;
3682: LD_EXP 25
3686: PPUSH
3687: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3691: LD_STRING O2_ambush_cont
3693: PPUSH
3694: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3698: LD_EXP 21
3702: PUSH
3703: LD_EXP 21
3707: ARRAY
3708: PPUSH
3709: LD_INT 29
3711: PPUSH
3712: LD_INT 15
3714: PPUSH
3715: CALL_OW 111
// wait ( 0 0$2 ) ;
3719: LD_INT 70
3721: PPUSH
3722: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3726: LD_INT 3
3728: PPUSH
3729: LD_EXP 16
3733: PPUSH
3734: CALL_OW 292
3738: NOT
3739: PUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_EXP 25
3747: PPUSH
3748: CALL_OW 292
3752: NOT
3753: AND
3754: IFFALSE 3775
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3756: LD_EXP 21
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_INT 58
3767: PPUSH
3768: LD_INT 32
3770: PPUSH
3771: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 ] [ Difficulty ] ) ;
3775: LD_INT 1750
3777: PUSH
3778: LD_INT 1400
3780: PUSH
3781: LD_INT 1225
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PPUSH
3795: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3799: LD_EXP 21
3803: PPUSH
3804: LD_INT 43
3806: PPUSH
3807: LD_INT 13
3809: PPUSH
3810: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3814: LD_INT 35
3816: PPUSH
3817: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3821: LD_EXP 21
3825: NOT
3826: PUSH
3827: LD_EXP 25
3831: PPUSH
3832: CALL_OW 302
3836: NOT
3837: OR
3838: IFFALSE 3814
// RemoveSeeing ( 39 , 22 , 2 ) ;
3840: LD_INT 39
3842: PPUSH
3843: LD_INT 22
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 2
3858: PPUSH
3859: CALL_OW 81
3863: PUSH
3864: LD_INT 2
3866: EQUAL
3867: IFFALSE 3871
// exit ;
3869: GO 4167
// if not IsOk ( Johnny ) then
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 302
3880: NOT
3881: IFFALSE 3892
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3883: LD_STRING O2_ambush_out_cont
3885: PPUSH
3886: CALL_OW 337
// exit ;
3890: GO 4167
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3892: LD_EXP 16
3896: PPUSH
3897: LD_EXP 25
3901: PPUSH
3902: CALL_OW 296
3906: PUSH
3907: LD_INT 10
3909: GREATER
3910: IFFALSE 3953
// begin ComMoveUnit ( Johnny , Heike ) ;
3912: LD_EXP 25
3916: PPUSH
3917: LD_EXP 16
3921: PPUSH
3922: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3926: LD_INT 35
3928: PPUSH
3929: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3933: LD_EXP 25
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 6
3950: LESS
3951: IFFALSE 3926
// end ; CenterNowOnUnits ( Heike ) ;
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 87
// InGameOn ;
3962: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3966: LD_EXP 16
3970: PPUSH
3971: LD_EXP 25
3975: PPUSH
3976: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3980: LD_EXP 25
3984: PPUSH
3985: LD_EXP 16
3989: PPUSH
3990: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
3994: LD_EXP 25
3998: PPUSH
3999: LD_STRING DJ-thanks-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4006: LD_EXP 16
4010: PPUSH
4011: LD_STRING DH-thanks-1
4013: PPUSH
4014: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4018: LD_EXP 25
4022: PPUSH
4023: LD_STRING DJ-thanks-2
4025: PPUSH
4026: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4030: LD_EXP 25
4034: PPUSH
4035: LD_INT 4
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 111
// wait ( 0 0$1 ) ;
4045: LD_INT 35
4047: PPUSH
4048: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING DH-thanks-2
4059: PPUSH
4060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4064: LD_INT 35
4066: PPUSH
4067: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4071: LD_INT 2
4073: PPUSH
4074: LD_EXP 25
4078: PPUSH
4079: CALL_OW 292
4083: NOT
4084: IFFALSE 4064
// Say ( Heike , DH-thanks-2a ) ;
4086: LD_EXP 16
4090: PPUSH
4091: LD_STRING DH-thanks-2a
4093: PPUSH
4094: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4098: LD_EXP 25
4102: PPUSH
4103: CALL_OW 64
// InGameOff ;
4107: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4111: LD_STRING O2_ambush_out_cont
4113: PPUSH
4114: CALL_OW 337
// johnnySaved := true ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4126: LD_EXP 16
4130: PPUSH
4131: LD_INT 1
4133: PPUSH
4134: LD_INT 600
4136: PPUSH
4137: CALL_OW 492
// if IsOk ( Olaf ) then
4141: LD_EXP 17
4145: PPUSH
4146: CALL_OW 302
4150: IFFALSE 4167
// ComMoveXY ( Olaf , 44 , 25 ) ;
4152: LD_EXP 17
4156: PPUSH
4157: LD_INT 44
4159: PPUSH
4160: LD_INT 25
4162: PPUSH
4163: CALL_OW 111
// end ;
4167: END
// every 0 0$1 trigger russianPatrol do var i ;
4168: LD_EXP 21
4172: IFFALSE 4240
4174: GO 4176
4176: DISABLE
4177: LD_INT 0
4179: PPUSH
// begin enable ;
4180: ENABLE
// for i in russianPatrol do
4181: LD_ADDR_VAR 0 1
4185: PUSH
4186: LD_EXP 21
4190: PUSH
4191: FOR_IN
4192: IFFALSE 4238
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 256
4203: PUSH
4204: LD_INT 1000
4206: LESS
4207: PUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 314
4217: NOT
4218: AND
4219: IFFALSE 4236
// ComAgressiveMove ( i , 42 , 12 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 42
4228: PPUSH
4229: LD_INT 12
4231: PPUSH
4232: CALL_OW 114
4236: GO 4191
4238: POP
4239: POP
// end ;
4240: PPOPN 1
4242: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 2
4248: PPUSH
4249: CALL_OW 81
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: PUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 302
4267: AND
4268: IFFALSE 4285
4270: GO 4272
4272: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4273: LD_EXP 25
4277: PPUSH
4278: LD_STRING DJ-fire-1
4280: PPUSH
4281: CALL_OW 88
4285: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4286: LD_EXP 7
4290: NOT
4291: PUSH
4292: LD_EXP 23
4296: PPUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 2
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 72
4311: AND
4312: IFFALSE 4432
4314: GO 4316
4316: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4317: LD_EXP 16
4321: PPUSH
4322: CALL_OW 87
// DialogueOn ;
4326: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4330: LD_EXP 16
4334: PPUSH
4335: LD_STRING DH-see-enemy-patrol-1
4337: PPUSH
4338: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4342: LD_EXP 23
4346: PPUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PPUSH
4357: CALL_OW 72
4361: PUSH
4362: LD_INT 1
4364: ARRAY
4365: PPUSH
4366: LD_STRING DR-see-enemy-patrol-1
4368: PPUSH
4369: CALL_OW 88
// DialogueOff ;
4373: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4377: LD_EXP 23
4381: PPUSH
4382: LD_INT 66
4384: PPUSH
4385: LD_INT 22
4387: PPUSH
4388: CALL_OW 114
// wait ( 0 0$10 ) ;
4392: LD_INT 350
4394: PPUSH
4395: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4399: LD_EXP 23
4403: PPUSH
4404: LD_INT 175
4406: PPUSH
4407: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4411: LD_EXP 23
4415: PPUSH
4416: LD_INT 9
4418: PPUSH
4419: CALL_OW 173
// AddComFree ( russianForces ) ;
4423: LD_EXP 23
4427: PPUSH
4428: CALL_OW 199
// end ;
4432: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: LD_INT 960
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PPUSH
4455: CALL_OW 72
4459: IFFALSE 4712
4461: GO 4463
4463: DISABLE
4464: LD_INT 0
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
// begin enable ;
4470: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 69
4490: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_EXP 23
4500: PPUSH
4501: LD_INT 1
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: LD_INT 960
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 24
4519: PUSH
4520: LD_INT 500
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 72
4540: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_EXP 23
4550: PPUSH
4551: LD_INT 3
4553: PUSH
4554: LD_INT 24
4556: PUSH
4557: LD_INT 500
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PPUSH
4568: CALL_OW 72
4572: ST_TO_ADDR
// if not tmp then
4573: LD_VAR 0 2
4577: NOT
4578: IFFALSE 4582
// exit ;
4580: GO 4712
// for i in tmp2 do
4582: LD_ADDR_VAR 0 1
4586: PUSH
4587: LD_VAR 0 3
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4651
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 2
4604: PPUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 74
4614: PPUSH
4615: CALL_OW 296
4619: PUSH
4620: LD_INT 10
4622: LESS
4623: IFFALSE 4649
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 74
4644: PPUSH
4645: CALL_OW 115
4649: GO 4592
4651: POP
4652: POP
// if tmp3 then
4653: LD_VAR 0 4
4657: IFFALSE 4712
// for i in tmp3 do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 4
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4710
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_INT 119
4679: PPUSH
4680: LD_INT 21
4682: PPUSH
4683: CALL_OW 297
4687: PUSH
4688: LD_INT 10
4690: GREATER
4691: IFFALSE 4708
// ComMoveXY ( i , 119 , 21 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_INT 119
4700: PPUSH
4701: LD_INT 21
4703: PPUSH
4704: CALL_OW 111
4708: GO 4669
4710: POP
4711: POP
// end ;
4712: PPOPN 4
4714: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4715: LD_EXP 1
4719: PUSH
4720: LD_EXP 16
4724: PPUSH
4725: LD_INT 25
4727: PUSH
4728: LD_INT 14
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_EXP 16
4744: PPUSH
4745: CALL_OW 74
4749: PPUSH
4750: CALL_OW 296
4754: PUSH
4755: LD_INT 6
4757: LESS
4758: AND
4759: IFFALSE 4790
4761: GO 4763
4763: DISABLE
// begin animalCounter := animalCounter + 1 ;
4764: LD_ADDR_EXP 15
4768: PUSH
4769: LD_EXP 15
4773: PUSH
4774: LD_INT 1
4776: PLUS
4777: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4778: LD_EXP 16
4782: PPUSH
4783: LD_STRING DH-tiger-1
4785: PPUSH
4786: CALL_OW 88
// end ;
4790: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4791: LD_EXP 1
4795: PUSH
4796: LD_EXP 16
4800: PPUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 12
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: PPUSH
4816: LD_EXP 16
4820: PPUSH
4821: CALL_OW 74
4825: PPUSH
4826: CALL_OW 296
4830: PUSH
4831: LD_INT 6
4833: LESS
4834: AND
4835: IFFALSE 4866
4837: GO 4839
4839: DISABLE
// begin animalCounter := animalCounter + 1 ;
4840: LD_ADDR_EXP 15
4844: PUSH
4845: LD_EXP 15
4849: PUSH
4850: LD_INT 1
4852: PLUS
4853: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4854: LD_EXP 16
4858: PPUSH
4859: LD_STRING DH-ape-1
4861: PPUSH
4862: CALL_OW 88
// end ;
4866: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4867: LD_EXP 1
4871: PUSH
4872: LD_EXP 16
4876: PPUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 18
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_EXP 16
4896: PPUSH
4897: CALL_OW 74
4901: PPUSH
4902: CALL_OW 296
4906: PUSH
4907: LD_INT 6
4909: LESS
4910: AND
4911: IFFALSE 4942
4913: GO 4915
4915: DISABLE
// begin animalCounter := animalCounter + 1 ;
4916: LD_ADDR_EXP 15
4920: PUSH
4921: LD_EXP 15
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4930: LD_EXP 16
4934: PPUSH
4935: LD_STRING DH-bird-1
4937: PPUSH
4938: CALL_OW 88
// end ;
4942: END
// every 0 0$2 trigger animalCounter = 3 do
4943: LD_EXP 15
4947: PUSH
4948: LD_INT 3
4950: EQUAL
4951: IFFALSE 4963
4953: GO 4955
4955: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4956: LD_STRING ACH_ZOOLIGST
4958: PPUSH
4959: CALL_OW 543
4963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4964: LD_INT 22
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 101
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: IFFALSE 5005
4994: GO 4996
4996: DISABLE
// russianSpotted := true ;
4997: LD_ADDR_EXP 9
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
5005: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5006: LD_EXP 16
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 69
5039: PPUSH
5040: LD_EXP 16
5044: PPUSH
5045: CALL_OW 74
5049: PPUSH
5050: CALL_OW 296
5054: PUSH
5055: LD_INT 8
5057: LESS
5058: IFFALSE 5075
5060: GO 5062
5062: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5063: LD_EXP 16
5067: PPUSH
5068: LD_STRING DH-enemy-base
5070: PPUSH
5071: CALL_OW 88
5075: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5076: LD_EXP 25
5080: PPUSH
5081: CALL_OW 305
5085: NOT
5086: PUSH
5087: LD_EXP 6
5091: NOT
5092: AND
5093: PUSH
5094: LD_EXP 5
5098: AND
5099: PUSH
5100: LD_EXP 12
5104: NOT
5105: AND
5106: PUSH
5107: LD_EXP 11
5111: NOT
5112: AND
5113: IFFALSE 5271
5115: GO 5117
5117: DISABLE
5118: LD_INT 0
5120: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5121: LD_INT 35
5123: PPUSH
5124: CALL_OW 67
// for i in dogTag do
5128: LD_ADDR_VAR 0 1
5132: PUSH
5133: LD_EXP 5
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5188
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5141: LD_EXP 16
5145: PPUSH
5146: LD_VAR 0 1
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 1
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PPUSH
5164: CALL_OW 297
5168: PUSH
5169: LD_INT 3
5171: LESS
5172: IFFALSE 5186
// begin dogTagFound := i ;
5174: LD_ADDR_EXP 6
5178: PUSH
5179: LD_VAR 0 1
5183: ST_TO_ADDR
// break ;
5184: GO 5188
// end ;
5186: GO 5138
5188: POP
5189: POP
// until dogTagFound ;
5190: LD_EXP 6
5194: IFFALSE 5121
// CenterNowOnUnits ( Heike ) ;
5196: LD_EXP 16
5200: PPUSH
5201: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5205: LD_EXP 16
5209: PPUSH
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: PPUSH
5228: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5232: LD_STRING ACH_DOGTAG
5234: PPUSH
5235: CALL_OW 543
// if mercenariesQuestReady then
5239: LD_EXP 10
5243: IFFALSE 5259
// Say ( Heike , DH-dogtag-found-quest ) else
5245: LD_EXP 16
5249: PPUSH
5250: LD_STRING DH-dogtag-found-quest
5252: PPUSH
5253: CALL_OW 88
5257: GO 5271
// Say ( Heike , DH-dogtag-found ) ;
5259: LD_EXP 16
5263: PPUSH
5264: LD_STRING DH-dogtag-found
5266: PPUSH
5267: CALL_OW 88
// end ;
5271: PPOPN 1
5273: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5274: LD_EXP 8
5278: NOT
5279: PUSH
5280: LD_EXP 7
5284: NOT
5285: AND
5286: PUSH
5287: LD_INT 5
5289: PPUSH
5290: LD_EXP 16
5294: PPUSH
5295: CALL_OW 292
5299: AND
5300: PUSH
5301: LD_EXP 16
5305: PPUSH
5306: LD_EXP 17
5310: PPUSH
5311: CALL_OW 296
5315: PUSH
5316: LD_INT 8
5318: LESS
5319: AND
5320: IFFALSE 5689
5322: GO 5324
5324: DISABLE
// begin olafSpotted := true ;
5325: LD_ADDR_EXP 8
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if HasTask ( Olaf ) then
5333: LD_EXP 17
5337: PPUSH
5338: CALL_OW 314
5342: IFFALSE 5353
// ComStop ( Olaf ) ;
5344: LD_EXP 17
5348: PPUSH
5349: CALL_OW 141
// InGameOn ;
5353: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5357: LD_EXP 17
5361: PPUSH
5362: LD_EXP 16
5366: PPUSH
5367: CALL_OW 296
5371: PUSH
5372: LD_INT 8
5374: GREATER
5375: IFFALSE 5391
// ComMoveUnit ( Olaf , Heike ) ;
5377: LD_EXP 17
5381: PPUSH
5382: LD_EXP 16
5386: PPUSH
5387: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5398: LD_EXP 17
5402: PPUSH
5403: LD_EXP 16
5407: PPUSH
5408: CALL_OW 296
5412: PUSH
5413: LD_INT 8
5415: LESSEQUAL
5416: IFFALSE 5391
// ComTurnUnit ( Heike , Olaf ) ;
5418: LD_EXP 16
5422: PPUSH
5423: LD_EXP 17
5427: PPUSH
5428: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5432: LD_EXP 17
5436: PPUSH
5437: LD_EXP 16
5441: PPUSH
5442: CALL_OW 119
// DialogueOn ;
5446: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5450: LD_EXP 17
5454: PPUSH
5455: LD_STRING DO-olaf-1
5457: PPUSH
5458: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5462: LD_EXP 16
5466: PPUSH
5467: LD_STRING DH-olaf-1
5469: PPUSH
5470: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5474: LD_EXP 17
5478: PPUSH
5479: LD_STRING DO-olaf-2
5481: PPUSH
5482: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5486: LD_EXP 16
5490: PPUSH
5491: LD_STRING DH-olaf-2
5493: PPUSH
5494: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING DO-olaf-3
5505: PPUSH
5506: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DO-olaf-4
5517: PPUSH
5518: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5522: LD_EXP 16
5526: PPUSH
5527: LD_STRING DH-olaf-4
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5534: LD_EXP 17
5538: PPUSH
5539: LD_STRING DO-olaf-5
5541: PPUSH
5542: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5546: LD_EXP 16
5550: PPUSH
5551: LD_STRING DH-olaf-5
5553: PPUSH
5554: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5558: LD_EXP 17
5562: PPUSH
5563: LD_STRING DO-olaf-6
5565: PPUSH
5566: CALL_OW 88
// if russianSpotted or johnnySaved then
5570: LD_EXP 9
5574: PUSH
5575: LD_EXP 4
5579: OR
5580: IFFALSE 5608
// begin Say ( Heike , DH-olaf-6a ) ;
5582: LD_EXP 16
5586: PPUSH
5587: LD_STRING DH-olaf-6a
5589: PPUSH
5590: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_STRING DO-olaf-7a
5601: PPUSH
5602: CALL_OW 88
// end else
5606: GO 5632
// begin Say ( Heike , DH-olaf-6b ) ;
5608: LD_EXP 16
5612: PPUSH
5613: LD_STRING DH-olaf-6b
5615: PPUSH
5616: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING DO-olaf-7b
5627: PPUSH
5628: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5632: LD_EXP 17
5636: PPUSH
5637: LD_STRING DO-olaf-8
5639: PPUSH
5640: CALL_OW 88
// DialogueOff ;
5644: CALL_OW 7
// InGameOff ;
5648: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5652: LD_STRING O3_camp_cont
5654: PPUSH
5655: CALL_OW 337
// ComMoveXY ( Olaf , 52 , 90 ) ;
5659: LD_EXP 17
5663: PPUSH
5664: LD_INT 52
5666: PPUSH
5667: LD_INT 90
5669: PPUSH
5670: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5674: LD_EXP 17
5678: PPUSH
5679: LD_INT 53
5681: PPUSH
5682: LD_INT 89
5684: PPUSH
5685: CALL_OW 178
// end ;
5689: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5690: LD_EXP 8
5694: NOT
5695: PUSH
5696: LD_EXP 16
5700: PPUSH
5701: LD_EXP 18
5705: PPUSH
5706: CALL_OW 296
5710: PUSH
5711: LD_INT 36
5713: LESS
5714: AND
5715: IFFALSE 5735
5717: GO 5719
5719: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5720: LD_EXP 17
5724: PPUSH
5725: LD_INT 39
5727: PPUSH
5728: LD_INT 71
5730: PPUSH
5731: CALL_OW 111
5735: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5736: LD_EXP 7
5740: NOT
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_EXP 19
5749: PPUSH
5750: CALL_OW 292
5754: PUSH
5755: LD_INT 2
5757: PPUSH
5758: LD_EXP 18
5762: PPUSH
5763: CALL_OW 292
5767: OR
5768: AND
5769: IFFALSE 7090
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
// begin if not johnnySaved then
5779: LD_EXP 4
5783: NOT
5784: IFFALSE 5795
// KillUnit ( Johnny ) ;
5786: LD_EXP 25
5790: PPUSH
5791: CALL_OW 66
// mercenariesSpotted := true ;
5795: LD_ADDR_EXP 7
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5803: LD_STRING O4_camp_cont
5805: PPUSH
5806: CALL_OW 337
// InGameOn ;
5810: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5814: LD_INT 53
5816: PPUSH
5817: LD_INT 89
5819: PPUSH
5820: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5824: LD_INT 53
5826: PPUSH
5827: LD_INT 89
5829: PPUSH
5830: LD_INT 2
5832: PPUSH
5833: LD_INT 8
5835: NEG
5836: PPUSH
5837: CALL_OW 330
// if olafSpotted then
5841: LD_EXP 8
5845: IFFALSE 5963
// begin AddComTurnUnit ( Olaf , Heike ) ;
5847: LD_EXP 17
5851: PPUSH
5852: LD_EXP 16
5856: PPUSH
5857: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5861: LD_EXP 16
5865: PPUSH
5866: LD_INT 51
5868: PPUSH
5869: LD_INT 86
5871: PPUSH
5872: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5876: LD_EXP 16
5880: PPUSH
5881: LD_EXP 17
5885: PPUSH
5886: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5890: LD_EXP 17
5894: PPUSH
5895: LD_STRING DO-camp-1
5897: PPUSH
5898: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5902: LD_EXP 18
5906: PUSH
5907: LD_EXP 19
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: LD_EXP 16
5920: PPUSH
5921: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5925: LD_EXP 18
5929: PPUSH
5930: LD_STRING DG-camp-1
5932: PPUSH
5933: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5937: LD_EXP 16
5941: PPUSH
5942: LD_STRING DH-camp-1
5944: PPUSH
5945: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5949: LD_EXP 17
5953: PPUSH
5954: LD_STRING DO-camp-2
5956: PPUSH
5957: CALL_OW 88
// end else
5961: GO 6358
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5963: LD_EXP 16
5967: PPUSH
5968: LD_INT 51
5970: PPUSH
5971: LD_INT 86
5973: PPUSH
5974: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5978: LD_EXP 16
5982: PPUSH
5983: LD_EXP 18
5987: PPUSH
5988: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5992: LD_EXP 18
5996: PUSH
5997: LD_EXP 19
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: LD_EXP 16
6010: PPUSH
6011: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6015: LD_EXP 18
6019: PPUSH
6020: LD_STRING DG-camp-1a
6022: PPUSH
6023: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_STRING DH-camp-1a
6034: PPUSH
6035: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6039: LD_INT 1
6041: PPUSH
6042: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6046: LD_EXP 19
6050: PPUSH
6051: LD_EXP 17
6055: PPUSH
6056: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6060: LD_EXP 19
6064: PPUSH
6065: LD_STRING DM-camp-1a
6067: PPUSH
6068: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6072: LD_EXP 17
6076: PPUSH
6077: LD_INT 52
6079: PPUSH
6080: LD_INT 90
6082: PPUSH
6083: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6087: LD_EXP 19
6091: PPUSH
6092: LD_EXP 16
6096: PPUSH
6097: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6101: LD_EXP 18
6105: PPUSH
6106: LD_STRING DG-camp-2a
6108: PPUSH
6109: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6113: LD_EXP 16
6117: PPUSH
6118: LD_STRING DH-camp-2a
6120: PPUSH
6121: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6125: LD_EXP 19
6129: PPUSH
6130: LD_STRING DM-camp-2a
6132: PPUSH
6133: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6137: LD_INT 35
6139: PPUSH
6140: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6144: LD_EXP 17
6148: PPUSH
6149: LD_EXP 16
6153: PPUSH
6154: CALL_OW 296
6158: PUSH
6159: LD_INT 10
6161: LESS
6162: IFFALSE 6137
// AddComTurnUnit ( Olaf , Heike ) ;
6164: LD_EXP 17
6168: PPUSH
6169: LD_EXP 16
6173: PPUSH
6174: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6178: LD_EXP 19
6182: PPUSH
6183: LD_EXP 16
6187: PPUSH
6188: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6192: LD_EXP 17
6196: PPUSH
6197: LD_STRING DO-camp-2a
6199: PPUSH
6200: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6204: LD_EXP 16
6208: PPUSH
6209: LD_EXP 17
6213: PPUSH
6214: CALL_OW 119
// if russianSpotted then
6218: LD_EXP 9
6222: IFFALSE 6262
// begin Say ( Heike , DH-camp-2aa ) ;
6224: LD_EXP 16
6228: PPUSH
6229: LD_STRING DH-camp-2aa
6231: PPUSH
6232: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6236: LD_EXP 18
6240: PPUSH
6241: LD_STRING DG-camp-2aa
6243: PPUSH
6244: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6248: LD_EXP 19
6252: PPUSH
6253: LD_STRING DM-camp-2aa
6255: PPUSH
6256: CALL_OW 88
// end else
6260: GO 6286
// begin Say ( Heike , DH-camp-2ab ) ;
6262: LD_EXP 16
6266: PPUSH
6267: LD_STRING DH-camp-2ab
6269: PPUSH
6270: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6274: LD_EXP 19
6278: PPUSH
6279: LD_STRING DM-camp-2ab
6281: PPUSH
6282: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6286: LD_EXP 16
6290: PPUSH
6291: LD_STRING DH-camp-3a
6293: PPUSH
6294: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6298: LD_EXP 17
6302: PPUSH
6303: LD_STRING DO-camp-3a
6305: PPUSH
6306: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6310: LD_EXP 18
6314: PPUSH
6315: LD_STRING DG-camp-3a
6317: PPUSH
6318: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6322: LD_EXP 16
6326: PPUSH
6327: LD_STRING DH-camp-4aa
6329: PPUSH
6330: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6334: LD_EXP 19
6338: PPUSH
6339: LD_STRING DM-camp-4aa
6341: PPUSH
6342: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6346: LD_EXP 17
6350: PPUSH
6351: LD_STRING DO-camp-4a
6353: PPUSH
6354: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6358: LD_EXP 17
6362: PPUSH
6363: LD_STRING DO-camp-3
6365: PPUSH
6366: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6370: LD_EXP 17
6374: PPUSH
6375: LD_STRING DO-camp-4
6377: PPUSH
6378: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6382: LD_EXP 18
6386: PPUSH
6387: LD_EXP 17
6391: PPUSH
6392: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6396: LD_EXP 18
6400: PPUSH
6401: LD_STRING DG-camp-4
6403: PPUSH
6404: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6408: LD_EXP 16
6412: PPUSH
6413: LD_EXP 18
6417: PPUSH
6418: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6422: LD_EXP 16
6426: PPUSH
6427: LD_STRING DH-camp-4
6429: PPUSH
6430: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6434: LD_EXP 19
6438: PUSH
6439: LD_EXP 17
6443: PUSH
6444: LD_EXP 18
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: PPUSH
6454: LD_EXP 16
6458: PPUSH
6459: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6463: LD_EXP 18
6467: PPUSH
6468: LD_STRING DG-camp-5
6470: PPUSH
6471: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6475: LD_EXP 18
6479: PPUSH
6480: LD_STRING DG-camp-6
6482: PPUSH
6483: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6487: LD_EXP 16
6491: PPUSH
6492: LD_STRING DH-camp-6
6494: PPUSH
6495: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DG-camp-7
6506: PPUSH
6507: CALL_OW 88
// if DogTagFound then
6511: LD_EXP 6
6515: IFFALSE 6555
// begin Say ( Heike , DH-quest-1a ) ;
6517: LD_EXP 16
6521: PPUSH
6522: LD_STRING DH-quest-1a
6524: PPUSH
6525: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6529: LD_EXP 18
6533: PPUSH
6534: LD_STRING DG-quest-1a
6536: PPUSH
6537: CALL_OW 88
// mercenariesQuestDone := true ;
6541: LD_ADDR_EXP 11
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// InGameOff ;
6549: CALL_OW 9
// end else
6553: GO 6721
// begin Say ( Heike , DH-camp-7 ) ;
6555: LD_EXP 16
6559: PPUSH
6560: LD_STRING DH-camp-7
6562: PPUSH
6563: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6567: LD_EXP 16
6571: PPUSH
6572: CALL_OW 256
6576: PUSH
6577: LD_INT 1000
6579: LESS
6580: IFFALSE 6672
// begin Say ( Olaf , DO-heal-1 ) ;
6582: LD_EXP 17
6586: PPUSH
6587: LD_STRING DO-heal-1
6589: PPUSH
6590: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6594: LD_EXP 16
6598: PPUSH
6599: LD_INT 51
6601: PPUSH
6602: LD_INT 88
6604: PPUSH
6605: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6609: LD_INT 35
6611: PPUSH
6612: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6616: LD_EXP 16
6620: PPUSH
6621: LD_EXP 17
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: PUSH
6635: LD_EXP 16
6639: PPUSH
6640: LD_INT 51
6642: PPUSH
6643: LD_INT 88
6645: PPUSH
6646: CALL_OW 307
6650: OR
6651: IFFALSE 6609
// SetLives ( Heike , 1000 ) ;
6653: LD_EXP 16
6657: PPUSH
6658: LD_INT 1000
6660: PPUSH
6661: CALL_OW 234
// wait ( 0 0$2 ) ;
6665: LD_INT 70
6667: PPUSH
6668: CALL_OW 67
// end ; InGameOff ;
6672: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6676: LD_EXP 17
6680: PUSH
6681: LD_EXP 18
6685: PUSH
6686: LD_EXP 19
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PPUSH
6696: LD_INT 53
6698: PPUSH
6699: LD_INT 89
6701: PPUSH
6702: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6706: LD_STRING O5_proof_cont
6708: PPUSH
6709: CALL_OW 337
// mercenariesQuestReady := true ;
6713: LD_ADDR_EXP 10
6717: PUSH
6718: LD_INT 1
6720: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6721: LD_EXP 10
6725: NOT
6726: IFFALSE 6730
// exit ;
6728: GO 7090
// wait ( 0 0$35 ) ;
6730: LD_INT 1225
6732: PPUSH
6733: CALL_OW 67
// driver := PreparePatrolTank ;
6737: LD_ADDR_VAR 0 2
6741: PUSH
6742: CALL 2814 0 0
6746: ST_TO_ADDR
// if not driver then
6747: LD_VAR 0 2
6751: NOT
6752: IFFALSE 6756
// exit ;
6754: GO 7090
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6756: LD_INT 2
6758: PPUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 2
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6772: LD_ADDR_VAR 0 3
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 310
6786: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_INT 500
6794: PPUSH
6795: CALL_OW 234
// SetLives ( driver , 450 ) ;
6799: LD_VAR 0 2
6803: PPUSH
6804: LD_INT 450
6806: PPUSH
6807: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6811: LD_VAR 0 2
6815: PPUSH
6816: LD_INT 59
6818: PPUSH
6819: LD_INT 60
6821: PPUSH
6822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6826: LD_INT 35
6828: PPUSH
6829: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 59
6840: PPUSH
6841: LD_INT 60
6843: PPUSH
6844: CALL_OW 307
6848: IFFALSE 6826
// if not See ( 1 , Heike ) then
6850: LD_INT 1
6852: PPUSH
6853: LD_EXP 16
6857: PPUSH
6858: CALL_OW 292
6862: NOT
6863: IFFALSE 6987
// begin if Difficulty < 3 then
6865: LD_OWVAR 67
6869: PUSH
6870: LD_INT 3
6872: LESS
6873: IFFALSE 6891
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6875: LD_INT 59
6877: PPUSH
6878: LD_INT 60
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 6
6886: PPUSH
6887: CALL_OW 330
// ComExitVehicle ( driver ) ;
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 121
// wait ( 0 0$1 ) ;
6900: LD_INT 35
6902: PPUSH
6903: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6907: LD_VAR 0 2
6911: PPUSH
6912: LD_INT 58
6914: PPUSH
6915: LD_INT 54
6917: PPUSH
6918: CALL_OW 171
// wait ( 0 0$1 ) ;
6922: LD_INT 35
6924: PPUSH
6925: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_INT 57
6936: PPUSH
6937: LD_INT 53
6939: PPUSH
6940: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6944: LD_VAR 0 2
6948: PPUSH
6949: LD_INT 350
6951: PPUSH
6952: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6956: LD_VAR 0 2
6960: PPUSH
6961: LD_VAR 0 3
6965: PPUSH
6966: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
6970: LD_VAR 0 2
6974: PPUSH
6975: LD_INT 107
6977: PPUSH
6978: LD_INT 118
6980: PPUSH
6981: CALL_OW 171
// end else
6985: GO 7002
// begin ComMoveXY ( driver , 107 , 118 ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_INT 107
6994: PPUSH
6995: LD_INT 118
6997: PPUSH
6998: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7002: LD_INT 35
7004: PPUSH
7005: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_INT 107
7016: PPUSH
7017: LD_INT 118
7019: PPUSH
7020: CALL_OW 307
7024: PUSH
7025: LD_VAR 0 2
7029: PPUSH
7030: CALL_OW 301
7034: OR
7035: IFFALSE 7002
// if IsDead ( driver [ 1 ] ) then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 1
7044: ARRAY
7045: PPUSH
7046: CALL_OW 301
7050: IFFALSE 7054
// exit ;
7052: GO 7090
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7054: LD_ADDR_VAR 0 1
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 1
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 69
7073: PUSH
7074: FOR_IN
7075: IFFALSE 7088
// RemoveUnit ( i ) ;
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 64
7086: GO 7074
7088: POP
7089: POP
// end ;
7090: PPOPN 3
7092: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7093: LD_INT 10
7095: PPUSH
7096: LD_INT 22
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 21
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 70
7124: IFFALSE 7198
7126: GO 7128
7128: DISABLE
// begin InGameOn ;
7129: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7133: LD_EXP 17
7137: PUSH
7138: LD_EXP 19
7142: PUSH
7143: LD_EXP 18
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: PPUSH
7153: LD_EXP 16
7157: PPUSH
7158: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7162: LD_EXP 19
7166: PPUSH
7167: LD_STRING DM-quest-1
7169: PPUSH
7170: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7174: LD_EXP 18
7178: PPUSH
7179: LD_STRING DG-quest-1
7181: PPUSH
7182: CALL_OW 88
// InGameOff ;
7186: CALL_OW 9
// mercenariesQuestDone := true ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// end ;
7198: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7199: LD_EXP 16
7203: PPUSH
7204: LD_INT 10
7206: PPUSH
7207: CALL_OW 308
7211: PUSH
7212: LD_EXP 6
7216: AND
7217: PUSH
7218: LD_EXP 10
7222: AND
7223: PUSH
7224: LD_INT 10
7226: PPUSH
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: NOT
7256: AND
7257: IFFALSE 7429
7259: GO 7261
7261: DISABLE
7262: LD_INT 0
7264: PPUSH
// begin InGameOn ;
7265: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7269: LD_EXP 17
7273: PUSH
7274: LD_EXP 19
7278: PUSH
7279: LD_EXP 18
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: LD_EXP 16
7293: PPUSH
7294: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7298: LD_EXP 16
7302: PPUSH
7303: LD_INT 54
7305: PPUSH
7306: LD_INT 86
7308: PPUSH
7309: CALL_OW 111
// p := p + 1 ;
7313: LD_ADDR_VAR 0 1
7317: PUSH
7318: LD_VAR 0 1
7322: PUSH
7323: LD_INT 1
7325: PLUS
7326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7327: LD_INT 35
7329: PPUSH
7330: CALL_OW 67
// p := p + 1 ;
7334: LD_ADDR_VAR 0 1
7338: PUSH
7339: LD_VAR 0 1
7343: PUSH
7344: LD_INT 1
7346: PLUS
7347: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7348: LD_EXP 16
7352: PPUSH
7353: LD_EXP 18
7357: PPUSH
7358: CALL_OW 296
7362: PUSH
7363: LD_INT 4
7365: LESS
7366: PUSH
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 5
7374: GREATER
7375: OR
7376: IFFALSE 7327
// Say ( Mike , DM-quest-1 ) ;
7378: LD_EXP 19
7382: PPUSH
7383: LD_STRING DM-quest-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7390: LD_EXP 18
7394: PPUSH
7395: LD_STRING DG-quest-1
7397: PPUSH
7398: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7402: LD_EXP 16
7406: PPUSH
7407: LD_INT 55
7409: PPUSH
7410: LD_INT 87
7412: PPUSH
7413: CALL_OW 111
// InGameOff ;
7417: CALL_OW 9
// mercenariesQuestDone := true ;
7421: LD_ADDR_EXP 11
7425: PUSH
7426: LD_INT 1
7428: ST_TO_ADDR
// end ;
7429: PPOPN 1
7431: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7432: LD_EXP 16
7436: PUSH
7437: LD_INT 55
7439: PUSH
7440: EMPTY
7441: LIST
7442: PPUSH
7443: CALL_OW 69
7447: IN
7448: IFFALSE 7488
7450: GO 7452
7452: DISABLE
// begin if Difficulty < 3 then
7453: LD_OWVAR 67
7457: PUSH
7458: LD_INT 3
7460: LESS
7461: IFFALSE 7476
// RemoveSeeing ( 59 , 60 , 2 ) ;
7463: LD_INT 59
7465: PPUSH
7466: LD_INT 60
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7476: LD_EXP 16
7480: PPUSH
7481: LD_STRING DH-driver
7483: PPUSH
7484: CALL_OW 88
// end ;
7488: END
// every 0 0$1 trigger mercenariesQuestDone do
7489: LD_EXP 11
7493: IFFALSE 7981
7495: GO 7497
7497: DISABLE
// begin if mercenariesQuestReady then
7498: LD_EXP 10
7502: IFFALSE 7511
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7504: LD_STRING O5_proof_cont_out
7506: PPUSH
7507: CALL_OW 337
// InGameOn ;
7511: CALL_OW 8
// if IsInUnit ( Heike ) then
7515: LD_EXP 16
7519: PPUSH
7520: CALL_OW 310
7524: IFFALSE 7535
// ComExitVehicle ( Heike ) ;
7526: LD_EXP 16
7530: PPUSH
7531: CALL_OW 121
// wait ( 3 ) ;
7535: LD_INT 3
7537: PPUSH
7538: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7542: LD_EXP 16
7546: PPUSH
7547: LD_EXP 18
7551: PPUSH
7552: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7556: LD_EXP 17
7560: PUSH
7561: LD_EXP 19
7565: PUSH
7566: LD_EXP 18
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: PPUSH
7576: LD_EXP 16
7580: PPUSH
7581: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7585: LD_EXP 16
7589: PPUSH
7590: LD_STRING DH-quest-done-1
7592: PPUSH
7593: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7597: LD_EXP 19
7601: PPUSH
7602: LD_STRING DM-quest-done-1
7604: PPUSH
7605: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7609: LD_EXP 18
7613: PPUSH
7614: LD_STRING DG-quest-done-1
7616: PPUSH
7617: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7621: LD_EXP 16
7625: PPUSH
7626: LD_EXP 17
7630: PPUSH
7631: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7635: LD_EXP 16
7639: PPUSH
7640: LD_STRING DH-quest-done-2
7642: PPUSH
7643: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7647: LD_EXP 17
7651: PPUSH
7652: LD_STRING DO-quest-done-2
7654: PPUSH
7655: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7659: LD_EXP 17
7663: PPUSH
7664: LD_STRING DO-quest-done-3
7666: PPUSH
7667: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7671: LD_EXP 18
7675: PPUSH
7676: LD_INT 51
7678: PPUSH
7679: LD_INT 90
7681: PPUSH
7682: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7686: LD_EXP 18
7690: PPUSH
7691: LD_INT 50
7693: PPUSH
7694: LD_INT 89
7696: PPUSH
7697: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7701: LD_EXP 16
7705: PPUSH
7706: LD_EXP 18
7710: PPUSH
7711: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7715: LD_EXP 18
7719: PPUSH
7720: LD_STRING DG-quest-done-4
7722: PPUSH
7723: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_EXP 16
7736: PPUSH
7737: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7741: LD_EXP 16
7745: PPUSH
7746: CALL_OW 256
7750: PUSH
7751: LD_INT 1000
7753: LESS
7754: IFFALSE 7846
// begin Say ( Olaf , DO-heal-1 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING DO-heal-1
7763: PPUSH
7764: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7768: LD_EXP 16
7772: PPUSH
7773: LD_INT 51
7775: PPUSH
7776: LD_INT 88
7778: PPUSH
7779: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7790: LD_EXP 16
7794: PPUSH
7795: LD_EXP 17
7799: PPUSH
7800: CALL_OW 296
7804: PUSH
7805: LD_INT 4
7807: LESS
7808: PUSH
7809: LD_EXP 16
7813: PPUSH
7814: LD_INT 51
7816: PPUSH
7817: LD_INT 88
7819: PPUSH
7820: CALL_OW 307
7824: OR
7825: IFFALSE 7783
// SetLives ( Heike , 1000 ) ;
7827: LD_EXP 16
7831: PPUSH
7832: LD_INT 1000
7834: PPUSH
7835: CALL_OW 234
// wait ( 0 0$2 ) ;
7839: LD_INT 70
7841: PPUSH
7842: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7846: LD_EXP 16
7850: PPUSH
7851: LD_STRING DH-quest-done-4
7853: PPUSH
7854: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7858: LD_EXP 17
7862: PPUSH
7863: LD_STRING DO-quest-done-4
7865: PPUSH
7866: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7870: LD_EXP 16
7874: PPUSH
7875: LD_EXP 17
7879: PPUSH
7880: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7884: LD_EXP 16
7888: PPUSH
7889: LD_STRING DH-quest-done-5
7891: PPUSH
7892: CALL_OW 88
// InGameOff ;
7896: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7900: LD_STRING O6_end_cont
7902: PPUSH
7903: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7907: LD_EXP 18
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7919: LD_EXP 19
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7931: LD_INT 42
7933: PPUSH
7934: LD_INT 2
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7944: LD_EXP 17
7948: PPUSH
7949: LD_INT 53
7951: PPUSH
7952: LD_INT 89
7954: PPUSH
7955: CALL_OW 118
// lastObjectiveActive := true ;
7959: LD_ADDR_EXP 12
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7967: LD_INT 1
7969: PPUSH
7970: LD_INT 1
7972: PPUSH
7973: CALL_OW 424
// PreparePrison ;
7977: CALL 1164 0 0
// end ;
7981: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
7982: LD_INT 22
7984: PUSH
7985: LD_INT 2
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 91
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: LD_INT 4
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: IFFALSE 8196
8016: GO 8018
8018: DISABLE
8019: LD_INT 0
8021: PPUSH
8022: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 ] [ Difficulty ] ) ;
8023: LD_INT 245
8025: PUSH
8026: LD_INT 210
8028: PUSH
8029: LD_INT 210
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_OWVAR 67
8041: ARRAY
8042: PPUSH
8043: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8047: LD_ADDR_VAR 0 2
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 1
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 54
8074: PUSH
8075: EMPTY
8076: LIST
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 69
8087: ST_TO_ADDR
// if not tmp then
8088: LD_VAR 0 2
8092: NOT
8093: IFFALSE 8097
// exit ;
8095: GO 8196
// for i in tmp do
8097: LD_ADDR_VAR 0 1
8101: PUSH
8102: LD_VAR 0 2
8106: PUSH
8107: FOR_IN
8108: IFFALSE 8136
// begin ComExitBuilding ( i ) ;
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_INT 121
8126: PPUSH
8127: LD_INT 22
8129: PPUSH
8130: CALL_OW 174
// end ;
8134: GO 8107
8136: POP
8137: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8138: LD_EXP 23
8142: PPUSH
8143: LD_INT 121
8145: PPUSH
8146: LD_INT 22
8148: PPUSH
8149: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8153: LD_EXP 24
8157: PPUSH
8158: LD_INT 121
8160: PPUSH
8161: LD_INT 22
8163: PPUSH
8164: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8168: LD_EXP 23
8172: PPUSH
8173: LD_EXP 16
8177: PPUSH
8178: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8182: LD_EXP 24
8186: PPUSH
8187: LD_EXP 16
8191: PPUSH
8192: CALL_OW 175
// end ;
8196: PPOPN 2
8198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8199: LD_INT 22
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 91
8211: PUSH
8212: LD_INT 8
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PPUSH
8227: CALL_OW 69
8231: IFFALSE 8413
8233: GO 8235
8235: DISABLE
8236: LD_INT 0
8238: PPUSH
8239: PPUSH
// begin wait ( [ 0 0$8 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8240: LD_INT 280
8242: PUSH
8243: LD_INT 245
8245: PUSH
8246: LD_INT 210
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_OWVAR 67
8258: ARRAY
8259: PPUSH
8260: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_INT 22
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 25
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 54
8291: PUSH
8292: EMPTY
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: ST_TO_ADDR
// if not tmp then
8305: LD_VAR 0 2
8309: NOT
8310: IFFALSE 8314
// exit ;
8312: GO 8413
// for i in tmp do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8353
// begin ComExitBuilding ( i ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: LD_INT 142
8343: PPUSH
8344: LD_INT 71
8346: PPUSH
8347: CALL_OW 174
// end ;
8351: GO 8324
8353: POP
8354: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8355: LD_EXP 23
8359: PPUSH
8360: LD_INT 142
8362: PPUSH
8363: LD_INT 71
8365: PPUSH
8366: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8370: LD_EXP 24
8374: PPUSH
8375: LD_INT 142
8377: PPUSH
8378: LD_INT 71
8380: PPUSH
8381: CALL_OW 114
// AddComAttackUnit ( russianForces , Heike ) ;
8385: LD_EXP 23
8389: PPUSH
8390: LD_EXP 16
8394: PPUSH
8395: CALL_OW 175
// AddComAttackUnit ( russianTank , Heike ) ;
8399: LD_EXP 24
8403: PPUSH
8404: LD_EXP 16
8408: PPUSH
8409: CALL_OW 175
// end ;
8413: PPOPN 2
8415: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8416: LD_INT 22
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 21
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 58
8438: PUSH
8439: EMPTY
8440: LIST
8441: PUSH
8442: LD_INT 3
8444: PUSH
8445: LD_INT 24
8447: PUSH
8448: LD_INT 1000
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 91
8461: PUSH
8462: LD_EXP 17
8466: PUSH
8467: LD_INT 8
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 17
8491: PPUSH
8492: CALL_OW 302
8496: AND
8497: IFFALSE 8611
8499: GO 8501
8501: DISABLE
// begin enable ;
8502: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8503: LD_EXP 17
8507: PPUSH
8508: LD_INT 22
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 21
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 58
8530: PUSH
8531: EMPTY
8532: LIST
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: LD_INT 24
8539: PUSH
8540: LD_INT 1000
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 91
8553: PUSH
8554: LD_EXP 17
8558: PUSH
8559: LD_INT 8
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 69
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: PPUSH
8583: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8587: LD_EXP 17
8591: PPUSH
8592: LD_INT 52
8594: PPUSH
8595: LD_INT 90
8597: PPUSH
8598: CALL_OW 171
// AddComHold ( Olaf ) ;
8602: LD_EXP 17
8606: PPUSH
8607: CALL_OW 200
// end ;
8611: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8612: LD_EXP 12
8616: PUSH
8617: LD_INT 2
8619: PPUSH
8620: CALL_OW 302
8624: NOT
8625: AND
8626: PUSH
8627: LD_OWVAR 67
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: AND
8636: PUSH
8637: LD_EXP 13
8641: NOT
8642: AND
8643: IFFALSE 8660
8645: GO 8647
8647: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8648: LD_EXP 16
8652: PPUSH
8653: LD_STRING DH-prison-missing
8655: PPUSH
8656: CALL_OW 88
// end ;
8660: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8661: LD_EXP 12
8665: PUSH
8666: LD_INT 8
8668: PPUSH
8669: CALL_OW 302
8673: NOT
8674: AND
8675: PUSH
8676: LD_OWVAR 67
8680: PUSH
8681: LD_INT 1
8683: GREATER
8684: AND
8685: PUSH
8686: LD_EXP 13
8690: NOT
8691: AND
8692: IFFALSE 8709
8694: GO 8696
8696: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8697: LD_EXP 16
8701: PPUSH
8702: LD_STRING DH-prison-missing
8704: PPUSH
8705: CALL_OW 88
// end ;
8709: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8710: LD_EXP 12
8714: PUSH
8715: LD_INT 3
8717: PPUSH
8718: CALL_OW 302
8722: NOT
8723: AND
8724: PUSH
8725: LD_EXP 13
8729: NOT
8730: AND
8731: IFFALSE 8748
8733: GO 8735
8735: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8736: LD_EXP 16
8740: PPUSH
8741: LD_STRING DH-prison-missing-a
8743: PPUSH
8744: CALL_OW 88
// end ;
8748: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8749: LD_EXP 12
8753: PUSH
8754: LD_INT 10
8756: PPUSH
8757: CALL_OW 302
8761: NOT
8762: AND
8763: PUSH
8764: LD_EXP 13
8768: NOT
8769: AND
8770: IFFALSE 8787
8772: GO 8774
8774: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8775: LD_EXP 16
8779: PPUSH
8780: LD_STRING DH-prison-missing-a
8782: PPUSH
8783: CALL_OW 88
// end ;
8787: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8788: LD_EXP 13
8792: NOT
8793: PUSH
8794: LD_EXP 12
8798: AND
8799: PUSH
8800: LD_INT 2
8802: PPUSH
8803: LD_EXP 20
8807: PPUSH
8808: CALL_OW 292
8812: AND
8813: IFFALSE 8900
8815: GO 8817
8817: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8818: LD_EXP 20
8822: PPUSH
8823: LD_EXP 16
8827: PPUSH
8828: CALL_OW 119
// DialogueOn ;
8832: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8836: LD_EXP 20
8840: PPUSH
8841: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8845: LD_EXP 20
8849: PPUSH
8850: LD_STRING DK-prison-found
8852: PPUSH
8853: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8857: LD_EXP 16
8861: PPUSH
8862: LD_STRING DH-prison-found
8864: PPUSH
8865: CALL_OW 88
// DialogueOff ;
8869: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8873: LD_EXP 20
8877: PPUSH
8878: LD_INT 2
8880: PPUSH
8881: CALL_OW 235
// prisonFound := true ;
8885: LD_ADDR_EXP 13
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8893: LD_STRING O6_prison_out
8895: PPUSH
8896: CALL_OW 337
// end ;
8900: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8901: LD_EXP 16
8905: PPUSH
8906: CALL_OW 256
8910: PUSH
8911: LD_INT 500
8913: LESS
8914: IFFALSE 8927
8916: GO 8918
8918: DISABLE
// heikeHurt := true ;
8919: LD_ADDR_EXP 14
8923: PUSH
8924: LD_INT 1
8926: ST_TO_ADDR
8927: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8928: LD_INT 22
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 21
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: IFFALSE 9272
8958: GO 8960
8960: DISABLE
8961: LD_INT 0
8963: PPUSH
8964: PPUSH
8965: PPUSH
// begin uc_side := 3 ;
8966: LD_ADDR_OWVAR 20
8970: PUSH
8971: LD_INT 3
8973: ST_TO_ADDR
// uc_nation := 3 ;
8974: LD_ADDR_OWVAR 21
8978: PUSH
8979: LD_INT 3
8981: ST_TO_ADDR
// tmp := [ ] ;
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: EMPTY
8988: ST_TO_ADDR
// for i := 1 to 8 do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_INT 8
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9111
// begin PrepareHuman ( false , 1 , 4 ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_INT 4
9013: PPUSH
9014: CALL_OW 380
// un := CreateHuman ;
9018: LD_ADDR_VAR 0 3
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_INT 4
9035: PPUSH
9036: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9040: LD_VAR 0 3
9044: PPUSH
9045: LD_INT 158
9047: PPUSH
9048: LD_INT 80
9050: PPUSH
9051: LD_INT 0
9053: PPUSH
9054: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9058: LD_VAR 0 3
9062: PPUSH
9063: LD_INT 147
9065: PPUSH
9066: LD_INT 75
9068: PPUSH
9069: CALL_OW 111
// wait ( 0 0$1 ) ;
9073: LD_INT 35
9075: PPUSH
9076: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9080: LD_ADDR_VAR 0 2
9084: PUSH
9085: LD_VAR 0 2
9089: PPUSH
9090: LD_VAR 0 2
9094: PUSH
9095: LD_INT 1
9097: PLUS
9098: PPUSH
9099: LD_VAR 0 3
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// end ;
9109: GO 9002
9111: POP
9112: POP
// repeat wait ( 0 0$1 ) ;
9113: LD_INT 35
9115: PPUSH
9116: CALL_OW 67
// for i in tmp do
9120: LD_ADDR_VAR 0 1
9124: PUSH
9125: LD_VAR 0 2
9129: PUSH
9130: FOR_IN
9131: IFFALSE 9252
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_INT 3
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PPUSH
9148: CALL_OW 69
9152: PPUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 74
9162: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 1
9170: ARRAY
9171: PPUSH
9172: CALL_OW 250
9176: PPUSH
9177: LD_VAR 0 3
9181: PUSH
9182: LD_INT 1
9184: ARRAY
9185: PPUSH
9186: CALL_OW 251
9190: PPUSH
9191: CALL_OW 428
9195: IFFALSE 9236
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9197: LD_VAR 0 1
9201: PPUSH
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PPUSH
9211: CALL_OW 250
9215: PPUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: CALL_OW 251
9229: PPUSH
9230: CALL_OW 114
9234: GO 9250
// ComAttackUnit ( i , Heike ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_EXP 16
9245: PPUSH
9246: CALL_OW 115
// end ;
9250: GO 9130
9252: POP
9253: POP
// until IsDead ( Heike ) or not tmp ;
9254: LD_EXP 16
9258: PPUSH
9259: CALL_OW 301
9263: PUSH
9264: LD_VAR 0 2
9268: NOT
9269: OR
9270: IFFALSE 9113
// end ;
9272: PPOPN 3
9274: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9275: LD_EXP 12
9279: PUSH
9280: LD_EXP 16
9284: PPUSH
9285: CALL_OW 302
9289: AND
9290: PUSH
9291: LD_INT 1
9293: PPUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 50
9316: PUSH
9317: EMPTY
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 71
9329: PUSH
9330: LD_INT 0
9332: EQUAL
9333: AND
9334: IFFALSE 9664
9336: GO 9338
9338: DISABLE
9339: LD_INT 0
9341: PPUSH
// begin if not heikeHurt then
9342: LD_EXP 14
9346: NOT
9347: IFFALSE 9356
// SetAchievement ( ACH_INVINCIBLE ) ;
9349: LD_STRING ACH_INVINCIBLE
9351: PPUSH
9352: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9356: LD_ADDR_VAR 0 1
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 2
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 21
9373: PUSH
9374: LD_INT 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 50
9383: PUSH
9384: EMPTY
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: PPUSH
9392: CALL_OW 69
9396: ST_TO_ADDR
// if prisonFound then
9397: LD_EXP 13
9401: IFFALSE 9415
// AddMedal ( med1 , 1 ) else
9403: LD_STRING med1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 101
9413: GO 9426
// AddMedal ( med1 , - 1 ) ;
9415: LD_STRING med1
9417: PPUSH
9418: LD_INT 1
9420: NEG
9421: PPUSH
9422: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9426: LD_VAR 0 1
9430: PUSH
9431: LD_INT 3
9433: LESS
9434: PUSH
9435: LD_EXP 13
9439: NOT
9440: AND
9441: PUSH
9442: LD_VAR 0 1
9446: PUSH
9447: LD_INT 4
9449: LESS
9450: PUSH
9451: LD_EXP 13
9455: AND
9456: OR
9457: IFFALSE 9472
// AddMedal ( med2 , - 1 ) else
9459: LD_STRING med2
9461: PPUSH
9462: LD_INT 1
9464: NEG
9465: PPUSH
9466: CALL_OW 101
9470: GO 9482
// AddMedal ( med2 , 1 ) ;
9472: LD_STRING med2
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9482: LD_EXP 13
9486: PUSH
9487: LD_EXP 4
9491: AND
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: LD_INT 4
9500: GREATEREQUAL
9501: AND
9502: IFFALSE 9516
// AddMedal ( med3 , 1 ) else
9504: LD_STRING med3
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 101
9514: GO 9527
// AddMedal ( med3 , - 1 ) ;
9516: LD_STRING med3
9518: PPUSH
9519: LD_INT 1
9521: NEG
9522: PPUSH
9523: CALL_OW 101
// GiveMedals ( MAIN ) ;
9527: LD_STRING MAIN
9529: PPUSH
9530: CALL_OW 102
// RewardPeople ( tmp ) ;
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9543: LD_EXP 16
9547: PPUSH
9548: LD_STRING 01_Heike
9550: PPUSH
9551: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9555: LD_EXP 18
9559: PPUSH
9560: CALL_OW 302
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_VAR 0 1
9574: IN
9575: AND
9576: IFFALSE 9590
// SaveCharacters ( Givi , 01_Givi ) ;
9578: LD_EXP 18
9582: PPUSH
9583: LD_STRING 01_Givi
9585: PPUSH
9586: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9590: LD_EXP 19
9594: PPUSH
9595: CALL_OW 302
9599: PUSH
9600: LD_EXP 19
9604: PUSH
9605: LD_VAR 0 1
9609: IN
9610: AND
9611: IFFALSE 9625
// SaveCharacters ( Mike , 01_Mike ) ;
9613: LD_EXP 19
9617: PPUSH
9618: LD_STRING 01_Mike
9620: PPUSH
9621: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9625: LD_EXP 20
9629: PPUSH
9630: CALL_OW 302
9634: PUSH
9635: LD_EXP 20
9639: PUSH
9640: LD_VAR 0 1
9644: IN
9645: AND
9646: IFFALSE 9660
// SaveCharacters ( Kamil , 01_Kamil ) ;
9648: LD_EXP 20
9652: PPUSH
9653: LD_STRING 01_Kamil
9655: PPUSH
9656: CALL_OW 38
// YouWin ;
9660: CALL_OW 103
// end ; end_of_file
9664: PPOPN 1
9666: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9667: LD_VAR 0 1
9671: PUSH
9672: LD_EXP 16
9676: EQUAL
9677: IFFALSE 9686
// YouLost ( Heike ) ;
9679: LD_STRING Heike
9681: PPUSH
9682: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9686: LD_VAR 0 1
9690: PUSH
9691: LD_INT 22
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 25
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 69
9719: IN
9720: IFFALSE 9826
// begin if un in russianPatrol then
9722: LD_VAR 0 1
9726: PUSH
9727: LD_EXP 21
9731: IN
9732: IFFALSE 9750
// russianPatrol := russianPatrol diff un ;
9734: LD_ADDR_EXP 21
9738: PUSH
9739: LD_EXP 21
9743: PUSH
9744: LD_VAR 0 1
9748: DIFF
9749: ST_TO_ADDR
// if un in russianForestPatrol then
9750: LD_VAR 0 1
9754: PUSH
9755: LD_EXP 22
9759: IN
9760: IFFALSE 9778
// russianForestPatrol := russianForestPatrol diff un ;
9762: LD_ADDR_EXP 22
9766: PUSH
9767: LD_EXP 22
9771: PUSH
9772: LD_VAR 0 1
9776: DIFF
9777: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9778: LD_ADDR_EXP 5
9782: PUSH
9783: LD_EXP 5
9787: PPUSH
9788: LD_EXP 5
9792: PUSH
9793: LD_INT 1
9795: PLUS
9796: PPUSH
9797: LD_VAR 0 1
9801: PPUSH
9802: CALL_OW 250
9806: PUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 251
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 1
9825: ST_TO_ADDR
// end ; end ;
9826: PPOPN 1
9828: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9829: LD_VAR 0 1
9833: PUSH
9834: LD_EXP 16
9838: EQUAL
9839: IFFALSE 9848
// YouLost ( Heike ) ;
9841: LD_STRING Heike
9843: PPUSH
9844: CALL_OW 104
// end ;
9848: PPOPN 1
9850: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9851: LD_VAR 0 1
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: PUSH
9860: LD_VAR 0 2
9864: PUSH
9865: LD_INT 5
9867: EQUAL
9868: AND
9869: IFFALSE 9878
// YouLost ( FriendlyFire ) ;
9871: LD_STRING FriendlyFire
9873: PPUSH
9874: CALL_OW 104
// end ;
9878: PPOPN 2
9880: END
// every 0 0$1 trigger GetLives ( Olaf ) < 250 do
9881: LD_EXP 17
9885: PPUSH
9886: CALL_OW 256
9890: PUSH
9891: LD_INT 250
9893: LESS
9894: IFFALSE 9906
9896: GO 9898
9898: DISABLE
// YouLost ( Olaf ) ; end_of_file
9899: LD_STRING Olaf
9901: PPUSH
9902: CALL_OW 104
9906: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9907: LD_VAR 0 2
9911: PUSH
9912: LD_INT 100
9914: EQUAL
9915: IFFALSE 10864
// begin if not StreamModeActive then
9917: LD_EXP 26
9921: NOT
9922: IFFALSE 9932
// StreamModeActive := true ;
9924: LD_ADDR_EXP 26
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// if p3 = 0 then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 0
9939: EQUAL
9940: IFFALSE 9946
// InitStreamMode ;
9942: CALL 11022 0 0
// if p3 = 1 then
9946: LD_VAR 0 3
9950: PUSH
9951: LD_INT 1
9953: EQUAL
9954: IFFALSE 9964
// sRocket := true ;
9956: LD_ADDR_EXP 31
9960: PUSH
9961: LD_INT 1
9963: ST_TO_ADDR
// if p3 = 2 then
9964: LD_VAR 0 3
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: IFFALSE 9982
// sSpeed := true ;
9974: LD_ADDR_EXP 30
9978: PUSH
9979: LD_INT 1
9981: ST_TO_ADDR
// if p3 = 3 then
9982: LD_VAR 0 3
9986: PUSH
9987: LD_INT 3
9989: EQUAL
9990: IFFALSE 10000
// sEngine := true ;
9992: LD_ADDR_EXP 32
9996: PUSH
9997: LD_INT 1
9999: ST_TO_ADDR
// if p3 = 4 then
10000: LD_VAR 0 3
10004: PUSH
10005: LD_INT 4
10007: EQUAL
10008: IFFALSE 10018
// sSpec := true ;
10010: LD_ADDR_EXP 29
10014: PUSH
10015: LD_INT 1
10017: ST_TO_ADDR
// if p3 = 5 then
10018: LD_VAR 0 3
10022: PUSH
10023: LD_INT 5
10025: EQUAL
10026: IFFALSE 10036
// sLevel := true ;
10028: LD_ADDR_EXP 33
10032: PUSH
10033: LD_INT 1
10035: ST_TO_ADDR
// if p3 = 6 then
10036: LD_VAR 0 3
10040: PUSH
10041: LD_INT 6
10043: EQUAL
10044: IFFALSE 10054
// sArmoury := true ;
10046: LD_ADDR_EXP 34
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// if p3 = 7 then
10054: LD_VAR 0 3
10058: PUSH
10059: LD_INT 7
10061: EQUAL
10062: IFFALSE 10072
// sRadar := true ;
10064: LD_ADDR_EXP 35
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// if p3 = 8 then
10072: LD_VAR 0 3
10076: PUSH
10077: LD_INT 8
10079: EQUAL
10080: IFFALSE 10090
// sBunker := true ;
10082: LD_ADDR_EXP 36
10086: PUSH
10087: LD_INT 1
10089: ST_TO_ADDR
// if p3 = 9 then
10090: LD_VAR 0 3
10094: PUSH
10095: LD_INT 9
10097: EQUAL
10098: IFFALSE 10108
// sHack := true ;
10100: LD_ADDR_EXP 37
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// if p3 = 10 then
10108: LD_VAR 0 3
10112: PUSH
10113: LD_INT 10
10115: EQUAL
10116: IFFALSE 10126
// sFire := true ;
10118: LD_ADDR_EXP 38
10122: PUSH
10123: LD_INT 1
10125: ST_TO_ADDR
// if p3 = 11 then
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 11
10133: EQUAL
10134: IFFALSE 10144
// sRefresh := true ;
10136: LD_ADDR_EXP 39
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// if p3 = 12 then
10144: LD_VAR 0 3
10148: PUSH
10149: LD_INT 12
10151: EQUAL
10152: IFFALSE 10162
// sExp := true ;
10154: LD_ADDR_EXP 40
10158: PUSH
10159: LD_INT 1
10161: ST_TO_ADDR
// if p3 = 13 then
10162: LD_VAR 0 3
10166: PUSH
10167: LD_INT 13
10169: EQUAL
10170: IFFALSE 10180
// sDepot := true ;
10172: LD_ADDR_EXP 41
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// if p3 = 14 then
10180: LD_VAR 0 3
10184: PUSH
10185: LD_INT 14
10187: EQUAL
10188: IFFALSE 10198
// sFlag := true ;
10190: LD_ADDR_EXP 42
10194: PUSH
10195: LD_INT 1
10197: ST_TO_ADDR
// if p3 = 15 then
10198: LD_VAR 0 3
10202: PUSH
10203: LD_INT 15
10205: EQUAL
10206: IFFALSE 10216
// sKamikadze := true ;
10208: LD_ADDR_EXP 50
10212: PUSH
10213: LD_INT 1
10215: ST_TO_ADDR
// if p3 = 16 then
10216: LD_VAR 0 3
10220: PUSH
10221: LD_INT 16
10223: EQUAL
10224: IFFALSE 10234
// sTroll := true ;
10226: LD_ADDR_EXP 51
10230: PUSH
10231: LD_INT 1
10233: ST_TO_ADDR
// if p3 = 17 then
10234: LD_VAR 0 3
10238: PUSH
10239: LD_INT 17
10241: EQUAL
10242: IFFALSE 10252
// sSlow := true ;
10244: LD_ADDR_EXP 52
10248: PUSH
10249: LD_INT 1
10251: ST_TO_ADDR
// if p3 = 18 then
10252: LD_VAR 0 3
10256: PUSH
10257: LD_INT 18
10259: EQUAL
10260: IFFALSE 10270
// sLack := true ;
10262: LD_ADDR_EXP 53
10266: PUSH
10267: LD_INT 1
10269: ST_TO_ADDR
// if p3 = 19 then
10270: LD_VAR 0 3
10274: PUSH
10275: LD_INT 19
10277: EQUAL
10278: IFFALSE 10288
// sTank := true ;
10280: LD_ADDR_EXP 55
10284: PUSH
10285: LD_INT 1
10287: ST_TO_ADDR
// if p3 = 20 then
10288: LD_VAR 0 3
10292: PUSH
10293: LD_INT 20
10295: EQUAL
10296: IFFALSE 10306
// sRemote := true ;
10298: LD_ADDR_EXP 56
10302: PUSH
10303: LD_INT 1
10305: ST_TO_ADDR
// if p3 = 21 then
10306: LD_VAR 0 3
10310: PUSH
10311: LD_INT 21
10313: EQUAL
10314: IFFALSE 10324
// sPowell := true ;
10316: LD_ADDR_EXP 57
10320: PUSH
10321: LD_INT 1
10323: ST_TO_ADDR
// if p3 = 22 then
10324: LD_VAR 0 3
10328: PUSH
10329: LD_INT 22
10331: EQUAL
10332: IFFALSE 10342
// sTeleport := true ;
10334: LD_ADDR_EXP 60
10338: PUSH
10339: LD_INT 1
10341: ST_TO_ADDR
// if p3 = 23 then
10342: LD_VAR 0 3
10346: PUSH
10347: LD_INT 23
10349: EQUAL
10350: IFFALSE 10360
// sOilTower := true ;
10352: LD_ADDR_EXP 62
10356: PUSH
10357: LD_INT 1
10359: ST_TO_ADDR
// if p3 = 24 then
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 24
10367: EQUAL
10368: IFFALSE 10378
// sShovel := true ;
10370: LD_ADDR_EXP 63
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// if p3 = 25 then
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 25
10385: EQUAL
10386: IFFALSE 10396
// sSheik := true ;
10388: LD_ADDR_EXP 64
10392: PUSH
10393: LD_INT 1
10395: ST_TO_ADDR
// if p3 = 26 then
10396: LD_VAR 0 3
10400: PUSH
10401: LD_INT 26
10403: EQUAL
10404: IFFALSE 10414
// sEarthquake := true ;
10406: LD_ADDR_EXP 66
10410: PUSH
10411: LD_INT 1
10413: ST_TO_ADDR
// if p3 = 27 then
10414: LD_VAR 0 3
10418: PUSH
10419: LD_INT 27
10421: EQUAL
10422: IFFALSE 10432
// sAI := true ;
10424: LD_ADDR_EXP 67
10428: PUSH
10429: LD_INT 1
10431: ST_TO_ADDR
// if p3 = 28 then
10432: LD_VAR 0 3
10436: PUSH
10437: LD_INT 28
10439: EQUAL
10440: IFFALSE 10450
// sCargo := true ;
10442: LD_ADDR_EXP 70
10446: PUSH
10447: LD_INT 1
10449: ST_TO_ADDR
// if p3 = 29 then
10450: LD_VAR 0 3
10454: PUSH
10455: LD_INT 29
10457: EQUAL
10458: IFFALSE 10468
// sDLaser := true ;
10460: LD_ADDR_EXP 71
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// if p3 = 30 then
10468: LD_VAR 0 3
10472: PUSH
10473: LD_INT 30
10475: EQUAL
10476: IFFALSE 10486
// sExchange := true ;
10478: LD_ADDR_EXP 72
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// if p3 = 31 then
10486: LD_VAR 0 3
10490: PUSH
10491: LD_INT 31
10493: EQUAL
10494: IFFALSE 10504
// sFac := true ;
10496: LD_ADDR_EXP 73
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// if p3 = 32 then
10504: LD_VAR 0 3
10508: PUSH
10509: LD_INT 32
10511: EQUAL
10512: IFFALSE 10522
// sPower := true ;
10514: LD_ADDR_EXP 74
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if p3 = 33 then
10522: LD_VAR 0 3
10526: PUSH
10527: LD_INT 33
10529: EQUAL
10530: IFFALSE 10540
// sRandom := true ;
10532: LD_ADDR_EXP 75
10536: PUSH
10537: LD_INT 1
10539: ST_TO_ADDR
// if p3 = 34 then
10540: LD_VAR 0 3
10544: PUSH
10545: LD_INT 34
10547: EQUAL
10548: IFFALSE 10558
// sShield := true ;
10550: LD_ADDR_EXP 76
10554: PUSH
10555: LD_INT 1
10557: ST_TO_ADDR
// if p3 = 35 then
10558: LD_VAR 0 3
10562: PUSH
10563: LD_INT 35
10565: EQUAL
10566: IFFALSE 10576
// sTime := true ;
10568: LD_ADDR_EXP 77
10572: PUSH
10573: LD_INT 1
10575: ST_TO_ADDR
// if p3 = 36 then
10576: LD_VAR 0 3
10580: PUSH
10581: LD_INT 36
10583: EQUAL
10584: IFFALSE 10594
// sTools := true ;
10586: LD_ADDR_EXP 78
10590: PUSH
10591: LD_INT 1
10593: ST_TO_ADDR
// if p3 = 101 then
10594: LD_VAR 0 3
10598: PUSH
10599: LD_INT 101
10601: EQUAL
10602: IFFALSE 10612
// sSold := true ;
10604: LD_ADDR_EXP 43
10608: PUSH
10609: LD_INT 1
10611: ST_TO_ADDR
// if p3 = 102 then
10612: LD_VAR 0 3
10616: PUSH
10617: LD_INT 102
10619: EQUAL
10620: IFFALSE 10630
// sDiff := true ;
10622: LD_ADDR_EXP 44
10626: PUSH
10627: LD_INT 1
10629: ST_TO_ADDR
// if p3 = 103 then
10630: LD_VAR 0 3
10634: PUSH
10635: LD_INT 103
10637: EQUAL
10638: IFFALSE 10648
// sFog := true ;
10640: LD_ADDR_EXP 47
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// if p3 = 104 then
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 104
10655: EQUAL
10656: IFFALSE 10666
// sReset := true ;
10658: LD_ADDR_EXP 48
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// if p3 = 105 then
10666: LD_VAR 0 3
10670: PUSH
10671: LD_INT 105
10673: EQUAL
10674: IFFALSE 10684
// sSun := true ;
10676: LD_ADDR_EXP 49
10680: PUSH
10681: LD_INT 1
10683: ST_TO_ADDR
// if p3 = 106 then
10684: LD_VAR 0 3
10688: PUSH
10689: LD_INT 106
10691: EQUAL
10692: IFFALSE 10702
// sTiger := true ;
10694: LD_ADDR_EXP 45
10698: PUSH
10699: LD_INT 1
10701: ST_TO_ADDR
// if p3 = 107 then
10702: LD_VAR 0 3
10706: PUSH
10707: LD_INT 107
10709: EQUAL
10710: IFFALSE 10720
// sBomb := true ;
10712: LD_ADDR_EXP 46
10716: PUSH
10717: LD_INT 1
10719: ST_TO_ADDR
// if p3 = 108 then
10720: LD_VAR 0 3
10724: PUSH
10725: LD_INT 108
10727: EQUAL
10728: IFFALSE 10738
// sWound := true ;
10730: LD_ADDR_EXP 54
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// if p3 = 109 then
10738: LD_VAR 0 3
10742: PUSH
10743: LD_INT 109
10745: EQUAL
10746: IFFALSE 10756
// sBetray := true ;
10748: LD_ADDR_EXP 58
10752: PUSH
10753: LD_INT 1
10755: ST_TO_ADDR
// if p3 = 110 then
10756: LD_VAR 0 3
10760: PUSH
10761: LD_INT 110
10763: EQUAL
10764: IFFALSE 10774
// sContamin := true ;
10766: LD_ADDR_EXP 59
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// if p3 = 111 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 111
10781: EQUAL
10782: IFFALSE 10792
// sOil := true ;
10784: LD_ADDR_EXP 61
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// if p3 = 112 then
10792: LD_VAR 0 3
10796: PUSH
10797: LD_INT 112
10799: EQUAL
10800: IFFALSE 10810
// sStu := true ;
10802: LD_ADDR_EXP 65
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// if p3 = 113 then
10810: LD_VAR 0 3
10814: PUSH
10815: LD_INT 113
10817: EQUAL
10818: IFFALSE 10828
// sBazooka := true ;
10820: LD_ADDR_EXP 68
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if p3 = 114 then
10828: LD_VAR 0 3
10832: PUSH
10833: LD_INT 114
10835: EQUAL
10836: IFFALSE 10846
// sMortar := true ;
10838: LD_ADDR_EXP 69
10842: PUSH
10843: LD_INT 1
10845: ST_TO_ADDR
// if p3 = 115 then
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 115
10853: EQUAL
10854: IFFALSE 10864
// sRanger := true ;
10856: LD_ADDR_EXP 79
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
// end ; if p2 = 101 then
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 101
10871: EQUAL
10872: IFFALSE 11000
// begin case p3 of 1 :
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 1
10881: DOUBLE
10882: EQUAL
10883: IFTRUE 10887
10885: GO 10894
10887: POP
// hHackUnlimitedResources ; 2 :
10888: CALL 22035 0 0
10892: GO 11000
10894: LD_INT 2
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10909
10902: POP
// hHackSetLevel10 ; 3 :
10903: CALL 22168 0 0
10907: GO 11000
10909: LD_INT 3
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10924
10917: POP
// hHackSetLevel10YourUnits ; 4 :
10918: CALL 22253 0 0
10922: GO 11000
10924: LD_INT 4
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 10939
10932: POP
// hHackInvincible ; 5 :
10933: CALL 22701 0 0
10937: GO 11000
10939: LD_INT 5
10941: DOUBLE
10942: EQUAL
10943: IFTRUE 10947
10945: GO 10954
10947: POP
// hHackInvisible ; 6 :
10948: CALL 22812 0 0
10952: GO 11000
10954: LD_INT 6
10956: DOUBLE
10957: EQUAL
10958: IFTRUE 10962
10960: GO 10969
10962: POP
// hHackChangeYourSide ; 7 :
10963: CALL 22869 0 0
10967: GO 11000
10969: LD_INT 7
10971: DOUBLE
10972: EQUAL
10973: IFTRUE 10977
10975: GO 10984
10977: POP
// hHackChangeUnitSide ; 8 :
10978: CALL 22911 0 0
10982: GO 11000
10984: LD_INT 8
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 10999
10992: POP
// hHackFog ; end ;
10993: CALL 23012 0 0
10997: GO 11000
10999: POP
// end ; end ;
11000: PPOPN 6
11002: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11003: GO 11005
11005: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11006: LD_STRING initStreamRollete();
11008: PPUSH
11009: CALL_OW 559
// InitStreamMode ;
11013: CALL 11022 0 0
// DefineStreamItems ( ) ;
11017: CALL 11462 0 0
// end ;
11021: END
// function InitStreamMode ; begin
11022: LD_INT 0
11024: PPUSH
// streamModeActive := false ;
11025: LD_ADDR_EXP 26
11029: PUSH
11030: LD_INT 0
11032: ST_TO_ADDR
// normalCounter := 36 ;
11033: LD_ADDR_EXP 27
11037: PUSH
11038: LD_INT 36
11040: ST_TO_ADDR
// hardcoreCounter := 16 ;
11041: LD_ADDR_EXP 28
11045: PUSH
11046: LD_INT 16
11048: ST_TO_ADDR
// sRocket := false ;
11049: LD_ADDR_EXP 31
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// sSpeed := false ;
11057: LD_ADDR_EXP 30
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// sEngine := false ;
11065: LD_ADDR_EXP 32
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// sSpec := false ;
11073: LD_ADDR_EXP 29
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sLevel := false ;
11081: LD_ADDR_EXP 33
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sArmoury := false ;
11089: LD_ADDR_EXP 34
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sRadar := false ;
11097: LD_ADDR_EXP 35
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sBunker := false ;
11105: LD_ADDR_EXP 36
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sHack := false ;
11113: LD_ADDR_EXP 37
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sFire := false ;
11121: LD_ADDR_EXP 38
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sRefresh := false ;
11129: LD_ADDR_EXP 39
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sExp := false ;
11137: LD_ADDR_EXP 40
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sDepot := false ;
11145: LD_ADDR_EXP 41
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sFlag := false ;
11153: LD_ADDR_EXP 42
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sKamikadze := false ;
11161: LD_ADDR_EXP 50
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sTroll := false ;
11169: LD_ADDR_EXP 51
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sSlow := false ;
11177: LD_ADDR_EXP 52
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sLack := false ;
11185: LD_ADDR_EXP 53
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sTank := false ;
11193: LD_ADDR_EXP 55
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sRemote := false ;
11201: LD_ADDR_EXP 56
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sPowell := false ;
11209: LD_ADDR_EXP 57
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sTeleport := false ;
11217: LD_ADDR_EXP 60
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sOilTower := false ;
11225: LD_ADDR_EXP 62
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sShovel := false ;
11233: LD_ADDR_EXP 63
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sSheik := false ;
11241: LD_ADDR_EXP 64
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sEarthquake := false ;
11249: LD_ADDR_EXP 66
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sAI := false ;
11257: LD_ADDR_EXP 67
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sCargo := false ;
11265: LD_ADDR_EXP 70
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sDLaser := false ;
11273: LD_ADDR_EXP 71
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sExchange := false ;
11281: LD_ADDR_EXP 72
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sFac := false ;
11289: LD_ADDR_EXP 73
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sPower := false ;
11297: LD_ADDR_EXP 74
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sRandom := false ;
11305: LD_ADDR_EXP 75
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sShield := false ;
11313: LD_ADDR_EXP 76
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sTime := false ;
11321: LD_ADDR_EXP 77
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sTools := false ;
11329: LD_ADDR_EXP 78
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sSold := false ;
11337: LD_ADDR_EXP 43
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sDiff := false ;
11345: LD_ADDR_EXP 44
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sFog := false ;
11353: LD_ADDR_EXP 47
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sReset := false ;
11361: LD_ADDR_EXP 48
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sSun := false ;
11369: LD_ADDR_EXP 49
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sTiger := false ;
11377: LD_ADDR_EXP 45
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sBomb := false ;
11385: LD_ADDR_EXP 46
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sWound := false ;
11393: LD_ADDR_EXP 54
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sBetray := false ;
11401: LD_ADDR_EXP 58
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sContamin := false ;
11409: LD_ADDR_EXP 59
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sOil := false ;
11417: LD_ADDR_EXP 61
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sStu := false ;
11425: LD_ADDR_EXP 65
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sBazooka := false ;
11433: LD_ADDR_EXP 68
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sMortar := false ;
11441: LD_ADDR_EXP 69
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sRanger := false ;
11449: LD_ADDR_EXP 79
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// end ;
11457: LD_VAR 0 1
11461: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11462: LD_INT 0
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
// result := [ ] ;
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: EMPTY
11475: ST_TO_ADDR
// if campaign_id = 1 then
11476: LD_OWVAR 69
11480: PUSH
11481: LD_INT 1
11483: EQUAL
11484: IFFALSE 14422
// begin case mission_number of 1 :
11486: LD_OWVAR 70
11490: PUSH
11491: LD_INT 1
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11563
11499: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: LD_INT 4
11510: PUSH
11511: LD_INT 11
11513: PUSH
11514: LD_INT 12
11516: PUSH
11517: LD_INT 15
11519: PUSH
11520: LD_INT 16
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 23
11528: PUSH
11529: LD_INT 26
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 101
11545: PUSH
11546: LD_INT 102
11548: PUSH
11549: LD_INT 106
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: ST_TO_ADDR
11561: GO 14420
11563: LD_INT 2
11565: DOUBLE
11566: EQUAL
11567: IFTRUE 11571
11569: GO 11643
11571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 4
11582: PUSH
11583: LD_INT 11
11585: PUSH
11586: LD_INT 12
11588: PUSH
11589: LD_INT 15
11591: PUSH
11592: LD_INT 16
11594: PUSH
11595: LD_INT 22
11597: PUSH
11598: LD_INT 23
11600: PUSH
11601: LD_INT 26
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 101
11617: PUSH
11618: LD_INT 102
11620: PUSH
11621: LD_INT 105
11623: PUSH
11624: LD_INT 106
11626: PUSH
11627: LD_INT 108
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: ST_TO_ADDR
11641: GO 14420
11643: LD_INT 3
11645: DOUBLE
11646: EQUAL
11647: IFTRUE 11651
11649: GO 11727
11651: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11652: LD_ADDR_VAR 0 1
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 4
11662: PUSH
11663: LD_INT 5
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 15
11674: PUSH
11675: LD_INT 16
11677: PUSH
11678: LD_INT 22
11680: PUSH
11681: LD_INT 26
11683: PUSH
11684: LD_INT 36
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 101
11701: PUSH
11702: LD_INT 102
11704: PUSH
11705: LD_INT 105
11707: PUSH
11708: LD_INT 106
11710: PUSH
11711: LD_INT 108
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: ST_TO_ADDR
11725: GO 14420
11727: LD_INT 4
11729: DOUBLE
11730: EQUAL
11731: IFTRUE 11735
11733: GO 11819
11735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11736: LD_ADDR_VAR 0 1
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: LD_INT 5
11749: PUSH
11750: LD_INT 8
11752: PUSH
11753: LD_INT 11
11755: PUSH
11756: LD_INT 12
11758: PUSH
11759: LD_INT 15
11761: PUSH
11762: LD_INT 16
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 23
11770: PUSH
11771: LD_INT 26
11773: PUSH
11774: LD_INT 36
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 101
11793: PUSH
11794: LD_INT 102
11796: PUSH
11797: LD_INT 105
11799: PUSH
11800: LD_INT 106
11802: PUSH
11803: LD_INT 108
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
11817: GO 14420
11819: LD_INT 5
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11927
11827: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 4
11838: PUSH
11839: LD_INT 5
11841: PUSH
11842: LD_INT 6
11844: PUSH
11845: LD_INT 8
11847: PUSH
11848: LD_INT 11
11850: PUSH
11851: LD_INT 12
11853: PUSH
11854: LD_INT 15
11856: PUSH
11857: LD_INT 16
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_INT 23
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 26
11871: PUSH
11872: LD_INT 36
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 101
11893: PUSH
11894: LD_INT 102
11896: PUSH
11897: LD_INT 105
11899: PUSH
11900: LD_INT 106
11902: PUSH
11903: LD_INT 108
11905: PUSH
11906: LD_INT 109
11908: PUSH
11909: LD_INT 112
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: ST_TO_ADDR
11925: GO 14420
11927: LD_INT 6
11929: DOUBLE
11930: EQUAL
11931: IFTRUE 11935
11933: GO 12055
11935: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: LD_INT 6
11952: PUSH
11953: LD_INT 8
11955: PUSH
11956: LD_INT 11
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 15
11964: PUSH
11965: LD_INT 16
11967: PUSH
11968: LD_INT 20
11970: PUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 22
11976: PUSH
11977: LD_INT 23
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 26
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 31
11991: PUSH
11992: LD_INT 32
11994: PUSH
11995: LD_INT 36
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 102
12024: PUSH
12025: LD_INT 105
12027: PUSH
12028: LD_INT 106
12030: PUSH
12031: LD_INT 108
12033: PUSH
12034: LD_INT 109
12036: PUSH
12037: LD_INT 112
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: ST_TO_ADDR
12053: GO 14420
12055: LD_INT 7
12057: DOUBLE
12058: EQUAL
12059: IFTRUE 12063
12061: GO 12163
12063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: LD_INT 7
12080: PUSH
12081: LD_INT 11
12083: PUSH
12084: LD_INT 12
12086: PUSH
12087: LD_INT 15
12089: PUSH
12090: LD_INT 16
12092: PUSH
12093: LD_INT 20
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 23
12104: PUSH
12105: LD_INT 25
12107: PUSH
12108: LD_INT 26
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 101
12129: PUSH
12130: LD_INT 102
12132: PUSH
12133: LD_INT 103
12135: PUSH
12136: LD_INT 105
12138: PUSH
12139: LD_INT 106
12141: PUSH
12142: LD_INT 108
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: ST_TO_ADDR
12161: GO 14420
12163: LD_INT 8
12165: DOUBLE
12166: EQUAL
12167: IFTRUE 12171
12169: GO 12299
12171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12172: LD_ADDR_VAR 0 1
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: LD_INT 4
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: LD_INT 6
12188: PUSH
12189: LD_INT 7
12191: PUSH
12192: LD_INT 8
12194: PUSH
12195: LD_INT 11
12197: PUSH
12198: LD_INT 12
12200: PUSH
12201: LD_INT 15
12203: PUSH
12204: LD_INT 16
12206: PUSH
12207: LD_INT 20
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 26
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 31
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 36
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 101
12261: PUSH
12262: LD_INT 102
12264: PUSH
12265: LD_INT 103
12267: PUSH
12268: LD_INT 105
12270: PUSH
12271: LD_INT 106
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 112
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: ST_TO_ADDR
12297: GO 14420
12299: LD_INT 9
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12443
12307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12308: LD_ADDR_VAR 0 1
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: LD_INT 5
12321: PUSH
12322: LD_INT 6
12324: PUSH
12325: LD_INT 7
12327: PUSH
12328: LD_INT 8
12330: PUSH
12331: LD_INT 11
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: LD_INT 15
12339: PUSH
12340: LD_INT 16
12342: PUSH
12343: LD_INT 20
12345: PUSH
12346: LD_INT 21
12348: PUSH
12349: LD_INT 22
12351: PUSH
12352: LD_INT 23
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 26
12360: PUSH
12361: LD_INT 28
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 31
12369: PUSH
12370: LD_INT 32
12372: PUSH
12373: LD_INT 36
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 101
12401: PUSH
12402: LD_INT 102
12404: PUSH
12405: LD_INT 103
12407: PUSH
12408: LD_INT 105
12410: PUSH
12411: LD_INT 106
12413: PUSH
12414: LD_INT 108
12416: PUSH
12417: LD_INT 109
12419: PUSH
12420: LD_INT 112
12422: PUSH
12423: LD_INT 114
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: ST_TO_ADDR
12441: GO 14420
12443: LD_INT 10
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12635
12451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12452: LD_ADDR_VAR 0 1
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 4
12462: PUSH
12463: LD_INT 5
12465: PUSH
12466: LD_INT 6
12468: PUSH
12469: LD_INT 7
12471: PUSH
12472: LD_INT 8
12474: PUSH
12475: LD_INT 9
12477: PUSH
12478: LD_INT 10
12480: PUSH
12481: LD_INT 11
12483: PUSH
12484: LD_INT 12
12486: PUSH
12487: LD_INT 13
12489: PUSH
12490: LD_INT 14
12492: PUSH
12493: LD_INT 15
12495: PUSH
12496: LD_INT 16
12498: PUSH
12499: LD_INT 17
12501: PUSH
12502: LD_INT 18
12504: PUSH
12505: LD_INT 19
12507: PUSH
12508: LD_INT 20
12510: PUSH
12511: LD_INT 21
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_INT 23
12519: PUSH
12520: LD_INT 24
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 26
12528: PUSH
12529: LD_INT 28
12531: PUSH
12532: LD_INT 30
12534: PUSH
12535: LD_INT 31
12537: PUSH
12538: LD_INT 32
12540: PUSH
12541: LD_INT 36
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 101
12577: PUSH
12578: LD_INT 102
12580: PUSH
12581: LD_INT 103
12583: PUSH
12584: LD_INT 104
12586: PUSH
12587: LD_INT 105
12589: PUSH
12590: LD_INT 106
12592: PUSH
12593: LD_INT 107
12595: PUSH
12596: LD_INT 108
12598: PUSH
12599: LD_INT 109
12601: PUSH
12602: LD_INT 110
12604: PUSH
12605: LD_INT 111
12607: PUSH
12608: LD_INT 112
12610: PUSH
12611: LD_INT 114
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: ST_TO_ADDR
12633: GO 14420
12635: LD_INT 11
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12835
12643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12644: LD_ADDR_VAR 0 1
12648: PUSH
12649: LD_INT 2
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: LD_INT 4
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: LD_INT 6
12663: PUSH
12664: LD_INT 7
12666: PUSH
12667: LD_INT 8
12669: PUSH
12670: LD_INT 9
12672: PUSH
12673: LD_INT 10
12675: PUSH
12676: LD_INT 11
12678: PUSH
12679: LD_INT 12
12681: PUSH
12682: LD_INT 13
12684: PUSH
12685: LD_INT 14
12687: PUSH
12688: LD_INT 15
12690: PUSH
12691: LD_INT 16
12693: PUSH
12694: LD_INT 17
12696: PUSH
12697: LD_INT 18
12699: PUSH
12700: LD_INT 19
12702: PUSH
12703: LD_INT 20
12705: PUSH
12706: LD_INT 21
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_INT 23
12714: PUSH
12715: LD_INT 24
12717: PUSH
12718: LD_INT 25
12720: PUSH
12721: LD_INT 26
12723: PUSH
12724: LD_INT 28
12726: PUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: LD_INT 32
12735: PUSH
12736: LD_INT 34
12738: PUSH
12739: LD_INT 36
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 101
12777: PUSH
12778: LD_INT 102
12780: PUSH
12781: LD_INT 103
12783: PUSH
12784: LD_INT 104
12786: PUSH
12787: LD_INT 105
12789: PUSH
12790: LD_INT 106
12792: PUSH
12793: LD_INT 107
12795: PUSH
12796: LD_INT 108
12798: PUSH
12799: LD_INT 109
12801: PUSH
12802: LD_INT 110
12804: PUSH
12805: LD_INT 111
12807: PUSH
12808: LD_INT 112
12810: PUSH
12811: LD_INT 114
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: ST_TO_ADDR
12833: GO 14420
12835: LD_INT 12
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 13051
12843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 4
12860: PUSH
12861: LD_INT 5
12863: PUSH
12864: LD_INT 6
12866: PUSH
12867: LD_INT 7
12869: PUSH
12870: LD_INT 8
12872: PUSH
12873: LD_INT 9
12875: PUSH
12876: LD_INT 10
12878: PUSH
12879: LD_INT 11
12881: PUSH
12882: LD_INT 12
12884: PUSH
12885: LD_INT 13
12887: PUSH
12888: LD_INT 14
12890: PUSH
12891: LD_INT 15
12893: PUSH
12894: LD_INT 16
12896: PUSH
12897: LD_INT 17
12899: PUSH
12900: LD_INT 18
12902: PUSH
12903: LD_INT 19
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 24
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: LD_INT 27
12929: PUSH
12930: LD_INT 28
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 31
12938: PUSH
12939: LD_INT 32
12941: PUSH
12942: LD_INT 33
12944: PUSH
12945: LD_INT 34
12947: PUSH
12948: LD_INT 36
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 101
12989: PUSH
12990: LD_INT 102
12992: PUSH
12993: LD_INT 103
12995: PUSH
12996: LD_INT 104
12998: PUSH
12999: LD_INT 105
13001: PUSH
13002: LD_INT 106
13004: PUSH
13005: LD_INT 107
13007: PUSH
13008: LD_INT 108
13010: PUSH
13011: LD_INT 109
13013: PUSH
13014: LD_INT 110
13016: PUSH
13017: LD_INT 111
13019: PUSH
13020: LD_INT 112
13022: PUSH
13023: LD_INT 113
13025: PUSH
13026: LD_INT 114
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: ST_TO_ADDR
13049: GO 14420
13051: LD_INT 13
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13255
13059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: LD_INT 4
13076: PUSH
13077: LD_INT 5
13079: PUSH
13080: LD_INT 8
13082: PUSH
13083: LD_INT 9
13085: PUSH
13086: LD_INT 10
13088: PUSH
13089: LD_INT 11
13091: PUSH
13092: LD_INT 12
13094: PUSH
13095: LD_INT 14
13097: PUSH
13098: LD_INT 15
13100: PUSH
13101: LD_INT 16
13103: PUSH
13104: LD_INT 17
13106: PUSH
13107: LD_INT 18
13109: PUSH
13110: LD_INT 19
13112: PUSH
13113: LD_INT 20
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 22
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 24
13127: PUSH
13128: LD_INT 25
13130: PUSH
13131: LD_INT 26
13133: PUSH
13134: LD_INT 27
13136: PUSH
13137: LD_INT 28
13139: PUSH
13140: LD_INT 30
13142: PUSH
13143: LD_INT 31
13145: PUSH
13146: LD_INT 32
13148: PUSH
13149: LD_INT 33
13151: PUSH
13152: LD_INT 34
13154: PUSH
13155: LD_INT 36
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 101
13193: PUSH
13194: LD_INT 102
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 104
13202: PUSH
13203: LD_INT 105
13205: PUSH
13206: LD_INT 106
13208: PUSH
13209: LD_INT 107
13211: PUSH
13212: LD_INT 108
13214: PUSH
13215: LD_INT 109
13217: PUSH
13218: LD_INT 110
13220: PUSH
13221: LD_INT 111
13223: PUSH
13224: LD_INT 112
13226: PUSH
13227: LD_INT 113
13229: PUSH
13230: LD_INT 114
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
13253: GO 14420
13255: LD_INT 14
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13475
13263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 6
13286: PUSH
13287: LD_INT 7
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 13
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: LD_INT 15
13313: PUSH
13314: LD_INT 16
13316: PUSH
13317: LD_INT 17
13319: PUSH
13320: LD_INT 18
13322: PUSH
13323: LD_INT 19
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 27
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 36
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 101
13413: PUSH
13414: LD_INT 102
13416: PUSH
13417: LD_INT 103
13419: PUSH
13420: LD_INT 104
13422: PUSH
13423: LD_INT 105
13425: PUSH
13426: LD_INT 106
13428: PUSH
13429: LD_INT 107
13431: PUSH
13432: LD_INT 108
13434: PUSH
13435: LD_INT 109
13437: PUSH
13438: LD_INT 110
13440: PUSH
13441: LD_INT 111
13443: PUSH
13444: LD_INT 112
13446: PUSH
13447: LD_INT 113
13449: PUSH
13450: LD_INT 114
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: ST_TO_ADDR
13473: GO 14420
13475: LD_INT 15
13477: DOUBLE
13478: EQUAL
13479: IFTRUE 13483
13481: GO 13695
13483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13484: LD_ADDR_VAR 0 1
13488: PUSH
13489: LD_INT 1
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 4
13500: PUSH
13501: LD_INT 5
13503: PUSH
13504: LD_INT 6
13506: PUSH
13507: LD_INT 7
13509: PUSH
13510: LD_INT 8
13512: PUSH
13513: LD_INT 9
13515: PUSH
13516: LD_INT 10
13518: PUSH
13519: LD_INT 11
13521: PUSH
13522: LD_INT 12
13524: PUSH
13525: LD_INT 13
13527: PUSH
13528: LD_INT 14
13530: PUSH
13531: LD_INT 15
13533: PUSH
13534: LD_INT 16
13536: PUSH
13537: LD_INT 17
13539: PUSH
13540: LD_INT 18
13542: PUSH
13543: LD_INT 19
13545: PUSH
13546: LD_INT 20
13548: PUSH
13549: LD_INT 21
13551: PUSH
13552: LD_INT 22
13554: PUSH
13555: LD_INT 23
13557: PUSH
13558: LD_INT 24
13560: PUSH
13561: LD_INT 25
13563: PUSH
13564: LD_INT 26
13566: PUSH
13567: LD_INT 27
13569: PUSH
13570: LD_INT 28
13572: PUSH
13573: LD_INT 29
13575: PUSH
13576: LD_INT 30
13578: PUSH
13579: LD_INT 31
13581: PUSH
13582: LD_INT 32
13584: PUSH
13585: LD_INT 33
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 36
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 101
13633: PUSH
13634: LD_INT 102
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: LD_INT 104
13642: PUSH
13643: LD_INT 105
13645: PUSH
13646: LD_INT 106
13648: PUSH
13649: LD_INT 107
13651: PUSH
13652: LD_INT 108
13654: PUSH
13655: LD_INT 109
13657: PUSH
13658: LD_INT 110
13660: PUSH
13661: LD_INT 111
13663: PUSH
13664: LD_INT 112
13666: PUSH
13667: LD_INT 113
13669: PUSH
13670: LD_INT 114
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: ST_TO_ADDR
13693: GO 14420
13695: LD_INT 16
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13827
13703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: LD_INT 4
13714: PUSH
13715: LD_INT 5
13717: PUSH
13718: LD_INT 7
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 31
13756: PUSH
13757: LD_INT 32
13759: PUSH
13760: LD_INT 33
13762: PUSH
13763: LD_INT 34
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 101
13789: PUSH
13790: LD_INT 102
13792: PUSH
13793: LD_INT 103
13795: PUSH
13796: LD_INT 106
13798: PUSH
13799: LD_INT 108
13801: PUSH
13802: LD_INT 112
13804: PUSH
13805: LD_INT 113
13807: PUSH
13808: LD_INT 114
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: ST_TO_ADDR
13825: GO 14420
13827: LD_INT 17
13829: DOUBLE
13830: EQUAL
13831: IFTRUE 13835
13833: GO 14047
13835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: LD_INT 3
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: LD_INT 6
13858: PUSH
13859: LD_INT 7
13861: PUSH
13862: LD_INT 8
13864: PUSH
13865: LD_INT 9
13867: PUSH
13868: LD_INT 10
13870: PUSH
13871: LD_INT 11
13873: PUSH
13874: LD_INT 12
13876: PUSH
13877: LD_INT 13
13879: PUSH
13880: LD_INT 14
13882: PUSH
13883: LD_INT 15
13885: PUSH
13886: LD_INT 16
13888: PUSH
13889: LD_INT 17
13891: PUSH
13892: LD_INT 18
13894: PUSH
13895: LD_INT 19
13897: PUSH
13898: LD_INT 20
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 24
13912: PUSH
13913: LD_INT 25
13915: PUSH
13916: LD_INT 26
13918: PUSH
13919: LD_INT 27
13921: PUSH
13922: LD_INT 28
13924: PUSH
13925: LD_INT 29
13927: PUSH
13928: LD_INT 30
13930: PUSH
13931: LD_INT 31
13933: PUSH
13934: LD_INT 32
13936: PUSH
13937: LD_INT 33
13939: PUSH
13940: LD_INT 34
13942: PUSH
13943: LD_INT 36
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 101
13985: PUSH
13986: LD_INT 102
13988: PUSH
13989: LD_INT 103
13991: PUSH
13992: LD_INT 104
13994: PUSH
13995: LD_INT 105
13997: PUSH
13998: LD_INT 106
14000: PUSH
14001: LD_INT 107
14003: PUSH
14004: LD_INT 108
14006: PUSH
14007: LD_INT 109
14009: PUSH
14010: LD_INT 110
14012: PUSH
14013: LD_INT 111
14015: PUSH
14016: LD_INT 112
14018: PUSH
14019: LD_INT 113
14021: PUSH
14022: LD_INT 114
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: ST_TO_ADDR
14045: GO 14420
14047: LD_INT 18
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14191
14055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: LD_INT 7
14072: PUSH
14073: LD_INT 11
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: LD_INT 15
14081: PUSH
14082: LD_INT 16
14084: PUSH
14085: LD_INT 20
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_INT 23
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 26
14102: PUSH
14103: LD_INT 30
14105: PUSH
14106: LD_INT 31
14108: PUSH
14109: LD_INT 32
14111: PUSH
14112: LD_INT 33
14114: PUSH
14115: LD_INT 34
14117: PUSH
14118: LD_INT 35
14120: PUSH
14121: LD_INT 36
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 101
14149: PUSH
14150: LD_INT 102
14152: PUSH
14153: LD_INT 103
14155: PUSH
14156: LD_INT 106
14158: PUSH
14159: LD_INT 108
14161: PUSH
14162: LD_INT 112
14164: PUSH
14165: LD_INT 113
14167: PUSH
14168: LD_INT 114
14170: PUSH
14171: LD_INT 115
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: ST_TO_ADDR
14189: GO 14420
14191: LD_INT 19
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14419
14199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14200: LD_ADDR_VAR 0 1
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: LD_INT 3
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 6
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: LD_INT 9
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 12
14240: PUSH
14241: LD_INT 13
14243: PUSH
14244: LD_INT 14
14246: PUSH
14247: LD_INT 15
14249: PUSH
14250: LD_INT 16
14252: PUSH
14253: LD_INT 17
14255: PUSH
14256: LD_INT 18
14258: PUSH
14259: LD_INT 19
14261: PUSH
14262: LD_INT 20
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 24
14276: PUSH
14277: LD_INT 25
14279: PUSH
14280: LD_INT 26
14282: PUSH
14283: LD_INT 27
14285: PUSH
14286: LD_INT 28
14288: PUSH
14289: LD_INT 29
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: LD_INT 35
14309: PUSH
14310: LD_INT 36
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 101
14353: PUSH
14354: LD_INT 102
14356: PUSH
14357: LD_INT 103
14359: PUSH
14360: LD_INT 104
14362: PUSH
14363: LD_INT 105
14365: PUSH
14366: LD_INT 106
14368: PUSH
14369: LD_INT 107
14371: PUSH
14372: LD_INT 108
14374: PUSH
14375: LD_INT 109
14377: PUSH
14378: LD_INT 110
14380: PUSH
14381: LD_INT 111
14383: PUSH
14384: LD_INT 112
14386: PUSH
14387: LD_INT 113
14389: PUSH
14390: LD_INT 114
14392: PUSH
14393: LD_INT 115
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: ST_TO_ADDR
14417: GO 14420
14419: POP
// end else
14420: GO 14639
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14422: LD_ADDR_VAR 0 1
14426: PUSH
14427: LD_INT 1
14429: PUSH
14430: LD_INT 2
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: LD_INT 4
14438: PUSH
14439: LD_INT 5
14441: PUSH
14442: LD_INT 6
14444: PUSH
14445: LD_INT 7
14447: PUSH
14448: LD_INT 8
14450: PUSH
14451: LD_INT 9
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: LD_INT 11
14459: PUSH
14460: LD_INT 12
14462: PUSH
14463: LD_INT 13
14465: PUSH
14466: LD_INT 14
14468: PUSH
14469: LD_INT 15
14471: PUSH
14472: LD_INT 16
14474: PUSH
14475: LD_INT 17
14477: PUSH
14478: LD_INT 18
14480: PUSH
14481: LD_INT 19
14483: PUSH
14484: LD_INT 20
14486: PUSH
14487: LD_INT 21
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_INT 23
14495: PUSH
14496: LD_INT 24
14498: PUSH
14499: LD_INT 25
14501: PUSH
14502: LD_INT 26
14504: PUSH
14505: LD_INT 27
14507: PUSH
14508: LD_INT 28
14510: PUSH
14511: LD_INT 29
14513: PUSH
14514: LD_INT 30
14516: PUSH
14517: LD_INT 31
14519: PUSH
14520: LD_INT 32
14522: PUSH
14523: LD_INT 33
14525: PUSH
14526: LD_INT 34
14528: PUSH
14529: LD_INT 35
14531: PUSH
14532: LD_INT 36
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 101
14575: PUSH
14576: LD_INT 102
14578: PUSH
14579: LD_INT 103
14581: PUSH
14582: LD_INT 104
14584: PUSH
14585: LD_INT 105
14587: PUSH
14588: LD_INT 106
14590: PUSH
14591: LD_INT 107
14593: PUSH
14594: LD_INT 108
14596: PUSH
14597: LD_INT 109
14599: PUSH
14600: LD_INT 110
14602: PUSH
14603: LD_INT 111
14605: PUSH
14606: LD_INT 112
14608: PUSH
14609: LD_INT 113
14611: PUSH
14612: LD_INT 114
14614: PUSH
14615: LD_INT 115
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: ST_TO_ADDR
// if result then
14639: LD_VAR 0 1
14643: IFFALSE 14932
// begin normal :=  ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_STRING 
14652: ST_TO_ADDR
// hardcore :=  ;
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_STRING 
14660: ST_TO_ADDR
// for i = 1 to normalCounter do
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: DOUBLE
14667: LD_INT 1
14669: DEC
14670: ST_TO_ADDR
14671: LD_EXP 27
14675: PUSH
14676: FOR_TO
14677: IFFALSE 14778
// begin tmp := 0 ;
14679: LD_ADDR_VAR 0 2
14683: PUSH
14684: LD_STRING 0
14686: ST_TO_ADDR
// if result [ 1 ] then
14687: LD_VAR 0 1
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: IFFALSE 14760
// if result [ 1 ] [ 1 ] = i then
14697: LD_VAR 0 1
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 5
14714: EQUAL
14715: IFFALSE 14760
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14717: LD_ADDR_VAR 0 1
14721: PUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: LD_VAR 0 1
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 3
14746: PPUSH
14747: CALL_OW 1
14751: ST_TO_ADDR
// tmp := 1 ;
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: LD_STRING 1
14759: ST_TO_ADDR
// end ; normal := normal & tmp ;
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_VAR 0 3
14769: PUSH
14770: LD_VAR 0 2
14774: STR
14775: ST_TO_ADDR
// end ;
14776: GO 14676
14778: POP
14779: POP
// for i = 1 to hardcoreCounter do
14780: LD_ADDR_VAR 0 5
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_EXP 28
14794: PUSH
14795: FOR_TO
14796: IFFALSE 14901
// begin tmp := 0 ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_STRING 0
14805: ST_TO_ADDR
// if result [ 2 ] then
14806: LD_VAR 0 1
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: IFFALSE 14883
// if result [ 2 ] [ 1 ] = 100 + i then
14816: LD_VAR 0 1
14820: PUSH
14821: LD_INT 2
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PUSH
14829: LD_INT 100
14831: PUSH
14832: LD_VAR 0 5
14836: PLUS
14837: EQUAL
14838: IFFALSE 14883
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14840: LD_ADDR_VAR 0 1
14844: PUSH
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: LD_VAR 0 1
14857: PUSH
14858: LD_INT 2
14860: ARRAY
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 3
14869: PPUSH
14870: CALL_OW 1
14874: ST_TO_ADDR
// tmp := 1 ;
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_STRING 1
14882: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: LD_VAR 0 4
14892: PUSH
14893: LD_VAR 0 2
14897: STR
14898: ST_TO_ADDR
// end ;
14899: GO 14795
14901: POP
14902: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14903: LD_STRING getStreamItemsFromMission("
14905: PUSH
14906: LD_VAR 0 3
14910: STR
14911: PUSH
14912: LD_STRING ","
14914: STR
14915: PUSH
14916: LD_VAR 0 4
14920: STR
14921: PUSH
14922: LD_STRING ")
14924: STR
14925: PPUSH
14926: CALL_OW 559
// end else
14930: GO 14939
// ToLua ( getStreamItemsFromMission("","") ) ;
14932: LD_STRING getStreamItemsFromMission("","")
14934: PPUSH
14935: CALL_OW 559
// end ;
14939: LD_VAR 0 1
14943: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14944: LD_EXP 26
14948: PUSH
14949: LD_EXP 31
14953: AND
14954: IFFALSE 15078
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
// begin enable ;
14963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_OWVAR 2
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 34
14986: PUSH
14987: LD_INT 7
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 34
14996: PUSH
14997: LD_INT 45
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 34
15006: PUSH
15007: LD_INT 28
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 34
15016: PUSH
15017: LD_INT 47
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 2
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15078
// for i in tmp do
15049: LD_ADDR_VAR 0 1
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15076
// begin SetLives ( i , 0 ) ;
15062: LD_VAR 0 1
15066: PPUSH
15067: LD_INT 0
15069: PPUSH
15070: CALL_OW 234
// end ;
15074: GO 15059
15076: POP
15077: POP
// end ;
15078: PPOPN 2
15080: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15081: LD_EXP 26
15085: PUSH
15086: LD_EXP 32
15090: AND
15091: IFFALSE 15175
15093: GO 15095
15095: DISABLE
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
// begin enable ;
15100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15101: LD_ADDR_VAR 0 2
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 32
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 2
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15175
// for i in tmp do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_VAR 0 2
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15173
// begin SetLives ( i , 0 ) ;
15159: LD_VAR 0 1
15163: PPUSH
15164: LD_INT 0
15166: PPUSH
15167: CALL_OW 234
// end ;
15171: GO 15156
15173: POP
15174: POP
// end ;
15175: PPOPN 2
15177: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15178: LD_EXP 26
15182: PUSH
15183: LD_EXP 29
15187: AND
15188: IFFALSE 15281
15190: GO 15192
15192: DISABLE
15193: LD_INT 0
15195: PPUSH
// begin enable ;
15196: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15197: LD_ADDR_VAR 0 1
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_OWVAR 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: LD_INT 25
15219: PUSH
15220: LD_INT 5
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 25
15229: PUSH
15230: LD_INT 9
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 8
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: PUSH
15262: FOR_IN
15263: IFFALSE 15279
// begin SetClass ( i , 1 ) ;
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 336
// end ;
15277: GO 15262
15279: POP
15280: POP
// end ;
15281: PPOPN 1
15283: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15284: LD_EXP 26
15288: PUSH
15289: LD_EXP 30
15293: AND
15294: PUSH
15295: LD_OWVAR 65
15299: PUSH
15300: LD_INT 7
15302: LESS
15303: AND
15304: IFFALSE 15318
15306: GO 15308
15308: DISABLE
// begin enable ;
15309: ENABLE
// game_speed := 7 ;
15310: LD_ADDR_OWVAR 65
15314: PUSH
15315: LD_INT 7
15317: ST_TO_ADDR
// end ;
15318: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15319: LD_EXP 26
15323: PUSH
15324: LD_EXP 33
15328: AND
15329: IFFALSE 15531
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
15338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: LD_INT 81
15346: PUSH
15347: LD_OWVAR 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: ST_TO_ADDR
// if not tmp then
15375: LD_VAR 0 3
15379: NOT
15380: IFFALSE 15384
// exit ;
15382: GO 15531
// if tmp > 5 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 5
15391: GREATER
15392: IFFALSE 15404
// k := 5 else
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 5
15401: ST_TO_ADDR
15402: GO 15414
// k := tmp ;
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: LD_VAR 0 3
15413: ST_TO_ADDR
// for i := 1 to k do
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: DOUBLE
15420: LD_INT 1
15422: DEC
15423: ST_TO_ADDR
15424: LD_VAR 0 2
15428: PUSH
15429: FOR_TO
15430: IFFALSE 15529
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15432: LD_VAR 0 3
15436: PUSH
15437: LD_VAR 0 1
15441: ARRAY
15442: PPUSH
15443: LD_VAR 0 1
15447: PUSH
15448: LD_INT 4
15450: MOD
15451: PUSH
15452: LD_INT 1
15454: PLUS
15455: PPUSH
15456: CALL_OW 259
15460: PUSH
15461: LD_INT 10
15463: LESS
15464: IFFALSE 15527
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15466: LD_VAR 0 3
15470: PUSH
15471: LD_VAR 0 1
15475: ARRAY
15476: PPUSH
15477: LD_VAR 0 1
15481: PUSH
15482: LD_INT 4
15484: MOD
15485: PUSH
15486: LD_INT 1
15488: PLUS
15489: PPUSH
15490: LD_VAR 0 3
15494: PUSH
15495: LD_VAR 0 1
15499: ARRAY
15500: PPUSH
15501: LD_VAR 0 1
15505: PUSH
15506: LD_INT 4
15508: MOD
15509: PUSH
15510: LD_INT 1
15512: PLUS
15513: PPUSH
15514: CALL_OW 259
15518: PUSH
15519: LD_INT 1
15521: PLUS
15522: PPUSH
15523: CALL_OW 237
15527: GO 15429
15529: POP
15530: POP
// end ;
15531: PPOPN 3
15533: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15534: LD_EXP 26
15538: PUSH
15539: LD_EXP 34
15543: AND
15544: IFFALSE 15564
15546: GO 15548
15548: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15549: LD_INT 4
15551: PPUSH
15552: LD_OWVAR 2
15556: PPUSH
15557: LD_INT 0
15559: PPUSH
15560: CALL_OW 324
15564: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15565: LD_EXP 26
15569: PUSH
15570: LD_EXP 63
15574: AND
15575: IFFALSE 15595
15577: GO 15579
15579: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15580: LD_INT 19
15582: PPUSH
15583: LD_OWVAR 2
15587: PPUSH
15588: LD_INT 0
15590: PPUSH
15591: CALL_OW 324
15595: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15596: LD_EXP 26
15600: PUSH
15601: LD_EXP 35
15605: AND
15606: IFFALSE 15708
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
// begin enable ;
15615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_OWVAR 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: LD_INT 34
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 34
15648: PUSH
15649: LD_INT 30
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 2
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15708
// for i in tmp do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_VAR 0 2
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15706
// begin SetLives ( i , 0 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 0
15699: PPUSH
15700: CALL_OW 234
// end ;
15704: GO 15689
15706: POP
15707: POP
// end ;
15708: PPOPN 2
15710: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15711: LD_EXP 26
15715: PUSH
15716: LD_EXP 36
15720: AND
15721: IFFALSE 15741
15723: GO 15725
15725: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15726: LD_INT 32
15728: PPUSH
15729: LD_OWVAR 2
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL_OW 324
15741: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15742: LD_EXP 26
15746: PUSH
15747: LD_EXP 37
15751: AND
15752: IFFALSE 15933
15754: GO 15756
15756: DISABLE
15757: LD_INT 0
15759: PPUSH
15760: PPUSH
15761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_OWVAR 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 33
15781: PUSH
15782: LD_INT 3
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: ST_TO_ADDR
// if not tmp then
15798: LD_VAR 0 2
15802: NOT
15803: IFFALSE 15807
// exit ;
15805: GO 15933
// side := 0 ;
15807: LD_ADDR_VAR 0 3
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// for i := 1 to 8 do
15815: LD_ADDR_VAR 0 1
15819: PUSH
15820: DOUBLE
15821: LD_INT 1
15823: DEC
15824: ST_TO_ADDR
15825: LD_INT 8
15827: PUSH
15828: FOR_TO
15829: IFFALSE 15877
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15831: LD_OWVAR 2
15835: PUSH
15836: LD_VAR 0 1
15840: NONEQUAL
15841: PUSH
15842: LD_OWVAR 2
15846: PPUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 81
15856: PUSH
15857: LD_INT 2
15859: EQUAL
15860: AND
15861: IFFALSE 15875
// begin side := i ;
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_VAR 0 1
15872: ST_TO_ADDR
// break ;
15873: GO 15877
// end ;
15875: GO 15828
15877: POP
15878: POP
// if not side then
15879: LD_VAR 0 3
15883: NOT
15884: IFFALSE 15888
// exit ;
15886: GO 15933
// for i := 1 to tmp do
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: DOUBLE
15894: LD_INT 1
15896: DEC
15897: ST_TO_ADDR
15898: LD_VAR 0 2
15902: PUSH
15903: FOR_TO
15904: IFFALSE 15931
// if Prob ( 60 ) then
15906: LD_INT 60
15908: PPUSH
15909: CALL_OW 13
15913: IFFALSE 15929
// SetSide ( i , side ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_VAR 0 3
15924: PPUSH
15925: CALL_OW 235
15929: GO 15903
15931: POP
15932: POP
// end ;
15933: PPOPN 3
15935: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15936: LD_EXP 26
15940: PUSH
15941: LD_EXP 39
15945: AND
15946: IFFALSE 16065
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 22
15961: PUSH
15962: LD_OWVAR 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 21
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 3
15983: PUSH
15984: LD_INT 23
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PPUSH
16003: CALL_OW 69
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16063
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 257
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: LD_INT 2
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: LD_INT 4
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: IN
16039: IFFALSE 16061
// SetClass ( un , rand ( 1 , 4 ) ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_INT 4
16051: PPUSH
16052: CALL_OW 12
16056: PPUSH
16057: CALL_OW 336
16061: GO 16008
16063: POP
16064: POP
// end ;
16065: PPOPN 1
16067: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16068: LD_EXP 26
16072: PUSH
16073: LD_EXP 38
16077: AND
16078: IFFALSE 16157
16080: GO 16082
16082: DISABLE
16083: LD_INT 0
16085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 3
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 1
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16131: LD_VAR 0 1
16135: PUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 12
16148: ARRAY
16149: PPUSH
16150: LD_INT 100
16152: PPUSH
16153: CALL_OW 234
// end ;
16157: PPOPN 1
16159: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16160: LD_EXP 26
16164: PUSH
16165: LD_EXP 40
16169: AND
16170: IFFALSE 16268
16172: GO 16174
16174: DISABLE
16175: LD_INT 0
16177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_INT 22
16185: PUSH
16186: LD_OWVAR 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 21
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 69
16213: ST_TO_ADDR
// if not tmp then
16214: LD_VAR 0 1
16218: NOT
16219: IFFALSE 16223
// exit ;
16221: GO 16268
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 12
16240: ARRAY
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: LD_INT 4
16247: PPUSH
16248: CALL_OW 12
16252: PPUSH
16253: LD_INT 3000
16255: PPUSH
16256: LD_INT 9000
16258: PPUSH
16259: CALL_OW 12
16263: PPUSH
16264: CALL_OW 492
// end ;
16268: PPOPN 1
16270: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16271: LD_EXP 26
16275: PUSH
16276: LD_EXP 41
16280: AND
16281: IFFALSE 16301
16283: GO 16285
16285: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16286: LD_INT 1
16288: PPUSH
16289: LD_OWVAR 2
16293: PPUSH
16294: LD_INT 0
16296: PPUSH
16297: CALL_OW 324
16301: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16302: LD_EXP 26
16306: PUSH
16307: LD_EXP 42
16311: AND
16312: IFFALSE 16395
16314: GO 16316
16316: DISABLE
16317: LD_INT 0
16319: PPUSH
16320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16321: LD_ADDR_VAR 0 2
16325: PUSH
16326: LD_INT 22
16328: PUSH
16329: LD_OWVAR 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 21
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: ST_TO_ADDR
// if not tmp then
16357: LD_VAR 0 2
16361: NOT
16362: IFFALSE 16366
// exit ;
16364: GO 16395
// for i in tmp do
16366: LD_ADDR_VAR 0 1
16370: PUSH
16371: LD_VAR 0 2
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16393
// SetBLevel ( i , 10 ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_INT 10
16386: PPUSH
16387: CALL_OW 241
16391: GO 16376
16393: POP
16394: POP
// end ;
16395: PPOPN 2
16397: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16398: LD_EXP 26
16402: PUSH
16403: LD_EXP 43
16407: AND
16408: IFFALSE 16519
16410: GO 16412
16412: DISABLE
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_INT 22
16425: PUSH
16426: LD_OWVAR 2
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 25
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PPUSH
16449: CALL_OW 69
16453: ST_TO_ADDR
// if not tmp then
16454: LD_VAR 0 3
16458: NOT
16459: IFFALSE 16463
// exit ;
16461: GO 16519
// un := tmp [ rand ( 1 , tmp ) ] ;
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_VAR 0 3
16472: PUSH
16473: LD_INT 1
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: CALL_OW 12
16485: ARRAY
16486: ST_TO_ADDR
// if Crawls ( un ) then
16487: LD_VAR 0 2
16491: PPUSH
16492: CALL_OW 318
16496: IFFALSE 16507
// ComWalk ( un ) ;
16498: LD_VAR 0 2
16502: PPUSH
16503: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16507: LD_VAR 0 2
16511: PPUSH
16512: LD_INT 5
16514: PPUSH
16515: CALL_OW 336
// end ;
16519: PPOPN 3
16521: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16522: LD_EXP 26
16526: PUSH
16527: LD_EXP 44
16531: AND
16532: PUSH
16533: LD_OWVAR 67
16537: PUSH
16538: LD_INT 3
16540: LESS
16541: AND
16542: IFFALSE 16561
16544: GO 16546
16546: DISABLE
// Difficulty := Difficulty + 1 ;
16547: LD_ADDR_OWVAR 67
16551: PUSH
16552: LD_OWVAR 67
16556: PUSH
16557: LD_INT 1
16559: PLUS
16560: ST_TO_ADDR
16561: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16562: LD_EXP 26
16566: PUSH
16567: LD_EXP 45
16571: AND
16572: IFFALSE 16675
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
// begin for i := 1 to 5 do
16580: LD_ADDR_VAR 0 1
16584: PUSH
16585: DOUBLE
16586: LD_INT 1
16588: DEC
16589: ST_TO_ADDR
16590: LD_INT 5
16592: PUSH
16593: FOR_TO
16594: IFFALSE 16673
// begin uc_nation := nation_nature ;
16596: LD_ADDR_OWVAR 21
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// uc_side := 0 ;
16604: LD_ADDR_OWVAR 20
16608: PUSH
16609: LD_INT 0
16611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16612: LD_ADDR_OWVAR 29
16616: PUSH
16617: LD_INT 12
16619: PUSH
16620: LD_INT 12
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: ST_TO_ADDR
// hc_agressivity := 20 ;
16627: LD_ADDR_OWVAR 35
16631: PUSH
16632: LD_INT 20
16634: ST_TO_ADDR
// hc_class := class_tiger ;
16635: LD_ADDR_OWVAR 28
16639: PUSH
16640: LD_INT 14
16642: ST_TO_ADDR
// hc_gallery :=  ;
16643: LD_ADDR_OWVAR 33
16647: PUSH
16648: LD_STRING 
16650: ST_TO_ADDR
// hc_name :=  ;
16651: LD_ADDR_OWVAR 26
16655: PUSH
16656: LD_STRING 
16658: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16659: CALL_OW 44
16663: PPUSH
16664: LD_INT 0
16666: PPUSH
16667: CALL_OW 51
// end ;
16671: GO 16593
16673: POP
16674: POP
// end ;
16675: PPOPN 1
16677: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16678: LD_EXP 26
16682: PUSH
16683: LD_EXP 46
16687: AND
16688: IFFALSE 16697
16690: GO 16692
16692: DISABLE
// StreamSibBomb ;
16693: CALL 16698 0 0
16697: END
// export function StreamSibBomb ; var i , x , y ; begin
16698: LD_INT 0
16700: PPUSH
16701: PPUSH
16702: PPUSH
16703: PPUSH
// result := false ;
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// for i := 1 to 16 do
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: DOUBLE
16718: LD_INT 1
16720: DEC
16721: ST_TO_ADDR
16722: LD_INT 16
16724: PUSH
16725: FOR_TO
16726: IFFALSE 16925
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16728: LD_ADDR_VAR 0 3
16732: PUSH
16733: LD_INT 10
16735: PUSH
16736: LD_INT 20
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 40
16744: PUSH
16745: LD_INT 50
16747: PUSH
16748: LD_INT 60
16750: PUSH
16751: LD_INT 70
16753: PUSH
16754: LD_INT 80
16756: PUSH
16757: LD_INT 90
16759: PUSH
16760: LD_INT 100
16762: PUSH
16763: LD_INT 110
16765: PUSH
16766: LD_INT 120
16768: PUSH
16769: LD_INT 130
16771: PUSH
16772: LD_INT 140
16774: PUSH
16775: LD_INT 150
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_INT 15
16800: PPUSH
16801: CALL_OW 12
16805: ARRAY
16806: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16807: LD_ADDR_VAR 0 4
16811: PUSH
16812: LD_INT 10
16814: PUSH
16815: LD_INT 20
16817: PUSH
16818: LD_INT 30
16820: PUSH
16821: LD_INT 40
16823: PUSH
16824: LD_INT 50
16826: PUSH
16827: LD_INT 60
16829: PUSH
16830: LD_INT 70
16832: PUSH
16833: LD_INT 80
16835: PUSH
16836: LD_INT 90
16838: PUSH
16839: LD_INT 100
16841: PUSH
16842: LD_INT 110
16844: PUSH
16845: LD_INT 120
16847: PUSH
16848: LD_INT 130
16850: PUSH
16851: LD_INT 140
16853: PUSH
16854: LD_INT 150
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 15
16879: PPUSH
16880: CALL_OW 12
16884: ARRAY
16885: ST_TO_ADDR
// if ValidHex ( x , y ) then
16886: LD_VAR 0 3
16890: PPUSH
16891: LD_VAR 0 4
16895: PPUSH
16896: CALL_OW 488
16900: IFFALSE 16923
// begin result := [ x , y ] ;
16902: LD_ADDR_VAR 0 1
16906: PUSH
16907: LD_VAR 0 3
16911: PUSH
16912: LD_VAR 0 4
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: ST_TO_ADDR
// break ;
16921: GO 16925
// end ; end ;
16923: GO 16725
16925: POP
16926: POP
// if result then
16927: LD_VAR 0 1
16931: IFFALSE 16991
// begin ToLua ( playSibBomb() ) ;
16933: LD_STRING playSibBomb()
16935: PPUSH
16936: CALL_OW 559
// wait ( 0 0$14 ) ;
16940: LD_INT 490
16942: PPUSH
16943: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16947: LD_VAR 0 1
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PPUSH
16956: LD_VAR 0 1
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PPUSH
16965: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: LD_VAR 0 1
16982: PUSH
16983: LD_INT 2
16985: ARRAY
16986: PPUSH
16987: CALL_OW 429
// end ; end ;
16991: LD_VAR 0 1
16995: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16996: LD_EXP 26
17000: PUSH
17001: LD_EXP 48
17005: AND
17006: IFFALSE 17018
17008: GO 17010
17010: DISABLE
// YouLost (  ) ;
17011: LD_STRING 
17013: PPUSH
17014: CALL_OW 104
17018: END
// every 0 0$1 trigger StreamModeActive and sFog do
17019: LD_EXP 26
17023: PUSH
17024: LD_EXP 47
17028: AND
17029: IFFALSE 17043
17031: GO 17033
17033: DISABLE
// FogOff ( your_side ) ;
17034: LD_OWVAR 2
17038: PPUSH
17039: CALL_OW 344
17043: END
// every 0 0$1 trigger StreamModeActive and sSun do
17044: LD_EXP 26
17048: PUSH
17049: LD_EXP 49
17053: AND
17054: IFFALSE 17082
17056: GO 17058
17058: DISABLE
// begin solar_recharge_percent := 0 ;
17059: LD_ADDR_OWVAR 79
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17067: LD_INT 10500
17069: PPUSH
17070: CALL_OW 67
// solar_recharge_percent := 100 ;
17074: LD_ADDR_OWVAR 79
17078: PUSH
17079: LD_INT 100
17081: ST_TO_ADDR
// end ;
17082: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17083: LD_EXP 26
17087: PUSH
17088: LD_EXP 50
17092: AND
17093: IFFALSE 17332
17095: GO 17097
17097: DISABLE
17098: LD_INT 0
17100: PPUSH
17101: PPUSH
17102: PPUSH
// begin tmp := [ ] ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: EMPTY
17109: ST_TO_ADDR
// for i := 1 to 6 do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_INT 6
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17229
// begin uc_nation := nation_nature ;
17126: LD_ADDR_OWVAR 21
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// uc_side := 0 ;
17134: LD_ADDR_OWVAR 20
17138: PUSH
17139: LD_INT 0
17141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17142: LD_ADDR_OWVAR 29
17146: PUSH
17147: LD_INT 12
17149: PUSH
17150: LD_INT 12
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: ST_TO_ADDR
// hc_agressivity := 20 ;
17157: LD_ADDR_OWVAR 35
17161: PUSH
17162: LD_INT 20
17164: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17165: LD_ADDR_OWVAR 28
17169: PUSH
17170: LD_INT 17
17172: ST_TO_ADDR
// hc_gallery :=  ;
17173: LD_ADDR_OWVAR 33
17177: PUSH
17178: LD_STRING 
17180: ST_TO_ADDR
// hc_name :=  ;
17181: LD_ADDR_OWVAR 26
17185: PUSH
17186: LD_STRING 
17188: ST_TO_ADDR
// un := CreateHuman ;
17189: LD_ADDR_VAR 0 2
17193: PUSH
17194: CALL_OW 44
17198: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: CALL_OW 51
// tmp := tmp ^ un ;
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: LD_VAR 0 3
17220: PUSH
17221: LD_VAR 0 2
17225: ADD
17226: ST_TO_ADDR
// end ;
17227: GO 17123
17229: POP
17230: POP
// repeat wait ( 0 0$1 ) ;
17231: LD_INT 35
17233: PPUSH
17234: CALL_OW 67
// for un in tmp do
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_VAR 0 3
17247: PUSH
17248: FOR_IN
17249: IFFALSE 17323
// begin if IsDead ( un ) then
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 301
17260: IFFALSE 17280
// begin tmp := tmp diff un ;
17262: LD_ADDR_VAR 0 3
17266: PUSH
17267: LD_VAR 0 3
17271: PUSH
17272: LD_VAR 0 2
17276: DIFF
17277: ST_TO_ADDR
// continue ;
17278: GO 17248
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17280: LD_VAR 0 2
17284: PPUSH
17285: LD_INT 3
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: PPUSH
17307: LD_VAR 0 2
17311: PPUSH
17312: CALL_OW 74
17316: PPUSH
17317: CALL_OW 115
// end ;
17321: GO 17248
17323: POP
17324: POP
// until not tmp ;
17325: LD_VAR 0 3
17329: NOT
17330: IFFALSE 17231
// end ;
17332: PPOPN 3
17334: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17335: LD_EXP 26
17339: PUSH
17340: LD_EXP 51
17344: AND
17345: IFFALSE 17399
17347: GO 17349
17349: DISABLE
// begin ToLua ( displayTroll(); ) ;
17350: LD_STRING displayTroll();
17352: PPUSH
17353: CALL_OW 559
// wait ( 3 3$00 ) ;
17357: LD_INT 6300
17359: PPUSH
17360: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17364: LD_STRING hideTroll();
17366: PPUSH
17367: CALL_OW 559
// wait ( 1 1$00 ) ;
17371: LD_INT 2100
17373: PPUSH
17374: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17378: LD_STRING displayTroll();
17380: PPUSH
17381: CALL_OW 559
// wait ( 1 1$00 ) ;
17385: LD_INT 2100
17387: PPUSH
17388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17392: LD_STRING hideTroll();
17394: PPUSH
17395: CALL_OW 559
// end ;
17399: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17400: LD_EXP 26
17404: PUSH
17405: LD_EXP 52
17409: AND
17410: IFFALSE 17473
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
// begin p := 0 ;
17418: LD_ADDR_VAR 0 1
17422: PUSH
17423: LD_INT 0
17425: ST_TO_ADDR
// repeat game_speed := 1 ;
17426: LD_ADDR_OWVAR 65
17430: PUSH
17431: LD_INT 1
17433: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17434: LD_INT 35
17436: PPUSH
17437: CALL_OW 67
// p := p + 1 ;
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 1
17453: PLUS
17454: ST_TO_ADDR
// until p >= 60 ;
17455: LD_VAR 0 1
17459: PUSH
17460: LD_INT 60
17462: GREATEREQUAL
17463: IFFALSE 17426
// game_speed := 4 ;
17465: LD_ADDR_OWVAR 65
17469: PUSH
17470: LD_INT 4
17472: ST_TO_ADDR
// end ;
17473: PPOPN 1
17475: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17476: LD_EXP 26
17480: PUSH
17481: LD_EXP 53
17485: AND
17486: IFFALSE 17632
17488: GO 17490
17490: DISABLE
17491: LD_INT 0
17493: PPUSH
17494: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17495: LD_ADDR_VAR 0 1
17499: PUSH
17500: LD_INT 22
17502: PUSH
17503: LD_OWVAR 2
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not depot then
17549: LD_VAR 0 1
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17632
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_VAR 0 1
17567: PUSH
17568: LD_INT 1
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 12
17580: ARRAY
17581: PPUSH
17582: CALL_OW 274
17586: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 0
17597: PPUSH
17598: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 2
17609: PPUSH
17610: LD_INT 0
17612: PPUSH
17613: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: LD_INT 0
17627: PPUSH
17628: CALL_OW 277
// end ;
17632: PPOPN 2
17634: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17635: LD_EXP 26
17639: PUSH
17640: LD_EXP 54
17644: AND
17645: IFFALSE 17742
17647: GO 17649
17649: DISABLE
17650: LD_INT 0
17652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17653: LD_ADDR_VAR 0 1
17657: PUSH
17658: LD_INT 22
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: LD_INT 23
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: ST_TO_ADDR
// if not tmp then
17707: LD_VAR 0 1
17711: NOT
17712: IFFALSE 17716
// exit ;
17714: GO 17742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17716: LD_VAR 0 1
17720: PUSH
17721: LD_INT 1
17723: PPUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 12
17733: ARRAY
17734: PPUSH
17735: LD_INT 200
17737: PPUSH
17738: CALL_OW 234
// end ;
17742: PPOPN 1
17744: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17745: LD_EXP 26
17749: PUSH
17750: LD_EXP 55
17754: AND
17755: IFFALSE 17834
17757: GO 17759
17759: DISABLE
17760: LD_INT 0
17762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17763: LD_ADDR_VAR 0 1
17767: PUSH
17768: LD_INT 22
17770: PUSH
17771: LD_OWVAR 2
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: ST_TO_ADDR
// if not tmp then
17799: LD_VAR 0 1
17803: NOT
17804: IFFALSE 17808
// exit ;
17806: GO 17834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17808: LD_VAR 0 1
17812: PUSH
17813: LD_INT 1
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 12
17825: ARRAY
17826: PPUSH
17827: LD_INT 60
17829: PPUSH
17830: CALL_OW 234
// end ;
17834: PPOPN 1
17836: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17837: LD_EXP 26
17841: PUSH
17842: LD_EXP 56
17846: AND
17847: IFFALSE 17946
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
// begin enable ;
17856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17857: LD_ADDR_VAR 0 1
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_OWVAR 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 61
17876: PUSH
17877: EMPTY
17878: LIST
17879: PUSH
17880: LD_INT 33
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: ST_TO_ADDR
// if not tmp then
17900: LD_VAR 0 1
17904: NOT
17905: IFFALSE 17909
// exit ;
17907: GO 17946
// for i in tmp do
17909: LD_ADDR_VAR 0 2
17913: PUSH
17914: LD_VAR 0 1
17918: PUSH
17919: FOR_IN
17920: IFFALSE 17944
// if IsControledBy ( i ) then
17922: LD_VAR 0 2
17926: PPUSH
17927: CALL_OW 312
17931: IFFALSE 17942
// ComUnlink ( i ) ;
17933: LD_VAR 0 2
17937: PPUSH
17938: CALL_OW 136
17942: GO 17919
17944: POP
17945: POP
// end ;
17946: PPOPN 2
17948: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17949: LD_EXP 26
17953: PUSH
17954: LD_EXP 57
17958: AND
17959: IFFALSE 18099
17961: GO 17963
17963: DISABLE
17964: LD_INT 0
17966: PPUSH
17967: PPUSH
// begin ToLua ( displayPowell(); ) ;
17968: LD_STRING displayPowell();
17970: PPUSH
17971: CALL_OW 559
// uc_side := 0 ;
17975: LD_ADDR_OWVAR 20
17979: PUSH
17980: LD_INT 0
17982: ST_TO_ADDR
// uc_nation := 2 ;
17983: LD_ADDR_OWVAR 21
17987: PUSH
17988: LD_INT 2
17990: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17991: LD_ADDR_OWVAR 37
17995: PUSH
17996: LD_INT 14
17998: ST_TO_ADDR
// vc_engine := engine_siberite ;
17999: LD_ADDR_OWVAR 39
18003: PUSH
18004: LD_INT 3
18006: ST_TO_ADDR
// vc_control := control_apeman ;
18007: LD_ADDR_OWVAR 38
18011: PUSH
18012: LD_INT 5
18014: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18015: LD_ADDR_OWVAR 40
18019: PUSH
18020: LD_INT 29
18022: ST_TO_ADDR
// un := CreateVehicle ;
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: CALL_OW 45
18032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18033: LD_VAR 0 2
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18045: LD_INT 35
18047: PPUSH
18048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_INT 22
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 74
18083: PPUSH
18084: CALL_OW 115
// until IsDead ( un ) ;
18088: LD_VAR 0 2
18092: PPUSH
18093: CALL_OW 301
18097: IFFALSE 18045
// end ;
18099: PPOPN 2
18101: END
// every 0 0$1 trigger StreamModeActive and sStu do
18102: LD_EXP 26
18106: PUSH
18107: LD_EXP 65
18111: AND
18112: IFFALSE 18128
18114: GO 18116
18116: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18117: LD_STRING displayStucuk();
18119: PPUSH
18120: CALL_OW 559
// ResetFog ;
18124: CALL_OW 335
// end ;
18128: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18129: LD_EXP 26
18133: PUSH
18134: LD_EXP 58
18138: AND
18139: IFFALSE 18280
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18148: LD_ADDR_VAR 0 2
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_OWVAR 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 21
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: ST_TO_ADDR
// if not tmp then
18184: LD_VAR 0 2
18188: NOT
18189: IFFALSE 18193
// exit ;
18191: GO 18280
// un := tmp [ rand ( 1 , tmp ) ] ;
18193: LD_ADDR_VAR 0 1
18197: PUSH
18198: LD_VAR 0 2
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: CALL_OW 12
18215: ARRAY
18216: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_INT 0
18224: PPUSH
18225: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_OWVAR 3
18238: PUSH
18239: LD_VAR 0 1
18243: DIFF
18244: PPUSH
18245: LD_VAR 0 1
18249: PPUSH
18250: CALL_OW 74
18254: PPUSH
18255: CALL_OW 115
// wait ( 0 0$20 ) ;
18259: LD_INT 700
18261: PPUSH
18262: CALL_OW 67
// SetSide ( un , your_side ) ;
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_OWVAR 2
18275: PPUSH
18276: CALL_OW 235
// end ;
18280: PPOPN 2
18282: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18283: LD_EXP 26
18287: PUSH
18288: LD_EXP 59
18292: AND
18293: IFFALSE 18399
18295: GO 18297
18297: DISABLE
18298: LD_INT 0
18300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_OWVAR 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 30
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL_OW 69
18354: ST_TO_ADDR
// if not depot then
18355: LD_VAR 0 1
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18399
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18364: LD_VAR 0 1
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: CALL_OW 250
18377: PPUSH
18378: LD_VAR 0 1
18382: PUSH
18383: LD_INT 1
18385: ARRAY
18386: PPUSH
18387: CALL_OW 251
18391: PPUSH
18392: LD_INT 70
18394: PPUSH
18395: CALL_OW 495
// end ;
18399: PPOPN 1
18401: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18402: LD_EXP 26
18406: PUSH
18407: LD_EXP 60
18411: AND
18412: IFFALSE 18623
18414: GO 18416
18416: DISABLE
18417: LD_INT 0
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18424: LD_ADDR_VAR 0 5
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: ST_TO_ADDR
// if not tmp then
18460: LD_VAR 0 5
18464: NOT
18465: IFFALSE 18469
// exit ;
18467: GO 18623
// for i in tmp do
18469: LD_ADDR_VAR 0 1
18473: PUSH
18474: LD_VAR 0 5
18478: PUSH
18479: FOR_IN
18480: IFFALSE 18621
// begin d := rand ( 0 , 5 ) ;
18482: LD_ADDR_VAR 0 4
18486: PUSH
18487: LD_INT 0
18489: PPUSH
18490: LD_INT 5
18492: PPUSH
18493: CALL_OW 12
18497: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18498: LD_ADDR_VAR 0 2
18502: PUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 250
18512: PPUSH
18513: LD_VAR 0 4
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_INT 12
18523: PPUSH
18524: CALL_OW 12
18528: PPUSH
18529: CALL_OW 272
18533: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 251
18548: PPUSH
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_INT 3
18556: PPUSH
18557: LD_INT 12
18559: PPUSH
18560: CALL_OW 12
18564: PPUSH
18565: CALL_OW 273
18569: ST_TO_ADDR
// if ValidHex ( x , y ) then
18570: LD_VAR 0 2
18574: PPUSH
18575: LD_VAR 0 3
18579: PPUSH
18580: CALL_OW 488
18584: IFFALSE 18619
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 6
18606: PPUSH
18607: CALL_OW 12
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 483
// end ;
18619: GO 18479
18621: POP
18622: POP
// end ;
18623: PPOPN 5
18625: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18626: LD_EXP 26
18630: PUSH
18631: LD_EXP 61
18635: AND
18636: IFFALSE 18730
18638: GO 18640
18640: DISABLE
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 22
18652: PUSH
18653: LD_OWVAR 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 32
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 69
18691: ST_TO_ADDR
// if not tmp then
18692: LD_VAR 0 2
18696: NOT
18697: IFFALSE 18701
// exit ;
18699: GO 18730
// for i in tmp do
18701: LD_ADDR_VAR 0 1
18705: PUSH
18706: LD_VAR 0 2
18710: PUSH
18711: FOR_IN
18712: IFFALSE 18728
// SetFuel ( i , 0 ) ;
18714: LD_VAR 0 1
18718: PPUSH
18719: LD_INT 0
18721: PPUSH
18722: CALL_OW 240
18726: GO 18711
18728: POP
18729: POP
// end ;
18730: PPOPN 2
18732: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18733: LD_EXP 26
18737: PUSH
18738: LD_EXP 62
18742: AND
18743: IFFALSE 18809
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 29
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: ST_TO_ADDR
// if not tmp then
18787: LD_VAR 0 1
18791: NOT
18792: IFFALSE 18796
// exit ;
18794: GO 18809
// DestroyUnit ( tmp [ 1 ] ) ;
18796: LD_VAR 0 1
18800: PUSH
18801: LD_INT 1
18803: ARRAY
18804: PPUSH
18805: CALL_OW 65
// end ;
18809: PPOPN 1
18811: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18812: LD_EXP 26
18816: PUSH
18817: LD_EXP 64
18821: AND
18822: IFFALSE 18951
18824: GO 18826
18826: DISABLE
18827: LD_INT 0
18829: PPUSH
// begin uc_side := 0 ;
18830: LD_ADDR_OWVAR 20
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// uc_nation := nation_arabian ;
18838: LD_ADDR_OWVAR 21
18842: PUSH
18843: LD_INT 2
18845: ST_TO_ADDR
// hc_gallery :=  ;
18846: LD_ADDR_OWVAR 33
18850: PUSH
18851: LD_STRING 
18853: ST_TO_ADDR
// hc_name :=  ;
18854: LD_ADDR_OWVAR 26
18858: PUSH
18859: LD_STRING 
18861: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 11
18867: PPUSH
18868: LD_INT 10
18870: PPUSH
18871: CALL_OW 380
// un := CreateHuman ;
18875: LD_ADDR_VAR 0 1
18879: PUSH
18880: CALL_OW 44
18884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_INT 1
18892: PPUSH
18893: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18897: LD_INT 35
18899: PPUSH
18900: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_INT 22
18911: PUSH
18912: LD_OWVAR 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PPUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 74
18935: PPUSH
18936: CALL_OW 115
// until IsDead ( un ) ;
18940: LD_VAR 0 1
18944: PPUSH
18945: CALL_OW 301
18949: IFFALSE 18897
// end ;
18951: PPOPN 1
18953: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18954: LD_EXP 26
18958: PUSH
18959: LD_EXP 66
18963: AND
18964: IFFALSE 18976
18966: GO 18968
18968: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18969: LD_STRING earthquake(getX(game), 0, 32)
18971: PPUSH
18972: CALL_OW 559
18976: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18977: LD_EXP 26
18981: PUSH
18982: LD_EXP 67
18986: AND
18987: IFFALSE 19078
18989: GO 18991
18991: DISABLE
18992: LD_INT 0
18994: PPUSH
// begin enable ;
18995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_OWVAR 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 21
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 33
19025: PUSH
19026: LD_INT 3
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: ST_TO_ADDR
// if not tmp then
19043: LD_VAR 0 1
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19052: LD_VAR 0 1
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 12
19069: ARRAY
19070: PPUSH
19071: LD_INT 1
19073: PPUSH
19074: CALL_OW 234
// end ;
19078: PPOPN 1
19080: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19081: LD_EXP 26
19085: PUSH
19086: LD_EXP 68
19090: AND
19091: IFFALSE 19232
19093: GO 19095
19095: DISABLE
19096: LD_INT 0
19098: PPUSH
19099: PPUSH
19100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_OWVAR 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: ST_TO_ADDR
// if not tmp then
19137: LD_VAR 0 3
19141: NOT
19142: IFFALSE 19146
// exit ;
19144: GO 19232
// un := tmp [ rand ( 1 , tmp ) ] ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 1
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 12
19168: ARRAY
19169: ST_TO_ADDR
// if Crawls ( un ) then
19170: LD_VAR 0 2
19174: PPUSH
19175: CALL_OW 318
19179: IFFALSE 19190
// ComWalk ( un ) ;
19181: LD_VAR 0 2
19185: PPUSH
19186: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: LD_INT 9
19197: PPUSH
19198: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19202: LD_INT 28
19204: PPUSH
19205: LD_OWVAR 2
19209: PPUSH
19210: LD_INT 2
19212: PPUSH
19213: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19217: LD_INT 29
19219: PPUSH
19220: LD_OWVAR 2
19224: PPUSH
19225: LD_INT 2
19227: PPUSH
19228: CALL_OW 322
// end ;
19232: PPOPN 3
19234: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19235: LD_EXP 26
19239: PUSH
19240: LD_EXP 69
19244: AND
19245: IFFALSE 19356
19247: GO 19249
19249: DISABLE
19250: LD_INT 0
19252: PPUSH
19253: PPUSH
19254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_OWVAR 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 25
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: ST_TO_ADDR
// if not tmp then
19291: LD_VAR 0 3
19295: NOT
19296: IFFALSE 19300
// exit ;
19298: GO 19356
// un := tmp [ rand ( 1 , tmp ) ] ;
19300: LD_ADDR_VAR 0 2
19304: PUSH
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 1
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: CALL_OW 12
19322: ARRAY
19323: ST_TO_ADDR
// if Crawls ( un ) then
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 318
19333: IFFALSE 19344
// ComWalk ( un ) ;
19335: LD_VAR 0 2
19339: PPUSH
19340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19344: LD_VAR 0 2
19348: PPUSH
19349: LD_INT 8
19351: PPUSH
19352: CALL_OW 336
// end ;
19356: PPOPN 3
19358: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19359: LD_EXP 26
19363: PUSH
19364: LD_EXP 70
19368: AND
19369: IFFALSE 19513
19371: GO 19373
19373: DISABLE
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19378: LD_ADDR_VAR 0 2
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_OWVAR 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 34
19410: PUSH
19411: LD_INT 12
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 34
19420: PUSH
19421: LD_INT 51
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 34
19430: PUSH
19431: LD_INT 32
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: ST_TO_ADDR
// if not tmp then
19454: LD_VAR 0 2
19458: NOT
19459: IFFALSE 19463
// exit ;
19461: GO 19513
// for i in tmp do
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: FOR_IN
19474: IFFALSE 19511
// if GetCargo ( i , mat_artifact ) = 0 then
19476: LD_VAR 0 1
19480: PPUSH
19481: LD_INT 4
19483: PPUSH
19484: CALL_OW 289
19488: PUSH
19489: LD_INT 0
19491: EQUAL
19492: IFFALSE 19509
// SetCargo ( i , mat_siberit , 100 ) ;
19494: LD_VAR 0 1
19498: PPUSH
19499: LD_INT 3
19501: PPUSH
19502: LD_INT 100
19504: PPUSH
19505: CALL_OW 290
19509: GO 19473
19511: POP
19512: POP
// end ;
19513: PPOPN 2
19515: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19516: LD_EXP 26
19520: PUSH
19521: LD_EXP 71
19525: AND
19526: IFFALSE 19709
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PPUSH
19552: CALL_OW 69
19556: ST_TO_ADDR
// if not tmp then
19557: LD_VAR 0 2
19561: NOT
19562: IFFALSE 19566
// exit ;
19564: GO 19709
// for i := 1 to 2 do
19566: LD_ADDR_VAR 0 1
19570: PUSH
19571: DOUBLE
19572: LD_INT 1
19574: DEC
19575: ST_TO_ADDR
19576: LD_INT 2
19578: PUSH
19579: FOR_TO
19580: IFFALSE 19707
// begin uc_side := your_side ;
19582: LD_ADDR_OWVAR 20
19586: PUSH
19587: LD_OWVAR 2
19591: ST_TO_ADDR
// uc_nation := nation_american ;
19592: LD_ADDR_OWVAR 21
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// vc_chassis := us_morphling ;
19600: LD_ADDR_OWVAR 37
19604: PUSH
19605: LD_INT 5
19607: ST_TO_ADDR
// vc_engine := engine_siberite ;
19608: LD_ADDR_OWVAR 39
19612: PUSH
19613: LD_INT 3
19615: ST_TO_ADDR
// vc_control := control_computer ;
19616: LD_ADDR_OWVAR 38
19620: PUSH
19621: LD_INT 3
19623: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19624: LD_ADDR_OWVAR 40
19628: PUSH
19629: LD_INT 10
19631: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19632: LD_VAR 0 2
19636: PUSH
19637: LD_INT 1
19639: ARRAY
19640: PPUSH
19641: CALL_OW 310
19645: NOT
19646: IFFALSE 19693
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19648: CALL_OW 45
19652: PPUSH
19653: LD_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: CALL_OW 250
19666: PPUSH
19667: LD_VAR 0 2
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: CALL_OW 251
19680: PPUSH
19681: LD_INT 12
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 50
19691: GO 19705
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19693: CALL_OW 45
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 51
// end ;
19705: GO 19579
19707: POP
19708: POP
// end ;
19709: PPOPN 2
19711: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19712: LD_EXP 26
19716: PUSH
19717: LD_EXP 72
19721: AND
19722: IFFALSE 19944
19724: GO 19726
19726: DISABLE
19727: LD_INT 0
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19735: LD_ADDR_VAR 0 6
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 21
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 3
19764: PUSH
19765: LD_INT 23
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: ST_TO_ADDR
// if not tmp then
19789: LD_VAR 0 6
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19944
// s1 := rand ( 1 , 4 ) ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_INT 4
19808: PPUSH
19809: CALL_OW 12
19813: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19814: LD_ADDR_VAR 0 4
19818: PUSH
19819: LD_VAR 0 6
19823: PUSH
19824: LD_INT 1
19826: ARRAY
19827: PPUSH
19828: LD_VAR 0 2
19832: PPUSH
19833: CALL_OW 259
19837: ST_TO_ADDR
// if s1 = 1 then
19838: LD_VAR 0 2
19842: PUSH
19843: LD_INT 1
19845: EQUAL
19846: IFFALSE 19866
// s2 := rand ( 2 , 4 ) else
19848: LD_ADDR_VAR 0 3
19852: PUSH
19853: LD_INT 2
19855: PPUSH
19856: LD_INT 4
19858: PPUSH
19859: CALL_OW 12
19863: ST_TO_ADDR
19864: GO 19874
// s2 := 1 ;
19866: LD_ADDR_VAR 0 3
19870: PUSH
19871: LD_INT 1
19873: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19874: LD_ADDR_VAR 0 5
19878: PUSH
19879: LD_VAR 0 6
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PPUSH
19888: LD_VAR 0 3
19892: PPUSH
19893: CALL_OW 259
19897: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19898: LD_VAR 0 6
19902: PUSH
19903: LD_INT 1
19905: ARRAY
19906: PPUSH
19907: LD_VAR 0 2
19911: PPUSH
19912: LD_VAR 0 5
19916: PPUSH
19917: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19921: LD_VAR 0 6
19925: PUSH
19926: LD_INT 1
19928: ARRAY
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: LD_VAR 0 4
19939: PPUSH
19940: CALL_OW 237
// end ;
19944: PPOPN 6
19946: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19947: LD_EXP 26
19951: PUSH
19952: LD_EXP 73
19956: AND
19957: IFFALSE 20036
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 30
19984: PUSH
19985: LD_INT 3
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// if not tmp then
20001: LD_VAR 0 1
20005: NOT
20006: IFFALSE 20010
// exit ;
20008: GO 20036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20010: LD_VAR 0 1
20014: PUSH
20015: LD_INT 1
20017: PPUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 12
20027: ARRAY
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 234
// end ;
20036: PPOPN 1
20038: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20039: LD_EXP 26
20043: PUSH
20044: LD_EXP 74
20048: AND
20049: IFFALSE 20161
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
20057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: LD_INT 30
20080: PUSH
20081: LD_INT 27
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 30
20090: PUSH
20091: LD_INT 26
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 30
20100: PUSH
20101: LD_INT 28
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PPUSH
20118: CALL_OW 69
20122: ST_TO_ADDR
// if not tmp then
20123: LD_VAR 0 2
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20161
// for i in tmp do
20132: LD_ADDR_VAR 0 1
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: FOR_IN
20143: IFFALSE 20159
// SetLives ( i , 1 ) ;
20145: LD_VAR 0 1
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 234
20157: GO 20142
20159: POP
20160: POP
// end ;
20161: PPOPN 2
20163: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20164: LD_EXP 26
20168: PUSH
20169: LD_EXP 75
20173: AND
20174: IFFALSE 20448
20176: GO 20178
20178: DISABLE
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
20183: PPUSH
// begin i := rand ( 1 , 7 ) ;
20184: LD_ADDR_VAR 0 1
20188: PUSH
20189: LD_INT 1
20191: PPUSH
20192: LD_INT 7
20194: PPUSH
20195: CALL_OW 12
20199: ST_TO_ADDR
// case i of 1 :
20200: LD_VAR 0 1
20204: PUSH
20205: LD_INT 1
20207: DOUBLE
20208: EQUAL
20209: IFTRUE 20213
20211: GO 20223
20213: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20214: LD_STRING earthquake(getX(game), 0, 32)
20216: PPUSH
20217: CALL_OW 559
20221: GO 20448
20223: LD_INT 2
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20245
20231: POP
// begin ToLua ( displayStucuk(); ) ;
20232: LD_STRING displayStucuk();
20234: PPUSH
20235: CALL_OW 559
// ResetFog ;
20239: CALL_OW 335
// end ; 3 :
20243: GO 20448
20245: LD_INT 3
20247: DOUBLE
20248: EQUAL
20249: IFTRUE 20253
20251: GO 20357
20253: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20254: LD_ADDR_VAR 0 2
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 25
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: ST_TO_ADDR
// if not tmp then
20290: LD_VAR 0 2
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20448
// un := tmp [ rand ( 1 , tmp ) ] ;
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_VAR 0 2
20308: PUSH
20309: LD_INT 1
20311: PPUSH
20312: LD_VAR 0 2
20316: PPUSH
20317: CALL_OW 12
20321: ARRAY
20322: ST_TO_ADDR
// if Crawls ( un ) then
20323: LD_VAR 0 3
20327: PPUSH
20328: CALL_OW 318
20332: IFFALSE 20343
// ComWalk ( un ) ;
20334: LD_VAR 0 3
20338: PPUSH
20339: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20343: LD_VAR 0 3
20347: PPUSH
20348: LD_INT 8
20350: PPUSH
20351: CALL_OW 336
// end ; 4 :
20355: GO 20448
20357: LD_INT 4
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20426
20365: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20366: LD_ADDR_VAR 0 2
20370: PUSH
20371: LD_INT 22
20373: PUSH
20374: LD_OWVAR 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: LD_INT 29
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PPUSH
20397: CALL_OW 69
20401: ST_TO_ADDR
// if not tmp then
20402: LD_VAR 0 2
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20448
// DestroyUnit ( tmp [ 1 ] ) ;
20411: LD_VAR 0 2
20415: PUSH
20416: LD_INT 1
20418: ARRAY
20419: PPUSH
20420: CALL_OW 65
// end ; 5 .. 7 :
20424: GO 20448
20426: LD_INT 5
20428: DOUBLE
20429: GREATEREQUAL
20430: IFFALSE 20438
20432: LD_INT 7
20434: DOUBLE
20435: LESSEQUAL
20436: IFTRUE 20440
20438: GO 20447
20440: POP
// StreamSibBomb ; end ;
20441: CALL 16698 0 0
20445: GO 20448
20447: POP
// end ;
20448: PPOPN 3
20450: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20451: LD_EXP 26
20455: PUSH
20456: LD_EXP 76
20460: AND
20461: IFFALSE 20617
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20471: LD_ADDR_VAR 0 2
20475: PUSH
20476: LD_INT 81
20478: PUSH
20479: LD_OWVAR 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 21
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 21
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL_OW 69
20524: ST_TO_ADDR
// if not tmp then
20525: LD_VAR 0 2
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20617
// p := 0 ;
20534: LD_ADDR_VAR 0 3
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20542: LD_INT 35
20544: PPUSH
20545: CALL_OW 67
// p := p + 1 ;
20549: LD_ADDR_VAR 0 3
20553: PUSH
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 1
20561: PLUS
20562: ST_TO_ADDR
// for i in tmp do
20563: LD_ADDR_VAR 0 1
20567: PUSH
20568: LD_VAR 0 2
20572: PUSH
20573: FOR_IN
20574: IFFALSE 20605
// if GetLives ( i ) < 1000 then
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 256
20585: PUSH
20586: LD_INT 1000
20588: LESS
20589: IFFALSE 20603
// SetLives ( i , 1000 ) ;
20591: LD_VAR 0 1
20595: PPUSH
20596: LD_INT 1000
20598: PPUSH
20599: CALL_OW 234
20603: GO 20573
20605: POP
20606: POP
// until p > 20 ;
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 20
20614: GREATER
20615: IFFALSE 20542
// end ;
20617: PPOPN 3
20619: END
// every 0 0$1 trigger StreamModeActive and sTime do
20620: LD_EXP 26
20624: PUSH
20625: LD_EXP 77
20629: AND
20630: IFFALSE 20665
20632: GO 20634
20634: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20635: LD_INT 28
20637: PPUSH
20638: LD_OWVAR 2
20642: PPUSH
20643: LD_INT 2
20645: PPUSH
20646: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20650: LD_INT 30
20652: PPUSH
20653: LD_OWVAR 2
20657: PPUSH
20658: LD_INT 2
20660: PPUSH
20661: CALL_OW 322
// end ;
20665: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20666: LD_EXP 26
20670: PUSH
20671: LD_EXP 78
20675: AND
20676: IFFALSE 20797
20678: GO 20680
20680: DISABLE
20681: LD_INT 0
20683: PPUSH
20684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_OWVAR 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 21
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 3
20714: PUSH
20715: LD_INT 23
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PPUSH
20734: CALL_OW 69
20738: ST_TO_ADDR
// if not tmp then
20739: LD_VAR 0 2
20743: NOT
20744: IFFALSE 20748
// exit ;
20746: GO 20797
// for i in tmp do
20748: LD_ADDR_VAR 0 1
20752: PUSH
20753: LD_VAR 0 2
20757: PUSH
20758: FOR_IN
20759: IFFALSE 20795
// begin if Crawls ( i ) then
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 318
20770: IFFALSE 20781
// ComWalk ( i ) ;
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 138
// SetClass ( i , 2 ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 2
20788: PPUSH
20789: CALL_OW 336
// end ;
20793: GO 20758
20795: POP
20796: POP
// end ;
20797: PPOPN 2
20799: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20800: LD_EXP 26
20804: PUSH
20805: LD_EXP 79
20809: AND
20810: IFFALSE 21091
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
20819: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20820: LD_OWVAR 2
20824: PPUSH
20825: LD_INT 9
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20838: LD_INT 9
20840: PPUSH
20841: LD_OWVAR 2
20845: PPUSH
20846: CALL_OW 343
// uc_side := 9 ;
20850: LD_ADDR_OWVAR 20
20854: PUSH
20855: LD_INT 9
20857: ST_TO_ADDR
// uc_nation := 2 ;
20858: LD_ADDR_OWVAR 21
20862: PUSH
20863: LD_INT 2
20865: ST_TO_ADDR
// hc_name := Dark Warrior ;
20866: LD_ADDR_OWVAR 26
20870: PUSH
20871: LD_STRING Dark Warrior
20873: ST_TO_ADDR
// hc_gallery :=  ;
20874: LD_ADDR_OWVAR 33
20878: PUSH
20879: LD_STRING 
20881: ST_TO_ADDR
// hc_noskilllimit := true ;
20882: LD_ADDR_OWVAR 76
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20890: LD_ADDR_OWVAR 31
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 30
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 30
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: ST_TO_ADDR
// un := CreateHuman ;
20913: LD_ADDR_VAR 0 3
20917: PUSH
20918: CALL_OW 44
20922: ST_TO_ADDR
// hc_noskilllimit := false ;
20923: LD_ADDR_OWVAR 76
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20931: LD_VAR 0 3
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 51
// p := 0 ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20951: LD_INT 35
20953: PPUSH
20954: CALL_OW 67
// p := p + 1 ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 2
20967: PUSH
20968: LD_INT 1
20970: PLUS
20971: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20972: LD_VAR 0 3
20976: PPUSH
20977: CALL_OW 256
20981: PUSH
20982: LD_INT 1000
20984: LESS
20985: IFFALSE 20999
// SetLives ( un , 1000 ) ;
20987: LD_VAR 0 3
20991: PPUSH
20992: LD_INT 1000
20994: PPUSH
20995: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 81
21006: PUSH
21007: LD_OWVAR 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 91
21018: PUSH
21019: LD_VAR 0 3
21023: PUSH
21024: LD_INT 30
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: PPUSH
21041: LD_VAR 0 3
21045: PPUSH
21046: CALL_OW 74
21050: PPUSH
21051: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21055: LD_VAR 0 2
21059: PUSH
21060: LD_INT 60
21062: GREATER
21063: PUSH
21064: LD_VAR 0 3
21068: PPUSH
21069: CALL_OW 301
21073: OR
21074: IFFALSE 20951
// if un then
21076: LD_VAR 0 3
21080: IFFALSE 21091
// RemoveUnit ( un ) ;
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 64
// end ;
21091: PPOPN 3
21093: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21094: LD_INT 0
21096: PPUSH
// case cmd of 301 :
21097: LD_VAR 0 1
21101: PUSH
21102: LD_INT 301
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21142
21110: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21111: LD_VAR 0 6
21115: PPUSH
21116: LD_VAR 0 7
21120: PPUSH
21121: LD_VAR 0 8
21125: PPUSH
21126: LD_VAR 0 4
21130: PPUSH
21131: LD_VAR 0 5
21135: PPUSH
21136: CALL 22343 0 5
21140: GO 21263
21142: LD_INT 302
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21187
21150: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21151: LD_VAR 0 6
21155: PPUSH
21156: LD_VAR 0 7
21160: PPUSH
21161: LD_VAR 0 8
21165: PPUSH
21166: LD_VAR 0 9
21170: PPUSH
21171: LD_VAR 0 4
21175: PPUSH
21176: LD_VAR 0 5
21180: PPUSH
21181: CALL 22434 0 6
21185: GO 21263
21187: LD_INT 303
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21232
21195: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21196: LD_VAR 0 6
21200: PPUSH
21201: LD_VAR 0 7
21205: PPUSH
21206: LD_VAR 0 8
21210: PPUSH
21211: LD_VAR 0 9
21215: PPUSH
21216: LD_VAR 0 4
21220: PPUSH
21221: LD_VAR 0 5
21225: PPUSH
21226: CALL 21268 0 6
21230: GO 21263
21232: LD_INT 304
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21262
21240: POP
// hHackTeleport ( unit , x , y ) ; end ;
21241: LD_VAR 0 2
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: LD_VAR 0 5
21255: PPUSH
21256: CALL 23027 0 3
21260: GO 21263
21262: POP
// end ;
21263: LD_VAR 0 12
21267: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21268: LD_INT 0
21270: PPUSH
21271: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21272: LD_VAR 0 1
21276: PUSH
21277: LD_INT 1
21279: LESS
21280: PUSH
21281: LD_VAR 0 1
21285: PUSH
21286: LD_INT 3
21288: GREATER
21289: OR
21290: PUSH
21291: LD_VAR 0 5
21295: PPUSH
21296: LD_VAR 0 6
21300: PPUSH
21301: CALL_OW 428
21305: OR
21306: IFFALSE 21310
// exit ;
21308: GO 22030
// uc_side := your_side ;
21310: LD_ADDR_OWVAR 20
21314: PUSH
21315: LD_OWVAR 2
21319: ST_TO_ADDR
// uc_nation := nation ;
21320: LD_ADDR_OWVAR 21
21324: PUSH
21325: LD_VAR 0 1
21329: ST_TO_ADDR
// bc_level = 1 ;
21330: LD_ADDR_OWVAR 43
21334: PUSH
21335: LD_INT 1
21337: ST_TO_ADDR
// case btype of 1 :
21338: LD_VAR 0 2
21342: PUSH
21343: LD_INT 1
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21362
21351: POP
// bc_type := b_depot ; 2 :
21352: LD_ADDR_OWVAR 42
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
21360: GO 21974
21362: LD_INT 2
21364: DOUBLE
21365: EQUAL
21366: IFTRUE 21370
21368: GO 21381
21370: POP
// bc_type := b_warehouse ; 3 :
21371: LD_ADDR_OWVAR 42
21375: PUSH
21376: LD_INT 1
21378: ST_TO_ADDR
21379: GO 21974
21381: LD_INT 3
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21400
21389: POP
// bc_type := b_lab ; 4 .. 9 :
21390: LD_ADDR_OWVAR 42
21394: PUSH
21395: LD_INT 6
21397: ST_TO_ADDR
21398: GO 21974
21400: LD_INT 4
21402: DOUBLE
21403: GREATEREQUAL
21404: IFFALSE 21412
21406: LD_INT 9
21408: DOUBLE
21409: LESSEQUAL
21410: IFTRUE 21414
21412: GO 21466
21414: POP
// begin bc_type := b_lab_half ;
21415: LD_ADDR_OWVAR 42
21419: PUSH
21420: LD_INT 7
21422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21423: LD_ADDR_OWVAR 44
21427: PUSH
21428: LD_INT 10
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_INT 12
21436: PUSH
21437: LD_INT 15
21439: PUSH
21440: LD_INT 14
21442: PUSH
21443: LD_INT 13
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: PUSH
21454: LD_VAR 0 2
21458: PUSH
21459: LD_INT 3
21461: MINUS
21462: ARRAY
21463: ST_TO_ADDR
// end ; 10 .. 13 :
21464: GO 21974
21466: LD_INT 10
21468: DOUBLE
21469: GREATEREQUAL
21470: IFFALSE 21478
21472: LD_INT 13
21474: DOUBLE
21475: LESSEQUAL
21476: IFTRUE 21480
21478: GO 21557
21480: POP
// begin bc_type := b_lab_full ;
21481: LD_ADDR_OWVAR 42
21485: PUSH
21486: LD_INT 8
21488: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21489: LD_ADDR_OWVAR 44
21493: PUSH
21494: LD_INT 10
21496: PUSH
21497: LD_INT 12
21499: PUSH
21500: LD_INT 14
21502: PUSH
21503: LD_INT 13
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 9
21519: MINUS
21520: ARRAY
21521: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21522: LD_ADDR_OWVAR 45
21526: PUSH
21527: LD_INT 11
21529: PUSH
21530: LD_INT 15
21532: PUSH
21533: LD_INT 12
21535: PUSH
21536: LD_INT 15
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_INT 9
21552: MINUS
21553: ARRAY
21554: ST_TO_ADDR
// end ; 14 :
21555: GO 21974
21557: LD_INT 14
21559: DOUBLE
21560: EQUAL
21561: IFTRUE 21565
21563: GO 21576
21565: POP
// bc_type := b_workshop ; 15 :
21566: LD_ADDR_OWVAR 42
21570: PUSH
21571: LD_INT 2
21573: ST_TO_ADDR
21574: GO 21974
21576: LD_INT 15
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21595
21584: POP
// bc_type := b_factory ; 16 :
21585: LD_ADDR_OWVAR 42
21589: PUSH
21590: LD_INT 3
21592: ST_TO_ADDR
21593: GO 21974
21595: LD_INT 16
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21614
21603: POP
// bc_type := b_ext_gun ; 17 :
21604: LD_ADDR_OWVAR 42
21608: PUSH
21609: LD_INT 17
21611: ST_TO_ADDR
21612: GO 21974
21614: LD_INT 17
21616: DOUBLE
21617: EQUAL
21618: IFTRUE 21622
21620: GO 21650
21622: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21623: LD_ADDR_OWVAR 42
21627: PUSH
21628: LD_INT 19
21630: PUSH
21631: LD_INT 23
21633: PUSH
21634: LD_INT 19
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: LD_VAR 0 1
21646: ARRAY
21647: ST_TO_ADDR
21648: GO 21974
21650: LD_INT 18
21652: DOUBLE
21653: EQUAL
21654: IFTRUE 21658
21656: GO 21669
21658: POP
// bc_type := b_ext_radar ; 19 :
21659: LD_ADDR_OWVAR 42
21663: PUSH
21664: LD_INT 20
21666: ST_TO_ADDR
21667: GO 21974
21669: LD_INT 19
21671: DOUBLE
21672: EQUAL
21673: IFTRUE 21677
21675: GO 21688
21677: POP
// bc_type := b_ext_radio ; 20 :
21678: LD_ADDR_OWVAR 42
21682: PUSH
21683: LD_INT 22
21685: ST_TO_ADDR
21686: GO 21974
21688: LD_INT 20
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21707
21696: POP
// bc_type := b_ext_siberium ; 21 :
21697: LD_ADDR_OWVAR 42
21701: PUSH
21702: LD_INT 21
21704: ST_TO_ADDR
21705: GO 21974
21707: LD_INT 21
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21726
21715: POP
// bc_type := b_ext_computer ; 22 :
21716: LD_ADDR_OWVAR 42
21720: PUSH
21721: LD_INT 24
21723: ST_TO_ADDR
21724: GO 21974
21726: LD_INT 22
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21745
21734: POP
// bc_type := b_ext_track ; 23 :
21735: LD_ADDR_OWVAR 42
21739: PUSH
21740: LD_INT 16
21742: ST_TO_ADDR
21743: GO 21974
21745: LD_INT 23
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21764
21753: POP
// bc_type := b_ext_laser ; 24 :
21754: LD_ADDR_OWVAR 42
21758: PUSH
21759: LD_INT 25
21761: ST_TO_ADDR
21762: GO 21974
21764: LD_INT 24
21766: DOUBLE
21767: EQUAL
21768: IFTRUE 21772
21770: GO 21783
21772: POP
// bc_type := b_control_tower ; 25 :
21773: LD_ADDR_OWVAR 42
21777: PUSH
21778: LD_INT 36
21780: ST_TO_ADDR
21781: GO 21974
21783: LD_INT 25
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 21802
21791: POP
// bc_type := b_breastwork ; 26 :
21792: LD_ADDR_OWVAR 42
21796: PUSH
21797: LD_INT 31
21799: ST_TO_ADDR
21800: GO 21974
21802: LD_INT 26
21804: DOUBLE
21805: EQUAL
21806: IFTRUE 21810
21808: GO 21821
21810: POP
// bc_type := b_bunker ; 27 :
21811: LD_ADDR_OWVAR 42
21815: PUSH
21816: LD_INT 32
21818: ST_TO_ADDR
21819: GO 21974
21821: LD_INT 27
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 21840
21829: POP
// bc_type := b_turret ; 28 :
21830: LD_ADDR_OWVAR 42
21834: PUSH
21835: LD_INT 33
21837: ST_TO_ADDR
21838: GO 21974
21840: LD_INT 28
21842: DOUBLE
21843: EQUAL
21844: IFTRUE 21848
21846: GO 21859
21848: POP
// bc_type := b_armoury ; 29 :
21849: LD_ADDR_OWVAR 42
21853: PUSH
21854: LD_INT 4
21856: ST_TO_ADDR
21857: GO 21974
21859: LD_INT 29
21861: DOUBLE
21862: EQUAL
21863: IFTRUE 21867
21865: GO 21878
21867: POP
// bc_type := b_barracks ; 30 :
21868: LD_ADDR_OWVAR 42
21872: PUSH
21873: LD_INT 5
21875: ST_TO_ADDR
21876: GO 21974
21878: LD_INT 30
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21897
21886: POP
// bc_type := b_solar_power ; 31 :
21887: LD_ADDR_OWVAR 42
21891: PUSH
21892: LD_INT 27
21894: ST_TO_ADDR
21895: GO 21974
21897: LD_INT 31
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 21916
21905: POP
// bc_type := b_oil_power ; 32 :
21906: LD_ADDR_OWVAR 42
21910: PUSH
21911: LD_INT 26
21913: ST_TO_ADDR
21914: GO 21974
21916: LD_INT 32
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 21935
21924: POP
// bc_type := b_siberite_power ; 33 :
21925: LD_ADDR_OWVAR 42
21929: PUSH
21930: LD_INT 28
21932: ST_TO_ADDR
21933: GO 21974
21935: LD_INT 33
21937: DOUBLE
21938: EQUAL
21939: IFTRUE 21943
21941: GO 21954
21943: POP
// bc_type := b_oil_mine ; 34 :
21944: LD_ADDR_OWVAR 42
21948: PUSH
21949: LD_INT 29
21951: ST_TO_ADDR
21952: GO 21974
21954: LD_INT 34
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 21973
21962: POP
// bc_type := b_siberite_mine ; end ;
21963: LD_ADDR_OWVAR 42
21967: PUSH
21968: LD_INT 30
21970: ST_TO_ADDR
21971: GO 21974
21973: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21974: LD_ADDR_VAR 0 8
21978: PUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: LD_VAR 0 6
21988: PPUSH
21989: LD_VAR 0 3
21993: PPUSH
21994: CALL_OW 47
21998: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21999: LD_OWVAR 42
22003: PUSH
22004: LD_INT 32
22006: PUSH
22007: LD_INT 33
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: IN
22014: IFFALSE 22030
// PlaceWeaponTurret ( b , weapon ) ;
22016: LD_VAR 0 8
22020: PPUSH
22021: LD_VAR 0 4
22025: PPUSH
22026: CALL_OW 431
// end ;
22030: LD_VAR 0 7
22034: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22041: LD_ADDR_VAR 0 4
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_OWVAR 2
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: LD_INT 30
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PPUSH
22090: CALL_OW 69
22094: ST_TO_ADDR
// if not tmp then
22095: LD_VAR 0 4
22099: NOT
22100: IFFALSE 22104
// exit ;
22102: GO 22163
// for i in tmp do
22104: LD_ADDR_VAR 0 2
22108: PUSH
22109: LD_VAR 0 4
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22161
// for j = 1 to 3 do
22117: LD_ADDR_VAR 0 3
22121: PUSH
22122: DOUBLE
22123: LD_INT 1
22125: DEC
22126: ST_TO_ADDR
22127: LD_INT 3
22129: PUSH
22130: FOR_TO
22131: IFFALSE 22157
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: CALL_OW 274
22142: PPUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: LD_INT 99999
22150: PPUSH
22151: CALL_OW 277
22155: GO 22130
22157: POP
22158: POP
22159: GO 22114
22161: POP
22162: POP
// end ;
22163: LD_VAR 0 1
22167: RET
// export function hHackSetLevel10 ; var i , j ; begin
22168: LD_INT 0
22170: PPUSH
22171: PPUSH
22172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22173: LD_ADDR_VAR 0 2
22177: PUSH
22178: LD_INT 21
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PPUSH
22188: CALL_OW 69
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22246
// if IsSelected ( i ) then
22196: LD_VAR 0 2
22200: PPUSH
22201: CALL_OW 306
22205: IFFALSE 22244
// begin for j := 1 to 4 do
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: DOUBLE
22213: LD_INT 1
22215: DEC
22216: ST_TO_ADDR
22217: LD_INT 4
22219: PUSH
22220: FOR_TO
22221: IFFALSE 22242
// SetSkill ( i , j , 10 ) ;
22223: LD_VAR 0 2
22227: PPUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 10
22235: PPUSH
22236: CALL_OW 237
22240: GO 22220
22242: POP
22243: POP
// end ;
22244: GO 22193
22246: POP
22247: POP
// end ;
22248: LD_VAR 0 1
22252: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 21
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22336
// begin for j := 1 to 4 do
22297: LD_ADDR_VAR 0 3
22301: PUSH
22302: DOUBLE
22303: LD_INT 1
22305: DEC
22306: ST_TO_ADDR
22307: LD_INT 4
22309: PUSH
22310: FOR_TO
22311: IFFALSE 22332
// SetSkill ( i , j , 10 ) ;
22313: LD_VAR 0 2
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 10
22325: PPUSH
22326: CALL_OW 237
22330: GO 22310
22332: POP
22333: POP
// end ;
22334: GO 22294
22336: POP
22337: POP
// end ;
22338: LD_VAR 0 1
22342: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22343: LD_INT 0
22345: PPUSH
// uc_side := your_side ;
22346: LD_ADDR_OWVAR 20
22350: PUSH
22351: LD_OWVAR 2
22355: ST_TO_ADDR
// uc_nation := nation ;
22356: LD_ADDR_OWVAR 21
22360: PUSH
22361: LD_VAR 0 1
22365: ST_TO_ADDR
// InitHc ;
22366: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22370: LD_INT 0
22372: PPUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22387: LD_VAR 0 4
22391: PPUSH
22392: LD_VAR 0 5
22396: PPUSH
22397: CALL_OW 428
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: IFFALSE 22429
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22407: CALL_OW 44
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: LD_INT 1
22424: PPUSH
22425: CALL_OW 48
// end ;
22429: LD_VAR 0 6
22433: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
// uc_side := your_side ;
22438: LD_ADDR_OWVAR 20
22442: PUSH
22443: LD_OWVAR 2
22447: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: LD_INT 4
22464: PUSH
22465: LD_INT 5
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: IN
22475: IFFALSE 22487
// uc_nation := nation_american else
22477: LD_ADDR_OWVAR 21
22481: PUSH
22482: LD_INT 1
22484: ST_TO_ADDR
22485: GO 22530
// if chassis in [ 11 , 12 , 13 , 14 ] then
22487: LD_VAR 0 1
22491: PUSH
22492: LD_INT 11
22494: PUSH
22495: LD_INT 12
22497: PUSH
22498: LD_INT 13
22500: PUSH
22501: LD_INT 14
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: IN
22510: IFFALSE 22522
// uc_nation := nation_arabian else
22512: LD_ADDR_OWVAR 21
22516: PUSH
22517: LD_INT 2
22519: ST_TO_ADDR
22520: GO 22530
// uc_nation := nation_russian ;
22522: LD_ADDR_OWVAR 21
22526: PUSH
22527: LD_INT 3
22529: ST_TO_ADDR
// vc_chassis := chassis ;
22530: LD_ADDR_OWVAR 37
22534: PUSH
22535: LD_VAR 0 1
22539: ST_TO_ADDR
// vc_engine := engine ;
22540: LD_ADDR_OWVAR 39
22544: PUSH
22545: LD_VAR 0 2
22549: ST_TO_ADDR
// vc_control := control ;
22550: LD_ADDR_OWVAR 38
22554: PUSH
22555: LD_VAR 0 3
22559: ST_TO_ADDR
// vc_weapon := weapon ;
22560: LD_ADDR_OWVAR 40
22564: PUSH
22565: LD_VAR 0 4
22569: ST_TO_ADDR
// un := CreateVehicle ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: CALL_OW 45
22579: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22580: LD_VAR 0 8
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: LD_INT 5
22590: PPUSH
22591: CALL_OW 12
22595: PPUSH
22596: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22600: LD_VAR 0 8
22604: PPUSH
22605: LD_VAR 0 5
22609: PPUSH
22610: LD_VAR 0 6
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: CALL_OW 48
// end ;
22622: LD_VAR 0 7
22626: RET
// export hInvincible ; every 1 do
22627: GO 22629
22629: DISABLE
// hInvincible := [ ] ;
22630: LD_ADDR_EXP 80
22634: PUSH
22635: EMPTY
22636: ST_TO_ADDR
22637: END
// every 10 do var i ;
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin enable ;
22644: ENABLE
// if not hInvincible then
22645: LD_EXP 80
22649: NOT
22650: IFFALSE 22654
// exit ;
22652: GO 22698
// for i in hInvincible do
22654: LD_ADDR_VAR 0 1
22658: PUSH
22659: LD_EXP 80
22663: PUSH
22664: FOR_IN
22665: IFFALSE 22696
// if GetLives ( i ) < 1000 then
22667: LD_VAR 0 1
22671: PPUSH
22672: CALL_OW 256
22676: PUSH
22677: LD_INT 1000
22679: LESS
22680: IFFALSE 22694
// SetLives ( i , 1000 ) ;
22682: LD_VAR 0 1
22686: PPUSH
22687: LD_INT 1000
22689: PPUSH
22690: CALL_OW 234
22694: GO 22664
22696: POP
22697: POP
// end ;
22698: PPOPN 1
22700: END
// export function hHackInvincible ; var i ; begin
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 21
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 21
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22805
// if IsSelected ( i ) then
22746: LD_VAR 0 2
22750: PPUSH
22751: CALL_OW 306
22755: IFFALSE 22803
// begin if i in hInvincible then
22757: LD_VAR 0 2
22761: PUSH
22762: LD_EXP 80
22766: IN
22767: IFFALSE 22787
// hInvincible := hInvincible diff i else
22769: LD_ADDR_EXP 80
22773: PUSH
22774: LD_EXP 80
22778: PUSH
22779: LD_VAR 0 2
22783: DIFF
22784: ST_TO_ADDR
22785: GO 22803
// hInvincible := hInvincible union i ;
22787: LD_ADDR_EXP 80
22791: PUSH
22792: LD_EXP 80
22796: PUSH
22797: LD_VAR 0 2
22801: UNION
22802: ST_TO_ADDR
// end ;
22803: GO 22743
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 1
22811: RET
// export function hHackInvisible ; var i , j ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_INT 21
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 69
22836: PUSH
22837: FOR_IN
22838: IFFALSE 22862
// if IsSelected ( i ) then
22840: LD_VAR 0 2
22844: PPUSH
22845: CALL_OW 306
22849: IFFALSE 22860
// ComForceInvisible ( i ) ;
22851: LD_VAR 0 2
22855: PPUSH
22856: CALL_OW 496
22860: GO 22837
22862: POP
22863: POP
// end ;
22864: LD_VAR 0 1
22868: RET
// export function hHackChangeYourSide ; begin
22869: LD_INT 0
22871: PPUSH
// if your_side = 8 then
22872: LD_OWVAR 2
22876: PUSH
22877: LD_INT 8
22879: EQUAL
22880: IFFALSE 22892
// your_side := 0 else
22882: LD_ADDR_OWVAR 2
22886: PUSH
22887: LD_INT 0
22889: ST_TO_ADDR
22890: GO 22906
// your_side := your_side + 1 ;
22892: LD_ADDR_OWVAR 2
22896: PUSH
22897: LD_OWVAR 2
22901: PUSH
22902: LD_INT 1
22904: PLUS
22905: ST_TO_ADDR
// end ;
22906: LD_VAR 0 1
22910: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
22915: PPUSH
// for i in all_units do
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_OWVAR 3
22925: PUSH
22926: FOR_IN
22927: IFFALSE 23005
// if IsSelected ( i ) then
22929: LD_VAR 0 2
22933: PPUSH
22934: CALL_OW 306
22938: IFFALSE 23003
// begin j := GetSide ( i ) ;
22940: LD_ADDR_VAR 0 3
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 255
22954: ST_TO_ADDR
// if j = 8 then
22955: LD_VAR 0 3
22959: PUSH
22960: LD_INT 8
22962: EQUAL
22963: IFFALSE 22975
// j := 0 else
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_INT 0
22972: ST_TO_ADDR
22973: GO 22989
// j := j + 1 ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_VAR 0 3
22984: PUSH
22985: LD_INT 1
22987: PLUS
22988: ST_TO_ADDR
// SetSide ( i , j ) ;
22989: LD_VAR 0 2
22993: PPUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: CALL_OW 235
// end ;
23003: GO 22926
23005: POP
23006: POP
// end ;
23007: LD_VAR 0 1
23011: RET
// export function hHackFog ; begin
23012: LD_INT 0
23014: PPUSH
// FogOff ( true ) ;
23015: LD_INT 1
23017: PPUSH
23018: CALL_OW 344
// end ;
23022: LD_VAR 0 1
23026: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23027: LD_INT 0
23029: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: LD_INT 1
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 483
// CenterOnXY ( x , y ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_VAR 0 3
23064: PPUSH
23065: CALL_OW 84
// end ; end_of_file end_of_file
23069: LD_VAR 0 4
23073: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23074: LD_INT 0
23076: PPUSH
23077: PPUSH
23078: PPUSH
23079: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 264
23089: PUSH
23090: LD_EXP 97
23094: EQUAL
23095: IFFALSE 23167
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23097: LD_INT 68
23099: PPUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 255
23109: PPUSH
23110: CALL_OW 321
23114: PUSH
23115: LD_INT 2
23117: EQUAL
23118: IFFALSE 23130
// eff := 70 else
23120: LD_ADDR_VAR 0 4
23124: PUSH
23125: LD_INT 70
23127: ST_TO_ADDR
23128: GO 23138
// eff := 30 ;
23130: LD_ADDR_VAR 0 4
23134: PUSH
23135: LD_INT 30
23137: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 250
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 251
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: CALL_OW 495
// end ; end ;
23167: LD_VAR 0 2
23171: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23172: LD_INT 0
23174: PPUSH
// end ;
23175: LD_VAR 0 4
23179: RET
// export function SOS_Command ( cmd ) ; begin
23180: LD_INT 0
23182: PPUSH
// end ;
23183: LD_VAR 0 2
23187: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23188: LD_INT 0
23190: PPUSH
// if cmd = 121 then
23191: LD_VAR 0 1
23195: PUSH
23196: LD_INT 121
23198: EQUAL
23199: IFFALSE 23201
// end ;
23201: LD_VAR 0 6
23205: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23206: LD_INT 0
23208: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23209: LD_VAR 0 1
23213: PUSH
23214: LD_INT 250
23216: EQUAL
23217: PUSH
23218: LD_VAR 0 2
23222: PPUSH
23223: CALL_OW 264
23227: PUSH
23228: LD_EXP 100
23232: EQUAL
23233: AND
23234: IFFALSE 23255
// MinerPlaceMine ( unit , x , y ) ;
23236: LD_VAR 0 2
23240: PPUSH
23241: LD_VAR 0 4
23245: PPUSH
23246: LD_VAR 0 5
23250: PPUSH
23251: CALL 25604 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23255: LD_VAR 0 1
23259: PUSH
23260: LD_INT 251
23262: EQUAL
23263: PUSH
23264: LD_VAR 0 2
23268: PPUSH
23269: CALL_OW 264
23273: PUSH
23274: LD_EXP 100
23278: EQUAL
23279: AND
23280: IFFALSE 23301
// MinerDetonateMine ( unit , x , y ) ;
23282: LD_VAR 0 2
23286: PPUSH
23287: LD_VAR 0 4
23291: PPUSH
23292: LD_VAR 0 5
23296: PPUSH
23297: CALL 25881 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23301: LD_VAR 0 1
23305: PUSH
23306: LD_INT 252
23308: EQUAL
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 264
23319: PUSH
23320: LD_EXP 100
23324: EQUAL
23325: AND
23326: IFFALSE 23347
// MinerCreateMinefield ( unit , x , y ) ;
23328: LD_VAR 0 2
23332: PPUSH
23333: LD_VAR 0 4
23337: PPUSH
23338: LD_VAR 0 5
23342: PPUSH
23343: CALL 26298 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23347: LD_VAR 0 1
23351: PUSH
23352: LD_INT 253
23354: EQUAL
23355: PUSH
23356: LD_VAR 0 2
23360: PPUSH
23361: CALL_OW 257
23365: PUSH
23366: LD_INT 5
23368: EQUAL
23369: AND
23370: IFFALSE 23391
// ComBinocular ( unit , x , y ) ;
23372: LD_VAR 0 2
23376: PPUSH
23377: LD_VAR 0 4
23381: PPUSH
23382: LD_VAR 0 5
23386: PPUSH
23387: CALL 26669 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23391: LD_VAR 0 1
23395: PUSH
23396: LD_INT 254
23398: EQUAL
23399: PUSH
23400: LD_VAR 0 2
23404: PPUSH
23405: CALL_OW 264
23409: PUSH
23410: LD_EXP 95
23414: EQUAL
23415: AND
23416: PUSH
23417: LD_VAR 0 3
23421: PPUSH
23422: CALL_OW 263
23426: PUSH
23427: LD_INT 3
23429: EQUAL
23430: AND
23431: IFFALSE 23447
// HackDestroyVehicle ( unit , selectedUnit ) ;
23433: LD_VAR 0 2
23437: PPUSH
23438: LD_VAR 0 3
23442: PPUSH
23443: CALL 24964 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23447: LD_VAR 0 1
23451: PUSH
23452: LD_INT 255
23454: EQUAL
23455: PUSH
23456: LD_VAR 0 2
23460: PPUSH
23461: CALL_OW 264
23465: PUSH
23466: LD_INT 14
23468: PUSH
23469: LD_INT 53
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: IN
23476: AND
23477: PUSH
23478: LD_VAR 0 4
23482: PPUSH
23483: LD_VAR 0 5
23487: PPUSH
23488: CALL_OW 488
23492: AND
23493: IFFALSE 23517
// CutTreeXYR ( unit , x , y , 12 ) ;
23495: LD_VAR 0 2
23499: PPUSH
23500: LD_VAR 0 4
23504: PPUSH
23505: LD_VAR 0 5
23509: PPUSH
23510: LD_INT 12
23512: PPUSH
23513: CALL 23530 0 4
// end ;
23517: LD_VAR 0 6
23521: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23522: LD_INT 0
23524: PPUSH
// end ;
23525: LD_VAR 0 4
23529: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23530: LD_INT 0
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
23537: PPUSH
23538: PPUSH
23539: PPUSH
23540: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23541: LD_VAR 0 1
23545: NOT
23546: PUSH
23547: LD_VAR 0 2
23551: PPUSH
23552: LD_VAR 0 3
23556: PPUSH
23557: CALL_OW 488
23561: NOT
23562: OR
23563: PUSH
23564: LD_VAR 0 4
23568: NOT
23569: OR
23570: IFFALSE 23574
// exit ;
23572: GO 23914
// list := [ ] ;
23574: LD_ADDR_VAR 0 13
23578: PUSH
23579: EMPTY
23580: ST_TO_ADDR
// if x - r < 0 then
23581: LD_VAR 0 2
23585: PUSH
23586: LD_VAR 0 4
23590: MINUS
23591: PUSH
23592: LD_INT 0
23594: LESS
23595: IFFALSE 23607
// min_x := 0 else
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_INT 0
23604: ST_TO_ADDR
23605: GO 23623
// min_x := x - r ;
23607: LD_ADDR_VAR 0 7
23611: PUSH
23612: LD_VAR 0 2
23616: PUSH
23617: LD_VAR 0 4
23621: MINUS
23622: ST_TO_ADDR
// if y - r < 0 then
23623: LD_VAR 0 3
23627: PUSH
23628: LD_VAR 0 4
23632: MINUS
23633: PUSH
23634: LD_INT 0
23636: LESS
23637: IFFALSE 23649
// min_y := 0 else
23639: LD_ADDR_VAR 0 8
23643: PUSH
23644: LD_INT 0
23646: ST_TO_ADDR
23647: GO 23665
// min_y := y - r ;
23649: LD_ADDR_VAR 0 8
23653: PUSH
23654: LD_VAR 0 3
23658: PUSH
23659: LD_VAR 0 4
23663: MINUS
23664: ST_TO_ADDR
// max_x := x + r ;
23665: LD_ADDR_VAR 0 9
23669: PUSH
23670: LD_VAR 0 2
23674: PUSH
23675: LD_VAR 0 4
23679: PLUS
23680: ST_TO_ADDR
// max_y := y + r ;
23681: LD_ADDR_VAR 0 10
23685: PUSH
23686: LD_VAR 0 3
23690: PUSH
23691: LD_VAR 0 4
23695: PLUS
23696: ST_TO_ADDR
// for _x = min_x to max_x do
23697: LD_ADDR_VAR 0 11
23701: PUSH
23702: DOUBLE
23703: LD_VAR 0 7
23707: DEC
23708: ST_TO_ADDR
23709: LD_VAR 0 9
23713: PUSH
23714: FOR_TO
23715: IFFALSE 23832
// for _y = min_y to max_y do
23717: LD_ADDR_VAR 0 12
23721: PUSH
23722: DOUBLE
23723: LD_VAR 0 8
23727: DEC
23728: ST_TO_ADDR
23729: LD_VAR 0 10
23733: PUSH
23734: FOR_TO
23735: IFFALSE 23828
// begin if not ValidHex ( _x , _y ) then
23737: LD_VAR 0 11
23741: PPUSH
23742: LD_VAR 0 12
23746: PPUSH
23747: CALL_OW 488
23751: NOT
23752: IFFALSE 23756
// continue ;
23754: GO 23734
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23756: LD_VAR 0 11
23760: PPUSH
23761: LD_VAR 0 12
23765: PPUSH
23766: CALL_OW 351
23770: PUSH
23771: LD_VAR 0 11
23775: PPUSH
23776: LD_VAR 0 12
23780: PPUSH
23781: CALL_OW 554
23785: AND
23786: IFFALSE 23826
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23788: LD_ADDR_VAR 0 13
23792: PUSH
23793: LD_VAR 0 13
23797: PPUSH
23798: LD_VAR 0 13
23802: PUSH
23803: LD_INT 1
23805: PLUS
23806: PPUSH
23807: LD_VAR 0 11
23811: PUSH
23812: LD_VAR 0 12
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PPUSH
23821: CALL_OW 2
23825: ST_TO_ADDR
// end ;
23826: GO 23734
23828: POP
23829: POP
23830: GO 23714
23832: POP
23833: POP
// if not list then
23834: LD_VAR 0 13
23838: NOT
23839: IFFALSE 23843
// exit ;
23841: GO 23914
// for i in list do
23843: LD_ADDR_VAR 0 6
23847: PUSH
23848: LD_VAR 0 13
23852: PUSH
23853: FOR_IN
23854: IFFALSE 23912
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23856: LD_VAR 0 1
23860: PPUSH
23861: LD_STRING M
23863: PUSH
23864: LD_VAR 0 6
23868: PUSH
23869: LD_INT 1
23871: ARRAY
23872: PUSH
23873: LD_VAR 0 6
23877: PUSH
23878: LD_INT 2
23880: ARRAY
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: PUSH
23903: EMPTY
23904: LIST
23905: PPUSH
23906: CALL_OW 447
23910: GO 23853
23912: POP
23913: POP
// end ;
23914: LD_VAR 0 5
23918: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23919: LD_EXP 83
23923: NOT
23924: IFFALSE 23974
23926: GO 23928
23928: DISABLE
// begin initHack := true ;
23929: LD_ADDR_EXP 83
23933: PUSH
23934: LD_INT 1
23936: ST_TO_ADDR
// hackTanks := [ ] ;
23937: LD_ADDR_EXP 84
23941: PUSH
23942: EMPTY
23943: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23944: LD_ADDR_EXP 85
23948: PUSH
23949: EMPTY
23950: ST_TO_ADDR
// hackLimit := 3 ;
23951: LD_ADDR_EXP 86
23955: PUSH
23956: LD_INT 3
23958: ST_TO_ADDR
// hackDist := 12 ;
23959: LD_ADDR_EXP 87
23963: PUSH
23964: LD_INT 12
23966: ST_TO_ADDR
// hackCounter := [ ] ;
23967: LD_ADDR_EXP 88
23971: PUSH
23972: EMPTY
23973: ST_TO_ADDR
// end ;
23974: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23975: LD_EXP 83
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_EXP 95
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PPUSH
23992: CALL_OW 69
23996: AND
23997: IFFALSE 24252
23999: GO 24001
24001: DISABLE
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
// begin enable ;
24006: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24007: LD_ADDR_VAR 0 1
24011: PUSH
24012: LD_INT 34
24014: PUSH
24015: LD_EXP 95
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PPUSH
24024: CALL_OW 69
24028: PUSH
24029: FOR_IN
24030: IFFALSE 24250
// begin if not i in hackTanks then
24032: LD_VAR 0 1
24036: PUSH
24037: LD_EXP 84
24041: IN
24042: NOT
24043: IFFALSE 24126
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24045: LD_ADDR_EXP 84
24049: PUSH
24050: LD_EXP 84
24054: PPUSH
24055: LD_EXP 84
24059: PUSH
24060: LD_INT 1
24062: PLUS
24063: PPUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 1
24073: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24074: LD_ADDR_EXP 85
24078: PUSH
24079: LD_EXP 85
24083: PPUSH
24084: LD_EXP 85
24088: PUSH
24089: LD_INT 1
24091: PLUS
24092: PPUSH
24093: EMPTY
24094: PPUSH
24095: CALL_OW 1
24099: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24100: LD_ADDR_EXP 88
24104: PUSH
24105: LD_EXP 88
24109: PPUSH
24110: LD_EXP 88
24114: PUSH
24115: LD_INT 1
24117: PLUS
24118: PPUSH
24119: EMPTY
24120: PPUSH
24121: CALL_OW 1
24125: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 302
24135: NOT
24136: IFFALSE 24149
// begin HackUnlinkAll ( i ) ;
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL 24255 0 1
// continue ;
24147: GO 24029
// end ; HackCheckCapturedStatus ( i ) ;
24149: LD_VAR 0 1
24153: PPUSH
24154: CALL 24698 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24158: LD_ADDR_VAR 0 2
24162: PUSH
24163: LD_INT 81
24165: PUSH
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 255
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 33
24182: PUSH
24183: LD_INT 3
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 91
24192: PUSH
24193: LD_VAR 0 1
24197: PUSH
24198: LD_EXP 87
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 50
24210: PUSH
24211: EMPTY
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 2
24229: NOT
24230: IFFALSE 24234
// continue ;
24232: GO 24029
// HackLink ( i , tmp ) ;
24234: LD_VAR 0 1
24238: PPUSH
24239: LD_VAR 0 2
24243: PPUSH
24244: CALL 24391 0 2
// end ;
24248: GO 24029
24250: POP
24251: POP
// end ;
24252: PPOPN 2
24254: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24255: LD_INT 0
24257: PPUSH
24258: PPUSH
24259: PPUSH
// if not hack in hackTanks then
24260: LD_VAR 0 1
24264: PUSH
24265: LD_EXP 84
24269: IN
24270: NOT
24271: IFFALSE 24275
// exit ;
24273: GO 24386
// index := GetElementIndex ( hackTanks , hack ) ;
24275: LD_ADDR_VAR 0 4
24279: PUSH
24280: LD_EXP 84
24284: PPUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL 31964 0 2
24294: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24295: LD_EXP 85
24299: PUSH
24300: LD_VAR 0 4
24304: ARRAY
24305: IFFALSE 24386
// begin for i in hackTanksCaptured [ index ] do
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_EXP 85
24316: PUSH
24317: LD_VAR 0 4
24321: ARRAY
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24350
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24326: LD_VAR 0 3
24330: PUSH
24331: LD_INT 1
24333: ARRAY
24334: PPUSH
24335: LD_VAR 0 3
24339: PUSH
24340: LD_INT 2
24342: ARRAY
24343: PPUSH
24344: CALL_OW 235
24348: GO 24323
24350: POP
24351: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24352: LD_ADDR_EXP 85
24356: PUSH
24357: LD_EXP 85
24361: PPUSH
24362: LD_VAR 0 4
24366: PPUSH
24367: EMPTY
24368: PPUSH
24369: CALL_OW 1
24373: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_INT 0
24381: PPUSH
24382: CALL_OW 505
// end ; end ;
24386: LD_VAR 0 2
24390: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24391: LD_INT 0
24393: PPUSH
24394: PPUSH
24395: PPUSH
// if not hack in hackTanks or not vehicles then
24396: LD_VAR 0 1
24400: PUSH
24401: LD_EXP 84
24405: IN
24406: NOT
24407: PUSH
24408: LD_VAR 0 2
24412: NOT
24413: OR
24414: IFFALSE 24418
// exit ;
24416: GO 24693
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_VAR 0 1
24427: PPUSH
24428: LD_VAR 0 2
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: LD_INT 1
24438: PPUSH
24439: CALL 32614 0 4
24443: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24444: LD_ADDR_VAR 0 5
24448: PUSH
24449: LD_EXP 84
24453: PPUSH
24454: LD_VAR 0 1
24458: PPUSH
24459: CALL 31964 0 2
24463: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24464: LD_EXP 85
24468: PUSH
24469: LD_VAR 0 5
24473: ARRAY
24474: PUSH
24475: LD_EXP 86
24479: LESS
24480: IFFALSE 24669
// begin for i := 1 to vehicles do
24482: LD_ADDR_VAR 0 4
24486: PUSH
24487: DOUBLE
24488: LD_INT 1
24490: DEC
24491: ST_TO_ADDR
24492: LD_VAR 0 2
24496: PUSH
24497: FOR_TO
24498: IFFALSE 24667
// begin if hackTanksCaptured [ index ] = hackLimit then
24500: LD_EXP 85
24504: PUSH
24505: LD_VAR 0 5
24509: ARRAY
24510: PUSH
24511: LD_EXP 86
24515: EQUAL
24516: IFFALSE 24520
// break ;
24518: GO 24667
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24520: LD_ADDR_EXP 88
24524: PUSH
24525: LD_EXP 88
24529: PPUSH
24530: LD_VAR 0 5
24534: PPUSH
24535: LD_EXP 88
24539: PUSH
24540: LD_VAR 0 5
24544: ARRAY
24545: PUSH
24546: LD_INT 1
24548: PLUS
24549: PPUSH
24550: CALL_OW 1
24554: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24555: LD_ADDR_EXP 85
24559: PUSH
24560: LD_EXP 85
24564: PPUSH
24565: LD_VAR 0 5
24569: PUSH
24570: LD_EXP 85
24574: PUSH
24575: LD_VAR 0 5
24579: ARRAY
24580: PUSH
24581: LD_INT 1
24583: PLUS
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PPUSH
24589: LD_VAR 0 2
24593: PUSH
24594: LD_VAR 0 4
24598: ARRAY
24599: PUSH
24600: LD_VAR 0 2
24604: PUSH
24605: LD_VAR 0 4
24609: ARRAY
24610: PPUSH
24611: CALL_OW 255
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PPUSH
24620: CALL 32179 0 3
24624: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24625: LD_VAR 0 2
24629: PUSH
24630: LD_VAR 0 4
24634: ARRAY
24635: PPUSH
24636: LD_VAR 0 1
24640: PPUSH
24641: CALL_OW 255
24645: PPUSH
24646: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24650: LD_VAR 0 2
24654: PUSH
24655: LD_VAR 0 4
24659: ARRAY
24660: PPUSH
24661: CALL_OW 141
// end ;
24665: GO 24497
24667: POP
24668: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24669: LD_VAR 0 1
24673: PPUSH
24674: LD_EXP 85
24678: PUSH
24679: LD_VAR 0 5
24683: ARRAY
24684: PUSH
24685: LD_INT 0
24687: PLUS
24688: PPUSH
24689: CALL_OW 505
// end ;
24693: LD_VAR 0 3
24697: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24698: LD_INT 0
24700: PPUSH
24701: PPUSH
24702: PPUSH
24703: PPUSH
// if not hack in hackTanks then
24704: LD_VAR 0 1
24708: PUSH
24709: LD_EXP 84
24713: IN
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24959
// index := GetElementIndex ( hackTanks , hack ) ;
24719: LD_ADDR_VAR 0 4
24723: PUSH
24724: LD_EXP 84
24728: PPUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: CALL 31964 0 2
24738: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: DOUBLE
24745: LD_EXP 85
24749: PUSH
24750: LD_VAR 0 4
24754: ARRAY
24755: INC
24756: ST_TO_ADDR
24757: LD_INT 1
24759: PUSH
24760: FOR_DOWNTO
24761: IFFALSE 24933
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24763: LD_ADDR_VAR 0 5
24767: PUSH
24768: LD_EXP 85
24772: PUSH
24773: LD_VAR 0 4
24777: ARRAY
24778: PUSH
24779: LD_VAR 0 3
24783: ARRAY
24784: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24785: LD_VAR 0 5
24789: PUSH
24790: LD_INT 1
24792: ARRAY
24793: PPUSH
24794: CALL_OW 302
24798: NOT
24799: PUSH
24800: LD_VAR 0 5
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PPUSH
24809: CALL_OW 255
24813: PUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 255
24823: NONEQUAL
24824: OR
24825: IFFALSE 24931
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24827: LD_VAR 0 5
24831: PUSH
24832: LD_INT 1
24834: ARRAY
24835: PPUSH
24836: CALL_OW 305
24840: PUSH
24841: LD_VAR 0 5
24845: PUSH
24846: LD_INT 1
24848: ARRAY
24849: PPUSH
24850: CALL_OW 255
24854: PUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 255
24864: EQUAL
24865: AND
24866: IFFALSE 24890
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24868: LD_VAR 0 5
24872: PUSH
24873: LD_INT 1
24875: ARRAY
24876: PPUSH
24877: LD_VAR 0 5
24881: PUSH
24882: LD_INT 2
24884: ARRAY
24885: PPUSH
24886: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24890: LD_ADDR_EXP 85
24894: PUSH
24895: LD_EXP 85
24899: PPUSH
24900: LD_VAR 0 4
24904: PPUSH
24905: LD_EXP 85
24909: PUSH
24910: LD_VAR 0 4
24914: ARRAY
24915: PPUSH
24916: LD_VAR 0 3
24920: PPUSH
24921: CALL_OW 3
24925: PPUSH
24926: CALL_OW 1
24930: ST_TO_ADDR
// end ; end ;
24931: GO 24760
24933: POP
24934: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24935: LD_VAR 0 1
24939: PPUSH
24940: LD_EXP 85
24944: PUSH
24945: LD_VAR 0 4
24949: ARRAY
24950: PUSH
24951: LD_INT 0
24953: PLUS
24954: PPUSH
24955: CALL_OW 505
// end ;
24959: LD_VAR 0 2
24963: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24964: LD_INT 0
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
// if not hack in hackTanks then
24970: LD_VAR 0 1
24974: PUSH
24975: LD_EXP 84
24979: IN
24980: NOT
24981: IFFALSE 24985
// exit ;
24983: GO 25070
// index := GetElementIndex ( hackTanks , hack ) ;
24985: LD_ADDR_VAR 0 5
24989: PUSH
24990: LD_EXP 84
24994: PPUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL 31964 0 2
25004: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25005: LD_ADDR_VAR 0 4
25009: PUSH
25010: DOUBLE
25011: LD_INT 1
25013: DEC
25014: ST_TO_ADDR
25015: LD_EXP 85
25019: PUSH
25020: LD_VAR 0 5
25024: ARRAY
25025: PUSH
25026: FOR_TO
25027: IFFALSE 25068
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25029: LD_EXP 85
25033: PUSH
25034: LD_VAR 0 5
25038: ARRAY
25039: PUSH
25040: LD_VAR 0 4
25044: ARRAY
25045: PUSH
25046: LD_INT 1
25048: ARRAY
25049: PUSH
25050: LD_VAR 0 2
25054: EQUAL
25055: IFFALSE 25066
// KillUnit ( vehicle ) ;
25057: LD_VAR 0 2
25061: PPUSH
25062: CALL_OW 66
25066: GO 25026
25068: POP
25069: POP
// end ;
25070: LD_VAR 0 3
25074: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25075: LD_EXP 89
25079: NOT
25080: IFFALSE 25115
25082: GO 25084
25084: DISABLE
// begin initMiner := true ;
25085: LD_ADDR_EXP 89
25089: PUSH
25090: LD_INT 1
25092: ST_TO_ADDR
// minersList := [ ] ;
25093: LD_ADDR_EXP 90
25097: PUSH
25098: EMPTY
25099: ST_TO_ADDR
// minerMinesList := [ ] ;
25100: LD_ADDR_EXP 91
25104: PUSH
25105: EMPTY
25106: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25107: LD_ADDR_EXP 92
25111: PUSH
25112: LD_INT 5
25114: ST_TO_ADDR
// end ;
25115: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25116: LD_EXP 89
25120: PUSH
25121: LD_INT 34
25123: PUSH
25124: LD_EXP 100
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: AND
25138: IFFALSE 25601
25140: GO 25142
25142: DISABLE
25143: LD_INT 0
25145: PPUSH
25146: PPUSH
25147: PPUSH
25148: PPUSH
// begin enable ;
25149: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25150: LD_ADDR_VAR 0 1
25154: PUSH
25155: LD_INT 34
25157: PUSH
25158: LD_EXP 100
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PPUSH
25167: CALL_OW 69
25171: PUSH
25172: FOR_IN
25173: IFFALSE 25245
// begin if not i in minersList then
25175: LD_VAR 0 1
25179: PUSH
25180: LD_EXP 90
25184: IN
25185: NOT
25186: IFFALSE 25243
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25188: LD_ADDR_EXP 90
25192: PUSH
25193: LD_EXP 90
25197: PPUSH
25198: LD_EXP 90
25202: PUSH
25203: LD_INT 1
25205: PLUS
25206: PPUSH
25207: LD_VAR 0 1
25211: PPUSH
25212: CALL_OW 1
25216: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25217: LD_ADDR_EXP 91
25221: PUSH
25222: LD_EXP 91
25226: PPUSH
25227: LD_EXP 91
25231: PUSH
25232: LD_INT 1
25234: PLUS
25235: PPUSH
25236: EMPTY
25237: PPUSH
25238: CALL_OW 1
25242: ST_TO_ADDR
// end end ;
25243: GO 25172
25245: POP
25246: POP
// for i := minerMinesList downto 1 do
25247: LD_ADDR_VAR 0 1
25251: PUSH
25252: DOUBLE
25253: LD_EXP 91
25257: INC
25258: ST_TO_ADDR
25259: LD_INT 1
25261: PUSH
25262: FOR_DOWNTO
25263: IFFALSE 25599
// begin if IsLive ( minersList [ i ] ) then
25265: LD_EXP 90
25269: PUSH
25270: LD_VAR 0 1
25274: ARRAY
25275: PPUSH
25276: CALL_OW 300
25280: IFFALSE 25308
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25282: LD_EXP 90
25286: PUSH
25287: LD_VAR 0 1
25291: ARRAY
25292: PPUSH
25293: LD_EXP 91
25297: PUSH
25298: LD_VAR 0 1
25302: ARRAY
25303: PPUSH
25304: CALL_OW 505
// if not minerMinesList [ i ] then
25308: LD_EXP 91
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: NOT
25319: IFFALSE 25323
// continue ;
25321: GO 25262
// for j := minerMinesList [ i ] downto 1 do
25323: LD_ADDR_VAR 0 2
25327: PUSH
25328: DOUBLE
25329: LD_EXP 91
25333: PUSH
25334: LD_VAR 0 1
25338: ARRAY
25339: INC
25340: ST_TO_ADDR
25341: LD_INT 1
25343: PUSH
25344: FOR_DOWNTO
25345: IFFALSE 25595
// begin side := GetSide ( minersList [ i ] ) ;
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_EXP 90
25356: PUSH
25357: LD_VAR 0 1
25361: ARRAY
25362: PPUSH
25363: CALL_OW 255
25367: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25368: LD_ADDR_VAR 0 4
25372: PUSH
25373: LD_EXP 91
25377: PUSH
25378: LD_VAR 0 1
25382: ARRAY
25383: PUSH
25384: LD_VAR 0 2
25388: ARRAY
25389: PUSH
25390: LD_INT 1
25392: ARRAY
25393: PPUSH
25394: LD_EXP 91
25398: PUSH
25399: LD_VAR 0 1
25403: ARRAY
25404: PUSH
25405: LD_VAR 0 2
25409: ARRAY
25410: PUSH
25411: LD_INT 2
25413: ARRAY
25414: PPUSH
25415: CALL_OW 428
25419: ST_TO_ADDR
// if not tmp then
25420: LD_VAR 0 4
25424: NOT
25425: IFFALSE 25429
// continue ;
25427: GO 25344
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25429: LD_VAR 0 4
25433: PUSH
25434: LD_INT 81
25436: PUSH
25437: LD_VAR 0 3
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: IN
25451: PUSH
25452: LD_EXP 91
25456: PUSH
25457: LD_VAR 0 1
25461: ARRAY
25462: PUSH
25463: LD_VAR 0 2
25467: ARRAY
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: PPUSH
25473: LD_EXP 91
25477: PUSH
25478: LD_VAR 0 1
25482: ARRAY
25483: PUSH
25484: LD_VAR 0 2
25488: ARRAY
25489: PUSH
25490: LD_INT 2
25492: ARRAY
25493: PPUSH
25494: CALL_OW 458
25498: AND
25499: IFFALSE 25593
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25501: LD_EXP 91
25505: PUSH
25506: LD_VAR 0 1
25510: ARRAY
25511: PUSH
25512: LD_VAR 0 2
25516: ARRAY
25517: PUSH
25518: LD_INT 1
25520: ARRAY
25521: PPUSH
25522: LD_EXP 91
25526: PUSH
25527: LD_VAR 0 1
25531: ARRAY
25532: PUSH
25533: LD_VAR 0 2
25537: ARRAY
25538: PUSH
25539: LD_INT 2
25541: ARRAY
25542: PPUSH
25543: LD_VAR 0 3
25547: PPUSH
25548: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25552: LD_ADDR_EXP 91
25556: PUSH
25557: LD_EXP 91
25561: PPUSH
25562: LD_VAR 0 1
25566: PPUSH
25567: LD_EXP 91
25571: PUSH
25572: LD_VAR 0 1
25576: ARRAY
25577: PPUSH
25578: LD_VAR 0 2
25582: PPUSH
25583: CALL_OW 3
25587: PPUSH
25588: CALL_OW 1
25592: ST_TO_ADDR
// end ; end ;
25593: GO 25344
25595: POP
25596: POP
// end ;
25597: GO 25262
25599: POP
25600: POP
// end ;
25601: PPOPN 4
25603: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25604: LD_INT 0
25606: PPUSH
25607: PPUSH
// result := false ;
25608: LD_ADDR_VAR 0 4
25612: PUSH
25613: LD_INT 0
25615: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25616: LD_VAR 0 1
25620: PPUSH
25621: CALL_OW 264
25625: PUSH
25626: LD_EXP 100
25630: EQUAL
25631: NOT
25632: IFFALSE 25636
// exit ;
25634: GO 25876
// index := GetElementIndex ( minersList , unit ) ;
25636: LD_ADDR_VAR 0 5
25640: PUSH
25641: LD_EXP 90
25645: PPUSH
25646: LD_VAR 0 1
25650: PPUSH
25651: CALL 31964 0 2
25655: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25656: LD_EXP 91
25660: PUSH
25661: LD_VAR 0 5
25665: ARRAY
25666: PUSH
25667: LD_EXP 92
25671: GREATEREQUAL
25672: IFFALSE 25676
// exit ;
25674: GO 25876
// ComMoveXY ( unit , x , y ) ;
25676: LD_VAR 0 1
25680: PPUSH
25681: LD_VAR 0 2
25685: PPUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25695: LD_INT 35
25697: PPUSH
25698: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25702: LD_VAR 0 1
25706: PPUSH
25707: LD_VAR 0 2
25711: PPUSH
25712: LD_VAR 0 3
25716: PPUSH
25717: CALL 62348 0 3
25721: NOT
25722: PUSH
25723: LD_VAR 0 1
25727: PPUSH
25728: CALL_OW 314
25732: AND
25733: IFFALSE 25737
// exit ;
25735: GO 25876
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 3
25746: PPUSH
25747: CALL_OW 428
25751: PUSH
25752: LD_VAR 0 1
25756: EQUAL
25757: PUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 314
25767: NOT
25768: AND
25769: IFFALSE 25695
// PlaySoundXY ( x , y , PlantMine ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: LD_VAR 0 3
25780: PPUSH
25781: LD_STRING PlantMine
25783: PPUSH
25784: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25788: LD_VAR 0 2
25792: PPUSH
25793: LD_VAR 0 3
25797: PPUSH
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL_OW 255
25807: PPUSH
25808: LD_INT 0
25810: PPUSH
25811: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25815: LD_ADDR_EXP 91
25819: PUSH
25820: LD_EXP 91
25824: PPUSH
25825: LD_VAR 0 5
25829: PUSH
25830: LD_EXP 91
25834: PUSH
25835: LD_VAR 0 5
25839: ARRAY
25840: PUSH
25841: LD_INT 1
25843: PLUS
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PPUSH
25849: LD_VAR 0 2
25853: PUSH
25854: LD_VAR 0 3
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL 32179 0 3
25867: ST_TO_ADDR
// result := true ;
25868: LD_ADDR_VAR 0 4
25872: PUSH
25873: LD_INT 1
25875: ST_TO_ADDR
// end ;
25876: LD_VAR 0 4
25880: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25881: LD_INT 0
25883: PPUSH
25884: PPUSH
25885: PPUSH
// if not unit in minersList then
25886: LD_VAR 0 1
25890: PUSH
25891: LD_EXP 90
25895: IN
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 26293
// index := GetElementIndex ( minersList , unit ) ;
25901: LD_ADDR_VAR 0 6
25905: PUSH
25906: LD_EXP 90
25910: PPUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL 31964 0 2
25920: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25921: LD_ADDR_VAR 0 5
25925: PUSH
25926: DOUBLE
25927: LD_EXP 91
25931: PUSH
25932: LD_VAR 0 6
25936: ARRAY
25937: INC
25938: ST_TO_ADDR
25939: LD_INT 1
25941: PUSH
25942: FOR_DOWNTO
25943: IFFALSE 26104
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25945: LD_EXP 91
25949: PUSH
25950: LD_VAR 0 6
25954: ARRAY
25955: PUSH
25956: LD_VAR 0 5
25960: ARRAY
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PUSH
25966: LD_VAR 0 2
25970: EQUAL
25971: PUSH
25972: LD_EXP 91
25976: PUSH
25977: LD_VAR 0 6
25981: ARRAY
25982: PUSH
25983: LD_VAR 0 5
25987: ARRAY
25988: PUSH
25989: LD_INT 2
25991: ARRAY
25992: PUSH
25993: LD_VAR 0 3
25997: EQUAL
25998: AND
25999: IFFALSE 26102
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26001: LD_EXP 91
26005: PUSH
26006: LD_VAR 0 6
26010: ARRAY
26011: PUSH
26012: LD_VAR 0 5
26016: ARRAY
26017: PUSH
26018: LD_INT 1
26020: ARRAY
26021: PPUSH
26022: LD_EXP 91
26026: PUSH
26027: LD_VAR 0 6
26031: ARRAY
26032: PUSH
26033: LD_VAR 0 5
26037: ARRAY
26038: PUSH
26039: LD_INT 2
26041: ARRAY
26042: PPUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 255
26052: PPUSH
26053: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26057: LD_ADDR_EXP 91
26061: PUSH
26062: LD_EXP 91
26066: PPUSH
26067: LD_VAR 0 6
26071: PPUSH
26072: LD_EXP 91
26076: PUSH
26077: LD_VAR 0 6
26081: ARRAY
26082: PPUSH
26083: LD_VAR 0 5
26087: PPUSH
26088: CALL_OW 3
26092: PPUSH
26093: CALL_OW 1
26097: ST_TO_ADDR
// exit ;
26098: POP
26099: POP
26100: GO 26293
// end ; end ;
26102: GO 25942
26104: POP
26105: POP
// for i := minerMinesList [ index ] downto 1 do
26106: LD_ADDR_VAR 0 5
26110: PUSH
26111: DOUBLE
26112: LD_EXP 91
26116: PUSH
26117: LD_VAR 0 6
26121: ARRAY
26122: INC
26123: ST_TO_ADDR
26124: LD_INT 1
26126: PUSH
26127: FOR_DOWNTO
26128: IFFALSE 26291
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26130: LD_EXP 91
26134: PUSH
26135: LD_VAR 0 6
26139: ARRAY
26140: PUSH
26141: LD_VAR 0 5
26145: ARRAY
26146: PUSH
26147: LD_INT 1
26149: ARRAY
26150: PPUSH
26151: LD_EXP 91
26155: PUSH
26156: LD_VAR 0 6
26160: ARRAY
26161: PUSH
26162: LD_VAR 0 5
26166: ARRAY
26167: PUSH
26168: LD_INT 2
26170: ARRAY
26171: PPUSH
26172: LD_VAR 0 2
26176: PPUSH
26177: LD_VAR 0 3
26181: PPUSH
26182: CALL_OW 298
26186: PUSH
26187: LD_INT 6
26189: LESS
26190: IFFALSE 26289
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26192: LD_EXP 91
26196: PUSH
26197: LD_VAR 0 6
26201: ARRAY
26202: PUSH
26203: LD_VAR 0 5
26207: ARRAY
26208: PUSH
26209: LD_INT 1
26211: ARRAY
26212: PPUSH
26213: LD_EXP 91
26217: PUSH
26218: LD_VAR 0 6
26222: ARRAY
26223: PUSH
26224: LD_VAR 0 5
26228: ARRAY
26229: PUSH
26230: LD_INT 2
26232: ARRAY
26233: PPUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 255
26243: PPUSH
26244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26248: LD_ADDR_EXP 91
26252: PUSH
26253: LD_EXP 91
26257: PPUSH
26258: LD_VAR 0 6
26262: PPUSH
26263: LD_EXP 91
26267: PUSH
26268: LD_VAR 0 6
26272: ARRAY
26273: PPUSH
26274: LD_VAR 0 5
26278: PPUSH
26279: CALL_OW 3
26283: PPUSH
26284: CALL_OW 1
26288: ST_TO_ADDR
// end ; end ;
26289: GO 26127
26291: POP
26292: POP
// end ;
26293: LD_VAR 0 4
26297: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26298: LD_INT 0
26300: PPUSH
26301: PPUSH
26302: PPUSH
26303: PPUSH
26304: PPUSH
26305: PPUSH
26306: PPUSH
26307: PPUSH
26308: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26309: LD_VAR 0 1
26313: PPUSH
26314: CALL_OW 264
26318: PUSH
26319: LD_EXP 100
26323: EQUAL
26324: NOT
26325: PUSH
26326: LD_VAR 0 1
26330: PUSH
26331: LD_EXP 90
26335: IN
26336: NOT
26337: OR
26338: IFFALSE 26342
// exit ;
26340: GO 26664
// index := GetElementIndex ( minersList , unit ) ;
26342: LD_ADDR_VAR 0 6
26346: PUSH
26347: LD_EXP 90
26351: PPUSH
26352: LD_VAR 0 1
26356: PPUSH
26357: CALL 31964 0 2
26361: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26362: LD_ADDR_VAR 0 8
26366: PUSH
26367: LD_EXP 92
26371: PUSH
26372: LD_EXP 91
26376: PUSH
26377: LD_VAR 0 6
26381: ARRAY
26382: MINUS
26383: ST_TO_ADDR
// if not minesFreeAmount then
26384: LD_VAR 0 8
26388: NOT
26389: IFFALSE 26393
// exit ;
26391: GO 26664
// tmp := [ ] ;
26393: LD_ADDR_VAR 0 7
26397: PUSH
26398: EMPTY
26399: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26400: LD_ADDR_VAR 0 5
26404: PUSH
26405: DOUBLE
26406: LD_INT 1
26408: DEC
26409: ST_TO_ADDR
26410: LD_VAR 0 8
26414: PUSH
26415: FOR_TO
26416: IFFALSE 26611
// begin _d := rand ( 0 , 5 ) ;
26418: LD_ADDR_VAR 0 11
26422: PUSH
26423: LD_INT 0
26425: PPUSH
26426: LD_INT 5
26428: PPUSH
26429: CALL_OW 12
26433: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26434: LD_ADDR_VAR 0 12
26438: PUSH
26439: LD_INT 2
26441: PPUSH
26442: LD_INT 6
26444: PPUSH
26445: CALL_OW 12
26449: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26450: LD_ADDR_VAR 0 9
26454: PUSH
26455: LD_VAR 0 2
26459: PPUSH
26460: LD_VAR 0 11
26464: PPUSH
26465: LD_VAR 0 12
26469: PPUSH
26470: CALL_OW 272
26474: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26475: LD_ADDR_VAR 0 10
26479: PUSH
26480: LD_VAR 0 3
26484: PPUSH
26485: LD_VAR 0 11
26489: PPUSH
26490: LD_VAR 0 12
26494: PPUSH
26495: CALL_OW 273
26499: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26500: LD_VAR 0 9
26504: PPUSH
26505: LD_VAR 0 10
26509: PPUSH
26510: CALL_OW 488
26514: PUSH
26515: LD_VAR 0 9
26519: PUSH
26520: LD_VAR 0 10
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_VAR 0 7
26533: IN
26534: NOT
26535: AND
26536: PUSH
26537: LD_VAR 0 9
26541: PPUSH
26542: LD_VAR 0 10
26546: PPUSH
26547: CALL_OW 458
26551: NOT
26552: AND
26553: IFFALSE 26595
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26555: LD_ADDR_VAR 0 7
26559: PUSH
26560: LD_VAR 0 7
26564: PPUSH
26565: LD_VAR 0 7
26569: PUSH
26570: LD_INT 1
26572: PLUS
26573: PPUSH
26574: LD_VAR 0 9
26578: PUSH
26579: LD_VAR 0 10
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PPUSH
26588: CALL_OW 1
26592: ST_TO_ADDR
26593: GO 26609
// i := i - 1 ;
26595: LD_ADDR_VAR 0 5
26599: PUSH
26600: LD_VAR 0 5
26604: PUSH
26605: LD_INT 1
26607: MINUS
26608: ST_TO_ADDR
// end ;
26609: GO 26415
26611: POP
26612: POP
// for i in tmp do
26613: LD_ADDR_VAR 0 5
26617: PUSH
26618: LD_VAR 0 7
26622: PUSH
26623: FOR_IN
26624: IFFALSE 26662
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26626: LD_VAR 0 1
26630: PPUSH
26631: LD_VAR 0 5
26635: PUSH
26636: LD_INT 1
26638: ARRAY
26639: PPUSH
26640: LD_VAR 0 5
26644: PUSH
26645: LD_INT 2
26647: ARRAY
26648: PPUSH
26649: CALL 25604 0 3
26653: NOT
26654: IFFALSE 26660
// exit ;
26656: POP
26657: POP
26658: GO 26664
26660: GO 26623
26662: POP
26663: POP
// end ;
26664: LD_VAR 0 4
26668: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26669: LD_INT 0
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
// if not GetClass ( unit ) = class_sniper then
26678: LD_VAR 0 1
26682: PPUSH
26683: CALL_OW 257
26687: PUSH
26688: LD_INT 5
26690: EQUAL
26691: NOT
26692: IFFALSE 26696
// exit ;
26694: GO 27084
// dist := 8 ;
26696: LD_ADDR_VAR 0 5
26700: PUSH
26701: LD_INT 8
26703: ST_TO_ADDR
// viewRange := 12 ;
26704: LD_ADDR_VAR 0 7
26708: PUSH
26709: LD_INT 12
26711: ST_TO_ADDR
// side := GetSide ( unit ) ;
26712: LD_ADDR_VAR 0 6
26716: PUSH
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 255
26726: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26727: LD_INT 61
26729: PPUSH
26730: LD_VAR 0 6
26734: PPUSH
26735: CALL_OW 321
26739: PUSH
26740: LD_INT 2
26742: EQUAL
26743: IFFALSE 26753
// viewRange := 16 ;
26745: LD_ADDR_VAR 0 7
26749: PUSH
26750: LD_INT 16
26752: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26753: LD_VAR 0 1
26757: PPUSH
26758: LD_VAR 0 2
26762: PPUSH
26763: LD_VAR 0 3
26767: PPUSH
26768: CALL_OW 297
26772: PUSH
26773: LD_VAR 0 5
26777: GREATER
26778: IFFALSE 26857
// begin ComMoveXY ( unit , x , y ) ;
26780: LD_VAR 0 1
26784: PPUSH
26785: LD_VAR 0 2
26789: PPUSH
26790: LD_VAR 0 3
26794: PPUSH
26795: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26799: LD_INT 35
26801: PPUSH
26802: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26806: LD_VAR 0 1
26810: PPUSH
26811: LD_VAR 0 2
26815: PPUSH
26816: LD_VAR 0 3
26820: PPUSH
26821: CALL 62348 0 3
26825: NOT
26826: IFFALSE 26830
// exit ;
26828: GO 27084
// until GetDistUnitXY ( unit , x , y ) < dist ;
26830: LD_VAR 0 1
26834: PPUSH
26835: LD_VAR 0 2
26839: PPUSH
26840: LD_VAR 0 3
26844: PPUSH
26845: CALL_OW 297
26849: PUSH
26850: LD_VAR 0 5
26854: LESS
26855: IFFALSE 26799
// end ; ComTurnXY ( unit , x , y ) ;
26857: LD_VAR 0 1
26861: PPUSH
26862: LD_VAR 0 2
26866: PPUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 118
// wait ( 5 ) ;
26876: LD_INT 5
26878: PPUSH
26879: CALL_OW 67
// _d := GetDir ( unit ) ;
26883: LD_ADDR_VAR 0 10
26887: PUSH
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 254
26897: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26898: LD_ADDR_VAR 0 8
26902: PUSH
26903: LD_VAR 0 1
26907: PPUSH
26908: CALL_OW 250
26912: PPUSH
26913: LD_VAR 0 10
26917: PPUSH
26918: LD_VAR 0 5
26922: PPUSH
26923: CALL_OW 272
26927: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26928: LD_ADDR_VAR 0 9
26932: PUSH
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL_OW 251
26942: PPUSH
26943: LD_VAR 0 10
26947: PPUSH
26948: LD_VAR 0 5
26952: PPUSH
26953: CALL_OW 273
26957: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26958: LD_VAR 0 8
26962: PPUSH
26963: LD_VAR 0 9
26967: PPUSH
26968: CALL_OW 488
26972: NOT
26973: IFFALSE 26977
// exit ;
26975: GO 27084
// ComAnimCustom ( unit , 1 ) ;
26977: LD_VAR 0 1
26981: PPUSH
26982: LD_INT 1
26984: PPUSH
26985: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26989: LD_VAR 0 8
26993: PPUSH
26994: LD_VAR 0 9
26998: PPUSH
26999: LD_VAR 0 6
27003: PPUSH
27004: LD_VAR 0 7
27008: PPUSH
27009: CALL_OW 330
// repeat wait ( 1 ) ;
27013: LD_INT 1
27015: PPUSH
27016: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL_OW 316
27029: PUSH
27030: LD_VAR 0 1
27034: PPUSH
27035: CALL_OW 314
27039: OR
27040: PUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 302
27050: NOT
27051: OR
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 301
27062: OR
27063: IFFALSE 27013
// RemoveSeeing ( _x , _y , side ) ;
27065: LD_VAR 0 8
27069: PPUSH
27070: LD_VAR 0 9
27074: PPUSH
27075: LD_VAR 0 6
27079: PPUSH
27080: CALL_OW 331
// end ; end_of_file
27084: LD_VAR 0 4
27088: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
27089: LD_INT 0
27091: PPUSH
// ar_miner := 81 ;
27092: LD_ADDR_EXP 100
27096: PUSH
27097: LD_INT 81
27099: ST_TO_ADDR
// ar_crane := 88 ;
27100: LD_ADDR_EXP 99
27104: PUSH
27105: LD_INT 88
27107: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27108: LD_ADDR_EXP 94
27112: PUSH
27113: LD_INT 89
27115: ST_TO_ADDR
// us_hack := 99 ;
27116: LD_ADDR_EXP 95
27120: PUSH
27121: LD_INT 99
27123: ST_TO_ADDR
// us_artillery := 97 ;
27124: LD_ADDR_EXP 96
27128: PUSH
27129: LD_INT 97
27131: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27132: LD_ADDR_EXP 97
27136: PUSH
27137: LD_INT 91
27139: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
27140: LD_ADDR_EXP 98
27144: PUSH
27145: LD_INT 92
27147: ST_TO_ADDR
// ru_radar := 98 ;
27148: LD_ADDR_EXP 93
27152: PUSH
27153: LD_INT 98
27155: ST_TO_ADDR
// tech_Artillery := 80 ;
27156: LD_ADDR_EXP 101
27160: PUSH
27161: LD_INT 80
27163: ST_TO_ADDR
// tech_RadMat := 81 ;
27164: LD_ADDR_EXP 102
27168: PUSH
27169: LD_INT 81
27171: ST_TO_ADDR
// tech_BasicTools := 82 ;
27172: LD_ADDR_EXP 103
27176: PUSH
27177: LD_INT 82
27179: ST_TO_ADDR
// tech_Cargo := 83 ;
27180: LD_ADDR_EXP 104
27184: PUSH
27185: LD_INT 83
27187: ST_TO_ADDR
// tech_Track := 84 ;
27188: LD_ADDR_EXP 105
27192: PUSH
27193: LD_INT 84
27195: ST_TO_ADDR
// tech_Crane := 85 ;
27196: LD_ADDR_EXP 106
27200: PUSH
27201: LD_INT 85
27203: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27204: LD_ADDR_EXP 107
27208: PUSH
27209: LD_INT 86
27211: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27212: LD_ADDR_EXP 108
27216: PUSH
27217: LD_INT 87
27219: ST_TO_ADDR
// end ;
27220: LD_VAR 0 1
27224: RET
// every 1 do
27225: GO 27227
27227: DISABLE
// InitGlobalVariables ; end_of_file
27228: CALL 27089 0 0
27232: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27233: LD_INT 0
27235: PPUSH
27236: PPUSH
// if exist_mode then
27237: LD_VAR 0 2
27241: IFFALSE 27266
// unit := CreateCharacter ( prefix & ident ) else
27243: LD_ADDR_VAR 0 5
27247: PUSH
27248: LD_VAR 0 3
27252: PUSH
27253: LD_VAR 0 1
27257: STR
27258: PPUSH
27259: CALL_OW 34
27263: ST_TO_ADDR
27264: GO 27281
// unit := NewCharacter ( ident ) ;
27266: LD_ADDR_VAR 0 5
27270: PUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 25
27280: ST_TO_ADDR
// result := unit ;
27281: LD_ADDR_VAR 0 4
27285: PUSH
27286: LD_VAR 0 5
27290: ST_TO_ADDR
// end ;
27291: LD_VAR 0 4
27295: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27296: LD_INT 0
27298: PPUSH
27299: PPUSH
// if not side or not nation then
27300: LD_VAR 0 1
27304: NOT
27305: PUSH
27306: LD_VAR 0 2
27310: NOT
27311: OR
27312: IFFALSE 27316
// exit ;
27314: GO 28080
// case nation of nation_american :
27316: LD_VAR 0 2
27320: PUSH
27321: LD_INT 1
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27329
27327: GO 27543
27329: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27330: LD_ADDR_VAR 0 4
27334: PUSH
27335: LD_INT 35
27337: PUSH
27338: LD_INT 45
27340: PUSH
27341: LD_INT 46
27343: PUSH
27344: LD_INT 47
27346: PUSH
27347: LD_INT 82
27349: PUSH
27350: LD_INT 83
27352: PUSH
27353: LD_INT 84
27355: PUSH
27356: LD_INT 85
27358: PUSH
27359: LD_INT 86
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 6
27370: PUSH
27371: LD_INT 15
27373: PUSH
27374: LD_INT 16
27376: PUSH
27377: LD_INT 7
27379: PUSH
27380: LD_INT 12
27382: PUSH
27383: LD_INT 13
27385: PUSH
27386: LD_INT 10
27388: PUSH
27389: LD_INT 14
27391: PUSH
27392: LD_INT 20
27394: PUSH
27395: LD_INT 21
27397: PUSH
27398: LD_INT 22
27400: PUSH
27401: LD_INT 25
27403: PUSH
27404: LD_INT 32
27406: PUSH
27407: LD_INT 27
27409: PUSH
27410: LD_INT 36
27412: PUSH
27413: LD_INT 69
27415: PUSH
27416: LD_INT 39
27418: PUSH
27419: LD_INT 34
27421: PUSH
27422: LD_INT 40
27424: PUSH
27425: LD_INT 48
27427: PUSH
27428: LD_INT 49
27430: PUSH
27431: LD_INT 50
27433: PUSH
27434: LD_INT 51
27436: PUSH
27437: LD_INT 52
27439: PUSH
27440: LD_INT 53
27442: PUSH
27443: LD_INT 54
27445: PUSH
27446: LD_INT 55
27448: PUSH
27449: LD_INT 56
27451: PUSH
27452: LD_INT 57
27454: PUSH
27455: LD_INT 58
27457: PUSH
27458: LD_INT 59
27460: PUSH
27461: LD_INT 60
27463: PUSH
27464: LD_INT 61
27466: PUSH
27467: LD_INT 62
27469: PUSH
27470: LD_INT 80
27472: PUSH
27473: LD_INT 82
27475: PUSH
27476: LD_INT 83
27478: PUSH
27479: LD_INT 84
27481: PUSH
27482: LD_INT 85
27484: PUSH
27485: LD_INT 86
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: ST_TO_ADDR
27541: GO 28004
27543: LD_INT 2
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27551
27549: GO 27773
27551: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27552: LD_ADDR_VAR 0 4
27556: PUSH
27557: LD_INT 35
27559: PUSH
27560: LD_INT 45
27562: PUSH
27563: LD_INT 46
27565: PUSH
27566: LD_INT 47
27568: PUSH
27569: LD_INT 82
27571: PUSH
27572: LD_INT 83
27574: PUSH
27575: LD_INT 84
27577: PUSH
27578: LD_INT 85
27580: PUSH
27581: LD_INT 87
27583: PUSH
27584: LD_INT 70
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 11
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: LD_INT 4
27598: PUSH
27599: LD_INT 5
27601: PUSH
27602: LD_INT 6
27604: PUSH
27605: LD_INT 15
27607: PUSH
27608: LD_INT 18
27610: PUSH
27611: LD_INT 7
27613: PUSH
27614: LD_INT 17
27616: PUSH
27617: LD_INT 8
27619: PUSH
27620: LD_INT 20
27622: PUSH
27623: LD_INT 21
27625: PUSH
27626: LD_INT 22
27628: PUSH
27629: LD_INT 72
27631: PUSH
27632: LD_INT 26
27634: PUSH
27635: LD_INT 69
27637: PUSH
27638: LD_INT 39
27640: PUSH
27641: LD_INT 40
27643: PUSH
27644: LD_INT 41
27646: PUSH
27647: LD_INT 42
27649: PUSH
27650: LD_INT 43
27652: PUSH
27653: LD_INT 48
27655: PUSH
27656: LD_INT 49
27658: PUSH
27659: LD_INT 50
27661: PUSH
27662: LD_INT 51
27664: PUSH
27665: LD_INT 52
27667: PUSH
27668: LD_INT 53
27670: PUSH
27671: LD_INT 54
27673: PUSH
27674: LD_INT 55
27676: PUSH
27677: LD_INT 56
27679: PUSH
27680: LD_INT 60
27682: PUSH
27683: LD_INT 61
27685: PUSH
27686: LD_INT 62
27688: PUSH
27689: LD_INT 66
27691: PUSH
27692: LD_INT 67
27694: PUSH
27695: LD_INT 68
27697: PUSH
27698: LD_INT 81
27700: PUSH
27701: LD_INT 82
27703: PUSH
27704: LD_INT 83
27706: PUSH
27707: LD_INT 84
27709: PUSH
27710: LD_INT 85
27712: PUSH
27713: LD_INT 87
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
27771: GO 28004
27773: LD_INT 3
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 28003
27781: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27782: LD_ADDR_VAR 0 4
27786: PUSH
27787: LD_INT 46
27789: PUSH
27790: LD_INT 47
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 82
27801: PUSH
27802: LD_INT 83
27804: PUSH
27805: LD_INT 84
27807: PUSH
27808: LD_INT 85
27810: PUSH
27811: LD_INT 86
27813: PUSH
27814: LD_INT 11
27816: PUSH
27817: LD_INT 9
27819: PUSH
27820: LD_INT 20
27822: PUSH
27823: LD_INT 19
27825: PUSH
27826: LD_INT 21
27828: PUSH
27829: LD_INT 24
27831: PUSH
27832: LD_INT 22
27834: PUSH
27835: LD_INT 25
27837: PUSH
27838: LD_INT 28
27840: PUSH
27841: LD_INT 29
27843: PUSH
27844: LD_INT 30
27846: PUSH
27847: LD_INT 31
27849: PUSH
27850: LD_INT 37
27852: PUSH
27853: LD_INT 38
27855: PUSH
27856: LD_INT 32
27858: PUSH
27859: LD_INT 27
27861: PUSH
27862: LD_INT 33
27864: PUSH
27865: LD_INT 69
27867: PUSH
27868: LD_INT 39
27870: PUSH
27871: LD_INT 34
27873: PUSH
27874: LD_INT 40
27876: PUSH
27877: LD_INT 71
27879: PUSH
27880: LD_INT 23
27882: PUSH
27883: LD_INT 44
27885: PUSH
27886: LD_INT 48
27888: PUSH
27889: LD_INT 49
27891: PUSH
27892: LD_INT 50
27894: PUSH
27895: LD_INT 51
27897: PUSH
27898: LD_INT 52
27900: PUSH
27901: LD_INT 53
27903: PUSH
27904: LD_INT 54
27906: PUSH
27907: LD_INT 55
27909: PUSH
27910: LD_INT 56
27912: PUSH
27913: LD_INT 57
27915: PUSH
27916: LD_INT 58
27918: PUSH
27919: LD_INT 59
27921: PUSH
27922: LD_INT 63
27924: PUSH
27925: LD_INT 64
27927: PUSH
27928: LD_INT 65
27930: PUSH
27931: LD_INT 82
27933: PUSH
27934: LD_INT 83
27936: PUSH
27937: LD_INT 84
27939: PUSH
27940: LD_INT 85
27942: PUSH
27943: LD_INT 86
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: ST_TO_ADDR
28001: GO 28004
28003: POP
// if state > - 1 and state < 3 then
28004: LD_VAR 0 3
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: GREATER
28013: PUSH
28014: LD_VAR 0 3
28018: PUSH
28019: LD_INT 3
28021: LESS
28022: AND
28023: IFFALSE 28080
// for i in result do
28025: LD_ADDR_VAR 0 5
28029: PUSH
28030: LD_VAR 0 4
28034: PUSH
28035: FOR_IN
28036: IFFALSE 28078
// if GetTech ( i , side ) <> state then
28038: LD_VAR 0 5
28042: PPUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 321
28052: PUSH
28053: LD_VAR 0 3
28057: NONEQUAL
28058: IFFALSE 28076
// result := result diff i ;
28060: LD_ADDR_VAR 0 4
28064: PUSH
28065: LD_VAR 0 4
28069: PUSH
28070: LD_VAR 0 5
28074: DIFF
28075: ST_TO_ADDR
28076: GO 28035
28078: POP
28079: POP
// end ;
28080: LD_VAR 0 4
28084: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28085: LD_INT 0
28087: PPUSH
28088: PPUSH
28089: PPUSH
// result := true ;
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 1
28097: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28098: LD_ADDR_VAR 0 5
28102: PUSH
28103: LD_VAR 0 2
28107: PPUSH
28108: CALL_OW 480
28112: ST_TO_ADDR
// if not tmp then
28113: LD_VAR 0 5
28117: NOT
28118: IFFALSE 28122
// exit ;
28120: GO 28171
// for i in tmp do
28122: LD_ADDR_VAR 0 4
28126: PUSH
28127: LD_VAR 0 5
28131: PUSH
28132: FOR_IN
28133: IFFALSE 28169
// if GetTech ( i , side ) <> state_researched then
28135: LD_VAR 0 4
28139: PPUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL_OW 321
28149: PUSH
28150: LD_INT 2
28152: NONEQUAL
28153: IFFALSE 28167
// begin result := false ;
28155: LD_ADDR_VAR 0 3
28159: PUSH
28160: LD_INT 0
28162: ST_TO_ADDR
// exit ;
28163: POP
28164: POP
28165: GO 28171
// end ;
28167: GO 28132
28169: POP
28170: POP
// end ;
28171: LD_VAR 0 3
28175: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
28190: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28191: LD_VAR 0 1
28195: NOT
28196: PUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 257
28206: PUSH
28207: LD_INT 9
28209: NONEQUAL
28210: OR
28211: IFFALSE 28215
// exit ;
28213: GO 28788
// side := GetSide ( unit ) ;
28215: LD_ADDR_VAR 0 9
28219: PUSH
28220: LD_VAR 0 1
28224: PPUSH
28225: CALL_OW 255
28229: ST_TO_ADDR
// tech_space := tech_spacanom ;
28230: LD_ADDR_VAR 0 12
28234: PUSH
28235: LD_INT 29
28237: ST_TO_ADDR
// tech_time := tech_taurad ;
28238: LD_ADDR_VAR 0 13
28242: PUSH
28243: LD_INT 28
28245: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28246: LD_ADDR_VAR 0 11
28250: PUSH
28251: LD_VAR 0 1
28255: PPUSH
28256: CALL_OW 310
28260: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28261: LD_VAR 0 11
28265: PPUSH
28266: CALL_OW 247
28270: PUSH
28271: LD_INT 2
28273: EQUAL
28274: IFFALSE 28278
// exit ;
28276: GO 28788
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28278: LD_ADDR_VAR 0 8
28282: PUSH
28283: LD_INT 81
28285: PUSH
28286: LD_VAR 0 9
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 3
28297: PUSH
28298: LD_INT 21
28300: PUSH
28301: LD_INT 3
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: ST_TO_ADDR
// if not tmp then
28321: LD_VAR 0 8
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 28788
// if in_unit then
28330: LD_VAR 0 11
28334: IFFALSE 28358
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28336: LD_ADDR_VAR 0 10
28340: PUSH
28341: LD_VAR 0 8
28345: PPUSH
28346: LD_VAR 0 11
28350: PPUSH
28351: CALL_OW 74
28355: ST_TO_ADDR
28356: GO 28378
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28358: LD_ADDR_VAR 0 10
28362: PUSH
28363: LD_VAR 0 8
28367: PPUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 74
28377: ST_TO_ADDR
// if not enemy then
28378: LD_VAR 0 10
28382: NOT
28383: IFFALSE 28387
// exit ;
28385: GO 28788
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28387: LD_VAR 0 11
28391: PUSH
28392: LD_VAR 0 11
28396: PPUSH
28397: LD_VAR 0 10
28401: PPUSH
28402: CALL_OW 296
28406: PUSH
28407: LD_INT 13
28409: GREATER
28410: AND
28411: PUSH
28412: LD_VAR 0 1
28416: PPUSH
28417: LD_VAR 0 10
28421: PPUSH
28422: CALL_OW 296
28426: PUSH
28427: LD_INT 12
28429: GREATER
28430: OR
28431: IFFALSE 28435
// exit ;
28433: GO 28788
// missile := [ 1 ] ;
28435: LD_ADDR_VAR 0 14
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28446: LD_VAR 0 9
28450: PPUSH
28451: LD_VAR 0 12
28455: PPUSH
28456: CALL_OW 325
28460: IFFALSE 28489
// missile := Insert ( missile , missile + 1 , 2 ) ;
28462: LD_ADDR_VAR 0 14
28466: PUSH
28467: LD_VAR 0 14
28471: PPUSH
28472: LD_VAR 0 14
28476: PUSH
28477: LD_INT 1
28479: PLUS
28480: PPUSH
28481: LD_INT 2
28483: PPUSH
28484: CALL_OW 2
28488: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28489: LD_VAR 0 9
28493: PPUSH
28494: LD_VAR 0 13
28498: PPUSH
28499: CALL_OW 325
28503: PUSH
28504: LD_VAR 0 10
28508: PPUSH
28509: CALL_OW 255
28513: PPUSH
28514: LD_VAR 0 13
28518: PPUSH
28519: CALL_OW 325
28523: NOT
28524: AND
28525: IFFALSE 28554
// missile := Insert ( missile , missile + 1 , 3 ) ;
28527: LD_ADDR_VAR 0 14
28531: PUSH
28532: LD_VAR 0 14
28536: PPUSH
28537: LD_VAR 0 14
28541: PUSH
28542: LD_INT 1
28544: PLUS
28545: PPUSH
28546: LD_INT 3
28548: PPUSH
28549: CALL_OW 2
28553: ST_TO_ADDR
// if missile < 2 then
28554: LD_VAR 0 14
28558: PUSH
28559: LD_INT 2
28561: LESS
28562: IFFALSE 28566
// exit ;
28564: GO 28788
// x := GetX ( enemy ) ;
28566: LD_ADDR_VAR 0 4
28570: PUSH
28571: LD_VAR 0 10
28575: PPUSH
28576: CALL_OW 250
28580: ST_TO_ADDR
// y := GetY ( enemy ) ;
28581: LD_ADDR_VAR 0 5
28585: PUSH
28586: LD_VAR 0 10
28590: PPUSH
28591: CALL_OW 251
28595: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28596: LD_ADDR_VAR 0 6
28600: PUSH
28601: LD_VAR 0 4
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PPUSH
28610: LD_INT 1
28612: PPUSH
28613: CALL_OW 12
28617: PLUS
28618: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28619: LD_ADDR_VAR 0 7
28623: PUSH
28624: LD_VAR 0 5
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PPUSH
28633: LD_INT 1
28635: PPUSH
28636: CALL_OW 12
28640: PLUS
28641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28642: LD_VAR 0 6
28646: PPUSH
28647: LD_VAR 0 7
28651: PPUSH
28652: CALL_OW 488
28656: NOT
28657: IFFALSE 28679
// begin _x := x ;
28659: LD_ADDR_VAR 0 6
28663: PUSH
28664: LD_VAR 0 4
28668: ST_TO_ADDR
// _y := y ;
28669: LD_ADDR_VAR 0 7
28673: PUSH
28674: LD_VAR 0 5
28678: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_VAR 0 14
28691: PPUSH
28692: CALL_OW 12
28696: ST_TO_ADDR
// case i of 1 :
28697: LD_VAR 0 3
28701: PUSH
28702: LD_INT 1
28704: DOUBLE
28705: EQUAL
28706: IFTRUE 28710
28708: GO 28727
28710: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28711: LD_VAR 0 1
28715: PPUSH
28716: LD_VAR 0 10
28720: PPUSH
28721: CALL_OW 115
28725: GO 28788
28727: LD_INT 2
28729: DOUBLE
28730: EQUAL
28731: IFTRUE 28735
28733: GO 28757
28735: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_VAR 0 6
28745: PPUSH
28746: LD_VAR 0 7
28750: PPUSH
28751: CALL_OW 153
28755: GO 28788
28757: LD_INT 3
28759: DOUBLE
28760: EQUAL
28761: IFTRUE 28765
28763: GO 28787
28765: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28766: LD_VAR 0 1
28770: PPUSH
28771: LD_VAR 0 6
28775: PPUSH
28776: LD_VAR 0 7
28780: PPUSH
28781: CALL_OW 154
28785: GO 28788
28787: POP
// end ;
28788: LD_VAR 0 2
28792: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
// if not unit or not building then
28801: LD_VAR 0 1
28805: NOT
28806: PUSH
28807: LD_VAR 0 2
28811: NOT
28812: OR
28813: IFFALSE 28817
// exit ;
28815: GO 28975
// x := GetX ( building ) ;
28817: LD_ADDR_VAR 0 5
28821: PUSH
28822: LD_VAR 0 2
28826: PPUSH
28827: CALL_OW 250
28831: ST_TO_ADDR
// y := GetY ( building ) ;
28832: LD_ADDR_VAR 0 6
28836: PUSH
28837: LD_VAR 0 2
28841: PPUSH
28842: CALL_OW 251
28846: ST_TO_ADDR
// for i = 0 to 5 do
28847: LD_ADDR_VAR 0 4
28851: PUSH
28852: DOUBLE
28853: LD_INT 0
28855: DEC
28856: ST_TO_ADDR
28857: LD_INT 5
28859: PUSH
28860: FOR_TO
28861: IFFALSE 28973
// begin _x := ShiftX ( x , i , 3 ) ;
28863: LD_ADDR_VAR 0 7
28867: PUSH
28868: LD_VAR 0 5
28872: PPUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: LD_INT 3
28880: PPUSH
28881: CALL_OW 272
28885: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28886: LD_ADDR_VAR 0 8
28890: PUSH
28891: LD_VAR 0 6
28895: PPUSH
28896: LD_VAR 0 4
28900: PPUSH
28901: LD_INT 3
28903: PPUSH
28904: CALL_OW 273
28908: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28909: LD_VAR 0 7
28913: PPUSH
28914: LD_VAR 0 8
28918: PPUSH
28919: CALL_OW 488
28923: NOT
28924: IFFALSE 28928
// continue ;
28926: GO 28860
// if HexInfo ( _x , _y ) = 0 then
28928: LD_VAR 0 7
28932: PPUSH
28933: LD_VAR 0 8
28937: PPUSH
28938: CALL_OW 428
28942: PUSH
28943: LD_INT 0
28945: EQUAL
28946: IFFALSE 28971
// begin ComMoveXY ( unit , _x , _y ) ;
28948: LD_VAR 0 1
28952: PPUSH
28953: LD_VAR 0 7
28957: PPUSH
28958: LD_VAR 0 8
28962: PPUSH
28963: CALL_OW 111
// exit ;
28967: POP
28968: POP
28969: GO 28975
// end ; end ;
28971: GO 28860
28973: POP
28974: POP
// end ;
28975: LD_VAR 0 3
28979: RET
// export function ScanBase ( side , base_area ) ; begin
28980: LD_INT 0
28982: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_VAR 0 2
28992: PPUSH
28993: LD_INT 81
28995: PUSH
28996: LD_VAR 0 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PPUSH
29005: CALL_OW 70
29009: ST_TO_ADDR
// end ;
29010: LD_VAR 0 3
29014: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29015: LD_INT 0
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
// result := false ;
29021: LD_ADDR_VAR 0 2
29025: PUSH
29026: LD_INT 0
29028: ST_TO_ADDR
// side := GetSide ( unit ) ;
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_VAR 0 1
29038: PPUSH
29039: CALL_OW 255
29043: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29044: LD_ADDR_VAR 0 4
29048: PUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 248
29058: ST_TO_ADDR
// case nat of 1 :
29059: LD_VAR 0 4
29063: PUSH
29064: LD_INT 1
29066: DOUBLE
29067: EQUAL
29068: IFTRUE 29072
29070: GO 29083
29072: POP
// tech := tech_lassight ; 2 :
29073: LD_ADDR_VAR 0 5
29077: PUSH
29078: LD_INT 12
29080: ST_TO_ADDR
29081: GO 29122
29083: LD_INT 2
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29102
29091: POP
// tech := tech_mortar ; 3 :
29092: LD_ADDR_VAR 0 5
29096: PUSH
29097: LD_INT 41
29099: ST_TO_ADDR
29100: GO 29122
29102: LD_INT 3
29104: DOUBLE
29105: EQUAL
29106: IFTRUE 29110
29108: GO 29121
29110: POP
// tech := tech_bazooka ; end ;
29111: LD_ADDR_VAR 0 5
29115: PUSH
29116: LD_INT 44
29118: ST_TO_ADDR
29119: GO 29122
29121: POP
// if Researched ( side , tech ) then
29122: LD_VAR 0 3
29126: PPUSH
29127: LD_VAR 0 5
29131: PPUSH
29132: CALL_OW 325
29136: IFFALSE 29163
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29138: LD_ADDR_VAR 0 2
29142: PUSH
29143: LD_INT 5
29145: PUSH
29146: LD_INT 8
29148: PUSH
29149: LD_INT 9
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: PUSH
29157: LD_VAR 0 4
29161: ARRAY
29162: ST_TO_ADDR
// end ;
29163: LD_VAR 0 2
29167: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
29172: PPUSH
// if not mines then
29173: LD_VAR 0 2
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29326
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29182: LD_ADDR_VAR 0 5
29186: PUSH
29187: LD_INT 81
29189: PUSH
29190: LD_VAR 0 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 3
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: ST_TO_ADDR
// for i in mines do
29225: LD_ADDR_VAR 0 4
29229: PUSH
29230: LD_VAR 0 2
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29324
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29238: LD_VAR 0 4
29242: PUSH
29243: LD_INT 1
29245: ARRAY
29246: PPUSH
29247: LD_VAR 0 4
29251: PUSH
29252: LD_INT 2
29254: ARRAY
29255: PPUSH
29256: CALL_OW 458
29260: NOT
29261: IFFALSE 29265
// continue ;
29263: GO 29235
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29265: LD_VAR 0 4
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: LD_VAR 0 4
29278: PUSH
29279: LD_INT 2
29281: ARRAY
29282: PPUSH
29283: CALL_OW 428
29287: PUSH
29288: LD_VAR 0 5
29292: IN
29293: IFFALSE 29322
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29295: LD_VAR 0 4
29299: PUSH
29300: LD_INT 1
29302: ARRAY
29303: PPUSH
29304: LD_VAR 0 4
29308: PUSH
29309: LD_INT 2
29311: ARRAY
29312: PPUSH
29313: LD_VAR 0 1
29317: PPUSH
29318: CALL_OW 456
// end ;
29322: GO 29235
29324: POP
29325: POP
// end ;
29326: LD_VAR 0 3
29330: RET
// export function Count ( array ) ; var i ; begin
29331: LD_INT 0
29333: PPUSH
29334: PPUSH
// result := 0 ;
29335: LD_ADDR_VAR 0 2
29339: PUSH
29340: LD_INT 0
29342: ST_TO_ADDR
// for i in array do
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_VAR 0 1
29352: PUSH
29353: FOR_IN
29354: IFFALSE 29378
// if i then
29356: LD_VAR 0 3
29360: IFFALSE 29376
// result := result + 1 ;
29362: LD_ADDR_VAR 0 2
29366: PUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_INT 1
29374: PLUS
29375: ST_TO_ADDR
29376: GO 29353
29378: POP
29379: POP
// end ;
29380: LD_VAR 0 2
29384: RET
// export function IsEmpty ( building ) ; begin
29385: LD_INT 0
29387: PPUSH
// if not building then
29388: LD_VAR 0 1
29392: NOT
29393: IFFALSE 29397
// exit ;
29395: GO 29440
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29397: LD_ADDR_VAR 0 2
29401: PUSH
29402: LD_VAR 0 1
29406: PUSH
29407: LD_INT 22
29409: PUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 255
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 58
29426: PUSH
29427: EMPTY
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PPUSH
29434: CALL_OW 69
29438: IN
29439: ST_TO_ADDR
// end ;
29440: LD_VAR 0 2
29444: RET
// export function IsNotFull ( building ) ; begin
29445: LD_INT 0
29447: PPUSH
// if not building then
29448: LD_VAR 0 1
29452: NOT
29453: IFFALSE 29457
// exit ;
29455: GO 29476
// result := UnitsInside ( building ) < 6 ;
29457: LD_ADDR_VAR 0 2
29461: PUSH
29462: LD_VAR 0 1
29466: PPUSH
29467: CALL_OW 313
29471: PUSH
29472: LD_INT 6
29474: LESS
29475: ST_TO_ADDR
// end ;
29476: LD_VAR 0 2
29480: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29481: LD_INT 0
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
// tmp := [ ] ;
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: EMPTY
29493: ST_TO_ADDR
// list := [ ] ;
29494: LD_ADDR_VAR 0 5
29498: PUSH
29499: EMPTY
29500: ST_TO_ADDR
// for i = 16 to 25 do
29501: LD_ADDR_VAR 0 4
29505: PUSH
29506: DOUBLE
29507: LD_INT 16
29509: DEC
29510: ST_TO_ADDR
29511: LD_INT 25
29513: PUSH
29514: FOR_TO
29515: IFFALSE 29588
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: LD_VAR 0 3
29526: PUSH
29527: LD_INT 22
29529: PUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 255
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 91
29546: PUSH
29547: LD_VAR 0 1
29551: PUSH
29552: LD_INT 6
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: LD_VAR 0 4
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: PUSH
29577: EMPTY
29578: LIST
29579: PPUSH
29580: CALL_OW 69
29584: ADD
29585: ST_TO_ADDR
29586: GO 29514
29588: POP
29589: POP
// for i = 1 to tmp do
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: DOUBLE
29596: LD_INT 1
29598: DEC
29599: ST_TO_ADDR
29600: LD_VAR 0 3
29604: PUSH
29605: FOR_TO
29606: IFFALSE 29694
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29608: LD_ADDR_VAR 0 5
29612: PUSH
29613: LD_VAR 0 5
29617: PUSH
29618: LD_VAR 0 3
29622: PUSH
29623: LD_VAR 0 4
29627: ARRAY
29628: PPUSH
29629: CALL_OW 266
29633: PUSH
29634: LD_VAR 0 3
29638: PUSH
29639: LD_VAR 0 4
29643: ARRAY
29644: PPUSH
29645: CALL_OW 250
29649: PUSH
29650: LD_VAR 0 3
29654: PUSH
29655: LD_VAR 0 4
29659: ARRAY
29660: PPUSH
29661: CALL_OW 251
29665: PUSH
29666: LD_VAR 0 3
29670: PUSH
29671: LD_VAR 0 4
29675: ARRAY
29676: PPUSH
29677: CALL_OW 254
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: ADD
29691: ST_TO_ADDR
29692: GO 29605
29694: POP
29695: POP
// result := list ;
29696: LD_ADDR_VAR 0 2
29700: PUSH
29701: LD_VAR 0 5
29705: ST_TO_ADDR
// end ;
29706: LD_VAR 0 2
29710: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29711: LD_INT 0
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
// if not factory then
29720: LD_VAR 0 1
29724: NOT
29725: IFFALSE 29729
// exit ;
29727: GO 30322
// if control = control_apeman then
29729: LD_VAR 0 4
29733: PUSH
29734: LD_INT 5
29736: EQUAL
29737: IFFALSE 29846
// begin tmp := UnitsInside ( factory ) ;
29739: LD_ADDR_VAR 0 8
29743: PUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: CALL_OW 313
29753: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29754: LD_VAR 0 8
29758: PPUSH
29759: LD_INT 25
29761: PUSH
29762: LD_INT 12
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PPUSH
29769: CALL_OW 72
29773: NOT
29774: IFFALSE 29784
// control := control_manual ;
29776: LD_ADDR_VAR 0 4
29780: PUSH
29781: LD_INT 1
29783: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29784: LD_ADDR_VAR 0 8
29788: PUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL 29481 0 1
29798: ST_TO_ADDR
// if tmp then
29799: LD_VAR 0 8
29803: IFFALSE 29846
// begin for i in tmp do
29805: LD_ADDR_VAR 0 7
29809: PUSH
29810: LD_VAR 0 8
29814: PUSH
29815: FOR_IN
29816: IFFALSE 29844
// if i [ 1 ] = b_ext_radio then
29818: LD_VAR 0 7
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PUSH
29827: LD_INT 22
29829: EQUAL
29830: IFFALSE 29842
// begin control := control_remote ;
29832: LD_ADDR_VAR 0 4
29836: PUSH
29837: LD_INT 2
29839: ST_TO_ADDR
// break ;
29840: GO 29844
// end ;
29842: GO 29815
29844: POP
29845: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29846: LD_VAR 0 1
29850: PPUSH
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_VAR 0 3
29860: PPUSH
29861: LD_VAR 0 4
29865: PPUSH
29866: LD_VAR 0 5
29870: PPUSH
29871: CALL_OW 448
29875: IFFALSE 29910
// begin result := [ chassis , engine , control , weapon ] ;
29877: LD_ADDR_VAR 0 6
29881: PUSH
29882: LD_VAR 0 2
29886: PUSH
29887: LD_VAR 0 3
29891: PUSH
29892: LD_VAR 0 4
29896: PUSH
29897: LD_VAR 0 5
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
// exit ;
29908: GO 30322
// end ; _chassis := AvailableChassisList ( factory ) ;
29910: LD_ADDR_VAR 0 9
29914: PUSH
29915: LD_VAR 0 1
29919: PPUSH
29920: CALL_OW 475
29924: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29925: LD_ADDR_VAR 0 11
29929: PUSH
29930: LD_VAR 0 1
29934: PPUSH
29935: CALL_OW 476
29939: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29940: LD_ADDR_VAR 0 12
29944: PUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 477
29954: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29955: LD_ADDR_VAR 0 10
29959: PUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 478
29969: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29970: LD_VAR 0 9
29974: NOT
29975: PUSH
29976: LD_VAR 0 11
29980: NOT
29981: OR
29982: PUSH
29983: LD_VAR 0 12
29987: NOT
29988: OR
29989: PUSH
29990: LD_VAR 0 10
29994: NOT
29995: OR
29996: IFFALSE 30031
// begin result := [ chassis , engine , control , weapon ] ;
29998: LD_ADDR_VAR 0 6
30002: PUSH
30003: LD_VAR 0 2
30007: PUSH
30008: LD_VAR 0 3
30012: PUSH
30013: LD_VAR 0 4
30017: PUSH
30018: LD_VAR 0 5
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: ST_TO_ADDR
// exit ;
30029: GO 30322
// end ; if not chassis in _chassis then
30031: LD_VAR 0 2
30035: PUSH
30036: LD_VAR 0 9
30040: IN
30041: NOT
30042: IFFALSE 30068
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30044: LD_ADDR_VAR 0 2
30048: PUSH
30049: LD_VAR 0 9
30053: PUSH
30054: LD_INT 1
30056: PPUSH
30057: LD_VAR 0 9
30061: PPUSH
30062: CALL_OW 12
30066: ARRAY
30067: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30068: LD_VAR 0 2
30072: PPUSH
30073: LD_VAR 0 3
30077: PPUSH
30078: CALL 30327 0 2
30082: NOT
30083: IFFALSE 30142
// repeat engine := _engine [ 1 ] ;
30085: LD_ADDR_VAR 0 3
30089: PUSH
30090: LD_VAR 0 11
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30099: LD_ADDR_VAR 0 11
30103: PUSH
30104: LD_VAR 0 11
30108: PPUSH
30109: LD_INT 1
30111: PPUSH
30112: CALL_OW 3
30116: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30117: LD_VAR 0 2
30121: PPUSH
30122: LD_VAR 0 3
30126: PPUSH
30127: CALL 30327 0 2
30131: PUSH
30132: LD_VAR 0 11
30136: PUSH
30137: EMPTY
30138: EQUAL
30139: OR
30140: IFFALSE 30085
// if not control in _control then
30142: LD_VAR 0 4
30146: PUSH
30147: LD_VAR 0 12
30151: IN
30152: NOT
30153: IFFALSE 30179
// control := _control [ rand ( 1 , _control ) ] ;
30155: LD_ADDR_VAR 0 4
30159: PUSH
30160: LD_VAR 0 12
30164: PUSH
30165: LD_INT 1
30167: PPUSH
30168: LD_VAR 0 12
30172: PPUSH
30173: CALL_OW 12
30177: ARRAY
30178: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 5
30188: PPUSH
30189: CALL 30547 0 2
30193: NOT
30194: IFFALSE 30253
// repeat weapon := _weapon [ 1 ] ;
30196: LD_ADDR_VAR 0 5
30200: PUSH
30201: LD_VAR 0 10
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30210: LD_ADDR_VAR 0 10
30214: PUSH
30215: LD_VAR 0 10
30219: PPUSH
30220: LD_INT 1
30222: PPUSH
30223: CALL_OW 3
30227: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30228: LD_VAR 0 2
30232: PPUSH
30233: LD_VAR 0 5
30237: PPUSH
30238: CALL 30547 0 2
30242: PUSH
30243: LD_VAR 0 10
30247: PUSH
30248: EMPTY
30249: EQUAL
30250: OR
30251: IFFALSE 30196
// result := [ ] ;
30253: LD_ADDR_VAR 0 6
30257: PUSH
30258: EMPTY
30259: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30260: LD_VAR 0 1
30264: PPUSH
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_VAR 0 3
30274: PPUSH
30275: LD_VAR 0 4
30279: PPUSH
30280: LD_VAR 0 5
30284: PPUSH
30285: CALL_OW 448
30289: IFFALSE 30322
// result := [ chassis , engine , control , weapon ] ;
30291: LD_ADDR_VAR 0 6
30295: PUSH
30296: LD_VAR 0 2
30300: PUSH
30301: LD_VAR 0 3
30305: PUSH
30306: LD_VAR 0 4
30310: PUSH
30311: LD_VAR 0 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// end ;
30322: LD_VAR 0 6
30326: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30327: LD_INT 0
30329: PPUSH
// if not chassis or not engine then
30330: LD_VAR 0 1
30334: NOT
30335: PUSH
30336: LD_VAR 0 2
30340: NOT
30341: OR
30342: IFFALSE 30346
// exit ;
30344: GO 30542
// case engine of engine_solar :
30346: LD_VAR 0 2
30350: PUSH
30351: LD_INT 2
30353: DOUBLE
30354: EQUAL
30355: IFTRUE 30359
30357: GO 30397
30359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30360: LD_ADDR_VAR 0 3
30364: PUSH
30365: LD_INT 11
30367: PUSH
30368: LD_INT 12
30370: PUSH
30371: LD_INT 13
30373: PUSH
30374: LD_INT 14
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: ST_TO_ADDR
30395: GO 30526
30397: LD_INT 1
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30467
30405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 11
30413: PUSH
30414: LD_INT 12
30416: PUSH
30417: LD_INT 13
30419: PUSH
30420: LD_INT 14
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 5
30437: PUSH
30438: LD_INT 21
30440: PUSH
30441: LD_INT 23
30443: PUSH
30444: LD_INT 22
30446: PUSH
30447: LD_INT 24
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
30465: GO 30526
30467: LD_INT 3
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 30525
30475: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30476: LD_ADDR_VAR 0 3
30480: PUSH
30481: LD_INT 13
30483: PUSH
30484: LD_INT 14
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: LD_INT 5
30498: PUSH
30499: LD_INT 21
30501: PUSH
30502: LD_INT 22
30504: PUSH
30505: LD_INT 23
30507: PUSH
30508: LD_INT 24
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
30523: GO 30526
30525: POP
// result := ( chassis in result ) ;
30526: LD_ADDR_VAR 0 3
30530: PUSH
30531: LD_VAR 0 1
30535: PUSH
30536: LD_VAR 0 3
30540: IN
30541: ST_TO_ADDR
// end ;
30542: LD_VAR 0 3
30546: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30547: LD_INT 0
30549: PPUSH
// if not chassis or not weapon then
30550: LD_VAR 0 1
30554: NOT
30555: PUSH
30556: LD_VAR 0 2
30560: NOT
30561: OR
30562: IFFALSE 30566
// exit ;
30564: GO 31592
// case weapon of us_machine_gun :
30566: LD_VAR 0 2
30570: PUSH
30571: LD_INT 2
30573: DOUBLE
30574: EQUAL
30575: IFTRUE 30579
30577: GO 30609
30579: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30580: LD_ADDR_VAR 0 3
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: LD_INT 5
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
30607: GO 31576
30609: LD_INT 3
30611: DOUBLE
30612: EQUAL
30613: IFTRUE 30617
30615: GO 30647
30617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30618: LD_ADDR_VAR 0 3
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 3
30631: PUSH
30632: LD_INT 4
30634: PUSH
30635: LD_INT 5
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
30645: GO 31576
30647: LD_INT 11
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30685
30655: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: LD_INT 5
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
30683: GO 31576
30685: LD_INT 4
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30719
30693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: LD_INT 4
30707: PUSH
30708: LD_INT 5
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: ST_TO_ADDR
30717: GO 31576
30719: LD_INT 5
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30753
30727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 4
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
30751: GO 31576
30753: LD_INT 9
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30787
30761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30762: LD_ADDR_VAR 0 3
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: LD_INT 4
30775: PUSH
30776: LD_INT 5
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
30785: GO 31576
30787: LD_INT 7
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30821
30795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: LD_INT 3
30806: PUSH
30807: LD_INT 4
30809: PUSH
30810: LD_INT 5
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: ST_TO_ADDR
30819: GO 31576
30821: LD_INT 12
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30855
30829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30830: LD_ADDR_VAR 0 3
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: ST_TO_ADDR
30853: GO 31576
30855: LD_INT 13
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30889
30863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: LD_INT 4
30877: PUSH
30878: LD_INT 5
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: ST_TO_ADDR
30887: GO 31576
30889: LD_INT 14
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30897
30895: GO 30915
30897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: LD_INT 5
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: ST_TO_ADDR
30913: GO 31576
30915: LD_INT 6
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30941
30923: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30924: LD_ADDR_VAR 0 3
30928: PUSH
30929: LD_INT 4
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31576
30941: LD_INT 10
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30967
30949: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: ST_TO_ADDR
30965: GO 31576
30967: LD_INT 22
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 31001
30975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_INT 11
30983: PUSH
30984: LD_INT 12
30986: PUSH
30987: LD_INT 13
30989: PUSH
30990: LD_INT 14
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
30999: GO 31576
31001: LD_INT 23
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31035
31009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 11
31017: PUSH
31018: LD_INT 12
31020: PUSH
31021: LD_INT 13
31023: PUSH
31024: LD_INT 14
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
31033: GO 31576
31035: LD_INT 24
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31069
31043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 11
31051: PUSH
31052: LD_INT 12
31054: PUSH
31055: LD_INT 13
31057: PUSH
31058: LD_INT 14
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31576
31069: LD_INT 30
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31103
31077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 11
31085: PUSH
31086: LD_INT 12
31088: PUSH
31089: LD_INT 13
31091: PUSH
31092: LD_INT 14
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 31576
31103: LD_INT 25
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31129
31111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 13
31119: PUSH
31120: LD_INT 14
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: ST_TO_ADDR
31127: GO 31576
31129: LD_INT 27
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31155
31137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: LD_INT 13
31145: PUSH
31146: LD_INT 14
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31576
31155: LD_INT 28
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31181
31163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 13
31171: PUSH
31172: LD_INT 14
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: ST_TO_ADDR
31179: GO 31576
31181: LD_INT 29
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31207
31189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31190: LD_ADDR_VAR 0 3
31194: PUSH
31195: LD_INT 13
31197: PUSH
31198: LD_INT 14
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: ST_TO_ADDR
31205: GO 31576
31207: LD_INT 31
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31233
31215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_INT 13
31223: PUSH
31224: LD_INT 14
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: ST_TO_ADDR
31231: GO 31576
31233: LD_INT 26
31235: DOUBLE
31236: EQUAL
31237: IFTRUE 31241
31239: GO 31259
31241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31242: LD_ADDR_VAR 0 3
31246: PUSH
31247: LD_INT 13
31249: PUSH
31250: LD_INT 14
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: ST_TO_ADDR
31257: GO 31576
31259: LD_INT 42
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31293
31267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31268: LD_ADDR_VAR 0 3
31272: PUSH
31273: LD_INT 21
31275: PUSH
31276: LD_INT 22
31278: PUSH
31279: LD_INT 23
31281: PUSH
31282: LD_INT 24
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
31291: GO 31576
31293: LD_INT 43
31295: DOUBLE
31296: EQUAL
31297: IFTRUE 31301
31299: GO 31327
31301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31302: LD_ADDR_VAR 0 3
31306: PUSH
31307: LD_INT 21
31309: PUSH
31310: LD_INT 22
31312: PUSH
31313: LD_INT 23
31315: PUSH
31316: LD_INT 24
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
31325: GO 31576
31327: LD_INT 44
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31361
31335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31336: LD_ADDR_VAR 0 3
31340: PUSH
31341: LD_INT 21
31343: PUSH
31344: LD_INT 22
31346: PUSH
31347: LD_INT 23
31349: PUSH
31350: LD_INT 24
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
31359: GO 31576
31361: LD_INT 45
31363: DOUBLE
31364: EQUAL
31365: IFTRUE 31369
31367: GO 31395
31369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31370: LD_ADDR_VAR 0 3
31374: PUSH
31375: LD_INT 21
31377: PUSH
31378: LD_INT 22
31380: PUSH
31381: LD_INT 23
31383: PUSH
31384: LD_INT 24
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: ST_TO_ADDR
31393: GO 31576
31395: LD_INT 49
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31429
31403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_INT 21
31411: PUSH
31412: LD_INT 22
31414: PUSH
31415: LD_INT 23
31417: PUSH
31418: LD_INT 24
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: ST_TO_ADDR
31427: GO 31576
31429: LD_INT 51
31431: DOUBLE
31432: EQUAL
31433: IFTRUE 31437
31435: GO 31463
31437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31438: LD_ADDR_VAR 0 3
31442: PUSH
31443: LD_INT 21
31445: PUSH
31446: LD_INT 22
31448: PUSH
31449: LD_INT 23
31451: PUSH
31452: LD_INT 24
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: ST_TO_ADDR
31461: GO 31576
31463: LD_INT 52
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31497
31471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: LD_INT 21
31479: PUSH
31480: LD_INT 22
31482: PUSH
31483: LD_INT 23
31485: PUSH
31486: LD_INT 24
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: ST_TO_ADDR
31495: GO 31576
31497: LD_INT 53
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31523
31505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31506: LD_ADDR_VAR 0 3
31510: PUSH
31511: LD_INT 23
31513: PUSH
31514: LD_INT 24
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: ST_TO_ADDR
31521: GO 31576
31523: LD_INT 46
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31531
31529: GO 31549
31531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_INT 23
31539: PUSH
31540: LD_INT 24
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: ST_TO_ADDR
31547: GO 31576
31549: LD_INT 47
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31575
31557: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_INT 23
31565: PUSH
31566: LD_INT 24
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: ST_TO_ADDR
31573: GO 31576
31575: POP
// result := ( chassis in result ) ;
31576: LD_ADDR_VAR 0 3
31580: PUSH
31581: LD_VAR 0 1
31585: PUSH
31586: LD_VAR 0 3
31590: IN
31591: ST_TO_ADDR
// end ;
31592: LD_VAR 0 3
31596: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31597: LD_INT 0
31599: PPUSH
31600: PPUSH
31601: PPUSH
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
// result := array ;
31606: LD_ADDR_VAR 0 5
31610: PUSH
31611: LD_VAR 0 1
31615: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31616: LD_VAR 0 1
31620: NOT
31621: PUSH
31622: LD_VAR 0 2
31626: NOT
31627: OR
31628: PUSH
31629: LD_VAR 0 3
31633: NOT
31634: OR
31635: PUSH
31636: LD_VAR 0 2
31640: PUSH
31641: LD_VAR 0 1
31645: GREATER
31646: OR
31647: PUSH
31648: LD_VAR 0 3
31652: PUSH
31653: LD_VAR 0 1
31657: GREATER
31658: OR
31659: IFFALSE 31663
// exit ;
31661: GO 31959
// if direction then
31663: LD_VAR 0 4
31667: IFFALSE 31731
// begin d := 1 ;
31669: LD_ADDR_VAR 0 9
31673: PUSH
31674: LD_INT 1
31676: ST_TO_ADDR
// if i_from > i_to then
31677: LD_VAR 0 2
31681: PUSH
31682: LD_VAR 0 3
31686: GREATER
31687: IFFALSE 31713
// length := ( array - i_from ) + i_to else
31689: LD_ADDR_VAR 0 11
31693: PUSH
31694: LD_VAR 0 1
31698: PUSH
31699: LD_VAR 0 2
31703: MINUS
31704: PUSH
31705: LD_VAR 0 3
31709: PLUS
31710: ST_TO_ADDR
31711: GO 31729
// length := i_to - i_from ;
31713: LD_ADDR_VAR 0 11
31717: PUSH
31718: LD_VAR 0 3
31722: PUSH
31723: LD_VAR 0 2
31727: MINUS
31728: ST_TO_ADDR
// end else
31729: GO 31792
// begin d := - 1 ;
31731: LD_ADDR_VAR 0 9
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: ST_TO_ADDR
// if i_from > i_to then
31740: LD_VAR 0 2
31744: PUSH
31745: LD_VAR 0 3
31749: GREATER
31750: IFFALSE 31770
// length := i_from - i_to else
31752: LD_ADDR_VAR 0 11
31756: PUSH
31757: LD_VAR 0 2
31761: PUSH
31762: LD_VAR 0 3
31766: MINUS
31767: ST_TO_ADDR
31768: GO 31792
// length := ( array - i_to ) + i_from ;
31770: LD_ADDR_VAR 0 11
31774: PUSH
31775: LD_VAR 0 1
31779: PUSH
31780: LD_VAR 0 3
31784: MINUS
31785: PUSH
31786: LD_VAR 0 2
31790: PLUS
31791: ST_TO_ADDR
// end ; if not length then
31792: LD_VAR 0 11
31796: NOT
31797: IFFALSE 31801
// exit ;
31799: GO 31959
// tmp := array ;
31801: LD_ADDR_VAR 0 10
31805: PUSH
31806: LD_VAR 0 1
31810: ST_TO_ADDR
// for i = 1 to length do
31811: LD_ADDR_VAR 0 6
31815: PUSH
31816: DOUBLE
31817: LD_INT 1
31819: DEC
31820: ST_TO_ADDR
31821: LD_VAR 0 11
31825: PUSH
31826: FOR_TO
31827: IFFALSE 31947
// begin for j = 1 to array do
31829: LD_ADDR_VAR 0 7
31833: PUSH
31834: DOUBLE
31835: LD_INT 1
31837: DEC
31838: ST_TO_ADDR
31839: LD_VAR 0 1
31843: PUSH
31844: FOR_TO
31845: IFFALSE 31933
// begin k := j + d ;
31847: LD_ADDR_VAR 0 8
31851: PUSH
31852: LD_VAR 0 7
31856: PUSH
31857: LD_VAR 0 9
31861: PLUS
31862: ST_TO_ADDR
// if k > array then
31863: LD_VAR 0 8
31867: PUSH
31868: LD_VAR 0 1
31872: GREATER
31873: IFFALSE 31883
// k := 1 ;
31875: LD_ADDR_VAR 0 8
31879: PUSH
31880: LD_INT 1
31882: ST_TO_ADDR
// if not k then
31883: LD_VAR 0 8
31887: NOT
31888: IFFALSE 31900
// k := array ;
31890: LD_ADDR_VAR 0 8
31894: PUSH
31895: LD_VAR 0 1
31899: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31900: LD_ADDR_VAR 0 10
31904: PUSH
31905: LD_VAR 0 10
31909: PPUSH
31910: LD_VAR 0 8
31914: PPUSH
31915: LD_VAR 0 1
31919: PUSH
31920: LD_VAR 0 7
31924: ARRAY
31925: PPUSH
31926: CALL_OW 1
31930: ST_TO_ADDR
// end ;
31931: GO 31844
31933: POP
31934: POP
// array := tmp ;
31935: LD_ADDR_VAR 0 1
31939: PUSH
31940: LD_VAR 0 10
31944: ST_TO_ADDR
// end ;
31945: GO 31826
31947: POP
31948: POP
// result := array ;
31949: LD_ADDR_VAR 0 5
31953: PUSH
31954: LD_VAR 0 1
31958: ST_TO_ADDR
// end ;
31959: LD_VAR 0 5
31963: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
// result := 0 ;
31968: LD_ADDR_VAR 0 3
31972: PUSH
31973: LD_INT 0
31975: ST_TO_ADDR
// if not array or not value in array then
31976: LD_VAR 0 1
31980: NOT
31981: PUSH
31982: LD_VAR 0 2
31986: PUSH
31987: LD_VAR 0 1
31991: IN
31992: NOT
31993: OR
31994: IFFALSE 31998
// exit ;
31996: GO 32052
// for i = 1 to array do
31998: LD_ADDR_VAR 0 4
32002: PUSH
32003: DOUBLE
32004: LD_INT 1
32006: DEC
32007: ST_TO_ADDR
32008: LD_VAR 0 1
32012: PUSH
32013: FOR_TO
32014: IFFALSE 32050
// if value = array [ i ] then
32016: LD_VAR 0 2
32020: PUSH
32021: LD_VAR 0 1
32025: PUSH
32026: LD_VAR 0 4
32030: ARRAY
32031: EQUAL
32032: IFFALSE 32048
// begin result := i ;
32034: LD_ADDR_VAR 0 3
32038: PUSH
32039: LD_VAR 0 4
32043: ST_TO_ADDR
// exit ;
32044: POP
32045: POP
32046: GO 32052
// end ;
32048: GO 32013
32050: POP
32051: POP
// end ;
32052: LD_VAR 0 3
32056: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32057: LD_INT 0
32059: PPUSH
// vc_chassis := chassis ;
32060: LD_ADDR_OWVAR 37
32064: PUSH
32065: LD_VAR 0 1
32069: ST_TO_ADDR
// vc_engine := engine ;
32070: LD_ADDR_OWVAR 39
32074: PUSH
32075: LD_VAR 0 2
32079: ST_TO_ADDR
// vc_control := control ;
32080: LD_ADDR_OWVAR 38
32084: PUSH
32085: LD_VAR 0 3
32089: ST_TO_ADDR
// vc_weapon := weapon ;
32090: LD_ADDR_OWVAR 40
32094: PUSH
32095: LD_VAR 0 4
32099: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32100: LD_ADDR_OWVAR 41
32104: PUSH
32105: LD_VAR 0 5
32109: ST_TO_ADDR
// end ;
32110: LD_VAR 0 6
32114: RET
// export function WantPlant ( unit ) ; var task ; begin
32115: LD_INT 0
32117: PPUSH
32118: PPUSH
// result := false ;
32119: LD_ADDR_VAR 0 2
32123: PUSH
32124: LD_INT 0
32126: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_VAR 0 1
32136: PPUSH
32137: CALL_OW 437
32141: ST_TO_ADDR
// if task then
32142: LD_VAR 0 3
32146: IFFALSE 32174
// if task [ 1 ] [ 1 ] = p then
32148: LD_VAR 0 3
32152: PUSH
32153: LD_INT 1
32155: ARRAY
32156: PUSH
32157: LD_INT 1
32159: ARRAY
32160: PUSH
32161: LD_STRING p
32163: EQUAL
32164: IFFALSE 32174
// result := true ;
32166: LD_ADDR_VAR 0 2
32170: PUSH
32171: LD_INT 1
32173: ST_TO_ADDR
// end ;
32174: LD_VAR 0 2
32178: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32179: LD_INT 0
32181: PPUSH
32182: PPUSH
32183: PPUSH
32184: PPUSH
// if pos < 1 then
32185: LD_VAR 0 2
32189: PUSH
32190: LD_INT 1
32192: LESS
32193: IFFALSE 32197
// exit ;
32195: GO 32500
// if pos = 1 then
32197: LD_VAR 0 2
32201: PUSH
32202: LD_INT 1
32204: EQUAL
32205: IFFALSE 32238
// result := Replace ( arr , pos [ 1 ] , value ) else
32207: LD_ADDR_VAR 0 4
32211: PUSH
32212: LD_VAR 0 1
32216: PPUSH
32217: LD_VAR 0 2
32221: PUSH
32222: LD_INT 1
32224: ARRAY
32225: PPUSH
32226: LD_VAR 0 3
32230: PPUSH
32231: CALL_OW 1
32235: ST_TO_ADDR
32236: GO 32500
// begin tmp := arr ;
32238: LD_ADDR_VAR 0 6
32242: PUSH
32243: LD_VAR 0 1
32247: ST_TO_ADDR
// s_arr := [ tmp ] ;
32248: LD_ADDR_VAR 0 7
32252: PUSH
32253: LD_VAR 0 6
32257: PUSH
32258: EMPTY
32259: LIST
32260: ST_TO_ADDR
// for i = 1 to pos - 1 do
32261: LD_ADDR_VAR 0 5
32265: PUSH
32266: DOUBLE
32267: LD_INT 1
32269: DEC
32270: ST_TO_ADDR
32271: LD_VAR 0 2
32275: PUSH
32276: LD_INT 1
32278: MINUS
32279: PUSH
32280: FOR_TO
32281: IFFALSE 32326
// begin tmp := tmp [ pos [ i ] ] ;
32283: LD_ADDR_VAR 0 6
32287: PUSH
32288: LD_VAR 0 6
32292: PUSH
32293: LD_VAR 0 2
32297: PUSH
32298: LD_VAR 0 5
32302: ARRAY
32303: ARRAY
32304: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32305: LD_ADDR_VAR 0 7
32309: PUSH
32310: LD_VAR 0 7
32314: PUSH
32315: LD_VAR 0 6
32319: PUSH
32320: EMPTY
32321: LIST
32322: ADD
32323: ST_TO_ADDR
// end ;
32324: GO 32280
32326: POP
32327: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32328: LD_ADDR_VAR 0 6
32332: PUSH
32333: LD_VAR 0 6
32337: PPUSH
32338: LD_VAR 0 2
32342: PUSH
32343: LD_VAR 0 2
32347: ARRAY
32348: PPUSH
32349: LD_VAR 0 3
32353: PPUSH
32354: CALL_OW 1
32358: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32359: LD_ADDR_VAR 0 7
32363: PUSH
32364: LD_VAR 0 7
32368: PPUSH
32369: LD_VAR 0 7
32373: PPUSH
32374: LD_VAR 0 6
32378: PPUSH
32379: CALL_OW 1
32383: ST_TO_ADDR
// for i = s_arr downto 2 do
32384: LD_ADDR_VAR 0 5
32388: PUSH
32389: DOUBLE
32390: LD_VAR 0 7
32394: INC
32395: ST_TO_ADDR
32396: LD_INT 2
32398: PUSH
32399: FOR_DOWNTO
32400: IFFALSE 32484
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32402: LD_ADDR_VAR 0 6
32406: PUSH
32407: LD_VAR 0 7
32411: PUSH
32412: LD_VAR 0 5
32416: PUSH
32417: LD_INT 1
32419: MINUS
32420: ARRAY
32421: PPUSH
32422: LD_VAR 0 2
32426: PUSH
32427: LD_VAR 0 5
32431: PUSH
32432: LD_INT 1
32434: MINUS
32435: ARRAY
32436: PPUSH
32437: LD_VAR 0 7
32441: PUSH
32442: LD_VAR 0 5
32446: ARRAY
32447: PPUSH
32448: CALL_OW 1
32452: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32453: LD_ADDR_VAR 0 7
32457: PUSH
32458: LD_VAR 0 7
32462: PPUSH
32463: LD_VAR 0 5
32467: PUSH
32468: LD_INT 1
32470: MINUS
32471: PPUSH
32472: LD_VAR 0 6
32476: PPUSH
32477: CALL_OW 1
32481: ST_TO_ADDR
// end ;
32482: GO 32399
32484: POP
32485: POP
// result := s_arr [ 1 ] ;
32486: LD_ADDR_VAR 0 4
32490: PUSH
32491: LD_VAR 0 7
32495: PUSH
32496: LD_INT 1
32498: ARRAY
32499: ST_TO_ADDR
// end ; end ;
32500: LD_VAR 0 4
32504: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32505: LD_INT 0
32507: PPUSH
32508: PPUSH
// if not list then
32509: LD_VAR 0 1
32513: NOT
32514: IFFALSE 32518
// exit ;
32516: GO 32609
// i := list [ pos1 ] ;
32518: LD_ADDR_VAR 0 5
32522: PUSH
32523: LD_VAR 0 1
32527: PUSH
32528: LD_VAR 0 2
32532: ARRAY
32533: ST_TO_ADDR
// if not i then
32534: LD_VAR 0 5
32538: NOT
32539: IFFALSE 32543
// exit ;
32541: GO 32609
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32543: LD_ADDR_VAR 0 1
32547: PUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: LD_VAR 0 2
32557: PPUSH
32558: LD_VAR 0 1
32562: PUSH
32563: LD_VAR 0 3
32567: ARRAY
32568: PPUSH
32569: CALL_OW 1
32573: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32574: LD_ADDR_VAR 0 1
32578: PUSH
32579: LD_VAR 0 1
32583: PPUSH
32584: LD_VAR 0 3
32588: PPUSH
32589: LD_VAR 0 5
32593: PPUSH
32594: CALL_OW 1
32598: ST_TO_ADDR
// result := list ;
32599: LD_ADDR_VAR 0 4
32603: PUSH
32604: LD_VAR 0 1
32608: ST_TO_ADDR
// end ;
32609: LD_VAR 0 4
32613: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32614: LD_INT 0
32616: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32617: LD_ADDR_VAR 0 5
32621: PUSH
32622: LD_VAR 0 1
32626: PPUSH
32627: CALL_OW 250
32631: PPUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: CALL_OW 251
32641: PPUSH
32642: LD_VAR 0 2
32646: PPUSH
32647: LD_VAR 0 3
32651: PPUSH
32652: LD_VAR 0 4
32656: PPUSH
32657: CALL 32667 0 5
32661: ST_TO_ADDR
// end ;
32662: LD_VAR 0 5
32666: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32667: LD_INT 0
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
// if not list then
32673: LD_VAR 0 3
32677: NOT
32678: IFFALSE 32682
// exit ;
32680: GO 33070
// result := [ ] ;
32682: LD_ADDR_VAR 0 6
32686: PUSH
32687: EMPTY
32688: ST_TO_ADDR
// for i in list do
32689: LD_ADDR_VAR 0 7
32693: PUSH
32694: LD_VAR 0 3
32698: PUSH
32699: FOR_IN
32700: IFFALSE 32902
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32702: LD_ADDR_VAR 0 9
32706: PUSH
32707: LD_VAR 0 7
32711: PPUSH
32712: LD_VAR 0 1
32716: PPUSH
32717: LD_VAR 0 2
32721: PPUSH
32722: CALL_OW 297
32726: ST_TO_ADDR
// if not result then
32727: LD_VAR 0 6
32731: NOT
32732: IFFALSE 32758
// result := [ [ i , tmp ] ] else
32734: LD_ADDR_VAR 0 6
32738: PUSH
32739: LD_VAR 0 7
32743: PUSH
32744: LD_VAR 0 9
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: ST_TO_ADDR
32756: GO 32900
// begin if result [ result ] [ 2 ] < tmp then
32758: LD_VAR 0 6
32762: PUSH
32763: LD_VAR 0 6
32767: ARRAY
32768: PUSH
32769: LD_INT 2
32771: ARRAY
32772: PUSH
32773: LD_VAR 0 9
32777: LESS
32778: IFFALSE 32820
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32780: LD_ADDR_VAR 0 6
32784: PUSH
32785: LD_VAR 0 6
32789: PPUSH
32790: LD_VAR 0 6
32794: PUSH
32795: LD_INT 1
32797: PLUS
32798: PPUSH
32799: LD_VAR 0 7
32803: PUSH
32804: LD_VAR 0 9
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PPUSH
32813: CALL_OW 2
32817: ST_TO_ADDR
32818: GO 32900
// for j = 1 to result do
32820: LD_ADDR_VAR 0 8
32824: PUSH
32825: DOUBLE
32826: LD_INT 1
32828: DEC
32829: ST_TO_ADDR
32830: LD_VAR 0 6
32834: PUSH
32835: FOR_TO
32836: IFFALSE 32898
// begin if tmp < result [ j ] [ 2 ] then
32838: LD_VAR 0 9
32842: PUSH
32843: LD_VAR 0 6
32847: PUSH
32848: LD_VAR 0 8
32852: ARRAY
32853: PUSH
32854: LD_INT 2
32856: ARRAY
32857: LESS
32858: IFFALSE 32896
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32860: LD_ADDR_VAR 0 6
32864: PUSH
32865: LD_VAR 0 6
32869: PPUSH
32870: LD_VAR 0 8
32874: PPUSH
32875: LD_VAR 0 7
32879: PUSH
32880: LD_VAR 0 9
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PPUSH
32889: CALL_OW 2
32893: ST_TO_ADDR
// break ;
32894: GO 32898
// end ; end ;
32896: GO 32835
32898: POP
32899: POP
// end ; end ;
32900: GO 32699
32902: POP
32903: POP
// if result and not asc then
32904: LD_VAR 0 6
32908: PUSH
32909: LD_VAR 0 4
32913: NOT
32914: AND
32915: IFFALSE 32990
// begin tmp := result ;
32917: LD_ADDR_VAR 0 9
32921: PUSH
32922: LD_VAR 0 6
32926: ST_TO_ADDR
// for i = tmp downto 1 do
32927: LD_ADDR_VAR 0 7
32931: PUSH
32932: DOUBLE
32933: LD_VAR 0 9
32937: INC
32938: ST_TO_ADDR
32939: LD_INT 1
32941: PUSH
32942: FOR_DOWNTO
32943: IFFALSE 32988
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32945: LD_ADDR_VAR 0 6
32949: PUSH
32950: LD_VAR 0 6
32954: PPUSH
32955: LD_VAR 0 9
32959: PUSH
32960: LD_VAR 0 7
32964: MINUS
32965: PUSH
32966: LD_INT 1
32968: PLUS
32969: PPUSH
32970: LD_VAR 0 9
32974: PUSH
32975: LD_VAR 0 7
32979: ARRAY
32980: PPUSH
32981: CALL_OW 1
32985: ST_TO_ADDR
32986: GO 32942
32988: POP
32989: POP
// end ; tmp := [ ] ;
32990: LD_ADDR_VAR 0 9
32994: PUSH
32995: EMPTY
32996: ST_TO_ADDR
// if mode then
32997: LD_VAR 0 5
33001: IFFALSE 33070
// begin for i = 1 to result do
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: DOUBLE
33009: LD_INT 1
33011: DEC
33012: ST_TO_ADDR
33013: LD_VAR 0 6
33017: PUSH
33018: FOR_TO
33019: IFFALSE 33058
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33021: LD_ADDR_VAR 0 9
33025: PUSH
33026: LD_VAR 0 9
33030: PPUSH
33031: LD_VAR 0 7
33035: PPUSH
33036: LD_VAR 0 6
33040: PUSH
33041: LD_VAR 0 7
33045: ARRAY
33046: PUSH
33047: LD_INT 1
33049: ARRAY
33050: PPUSH
33051: CALL_OW 1
33055: ST_TO_ADDR
33056: GO 33018
33058: POP
33059: POP
// result := tmp ;
33060: LD_ADDR_VAR 0 6
33064: PUSH
33065: LD_VAR 0 9
33069: ST_TO_ADDR
// end ; end ;
33070: LD_VAR 0 6
33074: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33075: LD_INT 0
33077: PPUSH
33078: PPUSH
33079: PPUSH
33080: PPUSH
33081: PPUSH
33082: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// if not x or not y then
33105: LD_VAR 0 2
33109: NOT
33110: PUSH
33111: LD_VAR 0 3
33115: NOT
33116: OR
33117: IFFALSE 33121
// exit ;
33119: GO 34767
// if not range then
33121: LD_VAR 0 4
33125: NOT
33126: IFFALSE 33136
// range := 10 ;
33128: LD_ADDR_VAR 0 4
33132: PUSH
33133: LD_INT 10
33135: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33136: LD_ADDR_VAR 0 8
33140: PUSH
33141: LD_INT 81
33143: PUSH
33144: LD_VAR 0 1
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 92
33155: PUSH
33156: LD_VAR 0 2
33160: PUSH
33161: LD_VAR 0 3
33165: PUSH
33166: LD_VAR 0 4
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 21
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: PPUSH
33199: CALL_OW 69
33203: ST_TO_ADDR
// if not tmp then
33204: LD_VAR 0 8
33208: NOT
33209: IFFALSE 33213
// exit ;
33211: GO 34767
// for i in tmp do
33213: LD_ADDR_VAR 0 6
33217: PUSH
33218: LD_VAR 0 8
33222: PUSH
33223: FOR_IN
33224: IFFALSE 34742
// begin points := [ 0 , 0 , 0 ] ;
33226: LD_ADDR_VAR 0 9
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: ST_TO_ADDR
// bpoints := 1 ;
33245: LD_ADDR_VAR 0 10
33249: PUSH
33250: LD_INT 1
33252: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33253: LD_VAR 0 6
33257: PPUSH
33258: CALL_OW 247
33262: PUSH
33263: LD_INT 1
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33849
33271: POP
// begin if GetClass ( i ) = 1 then
33272: LD_VAR 0 6
33276: PPUSH
33277: CALL_OW 257
33281: PUSH
33282: LD_INT 1
33284: EQUAL
33285: IFFALSE 33306
// points := [ 10 , 5 , 3 ] ;
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_INT 10
33294: PUSH
33295: LD_INT 5
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33306: LD_VAR 0 6
33310: PPUSH
33311: CALL_OW 257
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: IN
33330: IFFALSE 33351
// points := [ 3 , 2 , 1 ] ;
33332: LD_ADDR_VAR 0 9
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33351: LD_VAR 0 6
33355: PPUSH
33356: CALL_OW 257
33360: PUSH
33361: LD_INT 5
33363: EQUAL
33364: IFFALSE 33385
// points := [ 130 , 5 , 2 ] ;
33366: LD_ADDR_VAR 0 9
33370: PUSH
33371: LD_INT 130
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33385: LD_VAR 0 6
33389: PPUSH
33390: CALL_OW 257
33394: PUSH
33395: LD_INT 8
33397: EQUAL
33398: IFFALSE 33419
// points := [ 35 , 35 , 30 ] ;
33400: LD_ADDR_VAR 0 9
33404: PUSH
33405: LD_INT 35
33407: PUSH
33408: LD_INT 35
33410: PUSH
33411: LD_INT 30
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33419: LD_VAR 0 6
33423: PPUSH
33424: CALL_OW 257
33428: PUSH
33429: LD_INT 9
33431: EQUAL
33432: IFFALSE 33453
// points := [ 20 , 55 , 40 ] ;
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: LD_INT 20
33441: PUSH
33442: LD_INT 55
33444: PUSH
33445: LD_INT 40
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33453: LD_VAR 0 6
33457: PPUSH
33458: CALL_OW 257
33462: PUSH
33463: LD_INT 12
33465: PUSH
33466: LD_INT 16
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: IN
33473: IFFALSE 33494
// points := [ 5 , 3 , 2 ] ;
33475: LD_ADDR_VAR 0 9
33479: PUSH
33480: LD_INT 5
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33494: LD_VAR 0 6
33498: PPUSH
33499: CALL_OW 257
33503: PUSH
33504: LD_INT 17
33506: EQUAL
33507: IFFALSE 33528
// points := [ 100 , 50 , 75 ] ;
33509: LD_ADDR_VAR 0 9
33513: PUSH
33514: LD_INT 100
33516: PUSH
33517: LD_INT 50
33519: PUSH
33520: LD_INT 75
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33528: LD_VAR 0 6
33532: PPUSH
33533: CALL_OW 257
33537: PUSH
33538: LD_INT 15
33540: EQUAL
33541: IFFALSE 33562
// points := [ 10 , 5 , 3 ] ;
33543: LD_ADDR_VAR 0 9
33547: PUSH
33548: LD_INT 10
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33562: LD_VAR 0 6
33566: PPUSH
33567: CALL_OW 257
33571: PUSH
33572: LD_INT 14
33574: EQUAL
33575: IFFALSE 33596
// points := [ 10 , 0 , 0 ] ;
33577: LD_ADDR_VAR 0 9
33581: PUSH
33582: LD_INT 10
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33596: LD_VAR 0 6
33600: PPUSH
33601: CALL_OW 257
33605: PUSH
33606: LD_INT 11
33608: EQUAL
33609: IFFALSE 33630
// points := [ 30 , 10 , 5 ] ;
33611: LD_ADDR_VAR 0 9
33615: PUSH
33616: LD_INT 30
33618: PUSH
33619: LD_INT 10
33621: PUSH
33622: LD_INT 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33630: LD_VAR 0 1
33634: PPUSH
33635: LD_INT 5
33637: PPUSH
33638: CALL_OW 321
33642: PUSH
33643: LD_INT 2
33645: EQUAL
33646: IFFALSE 33663
// bpoints := bpoints * 1.8 ;
33648: LD_ADDR_VAR 0 10
33652: PUSH
33653: LD_VAR 0 10
33657: PUSH
33658: LD_REAL  1.80000000000000E+0000
33661: MUL
33662: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33663: LD_VAR 0 6
33667: PPUSH
33668: CALL_OW 257
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 3
33681: PUSH
33682: LD_INT 4
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: IN
33691: PUSH
33692: LD_VAR 0 1
33696: PPUSH
33697: LD_INT 51
33699: PPUSH
33700: CALL_OW 321
33704: PUSH
33705: LD_INT 2
33707: EQUAL
33708: AND
33709: IFFALSE 33726
// bpoints := bpoints * 1.2 ;
33711: LD_ADDR_VAR 0 10
33715: PUSH
33716: LD_VAR 0 10
33720: PUSH
33721: LD_REAL  1.20000000000000E+0000
33724: MUL
33725: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33726: LD_VAR 0 6
33730: PPUSH
33731: CALL_OW 257
33735: PUSH
33736: LD_INT 5
33738: PUSH
33739: LD_INT 7
33741: PUSH
33742: LD_INT 9
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: IN
33750: PUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: LD_INT 52
33758: PPUSH
33759: CALL_OW 321
33763: PUSH
33764: LD_INT 2
33766: EQUAL
33767: AND
33768: IFFALSE 33785
// bpoints := bpoints * 1.5 ;
33770: LD_ADDR_VAR 0 10
33774: PUSH
33775: LD_VAR 0 10
33779: PUSH
33780: LD_REAL  1.50000000000000E+0000
33783: MUL
33784: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33785: LD_VAR 0 1
33789: PPUSH
33790: LD_INT 66
33792: PPUSH
33793: CALL_OW 321
33797: PUSH
33798: LD_INT 2
33800: EQUAL
33801: IFFALSE 33818
// bpoints := bpoints * 1.1 ;
33803: LD_ADDR_VAR 0 10
33807: PUSH
33808: LD_VAR 0 10
33812: PUSH
33813: LD_REAL  1.10000000000000E+0000
33816: MUL
33817: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33818: LD_ADDR_VAR 0 10
33822: PUSH
33823: LD_VAR 0 10
33827: PUSH
33828: LD_VAR 0 6
33832: PPUSH
33833: LD_INT 1
33835: PPUSH
33836: CALL_OW 259
33840: PUSH
33841: LD_REAL  1.15000000000000E+0000
33844: MUL
33845: MUL
33846: ST_TO_ADDR
// end ; unit_vehicle :
33847: GO 34671
33849: LD_INT 2
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 34659
33857: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33858: LD_VAR 0 6
33862: PPUSH
33863: CALL_OW 264
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 42
33873: PUSH
33874: LD_INT 24
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: IN
33882: IFFALSE 33903
// points := [ 25 , 5 , 3 ] ;
33884: LD_ADDR_VAR 0 9
33888: PUSH
33889: LD_INT 25
33891: PUSH
33892: LD_INT 5
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33903: LD_VAR 0 6
33907: PPUSH
33908: CALL_OW 264
33912: PUSH
33913: LD_INT 4
33915: PUSH
33916: LD_INT 43
33918: PUSH
33919: LD_INT 25
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: IN
33927: IFFALSE 33948
// points := [ 40 , 15 , 5 ] ;
33929: LD_ADDR_VAR 0 9
33933: PUSH
33934: LD_INT 40
33936: PUSH
33937: LD_INT 15
33939: PUSH
33940: LD_INT 5
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33948: LD_VAR 0 6
33952: PPUSH
33953: CALL_OW 264
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: LD_INT 23
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: IN
33968: IFFALSE 33989
// points := [ 7 , 25 , 8 ] ;
33970: LD_ADDR_VAR 0 9
33974: PUSH
33975: LD_INT 7
33977: PUSH
33978: LD_INT 25
33980: PUSH
33981: LD_INT 8
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33989: LD_VAR 0 6
33993: PPUSH
33994: CALL_OW 264
33998: PUSH
33999: LD_INT 5
34001: PUSH
34002: LD_INT 27
34004: PUSH
34005: LD_INT 44
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: IN
34013: IFFALSE 34034
// points := [ 14 , 50 , 16 ] ;
34015: LD_ADDR_VAR 0 9
34019: PUSH
34020: LD_INT 14
34022: PUSH
34023: LD_INT 50
34025: PUSH
34026: LD_INT 16
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34034: LD_VAR 0 6
34038: PPUSH
34039: CALL_OW 264
34043: PUSH
34044: LD_INT 6
34046: PUSH
34047: LD_INT 46
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: IN
34054: IFFALSE 34075
// points := [ 32 , 120 , 70 ] ;
34056: LD_ADDR_VAR 0 9
34060: PUSH
34061: LD_INT 32
34063: PUSH
34064: LD_INT 120
34066: PUSH
34067: LD_INT 70
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34075: LD_VAR 0 6
34079: PPUSH
34080: CALL_OW 264
34084: PUSH
34085: LD_INT 7
34087: PUSH
34088: LD_INT 28
34090: PUSH
34091: LD_INT 45
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: IN
34099: IFFALSE 34120
// points := [ 35 , 20 , 45 ] ;
34101: LD_ADDR_VAR 0 9
34105: PUSH
34106: LD_INT 35
34108: PUSH
34109: LD_INT 20
34111: PUSH
34112: LD_INT 45
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34120: LD_VAR 0 6
34124: PPUSH
34125: CALL_OW 264
34129: PUSH
34130: LD_INT 47
34132: PUSH
34133: EMPTY
34134: LIST
34135: IN
34136: IFFALSE 34157
// points := [ 67 , 45 , 75 ] ;
34138: LD_ADDR_VAR 0 9
34142: PUSH
34143: LD_INT 67
34145: PUSH
34146: LD_INT 45
34148: PUSH
34149: LD_INT 75
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34157: LD_VAR 0 6
34161: PPUSH
34162: CALL_OW 264
34166: PUSH
34167: LD_INT 26
34169: PUSH
34170: EMPTY
34171: LIST
34172: IN
34173: IFFALSE 34194
// points := [ 120 , 30 , 80 ] ;
34175: LD_ADDR_VAR 0 9
34179: PUSH
34180: LD_INT 120
34182: PUSH
34183: LD_INT 30
34185: PUSH
34186: LD_INT 80
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34194: LD_VAR 0 6
34198: PPUSH
34199: CALL_OW 264
34203: PUSH
34204: LD_INT 22
34206: PUSH
34207: EMPTY
34208: LIST
34209: IN
34210: IFFALSE 34231
// points := [ 40 , 1 , 1 ] ;
34212: LD_ADDR_VAR 0 9
34216: PUSH
34217: LD_INT 40
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34231: LD_VAR 0 6
34235: PPUSH
34236: CALL_OW 264
34240: PUSH
34241: LD_INT 29
34243: PUSH
34244: EMPTY
34245: LIST
34246: IN
34247: IFFALSE 34268
// points := [ 70 , 200 , 400 ] ;
34249: LD_ADDR_VAR 0 9
34253: PUSH
34254: LD_INT 70
34256: PUSH
34257: LD_INT 200
34259: PUSH
34260: LD_INT 400
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34268: LD_VAR 0 6
34272: PPUSH
34273: CALL_OW 264
34277: PUSH
34278: LD_INT 14
34280: PUSH
34281: LD_INT 53
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: IN
34288: IFFALSE 34309
// points := [ 40 , 10 , 20 ] ;
34290: LD_ADDR_VAR 0 9
34294: PUSH
34295: LD_INT 40
34297: PUSH
34298: LD_INT 10
34300: PUSH
34301: LD_INT 20
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34309: LD_VAR 0 6
34313: PPUSH
34314: CALL_OW 264
34318: PUSH
34319: LD_INT 9
34321: PUSH
34322: EMPTY
34323: LIST
34324: IN
34325: IFFALSE 34346
// points := [ 5 , 70 , 20 ] ;
34327: LD_ADDR_VAR 0 9
34331: PUSH
34332: LD_INT 5
34334: PUSH
34335: LD_INT 70
34337: PUSH
34338: LD_INT 20
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34346: LD_VAR 0 6
34350: PPUSH
34351: CALL_OW 264
34355: PUSH
34356: LD_INT 10
34358: PUSH
34359: EMPTY
34360: LIST
34361: IN
34362: IFFALSE 34383
// points := [ 35 , 110 , 70 ] ;
34364: LD_ADDR_VAR 0 9
34368: PUSH
34369: LD_INT 35
34371: PUSH
34372: LD_INT 110
34374: PUSH
34375: LD_INT 70
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34383: LD_VAR 0 6
34387: PPUSH
34388: CALL_OW 265
34392: PUSH
34393: LD_INT 25
34395: EQUAL
34396: IFFALSE 34417
// points := [ 80 , 65 , 100 ] ;
34398: LD_ADDR_VAR 0 9
34402: PUSH
34403: LD_INT 80
34405: PUSH
34406: LD_INT 65
34408: PUSH
34409: LD_INT 100
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34417: LD_VAR 0 6
34421: PPUSH
34422: CALL_OW 263
34426: PUSH
34427: LD_INT 1
34429: EQUAL
34430: IFFALSE 34465
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34432: LD_ADDR_VAR 0 10
34436: PUSH
34437: LD_VAR 0 10
34441: PUSH
34442: LD_VAR 0 6
34446: PPUSH
34447: CALL_OW 311
34451: PPUSH
34452: LD_INT 3
34454: PPUSH
34455: CALL_OW 259
34459: PUSH
34460: LD_INT 4
34462: MUL
34463: MUL
34464: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34465: LD_VAR 0 6
34469: PPUSH
34470: CALL_OW 263
34474: PUSH
34475: LD_INT 2
34477: EQUAL
34478: IFFALSE 34529
// begin j := IsControledBy ( i ) ;
34480: LD_ADDR_VAR 0 7
34484: PUSH
34485: LD_VAR 0 6
34489: PPUSH
34490: CALL_OW 312
34494: ST_TO_ADDR
// if j then
34495: LD_VAR 0 7
34499: IFFALSE 34529
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34501: LD_ADDR_VAR 0 10
34505: PUSH
34506: LD_VAR 0 10
34510: PUSH
34511: LD_VAR 0 7
34515: PPUSH
34516: LD_INT 3
34518: PPUSH
34519: CALL_OW 259
34523: PUSH
34524: LD_INT 3
34526: MUL
34527: MUL
34528: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34529: LD_VAR 0 6
34533: PPUSH
34534: CALL_OW 264
34538: PUSH
34539: LD_INT 5
34541: PUSH
34542: LD_INT 6
34544: PUSH
34545: LD_INT 46
34547: PUSH
34548: LD_INT 44
34550: PUSH
34551: LD_INT 47
34553: PUSH
34554: LD_INT 45
34556: PUSH
34557: LD_INT 28
34559: PUSH
34560: LD_INT 7
34562: PUSH
34563: LD_INT 27
34565: PUSH
34566: LD_INT 29
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: IN
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: LD_INT 52
34589: PPUSH
34590: CALL_OW 321
34594: PUSH
34595: LD_INT 2
34597: EQUAL
34598: AND
34599: IFFALSE 34616
// bpoints := bpoints * 1.2 ;
34601: LD_ADDR_VAR 0 10
34605: PUSH
34606: LD_VAR 0 10
34610: PUSH
34611: LD_REAL  1.20000000000000E+0000
34614: MUL
34615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34616: LD_VAR 0 6
34620: PPUSH
34621: CALL_OW 264
34625: PUSH
34626: LD_INT 6
34628: PUSH
34629: LD_INT 46
34631: PUSH
34632: LD_INT 47
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: IN
34640: IFFALSE 34657
// bpoints := bpoints * 1.2 ;
34642: LD_ADDR_VAR 0 10
34646: PUSH
34647: LD_VAR 0 10
34651: PUSH
34652: LD_REAL  1.20000000000000E+0000
34655: MUL
34656: ST_TO_ADDR
// end ; unit_building :
34657: GO 34671
34659: LD_INT 3
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34670
34667: POP
// ; end ;
34668: GO 34671
34670: POP
// for j = 1 to 3 do
34671: LD_ADDR_VAR 0 7
34675: PUSH
34676: DOUBLE
34677: LD_INT 1
34679: DEC
34680: ST_TO_ADDR
34681: LD_INT 3
34683: PUSH
34684: FOR_TO
34685: IFFALSE 34738
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34687: LD_ADDR_VAR 0 5
34691: PUSH
34692: LD_VAR 0 5
34696: PPUSH
34697: LD_VAR 0 7
34701: PPUSH
34702: LD_VAR 0 5
34706: PUSH
34707: LD_VAR 0 7
34711: ARRAY
34712: PUSH
34713: LD_VAR 0 9
34717: PUSH
34718: LD_VAR 0 7
34722: ARRAY
34723: PUSH
34724: LD_VAR 0 10
34728: MUL
34729: PLUS
34730: PPUSH
34731: CALL_OW 1
34735: ST_TO_ADDR
34736: GO 34684
34738: POP
34739: POP
// end ;
34740: GO 33223
34742: POP
34743: POP
// result := Replace ( result , 4 , tmp ) ;
34744: LD_ADDR_VAR 0 5
34748: PUSH
34749: LD_VAR 0 5
34753: PPUSH
34754: LD_INT 4
34756: PPUSH
34757: LD_VAR 0 8
34761: PPUSH
34762: CALL_OW 1
34766: ST_TO_ADDR
// end ;
34767: LD_VAR 0 5
34771: RET
// export function DangerAtRange ( unit , range ) ; begin
34772: LD_INT 0
34774: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 255
34789: PPUSH
34790: LD_VAR 0 1
34794: PPUSH
34795: CALL_OW 250
34799: PPUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 251
34809: PPUSH
34810: LD_VAR 0 2
34814: PPUSH
34815: CALL 33075 0 4
34819: ST_TO_ADDR
// end ;
34820: LD_VAR 0 3
34824: RET
// export function DangerInArea ( side , area ) ; begin
34825: LD_INT 0
34827: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_VAR 0 2
34837: PPUSH
34838: LD_INT 81
34840: PUSH
34841: LD_VAR 0 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PPUSH
34850: CALL_OW 70
34854: ST_TO_ADDR
// end ;
34855: LD_VAR 0 3
34859: RET
// export function IsExtension ( b ) ; begin
34860: LD_INT 0
34862: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34863: LD_ADDR_VAR 0 2
34867: PUSH
34868: LD_VAR 0 1
34872: PUSH
34873: LD_INT 23
34875: PUSH
34876: LD_INT 20
34878: PUSH
34879: LD_INT 22
34881: PUSH
34882: LD_INT 17
34884: PUSH
34885: LD_INT 24
34887: PUSH
34888: LD_INT 21
34890: PUSH
34891: LD_INT 19
34893: PUSH
34894: LD_INT 16
34896: PUSH
34897: LD_INT 25
34899: PUSH
34900: LD_INT 18
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: IN
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 2
34920: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
34925: PPUSH
// result := [ ] ;
34926: LD_ADDR_VAR 0 4
34930: PUSH
34931: EMPTY
34932: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34933: LD_ADDR_VAR 0 5
34937: PUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: LD_INT 21
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PPUSH
34953: CALL_OW 70
34957: ST_TO_ADDR
// if not tmp then
34958: LD_VAR 0 5
34962: NOT
34963: IFFALSE 34967
// exit ;
34965: GO 35031
// if checkLink then
34967: LD_VAR 0 3
34971: IFFALSE 35021
// begin for i in tmp do
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: LD_VAR 0 5
34982: PUSH
34983: FOR_IN
34984: IFFALSE 35019
// if GetBase ( i ) <> base then
34986: LD_VAR 0 6
34990: PPUSH
34991: CALL_OW 274
34995: PUSH
34996: LD_VAR 0 1
35000: NONEQUAL
35001: IFFALSE 35017
// ComLinkToBase ( base , i ) ;
35003: LD_VAR 0 1
35007: PPUSH
35008: LD_VAR 0 6
35012: PPUSH
35013: CALL_OW 169
35017: GO 34983
35019: POP
35020: POP
// end ; result := tmp ;
35021: LD_ADDR_VAR 0 4
35025: PUSH
35026: LD_VAR 0 5
35030: ST_TO_ADDR
// end ;
35031: LD_VAR 0 4
35035: RET
// export function ComComplete ( units , b ) ; var i ; begin
35036: LD_INT 0
35038: PPUSH
35039: PPUSH
// if not units then
35040: LD_VAR 0 1
35044: NOT
35045: IFFALSE 35049
// exit ;
35047: GO 35139
// for i in units do
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: LD_VAR 0 1
35058: PUSH
35059: FOR_IN
35060: IFFALSE 35137
// if BuildingStatus ( b ) = bs_build then
35062: LD_VAR 0 2
35066: PPUSH
35067: CALL_OW 461
35071: PUSH
35072: LD_INT 1
35074: EQUAL
35075: IFFALSE 35135
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35077: LD_VAR 0 4
35081: PPUSH
35082: LD_STRING h
35084: PUSH
35085: LD_VAR 0 2
35089: PPUSH
35090: CALL_OW 250
35094: PUSH
35095: LD_VAR 0 2
35099: PPUSH
35100: CALL_OW 251
35104: PUSH
35105: LD_VAR 0 2
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: PPUSH
35131: CALL_OW 446
35135: GO 35059
35137: POP
35138: POP
// end ;
35139: LD_VAR 0 3
35143: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35152: LD_VAR 0 1
35156: NOT
35157: PUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 263
35167: PUSH
35168: LD_INT 2
35170: EQUAL
35171: NOT
35172: OR
35173: IFFALSE 35177
// exit ;
35175: GO 35493
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35177: LD_ADDR_VAR 0 6
35181: PUSH
35182: LD_INT 22
35184: PUSH
35185: LD_VAR 0 1
35189: PPUSH
35190: CALL_OW 255
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: LD_INT 30
35204: PUSH
35205: LD_INT 36
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 34
35214: PUSH
35215: LD_INT 31
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PPUSH
35231: CALL_OW 69
35235: ST_TO_ADDR
// if not tmp then
35236: LD_VAR 0 6
35240: NOT
35241: IFFALSE 35245
// exit ;
35243: GO 35493
// result := [ ] ;
35245: LD_ADDR_VAR 0 2
35249: PUSH
35250: EMPTY
35251: ST_TO_ADDR
// for i in tmp do
35252: LD_ADDR_VAR 0 3
35256: PUSH
35257: LD_VAR 0 6
35261: PUSH
35262: FOR_IN
35263: IFFALSE 35334
// begin t := UnitsInside ( i ) ;
35265: LD_ADDR_VAR 0 4
35269: PUSH
35270: LD_VAR 0 3
35274: PPUSH
35275: CALL_OW 313
35279: ST_TO_ADDR
// if t then
35280: LD_VAR 0 4
35284: IFFALSE 35332
// for j in t do
35286: LD_ADDR_VAR 0 7
35290: PUSH
35291: LD_VAR 0 4
35295: PUSH
35296: FOR_IN
35297: IFFALSE 35330
// result := Insert ( result , result + 1 , j ) ;
35299: LD_ADDR_VAR 0 2
35303: PUSH
35304: LD_VAR 0 2
35308: PPUSH
35309: LD_VAR 0 2
35313: PUSH
35314: LD_INT 1
35316: PLUS
35317: PPUSH
35318: LD_VAR 0 7
35322: PPUSH
35323: CALL_OW 2
35327: ST_TO_ADDR
35328: GO 35296
35330: POP
35331: POP
// end ;
35332: GO 35262
35334: POP
35335: POP
// if not result then
35336: LD_VAR 0 2
35340: NOT
35341: IFFALSE 35345
// exit ;
35343: GO 35493
// mech := result [ 1 ] ;
35345: LD_ADDR_VAR 0 5
35349: PUSH
35350: LD_VAR 0 2
35354: PUSH
35355: LD_INT 1
35357: ARRAY
35358: ST_TO_ADDR
// if result > 1 then
35359: LD_VAR 0 2
35363: PUSH
35364: LD_INT 1
35366: GREATER
35367: IFFALSE 35479
// for i = 2 to result do
35369: LD_ADDR_VAR 0 3
35373: PUSH
35374: DOUBLE
35375: LD_INT 2
35377: DEC
35378: ST_TO_ADDR
35379: LD_VAR 0 2
35383: PUSH
35384: FOR_TO
35385: IFFALSE 35477
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35387: LD_ADDR_VAR 0 4
35391: PUSH
35392: LD_VAR 0 2
35396: PUSH
35397: LD_VAR 0 3
35401: ARRAY
35402: PPUSH
35403: LD_INT 3
35405: PPUSH
35406: CALL_OW 259
35410: PUSH
35411: LD_VAR 0 2
35415: PUSH
35416: LD_VAR 0 3
35420: ARRAY
35421: PPUSH
35422: CALL_OW 432
35426: MINUS
35427: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35428: LD_VAR 0 4
35432: PUSH
35433: LD_VAR 0 5
35437: PPUSH
35438: LD_INT 3
35440: PPUSH
35441: CALL_OW 259
35445: PUSH
35446: LD_VAR 0 5
35450: PPUSH
35451: CALL_OW 432
35455: MINUS
35456: GREATEREQUAL
35457: IFFALSE 35475
// mech := result [ i ] ;
35459: LD_ADDR_VAR 0 5
35463: PUSH
35464: LD_VAR 0 2
35468: PUSH
35469: LD_VAR 0 3
35473: ARRAY
35474: ST_TO_ADDR
// end ;
35475: GO 35384
35477: POP
35478: POP
// ComLinkTo ( vehicle , mech ) ;
35479: LD_VAR 0 1
35483: PPUSH
35484: LD_VAR 0 5
35488: PPUSH
35489: CALL_OW 135
// end ;
35493: LD_VAR 0 2
35497: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35498: LD_INT 0
35500: PPUSH
35501: PPUSH
35502: PPUSH
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
35507: PPUSH
35508: PPUSH
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
// result := [ ] ;
35513: LD_ADDR_VAR 0 7
35517: PUSH
35518: EMPTY
35519: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 266
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: IN
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 37179
// if name then
35545: LD_VAR 0 3
35549: IFFALSE 35565
// SetBName ( base_dep , name ) ;
35551: LD_VAR 0 1
35555: PPUSH
35556: LD_VAR 0 3
35560: PPUSH
35561: CALL_OW 500
// base := GetBase ( base_dep ) ;
35565: LD_ADDR_VAR 0 15
35569: PUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL_OW 274
35579: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35580: LD_ADDR_VAR 0 16
35584: PUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 255
35594: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35595: LD_ADDR_VAR 0 17
35599: PUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 248
35609: ST_TO_ADDR
// if sources then
35610: LD_VAR 0 5
35614: IFFALSE 35661
// for i = 1 to 3 do
35616: LD_ADDR_VAR 0 8
35620: PUSH
35621: DOUBLE
35622: LD_INT 1
35624: DEC
35625: ST_TO_ADDR
35626: LD_INT 3
35628: PUSH
35629: FOR_TO
35630: IFFALSE 35659
// AddResourceType ( base , i , sources [ i ] ) ;
35632: LD_VAR 0 15
35636: PPUSH
35637: LD_VAR 0 8
35641: PPUSH
35642: LD_VAR 0 5
35646: PUSH
35647: LD_VAR 0 8
35651: ARRAY
35652: PPUSH
35653: CALL_OW 276
35657: GO 35629
35659: POP
35660: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35661: LD_ADDR_VAR 0 18
35665: PUSH
35666: LD_VAR 0 15
35670: PPUSH
35671: LD_VAR 0 2
35675: PPUSH
35676: LD_INT 1
35678: PPUSH
35679: CALL 34921 0 3
35683: ST_TO_ADDR
// InitHc ;
35684: CALL_OW 19
// InitUc ;
35688: CALL_OW 18
// uc_side := side ;
35692: LD_ADDR_OWVAR 20
35696: PUSH
35697: LD_VAR 0 16
35701: ST_TO_ADDR
// uc_nation := nation ;
35702: LD_ADDR_OWVAR 21
35706: PUSH
35707: LD_VAR 0 17
35711: ST_TO_ADDR
// if buildings then
35712: LD_VAR 0 18
35716: IFFALSE 37038
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35718: LD_ADDR_VAR 0 19
35722: PUSH
35723: LD_VAR 0 18
35727: PPUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 30
35733: PUSH
35734: LD_INT 29
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 30
35743: PUSH
35744: LD_INT 30
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: PPUSH
35756: CALL_OW 72
35760: ST_TO_ADDR
// if tmp then
35761: LD_VAR 0 19
35765: IFFALSE 35813
// for i in tmp do
35767: LD_ADDR_VAR 0 8
35771: PUSH
35772: LD_VAR 0 19
35776: PUSH
35777: FOR_IN
35778: IFFALSE 35811
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35780: LD_VAR 0 8
35784: PPUSH
35785: CALL_OW 250
35789: PPUSH
35790: LD_VAR 0 8
35794: PPUSH
35795: CALL_OW 251
35799: PPUSH
35800: LD_VAR 0 16
35804: PPUSH
35805: CALL_OW 441
35809: GO 35777
35811: POP
35812: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35813: LD_VAR 0 18
35817: PPUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 30
35823: PUSH
35824: LD_INT 32
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 30
35833: PUSH
35834: LD_INT 33
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: PPUSH
35846: CALL_OW 72
35850: IFFALSE 35938
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35852: LD_ADDR_VAR 0 8
35856: PUSH
35857: LD_VAR 0 18
35861: PPUSH
35862: LD_INT 2
35864: PUSH
35865: LD_INT 30
35867: PUSH
35868: LD_INT 32
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 30
35877: PUSH
35878: LD_INT 33
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: PPUSH
35890: CALL_OW 72
35894: PUSH
35895: FOR_IN
35896: IFFALSE 35936
// begin if not GetBWeapon ( i ) then
35898: LD_VAR 0 8
35902: PPUSH
35903: CALL_OW 269
35907: NOT
35908: IFFALSE 35934
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35910: LD_VAR 0 8
35914: PPUSH
35915: LD_VAR 0 8
35919: PPUSH
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL 37184 0 2
35929: PPUSH
35930: CALL_OW 431
// end ;
35934: GO 35895
35936: POP
35937: POP
// end ; for i = 1 to personel do
35938: LD_ADDR_VAR 0 8
35942: PUSH
35943: DOUBLE
35944: LD_INT 1
35946: DEC
35947: ST_TO_ADDR
35948: LD_VAR 0 6
35952: PUSH
35953: FOR_TO
35954: IFFALSE 37018
// begin if i > 4 then
35956: LD_VAR 0 8
35960: PUSH
35961: LD_INT 4
35963: GREATER
35964: IFFALSE 35968
// break ;
35966: GO 37018
// case i of 1 :
35968: LD_VAR 0 8
35972: PUSH
35973: LD_INT 1
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35981
35979: GO 36061
35981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35982: LD_ADDR_VAR 0 12
35986: PUSH
35987: LD_VAR 0 18
35991: PPUSH
35992: LD_INT 22
35994: PUSH
35995: LD_VAR 0 16
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 58
36006: PUSH
36007: EMPTY
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: LD_INT 30
36015: PUSH
36016: LD_INT 32
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 30
36025: PUSH
36026: LD_INT 4
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 30
36035: PUSH
36036: LD_INT 5
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: PPUSH
36054: CALL_OW 72
36058: ST_TO_ADDR
36059: GO 36283
36061: LD_INT 2
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36131
36069: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36070: LD_ADDR_VAR 0 12
36074: PUSH
36075: LD_VAR 0 18
36079: PPUSH
36080: LD_INT 22
36082: PUSH
36083: LD_VAR 0 16
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: LD_INT 30
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 30
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PPUSH
36124: CALL_OW 72
36128: ST_TO_ADDR
36129: GO 36283
36131: LD_INT 3
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36201
36139: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36140: LD_ADDR_VAR 0 12
36144: PUSH
36145: LD_VAR 0 18
36149: PPUSH
36150: LD_INT 22
36152: PUSH
36153: LD_VAR 0 16
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 30
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 30
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PPUSH
36194: CALL_OW 72
36198: ST_TO_ADDR
36199: GO 36283
36201: LD_INT 4
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36209
36207: GO 36282
36209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36210: LD_ADDR_VAR 0 12
36214: PUSH
36215: LD_VAR 0 18
36219: PPUSH
36220: LD_INT 22
36222: PUSH
36223: LD_VAR 0 16
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 30
36237: PUSH
36238: LD_INT 6
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 30
36247: PUSH
36248: LD_INT 7
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 30
36257: PUSH
36258: LD_INT 8
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 72
36279: ST_TO_ADDR
36280: GO 36283
36282: POP
// if i = 1 then
36283: LD_VAR 0 8
36287: PUSH
36288: LD_INT 1
36290: EQUAL
36291: IFFALSE 36402
// begin tmp := [ ] ;
36293: LD_ADDR_VAR 0 19
36297: PUSH
36298: EMPTY
36299: ST_TO_ADDR
// for j in f do
36300: LD_ADDR_VAR 0 9
36304: PUSH
36305: LD_VAR 0 12
36309: PUSH
36310: FOR_IN
36311: IFFALSE 36384
// if GetBType ( j ) = b_bunker then
36313: LD_VAR 0 9
36317: PPUSH
36318: CALL_OW 266
36322: PUSH
36323: LD_INT 32
36325: EQUAL
36326: IFFALSE 36353
// tmp := Insert ( tmp , 1 , j ) else
36328: LD_ADDR_VAR 0 19
36332: PUSH
36333: LD_VAR 0 19
36337: PPUSH
36338: LD_INT 1
36340: PPUSH
36341: LD_VAR 0 9
36345: PPUSH
36346: CALL_OW 2
36350: ST_TO_ADDR
36351: GO 36382
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36353: LD_ADDR_VAR 0 19
36357: PUSH
36358: LD_VAR 0 19
36362: PPUSH
36363: LD_VAR 0 19
36367: PUSH
36368: LD_INT 1
36370: PLUS
36371: PPUSH
36372: LD_VAR 0 9
36376: PPUSH
36377: CALL_OW 2
36381: ST_TO_ADDR
36382: GO 36310
36384: POP
36385: POP
// if tmp then
36386: LD_VAR 0 19
36390: IFFALSE 36402
// f := tmp ;
36392: LD_ADDR_VAR 0 12
36396: PUSH
36397: LD_VAR 0 19
36401: ST_TO_ADDR
// end ; x := personel [ i ] ;
36402: LD_ADDR_VAR 0 13
36406: PUSH
36407: LD_VAR 0 6
36411: PUSH
36412: LD_VAR 0 8
36416: ARRAY
36417: ST_TO_ADDR
// if x = - 1 then
36418: LD_VAR 0 13
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: EQUAL
36427: IFFALSE 36636
// begin for j in f do
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_VAR 0 12
36438: PUSH
36439: FOR_IN
36440: IFFALSE 36632
// repeat InitHc ;
36442: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36446: LD_VAR 0 9
36450: PPUSH
36451: CALL_OW 266
36455: PUSH
36456: LD_INT 5
36458: EQUAL
36459: IFFALSE 36529
// begin if UnitsInside ( j ) < 3 then
36461: LD_VAR 0 9
36465: PPUSH
36466: CALL_OW 313
36470: PUSH
36471: LD_INT 3
36473: LESS
36474: IFFALSE 36510
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36476: LD_INT 0
36478: PPUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 8
36484: PUSH
36485: LD_INT 9
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: PUSH
36493: LD_VAR 0 17
36497: ARRAY
36498: PPUSH
36499: LD_VAR 0 4
36503: PPUSH
36504: CALL_OW 380
36508: GO 36527
// PrepareHuman ( false , i , skill ) ;
36510: LD_INT 0
36512: PPUSH
36513: LD_VAR 0 8
36517: PPUSH
36518: LD_VAR 0 4
36522: PPUSH
36523: CALL_OW 380
// end else
36527: GO 36546
// PrepareHuman ( false , i , skill ) ;
36529: LD_INT 0
36531: PPUSH
36532: LD_VAR 0 8
36536: PPUSH
36537: LD_VAR 0 4
36541: PPUSH
36542: CALL_OW 380
// un := CreateHuman ;
36546: LD_ADDR_VAR 0 14
36550: PUSH
36551: CALL_OW 44
36555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36556: LD_ADDR_VAR 0 7
36560: PUSH
36561: LD_VAR 0 7
36565: PPUSH
36566: LD_INT 1
36568: PPUSH
36569: LD_VAR 0 14
36573: PPUSH
36574: CALL_OW 2
36578: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36579: LD_VAR 0 14
36583: PPUSH
36584: LD_VAR 0 9
36588: PPUSH
36589: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36593: LD_VAR 0 9
36597: PPUSH
36598: CALL_OW 313
36602: PUSH
36603: LD_INT 6
36605: EQUAL
36606: PUSH
36607: LD_VAR 0 9
36611: PPUSH
36612: CALL_OW 266
36616: PUSH
36617: LD_INT 32
36619: PUSH
36620: LD_INT 31
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: IN
36627: OR
36628: IFFALSE 36442
36630: GO 36439
36632: POP
36633: POP
// end else
36634: GO 37016
// for j = 1 to x do
36636: LD_ADDR_VAR 0 9
36640: PUSH
36641: DOUBLE
36642: LD_INT 1
36644: DEC
36645: ST_TO_ADDR
36646: LD_VAR 0 13
36650: PUSH
36651: FOR_TO
36652: IFFALSE 37014
// begin InitHc ;
36654: CALL_OW 19
// if not f then
36658: LD_VAR 0 12
36662: NOT
36663: IFFALSE 36752
// begin PrepareHuman ( false , i , skill ) ;
36665: LD_INT 0
36667: PPUSH
36668: LD_VAR 0 8
36672: PPUSH
36673: LD_VAR 0 4
36677: PPUSH
36678: CALL_OW 380
// un := CreateHuman ;
36682: LD_ADDR_VAR 0 14
36686: PUSH
36687: CALL_OW 44
36691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36692: LD_ADDR_VAR 0 7
36696: PUSH
36697: LD_VAR 0 7
36701: PPUSH
36702: LD_INT 1
36704: PPUSH
36705: LD_VAR 0 14
36709: PPUSH
36710: CALL_OW 2
36714: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36715: LD_VAR 0 14
36719: PPUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 250
36729: PPUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL_OW 251
36739: PPUSH
36740: LD_INT 10
36742: PPUSH
36743: LD_INT 0
36745: PPUSH
36746: CALL_OW 50
// continue ;
36750: GO 36651
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36752: LD_VAR 0 12
36756: PUSH
36757: LD_INT 1
36759: ARRAY
36760: PPUSH
36761: CALL_OW 313
36765: PUSH
36766: LD_VAR 0 12
36770: PUSH
36771: LD_INT 1
36773: ARRAY
36774: PPUSH
36775: CALL_OW 266
36779: PUSH
36780: LD_INT 32
36782: PUSH
36783: LD_INT 31
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: IN
36790: AND
36791: PUSH
36792: LD_VAR 0 12
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PPUSH
36801: CALL_OW 313
36805: PUSH
36806: LD_INT 6
36808: EQUAL
36809: OR
36810: IFFALSE 36830
// f := Delete ( f , 1 ) ;
36812: LD_ADDR_VAR 0 12
36816: PUSH
36817: LD_VAR 0 12
36821: PPUSH
36822: LD_INT 1
36824: PPUSH
36825: CALL_OW 3
36829: ST_TO_ADDR
// if not f then
36830: LD_VAR 0 12
36834: NOT
36835: IFFALSE 36853
// begin x := x + 2 ;
36837: LD_ADDR_VAR 0 13
36841: PUSH
36842: LD_VAR 0 13
36846: PUSH
36847: LD_INT 2
36849: PLUS
36850: ST_TO_ADDR
// continue ;
36851: GO 36651
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36853: LD_VAR 0 12
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PPUSH
36862: CALL_OW 266
36866: PUSH
36867: LD_INT 5
36869: EQUAL
36870: IFFALSE 36944
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36872: LD_VAR 0 12
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PPUSH
36881: CALL_OW 313
36885: PUSH
36886: LD_INT 3
36888: LESS
36889: IFFALSE 36925
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36891: LD_INT 0
36893: PPUSH
36894: LD_INT 5
36896: PUSH
36897: LD_INT 8
36899: PUSH
36900: LD_INT 9
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: PUSH
36908: LD_VAR 0 17
36912: ARRAY
36913: PPUSH
36914: LD_VAR 0 4
36918: PPUSH
36919: CALL_OW 380
36923: GO 36942
// PrepareHuman ( false , i , skill ) ;
36925: LD_INT 0
36927: PPUSH
36928: LD_VAR 0 8
36932: PPUSH
36933: LD_VAR 0 4
36937: PPUSH
36938: CALL_OW 380
// end else
36942: GO 36961
// PrepareHuman ( false , i , skill ) ;
36944: LD_INT 0
36946: PPUSH
36947: LD_VAR 0 8
36951: PPUSH
36952: LD_VAR 0 4
36956: PPUSH
36957: CALL_OW 380
// un := CreateHuman ;
36961: LD_ADDR_VAR 0 14
36965: PUSH
36966: CALL_OW 44
36970: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36971: LD_ADDR_VAR 0 7
36975: PUSH
36976: LD_VAR 0 7
36980: PPUSH
36981: LD_INT 1
36983: PPUSH
36984: LD_VAR 0 14
36988: PPUSH
36989: CALL_OW 2
36993: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36994: LD_VAR 0 14
36998: PPUSH
36999: LD_VAR 0 12
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: CALL_OW 52
// end ;
37012: GO 36651
37014: POP
37015: POP
// end ;
37016: GO 35953
37018: POP
37019: POP
// result := result ^ buildings ;
37020: LD_ADDR_VAR 0 7
37024: PUSH
37025: LD_VAR 0 7
37029: PUSH
37030: LD_VAR 0 18
37034: ADD
37035: ST_TO_ADDR
// end else
37036: GO 37179
// begin for i = 1 to personel do
37038: LD_ADDR_VAR 0 8
37042: PUSH
37043: DOUBLE
37044: LD_INT 1
37046: DEC
37047: ST_TO_ADDR
37048: LD_VAR 0 6
37052: PUSH
37053: FOR_TO
37054: IFFALSE 37177
// begin if i > 4 then
37056: LD_VAR 0 8
37060: PUSH
37061: LD_INT 4
37063: GREATER
37064: IFFALSE 37068
// break ;
37066: GO 37177
// x := personel [ i ] ;
37068: LD_ADDR_VAR 0 13
37072: PUSH
37073: LD_VAR 0 6
37077: PUSH
37078: LD_VAR 0 8
37082: ARRAY
37083: ST_TO_ADDR
// if x = - 1 then
37084: LD_VAR 0 13
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: EQUAL
37093: IFFALSE 37097
// continue ;
37095: GO 37053
// PrepareHuman ( false , i , skill ) ;
37097: LD_INT 0
37099: PPUSH
37100: LD_VAR 0 8
37104: PPUSH
37105: LD_VAR 0 4
37109: PPUSH
37110: CALL_OW 380
// un := CreateHuman ;
37114: LD_ADDR_VAR 0 14
37118: PUSH
37119: CALL_OW 44
37123: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37124: LD_VAR 0 14
37128: PPUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 250
37138: PPUSH
37139: LD_VAR 0 1
37143: PPUSH
37144: CALL_OW 251
37148: PPUSH
37149: LD_INT 10
37151: PPUSH
37152: LD_INT 0
37154: PPUSH
37155: CALL_OW 50
// result := result ^ un ;
37159: LD_ADDR_VAR 0 7
37163: PUSH
37164: LD_VAR 0 7
37168: PUSH
37169: LD_VAR 0 14
37173: ADD
37174: ST_TO_ADDR
// end ;
37175: GO 37053
37177: POP
37178: POP
// end ; end ;
37179: LD_VAR 0 7
37183: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37184: LD_INT 0
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
// result := false ;
37202: LD_ADDR_VAR 0 3
37206: PUSH
37207: LD_INT 0
37209: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37210: LD_VAR 0 1
37214: NOT
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 266
37225: PUSH
37226: LD_INT 32
37228: PUSH
37229: LD_INT 33
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: IN
37236: NOT
37237: OR
37238: IFFALSE 37242
// exit ;
37240: GO 38381
// nat := GetNation ( tower ) ;
37242: LD_ADDR_VAR 0 12
37246: PUSH
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 248
37256: ST_TO_ADDR
// side := GetSide ( tower ) ;
37257: LD_ADDR_VAR 0 16
37261: PUSH
37262: LD_VAR 0 1
37266: PPUSH
37267: CALL_OW 255
37271: ST_TO_ADDR
// x := GetX ( tower ) ;
37272: LD_ADDR_VAR 0 10
37276: PUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 250
37286: ST_TO_ADDR
// y := GetY ( tower ) ;
37287: LD_ADDR_VAR 0 11
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 251
37301: ST_TO_ADDR
// if not x or not y then
37302: LD_VAR 0 10
37306: NOT
37307: PUSH
37308: LD_VAR 0 11
37312: NOT
37313: OR
37314: IFFALSE 37318
// exit ;
37316: GO 38381
// weapon := 0 ;
37318: LD_ADDR_VAR 0 18
37322: PUSH
37323: LD_INT 0
37325: ST_TO_ADDR
// fac_list := [ ] ;
37326: LD_ADDR_VAR 0 17
37330: PUSH
37331: EMPTY
37332: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37333: LD_ADDR_VAR 0 6
37337: PUSH
37338: LD_VAR 0 1
37342: PPUSH
37343: CALL_OW 274
37347: PPUSH
37348: LD_VAR 0 2
37352: PPUSH
37353: LD_INT 0
37355: PPUSH
37356: CALL 34921 0 3
37360: PPUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PPUSH
37371: CALL_OW 72
37375: ST_TO_ADDR
// if not factories then
37376: LD_VAR 0 6
37380: NOT
37381: IFFALSE 37385
// exit ;
37383: GO 38381
// for i in factories do
37385: LD_ADDR_VAR 0 8
37389: PUSH
37390: LD_VAR 0 6
37394: PUSH
37395: FOR_IN
37396: IFFALSE 37421
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37398: LD_ADDR_VAR 0 17
37402: PUSH
37403: LD_VAR 0 17
37407: PUSH
37408: LD_VAR 0 8
37412: PPUSH
37413: CALL_OW 478
37417: UNION
37418: ST_TO_ADDR
37419: GO 37395
37421: POP
37422: POP
// if not fac_list then
37423: LD_VAR 0 17
37427: NOT
37428: IFFALSE 37432
// exit ;
37430: GO 38381
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37432: LD_ADDR_VAR 0 5
37436: PUSH
37437: LD_INT 4
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: LD_INT 9
37445: PUSH
37446: LD_INT 10
37448: PUSH
37449: LD_INT 6
37451: PUSH
37452: LD_INT 7
37454: PUSH
37455: LD_INT 11
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 27
37469: PUSH
37470: LD_INT 28
37472: PUSH
37473: LD_INT 26
37475: PUSH
37476: LD_INT 30
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 43
37487: PUSH
37488: LD_INT 44
37490: PUSH
37491: LD_INT 46
37493: PUSH
37494: LD_INT 45
37496: PUSH
37497: LD_INT 47
37499: PUSH
37500: LD_INT 49
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: PUSH
37516: LD_VAR 0 12
37520: ARRAY
37521: ST_TO_ADDR
// for i in list do
37522: LD_ADDR_VAR 0 8
37526: PUSH
37527: LD_VAR 0 5
37531: PUSH
37532: FOR_IN
37533: IFFALSE 37566
// if not i in fac_list then
37535: LD_VAR 0 8
37539: PUSH
37540: LD_VAR 0 17
37544: IN
37545: NOT
37546: IFFALSE 37564
// list := list diff i ;
37548: LD_ADDR_VAR 0 5
37552: PUSH
37553: LD_VAR 0 5
37557: PUSH
37558: LD_VAR 0 8
37562: DIFF
37563: ST_TO_ADDR
37564: GO 37532
37566: POP
37567: POP
// if not list then
37568: LD_VAR 0 5
37572: NOT
37573: IFFALSE 37577
// exit ;
37575: GO 38381
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37577: LD_VAR 0 12
37581: PUSH
37582: LD_INT 3
37584: EQUAL
37585: PUSH
37586: LD_INT 49
37588: PUSH
37589: LD_VAR 0 5
37593: IN
37594: AND
37595: PUSH
37596: LD_INT 31
37598: PPUSH
37599: LD_VAR 0 16
37603: PPUSH
37604: CALL_OW 321
37608: PUSH
37609: LD_INT 2
37611: EQUAL
37612: AND
37613: IFFALSE 37673
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37615: LD_INT 22
37617: PUSH
37618: LD_VAR 0 16
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 35
37629: PUSH
37630: LD_INT 49
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 91
37639: PUSH
37640: LD_VAR 0 1
37644: PUSH
37645: LD_INT 10
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PPUSH
37658: CALL_OW 69
37662: NOT
37663: IFFALSE 37673
// weapon := ru_time_lapser ;
37665: LD_ADDR_VAR 0 18
37669: PUSH
37670: LD_INT 49
37672: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37673: LD_VAR 0 12
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: IN
37688: PUSH
37689: LD_INT 11
37691: PUSH
37692: LD_VAR 0 5
37696: IN
37697: PUSH
37698: LD_INT 30
37700: PUSH
37701: LD_VAR 0 5
37705: IN
37706: OR
37707: AND
37708: PUSH
37709: LD_INT 6
37711: PPUSH
37712: LD_VAR 0 16
37716: PPUSH
37717: CALL_OW 321
37721: PUSH
37722: LD_INT 2
37724: EQUAL
37725: AND
37726: IFFALSE 37891
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37728: LD_INT 22
37730: PUSH
37731: LD_VAR 0 16
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 35
37745: PUSH
37746: LD_INT 11
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 35
37755: PUSH
37756: LD_INT 30
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 91
37770: PUSH
37771: LD_VAR 0 1
37775: PUSH
37776: LD_INT 18
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: PPUSH
37789: CALL_OW 69
37793: NOT
37794: PUSH
37795: LD_INT 22
37797: PUSH
37798: LD_VAR 0 16
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 30
37812: PUSH
37813: LD_INT 32
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 30
37822: PUSH
37823: LD_INT 33
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 91
37837: PUSH
37838: LD_VAR 0 1
37842: PUSH
37843: LD_INT 12
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: PPUSH
37859: CALL_OW 69
37863: PUSH
37864: LD_INT 2
37866: GREATER
37867: AND
37868: IFFALSE 37891
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37870: LD_ADDR_VAR 0 18
37874: PUSH
37875: LD_INT 11
37877: PUSH
37878: LD_INT 30
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_VAR 0 12
37889: ARRAY
37890: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37891: LD_VAR 0 18
37895: NOT
37896: PUSH
37897: LD_INT 40
37899: PPUSH
37900: LD_VAR 0 16
37904: PPUSH
37905: CALL_OW 321
37909: PUSH
37910: LD_INT 2
37912: EQUAL
37913: AND
37914: PUSH
37915: LD_INT 7
37917: PUSH
37918: LD_VAR 0 5
37922: IN
37923: PUSH
37924: LD_INT 28
37926: PUSH
37927: LD_VAR 0 5
37931: IN
37932: OR
37933: PUSH
37934: LD_INT 45
37936: PUSH
37937: LD_VAR 0 5
37941: IN
37942: OR
37943: AND
37944: IFFALSE 38198
// begin hex := GetHexInfo ( x , y ) ;
37946: LD_ADDR_VAR 0 4
37950: PUSH
37951: LD_VAR 0 10
37955: PPUSH
37956: LD_VAR 0 11
37960: PPUSH
37961: CALL_OW 546
37965: ST_TO_ADDR
// if hex [ 1 ] then
37966: LD_VAR 0 4
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: IFFALSE 37978
// exit ;
37976: GO 38381
// height := hex [ 2 ] ;
37978: LD_ADDR_VAR 0 15
37982: PUSH
37983: LD_VAR 0 4
37987: PUSH
37988: LD_INT 2
37990: ARRAY
37991: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37992: LD_ADDR_VAR 0 14
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: LD_INT 5
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// for i in tmp do
38015: LD_ADDR_VAR 0 8
38019: PUSH
38020: LD_VAR 0 14
38024: PUSH
38025: FOR_IN
38026: IFFALSE 38196
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38028: LD_ADDR_VAR 0 9
38032: PUSH
38033: LD_VAR 0 10
38037: PPUSH
38038: LD_VAR 0 8
38042: PPUSH
38043: LD_INT 5
38045: PPUSH
38046: CALL_OW 272
38050: PUSH
38051: LD_VAR 0 11
38055: PPUSH
38056: LD_VAR 0 8
38060: PPUSH
38061: LD_INT 5
38063: PPUSH
38064: CALL_OW 273
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38073: LD_VAR 0 9
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PPUSH
38082: LD_VAR 0 9
38086: PUSH
38087: LD_INT 2
38089: ARRAY
38090: PPUSH
38091: CALL_OW 488
38095: IFFALSE 38194
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38097: LD_ADDR_VAR 0 4
38101: PUSH
38102: LD_VAR 0 9
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PPUSH
38111: LD_VAR 0 9
38115: PUSH
38116: LD_INT 2
38118: ARRAY
38119: PPUSH
38120: CALL_OW 546
38124: ST_TO_ADDR
// if hex [ 1 ] then
38125: LD_VAR 0 4
38129: PUSH
38130: LD_INT 1
38132: ARRAY
38133: IFFALSE 38137
// continue ;
38135: GO 38025
// h := hex [ 2 ] ;
38137: LD_ADDR_VAR 0 13
38141: PUSH
38142: LD_VAR 0 4
38146: PUSH
38147: LD_INT 2
38149: ARRAY
38150: ST_TO_ADDR
// if h + 7 < height then
38151: LD_VAR 0 13
38155: PUSH
38156: LD_INT 7
38158: PLUS
38159: PUSH
38160: LD_VAR 0 15
38164: LESS
38165: IFFALSE 38194
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38167: LD_ADDR_VAR 0 18
38171: PUSH
38172: LD_INT 7
38174: PUSH
38175: LD_INT 28
38177: PUSH
38178: LD_INT 45
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: PUSH
38186: LD_VAR 0 12
38190: ARRAY
38191: ST_TO_ADDR
// break ;
38192: GO 38196
// end ; end ; end ;
38194: GO 38025
38196: POP
38197: POP
// end ; if not weapon then
38198: LD_VAR 0 18
38202: NOT
38203: IFFALSE 38263
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38205: LD_ADDR_VAR 0 5
38209: PUSH
38210: LD_VAR 0 5
38214: PUSH
38215: LD_INT 11
38217: PUSH
38218: LD_INT 30
38220: PUSH
38221: LD_INT 49
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: DIFF
38229: ST_TO_ADDR
// if not list then
38230: LD_VAR 0 5
38234: NOT
38235: IFFALSE 38239
// exit ;
38237: GO 38381
// weapon := list [ rand ( 1 , list ) ] ;
38239: LD_ADDR_VAR 0 18
38243: PUSH
38244: LD_VAR 0 5
38248: PUSH
38249: LD_INT 1
38251: PPUSH
38252: LD_VAR 0 5
38256: PPUSH
38257: CALL_OW 12
38261: ARRAY
38262: ST_TO_ADDR
// end ; if weapon then
38263: LD_VAR 0 18
38267: IFFALSE 38381
// begin tmp := CostOfWeapon ( weapon ) ;
38269: LD_ADDR_VAR 0 14
38273: PUSH
38274: LD_VAR 0 18
38278: PPUSH
38279: CALL_OW 451
38283: ST_TO_ADDR
// j := GetBase ( tower ) ;
38284: LD_ADDR_VAR 0 9
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 274
38298: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38299: LD_VAR 0 9
38303: PPUSH
38304: LD_INT 1
38306: PPUSH
38307: CALL_OW 275
38311: PUSH
38312: LD_VAR 0 14
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: GREATEREQUAL
38321: PUSH
38322: LD_VAR 0 9
38326: PPUSH
38327: LD_INT 2
38329: PPUSH
38330: CALL_OW 275
38334: PUSH
38335: LD_VAR 0 14
38339: PUSH
38340: LD_INT 2
38342: ARRAY
38343: GREATEREQUAL
38344: AND
38345: PUSH
38346: LD_VAR 0 9
38350: PPUSH
38351: LD_INT 3
38353: PPUSH
38354: CALL_OW 275
38358: PUSH
38359: LD_VAR 0 14
38363: PUSH
38364: LD_INT 3
38366: ARRAY
38367: GREATEREQUAL
38368: AND
38369: IFFALSE 38381
// result := weapon ;
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: LD_VAR 0 18
38380: ST_TO_ADDR
// end ; end ;
38381: LD_VAR 0 3
38385: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38386: LD_INT 0
38388: PPUSH
38389: PPUSH
// result := true ;
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_INT 1
38397: ST_TO_ADDR
// if array1 = array2 then
38398: LD_VAR 0 1
38402: PUSH
38403: LD_VAR 0 2
38407: EQUAL
38408: IFFALSE 38468
// begin for i = 1 to array1 do
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: DOUBLE
38416: LD_INT 1
38418: DEC
38419: ST_TO_ADDR
38420: LD_VAR 0 1
38424: PUSH
38425: FOR_TO
38426: IFFALSE 38464
// if array1 [ i ] <> array2 [ i ] then
38428: LD_VAR 0 1
38432: PUSH
38433: LD_VAR 0 4
38437: ARRAY
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_VAR 0 4
38448: ARRAY
38449: NONEQUAL
38450: IFFALSE 38462
// begin result := false ;
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_INT 0
38459: ST_TO_ADDR
// break ;
38460: GO 38464
// end ;
38462: GO 38425
38464: POP
38465: POP
// end else
38466: GO 38476
// result := false ;
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_INT 0
38475: ST_TO_ADDR
// end ;
38476: LD_VAR 0 3
38480: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38481: LD_INT 0
38483: PPUSH
38484: PPUSH
// if not array1 or not array2 then
38485: LD_VAR 0 1
38489: NOT
38490: PUSH
38491: LD_VAR 0 2
38495: NOT
38496: OR
38497: IFFALSE 38501
// exit ;
38499: GO 38565
// result := true ;
38501: LD_ADDR_VAR 0 3
38505: PUSH
38506: LD_INT 1
38508: ST_TO_ADDR
// for i = 1 to array1 do
38509: LD_ADDR_VAR 0 4
38513: PUSH
38514: DOUBLE
38515: LD_INT 1
38517: DEC
38518: ST_TO_ADDR
38519: LD_VAR 0 1
38523: PUSH
38524: FOR_TO
38525: IFFALSE 38563
// if array1 [ i ] <> array2 [ i ] then
38527: LD_VAR 0 1
38531: PUSH
38532: LD_VAR 0 4
38536: ARRAY
38537: PUSH
38538: LD_VAR 0 2
38542: PUSH
38543: LD_VAR 0 4
38547: ARRAY
38548: NONEQUAL
38549: IFFALSE 38561
// begin result := false ;
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_INT 0
38558: ST_TO_ADDR
// break ;
38559: GO 38563
// end ;
38561: GO 38524
38563: POP
38564: POP
// end ;
38565: LD_VAR 0 3
38569: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38570: LD_INT 0
38572: PPUSH
38573: PPUSH
38574: PPUSH
// pom := GetBase ( fac ) ;
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: CALL_OW 274
38589: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38590: LD_ADDR_VAR 0 4
38594: PUSH
38595: LD_VAR 0 2
38599: PUSH
38600: LD_INT 1
38602: ARRAY
38603: PPUSH
38604: LD_VAR 0 2
38608: PUSH
38609: LD_INT 2
38611: ARRAY
38612: PPUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 3
38620: ARRAY
38621: PPUSH
38622: LD_VAR 0 2
38626: PUSH
38627: LD_INT 4
38629: ARRAY
38630: PPUSH
38631: CALL_OW 449
38635: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38636: LD_ADDR_VAR 0 3
38640: PUSH
38641: LD_VAR 0 5
38645: PPUSH
38646: LD_INT 1
38648: PPUSH
38649: CALL_OW 275
38653: PUSH
38654: LD_VAR 0 4
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: GREATEREQUAL
38663: PUSH
38664: LD_VAR 0 5
38668: PPUSH
38669: LD_INT 2
38671: PPUSH
38672: CALL_OW 275
38676: PUSH
38677: LD_VAR 0 4
38681: PUSH
38682: LD_INT 2
38684: ARRAY
38685: GREATEREQUAL
38686: AND
38687: PUSH
38688: LD_VAR 0 5
38692: PPUSH
38693: LD_INT 3
38695: PPUSH
38696: CALL_OW 275
38700: PUSH
38701: LD_VAR 0 4
38705: PUSH
38706: LD_INT 3
38708: ARRAY
38709: GREATEREQUAL
38710: AND
38711: ST_TO_ADDR
// end ;
38712: LD_VAR 0 3
38716: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38717: LD_INT 0
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
// pom := GetBase ( building ) ;
38723: LD_ADDR_VAR 0 3
38727: PUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: CALL_OW 274
38737: ST_TO_ADDR
// if not pom then
38738: LD_VAR 0 3
38742: NOT
38743: IFFALSE 38747
// exit ;
38745: GO 38917
// btype := GetBType ( building ) ;
38747: LD_ADDR_VAR 0 5
38751: PUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 266
38761: ST_TO_ADDR
// if btype = b_armoury then
38762: LD_VAR 0 5
38766: PUSH
38767: LD_INT 4
38769: EQUAL
38770: IFFALSE 38780
// btype := b_barracks ;
38772: LD_ADDR_VAR 0 5
38776: PUSH
38777: LD_INT 5
38779: ST_TO_ADDR
// if btype = b_depot then
38780: LD_VAR 0 5
38784: PUSH
38785: LD_INT 0
38787: EQUAL
38788: IFFALSE 38798
// btype := b_warehouse ;
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: LD_INT 1
38797: ST_TO_ADDR
// if btype = b_workshop then
38798: LD_VAR 0 5
38802: PUSH
38803: LD_INT 2
38805: EQUAL
38806: IFFALSE 38816
// btype := b_factory ;
38808: LD_ADDR_VAR 0 5
38812: PUSH
38813: LD_INT 3
38815: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38816: LD_ADDR_VAR 0 4
38820: PUSH
38821: LD_VAR 0 5
38825: PPUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 248
38835: PPUSH
38836: CALL_OW 450
38840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38841: LD_ADDR_VAR 0 2
38845: PUSH
38846: LD_VAR 0 3
38850: PPUSH
38851: LD_INT 1
38853: PPUSH
38854: CALL_OW 275
38858: PUSH
38859: LD_VAR 0 4
38863: PUSH
38864: LD_INT 1
38866: ARRAY
38867: GREATEREQUAL
38868: PUSH
38869: LD_VAR 0 3
38873: PPUSH
38874: LD_INT 2
38876: PPUSH
38877: CALL_OW 275
38881: PUSH
38882: LD_VAR 0 4
38886: PUSH
38887: LD_INT 2
38889: ARRAY
38890: GREATEREQUAL
38891: AND
38892: PUSH
38893: LD_VAR 0 3
38897: PPUSH
38898: LD_INT 3
38900: PPUSH
38901: CALL_OW 275
38905: PUSH
38906: LD_VAR 0 4
38910: PUSH
38911: LD_INT 3
38913: ARRAY
38914: GREATEREQUAL
38915: AND
38916: ST_TO_ADDR
// end ;
38917: LD_VAR 0 2
38921: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38922: LD_INT 0
38924: PPUSH
38925: PPUSH
38926: PPUSH
// pom := GetBase ( building ) ;
38927: LD_ADDR_VAR 0 4
38931: PUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: CALL_OW 274
38941: ST_TO_ADDR
// if not pom then
38942: LD_VAR 0 4
38946: NOT
38947: IFFALSE 38951
// exit ;
38949: GO 39052
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38951: LD_ADDR_VAR 0 5
38955: PUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 248
38970: PPUSH
38971: CALL_OW 450
38975: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38976: LD_ADDR_VAR 0 3
38980: PUSH
38981: LD_VAR 0 4
38985: PPUSH
38986: LD_INT 1
38988: PPUSH
38989: CALL_OW 275
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: LD_INT 1
39001: ARRAY
39002: GREATEREQUAL
39003: PUSH
39004: LD_VAR 0 4
39008: PPUSH
39009: LD_INT 2
39011: PPUSH
39012: CALL_OW 275
39016: PUSH
39017: LD_VAR 0 5
39021: PUSH
39022: LD_INT 2
39024: ARRAY
39025: GREATEREQUAL
39026: AND
39027: PUSH
39028: LD_VAR 0 4
39032: PPUSH
39033: LD_INT 3
39035: PPUSH
39036: CALL_OW 275
39040: PUSH
39041: LD_VAR 0 5
39045: PUSH
39046: LD_INT 3
39048: ARRAY
39049: GREATEREQUAL
39050: AND
39051: ST_TO_ADDR
// end ;
39052: LD_VAR 0 3
39056: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39057: LD_INT 0
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
39069: PPUSH
// result := false ;
39070: LD_ADDR_VAR 0 8
39074: PUSH
39075: LD_INT 0
39077: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39078: LD_VAR 0 5
39082: NOT
39083: PUSH
39084: LD_VAR 0 1
39088: NOT
39089: OR
39090: PUSH
39091: LD_VAR 0 2
39095: NOT
39096: OR
39097: PUSH
39098: LD_VAR 0 3
39102: NOT
39103: OR
39104: IFFALSE 39108
// exit ;
39106: GO 39909
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39108: LD_ADDR_VAR 0 14
39112: PUSH
39113: LD_VAR 0 1
39117: PPUSH
39118: LD_VAR 0 2
39122: PPUSH
39123: LD_VAR 0 3
39127: PPUSH
39128: LD_VAR 0 4
39132: PPUSH
39133: LD_VAR 0 5
39137: PUSH
39138: LD_INT 1
39140: ARRAY
39141: PPUSH
39142: CALL_OW 248
39146: PPUSH
39147: LD_INT 0
39149: PPUSH
39150: CALL 40746 0 6
39154: ST_TO_ADDR
// if not hexes then
39155: LD_VAR 0 14
39159: NOT
39160: IFFALSE 39164
// exit ;
39162: GO 39909
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39164: LD_ADDR_VAR 0 17
39168: PUSH
39169: LD_VAR 0 5
39173: PPUSH
39174: LD_INT 22
39176: PUSH
39177: LD_VAR 0 13
39181: PPUSH
39182: CALL_OW 255
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 30
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 30
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PPUSH
39223: CALL_OW 72
39227: ST_TO_ADDR
// for i = 1 to hexes do
39228: LD_ADDR_VAR 0 9
39232: PUSH
39233: DOUBLE
39234: LD_INT 1
39236: DEC
39237: ST_TO_ADDR
39238: LD_VAR 0 14
39242: PUSH
39243: FOR_TO
39244: IFFALSE 39907
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39246: LD_ADDR_VAR 0 13
39250: PUSH
39251: LD_VAR 0 14
39255: PUSH
39256: LD_VAR 0 9
39260: ARRAY
39261: PUSH
39262: LD_INT 1
39264: ARRAY
39265: PPUSH
39266: LD_VAR 0 14
39270: PUSH
39271: LD_VAR 0 9
39275: ARRAY
39276: PUSH
39277: LD_INT 2
39279: ARRAY
39280: PPUSH
39281: CALL_OW 428
39285: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39286: LD_VAR 0 14
39290: PUSH
39291: LD_VAR 0 9
39295: ARRAY
39296: PUSH
39297: LD_INT 1
39299: ARRAY
39300: PPUSH
39301: LD_VAR 0 14
39305: PUSH
39306: LD_VAR 0 9
39310: ARRAY
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: PPUSH
39316: CALL_OW 351
39320: PUSH
39321: LD_VAR 0 14
39325: PUSH
39326: LD_VAR 0 9
39330: ARRAY
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PPUSH
39336: LD_VAR 0 14
39340: PUSH
39341: LD_VAR 0 9
39345: ARRAY
39346: PUSH
39347: LD_INT 2
39349: ARRAY
39350: PPUSH
39351: CALL_OW 488
39355: NOT
39356: OR
39357: PUSH
39358: LD_VAR 0 13
39362: PPUSH
39363: CALL_OW 247
39367: PUSH
39368: LD_INT 3
39370: EQUAL
39371: OR
39372: IFFALSE 39378
// exit ;
39374: POP
39375: POP
39376: GO 39909
// if not tmp then
39378: LD_VAR 0 13
39382: NOT
39383: IFFALSE 39387
// continue ;
39385: GO 39243
// result := true ;
39387: LD_ADDR_VAR 0 8
39391: PUSH
39392: LD_INT 1
39394: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39395: LD_VAR 0 13
39399: PPUSH
39400: CALL_OW 247
39404: PUSH
39405: LD_INT 2
39407: EQUAL
39408: PUSH
39409: LD_VAR 0 13
39413: PPUSH
39414: CALL_OW 263
39418: PUSH
39419: LD_INT 1
39421: EQUAL
39422: AND
39423: IFFALSE 39587
// begin if IsDrivenBy ( tmp ) then
39425: LD_VAR 0 13
39429: PPUSH
39430: CALL_OW 311
39434: IFFALSE 39438
// continue ;
39436: GO 39243
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39438: LD_VAR 0 6
39442: PPUSH
39443: LD_INT 3
39445: PUSH
39446: LD_INT 60
39448: PUSH
39449: EMPTY
39450: LIST
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: PUSH
39459: LD_INT 55
39461: PUSH
39462: EMPTY
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PPUSH
39473: CALL_OW 72
39477: IFFALSE 39585
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39479: LD_ADDR_VAR 0 18
39483: PUSH
39484: LD_VAR 0 6
39488: PPUSH
39489: LD_INT 3
39491: PUSH
39492: LD_INT 60
39494: PUSH
39495: EMPTY
39496: LIST
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: LD_INT 55
39507: PUSH
39508: EMPTY
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PPUSH
39519: CALL_OW 72
39523: PUSH
39524: LD_INT 1
39526: ARRAY
39527: ST_TO_ADDR
// if IsInUnit ( driver ) then
39528: LD_VAR 0 18
39532: PPUSH
39533: CALL_OW 310
39537: IFFALSE 39548
// ComExit ( driver ) ;
39539: LD_VAR 0 18
39543: PPUSH
39544: CALL 63930 0 1
// AddComEnterUnit ( driver , tmp ) ;
39548: LD_VAR 0 18
39552: PPUSH
39553: LD_VAR 0 13
39557: PPUSH
39558: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39562: LD_VAR 0 18
39566: PPUSH
39567: LD_VAR 0 7
39571: PPUSH
39572: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39576: LD_VAR 0 18
39580: PPUSH
39581: CALL_OW 181
// end ; continue ;
39585: GO 39243
// end ; if not tmp in cleaners then
39587: LD_VAR 0 13
39591: PUSH
39592: LD_VAR 0 6
39596: IN
39597: NOT
39598: IFFALSE 39905
// begin if dep then
39600: LD_VAR 0 17
39604: IFFALSE 39740
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39606: LD_ADDR_VAR 0 16
39610: PUSH
39611: LD_VAR 0 17
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PPUSH
39620: CALL_OW 250
39624: PPUSH
39625: LD_VAR 0 17
39629: PUSH
39630: LD_INT 1
39632: ARRAY
39633: PPUSH
39634: CALL_OW 254
39638: PPUSH
39639: LD_INT 5
39641: PPUSH
39642: CALL_OW 272
39646: PUSH
39647: LD_VAR 0 17
39651: PUSH
39652: LD_INT 1
39654: ARRAY
39655: PPUSH
39656: CALL_OW 251
39660: PPUSH
39661: LD_VAR 0 17
39665: PUSH
39666: LD_INT 1
39668: ARRAY
39669: PPUSH
39670: CALL_OW 254
39674: PPUSH
39675: LD_INT 5
39677: PPUSH
39678: CALL_OW 273
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39687: LD_VAR 0 16
39691: PUSH
39692: LD_INT 1
39694: ARRAY
39695: PPUSH
39696: LD_VAR 0 16
39700: PUSH
39701: LD_INT 2
39703: ARRAY
39704: PPUSH
39705: CALL_OW 488
39709: IFFALSE 39740
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39711: LD_VAR 0 13
39715: PPUSH
39716: LD_VAR 0 16
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: PPUSH
39725: LD_VAR 0 16
39729: PUSH
39730: LD_INT 2
39732: ARRAY
39733: PPUSH
39734: CALL_OW 111
// continue ;
39738: GO 39243
// end ; end ; r := GetDir ( tmp ) ;
39740: LD_ADDR_VAR 0 15
39744: PUSH
39745: LD_VAR 0 13
39749: PPUSH
39750: CALL_OW 254
39754: ST_TO_ADDR
// if r = 5 then
39755: LD_VAR 0 15
39759: PUSH
39760: LD_INT 5
39762: EQUAL
39763: IFFALSE 39773
// r := 0 ;
39765: LD_ADDR_VAR 0 15
39769: PUSH
39770: LD_INT 0
39772: ST_TO_ADDR
// for j = r to 5 do
39773: LD_ADDR_VAR 0 10
39777: PUSH
39778: DOUBLE
39779: LD_VAR 0 15
39783: DEC
39784: ST_TO_ADDR
39785: LD_INT 5
39787: PUSH
39788: FOR_TO
39789: IFFALSE 39903
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39791: LD_ADDR_VAR 0 11
39795: PUSH
39796: LD_VAR 0 13
39800: PPUSH
39801: CALL_OW 250
39805: PPUSH
39806: LD_VAR 0 10
39810: PPUSH
39811: LD_INT 2
39813: PPUSH
39814: CALL_OW 272
39818: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39819: LD_ADDR_VAR 0 12
39823: PUSH
39824: LD_VAR 0 13
39828: PPUSH
39829: CALL_OW 251
39833: PPUSH
39834: LD_VAR 0 10
39838: PPUSH
39839: LD_INT 2
39841: PPUSH
39842: CALL_OW 273
39846: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39847: LD_VAR 0 11
39851: PPUSH
39852: LD_VAR 0 12
39856: PPUSH
39857: CALL_OW 488
39861: PUSH
39862: LD_VAR 0 11
39866: PPUSH
39867: LD_VAR 0 12
39871: PPUSH
39872: CALL_OW 428
39876: NOT
39877: AND
39878: IFFALSE 39901
// begin ComMoveXY ( tmp , _x , _y ) ;
39880: LD_VAR 0 13
39884: PPUSH
39885: LD_VAR 0 11
39889: PPUSH
39890: LD_VAR 0 12
39894: PPUSH
39895: CALL_OW 111
// break ;
39899: GO 39903
// end ; end ;
39901: GO 39788
39903: POP
39904: POP
// end ; end ;
39905: GO 39243
39907: POP
39908: POP
// end ;
39909: LD_VAR 0 8
39913: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39914: LD_INT 0
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
// result := false ;
39926: LD_ADDR_VAR 0 6
39930: PUSH
39931: LD_INT 0
39933: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39934: LD_VAR 0 1
39938: NOT
39939: PUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 266
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: IN
39960: NOT
39961: OR
39962: PUSH
39963: LD_VAR 0 2
39967: NOT
39968: OR
39969: PUSH
39970: LD_VAR 0 5
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: LD_INT 4
39989: PUSH
39990: LD_INT 5
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: IN
40001: NOT
40002: OR
40003: PUSH
40004: LD_VAR 0 3
40008: PPUSH
40009: LD_VAR 0 4
40013: PPUSH
40014: CALL_OW 488
40018: NOT
40019: OR
40020: IFFALSE 40024
// exit ;
40022: GO 40741
// pom := GetBase ( depot ) ;
40024: LD_ADDR_VAR 0 10
40028: PUSH
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 274
40038: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40039: LD_ADDR_VAR 0 11
40043: PUSH
40044: LD_VAR 0 2
40048: PPUSH
40049: LD_VAR 0 1
40053: PPUSH
40054: CALL_OW 248
40058: PPUSH
40059: CALL_OW 450
40063: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40064: LD_VAR 0 10
40068: PPUSH
40069: LD_INT 1
40071: PPUSH
40072: CALL_OW 275
40076: PUSH
40077: LD_VAR 0 11
40081: PUSH
40082: LD_INT 1
40084: ARRAY
40085: GREATEREQUAL
40086: PUSH
40087: LD_VAR 0 10
40091: PPUSH
40092: LD_INT 2
40094: PPUSH
40095: CALL_OW 275
40099: PUSH
40100: LD_VAR 0 11
40104: PUSH
40105: LD_INT 2
40107: ARRAY
40108: GREATEREQUAL
40109: AND
40110: PUSH
40111: LD_VAR 0 10
40115: PPUSH
40116: LD_INT 3
40118: PPUSH
40119: CALL_OW 275
40123: PUSH
40124: LD_VAR 0 11
40128: PUSH
40129: LD_INT 3
40131: ARRAY
40132: GREATEREQUAL
40133: AND
40134: NOT
40135: IFFALSE 40139
// exit ;
40137: GO 40741
// if GetBType ( depot ) = b_depot then
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 266
40148: PUSH
40149: LD_INT 0
40151: EQUAL
40152: IFFALSE 40164
// dist := 28 else
40154: LD_ADDR_VAR 0 14
40158: PUSH
40159: LD_INT 28
40161: ST_TO_ADDR
40162: GO 40172
// dist := 36 ;
40164: LD_ADDR_VAR 0 14
40168: PUSH
40169: LD_INT 36
40171: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_VAR 0 3
40181: PPUSH
40182: LD_VAR 0 4
40186: PPUSH
40187: CALL_OW 297
40191: PUSH
40192: LD_VAR 0 14
40196: GREATER
40197: IFFALSE 40201
// exit ;
40199: GO 40741
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40201: LD_ADDR_VAR 0 12
40205: PUSH
40206: LD_VAR 0 2
40210: PPUSH
40211: LD_VAR 0 3
40215: PPUSH
40216: LD_VAR 0 4
40220: PPUSH
40221: LD_VAR 0 5
40225: PPUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 248
40235: PPUSH
40236: LD_INT 0
40238: PPUSH
40239: CALL 40746 0 6
40243: ST_TO_ADDR
// if not hexes then
40244: LD_VAR 0 12
40248: NOT
40249: IFFALSE 40253
// exit ;
40251: GO 40741
// hex := GetHexInfo ( x , y ) ;
40253: LD_ADDR_VAR 0 15
40257: PUSH
40258: LD_VAR 0 3
40262: PPUSH
40263: LD_VAR 0 4
40267: PPUSH
40268: CALL_OW 546
40272: ST_TO_ADDR
// if hex [ 1 ] then
40273: LD_VAR 0 15
40277: PUSH
40278: LD_INT 1
40280: ARRAY
40281: IFFALSE 40285
// exit ;
40283: GO 40741
// height := hex [ 2 ] ;
40285: LD_ADDR_VAR 0 13
40289: PUSH
40290: LD_VAR 0 15
40294: PUSH
40295: LD_INT 2
40297: ARRAY
40298: ST_TO_ADDR
// for i = 1 to hexes do
40299: LD_ADDR_VAR 0 7
40303: PUSH
40304: DOUBLE
40305: LD_INT 1
40307: DEC
40308: ST_TO_ADDR
40309: LD_VAR 0 12
40313: PUSH
40314: FOR_TO
40315: IFFALSE 40645
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40317: LD_VAR 0 12
40321: PUSH
40322: LD_VAR 0 7
40326: ARRAY
40327: PUSH
40328: LD_INT 1
40330: ARRAY
40331: PPUSH
40332: LD_VAR 0 12
40336: PUSH
40337: LD_VAR 0 7
40341: ARRAY
40342: PUSH
40343: LD_INT 2
40345: ARRAY
40346: PPUSH
40347: CALL_OW 488
40351: NOT
40352: PUSH
40353: LD_VAR 0 12
40357: PUSH
40358: LD_VAR 0 7
40362: ARRAY
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PPUSH
40368: LD_VAR 0 12
40372: PUSH
40373: LD_VAR 0 7
40377: ARRAY
40378: PUSH
40379: LD_INT 2
40381: ARRAY
40382: PPUSH
40383: CALL_OW 428
40387: PUSH
40388: LD_INT 0
40390: GREATER
40391: OR
40392: PUSH
40393: LD_VAR 0 12
40397: PUSH
40398: LD_VAR 0 7
40402: ARRAY
40403: PUSH
40404: LD_INT 1
40406: ARRAY
40407: PPUSH
40408: LD_VAR 0 12
40412: PUSH
40413: LD_VAR 0 7
40417: ARRAY
40418: PUSH
40419: LD_INT 2
40421: ARRAY
40422: PPUSH
40423: CALL_OW 351
40427: OR
40428: IFFALSE 40434
// exit ;
40430: POP
40431: POP
40432: GO 40741
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40434: LD_ADDR_VAR 0 8
40438: PUSH
40439: LD_VAR 0 12
40443: PUSH
40444: LD_VAR 0 7
40448: ARRAY
40449: PUSH
40450: LD_INT 1
40452: ARRAY
40453: PPUSH
40454: LD_VAR 0 12
40458: PUSH
40459: LD_VAR 0 7
40463: ARRAY
40464: PUSH
40465: LD_INT 2
40467: ARRAY
40468: PPUSH
40469: CALL_OW 546
40473: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40474: LD_VAR 0 8
40478: PUSH
40479: LD_INT 1
40481: ARRAY
40482: PUSH
40483: LD_VAR 0 8
40487: PUSH
40488: LD_INT 2
40490: ARRAY
40491: PUSH
40492: LD_VAR 0 13
40496: PUSH
40497: LD_INT 2
40499: PLUS
40500: GREATER
40501: OR
40502: PUSH
40503: LD_VAR 0 8
40507: PUSH
40508: LD_INT 2
40510: ARRAY
40511: PUSH
40512: LD_VAR 0 13
40516: PUSH
40517: LD_INT 2
40519: MINUS
40520: LESS
40521: OR
40522: PUSH
40523: LD_VAR 0 8
40527: PUSH
40528: LD_INT 3
40530: ARRAY
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 8
40537: PUSH
40538: LD_INT 9
40540: PUSH
40541: LD_INT 10
40543: PUSH
40544: LD_INT 11
40546: PUSH
40547: LD_INT 12
40549: PUSH
40550: LD_INT 13
40552: PUSH
40553: LD_INT 16
40555: PUSH
40556: LD_INT 17
40558: PUSH
40559: LD_INT 18
40561: PUSH
40562: LD_INT 19
40564: PUSH
40565: LD_INT 20
40567: PUSH
40568: LD_INT 21
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: IN
40586: NOT
40587: OR
40588: PUSH
40589: LD_VAR 0 8
40593: PUSH
40594: LD_INT 5
40596: ARRAY
40597: NOT
40598: OR
40599: PUSH
40600: LD_VAR 0 8
40604: PUSH
40605: LD_INT 6
40607: ARRAY
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 7
40617: PUSH
40618: LD_INT 9
40620: PUSH
40621: LD_INT 10
40623: PUSH
40624: LD_INT 11
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: IN
40635: NOT
40636: OR
40637: IFFALSE 40643
// exit ;
40639: POP
40640: POP
40641: GO 40741
// end ;
40643: GO 40314
40645: POP
40646: POP
// side := GetSide ( depot ) ;
40647: LD_ADDR_VAR 0 9
40651: PUSH
40652: LD_VAR 0 1
40656: PPUSH
40657: CALL_OW 255
40661: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40662: LD_VAR 0 9
40666: PPUSH
40667: LD_VAR 0 3
40671: PPUSH
40672: LD_VAR 0 4
40676: PPUSH
40677: LD_INT 20
40679: PPUSH
40680: CALL 33075 0 4
40684: PUSH
40685: LD_INT 4
40687: ARRAY
40688: IFFALSE 40692
// exit ;
40690: GO 40741
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40692: LD_VAR 0 2
40696: PUSH
40697: LD_INT 29
40699: PUSH
40700: LD_INT 30
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: IN
40707: PUSH
40708: LD_VAR 0 3
40712: PPUSH
40713: LD_VAR 0 4
40717: PPUSH
40718: LD_VAR 0 9
40722: PPUSH
40723: CALL_OW 440
40727: NOT
40728: AND
40729: IFFALSE 40733
// exit ;
40731: GO 40741
// result := true ;
40733: LD_ADDR_VAR 0 6
40737: PUSH
40738: LD_INT 1
40740: ST_TO_ADDR
// end ;
40741: LD_VAR 0 6
40745: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40746: LD_INT 0
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
// result = [ ] ;
40806: LD_ADDR_VAR 0 7
40810: PUSH
40811: EMPTY
40812: ST_TO_ADDR
// temp_list = [ ] ;
40813: LD_ADDR_VAR 0 9
40817: PUSH
40818: EMPTY
40819: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40820: LD_VAR 0 4
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 4
40839: PUSH
40840: LD_INT 5
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: IN
40851: NOT
40852: PUSH
40853: LD_VAR 0 1
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: IN
40868: PUSH
40869: LD_VAR 0 5
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 3
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: IN
40888: NOT
40889: AND
40890: OR
40891: IFFALSE 40895
// exit ;
40893: GO 59286
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40895: LD_VAR 0 1
40899: PUSH
40900: LD_INT 6
40902: PUSH
40903: LD_INT 7
40905: PUSH
40906: LD_INT 8
40908: PUSH
40909: LD_INT 13
40911: PUSH
40912: LD_INT 12
40914: PUSH
40915: LD_INT 15
40917: PUSH
40918: LD_INT 11
40920: PUSH
40921: LD_INT 14
40923: PUSH
40924: LD_INT 10
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: IN
40938: IFFALSE 40948
// btype = b_lab ;
40940: LD_ADDR_VAR 0 1
40944: PUSH
40945: LD_INT 6
40947: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40948: LD_VAR 0 6
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: IN
40967: NOT
40968: PUSH
40969: LD_VAR 0 1
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 3
40985: PUSH
40986: LD_INT 6
40988: PUSH
40989: LD_INT 36
40991: PUSH
40992: LD_INT 4
40994: PUSH
40995: LD_INT 5
40997: PUSH
40998: LD_INT 31
41000: PUSH
41001: LD_INT 32
41003: PUSH
41004: LD_INT 33
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: IN
41020: NOT
41021: PUSH
41022: LD_VAR 0 6
41026: PUSH
41027: LD_INT 1
41029: EQUAL
41030: AND
41031: OR
41032: PUSH
41033: LD_VAR 0 1
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: IN
41048: NOT
41049: PUSH
41050: LD_VAR 0 6
41054: PUSH
41055: LD_INT 2
41057: EQUAL
41058: AND
41059: OR
41060: IFFALSE 41070
// mode = 0 ;
41062: LD_ADDR_VAR 0 6
41066: PUSH
41067: LD_INT 0
41069: ST_TO_ADDR
// case mode of 0 :
41070: LD_VAR 0 6
41074: PUSH
41075: LD_INT 0
41077: DOUBLE
41078: EQUAL
41079: IFTRUE 41083
41081: GO 52536
41083: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41084: LD_ADDR_VAR 0 11
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41277: LD_ADDR_VAR 0 12
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41473: LD_ADDR_VAR 0 13
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: LD_INT 3
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: NEG
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: LD_INT 3
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41672: LD_ADDR_VAR 0 14
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 3
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41868: LD_ADDR_VAR 0 15
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42061: LD_ADDR_VAR 0 16
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 3
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42254: LD_ADDR_VAR 0 17
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 2
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42484: LD_ADDR_VAR 0 18
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42714: LD_ADDR_VAR 0 19
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42944: LD_ADDR_VAR 0 20
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 2
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43174: LD_ADDR_VAR 0 21
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43404: LD_ADDR_VAR 0 22
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43634: LD_ADDR_VAR 0 23
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: LD_INT 3
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 3
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43914: LD_ADDR_VAR 0 24
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 3
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44190: LD_ADDR_VAR 0 25
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44464: LD_ADDR_VAR 0 26
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44740: LD_ADDR_VAR 0 27
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45020: LD_ADDR_VAR 0 28
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: LD_INT 3
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45302: LD_ADDR_VAR 0 29
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: LD_INT 3
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45581: LD_ADDR_VAR 0 30
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 3
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45859: LD_ADDR_VAR 0 31
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46137: LD_ADDR_VAR 0 32
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 3
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46415: LD_ADDR_VAR 0 33
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46694: LD_ADDR_VAR 0 34
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46974: LD_ADDR_VAR 0 35
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47086: LD_ADDR_VAR 0 36
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47198: LD_ADDR_VAR 0 37
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47310: LD_ADDR_VAR 0 38
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47422: LD_ADDR_VAR 0 39
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47534: LD_ADDR_VAR 0 40
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47646: LD_ADDR_VAR 0 41
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 3
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47996: LD_ADDR_VAR 0 42
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 3
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 3
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 3
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 3
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48346: LD_ADDR_VAR 0 43
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48694: LD_ADDR_VAR 0 44
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: NEG
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49044: LD_ADDR_VAR 0 45
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 3
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 3
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49394: LD_ADDR_VAR 0 46
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49742: LD_ADDR_VAR 0 47
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49893: LD_ADDR_VAR 0 48
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50040: LD_ADDR_VAR 0 49
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50184: LD_ADDR_VAR 0 50
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50328: LD_ADDR_VAR 0 51
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50475: LD_ADDR_VAR 0 52
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50626: LD_ADDR_VAR 0 53
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50856: LD_ADDR_VAR 0 54
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51086: LD_ADDR_VAR 0 55
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51316: LD_ADDR_VAR 0 56
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51546: LD_ADDR_VAR 0 57
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51776: LD_ADDR_VAR 0 58
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52006: LD_ADDR_VAR 0 59
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52094: LD_ADDR_VAR 0 60
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52182: LD_ADDR_VAR 0 61
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52270: LD_ADDR_VAR 0 62
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52358: LD_ADDR_VAR 0 63
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52446: LD_ADDR_VAR 0 64
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// end ; 1 :
52534: GO 58431
52536: LD_INT 1
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52544
52542: GO 55167
52544: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52545: LD_ADDR_VAR 0 11
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52589: LD_ADDR_VAR 0 12
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52630: LD_ADDR_VAR 0 13
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52670: LD_ADDR_VAR 0 14
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52711: LD_ADDR_VAR 0 15
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52755: LD_ADDR_VAR 0 16
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52801: LD_ADDR_VAR 0 17
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52845: LD_ADDR_VAR 0 18
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52886: LD_ADDR_VAR 0 19
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52926: LD_ADDR_VAR 0 20
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52967: LD_ADDR_VAR 0 21
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 3
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 3
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53011: LD_ADDR_VAR 0 22
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 3
53042: NEG
53043: PUSH
53044: LD_INT 3
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53057: LD_ADDR_VAR 0 23
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 4
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53101: LD_ADDR_VAR 0 24
53105: PUSH
53106: LD_INT 3
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 4
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53142: LD_ADDR_VAR 0 25
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 4
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: LD_INT 4
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53182: LD_ADDR_VAR 0 26
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 4
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53223: LD_ADDR_VAR 0 27
53227: PUSH
53228: LD_INT 3
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 4
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53267: LD_ADDR_VAR 0 28
53271: PUSH
53272: LD_INT 3
53274: NEG
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 4
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 4
53298: NEG
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53313: LD_ADDR_VAR 0 29
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 4
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 4
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 5
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 5
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 4
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 6
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 6
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 5
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53468: LD_ADDR_VAR 0 30
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 4
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 5
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 5
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 5
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 6
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 6
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53611: LD_ADDR_VAR 0 31
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 3
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 4
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 4
53658: PUSH
53659: LD_INT 4
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 5
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 5
53688: PUSH
53689: LD_INT 5
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 6
53708: PUSH
53709: LD_INT 5
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 6
53718: PUSH
53719: LD_INT 6
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 5
53728: PUSH
53729: LD_INT 6
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53750: LD_ADDR_VAR 0 32
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 4
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 4
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 5
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 5
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 4
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 6
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 6
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 5
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53893: LD_ADDR_VAR 0 33
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 4
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 4
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 4
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 5
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 5
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 5
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 6
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 6
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54048: LD_ADDR_VAR 0 34
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 3
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: LD_INT 3
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 4
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 4
54103: NEG
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 4
54127: NEG
54128: PUSH
54129: LD_INT 5
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 5
54139: NEG
54140: PUSH
54141: LD_INT 4
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 5
54151: NEG
54152: PUSH
54153: LD_INT 5
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 5
54163: NEG
54164: PUSH
54165: LD_INT 6
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 6
54175: NEG
54176: PUSH
54177: LD_INT 5
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 6
54187: NEG
54188: PUSH
54189: LD_INT 6
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54211: LD_ADDR_VAR 0 41
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54255: LD_ADDR_VAR 0 42
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54296: LD_ADDR_VAR 0 43
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54336: LD_ADDR_VAR 0 44
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 3
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54377: LD_ADDR_VAR 0 45
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54421: LD_ADDR_VAR 0 46
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54467: LD_ADDR_VAR 0 47
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54500: LD_ADDR_VAR 0 48
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54531: LD_ADDR_VAR 0 49
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54560: LD_ADDR_VAR 0 50
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54589: LD_ADDR_VAR 0 51
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54620: LD_ADDR_VAR 0 52
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54653: LD_ADDR_VAR 0 53
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54697: LD_ADDR_VAR 0 54
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54738: LD_ADDR_VAR 0 55
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54778: LD_ADDR_VAR 0 56
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54819: LD_ADDR_VAR 0 57
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54863: LD_ADDR_VAR 0 58
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54909: LD_ADDR_VAR 0 59
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54953: LD_ADDR_VAR 0 60
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54994: LD_ADDR_VAR 0 61
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55034: LD_ADDR_VAR 0 62
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55075: LD_ADDR_VAR 0 63
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: LIST
55118: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55119: LD_ADDR_VAR 0 64
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// end ; 2 :
55165: GO 58431
55167: LD_INT 2
55169: DOUBLE
55170: EQUAL
55171: IFTRUE 55175
55173: GO 58430
55175: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55176: LD_ADDR_VAR 0 29
55180: PUSH
55181: LD_INT 4
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 4
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 5
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 5
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 4
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 4
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 4
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 4
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 5
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 5
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 4
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 5
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 3
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 4
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 4
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 4
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 4
55561: NEG
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: LD_INT 5
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: LD_INT 4
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: NEG
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 5
55621: NEG
55622: PUSH
55623: LD_INT 4
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 5
55633: NEG
55634: PUSH
55635: LD_INT 5
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: LD_INT 5
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 5
55657: NEG
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55714: LD_ADDR_VAR 0 30
55718: PUSH
55719: LD_INT 4
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: LD_INT 4
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 5
55751: PUSH
55752: LD_INT 5
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: LD_INT 5
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 4
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 4
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 5
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 5
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 5
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 4
56066: NEG
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 4
56078: NEG
56079: PUSH
56080: LD_INT 4
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 4
56102: NEG
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 5
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 4
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 4
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 5
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: LD_INT 5
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56261: LD_ADDR_VAR 0 31
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 4
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 4
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 4
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 5
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 4
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 4
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 4
56463: NEG
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: LD_INT 5
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: LD_INT 4
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 5
56523: NEG
56524: PUSH
56525: LD_INT 4
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 5
56535: NEG
56536: PUSH
56537: LD_INT 5
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: LD_INT 5
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 5
56559: NEG
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 4
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 4
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 4
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 4
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 5
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 5
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 4
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 5
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56811: LD_ADDR_VAR 0 32
56815: PUSH
56816: LD_INT 4
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 4
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 4
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 5
56874: NEG
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 5
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: NEG
56993: PUSH
56994: LD_INT 4
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 4
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 4
57016: NEG
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 4
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 5
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 4
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 5
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 5
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: LD_INT 4
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 5
57243: PUSH
57244: LD_INT 4
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 5
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 5
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57358: LD_ADDR_VAR 0 33
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: LD_INT 4
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: LD_INT 5
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 4
57413: NEG
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 5
57425: NEG
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 5
57437: NEG
57438: PUSH
57439: LD_INT 5
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: LD_INT 5
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 5
57461: NEG
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 4
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 4
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 4
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 4
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 5
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 5
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 4
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 4
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 5
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: LD_INT 5
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57896: LD_ADDR_VAR 0 34
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 4
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 5
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 4
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 5
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 3
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: LD_INT 5
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 3
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 4
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 4
58098: PUSH
58099: LD_INT 4
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 5
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 5
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 4
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 5
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: LD_INT 4
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: NEG
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 4
58292: NEG
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 3
58304: NEG
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 5
58337: NEG
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 5
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 5
58360: NEG
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: NEG
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// end ; end ;
58428: GO 58431
58430: POP
// case btype of b_depot , b_warehouse :
58431: LD_VAR 0 1
58435: PUSH
58436: LD_INT 0
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58450
58442: LD_INT 1
58444: DOUBLE
58445: EQUAL
58446: IFTRUE 58450
58448: GO 58651
58450: POP
// case nation of nation_american :
58451: LD_VAR 0 5
58455: PUSH
58456: LD_INT 1
58458: DOUBLE
58459: EQUAL
58460: IFTRUE 58464
58462: GO 58520
58464: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58465: LD_ADDR_VAR 0 9
58469: PUSH
58470: LD_VAR 0 11
58474: PUSH
58475: LD_VAR 0 12
58479: PUSH
58480: LD_VAR 0 13
58484: PUSH
58485: LD_VAR 0 14
58489: PUSH
58490: LD_VAR 0 15
58494: PUSH
58495: LD_VAR 0 16
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: PUSH
58508: LD_VAR 0 4
58512: PUSH
58513: LD_INT 1
58515: PLUS
58516: ARRAY
58517: ST_TO_ADDR
58518: GO 58649
58520: LD_INT 2
58522: DOUBLE
58523: EQUAL
58524: IFTRUE 58528
58526: GO 58584
58528: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58529: LD_ADDR_VAR 0 9
58533: PUSH
58534: LD_VAR 0 17
58538: PUSH
58539: LD_VAR 0 18
58543: PUSH
58544: LD_VAR 0 19
58548: PUSH
58549: LD_VAR 0 20
58553: PUSH
58554: LD_VAR 0 21
58558: PUSH
58559: LD_VAR 0 22
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: PUSH
58572: LD_VAR 0 4
58576: PUSH
58577: LD_INT 1
58579: PLUS
58580: ARRAY
58581: ST_TO_ADDR
58582: GO 58649
58584: LD_INT 3
58586: DOUBLE
58587: EQUAL
58588: IFTRUE 58592
58590: GO 58648
58592: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58593: LD_ADDR_VAR 0 9
58597: PUSH
58598: LD_VAR 0 23
58602: PUSH
58603: LD_VAR 0 24
58607: PUSH
58608: LD_VAR 0 25
58612: PUSH
58613: LD_VAR 0 26
58617: PUSH
58618: LD_VAR 0 27
58622: PUSH
58623: LD_VAR 0 28
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: PUSH
58636: LD_VAR 0 4
58640: PUSH
58641: LD_INT 1
58643: PLUS
58644: ARRAY
58645: ST_TO_ADDR
58646: GO 58649
58648: POP
58649: GO 59204
58651: LD_INT 2
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58665
58657: LD_INT 3
58659: DOUBLE
58660: EQUAL
58661: IFTRUE 58665
58663: GO 58721
58665: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58666: LD_ADDR_VAR 0 9
58670: PUSH
58671: LD_VAR 0 29
58675: PUSH
58676: LD_VAR 0 30
58680: PUSH
58681: LD_VAR 0 31
58685: PUSH
58686: LD_VAR 0 32
58690: PUSH
58691: LD_VAR 0 33
58695: PUSH
58696: LD_VAR 0 34
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: PUSH
58709: LD_VAR 0 4
58713: PUSH
58714: LD_INT 1
58716: PLUS
58717: ARRAY
58718: ST_TO_ADDR
58719: GO 59204
58721: LD_INT 16
58723: DOUBLE
58724: EQUAL
58725: IFTRUE 58783
58727: LD_INT 17
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58783
58733: LD_INT 18
58735: DOUBLE
58736: EQUAL
58737: IFTRUE 58783
58739: LD_INT 19
58741: DOUBLE
58742: EQUAL
58743: IFTRUE 58783
58745: LD_INT 22
58747: DOUBLE
58748: EQUAL
58749: IFTRUE 58783
58751: LD_INT 20
58753: DOUBLE
58754: EQUAL
58755: IFTRUE 58783
58757: LD_INT 21
58759: DOUBLE
58760: EQUAL
58761: IFTRUE 58783
58763: LD_INT 23
58765: DOUBLE
58766: EQUAL
58767: IFTRUE 58783
58769: LD_INT 24
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58783
58775: LD_INT 25
58777: DOUBLE
58778: EQUAL
58779: IFTRUE 58783
58781: GO 58839
58783: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58784: LD_ADDR_VAR 0 9
58788: PUSH
58789: LD_VAR 0 35
58793: PUSH
58794: LD_VAR 0 36
58798: PUSH
58799: LD_VAR 0 37
58803: PUSH
58804: LD_VAR 0 38
58808: PUSH
58809: LD_VAR 0 39
58813: PUSH
58814: LD_VAR 0 40
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: PUSH
58827: LD_VAR 0 4
58831: PUSH
58832: LD_INT 1
58834: PLUS
58835: ARRAY
58836: ST_TO_ADDR
58837: GO 59204
58839: LD_INT 6
58841: DOUBLE
58842: EQUAL
58843: IFTRUE 58895
58845: LD_INT 7
58847: DOUBLE
58848: EQUAL
58849: IFTRUE 58895
58851: LD_INT 8
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58895
58857: LD_INT 13
58859: DOUBLE
58860: EQUAL
58861: IFTRUE 58895
58863: LD_INT 12
58865: DOUBLE
58866: EQUAL
58867: IFTRUE 58895
58869: LD_INT 15
58871: DOUBLE
58872: EQUAL
58873: IFTRUE 58895
58875: LD_INT 11
58877: DOUBLE
58878: EQUAL
58879: IFTRUE 58895
58881: LD_INT 14
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58895
58887: LD_INT 10
58889: DOUBLE
58890: EQUAL
58891: IFTRUE 58895
58893: GO 58951
58895: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58896: LD_ADDR_VAR 0 9
58900: PUSH
58901: LD_VAR 0 41
58905: PUSH
58906: LD_VAR 0 42
58910: PUSH
58911: LD_VAR 0 43
58915: PUSH
58916: LD_VAR 0 44
58920: PUSH
58921: LD_VAR 0 45
58925: PUSH
58926: LD_VAR 0 46
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: PUSH
58939: LD_VAR 0 4
58943: PUSH
58944: LD_INT 1
58946: PLUS
58947: ARRAY
58948: ST_TO_ADDR
58949: GO 59204
58951: LD_INT 36
58953: DOUBLE
58954: EQUAL
58955: IFTRUE 58959
58957: GO 59015
58959: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58960: LD_ADDR_VAR 0 9
58964: PUSH
58965: LD_VAR 0 47
58969: PUSH
58970: LD_VAR 0 48
58974: PUSH
58975: LD_VAR 0 49
58979: PUSH
58980: LD_VAR 0 50
58984: PUSH
58985: LD_VAR 0 51
58989: PUSH
58990: LD_VAR 0 52
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: PUSH
59003: LD_VAR 0 4
59007: PUSH
59008: LD_INT 1
59010: PLUS
59011: ARRAY
59012: ST_TO_ADDR
59013: GO 59204
59015: LD_INT 4
59017: DOUBLE
59018: EQUAL
59019: IFTRUE 59041
59021: LD_INT 5
59023: DOUBLE
59024: EQUAL
59025: IFTRUE 59041
59027: LD_INT 34
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59041
59033: LD_INT 37
59035: DOUBLE
59036: EQUAL
59037: IFTRUE 59041
59039: GO 59097
59041: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59042: LD_ADDR_VAR 0 9
59046: PUSH
59047: LD_VAR 0 53
59051: PUSH
59052: LD_VAR 0 54
59056: PUSH
59057: LD_VAR 0 55
59061: PUSH
59062: LD_VAR 0 56
59066: PUSH
59067: LD_VAR 0 57
59071: PUSH
59072: LD_VAR 0 58
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: PUSH
59085: LD_VAR 0 4
59089: PUSH
59090: LD_INT 1
59092: PLUS
59093: ARRAY
59094: ST_TO_ADDR
59095: GO 59204
59097: LD_INT 31
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59147
59103: LD_INT 32
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59147
59109: LD_INT 33
59111: DOUBLE
59112: EQUAL
59113: IFTRUE 59147
59115: LD_INT 27
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59147
59121: LD_INT 26
59123: DOUBLE
59124: EQUAL
59125: IFTRUE 59147
59127: LD_INT 28
59129: DOUBLE
59130: EQUAL
59131: IFTRUE 59147
59133: LD_INT 29
59135: DOUBLE
59136: EQUAL
59137: IFTRUE 59147
59139: LD_INT 30
59141: DOUBLE
59142: EQUAL
59143: IFTRUE 59147
59145: GO 59203
59147: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59148: LD_ADDR_VAR 0 9
59152: PUSH
59153: LD_VAR 0 59
59157: PUSH
59158: LD_VAR 0 60
59162: PUSH
59163: LD_VAR 0 61
59167: PUSH
59168: LD_VAR 0 62
59172: PUSH
59173: LD_VAR 0 63
59177: PUSH
59178: LD_VAR 0 64
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: PUSH
59191: LD_VAR 0 4
59195: PUSH
59196: LD_INT 1
59198: PLUS
59199: ARRAY
59200: ST_TO_ADDR
59201: GO 59204
59203: POP
// temp_list2 = [ ] ;
59204: LD_ADDR_VAR 0 10
59208: PUSH
59209: EMPTY
59210: ST_TO_ADDR
// for i in temp_list do
59211: LD_ADDR_VAR 0 8
59215: PUSH
59216: LD_VAR 0 9
59220: PUSH
59221: FOR_IN
59222: IFFALSE 59274
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59224: LD_ADDR_VAR 0 10
59228: PUSH
59229: LD_VAR 0 10
59233: PUSH
59234: LD_VAR 0 8
59238: PUSH
59239: LD_INT 1
59241: ARRAY
59242: PUSH
59243: LD_VAR 0 2
59247: PLUS
59248: PUSH
59249: LD_VAR 0 8
59253: PUSH
59254: LD_INT 2
59256: ARRAY
59257: PUSH
59258: LD_VAR 0 3
59262: PLUS
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: ADD
59271: ST_TO_ADDR
59272: GO 59221
59274: POP
59275: POP
// result = temp_list2 ;
59276: LD_ADDR_VAR 0 7
59280: PUSH
59281: LD_VAR 0 10
59285: ST_TO_ADDR
// end ;
59286: LD_VAR 0 7
59290: RET
// export function EnemyInRange ( unit , dist ) ; begin
59291: LD_INT 0
59293: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59294: LD_ADDR_VAR 0 3
59298: PUSH
59299: LD_VAR 0 1
59303: PPUSH
59304: CALL_OW 255
59308: PPUSH
59309: LD_VAR 0 1
59313: PPUSH
59314: CALL_OW 250
59318: PPUSH
59319: LD_VAR 0 1
59323: PPUSH
59324: CALL_OW 251
59328: PPUSH
59329: LD_VAR 0 2
59333: PPUSH
59334: CALL 33075 0 4
59338: PUSH
59339: LD_INT 4
59341: ARRAY
59342: ST_TO_ADDR
// end ;
59343: LD_VAR 0 3
59347: RET
// export function PlayerSeeMe ( unit ) ; begin
59348: LD_INT 0
59350: PPUSH
// result := See ( your_side , unit ) ;
59351: LD_ADDR_VAR 0 2
59355: PUSH
59356: LD_OWVAR 2
59360: PPUSH
59361: LD_VAR 0 1
59365: PPUSH
59366: CALL_OW 292
59370: ST_TO_ADDR
// end ;
59371: LD_VAR 0 2
59375: RET
// export function ReverseDir ( unit ) ; begin
59376: LD_INT 0
59378: PPUSH
// if not unit then
59379: LD_VAR 0 1
59383: NOT
59384: IFFALSE 59388
// exit ;
59386: GO 59411
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59388: LD_ADDR_VAR 0 2
59392: PUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 254
59402: PUSH
59403: LD_INT 3
59405: PLUS
59406: PUSH
59407: LD_INT 6
59409: MOD
59410: ST_TO_ADDR
// end ;
59411: LD_VAR 0 2
59415: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59416: LD_INT 0
59418: PPUSH
59419: PPUSH
59420: PPUSH
59421: PPUSH
59422: PPUSH
// if not hexes then
59423: LD_VAR 0 2
59427: NOT
59428: IFFALSE 59432
// exit ;
59430: GO 59580
// dist := 9999 ;
59432: LD_ADDR_VAR 0 5
59436: PUSH
59437: LD_INT 9999
59439: ST_TO_ADDR
// for i = 1 to hexes do
59440: LD_ADDR_VAR 0 4
59444: PUSH
59445: DOUBLE
59446: LD_INT 1
59448: DEC
59449: ST_TO_ADDR
59450: LD_VAR 0 2
59454: PUSH
59455: FOR_TO
59456: IFFALSE 59568
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59458: LD_VAR 0 1
59462: PPUSH
59463: LD_VAR 0 2
59467: PUSH
59468: LD_VAR 0 4
59472: ARRAY
59473: PUSH
59474: LD_INT 1
59476: ARRAY
59477: PPUSH
59478: LD_VAR 0 2
59482: PUSH
59483: LD_VAR 0 4
59487: ARRAY
59488: PUSH
59489: LD_INT 2
59491: ARRAY
59492: PPUSH
59493: CALL_OW 297
59497: PUSH
59498: LD_VAR 0 5
59502: LESS
59503: IFFALSE 59566
// begin hex := hexes [ i ] ;
59505: LD_ADDR_VAR 0 7
59509: PUSH
59510: LD_VAR 0 2
59514: PUSH
59515: LD_VAR 0 4
59519: ARRAY
59520: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59521: LD_ADDR_VAR 0 5
59525: PUSH
59526: LD_VAR 0 1
59530: PPUSH
59531: LD_VAR 0 2
59535: PUSH
59536: LD_VAR 0 4
59540: ARRAY
59541: PUSH
59542: LD_INT 1
59544: ARRAY
59545: PPUSH
59546: LD_VAR 0 2
59550: PUSH
59551: LD_VAR 0 4
59555: ARRAY
59556: PUSH
59557: LD_INT 2
59559: ARRAY
59560: PPUSH
59561: CALL_OW 297
59565: ST_TO_ADDR
// end ; end ;
59566: GO 59455
59568: POP
59569: POP
// result := hex ;
59570: LD_ADDR_VAR 0 3
59574: PUSH
59575: LD_VAR 0 7
59579: ST_TO_ADDR
// end ;
59580: LD_VAR 0 3
59584: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59585: LD_INT 0
59587: PPUSH
59588: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59589: LD_VAR 0 1
59593: NOT
59594: PUSH
59595: LD_VAR 0 1
59599: PUSH
59600: LD_INT 21
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 23
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PPUSH
59624: CALL_OW 69
59628: IN
59629: NOT
59630: OR
59631: IFFALSE 59635
// exit ;
59633: GO 59682
// for i = 1 to 3 do
59635: LD_ADDR_VAR 0 3
59639: PUSH
59640: DOUBLE
59641: LD_INT 1
59643: DEC
59644: ST_TO_ADDR
59645: LD_INT 3
59647: PUSH
59648: FOR_TO
59649: IFFALSE 59680
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59651: LD_VAR 0 1
59655: PPUSH
59656: CALL_OW 250
59660: PPUSH
59661: LD_VAR 0 1
59665: PPUSH
59666: CALL_OW 251
59670: PPUSH
59671: LD_INT 1
59673: PPUSH
59674: CALL_OW 453
59678: GO 59648
59680: POP
59681: POP
// end ;
59682: LD_VAR 0 2
59686: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59687: LD_INT 0
59689: PPUSH
59690: PPUSH
59691: PPUSH
59692: PPUSH
59693: PPUSH
59694: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59695: LD_VAR 0 1
59699: NOT
59700: PUSH
59701: LD_VAR 0 2
59705: NOT
59706: OR
59707: PUSH
59708: LD_VAR 0 1
59712: PPUSH
59713: CALL_OW 314
59717: OR
59718: IFFALSE 59722
// exit ;
59720: GO 60163
// x := GetX ( enemy_unit ) ;
59722: LD_ADDR_VAR 0 7
59726: PUSH
59727: LD_VAR 0 2
59731: PPUSH
59732: CALL_OW 250
59736: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59737: LD_ADDR_VAR 0 8
59741: PUSH
59742: LD_VAR 0 2
59746: PPUSH
59747: CALL_OW 251
59751: ST_TO_ADDR
// if not x or not y then
59752: LD_VAR 0 7
59756: NOT
59757: PUSH
59758: LD_VAR 0 8
59762: NOT
59763: OR
59764: IFFALSE 59768
// exit ;
59766: GO 60163
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59768: LD_ADDR_VAR 0 6
59772: PUSH
59773: LD_VAR 0 7
59777: PPUSH
59778: LD_INT 0
59780: PPUSH
59781: LD_INT 4
59783: PPUSH
59784: CALL_OW 272
59788: PUSH
59789: LD_VAR 0 8
59793: PPUSH
59794: LD_INT 0
59796: PPUSH
59797: LD_INT 4
59799: PPUSH
59800: CALL_OW 273
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_VAR 0 7
59813: PPUSH
59814: LD_INT 1
59816: PPUSH
59817: LD_INT 4
59819: PPUSH
59820: CALL_OW 272
59824: PUSH
59825: LD_VAR 0 8
59829: PPUSH
59830: LD_INT 1
59832: PPUSH
59833: LD_INT 4
59835: PPUSH
59836: CALL_OW 273
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_VAR 0 7
59849: PPUSH
59850: LD_INT 2
59852: PPUSH
59853: LD_INT 4
59855: PPUSH
59856: CALL_OW 272
59860: PUSH
59861: LD_VAR 0 8
59865: PPUSH
59866: LD_INT 2
59868: PPUSH
59869: LD_INT 4
59871: PPUSH
59872: CALL_OW 273
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_VAR 0 7
59885: PPUSH
59886: LD_INT 3
59888: PPUSH
59889: LD_INT 4
59891: PPUSH
59892: CALL_OW 272
59896: PUSH
59897: LD_VAR 0 8
59901: PPUSH
59902: LD_INT 3
59904: PPUSH
59905: LD_INT 4
59907: PPUSH
59908: CALL_OW 273
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_VAR 0 7
59921: PPUSH
59922: LD_INT 4
59924: PPUSH
59925: LD_INT 4
59927: PPUSH
59928: CALL_OW 272
59932: PUSH
59933: LD_VAR 0 8
59937: PPUSH
59938: LD_INT 4
59940: PPUSH
59941: LD_INT 4
59943: PPUSH
59944: CALL_OW 273
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_VAR 0 7
59957: PPUSH
59958: LD_INT 5
59960: PPUSH
59961: LD_INT 4
59963: PPUSH
59964: CALL_OW 272
59968: PUSH
59969: LD_VAR 0 8
59973: PPUSH
59974: LD_INT 5
59976: PPUSH
59977: LD_INT 4
59979: PPUSH
59980: CALL_OW 273
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: ST_TO_ADDR
// for i = tmp downto 1 do
59997: LD_ADDR_VAR 0 4
60001: PUSH
60002: DOUBLE
60003: LD_VAR 0 6
60007: INC
60008: ST_TO_ADDR
60009: LD_INT 1
60011: PUSH
60012: FOR_DOWNTO
60013: IFFALSE 60114
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60015: LD_VAR 0 6
60019: PUSH
60020: LD_VAR 0 4
60024: ARRAY
60025: PUSH
60026: LD_INT 1
60028: ARRAY
60029: PPUSH
60030: LD_VAR 0 6
60034: PUSH
60035: LD_VAR 0 4
60039: ARRAY
60040: PUSH
60041: LD_INT 2
60043: ARRAY
60044: PPUSH
60045: CALL_OW 488
60049: NOT
60050: PUSH
60051: LD_VAR 0 6
60055: PUSH
60056: LD_VAR 0 4
60060: ARRAY
60061: PUSH
60062: LD_INT 1
60064: ARRAY
60065: PPUSH
60066: LD_VAR 0 6
60070: PUSH
60071: LD_VAR 0 4
60075: ARRAY
60076: PUSH
60077: LD_INT 2
60079: ARRAY
60080: PPUSH
60081: CALL_OW 428
60085: PUSH
60086: LD_INT 0
60088: NONEQUAL
60089: OR
60090: IFFALSE 60112
// tmp := Delete ( tmp , i ) ;
60092: LD_ADDR_VAR 0 6
60096: PUSH
60097: LD_VAR 0 6
60101: PPUSH
60102: LD_VAR 0 4
60106: PPUSH
60107: CALL_OW 3
60111: ST_TO_ADDR
60112: GO 60012
60114: POP
60115: POP
// j := GetClosestHex ( unit , tmp ) ;
60116: LD_ADDR_VAR 0 5
60120: PUSH
60121: LD_VAR 0 1
60125: PPUSH
60126: LD_VAR 0 6
60130: PPUSH
60131: CALL 59416 0 2
60135: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60136: LD_VAR 0 1
60140: PPUSH
60141: LD_VAR 0 5
60145: PUSH
60146: LD_INT 1
60148: ARRAY
60149: PPUSH
60150: LD_VAR 0 5
60154: PUSH
60155: LD_INT 2
60157: ARRAY
60158: PPUSH
60159: CALL_OW 111
// end ;
60163: LD_VAR 0 3
60167: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60168: LD_INT 0
60170: PPUSH
60171: PPUSH
60172: PPUSH
// uc_side = 0 ;
60173: LD_ADDR_OWVAR 20
60177: PUSH
60178: LD_INT 0
60180: ST_TO_ADDR
// uc_nation = 0 ;
60181: LD_ADDR_OWVAR 21
60185: PUSH
60186: LD_INT 0
60188: ST_TO_ADDR
// InitHc_All ( ) ;
60189: CALL_OW 584
// InitVc ;
60193: CALL_OW 20
// if mastodonts then
60197: LD_VAR 0 6
60201: IFFALSE 60268
// for i = 1 to mastodonts do
60203: LD_ADDR_VAR 0 11
60207: PUSH
60208: DOUBLE
60209: LD_INT 1
60211: DEC
60212: ST_TO_ADDR
60213: LD_VAR 0 6
60217: PUSH
60218: FOR_TO
60219: IFFALSE 60266
// begin vc_chassis := 31 ;
60221: LD_ADDR_OWVAR 37
60225: PUSH
60226: LD_INT 31
60228: ST_TO_ADDR
// vc_control := control_rider ;
60229: LD_ADDR_OWVAR 38
60233: PUSH
60234: LD_INT 4
60236: ST_TO_ADDR
// animal := CreateVehicle ;
60237: LD_ADDR_VAR 0 12
60241: PUSH
60242: CALL_OW 45
60246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60247: LD_VAR 0 12
60251: PPUSH
60252: LD_VAR 0 8
60256: PPUSH
60257: LD_INT 0
60259: PPUSH
60260: CALL 62456 0 3
// end ;
60264: GO 60218
60266: POP
60267: POP
// if horses then
60268: LD_VAR 0 5
60272: IFFALSE 60339
// for i = 1 to horses do
60274: LD_ADDR_VAR 0 11
60278: PUSH
60279: DOUBLE
60280: LD_INT 1
60282: DEC
60283: ST_TO_ADDR
60284: LD_VAR 0 5
60288: PUSH
60289: FOR_TO
60290: IFFALSE 60337
// begin hc_class := 21 ;
60292: LD_ADDR_OWVAR 28
60296: PUSH
60297: LD_INT 21
60299: ST_TO_ADDR
// hc_gallery :=  ;
60300: LD_ADDR_OWVAR 33
60304: PUSH
60305: LD_STRING 
60307: ST_TO_ADDR
// animal := CreateHuman ;
60308: LD_ADDR_VAR 0 12
60312: PUSH
60313: CALL_OW 44
60317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60318: LD_VAR 0 12
60322: PPUSH
60323: LD_VAR 0 8
60327: PPUSH
60328: LD_INT 0
60330: PPUSH
60331: CALL 62456 0 3
// end ;
60335: GO 60289
60337: POP
60338: POP
// if birds then
60339: LD_VAR 0 1
60343: IFFALSE 60410
// for i = 1 to birds do
60345: LD_ADDR_VAR 0 11
60349: PUSH
60350: DOUBLE
60351: LD_INT 1
60353: DEC
60354: ST_TO_ADDR
60355: LD_VAR 0 1
60359: PUSH
60360: FOR_TO
60361: IFFALSE 60408
// begin hc_class = 18 ;
60363: LD_ADDR_OWVAR 28
60367: PUSH
60368: LD_INT 18
60370: ST_TO_ADDR
// hc_gallery =  ;
60371: LD_ADDR_OWVAR 33
60375: PUSH
60376: LD_STRING 
60378: ST_TO_ADDR
// animal := CreateHuman ;
60379: LD_ADDR_VAR 0 12
60383: PUSH
60384: CALL_OW 44
60388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60389: LD_VAR 0 12
60393: PPUSH
60394: LD_VAR 0 8
60398: PPUSH
60399: LD_INT 0
60401: PPUSH
60402: CALL 62456 0 3
// end ;
60406: GO 60360
60408: POP
60409: POP
// if tigers then
60410: LD_VAR 0 2
60414: IFFALSE 60498
// for i = 1 to tigers do
60416: LD_ADDR_VAR 0 11
60420: PUSH
60421: DOUBLE
60422: LD_INT 1
60424: DEC
60425: ST_TO_ADDR
60426: LD_VAR 0 2
60430: PUSH
60431: FOR_TO
60432: IFFALSE 60496
// begin hc_class = class_tiger ;
60434: LD_ADDR_OWVAR 28
60438: PUSH
60439: LD_INT 14
60441: ST_TO_ADDR
// hc_gallery =  ;
60442: LD_ADDR_OWVAR 33
60446: PUSH
60447: LD_STRING 
60449: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60450: LD_ADDR_OWVAR 35
60454: PUSH
60455: LD_INT 7
60457: NEG
60458: PPUSH
60459: LD_INT 7
60461: PPUSH
60462: CALL_OW 12
60466: ST_TO_ADDR
// animal := CreateHuman ;
60467: LD_ADDR_VAR 0 12
60471: PUSH
60472: CALL_OW 44
60476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60477: LD_VAR 0 12
60481: PPUSH
60482: LD_VAR 0 8
60486: PPUSH
60487: LD_INT 0
60489: PPUSH
60490: CALL 62456 0 3
// end ;
60494: GO 60431
60496: POP
60497: POP
// if apemans then
60498: LD_VAR 0 3
60502: IFFALSE 60625
// for i = 1 to apemans do
60504: LD_ADDR_VAR 0 11
60508: PUSH
60509: DOUBLE
60510: LD_INT 1
60512: DEC
60513: ST_TO_ADDR
60514: LD_VAR 0 3
60518: PUSH
60519: FOR_TO
60520: IFFALSE 60623
// begin hc_class = class_apeman ;
60522: LD_ADDR_OWVAR 28
60526: PUSH
60527: LD_INT 12
60529: ST_TO_ADDR
// hc_gallery =  ;
60530: LD_ADDR_OWVAR 33
60534: PUSH
60535: LD_STRING 
60537: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60538: LD_ADDR_OWVAR 35
60542: PUSH
60543: LD_INT 5
60545: NEG
60546: PPUSH
60547: LD_INT 5
60549: PPUSH
60550: CALL_OW 12
60554: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60555: LD_ADDR_OWVAR 31
60559: PUSH
60560: LD_INT 1
60562: PPUSH
60563: LD_INT 3
60565: PPUSH
60566: CALL_OW 12
60570: PUSH
60571: LD_INT 1
60573: PPUSH
60574: LD_INT 3
60576: PPUSH
60577: CALL_OW 12
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// animal := CreateHuman ;
60594: LD_ADDR_VAR 0 12
60598: PUSH
60599: CALL_OW 44
60603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60604: LD_VAR 0 12
60608: PPUSH
60609: LD_VAR 0 8
60613: PPUSH
60614: LD_INT 0
60616: PPUSH
60617: CALL 62456 0 3
// end ;
60621: GO 60519
60623: POP
60624: POP
// if enchidnas then
60625: LD_VAR 0 4
60629: IFFALSE 60696
// for i = 1 to enchidnas do
60631: LD_ADDR_VAR 0 11
60635: PUSH
60636: DOUBLE
60637: LD_INT 1
60639: DEC
60640: ST_TO_ADDR
60641: LD_VAR 0 4
60645: PUSH
60646: FOR_TO
60647: IFFALSE 60694
// begin hc_class = 13 ;
60649: LD_ADDR_OWVAR 28
60653: PUSH
60654: LD_INT 13
60656: ST_TO_ADDR
// hc_gallery =  ;
60657: LD_ADDR_OWVAR 33
60661: PUSH
60662: LD_STRING 
60664: ST_TO_ADDR
// animal := CreateHuman ;
60665: LD_ADDR_VAR 0 12
60669: PUSH
60670: CALL_OW 44
60674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60675: LD_VAR 0 12
60679: PPUSH
60680: LD_VAR 0 8
60684: PPUSH
60685: LD_INT 0
60687: PPUSH
60688: CALL 62456 0 3
// end ;
60692: GO 60646
60694: POP
60695: POP
// if fishes then
60696: LD_VAR 0 7
60700: IFFALSE 60767
// for i = 1 to fishes do
60702: LD_ADDR_VAR 0 11
60706: PUSH
60707: DOUBLE
60708: LD_INT 1
60710: DEC
60711: ST_TO_ADDR
60712: LD_VAR 0 7
60716: PUSH
60717: FOR_TO
60718: IFFALSE 60765
// begin hc_class = 20 ;
60720: LD_ADDR_OWVAR 28
60724: PUSH
60725: LD_INT 20
60727: ST_TO_ADDR
// hc_gallery =  ;
60728: LD_ADDR_OWVAR 33
60732: PUSH
60733: LD_STRING 
60735: ST_TO_ADDR
// animal := CreateHuman ;
60736: LD_ADDR_VAR 0 12
60740: PUSH
60741: CALL_OW 44
60745: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60746: LD_VAR 0 12
60750: PPUSH
60751: LD_VAR 0 9
60755: PPUSH
60756: LD_INT 0
60758: PPUSH
60759: CALL 62456 0 3
// end ;
60763: GO 60717
60765: POP
60766: POP
// end ;
60767: LD_VAR 0 10
60771: RET
// export function WantHeal ( sci , unit ) ; begin
60772: LD_INT 0
60774: PPUSH
// if GetTaskList ( sci ) > 0 then
60775: LD_VAR 0 1
60779: PPUSH
60780: CALL_OW 437
60784: PUSH
60785: LD_INT 0
60787: GREATER
60788: IFFALSE 60858
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 437
60799: PUSH
60800: LD_INT 1
60802: ARRAY
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PUSH
60808: LD_STRING l
60810: EQUAL
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL_OW 437
60821: PUSH
60822: LD_INT 1
60824: ARRAY
60825: PUSH
60826: LD_INT 4
60828: ARRAY
60829: PUSH
60830: LD_VAR 0 2
60834: EQUAL
60835: AND
60836: IFFALSE 60848
// result := true else
60838: LD_ADDR_VAR 0 3
60842: PUSH
60843: LD_INT 1
60845: ST_TO_ADDR
60846: GO 60856
// result := false ;
60848: LD_ADDR_VAR 0 3
60852: PUSH
60853: LD_INT 0
60855: ST_TO_ADDR
// end else
60856: GO 60866
// result := false ;
60858: LD_ADDR_VAR 0 3
60862: PUSH
60863: LD_INT 0
60865: ST_TO_ADDR
// end ;
60866: LD_VAR 0 3
60870: RET
// export function HealTarget ( sci ) ; begin
60871: LD_INT 0
60873: PPUSH
// if not sci then
60874: LD_VAR 0 1
60878: NOT
60879: IFFALSE 60883
// exit ;
60881: GO 60948
// result := 0 ;
60883: LD_ADDR_VAR 0 2
60887: PUSH
60888: LD_INT 0
60890: ST_TO_ADDR
// if GetTaskList ( sci ) then
60891: LD_VAR 0 1
60895: PPUSH
60896: CALL_OW 437
60900: IFFALSE 60948
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60902: LD_VAR 0 1
60906: PPUSH
60907: CALL_OW 437
60911: PUSH
60912: LD_INT 1
60914: ARRAY
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: PUSH
60920: LD_STRING l
60922: EQUAL
60923: IFFALSE 60948
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60925: LD_ADDR_VAR 0 2
60929: PUSH
60930: LD_VAR 0 1
60934: PPUSH
60935: CALL_OW 437
60939: PUSH
60940: LD_INT 1
60942: ARRAY
60943: PUSH
60944: LD_INT 4
60946: ARRAY
60947: ST_TO_ADDR
// end ;
60948: LD_VAR 0 2
60952: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60953: LD_INT 0
60955: PPUSH
60956: PPUSH
60957: PPUSH
60958: PPUSH
// if not base_units then
60959: LD_VAR 0 1
60963: NOT
60964: IFFALSE 60968
// exit ;
60966: GO 61055
// result := false ;
60968: LD_ADDR_VAR 0 2
60972: PUSH
60973: LD_INT 0
60975: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60976: LD_ADDR_VAR 0 5
60980: PUSH
60981: LD_VAR 0 1
60985: PPUSH
60986: LD_INT 21
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PPUSH
60996: CALL_OW 72
61000: ST_TO_ADDR
// if not tmp then
61001: LD_VAR 0 5
61005: NOT
61006: IFFALSE 61010
// exit ;
61008: GO 61055
// for i in tmp do
61010: LD_ADDR_VAR 0 3
61014: PUSH
61015: LD_VAR 0 5
61019: PUSH
61020: FOR_IN
61021: IFFALSE 61053
// begin result := EnemyInRange ( i , 22 ) ;
61023: LD_ADDR_VAR 0 2
61027: PUSH
61028: LD_VAR 0 3
61032: PPUSH
61033: LD_INT 22
61035: PPUSH
61036: CALL 59291 0 2
61040: ST_TO_ADDR
// if result then
61041: LD_VAR 0 2
61045: IFFALSE 61051
// exit ;
61047: POP
61048: POP
61049: GO 61055
// end ;
61051: GO 61020
61053: POP
61054: POP
// end ;
61055: LD_VAR 0 2
61059: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61060: LD_INT 0
61062: PPUSH
61063: PPUSH
// if not units then
61064: LD_VAR 0 1
61068: NOT
61069: IFFALSE 61073
// exit ;
61071: GO 61143
// result := [ ] ;
61073: LD_ADDR_VAR 0 3
61077: PUSH
61078: EMPTY
61079: ST_TO_ADDR
// for i in units do
61080: LD_ADDR_VAR 0 4
61084: PUSH
61085: LD_VAR 0 1
61089: PUSH
61090: FOR_IN
61091: IFFALSE 61141
// if GetTag ( i ) = tag then
61093: LD_VAR 0 4
61097: PPUSH
61098: CALL_OW 110
61102: PUSH
61103: LD_VAR 0 2
61107: EQUAL
61108: IFFALSE 61139
// result := Insert ( result , result + 1 , i ) ;
61110: LD_ADDR_VAR 0 3
61114: PUSH
61115: LD_VAR 0 3
61119: PPUSH
61120: LD_VAR 0 3
61124: PUSH
61125: LD_INT 1
61127: PLUS
61128: PPUSH
61129: LD_VAR 0 4
61133: PPUSH
61134: CALL_OW 2
61138: ST_TO_ADDR
61139: GO 61090
61141: POP
61142: POP
// end ;
61143: LD_VAR 0 3
61147: RET
// export function IsDriver ( un ) ; begin
61148: LD_INT 0
61150: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61151: LD_ADDR_VAR 0 2
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_INT 55
61163: PUSH
61164: EMPTY
61165: LIST
61166: PPUSH
61167: CALL_OW 69
61171: IN
61172: ST_TO_ADDR
// end ;
61173: LD_VAR 0 2
61177: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61178: LD_INT 0
61180: PPUSH
61181: PPUSH
// list := [ ] ;
61182: LD_ADDR_VAR 0 5
61186: PUSH
61187: EMPTY
61188: ST_TO_ADDR
// case d of 0 :
61189: LD_VAR 0 3
61193: PUSH
61194: LD_INT 0
61196: DOUBLE
61197: EQUAL
61198: IFTRUE 61202
61200: GO 61335
61202: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61203: LD_ADDR_VAR 0 5
61207: PUSH
61208: LD_VAR 0 1
61212: PUSH
61213: LD_INT 4
61215: MINUS
61216: PUSH
61217: LD_VAR 0 2
61221: PUSH
61222: LD_INT 4
61224: MINUS
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: PUSH
61234: LD_VAR 0 1
61238: PUSH
61239: LD_INT 3
61241: MINUS
61242: PUSH
61243: LD_VAR 0 2
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: PUSH
61256: LD_VAR 0 1
61260: PUSH
61261: LD_INT 4
61263: PLUS
61264: PUSH
61265: LD_VAR 0 2
61269: PUSH
61270: LD_INT 4
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: PUSH
61278: LD_VAR 0 1
61282: PUSH
61283: LD_INT 3
61285: PLUS
61286: PUSH
61287: LD_VAR 0 2
61291: PUSH
61292: LD_INT 3
61294: PLUS
61295: PUSH
61296: LD_INT 5
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: LIST
61303: PUSH
61304: LD_VAR 0 1
61308: PUSH
61309: LD_VAR 0 2
61313: PUSH
61314: LD_INT 4
61316: PLUS
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// end ; 1 :
61333: GO 62033
61335: LD_INT 1
61337: DOUBLE
61338: EQUAL
61339: IFTRUE 61343
61341: GO 61476
61343: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61344: LD_ADDR_VAR 0 5
61348: PUSH
61349: LD_VAR 0 1
61353: PUSH
61354: LD_VAR 0 2
61358: PUSH
61359: LD_INT 4
61361: MINUS
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: PUSH
61371: LD_VAR 0 1
61375: PUSH
61376: LD_INT 3
61378: MINUS
61379: PUSH
61380: LD_VAR 0 2
61384: PUSH
61385: LD_INT 3
61387: MINUS
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: PUSH
61397: LD_VAR 0 1
61401: PUSH
61402: LD_INT 4
61404: MINUS
61405: PUSH
61406: LD_VAR 0 2
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: PUSH
61419: LD_VAR 0 1
61423: PUSH
61424: LD_VAR 0 2
61428: PUSH
61429: LD_INT 3
61431: PLUS
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: LIST
61440: PUSH
61441: LD_VAR 0 1
61445: PUSH
61446: LD_INT 4
61448: PLUS
61449: PUSH
61450: LD_VAR 0 2
61454: PUSH
61455: LD_INT 4
61457: PLUS
61458: PUSH
61459: LD_INT 5
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: ST_TO_ADDR
// end ; 2 :
61474: GO 62033
61476: LD_INT 2
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61484
61482: GO 61613
61484: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61485: LD_ADDR_VAR 0 5
61489: PUSH
61490: LD_VAR 0 1
61494: PUSH
61495: LD_VAR 0 2
61499: PUSH
61500: LD_INT 3
61502: MINUS
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: PUSH
61512: LD_VAR 0 1
61516: PUSH
61517: LD_INT 4
61519: PLUS
61520: PUSH
61521: LD_VAR 0 2
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 1
61538: PUSH
61539: LD_VAR 0 2
61543: PUSH
61544: LD_INT 4
61546: PLUS
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: LIST
61555: PUSH
61556: LD_VAR 0 1
61560: PUSH
61561: LD_INT 3
61563: MINUS
61564: PUSH
61565: LD_VAR 0 2
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: PUSH
61578: LD_VAR 0 1
61582: PUSH
61583: LD_INT 4
61585: MINUS
61586: PUSH
61587: LD_VAR 0 2
61591: PUSH
61592: LD_INT 4
61594: MINUS
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: ST_TO_ADDR
// end ; 3 :
61611: GO 62033
61613: LD_INT 3
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61621
61619: GO 61754
61621: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61622: LD_ADDR_VAR 0 5
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_INT 3
61634: PLUS
61635: PUSH
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 4
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: PUSH
61649: LD_VAR 0 1
61653: PUSH
61654: LD_INT 4
61656: PLUS
61657: PUSH
61658: LD_VAR 0 2
61662: PUSH
61663: LD_INT 4
61665: PLUS
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: PUSH
61675: LD_VAR 0 1
61679: PUSH
61680: LD_INT 4
61682: MINUS
61683: PUSH
61684: LD_VAR 0 2
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: PUSH
61697: LD_VAR 0 1
61701: PUSH
61702: LD_VAR 0 2
61706: PUSH
61707: LD_INT 4
61709: MINUS
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: PUSH
61719: LD_VAR 0 1
61723: PUSH
61724: LD_INT 3
61726: MINUS
61727: PUSH
61728: LD_VAR 0 2
61732: PUSH
61733: LD_INT 3
61735: MINUS
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// end ; 4 :
61752: GO 62033
61754: LD_INT 4
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61762
61760: GO 61895
61762: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61763: LD_ADDR_VAR 0 5
61767: PUSH
61768: LD_VAR 0 1
61772: PUSH
61773: LD_VAR 0 2
61777: PUSH
61778: LD_INT 4
61780: PLUS
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: PUSH
61790: LD_VAR 0 1
61794: PUSH
61795: LD_INT 3
61797: PLUS
61798: PUSH
61799: LD_VAR 0 2
61803: PUSH
61804: LD_INT 3
61806: PLUS
61807: PUSH
61808: LD_INT 5
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: PUSH
61816: LD_VAR 0 1
61820: PUSH
61821: LD_INT 4
61823: PLUS
61824: PUSH
61825: LD_VAR 0 2
61829: PUSH
61830: LD_INT 4
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: PUSH
61838: LD_VAR 0 1
61842: PUSH
61843: LD_VAR 0 2
61847: PUSH
61848: LD_INT 3
61850: MINUS
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: PUSH
61860: LD_VAR 0 1
61864: PUSH
61865: LD_INT 4
61867: MINUS
61868: PUSH
61869: LD_VAR 0 2
61873: PUSH
61874: LD_INT 4
61876: MINUS
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: ST_TO_ADDR
// end ; 5 :
61893: GO 62033
61895: LD_INT 5
61897: DOUBLE
61898: EQUAL
61899: IFTRUE 61903
61901: GO 62032
61903: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61904: LD_ADDR_VAR 0 5
61908: PUSH
61909: LD_VAR 0 1
61913: PUSH
61914: LD_INT 4
61916: MINUS
61917: PUSH
61918: LD_VAR 0 2
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: PUSH
61931: LD_VAR 0 1
61935: PUSH
61936: LD_VAR 0 2
61940: PUSH
61941: LD_INT 4
61943: MINUS
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: PUSH
61953: LD_VAR 0 1
61957: PUSH
61958: LD_INT 4
61960: PLUS
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: LD_INT 4
61969: PLUS
61970: PUSH
61971: LD_INT 5
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: LD_VAR 0 1
61983: PUSH
61984: LD_INT 3
61986: PLUS
61987: PUSH
61988: LD_VAR 0 2
61992: PUSH
61993: LD_INT 4
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PUSH
62001: LD_VAR 0 1
62005: PUSH
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 3
62013: PLUS
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// end ; end ;
62030: GO 62033
62032: POP
// result := list ;
62033: LD_ADDR_VAR 0 4
62037: PUSH
62038: LD_VAR 0 5
62042: ST_TO_ADDR
// end ;
62043: LD_VAR 0 4
62047: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62048: LD_INT 0
62050: PPUSH
62051: PPUSH
62052: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62053: LD_VAR 0 1
62057: NOT
62058: PUSH
62059: LD_VAR 0 2
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: LD_INT 4
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: IN
62082: NOT
62083: OR
62084: IFFALSE 62088
// exit ;
62086: GO 62180
// tmp := [ ] ;
62088: LD_ADDR_VAR 0 5
62092: PUSH
62093: EMPTY
62094: ST_TO_ADDR
// for i in units do
62095: LD_ADDR_VAR 0 4
62099: PUSH
62100: LD_VAR 0 1
62104: PUSH
62105: FOR_IN
62106: IFFALSE 62149
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62108: LD_ADDR_VAR 0 5
62112: PUSH
62113: LD_VAR 0 5
62117: PPUSH
62118: LD_VAR 0 5
62122: PUSH
62123: LD_INT 1
62125: PLUS
62126: PPUSH
62127: LD_VAR 0 4
62131: PPUSH
62132: LD_VAR 0 2
62136: PPUSH
62137: CALL_OW 259
62141: PPUSH
62142: CALL_OW 2
62146: ST_TO_ADDR
62147: GO 62105
62149: POP
62150: POP
// if not tmp then
62151: LD_VAR 0 5
62155: NOT
62156: IFFALSE 62160
// exit ;
62158: GO 62180
// result := SortListByListDesc ( units , tmp ) ;
62160: LD_ADDR_VAR 0 3
62164: PUSH
62165: LD_VAR 0 1
62169: PPUSH
62170: LD_VAR 0 5
62174: PPUSH
62175: CALL_OW 77
62179: ST_TO_ADDR
// end ;
62180: LD_VAR 0 3
62184: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62185: LD_INT 0
62187: PPUSH
62188: PPUSH
62189: PPUSH
// result := false ;
62190: LD_ADDR_VAR 0 3
62194: PUSH
62195: LD_INT 0
62197: ST_TO_ADDR
// x := GetX ( building ) ;
62198: LD_ADDR_VAR 0 4
62202: PUSH
62203: LD_VAR 0 2
62207: PPUSH
62208: CALL_OW 250
62212: ST_TO_ADDR
// y := GetY ( building ) ;
62213: LD_ADDR_VAR 0 5
62217: PUSH
62218: LD_VAR 0 2
62222: PPUSH
62223: CALL_OW 251
62227: ST_TO_ADDR
// if not building or not x or not y then
62228: LD_VAR 0 2
62232: NOT
62233: PUSH
62234: LD_VAR 0 4
62238: NOT
62239: OR
62240: PUSH
62241: LD_VAR 0 5
62245: NOT
62246: OR
62247: IFFALSE 62251
// exit ;
62249: GO 62343
// if GetTaskList ( unit ) then
62251: LD_VAR 0 1
62255: PPUSH
62256: CALL_OW 437
62260: IFFALSE 62343
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62262: LD_STRING e
62264: PUSH
62265: LD_VAR 0 1
62269: PPUSH
62270: CALL_OW 437
62274: PUSH
62275: LD_INT 1
62277: ARRAY
62278: PUSH
62279: LD_INT 1
62281: ARRAY
62282: EQUAL
62283: PUSH
62284: LD_VAR 0 4
62288: PUSH
62289: LD_VAR 0 1
62293: PPUSH
62294: CALL_OW 437
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PUSH
62303: LD_INT 2
62305: ARRAY
62306: EQUAL
62307: AND
62308: PUSH
62309: LD_VAR 0 5
62313: PUSH
62314: LD_VAR 0 1
62318: PPUSH
62319: CALL_OW 437
62323: PUSH
62324: LD_INT 1
62326: ARRAY
62327: PUSH
62328: LD_INT 3
62330: ARRAY
62331: EQUAL
62332: AND
62333: IFFALSE 62343
// result := true end ;
62335: LD_ADDR_VAR 0 3
62339: PUSH
62340: LD_INT 1
62342: ST_TO_ADDR
// end ;
62343: LD_VAR 0 3
62347: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62348: LD_INT 0
62350: PPUSH
// result := false ;
62351: LD_ADDR_VAR 0 4
62355: PUSH
62356: LD_INT 0
62358: ST_TO_ADDR
// if GetTaskList ( unit ) then
62359: LD_VAR 0 1
62363: PPUSH
62364: CALL_OW 437
62368: IFFALSE 62451
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62370: LD_STRING M
62372: PUSH
62373: LD_VAR 0 1
62377: PPUSH
62378: CALL_OW 437
62382: PUSH
62383: LD_INT 1
62385: ARRAY
62386: PUSH
62387: LD_INT 1
62389: ARRAY
62390: EQUAL
62391: PUSH
62392: LD_VAR 0 2
62396: PUSH
62397: LD_VAR 0 1
62401: PPUSH
62402: CALL_OW 437
62406: PUSH
62407: LD_INT 1
62409: ARRAY
62410: PUSH
62411: LD_INT 2
62413: ARRAY
62414: EQUAL
62415: AND
62416: PUSH
62417: LD_VAR 0 3
62421: PUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: CALL_OW 437
62431: PUSH
62432: LD_INT 1
62434: ARRAY
62435: PUSH
62436: LD_INT 3
62438: ARRAY
62439: EQUAL
62440: AND
62441: IFFALSE 62451
// result := true ;
62443: LD_ADDR_VAR 0 4
62447: PUSH
62448: LD_INT 1
62450: ST_TO_ADDR
// end ; end ;
62451: LD_VAR 0 4
62455: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62456: LD_INT 0
62458: PPUSH
62459: PPUSH
62460: PPUSH
62461: PPUSH
// if not unit or not area then
62462: LD_VAR 0 1
62466: NOT
62467: PUSH
62468: LD_VAR 0 2
62472: NOT
62473: OR
62474: IFFALSE 62478
// exit ;
62476: GO 62642
// tmp := AreaToList ( area , i ) ;
62478: LD_ADDR_VAR 0 6
62482: PUSH
62483: LD_VAR 0 2
62487: PPUSH
62488: LD_VAR 0 5
62492: PPUSH
62493: CALL_OW 517
62497: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62498: LD_ADDR_VAR 0 5
62502: PUSH
62503: DOUBLE
62504: LD_INT 1
62506: DEC
62507: ST_TO_ADDR
62508: LD_VAR 0 6
62512: PUSH
62513: LD_INT 1
62515: ARRAY
62516: PUSH
62517: FOR_TO
62518: IFFALSE 62640
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62520: LD_ADDR_VAR 0 7
62524: PUSH
62525: LD_VAR 0 6
62529: PUSH
62530: LD_INT 1
62532: ARRAY
62533: PUSH
62534: LD_VAR 0 5
62538: ARRAY
62539: PUSH
62540: LD_VAR 0 6
62544: PUSH
62545: LD_INT 2
62547: ARRAY
62548: PUSH
62549: LD_VAR 0 5
62553: ARRAY
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62559: LD_VAR 0 7
62563: PUSH
62564: LD_INT 1
62566: ARRAY
62567: PPUSH
62568: LD_VAR 0 7
62572: PUSH
62573: LD_INT 2
62575: ARRAY
62576: PPUSH
62577: CALL_OW 428
62581: PUSH
62582: LD_INT 0
62584: EQUAL
62585: IFFALSE 62638
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62587: LD_VAR 0 1
62591: PPUSH
62592: LD_VAR 0 7
62596: PUSH
62597: LD_INT 1
62599: ARRAY
62600: PPUSH
62601: LD_VAR 0 7
62605: PUSH
62606: LD_INT 2
62608: ARRAY
62609: PPUSH
62610: LD_VAR 0 3
62614: PPUSH
62615: CALL_OW 48
// result := IsPlaced ( unit ) ;
62619: LD_ADDR_VAR 0 4
62623: PUSH
62624: LD_VAR 0 1
62628: PPUSH
62629: CALL_OW 305
62633: ST_TO_ADDR
// exit ;
62634: POP
62635: POP
62636: GO 62642
// end ; end ;
62638: GO 62517
62640: POP
62641: POP
// end ;
62642: LD_VAR 0 4
62646: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62647: LD_INT 0
62649: PPUSH
62650: PPUSH
62651: PPUSH
// if not side or side > 8 then
62652: LD_VAR 0 1
62656: NOT
62657: PUSH
62658: LD_VAR 0 1
62662: PUSH
62663: LD_INT 8
62665: GREATER
62666: OR
62667: IFFALSE 62671
// exit ;
62669: GO 62858
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62671: LD_ADDR_VAR 0 4
62675: PUSH
62676: LD_INT 22
62678: PUSH
62679: LD_VAR 0 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 21
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PPUSH
62702: CALL_OW 69
62706: ST_TO_ADDR
// if not tmp then
62707: LD_VAR 0 4
62711: NOT
62712: IFFALSE 62716
// exit ;
62714: GO 62858
// enable_addtolog := true ;
62716: LD_ADDR_OWVAR 81
62720: PUSH
62721: LD_INT 1
62723: ST_TO_ADDR
// AddToLog ( [ ) ;
62724: LD_STRING [
62726: PPUSH
62727: CALL_OW 561
// for i in tmp do
62731: LD_ADDR_VAR 0 3
62735: PUSH
62736: LD_VAR 0 4
62740: PUSH
62741: FOR_IN
62742: IFFALSE 62849
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62744: LD_STRING [
62746: PUSH
62747: LD_VAR 0 3
62751: PPUSH
62752: CALL_OW 266
62756: STR
62757: PUSH
62758: LD_STRING , 
62760: STR
62761: PUSH
62762: LD_VAR 0 3
62766: PPUSH
62767: CALL_OW 250
62771: STR
62772: PUSH
62773: LD_STRING , 
62775: STR
62776: PUSH
62777: LD_VAR 0 3
62781: PPUSH
62782: CALL_OW 251
62786: STR
62787: PUSH
62788: LD_STRING , 
62790: STR
62791: PUSH
62792: LD_VAR 0 3
62796: PPUSH
62797: CALL_OW 254
62801: STR
62802: PUSH
62803: LD_STRING , 
62805: STR
62806: PUSH
62807: LD_VAR 0 3
62811: PPUSH
62812: LD_INT 1
62814: PPUSH
62815: CALL_OW 268
62819: STR
62820: PUSH
62821: LD_STRING , 
62823: STR
62824: PUSH
62825: LD_VAR 0 3
62829: PPUSH
62830: LD_INT 2
62832: PPUSH
62833: CALL_OW 268
62837: STR
62838: PUSH
62839: LD_STRING ],
62841: STR
62842: PPUSH
62843: CALL_OW 561
// end ;
62847: GO 62741
62849: POP
62850: POP
// AddToLog ( ]; ) ;
62851: LD_STRING ];
62853: PPUSH
62854: CALL_OW 561
// end ;
62858: LD_VAR 0 2
62862: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62863: LD_INT 0
62865: PPUSH
62866: PPUSH
62867: PPUSH
62868: PPUSH
62869: PPUSH
// if not area or not rate or not max then
62870: LD_VAR 0 1
62874: NOT
62875: PUSH
62876: LD_VAR 0 2
62880: NOT
62881: OR
62882: PUSH
62883: LD_VAR 0 4
62887: NOT
62888: OR
62889: IFFALSE 62893
// exit ;
62891: GO 63085
// while 1 do
62893: LD_INT 1
62895: IFFALSE 63085
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62897: LD_ADDR_VAR 0 9
62901: PUSH
62902: LD_VAR 0 1
62906: PPUSH
62907: LD_INT 1
62909: PPUSH
62910: CALL_OW 287
62914: PUSH
62915: LD_INT 10
62917: MUL
62918: ST_TO_ADDR
// r := rate / 10 ;
62919: LD_ADDR_VAR 0 7
62923: PUSH
62924: LD_VAR 0 2
62928: PUSH
62929: LD_INT 10
62931: DIVREAL
62932: ST_TO_ADDR
// time := 1 1$00 ;
62933: LD_ADDR_VAR 0 8
62937: PUSH
62938: LD_INT 2100
62940: ST_TO_ADDR
// if amount < min then
62941: LD_VAR 0 9
62945: PUSH
62946: LD_VAR 0 3
62950: LESS
62951: IFFALSE 62969
// r := r * 2 else
62953: LD_ADDR_VAR 0 7
62957: PUSH
62958: LD_VAR 0 7
62962: PUSH
62963: LD_INT 2
62965: MUL
62966: ST_TO_ADDR
62967: GO 62995
// if amount > max then
62969: LD_VAR 0 9
62973: PUSH
62974: LD_VAR 0 4
62978: GREATER
62979: IFFALSE 62995
// r := r / 2 ;
62981: LD_ADDR_VAR 0 7
62985: PUSH
62986: LD_VAR 0 7
62990: PUSH
62991: LD_INT 2
62993: DIVREAL
62994: ST_TO_ADDR
// time := time / r ;
62995: LD_ADDR_VAR 0 8
62999: PUSH
63000: LD_VAR 0 8
63004: PUSH
63005: LD_VAR 0 7
63009: DIVREAL
63010: ST_TO_ADDR
// if time < 0 then
63011: LD_VAR 0 8
63015: PUSH
63016: LD_INT 0
63018: LESS
63019: IFFALSE 63036
// time := time * - 1 ;
63021: LD_ADDR_VAR 0 8
63025: PUSH
63026: LD_VAR 0 8
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: MUL
63035: ST_TO_ADDR
// wait ( time ) ;
63036: LD_VAR 0 8
63040: PPUSH
63041: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63045: LD_INT 35
63047: PPUSH
63048: LD_INT 875
63050: PPUSH
63051: CALL_OW 12
63055: PPUSH
63056: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63060: LD_INT 1
63062: PPUSH
63063: LD_INT 5
63065: PPUSH
63066: CALL_OW 12
63070: PPUSH
63071: LD_VAR 0 1
63075: PPUSH
63076: LD_INT 1
63078: PPUSH
63079: CALL_OW 55
// end ;
63083: GO 62893
// end ;
63085: LD_VAR 0 5
63089: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63090: LD_INT 0
63092: PPUSH
63093: PPUSH
63094: PPUSH
63095: PPUSH
63096: PPUSH
63097: PPUSH
63098: PPUSH
63099: PPUSH
// if not turrets or not factories then
63100: LD_VAR 0 1
63104: NOT
63105: PUSH
63106: LD_VAR 0 2
63110: NOT
63111: OR
63112: IFFALSE 63116
// exit ;
63114: GO 63423
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63116: LD_ADDR_VAR 0 10
63120: PUSH
63121: LD_INT 5
63123: PUSH
63124: LD_INT 6
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 4
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 5
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 24
63158: PUSH
63159: LD_INT 25
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 23
63168: PUSH
63169: LD_INT 27
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 42
63182: PUSH
63183: LD_INT 43
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 44
63192: PUSH
63193: LD_INT 46
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 45
63202: PUSH
63203: LD_INT 47
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: ST_TO_ADDR
// result := [ ] ;
63220: LD_ADDR_VAR 0 3
63224: PUSH
63225: EMPTY
63226: ST_TO_ADDR
// for i in turrets do
63227: LD_ADDR_VAR 0 4
63231: PUSH
63232: LD_VAR 0 1
63236: PUSH
63237: FOR_IN
63238: IFFALSE 63421
// begin nat := GetNation ( i ) ;
63240: LD_ADDR_VAR 0 7
63244: PUSH
63245: LD_VAR 0 4
63249: PPUSH
63250: CALL_OW 248
63254: ST_TO_ADDR
// weapon := 0 ;
63255: LD_ADDR_VAR 0 8
63259: PUSH
63260: LD_INT 0
63262: ST_TO_ADDR
// if not nat then
63263: LD_VAR 0 7
63267: NOT
63268: IFFALSE 63272
// continue ;
63270: GO 63237
// for j in list [ nat ] do
63272: LD_ADDR_VAR 0 5
63276: PUSH
63277: LD_VAR 0 10
63281: PUSH
63282: LD_VAR 0 7
63286: ARRAY
63287: PUSH
63288: FOR_IN
63289: IFFALSE 63330
// if GetBWeapon ( i ) = j [ 1 ] then
63291: LD_VAR 0 4
63295: PPUSH
63296: CALL_OW 269
63300: PUSH
63301: LD_VAR 0 5
63305: PUSH
63306: LD_INT 1
63308: ARRAY
63309: EQUAL
63310: IFFALSE 63328
// begin weapon := j [ 2 ] ;
63312: LD_ADDR_VAR 0 8
63316: PUSH
63317: LD_VAR 0 5
63321: PUSH
63322: LD_INT 2
63324: ARRAY
63325: ST_TO_ADDR
// break ;
63326: GO 63330
// end ;
63328: GO 63288
63330: POP
63331: POP
// if not weapon then
63332: LD_VAR 0 8
63336: NOT
63337: IFFALSE 63341
// continue ;
63339: GO 63237
// for k in factories do
63341: LD_ADDR_VAR 0 6
63345: PUSH
63346: LD_VAR 0 2
63350: PUSH
63351: FOR_IN
63352: IFFALSE 63417
// begin weapons := AvailableWeaponList ( k ) ;
63354: LD_ADDR_VAR 0 9
63358: PUSH
63359: LD_VAR 0 6
63363: PPUSH
63364: CALL_OW 478
63368: ST_TO_ADDR
// if not weapons then
63369: LD_VAR 0 9
63373: NOT
63374: IFFALSE 63378
// continue ;
63376: GO 63351
// if weapon in weapons then
63378: LD_VAR 0 8
63382: PUSH
63383: LD_VAR 0 9
63387: IN
63388: IFFALSE 63415
// begin result := [ i , weapon ] ;
63390: LD_ADDR_VAR 0 3
63394: PUSH
63395: LD_VAR 0 4
63399: PUSH
63400: LD_VAR 0 8
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// exit ;
63409: POP
63410: POP
63411: POP
63412: POP
63413: GO 63423
// end ; end ;
63415: GO 63351
63417: POP
63418: POP
// end ;
63419: GO 63237
63421: POP
63422: POP
// end ;
63423: LD_VAR 0 3
63427: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63428: LD_INT 0
63430: PPUSH
// if not side or side > 8 then
63431: LD_VAR 0 3
63435: NOT
63436: PUSH
63437: LD_VAR 0 3
63441: PUSH
63442: LD_INT 8
63444: GREATER
63445: OR
63446: IFFALSE 63450
// exit ;
63448: GO 63509
// if not range then
63450: LD_VAR 0 4
63454: NOT
63455: IFFALSE 63466
// range := - 12 ;
63457: LD_ADDR_VAR 0 4
63461: PUSH
63462: LD_INT 12
63464: NEG
63465: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_VAR 0 2
63475: PPUSH
63476: LD_VAR 0 3
63480: PPUSH
63481: LD_VAR 0 4
63485: PPUSH
63486: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63490: LD_VAR 0 1
63494: PPUSH
63495: LD_VAR 0 2
63499: PPUSH
63500: LD_VAR 0 3
63504: PPUSH
63505: CALL_OW 331
// end ;
63509: LD_VAR 0 5
63513: RET
// export function Video ( mode ) ; begin
63514: LD_INT 0
63516: PPUSH
// ingame_video = mode ;
63517: LD_ADDR_OWVAR 52
63521: PUSH
63522: LD_VAR 0 1
63526: ST_TO_ADDR
// interface_hidden = mode ;
63527: LD_ADDR_OWVAR 54
63531: PUSH
63532: LD_VAR 0 1
63536: ST_TO_ADDR
// end ;
63537: LD_VAR 0 2
63541: RET
// export function Join ( array , element ) ; begin
63542: LD_INT 0
63544: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63545: LD_ADDR_VAR 0 3
63549: PUSH
63550: LD_VAR 0 1
63554: PPUSH
63555: LD_VAR 0 1
63559: PUSH
63560: LD_INT 1
63562: PLUS
63563: PPUSH
63564: LD_VAR 0 2
63568: PPUSH
63569: CALL_OW 1
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 3
63578: RET
// export function JoinUnion ( array , element ) ; begin
63579: LD_INT 0
63581: PPUSH
// result := array union element ;
63582: LD_ADDR_VAR 0 3
63586: PUSH
63587: LD_VAR 0 1
63591: PUSH
63592: LD_VAR 0 2
63596: UNION
63597: ST_TO_ADDR
// end ;
63598: LD_VAR 0 3
63602: RET
// export function GetBehemoths ( side ) ; begin
63603: LD_INT 0
63605: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63606: LD_ADDR_VAR 0 2
63610: PUSH
63611: LD_INT 22
63613: PUSH
63614: LD_VAR 0 1
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 31
63625: PUSH
63626: LD_INT 25
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PPUSH
63637: CALL_OW 69
63641: ST_TO_ADDR
// end ;
63642: LD_VAR 0 2
63646: RET
// export function Shuffle ( array ) ; var i , index ; begin
63647: LD_INT 0
63649: PPUSH
63650: PPUSH
63651: PPUSH
// result := [ ] ;
63652: LD_ADDR_VAR 0 2
63656: PUSH
63657: EMPTY
63658: ST_TO_ADDR
// if not array then
63659: LD_VAR 0 1
63663: NOT
63664: IFFALSE 63668
// exit ;
63666: GO 63767
// Randomize ;
63668: CALL_OW 10
// for i = array downto 1 do
63672: LD_ADDR_VAR 0 3
63676: PUSH
63677: DOUBLE
63678: LD_VAR 0 1
63682: INC
63683: ST_TO_ADDR
63684: LD_INT 1
63686: PUSH
63687: FOR_DOWNTO
63688: IFFALSE 63765
// begin index := rand ( 1 , array ) ;
63690: LD_ADDR_VAR 0 4
63694: PUSH
63695: LD_INT 1
63697: PPUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: CALL_OW 12
63707: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63708: LD_ADDR_VAR 0 2
63712: PUSH
63713: LD_VAR 0 2
63717: PPUSH
63718: LD_VAR 0 2
63722: PUSH
63723: LD_INT 1
63725: PLUS
63726: PPUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_VAR 0 4
63736: ARRAY
63737: PPUSH
63738: CALL_OW 2
63742: ST_TO_ADDR
// array := Delete ( array , index ) ;
63743: LD_ADDR_VAR 0 1
63747: PUSH
63748: LD_VAR 0 1
63752: PPUSH
63753: LD_VAR 0 4
63757: PPUSH
63758: CALL_OW 3
63762: ST_TO_ADDR
// end ;
63763: GO 63687
63765: POP
63766: POP
// end ;
63767: LD_VAR 0 2
63771: RET
// export function GetBaseMaterials ( base ) ; begin
63772: LD_INT 0
63774: PPUSH
// result := [ 0 , 0 , 0 ] ;
63775: LD_ADDR_VAR 0 2
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: ST_TO_ADDR
// if not base then
63794: LD_VAR 0 1
63798: NOT
63799: IFFALSE 63803
// exit ;
63801: GO 63852
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63803: LD_ADDR_VAR 0 2
63807: PUSH
63808: LD_VAR 0 1
63812: PPUSH
63813: LD_INT 1
63815: PPUSH
63816: CALL_OW 275
63820: PUSH
63821: LD_VAR 0 1
63825: PPUSH
63826: LD_INT 2
63828: PPUSH
63829: CALL_OW 275
63833: PUSH
63834: LD_VAR 0 1
63838: PPUSH
63839: LD_INT 3
63841: PPUSH
63842: CALL_OW 275
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: LIST
63851: ST_TO_ADDR
// end ;
63852: LD_VAR 0 2
63856: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63857: LD_INT 0
63859: PPUSH
63860: PPUSH
// result := array ;
63861: LD_ADDR_VAR 0 3
63865: PUSH
63866: LD_VAR 0 1
63870: ST_TO_ADDR
// if size > 0 then
63871: LD_VAR 0 2
63875: PUSH
63876: LD_INT 0
63878: GREATER
63879: IFFALSE 63925
// for i := array downto size do
63881: LD_ADDR_VAR 0 4
63885: PUSH
63886: DOUBLE
63887: LD_VAR 0 1
63891: INC
63892: ST_TO_ADDR
63893: LD_VAR 0 2
63897: PUSH
63898: FOR_DOWNTO
63899: IFFALSE 63923
// result := Delete ( result , result ) ;
63901: LD_ADDR_VAR 0 3
63905: PUSH
63906: LD_VAR 0 3
63910: PPUSH
63911: LD_VAR 0 3
63915: PPUSH
63916: CALL_OW 3
63920: ST_TO_ADDR
63921: GO 63898
63923: POP
63924: POP
// end ;
63925: LD_VAR 0 3
63929: RET
// export function ComExit ( unit ) ; var tmp ; begin
63930: LD_INT 0
63932: PPUSH
63933: PPUSH
// if not IsInUnit ( unit ) then
63934: LD_VAR 0 1
63938: PPUSH
63939: CALL_OW 310
63943: NOT
63944: IFFALSE 63948
// exit ;
63946: GO 64008
// tmp := IsInUnit ( unit ) ;
63948: LD_ADDR_VAR 0 3
63952: PUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 310
63962: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63963: LD_VAR 0 3
63967: PPUSH
63968: CALL_OW 247
63972: PUSH
63973: LD_INT 2
63975: EQUAL
63976: IFFALSE 63989
// ComExitVehicle ( unit ) else
63978: LD_VAR 0 1
63982: PPUSH
63983: CALL_OW 121
63987: GO 63998
// ComExitBuilding ( unit ) ;
63989: LD_VAR 0 1
63993: PPUSH
63994: CALL_OW 122
// result := tmp ;
63998: LD_ADDR_VAR 0 2
64002: PUSH
64003: LD_VAR 0 3
64007: ST_TO_ADDR
// end ;
64008: LD_VAR 0 2
64012: RET
// export function ComExitAll ( units ) ; var i ; begin
64013: LD_INT 0
64015: PPUSH
64016: PPUSH
// if not units then
64017: LD_VAR 0 1
64021: NOT
64022: IFFALSE 64026
// exit ;
64024: GO 64052
// for i in units do
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: LD_VAR 0 1
64035: PUSH
64036: FOR_IN
64037: IFFALSE 64050
// ComExit ( i ) ;
64039: LD_VAR 0 3
64043: PPUSH
64044: CALL 63930 0 1
64048: GO 64036
64050: POP
64051: POP
// end ;
64052: LD_VAR 0 2
64056: RET
// export function ResetHc ; begin
64057: LD_INT 0
64059: PPUSH
// InitHc ;
64060: CALL_OW 19
// hc_importance := 0 ;
64064: LD_ADDR_OWVAR 32
64068: PUSH
64069: LD_INT 0
64071: ST_TO_ADDR
// end ;
64072: LD_VAR 0 1
64076: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64077: LD_INT 0
64079: PPUSH
64080: PPUSH
64081: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64082: LD_ADDR_VAR 0 6
64086: PUSH
64087: LD_VAR 0 1
64091: PUSH
64092: LD_VAR 0 3
64096: PLUS
64097: PUSH
64098: LD_INT 2
64100: DIV
64101: ST_TO_ADDR
// if _x < 0 then
64102: LD_VAR 0 6
64106: PUSH
64107: LD_INT 0
64109: LESS
64110: IFFALSE 64127
// _x := _x * - 1 ;
64112: LD_ADDR_VAR 0 6
64116: PUSH
64117: LD_VAR 0 6
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: MUL
64126: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64127: LD_ADDR_VAR 0 7
64131: PUSH
64132: LD_VAR 0 2
64136: PUSH
64137: LD_VAR 0 4
64141: PLUS
64142: PUSH
64143: LD_INT 2
64145: DIV
64146: ST_TO_ADDR
// if _y < 0 then
64147: LD_VAR 0 7
64151: PUSH
64152: LD_INT 0
64154: LESS
64155: IFFALSE 64172
// _y := _y * - 1 ;
64157: LD_ADDR_VAR 0 7
64161: PUSH
64162: LD_VAR 0 7
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: MUL
64171: ST_TO_ADDR
// result := [ _x , _y ] ;
64172: LD_ADDR_VAR 0 5
64176: PUSH
64177: LD_VAR 0 6
64181: PUSH
64182: LD_VAR 0 7
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: ST_TO_ADDR
// end ;
64191: LD_VAR 0 5
64195: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64196: LD_INT 0
64198: PPUSH
64199: PPUSH
64200: PPUSH
64201: PPUSH
// task := GetTaskList ( unit ) ;
64202: LD_ADDR_VAR 0 7
64206: PUSH
64207: LD_VAR 0 1
64211: PPUSH
64212: CALL_OW 437
64216: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64217: LD_VAR 0 7
64221: NOT
64222: PUSH
64223: LD_VAR 0 1
64227: PPUSH
64228: LD_VAR 0 2
64232: PPUSH
64233: CALL_OW 308
64237: NOT
64238: AND
64239: IFFALSE 64243
// exit ;
64241: GO 64361
// if IsInArea ( unit , area ) then
64243: LD_VAR 0 1
64247: PPUSH
64248: LD_VAR 0 2
64252: PPUSH
64253: CALL_OW 308
64257: IFFALSE 64275
// begin ComMoveToArea ( unit , goAway ) ;
64259: LD_VAR 0 1
64263: PPUSH
64264: LD_VAR 0 3
64268: PPUSH
64269: CALL_OW 113
// exit ;
64273: GO 64361
// end ; if task [ 1 ] [ 1 ] <> M then
64275: LD_VAR 0 7
64279: PUSH
64280: LD_INT 1
64282: ARRAY
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PUSH
64288: LD_STRING M
64290: NONEQUAL
64291: IFFALSE 64295
// exit ;
64293: GO 64361
// x := task [ 1 ] [ 2 ] ;
64295: LD_ADDR_VAR 0 5
64299: PUSH
64300: LD_VAR 0 7
64304: PUSH
64305: LD_INT 1
64307: ARRAY
64308: PUSH
64309: LD_INT 2
64311: ARRAY
64312: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64313: LD_ADDR_VAR 0 6
64317: PUSH
64318: LD_VAR 0 7
64322: PUSH
64323: LD_INT 1
64325: ARRAY
64326: PUSH
64327: LD_INT 3
64329: ARRAY
64330: ST_TO_ADDR
// if InArea ( x , y , area ) then
64331: LD_VAR 0 5
64335: PPUSH
64336: LD_VAR 0 6
64340: PPUSH
64341: LD_VAR 0 2
64345: PPUSH
64346: CALL_OW 309
64350: IFFALSE 64361
// ComStop ( unit ) ;
64352: LD_VAR 0 1
64356: PPUSH
64357: CALL_OW 141
// end ;
64361: LD_VAR 0 4
64365: RET
// export function Abs ( value ) ; begin
64366: LD_INT 0
64368: PPUSH
// result := value ;
64369: LD_ADDR_VAR 0 2
64373: PUSH
64374: LD_VAR 0 1
64378: ST_TO_ADDR
// if value < 0 then
64379: LD_VAR 0 1
64383: PUSH
64384: LD_INT 0
64386: LESS
64387: IFFALSE 64404
// result := value * - 1 ;
64389: LD_ADDR_VAR 0 2
64393: PUSH
64394: LD_VAR 0 1
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: MUL
64403: ST_TO_ADDR
// end ;
64404: LD_VAR 0 2
64408: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64409: LD_INT 0
64411: PPUSH
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
64417: PPUSH
64418: PPUSH
// if not unit or not building then
64419: LD_VAR 0 1
64423: NOT
64424: PUSH
64425: LD_VAR 0 2
64429: NOT
64430: OR
64431: IFFALSE 64435
// exit ;
64433: GO 64661
// x := GetX ( building ) ;
64435: LD_ADDR_VAR 0 4
64439: PUSH
64440: LD_VAR 0 2
64444: PPUSH
64445: CALL_OW 250
64449: ST_TO_ADDR
// y := GetY ( building ) ;
64450: LD_ADDR_VAR 0 6
64454: PUSH
64455: LD_VAR 0 2
64459: PPUSH
64460: CALL_OW 251
64464: ST_TO_ADDR
// d := GetDir ( building ) ;
64465: LD_ADDR_VAR 0 8
64469: PUSH
64470: LD_VAR 0 2
64474: PPUSH
64475: CALL_OW 254
64479: ST_TO_ADDR
// r := 4 ;
64480: LD_ADDR_VAR 0 9
64484: PUSH
64485: LD_INT 4
64487: ST_TO_ADDR
// for i := 1 to 5 do
64488: LD_ADDR_VAR 0 10
64492: PUSH
64493: DOUBLE
64494: LD_INT 1
64496: DEC
64497: ST_TO_ADDR
64498: LD_INT 5
64500: PUSH
64501: FOR_TO
64502: IFFALSE 64659
// begin _x := ShiftX ( x , d , r + i ) ;
64504: LD_ADDR_VAR 0 5
64508: PUSH
64509: LD_VAR 0 4
64513: PPUSH
64514: LD_VAR 0 8
64518: PPUSH
64519: LD_VAR 0 9
64523: PUSH
64524: LD_VAR 0 10
64528: PLUS
64529: PPUSH
64530: CALL_OW 272
64534: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64535: LD_ADDR_VAR 0 7
64539: PUSH
64540: LD_VAR 0 6
64544: PPUSH
64545: LD_VAR 0 8
64549: PPUSH
64550: LD_VAR 0 9
64554: PUSH
64555: LD_VAR 0 10
64559: PLUS
64560: PPUSH
64561: CALL_OW 273
64565: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64566: LD_VAR 0 5
64570: PPUSH
64571: LD_VAR 0 7
64575: PPUSH
64576: CALL_OW 488
64580: PUSH
64581: LD_VAR 0 5
64585: PPUSH
64586: LD_VAR 0 7
64590: PPUSH
64591: CALL_OW 428
64595: PPUSH
64596: CALL_OW 247
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: IN
64611: NOT
64612: AND
64613: IFFALSE 64657
// begin ComMoveXY ( unit , _x , _y ) ;
64615: LD_VAR 0 1
64619: PPUSH
64620: LD_VAR 0 5
64624: PPUSH
64625: LD_VAR 0 7
64629: PPUSH
64630: CALL_OW 111
// result := [ _x , _y ] ;
64634: LD_ADDR_VAR 0 3
64638: PUSH
64639: LD_VAR 0 5
64643: PUSH
64644: LD_VAR 0 7
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: ST_TO_ADDR
// exit ;
64653: POP
64654: POP
64655: GO 64661
// end ; end ;
64657: GO 64501
64659: POP
64660: POP
// end ;
64661: LD_VAR 0 3
64665: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64666: LD_INT 0
64668: PPUSH
64669: PPUSH
64670: PPUSH
// result := 0 ;
64671: LD_ADDR_VAR 0 3
64675: PUSH
64676: LD_INT 0
64678: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64679: LD_VAR 0 1
64683: PUSH
64684: LD_INT 0
64686: LESS
64687: PUSH
64688: LD_VAR 0 1
64692: PUSH
64693: LD_INT 8
64695: GREATER
64696: OR
64697: PUSH
64698: LD_VAR 0 2
64702: PUSH
64703: LD_INT 0
64705: LESS
64706: OR
64707: PUSH
64708: LD_VAR 0 2
64712: PUSH
64713: LD_INT 8
64715: GREATER
64716: OR
64717: IFFALSE 64721
// exit ;
64719: GO 64796
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64721: LD_ADDR_VAR 0 4
64725: PUSH
64726: LD_INT 22
64728: PUSH
64729: LD_VAR 0 2
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PPUSH
64738: CALL_OW 69
64742: PUSH
64743: FOR_IN
64744: IFFALSE 64794
// begin un := UnitShoot ( i ) ;
64746: LD_ADDR_VAR 0 5
64750: PUSH
64751: LD_VAR 0 4
64755: PPUSH
64756: CALL_OW 504
64760: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64761: LD_VAR 0 5
64765: PPUSH
64766: CALL_OW 255
64770: PUSH
64771: LD_VAR 0 1
64775: EQUAL
64776: IFFALSE 64792
// begin result := un ;
64778: LD_ADDR_VAR 0 3
64782: PUSH
64783: LD_VAR 0 5
64787: ST_TO_ADDR
// exit ;
64788: POP
64789: POP
64790: GO 64796
// end ; end ;
64792: GO 64743
64794: POP
64795: POP
// end ;
64796: LD_VAR 0 3
64800: RET
// export function GetCargoBay ( units ) ; begin
64801: LD_INT 0
64803: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64804: LD_ADDR_VAR 0 2
64808: PUSH
64809: LD_VAR 0 1
64813: PPUSH
64814: LD_INT 2
64816: PUSH
64817: LD_INT 34
64819: PUSH
64820: LD_INT 12
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 34
64829: PUSH
64830: LD_INT 51
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 34
64839: PUSH
64840: LD_INT 32
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 34
64849: PUSH
64850: LD_EXP 94
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: PPUSH
64866: CALL_OW 72
64870: ST_TO_ADDR
// end ; end_of_file
64871: LD_VAR 0 2
64875: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64876: LD_VAR 0 1
64880: PUSH
64881: LD_INT 200
64883: DOUBLE
64884: GREATEREQUAL
64885: IFFALSE 64893
64887: LD_INT 299
64889: DOUBLE
64890: LESSEQUAL
64891: IFTRUE 64895
64893: GO 64927
64895: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
64896: LD_VAR 0 1
64900: PPUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: LD_VAR 0 3
64910: PPUSH
64911: LD_VAR 0 4
64915: PPUSH
64916: LD_VAR 0 5
64920: PPUSH
64921: CALL 23206 0 5
64925: GO 64928
64927: POP
// end ;
64928: PPOPN 11
64930: END
