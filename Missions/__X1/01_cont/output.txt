// starting begin ResetFog ;
   0: CALL_OW 335
// CreateNature ( 4 , 3 , 4 , 0 , 0 , 0 , 3 , 0 , natureArea , riverArea ) ;
   4: LD_INT 4
   6: PPUSH
   7: LD_INT 3
   9: PPUSH
  10: LD_INT 4
  12: PPUSH
  13: LD_INT 0
  15: PPUSH
  16: LD_INT 0
  18: PPUSH
  19: LD_INT 0
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 0
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 6
  33: PPUSH
  34: CALL 203 0 10
// InitVariables ;
  38: CALL 59 0 0
// PrepareRussian ;
  42: CALL 1454 0 0
// PrepareArabian ;
  46: CALL 1017 0 0
// PrepareHeike ;
  50: CALL 952 0 0
// Action ;
  54: CALL 2995 0 0
// end ;
  58: END
// export missionStarted , debug , meetJohnny , johnnySaved , dogTag , dogTagFound , mercenariesSpotted , olafSpotted , russianSpotted , mercenariesQuestReady , mercenariesQuestDone , lastObjectiveActive , prisonFound , heikeHurt , animalCounter ; function InitVariables ; begin
  59: LD_INT 0
  61: PPUSH
// debug := false ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// missionStarted := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// meetJohnny := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// johnnySaved := false ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// dogTag := [ ] ;
  94: LD_ADDR_EXP 5
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// dogTagFound := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// mercenariesSpotted := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// olafSpotted := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianSpotted := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// mercenariesQuestReady := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mercenariesQuestDone := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lastObjectiveActive := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// prisonFound := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeHurt := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// animalCounter := 0 ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$1 trigger debug do
 186: LD_EXP 2
 190: IFFALSE 202
 192: GO 194
 194: DISABLE
// FogOff ( 2 ) ; end_of_file
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 344
 202: END
// export function CreateNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , frogs , nat_area , wat_area ) ; var i , animal ; begin
 203: LD_INT 0
 205: PPUSH
 206: PPUSH
 207: PPUSH
// uc_side = 0 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// uc_nation = 0 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// InitHc ;
 224: CALL_OW 19
// InitVc ;
 228: CALL_OW 20
// if mastodonts then
 232: LD_VAR 0 6
 236: IFFALSE 303
// for i = 1 to mastodonts do
 238: LD_ADDR_VAR 0 12
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_VAR 0 6
 252: PUSH
 253: FOR_TO
 254: IFFALSE 301
// begin vc_chassis := 31 ;
 256: LD_ADDR_OWVAR 37
 260: PUSH
 261: LD_INT 31
 263: ST_TO_ADDR
// vc_control := control_rider ;
 264: LD_ADDR_OWVAR 38
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// animal := CreateVehicle ;
 272: LD_ADDR_VAR 0 13
 276: PUSH
 277: CALL_OW 45
 281: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 282: LD_VAR 0 13
 286: PPUSH
 287: LD_VAR 0 9
 291: PPUSH
 292: LD_INT 0
 294: PPUSH
 295: CALL_OW 49
// end ;
 299: GO 253
 301: POP
 302: POP
// if horses then
 303: LD_VAR 0 5
 307: IFFALSE 374
// for i = 1 to horses do
 309: LD_ADDR_VAR 0 12
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 5
 323: PUSH
 324: FOR_TO
 325: IFFALSE 372
// begin hc_class := 21 ;
 327: LD_ADDR_OWVAR 28
 331: PUSH
 332: LD_INT 21
 334: ST_TO_ADDR
// hc_gallery :=  ;
 335: LD_ADDR_OWVAR 33
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// animal := CreateHuman ;
 343: LD_ADDR_VAR 0 13
 347: PUSH
 348: CALL_OW 44
 352: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 353: LD_VAR 0 13
 357: PPUSH
 358: LD_VAR 0 9
 362: PPUSH
 363: LD_INT 0
 365: PPUSH
 366: CALL_OW 49
// end ;
 370: GO 324
 372: POP
 373: POP
// if birds then
 374: LD_VAR 0 1
 378: IFFALSE 445
// for i = 1 to birds do
 380: LD_ADDR_VAR 0 12
 384: PUSH
 385: DOUBLE
 386: LD_INT 1
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_TO
 396: IFFALSE 443
// begin hc_class = 18 ;
 398: LD_ADDR_OWVAR 28
 402: PUSH
 403: LD_INT 18
 405: ST_TO_ADDR
// hc_gallery =  ;
 406: LD_ADDR_OWVAR 33
 410: PUSH
 411: LD_STRING 
 413: ST_TO_ADDR
// animal := CreateHuman ;
 414: LD_ADDR_VAR 0 13
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 424: LD_VAR 0 13
 428: PPUSH
 429: LD_VAR 0 9
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL_OW 49
// end ;
 441: GO 395
 443: POP
 444: POP
// if tigers then
 445: LD_VAR 0 2
 449: IFFALSE 533
// for i = 1 to tigers do
 451: LD_ADDR_VAR 0 12
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 531
// begin hc_class = class_tiger ;
 469: LD_ADDR_OWVAR 28
 473: PUSH
 474: LD_INT 14
 476: ST_TO_ADDR
// hc_gallery =  ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING 
 484: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 485: LD_ADDR_OWVAR 35
 489: PUSH
 490: LD_INT 7
 492: NEG
 493: PPUSH
 494: LD_INT 7
 496: PPUSH
 497: CALL_OW 12
 501: ST_TO_ADDR
// animal := CreateHuman ;
 502: LD_ADDR_VAR 0 13
 506: PUSH
 507: CALL_OW 44
 511: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 512: LD_VAR 0 13
 516: PPUSH
 517: LD_VAR 0 9
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL_OW 49
// end ;
 529: GO 466
 531: POP
 532: POP
// if apemans then
 533: LD_VAR 0 3
 537: IFFALSE 660
// for i = 1 to apemans do
 539: LD_ADDR_VAR 0 12
 543: PUSH
 544: DOUBLE
 545: LD_INT 1
 547: DEC
 548: ST_TO_ADDR
 549: LD_VAR 0 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 658
// begin hc_class = class_apeman ;
 557: LD_ADDR_OWVAR 28
 561: PUSH
 562: LD_INT 12
 564: ST_TO_ADDR
// hc_gallery =  ;
 565: LD_ADDR_OWVAR 33
 569: PUSH
 570: LD_STRING 
 572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
 573: LD_ADDR_OWVAR 35
 577: PUSH
 578: LD_INT 5
 580: NEG
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 12
 589: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
 590: LD_ADDR_OWVAR 31
 594: PUSH
 595: LD_INT 1
 597: PPUSH
 598: LD_INT 3
 600: PPUSH
 601: CALL_OW 12
 605: PUSH
 606: LD_INT 1
 608: PPUSH
 609: LD_INT 3
 611: PPUSH
 612: CALL_OW 12
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// animal := CreateHuman ;
 629: LD_ADDR_VAR 0 13
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 639: LD_VAR 0 13
 643: PPUSH
 644: LD_VAR 0 9
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// end ;
 656: GO 554
 658: POP
 659: POP
// if enchidnas then
 660: LD_VAR 0 4
 664: IFFALSE 731
// for i = 1 to enchidnas do
 666: LD_ADDR_VAR 0 12
 670: PUSH
 671: DOUBLE
 672: LD_INT 1
 674: DEC
 675: ST_TO_ADDR
 676: LD_VAR 0 4
 680: PUSH
 681: FOR_TO
 682: IFFALSE 729
// begin hc_class = 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery =  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// animal := CreateHuman ;
 700: LD_ADDR_VAR 0 13
 704: PUSH
 705: CALL_OW 44
 709: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 710: LD_VAR 0 13
 714: PPUSH
 715: LD_VAR 0 9
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 681
 729: POP
 730: POP
// if fishes then
 731: LD_VAR 0 7
 735: IFFALSE 802
// for i = 1 to fishes do
 737: LD_ADDR_VAR 0 12
 741: PUSH
 742: DOUBLE
 743: LD_INT 1
 745: DEC
 746: ST_TO_ADDR
 747: LD_VAR 0 7
 751: PUSH
 752: FOR_TO
 753: IFFALSE 800
// begin hc_class = class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery =  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// animal := CreateHuman ;
 771: LD_ADDR_VAR 0 13
 775: PUSH
 776: CALL_OW 44
 780: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 781: LD_VAR 0 13
 785: PPUSH
 786: LD_VAR 0 10
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 752
 800: POP
 801: POP
// if frogs then
 802: LD_VAR 0 8
 806: IFFALSE 873
// for i := 1 to frogs do
 808: LD_ADDR_VAR 0 12
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 8
 822: PUSH
 823: FOR_TO
 824: IFFALSE 871
// begin hc_class := class_frog ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 19
 833: ST_TO_ADDR
// hc_gallery :=  ;
 834: LD_ADDR_OWVAR 33
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// animal := CreateHuman ;
 842: LD_ADDR_VAR 0 13
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 852: LD_VAR 0 13
 856: PPUSH
 857: LD_VAR 0 10
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ;
 869: GO 823
 871: POP
 872: POP
// end ;
 873: LD_VAR 0 11
 877: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// if not observer or not unit then
 883: LD_VAR 0 1
 887: NOT
 888: PUSH
 889: LD_VAR 0 2
 893: NOT
 894: OR
 895: IFFALSE 899
// exit ;
 897: GO 947
// if not See ( GetSide ( observer ) , unit ) then
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 255
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 292
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 947
// result := GetDistUnits ( observer , unit ) < 12 ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: LD_VAR 0 1
 932: PPUSH
 933: LD_VAR 0 2
 937: PPUSH
 938: CALL_OW 296
 942: PUSH
 943: LD_INT 12
 945: LESS
 946: ST_TO_ADDR
// end ; end_of_file
 947: LD_VAR 0 3
 951: RET
// export Heike , Olaf , Givi , Mike , Kamil ; export function PrepareHeike ; begin
 952: LD_INT 0
 954: PPUSH
// CenterNowOnXY ( 66 , 26 ) ;
 955: LD_INT 66
 957: PPUSH
 958: LD_INT 26
 960: PPUSH
 961: CALL_OW 86
// uc_side := 2 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// uc_nation := 2 ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 981: LD_ADDR_EXP 16
 985: PUSH
 986: LD_STRING Heike
 988: PPUSH
 989: CALL_OW 25
 993: ST_TO_ADDR
// PlaceUnitXY ( Heike , 66 , 26 , true ) ;
 994: LD_EXP 16
 998: PPUSH
 999: LD_INT 66
1001: PPUSH
1002: LD_INT 26
1004: PPUSH
1005: LD_INT 1
1007: PPUSH
1008: CALL_OW 48
// end ;
1012: LD_VAR 0 1
1016: RET
// export function PrepareArabian ; begin
1017: LD_INT 0
1019: PPUSH
// uc_side := 5 ;
1020: LD_ADDR_OWVAR 20
1024: PUSH
1025: LD_INT 5
1027: ST_TO_ADDR
// uc_nation := 2 ;
1028: LD_ADDR_OWVAR 21
1032: PUSH
1033: LD_INT 2
1035: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1036: LD_ADDR_EXP 17
1040: PUSH
1041: LD_STRING Olaf
1043: PPUSH
1044: CALL_OW 25
1048: ST_TO_ADDR
// PlaceUnitXY ( Olaf , 39 , 52 , false ) ;
1049: LD_EXP 17
1053: PPUSH
1054: LD_INT 39
1056: PPUSH
1057: LD_INT 52
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 48
// Givi := NewCharacter ( Givi ) ;
1067: LD_ADDR_EXP 18
1071: PUSH
1072: LD_STRING Givi
1074: PPUSH
1075: CALL_OW 25
1079: ST_TO_ADDR
// PlaceUnitXY ( Givi , 55 , 90 , false ) ;
1080: LD_EXP 18
1084: PPUSH
1085: LD_INT 55
1087: PPUSH
1088: LD_INT 90
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 48
// ComTurnXY ( Givi , 53 , 89 ) ;
1098: LD_EXP 18
1102: PPUSH
1103: LD_INT 53
1105: PPUSH
1106: LD_INT 89
1108: PPUSH
1109: CALL_OW 118
// Mike := NewCharacter ( Mike ) ;
1113: LD_ADDR_EXP 19
1117: PUSH
1118: LD_STRING Mike
1120: PPUSH
1121: CALL_OW 25
1125: ST_TO_ADDR
// PlaceUnitXY ( Mike , 53 , 87 , false ) ;
1126: LD_EXP 19
1130: PPUSH
1131: LD_INT 53
1133: PPUSH
1134: LD_INT 87
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 48
// ComTurnXY ( Mike , 53 , 89 ) ;
1144: LD_EXP 19
1148: PPUSH
1149: LD_INT 53
1151: PPUSH
1152: LD_INT 89
1154: PPUSH
1155: CALL_OW 118
// end ;
1159: LD_VAR 0 1
1163: RET
// export function PreparePrison ; begin
1164: LD_INT 0
1166: PPUSH
// uc_side := 5 ;
1167: LD_ADDR_OWVAR 20
1171: PUSH
1172: LD_INT 5
1174: ST_TO_ADDR
// uc_nation := 2 ;
1175: LD_ADDR_OWVAR 21
1179: PUSH
1180: LD_INT 2
1182: ST_TO_ADDR
// Kamil := NewCharacter ( Kamil ) ;
1183: LD_ADDR_EXP 20
1187: PUSH
1188: LD_STRING Kamil
1190: PPUSH
1191: CALL_OW 25
1195: ST_TO_ADDR
// if Difficulty in [ 1 , 4 ] then
1196: LD_OWVAR 67
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: IN
1211: IFFALSE 1227
// PlaceHumanInUnit ( Kamil , northDep ) else
1213: LD_EXP 20
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 52
1225: GO 1239
// PlaceHumanInUnit ( Kamil , southDep ) ;
1227: LD_EXP 20
1231: PPUSH
1232: LD_INT 8
1234: PPUSH
1235: CALL_OW 52
// uc_side := 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation := 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// PrepareHuman ( false , 2 , 1 ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 380
// if Difficulty > 1 then
1268: LD_OWVAR 67
1272: PUSH
1273: LD_INT 1
1275: GREATER
1276: IFFALSE 1292
// PlaceHumanInUnit ( CreateHuman , southDep ) else
1278: CALL_OW 44
1282: PPUSH
1283: LD_INT 8
1285: PPUSH
1286: CALL_OW 52
1290: GO 1304
// PlaceHumanInUnit ( CreateHuman , northDep ) ;
1292: CALL_OW 44
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL_OW 52
// end ; end_of_file
1304: LD_VAR 0 1
1308: RET
// export russianPatrol , russianForestPatrol , russianForces , russianTank ; export function PrepareRussianPatrol ; var i , un ; begin
1309: LD_INT 0
1311: PPUSH
1312: PPUSH
1313: PPUSH
// uc_side := 3 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 3
1321: ST_TO_ADDR
// uc_nation := 3 ;
1322: LD_ADDR_OWVAR 21
1326: PUSH
1327: LD_INT 3
1329: ST_TO_ADDR
// russianPatrol := [ ] ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// for i = 1 to 3 do
1337: LD_ADDR_VAR 0 2
1341: PUSH
1342: DOUBLE
1343: LD_INT 1
1345: DEC
1346: ST_TO_ADDR
1347: LD_INT 3
1349: PUSH
1350: FOR_TO
1351: IFFALSE 1447
// begin PrepareHuman ( sex_male , 1 , 0 ) ;
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// hc_attr := [ 9 , rand ( 10 , 11 ) ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 10
1376: PPUSH
1377: LD_INT 11
1379: PPUSH
1380: CALL_OW 12
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un := CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// russianPatrol := Replace ( russianPatrol , i , un ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_EXP 21
1408: PPUSH
1409: LD_VAR 0 2
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: CALL_OW 1
1423: ST_TO_ADDR
// PlaceUnitXYR ( un , 26 , 22 , 4 , false ) ;
1424: LD_VAR 0 3
1428: PPUSH
1429: LD_INT 26
1431: PPUSH
1432: LD_INT 22
1434: PPUSH
1435: LD_INT 4
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 50
// end ;
1445: GO 1350
1447: POP
1448: POP
// end ;
1449: LD_VAR 0 1
1453: RET
// export function PrepareRussian ; var i , b , un , xy ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
1460: PPUSH
// uc_side := 3 ;
1461: LD_ADDR_OWVAR 20
1465: PUSH
1466: LD_INT 3
1468: ST_TO_ADDR
// uc_nation := 3 ;
1469: LD_ADDR_OWVAR 21
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// russianForces := [ ] ;
1477: LD_ADDR_EXP 23
1481: PUSH
1482: EMPTY
1483: ST_TO_ADDR
// russianForestPatrol := [ ] ;
1484: LD_ADDR_EXP 22
1488: PUSH
1489: EMPTY
1490: ST_TO_ADDR
// xy := AreaToList ( russianForestPatrolArea , 0 ) ;
1491: LD_ADDR_VAR 0 5
1495: PUSH
1496: LD_INT 11
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 517
1506: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , b_depot ] ) do
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 21
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1572
// begin SetResourceType ( GetBase ( i ) , mat_cans , 200 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: CALL_OW 274
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 200
1545: PPUSH
1546: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 10 ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: CALL_OW 274
1559: PPUSH
1560: LD_INT 2
1562: PPUSH
1563: LD_INT 10
1565: PPUSH
1566: CALL_OW 277
// end ;
1570: GO 1527
1572: POP
1573: POP
// for i in FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: LD_INT 30
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL_OW 69
1593: PUSH
1594: FOR_IN
1595: IFFALSE 1669
// begin PrepareHuman ( false , 1 , Difficulty - 1 ) ;
1597: LD_INT 0
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_OWVAR 67
1607: PUSH
1608: LD_INT 1
1610: MINUS
1611: PPUSH
1612: CALL_OW 380
// un := CreateHuman ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: CALL_OW 44
1625: ST_TO_ADDR
// SetDir ( un , ( GetDir ( i ) - 3 ) mod 6 ) ;
1626: LD_VAR 0 4
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: CALL_OW 254
1640: PUSH
1641: LD_INT 3
1643: MINUS
1644: PUSH
1645: LD_INT 6
1647: MOD
1648: PPUSH
1649: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1653: LD_VAR 0 4
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// end ;
1667: GO 1594
1669: POP
1670: POP
// for i = 1 to 5 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 5
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1767
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: LD_OWVAR 67
1697: PPUSH
1698: CALL_OW 380
// un := CreateHuman ;
1702: LD_ADDR_VAR 0 4
1706: PUSH
1707: CALL_OW 44
1711: ST_TO_ADDR
// PlaceUnitArea ( un , russianEastPatrolArea , false ) ;
1712: LD_VAR 0 4
1716: PPUSH
1717: LD_INT 9
1719: PPUSH
1720: LD_INT 0
1722: PPUSH
1723: CALL_OW 49
// ComHold ( un ) ;
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 140
// russianForces := Replace ( russianForces , russianForces + 1 , un ) ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_EXP 23
1745: PPUSH
1746: LD_EXP 23
1750: PUSH
1751: LD_INT 1
1753: PLUS
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL_OW 1
1764: ST_TO_ADDR
// end ;
1765: GO 1684
1767: POP
1768: POP
// for i := 1 to Difficulty + 1 do
1769: LD_ADDR_VAR 0 2
1773: PUSH
1774: DOUBLE
1775: LD_INT 1
1777: DEC
1778: ST_TO_ADDR
1779: LD_OWVAR 67
1783: PUSH
1784: LD_INT 1
1786: PLUS
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1889
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: LD_OWVAR 67
1801: PPUSH
1802: CALL_OW 380
// un := CreateHuman ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// PlaceUnitXY ( un , xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_VAR 0 5
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_VAR 0 5
1840: PUSH
1841: LD_INT 2
1843: ARRAY
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 48
// russianForestPatrol := Replace ( russianForestPatrol , russianForestPatrol + 1 , un ) ;
1858: LD_ADDR_EXP 22
1862: PUSH
1863: LD_EXP 22
1867: PPUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_INT 1
1875: PLUS
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: CALL_OW 1
1886: ST_TO_ADDR
// end ;
1887: GO 1788
1889: POP
1890: POP
// vc_chassis := ru_medium_wheeled ;
1891: LD_ADDR_OWVAR 37
1895: PUSH
1896: LD_INT 21
1898: ST_TO_ADDR
// vc_engine := engine_combustion ;
1899: LD_ADDR_OWVAR 39
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// vc_control := control_manual ;
1907: LD_ADDR_OWVAR 38
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
1915: LD_ADDR_OWVAR 40
1919: PUSH
1920: LD_INT 42
1922: ST_TO_ADDR
// russianTank := CreateVehicle ;
1923: LD_ADDR_EXP 24
1927: PUSH
1928: CALL_OW 45
1932: ST_TO_ADDR
// PlaceUnitXY ( russianTank , 121 , 25 , false ) ;
1933: LD_EXP 24
1937: PPUSH
1938: LD_INT 121
1940: PPUSH
1941: LD_INT 25
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
1951: LD_INT 0
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_OWVAR 67
1961: PPUSH
1962: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , russianTank ) ;
1966: CALL_OW 44
1970: PPUSH
1971: LD_EXP 24
1975: PPUSH
1976: CALL_OW 52
// if Difficulty > 1 then
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: GREATER
1988: IFFALSE 2074
// begin bc_type := b_breastwork ;
1990: LD_ADDR_OWVAR 42
1994: PUSH
1995: LD_INT 31
1997: ST_TO_ADDR
// bc_level := 2 ;
1998: LD_ADDR_OWVAR 43
2002: PUSH
2003: LD_INT 2
2005: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 143 , 88 , 1 ) ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_INT 143
2013: PPUSH
2014: LD_INT 88
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 47
2024: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2048: LD_VAR 0 4
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// end ; if Difficulty > 2 then
2074: LD_OWVAR 67
2078: PUSH
2079: LD_INT 2
2081: GREATER
2082: IFFALSE 2138
// begin for i := 1 to 2 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 2
2096: PUSH
2097: FOR_TO
2098: IFFALSE 2136
// begin PrepareHuman ( false , 1 , 2 ) ;
2100: LD_INT 0
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 156 , 108 , 3 , false ) ;
2113: CALL_OW 44
2117: PPUSH
2118: LD_INT 156
2120: PPUSH
2121: LD_INT 108
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 2097
2136: POP
2137: POP
// end ; end ;
2138: LD_VAR 0 1
2142: RET
// every 0 0$10 trigger russianForestPatrol do var i , d , l , x , y , tmp ;
2143: LD_EXP 22
2147: IFFALSE 2453
2149: GO 2151
2151: DISABLE
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
2159: PPUSH
// begin enable ;
2160: ENABLE
// for i in russianForestPatrol do
2161: LD_ADDR_VAR 0 1
2165: PUSH
2166: LD_EXP 22
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2451
// begin if GetDistUnitXY ( i , 53 , 89 ) < 30 then
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_INT 53
2181: PPUSH
2182: LD_INT 89
2184: PPUSH
2185: CALL_OW 297
2189: PUSH
2190: LD_INT 30
2192: LESS
2193: IFFALSE 2212
// begin ComMoveXY ( i , 114 , 80 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 114
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 111
// continue ;
2210: GO 2171
// end ; tmp := NearestUnitToUnit ( russianForestPatrol diff i , i ) ;
2212: LD_ADDR_VAR 0 6
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: LD_VAR 0 1
2226: DIFF
2227: PPUSH
2228: LD_VAR 0 1
2232: PPUSH
2233: CALL_OW 74
2237: ST_TO_ADDR
// if tmp then
2238: LD_VAR 0 6
2242: IFFALSE 2310
// if GetDistUnits ( i , tmp ) < 14 and GetLives ( tmp ) < 999 then
2244: LD_VAR 0 1
2248: PPUSH
2249: LD_VAR 0 6
2253: PPUSH
2254: CALL_OW 296
2258: PUSH
2259: LD_INT 14
2261: LESS
2262: PUSH
2263: LD_VAR 0 6
2267: PPUSH
2268: CALL_OW 256
2272: PUSH
2273: LD_INT 999
2275: LESS
2276: AND
2277: IFFALSE 2310
// begin ComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
2279: LD_VAR 0 1
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 250
2293: PPUSH
2294: LD_VAR 0 6
2298: PPUSH
2299: CALL_OW 251
2303: PPUSH
2304: CALL_OW 114
// break ;
2308: GO 2451
// end ; if not HasTask ( i ) then
2310: LD_VAR 0 1
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: IFFALSE 2449
// begin d := rand ( 0 , 5 ) ;
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: ST_TO_ADDR
// l := rand ( 3 , 7 ) ;
2338: LD_ADDR_VAR 0 3
2342: PUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 7
2348: PPUSH
2349: CALL_OW 12
2353: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , l ) ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_VAR 0 1
2363: PPUSH
2364: CALL_OW 250
2368: PPUSH
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_VAR 0 3
2378: PPUSH
2379: CALL_OW 272
2383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , l ) ;
2384: LD_ADDR_VAR 0 5
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 251
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_VAR 0 3
2408: PPUSH
2409: CALL_OW 273
2413: ST_TO_ADDR
// if ValidHex ( x , y ) then
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 488
2428: IFFALSE 2449
// ComAgressiveMove ( i , x , y ) ;
2430: LD_VAR 0 1
2434: PPUSH
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 114
// end ; end ;
2449: GO 2171
2451: POP
2452: POP
// end ;
2453: PPOPN 6
2455: END
// every 0 0$1 trigger IsOk ( russianTank ) and GetSide ( russianTank ) = 3 do
2456: LD_EXP 24
2460: PPUSH
2461: CALL_OW 302
2465: PUSH
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 255
2475: PUSH
2476: LD_INT 3
2478: EQUAL
2479: AND
2480: IFFALSE 2747
2482: GO 2484
2484: DISABLE
// begin enable ;
2485: ENABLE
// if IsAt ( russianTank , 124 , 25 ) then
2486: LD_EXP 24
2490: PPUSH
2491: LD_INT 124
2493: PPUSH
2494: LD_INT 25
2496: PPUSH
2497: CALL_OW 307
2501: IFFALSE 2515
// SetFuel ( russianTank , 100 ) ;
2503: LD_EXP 24
2507: PPUSH
2508: LD_INT 100
2510: PPUSH
2511: CALL_OW 240
// if HasTask ( russianTank ) then
2515: LD_EXP 24
2519: PPUSH
2520: CALL_OW 314
2524: IFFALSE 2528
// exit ;
2526: GO 2747
// AddComAgressiveMove ( russianTank , 121 , 25 ) ;
2528: LD_EXP 24
2532: PPUSH
2533: LD_INT 121
2535: PPUSH
2536: LD_INT 25
2538: PPUSH
2539: CALL_OW 174
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2543: LD_EXP 24
2547: PPUSH
2548: LD_INT 122
2550: PPUSH
2551: LD_INT 48
2553: PPUSH
2554: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2558: LD_EXP 24
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2570: LD_EXP 24
2574: PPUSH
2575: LD_INT 107
2577: PPUSH
2578: LD_INT 57
2580: PPUSH
2581: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 70
2592: PPUSH
2593: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2597: LD_EXP 24
2601: PPUSH
2602: LD_INT 100
2604: PPUSH
2605: LD_INT 61
2607: PPUSH
2608: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2612: LD_EXP 24
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComAgressiveMove ( russianTank , 78 , 64 ) ;
2624: LD_EXP 24
2628: PPUSH
2629: LD_INT 78
2631: PPUSH
2632: LD_INT 64
2634: PPUSH
2635: CALL_OW 174
// AddComWait ( russianTank , 0 0$4 ) ;
2639: LD_EXP 24
2643: PPUSH
2644: LD_INT 140
2646: PPUSH
2647: CALL_OW 202
// AddComAgressiveMove ( russianTank , 100 , 61 ) ;
2651: LD_EXP 24
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: LD_INT 61
2661: PPUSH
2662: CALL_OW 174
// AddComWait ( russianTank , 0 0$3 ) ;
2666: LD_EXP 24
2670: PPUSH
2671: LD_INT 105
2673: PPUSH
2674: CALL_OW 202
// AddComAgressiveMove ( russianTank , 107 , 57 ) ;
2678: LD_EXP 24
2682: PPUSH
2683: LD_INT 107
2685: PPUSH
2686: LD_INT 57
2688: PPUSH
2689: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2693: LD_EXP 24
2697: PPUSH
2698: LD_INT 70
2700: PPUSH
2701: CALL_OW 202
// AddComAgressiveMove ( russianTank , 122 , 48 ) ;
2705: LD_EXP 24
2709: PPUSH
2710: LD_INT 122
2712: PPUSH
2713: LD_INT 48
2715: PPUSH
2716: CALL_OW 174
// AddComWait ( russianTank , 0 0$2 ) ;
2720: LD_EXP 24
2724: PPUSH
2725: LD_INT 70
2727: PPUSH
2728: CALL_OW 202
// AddComMoveXY ( russianTank , 124 , 25 ) ;
2732: LD_EXP 24
2736: PPUSH
2737: LD_INT 124
2739: PPUSH
2740: LD_INT 25
2742: PPUSH
2743: CALL_OW 171
// end ; end_of_file
2747: END
// export Johnny ; export function PrepareJohnny ; begin
2748: LD_INT 0
2750: PPUSH
// uc_side := 1 ;
2751: LD_ADDR_OWVAR 20
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// uc_nation := 1 ;
2759: LD_ADDR_OWVAR 21
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Johnny := NewCharacter ( Harris ) ;
2767: LD_ADDR_EXP 25
2771: PUSH
2772: LD_STRING Harris
2774: PPUSH
2775: CALL_OW 25
2779: ST_TO_ADDR
// SetDir ( Johnny , 1 ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: CALL_OW 233
// PlaceUnitArea ( Johnny , johnnySpawn , false ) ;
2792: LD_EXP 25
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// ComCrawl ( Johnny ) ;
2807: LD_EXP 25
2811: PPUSH
2812: CALL_OW 137
// end ;
2816: LD_VAR 0 1
2820: RET
// export function PreparePatrolTank ; var veh , un ; begin
2821: LD_INT 0
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 1 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// uc_nation := 1 ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 1 ) ;
2842: LD_INT 1
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 380
// un := CreateHuman ;
2855: LD_ADDR_VAR 0 3
2859: PUSH
2860: CALL_OW 44
2864: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_engine := engine_combustion ;
2873: LD_ADDR_OWVAR 39
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// vc_control := control_manual ;
2881: LD_ADDR_OWVAR 38
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2889: LD_ADDR_OWVAR 40
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// vc_fuel_battery := [ 72 , 54 , 36 , 30 ] [ Difficulty ] ;
2897: LD_ADDR_OWVAR 41
2901: PUSH
2902: LD_INT 72
2904: PUSH
2905: LD_INT 54
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: LD_INT 30
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_OWVAR 67
2924: ARRAY
2925: ST_TO_ADDR
// veh := CreateVehicle ;
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: LD_INT 1
2943: PPUSH
2944: CALL_OW 233
// PlaceUnitXY ( veh , 31 , 58 , false ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 31
2955: PPUSH
2956: LD_INT 58
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_VAR 0 2
2975: PPUSH
2976: CALL_OW 52
// result := un ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 3
2989: ST_TO_ADDR
// end ; end_of_file
2990: LD_VAR 0 1
2994: RET
// export function Action ; begin
2995: LD_INT 0
2997: PPUSH
// InGameOn ;
2998: CALL_OW 8
// wait ( 0 0$4 ) ;
3002: LD_INT 140
3004: PPUSH
3005: CALL_OW 67
// Say ( Heike , DH-start-1 ) ;
3009: LD_EXP 16
3013: PPUSH
3014: LD_STRING DH-start-1
3016: PPUSH
3017: CALL_OW 88
// ComMoveXY ( Heike , 71 , 29 ) ;
3021: LD_EXP 16
3025: PPUSH
3026: LD_INT 71
3028: PPUSH
3029: LD_INT 29
3031: PPUSH
3032: CALL_OW 111
// wait ( 0 0$4 ) ;
3036: LD_INT 140
3038: PPUSH
3039: CALL_OW 67
// ComMoveXY ( Heike , 71 , 33 ) ;
3043: LD_EXP 16
3047: PPUSH
3048: LD_INT 71
3050: PPUSH
3051: LD_INT 33
3053: PPUSH
3054: CALL_OW 111
// AddComTurnXY ( Heike , 71 , 34 ) ;
3058: LD_EXP 16
3062: PPUSH
3063: LD_INT 71
3065: PPUSH
3066: LD_INT 34
3068: PPUSH
3069: CALL_OW 178
// wait ( 0 0$4 ) ;
3073: LD_INT 140
3075: PPUSH
3076: CALL_OW 67
// Say ( Heike , DH-start-2 ) ;
3080: LD_EXP 16
3084: PPUSH
3085: LD_STRING DH-start-2
3087: PPUSH
3088: CALL_OW 88
// wait ( 0 0$4 ) ;
3092: LD_INT 140
3094: PPUSH
3095: CALL_OW 67
// ComMoveXY ( Heike , 65 , 26 ) ;
3099: LD_EXP 16
3103: PPUSH
3104: LD_INT 65
3106: PPUSH
3107: LD_INT 26
3109: PPUSH
3110: CALL_OW 111
// Say ( Heike , DH-start-3 ) ;
3114: LD_EXP 16
3118: PPUSH
3119: LD_STRING DH-start-3
3121: PPUSH
3122: CALL_OW 88
// InGameOff ;
3126: CALL_OW 9
// ChangeMissionObjectives ( O1_cont ) ;
3130: LD_STRING O1_cont
3132: PPUSH
3133: CALL_OW 337
// SaveForQuickRestart ;
3137: CALL_OW 22
// missionStarted := true ;
3141: LD_ADDR_EXP 1
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// PrepareJohnny ;
3149: CALL 2748 0 0
// end ;
3153: LD_VAR 0 1
3157: RET
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 2 , Johnny ) and not See ( 3 , Heike ) and NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Heike ) = Johnny and GetAttitude ( 1 , 2 ) = att_neutral do
3158: LD_EXP 8
3162: NOT
3163: PUSH
3164: LD_EXP 7
3168: NOT
3169: AND
3170: PUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_EXP 25
3178: PPUSH
3179: CALL_OW 292
3183: AND
3184: PUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: CALL_OW 292
3197: NOT
3198: AND
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: CALL_OW 74
3224: PUSH
3225: LD_EXP 25
3229: EQUAL
3230: AND
3231: PUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 2
3237: PPUSH
3238: CALL_OW 81
3242: PUSH
3243: LD_INT 0
3245: EQUAL
3246: AND
3247: IFFALSE 4182
3249: GO 3251
3251: DISABLE
// begin InGameOn ;
3252: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
3256: LD_EXP 16
3260: PPUSH
3261: CALL_OW 87
// Say ( Johnny , DJ-ambush-1 ) ;
3265: LD_EXP 25
3269: PPUSH
3270: LD_STRING DJ-ambush-1
3272: PPUSH
3273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
3277: LD_INT 10
3279: PPUSH
3280: CALL_OW 67
// ComTurnUnit ( Heike , Johnny ) ;
3284: LD_EXP 16
3288: PPUSH
3289: LD_EXP 25
3293: PPUSH
3294: CALL_OW 119
// Say ( Heike , DH-ambush-1 ) ;
3298: LD_EXP 16
3302: PPUSH
3303: LD_STRING DH-ambush-1
3305: PPUSH
3306: CALL_OW 88
// wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComWalk ( Johnny ) ;
3317: LD_EXP 25
3321: PPUSH
3322: CALL_OW 138
// AddComMoveUnit ( Johnny , Heike ) ;
3326: LD_EXP 25
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
3340: LD_INT 35
3342: PPUSH
3343: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 4 ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_EXP 16
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 4
3364: LESS
3365: IFFALSE 3340
// ComTurnUnit ( Johnny , Heike ) ;
3367: LD_EXP 25
3371: PPUSH
3372: LD_EXP 16
3376: PPUSH
3377: CALL_OW 119
// Say ( Johnny , DJ-ambush-2 ) ;
3381: LD_EXP 25
3385: PPUSH
3386: LD_STRING DJ-ambush-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Heike , DH-ambush-2 ) ;
3393: LD_EXP 16
3397: PPUSH
3398: LD_STRING DH-ambush-2
3400: PPUSH
3401: CALL_OW 88
// Say ( Johnny , DJ-ambush-3 ) ;
3405: LD_EXP 25
3409: PPUSH
3410: LD_STRING DJ-ambush-3
3412: PPUSH
3413: CALL_OW 88
// Say ( Heike , DH-ambush-3 ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_STRING DH-ambush-3
3424: PPUSH
3425: CALL_OW 88
// Say ( Johnny , DJ-ambush-4 ) ;
3429: LD_EXP 25
3433: PPUSH
3434: LD_STRING DJ-ambush-4
3436: PPUSH
3437: CALL_OW 88
// ComTurnXY ( Heike , 39 , 22 ) ;
3441: LD_EXP 16
3445: PPUSH
3446: LD_INT 39
3448: PPUSH
3449: LD_INT 22
3451: PPUSH
3452: CALL_OW 118
// Say ( Heike , DH-ambush-4 ) ;
3456: LD_EXP 16
3460: PPUSH
3461: LD_STRING DH-ambush-4
3463: PPUSH
3464: CALL_OW 88
// PrepareRussianPatrol ;
3468: CALL 1309 0 0
// PlaceSeeing ( 39 , 22 , 2 , - 12 ) ;
3472: LD_INT 39
3474: PPUSH
3475: LD_INT 22
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: LD_INT 12
3483: NEG
3484: PPUSH
3485: CALL_OW 330
// CenterOnXY ( 39 , 22 ) ;
3489: LD_INT 39
3491: PPUSH
3492: LD_INT 22
3494: PPUSH
3495: CALL_OW 84
// ComMoveXY ( russianPatrol , 39 , 23 ) ;
3499: LD_EXP 21
3503: PPUSH
3504: LD_INT 39
3506: PPUSH
3507: LD_INT 23
3509: PPUSH
3510: CALL_OW 111
// ComMoveXY ( [ Heike , Johnny ] , 39 , 7 ) ;
3514: LD_EXP 16
3518: PUSH
3519: LD_EXP 25
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: LD_INT 39
3530: PPUSH
3531: LD_INT 7
3533: PPUSH
3534: CALL_OW 111
// AddComTurnUnit ( [ Heike , Johnny ] , russianPatrol [ 1 ] ) ;
3538: LD_EXP 16
3542: PUSH
3543: LD_EXP 25
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: LD_EXP 21
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: CALL_OW 179
// Say ( russianPatrol [ 1 ] , DR-ambush-5 ) ;
3565: LD_EXP 21
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: LD_STRING DR-ambush-5
3576: PPUSH
3577: CALL_OW 88
// Say ( russianPatrol [ 2 ] , DR1-ambush-5 ) ;
3581: LD_EXP 21
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: LD_STRING DR1-ambush-5
3592: PPUSH
3593: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// until GetDistUnitXY ( Heike , 39 , 7 ) < 6 ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_INT 39
3611: PPUSH
3612: LD_INT 7
3614: PPUSH
3615: CALL_OW 297
3619: PUSH
3620: LD_INT 6
3622: LESS
3623: IFFALSE 3597
// AddComTurnUnit ( Heike , russianPatrol [ 1 ] ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_EXP 21
3634: PUSH
3635: LD_INT 1
3637: ARRAY
3638: PPUSH
3639: CALL_OW 179
// ComTurnUnit ( Johnny , Heike ) ;
3643: LD_EXP 25
3647: PPUSH
3648: LD_EXP 16
3652: PPUSH
3653: CALL_OW 119
// Say ( Johnny , DJ-ambush-6 ) ;
3657: LD_EXP 25
3661: PPUSH
3662: LD_STRING DJ-ambush-6
3664: PPUSH
3665: CALL_OW 88
// Say ( Heike , DH-ambush-6 ) ;
3669: LD_EXP 16
3673: PPUSH
3674: LD_STRING DH-ambush-6
3676: PPUSH
3677: CALL_OW 88
// InGameOff ;
3681: CALL_OW 9
// meetJohnny := true ;
3685: LD_ADDR_EXP 3
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComFree ( Johnny ) ;
3693: LD_EXP 25
3697: PPUSH
3698: CALL_OW 139
// ChangeMissionObjectives ( O2_ambush_cont ) ;
3702: LD_STRING O2_ambush_cont
3704: PPUSH
3705: CALL_OW 337
// ComMoveXY ( russianPatrol [ russianPatrol ] , 29 , 15 ) ;
3709: LD_EXP 21
3713: PUSH
3714: LD_EXP 21
3718: ARRAY
3719: PPUSH
3720: LD_INT 29
3722: PPUSH
3723: LD_INT 15
3725: PPUSH
3726: CALL_OW 111
// wait ( 0 0$2 ) ;
3730: LD_INT 70
3732: PPUSH
3733: CALL_OW 67
// if not See ( 3 , Heike ) and not See ( 3 , Johnny ) then
3737: LD_INT 3
3739: PPUSH
3740: LD_EXP 16
3744: PPUSH
3745: CALL_OW 292
3749: NOT
3750: PUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_EXP 25
3758: PPUSH
3759: CALL_OW 292
3763: NOT
3764: AND
3765: IFFALSE 3786
// ComMoveXY ( russianPatrol [ 1 ] , 58 , 32 ) ;
3767: LD_EXP 21
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 58
3778: PPUSH
3779: LD_INT 32
3781: PPUSH
3782: CALL_OW 111
// wait ( [ 0 0$50 , 0 0$40 , 0 0$35 , 0 0$30 ] [ Difficulty ] ) ;
3786: LD_INT 1750
3788: PUSH
3789: LD_INT 1400
3791: PUSH
3792: LD_INT 1225
3794: PUSH
3795: LD_INT 1050
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PPUSH
3810: CALL_OW 67
// ComAgressiveMove ( russianPatrol , 43 , 13 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_INT 43
3821: PPUSH
3822: LD_INT 13
3824: PPUSH
3825: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// until not russianPatrol or not IsOk ( Johnny ) ;
3836: LD_EXP 21
3840: NOT
3841: PUSH
3842: LD_EXP 25
3846: PPUSH
3847: CALL_OW 302
3851: NOT
3852: OR
3853: IFFALSE 3829
// RemoveSeeing ( 39 , 22 , 2 ) ;
3855: LD_INT 39
3857: PPUSH
3858: LD_INT 22
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 331
// if GetAttitude ( 1 , 2 ) = att_enemy then
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 2
3873: PPUSH
3874: CALL_OW 81
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: IFFALSE 3886
// exit ;
3884: GO 4182
// if not IsOk ( Johnny ) then
3886: LD_EXP 25
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: IFFALSE 3907
// begin ChangeMissionObjectives ( O2_ambush_out_cont ) ;
3898: LD_STRING O2_ambush_out_cont
3900: PPUSH
3901: CALL_OW 337
// exit ;
3905: GO 4182
// end ; if GetDistUnits ( Heike , Johnny ) > 10 then
3907: LD_EXP 16
3911: PPUSH
3912: LD_EXP 25
3916: PPUSH
3917: CALL_OW 296
3921: PUSH
3922: LD_INT 10
3924: GREATER
3925: IFFALSE 3968
// begin ComMoveUnit ( Johnny , Heike ) ;
3927: LD_EXP 25
3931: PPUSH
3932: LD_EXP 16
3936: PPUSH
3937: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// until GetDistUnits ( Johnny , Heike ) < 6 ;
3948: LD_EXP 25
3952: PPUSH
3953: LD_EXP 16
3957: PPUSH
3958: CALL_OW 296
3962: PUSH
3963: LD_INT 6
3965: LESS
3966: IFFALSE 3941
// end ; CenterNowOnUnits ( Heike ) ;
3968: LD_EXP 16
3972: PPUSH
3973: CALL_OW 87
// InGameOn ;
3977: CALL_OW 8
// ComTurnUnit ( Heike , Johnny ) ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 25
3990: PPUSH
3991: CALL_OW 119
// ComTurnUnit ( Johnny , Heike ) ;
3995: LD_EXP 25
3999: PPUSH
4000: LD_EXP 16
4004: PPUSH
4005: CALL_OW 119
// Say ( Johnny , DJ-thanks-1 ) ;
4009: LD_EXP 25
4013: PPUSH
4014: LD_STRING DJ-thanks-1
4016: PPUSH
4017: CALL_OW 88
// Say ( Heike , DH-thanks-1 ) ;
4021: LD_EXP 16
4025: PPUSH
4026: LD_STRING DH-thanks-1
4028: PPUSH
4029: CALL_OW 88
// Say ( Johnny , DJ-thanks-2 ) ;
4033: LD_EXP 25
4037: PPUSH
4038: LD_STRING DJ-thanks-2
4040: PPUSH
4041: CALL_OW 88
// ComMoveXY ( Johnny , 4 , 3 ) ;
4045: LD_EXP 25
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: CALL_OW 111
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// Say ( Heike , DH-thanks-2 ) ;
4067: LD_EXP 16
4071: PPUSH
4072: LD_STRING DH-thanks-2
4074: PPUSH
4075: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4079: LD_INT 35
4081: PPUSH
4082: CALL_OW 67
// until not See ( 2 , Johnny ) ;
4086: LD_INT 2
4088: PPUSH
4089: LD_EXP 25
4093: PPUSH
4094: CALL_OW 292
4098: NOT
4099: IFFALSE 4079
// Say ( Heike , DH-thanks-2a ) ;
4101: LD_EXP 16
4105: PPUSH
4106: LD_STRING DH-thanks-2a
4108: PPUSH
4109: CALL_OW 88
// RemoveUnit ( Johnny ) ;
4113: LD_EXP 25
4117: PPUSH
4118: CALL_OW 64
// InGameOff ;
4122: CALL_OW 9
// ChangeMissionObjectives ( O2_ambush_out_cont ) ;
4126: LD_STRING O2_ambush_out_cont
4128: PPUSH
4129: CALL_OW 337
// johnnySaved := true ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// AddExperience ( Heike , 1 , 600 ) ;
4141: LD_EXP 16
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 600
4151: PPUSH
4152: CALL_OW 492
// if IsOk ( Olaf ) then
4156: LD_EXP 17
4160: PPUSH
4161: CALL_OW 302
4165: IFFALSE 4182
// ComMoveXY ( Olaf , 44 , 25 ) ;
4167: LD_EXP 17
4171: PPUSH
4172: LD_INT 44
4174: PPUSH
4175: LD_INT 25
4177: PPUSH
4178: CALL_OW 111
// end ;
4182: END
// every 0 0$1 trigger russianPatrol do var i ;
4183: LD_EXP 21
4187: IFFALSE 4255
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin enable ;
4195: ENABLE
// for i in russianPatrol do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_EXP 21
4205: PUSH
4206: FOR_IN
4207: IFFALSE 4253
// if GetLives ( i ) < 1000 and not HasTask ( i ) then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 256
4218: PUSH
4219: LD_INT 1000
4221: LESS
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 314
4232: NOT
4233: AND
4234: IFFALSE 4251
// ComAgressiveMove ( i , 42 , 12 ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 42
4243: PPUSH
4244: LD_INT 12
4246: PPUSH
4247: CALL_OW 114
4251: GO 4206
4253: POP
4254: POP
// end ;
4255: PPOPN 1
4257: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOk ( Johnny ) do
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 81
4268: PUSH
4269: LD_INT 2
4271: EQUAL
4272: PUSH
4273: LD_EXP 25
4277: PPUSH
4278: CALL_OW 302
4282: AND
4283: IFFALSE 4300
4285: GO 4287
4287: DISABLE
// Say ( Johnny , DJ-fire-1 ) ;
4288: LD_EXP 25
4292: PPUSH
4293: LD_STRING DJ-fire-1
4295: PPUSH
4296: CALL_OW 88
4300: END
// every 0 0$1 trigger not mercenariesSpotted and UnitFilter ( russianForces , [ f_see , 2 ] ) do
4301: LD_EXP 7
4305: NOT
4306: PUSH
4307: LD_EXP 23
4311: PPUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: AND
4327: IFFALSE 4447
4329: GO 4331
4331: DISABLE
// begin CenterNowOnUnits ( Heike ) ;
4332: LD_EXP 16
4336: PPUSH
4337: CALL_OW 87
// DialogueOn ;
4341: CALL_OW 6
// Say ( Heike , DH-see-enemy-patrol-1 ) ;
4345: LD_EXP 16
4349: PPUSH
4350: LD_STRING DH-see-enemy-patrol-1
4352: PPUSH
4353: CALL_OW 88
// Say ( UnitFilter ( russianForces , [ f_sex , sex_male ] ) [ 1 ] , DR-see-enemy-patrol-1 ) ;
4357: LD_EXP 23
4361: PPUSH
4362: LD_INT 26
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PUSH
4377: LD_INT 1
4379: ARRAY
4380: PPUSH
4381: LD_STRING DR-see-enemy-patrol-1
4383: PPUSH
4384: CALL_OW 88
// DialogueOff ;
4388: CALL_OW 7
// ComAgressiveMove ( russianForces , 66 , 22 ) ;
4392: LD_EXP 23
4396: PPUSH
4397: LD_INT 66
4399: PPUSH
4400: LD_INT 22
4402: PPUSH
4403: CALL_OW 114
// wait ( 0 0$10 ) ;
4407: LD_INT 350
4409: PPUSH
4410: CALL_OW 67
// AddComWait ( russianForces , 0 0$05 ) ;
4414: LD_EXP 23
4418: PPUSH
4419: LD_INT 175
4421: PPUSH
4422: CALL_OW 202
// AddComMoveToArea ( russianForces , russianEastPatrolArea ) ;
4426: LD_EXP 23
4430: PPUSH
4431: LD_INT 9
4433: PPUSH
4434: CALL_OW 173
// AddComFree ( russianForces ) ;
4438: LD_EXP 23
4442: PPUSH
4443: CALL_OW 199
// end ;
4447: END
// every 0 0$1 trigger UnitFilter ( russianForces , [ f_not , [ f_lives , 960 ] ] ) do var i , tmp , tmp2 , tmp3 ;
4448: LD_EXP 23
4452: PPUSH
4453: LD_INT 3
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: LD_INT 960
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 72
4474: IFFALSE 4727
4476: GO 4478
4478: DISABLE
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
// begin enable ;
4485: ENABLE
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PPUSH
4501: CALL_OW 69
4505: ST_TO_ADDR
// tmp2 := UnitFilter ( russianForces , [ f_and , [ f_not , [ f_lives , 960 ] , [ f_lives , 500 ] ] ] ) ;
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_EXP 23
4515: PPUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 960
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 500
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 72
4555: ST_TO_ADDR
// tmp3 := UnitFilter ( russianForces , [ f_not , [ f_lives , 500 ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_EXP 23
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: LD_INT 500
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 72
4587: ST_TO_ADDR
// if not tmp then
4588: LD_VAR 0 2
4592: NOT
4593: IFFALSE 4597
// exit ;
4595: GO 4727
// for i in tmp2 do
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: FOR_IN
4608: IFFALSE 4666
// if GetDistUnits ( i , NearestUnitToUnit ( tmp , i ) ) < 10 then
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 74
4629: PPUSH
4630: CALL_OW 296
4634: PUSH
4635: LD_INT 10
4637: LESS
4638: IFFALSE 4664
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: PPUSH
4660: CALL_OW 115
4664: GO 4607
4666: POP
4667: POP
// if tmp3 then
4668: LD_VAR 0 4
4672: IFFALSE 4727
// for i in tmp3 do
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4725
// if GetDistUnitXY ( i , 119 , 21 ) > 10 then
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 119
4694: PPUSH
4695: LD_INT 21
4697: PPUSH
4698: CALL_OW 297
4702: PUSH
4703: LD_INT 10
4705: GREATER
4706: IFFALSE 4723
// ComMoveXY ( i , 119 , 21 ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 119
4715: PPUSH
4716: LD_INT 21
4718: PPUSH
4719: CALL_OW 111
4723: GO 4684
4725: POP
4726: POP
// end ;
4727: PPOPN 4
4729: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_tiger ] ) , Heike ) ) < 6 do
4730: LD_EXP 1
4734: PUSH
4735: LD_EXP 16
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 14
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: PPUSH
4755: LD_EXP 16
4759: PPUSH
4760: CALL_OW 74
4764: PPUSH
4765: CALL_OW 296
4769: PUSH
4770: LD_INT 6
4772: LESS
4773: AND
4774: IFFALSE 4805
4776: GO 4778
4778: DISABLE
// begin animalCounter := animalCounter + 1 ;
4779: LD_ADDR_EXP 15
4783: PUSH
4784: LD_EXP 15
4788: PUSH
4789: LD_INT 1
4791: PLUS
4792: ST_TO_ADDR
// Say ( Heike , DH-tiger-1 ) ;
4793: LD_EXP 16
4797: PPUSH
4798: LD_STRING DH-tiger-1
4800: PPUSH
4801: CALL_OW 88
// end ;
4805: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Heike ) ) < 6 do
4806: LD_EXP 1
4810: PUSH
4811: LD_EXP 16
4815: PPUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 12
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PPUSH
4831: LD_EXP 16
4835: PPUSH
4836: CALL_OW 74
4840: PPUSH
4841: CALL_OW 296
4845: PUSH
4846: LD_INT 6
4848: LESS
4849: AND
4850: IFFALSE 4881
4852: GO 4854
4854: DISABLE
// begin animalCounter := animalCounter + 1 ;
4855: LD_ADDR_EXP 15
4859: PUSH
4860: LD_EXP 15
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: ST_TO_ADDR
// Say ( Heike , DH-ape-1 ) ;
4869: LD_EXP 16
4873: PPUSH
4874: LD_STRING DH-ape-1
4876: PPUSH
4877: CALL_OW 88
// end ;
4881: END
// every 0 0$2 trigger missionStarted and GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_phororhacos ] ) , Heike ) ) < 6 do
4882: LD_EXP 1
4886: PUSH
4887: LD_EXP 16
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 16
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 296
4921: PUSH
4922: LD_INT 6
4924: LESS
4925: AND
4926: IFFALSE 4957
4928: GO 4930
4930: DISABLE
// begin animalCounter := animalCounter + 1 ;
4931: LD_ADDR_EXP 15
4935: PUSH
4936: LD_EXP 15
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// Say ( Heike , DH-bird-1 ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_STRING DH-bird-1
4952: PPUSH
4953: CALL_OW 88
// end ;
4957: END
// every 0 0$2 trigger animalCounter = 3 do
4958: LD_EXP 15
4962: PUSH
4963: LD_INT 3
4965: EQUAL
4966: IFFALSE 4978
4968: GO 4970
4970: DISABLE
// SetAchievement ( ACH_ZOOLIGST ) ;
4971: LD_STRING ACH_ZOOLIGST
4973: PPUSH
4974: CALL_OW 543
4978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 3 ] ] ) do
4979: LD_INT 22
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 101
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: IFFALSE 5020
5009: GO 5011
5011: DISABLE
// russianSpotted := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
5020: END
// every 0 0$1 trigger GetDistUnits ( Heike , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , Heike ) ) < 8 do
5021: LD_EXP 16
5025: PPUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_EXP 16
5059: PPUSH
5060: CALL_OW 74
5064: PPUSH
5065: CALL_OW 296
5069: PUSH
5070: LD_INT 8
5072: LESS
5073: IFFALSE 5090
5075: GO 5077
5077: DISABLE
// Say ( Heike , DH-enemy-base ) ;
5078: LD_EXP 16
5082: PPUSH
5083: LD_STRING DH-enemy-base
5085: PPUSH
5086: CALL_OW 88
5090: END
// every 0 0$1 trigger not IsPlaced ( Johnny ) and not dogTagFound and dogTag and not lastObjectiveActive and not mercenariesQuestDone do var i ;
5091: LD_EXP 25
5095: PPUSH
5096: CALL_OW 305
5100: NOT
5101: PUSH
5102: LD_EXP 6
5106: NOT
5107: AND
5108: PUSH
5109: LD_EXP 5
5113: AND
5114: PUSH
5115: LD_EXP 12
5119: NOT
5120: AND
5121: PUSH
5122: LD_EXP 11
5126: NOT
5127: AND
5128: IFFALSE 5286
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
5136: LD_INT 35
5138: PPUSH
5139: CALL_OW 67
// for i in dogTag do
5143: LD_ADDR_VAR 0 1
5147: PUSH
5148: LD_EXP 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5203
// if GetDistUnitXY ( Heike , i [ 1 ] , i [ 2 ] ) < 3 then
5156: LD_EXP 16
5160: PPUSH
5161: LD_VAR 0 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 1
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 297
5183: PUSH
5184: LD_INT 3
5186: LESS
5187: IFFALSE 5201
// begin dogTagFound := i ;
5189: LD_ADDR_EXP 6
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// break ;
5199: GO 5203
// end ;
5201: GO 5153
5203: POP
5204: POP
// until dogTagFound ;
5205: LD_EXP 6
5209: IFFALSE 5136
// CenterNowOnUnits ( Heike ) ;
5211: LD_EXP 16
5215: PPUSH
5216: CALL_OW 87
// ComMoveXY ( Heike , dogTagFound [ 1 ] , dogTagFound [ 2 ] ) ;
5220: LD_EXP 16
5224: PPUSH
5225: LD_EXP 6
5229: PUSH
5230: LD_INT 1
5232: ARRAY
5233: PPUSH
5234: LD_EXP 6
5238: PUSH
5239: LD_INT 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 111
// SetAchievement ( ACH_DOGTAG ) ;
5247: LD_STRING ACH_DOGTAG
5249: PPUSH
5250: CALL_OW 543
// if mercenariesQuestReady then
5254: LD_EXP 10
5258: IFFALSE 5274
// Say ( Heike , DH-dogtag-found-quest ) else
5260: LD_EXP 16
5264: PPUSH
5265: LD_STRING DH-dogtag-found-quest
5267: PPUSH
5268: CALL_OW 88
5272: GO 5286
// Say ( Heike , DH-dogtag-found ) ;
5274: LD_EXP 16
5278: PPUSH
5279: LD_STRING DH-dogtag-found
5281: PPUSH
5282: CALL_OW 88
// end ;
5286: PPOPN 1
5288: END
// every 0 0$1 trigger not olafSpotted and not mercenariesSpotted and See ( 5 , Heike ) and GetDistUnits ( Heike , Olaf ) < 8 do
5289: LD_EXP 8
5293: NOT
5294: PUSH
5295: LD_EXP 7
5299: NOT
5300: AND
5301: PUSH
5302: LD_INT 5
5304: PPUSH
5305: LD_EXP 16
5309: PPUSH
5310: CALL_OW 292
5314: AND
5315: PUSH
5316: LD_EXP 16
5320: PPUSH
5321: LD_EXP 17
5325: PPUSH
5326: CALL_OW 296
5330: PUSH
5331: LD_INT 8
5333: LESS
5334: AND
5335: IFFALSE 5720
5337: GO 5339
5339: DISABLE
// begin olafSpotted := true ;
5340: LD_ADDR_EXP 8
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if HasTask ( Olaf ) then
5348: LD_EXP 17
5352: PPUSH
5353: CALL_OW 314
5357: IFFALSE 5368
// ComStop ( Olaf ) ;
5359: LD_EXP 17
5363: PPUSH
5364: CALL_OW 141
// InGameOn ;
5368: CALL_OW 8
// if GetDistUnits ( Olaf , Heike ) > 8 then
5372: LD_EXP 17
5376: PPUSH
5377: LD_EXP 16
5381: PPUSH
5382: CALL_OW 296
5386: PUSH
5387: LD_INT 8
5389: GREATER
5390: IFFALSE 5406
// ComMoveUnit ( Olaf , Heike ) ;
5392: LD_EXP 17
5396: PPUSH
5397: LD_EXP 16
5401: PPUSH
5402: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5406: LD_INT 35
5408: PPUSH
5409: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) <= 8 ;
5413: LD_EXP 17
5417: PPUSH
5418: LD_EXP 16
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 8
5430: LESSEQUAL
5431: IFFALSE 5406
// ComTurnUnit ( Heike , Olaf ) ;
5433: LD_EXP 16
5437: PPUSH
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 119
// ComTurnUnit ( Olaf , Heike ) ;
5447: LD_EXP 17
5451: PPUSH
5452: LD_EXP 16
5456: PPUSH
5457: CALL_OW 119
// DialogueOn ;
5461: CALL_OW 6
// Say ( Olaf , DO-olaf-1 ) ;
5465: LD_EXP 17
5469: PPUSH
5470: LD_STRING DO-olaf-1
5472: PPUSH
5473: CALL_OW 88
// Say ( Heike , DH-olaf-1 ) ;
5477: LD_EXP 16
5481: PPUSH
5482: LD_STRING DH-olaf-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Olaf , DO-olaf-2 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DO-olaf-2
5496: PPUSH
5497: CALL_OW 88
// Say ( Heike , DH-olaf-2 ) ;
5501: LD_EXP 16
5505: PPUSH
5506: LD_STRING DH-olaf-2
5508: PPUSH
5509: CALL_OW 88
// Say ( Olaf , DO-olaf-3 ) ;
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING DO-olaf-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Olaf , DO-olaf-4 ) ;
5525: LD_EXP 17
5529: PPUSH
5530: LD_STRING DO-olaf-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Heike , DH-olaf-4 ) ;
5537: LD_EXP 16
5541: PPUSH
5542: LD_STRING DH-olaf-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Olaf , DO-olaf-5 ) ;
5549: LD_EXP 17
5553: PPUSH
5554: LD_STRING DO-olaf-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Heike , DH-olaf-5 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING DH-olaf-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Olaf , DO-olaf-6 ) ;
5573: LD_EXP 17
5577: PPUSH
5578: LD_STRING DO-olaf-6
5580: PPUSH
5581: CALL_OW 88
// if russianSpotted or johnnySaved then
5585: LD_EXP 9
5589: PUSH
5590: LD_EXP 4
5594: OR
5595: IFFALSE 5623
// begin Say ( Heike , DH-olaf-6a ) ;
5597: LD_EXP 16
5601: PPUSH
5602: LD_STRING DH-olaf-6a
5604: PPUSH
5605: CALL_OW 88
// Say ( Olaf , DO-olaf-7a ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING DO-olaf-7a
5616: PPUSH
5617: CALL_OW 88
// end else
5621: GO 5647
// begin Say ( Heike , DH-olaf-6b ) ;
5623: LD_EXP 16
5627: PPUSH
5628: LD_STRING DH-olaf-6b
5630: PPUSH
5631: CALL_OW 88
// Say ( Olaf , DO-olaf-7b ) ;
5635: LD_EXP 17
5639: PPUSH
5640: LD_STRING DO-olaf-7b
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Olaf , DO-olaf-8 ) ;
5647: LD_EXP 17
5651: PPUSH
5652: LD_STRING DO-olaf-8
5654: PPUSH
5655: CALL_OW 88
// DialogueOff ;
5659: CALL_OW 7
// InGameOff ;
5663: CALL_OW 9
// ChangeMissionObjectives ( O3_camp_cont ) ;
5667: LD_STRING O3_camp_cont
5669: PPUSH
5670: CALL_OW 337
// if not johnnySaved then
5674: LD_EXP 4
5678: NOT
5679: IFFALSE 5690
// KillUnit ( Johnny ) ;
5681: LD_EXP 25
5685: PPUSH
5686: CALL_OW 66
// ComMoveXY ( Olaf , 52 , 90 ) ;
5690: LD_EXP 17
5694: PPUSH
5695: LD_INT 52
5697: PPUSH
5698: LD_INT 90
5700: PPUSH
5701: CALL_OW 111
// AddComTurnXY ( Olaf , 53 , 89 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_INT 53
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: CALL_OW 178
// end ;
5720: END
// every 0 0$1 trigger not olafSpotted and GetDistUnits ( Heike , Givi ) < 36 do
5721: LD_EXP 8
5725: NOT
5726: PUSH
5727: LD_EXP 16
5731: PPUSH
5732: LD_EXP 18
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 36
5744: LESS
5745: AND
5746: IFFALSE 5766
5748: GO 5750
5750: DISABLE
// ComMoveXY ( Olaf , 39 , 71 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_INT 39
5758: PPUSH
5759: LD_INT 71
5761: PPUSH
5762: CALL_OW 111
5766: END
// every 0 0$1 trigger not mercenariesSpotted and ( See ( 2 , Mike ) or See ( 2 , Givi ) ) do var i , driver , tank ;
5767: LD_EXP 7
5771: NOT
5772: PUSH
5773: LD_INT 2
5775: PPUSH
5776: LD_EXP 19
5780: PPUSH
5781: CALL_OW 292
5785: PUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_EXP 18
5793: PPUSH
5794: CALL_OW 292
5798: OR
5799: AND
5800: IFFALSE 7121
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
5809: PPUSH
// begin if not johnnySaved then
5810: LD_EXP 4
5814: NOT
5815: IFFALSE 5826
// KillUnit ( Johnny ) ;
5817: LD_EXP 25
5821: PPUSH
5822: CALL_OW 66
// mercenariesSpotted := true ;
5826: LD_ADDR_EXP 7
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// ChangeMissionObjectives ( O4_camp_cont ) ;
5834: LD_STRING O4_camp_cont
5836: PPUSH
5837: CALL_OW 337
// InGameOn ;
5841: CALL_OW 8
// CenterNowOnXY ( 53 , 89 ) ;
5845: LD_INT 53
5847: PPUSH
5848: LD_INT 89
5850: PPUSH
5851: CALL_OW 86
// PlaceSeeing ( 53 , 89 , 2 , - 8 ) ;
5855: LD_INT 53
5857: PPUSH
5858: LD_INT 89
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 8
5866: NEG
5867: PPUSH
5868: CALL_OW 330
// if olafSpotted then
5872: LD_EXP 8
5876: IFFALSE 5994
// begin AddComTurnUnit ( Olaf , Heike ) ;
5878: LD_EXP 17
5882: PPUSH
5883: LD_EXP 16
5887: PPUSH
5888: CALL_OW 179
// ComMoveXY ( Heike , 51 , 86 ) ;
5892: LD_EXP 16
5896: PPUSH
5897: LD_INT 51
5899: PPUSH
5900: LD_INT 86
5902: PPUSH
5903: CALL_OW 111
// AddComTurnUnit ( Heike , Olaf ) ;
5907: LD_EXP 16
5911: PPUSH
5912: LD_EXP 17
5916: PPUSH
5917: CALL_OW 179
// Say ( Olaf , DO-camp-1 ) ;
5921: LD_EXP 17
5925: PPUSH
5926: LD_STRING DO-camp-1
5928: PPUSH
5929: CALL_OW 88
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
5933: LD_EXP 18
5937: PUSH
5938: LD_EXP 19
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: LD_EXP 16
5951: PPUSH
5952: CALL_OW 119
// Say ( Givi , DG-camp-1 ) ;
5956: LD_EXP 18
5960: PPUSH
5961: LD_STRING DG-camp-1
5963: PPUSH
5964: CALL_OW 88
// Say ( Heike , DH-camp-1 ) ;
5968: LD_EXP 16
5972: PPUSH
5973: LD_STRING DH-camp-1
5975: PPUSH
5976: CALL_OW 88
// Say ( Olaf , DO-camp-2 ) ;
5980: LD_EXP 17
5984: PPUSH
5985: LD_STRING DO-camp-2
5987: PPUSH
5988: CALL_OW 88
// end else
5992: GO 6389
// begin ComMoveXY ( Heike , 51 , 86 ) ;
5994: LD_EXP 16
5998: PPUSH
5999: LD_INT 51
6001: PPUSH
6002: LD_INT 86
6004: PPUSH
6005: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
6009: LD_EXP 16
6013: PPUSH
6014: LD_EXP 18
6018: PPUSH
6019: CALL_OW 179
// ComTurnUnit ( [ Givi , Mike ] , Heike ) ;
6023: LD_EXP 18
6027: PUSH
6028: LD_EXP 19
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PPUSH
6037: LD_EXP 16
6041: PPUSH
6042: CALL_OW 119
// Say ( Givi , DG-camp-1a ) ;
6046: LD_EXP 18
6050: PPUSH
6051: LD_STRING DG-camp-1a
6053: PPUSH
6054: CALL_OW 88
// Say ( Heike , DH-camp-1a ) ;
6058: LD_EXP 16
6062: PPUSH
6063: LD_STRING DH-camp-1a
6065: PPUSH
6066: CALL_OW 88
// wait ( 0 0$0.03 ) ;
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 67
// ComTurnUnit ( Mike , Olaf ) ;
6077: LD_EXP 19
6081: PPUSH
6082: LD_EXP 17
6086: PPUSH
6087: CALL_OW 119
// Say ( Mike , DM-camp-1a ) ;
6091: LD_EXP 19
6095: PPUSH
6096: LD_STRING DM-camp-1a
6098: PPUSH
6099: CALL_OW 88
// ComMoveXY ( Olaf , 52 , 90 ) ;
6103: LD_EXP 17
6107: PPUSH
6108: LD_INT 52
6110: PPUSH
6111: LD_INT 90
6113: PPUSH
6114: CALL_OW 111
// ComTurnUnit ( Mike , Heike ) ;
6118: LD_EXP 19
6122: PPUSH
6123: LD_EXP 16
6127: PPUSH
6128: CALL_OW 119
// Say ( Givi , DG-camp-2a ) ;
6132: LD_EXP 18
6136: PPUSH
6137: LD_STRING DG-camp-2a
6139: PPUSH
6140: CALL_OW 88
// Say ( Heike , DH-camp-2a ) ;
6144: LD_EXP 16
6148: PPUSH
6149: LD_STRING DH-camp-2a
6151: PPUSH
6152: CALL_OW 88
// Say ( Mike , DM-camp-2a ) ;
6156: LD_EXP 19
6160: PPUSH
6161: LD_STRING DM-camp-2a
6163: PPUSH
6164: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6168: LD_INT 35
6170: PPUSH
6171: CALL_OW 67
// until GetDistUnits ( Olaf , Heike ) < 10 ;
6175: LD_EXP 17
6179: PPUSH
6180: LD_EXP 16
6184: PPUSH
6185: CALL_OW 296
6189: PUSH
6190: LD_INT 10
6192: LESS
6193: IFFALSE 6168
// AddComTurnUnit ( Olaf , Heike ) ;
6195: LD_EXP 17
6199: PPUSH
6200: LD_EXP 16
6204: PPUSH
6205: CALL_OW 179
// ComTurnUnit ( Mike , Heike ) ;
6209: LD_EXP 19
6213: PPUSH
6214: LD_EXP 16
6218: PPUSH
6219: CALL_OW 119
// Say ( Olaf , DO-camp-2a ) ;
6223: LD_EXP 17
6227: PPUSH
6228: LD_STRING DO-camp-2a
6230: PPUSH
6231: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
6235: LD_EXP 16
6239: PPUSH
6240: LD_EXP 17
6244: PPUSH
6245: CALL_OW 119
// if russianSpotted then
6249: LD_EXP 9
6253: IFFALSE 6293
// begin Say ( Heike , DH-camp-2aa ) ;
6255: LD_EXP 16
6259: PPUSH
6260: LD_STRING DH-camp-2aa
6262: PPUSH
6263: CALL_OW 88
// Say ( Givi , DG-camp-2aa ) ;
6267: LD_EXP 18
6271: PPUSH
6272: LD_STRING DG-camp-2aa
6274: PPUSH
6275: CALL_OW 88
// Say ( Mike , DM-camp-2aa ) ;
6279: LD_EXP 19
6283: PPUSH
6284: LD_STRING DM-camp-2aa
6286: PPUSH
6287: CALL_OW 88
// end else
6291: GO 6317
// begin Say ( Heike , DH-camp-2ab ) ;
6293: LD_EXP 16
6297: PPUSH
6298: LD_STRING DH-camp-2ab
6300: PPUSH
6301: CALL_OW 88
// Say ( Mike , DM-camp-2ab ) ;
6305: LD_EXP 19
6309: PPUSH
6310: LD_STRING DM-camp-2ab
6312: PPUSH
6313: CALL_OW 88
// end ; Say ( Heike , DH-camp-3a ) ;
6317: LD_EXP 16
6321: PPUSH
6322: LD_STRING DH-camp-3a
6324: PPUSH
6325: CALL_OW 88
// Say ( Olaf , DO-camp-3a ) ;
6329: LD_EXP 17
6333: PPUSH
6334: LD_STRING DO-camp-3a
6336: PPUSH
6337: CALL_OW 88
// Say ( Givi , DG-camp-3a ) ;
6341: LD_EXP 18
6345: PPUSH
6346: LD_STRING DG-camp-3a
6348: PPUSH
6349: CALL_OW 88
// Say ( Heike , DH-camp-4aa ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING DH-camp-4aa
6360: PPUSH
6361: CALL_OW 88
// Say ( Mike , DM-camp-4aa ) ;
6365: LD_EXP 19
6369: PPUSH
6370: LD_STRING DM-camp-4aa
6372: PPUSH
6373: CALL_OW 88
// Say ( Olaf , DO-camp-4a ) ;
6377: LD_EXP 17
6381: PPUSH
6382: LD_STRING DO-camp-4a
6384: PPUSH
6385: CALL_OW 88
// end ; Say ( Olaf , DO-camp-3 ) ;
6389: LD_EXP 17
6393: PPUSH
6394: LD_STRING DO-camp-3
6396: PPUSH
6397: CALL_OW 88
// Say ( Olaf , DO-camp-4 ) ;
6401: LD_EXP 17
6405: PPUSH
6406: LD_STRING DO-camp-4
6408: PPUSH
6409: CALL_OW 88
// ComTurnUnit ( Givi , Olaf ) ;
6413: LD_EXP 18
6417: PPUSH
6418: LD_EXP 17
6422: PPUSH
6423: CALL_OW 119
// Say ( Givi , DG-camp-4 ) ;
6427: LD_EXP 18
6431: PPUSH
6432: LD_STRING DG-camp-4
6434: PPUSH
6435: CALL_OW 88
// ComTurnUnit ( Heike , Givi ) ;
6439: LD_EXP 16
6443: PPUSH
6444: LD_EXP 18
6448: PPUSH
6449: CALL_OW 119
// Say ( Heike , DH-camp-4 ) ;
6453: LD_EXP 16
6457: PPUSH
6458: LD_STRING DH-camp-4
6460: PPUSH
6461: CALL_OW 88
// ComTurnUnit ( [ Mike , Olaf , Givi ] , Heike ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_EXP 17
6474: PUSH
6475: LD_EXP 18
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: CALL_OW 119
// Say ( Givi , DG-camp-5 ) ;
6494: LD_EXP 18
6498: PPUSH
6499: LD_STRING DG-camp-5
6501: PPUSH
6502: CALL_OW 88
// Say ( Givi , DG-camp-6 ) ;
6506: LD_EXP 18
6510: PPUSH
6511: LD_STRING DG-camp-6
6513: PPUSH
6514: CALL_OW 88
// Say ( Heike , DH-camp-6 ) ;
6518: LD_EXP 16
6522: PPUSH
6523: LD_STRING DH-camp-6
6525: PPUSH
6526: CALL_OW 88
// Say ( Givi , DG-camp-7 ) ;
6530: LD_EXP 18
6534: PPUSH
6535: LD_STRING DG-camp-7
6537: PPUSH
6538: CALL_OW 88
// if DogTagFound then
6542: LD_EXP 6
6546: IFFALSE 6586
// begin Say ( Heike , DH-quest-1a ) ;
6548: LD_EXP 16
6552: PPUSH
6553: LD_STRING DH-quest-1a
6555: PPUSH
6556: CALL_OW 88
// Say ( Givi , DG-quest-1a ) ;
6560: LD_EXP 18
6564: PPUSH
6565: LD_STRING DG-quest-1a
6567: PPUSH
6568: CALL_OW 88
// mercenariesQuestDone := true ;
6572: LD_ADDR_EXP 11
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// end else
6584: GO 6752
// begin Say ( Heike , DH-camp-7 ) ;
6586: LD_EXP 16
6590: PPUSH
6591: LD_STRING DH-camp-7
6593: PPUSH
6594: CALL_OW 88
// if GetLives ( Heike ) < 1000 then
6598: LD_EXP 16
6602: PPUSH
6603: CALL_OW 256
6607: PUSH
6608: LD_INT 1000
6610: LESS
6611: IFFALSE 6703
// begin Say ( Olaf , DO-heal-1 ) ;
6613: LD_EXP 17
6617: PPUSH
6618: LD_STRING DO-heal-1
6620: PPUSH
6621: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
6625: LD_EXP 16
6629: PPUSH
6630: LD_INT 51
6632: PPUSH
6633: LD_INT 88
6635: PPUSH
6636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6640: LD_INT 35
6642: PPUSH
6643: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
6647: LD_EXP 16
6651: PPUSH
6652: LD_EXP 17
6656: PPUSH
6657: CALL_OW 296
6661: PUSH
6662: LD_INT 4
6664: LESS
6665: PUSH
6666: LD_EXP 16
6670: PPUSH
6671: LD_INT 51
6673: PPUSH
6674: LD_INT 88
6676: PPUSH
6677: CALL_OW 307
6681: OR
6682: IFFALSE 6640
// SetLives ( Heike , 1000 ) ;
6684: LD_EXP 16
6688: PPUSH
6689: LD_INT 1000
6691: PPUSH
6692: CALL_OW 234
// wait ( 0 0$2 ) ;
6696: LD_INT 70
6698: PPUSH
6699: CALL_OW 67
// end ; InGameOff ;
6703: CALL_OW 9
// ComTurnXY ( [ Olaf , Givi , Mike ] , 53 , 89 ) ;
6707: LD_EXP 17
6711: PUSH
6712: LD_EXP 18
6716: PUSH
6717: LD_EXP 19
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: LD_INT 53
6729: PPUSH
6730: LD_INT 89
6732: PPUSH
6733: CALL_OW 118
// ChangeMissionObjectives ( O5_proof_cont ) ;
6737: LD_STRING O5_proof_cont
6739: PPUSH
6740: CALL_OW 337
// mercenariesQuestReady := true ;
6744: LD_ADDR_EXP 10
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// end ; if not mercenariesQuestReady then
6752: LD_EXP 10
6756: NOT
6757: IFFALSE 6761
// exit ;
6759: GO 7121
// wait ( 0 0$35 ) ;
6761: LD_INT 1225
6763: PPUSH
6764: CALL_OW 67
// driver := PreparePatrolTank ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: CALL 2821 0 0
6777: ST_TO_ADDR
// if not driver then
6778: LD_VAR 0 2
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 7121
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 80
// tank := IsInUnit ( driver ) ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 310
6817: ST_TO_ADDR
// SetLives ( tank , 500 ) ;
6818: LD_VAR 0 3
6822: PPUSH
6823: LD_INT 500
6825: PPUSH
6826: CALL_OW 234
// SetLives ( driver , 450 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 450
6837: PPUSH
6838: CALL_OW 234
// ComMoveXY ( driver , 59 , 60 ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 59
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// until IsAt ( tank , 59 , 60 ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_INT 59
6871: PPUSH
6872: LD_INT 60
6874: PPUSH
6875: CALL_OW 307
6879: IFFALSE 6857
// if not See ( 1 , Heike ) then
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 16
6888: PPUSH
6889: CALL_OW 292
6893: NOT
6894: IFFALSE 7018
// begin if Difficulty < 3 then
6896: LD_OWVAR 67
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// PlaceSeeing ( 59 , 60 , 2 , 6 ) ;
6906: LD_INT 59
6908: PPUSH
6909: LD_INT 60
6911: PPUSH
6912: LD_INT 2
6914: PPUSH
6915: LD_INT 6
6917: PPUSH
6918: CALL_OW 330
// ComExitVehicle ( driver ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 121
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// AddComMoveXY ( driver , 58 , 54 ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_INT 58
6945: PPUSH
6946: LD_INT 54
6948: PPUSH
6949: CALL_OW 171
// wait ( 0 0$1 ) ;
6953: LD_INT 35
6955: PPUSH
6956: CALL_OW 67
// AddComTurnXY ( driver , 57 , 53 ) ;
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 57
6967: PPUSH
6968: LD_INT 53
6970: PPUSH
6971: CALL_OW 178
// AddComWait ( driver , 0 0$10 ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 350
6982: PPUSH
6983: CALL_OW 202
// AddComEnterUnit ( driver , tank ) ;
6987: LD_VAR 0 2
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: CALL_OW 180
// AddComMoveXY ( driver , 107 , 118 ) ;
7001: LD_VAR 0 2
7005: PPUSH
7006: LD_INT 107
7008: PPUSH
7009: LD_INT 118
7011: PPUSH
7012: CALL_OW 171
// end else
7016: GO 7033
// begin ComMoveXY ( driver , 107 , 118 ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: LD_INT 107
7025: PPUSH
7026: LD_INT 118
7028: PPUSH
7029: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// until IsAt ( tank , 107 , 118 ) or IsDead ( driver ) ;
7040: LD_VAR 0 3
7044: PPUSH
7045: LD_INT 107
7047: PPUSH
7048: LD_INT 118
7050: PPUSH
7051: CALL_OW 307
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 301
7065: OR
7066: IFFALSE 7033
// if IsDead ( driver [ 1 ] ) then
7068: LD_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 301
7081: IFFALSE 7085
// exit ;
7083: GO 7121
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7119
// RemoveUnit ( i ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 64
7117: GO 7105
7119: POP
7120: POP
// end ;
7121: PPOPN 3
7123: END
// every 0 0$1 trigger FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do
7124: LD_INT 10
7126: PPUSH
7127: LD_INT 22
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 70
7155: IFFALSE 7229
7157: GO 7159
7159: DISABLE
// begin InGameOn ;
7160: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7164: LD_EXP 17
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_EXP 18
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: LD_EXP 16
7188: PPUSH
7189: CALL_OW 119
// Say ( Mike , DM-quest-1 ) ;
7193: LD_EXP 19
7197: PPUSH
7198: LD_STRING DM-quest-1
7200: PPUSH
7201: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7205: LD_EXP 18
7209: PPUSH
7210: LD_STRING DG-quest-1
7212: PPUSH
7213: CALL_OW 88
// InGameOff ;
7217: CALL_OW 9
// mercenariesQuestDone := true ;
7221: LD_ADDR_EXP 11
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ;
7229: END
// every 0 0$1 trigger IsInArea ( Heike , campArea ) and dogTagFound and mercenariesQuestReady and not FilterUnitsInArea ( campArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) do var p ;
7230: LD_EXP 16
7234: PPUSH
7235: LD_INT 10
7237: PPUSH
7238: CALL_OW 308
7242: PUSH
7243: LD_EXP 6
7247: AND
7248: PUSH
7249: LD_EXP 10
7253: AND
7254: PUSH
7255: LD_INT 10
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: NOT
7287: AND
7288: IFFALSE 7460
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
// begin InGameOn ;
7296: CALL_OW 8
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7300: LD_EXP 17
7304: PUSH
7305: LD_EXP 19
7309: PUSH
7310: LD_EXP 18
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: PPUSH
7320: LD_EXP 16
7324: PPUSH
7325: CALL_OW 119
// ComMoveXY ( Heike , 54 , 86 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_INT 54
7336: PPUSH
7337: LD_INT 86
7339: PPUSH
7340: CALL_OW 111
// p := p + 1 ;
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 1
7356: PLUS
7357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// p := p + 1 ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: LD_INT 1
7377: PLUS
7378: ST_TO_ADDR
// until GetDistUnits ( Heike , Givi ) < 4 or p > 5 ;
7379: LD_EXP 16
7383: PPUSH
7384: LD_EXP 18
7388: PPUSH
7389: CALL_OW 296
7393: PUSH
7394: LD_INT 4
7396: LESS
7397: PUSH
7398: LD_VAR 0 1
7402: PUSH
7403: LD_INT 5
7405: GREATER
7406: OR
7407: IFFALSE 7358
// Say ( Mike , DM-quest-1 ) ;
7409: LD_EXP 19
7413: PPUSH
7414: LD_STRING DM-quest-1
7416: PPUSH
7417: CALL_OW 88
// Say ( Givi , DG-quest-1 ) ;
7421: LD_EXP 18
7425: PPUSH
7426: LD_STRING DG-quest-1
7428: PPUSH
7429: CALL_OW 88
// ComMoveXY ( Heike , 55 , 87 ) ;
7433: LD_EXP 16
7437: PPUSH
7438: LD_INT 55
7440: PPUSH
7441: LD_INT 87
7443: PPUSH
7444: CALL_OW 111
// InGameOff ;
7448: CALL_OW 9
// mercenariesQuestDone := true ;
7452: LD_ADDR_EXP 11
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// end ;
7460: PPOPN 1
7462: END
// every 0 0$1 trigger Heike in FilterAllUnits ( [ f_driving ] ) do
7463: LD_EXP 16
7467: PUSH
7468: LD_INT 55
7470: PUSH
7471: EMPTY
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: IN
7479: IFFALSE 7519
7481: GO 7483
7483: DISABLE
// begin if Difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7507
// RemoveSeeing ( 59 , 60 , 2 ) ;
7494: LD_INT 59
7496: PPUSH
7497: LD_INT 60
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: CALL_OW 331
// Say ( Heike , DH-driver ) ;
7507: LD_EXP 16
7511: PPUSH
7512: LD_STRING DH-driver
7514: PPUSH
7515: CALL_OW 88
// end ;
7519: END
// every 0 0$1 trigger mercenariesQuestDone do
7520: LD_EXP 11
7524: IFFALSE 8012
7526: GO 7528
7528: DISABLE
// begin if mercenariesQuestReady then
7529: LD_EXP 10
7533: IFFALSE 7542
// ChangeMissionObjectives ( O5_proof_cont_out ) ;
7535: LD_STRING O5_proof_cont_out
7537: PPUSH
7538: CALL_OW 337
// InGameOn ;
7542: CALL_OW 8
// if IsInUnit ( Heike ) then
7546: LD_EXP 16
7550: PPUSH
7551: CALL_OW 310
7555: IFFALSE 7566
// ComExitVehicle ( Heike ) ;
7557: LD_EXP 16
7561: PPUSH
7562: CALL_OW 121
// wait ( 3 ) ;
7566: LD_INT 3
7568: PPUSH
7569: CALL_OW 67
// AddComTurnUnit ( Heike , Givi ) ;
7573: LD_EXP 16
7577: PPUSH
7578: LD_EXP 18
7582: PPUSH
7583: CALL_OW 179
// ComTurnUnit ( [ Olaf , Mike , Givi ] , Heike ) ;
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 19
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PPUSH
7607: LD_EXP 16
7611: PPUSH
7612: CALL_OW 119
// Say ( Heike , DH-quest-done-1 ) ;
7616: LD_EXP 16
7620: PPUSH
7621: LD_STRING DH-quest-done-1
7623: PPUSH
7624: CALL_OW 88
// Say ( Mike , DM-quest-done-1 ) ;
7628: LD_EXP 19
7632: PPUSH
7633: LD_STRING DM-quest-done-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Givi , DG-quest-done-1 ) ;
7640: LD_EXP 18
7644: PPUSH
7645: LD_STRING DG-quest-done-1
7647: PPUSH
7648: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7652: LD_EXP 16
7656: PPUSH
7657: LD_EXP 17
7661: PPUSH
7662: CALL_OW 119
// Say ( Heike , DH-quest-done-2 ) ;
7666: LD_EXP 16
7670: PPUSH
7671: LD_STRING DH-quest-done-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Olaf , DO-quest-done-2 ) ;
7678: LD_EXP 17
7682: PPUSH
7683: LD_STRING DO-quest-done-2
7685: PPUSH
7686: CALL_OW 88
// Say ( Olaf , DO-quest-done-3 ) ;
7690: LD_EXP 17
7694: PPUSH
7695: LD_STRING DO-quest-done-3
7697: PPUSH
7698: CALL_OW 88
// ComMoveXY ( Givi , 51 , 90 ) ;
7702: LD_EXP 18
7706: PPUSH
7707: LD_INT 51
7709: PPUSH
7710: LD_INT 90
7712: PPUSH
7713: CALL_OW 111
// AddComTurnXY ( Givi , 50 , 89 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_INT 50
7724: PPUSH
7725: LD_INT 89
7727: PPUSH
7728: CALL_OW 178
// ComTurnUnit ( Heike , Givi ) ;
7732: LD_EXP 16
7736: PPUSH
7737: LD_EXP 18
7741: PPUSH
7742: CALL_OW 119
// Say ( Givi , DG-quest-done-4 ) ;
7746: LD_EXP 18
7750: PPUSH
7751: LD_STRING DG-quest-done-4
7753: PPUSH
7754: CALL_OW 88
// ComTurnUnit ( Givi , Heike ) ;
7758: LD_EXP 18
7762: PPUSH
7763: LD_EXP 16
7767: PPUSH
7768: CALL_OW 119
// if GetLives ( Heike ) < 1000 then
7772: LD_EXP 16
7776: PPUSH
7777: CALL_OW 256
7781: PUSH
7782: LD_INT 1000
7784: LESS
7785: IFFALSE 7877
// begin Say ( Olaf , DO-heal-1 ) ;
7787: LD_EXP 17
7791: PPUSH
7792: LD_STRING DO-heal-1
7794: PPUSH
7795: CALL_OW 88
// ComMoveXY ( Heike , 51 , 88 ) ;
7799: LD_EXP 16
7803: PPUSH
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 88
7809: PPUSH
7810: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 4 or IsAt ( Heike , 51 , 88 ) ;
7821: LD_EXP 16
7825: PPUSH
7826: LD_EXP 17
7830: PPUSH
7831: CALL_OW 296
7835: PUSH
7836: LD_INT 4
7838: LESS
7839: PUSH
7840: LD_EXP 16
7844: PPUSH
7845: LD_INT 51
7847: PPUSH
7848: LD_INT 88
7850: PPUSH
7851: CALL_OW 307
7855: OR
7856: IFFALSE 7814
// SetLives ( Heike , 1000 ) ;
7858: LD_EXP 16
7862: PPUSH
7863: LD_INT 1000
7865: PPUSH
7866: CALL_OW 234
// wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// end ; Say ( Heike , DH-quest-done-4 ) ;
7877: LD_EXP 16
7881: PPUSH
7882: LD_STRING DH-quest-done-4
7884: PPUSH
7885: CALL_OW 88
// Say ( Olaf , DO-quest-done-4 ) ;
7889: LD_EXP 17
7893: PPUSH
7894: LD_STRING DO-quest-done-4
7896: PPUSH
7897: CALL_OW 88
// ComTurnUnit ( Heike , Olaf ) ;
7901: LD_EXP 16
7905: PPUSH
7906: LD_EXP 17
7910: PPUSH
7911: CALL_OW 119
// Say ( Heike , DH-quest-done-5 ) ;
7915: LD_EXP 16
7919: PPUSH
7920: LD_STRING DH-quest-done-5
7922: PPUSH
7923: CALL_OW 88
// InGameOff ;
7927: CALL_OW 9
// ChangeMissionObjectives ( O6_end_cont ) ;
7931: LD_STRING O6_end_cont
7933: PPUSH
7934: CALL_OW 337
// SetSide ( Givi , 2 ) ;
7938: LD_EXP 18
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 235
// SetSide ( Mike , 2 ) ;
7950: LD_EXP 19
7954: PPUSH
7955: LD_INT 2
7957: PPUSH
7958: CALL_OW 235
// SetTech ( tech_explos , 2 , state_researched ) ;
7962: LD_INT 42
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 322
// ComTurnXY ( Olaf , 53 , 89 ) ;
7975: LD_EXP 17
7979: PPUSH
7980: LD_INT 53
7982: PPUSH
7983: LD_INT 89
7985: PPUSH
7986: CALL_OW 118
// lastObjectiveActive := true ;
7990: LD_ADDR_EXP 12
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// SetAreaMapShow ( escapeEast , 1 ) ;
7998: LD_INT 1
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: CALL_OW 424
// PreparePrison ;
8008: CALL 1164 0 0
// end ;
8012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , northDep , 4 ] ] ) do var i , tmp ;
8013: LD_INT 22
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 91
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: IFFALSE 8203
8047: GO 8049
8049: DISABLE
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// begin wait ( [ 0 0$7 , 0 0$06 , 0 0$06 , 0 0$05 ] [ Difficulty ] ) ;
8054: LD_INT 245
8056: PUSH
8057: LD_INT 210
8059: PUSH
8060: LD_INT 210
8062: PUSH
8063: LD_INT 175
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: LD_OWVAR 67
8076: ARRAY
8077: PPUSH
8078: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8082: LD_ADDR_VAR 0 2
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 54
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: ST_TO_ADDR
// if not tmp then
8123: LD_VAR 0 2
8127: NOT
8128: IFFALSE 8132
// exit ;
8130: GO 8203
// for i in tmp do
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_VAR 0 2
8141: PUSH
8142: FOR_IN
8143: IFFALSE 8171
// begin ComExitBuilding ( i ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 122
// AddComAgressiveMove ( i , 121 , 22 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 121
8161: PPUSH
8162: LD_INT 22
8164: PPUSH
8165: CALL_OW 174
// end ;
8169: GO 8142
8171: POP
8172: POP
// ComAgressiveMove ( russianForces , 121 , 22 ) ;
8173: LD_EXP 23
8177: PPUSH
8178: LD_INT 121
8180: PPUSH
8181: LD_INT 22
8183: PPUSH
8184: CALL_OW 114
// ComAgressiveMove ( russianTank , 121 , 22 ) ;
8188: LD_EXP 24
8192: PPUSH
8193: LD_INT 121
8195: PPUSH
8196: LD_INT 22
8198: PPUSH
8199: CALL_OW 114
// end ;
8203: PPOPN 2
8205: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , southDep , 4 ] ] ) do var i , tmp ;
8206: LD_INT 22
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 91
8218: PUSH
8219: LD_INT 8
8221: PUSH
8222: LD_INT 4
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 69
8238: IFFALSE 8396
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
// begin wait ( [ 0 0$9 , 0 0$08 , 0 0$07 , 0 0$06 ] [ Difficulty ] ) ;
8247: LD_INT 315
8249: PUSH
8250: LD_INT 280
8252: PUSH
8253: LD_INT 245
8255: PUSH
8256: LD_INT 210
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: LD_OWVAR 67
8269: ARRAY
8270: PPUSH
8271: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 54
8302: PUSH
8303: EMPTY
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: ST_TO_ADDR
// if not tmp then
8316: LD_VAR 0 2
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8396
// for i in tmp do
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_VAR 0 2
8334: PUSH
8335: FOR_IN
8336: IFFALSE 8364
// begin ComExitBuilding ( i ) ;
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 122
// AddComAgressiveMove ( i , 142 , 71 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 142
8354: PPUSH
8355: LD_INT 71
8357: PPUSH
8358: CALL_OW 174
// end ;
8362: GO 8335
8364: POP
8365: POP
// ComAgressiveMove ( russianForces , 142 , 71 ) ;
8366: LD_EXP 23
8370: PPUSH
8371: LD_INT 142
8373: PPUSH
8374: LD_INT 71
8376: PPUSH
8377: CALL_OW 114
// ComAgressiveMove ( russianTank , 142 , 71 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_INT 142
8388: PPUSH
8389: LD_INT 71
8391: PPUSH
8392: CALL_OW 114
// end ;
8396: PPOPN 2
8398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) and IsOk ( Olaf ) do
8399: LD_INT 22
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 58
8421: PUSH
8422: EMPTY
8423: LIST
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 1000
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 91
8444: PUSH
8445: LD_EXP 17
8449: PUSH
8450: LD_INT 8
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PUSH
8470: LD_EXP 17
8474: PPUSH
8475: CALL_OW 302
8479: AND
8480: IFFALSE 8594
8482: GO 8484
8484: DISABLE
// begin enable ;
8485: ENABLE
// ComRepairVehicle ( Olaf , FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , Olaf , 8 ] ] ) [ 1 ] ) ;
8486: LD_EXP 17
8490: PPUSH
8491: LD_INT 22
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 58
8513: PUSH
8514: EMPTY
8515: LIST
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1000
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 91
8536: PUSH
8537: LD_EXP 17
8541: PUSH
8542: LD_INT 8
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 69
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: CALL_OW 129
// AddComMoveXY ( Olaf , 52 , 90 ) ;
8570: LD_EXP 17
8574: PPUSH
8575: LD_INT 52
8577: PPUSH
8578: LD_INT 90
8580: PPUSH
8581: CALL_OW 171
// AddComHold ( Olaf ) ;
8585: LD_EXP 17
8589: PPUSH
8590: CALL_OW 200
// end ;
8594: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( northDep ) and Difficulty = 1 and not prisonFound do
8595: LD_EXP 12
8599: PUSH
8600: LD_INT 2
8602: PPUSH
8603: CALL_OW 302
8607: NOT
8608: AND
8609: PUSH
8610: LD_OWVAR 67
8614: PUSH
8615: LD_INT 1
8617: EQUAL
8618: AND
8619: PUSH
8620: LD_EXP 13
8624: NOT
8625: AND
8626: IFFALSE 8643
8628: GO 8630
8630: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8631: LD_EXP 16
8635: PPUSH
8636: LD_STRING DH-prison-missing
8638: PPUSH
8639: CALL_OW 88
// end ;
8643: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( southDep ) and Difficulty > 1 and not prisonFound do
8644: LD_EXP 12
8648: PUSH
8649: LD_INT 8
8651: PPUSH
8652: CALL_OW 302
8656: NOT
8657: AND
8658: PUSH
8659: LD_OWVAR 67
8663: PUSH
8664: LD_INT 1
8666: GREATER
8667: AND
8668: PUSH
8669: LD_EXP 13
8673: NOT
8674: AND
8675: IFFALSE 8692
8677: GO 8679
8679: DISABLE
// begin Say ( Heike , DH-prison-missing ) ;
8680: LD_EXP 16
8684: PPUSH
8685: LD_STRING DH-prison-missing
8687: PPUSH
8688: CALL_OW 88
// end ;
8692: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( workshop ) and not prisonFound do
8693: LD_EXP 12
8697: PUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 302
8705: NOT
8706: AND
8707: PUSH
8708: LD_EXP 13
8712: NOT
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8719: LD_EXP 16
8723: PPUSH
8724: LD_STRING DH-prison-missing-a
8726: PPUSH
8727: CALL_OW 88
// end ;
8731: END
// every 0 0$1 trigger lastObjectiveActive and not IsOk ( lab ) and not prisonFound do
8732: LD_EXP 12
8736: PUSH
8737: LD_INT 10
8739: PPUSH
8740: CALL_OW 302
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 13
8751: NOT
8752: AND
8753: IFFALSE 8770
8755: GO 8757
8757: DISABLE
// begin Say ( Heike , DH-prison-missing-a ) ;
8758: LD_EXP 16
8762: PPUSH
8763: LD_STRING DH-prison-missing-a
8765: PPUSH
8766: CALL_OW 88
// end ;
8770: END
// every 0 0$1 trigger not prisonFound and lastObjectiveActive and See ( 2 , Kamil ) do
8771: LD_EXP 13
8775: NOT
8776: PUSH
8777: LD_EXP 12
8781: AND
8782: PUSH
8783: LD_INT 2
8785: PPUSH
8786: LD_EXP 20
8790: PPUSH
8791: CALL_OW 292
8795: AND
8796: IFFALSE 8883
8798: GO 8800
8800: DISABLE
// begin ComTurnUnit ( Kamil , Heike ) ;
8801: LD_EXP 20
8805: PPUSH
8806: LD_EXP 16
8810: PPUSH
8811: CALL_OW 119
// DialogueOn ;
8815: CALL_OW 6
// CenterNowOnUnits ( Kamil ) ;
8819: LD_EXP 20
8823: PPUSH
8824: CALL_OW 87
// Say ( Kamil , DK-prison-found ) ;
8828: LD_EXP 20
8832: PPUSH
8833: LD_STRING DK-prison-found
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-prison-found ) ;
8840: LD_EXP 16
8844: PPUSH
8845: LD_STRING DH-prison-found
8847: PPUSH
8848: CALL_OW 88
// DialogueOff ;
8852: CALL_OW 7
// SetSide ( Kamil , 2 ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 235
// prisonFound := true ;
8868: LD_ADDR_EXP 13
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// ChangeMissionObjectives ( O6_prison_out ) ;
8876: LD_STRING O6_prison_out
8878: PPUSH
8879: CALL_OW 337
// end ;
8883: END
// every 0 0$1 trigger GetLives ( Heike ) < 500 do
8884: LD_EXP 16
8888: PPUSH
8889: CALL_OW 256
8893: PUSH
8894: LD_INT 500
8896: LESS
8897: IFFALSE 8910
8899: GO 8901
8901: DISABLE
// heikeHurt := true ;
8902: LD_ADDR_EXP 14
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
8910: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do var i , tmp , un ;
8911: LD_INT 22
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: IFFALSE 9255
8941: GO 8943
8943: DISABLE
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
// begin uc_side := 3 ;
8949: LD_ADDR_OWVAR 20
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// uc_nation := 3 ;
8957: LD_ADDR_OWVAR 21
8961: PUSH
8962: LD_INT 3
8964: ST_TO_ADDR
// tmp := [ ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: EMPTY
8971: ST_TO_ADDR
// for i := 1 to 5 do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_INT 5
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9094
// begin PrepareHuman ( false , 1 , 4 ) ;
8988: LD_INT 0
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 4
8996: PPUSH
8997: CALL_OW 380
// un := CreateHuman ;
9001: LD_ADDR_VAR 0 3
9005: PUSH
9006: CALL_OW 44
9010: ST_TO_ADDR
// SetDir ( un , 4 ) ;
9011: LD_VAR 0 3
9015: PPUSH
9016: LD_INT 4
9018: PPUSH
9019: CALL_OW 233
// PlaceUnitXY ( un , 158 , 80 , false ) ;
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 158
9030: PPUSH
9031: LD_INT 80
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: CALL_OW 48
// ComMoveXY ( un , 147 , 75 ) ;
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 147
9048: PPUSH
9049: LD_INT 75
9051: PPUSH
9052: CALL_OW 111
// wait ( 0 0$1 ) ;
9056: LD_INT 35
9058: PPUSH
9059: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
9063: LD_ADDR_VAR 0 2
9067: PUSH
9068: LD_VAR 0 2
9072: PPUSH
9073: LD_VAR 0 2
9077: PUSH
9078: LD_INT 1
9080: PLUS
9081: PPUSH
9082: LD_VAR 0 3
9086: PPUSH
9087: CALL_OW 1
9091: ST_TO_ADDR
// end ;
9092: GO 8985
9094: POP
9095: POP
// repeat wait ( 0 0$1 ) ;
9096: LD_INT 35
9098: PPUSH
9099: CALL_OW 67
// for i in tmp do
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9235
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 74
9145: ST_TO_ADDR
// if HexInfo ( GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: CALL_OW 250
9159: PPUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: CALL_OW 251
9173: PPUSH
9174: CALL_OW 428
9178: IFFALSE 9219
// ComAgressiveMove ( i , GetX ( un [ 1 ] ) , GetY ( un [ 1 ] ) ) else
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 250
9198: PPUSH
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 1
9206: ARRAY
9207: PPUSH
9208: CALL_OW 251
9212: PPUSH
9213: CALL_OW 114
9217: GO 9233
// ComAttackUnit ( i , Heike ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_EXP 16
9228: PPUSH
9229: CALL_OW 115
// end ;
9233: GO 9113
9235: POP
9236: POP
// until IsDead ( Heike ) or not tmp ;
9237: LD_EXP 16
9241: PPUSH
9242: CALL_OW 301
9246: PUSH
9247: LD_VAR 0 2
9251: NOT
9252: OR
9253: IFFALSE 9096
// end ;
9255: PPOPN 3
9257: END
// every 0 0$1 trigger lastObjectiveActive and IsOk ( Heike ) and FilterUnitsExceptArea ( escapeEast , [ [ f_type , unit_human ] , [ f_side , 2 ] , [ f_ok ] ] ) = 0 do var tmp ;
9258: LD_EXP 12
9262: PUSH
9263: LD_EXP 16
9267: PPUSH
9268: CALL_OW 302
9272: AND
9273: PUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 22
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 50
9299: PUSH
9300: EMPTY
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 71
9312: PUSH
9313: LD_INT 0
9315: EQUAL
9316: AND
9317: IFFALSE 9668
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin if not heikeHurt then
9325: LD_EXP 14
9329: NOT
9330: IFFALSE 9339
// SetAchievement ( ACH_INVINCIBLE ) ;
9332: LD_STRING ACH_INVINCIBLE
9334: PPUSH
9335: CALL_OW 543
// ToLua ( enableBioCharacter(BIO_GIVI) ) ;
9339: LD_STRING enableBioCharacter(BIO_GIVI)
9341: PPUSH
9342: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_MIKE) ) ;
9346: LD_STRING enableBioCharacter(BIO_MIKE)
9348: PPUSH
9349: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_OLAF) ) ;
9353: LD_STRING enableBioCharacter(BIO_OLAF)
9355: PPUSH
9356: CALL_OW 559
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9360: LD_ADDR_VAR 0 1
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 50
9387: PUSH
9388: EMPTY
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 69
9400: ST_TO_ADDR
// if prisonFound then
9401: LD_EXP 13
9405: IFFALSE 9419
// AddMedal ( med1 , 1 ) else
9407: LD_STRING med1
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 101
9417: GO 9430
// AddMedal ( med1 , - 1 ) ;
9419: LD_STRING med1
9421: PPUSH
9422: LD_INT 1
9424: NEG
9425: PPUSH
9426: CALL_OW 101
// if ( tmp < 3 and not prisonFound ) or ( tmp < 4 and prisonFound ) then
9430: LD_VAR 0 1
9434: PUSH
9435: LD_INT 3
9437: LESS
9438: PUSH
9439: LD_EXP 13
9443: NOT
9444: AND
9445: PUSH
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 4
9453: LESS
9454: PUSH
9455: LD_EXP 13
9459: AND
9460: OR
9461: IFFALSE 9476
// AddMedal ( med2 , - 1 ) else
9463: LD_STRING med2
9465: PPUSH
9466: LD_INT 1
9468: NEG
9469: PPUSH
9470: CALL_OW 101
9474: GO 9486
// AddMedal ( med2 , 1 ) ;
9476: LD_STRING med2
9478: PPUSH
9479: LD_INT 1
9481: PPUSH
9482: CALL_OW 101
// if prisonFound and johnnySaved and tmp >= 4 then
9486: LD_EXP 13
9490: PUSH
9491: LD_EXP 4
9495: AND
9496: PUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 4
9504: GREATEREQUAL
9505: AND
9506: IFFALSE 9520
// AddMedal ( med3 , 1 ) else
9508: LD_STRING med3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 101
9518: GO 9531
// AddMedal ( med3 , - 1 ) ;
9520: LD_STRING med3
9522: PPUSH
9523: LD_INT 1
9525: NEG
9526: PPUSH
9527: CALL_OW 101
// GiveMedals ( MAIN ) ;
9531: LD_STRING MAIN
9533: PPUSH
9534: CALL_OW 102
// RewardPeople ( tmp ) ;
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 43
// SaveCharacters ( Heike , 01_Heike ) ;
9547: LD_EXP 16
9551: PPUSH
9552: LD_STRING 01_Heike
9554: PPUSH
9555: CALL_OW 38
// if IsOk ( Givi ) and Givi in tmp then
9559: LD_EXP 18
9563: PPUSH
9564: CALL_OW 302
9568: PUSH
9569: LD_EXP 18
9573: PUSH
9574: LD_VAR 0 1
9578: IN
9579: AND
9580: IFFALSE 9594
// SaveCharacters ( Givi , 01_Givi ) ;
9582: LD_EXP 18
9586: PPUSH
9587: LD_STRING 01_Givi
9589: PPUSH
9590: CALL_OW 38
// if IsOk ( Mike ) and Mike in tmp then
9594: LD_EXP 19
9598: PPUSH
9599: CALL_OW 302
9603: PUSH
9604: LD_EXP 19
9608: PUSH
9609: LD_VAR 0 1
9613: IN
9614: AND
9615: IFFALSE 9629
// SaveCharacters ( Mike , 01_Mike ) ;
9617: LD_EXP 19
9621: PPUSH
9622: LD_STRING 01_Mike
9624: PPUSH
9625: CALL_OW 38
// if IsOk ( Kamil ) and Kamil in tmp then
9629: LD_EXP 20
9633: PPUSH
9634: CALL_OW 302
9638: PUSH
9639: LD_EXP 20
9643: PUSH
9644: LD_VAR 0 1
9648: IN
9649: AND
9650: IFFALSE 9664
// SaveCharacters ( Kamil , 01_Kamil ) ;
9652: LD_EXP 20
9656: PPUSH
9657: LD_STRING 01_Kamil
9659: PPUSH
9660: CALL_OW 38
// YouWin ;
9664: CALL_OW 103
// end ; end_of_file
9668: PPOPN 1
9670: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9671: LD_VAR 0 1
9675: PUSH
9676: LD_EXP 16
9680: EQUAL
9681: IFFALSE 9690
// YouLost ( Heike ) ;
9683: LD_STRING Heike
9685: PPUSH
9686: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_INT 22
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 25
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PPUSH
9719: CALL_OW 69
9723: IN
9724: IFFALSE 9830
// begin if un in russianPatrol then
9726: LD_VAR 0 1
9730: PUSH
9731: LD_EXP 21
9735: IN
9736: IFFALSE 9754
// russianPatrol := russianPatrol diff un ;
9738: LD_ADDR_EXP 21
9742: PUSH
9743: LD_EXP 21
9747: PUSH
9748: LD_VAR 0 1
9752: DIFF
9753: ST_TO_ADDR
// if un in russianForestPatrol then
9754: LD_VAR 0 1
9758: PUSH
9759: LD_EXP 22
9763: IN
9764: IFFALSE 9782
// russianForestPatrol := russianForestPatrol diff un ;
9766: LD_ADDR_EXP 22
9770: PUSH
9771: LD_EXP 22
9775: PUSH
9776: LD_VAR 0 1
9780: DIFF
9781: ST_TO_ADDR
// dogTag := Replace ( dogTag , dogTag + 1 , [ GetX ( un ) , GetY ( un ) ] ) ;
9782: LD_ADDR_EXP 5
9786: PUSH
9787: LD_EXP 5
9791: PPUSH
9792: LD_EXP 5
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: PPUSH
9801: LD_VAR 0 1
9805: PPUSH
9806: CALL_OW 250
9810: PUSH
9811: LD_VAR 0 1
9815: PPUSH
9816: CALL_OW 251
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 1
9829: ST_TO_ADDR
// end ; end ;
9830: PPOPN 1
9832: END
// on UnitGoesToRed ( un ) do begin if un = Heike then
9833: LD_VAR 0 1
9837: PUSH
9838: LD_EXP 16
9842: EQUAL
9843: IFFALSE 9852
// YouLost ( Heike ) ;
9845: LD_STRING Heike
9847: PPUSH
9848: CALL_OW 104
// if un = Olaf then
9852: LD_VAR 0 1
9856: PUSH
9857: LD_EXP 17
9861: EQUAL
9862: IFFALSE 9871
// YouLost ( Olaf ) ;
9864: LD_STRING Olaf
9866: PPUSH
9867: CALL_OW 104
// end ;
9871: PPOPN 1
9873: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 2
9881: EQUAL
9882: PUSH
9883: LD_VAR 0 2
9887: PUSH
9888: LD_INT 5
9890: EQUAL
9891: AND
9892: IFFALSE 9901
// YouLost ( FriendlyFire ) ;
9894: LD_STRING FriendlyFire
9896: PPUSH
9897: CALL_OW 104
// end ; end_of_file
9901: PPOPN 2
9903: END
// every 0 0$1 do
9904: GO 9906
9906: DISABLE
// begin enable ;
9907: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9908: LD_STRING updateTimer(
9910: PUSH
9911: LD_OWVAR 1
9915: STR
9916: PUSH
9917: LD_STRING );
9919: STR
9920: PPUSH
9921: CALL_OW 559
// end ;
9925: END
// export function SOS_MapStart ( ) ; begin
9926: LD_INT 0
9928: PPUSH
// if streamModeActive then
9929: LD_EXP 26
9933: IFFALSE 9942
// DefineStreamItems ( true ) ;
9935: LD_INT 1
9937: PPUSH
9938: CALL 11596 0 1
// UpdateFactoryWaypoints ( ) ;
9942: CALL 24457 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9946: CALL 24714 0 0
// end ;
9950: LD_VAR 0 1
9954: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9955: LD_INT 0
9957: PPUSH
// if p2 = 100 then
9958: LD_VAR 0 2
9962: PUSH
9963: LD_INT 100
9965: EQUAL
9966: IFFALSE 10969
// begin if not StreamModeActive then
9968: LD_EXP 26
9972: NOT
9973: IFFALSE 9983
// StreamModeActive := true ;
9975: LD_ADDR_EXP 26
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// if p3 = 0 then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 0
9990: EQUAL
9991: IFFALSE 9997
// InitStreamMode ;
9993: CALL 11132 0 0
// if p3 = 1 then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: EQUAL
10005: IFFALSE 10015
// sRocket := true ;
10007: LD_ADDR_EXP 31
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// if p3 = 2 then
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 2
10022: EQUAL
10023: IFFALSE 10033
// sSpeed := true ;
10025: LD_ADDR_EXP 30
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// if p3 = 3 then
10033: LD_VAR 0 3
10037: PUSH
10038: LD_INT 3
10040: EQUAL
10041: IFFALSE 10051
// sEngine := true ;
10043: LD_ADDR_EXP 32
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// if p3 = 4 then
10051: LD_VAR 0 3
10055: PUSH
10056: LD_INT 4
10058: EQUAL
10059: IFFALSE 10069
// sSpec := true ;
10061: LD_ADDR_EXP 29
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// if p3 = 5 then
10069: LD_VAR 0 3
10073: PUSH
10074: LD_INT 5
10076: EQUAL
10077: IFFALSE 10087
// sLevel := true ;
10079: LD_ADDR_EXP 33
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// if p3 = 6 then
10087: LD_VAR 0 3
10091: PUSH
10092: LD_INT 6
10094: EQUAL
10095: IFFALSE 10105
// sArmoury := true ;
10097: LD_ADDR_EXP 34
10101: PUSH
10102: LD_INT 1
10104: ST_TO_ADDR
// if p3 = 7 then
10105: LD_VAR 0 3
10109: PUSH
10110: LD_INT 7
10112: EQUAL
10113: IFFALSE 10123
// sRadar := true ;
10115: LD_ADDR_EXP 35
10119: PUSH
10120: LD_INT 1
10122: ST_TO_ADDR
// if p3 = 8 then
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 8
10130: EQUAL
10131: IFFALSE 10141
// sBunker := true ;
10133: LD_ADDR_EXP 36
10137: PUSH
10138: LD_INT 1
10140: ST_TO_ADDR
// if p3 = 9 then
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 9
10148: EQUAL
10149: IFFALSE 10159
// sHack := true ;
10151: LD_ADDR_EXP 37
10155: PUSH
10156: LD_INT 1
10158: ST_TO_ADDR
// if p3 = 10 then
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 10
10166: EQUAL
10167: IFFALSE 10177
// sFire := true ;
10169: LD_ADDR_EXP 38
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
// if p3 = 11 then
10177: LD_VAR 0 3
10181: PUSH
10182: LD_INT 11
10184: EQUAL
10185: IFFALSE 10195
// sRefresh := true ;
10187: LD_ADDR_EXP 39
10191: PUSH
10192: LD_INT 1
10194: ST_TO_ADDR
// if p3 = 12 then
10195: LD_VAR 0 3
10199: PUSH
10200: LD_INT 12
10202: EQUAL
10203: IFFALSE 10213
// sExp := true ;
10205: LD_ADDR_EXP 40
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// if p3 = 13 then
10213: LD_VAR 0 3
10217: PUSH
10218: LD_INT 13
10220: EQUAL
10221: IFFALSE 10231
// sDepot := true ;
10223: LD_ADDR_EXP 41
10227: PUSH
10228: LD_INT 1
10230: ST_TO_ADDR
// if p3 = 14 then
10231: LD_VAR 0 3
10235: PUSH
10236: LD_INT 14
10238: EQUAL
10239: IFFALSE 10249
// sFlag := true ;
10241: LD_ADDR_EXP 42
10245: PUSH
10246: LD_INT 1
10248: ST_TO_ADDR
// if p3 = 15 then
10249: LD_VAR 0 3
10253: PUSH
10254: LD_INT 15
10256: EQUAL
10257: IFFALSE 10267
// sKamikadze := true ;
10259: LD_ADDR_EXP 50
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
// if p3 = 16 then
10267: LD_VAR 0 3
10271: PUSH
10272: LD_INT 16
10274: EQUAL
10275: IFFALSE 10285
// sTroll := true ;
10277: LD_ADDR_EXP 51
10281: PUSH
10282: LD_INT 1
10284: ST_TO_ADDR
// if p3 = 17 then
10285: LD_VAR 0 3
10289: PUSH
10290: LD_INT 17
10292: EQUAL
10293: IFFALSE 10303
// sSlow := true ;
10295: LD_ADDR_EXP 52
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// if p3 = 18 then
10303: LD_VAR 0 3
10307: PUSH
10308: LD_INT 18
10310: EQUAL
10311: IFFALSE 10321
// sLack := true ;
10313: LD_ADDR_EXP 53
10317: PUSH
10318: LD_INT 1
10320: ST_TO_ADDR
// if p3 = 19 then
10321: LD_VAR 0 3
10325: PUSH
10326: LD_INT 19
10328: EQUAL
10329: IFFALSE 10339
// sTank := true ;
10331: LD_ADDR_EXP 55
10335: PUSH
10336: LD_INT 1
10338: ST_TO_ADDR
// if p3 = 20 then
10339: LD_VAR 0 3
10343: PUSH
10344: LD_INT 20
10346: EQUAL
10347: IFFALSE 10357
// sRemote := true ;
10349: LD_ADDR_EXP 56
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// if p3 = 21 then
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 21
10364: EQUAL
10365: IFFALSE 10375
// sPowell := true ;
10367: LD_ADDR_EXP 57
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// if p3 = 22 then
10375: LD_VAR 0 3
10379: PUSH
10380: LD_INT 22
10382: EQUAL
10383: IFFALSE 10393
// sTeleport := true ;
10385: LD_ADDR_EXP 60
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// if p3 = 23 then
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 23
10400: EQUAL
10401: IFFALSE 10411
// sOilTower := true ;
10403: LD_ADDR_EXP 62
10407: PUSH
10408: LD_INT 1
10410: ST_TO_ADDR
// if p3 = 24 then
10411: LD_VAR 0 3
10415: PUSH
10416: LD_INT 24
10418: EQUAL
10419: IFFALSE 10429
// sShovel := true ;
10421: LD_ADDR_EXP 63
10425: PUSH
10426: LD_INT 1
10428: ST_TO_ADDR
// if p3 = 25 then
10429: LD_VAR 0 3
10433: PUSH
10434: LD_INT 25
10436: EQUAL
10437: IFFALSE 10447
// sSheik := true ;
10439: LD_ADDR_EXP 64
10443: PUSH
10444: LD_INT 1
10446: ST_TO_ADDR
// if p3 = 26 then
10447: LD_VAR 0 3
10451: PUSH
10452: LD_INT 26
10454: EQUAL
10455: IFFALSE 10465
// sEarthquake := true ;
10457: LD_ADDR_EXP 66
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
// if p3 = 27 then
10465: LD_VAR 0 3
10469: PUSH
10470: LD_INT 27
10472: EQUAL
10473: IFFALSE 10483
// sAI := true ;
10475: LD_ADDR_EXP 67
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// if p3 = 28 then
10483: LD_VAR 0 3
10487: PUSH
10488: LD_INT 28
10490: EQUAL
10491: IFFALSE 10501
// sCargo := true ;
10493: LD_ADDR_EXP 70
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// if p3 = 29 then
10501: LD_VAR 0 3
10505: PUSH
10506: LD_INT 29
10508: EQUAL
10509: IFFALSE 10519
// sDLaser := true ;
10511: LD_ADDR_EXP 71
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// if p3 = 30 then
10519: LD_VAR 0 3
10523: PUSH
10524: LD_INT 30
10526: EQUAL
10527: IFFALSE 10537
// sExchange := true ;
10529: LD_ADDR_EXP 72
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// if p3 = 31 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_INT 31
10544: EQUAL
10545: IFFALSE 10555
// sFac := true ;
10547: LD_ADDR_EXP 73
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// if p3 = 32 then
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 32
10562: EQUAL
10563: IFFALSE 10573
// sPower := true ;
10565: LD_ADDR_EXP 74
10569: PUSH
10570: LD_INT 1
10572: ST_TO_ADDR
// if p3 = 33 then
10573: LD_VAR 0 3
10577: PUSH
10578: LD_INT 33
10580: EQUAL
10581: IFFALSE 10591
// sRandom := true ;
10583: LD_ADDR_EXP 75
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// if p3 = 34 then
10591: LD_VAR 0 3
10595: PUSH
10596: LD_INT 34
10598: EQUAL
10599: IFFALSE 10609
// sShield := true ;
10601: LD_ADDR_EXP 76
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// if p3 = 35 then
10609: LD_VAR 0 3
10613: PUSH
10614: LD_INT 35
10616: EQUAL
10617: IFFALSE 10627
// sTime := true ;
10619: LD_ADDR_EXP 77
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// if p3 = 36 then
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 36
10634: EQUAL
10635: IFFALSE 10645
// sTools := true ;
10637: LD_ADDR_EXP 78
10641: PUSH
10642: LD_INT 1
10644: ST_TO_ADDR
// if p3 = 101 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 101
10652: EQUAL
10653: IFFALSE 10663
// sSold := true ;
10655: LD_ADDR_EXP 43
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// if p3 = 102 then
10663: LD_VAR 0 3
10667: PUSH
10668: LD_INT 102
10670: EQUAL
10671: IFFALSE 10681
// sDiff := true ;
10673: LD_ADDR_EXP 44
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// if p3 = 103 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_INT 103
10688: EQUAL
10689: IFFALSE 10699
// sFog := true ;
10691: LD_ADDR_EXP 47
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// if p3 = 104 then
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 104
10706: EQUAL
10707: IFFALSE 10717
// sReset := true ;
10709: LD_ADDR_EXP 48
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// if p3 = 105 then
10717: LD_VAR 0 3
10721: PUSH
10722: LD_INT 105
10724: EQUAL
10725: IFFALSE 10735
// sSun := true ;
10727: LD_ADDR_EXP 49
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// if p3 = 106 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 106
10742: EQUAL
10743: IFFALSE 10753
// sTiger := true ;
10745: LD_ADDR_EXP 45
10749: PUSH
10750: LD_INT 1
10752: ST_TO_ADDR
// if p3 = 107 then
10753: LD_VAR 0 3
10757: PUSH
10758: LD_INT 107
10760: EQUAL
10761: IFFALSE 10771
// sBomb := true ;
10763: LD_ADDR_EXP 46
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// if p3 = 108 then
10771: LD_VAR 0 3
10775: PUSH
10776: LD_INT 108
10778: EQUAL
10779: IFFALSE 10789
// sWound := true ;
10781: LD_ADDR_EXP 54
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// if p3 = 109 then
10789: LD_VAR 0 3
10793: PUSH
10794: LD_INT 109
10796: EQUAL
10797: IFFALSE 10807
// sBetray := true ;
10799: LD_ADDR_EXP 58
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// if p3 = 110 then
10807: LD_VAR 0 3
10811: PUSH
10812: LD_INT 110
10814: EQUAL
10815: IFFALSE 10825
// sContamin := true ;
10817: LD_ADDR_EXP 59
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// if p3 = 111 then
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 111
10832: EQUAL
10833: IFFALSE 10843
// sOil := true ;
10835: LD_ADDR_EXP 61
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// if p3 = 112 then
10843: LD_VAR 0 3
10847: PUSH
10848: LD_INT 112
10850: EQUAL
10851: IFFALSE 10861
// sStu := true ;
10853: LD_ADDR_EXP 65
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// if p3 = 113 then
10861: LD_VAR 0 3
10865: PUSH
10866: LD_INT 113
10868: EQUAL
10869: IFFALSE 10879
// sBazooka := true ;
10871: LD_ADDR_EXP 68
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// if p3 = 114 then
10879: LD_VAR 0 3
10883: PUSH
10884: LD_INT 114
10886: EQUAL
10887: IFFALSE 10897
// sMortar := true ;
10889: LD_ADDR_EXP 69
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// if p3 = 115 then
10897: LD_VAR 0 3
10901: PUSH
10902: LD_INT 115
10904: EQUAL
10905: IFFALSE 10915
// sRanger := true ;
10907: LD_ADDR_EXP 79
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// if p3 = 116 then
10915: LD_VAR 0 3
10919: PUSH
10920: LD_INT 116
10922: EQUAL
10923: IFFALSE 10933
// sComputer := true ;
10925: LD_ADDR_EXP 80
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// if p3 = 117 then
10933: LD_VAR 0 3
10937: PUSH
10938: LD_INT 117
10940: EQUAL
10941: IFFALSE 10951
// s30 := true ;
10943: LD_ADDR_EXP 81
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// if p3 = 118 then
10951: LD_VAR 0 3
10955: PUSH
10956: LD_INT 118
10958: EQUAL
10959: IFFALSE 10969
// s60 := true ;
10961: LD_ADDR_EXP 82
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// end ; if p2 = 101 then
10969: LD_VAR 0 2
10973: PUSH
10974: LD_INT 101
10976: EQUAL
10977: IFFALSE 11105
// begin case p3 of 1 :
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 1
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 10999
10992: POP
// hHackUnlimitedResources ; 2 :
10993: CALL 23203 0 0
10997: GO 11105
10999: LD_INT 2
11001: DOUBLE
11002: EQUAL
11003: IFTRUE 11007
11005: GO 11014
11007: POP
// hHackSetLevel10 ; 3 :
11008: CALL 23336 0 0
11012: GO 11105
11014: LD_INT 3
11016: DOUBLE
11017: EQUAL
11018: IFTRUE 11022
11020: GO 11029
11022: POP
// hHackSetLevel10YourUnits ; 4 :
11023: CALL 23421 0 0
11027: GO 11105
11029: LD_INT 4
11031: DOUBLE
11032: EQUAL
11033: IFTRUE 11037
11035: GO 11044
11037: POP
// hHackInvincible ; 5 :
11038: CALL 23869 0 0
11042: GO 11105
11044: LD_INT 5
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11059
11052: POP
// hHackInvisible ; 6 :
11053: CALL 23980 0 0
11057: GO 11105
11059: LD_INT 6
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11074
11067: POP
// hHackChangeYourSide ; 7 :
11068: CALL 24037 0 0
11072: GO 11105
11074: LD_INT 7
11076: DOUBLE
11077: EQUAL
11078: IFTRUE 11082
11080: GO 11089
11082: POP
// hHackChangeUnitSide ; 8 :
11083: CALL 24079 0 0
11087: GO 11105
11089: LD_INT 8
11091: DOUBLE
11092: EQUAL
11093: IFTRUE 11097
11095: GO 11104
11097: POP
// hHackFog ; end ;
11098: CALL 24180 0 0
11102: GO 11105
11104: POP
// end ; end ;
11105: LD_VAR 0 7
11109: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11110: GO 11112
11112: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11113: LD_STRING initStreamRollete();
11115: PPUSH
11116: CALL_OW 559
// InitStreamMode ;
11120: CALL 11132 0 0
// DefineStreamItems ( false ) ;
11124: LD_INT 0
11126: PPUSH
11127: CALL 11596 0 1
// end ;
11131: END
// function InitStreamMode ; begin
11132: LD_INT 0
11134: PPUSH
// streamModeActive := false ;
11135: LD_ADDR_EXP 26
11139: PUSH
11140: LD_INT 0
11142: ST_TO_ADDR
// normalCounter := 36 ;
11143: LD_ADDR_EXP 27
11147: PUSH
11148: LD_INT 36
11150: ST_TO_ADDR
// hardcoreCounter := 18 ;
11151: LD_ADDR_EXP 28
11155: PUSH
11156: LD_INT 18
11158: ST_TO_ADDR
// sRocket := false ;
11159: LD_ADDR_EXP 31
11163: PUSH
11164: LD_INT 0
11166: ST_TO_ADDR
// sSpeed := false ;
11167: LD_ADDR_EXP 30
11171: PUSH
11172: LD_INT 0
11174: ST_TO_ADDR
// sEngine := false ;
11175: LD_ADDR_EXP 32
11179: PUSH
11180: LD_INT 0
11182: ST_TO_ADDR
// sSpec := false ;
11183: LD_ADDR_EXP 29
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// sLevel := false ;
11191: LD_ADDR_EXP 33
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// sArmoury := false ;
11199: LD_ADDR_EXP 34
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// sRadar := false ;
11207: LD_ADDR_EXP 35
11211: PUSH
11212: LD_INT 0
11214: ST_TO_ADDR
// sBunker := false ;
11215: LD_ADDR_EXP 36
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// sHack := false ;
11223: LD_ADDR_EXP 37
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
// sFire := false ;
11231: LD_ADDR_EXP 38
11235: PUSH
11236: LD_INT 0
11238: ST_TO_ADDR
// sRefresh := false ;
11239: LD_ADDR_EXP 39
11243: PUSH
11244: LD_INT 0
11246: ST_TO_ADDR
// sExp := false ;
11247: LD_ADDR_EXP 40
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// sDepot := false ;
11255: LD_ADDR_EXP 41
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// sFlag := false ;
11263: LD_ADDR_EXP 42
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// sKamikadze := false ;
11271: LD_ADDR_EXP 50
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// sTroll := false ;
11279: LD_ADDR_EXP 51
11283: PUSH
11284: LD_INT 0
11286: ST_TO_ADDR
// sSlow := false ;
11287: LD_ADDR_EXP 52
11291: PUSH
11292: LD_INT 0
11294: ST_TO_ADDR
// sLack := false ;
11295: LD_ADDR_EXP 53
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// sTank := false ;
11303: LD_ADDR_EXP 55
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// sRemote := false ;
11311: LD_ADDR_EXP 56
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// sPowell := false ;
11319: LD_ADDR_EXP 57
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// sTeleport := false ;
11327: LD_ADDR_EXP 60
11331: PUSH
11332: LD_INT 0
11334: ST_TO_ADDR
// sOilTower := false ;
11335: LD_ADDR_EXP 62
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
// sShovel := false ;
11343: LD_ADDR_EXP 63
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// sSheik := false ;
11351: LD_ADDR_EXP 64
11355: PUSH
11356: LD_INT 0
11358: ST_TO_ADDR
// sEarthquake := false ;
11359: LD_ADDR_EXP 66
11363: PUSH
11364: LD_INT 0
11366: ST_TO_ADDR
// sAI := false ;
11367: LD_ADDR_EXP 67
11371: PUSH
11372: LD_INT 0
11374: ST_TO_ADDR
// sCargo := false ;
11375: LD_ADDR_EXP 70
11379: PUSH
11380: LD_INT 0
11382: ST_TO_ADDR
// sDLaser := false ;
11383: LD_ADDR_EXP 71
11387: PUSH
11388: LD_INT 0
11390: ST_TO_ADDR
// sExchange := false ;
11391: LD_ADDR_EXP 72
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// sFac := false ;
11399: LD_ADDR_EXP 73
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// sPower := false ;
11407: LD_ADDR_EXP 74
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// sRandom := false ;
11415: LD_ADDR_EXP 75
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// sShield := false ;
11423: LD_ADDR_EXP 76
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// sTime := false ;
11431: LD_ADDR_EXP 77
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// sTools := false ;
11439: LD_ADDR_EXP 78
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// sSold := false ;
11447: LD_ADDR_EXP 43
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// sDiff := false ;
11455: LD_ADDR_EXP 44
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// sFog := false ;
11463: LD_ADDR_EXP 47
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// sReset := false ;
11471: LD_ADDR_EXP 48
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// sSun := false ;
11479: LD_ADDR_EXP 49
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// sTiger := false ;
11487: LD_ADDR_EXP 45
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// sBomb := false ;
11495: LD_ADDR_EXP 46
11499: PUSH
11500: LD_INT 0
11502: ST_TO_ADDR
// sWound := false ;
11503: LD_ADDR_EXP 54
11507: PUSH
11508: LD_INT 0
11510: ST_TO_ADDR
// sBetray := false ;
11511: LD_ADDR_EXP 58
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sContamin := false ;
11519: LD_ADDR_EXP 59
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sOil := false ;
11527: LD_ADDR_EXP 61
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sStu := false ;
11535: LD_ADDR_EXP 65
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sBazooka := false ;
11543: LD_ADDR_EXP 68
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sMortar := false ;
11551: LD_ADDR_EXP 69
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sRanger := false ;
11559: LD_ADDR_EXP 79
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sComputer := false ;
11567: LD_ADDR_EXP 80
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// s30 := false ;
11575: LD_ADDR_EXP 81
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// s60 := false ;
11583: LD_ADDR_EXP 82
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// end ;
11591: LD_VAR 0 1
11595: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11596: LD_INT 0
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
// result := [ ] ;
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: EMPTY
11611: ST_TO_ADDR
// if campaign_id = 1 then
11612: LD_OWVAR 69
11616: PUSH
11617: LD_INT 1
11619: EQUAL
11620: IFFALSE 14786
// begin case mission_number of 1 :
11622: LD_OWVAR 70
11626: PUSH
11627: LD_INT 1
11629: DOUBLE
11630: EQUAL
11631: IFTRUE 11635
11633: GO 11711
11635: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_INT 2
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: LD_INT 11
11649: PUSH
11650: LD_INT 12
11652: PUSH
11653: LD_INT 15
11655: PUSH
11656: LD_INT 16
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 23
11664: PUSH
11665: LD_INT 26
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 101
11681: PUSH
11682: LD_INT 102
11684: PUSH
11685: LD_INT 106
11687: PUSH
11688: LD_INT 116
11690: PUSH
11691: LD_INT 117
11693: PUSH
11694: LD_INT 118
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: ST_TO_ADDR
11709: GO 14784
11711: LD_INT 2
11713: DOUBLE
11714: EQUAL
11715: IFTRUE 11719
11717: GO 11803
11719: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11720: LD_ADDR_VAR 0 2
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 4
11730: PUSH
11731: LD_INT 11
11733: PUSH
11734: LD_INT 12
11736: PUSH
11737: LD_INT 15
11739: PUSH
11740: LD_INT 16
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_INT 23
11748: PUSH
11749: LD_INT 26
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 101
11765: PUSH
11766: LD_INT 102
11768: PUSH
11769: LD_INT 105
11771: PUSH
11772: LD_INT 106
11774: PUSH
11775: LD_INT 108
11777: PUSH
11778: LD_INT 116
11780: PUSH
11781: LD_INT 117
11783: PUSH
11784: LD_INT 118
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
11801: GO 14784
11803: LD_INT 3
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 11899
11811: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11812: LD_ADDR_VAR 0 2
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 4
11822: PUSH
11823: LD_INT 5
11825: PUSH
11826: LD_INT 11
11828: PUSH
11829: LD_INT 12
11831: PUSH
11832: LD_INT 15
11834: PUSH
11835: LD_INT 16
11837: PUSH
11838: LD_INT 22
11840: PUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 36
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 101
11861: PUSH
11862: LD_INT 102
11864: PUSH
11865: LD_INT 105
11867: PUSH
11868: LD_INT 106
11870: PUSH
11871: LD_INT 108
11873: PUSH
11874: LD_INT 116
11876: PUSH
11877: LD_INT 117
11879: PUSH
11880: LD_INT 118
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: ST_TO_ADDR
11897: GO 14784
11899: LD_INT 4
11901: DOUBLE
11902: EQUAL
11903: IFTRUE 11907
11905: GO 12003
11907: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11908: LD_ADDR_VAR 0 2
11912: PUSH
11913: LD_INT 2
11915: PUSH
11916: LD_INT 4
11918: PUSH
11919: LD_INT 5
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: LD_INT 11
11927: PUSH
11928: LD_INT 12
11930: PUSH
11931: LD_INT 15
11933: PUSH
11934: LD_INT 16
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 23
11942: PUSH
11943: LD_INT 26
11945: PUSH
11946: LD_INT 36
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 101
11965: PUSH
11966: LD_INT 102
11968: PUSH
11969: LD_INT 105
11971: PUSH
11972: LD_INT 106
11974: PUSH
11975: LD_INT 108
11977: PUSH
11978: LD_INT 116
11980: PUSH
11981: LD_INT 117
11983: PUSH
11984: LD_INT 118
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: ST_TO_ADDR
12001: GO 14784
12003: LD_INT 5
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12123
12011: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 2
12019: PUSH
12020: LD_INT 4
12022: PUSH
12023: LD_INT 5
12025: PUSH
12026: LD_INT 6
12028: PUSH
12029: LD_INT 8
12031: PUSH
12032: LD_INT 11
12034: PUSH
12035: LD_INT 12
12037: PUSH
12038: LD_INT 15
12040: PUSH
12041: LD_INT 16
12043: PUSH
12044: LD_INT 22
12046: PUSH
12047: LD_INT 23
12049: PUSH
12050: LD_INT 25
12052: PUSH
12053: LD_INT 26
12055: PUSH
12056: LD_INT 36
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 101
12077: PUSH
12078: LD_INT 102
12080: PUSH
12081: LD_INT 105
12083: PUSH
12084: LD_INT 106
12086: PUSH
12087: LD_INT 108
12089: PUSH
12090: LD_INT 109
12092: PUSH
12093: LD_INT 112
12095: PUSH
12096: LD_INT 116
12098: PUSH
12099: LD_INT 117
12101: PUSH
12102: LD_INT 118
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: ST_TO_ADDR
12121: GO 14784
12123: LD_INT 6
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12263
12131: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 4
12142: PUSH
12143: LD_INT 5
12145: PUSH
12146: LD_INT 6
12148: PUSH
12149: LD_INT 8
12151: PUSH
12152: LD_INT 11
12154: PUSH
12155: LD_INT 12
12157: PUSH
12158: LD_INT 15
12160: PUSH
12161: LD_INT 16
12163: PUSH
12164: LD_INT 20
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 23
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 26
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 31
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: LD_INT 36
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 101
12217: PUSH
12218: LD_INT 102
12220: PUSH
12221: LD_INT 105
12223: PUSH
12224: LD_INT 106
12226: PUSH
12227: LD_INT 108
12229: PUSH
12230: LD_INT 109
12232: PUSH
12233: LD_INT 112
12235: PUSH
12236: LD_INT 116
12238: PUSH
12239: LD_INT 117
12241: PUSH
12242: LD_INT 118
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: ST_TO_ADDR
12261: GO 14784
12263: LD_INT 7
12265: DOUBLE
12266: EQUAL
12267: IFTRUE 12271
12269: GO 12383
12271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 4
12282: PUSH
12283: LD_INT 5
12285: PUSH
12286: LD_INT 7
12288: PUSH
12289: LD_INT 11
12291: PUSH
12292: LD_INT 12
12294: PUSH
12295: LD_INT 15
12297: PUSH
12298: LD_INT 16
12300: PUSH
12301: LD_INT 20
12303: PUSH
12304: LD_INT 21
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: LD_INT 23
12312: PUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 26
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 101
12337: PUSH
12338: LD_INT 102
12340: PUSH
12341: LD_INT 103
12343: PUSH
12344: LD_INT 105
12346: PUSH
12347: LD_INT 106
12349: PUSH
12350: LD_INT 108
12352: PUSH
12353: LD_INT 112
12355: PUSH
12356: LD_INT 116
12358: PUSH
12359: LD_INT 117
12361: PUSH
12362: LD_INT 118
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: ST_TO_ADDR
12381: GO 14784
12383: LD_INT 8
12385: DOUBLE
12386: EQUAL
12387: IFTRUE 12391
12389: GO 12531
12391: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12392: LD_ADDR_VAR 0 2
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: LD_INT 6
12408: PUSH
12409: LD_INT 7
12411: PUSH
12412: LD_INT 8
12414: PUSH
12415: LD_INT 11
12417: PUSH
12418: LD_INT 12
12420: PUSH
12421: LD_INT 15
12423: PUSH
12424: LD_INT 16
12426: PUSH
12427: LD_INT 20
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: LD_INT 23
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 26
12444: PUSH
12445: LD_INT 30
12447: PUSH
12448: LD_INT 31
12450: PUSH
12451: LD_INT 32
12453: PUSH
12454: LD_INT 36
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 101
12481: PUSH
12482: LD_INT 102
12484: PUSH
12485: LD_INT 103
12487: PUSH
12488: LD_INT 105
12490: PUSH
12491: LD_INT 106
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 112
12502: PUSH
12503: LD_INT 116
12505: PUSH
12506: LD_INT 117
12508: PUSH
12509: LD_INT 118
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: ST_TO_ADDR
12529: GO 14784
12531: LD_INT 9
12533: DOUBLE
12534: EQUAL
12535: IFTRUE 12539
12537: GO 12687
12539: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_INT 2
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: LD_INT 5
12553: PUSH
12554: LD_INT 6
12556: PUSH
12557: LD_INT 7
12559: PUSH
12560: LD_INT 8
12562: PUSH
12563: LD_INT 11
12565: PUSH
12566: LD_INT 12
12568: PUSH
12569: LD_INT 15
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 26
12592: PUSH
12593: LD_INT 28
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 31
12601: PUSH
12602: LD_INT 32
12604: PUSH
12605: LD_INT 36
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 101
12633: PUSH
12634: LD_INT 102
12636: PUSH
12637: LD_INT 103
12639: PUSH
12640: LD_INT 105
12642: PUSH
12643: LD_INT 106
12645: PUSH
12646: LD_INT 108
12648: PUSH
12649: LD_INT 109
12651: PUSH
12652: LD_INT 112
12654: PUSH
12655: LD_INT 114
12657: PUSH
12658: LD_INT 116
12660: PUSH
12661: LD_INT 117
12663: PUSH
12664: LD_INT 118
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: ST_TO_ADDR
12685: GO 14784
12687: LD_INT 10
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12891
12695: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 28
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 31
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 36
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 101
12821: PUSH
12822: LD_INT 102
12824: PUSH
12825: LD_INT 103
12827: PUSH
12828: LD_INT 104
12830: PUSH
12831: LD_INT 105
12833: PUSH
12834: LD_INT 106
12836: PUSH
12837: LD_INT 107
12839: PUSH
12840: LD_INT 108
12842: PUSH
12843: LD_INT 109
12845: PUSH
12846: LD_INT 110
12848: PUSH
12849: LD_INT 111
12851: PUSH
12852: LD_INT 112
12854: PUSH
12855: LD_INT 114
12857: PUSH
12858: LD_INT 116
12860: PUSH
12861: LD_INT 117
12863: PUSH
12864: LD_INT 118
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: ST_TO_ADDR
12889: GO 14784
12891: LD_INT 11
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 13103
12899: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 3
12910: PUSH
12911: LD_INT 4
12913: PUSH
12914: LD_INT 5
12916: PUSH
12917: LD_INT 6
12919: PUSH
12920: LD_INT 7
12922: PUSH
12923: LD_INT 8
12925: PUSH
12926: LD_INT 9
12928: PUSH
12929: LD_INT 10
12931: PUSH
12932: LD_INT 11
12934: PUSH
12935: LD_INT 12
12937: PUSH
12938: LD_INT 13
12940: PUSH
12941: LD_INT 14
12943: PUSH
12944: LD_INT 15
12946: PUSH
12947: LD_INT 16
12949: PUSH
12950: LD_INT 17
12952: PUSH
12953: LD_INT 18
12955: PUSH
12956: LD_INT 19
12958: PUSH
12959: LD_INT 20
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 24
12973: PUSH
12974: LD_INT 25
12976: PUSH
12977: LD_INT 26
12979: PUSH
12980: LD_INT 28
12982: PUSH
12983: LD_INT 30
12985: PUSH
12986: LD_INT 31
12988: PUSH
12989: LD_INT 32
12991: PUSH
12992: LD_INT 34
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 101
13033: PUSH
13034: LD_INT 102
13036: PUSH
13037: LD_INT 103
13039: PUSH
13040: LD_INT 104
13042: PUSH
13043: LD_INT 105
13045: PUSH
13046: LD_INT 106
13048: PUSH
13049: LD_INT 107
13051: PUSH
13052: LD_INT 108
13054: PUSH
13055: LD_INT 109
13057: PUSH
13058: LD_INT 110
13060: PUSH
13061: LD_INT 111
13063: PUSH
13064: LD_INT 112
13066: PUSH
13067: LD_INT 114
13069: PUSH
13070: LD_INT 116
13072: PUSH
13073: LD_INT 117
13075: PUSH
13076: LD_INT 118
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: ST_TO_ADDR
13101: GO 14784
13103: LD_INT 12
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13331
13111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13112: LD_ADDR_VAR 0 2
13116: PUSH
13117: LD_INT 1
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 3
13125: PUSH
13126: LD_INT 4
13128: PUSH
13129: LD_INT 5
13131: PUSH
13132: LD_INT 6
13134: PUSH
13135: LD_INT 7
13137: PUSH
13138: LD_INT 8
13140: PUSH
13141: LD_INT 9
13143: PUSH
13144: LD_INT 10
13146: PUSH
13147: LD_INT 11
13149: PUSH
13150: LD_INT 12
13152: PUSH
13153: LD_INT 13
13155: PUSH
13156: LD_INT 14
13158: PUSH
13159: LD_INT 15
13161: PUSH
13162: LD_INT 16
13164: PUSH
13165: LD_INT 17
13167: PUSH
13168: LD_INT 18
13170: PUSH
13171: LD_INT 19
13173: PUSH
13174: LD_INT 20
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_INT 23
13185: PUSH
13186: LD_INT 24
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 27
13197: PUSH
13198: LD_INT 28
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: LD_INT 31
13206: PUSH
13207: LD_INT 32
13209: PUSH
13210: LD_INT 33
13212: PUSH
13213: LD_INT 34
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 101
13257: PUSH
13258: LD_INT 102
13260: PUSH
13261: LD_INT 103
13263: PUSH
13264: LD_INT 104
13266: PUSH
13267: LD_INT 105
13269: PUSH
13270: LD_INT 106
13272: PUSH
13273: LD_INT 107
13275: PUSH
13276: LD_INT 108
13278: PUSH
13279: LD_INT 109
13281: PUSH
13282: LD_INT 110
13284: PUSH
13285: LD_INT 111
13287: PUSH
13288: LD_INT 112
13290: PUSH
13291: LD_INT 113
13293: PUSH
13294: LD_INT 114
13296: PUSH
13297: LD_INT 116
13299: PUSH
13300: LD_INT 117
13302: PUSH
13303: LD_INT 118
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: ST_TO_ADDR
13329: GO 14784
13331: LD_INT 13
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13547
13339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_INT 1
13347: PUSH
13348: LD_INT 2
13350: PUSH
13351: LD_INT 3
13353: PUSH
13354: LD_INT 4
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: LD_INT 8
13362: PUSH
13363: LD_INT 9
13365: PUSH
13366: LD_INT 10
13368: PUSH
13369: LD_INT 11
13371: PUSH
13372: LD_INT 12
13374: PUSH
13375: LD_INT 14
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 17
13386: PUSH
13387: LD_INT 18
13389: PUSH
13390: LD_INT 19
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 24
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 26
13413: PUSH
13414: LD_INT 27
13416: PUSH
13417: LD_INT 28
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 31
13425: PUSH
13426: LD_INT 32
13428: PUSH
13429: LD_INT 33
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 36
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 101
13473: PUSH
13474: LD_INT 102
13476: PUSH
13477: LD_INT 103
13479: PUSH
13480: LD_INT 104
13482: PUSH
13483: LD_INT 105
13485: PUSH
13486: LD_INT 106
13488: PUSH
13489: LD_INT 107
13491: PUSH
13492: LD_INT 108
13494: PUSH
13495: LD_INT 109
13497: PUSH
13498: LD_INT 110
13500: PUSH
13501: LD_INT 111
13503: PUSH
13504: LD_INT 112
13506: PUSH
13507: LD_INT 113
13509: PUSH
13510: LD_INT 114
13512: PUSH
13513: LD_INT 116
13515: PUSH
13516: LD_INT 117
13518: PUSH
13519: LD_INT 118
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: ST_TO_ADDR
13545: GO 14784
13547: LD_INT 14
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13779
13555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: LD_INT 2
13566: PUSH
13567: LD_INT 3
13569: PUSH
13570: LD_INT 4
13572: PUSH
13573: LD_INT 5
13575: PUSH
13576: LD_INT 6
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 9
13587: PUSH
13588: LD_INT 10
13590: PUSH
13591: LD_INT 11
13593: PUSH
13594: LD_INT 12
13596: PUSH
13597: LD_INT 13
13599: PUSH
13600: LD_INT 14
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: LD_INT 16
13608: PUSH
13609: LD_INT 17
13611: PUSH
13612: LD_INT 18
13614: PUSH
13615: LD_INT 19
13617: PUSH
13618: LD_INT 20
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 23
13629: PUSH
13630: LD_INT 24
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 27
13641: PUSH
13642: LD_INT 28
13644: PUSH
13645: LD_INT 29
13647: PUSH
13648: LD_INT 30
13650: PUSH
13651: LD_INT 31
13653: PUSH
13654: LD_INT 32
13656: PUSH
13657: LD_INT 33
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 36
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 101
13705: PUSH
13706: LD_INT 102
13708: PUSH
13709: LD_INT 103
13711: PUSH
13712: LD_INT 104
13714: PUSH
13715: LD_INT 105
13717: PUSH
13718: LD_INT 106
13720: PUSH
13721: LD_INT 107
13723: PUSH
13724: LD_INT 108
13726: PUSH
13727: LD_INT 109
13729: PUSH
13730: LD_INT 110
13732: PUSH
13733: LD_INT 111
13735: PUSH
13736: LD_INT 112
13738: PUSH
13739: LD_INT 113
13741: PUSH
13742: LD_INT 114
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 14784
13779: LD_INT 15
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 14011
13787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 6
13810: PUSH
13811: LD_INT 7
13813: PUSH
13814: LD_INT 8
13816: PUSH
13817: LD_INT 9
13819: PUSH
13820: LD_INT 10
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 12
13828: PUSH
13829: LD_INT 13
13831: PUSH
13832: LD_INT 14
13834: PUSH
13835: LD_INT 15
13837: PUSH
13838: LD_INT 16
13840: PUSH
13841: LD_INT 17
13843: PUSH
13844: LD_INT 18
13846: PUSH
13847: LD_INT 19
13849: PUSH
13850: LD_INT 20
13852: PUSH
13853: LD_INT 21
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 26
13870: PUSH
13871: LD_INT 27
13873: PUSH
13874: LD_INT 28
13876: PUSH
13877: LD_INT 29
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 31
13885: PUSH
13886: LD_INT 32
13888: PUSH
13889: LD_INT 33
13891: PUSH
13892: LD_INT 34
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 101
13937: PUSH
13938: LD_INT 102
13940: PUSH
13941: LD_INT 103
13943: PUSH
13944: LD_INT 104
13946: PUSH
13947: LD_INT 105
13949: PUSH
13950: LD_INT 106
13952: PUSH
13953: LD_INT 107
13955: PUSH
13956: LD_INT 108
13958: PUSH
13959: LD_INT 109
13961: PUSH
13962: LD_INT 110
13964: PUSH
13965: LD_INT 111
13967: PUSH
13968: LD_INT 112
13970: PUSH
13971: LD_INT 113
13973: PUSH
13974: LD_INT 114
13976: PUSH
13977: LD_INT 116
13979: PUSH
13980: LD_INT 117
13982: PUSH
13983: LD_INT 118
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: ST_TO_ADDR
14009: GO 14784
14011: LD_INT 16
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14155
14019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 4
14030: PUSH
14031: LD_INT 5
14033: PUSH
14034: LD_INT 7
14036: PUSH
14037: LD_INT 11
14039: PUSH
14040: LD_INT 12
14042: PUSH
14043: LD_INT 15
14045: PUSH
14046: LD_INT 16
14048: PUSH
14049: LD_INT 20
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 23
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 26
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 31
14072: PUSH
14073: LD_INT 32
14075: PUSH
14076: LD_INT 33
14078: PUSH
14079: LD_INT 34
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 101
14105: PUSH
14106: LD_INT 102
14108: PUSH
14109: LD_INT 103
14111: PUSH
14112: LD_INT 106
14114: PUSH
14115: LD_INT 108
14117: PUSH
14118: LD_INT 112
14120: PUSH
14121: LD_INT 113
14123: PUSH
14124: LD_INT 114
14126: PUSH
14127: LD_INT 116
14129: PUSH
14130: LD_INT 117
14132: PUSH
14133: LD_INT 118
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: ST_TO_ADDR
14153: GO 14784
14155: LD_INT 17
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14387
14163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: LD_INT 2
14174: PUSH
14175: LD_INT 3
14177: PUSH
14178: LD_INT 4
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: LD_INT 6
14186: PUSH
14187: LD_INT 7
14189: PUSH
14190: LD_INT 8
14192: PUSH
14193: LD_INT 9
14195: PUSH
14196: LD_INT 10
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 13
14207: PUSH
14208: LD_INT 14
14210: PUSH
14211: LD_INT 15
14213: PUSH
14214: LD_INT 16
14216: PUSH
14217: LD_INT 17
14219: PUSH
14220: LD_INT 18
14222: PUSH
14223: LD_INT 19
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 24
14240: PUSH
14241: LD_INT 25
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: LD_INT 27
14249: PUSH
14250: LD_INT 28
14252: PUSH
14253: LD_INT 29
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 36
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 101
14313: PUSH
14314: LD_INT 102
14316: PUSH
14317: LD_INT 103
14319: PUSH
14320: LD_INT 104
14322: PUSH
14323: LD_INT 105
14325: PUSH
14326: LD_INT 106
14328: PUSH
14329: LD_INT 107
14331: PUSH
14332: LD_INT 108
14334: PUSH
14335: LD_INT 109
14337: PUSH
14338: LD_INT 110
14340: PUSH
14341: LD_INT 111
14343: PUSH
14344: LD_INT 112
14346: PUSH
14347: LD_INT 113
14349: PUSH
14350: LD_INT 114
14352: PUSH
14353: LD_INT 116
14355: PUSH
14356: LD_INT 117
14358: PUSH
14359: LD_INT 118
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14784
14387: LD_INT 18
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14543
14395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14396: LD_ADDR_VAR 0 2
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 5
14409: PUSH
14410: LD_INT 7
14412: PUSH
14413: LD_INT 11
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 15
14421: PUSH
14422: LD_INT 16
14424: PUSH
14425: LD_INT 20
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 25
14439: PUSH
14440: LD_INT 26
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 35
14460: PUSH
14461: LD_INT 36
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 101
14489: PUSH
14490: LD_INT 102
14492: PUSH
14493: LD_INT 103
14495: PUSH
14496: LD_INT 106
14498: PUSH
14499: LD_INT 108
14501: PUSH
14502: LD_INT 112
14504: PUSH
14505: LD_INT 113
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 115
14513: PUSH
14514: LD_INT 116
14516: PUSH
14517: LD_INT 117
14519: PUSH
14520: LD_INT 118
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: ST_TO_ADDR
14541: GO 14784
14543: LD_INT 19
14545: DOUBLE
14546: EQUAL
14547: IFTRUE 14551
14549: GO 14783
14551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14552: LD_ADDR_VAR 0 2
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: LD_INT 3
14565: PUSH
14566: LD_INT 4
14568: PUSH
14569: LD_INT 5
14571: PUSH
14572: LD_INT 6
14574: PUSH
14575: LD_INT 7
14577: PUSH
14578: LD_INT 8
14580: PUSH
14581: LD_INT 9
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: LD_INT 11
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: LD_INT 13
14595: PUSH
14596: LD_INT 14
14598: PUSH
14599: LD_INT 15
14601: PUSH
14602: LD_INT 16
14604: PUSH
14605: LD_INT 17
14607: PUSH
14608: LD_INT 18
14610: PUSH
14611: LD_INT 19
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_INT 23
14625: PUSH
14626: LD_INT 24
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 26
14634: PUSH
14635: LD_INT 27
14637: PUSH
14638: LD_INT 28
14640: PUSH
14641: LD_INT 29
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: LD_INT 32
14652: PUSH
14653: LD_INT 33
14655: PUSH
14656: LD_INT 34
14658: PUSH
14659: LD_INT 35
14661: PUSH
14662: LD_INT 36
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 101
14705: PUSH
14706: LD_INT 102
14708: PUSH
14709: LD_INT 103
14711: PUSH
14712: LD_INT 104
14714: PUSH
14715: LD_INT 105
14717: PUSH
14718: LD_INT 106
14720: PUSH
14721: LD_INT 107
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 109
14729: PUSH
14730: LD_INT 110
14732: PUSH
14733: LD_INT 111
14735: PUSH
14736: LD_INT 112
14738: PUSH
14739: LD_INT 113
14741: PUSH
14742: LD_INT 114
14744: PUSH
14745: LD_INT 115
14747: PUSH
14748: LD_INT 116
14750: PUSH
14751: LD_INT 117
14753: PUSH
14754: LD_INT 118
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: ST_TO_ADDR
14781: GO 14784
14783: POP
// end else
14784: GO 15015
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 6
14808: PUSH
14809: LD_INT 7
14811: PUSH
14812: LD_INT 8
14814: PUSH
14815: LD_INT 9
14817: PUSH
14818: LD_INT 10
14820: PUSH
14821: LD_INT 11
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: LD_INT 13
14829: PUSH
14830: LD_INT 14
14832: PUSH
14833: LD_INT 15
14835: PUSH
14836: LD_INT 16
14838: PUSH
14839: LD_INT 17
14841: PUSH
14842: LD_INT 18
14844: PUSH
14845: LD_INT 19
14847: PUSH
14848: LD_INT 20
14850: PUSH
14851: LD_INT 21
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_INT 23
14859: PUSH
14860: LD_INT 24
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 26
14868: PUSH
14869: LD_INT 27
14871: PUSH
14872: LD_INT 28
14874: PUSH
14875: LD_INT 29
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 35
14895: PUSH
14896: LD_INT 36
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 101
14939: PUSH
14940: LD_INT 102
14942: PUSH
14943: LD_INT 103
14945: PUSH
14946: LD_INT 104
14948: PUSH
14949: LD_INT 105
14951: PUSH
14952: LD_INT 106
14954: PUSH
14955: LD_INT 107
14957: PUSH
14958: LD_INT 108
14960: PUSH
14961: LD_INT 109
14963: PUSH
14964: LD_INT 110
14966: PUSH
14967: LD_INT 111
14969: PUSH
14970: LD_INT 112
14972: PUSH
14973: LD_INT 113
14975: PUSH
14976: LD_INT 114
14978: PUSH
14979: LD_INT 115
14981: PUSH
14982: LD_INT 116
14984: PUSH
14985: LD_INT 117
14987: PUSH
14988: LD_INT 118
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: ST_TO_ADDR
// if result then
15015: LD_VAR 0 2
15019: IFFALSE 15805
// begin normal :=  ;
15021: LD_ADDR_VAR 0 5
15025: PUSH
15026: LD_STRING 
15028: ST_TO_ADDR
// hardcore :=  ;
15029: LD_ADDR_VAR 0 6
15033: PUSH
15034: LD_STRING 
15036: ST_TO_ADDR
// active :=  ;
15037: LD_ADDR_VAR 0 7
15041: PUSH
15042: LD_STRING 
15044: ST_TO_ADDR
// for i = 1 to normalCounter do
15045: LD_ADDR_VAR 0 8
15049: PUSH
15050: DOUBLE
15051: LD_INT 1
15053: DEC
15054: ST_TO_ADDR
15055: LD_EXP 27
15059: PUSH
15060: FOR_TO
15061: IFFALSE 15162
// begin tmp := 0 ;
15063: LD_ADDR_VAR 0 3
15067: PUSH
15068: LD_STRING 0
15070: ST_TO_ADDR
// if result [ 1 ] then
15071: LD_VAR 0 2
15075: PUSH
15076: LD_INT 1
15078: ARRAY
15079: IFFALSE 15144
// if result [ 1 ] [ 1 ] = i then
15081: LD_VAR 0 2
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PUSH
15090: LD_INT 1
15092: ARRAY
15093: PUSH
15094: LD_VAR 0 8
15098: EQUAL
15099: IFFALSE 15144
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15101: LD_ADDR_VAR 0 2
15105: PUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 3
15130: PPUSH
15131: CALL_OW 1
15135: ST_TO_ADDR
// tmp := 1 ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_STRING 1
15143: ST_TO_ADDR
// end ; normal := normal & tmp ;
15144: LD_ADDR_VAR 0 5
15148: PUSH
15149: LD_VAR 0 5
15153: PUSH
15154: LD_VAR 0 3
15158: STR
15159: ST_TO_ADDR
// end ;
15160: GO 15060
15162: POP
15163: POP
// for i = 1 to hardcoreCounter do
15164: LD_ADDR_VAR 0 8
15168: PUSH
15169: DOUBLE
15170: LD_INT 1
15172: DEC
15173: ST_TO_ADDR
15174: LD_EXP 28
15178: PUSH
15179: FOR_TO
15180: IFFALSE 15285
// begin tmp := 0 ;
15182: LD_ADDR_VAR 0 3
15186: PUSH
15187: LD_STRING 0
15189: ST_TO_ADDR
// if result [ 2 ] then
15190: LD_VAR 0 2
15194: PUSH
15195: LD_INT 2
15197: ARRAY
15198: IFFALSE 15267
// if result [ 2 ] [ 1 ] = 100 + i then
15200: LD_VAR 0 2
15204: PUSH
15205: LD_INT 2
15207: ARRAY
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PUSH
15213: LD_INT 100
15215: PUSH
15216: LD_VAR 0 8
15220: PLUS
15221: EQUAL
15222: IFFALSE 15267
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15224: LD_ADDR_VAR 0 2
15228: PUSH
15229: LD_VAR 0 2
15233: PPUSH
15234: LD_INT 2
15236: PPUSH
15237: LD_VAR 0 2
15241: PUSH
15242: LD_INT 2
15244: ARRAY
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 3
15253: PPUSH
15254: CALL_OW 1
15258: ST_TO_ADDR
// tmp := 1 ;
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_STRING 1
15266: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15267: LD_ADDR_VAR 0 6
15271: PUSH
15272: LD_VAR 0 6
15276: PUSH
15277: LD_VAR 0 3
15281: STR
15282: ST_TO_ADDR
// end ;
15283: GO 15179
15285: POP
15286: POP
// if isGameLoad then
15287: LD_VAR 0 1
15291: IFFALSE 15766
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15293: LD_ADDR_VAR 0 4
15297: PUSH
15298: LD_EXP 31
15302: PUSH
15303: LD_EXP 30
15307: PUSH
15308: LD_EXP 32
15312: PUSH
15313: LD_EXP 29
15317: PUSH
15318: LD_EXP 33
15322: PUSH
15323: LD_EXP 34
15327: PUSH
15328: LD_EXP 35
15332: PUSH
15333: LD_EXP 36
15337: PUSH
15338: LD_EXP 37
15342: PUSH
15343: LD_EXP 38
15347: PUSH
15348: LD_EXP 39
15352: PUSH
15353: LD_EXP 40
15357: PUSH
15358: LD_EXP 41
15362: PUSH
15363: LD_EXP 42
15367: PUSH
15368: LD_EXP 50
15372: PUSH
15373: LD_EXP 51
15377: PUSH
15378: LD_EXP 52
15382: PUSH
15383: LD_EXP 53
15387: PUSH
15388: LD_EXP 55
15392: PUSH
15393: LD_EXP 56
15397: PUSH
15398: LD_EXP 57
15402: PUSH
15403: LD_EXP 60
15407: PUSH
15408: LD_EXP 62
15412: PUSH
15413: LD_EXP 63
15417: PUSH
15418: LD_EXP 64
15422: PUSH
15423: LD_EXP 66
15427: PUSH
15428: LD_EXP 67
15432: PUSH
15433: LD_EXP 70
15437: PUSH
15438: LD_EXP 71
15442: PUSH
15443: LD_EXP 72
15447: PUSH
15448: LD_EXP 73
15452: PUSH
15453: LD_EXP 74
15457: PUSH
15458: LD_EXP 75
15462: PUSH
15463: LD_EXP 76
15467: PUSH
15468: LD_EXP 77
15472: PUSH
15473: LD_EXP 78
15477: PUSH
15478: LD_EXP 43
15482: PUSH
15483: LD_EXP 44
15487: PUSH
15488: LD_EXP 47
15492: PUSH
15493: LD_EXP 48
15497: PUSH
15498: LD_EXP 49
15502: PUSH
15503: LD_EXP 45
15507: PUSH
15508: LD_EXP 46
15512: PUSH
15513: LD_EXP 54
15517: PUSH
15518: LD_EXP 58
15522: PUSH
15523: LD_EXP 59
15527: PUSH
15528: LD_EXP 61
15532: PUSH
15533: LD_EXP 65
15537: PUSH
15538: LD_EXP 68
15542: PUSH
15543: LD_EXP 69
15547: PUSH
15548: LD_EXP 79
15552: PUSH
15553: LD_EXP 80
15557: PUSH
15558: LD_EXP 81
15562: PUSH
15563: LD_EXP 82
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: ST_TO_ADDR
// tmp :=  ;
15624: LD_ADDR_VAR 0 3
15628: PUSH
15629: LD_STRING 
15631: ST_TO_ADDR
// for i = 1 to normalCounter do
15632: LD_ADDR_VAR 0 8
15636: PUSH
15637: DOUBLE
15638: LD_INT 1
15640: DEC
15641: ST_TO_ADDR
15642: LD_EXP 27
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15684
// begin if flags [ i ] then
15650: LD_VAR 0 4
15654: PUSH
15655: LD_VAR 0 8
15659: ARRAY
15660: IFFALSE 15682
// tmp := tmp & i & ; ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_VAR 0 3
15671: PUSH
15672: LD_VAR 0 8
15676: STR
15677: PUSH
15678: LD_STRING ;
15680: STR
15681: ST_TO_ADDR
// end ;
15682: GO 15647
15684: POP
15685: POP
// for i = 1 to hardcoreCounter do
15686: LD_ADDR_VAR 0 8
15690: PUSH
15691: DOUBLE
15692: LD_INT 1
15694: DEC
15695: ST_TO_ADDR
15696: LD_EXP 28
15700: PUSH
15701: FOR_TO
15702: IFFALSE 15748
// begin if flags [ normalCounter + i ] then
15704: LD_VAR 0 4
15708: PUSH
15709: LD_EXP 27
15713: PUSH
15714: LD_VAR 0 8
15718: PLUS
15719: ARRAY
15720: IFFALSE 15746
// tmp := tmp & ( 100 + i ) & ; ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 3
15731: PUSH
15732: LD_INT 100
15734: PUSH
15735: LD_VAR 0 8
15739: PLUS
15740: STR
15741: PUSH
15742: LD_STRING ;
15744: STR
15745: ST_TO_ADDR
// end ;
15746: GO 15701
15748: POP
15749: POP
// if tmp then
15750: LD_VAR 0 3
15754: IFFALSE 15766
// active := tmp ;
15756: LD_ADDR_VAR 0 7
15760: PUSH
15761: LD_VAR 0 3
15765: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15766: LD_STRING getStreamItemsFromMission("
15768: PUSH
15769: LD_VAR 0 5
15773: STR
15774: PUSH
15775: LD_STRING ","
15777: STR
15778: PUSH
15779: LD_VAR 0 6
15783: STR
15784: PUSH
15785: LD_STRING ","
15787: STR
15788: PUSH
15789: LD_VAR 0 7
15793: STR
15794: PUSH
15795: LD_STRING ")
15797: STR
15798: PPUSH
15799: CALL_OW 559
// end else
15803: GO 15812
// ToLua ( getStreamItemsFromMission("","","") ) ;
15805: LD_STRING getStreamItemsFromMission("","","")
15807: PPUSH
15808: CALL_OW 559
// end ;
15812: LD_VAR 0 2
15816: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15817: LD_EXP 26
15821: PUSH
15822: LD_EXP 31
15826: AND
15827: IFFALSE 15951
15829: GO 15831
15831: DISABLE
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
// begin enable ;
15836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 22
15844: PUSH
15845: LD_OWVAR 2
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 2
15856: PUSH
15857: LD_INT 34
15859: PUSH
15860: LD_INT 7
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 34
15869: PUSH
15870: LD_INT 45
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 34
15879: PUSH
15880: LD_INT 28
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 34
15889: PUSH
15890: LD_INT 47
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: ST_TO_ADDR
// if not tmp then
15913: LD_VAR 0 2
15917: NOT
15918: IFFALSE 15922
// exit ;
15920: GO 15951
// for i in tmp do
15922: LD_ADDR_VAR 0 1
15926: PUSH
15927: LD_VAR 0 2
15931: PUSH
15932: FOR_IN
15933: IFFALSE 15949
// begin SetLives ( i , 0 ) ;
15935: LD_VAR 0 1
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: CALL_OW 234
// end ;
15947: GO 15932
15949: POP
15950: POP
// end ;
15951: PPOPN 2
15953: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15954: LD_EXP 26
15958: PUSH
15959: LD_EXP 32
15963: AND
15964: IFFALSE 16048
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
15972: PPUSH
// begin enable ;
15973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15974: LD_ADDR_VAR 0 2
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_OWVAR 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 32
15993: PUSH
15994: LD_INT 3
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PPUSH
16005: CALL_OW 69
16009: ST_TO_ADDR
// if not tmp then
16010: LD_VAR 0 2
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16048
// for i in tmp do
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: FOR_IN
16030: IFFALSE 16046
// begin SetLives ( i , 0 ) ;
16032: LD_VAR 0 1
16036: PPUSH
16037: LD_INT 0
16039: PPUSH
16040: CALL_OW 234
// end ;
16044: GO 16029
16046: POP
16047: POP
// end ;
16048: PPOPN 2
16050: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16051: LD_EXP 26
16055: PUSH
16056: LD_EXP 29
16060: AND
16061: IFFALSE 16154
16063: GO 16065
16065: DISABLE
16066: LD_INT 0
16068: PPUSH
// begin enable ;
16069: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16070: LD_ADDR_VAR 0 1
16074: PUSH
16075: LD_INT 22
16077: PUSH
16078: LD_OWVAR 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: LD_INT 25
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 25
16102: PUSH
16103: LD_INT 9
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 25
16112: PUSH
16113: LD_INT 8
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PPUSH
16130: CALL_OW 69
16134: PUSH
16135: FOR_IN
16136: IFFALSE 16152
// begin SetClass ( i , 1 ) ;
16138: LD_VAR 0 1
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 336
// end ;
16150: GO 16135
16152: POP
16153: POP
// end ;
16154: PPOPN 1
16156: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16157: LD_EXP 26
16161: PUSH
16162: LD_EXP 30
16166: AND
16167: PUSH
16168: LD_OWVAR 65
16172: PUSH
16173: LD_INT 7
16175: LESS
16176: AND
16177: IFFALSE 16191
16179: GO 16181
16181: DISABLE
// begin enable ;
16182: ENABLE
// game_speed := 7 ;
16183: LD_ADDR_OWVAR 65
16187: PUSH
16188: LD_INT 7
16190: ST_TO_ADDR
// end ;
16191: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16192: LD_EXP 26
16196: PUSH
16197: LD_EXP 33
16201: AND
16202: IFFALSE 16404
16204: GO 16206
16206: DISABLE
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
16211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_INT 81
16219: PUSH
16220: LD_OWVAR 2
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: ST_TO_ADDR
// if not tmp then
16248: LD_VAR 0 3
16252: NOT
16253: IFFALSE 16257
// exit ;
16255: GO 16404
// if tmp > 5 then
16257: LD_VAR 0 3
16261: PUSH
16262: LD_INT 5
16264: GREATER
16265: IFFALSE 16277
// k := 5 else
16267: LD_ADDR_VAR 0 2
16271: PUSH
16272: LD_INT 5
16274: ST_TO_ADDR
16275: GO 16287
// k := tmp ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_VAR 0 3
16286: ST_TO_ADDR
// for i := 1 to k do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_VAR 0 2
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16402
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16305: LD_VAR 0 3
16309: PUSH
16310: LD_VAR 0 1
16314: ARRAY
16315: PPUSH
16316: LD_VAR 0 1
16320: PUSH
16321: LD_INT 4
16323: MOD
16324: PUSH
16325: LD_INT 1
16327: PLUS
16328: PPUSH
16329: CALL_OW 259
16333: PUSH
16334: LD_INT 10
16336: LESS
16337: IFFALSE 16400
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16339: LD_VAR 0 3
16343: PUSH
16344: LD_VAR 0 1
16348: ARRAY
16349: PPUSH
16350: LD_VAR 0 1
16354: PUSH
16355: LD_INT 4
16357: MOD
16358: PUSH
16359: LD_INT 1
16361: PLUS
16362: PPUSH
16363: LD_VAR 0 3
16367: PUSH
16368: LD_VAR 0 1
16372: ARRAY
16373: PPUSH
16374: LD_VAR 0 1
16378: PUSH
16379: LD_INT 4
16381: MOD
16382: PUSH
16383: LD_INT 1
16385: PLUS
16386: PPUSH
16387: CALL_OW 259
16391: PUSH
16392: LD_INT 1
16394: PLUS
16395: PPUSH
16396: CALL_OW 237
16400: GO 16302
16402: POP
16403: POP
// end ;
16404: PPOPN 3
16406: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16407: LD_EXP 26
16411: PUSH
16412: LD_EXP 34
16416: AND
16417: IFFALSE 16437
16419: GO 16421
16421: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16422: LD_INT 4
16424: PPUSH
16425: LD_OWVAR 2
16429: PPUSH
16430: LD_INT 0
16432: PPUSH
16433: CALL_OW 324
16437: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16438: LD_EXP 26
16442: PUSH
16443: LD_EXP 63
16447: AND
16448: IFFALSE 16468
16450: GO 16452
16452: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16453: LD_INT 19
16455: PPUSH
16456: LD_OWVAR 2
16460: PPUSH
16461: LD_INT 0
16463: PPUSH
16464: CALL_OW 324
16468: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16469: LD_EXP 26
16473: PUSH
16474: LD_EXP 35
16478: AND
16479: IFFALSE 16581
16481: GO 16483
16483: DISABLE
16484: LD_INT 0
16486: PPUSH
16487: PPUSH
// begin enable ;
16488: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16489: LD_ADDR_VAR 0 2
16493: PUSH
16494: LD_INT 22
16496: PUSH
16497: LD_OWVAR 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 34
16511: PUSH
16512: LD_INT 11
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 34
16521: PUSH
16522: LD_INT 30
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: ST_TO_ADDR
// if not tmp then
16543: LD_VAR 0 2
16547: NOT
16548: IFFALSE 16552
// exit ;
16550: GO 16581
// for i in tmp do
16552: LD_ADDR_VAR 0 1
16556: PUSH
16557: LD_VAR 0 2
16561: PUSH
16562: FOR_IN
16563: IFFALSE 16579
// begin SetLives ( i , 0 ) ;
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_INT 0
16572: PPUSH
16573: CALL_OW 234
// end ;
16577: GO 16562
16579: POP
16580: POP
// end ;
16581: PPOPN 2
16583: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16584: LD_EXP 26
16588: PUSH
16589: LD_EXP 36
16593: AND
16594: IFFALSE 16614
16596: GO 16598
16598: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16599: LD_INT 32
16601: PPUSH
16602: LD_OWVAR 2
16606: PPUSH
16607: LD_INT 0
16609: PPUSH
16610: CALL_OW 324
16614: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16615: LD_EXP 26
16619: PUSH
16620: LD_EXP 37
16624: AND
16625: IFFALSE 16806
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
16634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16635: LD_ADDR_VAR 0 2
16639: PUSH
16640: LD_INT 22
16642: PUSH
16643: LD_OWVAR 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 33
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: ST_TO_ADDR
// if not tmp then
16671: LD_VAR 0 2
16675: NOT
16676: IFFALSE 16680
// exit ;
16678: GO 16806
// side := 0 ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// for i := 1 to 8 do
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: DOUBLE
16694: LD_INT 1
16696: DEC
16697: ST_TO_ADDR
16698: LD_INT 8
16700: PUSH
16701: FOR_TO
16702: IFFALSE 16750
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16704: LD_OWVAR 2
16708: PUSH
16709: LD_VAR 0 1
16713: NONEQUAL
16714: PUSH
16715: LD_OWVAR 2
16719: PPUSH
16720: LD_VAR 0 1
16724: PPUSH
16725: CALL_OW 81
16729: PUSH
16730: LD_INT 2
16732: EQUAL
16733: AND
16734: IFFALSE 16748
// begin side := i ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_VAR 0 1
16745: ST_TO_ADDR
// break ;
16746: GO 16750
// end ;
16748: GO 16701
16750: POP
16751: POP
// if not side then
16752: LD_VAR 0 3
16756: NOT
16757: IFFALSE 16761
// exit ;
16759: GO 16806
// for i := 1 to tmp do
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: DOUBLE
16767: LD_INT 1
16769: DEC
16770: ST_TO_ADDR
16771: LD_VAR 0 2
16775: PUSH
16776: FOR_TO
16777: IFFALSE 16804
// if Prob ( 60 ) then
16779: LD_INT 60
16781: PPUSH
16782: CALL_OW 13
16786: IFFALSE 16802
// SetSide ( i , side ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: CALL_OW 235
16802: GO 16776
16804: POP
16805: POP
// end ;
16806: PPOPN 3
16808: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16809: LD_EXP 26
16813: PUSH
16814: LD_EXP 39
16818: AND
16819: IFFALSE 16938
16821: GO 16823
16823: DISABLE
16824: LD_INT 0
16826: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16827: LD_ADDR_VAR 0 1
16831: PUSH
16832: LD_INT 22
16834: PUSH
16835: LD_OWVAR 2
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 21
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: LD_INT 23
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: PUSH
16881: FOR_IN
16882: IFFALSE 16936
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16884: LD_VAR 0 1
16888: PPUSH
16889: CALL_OW 257
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 2
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 4
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: IN
16912: IFFALSE 16934
// SetClass ( un , rand ( 1 , 4 ) ) ;
16914: LD_VAR 0 1
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: LD_INT 4
16924: PPUSH
16925: CALL_OW 12
16929: PPUSH
16930: CALL_OW 336
16934: GO 16881
16936: POP
16937: POP
// end ;
16938: PPOPN 1
16940: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16941: LD_EXP 26
16945: PUSH
16946: LD_EXP 38
16950: AND
16951: IFFALSE 17030
16953: GO 16955
16955: DISABLE
16956: LD_INT 0
16958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16959: LD_ADDR_VAR 0 1
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_OWVAR 2
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 21
16978: PUSH
16979: LD_INT 3
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: ST_TO_ADDR
// if not tmp then
16995: LD_VAR 0 1
16999: NOT
17000: IFFALSE 17004
// exit ;
17002: GO 17030
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17004: LD_VAR 0 1
17008: PUSH
17009: LD_INT 1
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 12
17021: ARRAY
17022: PPUSH
17023: LD_INT 100
17025: PPUSH
17026: CALL_OW 234
// end ;
17030: PPOPN 1
17032: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17033: LD_EXP 26
17037: PUSH
17038: LD_EXP 40
17042: AND
17043: IFFALSE 17141
17045: GO 17047
17047: DISABLE
17048: LD_INT 0
17050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17051: LD_ADDR_VAR 0 1
17055: PUSH
17056: LD_INT 22
17058: PUSH
17059: LD_OWVAR 2
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: ST_TO_ADDR
// if not tmp then
17087: LD_VAR 0 1
17091: NOT
17092: IFFALSE 17096
// exit ;
17094: GO 17141
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17096: LD_VAR 0 1
17100: PUSH
17101: LD_INT 1
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 12
17113: ARRAY
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: LD_INT 4
17120: PPUSH
17121: CALL_OW 12
17125: PPUSH
17126: LD_INT 3000
17128: PPUSH
17129: LD_INT 9000
17131: PPUSH
17132: CALL_OW 12
17136: PPUSH
17137: CALL_OW 492
// end ;
17141: PPOPN 1
17143: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17144: LD_EXP 26
17148: PUSH
17149: LD_EXP 41
17153: AND
17154: IFFALSE 17174
17156: GO 17158
17158: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17159: LD_INT 1
17161: PPUSH
17162: LD_OWVAR 2
17166: PPUSH
17167: LD_INT 0
17169: PPUSH
17170: CALL_OW 324
17174: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17175: LD_EXP 26
17179: PUSH
17180: LD_EXP 42
17184: AND
17185: IFFALSE 17268
17187: GO 17189
17189: DISABLE
17190: LD_INT 0
17192: PPUSH
17193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_INT 22
17201: PUSH
17202: LD_OWVAR 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 21
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 2
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17268
// for i in tmp do
17239: LD_ADDR_VAR 0 1
17243: PUSH
17244: LD_VAR 0 2
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17266
// SetBLevel ( i , 10 ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 10
17259: PPUSH
17260: CALL_OW 241
17264: GO 17249
17266: POP
17267: POP
// end ;
17268: PPOPN 2
17270: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17271: LD_EXP 26
17275: PUSH
17276: LD_EXP 43
17280: AND
17281: IFFALSE 17392
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_INT 22
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 25
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 3
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17392
// un := tmp [ rand ( 1 , tmp ) ] ;
17336: LD_ADDR_VAR 0 2
17340: PUSH
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 1
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: CALL_OW 12
17358: ARRAY
17359: ST_TO_ADDR
// if Crawls ( un ) then
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 318
17369: IFFALSE 17380
// ComWalk ( un ) ;
17371: LD_VAR 0 2
17375: PPUSH
17376: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17380: LD_VAR 0 2
17384: PPUSH
17385: LD_INT 5
17387: PPUSH
17388: CALL_OW 336
// end ;
17392: PPOPN 3
17394: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17395: LD_EXP 26
17399: PUSH
17400: LD_EXP 44
17404: AND
17405: PUSH
17406: LD_OWVAR 67
17410: PUSH
17411: LD_INT 4
17413: LESS
17414: AND
17415: IFFALSE 17434
17417: GO 17419
17419: DISABLE
// begin Difficulty := Difficulty + 1 ;
17420: LD_ADDR_OWVAR 67
17424: PUSH
17425: LD_OWVAR 67
17429: PUSH
17430: LD_INT 1
17432: PLUS
17433: ST_TO_ADDR
// end ;
17434: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17435: LD_EXP 26
17439: PUSH
17440: LD_EXP 45
17444: AND
17445: IFFALSE 17548
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
// begin for i := 1 to 5 do
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: DOUBLE
17459: LD_INT 1
17461: DEC
17462: ST_TO_ADDR
17463: LD_INT 5
17465: PUSH
17466: FOR_TO
17467: IFFALSE 17546
// begin uc_nation := nation_nature ;
17469: LD_ADDR_OWVAR 21
17473: PUSH
17474: LD_INT 0
17476: ST_TO_ADDR
// uc_side := 0 ;
17477: LD_ADDR_OWVAR 20
17481: PUSH
17482: LD_INT 0
17484: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17485: LD_ADDR_OWVAR 29
17489: PUSH
17490: LD_INT 12
17492: PUSH
17493: LD_INT 12
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: ST_TO_ADDR
// hc_agressivity := 20 ;
17500: LD_ADDR_OWVAR 35
17504: PUSH
17505: LD_INT 20
17507: ST_TO_ADDR
// hc_class := class_tiger ;
17508: LD_ADDR_OWVAR 28
17512: PUSH
17513: LD_INT 14
17515: ST_TO_ADDR
// hc_gallery :=  ;
17516: LD_ADDR_OWVAR 33
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hc_name :=  ;
17524: LD_ADDR_OWVAR 26
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17532: CALL_OW 44
17536: PPUSH
17537: LD_INT 0
17539: PPUSH
17540: CALL_OW 51
// end ;
17544: GO 17466
17546: POP
17547: POP
// end ;
17548: PPOPN 1
17550: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17551: LD_EXP 26
17555: PUSH
17556: LD_EXP 46
17560: AND
17561: IFFALSE 17570
17563: GO 17565
17565: DISABLE
// StreamSibBomb ;
17566: CALL 17571 0 0
17570: END
// export function StreamSibBomb ; var i , x , y ; begin
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
// result := false ;
17577: LD_ADDR_VAR 0 1
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// for i := 1 to 16 do
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: DOUBLE
17591: LD_INT 1
17593: DEC
17594: ST_TO_ADDR
17595: LD_INT 16
17597: PUSH
17598: FOR_TO
17599: IFFALSE 17798
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17601: LD_ADDR_VAR 0 3
17605: PUSH
17606: LD_INT 10
17608: PUSH
17609: LD_INT 20
17611: PUSH
17612: LD_INT 30
17614: PUSH
17615: LD_INT 40
17617: PUSH
17618: LD_INT 50
17620: PUSH
17621: LD_INT 60
17623: PUSH
17624: LD_INT 70
17626: PUSH
17627: LD_INT 80
17629: PUSH
17630: LD_INT 90
17632: PUSH
17633: LD_INT 100
17635: PUSH
17636: LD_INT 110
17638: PUSH
17639: LD_INT 120
17641: PUSH
17642: LD_INT 130
17644: PUSH
17645: LD_INT 140
17647: PUSH
17648: LD_INT 150
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 15
17673: PPUSH
17674: CALL_OW 12
17678: ARRAY
17679: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_INT 10
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: LD_INT 30
17693: PUSH
17694: LD_INT 40
17696: PUSH
17697: LD_INT 50
17699: PUSH
17700: LD_INT 60
17702: PUSH
17703: LD_INT 70
17705: PUSH
17706: LD_INT 80
17708: PUSH
17709: LD_INT 90
17711: PUSH
17712: LD_INT 100
17714: PUSH
17715: LD_INT 110
17717: PUSH
17718: LD_INT 120
17720: PUSH
17721: LD_INT 130
17723: PUSH
17724: LD_INT 140
17726: PUSH
17727: LD_INT 150
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 15
17752: PPUSH
17753: CALL_OW 12
17757: ARRAY
17758: ST_TO_ADDR
// if ValidHex ( x , y ) then
17759: LD_VAR 0 3
17763: PPUSH
17764: LD_VAR 0 4
17768: PPUSH
17769: CALL_OW 488
17773: IFFALSE 17796
// begin result := [ x , y ] ;
17775: LD_ADDR_VAR 0 1
17779: PUSH
17780: LD_VAR 0 3
17784: PUSH
17785: LD_VAR 0 4
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: ST_TO_ADDR
// break ;
17794: GO 17798
// end ; end ;
17796: GO 17598
17798: POP
17799: POP
// if result then
17800: LD_VAR 0 1
17804: IFFALSE 17864
// begin ToLua ( playSibBomb() ) ;
17806: LD_STRING playSibBomb()
17808: PPUSH
17809: CALL_OW 559
// wait ( 0 0$14 ) ;
17813: LD_INT 490
17815: PPUSH
17816: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17820: LD_VAR 0 1
17824: PUSH
17825: LD_INT 1
17827: ARRAY
17828: PPUSH
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 2
17836: ARRAY
17837: PPUSH
17838: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17842: LD_VAR 0 1
17846: PUSH
17847: LD_INT 1
17849: ARRAY
17850: PPUSH
17851: LD_VAR 0 1
17855: PUSH
17856: LD_INT 2
17858: ARRAY
17859: PPUSH
17860: CALL_OW 429
// end ; end ;
17864: LD_VAR 0 1
17868: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17869: LD_EXP 26
17873: PUSH
17874: LD_EXP 48
17878: AND
17879: IFFALSE 17891
17881: GO 17883
17883: DISABLE
// YouLost (  ) ;
17884: LD_STRING 
17886: PPUSH
17887: CALL_OW 104
17891: END
// every 0 0$1 trigger StreamModeActive and sFog do
17892: LD_EXP 26
17896: PUSH
17897: LD_EXP 47
17901: AND
17902: IFFALSE 17916
17904: GO 17906
17906: DISABLE
// FogOff ( your_side ) ;
17907: LD_OWVAR 2
17911: PPUSH
17912: CALL_OW 344
17916: END
// every 0 0$1 trigger StreamModeActive and sSun do
17917: LD_EXP 26
17921: PUSH
17922: LD_EXP 49
17926: AND
17927: IFFALSE 17955
17929: GO 17931
17931: DISABLE
// begin solar_recharge_percent := 0 ;
17932: LD_ADDR_OWVAR 79
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17940: LD_INT 10500
17942: PPUSH
17943: CALL_OW 67
// solar_recharge_percent := 100 ;
17947: LD_ADDR_OWVAR 79
17951: PUSH
17952: LD_INT 100
17954: ST_TO_ADDR
// end ;
17955: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17956: LD_EXP 26
17960: PUSH
17961: LD_EXP 50
17965: AND
17966: IFFALSE 18205
17968: GO 17970
17970: DISABLE
17971: LD_INT 0
17973: PPUSH
17974: PPUSH
17975: PPUSH
// begin tmp := [ ] ;
17976: LD_ADDR_VAR 0 3
17980: PUSH
17981: EMPTY
17982: ST_TO_ADDR
// for i := 1 to 6 do
17983: LD_ADDR_VAR 0 1
17987: PUSH
17988: DOUBLE
17989: LD_INT 1
17991: DEC
17992: ST_TO_ADDR
17993: LD_INT 6
17995: PUSH
17996: FOR_TO
17997: IFFALSE 18102
// begin uc_nation := nation_nature ;
17999: LD_ADDR_OWVAR 21
18003: PUSH
18004: LD_INT 0
18006: ST_TO_ADDR
// uc_side := 0 ;
18007: LD_ADDR_OWVAR 20
18011: PUSH
18012: LD_INT 0
18014: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18015: LD_ADDR_OWVAR 29
18019: PUSH
18020: LD_INT 12
18022: PUSH
18023: LD_INT 12
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: ST_TO_ADDR
// hc_agressivity := 20 ;
18030: LD_ADDR_OWVAR 35
18034: PUSH
18035: LD_INT 20
18037: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18038: LD_ADDR_OWVAR 28
18042: PUSH
18043: LD_INT 17
18045: ST_TO_ADDR
// hc_gallery :=  ;
18046: LD_ADDR_OWVAR 33
18050: PUSH
18051: LD_STRING 
18053: ST_TO_ADDR
// hc_name :=  ;
18054: LD_ADDR_OWVAR 26
18058: PUSH
18059: LD_STRING 
18061: ST_TO_ADDR
// un := CreateHuman ;
18062: LD_ADDR_VAR 0 2
18066: PUSH
18067: CALL_OW 44
18071: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 51
// tmp := tmp ^ un ;
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: LD_VAR 0 3
18093: PUSH
18094: LD_VAR 0 2
18098: ADD
18099: ST_TO_ADDR
// end ;
18100: GO 17996
18102: POP
18103: POP
// repeat wait ( 0 0$1 ) ;
18104: LD_INT 35
18106: PPUSH
18107: CALL_OW 67
// for un in tmp do
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_VAR 0 3
18120: PUSH
18121: FOR_IN
18122: IFFALSE 18196
// begin if IsDead ( un ) then
18124: LD_VAR 0 2
18128: PPUSH
18129: CALL_OW 301
18133: IFFALSE 18153
// begin tmp := tmp diff un ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_VAR 0 3
18144: PUSH
18145: LD_VAR 0 2
18149: DIFF
18150: ST_TO_ADDR
// continue ;
18151: GO 18121
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_INT 3
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_INT 0
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 69
18179: PPUSH
18180: LD_VAR 0 2
18184: PPUSH
18185: CALL_OW 74
18189: PPUSH
18190: CALL_OW 115
// end ;
18194: GO 18121
18196: POP
18197: POP
// until not tmp ;
18198: LD_VAR 0 3
18202: NOT
18203: IFFALSE 18104
// end ;
18205: PPOPN 3
18207: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18208: LD_EXP 26
18212: PUSH
18213: LD_EXP 51
18217: AND
18218: IFFALSE 18272
18220: GO 18222
18222: DISABLE
// begin ToLua ( displayTroll(); ) ;
18223: LD_STRING displayTroll();
18225: PPUSH
18226: CALL_OW 559
// wait ( 3 3$00 ) ;
18230: LD_INT 6300
18232: PPUSH
18233: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18237: LD_STRING hideTroll();
18239: PPUSH
18240: CALL_OW 559
// wait ( 1 1$00 ) ;
18244: LD_INT 2100
18246: PPUSH
18247: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18251: LD_STRING displayTroll();
18253: PPUSH
18254: CALL_OW 559
// wait ( 1 1$00 ) ;
18258: LD_INT 2100
18260: PPUSH
18261: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18265: LD_STRING hideTroll();
18267: PPUSH
18268: CALL_OW 559
// end ;
18272: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18273: LD_EXP 26
18277: PUSH
18278: LD_EXP 52
18282: AND
18283: IFFALSE 18346
18285: GO 18287
18287: DISABLE
18288: LD_INT 0
18290: PPUSH
// begin p := 0 ;
18291: LD_ADDR_VAR 0 1
18295: PUSH
18296: LD_INT 0
18298: ST_TO_ADDR
// repeat game_speed := 1 ;
18299: LD_ADDR_OWVAR 65
18303: PUSH
18304: LD_INT 1
18306: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18307: LD_INT 35
18309: PPUSH
18310: CALL_OW 67
// p := p + 1 ;
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_VAR 0 1
18323: PUSH
18324: LD_INT 1
18326: PLUS
18327: ST_TO_ADDR
// until p >= 60 ;
18328: LD_VAR 0 1
18332: PUSH
18333: LD_INT 60
18335: GREATEREQUAL
18336: IFFALSE 18299
// game_speed := 4 ;
18338: LD_ADDR_OWVAR 65
18342: PUSH
18343: LD_INT 4
18345: ST_TO_ADDR
// end ;
18346: PPOPN 1
18348: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18349: LD_EXP 26
18353: PUSH
18354: LD_EXP 53
18358: AND
18359: IFFALSE 18505
18361: GO 18363
18363: DISABLE
18364: LD_INT 0
18366: PPUSH
18367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18368: LD_ADDR_VAR 0 1
18372: PUSH
18373: LD_INT 22
18375: PUSH
18376: LD_OWVAR 2
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 30
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not depot then
18422: LD_VAR 0 1
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18505
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18431: LD_ADDR_VAR 0 2
18435: PUSH
18436: LD_VAR 0 1
18440: PUSH
18441: LD_INT 1
18443: PPUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 12
18453: ARRAY
18454: PPUSH
18455: CALL_OW 274
18459: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: LD_INT 0
18470: PPUSH
18471: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18475: LD_VAR 0 2
18479: PPUSH
18480: LD_INT 2
18482: PPUSH
18483: LD_INT 0
18485: PPUSH
18486: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_INT 3
18497: PPUSH
18498: LD_INT 0
18500: PPUSH
18501: CALL_OW 277
// end ;
18505: PPOPN 2
18507: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18508: LD_EXP 26
18512: PUSH
18513: LD_EXP 54
18517: AND
18518: IFFALSE 18615
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18526: LD_ADDR_VAR 0 1
18530: PUSH
18531: LD_INT 22
18533: PUSH
18534: LD_OWVAR 2
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 21
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: LD_INT 23
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL_OW 69
18579: ST_TO_ADDR
// if not tmp then
18580: LD_VAR 0 1
18584: NOT
18585: IFFALSE 18589
// exit ;
18587: GO 18615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18589: LD_VAR 0 1
18593: PUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: PPUSH
18608: LD_INT 200
18610: PPUSH
18611: CALL_OW 234
// end ;
18615: PPOPN 1
18617: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18618: LD_EXP 26
18622: PUSH
18623: LD_EXP 55
18627: AND
18628: IFFALSE 18707
18630: GO 18632
18632: DISABLE
18633: LD_INT 0
18635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 21
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: ST_TO_ADDR
// if not tmp then
18672: LD_VAR 0 1
18676: NOT
18677: IFFALSE 18681
// exit ;
18679: GO 18707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 1
18688: PPUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 60
18702: PPUSH
18703: CALL_OW 234
// end ;
18707: PPOPN 1
18709: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18710: LD_EXP 26
18714: PUSH
18715: LD_EXP 56
18719: AND
18720: IFFALSE 18819
18722: GO 18724
18724: DISABLE
18725: LD_INT 0
18727: PPUSH
18728: PPUSH
// begin enable ;
18729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: LD_INT 22
18737: PUSH
18738: LD_OWVAR 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 61
18749: PUSH
18750: EMPTY
18751: LIST
18752: PUSH
18753: LD_INT 33
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 1
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18819
// for i in tmp do
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: FOR_IN
18793: IFFALSE 18817
// if IsControledBy ( i ) then
18795: LD_VAR 0 2
18799: PPUSH
18800: CALL_OW 312
18804: IFFALSE 18815
// ComUnlink ( i ) ;
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL_OW 136
18815: GO 18792
18817: POP
18818: POP
// end ;
18819: PPOPN 2
18821: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18822: LD_EXP 26
18826: PUSH
18827: LD_EXP 57
18831: AND
18832: IFFALSE 18972
18834: GO 18836
18836: DISABLE
18837: LD_INT 0
18839: PPUSH
18840: PPUSH
// begin ToLua ( displayPowell(); ) ;
18841: LD_STRING displayPowell();
18843: PPUSH
18844: CALL_OW 559
// uc_side := 0 ;
18848: LD_ADDR_OWVAR 20
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
// uc_nation := 2 ;
18856: LD_ADDR_OWVAR 21
18860: PUSH
18861: LD_INT 2
18863: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18864: LD_ADDR_OWVAR 37
18868: PUSH
18869: LD_INT 14
18871: ST_TO_ADDR
// vc_engine := engine_siberite ;
18872: LD_ADDR_OWVAR 39
18876: PUSH
18877: LD_INT 3
18879: ST_TO_ADDR
// vc_control := control_apeman ;
18880: LD_ADDR_OWVAR 38
18884: PUSH
18885: LD_INT 5
18887: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18888: LD_ADDR_OWVAR 40
18892: PUSH
18893: LD_INT 29
18895: ST_TO_ADDR
// un := CreateVehicle ;
18896: LD_ADDR_VAR 0 2
18900: PUSH
18901: CALL_OW 45
18905: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18906: LD_VAR 0 2
18910: PPUSH
18911: LD_INT 1
18913: PPUSH
18914: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18918: LD_INT 35
18920: PPUSH
18921: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18925: LD_VAR 0 2
18929: PPUSH
18930: LD_INT 22
18932: PUSH
18933: LD_OWVAR 2
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PPUSH
18942: CALL_OW 69
18946: PPUSH
18947: LD_VAR 0 2
18951: PPUSH
18952: CALL_OW 74
18956: PPUSH
18957: CALL_OW 115
// until IsDead ( un ) ;
18961: LD_VAR 0 2
18965: PPUSH
18966: CALL_OW 301
18970: IFFALSE 18918
// end ;
18972: PPOPN 2
18974: END
// every 0 0$1 trigger StreamModeActive and sStu do
18975: LD_EXP 26
18979: PUSH
18980: LD_EXP 65
18984: AND
18985: IFFALSE 19001
18987: GO 18989
18989: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18990: LD_STRING displayStucuk();
18992: PPUSH
18993: CALL_OW 559
// ResetFog ;
18997: CALL_OW 335
// end ;
19001: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19002: LD_EXP 26
19006: PUSH
19007: LD_EXP 58
19011: AND
19012: IFFALSE 19153
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_OWVAR 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 21
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: ST_TO_ADDR
// if not tmp then
19057: LD_VAR 0 2
19061: NOT
19062: IFFALSE 19066
// exit ;
19064: GO 19153
// un := tmp [ rand ( 1 , tmp ) ] ;
19066: LD_ADDR_VAR 0 1
19070: PUSH
19071: LD_VAR 0 2
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_VAR 0 2
19083: PPUSH
19084: CALL_OW 12
19088: ARRAY
19089: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19090: LD_VAR 0 1
19094: PPUSH
19095: LD_INT 0
19097: PPUSH
19098: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19102: LD_VAR 0 1
19106: PPUSH
19107: LD_OWVAR 3
19111: PUSH
19112: LD_VAR 0 1
19116: DIFF
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 74
19127: PPUSH
19128: CALL_OW 115
// wait ( 0 0$20 ) ;
19132: LD_INT 700
19134: PPUSH
19135: CALL_OW 67
// SetSide ( un , your_side ) ;
19139: LD_VAR 0 1
19143: PPUSH
19144: LD_OWVAR 2
19148: PPUSH
19149: CALL_OW 235
// end ;
19153: PPOPN 2
19155: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19156: LD_EXP 26
19160: PUSH
19161: LD_EXP 59
19165: AND
19166: IFFALSE 19272
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_OWVAR 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 30
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 30
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 69
19227: ST_TO_ADDR
// if not depot then
19228: LD_VAR 0 1
19232: NOT
19233: IFFALSE 19237
// exit ;
19235: GO 19272
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19237: LD_VAR 0 1
19241: PUSH
19242: LD_INT 1
19244: ARRAY
19245: PPUSH
19246: CALL_OW 250
19250: PPUSH
19251: LD_VAR 0 1
19255: PUSH
19256: LD_INT 1
19258: ARRAY
19259: PPUSH
19260: CALL_OW 251
19264: PPUSH
19265: LD_INT 70
19267: PPUSH
19268: CALL_OW 495
// end ;
19272: PPOPN 1
19274: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19275: LD_EXP 26
19279: PUSH
19280: LD_EXP 60
19284: AND
19285: IFFALSE 19496
19287: GO 19289
19289: DISABLE
19290: LD_INT 0
19292: PPUSH
19293: PPUSH
19294: PPUSH
19295: PPUSH
19296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19297: LD_ADDR_VAR 0 5
19301: PUSH
19302: LD_INT 22
19304: PUSH
19305: LD_OWVAR 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ST_TO_ADDR
// if not tmp then
19333: LD_VAR 0 5
19337: NOT
19338: IFFALSE 19342
// exit ;
19340: GO 19496
// for i in tmp do
19342: LD_ADDR_VAR 0 1
19346: PUSH
19347: LD_VAR 0 5
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19494
// begin d := rand ( 0 , 5 ) ;
19355: LD_ADDR_VAR 0 4
19359: PUSH
19360: LD_INT 0
19362: PPUSH
19363: LD_INT 5
19365: PPUSH
19366: CALL_OW 12
19370: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19371: LD_ADDR_VAR 0 2
19375: PUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 250
19385: PPUSH
19386: LD_VAR 0 4
19390: PPUSH
19391: LD_INT 3
19393: PPUSH
19394: LD_INT 12
19396: PPUSH
19397: CALL_OW 12
19401: PPUSH
19402: CALL_OW 272
19406: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19407: LD_ADDR_VAR 0 3
19411: PUSH
19412: LD_VAR 0 1
19416: PPUSH
19417: CALL_OW 251
19421: PPUSH
19422: LD_VAR 0 4
19426: PPUSH
19427: LD_INT 3
19429: PPUSH
19430: LD_INT 12
19432: PPUSH
19433: CALL_OW 12
19437: PPUSH
19438: CALL_OW 273
19442: ST_TO_ADDR
// if ValidHex ( x , y ) then
19443: LD_VAR 0 2
19447: PPUSH
19448: LD_VAR 0 3
19452: PPUSH
19453: CALL_OW 488
19457: IFFALSE 19492
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19459: LD_VAR 0 1
19463: PPUSH
19464: LD_VAR 0 2
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: LD_INT 3
19476: PPUSH
19477: LD_INT 6
19479: PPUSH
19480: CALL_OW 12
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: CALL_OW 483
// end ;
19492: GO 19352
19494: POP
19495: POP
// end ;
19496: PPOPN 5
19498: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19499: LD_EXP 26
19503: PUSH
19504: LD_EXP 61
19508: AND
19509: IFFALSE 19603
19511: GO 19513
19513: DISABLE
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_INT 22
19525: PUSH
19526: LD_OWVAR 2
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 32
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 21
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: PPUSH
19560: CALL_OW 69
19564: ST_TO_ADDR
// if not tmp then
19565: LD_VAR 0 2
19569: NOT
19570: IFFALSE 19574
// exit ;
19572: GO 19603
// for i in tmp do
19574: LD_ADDR_VAR 0 1
19578: PUSH
19579: LD_VAR 0 2
19583: PUSH
19584: FOR_IN
19585: IFFALSE 19601
// SetFuel ( i , 0 ) ;
19587: LD_VAR 0 1
19591: PPUSH
19592: LD_INT 0
19594: PPUSH
19595: CALL_OW 240
19599: GO 19584
19601: POP
19602: POP
// end ;
19603: PPOPN 2
19605: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19606: LD_EXP 26
19610: PUSH
19611: LD_EXP 62
19615: AND
19616: IFFALSE 19682
19618: GO 19620
19620: DISABLE
19621: LD_INT 0
19623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_OWVAR 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 30
19643: PUSH
19644: LD_INT 29
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 69
19659: ST_TO_ADDR
// if not tmp then
19660: LD_VAR 0 1
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19682
// DestroyUnit ( tmp [ 1 ] ) ;
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: PPUSH
19678: CALL_OW 65
// end ;
19682: PPOPN 1
19684: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19685: LD_EXP 26
19689: PUSH
19690: LD_EXP 64
19694: AND
19695: IFFALSE 19824
19697: GO 19699
19699: DISABLE
19700: LD_INT 0
19702: PPUSH
// begin uc_side := 0 ;
19703: LD_ADDR_OWVAR 20
19707: PUSH
19708: LD_INT 0
19710: ST_TO_ADDR
// uc_nation := nation_arabian ;
19711: LD_ADDR_OWVAR 21
19715: PUSH
19716: LD_INT 2
19718: ST_TO_ADDR
// hc_gallery :=  ;
19719: LD_ADDR_OWVAR 33
19723: PUSH
19724: LD_STRING 
19726: ST_TO_ADDR
// hc_name :=  ;
19727: LD_ADDR_OWVAR 26
19731: PUSH
19732: LD_STRING 
19734: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19735: LD_INT 1
19737: PPUSH
19738: LD_INT 11
19740: PPUSH
19741: LD_INT 10
19743: PPUSH
19744: CALL_OW 380
// un := CreateHuman ;
19748: LD_ADDR_VAR 0 1
19752: PUSH
19753: CALL_OW 44
19757: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19770: LD_INT 35
19772: PPUSH
19773: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_INT 22
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PPUSH
19794: CALL_OW 69
19798: PPUSH
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 74
19808: PPUSH
19809: CALL_OW 115
// until IsDead ( un ) ;
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 301
19822: IFFALSE 19770
// end ;
19824: PPOPN 1
19826: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19827: LD_EXP 26
19831: PUSH
19832: LD_EXP 66
19836: AND
19837: IFFALSE 19849
19839: GO 19841
19841: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19842: LD_STRING earthquake(getX(game), 0, 32)
19844: PPUSH
19845: CALL_OW 559
19849: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19850: LD_EXP 26
19854: PUSH
19855: LD_EXP 67
19859: AND
19860: IFFALSE 19951
19862: GO 19864
19864: DISABLE
19865: LD_INT 0
19867: PPUSH
// begin enable ;
19868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19869: LD_ADDR_VAR 0 1
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_OWVAR 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 21
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 33
19898: PUSH
19899: LD_INT 3
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: PPUSH
19911: CALL_OW 69
19915: ST_TO_ADDR
// if not tmp then
19916: LD_VAR 0 1
19920: NOT
19921: IFFALSE 19925
// exit ;
19923: GO 19951
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19925: LD_VAR 0 1
19929: PUSH
19930: LD_INT 1
19932: PPUSH
19933: LD_VAR 0 1
19937: PPUSH
19938: CALL_OW 12
19942: ARRAY
19943: PPUSH
19944: LD_INT 1
19946: PPUSH
19947: CALL_OW 234
// end ;
19951: PPOPN 1
19953: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19954: LD_EXP 26
19958: PUSH
19959: LD_EXP 68
19963: AND
19964: IFFALSE 20105
19966: GO 19968
19968: DISABLE
19969: LD_INT 0
19971: PPUSH
19972: PPUSH
19973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_INT 22
19981: PUSH
19982: LD_OWVAR 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 25
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PPUSH
20005: CALL_OW 69
20009: ST_TO_ADDR
// if not tmp then
20010: LD_VAR 0 3
20014: NOT
20015: IFFALSE 20019
// exit ;
20017: GO 20105
// un := tmp [ rand ( 1 , tmp ) ] ;
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 1
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: CALL_OW 12
20041: ARRAY
20042: ST_TO_ADDR
// if Crawls ( un ) then
20043: LD_VAR 0 2
20047: PPUSH
20048: CALL_OW 318
20052: IFFALSE 20063
// ComWalk ( un ) ;
20054: LD_VAR 0 2
20058: PPUSH
20059: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20063: LD_VAR 0 2
20067: PPUSH
20068: LD_INT 9
20070: PPUSH
20071: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20075: LD_INT 28
20077: PPUSH
20078: LD_OWVAR 2
20082: PPUSH
20083: LD_INT 2
20085: PPUSH
20086: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20090: LD_INT 29
20092: PPUSH
20093: LD_OWVAR 2
20097: PPUSH
20098: LD_INT 2
20100: PPUSH
20101: CALL_OW 322
// end ;
20105: PPOPN 3
20107: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20108: LD_EXP 26
20112: PUSH
20113: LD_EXP 69
20117: AND
20118: IFFALSE 20229
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
20127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20128: LD_ADDR_VAR 0 3
20132: PUSH
20133: LD_INT 22
20135: PUSH
20136: LD_OWVAR 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 25
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: ST_TO_ADDR
// if not tmp then
20164: LD_VAR 0 3
20168: NOT
20169: IFFALSE 20173
// exit ;
20171: GO 20229
// un := tmp [ rand ( 1 , tmp ) ] ;
20173: LD_ADDR_VAR 0 2
20177: PUSH
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 1
20185: PPUSH
20186: LD_VAR 0 3
20190: PPUSH
20191: CALL_OW 12
20195: ARRAY
20196: ST_TO_ADDR
// if Crawls ( un ) then
20197: LD_VAR 0 2
20201: PPUSH
20202: CALL_OW 318
20206: IFFALSE 20217
// ComWalk ( un ) ;
20208: LD_VAR 0 2
20212: PPUSH
20213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20217: LD_VAR 0 2
20221: PPUSH
20222: LD_INT 8
20224: PPUSH
20225: CALL_OW 336
// end ;
20229: PPOPN 3
20231: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20232: LD_EXP 26
20236: PUSH
20237: LD_EXP 70
20241: AND
20242: IFFALSE 20386
20244: GO 20246
20246: DISABLE
20247: LD_INT 0
20249: PPUSH
20250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 34
20283: PUSH
20284: LD_INT 12
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 34
20293: PUSH
20294: LD_INT 51
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 34
20303: PUSH
20304: LD_INT 32
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: PPUSH
20322: CALL_OW 69
20326: ST_TO_ADDR
// if not tmp then
20327: LD_VAR 0 2
20331: NOT
20332: IFFALSE 20336
// exit ;
20334: GO 20386
// for i in tmp do
20336: LD_ADDR_VAR 0 1
20340: PUSH
20341: LD_VAR 0 2
20345: PUSH
20346: FOR_IN
20347: IFFALSE 20384
// if GetCargo ( i , mat_artifact ) = 0 then
20349: LD_VAR 0 1
20353: PPUSH
20354: LD_INT 4
20356: PPUSH
20357: CALL_OW 289
20361: PUSH
20362: LD_INT 0
20364: EQUAL
20365: IFFALSE 20382
// SetCargo ( i , mat_siberit , 100 ) ;
20367: LD_VAR 0 1
20371: PPUSH
20372: LD_INT 3
20374: PPUSH
20375: LD_INT 100
20377: PPUSH
20378: CALL_OW 290
20382: GO 20346
20384: POP
20385: POP
// end ;
20386: PPOPN 2
20388: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20389: LD_EXP 26
20393: PUSH
20394: LD_EXP 71
20398: AND
20399: IFFALSE 20582
20401: GO 20403
20403: DISABLE
20404: LD_INT 0
20406: PPUSH
20407: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_OWVAR 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: ST_TO_ADDR
// if not tmp then
20430: LD_VAR 0 2
20434: NOT
20435: IFFALSE 20439
// exit ;
20437: GO 20582
// for i := 1 to 2 do
20439: LD_ADDR_VAR 0 1
20443: PUSH
20444: DOUBLE
20445: LD_INT 1
20447: DEC
20448: ST_TO_ADDR
20449: LD_INT 2
20451: PUSH
20452: FOR_TO
20453: IFFALSE 20580
// begin uc_side := your_side ;
20455: LD_ADDR_OWVAR 20
20459: PUSH
20460: LD_OWVAR 2
20464: ST_TO_ADDR
// uc_nation := nation_american ;
20465: LD_ADDR_OWVAR 21
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// vc_chassis := us_morphling ;
20473: LD_ADDR_OWVAR 37
20477: PUSH
20478: LD_INT 5
20480: ST_TO_ADDR
// vc_engine := engine_siberite ;
20481: LD_ADDR_OWVAR 39
20485: PUSH
20486: LD_INT 3
20488: ST_TO_ADDR
// vc_control := control_computer ;
20489: LD_ADDR_OWVAR 38
20493: PUSH
20494: LD_INT 3
20496: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20497: LD_ADDR_OWVAR 40
20501: PUSH
20502: LD_INT 10
20504: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20505: LD_VAR 0 2
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: CALL_OW 310
20518: NOT
20519: IFFALSE 20566
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20521: CALL_OW 45
20525: PPUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 1
20533: ARRAY
20534: PPUSH
20535: CALL_OW 250
20539: PPUSH
20540: LD_VAR 0 2
20544: PUSH
20545: LD_INT 1
20547: ARRAY
20548: PPUSH
20549: CALL_OW 251
20553: PPUSH
20554: LD_INT 12
20556: PPUSH
20557: LD_INT 1
20559: PPUSH
20560: CALL_OW 50
20564: GO 20578
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20566: CALL_OW 45
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 51
// end ;
20578: GO 20452
20580: POP
20581: POP
// end ;
20582: PPOPN 2
20584: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20585: LD_EXP 26
20589: PUSH
20590: LD_EXP 72
20594: AND
20595: IFFALSE 20817
20597: GO 20599
20599: DISABLE
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20608: LD_ADDR_VAR 0 6
20612: PUSH
20613: LD_INT 22
20615: PUSH
20616: LD_OWVAR 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 3
20637: PUSH
20638: LD_INT 23
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: PPUSH
20657: CALL_OW 69
20661: ST_TO_ADDR
// if not tmp then
20662: LD_VAR 0 6
20666: NOT
20667: IFFALSE 20671
// exit ;
20669: GO 20817
// s1 := rand ( 1 , 4 ) ;
20671: LD_ADDR_VAR 0 2
20675: PUSH
20676: LD_INT 1
20678: PPUSH
20679: LD_INT 4
20681: PPUSH
20682: CALL_OW 12
20686: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20687: LD_ADDR_VAR 0 4
20691: PUSH
20692: LD_VAR 0 6
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: PPUSH
20701: LD_VAR 0 2
20705: PPUSH
20706: CALL_OW 259
20710: ST_TO_ADDR
// if s1 = 1 then
20711: LD_VAR 0 2
20715: PUSH
20716: LD_INT 1
20718: EQUAL
20719: IFFALSE 20739
// s2 := rand ( 2 , 4 ) else
20721: LD_ADDR_VAR 0 3
20725: PUSH
20726: LD_INT 2
20728: PPUSH
20729: LD_INT 4
20731: PPUSH
20732: CALL_OW 12
20736: ST_TO_ADDR
20737: GO 20747
// s2 := 1 ;
20739: LD_ADDR_VAR 0 3
20743: PUSH
20744: LD_INT 1
20746: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20747: LD_ADDR_VAR 0 5
20751: PUSH
20752: LD_VAR 0 6
20756: PUSH
20757: LD_INT 1
20759: ARRAY
20760: PPUSH
20761: LD_VAR 0 3
20765: PPUSH
20766: CALL_OW 259
20770: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20771: LD_VAR 0 6
20775: PUSH
20776: LD_INT 1
20778: ARRAY
20779: PPUSH
20780: LD_VAR 0 2
20784: PPUSH
20785: LD_VAR 0 5
20789: PPUSH
20790: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20794: LD_VAR 0 6
20798: PUSH
20799: LD_INT 1
20801: ARRAY
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: LD_VAR 0 4
20812: PPUSH
20813: CALL_OW 237
// end ;
20817: PPOPN 6
20819: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20820: LD_EXP 26
20824: PUSH
20825: LD_EXP 73
20829: AND
20830: IFFALSE 20909
20832: GO 20834
20834: DISABLE
20835: LD_INT 0
20837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20838: LD_ADDR_VAR 0 1
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_OWVAR 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PPUSH
20869: CALL_OW 69
20873: ST_TO_ADDR
// if not tmp then
20874: LD_VAR 0 1
20878: NOT
20879: IFFALSE 20883
// exit ;
20881: GO 20909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20883: LD_VAR 0 1
20887: PUSH
20888: LD_INT 1
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 12
20900: ARRAY
20901: PPUSH
20902: LD_INT 1
20904: PPUSH
20905: CALL_OW 234
// end ;
20909: PPOPN 1
20911: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20912: LD_EXP 26
20916: PUSH
20917: LD_EXP 74
20921: AND
20922: IFFALSE 21034
20924: GO 20926
20926: DISABLE
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20931: LD_ADDR_VAR 0 2
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_OWVAR 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 2
20950: PUSH
20951: LD_INT 30
20953: PUSH
20954: LD_INT 27
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 30
20963: PUSH
20964: LD_INT 26
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 28
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: ST_TO_ADDR
// if not tmp then
20996: LD_VAR 0 2
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21034
// for i in tmp do
21005: LD_ADDR_VAR 0 1
21009: PUSH
21010: LD_VAR 0 2
21014: PUSH
21015: FOR_IN
21016: IFFALSE 21032
// SetLives ( i , 1 ) ;
21018: LD_VAR 0 1
21022: PPUSH
21023: LD_INT 1
21025: PPUSH
21026: CALL_OW 234
21030: GO 21015
21032: POP
21033: POP
// end ;
21034: PPOPN 2
21036: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21037: LD_EXP 26
21041: PUSH
21042: LD_EXP 75
21046: AND
21047: IFFALSE 21334
21049: GO 21051
21051: DISABLE
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
21056: PPUSH
// begin i := rand ( 1 , 7 ) ;
21057: LD_ADDR_VAR 0 1
21061: PUSH
21062: LD_INT 1
21064: PPUSH
21065: LD_INT 7
21067: PPUSH
21068: CALL_OW 12
21072: ST_TO_ADDR
// case i of 1 :
21073: LD_VAR 0 1
21077: PUSH
21078: LD_INT 1
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21096
21086: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21087: LD_STRING earthquake(getX(game), 0, 32)
21089: PPUSH
21090: CALL_OW 559
21094: GO 21334
21096: LD_INT 2
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21118
21104: POP
// begin ToLua ( displayStucuk(); ) ;
21105: LD_STRING displayStucuk();
21107: PPUSH
21108: CALL_OW 559
// ResetFog ;
21112: CALL_OW 335
// end ; 3 :
21116: GO 21334
21118: LD_INT 3
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21230
21126: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21127: LD_ADDR_VAR 0 2
21131: PUSH
21132: LD_INT 22
21134: PUSH
21135: LD_OWVAR 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 25
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PPUSH
21158: CALL_OW 69
21162: ST_TO_ADDR
// if not tmp then
21163: LD_VAR 0 2
21167: NOT
21168: IFFALSE 21172
// exit ;
21170: GO 21334
// un := tmp [ rand ( 1 , tmp ) ] ;
21172: LD_ADDR_VAR 0 3
21176: PUSH
21177: LD_VAR 0 2
21181: PUSH
21182: LD_INT 1
21184: PPUSH
21185: LD_VAR 0 2
21189: PPUSH
21190: CALL_OW 12
21194: ARRAY
21195: ST_TO_ADDR
// if Crawls ( un ) then
21196: LD_VAR 0 3
21200: PPUSH
21201: CALL_OW 318
21205: IFFALSE 21216
// ComWalk ( un ) ;
21207: LD_VAR 0 3
21211: PPUSH
21212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_INT 8
21223: PPUSH
21224: CALL_OW 336
// end ; 4 :
21228: GO 21334
21230: LD_INT 4
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21312
21238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 29
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 2
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21334
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21284: LD_VAR 0 2
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: PPUSH
21293: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21297: LD_VAR 0 2
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: CALL_OW 65
// end ; 5 .. 7 :
21310: GO 21334
21312: LD_INT 5
21314: DOUBLE
21315: GREATEREQUAL
21316: IFFALSE 21324
21318: LD_INT 7
21320: DOUBLE
21321: LESSEQUAL
21322: IFTRUE 21326
21324: GO 21333
21326: POP
// StreamSibBomb ; end ;
21327: CALL 17571 0 0
21331: GO 21334
21333: POP
// end ;
21334: PPOPN 3
21336: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21337: LD_EXP 26
21341: PUSH
21342: LD_EXP 76
21346: AND
21347: IFFALSE 21503
21349: GO 21351
21351: DISABLE
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
21356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 81
21364: PUSH
21365: LD_OWVAR 2
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: LD_INT 21
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 21
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 69
21410: ST_TO_ADDR
// if not tmp then
21411: LD_VAR 0 2
21415: NOT
21416: IFFALSE 21420
// exit ;
21418: GO 21503
// p := 0 ;
21420: LD_ADDR_VAR 0 3
21424: PUSH
21425: LD_INT 0
21427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21428: LD_INT 35
21430: PPUSH
21431: CALL_OW 67
// p := p + 1 ;
21435: LD_ADDR_VAR 0 3
21439: PUSH
21440: LD_VAR 0 3
21444: PUSH
21445: LD_INT 1
21447: PLUS
21448: ST_TO_ADDR
// for i in tmp do
21449: LD_ADDR_VAR 0 1
21453: PUSH
21454: LD_VAR 0 2
21458: PUSH
21459: FOR_IN
21460: IFFALSE 21491
// if GetLives ( i ) < 1000 then
21462: LD_VAR 0 1
21466: PPUSH
21467: CALL_OW 256
21471: PUSH
21472: LD_INT 1000
21474: LESS
21475: IFFALSE 21489
// SetLives ( i , 1000 ) ;
21477: LD_VAR 0 1
21481: PPUSH
21482: LD_INT 1000
21484: PPUSH
21485: CALL_OW 234
21489: GO 21459
21491: POP
21492: POP
// until p > 20 ;
21493: LD_VAR 0 3
21497: PUSH
21498: LD_INT 20
21500: GREATER
21501: IFFALSE 21428
// end ;
21503: PPOPN 3
21505: END
// every 0 0$1 trigger StreamModeActive and sTime do
21506: LD_EXP 26
21510: PUSH
21511: LD_EXP 77
21515: AND
21516: IFFALSE 21551
21518: GO 21520
21520: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21521: LD_INT 28
21523: PPUSH
21524: LD_OWVAR 2
21528: PPUSH
21529: LD_INT 2
21531: PPUSH
21532: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21536: LD_INT 30
21538: PPUSH
21539: LD_OWVAR 2
21543: PPUSH
21544: LD_INT 2
21546: PPUSH
21547: CALL_OW 322
// end ;
21551: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21552: LD_EXP 26
21556: PUSH
21557: LD_EXP 78
21561: AND
21562: IFFALSE 21683
21564: GO 21566
21566: DISABLE
21567: LD_INT 0
21569: PPUSH
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21571: LD_ADDR_VAR 0 2
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 21
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 23
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: PPUSH
21620: CALL_OW 69
21624: ST_TO_ADDR
// if not tmp then
21625: LD_VAR 0 2
21629: NOT
21630: IFFALSE 21634
// exit ;
21632: GO 21683
// for i in tmp do
21634: LD_ADDR_VAR 0 1
21638: PUSH
21639: LD_VAR 0 2
21643: PUSH
21644: FOR_IN
21645: IFFALSE 21681
// begin if Crawls ( i ) then
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 318
21656: IFFALSE 21667
// ComWalk ( i ) ;
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 138
// SetClass ( i , 2 ) ;
21667: LD_VAR 0 1
21671: PPUSH
21672: LD_INT 2
21674: PPUSH
21675: CALL_OW 336
// end ;
21679: GO 21644
21681: POP
21682: POP
// end ;
21683: PPOPN 2
21685: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21686: LD_EXP 26
21690: PUSH
21691: LD_EXP 79
21695: AND
21696: IFFALSE 21984
21698: GO 21700
21700: DISABLE
21701: LD_INT 0
21703: PPUSH
21704: PPUSH
21705: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21706: LD_OWVAR 2
21710: PPUSH
21711: LD_INT 9
21713: PPUSH
21714: LD_INT 1
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21724: LD_INT 9
21726: PPUSH
21727: LD_OWVAR 2
21731: PPUSH
21732: CALL_OW 343
// uc_side := 9 ;
21736: LD_ADDR_OWVAR 20
21740: PUSH
21741: LD_INT 9
21743: ST_TO_ADDR
// uc_nation := 2 ;
21744: LD_ADDR_OWVAR 21
21748: PUSH
21749: LD_INT 2
21751: ST_TO_ADDR
// hc_name := Dark Warrior ;
21752: LD_ADDR_OWVAR 26
21756: PUSH
21757: LD_STRING Dark Warrior
21759: ST_TO_ADDR
// hc_gallery :=  ;
21760: LD_ADDR_OWVAR 33
21764: PUSH
21765: LD_STRING 
21767: ST_TO_ADDR
// hc_noskilllimit := true ;
21768: LD_ADDR_OWVAR 76
21772: PUSH
21773: LD_INT 1
21775: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21776: LD_ADDR_OWVAR 31
21780: PUSH
21781: LD_INT 30
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 30
21789: PUSH
21790: LD_INT 30
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: ST_TO_ADDR
// un := CreateHuman ;
21799: LD_ADDR_VAR 0 3
21803: PUSH
21804: CALL_OW 44
21808: ST_TO_ADDR
// hc_noskilllimit := false ;
21809: LD_ADDR_OWVAR 76
21813: PUSH
21814: LD_INT 0
21816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21817: LD_VAR 0 3
21821: PPUSH
21822: LD_INT 1
21824: PPUSH
21825: CALL_OW 51
// ToLua ( playRanger() ) ;
21829: LD_STRING playRanger()
21831: PPUSH
21832: CALL_OW 559
// p := 0 ;
21836: LD_ADDR_VAR 0 2
21840: PUSH
21841: LD_INT 0
21843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21844: LD_INT 35
21846: PPUSH
21847: CALL_OW 67
// p := p + 1 ;
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_VAR 0 2
21860: PUSH
21861: LD_INT 1
21863: PLUS
21864: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21865: LD_VAR 0 3
21869: PPUSH
21870: CALL_OW 256
21874: PUSH
21875: LD_INT 1000
21877: LESS
21878: IFFALSE 21892
// SetLives ( un , 1000 ) ;
21880: LD_VAR 0 3
21884: PPUSH
21885: LD_INT 1000
21887: PPUSH
21888: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21892: LD_VAR 0 3
21896: PPUSH
21897: LD_INT 81
21899: PUSH
21900: LD_OWVAR 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 91
21911: PUSH
21912: LD_VAR 0 3
21916: PUSH
21917: LD_INT 30
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: PPUSH
21934: LD_VAR 0 3
21938: PPUSH
21939: CALL_OW 74
21943: PPUSH
21944: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21948: LD_VAR 0 2
21952: PUSH
21953: LD_INT 80
21955: GREATER
21956: PUSH
21957: LD_VAR 0 3
21961: PPUSH
21962: CALL_OW 301
21966: OR
21967: IFFALSE 21844
// if un then
21969: LD_VAR 0 3
21973: IFFALSE 21984
// RemoveUnit ( un ) ;
21975: LD_VAR 0 3
21979: PPUSH
21980: CALL_OW 64
// end ;
21984: PPOPN 3
21986: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21987: LD_EXP 80
21991: IFFALSE 22107
21993: GO 21995
21995: DISABLE
21996: LD_INT 0
21998: PPUSH
21999: PPUSH
22000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22001: LD_ADDR_VAR 0 2
22005: PUSH
22006: LD_INT 81
22008: PUSH
22009: LD_OWVAR 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PPUSH
22032: CALL_OW 69
22036: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22037: LD_STRING playComputer()
22039: PPUSH
22040: CALL_OW 559
// if not tmp then
22044: LD_VAR 0 2
22048: NOT
22049: IFFALSE 22053
// exit ;
22051: GO 22107
// for i in tmp do
22053: LD_ADDR_VAR 0 1
22057: PUSH
22058: LD_VAR 0 2
22062: PUSH
22063: FOR_IN
22064: IFFALSE 22105
// for j := 1 to 4 do
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: DOUBLE
22072: LD_INT 1
22074: DEC
22075: ST_TO_ADDR
22076: LD_INT 4
22078: PUSH
22079: FOR_TO
22080: IFFALSE 22101
// SetSkill ( i , j , 10 ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_VAR 0 3
22091: PPUSH
22092: LD_INT 10
22094: PPUSH
22095: CALL_OW 237
22099: GO 22079
22101: POP
22102: POP
22103: GO 22063
22105: POP
22106: POP
// end ;
22107: PPOPN 3
22109: END
// every 0 0$1 trigger s30 do var i , tmp ;
22110: LD_EXP 81
22114: IFFALSE 22183
22116: GO 22118
22118: DISABLE
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_INT 22
22130: PUSH
22131: LD_OWVAR 2
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: ST_TO_ADDR
// if not tmp then
22145: LD_VAR 0 2
22149: NOT
22150: IFFALSE 22154
// exit ;
22152: GO 22183
// for i in tmp do
22154: LD_ADDR_VAR 0 1
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: FOR_IN
22165: IFFALSE 22181
// SetLives ( i , 300 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_INT 300
22174: PPUSH
22175: CALL_OW 234
22179: GO 22164
22181: POP
22182: POP
// end ;
22183: PPOPN 2
22185: END
// every 0 0$1 trigger s60 do var i , tmp ;
22186: LD_EXP 82
22190: IFFALSE 22259
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22199: LD_ADDR_VAR 0 2
22203: PUSH
22204: LD_INT 22
22206: PUSH
22207: LD_OWVAR 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 69
22220: ST_TO_ADDR
// if not tmp then
22221: LD_VAR 0 2
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22259
// for i in tmp do
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_VAR 0 2
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22257
// SetLives ( i , 600 ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_INT 600
22250: PPUSH
22251: CALL_OW 234
22255: GO 22240
22257: POP
22258: POP
// end ;
22259: PPOPN 2
22261: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22262: LD_INT 0
22264: PPUSH
// case cmd of 301 :
22265: LD_VAR 0 1
22269: PUSH
22270: LD_INT 301
22272: DOUBLE
22273: EQUAL
22274: IFTRUE 22278
22276: GO 22310
22278: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22279: LD_VAR 0 6
22283: PPUSH
22284: LD_VAR 0 7
22288: PPUSH
22289: LD_VAR 0 8
22293: PPUSH
22294: LD_VAR 0 4
22298: PPUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: CALL 23511 0 5
22308: GO 22431
22310: LD_INT 302
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22355
22318: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22319: LD_VAR 0 6
22323: PPUSH
22324: LD_VAR 0 7
22328: PPUSH
22329: LD_VAR 0 8
22333: PPUSH
22334: LD_VAR 0 9
22338: PPUSH
22339: LD_VAR 0 4
22343: PPUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: CALL 23602 0 6
22353: GO 22431
22355: LD_INT 303
22357: DOUBLE
22358: EQUAL
22359: IFTRUE 22363
22361: GO 22400
22363: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22364: LD_VAR 0 6
22368: PPUSH
22369: LD_VAR 0 7
22373: PPUSH
22374: LD_VAR 0 8
22378: PPUSH
22379: LD_VAR 0 9
22383: PPUSH
22384: LD_VAR 0 4
22388: PPUSH
22389: LD_VAR 0 5
22393: PPUSH
22394: CALL 22436 0 6
22398: GO 22431
22400: LD_INT 304
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22430
22408: POP
// hHackTeleport ( unit , x , y ) ; end ;
22409: LD_VAR 0 2
22413: PPUSH
22414: LD_VAR 0 4
22418: PPUSH
22419: LD_VAR 0 5
22423: PPUSH
22424: CALL 24195 0 3
22428: GO 22431
22430: POP
// end ;
22431: LD_VAR 0 12
22435: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22436: LD_INT 0
22438: PPUSH
22439: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22440: LD_VAR 0 1
22444: PUSH
22445: LD_INT 1
22447: LESS
22448: PUSH
22449: LD_VAR 0 1
22453: PUSH
22454: LD_INT 3
22456: GREATER
22457: OR
22458: PUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: LD_VAR 0 6
22468: PPUSH
22469: CALL_OW 428
22473: OR
22474: IFFALSE 22478
// exit ;
22476: GO 23198
// uc_side := your_side ;
22478: LD_ADDR_OWVAR 20
22482: PUSH
22483: LD_OWVAR 2
22487: ST_TO_ADDR
// uc_nation := nation ;
22488: LD_ADDR_OWVAR 21
22492: PUSH
22493: LD_VAR 0 1
22497: ST_TO_ADDR
// bc_level = 1 ;
22498: LD_ADDR_OWVAR 43
22502: PUSH
22503: LD_INT 1
22505: ST_TO_ADDR
// case btype of 1 :
22506: LD_VAR 0 2
22510: PUSH
22511: LD_INT 1
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22530
22519: POP
// bc_type := b_depot ; 2 :
22520: LD_ADDR_OWVAR 42
22524: PUSH
22525: LD_INT 0
22527: ST_TO_ADDR
22528: GO 23142
22530: LD_INT 2
22532: DOUBLE
22533: EQUAL
22534: IFTRUE 22538
22536: GO 22549
22538: POP
// bc_type := b_warehouse ; 3 :
22539: LD_ADDR_OWVAR 42
22543: PUSH
22544: LD_INT 1
22546: ST_TO_ADDR
22547: GO 23142
22549: LD_INT 3
22551: DOUBLE
22552: EQUAL
22553: IFTRUE 22557
22555: GO 22568
22557: POP
// bc_type := b_lab ; 4 .. 9 :
22558: LD_ADDR_OWVAR 42
22562: PUSH
22563: LD_INT 6
22565: ST_TO_ADDR
22566: GO 23142
22568: LD_INT 4
22570: DOUBLE
22571: GREATEREQUAL
22572: IFFALSE 22580
22574: LD_INT 9
22576: DOUBLE
22577: LESSEQUAL
22578: IFTRUE 22582
22580: GO 22634
22582: POP
// begin bc_type := b_lab_half ;
22583: LD_ADDR_OWVAR 42
22587: PUSH
22588: LD_INT 7
22590: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22591: LD_ADDR_OWVAR 44
22595: PUSH
22596: LD_INT 10
22598: PUSH
22599: LD_INT 11
22601: PUSH
22602: LD_INT 12
22604: PUSH
22605: LD_INT 15
22607: PUSH
22608: LD_INT 14
22610: PUSH
22611: LD_INT 13
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: LD_VAR 0 2
22626: PUSH
22627: LD_INT 3
22629: MINUS
22630: ARRAY
22631: ST_TO_ADDR
// end ; 10 .. 13 :
22632: GO 23142
22634: LD_INT 10
22636: DOUBLE
22637: GREATEREQUAL
22638: IFFALSE 22646
22640: LD_INT 13
22642: DOUBLE
22643: LESSEQUAL
22644: IFTRUE 22648
22646: GO 22725
22648: POP
// begin bc_type := b_lab_full ;
22649: LD_ADDR_OWVAR 42
22653: PUSH
22654: LD_INT 8
22656: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22657: LD_ADDR_OWVAR 44
22661: PUSH
22662: LD_INT 10
22664: PUSH
22665: LD_INT 12
22667: PUSH
22668: LD_INT 14
22670: PUSH
22671: LD_INT 13
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: LD_VAR 0 2
22684: PUSH
22685: LD_INT 9
22687: MINUS
22688: ARRAY
22689: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22690: LD_ADDR_OWVAR 45
22694: PUSH
22695: LD_INT 11
22697: PUSH
22698: LD_INT 15
22700: PUSH
22701: LD_INT 12
22703: PUSH
22704: LD_INT 15
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_VAR 0 2
22717: PUSH
22718: LD_INT 9
22720: MINUS
22721: ARRAY
22722: ST_TO_ADDR
// end ; 14 :
22723: GO 23142
22725: LD_INT 14
22727: DOUBLE
22728: EQUAL
22729: IFTRUE 22733
22731: GO 22744
22733: POP
// bc_type := b_workshop ; 15 :
22734: LD_ADDR_OWVAR 42
22738: PUSH
22739: LD_INT 2
22741: ST_TO_ADDR
22742: GO 23142
22744: LD_INT 15
22746: DOUBLE
22747: EQUAL
22748: IFTRUE 22752
22750: GO 22763
22752: POP
// bc_type := b_factory ; 16 :
22753: LD_ADDR_OWVAR 42
22757: PUSH
22758: LD_INT 3
22760: ST_TO_ADDR
22761: GO 23142
22763: LD_INT 16
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22782
22771: POP
// bc_type := b_ext_gun ; 17 :
22772: LD_ADDR_OWVAR 42
22776: PUSH
22777: LD_INT 17
22779: ST_TO_ADDR
22780: GO 23142
22782: LD_INT 17
22784: DOUBLE
22785: EQUAL
22786: IFTRUE 22790
22788: GO 22818
22790: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22791: LD_ADDR_OWVAR 42
22795: PUSH
22796: LD_INT 19
22798: PUSH
22799: LD_INT 23
22801: PUSH
22802: LD_INT 19
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: PUSH
22810: LD_VAR 0 1
22814: ARRAY
22815: ST_TO_ADDR
22816: GO 23142
22818: LD_INT 18
22820: DOUBLE
22821: EQUAL
22822: IFTRUE 22826
22824: GO 22837
22826: POP
// bc_type := b_ext_radar ; 19 :
22827: LD_ADDR_OWVAR 42
22831: PUSH
22832: LD_INT 20
22834: ST_TO_ADDR
22835: GO 23142
22837: LD_INT 19
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 22856
22845: POP
// bc_type := b_ext_radio ; 20 :
22846: LD_ADDR_OWVAR 42
22850: PUSH
22851: LD_INT 22
22853: ST_TO_ADDR
22854: GO 23142
22856: LD_INT 20
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 22875
22864: POP
// bc_type := b_ext_siberium ; 21 :
22865: LD_ADDR_OWVAR 42
22869: PUSH
22870: LD_INT 21
22872: ST_TO_ADDR
22873: GO 23142
22875: LD_INT 21
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22894
22883: POP
// bc_type := b_ext_computer ; 22 :
22884: LD_ADDR_OWVAR 42
22888: PUSH
22889: LD_INT 24
22891: ST_TO_ADDR
22892: GO 23142
22894: LD_INT 22
22896: DOUBLE
22897: EQUAL
22898: IFTRUE 22902
22900: GO 22913
22902: POP
// bc_type := b_ext_track ; 23 :
22903: LD_ADDR_OWVAR 42
22907: PUSH
22908: LD_INT 16
22910: ST_TO_ADDR
22911: GO 23142
22913: LD_INT 23
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 22932
22921: POP
// bc_type := b_ext_laser ; 24 :
22922: LD_ADDR_OWVAR 42
22926: PUSH
22927: LD_INT 25
22929: ST_TO_ADDR
22930: GO 23142
22932: LD_INT 24
22934: DOUBLE
22935: EQUAL
22936: IFTRUE 22940
22938: GO 22951
22940: POP
// bc_type := b_control_tower ; 25 :
22941: LD_ADDR_OWVAR 42
22945: PUSH
22946: LD_INT 36
22948: ST_TO_ADDR
22949: GO 23142
22951: LD_INT 25
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 22970
22959: POP
// bc_type := b_breastwork ; 26 :
22960: LD_ADDR_OWVAR 42
22964: PUSH
22965: LD_INT 31
22967: ST_TO_ADDR
22968: GO 23142
22970: LD_INT 26
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 22989
22978: POP
// bc_type := b_bunker ; 27 :
22979: LD_ADDR_OWVAR 42
22983: PUSH
22984: LD_INT 32
22986: ST_TO_ADDR
22987: GO 23142
22989: LD_INT 27
22991: DOUBLE
22992: EQUAL
22993: IFTRUE 22997
22995: GO 23008
22997: POP
// bc_type := b_turret ; 28 :
22998: LD_ADDR_OWVAR 42
23002: PUSH
23003: LD_INT 33
23005: ST_TO_ADDR
23006: GO 23142
23008: LD_INT 28
23010: DOUBLE
23011: EQUAL
23012: IFTRUE 23016
23014: GO 23027
23016: POP
// bc_type := b_armoury ; 29 :
23017: LD_ADDR_OWVAR 42
23021: PUSH
23022: LD_INT 4
23024: ST_TO_ADDR
23025: GO 23142
23027: LD_INT 29
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23046
23035: POP
// bc_type := b_barracks ; 30 :
23036: LD_ADDR_OWVAR 42
23040: PUSH
23041: LD_INT 5
23043: ST_TO_ADDR
23044: GO 23142
23046: LD_INT 30
23048: DOUBLE
23049: EQUAL
23050: IFTRUE 23054
23052: GO 23065
23054: POP
// bc_type := b_solar_power ; 31 :
23055: LD_ADDR_OWVAR 42
23059: PUSH
23060: LD_INT 27
23062: ST_TO_ADDR
23063: GO 23142
23065: LD_INT 31
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23073
23071: GO 23084
23073: POP
// bc_type := b_oil_power ; 32 :
23074: LD_ADDR_OWVAR 42
23078: PUSH
23079: LD_INT 26
23081: ST_TO_ADDR
23082: GO 23142
23084: LD_INT 32
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23103
23092: POP
// bc_type := b_siberite_power ; 33 :
23093: LD_ADDR_OWVAR 42
23097: PUSH
23098: LD_INT 28
23100: ST_TO_ADDR
23101: GO 23142
23103: LD_INT 33
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23111
23109: GO 23122
23111: POP
// bc_type := b_oil_mine ; 34 :
23112: LD_ADDR_OWVAR 42
23116: PUSH
23117: LD_INT 29
23119: ST_TO_ADDR
23120: GO 23142
23122: LD_INT 34
23124: DOUBLE
23125: EQUAL
23126: IFTRUE 23130
23128: GO 23141
23130: POP
// bc_type := b_siberite_mine ; end ;
23131: LD_ADDR_OWVAR 42
23135: PUSH
23136: LD_INT 30
23138: ST_TO_ADDR
23139: GO 23142
23141: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23142: LD_ADDR_VAR 0 8
23146: PUSH
23147: LD_VAR 0 5
23151: PPUSH
23152: LD_VAR 0 6
23156: PPUSH
23157: LD_VAR 0 3
23161: PPUSH
23162: CALL_OW 47
23166: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23167: LD_OWVAR 42
23171: PUSH
23172: LD_INT 32
23174: PUSH
23175: LD_INT 33
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: IN
23182: IFFALSE 23198
// PlaceWeaponTurret ( b , weapon ) ;
23184: LD_VAR 0 8
23188: PPUSH
23189: LD_VAR 0 4
23193: PPUSH
23194: CALL_OW 431
// end ;
23198: LD_VAR 0 7
23202: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23203: LD_INT 0
23205: PPUSH
23206: PPUSH
23207: PPUSH
23208: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: LD_INT 22
23216: PUSH
23217: LD_OWVAR 2
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: LD_INT 30
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PPUSH
23258: CALL_OW 69
23262: ST_TO_ADDR
// if not tmp then
23263: LD_VAR 0 4
23267: NOT
23268: IFFALSE 23272
// exit ;
23270: GO 23331
// for i in tmp do
23272: LD_ADDR_VAR 0 2
23276: PUSH
23277: LD_VAR 0 4
23281: PUSH
23282: FOR_IN
23283: IFFALSE 23329
// for j = 1 to 3 do
23285: LD_ADDR_VAR 0 3
23289: PUSH
23290: DOUBLE
23291: LD_INT 1
23293: DEC
23294: ST_TO_ADDR
23295: LD_INT 3
23297: PUSH
23298: FOR_TO
23299: IFFALSE 23325
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23301: LD_VAR 0 2
23305: PPUSH
23306: CALL_OW 274
23310: PPUSH
23311: LD_VAR 0 3
23315: PPUSH
23316: LD_INT 99999
23318: PPUSH
23319: CALL_OW 277
23323: GO 23298
23325: POP
23326: POP
23327: GO 23282
23329: POP
23330: POP
// end ;
23331: LD_VAR 0 1
23335: RET
// export function hHackSetLevel10 ; var i , j ; begin
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
23340: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23341: LD_ADDR_VAR 0 2
23345: PUSH
23346: LD_INT 21
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PPUSH
23356: CALL_OW 69
23360: PUSH
23361: FOR_IN
23362: IFFALSE 23414
// if IsSelected ( i ) then
23364: LD_VAR 0 2
23368: PPUSH
23369: CALL_OW 306
23373: IFFALSE 23412
// begin for j := 1 to 4 do
23375: LD_ADDR_VAR 0 3
23379: PUSH
23380: DOUBLE
23381: LD_INT 1
23383: DEC
23384: ST_TO_ADDR
23385: LD_INT 4
23387: PUSH
23388: FOR_TO
23389: IFFALSE 23410
// SetSkill ( i , j , 10 ) ;
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 10
23403: PPUSH
23404: CALL_OW 237
23408: GO 23388
23410: POP
23411: POP
// end ;
23412: GO 23361
23414: POP
23415: POP
// end ;
23416: LD_VAR 0 1
23420: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23421: LD_INT 0
23423: PPUSH
23424: PPUSH
23425: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_OWVAR 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 21
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PPUSH
23457: CALL_OW 69
23461: PUSH
23462: FOR_IN
23463: IFFALSE 23504
// begin for j := 1 to 4 do
23465: LD_ADDR_VAR 0 3
23469: PUSH
23470: DOUBLE
23471: LD_INT 1
23473: DEC
23474: ST_TO_ADDR
23475: LD_INT 4
23477: PUSH
23478: FOR_TO
23479: IFFALSE 23500
// SetSkill ( i , j , 10 ) ;
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_VAR 0 3
23490: PPUSH
23491: LD_INT 10
23493: PPUSH
23494: CALL_OW 237
23498: GO 23478
23500: POP
23501: POP
// end ;
23502: GO 23462
23504: POP
23505: POP
// end ;
23506: LD_VAR 0 1
23510: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23511: LD_INT 0
23513: PPUSH
// uc_side := your_side ;
23514: LD_ADDR_OWVAR 20
23518: PUSH
23519: LD_OWVAR 2
23523: ST_TO_ADDR
// uc_nation := nation ;
23524: LD_ADDR_OWVAR 21
23528: PUSH
23529: LD_VAR 0 1
23533: ST_TO_ADDR
// InitHc ;
23534: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23538: LD_INT 0
23540: PPUSH
23541: LD_VAR 0 2
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23555: LD_VAR 0 4
23559: PPUSH
23560: LD_VAR 0 5
23564: PPUSH
23565: CALL_OW 428
23569: PUSH
23570: LD_INT 0
23572: EQUAL
23573: IFFALSE 23597
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23575: CALL_OW 44
23579: PPUSH
23580: LD_VAR 0 4
23584: PPUSH
23585: LD_VAR 0 5
23589: PPUSH
23590: LD_INT 1
23592: PPUSH
23593: CALL_OW 48
// end ;
23597: LD_VAR 0 6
23601: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23602: LD_INT 0
23604: PPUSH
23605: PPUSH
// uc_side := your_side ;
23606: LD_ADDR_OWVAR 20
23610: PUSH
23611: LD_OWVAR 2
23615: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23616: LD_VAR 0 1
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: LD_INT 3
23629: PUSH
23630: LD_INT 4
23632: PUSH
23633: LD_INT 5
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: IN
23643: IFFALSE 23655
// uc_nation := nation_american else
23645: LD_ADDR_OWVAR 21
23649: PUSH
23650: LD_INT 1
23652: ST_TO_ADDR
23653: GO 23698
// if chassis in [ 11 , 12 , 13 , 14 ] then
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 11
23662: PUSH
23663: LD_INT 12
23665: PUSH
23666: LD_INT 13
23668: PUSH
23669: LD_INT 14
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: IN
23678: IFFALSE 23690
// uc_nation := nation_arabian else
23680: LD_ADDR_OWVAR 21
23684: PUSH
23685: LD_INT 2
23687: ST_TO_ADDR
23688: GO 23698
// uc_nation := nation_russian ;
23690: LD_ADDR_OWVAR 21
23694: PUSH
23695: LD_INT 3
23697: ST_TO_ADDR
// vc_chassis := chassis ;
23698: LD_ADDR_OWVAR 37
23702: PUSH
23703: LD_VAR 0 1
23707: ST_TO_ADDR
// vc_engine := engine ;
23708: LD_ADDR_OWVAR 39
23712: PUSH
23713: LD_VAR 0 2
23717: ST_TO_ADDR
// vc_control := control ;
23718: LD_ADDR_OWVAR 38
23722: PUSH
23723: LD_VAR 0 3
23727: ST_TO_ADDR
// vc_weapon := weapon ;
23728: LD_ADDR_OWVAR 40
23732: PUSH
23733: LD_VAR 0 4
23737: ST_TO_ADDR
// un := CreateVehicle ;
23738: LD_ADDR_VAR 0 8
23742: PUSH
23743: CALL_OW 45
23747: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23748: LD_VAR 0 8
23752: PPUSH
23753: LD_INT 0
23755: PPUSH
23756: LD_INT 5
23758: PPUSH
23759: CALL_OW 12
23763: PPUSH
23764: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23768: LD_VAR 0 8
23772: PPUSH
23773: LD_VAR 0 5
23777: PPUSH
23778: LD_VAR 0 6
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 48
// end ;
23790: LD_VAR 0 7
23794: RET
// export hInvincible ; every 1 do
23795: GO 23797
23797: DISABLE
// hInvincible := [ ] ;
23798: LD_ADDR_EXP 83
23802: PUSH
23803: EMPTY
23804: ST_TO_ADDR
23805: END
// every 10 do var i ;
23806: GO 23808
23808: DISABLE
23809: LD_INT 0
23811: PPUSH
// begin enable ;
23812: ENABLE
// if not hInvincible then
23813: LD_EXP 83
23817: NOT
23818: IFFALSE 23822
// exit ;
23820: GO 23866
// for i in hInvincible do
23822: LD_ADDR_VAR 0 1
23826: PUSH
23827: LD_EXP 83
23831: PUSH
23832: FOR_IN
23833: IFFALSE 23864
// if GetLives ( i ) < 1000 then
23835: LD_VAR 0 1
23839: PPUSH
23840: CALL_OW 256
23844: PUSH
23845: LD_INT 1000
23847: LESS
23848: IFFALSE 23862
// SetLives ( i , 1000 ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_INT 1000
23857: PPUSH
23858: CALL_OW 234
23862: GO 23832
23864: POP
23865: POP
// end ;
23866: PPOPN 1
23868: END
// export function hHackInvincible ; var i ; begin
23869: LD_INT 0
23871: PPUSH
23872: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23873: LD_ADDR_VAR 0 2
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 21
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 21
23893: PUSH
23894: LD_INT 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 69
23910: PUSH
23911: FOR_IN
23912: IFFALSE 23973
// if IsSelected ( i ) then
23914: LD_VAR 0 2
23918: PPUSH
23919: CALL_OW 306
23923: IFFALSE 23971
// begin if i in hInvincible then
23925: LD_VAR 0 2
23929: PUSH
23930: LD_EXP 83
23934: IN
23935: IFFALSE 23955
// hInvincible := hInvincible diff i else
23937: LD_ADDR_EXP 83
23941: PUSH
23942: LD_EXP 83
23946: PUSH
23947: LD_VAR 0 2
23951: DIFF
23952: ST_TO_ADDR
23953: GO 23971
// hInvincible := hInvincible union i ;
23955: LD_ADDR_EXP 83
23959: PUSH
23960: LD_EXP 83
23964: PUSH
23965: LD_VAR 0 2
23969: UNION
23970: ST_TO_ADDR
// end ;
23971: GO 23911
23973: POP
23974: POP
// end ;
23975: LD_VAR 0 1
23979: RET
// export function hHackInvisible ; var i , j ; begin
23980: LD_INT 0
23982: PPUSH
23983: PPUSH
23984: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23985: LD_ADDR_VAR 0 2
23989: PUSH
23990: LD_INT 21
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PPUSH
24000: CALL_OW 69
24004: PUSH
24005: FOR_IN
24006: IFFALSE 24030
// if IsSelected ( i ) then
24008: LD_VAR 0 2
24012: PPUSH
24013: CALL_OW 306
24017: IFFALSE 24028
// ComForceInvisible ( i ) ;
24019: LD_VAR 0 2
24023: PPUSH
24024: CALL_OW 496
24028: GO 24005
24030: POP
24031: POP
// end ;
24032: LD_VAR 0 1
24036: RET
// export function hHackChangeYourSide ; begin
24037: LD_INT 0
24039: PPUSH
// if your_side = 8 then
24040: LD_OWVAR 2
24044: PUSH
24045: LD_INT 8
24047: EQUAL
24048: IFFALSE 24060
// your_side := 0 else
24050: LD_ADDR_OWVAR 2
24054: PUSH
24055: LD_INT 0
24057: ST_TO_ADDR
24058: GO 24074
// your_side := your_side + 1 ;
24060: LD_ADDR_OWVAR 2
24064: PUSH
24065: LD_OWVAR 2
24069: PUSH
24070: LD_INT 1
24072: PLUS
24073: ST_TO_ADDR
// end ;
24074: LD_VAR 0 1
24078: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24079: LD_INT 0
24081: PPUSH
24082: PPUSH
24083: PPUSH
// for i in all_units do
24084: LD_ADDR_VAR 0 2
24088: PUSH
24089: LD_OWVAR 3
24093: PUSH
24094: FOR_IN
24095: IFFALSE 24173
// if IsSelected ( i ) then
24097: LD_VAR 0 2
24101: PPUSH
24102: CALL_OW 306
24106: IFFALSE 24171
// begin j := GetSide ( i ) ;
24108: LD_ADDR_VAR 0 3
24112: PUSH
24113: LD_VAR 0 2
24117: PPUSH
24118: CALL_OW 255
24122: ST_TO_ADDR
// if j = 8 then
24123: LD_VAR 0 3
24127: PUSH
24128: LD_INT 8
24130: EQUAL
24131: IFFALSE 24143
// j := 0 else
24133: LD_ADDR_VAR 0 3
24137: PUSH
24138: LD_INT 0
24140: ST_TO_ADDR
24141: GO 24157
// j := j + 1 ;
24143: LD_ADDR_VAR 0 3
24147: PUSH
24148: LD_VAR 0 3
24152: PUSH
24153: LD_INT 1
24155: PLUS
24156: ST_TO_ADDR
// SetSide ( i , j ) ;
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_VAR 0 3
24166: PPUSH
24167: CALL_OW 235
// end ;
24171: GO 24094
24173: POP
24174: POP
// end ;
24175: LD_VAR 0 1
24179: RET
// export function hHackFog ; begin
24180: LD_INT 0
24182: PPUSH
// FogOff ( true ) ;
24183: LD_INT 1
24185: PPUSH
24186: CALL_OW 344
// end ;
24190: LD_VAR 0 1
24194: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24195: LD_INT 0
24197: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_VAR 0 3
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: LD_INT 1
24218: PPUSH
24219: CALL_OW 483
// CenterOnXY ( x , y ) ;
24223: LD_VAR 0 2
24227: PPUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: CALL_OW 84
// end ;
24237: LD_VAR 0 4
24241: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24242: LD_INT 0
24244: PPUSH
24245: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24246: LD_VAR 0 1
24250: NOT
24251: PUSH
24252: LD_VAR 0 2
24256: PPUSH
24257: LD_VAR 0 3
24261: PPUSH
24262: CALL_OW 488
24266: NOT
24267: OR
24268: PUSH
24269: LD_VAR 0 1
24273: PPUSH
24274: CALL_OW 266
24278: PUSH
24279: LD_INT 3
24281: NONEQUAL
24282: PUSH
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 247
24292: PUSH
24293: LD_INT 1
24295: EQUAL
24296: NOT
24297: AND
24298: OR
24299: IFFALSE 24303
// exit ;
24301: GO 24452
// if GetType ( factory ) = unit_human then
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL_OW 247
24312: PUSH
24313: LD_INT 1
24315: EQUAL
24316: IFFALSE 24333
// factory := IsInUnit ( factory ) ;
24318: LD_ADDR_VAR 0 1
24322: PUSH
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 310
24332: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 266
24342: PUSH
24343: LD_INT 3
24345: NONEQUAL
24346: IFFALSE 24350
// exit ;
24348: GO 24452
// if HexInfo ( x , y ) = factory then
24350: LD_VAR 0 2
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: CALL_OW 428
24364: PUSH
24365: LD_VAR 0 1
24369: EQUAL
24370: IFFALSE 24397
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24372: LD_ADDR_EXP 84
24376: PUSH
24377: LD_EXP 84
24381: PPUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_INT 0
24389: PPUSH
24390: CALL_OW 1
24394: ST_TO_ADDR
24395: GO 24448
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24397: LD_ADDR_EXP 84
24401: PUSH
24402: LD_EXP 84
24406: PPUSH
24407: LD_VAR 0 1
24411: PPUSH
24412: LD_VAR 0 1
24416: PPUSH
24417: CALL_OW 255
24421: PUSH
24422: LD_VAR 0 1
24426: PUSH
24427: LD_VAR 0 2
24431: PUSH
24432: LD_VAR 0 3
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 1
24447: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24448: CALL 24457 0 0
// end ;
24452: LD_VAR 0 4
24456: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24457: LD_INT 0
24459: PPUSH
24460: PPUSH
24461: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24462: LD_STRING resetFactoryWaypoint();
24464: PPUSH
24465: CALL_OW 559
// if factoryWaypoints then
24469: LD_EXP 84
24473: IFFALSE 24599
// begin list := PrepareArray ( factoryWaypoints ) ;
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: LD_EXP 84
24484: PPUSH
24485: CALL 71191 0 1
24489: ST_TO_ADDR
// for i := 1 to list do
24490: LD_ADDR_VAR 0 2
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_VAR 0 3
24504: PUSH
24505: FOR_TO
24506: IFFALSE 24597
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24508: LD_STRING setFactoryWaypointXY(
24510: PUSH
24511: LD_VAR 0 3
24515: PUSH
24516: LD_VAR 0 2
24520: ARRAY
24521: PUSH
24522: LD_INT 1
24524: ARRAY
24525: STR
24526: PUSH
24527: LD_STRING ,
24529: STR
24530: PUSH
24531: LD_VAR 0 3
24535: PUSH
24536: LD_VAR 0 2
24540: ARRAY
24541: PUSH
24542: LD_INT 2
24544: ARRAY
24545: STR
24546: PUSH
24547: LD_STRING ,
24549: STR
24550: PUSH
24551: LD_VAR 0 3
24555: PUSH
24556: LD_VAR 0 2
24560: ARRAY
24561: PUSH
24562: LD_INT 3
24564: ARRAY
24565: STR
24566: PUSH
24567: LD_STRING ,
24569: STR
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 2
24580: ARRAY
24581: PUSH
24582: LD_INT 4
24584: ARRAY
24585: STR
24586: PUSH
24587: LD_STRING )
24589: STR
24590: PPUSH
24591: CALL_OW 559
24595: GO 24505
24597: POP
24598: POP
// end ; end ;
24599: LD_VAR 0 1
24603: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24604: LD_INT 0
24606: PPUSH
// if HexInfo ( x , y ) = warehouse then
24607: LD_VAR 0 2
24611: PPUSH
24612: LD_VAR 0 3
24616: PPUSH
24617: CALL_OW 428
24621: PUSH
24622: LD_VAR 0 1
24626: EQUAL
24627: IFFALSE 24654
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24629: LD_ADDR_EXP 85
24633: PUSH
24634: LD_EXP 85
24638: PPUSH
24639: LD_VAR 0 1
24643: PPUSH
24644: LD_INT 0
24646: PPUSH
24647: CALL_OW 1
24651: ST_TO_ADDR
24652: GO 24705
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24654: LD_ADDR_EXP 85
24658: PUSH
24659: LD_EXP 85
24663: PPUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 255
24678: PUSH
24679: LD_VAR 0 1
24683: PUSH
24684: LD_VAR 0 2
24688: PUSH
24689: LD_VAR 0 3
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: PPUSH
24700: CALL_OW 1
24704: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24705: CALL 24714 0 0
// end ;
24709: LD_VAR 0 4
24713: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24714: LD_INT 0
24716: PPUSH
24717: PPUSH
24718: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24719: LD_STRING resetWarehouseGatheringPoints();
24721: PPUSH
24722: CALL_OW 559
// if warehouseGatheringPoints then
24726: LD_EXP 85
24730: IFFALSE 24856
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_EXP 85
24741: PPUSH
24742: CALL 71191 0 1
24746: ST_TO_ADDR
// for i := 1 to list do
24747: LD_ADDR_VAR 0 2
24751: PUSH
24752: DOUBLE
24753: LD_INT 1
24755: DEC
24756: ST_TO_ADDR
24757: LD_VAR 0 3
24761: PUSH
24762: FOR_TO
24763: IFFALSE 24854
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24765: LD_STRING setWarehouseGatheringPointXY(
24767: PUSH
24768: LD_VAR 0 3
24772: PUSH
24773: LD_VAR 0 2
24777: ARRAY
24778: PUSH
24779: LD_INT 1
24781: ARRAY
24782: STR
24783: PUSH
24784: LD_STRING ,
24786: STR
24787: PUSH
24788: LD_VAR 0 3
24792: PUSH
24793: LD_VAR 0 2
24797: ARRAY
24798: PUSH
24799: LD_INT 2
24801: ARRAY
24802: STR
24803: PUSH
24804: LD_STRING ,
24806: STR
24807: PUSH
24808: LD_VAR 0 3
24812: PUSH
24813: LD_VAR 0 2
24817: ARRAY
24818: PUSH
24819: LD_INT 3
24821: ARRAY
24822: STR
24823: PUSH
24824: LD_STRING ,
24826: STR
24827: PUSH
24828: LD_VAR 0 3
24832: PUSH
24833: LD_VAR 0 2
24837: ARRAY
24838: PUSH
24839: LD_INT 4
24841: ARRAY
24842: STR
24843: PUSH
24844: LD_STRING )
24846: STR
24847: PPUSH
24848: CALL_OW 559
24852: GO 24762
24854: POP
24855: POP
// end ; end ;
24856: LD_VAR 0 1
24860: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24861: LD_EXP 85
24865: IFFALSE 25552
24867: GO 24869
24869: DISABLE
24870: LD_INT 0
24872: PPUSH
24873: PPUSH
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
// begin enable ;
24881: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_EXP 85
24891: PPUSH
24892: CALL 71191 0 1
24896: ST_TO_ADDR
// if not list then
24897: LD_VAR 0 3
24901: NOT
24902: IFFALSE 24906
// exit ;
24904: GO 25552
// for i := 1 to list do
24906: LD_ADDR_VAR 0 1
24910: PUSH
24911: DOUBLE
24912: LD_INT 1
24914: DEC
24915: ST_TO_ADDR
24916: LD_VAR 0 3
24920: PUSH
24921: FOR_TO
24922: IFFALSE 25550
// begin depot := list [ i ] [ 2 ] ;
24924: LD_ADDR_VAR 0 8
24928: PUSH
24929: LD_VAR 0 3
24933: PUSH
24934: LD_VAR 0 1
24938: ARRAY
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24944: LD_ADDR_VAR 0 5
24948: PUSH
24949: LD_VAR 0 3
24953: PUSH
24954: LD_VAR 0 1
24958: ARRAY
24959: PUSH
24960: LD_INT 1
24962: ARRAY
24963: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24964: LD_VAR 0 8
24968: PPUSH
24969: CALL_OW 301
24973: PUSH
24974: LD_VAR 0 5
24978: PUSH
24979: LD_VAR 0 8
24983: PPUSH
24984: CALL_OW 255
24988: NONEQUAL
24989: OR
24990: IFFALSE 25019
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24992: LD_ADDR_EXP 85
24996: PUSH
24997: LD_EXP 85
25001: PPUSH
25002: LD_VAR 0 8
25006: PPUSH
25007: LD_INT 0
25009: PPUSH
25010: CALL_OW 1
25014: ST_TO_ADDR
// exit ;
25015: POP
25016: POP
25017: GO 25552
// end ; x := list [ i ] [ 3 ] ;
25019: LD_ADDR_VAR 0 6
25023: PUSH
25024: LD_VAR 0 3
25028: PUSH
25029: LD_VAR 0 1
25033: ARRAY
25034: PUSH
25035: LD_INT 3
25037: ARRAY
25038: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25039: LD_ADDR_VAR 0 7
25043: PUSH
25044: LD_VAR 0 3
25048: PUSH
25049: LD_VAR 0 1
25053: ARRAY
25054: PUSH
25055: LD_INT 4
25057: ARRAY
25058: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25059: LD_ADDR_VAR 0 9
25063: PUSH
25064: LD_VAR 0 6
25068: PPUSH
25069: LD_VAR 0 7
25073: PPUSH
25074: LD_INT 16
25076: PPUSH
25077: CALL 69775 0 3
25081: ST_TO_ADDR
// if not cratesNearbyPoint then
25082: LD_VAR 0 9
25086: NOT
25087: IFFALSE 25093
// exit ;
25089: POP
25090: POP
25091: GO 25552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25093: LD_ADDR_VAR 0 4
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_VAR 0 5
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 3
25112: PUSH
25113: LD_INT 60
25115: PUSH
25116: EMPTY
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 91
25125: PUSH
25126: LD_VAR 0 8
25130: PUSH
25131: LD_INT 6
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 25
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 25
25154: PUSH
25155: LD_INT 16
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: PUSH
25178: LD_VAR 0 8
25182: PPUSH
25183: CALL_OW 313
25187: PPUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 60
25193: PUSH
25194: EMPTY
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: LD_INT 25
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 25
25216: PUSH
25217: LD_INT 16
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PPUSH
25233: CALL_OW 72
25237: UNION
25238: ST_TO_ADDR
// if tmp then
25239: LD_VAR 0 4
25243: IFFALSE 25323
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25245: LD_ADDR_VAR 0 4
25249: PUSH
25250: LD_VAR 0 4
25254: PPUSH
25255: LD_INT 3
25257: PPUSH
25258: CALL 67742 0 2
25262: ST_TO_ADDR
// for j in tmp do
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 4
25272: PUSH
25273: FOR_IN
25274: IFFALSE 25317
// begin if IsInUnit ( j ) then
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL_OW 310
25285: IFFALSE 25296
// ComExit ( j ) ;
25287: LD_VAR 0 2
25291: PPUSH
25292: CALL 67825 0 1
// AddComCollect ( j , x , y ) ;
25296: LD_VAR 0 2
25300: PPUSH
25301: LD_VAR 0 6
25305: PPUSH
25306: LD_VAR 0 7
25310: PPUSH
25311: CALL_OW 177
// end ;
25315: GO 25273
25317: POP
25318: POP
// exit ;
25319: POP
25320: POP
25321: GO 25552
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25323: LD_ADDR_VAR 0 4
25327: PUSH
25328: LD_INT 22
25330: PUSH
25331: LD_VAR 0 5
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 91
25342: PUSH
25343: LD_VAR 0 8
25347: PUSH
25348: LD_INT 8
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 34
25361: PUSH
25362: LD_INT 12
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 34
25371: PUSH
25372: LD_INT 51
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 34
25381: PUSH
25382: LD_INT 32
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 34
25391: PUSH
25392: LD_EXP 98
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: ST_TO_ADDR
// if tmp then
25418: LD_VAR 0 4
25422: IFFALSE 25548
// begin for j in tmp do
25424: LD_ADDR_VAR 0 2
25428: PUSH
25429: LD_VAR 0 4
25433: PUSH
25434: FOR_IN
25435: IFFALSE 25546
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25437: LD_VAR 0 2
25441: PPUSH
25442: CALL_OW 262
25446: PUSH
25447: LD_INT 3
25449: EQUAL
25450: PUSH
25451: LD_VAR 0 2
25455: PPUSH
25456: CALL_OW 261
25460: PUSH
25461: LD_INT 20
25463: GREATER
25464: OR
25465: PUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: CALL_OW 314
25475: NOT
25476: AND
25477: PUSH
25478: LD_VAR 0 2
25482: PPUSH
25483: CALL_OW 263
25487: PUSH
25488: LD_INT 1
25490: NONEQUAL
25491: PUSH
25492: LD_VAR 0 2
25496: PPUSH
25497: CALL_OW 311
25501: OR
25502: AND
25503: IFFALSE 25544
// begin ComCollect ( j , x , y ) ;
25505: LD_VAR 0 2
25509: PPUSH
25510: LD_VAR 0 6
25514: PPUSH
25515: LD_VAR 0 7
25519: PPUSH
25520: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25524: LD_VAR 0 2
25528: PPUSH
25529: LD_VAR 0 8
25533: PPUSH
25534: CALL_OW 172
// exit ;
25538: POP
25539: POP
25540: POP
25541: POP
25542: GO 25552
// end ;
25544: GO 25434
25546: POP
25547: POP
// end ; end ;
25548: GO 24921
25550: POP
25551: POP
// end ; end_of_file end_of_file
25552: PPOPN 9
25554: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25555: LD_INT 0
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 264
25570: PUSH
25571: LD_EXP 101
25575: EQUAL
25576: IFFALSE 25648
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25578: LD_INT 68
25580: PPUSH
25581: LD_VAR 0 1
25585: PPUSH
25586: CALL_OW 255
25590: PPUSH
25591: CALL_OW 321
25595: PUSH
25596: LD_INT 2
25598: EQUAL
25599: IFFALSE 25611
// eff := 70 else
25601: LD_ADDR_VAR 0 4
25605: PUSH
25606: LD_INT 70
25608: ST_TO_ADDR
25609: GO 25619
// eff := 30 ;
25611: LD_ADDR_VAR 0 4
25615: PUSH
25616: LD_INT 30
25618: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25619: LD_VAR 0 1
25623: PPUSH
25624: CALL_OW 250
25628: PPUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 251
25638: PPUSH
25639: LD_VAR 0 4
25643: PPUSH
25644: CALL_OW 495
// end ; end ;
25648: LD_VAR 0 2
25652: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25653: LD_INT 0
25655: PPUSH
// end ;
25656: LD_VAR 0 4
25660: RET
// export function SOS_Command ( cmd ) ; begin
25661: LD_INT 0
25663: PPUSH
// end ;
25664: LD_VAR 0 2
25668: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25669: LD_INT 0
25671: PPUSH
// end ;
25672: LD_VAR 0 6
25676: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25677: LD_INT 0
25679: PPUSH
25680: PPUSH
// if not vehicle or not factory then
25681: LD_VAR 0 1
25685: NOT
25686: PUSH
25687: LD_VAR 0 2
25691: NOT
25692: OR
25693: IFFALSE 25697
// exit ;
25695: GO 25928
// if factoryWaypoints >= factory then
25697: LD_EXP 84
25701: PUSH
25702: LD_VAR 0 2
25706: GREATEREQUAL
25707: IFFALSE 25928
// if factoryWaypoints [ factory ] then
25709: LD_EXP 84
25713: PUSH
25714: LD_VAR 0 2
25718: ARRAY
25719: IFFALSE 25928
// begin if GetControl ( vehicle ) = control_manual then
25721: LD_VAR 0 1
25725: PPUSH
25726: CALL_OW 263
25730: PUSH
25731: LD_INT 1
25733: EQUAL
25734: IFFALSE 25815
// begin driver := IsDrivenBy ( vehicle ) ;
25736: LD_ADDR_VAR 0 4
25740: PUSH
25741: LD_VAR 0 1
25745: PPUSH
25746: CALL_OW 311
25750: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25751: LD_VAR 0 4
25755: PPUSH
25756: LD_EXP 84
25760: PUSH
25761: LD_VAR 0 2
25765: ARRAY
25766: PUSH
25767: LD_INT 3
25769: ARRAY
25770: PPUSH
25771: LD_EXP 84
25775: PUSH
25776: LD_VAR 0 2
25780: ARRAY
25781: PUSH
25782: LD_INT 4
25784: ARRAY
25785: PPUSH
25786: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25790: LD_VAR 0 4
25794: PPUSH
25795: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25799: LD_VAR 0 4
25803: PPUSH
25804: LD_VAR 0 2
25808: PPUSH
25809: CALL_OW 180
// end else
25813: GO 25928
// if GetControl ( vehicle ) = control_remote then
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 263
25824: PUSH
25825: LD_INT 2
25827: EQUAL
25828: IFFALSE 25889
// begin wait ( 0 0$2 ) ;
25830: LD_INT 70
25832: PPUSH
25833: CALL_OW 67
// if Connect ( vehicle ) then
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL 38136 0 1
25846: IFFALSE 25887
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25848: LD_VAR 0 1
25852: PPUSH
25853: LD_EXP 84
25857: PUSH
25858: LD_VAR 0 2
25862: ARRAY
25863: PUSH
25864: LD_INT 3
25866: ARRAY
25867: PPUSH
25868: LD_EXP 84
25872: PUSH
25873: LD_VAR 0 2
25877: ARRAY
25878: PUSH
25879: LD_INT 4
25881: ARRAY
25882: PPUSH
25883: CALL_OW 171
// end else
25887: GO 25928
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_EXP 84
25898: PUSH
25899: LD_VAR 0 2
25903: ARRAY
25904: PUSH
25905: LD_INT 3
25907: ARRAY
25908: PPUSH
25909: LD_EXP 84
25913: PUSH
25914: LD_VAR 0 2
25918: ARRAY
25919: PUSH
25920: LD_INT 4
25922: ARRAY
25923: PPUSH
25924: CALL_OW 171
// end ; end ;
25928: LD_VAR 0 3
25932: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25933: LD_INT 0
25935: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25936: LD_VAR 0 1
25940: PUSH
25941: LD_INT 250
25943: EQUAL
25944: PUSH
25945: LD_VAR 0 2
25949: PPUSH
25950: CALL_OW 264
25954: PUSH
25955: LD_EXP 104
25959: EQUAL
25960: AND
25961: IFFALSE 25982
// MinerPlaceMine ( unit , x , y ) ;
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_VAR 0 4
25972: PPUSH
25973: LD_VAR 0 5
25977: PPUSH
25978: CALL 28381 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25982: LD_VAR 0 1
25986: PUSH
25987: LD_INT 251
25989: EQUAL
25990: PUSH
25991: LD_VAR 0 2
25995: PPUSH
25996: CALL_OW 264
26000: PUSH
26001: LD_EXP 104
26005: EQUAL
26006: AND
26007: IFFALSE 26028
// MinerDetonateMine ( unit , x , y ) ;
26009: LD_VAR 0 2
26013: PPUSH
26014: LD_VAR 0 4
26018: PPUSH
26019: LD_VAR 0 5
26023: PPUSH
26024: CALL 28658 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26028: LD_VAR 0 1
26032: PUSH
26033: LD_INT 252
26035: EQUAL
26036: PUSH
26037: LD_VAR 0 2
26041: PPUSH
26042: CALL_OW 264
26046: PUSH
26047: LD_EXP 104
26051: EQUAL
26052: AND
26053: IFFALSE 26074
// MinerCreateMinefield ( unit , x , y ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 4
26064: PPUSH
26065: LD_VAR 0 5
26069: PPUSH
26070: CALL 29075 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26074: LD_VAR 0 1
26078: PUSH
26079: LD_INT 253
26081: EQUAL
26082: PUSH
26083: LD_VAR 0 2
26087: PPUSH
26088: CALL_OW 257
26092: PUSH
26093: LD_INT 5
26095: EQUAL
26096: AND
26097: IFFALSE 26118
// ComBinocular ( unit , x , y ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_VAR 0 4
26108: PPUSH
26109: LD_VAR 0 5
26113: PPUSH
26114: CALL 29446 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26118: LD_VAR 0 1
26122: PUSH
26123: LD_INT 254
26125: EQUAL
26126: PUSH
26127: LD_VAR 0 2
26131: PPUSH
26132: CALL_OW 264
26136: PUSH
26137: LD_EXP 99
26141: EQUAL
26142: AND
26143: PUSH
26144: LD_VAR 0 3
26148: PPUSH
26149: CALL_OW 263
26153: PUSH
26154: LD_INT 3
26156: EQUAL
26157: AND
26158: IFFALSE 26174
// HackDestroyVehicle ( unit , selectedUnit ) ;
26160: LD_VAR 0 2
26164: PPUSH
26165: LD_VAR 0 3
26169: PPUSH
26170: CALL 27741 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26174: LD_VAR 0 1
26178: PUSH
26179: LD_INT 255
26181: EQUAL
26182: PUSH
26183: LD_VAR 0 2
26187: PPUSH
26188: CALL_OW 264
26192: PUSH
26193: LD_INT 14
26195: PUSH
26196: LD_INT 53
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: IN
26203: AND
26204: PUSH
26205: LD_VAR 0 4
26209: PPUSH
26210: LD_VAR 0 5
26214: PPUSH
26215: CALL_OW 488
26219: AND
26220: IFFALSE 26244
// CutTreeXYR ( unit , x , y , 12 ) ;
26222: LD_VAR 0 2
26226: PPUSH
26227: LD_VAR 0 4
26231: PPUSH
26232: LD_VAR 0 5
26236: PPUSH
26237: LD_INT 12
26239: PPUSH
26240: CALL 26307 0 4
// if cmd = 256 then
26244: LD_VAR 0 1
26248: PUSH
26249: LD_INT 256
26251: EQUAL
26252: IFFALSE 26273
// SetFactoryWaypoint ( unit , x , y ) ;
26254: LD_VAR 0 2
26258: PPUSH
26259: LD_VAR 0 4
26263: PPUSH
26264: LD_VAR 0 5
26268: PPUSH
26269: CALL 24242 0 3
// if cmd = 257 then
26273: LD_VAR 0 1
26277: PUSH
26278: LD_INT 257
26280: EQUAL
26281: IFFALSE 26302
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26283: LD_VAR 0 2
26287: PPUSH
26288: LD_VAR 0 4
26292: PPUSH
26293: LD_VAR 0 5
26297: PPUSH
26298: CALL 24604 0 3
// end ;
26302: LD_VAR 0 6
26306: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26307: LD_INT 0
26309: PPUSH
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26318: LD_VAR 0 1
26322: NOT
26323: PUSH
26324: LD_VAR 0 2
26328: PPUSH
26329: LD_VAR 0 3
26333: PPUSH
26334: CALL_OW 488
26338: NOT
26339: OR
26340: PUSH
26341: LD_VAR 0 4
26345: NOT
26346: OR
26347: IFFALSE 26351
// exit ;
26349: GO 26691
// list := [ ] ;
26351: LD_ADDR_VAR 0 13
26355: PUSH
26356: EMPTY
26357: ST_TO_ADDR
// if x - r < 0 then
26358: LD_VAR 0 2
26362: PUSH
26363: LD_VAR 0 4
26367: MINUS
26368: PUSH
26369: LD_INT 0
26371: LESS
26372: IFFALSE 26384
// min_x := 0 else
26374: LD_ADDR_VAR 0 7
26378: PUSH
26379: LD_INT 0
26381: ST_TO_ADDR
26382: GO 26400
// min_x := x - r ;
26384: LD_ADDR_VAR 0 7
26388: PUSH
26389: LD_VAR 0 2
26393: PUSH
26394: LD_VAR 0 4
26398: MINUS
26399: ST_TO_ADDR
// if y - r < 0 then
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 4
26409: MINUS
26410: PUSH
26411: LD_INT 0
26413: LESS
26414: IFFALSE 26426
// min_y := 0 else
26416: LD_ADDR_VAR 0 8
26420: PUSH
26421: LD_INT 0
26423: ST_TO_ADDR
26424: GO 26442
// min_y := y - r ;
26426: LD_ADDR_VAR 0 8
26430: PUSH
26431: LD_VAR 0 3
26435: PUSH
26436: LD_VAR 0 4
26440: MINUS
26441: ST_TO_ADDR
// max_x := x + r ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_VAR 0 2
26451: PUSH
26452: LD_VAR 0 4
26456: PLUS
26457: ST_TO_ADDR
// max_y := y + r ;
26458: LD_ADDR_VAR 0 10
26462: PUSH
26463: LD_VAR 0 3
26467: PUSH
26468: LD_VAR 0 4
26472: PLUS
26473: ST_TO_ADDR
// for _x = min_x to max_x do
26474: LD_ADDR_VAR 0 11
26478: PUSH
26479: DOUBLE
26480: LD_VAR 0 7
26484: DEC
26485: ST_TO_ADDR
26486: LD_VAR 0 9
26490: PUSH
26491: FOR_TO
26492: IFFALSE 26609
// for _y = min_y to max_y do
26494: LD_ADDR_VAR 0 12
26498: PUSH
26499: DOUBLE
26500: LD_VAR 0 8
26504: DEC
26505: ST_TO_ADDR
26506: LD_VAR 0 10
26510: PUSH
26511: FOR_TO
26512: IFFALSE 26605
// begin if not ValidHex ( _x , _y ) then
26514: LD_VAR 0 11
26518: PPUSH
26519: LD_VAR 0 12
26523: PPUSH
26524: CALL_OW 488
26528: NOT
26529: IFFALSE 26533
// continue ;
26531: GO 26511
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26533: LD_VAR 0 11
26537: PPUSH
26538: LD_VAR 0 12
26542: PPUSH
26543: CALL_OW 351
26547: PUSH
26548: LD_VAR 0 11
26552: PPUSH
26553: LD_VAR 0 12
26557: PPUSH
26558: CALL_OW 554
26562: AND
26563: IFFALSE 26603
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26565: LD_ADDR_VAR 0 13
26569: PUSH
26570: LD_VAR 0 13
26574: PPUSH
26575: LD_VAR 0 13
26579: PUSH
26580: LD_INT 1
26582: PLUS
26583: PPUSH
26584: LD_VAR 0 11
26588: PUSH
26589: LD_VAR 0 12
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PPUSH
26598: CALL_OW 2
26602: ST_TO_ADDR
// end ;
26603: GO 26511
26605: POP
26606: POP
26607: GO 26491
26609: POP
26610: POP
// if not list then
26611: LD_VAR 0 13
26615: NOT
26616: IFFALSE 26620
// exit ;
26618: GO 26691
// for i in list do
26620: LD_ADDR_VAR 0 6
26624: PUSH
26625: LD_VAR 0 13
26629: PUSH
26630: FOR_IN
26631: IFFALSE 26689
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26633: LD_VAR 0 1
26637: PPUSH
26638: LD_STRING M
26640: PUSH
26641: LD_VAR 0 6
26645: PUSH
26646: LD_INT 1
26648: ARRAY
26649: PUSH
26650: LD_VAR 0 6
26654: PUSH
26655: LD_INT 2
26657: ARRAY
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: PUSH
26680: EMPTY
26681: LIST
26682: PPUSH
26683: CALL_OW 447
26687: GO 26630
26689: POP
26690: POP
// end ;
26691: LD_VAR 0 5
26695: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26696: LD_EXP 87
26700: NOT
26701: IFFALSE 26751
26703: GO 26705
26705: DISABLE
// begin initHack := true ;
26706: LD_ADDR_EXP 87
26710: PUSH
26711: LD_INT 1
26713: ST_TO_ADDR
// hackTanks := [ ] ;
26714: LD_ADDR_EXP 88
26718: PUSH
26719: EMPTY
26720: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26721: LD_ADDR_EXP 89
26725: PUSH
26726: EMPTY
26727: ST_TO_ADDR
// hackLimit := 3 ;
26728: LD_ADDR_EXP 90
26732: PUSH
26733: LD_INT 3
26735: ST_TO_ADDR
// hackDist := 12 ;
26736: LD_ADDR_EXP 91
26740: PUSH
26741: LD_INT 12
26743: ST_TO_ADDR
// hackCounter := [ ] ;
26744: LD_ADDR_EXP 92
26748: PUSH
26749: EMPTY
26750: ST_TO_ADDR
// end ;
26751: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26752: LD_EXP 87
26756: PUSH
26757: LD_INT 34
26759: PUSH
26760: LD_EXP 99
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PPUSH
26769: CALL_OW 69
26773: AND
26774: IFFALSE 27029
26776: GO 26778
26778: DISABLE
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
// begin enable ;
26783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26784: LD_ADDR_VAR 0 1
26788: PUSH
26789: LD_INT 34
26791: PUSH
26792: LD_EXP 99
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PPUSH
26801: CALL_OW 69
26805: PUSH
26806: FOR_IN
26807: IFFALSE 27027
// begin if not i in hackTanks then
26809: LD_VAR 0 1
26813: PUSH
26814: LD_EXP 88
26818: IN
26819: NOT
26820: IFFALSE 26903
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26822: LD_ADDR_EXP 88
26826: PUSH
26827: LD_EXP 88
26831: PPUSH
26832: LD_EXP 88
26836: PUSH
26837: LD_INT 1
26839: PLUS
26840: PPUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 1
26850: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26851: LD_ADDR_EXP 89
26855: PUSH
26856: LD_EXP 89
26860: PPUSH
26861: LD_EXP 89
26865: PUSH
26866: LD_INT 1
26868: PLUS
26869: PPUSH
26870: EMPTY
26871: PPUSH
26872: CALL_OW 1
26876: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26877: LD_ADDR_EXP 92
26881: PUSH
26882: LD_EXP 92
26886: PPUSH
26887: LD_EXP 92
26891: PUSH
26892: LD_INT 1
26894: PLUS
26895: PPUSH
26896: EMPTY
26897: PPUSH
26898: CALL_OW 1
26902: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26903: LD_VAR 0 1
26907: PPUSH
26908: CALL_OW 302
26912: NOT
26913: IFFALSE 26926
// begin HackUnlinkAll ( i ) ;
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL 27032 0 1
// continue ;
26924: GO 26806
// end ; HackCheckCapturedStatus ( i ) ;
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL 27475 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: LD_INT 81
26942: PUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 255
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 33
26959: PUSH
26960: LD_INT 3
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 91
26969: PUSH
26970: LD_VAR 0 1
26974: PUSH
26975: LD_EXP 91
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 50
26987: PUSH
26988: EMPTY
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: PPUSH
26997: CALL_OW 69
27001: ST_TO_ADDR
// if not tmp then
27002: LD_VAR 0 2
27006: NOT
27007: IFFALSE 27011
// continue ;
27009: GO 26806
// HackLink ( i , tmp ) ;
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_VAR 0 2
27020: PPUSH
27021: CALL 27168 0 2
// end ;
27025: GO 26806
27027: POP
27028: POP
// end ;
27029: PPOPN 2
27031: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27032: LD_INT 0
27034: PPUSH
27035: PPUSH
27036: PPUSH
// if not hack in hackTanks then
27037: LD_VAR 0 1
27041: PUSH
27042: LD_EXP 88
27046: IN
27047: NOT
27048: IFFALSE 27052
// exit ;
27050: GO 27163
// index := GetElementIndex ( hackTanks , hack ) ;
27052: LD_ADDR_VAR 0 4
27056: PUSH
27057: LD_EXP 88
27061: PPUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: CALL 34950 0 2
27071: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27072: LD_EXP 89
27076: PUSH
27077: LD_VAR 0 4
27081: ARRAY
27082: IFFALSE 27163
// begin for i in hackTanksCaptured [ index ] do
27084: LD_ADDR_VAR 0 3
27088: PUSH
27089: LD_EXP 89
27093: PUSH
27094: LD_VAR 0 4
27098: ARRAY
27099: PUSH
27100: FOR_IN
27101: IFFALSE 27127
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27103: LD_VAR 0 3
27107: PUSH
27108: LD_INT 1
27110: ARRAY
27111: PPUSH
27112: LD_VAR 0 3
27116: PUSH
27117: LD_INT 2
27119: ARRAY
27120: PPUSH
27121: CALL_OW 235
27125: GO 27100
27127: POP
27128: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27129: LD_ADDR_EXP 89
27133: PUSH
27134: LD_EXP 89
27138: PPUSH
27139: LD_VAR 0 4
27143: PPUSH
27144: EMPTY
27145: PPUSH
27146: CALL_OW 1
27150: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27151: LD_VAR 0 1
27155: PPUSH
27156: LD_INT 0
27158: PPUSH
27159: CALL_OW 505
// end ; end ;
27163: LD_VAR 0 2
27167: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27168: LD_INT 0
27170: PPUSH
27171: PPUSH
27172: PPUSH
// if not hack in hackTanks or not vehicles then
27173: LD_VAR 0 1
27177: PUSH
27178: LD_EXP 88
27182: IN
27183: NOT
27184: PUSH
27185: LD_VAR 0 2
27189: NOT
27190: OR
27191: IFFALSE 27195
// exit ;
27193: GO 27470
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27195: LD_ADDR_VAR 0 2
27199: PUSH
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_VAR 0 2
27209: PPUSH
27210: LD_INT 1
27212: PPUSH
27213: LD_INT 1
27215: PPUSH
27216: CALL 35600 0 4
27220: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27221: LD_ADDR_VAR 0 5
27225: PUSH
27226: LD_EXP 88
27230: PPUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL 34950 0 2
27240: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27241: LD_EXP 89
27245: PUSH
27246: LD_VAR 0 5
27250: ARRAY
27251: PUSH
27252: LD_EXP 90
27256: LESS
27257: IFFALSE 27446
// begin for i := 1 to vehicles do
27259: LD_ADDR_VAR 0 4
27263: PUSH
27264: DOUBLE
27265: LD_INT 1
27267: DEC
27268: ST_TO_ADDR
27269: LD_VAR 0 2
27273: PUSH
27274: FOR_TO
27275: IFFALSE 27444
// begin if hackTanksCaptured [ index ] = hackLimit then
27277: LD_EXP 89
27281: PUSH
27282: LD_VAR 0 5
27286: ARRAY
27287: PUSH
27288: LD_EXP 90
27292: EQUAL
27293: IFFALSE 27297
// break ;
27295: GO 27444
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27297: LD_ADDR_EXP 92
27301: PUSH
27302: LD_EXP 92
27306: PPUSH
27307: LD_VAR 0 5
27311: PPUSH
27312: LD_EXP 92
27316: PUSH
27317: LD_VAR 0 5
27321: ARRAY
27322: PUSH
27323: LD_INT 1
27325: PLUS
27326: PPUSH
27327: CALL_OW 1
27331: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27332: LD_ADDR_EXP 89
27336: PUSH
27337: LD_EXP 89
27341: PPUSH
27342: LD_VAR 0 5
27346: PUSH
27347: LD_EXP 89
27351: PUSH
27352: LD_VAR 0 5
27356: ARRAY
27357: PUSH
27358: LD_INT 1
27360: PLUS
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: LD_VAR 0 2
27370: PUSH
27371: LD_VAR 0 4
27375: ARRAY
27376: PUSH
27377: LD_VAR 0 2
27381: PUSH
27382: LD_VAR 0 4
27386: ARRAY
27387: PPUSH
27388: CALL_OW 255
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PPUSH
27397: CALL 35165 0 3
27401: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27402: LD_VAR 0 2
27406: PUSH
27407: LD_VAR 0 4
27411: ARRAY
27412: PPUSH
27413: LD_VAR 0 1
27417: PPUSH
27418: CALL_OW 255
27422: PPUSH
27423: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27427: LD_VAR 0 2
27431: PUSH
27432: LD_VAR 0 4
27436: ARRAY
27437: PPUSH
27438: CALL_OW 141
// end ;
27442: GO 27274
27444: POP
27445: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27446: LD_VAR 0 1
27450: PPUSH
27451: LD_EXP 89
27455: PUSH
27456: LD_VAR 0 5
27460: ARRAY
27461: PUSH
27462: LD_INT 0
27464: PLUS
27465: PPUSH
27466: CALL_OW 505
// end ;
27470: LD_VAR 0 3
27474: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27475: LD_INT 0
27477: PPUSH
27478: PPUSH
27479: PPUSH
27480: PPUSH
// if not hack in hackTanks then
27481: LD_VAR 0 1
27485: PUSH
27486: LD_EXP 88
27490: IN
27491: NOT
27492: IFFALSE 27496
// exit ;
27494: GO 27736
// index := GetElementIndex ( hackTanks , hack ) ;
27496: LD_ADDR_VAR 0 4
27500: PUSH
27501: LD_EXP 88
27505: PPUSH
27506: LD_VAR 0 1
27510: PPUSH
27511: CALL 34950 0 2
27515: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27516: LD_ADDR_VAR 0 3
27520: PUSH
27521: DOUBLE
27522: LD_EXP 89
27526: PUSH
27527: LD_VAR 0 4
27531: ARRAY
27532: INC
27533: ST_TO_ADDR
27534: LD_INT 1
27536: PUSH
27537: FOR_DOWNTO
27538: IFFALSE 27710
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27540: LD_ADDR_VAR 0 5
27544: PUSH
27545: LD_EXP 89
27549: PUSH
27550: LD_VAR 0 4
27554: ARRAY
27555: PUSH
27556: LD_VAR 0 3
27560: ARRAY
27561: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27562: LD_VAR 0 5
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: CALL_OW 302
27575: NOT
27576: PUSH
27577: LD_VAR 0 5
27581: PUSH
27582: LD_INT 1
27584: ARRAY
27585: PPUSH
27586: CALL_OW 255
27590: PUSH
27591: LD_VAR 0 1
27595: PPUSH
27596: CALL_OW 255
27600: NONEQUAL
27601: OR
27602: IFFALSE 27708
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27604: LD_VAR 0 5
27608: PUSH
27609: LD_INT 1
27611: ARRAY
27612: PPUSH
27613: CALL_OW 305
27617: PUSH
27618: LD_VAR 0 5
27622: PUSH
27623: LD_INT 1
27625: ARRAY
27626: PPUSH
27627: CALL_OW 255
27631: PUSH
27632: LD_VAR 0 1
27636: PPUSH
27637: CALL_OW 255
27641: EQUAL
27642: AND
27643: IFFALSE 27667
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27645: LD_VAR 0 5
27649: PUSH
27650: LD_INT 1
27652: ARRAY
27653: PPUSH
27654: LD_VAR 0 5
27658: PUSH
27659: LD_INT 2
27661: ARRAY
27662: PPUSH
27663: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27667: LD_ADDR_EXP 89
27671: PUSH
27672: LD_EXP 89
27676: PPUSH
27677: LD_VAR 0 4
27681: PPUSH
27682: LD_EXP 89
27686: PUSH
27687: LD_VAR 0 4
27691: ARRAY
27692: PPUSH
27693: LD_VAR 0 3
27697: PPUSH
27698: CALL_OW 3
27702: PPUSH
27703: CALL_OW 1
27707: ST_TO_ADDR
// end ; end ;
27708: GO 27537
27710: POP
27711: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27712: LD_VAR 0 1
27716: PPUSH
27717: LD_EXP 89
27721: PUSH
27722: LD_VAR 0 4
27726: ARRAY
27727: PUSH
27728: LD_INT 0
27730: PLUS
27731: PPUSH
27732: CALL_OW 505
// end ;
27736: LD_VAR 0 2
27740: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27741: LD_INT 0
27743: PPUSH
27744: PPUSH
27745: PPUSH
27746: PPUSH
// if not hack in hackTanks then
27747: LD_VAR 0 1
27751: PUSH
27752: LD_EXP 88
27756: IN
27757: NOT
27758: IFFALSE 27762
// exit ;
27760: GO 27847
// index := GetElementIndex ( hackTanks , hack ) ;
27762: LD_ADDR_VAR 0 5
27766: PUSH
27767: LD_EXP 88
27771: PPUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL 34950 0 2
27781: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27782: LD_ADDR_VAR 0 4
27786: PUSH
27787: DOUBLE
27788: LD_INT 1
27790: DEC
27791: ST_TO_ADDR
27792: LD_EXP 89
27796: PUSH
27797: LD_VAR 0 5
27801: ARRAY
27802: PUSH
27803: FOR_TO
27804: IFFALSE 27845
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27806: LD_EXP 89
27810: PUSH
27811: LD_VAR 0 5
27815: ARRAY
27816: PUSH
27817: LD_VAR 0 4
27821: ARRAY
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PUSH
27827: LD_VAR 0 2
27831: EQUAL
27832: IFFALSE 27843
// KillUnit ( vehicle ) ;
27834: LD_VAR 0 2
27838: PPUSH
27839: CALL_OW 66
27843: GO 27803
27845: POP
27846: POP
// end ;
27847: LD_VAR 0 3
27851: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27852: LD_EXP 93
27856: NOT
27857: IFFALSE 27892
27859: GO 27861
27861: DISABLE
// begin initMiner := true ;
27862: LD_ADDR_EXP 93
27866: PUSH
27867: LD_INT 1
27869: ST_TO_ADDR
// minersList := [ ] ;
27870: LD_ADDR_EXP 94
27874: PUSH
27875: EMPTY
27876: ST_TO_ADDR
// minerMinesList := [ ] ;
27877: LD_ADDR_EXP 95
27881: PUSH
27882: EMPTY
27883: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27884: LD_ADDR_EXP 96
27888: PUSH
27889: LD_INT 5
27891: ST_TO_ADDR
// end ;
27892: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27893: LD_EXP 93
27897: PUSH
27898: LD_INT 34
27900: PUSH
27901: LD_EXP 104
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PPUSH
27910: CALL_OW 69
27914: AND
27915: IFFALSE 28378
27917: GO 27919
27919: DISABLE
27920: LD_INT 0
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
// begin enable ;
27926: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27927: LD_ADDR_VAR 0 1
27931: PUSH
27932: LD_INT 34
27934: PUSH
27935: LD_EXP 104
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: PUSH
27949: FOR_IN
27950: IFFALSE 28022
// begin if not i in minersList then
27952: LD_VAR 0 1
27956: PUSH
27957: LD_EXP 94
27961: IN
27962: NOT
27963: IFFALSE 28020
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27965: LD_ADDR_EXP 94
27969: PUSH
27970: LD_EXP 94
27974: PPUSH
27975: LD_EXP 94
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: PPUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 1
27993: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27994: LD_ADDR_EXP 95
27998: PUSH
27999: LD_EXP 95
28003: PPUSH
28004: LD_EXP 95
28008: PUSH
28009: LD_INT 1
28011: PLUS
28012: PPUSH
28013: EMPTY
28014: PPUSH
28015: CALL_OW 1
28019: ST_TO_ADDR
// end end ;
28020: GO 27949
28022: POP
28023: POP
// for i := minerMinesList downto 1 do
28024: LD_ADDR_VAR 0 1
28028: PUSH
28029: DOUBLE
28030: LD_EXP 95
28034: INC
28035: ST_TO_ADDR
28036: LD_INT 1
28038: PUSH
28039: FOR_DOWNTO
28040: IFFALSE 28376
// begin if IsLive ( minersList [ i ] ) then
28042: LD_EXP 94
28046: PUSH
28047: LD_VAR 0 1
28051: ARRAY
28052: PPUSH
28053: CALL_OW 300
28057: IFFALSE 28085
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28059: LD_EXP 94
28063: PUSH
28064: LD_VAR 0 1
28068: ARRAY
28069: PPUSH
28070: LD_EXP 95
28074: PUSH
28075: LD_VAR 0 1
28079: ARRAY
28080: PPUSH
28081: CALL_OW 505
// if not minerMinesList [ i ] then
28085: LD_EXP 95
28089: PUSH
28090: LD_VAR 0 1
28094: ARRAY
28095: NOT
28096: IFFALSE 28100
// continue ;
28098: GO 28039
// for j := minerMinesList [ i ] downto 1 do
28100: LD_ADDR_VAR 0 2
28104: PUSH
28105: DOUBLE
28106: LD_EXP 95
28110: PUSH
28111: LD_VAR 0 1
28115: ARRAY
28116: INC
28117: ST_TO_ADDR
28118: LD_INT 1
28120: PUSH
28121: FOR_DOWNTO
28122: IFFALSE 28372
// begin side := GetSide ( minersList [ i ] ) ;
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: LD_EXP 94
28133: PUSH
28134: LD_VAR 0 1
28138: ARRAY
28139: PPUSH
28140: CALL_OW 255
28144: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28145: LD_ADDR_VAR 0 4
28149: PUSH
28150: LD_EXP 95
28154: PUSH
28155: LD_VAR 0 1
28159: ARRAY
28160: PUSH
28161: LD_VAR 0 2
28165: ARRAY
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: PPUSH
28171: LD_EXP 95
28175: PUSH
28176: LD_VAR 0 1
28180: ARRAY
28181: PUSH
28182: LD_VAR 0 2
28186: ARRAY
28187: PUSH
28188: LD_INT 2
28190: ARRAY
28191: PPUSH
28192: CALL_OW 428
28196: ST_TO_ADDR
// if not tmp then
28197: LD_VAR 0 4
28201: NOT
28202: IFFALSE 28206
// continue ;
28204: GO 28121
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28206: LD_VAR 0 4
28210: PUSH
28211: LD_INT 81
28213: PUSH
28214: LD_VAR 0 3
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PPUSH
28223: CALL_OW 69
28227: IN
28228: PUSH
28229: LD_EXP 95
28233: PUSH
28234: LD_VAR 0 1
28238: ARRAY
28239: PUSH
28240: LD_VAR 0 2
28244: ARRAY
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: PPUSH
28250: LD_EXP 95
28254: PUSH
28255: LD_VAR 0 1
28259: ARRAY
28260: PUSH
28261: LD_VAR 0 2
28265: ARRAY
28266: PUSH
28267: LD_INT 2
28269: ARRAY
28270: PPUSH
28271: CALL_OW 458
28275: AND
28276: IFFALSE 28370
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28278: LD_EXP 95
28282: PUSH
28283: LD_VAR 0 1
28287: ARRAY
28288: PUSH
28289: LD_VAR 0 2
28293: ARRAY
28294: PUSH
28295: LD_INT 1
28297: ARRAY
28298: PPUSH
28299: LD_EXP 95
28303: PUSH
28304: LD_VAR 0 1
28308: ARRAY
28309: PUSH
28310: LD_VAR 0 2
28314: ARRAY
28315: PUSH
28316: LD_INT 2
28318: ARRAY
28319: PPUSH
28320: LD_VAR 0 3
28324: PPUSH
28325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28329: LD_ADDR_EXP 95
28333: PUSH
28334: LD_EXP 95
28338: PPUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: LD_EXP 95
28348: PUSH
28349: LD_VAR 0 1
28353: ARRAY
28354: PPUSH
28355: LD_VAR 0 2
28359: PPUSH
28360: CALL_OW 3
28364: PPUSH
28365: CALL_OW 1
28369: ST_TO_ADDR
// end ; end ;
28370: GO 28121
28372: POP
28373: POP
// end ;
28374: GO 28039
28376: POP
28377: POP
// end ;
28378: PPOPN 4
28380: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28381: LD_INT 0
28383: PPUSH
28384: PPUSH
// result := false ;
28385: LD_ADDR_VAR 0 4
28389: PUSH
28390: LD_INT 0
28392: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28393: LD_VAR 0 1
28397: PPUSH
28398: CALL_OW 264
28402: PUSH
28403: LD_EXP 104
28407: EQUAL
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 28653
// index := GetElementIndex ( minersList , unit ) ;
28413: LD_ADDR_VAR 0 5
28417: PUSH
28418: LD_EXP 94
28422: PPUSH
28423: LD_VAR 0 1
28427: PPUSH
28428: CALL 34950 0 2
28432: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28433: LD_EXP 95
28437: PUSH
28438: LD_VAR 0 5
28442: ARRAY
28443: PUSH
28444: LD_EXP 96
28448: GREATEREQUAL
28449: IFFALSE 28453
// exit ;
28451: GO 28653
// ComMoveXY ( unit , x , y ) ;
28453: LD_VAR 0 1
28457: PPUSH
28458: LD_VAR 0 2
28462: PPUSH
28463: LD_VAR 0 3
28467: PPUSH
28468: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28472: LD_INT 35
28474: PPUSH
28475: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28479: LD_VAR 0 1
28483: PPUSH
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_VAR 0 3
28493: PPUSH
28494: CALL 66236 0 3
28498: NOT
28499: PUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: CALL_OW 314
28509: AND
28510: IFFALSE 28514
// exit ;
28512: GO 28653
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_VAR 0 3
28523: PPUSH
28524: CALL_OW 428
28528: PUSH
28529: LD_VAR 0 1
28533: EQUAL
28534: PUSH
28535: LD_VAR 0 1
28539: PPUSH
28540: CALL_OW 314
28544: NOT
28545: AND
28546: IFFALSE 28472
// PlaySoundXY ( x , y , PlantMine ) ;
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_VAR 0 3
28557: PPUSH
28558: LD_STRING PlantMine
28560: PPUSH
28561: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28565: LD_VAR 0 2
28569: PPUSH
28570: LD_VAR 0 3
28574: PPUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 255
28584: PPUSH
28585: LD_INT 0
28587: PPUSH
28588: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28592: LD_ADDR_EXP 95
28596: PUSH
28597: LD_EXP 95
28601: PPUSH
28602: LD_VAR 0 5
28606: PUSH
28607: LD_EXP 95
28611: PUSH
28612: LD_VAR 0 5
28616: ARRAY
28617: PUSH
28618: LD_INT 1
28620: PLUS
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PPUSH
28626: LD_VAR 0 2
28630: PUSH
28631: LD_VAR 0 3
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL 35165 0 3
28644: ST_TO_ADDR
// result := true ;
28645: LD_ADDR_VAR 0 4
28649: PUSH
28650: LD_INT 1
28652: ST_TO_ADDR
// end ;
28653: LD_VAR 0 4
28657: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28658: LD_INT 0
28660: PPUSH
28661: PPUSH
28662: PPUSH
// if not unit in minersList then
28663: LD_VAR 0 1
28667: PUSH
28668: LD_EXP 94
28672: IN
28673: NOT
28674: IFFALSE 28678
// exit ;
28676: GO 29070
// index := GetElementIndex ( minersList , unit ) ;
28678: LD_ADDR_VAR 0 6
28682: PUSH
28683: LD_EXP 94
28687: PPUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL 34950 0 2
28697: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28698: LD_ADDR_VAR 0 5
28702: PUSH
28703: DOUBLE
28704: LD_EXP 95
28708: PUSH
28709: LD_VAR 0 6
28713: ARRAY
28714: INC
28715: ST_TO_ADDR
28716: LD_INT 1
28718: PUSH
28719: FOR_DOWNTO
28720: IFFALSE 28881
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28722: LD_EXP 95
28726: PUSH
28727: LD_VAR 0 6
28731: ARRAY
28732: PUSH
28733: LD_VAR 0 5
28737: ARRAY
28738: PUSH
28739: LD_INT 1
28741: ARRAY
28742: PUSH
28743: LD_VAR 0 2
28747: EQUAL
28748: PUSH
28749: LD_EXP 95
28753: PUSH
28754: LD_VAR 0 6
28758: ARRAY
28759: PUSH
28760: LD_VAR 0 5
28764: ARRAY
28765: PUSH
28766: LD_INT 2
28768: ARRAY
28769: PUSH
28770: LD_VAR 0 3
28774: EQUAL
28775: AND
28776: IFFALSE 28879
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28778: LD_EXP 95
28782: PUSH
28783: LD_VAR 0 6
28787: ARRAY
28788: PUSH
28789: LD_VAR 0 5
28793: ARRAY
28794: PUSH
28795: LD_INT 1
28797: ARRAY
28798: PPUSH
28799: LD_EXP 95
28803: PUSH
28804: LD_VAR 0 6
28808: ARRAY
28809: PUSH
28810: LD_VAR 0 5
28814: ARRAY
28815: PUSH
28816: LD_INT 2
28818: ARRAY
28819: PPUSH
28820: LD_VAR 0 1
28824: PPUSH
28825: CALL_OW 255
28829: PPUSH
28830: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28834: LD_ADDR_EXP 95
28838: PUSH
28839: LD_EXP 95
28843: PPUSH
28844: LD_VAR 0 6
28848: PPUSH
28849: LD_EXP 95
28853: PUSH
28854: LD_VAR 0 6
28858: ARRAY
28859: PPUSH
28860: LD_VAR 0 5
28864: PPUSH
28865: CALL_OW 3
28869: PPUSH
28870: CALL_OW 1
28874: ST_TO_ADDR
// exit ;
28875: POP
28876: POP
28877: GO 29070
// end ; end ;
28879: GO 28719
28881: POP
28882: POP
// for i := minerMinesList [ index ] downto 1 do
28883: LD_ADDR_VAR 0 5
28887: PUSH
28888: DOUBLE
28889: LD_EXP 95
28893: PUSH
28894: LD_VAR 0 6
28898: ARRAY
28899: INC
28900: ST_TO_ADDR
28901: LD_INT 1
28903: PUSH
28904: FOR_DOWNTO
28905: IFFALSE 29068
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28907: LD_EXP 95
28911: PUSH
28912: LD_VAR 0 6
28916: ARRAY
28917: PUSH
28918: LD_VAR 0 5
28922: ARRAY
28923: PUSH
28924: LD_INT 1
28926: ARRAY
28927: PPUSH
28928: LD_EXP 95
28932: PUSH
28933: LD_VAR 0 6
28937: ARRAY
28938: PUSH
28939: LD_VAR 0 5
28943: ARRAY
28944: PUSH
28945: LD_INT 2
28947: ARRAY
28948: PPUSH
28949: LD_VAR 0 2
28953: PPUSH
28954: LD_VAR 0 3
28958: PPUSH
28959: CALL_OW 298
28963: PUSH
28964: LD_INT 6
28966: LESS
28967: IFFALSE 29066
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28969: LD_EXP 95
28973: PUSH
28974: LD_VAR 0 6
28978: ARRAY
28979: PUSH
28980: LD_VAR 0 5
28984: ARRAY
28985: PUSH
28986: LD_INT 1
28988: ARRAY
28989: PPUSH
28990: LD_EXP 95
28994: PUSH
28995: LD_VAR 0 6
28999: ARRAY
29000: PUSH
29001: LD_VAR 0 5
29005: ARRAY
29006: PUSH
29007: LD_INT 2
29009: ARRAY
29010: PPUSH
29011: LD_VAR 0 1
29015: PPUSH
29016: CALL_OW 255
29020: PPUSH
29021: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29025: LD_ADDR_EXP 95
29029: PUSH
29030: LD_EXP 95
29034: PPUSH
29035: LD_VAR 0 6
29039: PPUSH
29040: LD_EXP 95
29044: PUSH
29045: LD_VAR 0 6
29049: ARRAY
29050: PPUSH
29051: LD_VAR 0 5
29055: PPUSH
29056: CALL_OW 3
29060: PPUSH
29061: CALL_OW 1
29065: ST_TO_ADDR
// end ; end ;
29066: GO 28904
29068: POP
29069: POP
// end ;
29070: LD_VAR 0 4
29074: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29075: LD_INT 0
29077: PPUSH
29078: PPUSH
29079: PPUSH
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
29084: PPUSH
29085: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 264
29095: PUSH
29096: LD_EXP 104
29100: EQUAL
29101: NOT
29102: PUSH
29103: LD_VAR 0 1
29107: PUSH
29108: LD_EXP 94
29112: IN
29113: NOT
29114: OR
29115: IFFALSE 29119
// exit ;
29117: GO 29441
// index := GetElementIndex ( minersList , unit ) ;
29119: LD_ADDR_VAR 0 6
29123: PUSH
29124: LD_EXP 94
29128: PPUSH
29129: LD_VAR 0 1
29133: PPUSH
29134: CALL 34950 0 2
29138: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29139: LD_ADDR_VAR 0 8
29143: PUSH
29144: LD_EXP 96
29148: PUSH
29149: LD_EXP 95
29153: PUSH
29154: LD_VAR 0 6
29158: ARRAY
29159: MINUS
29160: ST_TO_ADDR
// if not minesFreeAmount then
29161: LD_VAR 0 8
29165: NOT
29166: IFFALSE 29170
// exit ;
29168: GO 29441
// tmp := [ ] ;
29170: LD_ADDR_VAR 0 7
29174: PUSH
29175: EMPTY
29176: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29177: LD_ADDR_VAR 0 5
29181: PUSH
29182: DOUBLE
29183: LD_INT 1
29185: DEC
29186: ST_TO_ADDR
29187: LD_VAR 0 8
29191: PUSH
29192: FOR_TO
29193: IFFALSE 29388
// begin _d := rand ( 0 , 5 ) ;
29195: LD_ADDR_VAR 0 11
29199: PUSH
29200: LD_INT 0
29202: PPUSH
29203: LD_INT 5
29205: PPUSH
29206: CALL_OW 12
29210: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29211: LD_ADDR_VAR 0 12
29215: PUSH
29216: LD_INT 2
29218: PPUSH
29219: LD_INT 6
29221: PPUSH
29222: CALL_OW 12
29226: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29227: LD_ADDR_VAR 0 9
29231: PUSH
29232: LD_VAR 0 2
29236: PPUSH
29237: LD_VAR 0 11
29241: PPUSH
29242: LD_VAR 0 12
29246: PPUSH
29247: CALL_OW 272
29251: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29252: LD_ADDR_VAR 0 10
29256: PUSH
29257: LD_VAR 0 3
29261: PPUSH
29262: LD_VAR 0 11
29266: PPUSH
29267: LD_VAR 0 12
29271: PPUSH
29272: CALL_OW 273
29276: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29277: LD_VAR 0 9
29281: PPUSH
29282: LD_VAR 0 10
29286: PPUSH
29287: CALL_OW 488
29291: PUSH
29292: LD_VAR 0 9
29296: PUSH
29297: LD_VAR 0 10
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_VAR 0 7
29310: IN
29311: NOT
29312: AND
29313: PUSH
29314: LD_VAR 0 9
29318: PPUSH
29319: LD_VAR 0 10
29323: PPUSH
29324: CALL_OW 458
29328: NOT
29329: AND
29330: IFFALSE 29372
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29332: LD_ADDR_VAR 0 7
29336: PUSH
29337: LD_VAR 0 7
29341: PPUSH
29342: LD_VAR 0 7
29346: PUSH
29347: LD_INT 1
29349: PLUS
29350: PPUSH
29351: LD_VAR 0 9
29355: PUSH
29356: LD_VAR 0 10
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 1
29369: ST_TO_ADDR
29370: GO 29386
// i := i - 1 ;
29372: LD_ADDR_VAR 0 5
29376: PUSH
29377: LD_VAR 0 5
29381: PUSH
29382: LD_INT 1
29384: MINUS
29385: ST_TO_ADDR
// end ;
29386: GO 29192
29388: POP
29389: POP
// for i in tmp do
29390: LD_ADDR_VAR 0 5
29394: PUSH
29395: LD_VAR 0 7
29399: PUSH
29400: FOR_IN
29401: IFFALSE 29439
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_VAR 0 5
29412: PUSH
29413: LD_INT 1
29415: ARRAY
29416: PPUSH
29417: LD_VAR 0 5
29421: PUSH
29422: LD_INT 2
29424: ARRAY
29425: PPUSH
29426: CALL 28381 0 3
29430: NOT
29431: IFFALSE 29437
// exit ;
29433: POP
29434: POP
29435: GO 29441
29437: GO 29400
29439: POP
29440: POP
// end ;
29441: LD_VAR 0 4
29445: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29446: LD_INT 0
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
// if not GetClass ( unit ) = class_sniper then
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 257
29464: PUSH
29465: LD_INT 5
29467: EQUAL
29468: NOT
29469: IFFALSE 29473
// exit ;
29471: GO 29861
// dist := 8 ;
29473: LD_ADDR_VAR 0 5
29477: PUSH
29478: LD_INT 8
29480: ST_TO_ADDR
// viewRange := 12 ;
29481: LD_ADDR_VAR 0 7
29485: PUSH
29486: LD_INT 12
29488: ST_TO_ADDR
// side := GetSide ( unit ) ;
29489: LD_ADDR_VAR 0 6
29493: PUSH
29494: LD_VAR 0 1
29498: PPUSH
29499: CALL_OW 255
29503: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29504: LD_INT 61
29506: PPUSH
29507: LD_VAR 0 6
29511: PPUSH
29512: CALL_OW 321
29516: PUSH
29517: LD_INT 2
29519: EQUAL
29520: IFFALSE 29530
// viewRange := 16 ;
29522: LD_ADDR_VAR 0 7
29526: PUSH
29527: LD_INT 16
29529: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29530: LD_VAR 0 1
29534: PPUSH
29535: LD_VAR 0 2
29539: PPUSH
29540: LD_VAR 0 3
29544: PPUSH
29545: CALL_OW 297
29549: PUSH
29550: LD_VAR 0 5
29554: GREATER
29555: IFFALSE 29634
// begin ComMoveXY ( unit , x , y ) ;
29557: LD_VAR 0 1
29561: PPUSH
29562: LD_VAR 0 2
29566: PPUSH
29567: LD_VAR 0 3
29571: PPUSH
29572: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29576: LD_INT 35
29578: PPUSH
29579: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29583: LD_VAR 0 1
29587: PPUSH
29588: LD_VAR 0 2
29592: PPUSH
29593: LD_VAR 0 3
29597: PPUSH
29598: CALL 66236 0 3
29602: NOT
29603: IFFALSE 29607
// exit ;
29605: GO 29861
// until GetDistUnitXY ( unit , x , y ) < dist ;
29607: LD_VAR 0 1
29611: PPUSH
29612: LD_VAR 0 2
29616: PPUSH
29617: LD_VAR 0 3
29621: PPUSH
29622: CALL_OW 297
29626: PUSH
29627: LD_VAR 0 5
29631: LESS
29632: IFFALSE 29576
// end ; ComTurnXY ( unit , x , y ) ;
29634: LD_VAR 0 1
29638: PPUSH
29639: LD_VAR 0 2
29643: PPUSH
29644: LD_VAR 0 3
29648: PPUSH
29649: CALL_OW 118
// wait ( 5 ) ;
29653: LD_INT 5
29655: PPUSH
29656: CALL_OW 67
// _d := GetDir ( unit ) ;
29660: LD_ADDR_VAR 0 10
29664: PUSH
29665: LD_VAR 0 1
29669: PPUSH
29670: CALL_OW 254
29674: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29675: LD_ADDR_VAR 0 8
29679: PUSH
29680: LD_VAR 0 1
29684: PPUSH
29685: CALL_OW 250
29689: PPUSH
29690: LD_VAR 0 10
29694: PPUSH
29695: LD_VAR 0 5
29699: PPUSH
29700: CALL_OW 272
29704: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29705: LD_ADDR_VAR 0 9
29709: PUSH
29710: LD_VAR 0 1
29714: PPUSH
29715: CALL_OW 251
29719: PPUSH
29720: LD_VAR 0 10
29724: PPUSH
29725: LD_VAR 0 5
29729: PPUSH
29730: CALL_OW 273
29734: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29735: LD_VAR 0 8
29739: PPUSH
29740: LD_VAR 0 9
29744: PPUSH
29745: CALL_OW 488
29749: NOT
29750: IFFALSE 29754
// exit ;
29752: GO 29861
// ComAnimCustom ( unit , 1 ) ;
29754: LD_VAR 0 1
29758: PPUSH
29759: LD_INT 1
29761: PPUSH
29762: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29766: LD_VAR 0 8
29770: PPUSH
29771: LD_VAR 0 9
29775: PPUSH
29776: LD_VAR 0 6
29780: PPUSH
29781: LD_VAR 0 7
29785: PPUSH
29786: CALL_OW 330
// repeat wait ( 1 ) ;
29790: LD_INT 1
29792: PPUSH
29793: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29797: LD_VAR 0 1
29801: PPUSH
29802: CALL_OW 316
29806: PUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 314
29816: OR
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 302
29827: NOT
29828: OR
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 301
29839: OR
29840: IFFALSE 29790
// RemoveSeeing ( _x , _y , side ) ;
29842: LD_VAR 0 8
29846: PPUSH
29847: LD_VAR 0 9
29851: PPUSH
29852: LD_VAR 0 6
29856: PPUSH
29857: CALL_OW 331
// end ; end_of_file
29861: LD_VAR 0 4
29865: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
29866: LD_INT 0
29868: PPUSH
// ar_miner := 81 ;
29869: LD_ADDR_EXP 104
29873: PUSH
29874: LD_INT 81
29876: ST_TO_ADDR
// ar_crane := 88 ;
29877: LD_ADDR_EXP 103
29881: PUSH
29882: LD_INT 88
29884: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29885: LD_ADDR_EXP 98
29889: PUSH
29890: LD_INT 89
29892: ST_TO_ADDR
// us_hack := 99 ;
29893: LD_ADDR_EXP 99
29897: PUSH
29898: LD_INT 99
29900: ST_TO_ADDR
// us_artillery := 97 ;
29901: LD_ADDR_EXP 100
29905: PUSH
29906: LD_INT 97
29908: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29909: LD_ADDR_EXP 101
29913: PUSH
29914: LD_INT 91
29916: ST_TO_ADDR
// ar_mortar := 92 ;
29917: LD_ADDR_EXP 102
29921: PUSH
29922: LD_INT 92
29924: ST_TO_ADDR
// ru_flamethrower := 93 ;
29925: LD_ADDR_EXP 105
29929: PUSH
29930: LD_INT 93
29932: ST_TO_ADDR
// ru_radar := 98 ;
29933: LD_ADDR_EXP 97
29937: PUSH
29938: LD_INT 98
29940: ST_TO_ADDR
// tech_Artillery := 80 ;
29941: LD_ADDR_EXP 106
29945: PUSH
29946: LD_INT 80
29948: ST_TO_ADDR
// tech_RadMat := 81 ;
29949: LD_ADDR_EXP 107
29953: PUSH
29954: LD_INT 81
29956: ST_TO_ADDR
// tech_BasicTools := 82 ;
29957: LD_ADDR_EXP 108
29961: PUSH
29962: LD_INT 82
29964: ST_TO_ADDR
// tech_Cargo := 83 ;
29965: LD_ADDR_EXP 109
29969: PUSH
29970: LD_INT 83
29972: ST_TO_ADDR
// tech_Track := 84 ;
29973: LD_ADDR_EXP 110
29977: PUSH
29978: LD_INT 84
29980: ST_TO_ADDR
// tech_Crane := 85 ;
29981: LD_ADDR_EXP 111
29985: PUSH
29986: LD_INT 85
29988: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29989: LD_ADDR_EXP 112
29993: PUSH
29994: LD_INT 86
29996: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29997: LD_ADDR_EXP 113
30001: PUSH
30002: LD_INT 87
30004: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30005: LD_ADDR_EXP 114
30009: PUSH
30010: LD_INT 88
30012: ST_TO_ADDR
// end ;
30013: LD_VAR 0 1
30017: RET
// every 1 do
30018: GO 30020
30020: DISABLE
// InitGlobalVariables ; end_of_file
30021: CALL 29866 0 0
30025: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30026: LD_INT 0
30028: PPUSH
30029: PPUSH
// if exist_mode then
30030: LD_VAR 0 2
30034: IFFALSE 30059
// unit := CreateCharacter ( prefix & ident ) else
30036: LD_ADDR_VAR 0 5
30040: PUSH
30041: LD_VAR 0 3
30045: PUSH
30046: LD_VAR 0 1
30050: STR
30051: PPUSH
30052: CALL_OW 34
30056: ST_TO_ADDR
30057: GO 30074
// unit := NewCharacter ( ident ) ;
30059: LD_ADDR_VAR 0 5
30063: PUSH
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 25
30073: ST_TO_ADDR
// result := unit ;
30074: LD_ADDR_VAR 0 4
30078: PUSH
30079: LD_VAR 0 5
30083: ST_TO_ADDR
// end ;
30084: LD_VAR 0 4
30088: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30089: LD_INT 0
30091: PPUSH
30092: PPUSH
// if not side or not nation then
30093: LD_VAR 0 1
30097: NOT
30098: PUSH
30099: LD_VAR 0 2
30103: NOT
30104: OR
30105: IFFALSE 30109
// exit ;
30107: GO 30877
// case nation of nation_american :
30109: LD_VAR 0 2
30113: PUSH
30114: LD_INT 1
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30336
30122: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30123: LD_ADDR_VAR 0 4
30127: PUSH
30128: LD_INT 35
30130: PUSH
30131: LD_INT 45
30133: PUSH
30134: LD_INT 46
30136: PUSH
30137: LD_INT 47
30139: PUSH
30140: LD_INT 82
30142: PUSH
30143: LD_INT 83
30145: PUSH
30146: LD_INT 84
30148: PUSH
30149: LD_INT 85
30151: PUSH
30152: LD_INT 86
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: LD_INT 6
30163: PUSH
30164: LD_INT 15
30166: PUSH
30167: LD_INT 16
30169: PUSH
30170: LD_INT 7
30172: PUSH
30173: LD_INT 12
30175: PUSH
30176: LD_INT 13
30178: PUSH
30179: LD_INT 10
30181: PUSH
30182: LD_INT 14
30184: PUSH
30185: LD_INT 20
30187: PUSH
30188: LD_INT 21
30190: PUSH
30191: LD_INT 22
30193: PUSH
30194: LD_INT 25
30196: PUSH
30197: LD_INT 32
30199: PUSH
30200: LD_INT 27
30202: PUSH
30203: LD_INT 36
30205: PUSH
30206: LD_INT 69
30208: PUSH
30209: LD_INT 39
30211: PUSH
30212: LD_INT 34
30214: PUSH
30215: LD_INT 40
30217: PUSH
30218: LD_INT 48
30220: PUSH
30221: LD_INT 49
30223: PUSH
30224: LD_INT 50
30226: PUSH
30227: LD_INT 51
30229: PUSH
30230: LD_INT 52
30232: PUSH
30233: LD_INT 53
30235: PUSH
30236: LD_INT 54
30238: PUSH
30239: LD_INT 55
30241: PUSH
30242: LD_INT 56
30244: PUSH
30245: LD_INT 57
30247: PUSH
30248: LD_INT 58
30250: PUSH
30251: LD_INT 59
30253: PUSH
30254: LD_INT 60
30256: PUSH
30257: LD_INT 61
30259: PUSH
30260: LD_INT 62
30262: PUSH
30263: LD_INT 80
30265: PUSH
30266: LD_INT 82
30268: PUSH
30269: LD_INT 83
30271: PUSH
30272: LD_INT 84
30274: PUSH
30275: LD_INT 85
30277: PUSH
30278: LD_INT 86
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: ST_TO_ADDR
30334: GO 30801
30336: LD_INT 2
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30570
30344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30345: LD_ADDR_VAR 0 4
30349: PUSH
30350: LD_INT 35
30352: PUSH
30353: LD_INT 45
30355: PUSH
30356: LD_INT 46
30358: PUSH
30359: LD_INT 47
30361: PUSH
30362: LD_INT 82
30364: PUSH
30365: LD_INT 83
30367: PUSH
30368: LD_INT 84
30370: PUSH
30371: LD_INT 85
30373: PUSH
30374: LD_INT 87
30376: PUSH
30377: LD_INT 70
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 11
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: LD_INT 4
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: LD_INT 6
30397: PUSH
30398: LD_INT 15
30400: PUSH
30401: LD_INT 18
30403: PUSH
30404: LD_INT 7
30406: PUSH
30407: LD_INT 17
30409: PUSH
30410: LD_INT 8
30412: PUSH
30413: LD_INT 20
30415: PUSH
30416: LD_INT 21
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_INT 72
30424: PUSH
30425: LD_INT 26
30427: PUSH
30428: LD_INT 69
30430: PUSH
30431: LD_INT 39
30433: PUSH
30434: LD_INT 40
30436: PUSH
30437: LD_INT 41
30439: PUSH
30440: LD_INT 42
30442: PUSH
30443: LD_INT 43
30445: PUSH
30446: LD_INT 48
30448: PUSH
30449: LD_INT 49
30451: PUSH
30452: LD_INT 50
30454: PUSH
30455: LD_INT 51
30457: PUSH
30458: LD_INT 52
30460: PUSH
30461: LD_INT 53
30463: PUSH
30464: LD_INT 54
30466: PUSH
30467: LD_INT 55
30469: PUSH
30470: LD_INT 56
30472: PUSH
30473: LD_INT 60
30475: PUSH
30476: LD_INT 61
30478: PUSH
30479: LD_INT 62
30481: PUSH
30482: LD_INT 66
30484: PUSH
30485: LD_INT 67
30487: PUSH
30488: LD_INT 68
30490: PUSH
30491: LD_INT 81
30493: PUSH
30494: LD_INT 82
30496: PUSH
30497: LD_INT 83
30499: PUSH
30500: LD_INT 84
30502: PUSH
30503: LD_INT 85
30505: PUSH
30506: LD_INT 87
30508: PUSH
30509: LD_INT 88
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
30568: GO 30801
30570: LD_INT 3
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30800
30578: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30579: LD_ADDR_VAR 0 4
30583: PUSH
30584: LD_INT 46
30586: PUSH
30587: LD_INT 47
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: LD_INT 82
30598: PUSH
30599: LD_INT 83
30601: PUSH
30602: LD_INT 84
30604: PUSH
30605: LD_INT 85
30607: PUSH
30608: LD_INT 86
30610: PUSH
30611: LD_INT 11
30613: PUSH
30614: LD_INT 9
30616: PUSH
30617: LD_INT 20
30619: PUSH
30620: LD_INT 19
30622: PUSH
30623: LD_INT 21
30625: PUSH
30626: LD_INT 24
30628: PUSH
30629: LD_INT 22
30631: PUSH
30632: LD_INT 25
30634: PUSH
30635: LD_INT 28
30637: PUSH
30638: LD_INT 29
30640: PUSH
30641: LD_INT 30
30643: PUSH
30644: LD_INT 31
30646: PUSH
30647: LD_INT 37
30649: PUSH
30650: LD_INT 38
30652: PUSH
30653: LD_INT 32
30655: PUSH
30656: LD_INT 27
30658: PUSH
30659: LD_INT 33
30661: PUSH
30662: LD_INT 69
30664: PUSH
30665: LD_INT 39
30667: PUSH
30668: LD_INT 34
30670: PUSH
30671: LD_INT 40
30673: PUSH
30674: LD_INT 71
30676: PUSH
30677: LD_INT 23
30679: PUSH
30680: LD_INT 44
30682: PUSH
30683: LD_INT 48
30685: PUSH
30686: LD_INT 49
30688: PUSH
30689: LD_INT 50
30691: PUSH
30692: LD_INT 51
30694: PUSH
30695: LD_INT 52
30697: PUSH
30698: LD_INT 53
30700: PUSH
30701: LD_INT 54
30703: PUSH
30704: LD_INT 55
30706: PUSH
30707: LD_INT 56
30709: PUSH
30710: LD_INT 57
30712: PUSH
30713: LD_INT 58
30715: PUSH
30716: LD_INT 59
30718: PUSH
30719: LD_INT 63
30721: PUSH
30722: LD_INT 64
30724: PUSH
30725: LD_INT 65
30727: PUSH
30728: LD_INT 82
30730: PUSH
30731: LD_INT 83
30733: PUSH
30734: LD_INT 84
30736: PUSH
30737: LD_INT 85
30739: PUSH
30740: LD_INT 86
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: ST_TO_ADDR
30798: GO 30801
30800: POP
// if state > - 1 and state < 3 then
30801: LD_VAR 0 3
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: GREATER
30810: PUSH
30811: LD_VAR 0 3
30815: PUSH
30816: LD_INT 3
30818: LESS
30819: AND
30820: IFFALSE 30877
// for i in result do
30822: LD_ADDR_VAR 0 5
30826: PUSH
30827: LD_VAR 0 4
30831: PUSH
30832: FOR_IN
30833: IFFALSE 30875
// if GetTech ( i , side ) <> state then
30835: LD_VAR 0 5
30839: PPUSH
30840: LD_VAR 0 1
30844: PPUSH
30845: CALL_OW 321
30849: PUSH
30850: LD_VAR 0 3
30854: NONEQUAL
30855: IFFALSE 30873
// result := result diff i ;
30857: LD_ADDR_VAR 0 4
30861: PUSH
30862: LD_VAR 0 4
30866: PUSH
30867: LD_VAR 0 5
30871: DIFF
30872: ST_TO_ADDR
30873: GO 30832
30875: POP
30876: POP
// end ;
30877: LD_VAR 0 4
30881: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30882: LD_INT 0
30884: PPUSH
30885: PPUSH
30886: PPUSH
// result := true ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 1
30894: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30895: LD_ADDR_VAR 0 5
30899: PUSH
30900: LD_VAR 0 2
30904: PPUSH
30905: CALL_OW 480
30909: ST_TO_ADDR
// if not tmp then
30910: LD_VAR 0 5
30914: NOT
30915: IFFALSE 30919
// exit ;
30917: GO 30968
// for i in tmp do
30919: LD_ADDR_VAR 0 4
30923: PUSH
30924: LD_VAR 0 5
30928: PUSH
30929: FOR_IN
30930: IFFALSE 30966
// if GetTech ( i , side ) <> state_researched then
30932: LD_VAR 0 4
30936: PPUSH
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 321
30946: PUSH
30947: LD_INT 2
30949: NONEQUAL
30950: IFFALSE 30964
// begin result := false ;
30952: LD_ADDR_VAR 0 3
30956: PUSH
30957: LD_INT 0
30959: ST_TO_ADDR
// exit ;
30960: POP
30961: POP
30962: GO 30968
// end ;
30964: GO 30929
30966: POP
30967: POP
// end ;
30968: LD_VAR 0 3
30972: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30973: LD_INT 0
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30988: LD_VAR 0 1
30992: NOT
30993: PUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 257
31003: PUSH
31004: LD_INT 9
31006: NONEQUAL
31007: OR
31008: IFFALSE 31012
// exit ;
31010: GO 31585
// side := GetSide ( unit ) ;
31012: LD_ADDR_VAR 0 9
31016: PUSH
31017: LD_VAR 0 1
31021: PPUSH
31022: CALL_OW 255
31026: ST_TO_ADDR
// tech_space := tech_spacanom ;
31027: LD_ADDR_VAR 0 12
31031: PUSH
31032: LD_INT 29
31034: ST_TO_ADDR
// tech_time := tech_taurad ;
31035: LD_ADDR_VAR 0 13
31039: PUSH
31040: LD_INT 28
31042: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31043: LD_ADDR_VAR 0 11
31047: PUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: CALL_OW 310
31057: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31058: LD_VAR 0 11
31062: PPUSH
31063: CALL_OW 247
31067: PUSH
31068: LD_INT 2
31070: EQUAL
31071: IFFALSE 31075
// exit ;
31073: GO 31585
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31075: LD_ADDR_VAR 0 8
31079: PUSH
31080: LD_INT 81
31082: PUSH
31083: LD_VAR 0 9
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: LD_INT 21
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PPUSH
31113: CALL_OW 69
31117: ST_TO_ADDR
// if not tmp then
31118: LD_VAR 0 8
31122: NOT
31123: IFFALSE 31127
// exit ;
31125: GO 31585
// if in_unit then
31127: LD_VAR 0 11
31131: IFFALSE 31155
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31133: LD_ADDR_VAR 0 10
31137: PUSH
31138: LD_VAR 0 8
31142: PPUSH
31143: LD_VAR 0 11
31147: PPUSH
31148: CALL_OW 74
31152: ST_TO_ADDR
31153: GO 31175
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31155: LD_ADDR_VAR 0 10
31159: PUSH
31160: LD_VAR 0 8
31164: PPUSH
31165: LD_VAR 0 1
31169: PPUSH
31170: CALL_OW 74
31174: ST_TO_ADDR
// if not enemy then
31175: LD_VAR 0 10
31179: NOT
31180: IFFALSE 31184
// exit ;
31182: GO 31585
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31184: LD_VAR 0 11
31188: PUSH
31189: LD_VAR 0 11
31193: PPUSH
31194: LD_VAR 0 10
31198: PPUSH
31199: CALL_OW 296
31203: PUSH
31204: LD_INT 13
31206: GREATER
31207: AND
31208: PUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: LD_VAR 0 10
31218: PPUSH
31219: CALL_OW 296
31223: PUSH
31224: LD_INT 12
31226: GREATER
31227: OR
31228: IFFALSE 31232
// exit ;
31230: GO 31585
// missile := [ 1 ] ;
31232: LD_ADDR_VAR 0 14
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31243: LD_VAR 0 9
31247: PPUSH
31248: LD_VAR 0 12
31252: PPUSH
31253: CALL_OW 325
31257: IFFALSE 31286
// missile := Replace ( missile , missile + 1 , 2 ) ;
31259: LD_ADDR_VAR 0 14
31263: PUSH
31264: LD_VAR 0 14
31268: PPUSH
31269: LD_VAR 0 14
31273: PUSH
31274: LD_INT 1
31276: PLUS
31277: PPUSH
31278: LD_INT 2
31280: PPUSH
31281: CALL_OW 1
31285: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31286: LD_VAR 0 9
31290: PPUSH
31291: LD_VAR 0 13
31295: PPUSH
31296: CALL_OW 325
31300: PUSH
31301: LD_VAR 0 10
31305: PPUSH
31306: CALL_OW 255
31310: PPUSH
31311: LD_VAR 0 13
31315: PPUSH
31316: CALL_OW 325
31320: NOT
31321: AND
31322: IFFALSE 31351
// missile := Replace ( missile , missile + 1 , 3 ) ;
31324: LD_ADDR_VAR 0 14
31328: PUSH
31329: LD_VAR 0 14
31333: PPUSH
31334: LD_VAR 0 14
31338: PUSH
31339: LD_INT 1
31341: PLUS
31342: PPUSH
31343: LD_INT 3
31345: PPUSH
31346: CALL_OW 1
31350: ST_TO_ADDR
// if missile < 2 then
31351: LD_VAR 0 14
31355: PUSH
31356: LD_INT 2
31358: LESS
31359: IFFALSE 31363
// exit ;
31361: GO 31585
// x := GetX ( enemy ) ;
31363: LD_ADDR_VAR 0 4
31367: PUSH
31368: LD_VAR 0 10
31372: PPUSH
31373: CALL_OW 250
31377: ST_TO_ADDR
// y := GetY ( enemy ) ;
31378: LD_ADDR_VAR 0 5
31382: PUSH
31383: LD_VAR 0 10
31387: PPUSH
31388: CALL_OW 251
31392: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31393: LD_ADDR_VAR 0 6
31397: PUSH
31398: LD_VAR 0 4
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PPUSH
31407: LD_INT 1
31409: PPUSH
31410: CALL_OW 12
31414: PLUS
31415: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31416: LD_ADDR_VAR 0 7
31420: PUSH
31421: LD_VAR 0 5
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PPUSH
31430: LD_INT 1
31432: PPUSH
31433: CALL_OW 12
31437: PLUS
31438: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31439: LD_VAR 0 6
31443: PPUSH
31444: LD_VAR 0 7
31448: PPUSH
31449: CALL_OW 488
31453: NOT
31454: IFFALSE 31476
// begin _x := x ;
31456: LD_ADDR_VAR 0 6
31460: PUSH
31461: LD_VAR 0 4
31465: ST_TO_ADDR
// _y := y ;
31466: LD_ADDR_VAR 0 7
31470: PUSH
31471: LD_VAR 0 5
31475: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31476: LD_ADDR_VAR 0 3
31480: PUSH
31481: LD_INT 1
31483: PPUSH
31484: LD_VAR 0 14
31488: PPUSH
31489: CALL_OW 12
31493: ST_TO_ADDR
// case i of 1 :
31494: LD_VAR 0 3
31498: PUSH
31499: LD_INT 1
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31524
31507: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31508: LD_VAR 0 1
31512: PPUSH
31513: LD_VAR 0 10
31517: PPUSH
31518: CALL_OW 115
31522: GO 31585
31524: LD_INT 2
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31554
31532: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_VAR 0 6
31542: PPUSH
31543: LD_VAR 0 7
31547: PPUSH
31548: CALL_OW 153
31552: GO 31585
31554: LD_INT 3
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31584
31562: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31563: LD_VAR 0 1
31567: PPUSH
31568: LD_VAR 0 6
31572: PPUSH
31573: LD_VAR 0 7
31577: PPUSH
31578: CALL_OW 154
31582: GO 31585
31584: POP
// end ;
31585: LD_VAR 0 2
31589: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31590: LD_INT 0
31592: PPUSH
31593: PPUSH
31594: PPUSH
31595: PPUSH
31596: PPUSH
31597: PPUSH
// if not unit or not building then
31598: LD_VAR 0 1
31602: NOT
31603: PUSH
31604: LD_VAR 0 2
31608: NOT
31609: OR
31610: IFFALSE 31614
// exit ;
31612: GO 31772
// x := GetX ( building ) ;
31614: LD_ADDR_VAR 0 5
31618: PUSH
31619: LD_VAR 0 2
31623: PPUSH
31624: CALL_OW 250
31628: ST_TO_ADDR
// y := GetY ( building ) ;
31629: LD_ADDR_VAR 0 6
31633: PUSH
31634: LD_VAR 0 2
31638: PPUSH
31639: CALL_OW 251
31643: ST_TO_ADDR
// for i = 0 to 5 do
31644: LD_ADDR_VAR 0 4
31648: PUSH
31649: DOUBLE
31650: LD_INT 0
31652: DEC
31653: ST_TO_ADDR
31654: LD_INT 5
31656: PUSH
31657: FOR_TO
31658: IFFALSE 31770
// begin _x := ShiftX ( x , i , 3 ) ;
31660: LD_ADDR_VAR 0 7
31664: PUSH
31665: LD_VAR 0 5
31669: PPUSH
31670: LD_VAR 0 4
31674: PPUSH
31675: LD_INT 3
31677: PPUSH
31678: CALL_OW 272
31682: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31683: LD_ADDR_VAR 0 8
31687: PUSH
31688: LD_VAR 0 6
31692: PPUSH
31693: LD_VAR 0 4
31697: PPUSH
31698: LD_INT 3
31700: PPUSH
31701: CALL_OW 273
31705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31706: LD_VAR 0 7
31710: PPUSH
31711: LD_VAR 0 8
31715: PPUSH
31716: CALL_OW 488
31720: NOT
31721: IFFALSE 31725
// continue ;
31723: GO 31657
// if HexInfo ( _x , _y ) = 0 then
31725: LD_VAR 0 7
31729: PPUSH
31730: LD_VAR 0 8
31734: PPUSH
31735: CALL_OW 428
31739: PUSH
31740: LD_INT 0
31742: EQUAL
31743: IFFALSE 31768
// begin ComMoveXY ( unit , _x , _y ) ;
31745: LD_VAR 0 1
31749: PPUSH
31750: LD_VAR 0 7
31754: PPUSH
31755: LD_VAR 0 8
31759: PPUSH
31760: CALL_OW 111
// exit ;
31764: POP
31765: POP
31766: GO 31772
// end ; end ;
31768: GO 31657
31770: POP
31771: POP
// end ;
31772: LD_VAR 0 3
31776: RET
// export function ScanBase ( side , base_area ) ; begin
31777: LD_INT 0
31779: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31780: LD_ADDR_VAR 0 3
31784: PUSH
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_INT 81
31792: PUSH
31793: LD_VAR 0 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PPUSH
31802: CALL_OW 70
31806: ST_TO_ADDR
// end ;
31807: LD_VAR 0 3
31811: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31812: LD_INT 0
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
// result := false ;
31818: LD_ADDR_VAR 0 2
31822: PUSH
31823: LD_INT 0
31825: ST_TO_ADDR
// side := GetSide ( unit ) ;
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_VAR 0 1
31835: PPUSH
31836: CALL_OW 255
31840: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31841: LD_ADDR_VAR 0 4
31845: PUSH
31846: LD_VAR 0 1
31850: PPUSH
31851: CALL_OW 248
31855: ST_TO_ADDR
// case nat of 1 :
31856: LD_VAR 0 4
31860: PUSH
31861: LD_INT 1
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31880
31869: POP
// tech := tech_lassight ; 2 :
31870: LD_ADDR_VAR 0 5
31874: PUSH
31875: LD_INT 12
31877: ST_TO_ADDR
31878: GO 31919
31880: LD_INT 2
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31899
31888: POP
// tech := tech_mortar ; 3 :
31889: LD_ADDR_VAR 0 5
31893: PUSH
31894: LD_INT 41
31896: ST_TO_ADDR
31897: GO 31919
31899: LD_INT 3
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31918
31907: POP
// tech := tech_bazooka ; end ;
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_INT 44
31915: ST_TO_ADDR
31916: GO 31919
31918: POP
// if Researched ( side , tech ) then
31919: LD_VAR 0 3
31923: PPUSH
31924: LD_VAR 0 5
31928: PPUSH
31929: CALL_OW 325
31933: IFFALSE 31960
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31935: LD_ADDR_VAR 0 2
31939: PUSH
31940: LD_INT 5
31942: PUSH
31943: LD_INT 8
31945: PUSH
31946: LD_INT 9
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: PUSH
31954: LD_VAR 0 4
31958: ARRAY
31959: ST_TO_ADDR
// end ;
31960: LD_VAR 0 2
31964: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
// if not mines then
31970: LD_VAR 0 2
31974: NOT
31975: IFFALSE 31979
// exit ;
31977: GO 32123
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31979: LD_ADDR_VAR 0 5
31983: PUSH
31984: LD_INT 81
31986: PUSH
31987: LD_VAR 0 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: LD_INT 21
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PPUSH
32017: CALL_OW 69
32021: ST_TO_ADDR
// for i in mines do
32022: LD_ADDR_VAR 0 4
32026: PUSH
32027: LD_VAR 0 2
32031: PUSH
32032: FOR_IN
32033: IFFALSE 32121
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32035: LD_VAR 0 4
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 4
32048: PUSH
32049: LD_INT 2
32051: ARRAY
32052: PPUSH
32053: CALL_OW 458
32057: NOT
32058: IFFALSE 32062
// continue ;
32060: GO 32032
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32062: LD_VAR 0 4
32066: PUSH
32067: LD_INT 1
32069: ARRAY
32070: PPUSH
32071: LD_VAR 0 4
32075: PUSH
32076: LD_INT 2
32078: ARRAY
32079: PPUSH
32080: CALL_OW 428
32084: PUSH
32085: LD_VAR 0 5
32089: IN
32090: IFFALSE 32119
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32092: LD_VAR 0 4
32096: PUSH
32097: LD_INT 1
32099: ARRAY
32100: PPUSH
32101: LD_VAR 0 4
32105: PUSH
32106: LD_INT 2
32108: ARRAY
32109: PPUSH
32110: LD_VAR 0 1
32114: PPUSH
32115: CALL_OW 456
// end ;
32119: GO 32032
32121: POP
32122: POP
// end ;
32123: LD_VAR 0 3
32127: RET
// export function Count ( array ) ; var i ; begin
32128: LD_INT 0
32130: PPUSH
32131: PPUSH
// result := 0 ;
32132: LD_ADDR_VAR 0 2
32136: PUSH
32137: LD_INT 0
32139: ST_TO_ADDR
// for i in array do
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: LD_VAR 0 1
32149: PUSH
32150: FOR_IN
32151: IFFALSE 32175
// if i then
32153: LD_VAR 0 3
32157: IFFALSE 32173
// result := result + 1 ;
32159: LD_ADDR_VAR 0 2
32163: PUSH
32164: LD_VAR 0 2
32168: PUSH
32169: LD_INT 1
32171: PLUS
32172: ST_TO_ADDR
32173: GO 32150
32175: POP
32176: POP
// end ;
32177: LD_VAR 0 2
32181: RET
// export function IsEmpty ( building ) ; begin
32182: LD_INT 0
32184: PPUSH
// if not building then
32185: LD_VAR 0 1
32189: NOT
32190: IFFALSE 32194
// exit ;
32192: GO 32237
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32194: LD_ADDR_VAR 0 2
32198: PUSH
32199: LD_VAR 0 1
32203: PUSH
32204: LD_INT 22
32206: PUSH
32207: LD_VAR 0 1
32211: PPUSH
32212: CALL_OW 255
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 58
32223: PUSH
32224: EMPTY
32225: LIST
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PPUSH
32231: CALL_OW 69
32235: IN
32236: ST_TO_ADDR
// end ;
32237: LD_VAR 0 2
32241: RET
// export function IsNotFull ( building ) ; var places ; begin
32242: LD_INT 0
32244: PPUSH
32245: PPUSH
// if not building then
32246: LD_VAR 0 1
32250: NOT
32251: IFFALSE 32255
// exit ;
32253: GO 32426
// result := false ;
32255: LD_ADDR_VAR 0 2
32259: PUSH
32260: LD_INT 0
32262: ST_TO_ADDR
// places := 0 ;
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: LD_INT 0
32270: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 266
32280: PUSH
32281: LD_INT 0
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32343
32287: LD_INT 1
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32343
32293: LD_INT 6
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32343
32299: LD_INT 7
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32343
32305: LD_INT 8
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32343
32311: LD_INT 4
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32343
32317: LD_INT 5
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32343
32323: LD_INT 2
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32343
32329: LD_INT 3
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32343
32335: LD_INT 35
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32354
32343: POP
// places := 6 ; b_bunker , b_breastwork :
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_INT 6
32351: ST_TO_ADDR
32352: GO 32399
32354: LD_INT 32
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32368
32360: LD_INT 31
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32379
32368: POP
// places := 1 ; b_control_tower :
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 1
32376: ST_TO_ADDR
32377: GO 32399
32379: LD_INT 36
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32398
32387: POP
// places := 3 ; end ;
32388: LD_ADDR_VAR 0 3
32392: PUSH
32393: LD_INT 3
32395: ST_TO_ADDR
32396: GO 32399
32398: POP
// if places then
32399: LD_VAR 0 3
32403: IFFALSE 32426
// result := UnitsInside ( building ) < places ;
32405: LD_ADDR_VAR 0 2
32409: PUSH
32410: LD_VAR 0 1
32414: PPUSH
32415: CALL_OW 313
32419: PUSH
32420: LD_VAR 0 3
32424: LESS
32425: ST_TO_ADDR
// end ;
32426: LD_VAR 0 2
32430: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32431: LD_INT 0
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
// tmp := [ ] ;
32437: LD_ADDR_VAR 0 3
32441: PUSH
32442: EMPTY
32443: ST_TO_ADDR
// list := [ ] ;
32444: LD_ADDR_VAR 0 5
32448: PUSH
32449: EMPTY
32450: ST_TO_ADDR
// for i = 16 to 25 do
32451: LD_ADDR_VAR 0 4
32455: PUSH
32456: DOUBLE
32457: LD_INT 16
32459: DEC
32460: ST_TO_ADDR
32461: LD_INT 25
32463: PUSH
32464: FOR_TO
32465: IFFALSE 32538
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32467: LD_ADDR_VAR 0 3
32471: PUSH
32472: LD_VAR 0 3
32476: PUSH
32477: LD_INT 22
32479: PUSH
32480: LD_VAR 0 1
32484: PPUSH
32485: CALL_OW 255
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 91
32496: PUSH
32497: LD_VAR 0 1
32501: PUSH
32502: LD_INT 6
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 30
32512: PUSH
32513: LD_VAR 0 4
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: PPUSH
32530: CALL_OW 69
32534: ADD
32535: ST_TO_ADDR
32536: GO 32464
32538: POP
32539: POP
// for i = 1 to tmp do
32540: LD_ADDR_VAR 0 4
32544: PUSH
32545: DOUBLE
32546: LD_INT 1
32548: DEC
32549: ST_TO_ADDR
32550: LD_VAR 0 3
32554: PUSH
32555: FOR_TO
32556: IFFALSE 32644
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32558: LD_ADDR_VAR 0 5
32562: PUSH
32563: LD_VAR 0 5
32567: PUSH
32568: LD_VAR 0 3
32572: PUSH
32573: LD_VAR 0 4
32577: ARRAY
32578: PPUSH
32579: CALL_OW 266
32583: PUSH
32584: LD_VAR 0 3
32588: PUSH
32589: LD_VAR 0 4
32593: ARRAY
32594: PPUSH
32595: CALL_OW 250
32599: PUSH
32600: LD_VAR 0 3
32604: PUSH
32605: LD_VAR 0 4
32609: ARRAY
32610: PPUSH
32611: CALL_OW 251
32615: PUSH
32616: LD_VAR 0 3
32620: PUSH
32621: LD_VAR 0 4
32625: ARRAY
32626: PPUSH
32627: CALL_OW 254
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: ADD
32641: ST_TO_ADDR
32642: GO 32555
32644: POP
32645: POP
// result := list ;
32646: LD_ADDR_VAR 0 2
32650: PUSH
32651: LD_VAR 0 5
32655: ST_TO_ADDR
// end ;
32656: LD_VAR 0 2
32660: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32661: LD_INT 0
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
// if not factory then
32670: LD_VAR 0 1
32674: NOT
32675: IFFALSE 32679
// exit ;
32677: GO 33272
// if control = control_apeman then
32679: LD_VAR 0 4
32683: PUSH
32684: LD_INT 5
32686: EQUAL
32687: IFFALSE 32796
// begin tmp := UnitsInside ( factory ) ;
32689: LD_ADDR_VAR 0 8
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 313
32703: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32704: LD_VAR 0 8
32708: PPUSH
32709: LD_INT 25
32711: PUSH
32712: LD_INT 12
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 72
32723: NOT
32724: IFFALSE 32734
// control := control_manual ;
32726: LD_ADDR_VAR 0 4
32730: PUSH
32731: LD_INT 1
32733: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32734: LD_ADDR_VAR 0 8
32738: PUSH
32739: LD_VAR 0 1
32743: PPUSH
32744: CALL 32431 0 1
32748: ST_TO_ADDR
// if tmp then
32749: LD_VAR 0 8
32753: IFFALSE 32796
// begin for i in tmp do
32755: LD_ADDR_VAR 0 7
32759: PUSH
32760: LD_VAR 0 8
32764: PUSH
32765: FOR_IN
32766: IFFALSE 32794
// if i [ 1 ] = b_ext_radio then
32768: LD_VAR 0 7
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: PUSH
32777: LD_INT 22
32779: EQUAL
32780: IFFALSE 32792
// begin control := control_remote ;
32782: LD_ADDR_VAR 0 4
32786: PUSH
32787: LD_INT 2
32789: ST_TO_ADDR
// break ;
32790: GO 32794
// end ;
32792: GO 32765
32794: POP
32795: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32796: LD_VAR 0 1
32800: PPUSH
32801: LD_VAR 0 2
32805: PPUSH
32806: LD_VAR 0 3
32810: PPUSH
32811: LD_VAR 0 4
32815: PPUSH
32816: LD_VAR 0 5
32820: PPUSH
32821: CALL_OW 448
32825: IFFALSE 32860
// begin result := [ chassis , engine , control , weapon ] ;
32827: LD_ADDR_VAR 0 6
32831: PUSH
32832: LD_VAR 0 2
32836: PUSH
32837: LD_VAR 0 3
32841: PUSH
32842: LD_VAR 0 4
32846: PUSH
32847: LD_VAR 0 5
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// exit ;
32858: GO 33272
// end ; _chassis := AvailableChassisList ( factory ) ;
32860: LD_ADDR_VAR 0 9
32864: PUSH
32865: LD_VAR 0 1
32869: PPUSH
32870: CALL_OW 475
32874: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32875: LD_ADDR_VAR 0 11
32879: PUSH
32880: LD_VAR 0 1
32884: PPUSH
32885: CALL_OW 476
32889: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32890: LD_ADDR_VAR 0 12
32894: PUSH
32895: LD_VAR 0 1
32899: PPUSH
32900: CALL_OW 477
32904: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32905: LD_ADDR_VAR 0 10
32909: PUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: CALL_OW 478
32919: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32920: LD_VAR 0 9
32924: NOT
32925: PUSH
32926: LD_VAR 0 11
32930: NOT
32931: OR
32932: PUSH
32933: LD_VAR 0 12
32937: NOT
32938: OR
32939: PUSH
32940: LD_VAR 0 10
32944: NOT
32945: OR
32946: IFFALSE 32981
// begin result := [ chassis , engine , control , weapon ] ;
32948: LD_ADDR_VAR 0 6
32952: PUSH
32953: LD_VAR 0 2
32957: PUSH
32958: LD_VAR 0 3
32962: PUSH
32963: LD_VAR 0 4
32967: PUSH
32968: LD_VAR 0 5
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: ST_TO_ADDR
// exit ;
32979: GO 33272
// end ; if not chassis in _chassis then
32981: LD_VAR 0 2
32985: PUSH
32986: LD_VAR 0 9
32990: IN
32991: NOT
32992: IFFALSE 33018
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32994: LD_ADDR_VAR 0 2
32998: PUSH
32999: LD_VAR 0 9
33003: PUSH
33004: LD_INT 1
33006: PPUSH
33007: LD_VAR 0 9
33011: PPUSH
33012: CALL_OW 12
33016: ARRAY
33017: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33018: LD_VAR 0 2
33022: PPUSH
33023: LD_VAR 0 3
33027: PPUSH
33028: CALL 33277 0 2
33032: NOT
33033: IFFALSE 33092
// repeat engine := _engine [ 1 ] ;
33035: LD_ADDR_VAR 0 3
33039: PUSH
33040: LD_VAR 0 11
33044: PUSH
33045: LD_INT 1
33047: ARRAY
33048: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33049: LD_ADDR_VAR 0 11
33053: PUSH
33054: LD_VAR 0 11
33058: PPUSH
33059: LD_INT 1
33061: PPUSH
33062: CALL_OW 3
33066: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33067: LD_VAR 0 2
33071: PPUSH
33072: LD_VAR 0 3
33076: PPUSH
33077: CALL 33277 0 2
33081: PUSH
33082: LD_VAR 0 11
33086: PUSH
33087: EMPTY
33088: EQUAL
33089: OR
33090: IFFALSE 33035
// if not control in _control then
33092: LD_VAR 0 4
33096: PUSH
33097: LD_VAR 0 12
33101: IN
33102: NOT
33103: IFFALSE 33129
// control := _control [ rand ( 1 , _control ) ] ;
33105: LD_ADDR_VAR 0 4
33109: PUSH
33110: LD_VAR 0 12
33114: PUSH
33115: LD_INT 1
33117: PPUSH
33118: LD_VAR 0 12
33122: PPUSH
33123: CALL_OW 12
33127: ARRAY
33128: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_VAR 0 5
33138: PPUSH
33139: CALL 33497 0 2
33143: NOT
33144: IFFALSE 33203
// repeat weapon := _weapon [ 1 ] ;
33146: LD_ADDR_VAR 0 5
33150: PUSH
33151: LD_VAR 0 10
33155: PUSH
33156: LD_INT 1
33158: ARRAY
33159: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33160: LD_ADDR_VAR 0 10
33164: PUSH
33165: LD_VAR 0 10
33169: PPUSH
33170: LD_INT 1
33172: PPUSH
33173: CALL_OW 3
33177: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33178: LD_VAR 0 2
33182: PPUSH
33183: LD_VAR 0 5
33187: PPUSH
33188: CALL 33497 0 2
33192: PUSH
33193: LD_VAR 0 10
33197: PUSH
33198: EMPTY
33199: EQUAL
33200: OR
33201: IFFALSE 33146
// result := [ ] ;
33203: LD_ADDR_VAR 0 6
33207: PUSH
33208: EMPTY
33209: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33210: LD_VAR 0 1
33214: PPUSH
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_VAR 0 3
33224: PPUSH
33225: LD_VAR 0 4
33229: PPUSH
33230: LD_VAR 0 5
33234: PPUSH
33235: CALL_OW 448
33239: IFFALSE 33272
// result := [ chassis , engine , control , weapon ] ;
33241: LD_ADDR_VAR 0 6
33245: PUSH
33246: LD_VAR 0 2
33250: PUSH
33251: LD_VAR 0 3
33255: PUSH
33256: LD_VAR 0 4
33260: PUSH
33261: LD_VAR 0 5
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: ST_TO_ADDR
// end ;
33272: LD_VAR 0 6
33276: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33277: LD_INT 0
33279: PPUSH
// if not chassis or not engine then
33280: LD_VAR 0 1
33284: NOT
33285: PUSH
33286: LD_VAR 0 2
33290: NOT
33291: OR
33292: IFFALSE 33296
// exit ;
33294: GO 33492
// case engine of engine_solar :
33296: LD_VAR 0 2
33300: PUSH
33301: LD_INT 2
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33347
33309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_INT 11
33317: PUSH
33318: LD_INT 12
33320: PUSH
33321: LD_INT 13
33323: PUSH
33324: LD_INT 14
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: LD_INT 3
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 33476
33347: LD_INT 1
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33417
33355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 11
33363: PUSH
33364: LD_INT 12
33366: PUSH
33367: LD_INT 13
33369: PUSH
33370: LD_INT 14
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: LD_INT 4
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: LD_INT 21
33390: PUSH
33391: LD_INT 23
33393: PUSH
33394: LD_INT 22
33396: PUSH
33397: LD_INT 24
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: ST_TO_ADDR
33415: GO 33476
33417: LD_INT 3
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33475
33425: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 13
33433: PUSH
33434: LD_INT 14
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 5
33448: PUSH
33449: LD_INT 21
33451: PUSH
33452: LD_INT 22
33454: PUSH
33455: LD_INT 23
33457: PUSH
33458: LD_INT 24
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
33473: GO 33476
33475: POP
// result := ( chassis in result ) ;
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_VAR 0 1
33485: PUSH
33486: LD_VAR 0 3
33490: IN
33491: ST_TO_ADDR
// end ;
33492: LD_VAR 0 3
33496: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33497: LD_INT 0
33499: PPUSH
// if not chassis or not weapon then
33500: LD_VAR 0 1
33504: NOT
33505: PUSH
33506: LD_VAR 0 2
33510: NOT
33511: OR
33512: IFFALSE 33516
// exit ;
33514: GO 34578
// case weapon of us_machine_gun :
33516: LD_VAR 0 2
33520: PUSH
33521: LD_INT 2
33523: DOUBLE
33524: EQUAL
33525: IFTRUE 33529
33527: GO 33559
33529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: LD_INT 5
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: ST_TO_ADDR
33557: GO 34562
33559: LD_INT 3
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33597
33567: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 4
33584: PUSH
33585: LD_INT 5
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: ST_TO_ADDR
33595: GO 34562
33597: LD_INT 11
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33635
33605: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: LD_INT 4
33622: PUSH
33623: LD_INT 5
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
33633: GO 34562
33635: LD_INT 4
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33669
33643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
33667: GO 34562
33669: LD_INT 5
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33703
33677: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 3
33688: PUSH
33689: LD_INT 4
33691: PUSH
33692: LD_INT 5
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
33701: GO 34562
33703: LD_INT 9
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33737
33711: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33712: LD_ADDR_VAR 0 3
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: LD_INT 4
33725: PUSH
33726: LD_INT 5
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
33735: GO 34562
33737: LD_INT 7
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33771
33745: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: LD_INT 4
33759: PUSH
33760: LD_INT 5
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
33769: GO 34562
33771: LD_INT 12
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33779
33777: GO 33805
33779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: LD_INT 2
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: LD_INT 4
33793: PUSH
33794: LD_INT 5
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: ST_TO_ADDR
33803: GO 34562
33805: LD_INT 13
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33813
33811: GO 33839
33813: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33814: LD_ADDR_VAR 0 3
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: LD_INT 5
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: ST_TO_ADDR
33837: GO 34562
33839: LD_INT 14
33841: DOUBLE
33842: EQUAL
33843: IFTRUE 33847
33845: GO 33865
33847: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33848: LD_ADDR_VAR 0 3
33852: PUSH
33853: LD_INT 4
33855: PUSH
33856: LD_INT 5
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: ST_TO_ADDR
33863: GO 34562
33865: LD_INT 6
33867: DOUBLE
33868: EQUAL
33869: IFTRUE 33873
33871: GO 33891
33873: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33874: LD_ADDR_VAR 0 3
33878: PUSH
33879: LD_INT 4
33881: PUSH
33882: LD_INT 5
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: ST_TO_ADDR
33889: GO 34562
33891: LD_INT 10
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33917
33899: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_INT 4
33907: PUSH
33908: LD_INT 5
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: ST_TO_ADDR
33915: GO 34562
33917: LD_INT 22
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33925
33923: GO 33951
33925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33926: LD_ADDR_VAR 0 3
33930: PUSH
33931: LD_INT 11
33933: PUSH
33934: LD_INT 12
33936: PUSH
33937: LD_INT 13
33939: PUSH
33940: LD_INT 14
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
33949: GO 34562
33951: LD_INT 23
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33959
33957: GO 33985
33959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: LD_INT 11
33967: PUSH
33968: LD_INT 12
33970: PUSH
33971: LD_INT 13
33973: PUSH
33974: LD_INT 14
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: ST_TO_ADDR
33983: GO 34562
33985: LD_INT 24
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 33993
33991: GO 34019
33993: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_INT 11
34001: PUSH
34002: LD_INT 12
34004: PUSH
34005: LD_INT 13
34007: PUSH
34008: LD_INT 14
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
34017: GO 34562
34019: LD_INT 30
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34053
34027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 11
34035: PUSH
34036: LD_INT 12
34038: PUSH
34039: LD_INT 13
34041: PUSH
34042: LD_INT 14
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: ST_TO_ADDR
34051: GO 34562
34053: LD_INT 25
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34061
34059: GO 34079
34061: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_INT 13
34069: PUSH
34070: LD_INT 14
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: ST_TO_ADDR
34077: GO 34562
34079: LD_INT 27
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34087
34085: GO 34105
34087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_INT 13
34095: PUSH
34096: LD_INT 14
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: ST_TO_ADDR
34103: GO 34562
34105: LD_EXP 102
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34115
34113: GO 34141
34115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34116: LD_ADDR_VAR 0 3
34120: PUSH
34121: LD_INT 11
34123: PUSH
34124: LD_INT 12
34126: PUSH
34127: LD_INT 13
34129: PUSH
34130: LD_INT 14
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: ST_TO_ADDR
34139: GO 34562
34141: LD_INT 28
34143: DOUBLE
34144: EQUAL
34145: IFTRUE 34149
34147: GO 34167
34149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_INT 13
34157: PUSH
34158: LD_INT 14
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: ST_TO_ADDR
34165: GO 34562
34167: LD_INT 29
34169: DOUBLE
34170: EQUAL
34171: IFTRUE 34175
34173: GO 34193
34175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34176: LD_ADDR_VAR 0 3
34180: PUSH
34181: LD_INT 13
34183: PUSH
34184: LD_INT 14
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: ST_TO_ADDR
34191: GO 34562
34193: LD_INT 31
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34201
34199: GO 34219
34201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34202: LD_ADDR_VAR 0 3
34206: PUSH
34207: LD_INT 13
34209: PUSH
34210: LD_INT 14
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: ST_TO_ADDR
34217: GO 34562
34219: LD_INT 26
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34245
34227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_INT 13
34235: PUSH
34236: LD_INT 14
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: ST_TO_ADDR
34243: GO 34562
34245: LD_INT 42
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34253
34251: GO 34279
34253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 21
34261: PUSH
34262: LD_INT 22
34264: PUSH
34265: LD_INT 23
34267: PUSH
34268: LD_INT 24
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
34277: GO 34562
34279: LD_INT 43
34281: DOUBLE
34282: EQUAL
34283: IFTRUE 34287
34285: GO 34313
34287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: LD_INT 21
34295: PUSH
34296: LD_INT 22
34298: PUSH
34299: LD_INT 23
34301: PUSH
34302: LD_INT 24
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34562
34313: LD_INT 44
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34347
34321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 21
34329: PUSH
34330: LD_INT 22
34332: PUSH
34333: LD_INT 23
34335: PUSH
34336: LD_INT 24
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
34345: GO 34562
34347: LD_INT 45
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34381
34355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_INT 21
34363: PUSH
34364: LD_INT 22
34366: PUSH
34367: LD_INT 23
34369: PUSH
34370: LD_INT 24
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
34379: GO 34562
34381: LD_INT 49
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34415
34389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_INT 21
34397: PUSH
34398: LD_INT 22
34400: PUSH
34401: LD_INT 23
34403: PUSH
34404: LD_INT 24
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
34413: GO 34562
34415: LD_INT 51
34417: DOUBLE
34418: EQUAL
34419: IFTRUE 34423
34421: GO 34449
34423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_INT 21
34431: PUSH
34432: LD_INT 22
34434: PUSH
34435: LD_INT 23
34437: PUSH
34438: LD_INT 24
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
34447: GO 34562
34449: LD_INT 52
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34483
34457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_INT 21
34465: PUSH
34466: LD_INT 22
34468: PUSH
34469: LD_INT 23
34471: PUSH
34472: LD_INT 24
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
34481: GO 34562
34483: LD_INT 53
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34509
34491: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_INT 23
34499: PUSH
34500: LD_INT 24
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: ST_TO_ADDR
34507: GO 34562
34509: LD_INT 46
34511: DOUBLE
34512: EQUAL
34513: IFTRUE 34517
34515: GO 34535
34517: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34518: LD_ADDR_VAR 0 3
34522: PUSH
34523: LD_INT 23
34525: PUSH
34526: LD_INT 24
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: ST_TO_ADDR
34533: GO 34562
34535: LD_INT 47
34537: DOUBLE
34538: EQUAL
34539: IFTRUE 34543
34541: GO 34561
34543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34544: LD_ADDR_VAR 0 3
34548: PUSH
34549: LD_INT 23
34551: PUSH
34552: LD_INT 24
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: ST_TO_ADDR
34559: GO 34562
34561: POP
// result := ( chassis in result ) ;
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_VAR 0 1
34571: PUSH
34572: LD_VAR 0 3
34576: IN
34577: ST_TO_ADDR
// end ;
34578: LD_VAR 0 3
34582: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34583: LD_INT 0
34585: PPUSH
34586: PPUSH
34587: PPUSH
34588: PPUSH
34589: PPUSH
34590: PPUSH
34591: PPUSH
// result := array ;
34592: LD_ADDR_VAR 0 5
34596: PUSH
34597: LD_VAR 0 1
34601: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34602: LD_VAR 0 1
34606: NOT
34607: PUSH
34608: LD_VAR 0 2
34612: NOT
34613: OR
34614: PUSH
34615: LD_VAR 0 3
34619: NOT
34620: OR
34621: PUSH
34622: LD_VAR 0 2
34626: PUSH
34627: LD_VAR 0 1
34631: GREATER
34632: OR
34633: PUSH
34634: LD_VAR 0 3
34638: PUSH
34639: LD_VAR 0 1
34643: GREATER
34644: OR
34645: IFFALSE 34649
// exit ;
34647: GO 34945
// if direction then
34649: LD_VAR 0 4
34653: IFFALSE 34717
// begin d := 1 ;
34655: LD_ADDR_VAR 0 9
34659: PUSH
34660: LD_INT 1
34662: ST_TO_ADDR
// if i_from > i_to then
34663: LD_VAR 0 2
34667: PUSH
34668: LD_VAR 0 3
34672: GREATER
34673: IFFALSE 34699
// length := ( array - i_from ) + i_to else
34675: LD_ADDR_VAR 0 11
34679: PUSH
34680: LD_VAR 0 1
34684: PUSH
34685: LD_VAR 0 2
34689: MINUS
34690: PUSH
34691: LD_VAR 0 3
34695: PLUS
34696: ST_TO_ADDR
34697: GO 34715
// length := i_to - i_from ;
34699: LD_ADDR_VAR 0 11
34703: PUSH
34704: LD_VAR 0 3
34708: PUSH
34709: LD_VAR 0 2
34713: MINUS
34714: ST_TO_ADDR
// end else
34715: GO 34778
// begin d := - 1 ;
34717: LD_ADDR_VAR 0 9
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: ST_TO_ADDR
// if i_from > i_to then
34726: LD_VAR 0 2
34730: PUSH
34731: LD_VAR 0 3
34735: GREATER
34736: IFFALSE 34756
// length := i_from - i_to else
34738: LD_ADDR_VAR 0 11
34742: PUSH
34743: LD_VAR 0 2
34747: PUSH
34748: LD_VAR 0 3
34752: MINUS
34753: ST_TO_ADDR
34754: GO 34778
// length := ( array - i_to ) + i_from ;
34756: LD_ADDR_VAR 0 11
34760: PUSH
34761: LD_VAR 0 1
34765: PUSH
34766: LD_VAR 0 3
34770: MINUS
34771: PUSH
34772: LD_VAR 0 2
34776: PLUS
34777: ST_TO_ADDR
// end ; if not length then
34778: LD_VAR 0 11
34782: NOT
34783: IFFALSE 34787
// exit ;
34785: GO 34945
// tmp := array ;
34787: LD_ADDR_VAR 0 10
34791: PUSH
34792: LD_VAR 0 1
34796: ST_TO_ADDR
// for i = 1 to length do
34797: LD_ADDR_VAR 0 6
34801: PUSH
34802: DOUBLE
34803: LD_INT 1
34805: DEC
34806: ST_TO_ADDR
34807: LD_VAR 0 11
34811: PUSH
34812: FOR_TO
34813: IFFALSE 34933
// begin for j = 1 to array do
34815: LD_ADDR_VAR 0 7
34819: PUSH
34820: DOUBLE
34821: LD_INT 1
34823: DEC
34824: ST_TO_ADDR
34825: LD_VAR 0 1
34829: PUSH
34830: FOR_TO
34831: IFFALSE 34919
// begin k := j + d ;
34833: LD_ADDR_VAR 0 8
34837: PUSH
34838: LD_VAR 0 7
34842: PUSH
34843: LD_VAR 0 9
34847: PLUS
34848: ST_TO_ADDR
// if k > array then
34849: LD_VAR 0 8
34853: PUSH
34854: LD_VAR 0 1
34858: GREATER
34859: IFFALSE 34869
// k := 1 ;
34861: LD_ADDR_VAR 0 8
34865: PUSH
34866: LD_INT 1
34868: ST_TO_ADDR
// if not k then
34869: LD_VAR 0 8
34873: NOT
34874: IFFALSE 34886
// k := array ;
34876: LD_ADDR_VAR 0 8
34880: PUSH
34881: LD_VAR 0 1
34885: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34886: LD_ADDR_VAR 0 10
34890: PUSH
34891: LD_VAR 0 10
34895: PPUSH
34896: LD_VAR 0 8
34900: PPUSH
34901: LD_VAR 0 1
34905: PUSH
34906: LD_VAR 0 7
34910: ARRAY
34911: PPUSH
34912: CALL_OW 1
34916: ST_TO_ADDR
// end ;
34917: GO 34830
34919: POP
34920: POP
// array := tmp ;
34921: LD_ADDR_VAR 0 1
34925: PUSH
34926: LD_VAR 0 10
34930: ST_TO_ADDR
// end ;
34931: GO 34812
34933: POP
34934: POP
// result := array ;
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: LD_VAR 0 1
34944: ST_TO_ADDR
// end ;
34945: LD_VAR 0 5
34949: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34950: LD_INT 0
34952: PPUSH
34953: PPUSH
// result := 0 ;
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_INT 0
34961: ST_TO_ADDR
// if not array or not value in array then
34962: LD_VAR 0 1
34966: NOT
34967: PUSH
34968: LD_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: IN
34978: NOT
34979: OR
34980: IFFALSE 34984
// exit ;
34982: GO 35038
// for i = 1 to array do
34984: LD_ADDR_VAR 0 4
34988: PUSH
34989: DOUBLE
34990: LD_INT 1
34992: DEC
34993: ST_TO_ADDR
34994: LD_VAR 0 1
34998: PUSH
34999: FOR_TO
35000: IFFALSE 35036
// if value = array [ i ] then
35002: LD_VAR 0 2
35006: PUSH
35007: LD_VAR 0 1
35011: PUSH
35012: LD_VAR 0 4
35016: ARRAY
35017: EQUAL
35018: IFFALSE 35034
// begin result := i ;
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: LD_VAR 0 4
35029: ST_TO_ADDR
// exit ;
35030: POP
35031: POP
35032: GO 35038
// end ;
35034: GO 34999
35036: POP
35037: POP
// end ;
35038: LD_VAR 0 3
35042: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35043: LD_INT 0
35045: PPUSH
// vc_chassis := chassis ;
35046: LD_ADDR_OWVAR 37
35050: PUSH
35051: LD_VAR 0 1
35055: ST_TO_ADDR
// vc_engine := engine ;
35056: LD_ADDR_OWVAR 39
35060: PUSH
35061: LD_VAR 0 2
35065: ST_TO_ADDR
// vc_control := control ;
35066: LD_ADDR_OWVAR 38
35070: PUSH
35071: LD_VAR 0 3
35075: ST_TO_ADDR
// vc_weapon := weapon ;
35076: LD_ADDR_OWVAR 40
35080: PUSH
35081: LD_VAR 0 4
35085: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35086: LD_ADDR_OWVAR 41
35090: PUSH
35091: LD_VAR 0 5
35095: ST_TO_ADDR
// end ;
35096: LD_VAR 0 6
35100: RET
// export function WantPlant ( unit ) ; var task ; begin
35101: LD_INT 0
35103: PPUSH
35104: PPUSH
// result := false ;
35105: LD_ADDR_VAR 0 2
35109: PUSH
35110: LD_INT 0
35112: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_VAR 0 1
35122: PPUSH
35123: CALL_OW 437
35127: ST_TO_ADDR
// if task then
35128: LD_VAR 0 3
35132: IFFALSE 35160
// if task [ 1 ] [ 1 ] = p then
35134: LD_VAR 0 3
35138: PUSH
35139: LD_INT 1
35141: ARRAY
35142: PUSH
35143: LD_INT 1
35145: ARRAY
35146: PUSH
35147: LD_STRING p
35149: EQUAL
35150: IFFALSE 35160
// result := true ;
35152: LD_ADDR_VAR 0 2
35156: PUSH
35157: LD_INT 1
35159: ST_TO_ADDR
// end ;
35160: LD_VAR 0 2
35164: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35165: LD_INT 0
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
// if pos < 1 then
35171: LD_VAR 0 2
35175: PUSH
35176: LD_INT 1
35178: LESS
35179: IFFALSE 35183
// exit ;
35181: GO 35486
// if pos = 1 then
35183: LD_VAR 0 2
35187: PUSH
35188: LD_INT 1
35190: EQUAL
35191: IFFALSE 35224
// result := Replace ( arr , pos [ 1 ] , value ) else
35193: LD_ADDR_VAR 0 4
35197: PUSH
35198: LD_VAR 0 1
35202: PPUSH
35203: LD_VAR 0 2
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: LD_VAR 0 3
35216: PPUSH
35217: CALL_OW 1
35221: ST_TO_ADDR
35222: GO 35486
// begin tmp := arr ;
35224: LD_ADDR_VAR 0 6
35228: PUSH
35229: LD_VAR 0 1
35233: ST_TO_ADDR
// s_arr := [ tmp ] ;
35234: LD_ADDR_VAR 0 7
35238: PUSH
35239: LD_VAR 0 6
35243: PUSH
35244: EMPTY
35245: LIST
35246: ST_TO_ADDR
// for i = 1 to pos - 1 do
35247: LD_ADDR_VAR 0 5
35251: PUSH
35252: DOUBLE
35253: LD_INT 1
35255: DEC
35256: ST_TO_ADDR
35257: LD_VAR 0 2
35261: PUSH
35262: LD_INT 1
35264: MINUS
35265: PUSH
35266: FOR_TO
35267: IFFALSE 35312
// begin tmp := tmp [ pos [ i ] ] ;
35269: LD_ADDR_VAR 0 6
35273: PUSH
35274: LD_VAR 0 6
35278: PUSH
35279: LD_VAR 0 2
35283: PUSH
35284: LD_VAR 0 5
35288: ARRAY
35289: ARRAY
35290: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35291: LD_ADDR_VAR 0 7
35295: PUSH
35296: LD_VAR 0 7
35300: PUSH
35301: LD_VAR 0 6
35305: PUSH
35306: EMPTY
35307: LIST
35308: ADD
35309: ST_TO_ADDR
// end ;
35310: GO 35266
35312: POP
35313: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35314: LD_ADDR_VAR 0 6
35318: PUSH
35319: LD_VAR 0 6
35323: PPUSH
35324: LD_VAR 0 2
35328: PUSH
35329: LD_VAR 0 2
35333: ARRAY
35334: PPUSH
35335: LD_VAR 0 3
35339: PPUSH
35340: CALL_OW 1
35344: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35345: LD_ADDR_VAR 0 7
35349: PUSH
35350: LD_VAR 0 7
35354: PPUSH
35355: LD_VAR 0 7
35359: PPUSH
35360: LD_VAR 0 6
35364: PPUSH
35365: CALL_OW 1
35369: ST_TO_ADDR
// for i = s_arr downto 2 do
35370: LD_ADDR_VAR 0 5
35374: PUSH
35375: DOUBLE
35376: LD_VAR 0 7
35380: INC
35381: ST_TO_ADDR
35382: LD_INT 2
35384: PUSH
35385: FOR_DOWNTO
35386: IFFALSE 35470
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35388: LD_ADDR_VAR 0 6
35392: PUSH
35393: LD_VAR 0 7
35397: PUSH
35398: LD_VAR 0 5
35402: PUSH
35403: LD_INT 1
35405: MINUS
35406: ARRAY
35407: PPUSH
35408: LD_VAR 0 2
35412: PUSH
35413: LD_VAR 0 5
35417: PUSH
35418: LD_INT 1
35420: MINUS
35421: ARRAY
35422: PPUSH
35423: LD_VAR 0 7
35427: PUSH
35428: LD_VAR 0 5
35432: ARRAY
35433: PPUSH
35434: CALL_OW 1
35438: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35439: LD_ADDR_VAR 0 7
35443: PUSH
35444: LD_VAR 0 7
35448: PPUSH
35449: LD_VAR 0 5
35453: PUSH
35454: LD_INT 1
35456: MINUS
35457: PPUSH
35458: LD_VAR 0 6
35462: PPUSH
35463: CALL_OW 1
35467: ST_TO_ADDR
// end ;
35468: GO 35385
35470: POP
35471: POP
// result := s_arr [ 1 ] ;
35472: LD_ADDR_VAR 0 4
35476: PUSH
35477: LD_VAR 0 7
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: ST_TO_ADDR
// end ; end ;
35486: LD_VAR 0 4
35490: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35491: LD_INT 0
35493: PPUSH
35494: PPUSH
// if not list then
35495: LD_VAR 0 1
35499: NOT
35500: IFFALSE 35504
// exit ;
35502: GO 35595
// i := list [ pos1 ] ;
35504: LD_ADDR_VAR 0 5
35508: PUSH
35509: LD_VAR 0 1
35513: PUSH
35514: LD_VAR 0 2
35518: ARRAY
35519: ST_TO_ADDR
// if not i then
35520: LD_VAR 0 5
35524: NOT
35525: IFFALSE 35529
// exit ;
35527: GO 35595
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35529: LD_ADDR_VAR 0 1
35533: PUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: LD_VAR 0 2
35543: PPUSH
35544: LD_VAR 0 1
35548: PUSH
35549: LD_VAR 0 3
35553: ARRAY
35554: PPUSH
35555: CALL_OW 1
35559: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35560: LD_ADDR_VAR 0 1
35564: PUSH
35565: LD_VAR 0 1
35569: PPUSH
35570: LD_VAR 0 3
35574: PPUSH
35575: LD_VAR 0 5
35579: PPUSH
35580: CALL_OW 1
35584: ST_TO_ADDR
// result := list ;
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 1
35594: ST_TO_ADDR
// end ;
35595: LD_VAR 0 4
35599: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35600: LD_INT 0
35602: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35603: LD_ADDR_VAR 0 5
35607: PUSH
35608: LD_VAR 0 1
35612: PPUSH
35613: CALL_OW 250
35617: PPUSH
35618: LD_VAR 0 1
35622: PPUSH
35623: CALL_OW 251
35627: PPUSH
35628: LD_VAR 0 2
35632: PPUSH
35633: LD_VAR 0 3
35637: PPUSH
35638: LD_VAR 0 4
35642: PPUSH
35643: CALL 35653 0 5
35647: ST_TO_ADDR
// end ;
35648: LD_VAR 0 5
35652: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35653: LD_INT 0
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
// if not list then
35659: LD_VAR 0 3
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 36056
// result := [ ] ;
35668: LD_ADDR_VAR 0 6
35672: PUSH
35673: EMPTY
35674: ST_TO_ADDR
// for i in list do
35675: LD_ADDR_VAR 0 7
35679: PUSH
35680: LD_VAR 0 3
35684: PUSH
35685: FOR_IN
35686: IFFALSE 35888
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35688: LD_ADDR_VAR 0 9
35692: PUSH
35693: LD_VAR 0 7
35697: PPUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: LD_VAR 0 2
35707: PPUSH
35708: CALL_OW 297
35712: ST_TO_ADDR
// if not result then
35713: LD_VAR 0 6
35717: NOT
35718: IFFALSE 35744
// result := [ [ i , tmp ] ] else
35720: LD_ADDR_VAR 0 6
35724: PUSH
35725: LD_VAR 0 7
35729: PUSH
35730: LD_VAR 0 9
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: ST_TO_ADDR
35742: GO 35886
// begin if result [ result ] [ 2 ] < tmp then
35744: LD_VAR 0 6
35748: PUSH
35749: LD_VAR 0 6
35753: ARRAY
35754: PUSH
35755: LD_INT 2
35757: ARRAY
35758: PUSH
35759: LD_VAR 0 9
35763: LESS
35764: IFFALSE 35806
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35766: LD_ADDR_VAR 0 6
35770: PUSH
35771: LD_VAR 0 6
35775: PPUSH
35776: LD_VAR 0 6
35780: PUSH
35781: LD_INT 1
35783: PLUS
35784: PPUSH
35785: LD_VAR 0 7
35789: PUSH
35790: LD_VAR 0 9
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PPUSH
35799: CALL_OW 2
35803: ST_TO_ADDR
35804: GO 35886
// for j = 1 to result do
35806: LD_ADDR_VAR 0 8
35810: PUSH
35811: DOUBLE
35812: LD_INT 1
35814: DEC
35815: ST_TO_ADDR
35816: LD_VAR 0 6
35820: PUSH
35821: FOR_TO
35822: IFFALSE 35884
// begin if tmp < result [ j ] [ 2 ] then
35824: LD_VAR 0 9
35828: PUSH
35829: LD_VAR 0 6
35833: PUSH
35834: LD_VAR 0 8
35838: ARRAY
35839: PUSH
35840: LD_INT 2
35842: ARRAY
35843: LESS
35844: IFFALSE 35882
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_VAR 0 6
35855: PPUSH
35856: LD_VAR 0 8
35860: PPUSH
35861: LD_VAR 0 7
35865: PUSH
35866: LD_VAR 0 9
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PPUSH
35875: CALL_OW 2
35879: ST_TO_ADDR
// break ;
35880: GO 35884
// end ; end ;
35882: GO 35821
35884: POP
35885: POP
// end ; end ;
35886: GO 35685
35888: POP
35889: POP
// if result and not asc then
35890: LD_VAR 0 6
35894: PUSH
35895: LD_VAR 0 4
35899: NOT
35900: AND
35901: IFFALSE 35976
// begin tmp := result ;
35903: LD_ADDR_VAR 0 9
35907: PUSH
35908: LD_VAR 0 6
35912: ST_TO_ADDR
// for i = tmp downto 1 do
35913: LD_ADDR_VAR 0 7
35917: PUSH
35918: DOUBLE
35919: LD_VAR 0 9
35923: INC
35924: ST_TO_ADDR
35925: LD_INT 1
35927: PUSH
35928: FOR_DOWNTO
35929: IFFALSE 35974
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35931: LD_ADDR_VAR 0 6
35935: PUSH
35936: LD_VAR 0 6
35940: PPUSH
35941: LD_VAR 0 9
35945: PUSH
35946: LD_VAR 0 7
35950: MINUS
35951: PUSH
35952: LD_INT 1
35954: PLUS
35955: PPUSH
35956: LD_VAR 0 9
35960: PUSH
35961: LD_VAR 0 7
35965: ARRAY
35966: PPUSH
35967: CALL_OW 1
35971: ST_TO_ADDR
35972: GO 35928
35974: POP
35975: POP
// end ; tmp := [ ] ;
35976: LD_ADDR_VAR 0 9
35980: PUSH
35981: EMPTY
35982: ST_TO_ADDR
// if mode then
35983: LD_VAR 0 5
35987: IFFALSE 36056
// begin for i = 1 to result do
35989: LD_ADDR_VAR 0 7
35993: PUSH
35994: DOUBLE
35995: LD_INT 1
35997: DEC
35998: ST_TO_ADDR
35999: LD_VAR 0 6
36003: PUSH
36004: FOR_TO
36005: IFFALSE 36044
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36007: LD_ADDR_VAR 0 9
36011: PUSH
36012: LD_VAR 0 9
36016: PPUSH
36017: LD_VAR 0 7
36021: PPUSH
36022: LD_VAR 0 6
36026: PUSH
36027: LD_VAR 0 7
36031: ARRAY
36032: PUSH
36033: LD_INT 1
36035: ARRAY
36036: PPUSH
36037: CALL_OW 1
36041: ST_TO_ADDR
36042: GO 36004
36044: POP
36045: POP
// result := tmp ;
36046: LD_ADDR_VAR 0 6
36050: PUSH
36051: LD_VAR 0 9
36055: ST_TO_ADDR
// end ; end ;
36056: LD_VAR 0 6
36060: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36061: LD_INT 0
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36069: LD_ADDR_VAR 0 5
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: ST_TO_ADDR
// if not x or not y then
36091: LD_VAR 0 2
36095: NOT
36096: PUSH
36097: LD_VAR 0 3
36101: NOT
36102: OR
36103: IFFALSE 36107
// exit ;
36105: GO 37759
// if not range then
36107: LD_VAR 0 4
36111: NOT
36112: IFFALSE 36122
// range := 10 ;
36114: LD_ADDR_VAR 0 4
36118: PUSH
36119: LD_INT 10
36121: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36122: LD_ADDR_VAR 0 8
36126: PUSH
36127: LD_INT 81
36129: PUSH
36130: LD_VAR 0 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 92
36141: PUSH
36142: LD_VAR 0 2
36146: PUSH
36147: LD_VAR 0 3
36151: PUSH
36152: LD_VAR 0 4
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 3
36165: PUSH
36166: LD_INT 21
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: PPUSH
36185: CALL_OW 69
36189: ST_TO_ADDR
// if not tmp then
36190: LD_VAR 0 8
36194: NOT
36195: IFFALSE 36199
// exit ;
36197: GO 37759
// for i in tmp do
36199: LD_ADDR_VAR 0 6
36203: PUSH
36204: LD_VAR 0 8
36208: PUSH
36209: FOR_IN
36210: IFFALSE 37734
// begin points := [ 0 , 0 , 0 ] ;
36212: LD_ADDR_VAR 0 9
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: ST_TO_ADDR
// bpoints := 1 ;
36231: LD_ADDR_VAR 0 10
36235: PUSH
36236: LD_INT 1
36238: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36239: LD_VAR 0 6
36243: PPUSH
36244: CALL_OW 247
36248: PUSH
36249: LD_INT 1
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36835
36257: POP
// begin if GetClass ( i ) = 1 then
36258: LD_VAR 0 6
36262: PPUSH
36263: CALL_OW 257
36267: PUSH
36268: LD_INT 1
36270: EQUAL
36271: IFFALSE 36292
// points := [ 10 , 5 , 3 ] ;
36273: LD_ADDR_VAR 0 9
36277: PUSH
36278: LD_INT 10
36280: PUSH
36281: LD_INT 5
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36292: LD_VAR 0 6
36296: PPUSH
36297: CALL_OW 257
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 4
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: IN
36316: IFFALSE 36337
// points := [ 3 , 2 , 1 ] ;
36318: LD_ADDR_VAR 0 9
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36337: LD_VAR 0 6
36341: PPUSH
36342: CALL_OW 257
36346: PUSH
36347: LD_INT 5
36349: EQUAL
36350: IFFALSE 36371
// points := [ 130 , 5 , 2 ] ;
36352: LD_ADDR_VAR 0 9
36356: PUSH
36357: LD_INT 130
36359: PUSH
36360: LD_INT 5
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36371: LD_VAR 0 6
36375: PPUSH
36376: CALL_OW 257
36380: PUSH
36381: LD_INT 8
36383: EQUAL
36384: IFFALSE 36405
// points := [ 35 , 35 , 30 ] ;
36386: LD_ADDR_VAR 0 9
36390: PUSH
36391: LD_INT 35
36393: PUSH
36394: LD_INT 35
36396: PUSH
36397: LD_INT 30
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36405: LD_VAR 0 6
36409: PPUSH
36410: CALL_OW 257
36414: PUSH
36415: LD_INT 9
36417: EQUAL
36418: IFFALSE 36439
// points := [ 20 , 55 , 40 ] ;
36420: LD_ADDR_VAR 0 9
36424: PUSH
36425: LD_INT 20
36427: PUSH
36428: LD_INT 55
36430: PUSH
36431: LD_INT 40
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36439: LD_VAR 0 6
36443: PPUSH
36444: CALL_OW 257
36448: PUSH
36449: LD_INT 12
36451: PUSH
36452: LD_INT 16
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: IN
36459: IFFALSE 36480
// points := [ 5 , 3 , 2 ] ;
36461: LD_ADDR_VAR 0 9
36465: PUSH
36466: LD_INT 5
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36480: LD_VAR 0 6
36484: PPUSH
36485: CALL_OW 257
36489: PUSH
36490: LD_INT 17
36492: EQUAL
36493: IFFALSE 36514
// points := [ 100 , 50 , 75 ] ;
36495: LD_ADDR_VAR 0 9
36499: PUSH
36500: LD_INT 100
36502: PUSH
36503: LD_INT 50
36505: PUSH
36506: LD_INT 75
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36514: LD_VAR 0 6
36518: PPUSH
36519: CALL_OW 257
36523: PUSH
36524: LD_INT 15
36526: EQUAL
36527: IFFALSE 36548
// points := [ 10 , 5 , 3 ] ;
36529: LD_ADDR_VAR 0 9
36533: PUSH
36534: LD_INT 10
36536: PUSH
36537: LD_INT 5
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36548: LD_VAR 0 6
36552: PPUSH
36553: CALL_OW 257
36557: PUSH
36558: LD_INT 14
36560: EQUAL
36561: IFFALSE 36582
// points := [ 10 , 0 , 0 ] ;
36563: LD_ADDR_VAR 0 9
36567: PUSH
36568: LD_INT 10
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36582: LD_VAR 0 6
36586: PPUSH
36587: CALL_OW 257
36591: PUSH
36592: LD_INT 11
36594: EQUAL
36595: IFFALSE 36616
// points := [ 30 , 10 , 5 ] ;
36597: LD_ADDR_VAR 0 9
36601: PUSH
36602: LD_INT 30
36604: PUSH
36605: LD_INT 10
36607: PUSH
36608: LD_INT 5
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36616: LD_VAR 0 1
36620: PPUSH
36621: LD_INT 5
36623: PPUSH
36624: CALL_OW 321
36628: PUSH
36629: LD_INT 2
36631: EQUAL
36632: IFFALSE 36649
// bpoints := bpoints * 1.8 ;
36634: LD_ADDR_VAR 0 10
36638: PUSH
36639: LD_VAR 0 10
36643: PUSH
36644: LD_REAL  1.80000000000000E+0000
36647: MUL
36648: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36649: LD_VAR 0 6
36653: PPUSH
36654: CALL_OW 257
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: LD_INT 4
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: IN
36677: PUSH
36678: LD_VAR 0 1
36682: PPUSH
36683: LD_INT 51
36685: PPUSH
36686: CALL_OW 321
36690: PUSH
36691: LD_INT 2
36693: EQUAL
36694: AND
36695: IFFALSE 36712
// bpoints := bpoints * 1.2 ;
36697: LD_ADDR_VAR 0 10
36701: PUSH
36702: LD_VAR 0 10
36706: PUSH
36707: LD_REAL  1.20000000000000E+0000
36710: MUL
36711: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36712: LD_VAR 0 6
36716: PPUSH
36717: CALL_OW 257
36721: PUSH
36722: LD_INT 5
36724: PUSH
36725: LD_INT 7
36727: PUSH
36728: LD_INT 9
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: LIST
36735: IN
36736: PUSH
36737: LD_VAR 0 1
36741: PPUSH
36742: LD_INT 52
36744: PPUSH
36745: CALL_OW 321
36749: PUSH
36750: LD_INT 2
36752: EQUAL
36753: AND
36754: IFFALSE 36771
// bpoints := bpoints * 1.5 ;
36756: LD_ADDR_VAR 0 10
36760: PUSH
36761: LD_VAR 0 10
36765: PUSH
36766: LD_REAL  1.50000000000000E+0000
36769: MUL
36770: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36771: LD_VAR 0 1
36775: PPUSH
36776: LD_INT 66
36778: PPUSH
36779: CALL_OW 321
36783: PUSH
36784: LD_INT 2
36786: EQUAL
36787: IFFALSE 36804
// bpoints := bpoints * 1.1 ;
36789: LD_ADDR_VAR 0 10
36793: PUSH
36794: LD_VAR 0 10
36798: PUSH
36799: LD_REAL  1.10000000000000E+0000
36802: MUL
36803: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36804: LD_ADDR_VAR 0 10
36808: PUSH
36809: LD_VAR 0 10
36813: PUSH
36814: LD_VAR 0 6
36818: PPUSH
36819: LD_INT 1
36821: PPUSH
36822: CALL_OW 259
36826: PUSH
36827: LD_REAL  1.15000000000000E+0000
36830: MUL
36831: MUL
36832: ST_TO_ADDR
// end ; unit_vehicle :
36833: GO 37663
36835: LD_INT 2
36837: DOUBLE
36838: EQUAL
36839: IFTRUE 36843
36841: GO 37651
36843: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36844: LD_VAR 0 6
36848: PPUSH
36849: CALL_OW 264
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 42
36859: PUSH
36860: LD_INT 24
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: IN
36868: IFFALSE 36889
// points := [ 25 , 5 , 3 ] ;
36870: LD_ADDR_VAR 0 9
36874: PUSH
36875: LD_INT 25
36877: PUSH
36878: LD_INT 5
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36889: LD_VAR 0 6
36893: PPUSH
36894: CALL_OW 264
36898: PUSH
36899: LD_INT 4
36901: PUSH
36902: LD_INT 43
36904: PUSH
36905: LD_INT 25
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: IN
36913: IFFALSE 36934
// points := [ 40 , 15 , 5 ] ;
36915: LD_ADDR_VAR 0 9
36919: PUSH
36920: LD_INT 40
36922: PUSH
36923: LD_INT 15
36925: PUSH
36926: LD_INT 5
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36934: LD_VAR 0 6
36938: PPUSH
36939: CALL_OW 264
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: LD_INT 23
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: IN
36954: IFFALSE 36975
// points := [ 7 , 25 , 8 ] ;
36956: LD_ADDR_VAR 0 9
36960: PUSH
36961: LD_INT 7
36963: PUSH
36964: LD_INT 25
36966: PUSH
36967: LD_INT 8
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36975: LD_VAR 0 6
36979: PPUSH
36980: CALL_OW 264
36984: PUSH
36985: LD_INT 5
36987: PUSH
36988: LD_INT 27
36990: PUSH
36991: LD_INT 44
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: LIST
36998: IN
36999: IFFALSE 37020
// points := [ 14 , 50 , 16 ] ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_INT 14
37008: PUSH
37009: LD_INT 50
37011: PUSH
37012: LD_INT 16
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37020: LD_VAR 0 6
37024: PPUSH
37025: CALL_OW 264
37029: PUSH
37030: LD_INT 6
37032: PUSH
37033: LD_INT 46
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: IN
37040: IFFALSE 37061
// points := [ 32 , 120 , 70 ] ;
37042: LD_ADDR_VAR 0 9
37046: PUSH
37047: LD_INT 32
37049: PUSH
37050: LD_INT 120
37052: PUSH
37053: LD_INT 70
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37061: LD_VAR 0 6
37065: PPUSH
37066: CALL_OW 264
37070: PUSH
37071: LD_INT 7
37073: PUSH
37074: LD_INT 28
37076: PUSH
37077: LD_INT 45
37079: PUSH
37080: LD_EXP 102
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: IN
37091: IFFALSE 37112
// points := [ 35 , 20 , 45 ] ;
37093: LD_ADDR_VAR 0 9
37097: PUSH
37098: LD_INT 35
37100: PUSH
37101: LD_INT 20
37103: PUSH
37104: LD_INT 45
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37112: LD_VAR 0 6
37116: PPUSH
37117: CALL_OW 264
37121: PUSH
37122: LD_INT 47
37124: PUSH
37125: EMPTY
37126: LIST
37127: IN
37128: IFFALSE 37149
// points := [ 67 , 45 , 75 ] ;
37130: LD_ADDR_VAR 0 9
37134: PUSH
37135: LD_INT 67
37137: PUSH
37138: LD_INT 45
37140: PUSH
37141: LD_INT 75
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37149: LD_VAR 0 6
37153: PPUSH
37154: CALL_OW 264
37158: PUSH
37159: LD_INT 26
37161: PUSH
37162: EMPTY
37163: LIST
37164: IN
37165: IFFALSE 37186
// points := [ 120 , 30 , 80 ] ;
37167: LD_ADDR_VAR 0 9
37171: PUSH
37172: LD_INT 120
37174: PUSH
37175: LD_INT 30
37177: PUSH
37178: LD_INT 80
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37186: LD_VAR 0 6
37190: PPUSH
37191: CALL_OW 264
37195: PUSH
37196: LD_INT 22
37198: PUSH
37199: EMPTY
37200: LIST
37201: IN
37202: IFFALSE 37223
// points := [ 40 , 1 , 1 ] ;
37204: LD_ADDR_VAR 0 9
37208: PUSH
37209: LD_INT 40
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37223: LD_VAR 0 6
37227: PPUSH
37228: CALL_OW 264
37232: PUSH
37233: LD_INT 29
37235: PUSH
37236: EMPTY
37237: LIST
37238: IN
37239: IFFALSE 37260
// points := [ 70 , 200 , 400 ] ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_INT 70
37248: PUSH
37249: LD_INT 200
37251: PUSH
37252: LD_INT 400
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37260: LD_VAR 0 6
37264: PPUSH
37265: CALL_OW 264
37269: PUSH
37270: LD_INT 14
37272: PUSH
37273: LD_INT 53
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: IN
37280: IFFALSE 37301
// points := [ 40 , 10 , 20 ] ;
37282: LD_ADDR_VAR 0 9
37286: PUSH
37287: LD_INT 40
37289: PUSH
37290: LD_INT 10
37292: PUSH
37293: LD_INT 20
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37301: LD_VAR 0 6
37305: PPUSH
37306: CALL_OW 264
37310: PUSH
37311: LD_INT 9
37313: PUSH
37314: EMPTY
37315: LIST
37316: IN
37317: IFFALSE 37338
// points := [ 5 , 70 , 20 ] ;
37319: LD_ADDR_VAR 0 9
37323: PUSH
37324: LD_INT 5
37326: PUSH
37327: LD_INT 70
37329: PUSH
37330: LD_INT 20
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37338: LD_VAR 0 6
37342: PPUSH
37343: CALL_OW 264
37347: PUSH
37348: LD_INT 10
37350: PUSH
37351: EMPTY
37352: LIST
37353: IN
37354: IFFALSE 37375
// points := [ 35 , 110 , 70 ] ;
37356: LD_ADDR_VAR 0 9
37360: PUSH
37361: LD_INT 35
37363: PUSH
37364: LD_INT 110
37366: PUSH
37367: LD_INT 70
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37375: LD_VAR 0 6
37379: PPUSH
37380: CALL_OW 265
37384: PUSH
37385: LD_INT 25
37387: EQUAL
37388: IFFALSE 37409
// points := [ 80 , 65 , 100 ] ;
37390: LD_ADDR_VAR 0 9
37394: PUSH
37395: LD_INT 80
37397: PUSH
37398: LD_INT 65
37400: PUSH
37401: LD_INT 100
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37409: LD_VAR 0 6
37413: PPUSH
37414: CALL_OW 263
37418: PUSH
37419: LD_INT 1
37421: EQUAL
37422: IFFALSE 37457
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37424: LD_ADDR_VAR 0 10
37428: PUSH
37429: LD_VAR 0 10
37433: PUSH
37434: LD_VAR 0 6
37438: PPUSH
37439: CALL_OW 311
37443: PPUSH
37444: LD_INT 3
37446: PPUSH
37447: CALL_OW 259
37451: PUSH
37452: LD_INT 4
37454: MUL
37455: MUL
37456: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37457: LD_VAR 0 6
37461: PPUSH
37462: CALL_OW 263
37466: PUSH
37467: LD_INT 2
37469: EQUAL
37470: IFFALSE 37521
// begin j := IsControledBy ( i ) ;
37472: LD_ADDR_VAR 0 7
37476: PUSH
37477: LD_VAR 0 6
37481: PPUSH
37482: CALL_OW 312
37486: ST_TO_ADDR
// if j then
37487: LD_VAR 0 7
37491: IFFALSE 37521
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37493: LD_ADDR_VAR 0 10
37497: PUSH
37498: LD_VAR 0 10
37502: PUSH
37503: LD_VAR 0 7
37507: PPUSH
37508: LD_INT 3
37510: PPUSH
37511: CALL_OW 259
37515: PUSH
37516: LD_INT 3
37518: MUL
37519: MUL
37520: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37521: LD_VAR 0 6
37525: PPUSH
37526: CALL_OW 264
37530: PUSH
37531: LD_INT 5
37533: PUSH
37534: LD_INT 6
37536: PUSH
37537: LD_INT 46
37539: PUSH
37540: LD_INT 44
37542: PUSH
37543: LD_INT 47
37545: PUSH
37546: LD_INT 45
37548: PUSH
37549: LD_INT 28
37551: PUSH
37552: LD_INT 7
37554: PUSH
37555: LD_INT 27
37557: PUSH
37558: LD_INT 29
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: IN
37573: PUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: LD_INT 52
37581: PPUSH
37582: CALL_OW 321
37586: PUSH
37587: LD_INT 2
37589: EQUAL
37590: AND
37591: IFFALSE 37608
// bpoints := bpoints * 1.2 ;
37593: LD_ADDR_VAR 0 10
37597: PUSH
37598: LD_VAR 0 10
37602: PUSH
37603: LD_REAL  1.20000000000000E+0000
37606: MUL
37607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37608: LD_VAR 0 6
37612: PPUSH
37613: CALL_OW 264
37617: PUSH
37618: LD_INT 6
37620: PUSH
37621: LD_INT 46
37623: PUSH
37624: LD_INT 47
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: IN
37632: IFFALSE 37649
// bpoints := bpoints * 1.2 ;
37634: LD_ADDR_VAR 0 10
37638: PUSH
37639: LD_VAR 0 10
37643: PUSH
37644: LD_REAL  1.20000000000000E+0000
37647: MUL
37648: ST_TO_ADDR
// end ; unit_building :
37649: GO 37663
37651: LD_INT 3
37653: DOUBLE
37654: EQUAL
37655: IFTRUE 37659
37657: GO 37662
37659: POP
// ; end ;
37660: GO 37663
37662: POP
// for j = 1 to 3 do
37663: LD_ADDR_VAR 0 7
37667: PUSH
37668: DOUBLE
37669: LD_INT 1
37671: DEC
37672: ST_TO_ADDR
37673: LD_INT 3
37675: PUSH
37676: FOR_TO
37677: IFFALSE 37730
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37679: LD_ADDR_VAR 0 5
37683: PUSH
37684: LD_VAR 0 5
37688: PPUSH
37689: LD_VAR 0 7
37693: PPUSH
37694: LD_VAR 0 5
37698: PUSH
37699: LD_VAR 0 7
37703: ARRAY
37704: PUSH
37705: LD_VAR 0 9
37709: PUSH
37710: LD_VAR 0 7
37714: ARRAY
37715: PUSH
37716: LD_VAR 0 10
37720: MUL
37721: PLUS
37722: PPUSH
37723: CALL_OW 1
37727: ST_TO_ADDR
37728: GO 37676
37730: POP
37731: POP
// end ;
37732: GO 36209
37734: POP
37735: POP
// result := Replace ( result , 4 , tmp ) ;
37736: LD_ADDR_VAR 0 5
37740: PUSH
37741: LD_VAR 0 5
37745: PPUSH
37746: LD_INT 4
37748: PPUSH
37749: LD_VAR 0 8
37753: PPUSH
37754: CALL_OW 1
37758: ST_TO_ADDR
// end ;
37759: LD_VAR 0 5
37763: RET
// export function DangerAtRange ( unit , range ) ; begin
37764: LD_INT 0
37766: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37767: LD_ADDR_VAR 0 3
37771: PUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 255
37781: PPUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 250
37791: PPUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 251
37801: PPUSH
37802: LD_VAR 0 2
37806: PPUSH
37807: CALL 36061 0 4
37811: ST_TO_ADDR
// end ;
37812: LD_VAR 0 3
37816: RET
// export function DangerInArea ( side , area ) ; begin
37817: LD_INT 0
37819: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37820: LD_ADDR_VAR 0 3
37824: PUSH
37825: LD_VAR 0 2
37829: PPUSH
37830: LD_INT 81
37832: PUSH
37833: LD_VAR 0 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PPUSH
37842: CALL_OW 70
37846: ST_TO_ADDR
// end ;
37847: LD_VAR 0 3
37851: RET
// export function IsExtension ( b ) ; begin
37852: LD_INT 0
37854: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37855: LD_ADDR_VAR 0 2
37859: PUSH
37860: LD_VAR 0 1
37864: PUSH
37865: LD_INT 23
37867: PUSH
37868: LD_INT 20
37870: PUSH
37871: LD_INT 22
37873: PUSH
37874: LD_INT 17
37876: PUSH
37877: LD_INT 24
37879: PUSH
37880: LD_INT 21
37882: PUSH
37883: LD_INT 19
37885: PUSH
37886: LD_INT 16
37888: PUSH
37889: LD_INT 25
37891: PUSH
37892: LD_INT 18
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: IN
37907: ST_TO_ADDR
// end ;
37908: LD_VAR 0 2
37912: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37913: LD_INT 0
37915: PPUSH
37916: PPUSH
37917: PPUSH
// result := [ ] ;
37918: LD_ADDR_VAR 0 4
37922: PUSH
37923: EMPTY
37924: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37925: LD_ADDR_VAR 0 5
37929: PUSH
37930: LD_VAR 0 2
37934: PPUSH
37935: LD_INT 21
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PPUSH
37945: CALL_OW 70
37949: ST_TO_ADDR
// if not tmp then
37950: LD_VAR 0 5
37954: NOT
37955: IFFALSE 37959
// exit ;
37957: GO 38023
// if checkLink then
37959: LD_VAR 0 3
37963: IFFALSE 38013
// begin for i in tmp do
37965: LD_ADDR_VAR 0 6
37969: PUSH
37970: LD_VAR 0 5
37974: PUSH
37975: FOR_IN
37976: IFFALSE 38011
// if GetBase ( i ) <> base then
37978: LD_VAR 0 6
37982: PPUSH
37983: CALL_OW 274
37987: PUSH
37988: LD_VAR 0 1
37992: NONEQUAL
37993: IFFALSE 38009
// ComLinkToBase ( base , i ) ;
37995: LD_VAR 0 1
37999: PPUSH
38000: LD_VAR 0 6
38004: PPUSH
38005: CALL_OW 169
38009: GO 37975
38011: POP
38012: POP
// end ; result := tmp ;
38013: LD_ADDR_VAR 0 4
38017: PUSH
38018: LD_VAR 0 5
38022: ST_TO_ADDR
// end ;
38023: LD_VAR 0 4
38027: RET
// export function ComComplete ( units , b ) ; var i ; begin
38028: LD_INT 0
38030: PPUSH
38031: PPUSH
// if not units then
38032: LD_VAR 0 1
38036: NOT
38037: IFFALSE 38041
// exit ;
38039: GO 38131
// for i in units do
38041: LD_ADDR_VAR 0 4
38045: PUSH
38046: LD_VAR 0 1
38050: PUSH
38051: FOR_IN
38052: IFFALSE 38129
// if BuildingStatus ( b ) = bs_build then
38054: LD_VAR 0 2
38058: PPUSH
38059: CALL_OW 461
38063: PUSH
38064: LD_INT 1
38066: EQUAL
38067: IFFALSE 38127
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38069: LD_VAR 0 4
38073: PPUSH
38074: LD_STRING h
38076: PUSH
38077: LD_VAR 0 2
38081: PPUSH
38082: CALL_OW 250
38086: PUSH
38087: LD_VAR 0 2
38091: PPUSH
38092: CALL_OW 251
38096: PUSH
38097: LD_VAR 0 2
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: PUSH
38120: EMPTY
38121: LIST
38122: PPUSH
38123: CALL_OW 446
38127: GO 38051
38129: POP
38130: POP
// end ;
38131: LD_VAR 0 3
38135: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38136: LD_INT 0
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38144: LD_VAR 0 1
38148: NOT
38149: PUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 263
38159: PUSH
38160: LD_INT 2
38162: NONEQUAL
38163: OR
38164: IFFALSE 38168
// exit ;
38166: GO 38484
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38168: LD_ADDR_VAR 0 6
38172: PUSH
38173: LD_INT 22
38175: PUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 255
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 30
38195: PUSH
38196: LD_INT 36
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 34
38205: PUSH
38206: LD_INT 31
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PPUSH
38222: CALL_OW 69
38226: ST_TO_ADDR
// if not tmp then
38227: LD_VAR 0 6
38231: NOT
38232: IFFALSE 38236
// exit ;
38234: GO 38484
// result := [ ] ;
38236: LD_ADDR_VAR 0 2
38240: PUSH
38241: EMPTY
38242: ST_TO_ADDR
// for i in tmp do
38243: LD_ADDR_VAR 0 3
38247: PUSH
38248: LD_VAR 0 6
38252: PUSH
38253: FOR_IN
38254: IFFALSE 38325
// begin t := UnitsInside ( i ) ;
38256: LD_ADDR_VAR 0 4
38260: PUSH
38261: LD_VAR 0 3
38265: PPUSH
38266: CALL_OW 313
38270: ST_TO_ADDR
// if t then
38271: LD_VAR 0 4
38275: IFFALSE 38323
// for j in t do
38277: LD_ADDR_VAR 0 7
38281: PUSH
38282: LD_VAR 0 4
38286: PUSH
38287: FOR_IN
38288: IFFALSE 38321
// result := Replace ( result , result + 1 , j ) ;
38290: LD_ADDR_VAR 0 2
38294: PUSH
38295: LD_VAR 0 2
38299: PPUSH
38300: LD_VAR 0 2
38304: PUSH
38305: LD_INT 1
38307: PLUS
38308: PPUSH
38309: LD_VAR 0 7
38313: PPUSH
38314: CALL_OW 1
38318: ST_TO_ADDR
38319: GO 38287
38321: POP
38322: POP
// end ;
38323: GO 38253
38325: POP
38326: POP
// if not result then
38327: LD_VAR 0 2
38331: NOT
38332: IFFALSE 38336
// exit ;
38334: GO 38484
// mech := result [ 1 ] ;
38336: LD_ADDR_VAR 0 5
38340: PUSH
38341: LD_VAR 0 2
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: ST_TO_ADDR
// if result > 1 then
38350: LD_VAR 0 2
38354: PUSH
38355: LD_INT 1
38357: GREATER
38358: IFFALSE 38470
// begin for i = 2 to result do
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: DOUBLE
38366: LD_INT 2
38368: DEC
38369: ST_TO_ADDR
38370: LD_VAR 0 2
38374: PUSH
38375: FOR_TO
38376: IFFALSE 38468
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38378: LD_ADDR_VAR 0 4
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_VAR 0 3
38392: ARRAY
38393: PPUSH
38394: LD_INT 3
38396: PPUSH
38397: CALL_OW 259
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_VAR 0 3
38411: ARRAY
38412: PPUSH
38413: CALL_OW 432
38417: MINUS
38418: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38419: LD_VAR 0 4
38423: PUSH
38424: LD_VAR 0 5
38428: PPUSH
38429: LD_INT 3
38431: PPUSH
38432: CALL_OW 259
38436: PUSH
38437: LD_VAR 0 5
38441: PPUSH
38442: CALL_OW 432
38446: MINUS
38447: GREATEREQUAL
38448: IFFALSE 38466
// mech := result [ i ] ;
38450: LD_ADDR_VAR 0 5
38454: PUSH
38455: LD_VAR 0 2
38459: PUSH
38460: LD_VAR 0 3
38464: ARRAY
38465: ST_TO_ADDR
// end ;
38466: GO 38375
38468: POP
38469: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38470: LD_VAR 0 1
38474: PPUSH
38475: LD_VAR 0 5
38479: PPUSH
38480: CALL_OW 135
// end ;
38484: LD_VAR 0 2
38488: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38489: LD_INT 0
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
// result := [ ] ;
38504: LD_ADDR_VAR 0 7
38508: PUSH
38509: EMPTY
38510: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 266
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: IN
38531: NOT
38532: IFFALSE 38536
// exit ;
38534: GO 40170
// if name then
38536: LD_VAR 0 3
38540: IFFALSE 38556
// SetBName ( base_dep , name ) ;
38542: LD_VAR 0 1
38546: PPUSH
38547: LD_VAR 0 3
38551: PPUSH
38552: CALL_OW 500
// base := GetBase ( base_dep ) ;
38556: LD_ADDR_VAR 0 15
38560: PUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: CALL_OW 274
38570: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38571: LD_ADDR_VAR 0 16
38575: PUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 255
38585: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38586: LD_ADDR_VAR 0 17
38590: PUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 248
38600: ST_TO_ADDR
// if sources then
38601: LD_VAR 0 5
38605: IFFALSE 38652
// for i = 1 to 3 do
38607: LD_ADDR_VAR 0 8
38611: PUSH
38612: DOUBLE
38613: LD_INT 1
38615: DEC
38616: ST_TO_ADDR
38617: LD_INT 3
38619: PUSH
38620: FOR_TO
38621: IFFALSE 38650
// AddResourceType ( base , i , sources [ i ] ) ;
38623: LD_VAR 0 15
38627: PPUSH
38628: LD_VAR 0 8
38632: PPUSH
38633: LD_VAR 0 5
38637: PUSH
38638: LD_VAR 0 8
38642: ARRAY
38643: PPUSH
38644: CALL_OW 276
38648: GO 38620
38650: POP
38651: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38652: LD_ADDR_VAR 0 18
38656: PUSH
38657: LD_VAR 0 15
38661: PPUSH
38662: LD_VAR 0 2
38666: PPUSH
38667: LD_INT 1
38669: PPUSH
38670: CALL 37913 0 3
38674: ST_TO_ADDR
// InitHc ;
38675: CALL_OW 19
// InitUc ;
38679: CALL_OW 18
// uc_side := side ;
38683: LD_ADDR_OWVAR 20
38687: PUSH
38688: LD_VAR 0 16
38692: ST_TO_ADDR
// uc_nation := nation ;
38693: LD_ADDR_OWVAR 21
38697: PUSH
38698: LD_VAR 0 17
38702: ST_TO_ADDR
// if buildings then
38703: LD_VAR 0 18
38707: IFFALSE 40029
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38709: LD_ADDR_VAR 0 19
38713: PUSH
38714: LD_VAR 0 18
38718: PPUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 30
38724: PUSH
38725: LD_INT 29
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 30
38734: PUSH
38735: LD_INT 30
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: PPUSH
38747: CALL_OW 72
38751: ST_TO_ADDR
// if tmp then
38752: LD_VAR 0 19
38756: IFFALSE 38804
// for i in tmp do
38758: LD_ADDR_VAR 0 8
38762: PUSH
38763: LD_VAR 0 19
38767: PUSH
38768: FOR_IN
38769: IFFALSE 38802
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38771: LD_VAR 0 8
38775: PPUSH
38776: CALL_OW 250
38780: PPUSH
38781: LD_VAR 0 8
38785: PPUSH
38786: CALL_OW 251
38790: PPUSH
38791: LD_VAR 0 16
38795: PPUSH
38796: CALL_OW 441
38800: GO 38768
38802: POP
38803: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38804: LD_VAR 0 18
38808: PPUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 30
38814: PUSH
38815: LD_INT 32
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 30
38824: PUSH
38825: LD_INT 33
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: PPUSH
38837: CALL_OW 72
38841: IFFALSE 38929
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38843: LD_ADDR_VAR 0 8
38847: PUSH
38848: LD_VAR 0 18
38852: PPUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 30
38858: PUSH
38859: LD_INT 32
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 33
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 72
38885: PUSH
38886: FOR_IN
38887: IFFALSE 38927
// begin if not GetBWeapon ( i ) then
38889: LD_VAR 0 8
38893: PPUSH
38894: CALL_OW 269
38898: NOT
38899: IFFALSE 38925
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38901: LD_VAR 0 8
38905: PPUSH
38906: LD_VAR 0 8
38910: PPUSH
38911: LD_VAR 0 2
38915: PPUSH
38916: CALL 40175 0 2
38920: PPUSH
38921: CALL_OW 431
// end ;
38925: GO 38886
38927: POP
38928: POP
// end ; for i = 1 to personel do
38929: LD_ADDR_VAR 0 8
38933: PUSH
38934: DOUBLE
38935: LD_INT 1
38937: DEC
38938: ST_TO_ADDR
38939: LD_VAR 0 6
38943: PUSH
38944: FOR_TO
38945: IFFALSE 40009
// begin if i > 4 then
38947: LD_VAR 0 8
38951: PUSH
38952: LD_INT 4
38954: GREATER
38955: IFFALSE 38959
// break ;
38957: GO 40009
// case i of 1 :
38959: LD_VAR 0 8
38963: PUSH
38964: LD_INT 1
38966: DOUBLE
38967: EQUAL
38968: IFTRUE 38972
38970: GO 39052
38972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38973: LD_ADDR_VAR 0 12
38977: PUSH
38978: LD_VAR 0 18
38982: PPUSH
38983: LD_INT 22
38985: PUSH
38986: LD_VAR 0 16
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 58
38997: PUSH
38998: EMPTY
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 30
39006: PUSH
39007: LD_INT 32
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 30
39016: PUSH
39017: LD_INT 4
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 30
39026: PUSH
39027: LD_INT 5
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PPUSH
39045: CALL_OW 72
39049: ST_TO_ADDR
39050: GO 39274
39052: LD_INT 2
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39122
39060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39061: LD_ADDR_VAR 0 12
39065: PUSH
39066: LD_VAR 0 18
39070: PPUSH
39071: LD_INT 22
39073: PUSH
39074: LD_VAR 0 16
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 30
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 30
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PPUSH
39115: CALL_OW 72
39119: ST_TO_ADDR
39120: GO 39274
39122: LD_INT 3
39124: DOUBLE
39125: EQUAL
39126: IFTRUE 39130
39128: GO 39192
39130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39131: LD_ADDR_VAR 0 12
39135: PUSH
39136: LD_VAR 0 18
39140: PPUSH
39141: LD_INT 22
39143: PUSH
39144: LD_VAR 0 16
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 30
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 30
39168: PUSH
39169: LD_INT 3
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PPUSH
39185: CALL_OW 72
39189: ST_TO_ADDR
39190: GO 39274
39192: LD_INT 4
39194: DOUBLE
39195: EQUAL
39196: IFTRUE 39200
39198: GO 39273
39200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39201: LD_ADDR_VAR 0 12
39205: PUSH
39206: LD_VAR 0 18
39210: PPUSH
39211: LD_INT 22
39213: PUSH
39214: LD_VAR 0 16
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 30
39228: PUSH
39229: LD_INT 6
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 30
39238: PUSH
39239: LD_INT 7
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 30
39248: PUSH
39249: LD_INT 8
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PPUSH
39266: CALL_OW 72
39270: ST_TO_ADDR
39271: GO 39274
39273: POP
// if i = 1 then
39274: LD_VAR 0 8
39278: PUSH
39279: LD_INT 1
39281: EQUAL
39282: IFFALSE 39393
// begin tmp := [ ] ;
39284: LD_ADDR_VAR 0 19
39288: PUSH
39289: EMPTY
39290: ST_TO_ADDR
// for j in f do
39291: LD_ADDR_VAR 0 9
39295: PUSH
39296: LD_VAR 0 12
39300: PUSH
39301: FOR_IN
39302: IFFALSE 39375
// if GetBType ( j ) = b_bunker then
39304: LD_VAR 0 9
39308: PPUSH
39309: CALL_OW 266
39313: PUSH
39314: LD_INT 32
39316: EQUAL
39317: IFFALSE 39344
// tmp := Insert ( tmp , 1 , j ) else
39319: LD_ADDR_VAR 0 19
39323: PUSH
39324: LD_VAR 0 19
39328: PPUSH
39329: LD_INT 1
39331: PPUSH
39332: LD_VAR 0 9
39336: PPUSH
39337: CALL_OW 2
39341: ST_TO_ADDR
39342: GO 39373
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39344: LD_ADDR_VAR 0 19
39348: PUSH
39349: LD_VAR 0 19
39353: PPUSH
39354: LD_VAR 0 19
39358: PUSH
39359: LD_INT 1
39361: PLUS
39362: PPUSH
39363: LD_VAR 0 9
39367: PPUSH
39368: CALL_OW 2
39372: ST_TO_ADDR
39373: GO 39301
39375: POP
39376: POP
// if tmp then
39377: LD_VAR 0 19
39381: IFFALSE 39393
// f := tmp ;
39383: LD_ADDR_VAR 0 12
39387: PUSH
39388: LD_VAR 0 19
39392: ST_TO_ADDR
// end ; x := personel [ i ] ;
39393: LD_ADDR_VAR 0 13
39397: PUSH
39398: LD_VAR 0 6
39402: PUSH
39403: LD_VAR 0 8
39407: ARRAY
39408: ST_TO_ADDR
// if x = - 1 then
39409: LD_VAR 0 13
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: EQUAL
39418: IFFALSE 39627
// begin for j in f do
39420: LD_ADDR_VAR 0 9
39424: PUSH
39425: LD_VAR 0 12
39429: PUSH
39430: FOR_IN
39431: IFFALSE 39623
// repeat InitHc ;
39433: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39437: LD_VAR 0 9
39441: PPUSH
39442: CALL_OW 266
39446: PUSH
39447: LD_INT 5
39449: EQUAL
39450: IFFALSE 39520
// begin if UnitsInside ( j ) < 3 then
39452: LD_VAR 0 9
39456: PPUSH
39457: CALL_OW 313
39461: PUSH
39462: LD_INT 3
39464: LESS
39465: IFFALSE 39501
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39467: LD_INT 0
39469: PPUSH
39470: LD_INT 5
39472: PUSH
39473: LD_INT 8
39475: PUSH
39476: LD_INT 9
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: PUSH
39484: LD_VAR 0 17
39488: ARRAY
39489: PPUSH
39490: LD_VAR 0 4
39494: PPUSH
39495: CALL_OW 380
39499: GO 39518
// PrepareHuman ( false , i , skill ) ;
39501: LD_INT 0
39503: PPUSH
39504: LD_VAR 0 8
39508: PPUSH
39509: LD_VAR 0 4
39513: PPUSH
39514: CALL_OW 380
// end else
39518: GO 39537
// PrepareHuman ( false , i , skill ) ;
39520: LD_INT 0
39522: PPUSH
39523: LD_VAR 0 8
39527: PPUSH
39528: LD_VAR 0 4
39532: PPUSH
39533: CALL_OW 380
// un := CreateHuman ;
39537: LD_ADDR_VAR 0 14
39541: PUSH
39542: CALL_OW 44
39546: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39547: LD_ADDR_VAR 0 7
39551: PUSH
39552: LD_VAR 0 7
39556: PPUSH
39557: LD_INT 1
39559: PPUSH
39560: LD_VAR 0 14
39564: PPUSH
39565: CALL_OW 2
39569: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39570: LD_VAR 0 14
39574: PPUSH
39575: LD_VAR 0 9
39579: PPUSH
39580: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39584: LD_VAR 0 9
39588: PPUSH
39589: CALL_OW 313
39593: PUSH
39594: LD_INT 6
39596: EQUAL
39597: PUSH
39598: LD_VAR 0 9
39602: PPUSH
39603: CALL_OW 266
39607: PUSH
39608: LD_INT 32
39610: PUSH
39611: LD_INT 31
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: IN
39618: OR
39619: IFFALSE 39433
39621: GO 39430
39623: POP
39624: POP
// end else
39625: GO 40007
// for j = 1 to x do
39627: LD_ADDR_VAR 0 9
39631: PUSH
39632: DOUBLE
39633: LD_INT 1
39635: DEC
39636: ST_TO_ADDR
39637: LD_VAR 0 13
39641: PUSH
39642: FOR_TO
39643: IFFALSE 40005
// begin InitHc ;
39645: CALL_OW 19
// if not f then
39649: LD_VAR 0 12
39653: NOT
39654: IFFALSE 39743
// begin PrepareHuman ( false , i , skill ) ;
39656: LD_INT 0
39658: PPUSH
39659: LD_VAR 0 8
39663: PPUSH
39664: LD_VAR 0 4
39668: PPUSH
39669: CALL_OW 380
// un := CreateHuman ;
39673: LD_ADDR_VAR 0 14
39677: PUSH
39678: CALL_OW 44
39682: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39683: LD_ADDR_VAR 0 7
39687: PUSH
39688: LD_VAR 0 7
39692: PPUSH
39693: LD_INT 1
39695: PPUSH
39696: LD_VAR 0 14
39700: PPUSH
39701: CALL_OW 2
39705: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39706: LD_VAR 0 14
39710: PPUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 250
39720: PPUSH
39721: LD_VAR 0 1
39725: PPUSH
39726: CALL_OW 251
39730: PPUSH
39731: LD_INT 10
39733: PPUSH
39734: LD_INT 0
39736: PPUSH
39737: CALL_OW 50
// continue ;
39741: GO 39642
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39743: LD_VAR 0 12
39747: PUSH
39748: LD_INT 1
39750: ARRAY
39751: PPUSH
39752: CALL_OW 313
39756: PUSH
39757: LD_VAR 0 12
39761: PUSH
39762: LD_INT 1
39764: ARRAY
39765: PPUSH
39766: CALL_OW 266
39770: PUSH
39771: LD_INT 32
39773: PUSH
39774: LD_INT 31
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: IN
39781: AND
39782: PUSH
39783: LD_VAR 0 12
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: PPUSH
39792: CALL_OW 313
39796: PUSH
39797: LD_INT 6
39799: EQUAL
39800: OR
39801: IFFALSE 39821
// f := Delete ( f , 1 ) ;
39803: LD_ADDR_VAR 0 12
39807: PUSH
39808: LD_VAR 0 12
39812: PPUSH
39813: LD_INT 1
39815: PPUSH
39816: CALL_OW 3
39820: ST_TO_ADDR
// if not f then
39821: LD_VAR 0 12
39825: NOT
39826: IFFALSE 39844
// begin x := x + 2 ;
39828: LD_ADDR_VAR 0 13
39832: PUSH
39833: LD_VAR 0 13
39837: PUSH
39838: LD_INT 2
39840: PLUS
39841: ST_TO_ADDR
// continue ;
39842: GO 39642
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39844: LD_VAR 0 12
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: PPUSH
39853: CALL_OW 266
39857: PUSH
39858: LD_INT 5
39860: EQUAL
39861: IFFALSE 39935
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39863: LD_VAR 0 12
39867: PUSH
39868: LD_INT 1
39870: ARRAY
39871: PPUSH
39872: CALL_OW 313
39876: PUSH
39877: LD_INT 3
39879: LESS
39880: IFFALSE 39916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39882: LD_INT 0
39884: PPUSH
39885: LD_INT 5
39887: PUSH
39888: LD_INT 8
39890: PUSH
39891: LD_INT 9
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: PUSH
39899: LD_VAR 0 17
39903: ARRAY
39904: PPUSH
39905: LD_VAR 0 4
39909: PPUSH
39910: CALL_OW 380
39914: GO 39933
// PrepareHuman ( false , i , skill ) ;
39916: LD_INT 0
39918: PPUSH
39919: LD_VAR 0 8
39923: PPUSH
39924: LD_VAR 0 4
39928: PPUSH
39929: CALL_OW 380
// end else
39933: GO 39952
// PrepareHuman ( false , i , skill ) ;
39935: LD_INT 0
39937: PPUSH
39938: LD_VAR 0 8
39942: PPUSH
39943: LD_VAR 0 4
39947: PPUSH
39948: CALL_OW 380
// un := CreateHuman ;
39952: LD_ADDR_VAR 0 14
39956: PUSH
39957: CALL_OW 44
39961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39962: LD_ADDR_VAR 0 7
39966: PUSH
39967: LD_VAR 0 7
39971: PPUSH
39972: LD_INT 1
39974: PPUSH
39975: LD_VAR 0 14
39979: PPUSH
39980: CALL_OW 2
39984: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39985: LD_VAR 0 14
39989: PPUSH
39990: LD_VAR 0 12
39994: PUSH
39995: LD_INT 1
39997: ARRAY
39998: PPUSH
39999: CALL_OW 52
// end ;
40003: GO 39642
40005: POP
40006: POP
// end ;
40007: GO 38944
40009: POP
40010: POP
// result := result ^ buildings ;
40011: LD_ADDR_VAR 0 7
40015: PUSH
40016: LD_VAR 0 7
40020: PUSH
40021: LD_VAR 0 18
40025: ADD
40026: ST_TO_ADDR
// end else
40027: GO 40170
// begin for i = 1 to personel do
40029: LD_ADDR_VAR 0 8
40033: PUSH
40034: DOUBLE
40035: LD_INT 1
40037: DEC
40038: ST_TO_ADDR
40039: LD_VAR 0 6
40043: PUSH
40044: FOR_TO
40045: IFFALSE 40168
// begin if i > 4 then
40047: LD_VAR 0 8
40051: PUSH
40052: LD_INT 4
40054: GREATER
40055: IFFALSE 40059
// break ;
40057: GO 40168
// x := personel [ i ] ;
40059: LD_ADDR_VAR 0 13
40063: PUSH
40064: LD_VAR 0 6
40068: PUSH
40069: LD_VAR 0 8
40073: ARRAY
40074: ST_TO_ADDR
// if x = - 1 then
40075: LD_VAR 0 13
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: EQUAL
40084: IFFALSE 40088
// continue ;
40086: GO 40044
// PrepareHuman ( false , i , skill ) ;
40088: LD_INT 0
40090: PPUSH
40091: LD_VAR 0 8
40095: PPUSH
40096: LD_VAR 0 4
40100: PPUSH
40101: CALL_OW 380
// un := CreateHuman ;
40105: LD_ADDR_VAR 0 14
40109: PUSH
40110: CALL_OW 44
40114: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40115: LD_VAR 0 14
40119: PPUSH
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL_OW 250
40129: PPUSH
40130: LD_VAR 0 1
40134: PPUSH
40135: CALL_OW 251
40139: PPUSH
40140: LD_INT 10
40142: PPUSH
40143: LD_INT 0
40145: PPUSH
40146: CALL_OW 50
// result := result ^ un ;
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: LD_VAR 0 7
40159: PUSH
40160: LD_VAR 0 14
40164: ADD
40165: ST_TO_ADDR
// end ;
40166: GO 40044
40168: POP
40169: POP
// end ; end ;
40170: LD_VAR 0 7
40174: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40175: LD_INT 0
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
// result := false ;
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_INT 0
40200: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40201: LD_VAR 0 1
40205: NOT
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 266
40216: PUSH
40217: LD_INT 32
40219: PUSH
40220: LD_INT 33
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: IN
40227: NOT
40228: OR
40229: IFFALSE 40233
// exit ;
40231: GO 41342
// nat := GetNation ( tower ) ;
40233: LD_ADDR_VAR 0 12
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 248
40247: ST_TO_ADDR
// side := GetSide ( tower ) ;
40248: LD_ADDR_VAR 0 16
40252: PUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 255
40262: ST_TO_ADDR
// x := GetX ( tower ) ;
40263: LD_ADDR_VAR 0 10
40267: PUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 250
40277: ST_TO_ADDR
// y := GetY ( tower ) ;
40278: LD_ADDR_VAR 0 11
40282: PUSH
40283: LD_VAR 0 1
40287: PPUSH
40288: CALL_OW 251
40292: ST_TO_ADDR
// if not x or not y then
40293: LD_VAR 0 10
40297: NOT
40298: PUSH
40299: LD_VAR 0 11
40303: NOT
40304: OR
40305: IFFALSE 40309
// exit ;
40307: GO 41342
// weapon := 0 ;
40309: LD_ADDR_VAR 0 18
40313: PUSH
40314: LD_INT 0
40316: ST_TO_ADDR
// fac_list := [ ] ;
40317: LD_ADDR_VAR 0 17
40321: PUSH
40322: EMPTY
40323: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40324: LD_ADDR_VAR 0 6
40328: PUSH
40329: LD_VAR 0 1
40333: PPUSH
40334: CALL_OW 274
40338: PPUSH
40339: LD_VAR 0 2
40343: PPUSH
40344: LD_INT 0
40346: PPUSH
40347: CALL 37913 0 3
40351: PPUSH
40352: LD_INT 30
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PPUSH
40362: CALL_OW 72
40366: ST_TO_ADDR
// if not factories then
40367: LD_VAR 0 6
40371: NOT
40372: IFFALSE 40376
// exit ;
40374: GO 41342
// for i in factories do
40376: LD_ADDR_VAR 0 8
40380: PUSH
40381: LD_VAR 0 6
40385: PUSH
40386: FOR_IN
40387: IFFALSE 40412
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40389: LD_ADDR_VAR 0 17
40393: PUSH
40394: LD_VAR 0 17
40398: PUSH
40399: LD_VAR 0 8
40403: PPUSH
40404: CALL_OW 478
40408: UNION
40409: ST_TO_ADDR
40410: GO 40386
40412: POP
40413: POP
// if not fac_list then
40414: LD_VAR 0 17
40418: NOT
40419: IFFALSE 40423
// exit ;
40421: GO 41342
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40423: LD_ADDR_VAR 0 5
40427: PUSH
40428: LD_INT 4
40430: PUSH
40431: LD_INT 5
40433: PUSH
40434: LD_INT 9
40436: PUSH
40437: LD_INT 10
40439: PUSH
40440: LD_INT 6
40442: PUSH
40443: LD_INT 7
40445: PUSH
40446: LD_INT 11
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 27
40460: PUSH
40461: LD_INT 28
40463: PUSH
40464: LD_INT 26
40466: PUSH
40467: LD_INT 30
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 43
40478: PUSH
40479: LD_INT 44
40481: PUSH
40482: LD_INT 46
40484: PUSH
40485: LD_INT 45
40487: PUSH
40488: LD_INT 47
40490: PUSH
40491: LD_INT 49
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: LIST
40506: PUSH
40507: LD_VAR 0 12
40511: ARRAY
40512: ST_TO_ADDR
// list := list isect fac_list ;
40513: LD_ADDR_VAR 0 5
40517: PUSH
40518: LD_VAR 0 5
40522: PUSH
40523: LD_VAR 0 17
40527: ISECT
40528: ST_TO_ADDR
// if not list then
40529: LD_VAR 0 5
40533: NOT
40534: IFFALSE 40538
// exit ;
40536: GO 41342
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40538: LD_VAR 0 12
40542: PUSH
40543: LD_INT 3
40545: EQUAL
40546: PUSH
40547: LD_INT 49
40549: PUSH
40550: LD_VAR 0 5
40554: IN
40555: AND
40556: PUSH
40557: LD_INT 31
40559: PPUSH
40560: LD_VAR 0 16
40564: PPUSH
40565: CALL_OW 321
40569: PUSH
40570: LD_INT 2
40572: EQUAL
40573: AND
40574: IFFALSE 40634
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40576: LD_INT 22
40578: PUSH
40579: LD_VAR 0 16
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 35
40590: PUSH
40591: LD_INT 49
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 91
40600: PUSH
40601: LD_VAR 0 1
40605: PUSH
40606: LD_INT 10
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: LIST
40618: PPUSH
40619: CALL_OW 69
40623: NOT
40624: IFFALSE 40634
// weapon := ru_time_lapser ;
40626: LD_ADDR_VAR 0 18
40630: PUSH
40631: LD_INT 49
40633: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40634: LD_VAR 0 12
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: IN
40649: PUSH
40650: LD_INT 11
40652: PUSH
40653: LD_VAR 0 5
40657: IN
40658: PUSH
40659: LD_INT 30
40661: PUSH
40662: LD_VAR 0 5
40666: IN
40667: OR
40668: AND
40669: PUSH
40670: LD_INT 6
40672: PPUSH
40673: LD_VAR 0 16
40677: PPUSH
40678: CALL_OW 321
40682: PUSH
40683: LD_INT 2
40685: EQUAL
40686: AND
40687: IFFALSE 40852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40689: LD_INT 22
40691: PUSH
40692: LD_VAR 0 16
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 35
40706: PUSH
40707: LD_INT 11
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 35
40716: PUSH
40717: LD_INT 30
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 91
40731: PUSH
40732: LD_VAR 0 1
40736: PUSH
40737: LD_INT 18
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 69
40754: NOT
40755: PUSH
40756: LD_INT 22
40758: PUSH
40759: LD_VAR 0 16
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 30
40773: PUSH
40774: LD_INT 32
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 30
40783: PUSH
40784: LD_INT 33
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 91
40798: PUSH
40799: LD_VAR 0 1
40803: PUSH
40804: LD_INT 12
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: PPUSH
40820: CALL_OW 69
40824: PUSH
40825: LD_INT 2
40827: GREATER
40828: AND
40829: IFFALSE 40852
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40831: LD_ADDR_VAR 0 18
40835: PUSH
40836: LD_INT 11
40838: PUSH
40839: LD_INT 30
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_VAR 0 12
40850: ARRAY
40851: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40852: LD_VAR 0 18
40856: NOT
40857: PUSH
40858: LD_INT 40
40860: PPUSH
40861: LD_VAR 0 16
40865: PPUSH
40866: CALL_OW 321
40870: PUSH
40871: LD_INT 2
40873: EQUAL
40874: AND
40875: PUSH
40876: LD_INT 7
40878: PUSH
40879: LD_VAR 0 5
40883: IN
40884: PUSH
40885: LD_INT 28
40887: PUSH
40888: LD_VAR 0 5
40892: IN
40893: OR
40894: PUSH
40895: LD_INT 45
40897: PUSH
40898: LD_VAR 0 5
40902: IN
40903: OR
40904: AND
40905: IFFALSE 41159
// begin hex := GetHexInfo ( x , y ) ;
40907: LD_ADDR_VAR 0 4
40911: PUSH
40912: LD_VAR 0 10
40916: PPUSH
40917: LD_VAR 0 11
40921: PPUSH
40922: CALL_OW 546
40926: ST_TO_ADDR
// if hex [ 1 ] then
40927: LD_VAR 0 4
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: IFFALSE 40939
// exit ;
40937: GO 41342
// height := hex [ 2 ] ;
40939: LD_ADDR_VAR 0 15
40943: PUSH
40944: LD_VAR 0 4
40948: PUSH
40949: LD_INT 2
40951: ARRAY
40952: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40953: LD_ADDR_VAR 0 14
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: LD_INT 5
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// for i in tmp do
40976: LD_ADDR_VAR 0 8
40980: PUSH
40981: LD_VAR 0 14
40985: PUSH
40986: FOR_IN
40987: IFFALSE 41157
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40989: LD_ADDR_VAR 0 9
40993: PUSH
40994: LD_VAR 0 10
40998: PPUSH
40999: LD_VAR 0 8
41003: PPUSH
41004: LD_INT 5
41006: PPUSH
41007: CALL_OW 272
41011: PUSH
41012: LD_VAR 0 11
41016: PPUSH
41017: LD_VAR 0 8
41021: PPUSH
41022: LD_INT 5
41024: PPUSH
41025: CALL_OW 273
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41034: LD_VAR 0 9
41038: PUSH
41039: LD_INT 1
41041: ARRAY
41042: PPUSH
41043: LD_VAR 0 9
41047: PUSH
41048: LD_INT 2
41050: ARRAY
41051: PPUSH
41052: CALL_OW 488
41056: IFFALSE 41155
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41058: LD_ADDR_VAR 0 4
41062: PUSH
41063: LD_VAR 0 9
41067: PUSH
41068: LD_INT 1
41070: ARRAY
41071: PPUSH
41072: LD_VAR 0 9
41076: PUSH
41077: LD_INT 2
41079: ARRAY
41080: PPUSH
41081: CALL_OW 546
41085: ST_TO_ADDR
// if hex [ 1 ] then
41086: LD_VAR 0 4
41090: PUSH
41091: LD_INT 1
41093: ARRAY
41094: IFFALSE 41098
// continue ;
41096: GO 40986
// h := hex [ 2 ] ;
41098: LD_ADDR_VAR 0 13
41102: PUSH
41103: LD_VAR 0 4
41107: PUSH
41108: LD_INT 2
41110: ARRAY
41111: ST_TO_ADDR
// if h + 7 < height then
41112: LD_VAR 0 13
41116: PUSH
41117: LD_INT 7
41119: PLUS
41120: PUSH
41121: LD_VAR 0 15
41125: LESS
41126: IFFALSE 41155
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41128: LD_ADDR_VAR 0 18
41132: PUSH
41133: LD_INT 7
41135: PUSH
41136: LD_INT 28
41138: PUSH
41139: LD_INT 45
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: PUSH
41147: LD_VAR 0 12
41151: ARRAY
41152: ST_TO_ADDR
// break ;
41153: GO 41157
// end ; end ; end ;
41155: GO 40986
41157: POP
41158: POP
// end ; if not weapon then
41159: LD_VAR 0 18
41163: NOT
41164: IFFALSE 41224
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41166: LD_ADDR_VAR 0 5
41170: PUSH
41171: LD_VAR 0 5
41175: PUSH
41176: LD_INT 11
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 49
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: DIFF
41190: ST_TO_ADDR
// if not list then
41191: LD_VAR 0 5
41195: NOT
41196: IFFALSE 41200
// exit ;
41198: GO 41342
// weapon := list [ rand ( 1 , list ) ] ;
41200: LD_ADDR_VAR 0 18
41204: PUSH
41205: LD_VAR 0 5
41209: PUSH
41210: LD_INT 1
41212: PPUSH
41213: LD_VAR 0 5
41217: PPUSH
41218: CALL_OW 12
41222: ARRAY
41223: ST_TO_ADDR
// end ; if weapon then
41224: LD_VAR 0 18
41228: IFFALSE 41342
// begin tmp := CostOfWeapon ( weapon ) ;
41230: LD_ADDR_VAR 0 14
41234: PUSH
41235: LD_VAR 0 18
41239: PPUSH
41240: CALL_OW 451
41244: ST_TO_ADDR
// j := GetBase ( tower ) ;
41245: LD_ADDR_VAR 0 9
41249: PUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL_OW 274
41259: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41260: LD_VAR 0 9
41264: PPUSH
41265: LD_INT 1
41267: PPUSH
41268: CALL_OW 275
41272: PUSH
41273: LD_VAR 0 14
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: GREATEREQUAL
41282: PUSH
41283: LD_VAR 0 9
41287: PPUSH
41288: LD_INT 2
41290: PPUSH
41291: CALL_OW 275
41295: PUSH
41296: LD_VAR 0 14
41300: PUSH
41301: LD_INT 2
41303: ARRAY
41304: GREATEREQUAL
41305: AND
41306: PUSH
41307: LD_VAR 0 9
41311: PPUSH
41312: LD_INT 3
41314: PPUSH
41315: CALL_OW 275
41319: PUSH
41320: LD_VAR 0 14
41324: PUSH
41325: LD_INT 3
41327: ARRAY
41328: GREATEREQUAL
41329: AND
41330: IFFALSE 41342
// result := weapon ;
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_VAR 0 18
41341: ST_TO_ADDR
// end ; end ;
41342: LD_VAR 0 3
41346: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41347: LD_INT 0
41349: PPUSH
41350: PPUSH
// result := true ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_INT 1
41358: ST_TO_ADDR
// if array1 = array2 then
41359: LD_VAR 0 1
41363: PUSH
41364: LD_VAR 0 2
41368: EQUAL
41369: IFFALSE 41429
// begin for i = 1 to array1 do
41371: LD_ADDR_VAR 0 4
41375: PUSH
41376: DOUBLE
41377: LD_INT 1
41379: DEC
41380: ST_TO_ADDR
41381: LD_VAR 0 1
41385: PUSH
41386: FOR_TO
41387: IFFALSE 41425
// if array1 [ i ] <> array2 [ i ] then
41389: LD_VAR 0 1
41393: PUSH
41394: LD_VAR 0 4
41398: ARRAY
41399: PUSH
41400: LD_VAR 0 2
41404: PUSH
41405: LD_VAR 0 4
41409: ARRAY
41410: NONEQUAL
41411: IFFALSE 41423
// begin result := false ;
41413: LD_ADDR_VAR 0 3
41417: PUSH
41418: LD_INT 0
41420: ST_TO_ADDR
// break ;
41421: GO 41425
// end ;
41423: GO 41386
41425: POP
41426: POP
// end else
41427: GO 41437
// result := false ;
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_INT 0
41436: ST_TO_ADDR
// end ;
41437: LD_VAR 0 3
41441: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41442: LD_INT 0
41444: PPUSH
41445: PPUSH
// if not array1 or not array2 then
41446: LD_VAR 0 1
41450: NOT
41451: PUSH
41452: LD_VAR 0 2
41456: NOT
41457: OR
41458: IFFALSE 41462
// exit ;
41460: GO 41526
// result := true ;
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: LD_INT 1
41469: ST_TO_ADDR
// for i = 1 to array1 do
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: DOUBLE
41476: LD_INT 1
41478: DEC
41479: ST_TO_ADDR
41480: LD_VAR 0 1
41484: PUSH
41485: FOR_TO
41486: IFFALSE 41524
// if array1 [ i ] <> array2 [ i ] then
41488: LD_VAR 0 1
41492: PUSH
41493: LD_VAR 0 4
41497: ARRAY
41498: PUSH
41499: LD_VAR 0 2
41503: PUSH
41504: LD_VAR 0 4
41508: ARRAY
41509: NONEQUAL
41510: IFFALSE 41522
// begin result := false ;
41512: LD_ADDR_VAR 0 3
41516: PUSH
41517: LD_INT 0
41519: ST_TO_ADDR
// break ;
41520: GO 41524
// end ;
41522: GO 41485
41524: POP
41525: POP
// end ;
41526: LD_VAR 0 3
41530: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41531: LD_INT 0
41533: PPUSH
41534: PPUSH
41535: PPUSH
// pom := GetBase ( fac ) ;
41536: LD_ADDR_VAR 0 5
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 274
41550: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41551: LD_ADDR_VAR 0 4
41555: PUSH
41556: LD_VAR 0 2
41560: PUSH
41561: LD_INT 1
41563: ARRAY
41564: PPUSH
41565: LD_VAR 0 2
41569: PUSH
41570: LD_INT 2
41572: ARRAY
41573: PPUSH
41574: LD_VAR 0 2
41578: PUSH
41579: LD_INT 3
41581: ARRAY
41582: PPUSH
41583: LD_VAR 0 2
41587: PUSH
41588: LD_INT 4
41590: ARRAY
41591: PPUSH
41592: CALL_OW 449
41596: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41597: LD_ADDR_VAR 0 3
41601: PUSH
41602: LD_VAR 0 5
41606: PPUSH
41607: LD_INT 1
41609: PPUSH
41610: CALL_OW 275
41614: PUSH
41615: LD_VAR 0 4
41619: PUSH
41620: LD_INT 1
41622: ARRAY
41623: GREATEREQUAL
41624: PUSH
41625: LD_VAR 0 5
41629: PPUSH
41630: LD_INT 2
41632: PPUSH
41633: CALL_OW 275
41637: PUSH
41638: LD_VAR 0 4
41642: PUSH
41643: LD_INT 2
41645: ARRAY
41646: GREATEREQUAL
41647: AND
41648: PUSH
41649: LD_VAR 0 5
41653: PPUSH
41654: LD_INT 3
41656: PPUSH
41657: CALL_OW 275
41661: PUSH
41662: LD_VAR 0 4
41666: PUSH
41667: LD_INT 3
41669: ARRAY
41670: GREATEREQUAL
41671: AND
41672: ST_TO_ADDR
// end ;
41673: LD_VAR 0 3
41677: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41678: LD_INT 0
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
// pom := GetBase ( building ) ;
41684: LD_ADDR_VAR 0 3
41688: PUSH
41689: LD_VAR 0 1
41693: PPUSH
41694: CALL_OW 274
41698: ST_TO_ADDR
// if not pom then
41699: LD_VAR 0 3
41703: NOT
41704: IFFALSE 41708
// exit ;
41706: GO 41878
// btype := GetBType ( building ) ;
41708: LD_ADDR_VAR 0 5
41712: PUSH
41713: LD_VAR 0 1
41717: PPUSH
41718: CALL_OW 266
41722: ST_TO_ADDR
// if btype = b_armoury then
41723: LD_VAR 0 5
41727: PUSH
41728: LD_INT 4
41730: EQUAL
41731: IFFALSE 41741
// btype := b_barracks ;
41733: LD_ADDR_VAR 0 5
41737: PUSH
41738: LD_INT 5
41740: ST_TO_ADDR
// if btype = b_depot then
41741: LD_VAR 0 5
41745: PUSH
41746: LD_INT 0
41748: EQUAL
41749: IFFALSE 41759
// btype := b_warehouse ;
41751: LD_ADDR_VAR 0 5
41755: PUSH
41756: LD_INT 1
41758: ST_TO_ADDR
// if btype = b_workshop then
41759: LD_VAR 0 5
41763: PUSH
41764: LD_INT 2
41766: EQUAL
41767: IFFALSE 41777
// btype := b_factory ;
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: LD_INT 3
41776: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: LD_VAR 0 5
41786: PPUSH
41787: LD_VAR 0 1
41791: PPUSH
41792: CALL_OW 248
41796: PPUSH
41797: CALL_OW 450
41801: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41802: LD_ADDR_VAR 0 2
41806: PUSH
41807: LD_VAR 0 3
41811: PPUSH
41812: LD_INT 1
41814: PPUSH
41815: CALL_OW 275
41819: PUSH
41820: LD_VAR 0 4
41824: PUSH
41825: LD_INT 1
41827: ARRAY
41828: GREATEREQUAL
41829: PUSH
41830: LD_VAR 0 3
41834: PPUSH
41835: LD_INT 2
41837: PPUSH
41838: CALL_OW 275
41842: PUSH
41843: LD_VAR 0 4
41847: PUSH
41848: LD_INT 2
41850: ARRAY
41851: GREATEREQUAL
41852: AND
41853: PUSH
41854: LD_VAR 0 3
41858: PPUSH
41859: LD_INT 3
41861: PPUSH
41862: CALL_OW 275
41866: PUSH
41867: LD_VAR 0 4
41871: PUSH
41872: LD_INT 3
41874: ARRAY
41875: GREATEREQUAL
41876: AND
41877: ST_TO_ADDR
// end ;
41878: LD_VAR 0 2
41882: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41883: LD_INT 0
41885: PPUSH
41886: PPUSH
41887: PPUSH
// pom := GetBase ( building ) ;
41888: LD_ADDR_VAR 0 4
41892: PUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 274
41902: ST_TO_ADDR
// if not pom then
41903: LD_VAR 0 4
41907: NOT
41908: IFFALSE 41912
// exit ;
41910: GO 42013
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41912: LD_ADDR_VAR 0 5
41916: PUSH
41917: LD_VAR 0 2
41921: PPUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 248
41931: PPUSH
41932: CALL_OW 450
41936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41937: LD_ADDR_VAR 0 3
41941: PUSH
41942: LD_VAR 0 4
41946: PPUSH
41947: LD_INT 1
41949: PPUSH
41950: CALL_OW 275
41954: PUSH
41955: LD_VAR 0 5
41959: PUSH
41960: LD_INT 1
41962: ARRAY
41963: GREATEREQUAL
41964: PUSH
41965: LD_VAR 0 4
41969: PPUSH
41970: LD_INT 2
41972: PPUSH
41973: CALL_OW 275
41977: PUSH
41978: LD_VAR 0 5
41982: PUSH
41983: LD_INT 2
41985: ARRAY
41986: GREATEREQUAL
41987: AND
41988: PUSH
41989: LD_VAR 0 4
41993: PPUSH
41994: LD_INT 3
41996: PPUSH
41997: CALL_OW 275
42001: PUSH
42002: LD_VAR 0 5
42006: PUSH
42007: LD_INT 3
42009: ARRAY
42010: GREATEREQUAL
42011: AND
42012: ST_TO_ADDR
// end ;
42013: LD_VAR 0 3
42017: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42018: LD_INT 0
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
// result := false ;
42031: LD_ADDR_VAR 0 8
42035: PUSH
42036: LD_INT 0
42038: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42039: LD_VAR 0 5
42043: NOT
42044: PUSH
42045: LD_VAR 0 1
42049: NOT
42050: OR
42051: PUSH
42052: LD_VAR 0 2
42056: NOT
42057: OR
42058: PUSH
42059: LD_VAR 0 3
42063: NOT
42064: OR
42065: IFFALSE 42069
// exit ;
42067: GO 42883
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42069: LD_ADDR_VAR 0 14
42073: PUSH
42074: LD_VAR 0 1
42078: PPUSH
42079: LD_VAR 0 2
42083: PPUSH
42084: LD_VAR 0 3
42088: PPUSH
42089: LD_VAR 0 4
42093: PPUSH
42094: LD_VAR 0 5
42098: PUSH
42099: LD_INT 1
42101: ARRAY
42102: PPUSH
42103: CALL_OW 248
42107: PPUSH
42108: LD_INT 0
42110: PPUSH
42111: CALL 44120 0 6
42115: ST_TO_ADDR
// if not hexes then
42116: LD_VAR 0 14
42120: NOT
42121: IFFALSE 42125
// exit ;
42123: GO 42883
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42125: LD_ADDR_VAR 0 17
42129: PUSH
42130: LD_VAR 0 5
42134: PPUSH
42135: LD_INT 22
42137: PUSH
42138: LD_VAR 0 13
42142: PPUSH
42143: CALL_OW 255
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: LD_INT 30
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 30
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PPUSH
42184: CALL_OW 72
42188: ST_TO_ADDR
// for i = 1 to hexes do
42189: LD_ADDR_VAR 0 9
42193: PUSH
42194: DOUBLE
42195: LD_INT 1
42197: DEC
42198: ST_TO_ADDR
42199: LD_VAR 0 14
42203: PUSH
42204: FOR_TO
42205: IFFALSE 42881
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42207: LD_ADDR_VAR 0 13
42211: PUSH
42212: LD_VAR 0 14
42216: PUSH
42217: LD_VAR 0 9
42221: ARRAY
42222: PUSH
42223: LD_INT 1
42225: ARRAY
42226: PPUSH
42227: LD_VAR 0 14
42231: PUSH
42232: LD_VAR 0 9
42236: ARRAY
42237: PUSH
42238: LD_INT 2
42240: ARRAY
42241: PPUSH
42242: CALL_OW 428
42246: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42247: LD_VAR 0 14
42251: PUSH
42252: LD_VAR 0 9
42256: ARRAY
42257: PUSH
42258: LD_INT 1
42260: ARRAY
42261: PPUSH
42262: LD_VAR 0 14
42266: PUSH
42267: LD_VAR 0 9
42271: ARRAY
42272: PUSH
42273: LD_INT 2
42275: ARRAY
42276: PPUSH
42277: CALL_OW 351
42281: PUSH
42282: LD_VAR 0 14
42286: PUSH
42287: LD_VAR 0 9
42291: ARRAY
42292: PUSH
42293: LD_INT 1
42295: ARRAY
42296: PPUSH
42297: LD_VAR 0 14
42301: PUSH
42302: LD_VAR 0 9
42306: ARRAY
42307: PUSH
42308: LD_INT 2
42310: ARRAY
42311: PPUSH
42312: CALL_OW 488
42316: NOT
42317: OR
42318: PUSH
42319: LD_VAR 0 13
42323: PPUSH
42324: CALL_OW 247
42328: PUSH
42329: LD_INT 3
42331: EQUAL
42332: OR
42333: IFFALSE 42339
// exit ;
42335: POP
42336: POP
42337: GO 42883
// if not tmp then
42339: LD_VAR 0 13
42343: NOT
42344: IFFALSE 42348
// continue ;
42346: GO 42204
// result := true ;
42348: LD_ADDR_VAR 0 8
42352: PUSH
42353: LD_INT 1
42355: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42356: LD_VAR 0 6
42360: PUSH
42361: LD_VAR 0 13
42365: PPUSH
42366: CALL_OW 247
42370: PUSH
42371: LD_INT 2
42373: EQUAL
42374: AND
42375: PUSH
42376: LD_VAR 0 13
42380: PPUSH
42381: CALL_OW 263
42385: PUSH
42386: LD_INT 1
42388: EQUAL
42389: AND
42390: IFFALSE 42554
// begin if IsDrivenBy ( tmp ) then
42392: LD_VAR 0 13
42396: PPUSH
42397: CALL_OW 311
42401: IFFALSE 42405
// continue ;
42403: GO 42204
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42405: LD_VAR 0 6
42409: PPUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 60
42415: PUSH
42416: EMPTY
42417: LIST
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: LD_INT 55
42428: PUSH
42429: EMPTY
42430: LIST
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PPUSH
42440: CALL_OW 72
42444: IFFALSE 42552
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42446: LD_ADDR_VAR 0 18
42450: PUSH
42451: LD_VAR 0 6
42455: PPUSH
42456: LD_INT 3
42458: PUSH
42459: LD_INT 60
42461: PUSH
42462: EMPTY
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: LD_INT 55
42474: PUSH
42475: EMPTY
42476: LIST
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PPUSH
42486: CALL_OW 72
42490: PUSH
42491: LD_INT 1
42493: ARRAY
42494: ST_TO_ADDR
// if IsInUnit ( driver ) then
42495: LD_VAR 0 18
42499: PPUSH
42500: CALL_OW 310
42504: IFFALSE 42515
// ComExit ( driver ) ;
42506: LD_VAR 0 18
42510: PPUSH
42511: CALL 67825 0 1
// AddComEnterUnit ( driver , tmp ) ;
42515: LD_VAR 0 18
42519: PPUSH
42520: LD_VAR 0 13
42524: PPUSH
42525: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42529: LD_VAR 0 18
42533: PPUSH
42534: LD_VAR 0 7
42538: PPUSH
42539: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42543: LD_VAR 0 18
42547: PPUSH
42548: CALL_OW 181
// end ; continue ;
42552: GO 42204
// end ; if not cleaners or not tmp in cleaners then
42554: LD_VAR 0 6
42558: NOT
42559: PUSH
42560: LD_VAR 0 13
42564: PUSH
42565: LD_VAR 0 6
42569: IN
42570: NOT
42571: OR
42572: IFFALSE 42879
// begin if dep then
42574: LD_VAR 0 17
42578: IFFALSE 42714
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42580: LD_ADDR_VAR 0 16
42584: PUSH
42585: LD_VAR 0 17
42589: PUSH
42590: LD_INT 1
42592: ARRAY
42593: PPUSH
42594: CALL_OW 250
42598: PPUSH
42599: LD_VAR 0 17
42603: PUSH
42604: LD_INT 1
42606: ARRAY
42607: PPUSH
42608: CALL_OW 254
42612: PPUSH
42613: LD_INT 5
42615: PPUSH
42616: CALL_OW 272
42620: PUSH
42621: LD_VAR 0 17
42625: PUSH
42626: LD_INT 1
42628: ARRAY
42629: PPUSH
42630: CALL_OW 251
42634: PPUSH
42635: LD_VAR 0 17
42639: PUSH
42640: LD_INT 1
42642: ARRAY
42643: PPUSH
42644: CALL_OW 254
42648: PPUSH
42649: LD_INT 5
42651: PPUSH
42652: CALL_OW 273
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42661: LD_VAR 0 16
42665: PUSH
42666: LD_INT 1
42668: ARRAY
42669: PPUSH
42670: LD_VAR 0 16
42674: PUSH
42675: LD_INT 2
42677: ARRAY
42678: PPUSH
42679: CALL_OW 488
42683: IFFALSE 42714
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42685: LD_VAR 0 13
42689: PPUSH
42690: LD_VAR 0 16
42694: PUSH
42695: LD_INT 1
42697: ARRAY
42698: PPUSH
42699: LD_VAR 0 16
42703: PUSH
42704: LD_INT 2
42706: ARRAY
42707: PPUSH
42708: CALL_OW 111
// continue ;
42712: GO 42204
// end ; end ; r := GetDir ( tmp ) ;
42714: LD_ADDR_VAR 0 15
42718: PUSH
42719: LD_VAR 0 13
42723: PPUSH
42724: CALL_OW 254
42728: ST_TO_ADDR
// if r = 5 then
42729: LD_VAR 0 15
42733: PUSH
42734: LD_INT 5
42736: EQUAL
42737: IFFALSE 42747
// r := 0 ;
42739: LD_ADDR_VAR 0 15
42743: PUSH
42744: LD_INT 0
42746: ST_TO_ADDR
// for j = r to 5 do
42747: LD_ADDR_VAR 0 10
42751: PUSH
42752: DOUBLE
42753: LD_VAR 0 15
42757: DEC
42758: ST_TO_ADDR
42759: LD_INT 5
42761: PUSH
42762: FOR_TO
42763: IFFALSE 42877
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42765: LD_ADDR_VAR 0 11
42769: PUSH
42770: LD_VAR 0 13
42774: PPUSH
42775: CALL_OW 250
42779: PPUSH
42780: LD_VAR 0 10
42784: PPUSH
42785: LD_INT 2
42787: PPUSH
42788: CALL_OW 272
42792: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42793: LD_ADDR_VAR 0 12
42797: PUSH
42798: LD_VAR 0 13
42802: PPUSH
42803: CALL_OW 251
42807: PPUSH
42808: LD_VAR 0 10
42812: PPUSH
42813: LD_INT 2
42815: PPUSH
42816: CALL_OW 273
42820: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42821: LD_VAR 0 11
42825: PPUSH
42826: LD_VAR 0 12
42830: PPUSH
42831: CALL_OW 488
42835: PUSH
42836: LD_VAR 0 11
42840: PPUSH
42841: LD_VAR 0 12
42845: PPUSH
42846: CALL_OW 428
42850: NOT
42851: AND
42852: IFFALSE 42875
// begin ComMoveXY ( tmp , _x , _y ) ;
42854: LD_VAR 0 13
42858: PPUSH
42859: LD_VAR 0 11
42863: PPUSH
42864: LD_VAR 0 12
42868: PPUSH
42869: CALL_OW 111
// break ;
42873: GO 42877
// end ; end ;
42875: GO 42762
42877: POP
42878: POP
// end ; end ;
42879: GO 42204
42881: POP
42882: POP
// end ;
42883: LD_VAR 0 8
42887: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42888: LD_INT 0
42890: PPUSH
// result := true ;
42891: LD_ADDR_VAR 0 3
42895: PUSH
42896: LD_INT 1
42898: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42899: LD_VAR 0 2
42903: PUSH
42904: LD_INT 24
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42918
42910: LD_INT 33
42912: DOUBLE
42913: EQUAL
42914: IFTRUE 42918
42916: GO 42943
42918: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 32
42926: PPUSH
42927: LD_VAR 0 1
42931: PPUSH
42932: CALL_OW 321
42936: PUSH
42937: LD_INT 2
42939: EQUAL
42940: ST_TO_ADDR
42941: GO 43263
42943: LD_INT 20
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 42976
42951: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42952: LD_ADDR_VAR 0 3
42956: PUSH
42957: LD_INT 6
42959: PPUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 321
42969: PUSH
42970: LD_INT 2
42972: EQUAL
42973: ST_TO_ADDR
42974: GO 43263
42976: LD_INT 22
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42990
42982: LD_INT 36
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43015
42990: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 15
42998: PPUSH
42999: LD_VAR 0 1
43003: PPUSH
43004: CALL_OW 321
43008: PUSH
43009: LD_INT 2
43011: EQUAL
43012: ST_TO_ADDR
43013: GO 43263
43015: LD_INT 30
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43048
43023: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_INT 20
43031: PPUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: CALL_OW 321
43041: PUSH
43042: LD_INT 2
43044: EQUAL
43045: ST_TO_ADDR
43046: GO 43263
43048: LD_INT 28
43050: DOUBLE
43051: EQUAL
43052: IFTRUE 43062
43054: LD_INT 21
43056: DOUBLE
43057: EQUAL
43058: IFTRUE 43062
43060: GO 43087
43062: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43063: LD_ADDR_VAR 0 3
43067: PUSH
43068: LD_INT 21
43070: PPUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 321
43080: PUSH
43081: LD_INT 2
43083: EQUAL
43084: ST_TO_ADDR
43085: GO 43263
43087: LD_INT 16
43089: DOUBLE
43090: EQUAL
43091: IFTRUE 43095
43093: GO 43122
43095: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43096: LD_ADDR_VAR 0 3
43100: PUSH
43101: LD_EXP 110
43105: PPUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL_OW 321
43115: PUSH
43116: LD_INT 2
43118: EQUAL
43119: ST_TO_ADDR
43120: GO 43263
43122: LD_INT 19
43124: DOUBLE
43125: EQUAL
43126: IFTRUE 43136
43128: LD_INT 23
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43163
43136: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_EXP 109
43146: PPUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: CALL_OW 321
43156: PUSH
43157: LD_INT 2
43159: EQUAL
43160: ST_TO_ADDR
43161: GO 43263
43163: LD_INT 17
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43196
43171: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 39
43179: PPUSH
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 321
43189: PUSH
43190: LD_INT 2
43192: EQUAL
43193: ST_TO_ADDR
43194: GO 43263
43196: LD_INT 18
43198: DOUBLE
43199: EQUAL
43200: IFTRUE 43204
43202: GO 43229
43204: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_INT 40
43212: PPUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 321
43222: PUSH
43223: LD_INT 2
43225: EQUAL
43226: ST_TO_ADDR
43227: GO 43263
43229: LD_INT 27
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43262
43237: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_INT 35
43245: PPUSH
43246: LD_VAR 0 1
43250: PPUSH
43251: CALL_OW 321
43255: PUSH
43256: LD_INT 2
43258: EQUAL
43259: ST_TO_ADDR
43260: GO 43263
43262: POP
// end ;
43263: LD_VAR 0 3
43267: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43268: LD_INT 0
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
// result := false ;
43281: LD_ADDR_VAR 0 6
43285: PUSH
43286: LD_INT 0
43288: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43289: LD_VAR 0 1
43293: NOT
43294: PUSH
43295: LD_VAR 0 1
43299: PPUSH
43300: CALL_OW 266
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: IN
43315: NOT
43316: OR
43317: PUSH
43318: LD_VAR 0 2
43322: NOT
43323: OR
43324: PUSH
43325: LD_VAR 0 5
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 4
43344: PUSH
43345: LD_INT 5
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: IN
43356: NOT
43357: OR
43358: PUSH
43359: LD_VAR 0 3
43363: PPUSH
43364: LD_VAR 0 4
43368: PPUSH
43369: CALL_OW 488
43373: NOT
43374: OR
43375: IFFALSE 43379
// exit ;
43377: GO 44115
// side := GetSide ( depot ) ;
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: LD_VAR 0 1
43388: PPUSH
43389: CALL_OW 255
43393: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43394: LD_VAR 0 9
43398: PPUSH
43399: LD_VAR 0 2
43403: PPUSH
43404: CALL 42888 0 2
43408: NOT
43409: IFFALSE 43413
// exit ;
43411: GO 44115
// pom := GetBase ( depot ) ;
43413: LD_ADDR_VAR 0 10
43417: PUSH
43418: LD_VAR 0 1
43422: PPUSH
43423: CALL_OW 274
43427: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43428: LD_ADDR_VAR 0 11
43432: PUSH
43433: LD_VAR 0 2
43437: PPUSH
43438: LD_VAR 0 1
43442: PPUSH
43443: CALL_OW 248
43447: PPUSH
43448: CALL_OW 450
43452: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43453: LD_VAR 0 10
43457: PPUSH
43458: LD_INT 1
43460: PPUSH
43461: CALL_OW 275
43465: PUSH
43466: LD_VAR 0 11
43470: PUSH
43471: LD_INT 1
43473: ARRAY
43474: GREATEREQUAL
43475: PUSH
43476: LD_VAR 0 10
43480: PPUSH
43481: LD_INT 2
43483: PPUSH
43484: CALL_OW 275
43488: PUSH
43489: LD_VAR 0 11
43493: PUSH
43494: LD_INT 2
43496: ARRAY
43497: GREATEREQUAL
43498: AND
43499: PUSH
43500: LD_VAR 0 10
43504: PPUSH
43505: LD_INT 3
43507: PPUSH
43508: CALL_OW 275
43512: PUSH
43513: LD_VAR 0 11
43517: PUSH
43518: LD_INT 3
43520: ARRAY
43521: GREATEREQUAL
43522: AND
43523: NOT
43524: IFFALSE 43528
// exit ;
43526: GO 44115
// if GetBType ( depot ) = b_depot then
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 266
43537: PUSH
43538: LD_INT 0
43540: EQUAL
43541: IFFALSE 43553
// dist := 28 else
43543: LD_ADDR_VAR 0 14
43547: PUSH
43548: LD_INT 28
43550: ST_TO_ADDR
43551: GO 43561
// dist := 36 ;
43553: LD_ADDR_VAR 0 14
43557: PUSH
43558: LD_INT 36
43560: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43561: LD_VAR 0 1
43565: PPUSH
43566: LD_VAR 0 3
43570: PPUSH
43571: LD_VAR 0 4
43575: PPUSH
43576: CALL_OW 297
43580: PUSH
43581: LD_VAR 0 14
43585: GREATER
43586: IFFALSE 43590
// exit ;
43588: GO 44115
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43590: LD_ADDR_VAR 0 12
43594: PUSH
43595: LD_VAR 0 2
43599: PPUSH
43600: LD_VAR 0 3
43604: PPUSH
43605: LD_VAR 0 4
43609: PPUSH
43610: LD_VAR 0 5
43614: PPUSH
43615: LD_VAR 0 1
43619: PPUSH
43620: CALL_OW 248
43624: PPUSH
43625: LD_INT 0
43627: PPUSH
43628: CALL 44120 0 6
43632: ST_TO_ADDR
// if not hexes then
43633: LD_VAR 0 12
43637: NOT
43638: IFFALSE 43642
// exit ;
43640: GO 44115
// hex := GetHexInfo ( x , y ) ;
43642: LD_ADDR_VAR 0 15
43646: PUSH
43647: LD_VAR 0 3
43651: PPUSH
43652: LD_VAR 0 4
43656: PPUSH
43657: CALL_OW 546
43661: ST_TO_ADDR
// if hex [ 1 ] then
43662: LD_VAR 0 15
43666: PUSH
43667: LD_INT 1
43669: ARRAY
43670: IFFALSE 43674
// exit ;
43672: GO 44115
// height := hex [ 2 ] ;
43674: LD_ADDR_VAR 0 13
43678: PUSH
43679: LD_VAR 0 15
43683: PUSH
43684: LD_INT 2
43686: ARRAY
43687: ST_TO_ADDR
// for i = 1 to hexes do
43688: LD_ADDR_VAR 0 7
43692: PUSH
43693: DOUBLE
43694: LD_INT 1
43696: DEC
43697: ST_TO_ADDR
43698: LD_VAR 0 12
43702: PUSH
43703: FOR_TO
43704: IFFALSE 44034
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43706: LD_VAR 0 12
43710: PUSH
43711: LD_VAR 0 7
43715: ARRAY
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: PPUSH
43721: LD_VAR 0 12
43725: PUSH
43726: LD_VAR 0 7
43730: ARRAY
43731: PUSH
43732: LD_INT 2
43734: ARRAY
43735: PPUSH
43736: CALL_OW 488
43740: NOT
43741: PUSH
43742: LD_VAR 0 12
43746: PUSH
43747: LD_VAR 0 7
43751: ARRAY
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: LD_VAR 0 12
43761: PUSH
43762: LD_VAR 0 7
43766: ARRAY
43767: PUSH
43768: LD_INT 2
43770: ARRAY
43771: PPUSH
43772: CALL_OW 428
43776: PUSH
43777: LD_INT 0
43779: GREATER
43780: OR
43781: PUSH
43782: LD_VAR 0 12
43786: PUSH
43787: LD_VAR 0 7
43791: ARRAY
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PPUSH
43797: LD_VAR 0 12
43801: PUSH
43802: LD_VAR 0 7
43806: ARRAY
43807: PUSH
43808: LD_INT 2
43810: ARRAY
43811: PPUSH
43812: CALL_OW 351
43816: OR
43817: IFFALSE 43823
// exit ;
43819: POP
43820: POP
43821: GO 44115
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43823: LD_ADDR_VAR 0 8
43827: PUSH
43828: LD_VAR 0 12
43832: PUSH
43833: LD_VAR 0 7
43837: ARRAY
43838: PUSH
43839: LD_INT 1
43841: ARRAY
43842: PPUSH
43843: LD_VAR 0 12
43847: PUSH
43848: LD_VAR 0 7
43852: ARRAY
43853: PUSH
43854: LD_INT 2
43856: ARRAY
43857: PPUSH
43858: CALL_OW 546
43862: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43863: LD_VAR 0 8
43867: PUSH
43868: LD_INT 1
43870: ARRAY
43871: PUSH
43872: LD_VAR 0 8
43876: PUSH
43877: LD_INT 2
43879: ARRAY
43880: PUSH
43881: LD_VAR 0 13
43885: PUSH
43886: LD_INT 2
43888: PLUS
43889: GREATER
43890: OR
43891: PUSH
43892: LD_VAR 0 8
43896: PUSH
43897: LD_INT 2
43899: ARRAY
43900: PUSH
43901: LD_VAR 0 13
43905: PUSH
43906: LD_INT 2
43908: MINUS
43909: LESS
43910: OR
43911: PUSH
43912: LD_VAR 0 8
43916: PUSH
43917: LD_INT 3
43919: ARRAY
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 8
43926: PUSH
43927: LD_INT 9
43929: PUSH
43930: LD_INT 10
43932: PUSH
43933: LD_INT 11
43935: PUSH
43936: LD_INT 12
43938: PUSH
43939: LD_INT 13
43941: PUSH
43942: LD_INT 16
43944: PUSH
43945: LD_INT 17
43947: PUSH
43948: LD_INT 18
43950: PUSH
43951: LD_INT 19
43953: PUSH
43954: LD_INT 20
43956: PUSH
43957: LD_INT 21
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: IN
43975: NOT
43976: OR
43977: PUSH
43978: LD_VAR 0 8
43982: PUSH
43983: LD_INT 5
43985: ARRAY
43986: NOT
43987: OR
43988: PUSH
43989: LD_VAR 0 8
43993: PUSH
43994: LD_INT 6
43996: ARRAY
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 7
44006: PUSH
44007: LD_INT 9
44009: PUSH
44010: LD_INT 10
44012: PUSH
44013: LD_INT 11
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: IN
44024: NOT
44025: OR
44026: IFFALSE 44032
// exit ;
44028: POP
44029: POP
44030: GO 44115
// end ;
44032: GO 43703
44034: POP
44035: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44036: LD_VAR 0 9
44040: PPUSH
44041: LD_VAR 0 3
44045: PPUSH
44046: LD_VAR 0 4
44050: PPUSH
44051: LD_INT 20
44053: PPUSH
44054: CALL 36061 0 4
44058: PUSH
44059: LD_INT 4
44061: ARRAY
44062: IFFALSE 44066
// exit ;
44064: GO 44115
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44066: LD_VAR 0 2
44070: PUSH
44071: LD_INT 29
44073: PUSH
44074: LD_INT 30
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: IN
44081: PUSH
44082: LD_VAR 0 3
44086: PPUSH
44087: LD_VAR 0 4
44091: PPUSH
44092: LD_VAR 0 9
44096: PPUSH
44097: CALL_OW 440
44101: NOT
44102: AND
44103: IFFALSE 44107
// exit ;
44105: GO 44115
// result := true ;
44107: LD_ADDR_VAR 0 6
44111: PUSH
44112: LD_INT 1
44114: ST_TO_ADDR
// end ;
44115: LD_VAR 0 6
44119: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44120: LD_INT 0
44122: PPUSH
44123: PPUSH
44124: PPUSH
44125: PPUSH
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
// result = [ ] ;
44180: LD_ADDR_VAR 0 7
44184: PUSH
44185: EMPTY
44186: ST_TO_ADDR
// temp_list = [ ] ;
44187: LD_ADDR_VAR 0 9
44191: PUSH
44192: EMPTY
44193: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44194: LD_VAR 0 4
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: LD_INT 4
44213: PUSH
44214: LD_INT 5
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: IN
44225: NOT
44226: PUSH
44227: LD_VAR 0 1
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: IN
44242: PUSH
44243: LD_VAR 0 5
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 3
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: IN
44262: NOT
44263: AND
44264: OR
44265: IFFALSE 44269
// exit ;
44267: GO 62660
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44269: LD_VAR 0 1
44273: PUSH
44274: LD_INT 6
44276: PUSH
44277: LD_INT 7
44279: PUSH
44280: LD_INT 8
44282: PUSH
44283: LD_INT 13
44285: PUSH
44286: LD_INT 12
44288: PUSH
44289: LD_INT 15
44291: PUSH
44292: LD_INT 11
44294: PUSH
44295: LD_INT 14
44297: PUSH
44298: LD_INT 10
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: IN
44312: IFFALSE 44322
// btype = b_lab ;
44314: LD_ADDR_VAR 0 1
44318: PUSH
44319: LD_INT 6
44321: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44322: LD_VAR 0 6
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: LIST
44340: IN
44341: NOT
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 6
44362: PUSH
44363: LD_INT 36
44365: PUSH
44366: LD_INT 4
44368: PUSH
44369: LD_INT 5
44371: PUSH
44372: LD_INT 31
44374: PUSH
44375: LD_INT 32
44377: PUSH
44378: LD_INT 33
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: IN
44394: NOT
44395: PUSH
44396: LD_VAR 0 6
44400: PUSH
44401: LD_INT 1
44403: EQUAL
44404: AND
44405: OR
44406: PUSH
44407: LD_VAR 0 1
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 3
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: IN
44422: NOT
44423: PUSH
44424: LD_VAR 0 6
44428: PUSH
44429: LD_INT 2
44431: EQUAL
44432: AND
44433: OR
44434: IFFALSE 44444
// mode = 0 ;
44436: LD_ADDR_VAR 0 6
44440: PUSH
44441: LD_INT 0
44443: ST_TO_ADDR
// case mode of 0 :
44444: LD_VAR 0 6
44448: PUSH
44449: LD_INT 0
44451: DOUBLE
44452: EQUAL
44453: IFTRUE 44457
44455: GO 55910
44457: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44458: LD_ADDR_VAR 0 11
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44651: LD_ADDR_VAR 0 12
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 3
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44847: LD_ADDR_VAR 0 13
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: NEG
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: NEG
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45046: LD_ADDR_VAR 0 14
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 3
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45242: LD_ADDR_VAR 0 15
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45435: LD_ADDR_VAR 0 16
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45628: LD_ADDR_VAR 0 17
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45858: LD_ADDR_VAR 0 18
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46088: LD_ADDR_VAR 0 19
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46318: LD_ADDR_VAR 0 20
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46548: LD_ADDR_VAR 0 21
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46778: LD_ADDR_VAR 0 22
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47008: LD_ADDR_VAR 0 23
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47288: LD_ADDR_VAR 0 24
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47564: LD_ADDR_VAR 0 25
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47838: LD_ADDR_VAR 0 26
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48114: LD_ADDR_VAR 0 27
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 3
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48394: LD_ADDR_VAR 0 28
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48676: LD_ADDR_VAR 0 29
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48955: LD_ADDR_VAR 0 30
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 3
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 3
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49233: LD_ADDR_VAR 0 31
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49511: LD_ADDR_VAR 0 32
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49789: LD_ADDR_VAR 0 33
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50068: LD_ADDR_VAR 0 34
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50348: LD_ADDR_VAR 0 35
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50460: LD_ADDR_VAR 0 36
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50572: LD_ADDR_VAR 0 37
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50684: LD_ADDR_VAR 0 38
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50796: LD_ADDR_VAR 0 39
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50908: LD_ADDR_VAR 0 40
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51020: LD_ADDR_VAR 0 41
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51370: LD_ADDR_VAR 0 42
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51720: LD_ADDR_VAR 0 43
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 3
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52068: LD_ADDR_VAR 0 44
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 3
52342: NEG
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52418: LD_ADDR_VAR 0 45
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52768: LD_ADDR_VAR 0 46
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 3
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53116: LD_ADDR_VAR 0 47
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53267: LD_ADDR_VAR 0 48
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53414: LD_ADDR_VAR 0 49
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53558: LD_ADDR_VAR 0 50
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53702: LD_ADDR_VAR 0 51
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53849: LD_ADDR_VAR 0 52
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54000: LD_ADDR_VAR 0 53
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54230: LD_ADDR_VAR 0 54
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54460: LD_ADDR_VAR 0 55
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54690: LD_ADDR_VAR 0 56
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54920: LD_ADDR_VAR 0 57
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55150: LD_ADDR_VAR 0 58
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55380: LD_ADDR_VAR 0 59
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55468: LD_ADDR_VAR 0 60
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55556: LD_ADDR_VAR 0 61
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55644: LD_ADDR_VAR 0 62
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55732: LD_ADDR_VAR 0 63
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55820: LD_ADDR_VAR 0 64
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// end ; 1 :
55908: GO 61805
55910: LD_INT 1
55912: DOUBLE
55913: EQUAL
55914: IFTRUE 55918
55916: GO 58541
55918: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55919: LD_ADDR_VAR 0 11
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55963: LD_ADDR_VAR 0 12
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56004: LD_ADDR_VAR 0 13
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56044: LD_ADDR_VAR 0 14
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56085: LD_ADDR_VAR 0 15
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56129: LD_ADDR_VAR 0 16
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56175: LD_ADDR_VAR 0 17
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56219: LD_ADDR_VAR 0 18
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56260: LD_ADDR_VAR 0 19
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56300: LD_ADDR_VAR 0 20
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56341: LD_ADDR_VAR 0 21
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56385: LD_ADDR_VAR 0 22
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56431: LD_ADDR_VAR 0 23
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 3
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 4
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56475: LD_ADDR_VAR 0 24
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56516: LD_ADDR_VAR 0 25
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56556: LD_ADDR_VAR 0 26
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 4
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56597: LD_ADDR_VAR 0 27
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 4
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56641: LD_ADDR_VAR 0 28
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: LD_INT 3
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 4
56672: NEG
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56687: LD_ADDR_VAR 0 29
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 4
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 4
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 5
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 5
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 6
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 6
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 5
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56842: LD_ADDR_VAR 0 30
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 4
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 5
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 5
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 5
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 6
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 6
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56985: LD_ADDR_VAR 0 31
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 4
57032: PUSH
57033: LD_INT 4
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 4
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 5
57052: PUSH
57053: LD_INT 4
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: LD_INT 5
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 4
57072: PUSH
57073: LD_INT 5
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 6
57082: PUSH
57083: LD_INT 5
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 6
57092: PUSH
57093: LD_INT 6
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 5
57102: PUSH
57103: LD_INT 6
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57124: LD_ADDR_VAR 0 32
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 4
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 3
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 5
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 4
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 6
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 6
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: LD_INT 5
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57267: LD_ADDR_VAR 0 33
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 4
57319: NEG
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 4
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 5
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 5
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 5
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 6
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 6
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57422: LD_ADDR_VAR 0 34
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: LD_INT 4
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 4
57477: NEG
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: NEG
57490: PUSH
57491: LD_INT 4
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: LD_INT 5
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 5
57513: NEG
57514: PUSH
57515: LD_INT 4
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 5
57525: NEG
57526: PUSH
57527: LD_INT 5
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 5
57537: NEG
57538: PUSH
57539: LD_INT 6
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 6
57549: NEG
57550: PUSH
57551: LD_INT 5
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 6
57561: NEG
57562: PUSH
57563: LD_INT 6
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57585: LD_ADDR_VAR 0 41
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57629: LD_ADDR_VAR 0 42
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57670: LD_ADDR_VAR 0 43
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57710: LD_ADDR_VAR 0 44
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57751: LD_ADDR_VAR 0 45
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57795: LD_ADDR_VAR 0 46
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57841: LD_ADDR_VAR 0 47
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57874: LD_ADDR_VAR 0 48
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57905: LD_ADDR_VAR 0 49
57909: PUSH
57910: LD_INT 3
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57934: LD_ADDR_VAR 0 50
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57963: LD_ADDR_VAR 0 51
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57994: LD_ADDR_VAR 0 52
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58027: LD_ADDR_VAR 0 53
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 3
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58071: LD_ADDR_VAR 0 54
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58112: LD_ADDR_VAR 0 55
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58152: LD_ADDR_VAR 0 56
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58193: LD_ADDR_VAR 0 57
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58237: LD_ADDR_VAR 0 58
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 3
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58283: LD_ADDR_VAR 0 59
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58327: LD_ADDR_VAR 0 60
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58368: LD_ADDR_VAR 0 61
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58408: LD_ADDR_VAR 0 62
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58449: LD_ADDR_VAR 0 63
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: LIST
58492: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58493: LD_ADDR_VAR 0 64
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: LIST
58538: ST_TO_ADDR
// end ; 2 :
58539: GO 61805
58541: LD_INT 2
58543: DOUBLE
58544: EQUAL
58545: IFTRUE 58549
58547: GO 61804
58549: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58550: LD_ADDR_VAR 0 29
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 5
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 4
58680: PUSH
58681: LD_INT 4
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: LD_INT 4
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 4
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 5
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 5
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 4
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 4
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 4
58935: NEG
58936: PUSH
58937: LD_INT 4
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: LD_INT 5
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 4
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 4
58983: NEG
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 5
58995: NEG
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 5
59007: NEG
59008: PUSH
59009: LD_INT 5
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 5
59031: NEG
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59088: LD_ADDR_VAR 0 30
59092: PUSH
59093: LD_INT 4
59095: PUSH
59096: LD_INT 4
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 4
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 5
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: LD_INT 5
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: LD_INT 5
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: PUSH
59146: LD_INT 4
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 3
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: LD_INT 5
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 4
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 4
59278: NEG
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: NEG
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 5
59334: NEG
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 5
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 5
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 4
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: LD_INT 3
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: LD_INT 4
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 4
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 5
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 4
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 5
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 5
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59635: LD_ADDR_VAR 0 31
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 4
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 5
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 5
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 4
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 5
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 4
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 4
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 4
59837: NEG
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: LD_INT 5
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: LD_INT 4
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 4
59885: NEG
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 5
59897: NEG
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 5
59909: NEG
59910: PUSH
59911: LD_INT 5
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 5
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 5
59933: NEG
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 4
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: LD_INT 4
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 4
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 4
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 5
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 5
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60185: LD_ADDR_VAR 0 32
60189: PUSH
60190: LD_INT 4
60192: NEG
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 4
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 5
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 5
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 5
60271: NEG
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: NEG
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: LD_INT 4
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 4
60366: NEG
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 4
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 4
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 4
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 5
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 4
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 4
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 5
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: LD_INT 3
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 5
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 4
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 4
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 4
60597: PUSH
60598: LD_INT 4
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 5
60617: PUSH
60618: LD_INT 4
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 5
60627: PUSH
60628: LD_INT 5
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: LD_INT 5
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: LD_INT 4
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: LD_INT 3
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 5
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 5
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60732: LD_ADDR_VAR 0 33
60736: PUSH
60737: LD_INT 4
60739: NEG
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: NEG
60752: PUSH
60753: LD_INT 5
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 4
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 4
60787: NEG
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 5
60799: NEG
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 5
60811: NEG
60812: PUSH
60813: LD_INT 5
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: LD_INT 5
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 5
60835: NEG
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 4
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 4
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 5
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 5
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 5
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 4
61062: PUSH
61063: LD_INT 3
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: LD_INT 4
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: LD_INT 4
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 4
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: LD_INT 5
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 5
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: LD_INT 4
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 5
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: LD_INT 3
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61270: LD_ADDR_VAR 0 34
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 5
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 5
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 5
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 4
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 4
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 5
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: LD_INT 5
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 5
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 5
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 4
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: LD_INT 4
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 4
61655: NEG
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: NEG
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 5
61711: NEG
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 5
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: NEG
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: ST_TO_ADDR
// end ; end ;
61802: GO 61805
61804: POP
// case btype of b_depot , b_warehouse :
61805: LD_VAR 0 1
61809: PUSH
61810: LD_INT 0
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61824
61816: LD_INT 1
61818: DOUBLE
61819: EQUAL
61820: IFTRUE 61824
61822: GO 62025
61824: POP
// case nation of nation_american :
61825: LD_VAR 0 5
61829: PUSH
61830: LD_INT 1
61832: DOUBLE
61833: EQUAL
61834: IFTRUE 61838
61836: GO 61894
61838: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61839: LD_ADDR_VAR 0 9
61843: PUSH
61844: LD_VAR 0 11
61848: PUSH
61849: LD_VAR 0 12
61853: PUSH
61854: LD_VAR 0 13
61858: PUSH
61859: LD_VAR 0 14
61863: PUSH
61864: LD_VAR 0 15
61868: PUSH
61869: LD_VAR 0 16
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: PUSH
61882: LD_VAR 0 4
61886: PUSH
61887: LD_INT 1
61889: PLUS
61890: ARRAY
61891: ST_TO_ADDR
61892: GO 62023
61894: LD_INT 2
61896: DOUBLE
61897: EQUAL
61898: IFTRUE 61902
61900: GO 61958
61902: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61903: LD_ADDR_VAR 0 9
61907: PUSH
61908: LD_VAR 0 17
61912: PUSH
61913: LD_VAR 0 18
61917: PUSH
61918: LD_VAR 0 19
61922: PUSH
61923: LD_VAR 0 20
61927: PUSH
61928: LD_VAR 0 21
61932: PUSH
61933: LD_VAR 0 22
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: PUSH
61946: LD_VAR 0 4
61950: PUSH
61951: LD_INT 1
61953: PLUS
61954: ARRAY
61955: ST_TO_ADDR
61956: GO 62023
61958: LD_INT 3
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61966
61964: GO 62022
61966: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61967: LD_ADDR_VAR 0 9
61971: PUSH
61972: LD_VAR 0 23
61976: PUSH
61977: LD_VAR 0 24
61981: PUSH
61982: LD_VAR 0 25
61986: PUSH
61987: LD_VAR 0 26
61991: PUSH
61992: LD_VAR 0 27
61996: PUSH
61997: LD_VAR 0 28
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: PUSH
62010: LD_VAR 0 4
62014: PUSH
62015: LD_INT 1
62017: PLUS
62018: ARRAY
62019: ST_TO_ADDR
62020: GO 62023
62022: POP
62023: GO 62578
62025: LD_INT 2
62027: DOUBLE
62028: EQUAL
62029: IFTRUE 62039
62031: LD_INT 3
62033: DOUBLE
62034: EQUAL
62035: IFTRUE 62039
62037: GO 62095
62039: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62040: LD_ADDR_VAR 0 9
62044: PUSH
62045: LD_VAR 0 29
62049: PUSH
62050: LD_VAR 0 30
62054: PUSH
62055: LD_VAR 0 31
62059: PUSH
62060: LD_VAR 0 32
62064: PUSH
62065: LD_VAR 0 33
62069: PUSH
62070: LD_VAR 0 34
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: LD_VAR 0 4
62087: PUSH
62088: LD_INT 1
62090: PLUS
62091: ARRAY
62092: ST_TO_ADDR
62093: GO 62578
62095: LD_INT 16
62097: DOUBLE
62098: EQUAL
62099: IFTRUE 62157
62101: LD_INT 17
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62157
62107: LD_INT 18
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62157
62113: LD_INT 19
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62157
62119: LD_INT 22
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62157
62125: LD_INT 20
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62157
62131: LD_INT 21
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62157
62137: LD_INT 23
62139: DOUBLE
62140: EQUAL
62141: IFTRUE 62157
62143: LD_INT 24
62145: DOUBLE
62146: EQUAL
62147: IFTRUE 62157
62149: LD_INT 25
62151: DOUBLE
62152: EQUAL
62153: IFTRUE 62157
62155: GO 62213
62157: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62158: LD_ADDR_VAR 0 9
62162: PUSH
62163: LD_VAR 0 35
62167: PUSH
62168: LD_VAR 0 36
62172: PUSH
62173: LD_VAR 0 37
62177: PUSH
62178: LD_VAR 0 38
62182: PUSH
62183: LD_VAR 0 39
62187: PUSH
62188: LD_VAR 0 40
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: PUSH
62201: LD_VAR 0 4
62205: PUSH
62206: LD_INT 1
62208: PLUS
62209: ARRAY
62210: ST_TO_ADDR
62211: GO 62578
62213: LD_INT 6
62215: DOUBLE
62216: EQUAL
62217: IFTRUE 62269
62219: LD_INT 7
62221: DOUBLE
62222: EQUAL
62223: IFTRUE 62269
62225: LD_INT 8
62227: DOUBLE
62228: EQUAL
62229: IFTRUE 62269
62231: LD_INT 13
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62269
62237: LD_INT 12
62239: DOUBLE
62240: EQUAL
62241: IFTRUE 62269
62243: LD_INT 15
62245: DOUBLE
62246: EQUAL
62247: IFTRUE 62269
62249: LD_INT 11
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62269
62255: LD_INT 14
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62269
62261: LD_INT 10
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62269
62267: GO 62325
62269: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62270: LD_ADDR_VAR 0 9
62274: PUSH
62275: LD_VAR 0 41
62279: PUSH
62280: LD_VAR 0 42
62284: PUSH
62285: LD_VAR 0 43
62289: PUSH
62290: LD_VAR 0 44
62294: PUSH
62295: LD_VAR 0 45
62299: PUSH
62300: LD_VAR 0 46
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: PUSH
62313: LD_VAR 0 4
62317: PUSH
62318: LD_INT 1
62320: PLUS
62321: ARRAY
62322: ST_TO_ADDR
62323: GO 62578
62325: LD_INT 36
62327: DOUBLE
62328: EQUAL
62329: IFTRUE 62333
62331: GO 62389
62333: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62334: LD_ADDR_VAR 0 9
62338: PUSH
62339: LD_VAR 0 47
62343: PUSH
62344: LD_VAR 0 48
62348: PUSH
62349: LD_VAR 0 49
62353: PUSH
62354: LD_VAR 0 50
62358: PUSH
62359: LD_VAR 0 51
62363: PUSH
62364: LD_VAR 0 52
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: PUSH
62377: LD_VAR 0 4
62381: PUSH
62382: LD_INT 1
62384: PLUS
62385: ARRAY
62386: ST_TO_ADDR
62387: GO 62578
62389: LD_INT 4
62391: DOUBLE
62392: EQUAL
62393: IFTRUE 62415
62395: LD_INT 5
62397: DOUBLE
62398: EQUAL
62399: IFTRUE 62415
62401: LD_INT 34
62403: DOUBLE
62404: EQUAL
62405: IFTRUE 62415
62407: LD_INT 37
62409: DOUBLE
62410: EQUAL
62411: IFTRUE 62415
62413: GO 62471
62415: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62416: LD_ADDR_VAR 0 9
62420: PUSH
62421: LD_VAR 0 53
62425: PUSH
62426: LD_VAR 0 54
62430: PUSH
62431: LD_VAR 0 55
62435: PUSH
62436: LD_VAR 0 56
62440: PUSH
62441: LD_VAR 0 57
62445: PUSH
62446: LD_VAR 0 58
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: PUSH
62459: LD_VAR 0 4
62463: PUSH
62464: LD_INT 1
62466: PLUS
62467: ARRAY
62468: ST_TO_ADDR
62469: GO 62578
62471: LD_INT 31
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62521
62477: LD_INT 32
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62521
62483: LD_INT 33
62485: DOUBLE
62486: EQUAL
62487: IFTRUE 62521
62489: LD_INT 27
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62521
62495: LD_INT 26
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62521
62501: LD_INT 28
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62521
62507: LD_INT 29
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62521
62513: LD_INT 30
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62521
62519: GO 62577
62521: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62522: LD_ADDR_VAR 0 9
62526: PUSH
62527: LD_VAR 0 59
62531: PUSH
62532: LD_VAR 0 60
62536: PUSH
62537: LD_VAR 0 61
62541: PUSH
62542: LD_VAR 0 62
62546: PUSH
62547: LD_VAR 0 63
62551: PUSH
62552: LD_VAR 0 64
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: PUSH
62565: LD_VAR 0 4
62569: PUSH
62570: LD_INT 1
62572: PLUS
62573: ARRAY
62574: ST_TO_ADDR
62575: GO 62578
62577: POP
// temp_list2 = [ ] ;
62578: LD_ADDR_VAR 0 10
62582: PUSH
62583: EMPTY
62584: ST_TO_ADDR
// for i in temp_list do
62585: LD_ADDR_VAR 0 8
62589: PUSH
62590: LD_VAR 0 9
62594: PUSH
62595: FOR_IN
62596: IFFALSE 62648
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62598: LD_ADDR_VAR 0 10
62602: PUSH
62603: LD_VAR 0 10
62607: PUSH
62608: LD_VAR 0 8
62612: PUSH
62613: LD_INT 1
62615: ARRAY
62616: PUSH
62617: LD_VAR 0 2
62621: PLUS
62622: PUSH
62623: LD_VAR 0 8
62627: PUSH
62628: LD_INT 2
62630: ARRAY
62631: PUSH
62632: LD_VAR 0 3
62636: PLUS
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: ADD
62645: ST_TO_ADDR
62646: GO 62595
62648: POP
62649: POP
// result = temp_list2 ;
62650: LD_ADDR_VAR 0 7
62654: PUSH
62655: LD_VAR 0 10
62659: ST_TO_ADDR
// end ;
62660: LD_VAR 0 7
62664: RET
// export function EnemyInRange ( unit , dist ) ; begin
62665: LD_INT 0
62667: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62668: LD_ADDR_VAR 0 3
62672: PUSH
62673: LD_VAR 0 1
62677: PPUSH
62678: CALL_OW 255
62682: PPUSH
62683: LD_VAR 0 1
62687: PPUSH
62688: CALL_OW 250
62692: PPUSH
62693: LD_VAR 0 1
62697: PPUSH
62698: CALL_OW 251
62702: PPUSH
62703: LD_VAR 0 2
62707: PPUSH
62708: CALL 36061 0 4
62712: PUSH
62713: LD_INT 4
62715: ARRAY
62716: ST_TO_ADDR
// end ;
62717: LD_VAR 0 3
62721: RET
// export function PlayerSeeMe ( unit ) ; begin
62722: LD_INT 0
62724: PPUSH
// result := See ( your_side , unit ) ;
62725: LD_ADDR_VAR 0 2
62729: PUSH
62730: LD_OWVAR 2
62734: PPUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: CALL_OW 292
62744: ST_TO_ADDR
// end ;
62745: LD_VAR 0 2
62749: RET
// export function ReverseDir ( unit ) ; begin
62750: LD_INT 0
62752: PPUSH
// if not unit then
62753: LD_VAR 0 1
62757: NOT
62758: IFFALSE 62762
// exit ;
62760: GO 62785
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62762: LD_ADDR_VAR 0 2
62766: PUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: CALL_OW 254
62776: PUSH
62777: LD_INT 3
62779: PLUS
62780: PUSH
62781: LD_INT 6
62783: MOD
62784: ST_TO_ADDR
// end ;
62785: LD_VAR 0 2
62789: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62790: LD_INT 0
62792: PPUSH
62793: PPUSH
62794: PPUSH
62795: PPUSH
62796: PPUSH
// if not hexes then
62797: LD_VAR 0 2
62801: NOT
62802: IFFALSE 62806
// exit ;
62804: GO 62954
// dist := 9999 ;
62806: LD_ADDR_VAR 0 5
62810: PUSH
62811: LD_INT 9999
62813: ST_TO_ADDR
// for i = 1 to hexes do
62814: LD_ADDR_VAR 0 4
62818: PUSH
62819: DOUBLE
62820: LD_INT 1
62822: DEC
62823: ST_TO_ADDR
62824: LD_VAR 0 2
62828: PUSH
62829: FOR_TO
62830: IFFALSE 62942
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62832: LD_VAR 0 1
62836: PPUSH
62837: LD_VAR 0 2
62841: PUSH
62842: LD_VAR 0 4
62846: ARRAY
62847: PUSH
62848: LD_INT 1
62850: ARRAY
62851: PPUSH
62852: LD_VAR 0 2
62856: PUSH
62857: LD_VAR 0 4
62861: ARRAY
62862: PUSH
62863: LD_INT 2
62865: ARRAY
62866: PPUSH
62867: CALL_OW 297
62871: PUSH
62872: LD_VAR 0 5
62876: LESS
62877: IFFALSE 62940
// begin hex := hexes [ i ] ;
62879: LD_ADDR_VAR 0 7
62883: PUSH
62884: LD_VAR 0 2
62888: PUSH
62889: LD_VAR 0 4
62893: ARRAY
62894: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62895: LD_ADDR_VAR 0 5
62899: PUSH
62900: LD_VAR 0 1
62904: PPUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_VAR 0 4
62914: ARRAY
62915: PUSH
62916: LD_INT 1
62918: ARRAY
62919: PPUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_VAR 0 4
62929: ARRAY
62930: PUSH
62931: LD_INT 2
62933: ARRAY
62934: PPUSH
62935: CALL_OW 297
62939: ST_TO_ADDR
// end ; end ;
62940: GO 62829
62942: POP
62943: POP
// result := hex ;
62944: LD_ADDR_VAR 0 3
62948: PUSH
62949: LD_VAR 0 7
62953: ST_TO_ADDR
// end ;
62954: LD_VAR 0 3
62958: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62959: LD_INT 0
62961: PPUSH
62962: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62963: LD_VAR 0 1
62967: NOT
62968: PUSH
62969: LD_VAR 0 1
62973: PUSH
62974: LD_INT 21
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 23
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PPUSH
62998: CALL_OW 69
63002: IN
63003: NOT
63004: OR
63005: IFFALSE 63009
// exit ;
63007: GO 63056
// for i = 1 to 3 do
63009: LD_ADDR_VAR 0 3
63013: PUSH
63014: DOUBLE
63015: LD_INT 1
63017: DEC
63018: ST_TO_ADDR
63019: LD_INT 3
63021: PUSH
63022: FOR_TO
63023: IFFALSE 63054
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63025: LD_VAR 0 1
63029: PPUSH
63030: CALL_OW 250
63034: PPUSH
63035: LD_VAR 0 1
63039: PPUSH
63040: CALL_OW 251
63044: PPUSH
63045: LD_INT 1
63047: PPUSH
63048: CALL_OW 453
63052: GO 63022
63054: POP
63055: POP
// end ;
63056: LD_VAR 0 2
63060: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63061: LD_INT 0
63063: PPUSH
63064: PPUSH
63065: PPUSH
63066: PPUSH
63067: PPUSH
63068: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63069: LD_VAR 0 1
63073: NOT
63074: PUSH
63075: LD_VAR 0 2
63079: NOT
63080: OR
63081: PUSH
63082: LD_VAR 0 1
63086: PPUSH
63087: CALL_OW 314
63091: OR
63092: IFFALSE 63096
// exit ;
63094: GO 63537
// x := GetX ( enemy_unit ) ;
63096: LD_ADDR_VAR 0 7
63100: PUSH
63101: LD_VAR 0 2
63105: PPUSH
63106: CALL_OW 250
63110: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63111: LD_ADDR_VAR 0 8
63115: PUSH
63116: LD_VAR 0 2
63120: PPUSH
63121: CALL_OW 251
63125: ST_TO_ADDR
// if not x or not y then
63126: LD_VAR 0 7
63130: NOT
63131: PUSH
63132: LD_VAR 0 8
63136: NOT
63137: OR
63138: IFFALSE 63142
// exit ;
63140: GO 63537
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63142: LD_ADDR_VAR 0 6
63146: PUSH
63147: LD_VAR 0 7
63151: PPUSH
63152: LD_INT 0
63154: PPUSH
63155: LD_INT 4
63157: PPUSH
63158: CALL_OW 272
63162: PUSH
63163: LD_VAR 0 8
63167: PPUSH
63168: LD_INT 0
63170: PPUSH
63171: LD_INT 4
63173: PPUSH
63174: CALL_OW 273
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_VAR 0 7
63187: PPUSH
63188: LD_INT 1
63190: PPUSH
63191: LD_INT 4
63193: PPUSH
63194: CALL_OW 272
63198: PUSH
63199: LD_VAR 0 8
63203: PPUSH
63204: LD_INT 1
63206: PPUSH
63207: LD_INT 4
63209: PPUSH
63210: CALL_OW 273
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_VAR 0 7
63223: PPUSH
63224: LD_INT 2
63226: PPUSH
63227: LD_INT 4
63229: PPUSH
63230: CALL_OW 272
63234: PUSH
63235: LD_VAR 0 8
63239: PPUSH
63240: LD_INT 2
63242: PPUSH
63243: LD_INT 4
63245: PPUSH
63246: CALL_OW 273
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_VAR 0 7
63259: PPUSH
63260: LD_INT 3
63262: PPUSH
63263: LD_INT 4
63265: PPUSH
63266: CALL_OW 272
63270: PUSH
63271: LD_VAR 0 8
63275: PPUSH
63276: LD_INT 3
63278: PPUSH
63279: LD_INT 4
63281: PPUSH
63282: CALL_OW 273
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 7
63295: PPUSH
63296: LD_INT 4
63298: PPUSH
63299: LD_INT 4
63301: PPUSH
63302: CALL_OW 272
63306: PUSH
63307: LD_VAR 0 8
63311: PPUSH
63312: LD_INT 4
63314: PPUSH
63315: LD_INT 4
63317: PPUSH
63318: CALL_OW 273
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 7
63331: PPUSH
63332: LD_INT 5
63334: PPUSH
63335: LD_INT 4
63337: PPUSH
63338: CALL_OW 272
63342: PUSH
63343: LD_VAR 0 8
63347: PPUSH
63348: LD_INT 5
63350: PPUSH
63351: LD_INT 4
63353: PPUSH
63354: CALL_OW 273
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// for i = tmp downto 1 do
63371: LD_ADDR_VAR 0 4
63375: PUSH
63376: DOUBLE
63377: LD_VAR 0 6
63381: INC
63382: ST_TO_ADDR
63383: LD_INT 1
63385: PUSH
63386: FOR_DOWNTO
63387: IFFALSE 63488
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63389: LD_VAR 0 6
63393: PUSH
63394: LD_VAR 0 4
63398: ARRAY
63399: PUSH
63400: LD_INT 1
63402: ARRAY
63403: PPUSH
63404: LD_VAR 0 6
63408: PUSH
63409: LD_VAR 0 4
63413: ARRAY
63414: PUSH
63415: LD_INT 2
63417: ARRAY
63418: PPUSH
63419: CALL_OW 488
63423: NOT
63424: PUSH
63425: LD_VAR 0 6
63429: PUSH
63430: LD_VAR 0 4
63434: ARRAY
63435: PUSH
63436: LD_INT 1
63438: ARRAY
63439: PPUSH
63440: LD_VAR 0 6
63444: PUSH
63445: LD_VAR 0 4
63449: ARRAY
63450: PUSH
63451: LD_INT 2
63453: ARRAY
63454: PPUSH
63455: CALL_OW 428
63459: PUSH
63460: LD_INT 0
63462: NONEQUAL
63463: OR
63464: IFFALSE 63486
// tmp := Delete ( tmp , i ) ;
63466: LD_ADDR_VAR 0 6
63470: PUSH
63471: LD_VAR 0 6
63475: PPUSH
63476: LD_VAR 0 4
63480: PPUSH
63481: CALL_OW 3
63485: ST_TO_ADDR
63486: GO 63386
63488: POP
63489: POP
// j := GetClosestHex ( unit , tmp ) ;
63490: LD_ADDR_VAR 0 5
63494: PUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: LD_VAR 0 6
63504: PPUSH
63505: CALL 62790 0 2
63509: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63510: LD_VAR 0 1
63514: PPUSH
63515: LD_VAR 0 5
63519: PUSH
63520: LD_INT 1
63522: ARRAY
63523: PPUSH
63524: LD_VAR 0 5
63528: PUSH
63529: LD_INT 2
63531: ARRAY
63532: PPUSH
63533: CALL_OW 111
// end ;
63537: LD_VAR 0 3
63541: RET
// export function PrepareApemanSoldier ( ) ; begin
63542: LD_INT 0
63544: PPUSH
// uc_nation := 0 ;
63545: LD_ADDR_OWVAR 21
63549: PUSH
63550: LD_INT 0
63552: ST_TO_ADDR
// hc_sex := sex_male ;
63553: LD_ADDR_OWVAR 27
63557: PUSH
63558: LD_INT 1
63560: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63561: LD_ADDR_OWVAR 28
63565: PUSH
63566: LD_INT 15
63568: ST_TO_ADDR
// hc_gallery :=  ;
63569: LD_ADDR_OWVAR 33
63573: PUSH
63574: LD_STRING 
63576: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63577: LD_ADDR_OWVAR 31
63581: PUSH
63582: LD_INT 0
63584: PPUSH
63585: LD_INT 3
63587: PPUSH
63588: CALL_OW 12
63592: PUSH
63593: LD_INT 0
63595: PPUSH
63596: LD_INT 3
63598: PPUSH
63599: CALL_OW 12
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// end ;
63616: LD_VAR 0 1
63620: RET
// export function PrepareApemanEngineer ( ) ; begin
63621: LD_INT 0
63623: PPUSH
// uc_nation := 0 ;
63624: LD_ADDR_OWVAR 21
63628: PUSH
63629: LD_INT 0
63631: ST_TO_ADDR
// hc_sex := sex_male ;
63632: LD_ADDR_OWVAR 27
63636: PUSH
63637: LD_INT 1
63639: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63640: LD_ADDR_OWVAR 28
63644: PUSH
63645: LD_INT 16
63647: ST_TO_ADDR
// hc_gallery :=  ;
63648: LD_ADDR_OWVAR 33
63652: PUSH
63653: LD_STRING 
63655: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63656: LD_ADDR_OWVAR 31
63660: PUSH
63661: LD_INT 0
63663: PPUSH
63664: LD_INT 3
63666: PPUSH
63667: CALL_OW 12
63671: PUSH
63672: LD_INT 0
63674: PPUSH
63675: LD_INT 3
63677: PPUSH
63678: CALL_OW 12
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: ST_TO_ADDR
// end ;
63695: LD_VAR 0 1
63699: RET
// export function PrepareApeman ( agressivity ) ; begin
63700: LD_INT 0
63702: PPUSH
// uc_side := 0 ;
63703: LD_ADDR_OWVAR 20
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// uc_nation := 0 ;
63711: LD_ADDR_OWVAR 21
63715: PUSH
63716: LD_INT 0
63718: ST_TO_ADDR
// hc_sex := sex_male ;
63719: LD_ADDR_OWVAR 27
63723: PUSH
63724: LD_INT 1
63726: ST_TO_ADDR
// hc_class := class_apeman ;
63727: LD_ADDR_OWVAR 28
63731: PUSH
63732: LD_INT 12
63734: ST_TO_ADDR
// hc_gallery :=  ;
63735: LD_ADDR_OWVAR 33
63739: PUSH
63740: LD_STRING 
63742: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63743: LD_ADDR_OWVAR 35
63747: PUSH
63748: LD_VAR 0 1
63752: NEG
63753: PPUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: CALL_OW 12
63763: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63764: LD_ADDR_OWVAR 31
63768: PUSH
63769: LD_INT 0
63771: PPUSH
63772: LD_INT 3
63774: PPUSH
63775: CALL_OW 12
63779: PUSH
63780: LD_INT 0
63782: PPUSH
63783: LD_INT 3
63785: PPUSH
63786: CALL_OW 12
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// end ;
63803: LD_VAR 0 2
63807: RET
// export function PrepareTiger ( agressivity ) ; begin
63808: LD_INT 0
63810: PPUSH
// uc_side := 0 ;
63811: LD_ADDR_OWVAR 20
63815: PUSH
63816: LD_INT 0
63818: ST_TO_ADDR
// uc_nation := 0 ;
63819: LD_ADDR_OWVAR 21
63823: PUSH
63824: LD_INT 0
63826: ST_TO_ADDR
// hc_class := class_tiger ;
63827: LD_ADDR_OWVAR 28
63831: PUSH
63832: LD_INT 14
63834: ST_TO_ADDR
// hc_gallery :=  ;
63835: LD_ADDR_OWVAR 33
63839: PUSH
63840: LD_STRING 
63842: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63843: LD_ADDR_OWVAR 35
63847: PUSH
63848: LD_VAR 0 1
63852: NEG
63853: PPUSH
63854: LD_VAR 0 1
63858: PPUSH
63859: CALL_OW 12
63863: ST_TO_ADDR
// end ;
63864: LD_VAR 0 2
63868: RET
// export function PrepareEnchidna ( ) ; begin
63869: LD_INT 0
63871: PPUSH
// uc_side := 0 ;
63872: LD_ADDR_OWVAR 20
63876: PUSH
63877: LD_INT 0
63879: ST_TO_ADDR
// uc_nation := 0 ;
63880: LD_ADDR_OWVAR 21
63884: PUSH
63885: LD_INT 0
63887: ST_TO_ADDR
// hc_class := class_baggie ;
63888: LD_ADDR_OWVAR 28
63892: PUSH
63893: LD_INT 13
63895: ST_TO_ADDR
// hc_gallery :=  ;
63896: LD_ADDR_OWVAR 33
63900: PUSH
63901: LD_STRING 
63903: ST_TO_ADDR
// end ;
63904: LD_VAR 0 1
63908: RET
// export function PrepareFrog ( ) ; begin
63909: LD_INT 0
63911: PPUSH
// uc_side := 0 ;
63912: LD_ADDR_OWVAR 20
63916: PUSH
63917: LD_INT 0
63919: ST_TO_ADDR
// uc_nation := 0 ;
63920: LD_ADDR_OWVAR 21
63924: PUSH
63925: LD_INT 0
63927: ST_TO_ADDR
// hc_class := class_frog ;
63928: LD_ADDR_OWVAR 28
63932: PUSH
63933: LD_INT 19
63935: ST_TO_ADDR
// hc_gallery :=  ;
63936: LD_ADDR_OWVAR 33
63940: PUSH
63941: LD_STRING 
63943: ST_TO_ADDR
// end ;
63944: LD_VAR 0 1
63948: RET
// export function PrepareFish ( ) ; begin
63949: LD_INT 0
63951: PPUSH
// uc_side := 0 ;
63952: LD_ADDR_OWVAR 20
63956: PUSH
63957: LD_INT 0
63959: ST_TO_ADDR
// uc_nation := 0 ;
63960: LD_ADDR_OWVAR 21
63964: PUSH
63965: LD_INT 0
63967: ST_TO_ADDR
// hc_class := class_fish ;
63968: LD_ADDR_OWVAR 28
63972: PUSH
63973: LD_INT 20
63975: ST_TO_ADDR
// hc_gallery :=  ;
63976: LD_ADDR_OWVAR 33
63980: PUSH
63981: LD_STRING 
63983: ST_TO_ADDR
// end ;
63984: LD_VAR 0 1
63988: RET
// export function PrepareBird ( ) ; begin
63989: LD_INT 0
63991: PPUSH
// uc_side := 0 ;
63992: LD_ADDR_OWVAR 20
63996: PUSH
63997: LD_INT 0
63999: ST_TO_ADDR
// uc_nation := 0 ;
64000: LD_ADDR_OWVAR 21
64004: PUSH
64005: LD_INT 0
64007: ST_TO_ADDR
// hc_class := class_phororhacos ;
64008: LD_ADDR_OWVAR 28
64012: PUSH
64013: LD_INT 18
64015: ST_TO_ADDR
// hc_gallery :=  ;
64016: LD_ADDR_OWVAR 33
64020: PUSH
64021: LD_STRING 
64023: ST_TO_ADDR
// end ;
64024: LD_VAR 0 1
64028: RET
// export function PrepareHorse ( ) ; begin
64029: LD_INT 0
64031: PPUSH
// uc_side := 0 ;
64032: LD_ADDR_OWVAR 20
64036: PUSH
64037: LD_INT 0
64039: ST_TO_ADDR
// uc_nation := 0 ;
64040: LD_ADDR_OWVAR 21
64044: PUSH
64045: LD_INT 0
64047: ST_TO_ADDR
// hc_class := class_horse ;
64048: LD_ADDR_OWVAR 28
64052: PUSH
64053: LD_INT 21
64055: ST_TO_ADDR
// hc_gallery :=  ;
64056: LD_ADDR_OWVAR 33
64060: PUSH
64061: LD_STRING 
64063: ST_TO_ADDR
// end ;
64064: LD_VAR 0 1
64068: RET
// export function PrepareMastodont ( ) ; begin
64069: LD_INT 0
64071: PPUSH
// uc_side := 0 ;
64072: LD_ADDR_OWVAR 20
64076: PUSH
64077: LD_INT 0
64079: ST_TO_ADDR
// uc_nation := 0 ;
64080: LD_ADDR_OWVAR 21
64084: PUSH
64085: LD_INT 0
64087: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64088: LD_ADDR_OWVAR 37
64092: PUSH
64093: LD_INT 31
64095: ST_TO_ADDR
// vc_control := control_rider ;
64096: LD_ADDR_OWVAR 38
64100: PUSH
64101: LD_INT 4
64103: ST_TO_ADDR
// end ;
64104: LD_VAR 0 1
64108: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64109: LD_INT 0
64111: PPUSH
64112: PPUSH
64113: PPUSH
// uc_side = 0 ;
64114: LD_ADDR_OWVAR 20
64118: PUSH
64119: LD_INT 0
64121: ST_TO_ADDR
// uc_nation = 0 ;
64122: LD_ADDR_OWVAR 21
64126: PUSH
64127: LD_INT 0
64129: ST_TO_ADDR
// InitHc_All ( ) ;
64130: CALL_OW 584
// InitVc ;
64134: CALL_OW 20
// if mastodonts then
64138: LD_VAR 0 6
64142: IFFALSE 64209
// for i = 1 to mastodonts do
64144: LD_ADDR_VAR 0 11
64148: PUSH
64149: DOUBLE
64150: LD_INT 1
64152: DEC
64153: ST_TO_ADDR
64154: LD_VAR 0 6
64158: PUSH
64159: FOR_TO
64160: IFFALSE 64207
// begin vc_chassis := 31 ;
64162: LD_ADDR_OWVAR 37
64166: PUSH
64167: LD_INT 31
64169: ST_TO_ADDR
// vc_control := control_rider ;
64170: LD_ADDR_OWVAR 38
64174: PUSH
64175: LD_INT 4
64177: ST_TO_ADDR
// animal := CreateVehicle ;
64178: LD_ADDR_VAR 0 12
64182: PUSH
64183: CALL_OW 45
64187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64188: LD_VAR 0 12
64192: PPUSH
64193: LD_VAR 0 8
64197: PPUSH
64198: LD_INT 0
64200: PPUSH
64201: CALL 66344 0 3
// end ;
64205: GO 64159
64207: POP
64208: POP
// if horses then
64209: LD_VAR 0 5
64213: IFFALSE 64280
// for i = 1 to horses do
64215: LD_ADDR_VAR 0 11
64219: PUSH
64220: DOUBLE
64221: LD_INT 1
64223: DEC
64224: ST_TO_ADDR
64225: LD_VAR 0 5
64229: PUSH
64230: FOR_TO
64231: IFFALSE 64278
// begin hc_class := 21 ;
64233: LD_ADDR_OWVAR 28
64237: PUSH
64238: LD_INT 21
64240: ST_TO_ADDR
// hc_gallery :=  ;
64241: LD_ADDR_OWVAR 33
64245: PUSH
64246: LD_STRING 
64248: ST_TO_ADDR
// animal := CreateHuman ;
64249: LD_ADDR_VAR 0 12
64253: PUSH
64254: CALL_OW 44
64258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64259: LD_VAR 0 12
64263: PPUSH
64264: LD_VAR 0 8
64268: PPUSH
64269: LD_INT 0
64271: PPUSH
64272: CALL 66344 0 3
// end ;
64276: GO 64230
64278: POP
64279: POP
// if birds then
64280: LD_VAR 0 1
64284: IFFALSE 64351
// for i = 1 to birds do
64286: LD_ADDR_VAR 0 11
64290: PUSH
64291: DOUBLE
64292: LD_INT 1
64294: DEC
64295: ST_TO_ADDR
64296: LD_VAR 0 1
64300: PUSH
64301: FOR_TO
64302: IFFALSE 64349
// begin hc_class = 18 ;
64304: LD_ADDR_OWVAR 28
64308: PUSH
64309: LD_INT 18
64311: ST_TO_ADDR
// hc_gallery =  ;
64312: LD_ADDR_OWVAR 33
64316: PUSH
64317: LD_STRING 
64319: ST_TO_ADDR
// animal := CreateHuman ;
64320: LD_ADDR_VAR 0 12
64324: PUSH
64325: CALL_OW 44
64329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64330: LD_VAR 0 12
64334: PPUSH
64335: LD_VAR 0 8
64339: PPUSH
64340: LD_INT 0
64342: PPUSH
64343: CALL 66344 0 3
// end ;
64347: GO 64301
64349: POP
64350: POP
// if tigers then
64351: LD_VAR 0 2
64355: IFFALSE 64439
// for i = 1 to tigers do
64357: LD_ADDR_VAR 0 11
64361: PUSH
64362: DOUBLE
64363: LD_INT 1
64365: DEC
64366: ST_TO_ADDR
64367: LD_VAR 0 2
64371: PUSH
64372: FOR_TO
64373: IFFALSE 64437
// begin hc_class = class_tiger ;
64375: LD_ADDR_OWVAR 28
64379: PUSH
64380: LD_INT 14
64382: ST_TO_ADDR
// hc_gallery =  ;
64383: LD_ADDR_OWVAR 33
64387: PUSH
64388: LD_STRING 
64390: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64391: LD_ADDR_OWVAR 35
64395: PUSH
64396: LD_INT 7
64398: NEG
64399: PPUSH
64400: LD_INT 7
64402: PPUSH
64403: CALL_OW 12
64407: ST_TO_ADDR
// animal := CreateHuman ;
64408: LD_ADDR_VAR 0 12
64412: PUSH
64413: CALL_OW 44
64417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64418: LD_VAR 0 12
64422: PPUSH
64423: LD_VAR 0 8
64427: PPUSH
64428: LD_INT 0
64430: PPUSH
64431: CALL 66344 0 3
// end ;
64435: GO 64372
64437: POP
64438: POP
// if apemans then
64439: LD_VAR 0 3
64443: IFFALSE 64566
// for i = 1 to apemans do
64445: LD_ADDR_VAR 0 11
64449: PUSH
64450: DOUBLE
64451: LD_INT 1
64453: DEC
64454: ST_TO_ADDR
64455: LD_VAR 0 3
64459: PUSH
64460: FOR_TO
64461: IFFALSE 64564
// begin hc_class = class_apeman ;
64463: LD_ADDR_OWVAR 28
64467: PUSH
64468: LD_INT 12
64470: ST_TO_ADDR
// hc_gallery =  ;
64471: LD_ADDR_OWVAR 33
64475: PUSH
64476: LD_STRING 
64478: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64479: LD_ADDR_OWVAR 35
64483: PUSH
64484: LD_INT 2
64486: NEG
64487: PPUSH
64488: LD_INT 2
64490: PPUSH
64491: CALL_OW 12
64495: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64496: LD_ADDR_OWVAR 31
64500: PUSH
64501: LD_INT 1
64503: PPUSH
64504: LD_INT 3
64506: PPUSH
64507: CALL_OW 12
64511: PUSH
64512: LD_INT 1
64514: PPUSH
64515: LD_INT 3
64517: PPUSH
64518: CALL_OW 12
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: ST_TO_ADDR
// animal := CreateHuman ;
64535: LD_ADDR_VAR 0 12
64539: PUSH
64540: CALL_OW 44
64544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64545: LD_VAR 0 12
64549: PPUSH
64550: LD_VAR 0 8
64554: PPUSH
64555: LD_INT 0
64557: PPUSH
64558: CALL 66344 0 3
// end ;
64562: GO 64460
64564: POP
64565: POP
// if enchidnas then
64566: LD_VAR 0 4
64570: IFFALSE 64637
// for i = 1 to enchidnas do
64572: LD_ADDR_VAR 0 11
64576: PUSH
64577: DOUBLE
64578: LD_INT 1
64580: DEC
64581: ST_TO_ADDR
64582: LD_VAR 0 4
64586: PUSH
64587: FOR_TO
64588: IFFALSE 64635
// begin hc_class = 13 ;
64590: LD_ADDR_OWVAR 28
64594: PUSH
64595: LD_INT 13
64597: ST_TO_ADDR
// hc_gallery =  ;
64598: LD_ADDR_OWVAR 33
64602: PUSH
64603: LD_STRING 
64605: ST_TO_ADDR
// animal := CreateHuman ;
64606: LD_ADDR_VAR 0 12
64610: PUSH
64611: CALL_OW 44
64615: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64616: LD_VAR 0 12
64620: PPUSH
64621: LD_VAR 0 8
64625: PPUSH
64626: LD_INT 0
64628: PPUSH
64629: CALL 66344 0 3
// end ;
64633: GO 64587
64635: POP
64636: POP
// if fishes then
64637: LD_VAR 0 7
64641: IFFALSE 64708
// for i = 1 to fishes do
64643: LD_ADDR_VAR 0 11
64647: PUSH
64648: DOUBLE
64649: LD_INT 1
64651: DEC
64652: ST_TO_ADDR
64653: LD_VAR 0 7
64657: PUSH
64658: FOR_TO
64659: IFFALSE 64706
// begin hc_class = 20 ;
64661: LD_ADDR_OWVAR 28
64665: PUSH
64666: LD_INT 20
64668: ST_TO_ADDR
// hc_gallery =  ;
64669: LD_ADDR_OWVAR 33
64673: PUSH
64674: LD_STRING 
64676: ST_TO_ADDR
// animal := CreateHuman ;
64677: LD_ADDR_VAR 0 12
64681: PUSH
64682: CALL_OW 44
64686: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64687: LD_VAR 0 12
64691: PPUSH
64692: LD_VAR 0 9
64696: PPUSH
64697: LD_INT 0
64699: PPUSH
64700: CALL 66344 0 3
// end ;
64704: GO 64658
64706: POP
64707: POP
// end ;
64708: LD_VAR 0 10
64712: RET
// export function WantHeal ( sci , unit ) ; begin
64713: LD_INT 0
64715: PPUSH
// if GetTaskList ( sci ) > 0 then
64716: LD_VAR 0 1
64720: PPUSH
64721: CALL_OW 437
64725: PUSH
64726: LD_INT 0
64728: GREATER
64729: IFFALSE 64799
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64731: LD_VAR 0 1
64735: PPUSH
64736: CALL_OW 437
64740: PUSH
64741: LD_INT 1
64743: ARRAY
64744: PUSH
64745: LD_INT 1
64747: ARRAY
64748: PUSH
64749: LD_STRING l
64751: EQUAL
64752: PUSH
64753: LD_VAR 0 1
64757: PPUSH
64758: CALL_OW 437
64762: PUSH
64763: LD_INT 1
64765: ARRAY
64766: PUSH
64767: LD_INT 4
64769: ARRAY
64770: PUSH
64771: LD_VAR 0 2
64775: EQUAL
64776: AND
64777: IFFALSE 64789
// result := true else
64779: LD_ADDR_VAR 0 3
64783: PUSH
64784: LD_INT 1
64786: ST_TO_ADDR
64787: GO 64797
// result := false ;
64789: LD_ADDR_VAR 0 3
64793: PUSH
64794: LD_INT 0
64796: ST_TO_ADDR
// end else
64797: GO 64807
// result := false ;
64799: LD_ADDR_VAR 0 3
64803: PUSH
64804: LD_INT 0
64806: ST_TO_ADDR
// end ;
64807: LD_VAR 0 3
64811: RET
// export function HealTarget ( sci ) ; begin
64812: LD_INT 0
64814: PPUSH
// if not sci then
64815: LD_VAR 0 1
64819: NOT
64820: IFFALSE 64824
// exit ;
64822: GO 64889
// result := 0 ;
64824: LD_ADDR_VAR 0 2
64828: PUSH
64829: LD_INT 0
64831: ST_TO_ADDR
// if GetTaskList ( sci ) then
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL_OW 437
64841: IFFALSE 64889
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64843: LD_VAR 0 1
64847: PPUSH
64848: CALL_OW 437
64852: PUSH
64853: LD_INT 1
64855: ARRAY
64856: PUSH
64857: LD_INT 1
64859: ARRAY
64860: PUSH
64861: LD_STRING l
64863: EQUAL
64864: IFFALSE 64889
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64866: LD_ADDR_VAR 0 2
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: CALL_OW 437
64880: PUSH
64881: LD_INT 1
64883: ARRAY
64884: PUSH
64885: LD_INT 4
64887: ARRAY
64888: ST_TO_ADDR
// end ;
64889: LD_VAR 0 2
64893: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64894: LD_INT 0
64896: PPUSH
64897: PPUSH
64898: PPUSH
64899: PPUSH
// if not base_units then
64900: LD_VAR 0 1
64904: NOT
64905: IFFALSE 64909
// exit ;
64907: GO 64996
// result := false ;
64909: LD_ADDR_VAR 0 2
64913: PUSH
64914: LD_INT 0
64916: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64917: LD_ADDR_VAR 0 5
64921: PUSH
64922: LD_VAR 0 1
64926: PPUSH
64927: LD_INT 21
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PPUSH
64937: CALL_OW 72
64941: ST_TO_ADDR
// if not tmp then
64942: LD_VAR 0 5
64946: NOT
64947: IFFALSE 64951
// exit ;
64949: GO 64996
// for i in tmp do
64951: LD_ADDR_VAR 0 3
64955: PUSH
64956: LD_VAR 0 5
64960: PUSH
64961: FOR_IN
64962: IFFALSE 64994
// begin result := EnemyInRange ( i , 22 ) ;
64964: LD_ADDR_VAR 0 2
64968: PUSH
64969: LD_VAR 0 3
64973: PPUSH
64974: LD_INT 22
64976: PPUSH
64977: CALL 62665 0 2
64981: ST_TO_ADDR
// if result then
64982: LD_VAR 0 2
64986: IFFALSE 64992
// exit ;
64988: POP
64989: POP
64990: GO 64996
// end ;
64992: GO 64961
64994: POP
64995: POP
// end ;
64996: LD_VAR 0 2
65000: RET
// export function FilterByTag ( units , tag ) ; begin
65001: LD_INT 0
65003: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65004: LD_ADDR_VAR 0 3
65008: PUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: LD_INT 120
65016: PUSH
65017: LD_VAR 0 2
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PPUSH
65026: CALL_OW 72
65030: ST_TO_ADDR
// end ;
65031: LD_VAR 0 3
65035: RET
// export function IsDriver ( un ) ; begin
65036: LD_INT 0
65038: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65039: LD_ADDR_VAR 0 2
65043: PUSH
65044: LD_VAR 0 1
65048: PUSH
65049: LD_INT 55
65051: PUSH
65052: EMPTY
65053: LIST
65054: PPUSH
65055: CALL_OW 69
65059: IN
65060: ST_TO_ADDR
// end ;
65061: LD_VAR 0 2
65065: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65066: LD_INT 0
65068: PPUSH
65069: PPUSH
// list := [ ] ;
65070: LD_ADDR_VAR 0 5
65074: PUSH
65075: EMPTY
65076: ST_TO_ADDR
// case d of 0 :
65077: LD_VAR 0 3
65081: PUSH
65082: LD_INT 0
65084: DOUBLE
65085: EQUAL
65086: IFTRUE 65090
65088: GO 65223
65090: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65091: LD_ADDR_VAR 0 5
65095: PUSH
65096: LD_VAR 0 1
65100: PUSH
65101: LD_INT 4
65103: MINUS
65104: PUSH
65105: LD_VAR 0 2
65109: PUSH
65110: LD_INT 4
65112: MINUS
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: PUSH
65122: LD_VAR 0 1
65126: PUSH
65127: LD_INT 3
65129: MINUS
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: LIST
65143: PUSH
65144: LD_VAR 0 1
65148: PUSH
65149: LD_INT 4
65151: PLUS
65152: PUSH
65153: LD_VAR 0 2
65157: PUSH
65158: LD_INT 4
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: PUSH
65166: LD_VAR 0 1
65170: PUSH
65171: LD_INT 3
65173: PLUS
65174: PUSH
65175: LD_VAR 0 2
65179: PUSH
65180: LD_INT 3
65182: PLUS
65183: PUSH
65184: LD_INT 5
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: LIST
65191: PUSH
65192: LD_VAR 0 1
65196: PUSH
65197: LD_VAR 0 2
65201: PUSH
65202: LD_INT 4
65204: PLUS
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// end ; 1 :
65221: GO 65921
65223: LD_INT 1
65225: DOUBLE
65226: EQUAL
65227: IFTRUE 65231
65229: GO 65364
65231: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65232: LD_ADDR_VAR 0 5
65236: PUSH
65237: LD_VAR 0 1
65241: PUSH
65242: LD_VAR 0 2
65246: PUSH
65247: LD_INT 4
65249: MINUS
65250: PUSH
65251: LD_INT 3
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: LIST
65258: PUSH
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 3
65266: MINUS
65267: PUSH
65268: LD_VAR 0 2
65272: PUSH
65273: LD_INT 3
65275: MINUS
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: PUSH
65285: LD_VAR 0 1
65289: PUSH
65290: LD_INT 4
65292: MINUS
65293: PUSH
65294: LD_VAR 0 2
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: LIST
65306: PUSH
65307: LD_VAR 0 1
65311: PUSH
65312: LD_VAR 0 2
65316: PUSH
65317: LD_INT 3
65319: PLUS
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: PUSH
65329: LD_VAR 0 1
65333: PUSH
65334: LD_INT 4
65336: PLUS
65337: PUSH
65338: LD_VAR 0 2
65342: PUSH
65343: LD_INT 4
65345: PLUS
65346: PUSH
65347: LD_INT 5
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: LIST
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: ST_TO_ADDR
// end ; 2 :
65362: GO 65921
65364: LD_INT 2
65366: DOUBLE
65367: EQUAL
65368: IFTRUE 65372
65370: GO 65501
65372: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65373: LD_ADDR_VAR 0 5
65377: PUSH
65378: LD_VAR 0 1
65382: PUSH
65383: LD_VAR 0 2
65387: PUSH
65388: LD_INT 3
65390: MINUS
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: PUSH
65400: LD_VAR 0 1
65404: PUSH
65405: LD_INT 4
65407: PLUS
65408: PUSH
65409: LD_VAR 0 2
65413: PUSH
65414: LD_INT 4
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: PUSH
65422: LD_VAR 0 1
65426: PUSH
65427: LD_VAR 0 2
65431: PUSH
65432: LD_INT 4
65434: PLUS
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: PUSH
65444: LD_VAR 0 1
65448: PUSH
65449: LD_INT 3
65451: MINUS
65452: PUSH
65453: LD_VAR 0 2
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: PUSH
65466: LD_VAR 0 1
65470: PUSH
65471: LD_INT 4
65473: MINUS
65474: PUSH
65475: LD_VAR 0 2
65479: PUSH
65480: LD_INT 4
65482: MINUS
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: LIST
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: ST_TO_ADDR
// end ; 3 :
65499: GO 65921
65501: LD_INT 3
65503: DOUBLE
65504: EQUAL
65505: IFTRUE 65509
65507: GO 65642
65509: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65510: LD_ADDR_VAR 0 5
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 3
65522: PLUS
65523: PUSH
65524: LD_VAR 0 2
65528: PUSH
65529: LD_INT 4
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_INT 4
65544: PLUS
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: LD_INT 4
65553: PLUS
65554: PUSH
65555: LD_INT 5
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: LIST
65562: PUSH
65563: LD_VAR 0 1
65567: PUSH
65568: LD_INT 4
65570: MINUS
65571: PUSH
65572: LD_VAR 0 2
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: PUSH
65585: LD_VAR 0 1
65589: PUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_INT 4
65597: MINUS
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: LD_VAR 0 1
65611: PUSH
65612: LD_INT 3
65614: MINUS
65615: PUSH
65616: LD_VAR 0 2
65620: PUSH
65621: LD_INT 3
65623: MINUS
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// end ; 4 :
65640: GO 65921
65642: LD_INT 4
65644: DOUBLE
65645: EQUAL
65646: IFTRUE 65650
65648: GO 65783
65650: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65651: LD_ADDR_VAR 0 5
65655: PUSH
65656: LD_VAR 0 1
65660: PUSH
65661: LD_VAR 0 2
65665: PUSH
65666: LD_INT 4
65668: PLUS
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: PUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_INT 3
65685: PLUS
65686: PUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_INT 3
65694: PLUS
65695: PUSH
65696: LD_INT 5
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: PUSH
65704: LD_VAR 0 1
65708: PUSH
65709: LD_INT 4
65711: PLUS
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: LIST
65725: PUSH
65726: LD_VAR 0 1
65730: PUSH
65731: LD_VAR 0 2
65735: PUSH
65736: LD_INT 3
65738: MINUS
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: PUSH
65748: LD_VAR 0 1
65752: PUSH
65753: LD_INT 4
65755: MINUS
65756: PUSH
65757: LD_VAR 0 2
65761: PUSH
65762: LD_INT 4
65764: MINUS
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// end ; 5 :
65781: GO 65921
65783: LD_INT 5
65785: DOUBLE
65786: EQUAL
65787: IFTRUE 65791
65789: GO 65920
65791: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65792: LD_ADDR_VAR 0 5
65796: PUSH
65797: LD_VAR 0 1
65801: PUSH
65802: LD_INT 4
65804: MINUS
65805: PUSH
65806: LD_VAR 0 2
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: PUSH
65819: LD_VAR 0 1
65823: PUSH
65824: LD_VAR 0 2
65828: PUSH
65829: LD_INT 4
65831: MINUS
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_INT 4
65848: PLUS
65849: PUSH
65850: LD_VAR 0 2
65854: PUSH
65855: LD_INT 4
65857: PLUS
65858: PUSH
65859: LD_INT 5
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: PUSH
65867: LD_VAR 0 1
65871: PUSH
65872: LD_INT 3
65874: PLUS
65875: PUSH
65876: LD_VAR 0 2
65880: PUSH
65881: LD_INT 4
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: LIST
65888: PUSH
65889: LD_VAR 0 1
65893: PUSH
65894: LD_VAR 0 2
65898: PUSH
65899: LD_INT 3
65901: PLUS
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// end ; end ;
65918: GO 65921
65920: POP
// result := list ;
65921: LD_ADDR_VAR 0 4
65925: PUSH
65926: LD_VAR 0 5
65930: ST_TO_ADDR
// end ;
65931: LD_VAR 0 4
65935: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65936: LD_INT 0
65938: PPUSH
65939: PPUSH
65940: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65941: LD_VAR 0 1
65945: NOT
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: LD_INT 4
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: IN
65970: NOT
65971: OR
65972: IFFALSE 65976
// exit ;
65974: GO 66068
// tmp := [ ] ;
65976: LD_ADDR_VAR 0 5
65980: PUSH
65981: EMPTY
65982: ST_TO_ADDR
// for i in units do
65983: LD_ADDR_VAR 0 4
65987: PUSH
65988: LD_VAR 0 1
65992: PUSH
65993: FOR_IN
65994: IFFALSE 66037
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65996: LD_ADDR_VAR 0 5
66000: PUSH
66001: LD_VAR 0 5
66005: PPUSH
66006: LD_VAR 0 5
66010: PUSH
66011: LD_INT 1
66013: PLUS
66014: PPUSH
66015: LD_VAR 0 4
66019: PPUSH
66020: LD_VAR 0 2
66024: PPUSH
66025: CALL_OW 259
66029: PPUSH
66030: CALL_OW 2
66034: ST_TO_ADDR
66035: GO 65993
66037: POP
66038: POP
// if not tmp then
66039: LD_VAR 0 5
66043: NOT
66044: IFFALSE 66048
// exit ;
66046: GO 66068
// result := SortListByListDesc ( units , tmp ) ;
66048: LD_ADDR_VAR 0 3
66052: PUSH
66053: LD_VAR 0 1
66057: PPUSH
66058: LD_VAR 0 5
66062: PPUSH
66063: CALL_OW 77
66067: ST_TO_ADDR
// end ;
66068: LD_VAR 0 3
66072: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66073: LD_INT 0
66075: PPUSH
66076: PPUSH
66077: PPUSH
// result := false ;
66078: LD_ADDR_VAR 0 3
66082: PUSH
66083: LD_INT 0
66085: ST_TO_ADDR
// x := GetX ( building ) ;
66086: LD_ADDR_VAR 0 4
66090: PUSH
66091: LD_VAR 0 2
66095: PPUSH
66096: CALL_OW 250
66100: ST_TO_ADDR
// y := GetY ( building ) ;
66101: LD_ADDR_VAR 0 5
66105: PUSH
66106: LD_VAR 0 2
66110: PPUSH
66111: CALL_OW 251
66115: ST_TO_ADDR
// if not building or not x or not y then
66116: LD_VAR 0 2
66120: NOT
66121: PUSH
66122: LD_VAR 0 4
66126: NOT
66127: OR
66128: PUSH
66129: LD_VAR 0 5
66133: NOT
66134: OR
66135: IFFALSE 66139
// exit ;
66137: GO 66231
// if GetTaskList ( unit ) then
66139: LD_VAR 0 1
66143: PPUSH
66144: CALL_OW 437
66148: IFFALSE 66231
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66150: LD_STRING e
66152: PUSH
66153: LD_VAR 0 1
66157: PPUSH
66158: CALL_OW 437
66162: PUSH
66163: LD_INT 1
66165: ARRAY
66166: PUSH
66167: LD_INT 1
66169: ARRAY
66170: EQUAL
66171: PUSH
66172: LD_VAR 0 4
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL_OW 437
66186: PUSH
66187: LD_INT 1
66189: ARRAY
66190: PUSH
66191: LD_INT 2
66193: ARRAY
66194: EQUAL
66195: AND
66196: PUSH
66197: LD_VAR 0 5
66201: PUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 437
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: PUSH
66216: LD_INT 3
66218: ARRAY
66219: EQUAL
66220: AND
66221: IFFALSE 66231
// result := true end ;
66223: LD_ADDR_VAR 0 3
66227: PUSH
66228: LD_INT 1
66230: ST_TO_ADDR
// end ;
66231: LD_VAR 0 3
66235: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66236: LD_INT 0
66238: PPUSH
// result := false ;
66239: LD_ADDR_VAR 0 4
66243: PUSH
66244: LD_INT 0
66246: ST_TO_ADDR
// if GetTaskList ( unit ) then
66247: LD_VAR 0 1
66251: PPUSH
66252: CALL_OW 437
66256: IFFALSE 66339
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66258: LD_STRING M
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: CALL_OW 437
66270: PUSH
66271: LD_INT 1
66273: ARRAY
66274: PUSH
66275: LD_INT 1
66277: ARRAY
66278: EQUAL
66279: PUSH
66280: LD_VAR 0 2
66284: PUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: CALL_OW 437
66294: PUSH
66295: LD_INT 1
66297: ARRAY
66298: PUSH
66299: LD_INT 2
66301: ARRAY
66302: EQUAL
66303: AND
66304: PUSH
66305: LD_VAR 0 3
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: CALL_OW 437
66319: PUSH
66320: LD_INT 1
66322: ARRAY
66323: PUSH
66324: LD_INT 3
66326: ARRAY
66327: EQUAL
66328: AND
66329: IFFALSE 66339
// result := true ;
66331: LD_ADDR_VAR 0 4
66335: PUSH
66336: LD_INT 1
66338: ST_TO_ADDR
// end ; end ;
66339: LD_VAR 0 4
66343: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66344: LD_INT 0
66346: PPUSH
66347: PPUSH
66348: PPUSH
66349: PPUSH
// if not unit or not area then
66350: LD_VAR 0 1
66354: NOT
66355: PUSH
66356: LD_VAR 0 2
66360: NOT
66361: OR
66362: IFFALSE 66366
// exit ;
66364: GO 66530
// tmp := AreaToList ( area , i ) ;
66366: LD_ADDR_VAR 0 6
66370: PUSH
66371: LD_VAR 0 2
66375: PPUSH
66376: LD_VAR 0 5
66380: PPUSH
66381: CALL_OW 517
66385: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66386: LD_ADDR_VAR 0 5
66390: PUSH
66391: DOUBLE
66392: LD_INT 1
66394: DEC
66395: ST_TO_ADDR
66396: LD_VAR 0 6
66400: PUSH
66401: LD_INT 1
66403: ARRAY
66404: PUSH
66405: FOR_TO
66406: IFFALSE 66528
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66408: LD_ADDR_VAR 0 7
66412: PUSH
66413: LD_VAR 0 6
66417: PUSH
66418: LD_INT 1
66420: ARRAY
66421: PUSH
66422: LD_VAR 0 5
66426: ARRAY
66427: PUSH
66428: LD_VAR 0 6
66432: PUSH
66433: LD_INT 2
66435: ARRAY
66436: PUSH
66437: LD_VAR 0 5
66441: ARRAY
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66447: LD_VAR 0 7
66451: PUSH
66452: LD_INT 1
66454: ARRAY
66455: PPUSH
66456: LD_VAR 0 7
66460: PUSH
66461: LD_INT 2
66463: ARRAY
66464: PPUSH
66465: CALL_OW 428
66469: PUSH
66470: LD_INT 0
66472: EQUAL
66473: IFFALSE 66526
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 7
66484: PUSH
66485: LD_INT 1
66487: ARRAY
66488: PPUSH
66489: LD_VAR 0 7
66493: PUSH
66494: LD_INT 2
66496: ARRAY
66497: PPUSH
66498: LD_VAR 0 3
66502: PPUSH
66503: CALL_OW 48
// result := IsPlaced ( unit ) ;
66507: LD_ADDR_VAR 0 4
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: CALL_OW 305
66521: ST_TO_ADDR
// exit ;
66522: POP
66523: POP
66524: GO 66530
// end ; end ;
66526: GO 66405
66528: POP
66529: POP
// end ;
66530: LD_VAR 0 4
66534: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66535: LD_INT 0
66537: PPUSH
66538: PPUSH
66539: PPUSH
// if not side or side > 8 then
66540: LD_VAR 0 1
66544: NOT
66545: PUSH
66546: LD_VAR 0 1
66550: PUSH
66551: LD_INT 8
66553: GREATER
66554: OR
66555: IFFALSE 66559
// exit ;
66557: GO 66746
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66559: LD_ADDR_VAR 0 4
66563: PUSH
66564: LD_INT 22
66566: PUSH
66567: LD_VAR 0 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 21
66578: PUSH
66579: LD_INT 3
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PPUSH
66590: CALL_OW 69
66594: ST_TO_ADDR
// if not tmp then
66595: LD_VAR 0 4
66599: NOT
66600: IFFALSE 66604
// exit ;
66602: GO 66746
// enable_addtolog := true ;
66604: LD_ADDR_OWVAR 81
66608: PUSH
66609: LD_INT 1
66611: ST_TO_ADDR
// AddToLog ( [ ) ;
66612: LD_STRING [
66614: PPUSH
66615: CALL_OW 561
// for i in tmp do
66619: LD_ADDR_VAR 0 3
66623: PUSH
66624: LD_VAR 0 4
66628: PUSH
66629: FOR_IN
66630: IFFALSE 66737
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66632: LD_STRING [
66634: PUSH
66635: LD_VAR 0 3
66639: PPUSH
66640: CALL_OW 266
66644: STR
66645: PUSH
66646: LD_STRING , 
66648: STR
66649: PUSH
66650: LD_VAR 0 3
66654: PPUSH
66655: CALL_OW 250
66659: STR
66660: PUSH
66661: LD_STRING , 
66663: STR
66664: PUSH
66665: LD_VAR 0 3
66669: PPUSH
66670: CALL_OW 251
66674: STR
66675: PUSH
66676: LD_STRING , 
66678: STR
66679: PUSH
66680: LD_VAR 0 3
66684: PPUSH
66685: CALL_OW 254
66689: STR
66690: PUSH
66691: LD_STRING , 
66693: STR
66694: PUSH
66695: LD_VAR 0 3
66699: PPUSH
66700: LD_INT 1
66702: PPUSH
66703: CALL_OW 268
66707: STR
66708: PUSH
66709: LD_STRING , 
66711: STR
66712: PUSH
66713: LD_VAR 0 3
66717: PPUSH
66718: LD_INT 2
66720: PPUSH
66721: CALL_OW 268
66725: STR
66726: PUSH
66727: LD_STRING ],
66729: STR
66730: PPUSH
66731: CALL_OW 561
// end ;
66735: GO 66629
66737: POP
66738: POP
// AddToLog ( ]; ) ;
66739: LD_STRING ];
66741: PPUSH
66742: CALL_OW 561
// end ;
66746: LD_VAR 0 2
66750: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66751: LD_INT 0
66753: PPUSH
66754: PPUSH
66755: PPUSH
66756: PPUSH
66757: PPUSH
// if not area or not rate or not max then
66758: LD_VAR 0 1
66762: NOT
66763: PUSH
66764: LD_VAR 0 2
66768: NOT
66769: OR
66770: PUSH
66771: LD_VAR 0 4
66775: NOT
66776: OR
66777: IFFALSE 66781
// exit ;
66779: GO 66970
// while 1 do
66781: LD_INT 1
66783: IFFALSE 66970
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66785: LD_ADDR_VAR 0 9
66789: PUSH
66790: LD_VAR 0 1
66794: PPUSH
66795: LD_INT 1
66797: PPUSH
66798: CALL_OW 287
66802: PUSH
66803: LD_INT 10
66805: MUL
66806: ST_TO_ADDR
// r := rate / 10 ;
66807: LD_ADDR_VAR 0 7
66811: PUSH
66812: LD_VAR 0 2
66816: PUSH
66817: LD_INT 10
66819: DIVREAL
66820: ST_TO_ADDR
// time := 1 1$00 ;
66821: LD_ADDR_VAR 0 8
66825: PUSH
66826: LD_INT 2100
66828: ST_TO_ADDR
// if amount < min then
66829: LD_VAR 0 9
66833: PUSH
66834: LD_VAR 0 3
66838: LESS
66839: IFFALSE 66857
// r := r * 2 else
66841: LD_ADDR_VAR 0 7
66845: PUSH
66846: LD_VAR 0 7
66850: PUSH
66851: LD_INT 2
66853: MUL
66854: ST_TO_ADDR
66855: GO 66883
// if amount > max then
66857: LD_VAR 0 9
66861: PUSH
66862: LD_VAR 0 4
66866: GREATER
66867: IFFALSE 66883
// r := r / 2 ;
66869: LD_ADDR_VAR 0 7
66873: PUSH
66874: LD_VAR 0 7
66878: PUSH
66879: LD_INT 2
66881: DIVREAL
66882: ST_TO_ADDR
// time := time / r ;
66883: LD_ADDR_VAR 0 8
66887: PUSH
66888: LD_VAR 0 8
66892: PUSH
66893: LD_VAR 0 7
66897: DIVREAL
66898: ST_TO_ADDR
// if time < 0 then
66899: LD_VAR 0 8
66903: PUSH
66904: LD_INT 0
66906: LESS
66907: IFFALSE 66924
// time := time * - 1 ;
66909: LD_ADDR_VAR 0 8
66913: PUSH
66914: LD_VAR 0 8
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: MUL
66923: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66924: LD_VAR 0 8
66928: PUSH
66929: LD_INT 35
66931: PPUSH
66932: LD_INT 875
66934: PPUSH
66935: CALL_OW 12
66939: PLUS
66940: PPUSH
66941: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66945: LD_INT 1
66947: PPUSH
66948: LD_INT 5
66950: PPUSH
66951: CALL_OW 12
66955: PPUSH
66956: LD_VAR 0 1
66960: PPUSH
66961: LD_INT 1
66963: PPUSH
66964: CALL_OW 55
// end ;
66968: GO 66781
// end ;
66970: LD_VAR 0 5
66974: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66975: LD_INT 0
66977: PPUSH
66978: PPUSH
66979: PPUSH
66980: PPUSH
66981: PPUSH
66982: PPUSH
66983: PPUSH
66984: PPUSH
// if not turrets or not factories then
66985: LD_VAR 0 1
66989: NOT
66990: PUSH
66991: LD_VAR 0 2
66995: NOT
66996: OR
66997: IFFALSE 67001
// exit ;
66999: GO 67308
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67001: LD_ADDR_VAR 0 10
67005: PUSH
67006: LD_INT 5
67008: PUSH
67009: LD_INT 6
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 2
67018: PUSH
67019: LD_INT 4
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: LD_INT 5
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 24
67043: PUSH
67044: LD_INT 25
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 23
67053: PUSH
67054: LD_INT 27
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 42
67067: PUSH
67068: LD_INT 43
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 44
67077: PUSH
67078: LD_INT 46
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 45
67087: PUSH
67088: LD_INT 47
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// result := [ ] ;
67105: LD_ADDR_VAR 0 3
67109: PUSH
67110: EMPTY
67111: ST_TO_ADDR
// for i in turrets do
67112: LD_ADDR_VAR 0 4
67116: PUSH
67117: LD_VAR 0 1
67121: PUSH
67122: FOR_IN
67123: IFFALSE 67306
// begin nat := GetNation ( i ) ;
67125: LD_ADDR_VAR 0 7
67129: PUSH
67130: LD_VAR 0 4
67134: PPUSH
67135: CALL_OW 248
67139: ST_TO_ADDR
// weapon := 0 ;
67140: LD_ADDR_VAR 0 8
67144: PUSH
67145: LD_INT 0
67147: ST_TO_ADDR
// if not nat then
67148: LD_VAR 0 7
67152: NOT
67153: IFFALSE 67157
// continue ;
67155: GO 67122
// for j in list [ nat ] do
67157: LD_ADDR_VAR 0 5
67161: PUSH
67162: LD_VAR 0 10
67166: PUSH
67167: LD_VAR 0 7
67171: ARRAY
67172: PUSH
67173: FOR_IN
67174: IFFALSE 67215
// if GetBWeapon ( i ) = j [ 1 ] then
67176: LD_VAR 0 4
67180: PPUSH
67181: CALL_OW 269
67185: PUSH
67186: LD_VAR 0 5
67190: PUSH
67191: LD_INT 1
67193: ARRAY
67194: EQUAL
67195: IFFALSE 67213
// begin weapon := j [ 2 ] ;
67197: LD_ADDR_VAR 0 8
67201: PUSH
67202: LD_VAR 0 5
67206: PUSH
67207: LD_INT 2
67209: ARRAY
67210: ST_TO_ADDR
// break ;
67211: GO 67215
// end ;
67213: GO 67173
67215: POP
67216: POP
// if not weapon then
67217: LD_VAR 0 8
67221: NOT
67222: IFFALSE 67226
// continue ;
67224: GO 67122
// for k in factories do
67226: LD_ADDR_VAR 0 6
67230: PUSH
67231: LD_VAR 0 2
67235: PUSH
67236: FOR_IN
67237: IFFALSE 67302
// begin weapons := AvailableWeaponList ( k ) ;
67239: LD_ADDR_VAR 0 9
67243: PUSH
67244: LD_VAR 0 6
67248: PPUSH
67249: CALL_OW 478
67253: ST_TO_ADDR
// if not weapons then
67254: LD_VAR 0 9
67258: NOT
67259: IFFALSE 67263
// continue ;
67261: GO 67236
// if weapon in weapons then
67263: LD_VAR 0 8
67267: PUSH
67268: LD_VAR 0 9
67272: IN
67273: IFFALSE 67300
// begin result := [ i , weapon ] ;
67275: LD_ADDR_VAR 0 3
67279: PUSH
67280: LD_VAR 0 4
67284: PUSH
67285: LD_VAR 0 8
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// exit ;
67294: POP
67295: POP
67296: POP
67297: POP
67298: GO 67308
// end ; end ;
67300: GO 67236
67302: POP
67303: POP
// end ;
67304: GO 67122
67306: POP
67307: POP
// end ;
67308: LD_VAR 0 3
67312: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67313: LD_INT 0
67315: PPUSH
// if not side or side > 8 then
67316: LD_VAR 0 3
67320: NOT
67321: PUSH
67322: LD_VAR 0 3
67326: PUSH
67327: LD_INT 8
67329: GREATER
67330: OR
67331: IFFALSE 67335
// exit ;
67333: GO 67394
// if not range then
67335: LD_VAR 0 4
67339: NOT
67340: IFFALSE 67351
// range := - 12 ;
67342: LD_ADDR_VAR 0 4
67346: PUSH
67347: LD_INT 12
67349: NEG
67350: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67351: LD_VAR 0 1
67355: PPUSH
67356: LD_VAR 0 2
67360: PPUSH
67361: LD_VAR 0 3
67365: PPUSH
67366: LD_VAR 0 4
67370: PPUSH
67371: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67375: LD_VAR 0 1
67379: PPUSH
67380: LD_VAR 0 2
67384: PPUSH
67385: LD_VAR 0 3
67389: PPUSH
67390: CALL_OW 331
// end ;
67394: LD_VAR 0 5
67398: RET
// export function Video ( mode ) ; begin
67399: LD_INT 0
67401: PPUSH
// ingame_video = mode ;
67402: LD_ADDR_OWVAR 52
67406: PUSH
67407: LD_VAR 0 1
67411: ST_TO_ADDR
// interface_hidden = mode ;
67412: LD_ADDR_OWVAR 54
67416: PUSH
67417: LD_VAR 0 1
67421: ST_TO_ADDR
// end ;
67422: LD_VAR 0 2
67426: RET
// export function Join ( array , element ) ; begin
67427: LD_INT 0
67429: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67430: LD_ADDR_VAR 0 3
67434: PUSH
67435: LD_VAR 0 1
67439: PPUSH
67440: LD_VAR 0 1
67444: PUSH
67445: LD_INT 1
67447: PLUS
67448: PPUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: CALL_OW 1
67458: ST_TO_ADDR
// end ;
67459: LD_VAR 0 3
67463: RET
// export function JoinUnion ( array , element ) ; begin
67464: LD_INT 0
67466: PPUSH
// result := array union element ;
67467: LD_ADDR_VAR 0 3
67471: PUSH
67472: LD_VAR 0 1
67476: PUSH
67477: LD_VAR 0 2
67481: UNION
67482: ST_TO_ADDR
// end ;
67483: LD_VAR 0 3
67487: RET
// export function GetBehemoths ( side ) ; begin
67488: LD_INT 0
67490: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67491: LD_ADDR_VAR 0 2
67495: PUSH
67496: LD_INT 22
67498: PUSH
67499: LD_VAR 0 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 31
67510: PUSH
67511: LD_INT 25
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PPUSH
67522: CALL_OW 69
67526: ST_TO_ADDR
// end ;
67527: LD_VAR 0 2
67531: RET
// export function Shuffle ( array ) ; var i , index ; begin
67532: LD_INT 0
67534: PPUSH
67535: PPUSH
67536: PPUSH
// result := [ ] ;
67537: LD_ADDR_VAR 0 2
67541: PUSH
67542: EMPTY
67543: ST_TO_ADDR
// if not array then
67544: LD_VAR 0 1
67548: NOT
67549: IFFALSE 67553
// exit ;
67551: GO 67652
// Randomize ;
67553: CALL_OW 10
// for i = array downto 1 do
67557: LD_ADDR_VAR 0 3
67561: PUSH
67562: DOUBLE
67563: LD_VAR 0 1
67567: INC
67568: ST_TO_ADDR
67569: LD_INT 1
67571: PUSH
67572: FOR_DOWNTO
67573: IFFALSE 67650
// begin index := rand ( 1 , array ) ;
67575: LD_ADDR_VAR 0 4
67579: PUSH
67580: LD_INT 1
67582: PPUSH
67583: LD_VAR 0 1
67587: PPUSH
67588: CALL_OW 12
67592: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67593: LD_ADDR_VAR 0 2
67597: PUSH
67598: LD_VAR 0 2
67602: PPUSH
67603: LD_VAR 0 2
67607: PUSH
67608: LD_INT 1
67610: PLUS
67611: PPUSH
67612: LD_VAR 0 1
67616: PUSH
67617: LD_VAR 0 4
67621: ARRAY
67622: PPUSH
67623: CALL_OW 2
67627: ST_TO_ADDR
// array := Delete ( array , index ) ;
67628: LD_ADDR_VAR 0 1
67632: PUSH
67633: LD_VAR 0 1
67637: PPUSH
67638: LD_VAR 0 4
67642: PPUSH
67643: CALL_OW 3
67647: ST_TO_ADDR
// end ;
67648: GO 67572
67650: POP
67651: POP
// end ;
67652: LD_VAR 0 2
67656: RET
// export function GetBaseMaterials ( base ) ; begin
67657: LD_INT 0
67659: PPUSH
// result := [ 0 , 0 , 0 ] ;
67660: LD_ADDR_VAR 0 2
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// if not base then
67679: LD_VAR 0 1
67683: NOT
67684: IFFALSE 67688
// exit ;
67686: GO 67737
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67688: LD_ADDR_VAR 0 2
67692: PUSH
67693: LD_VAR 0 1
67697: PPUSH
67698: LD_INT 1
67700: PPUSH
67701: CALL_OW 275
67705: PUSH
67706: LD_VAR 0 1
67710: PPUSH
67711: LD_INT 2
67713: PPUSH
67714: CALL_OW 275
67718: PUSH
67719: LD_VAR 0 1
67723: PPUSH
67724: LD_INT 3
67726: PPUSH
67727: CALL_OW 275
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// end ;
67737: LD_VAR 0 2
67741: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67742: LD_INT 0
67744: PPUSH
67745: PPUSH
// result := array ;
67746: LD_ADDR_VAR 0 3
67750: PUSH
67751: LD_VAR 0 1
67755: ST_TO_ADDR
// if size >= result then
67756: LD_VAR 0 2
67760: PUSH
67761: LD_VAR 0 3
67765: GREATEREQUAL
67766: IFFALSE 67770
// exit ;
67768: GO 67820
// if size then
67770: LD_VAR 0 2
67774: IFFALSE 67820
// for i := array downto size do
67776: LD_ADDR_VAR 0 4
67780: PUSH
67781: DOUBLE
67782: LD_VAR 0 1
67786: INC
67787: ST_TO_ADDR
67788: LD_VAR 0 2
67792: PUSH
67793: FOR_DOWNTO
67794: IFFALSE 67818
// result := Delete ( result , result ) ;
67796: LD_ADDR_VAR 0 3
67800: PUSH
67801: LD_VAR 0 3
67805: PPUSH
67806: LD_VAR 0 3
67810: PPUSH
67811: CALL_OW 3
67815: ST_TO_ADDR
67816: GO 67793
67818: POP
67819: POP
// end ;
67820: LD_VAR 0 3
67824: RET
// export function ComExit ( unit ) ; var tmp ; begin
67825: LD_INT 0
67827: PPUSH
67828: PPUSH
// if not IsInUnit ( unit ) then
67829: LD_VAR 0 1
67833: PPUSH
67834: CALL_OW 310
67838: NOT
67839: IFFALSE 67843
// exit ;
67841: GO 67903
// tmp := IsInUnit ( unit ) ;
67843: LD_ADDR_VAR 0 3
67847: PUSH
67848: LD_VAR 0 1
67852: PPUSH
67853: CALL_OW 310
67857: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67858: LD_VAR 0 3
67862: PPUSH
67863: CALL_OW 247
67867: PUSH
67868: LD_INT 2
67870: EQUAL
67871: IFFALSE 67884
// ComExitVehicle ( unit ) else
67873: LD_VAR 0 1
67877: PPUSH
67878: CALL_OW 121
67882: GO 67893
// ComExitBuilding ( unit ) ;
67884: LD_VAR 0 1
67888: PPUSH
67889: CALL_OW 122
// result := tmp ;
67893: LD_ADDR_VAR 0 2
67897: PUSH
67898: LD_VAR 0 3
67902: ST_TO_ADDR
// end ;
67903: LD_VAR 0 2
67907: RET
// export function ComExitAll ( units ) ; var i ; begin
67908: LD_INT 0
67910: PPUSH
67911: PPUSH
// if not units then
67912: LD_VAR 0 1
67916: NOT
67917: IFFALSE 67921
// exit ;
67919: GO 67947
// for i in units do
67921: LD_ADDR_VAR 0 3
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: FOR_IN
67932: IFFALSE 67945
// ComExit ( i ) ;
67934: LD_VAR 0 3
67938: PPUSH
67939: CALL 67825 0 1
67943: GO 67931
67945: POP
67946: POP
// end ;
67947: LD_VAR 0 2
67951: RET
// export function ResetHc ; begin
67952: LD_INT 0
67954: PPUSH
// InitHc ;
67955: CALL_OW 19
// hc_importance := 0 ;
67959: LD_ADDR_OWVAR 32
67963: PUSH
67964: LD_INT 0
67966: ST_TO_ADDR
// end ;
67967: LD_VAR 0 1
67971: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67972: LD_INT 0
67974: PPUSH
67975: PPUSH
67976: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67977: LD_ADDR_VAR 0 6
67981: PUSH
67982: LD_VAR 0 1
67986: PUSH
67987: LD_VAR 0 3
67991: PLUS
67992: PUSH
67993: LD_INT 2
67995: DIV
67996: ST_TO_ADDR
// if _x < 0 then
67997: LD_VAR 0 6
68001: PUSH
68002: LD_INT 0
68004: LESS
68005: IFFALSE 68022
// _x := _x * - 1 ;
68007: LD_ADDR_VAR 0 6
68011: PUSH
68012: LD_VAR 0 6
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: MUL
68021: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68022: LD_ADDR_VAR 0 7
68026: PUSH
68027: LD_VAR 0 2
68031: PUSH
68032: LD_VAR 0 4
68036: PLUS
68037: PUSH
68038: LD_INT 2
68040: DIV
68041: ST_TO_ADDR
// if _y < 0 then
68042: LD_VAR 0 7
68046: PUSH
68047: LD_INT 0
68049: LESS
68050: IFFALSE 68067
// _y := _y * - 1 ;
68052: LD_ADDR_VAR 0 7
68056: PUSH
68057: LD_VAR 0 7
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: MUL
68066: ST_TO_ADDR
// result := [ _x , _y ] ;
68067: LD_ADDR_VAR 0 5
68071: PUSH
68072: LD_VAR 0 6
68076: PUSH
68077: LD_VAR 0 7
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: ST_TO_ADDR
// end ;
68086: LD_VAR 0 5
68090: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
// task := GetTaskList ( unit ) ;
68097: LD_ADDR_VAR 0 7
68101: PUSH
68102: LD_VAR 0 1
68106: PPUSH
68107: CALL_OW 437
68111: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68112: LD_VAR 0 7
68116: NOT
68117: PUSH
68118: LD_VAR 0 1
68122: PPUSH
68123: LD_VAR 0 2
68127: PPUSH
68128: CALL_OW 308
68132: NOT
68133: AND
68134: IFFALSE 68138
// exit ;
68136: GO 68256
// if IsInArea ( unit , area ) then
68138: LD_VAR 0 1
68142: PPUSH
68143: LD_VAR 0 2
68147: PPUSH
68148: CALL_OW 308
68152: IFFALSE 68170
// begin ComMoveToArea ( unit , goAway ) ;
68154: LD_VAR 0 1
68158: PPUSH
68159: LD_VAR 0 3
68163: PPUSH
68164: CALL_OW 113
// exit ;
68168: GO 68256
// end ; if task [ 1 ] [ 1 ] <> M then
68170: LD_VAR 0 7
68174: PUSH
68175: LD_INT 1
68177: ARRAY
68178: PUSH
68179: LD_INT 1
68181: ARRAY
68182: PUSH
68183: LD_STRING M
68185: NONEQUAL
68186: IFFALSE 68190
// exit ;
68188: GO 68256
// x := task [ 1 ] [ 2 ] ;
68190: LD_ADDR_VAR 0 5
68194: PUSH
68195: LD_VAR 0 7
68199: PUSH
68200: LD_INT 1
68202: ARRAY
68203: PUSH
68204: LD_INT 2
68206: ARRAY
68207: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68208: LD_ADDR_VAR 0 6
68212: PUSH
68213: LD_VAR 0 7
68217: PUSH
68218: LD_INT 1
68220: ARRAY
68221: PUSH
68222: LD_INT 3
68224: ARRAY
68225: ST_TO_ADDR
// if InArea ( x , y , area ) then
68226: LD_VAR 0 5
68230: PPUSH
68231: LD_VAR 0 6
68235: PPUSH
68236: LD_VAR 0 2
68240: PPUSH
68241: CALL_OW 309
68245: IFFALSE 68256
// ComStop ( unit ) ;
68247: LD_VAR 0 1
68251: PPUSH
68252: CALL_OW 141
// end ;
68256: LD_VAR 0 4
68260: RET
// export function Abs ( value ) ; begin
68261: LD_INT 0
68263: PPUSH
// result := value ;
68264: LD_ADDR_VAR 0 2
68268: PUSH
68269: LD_VAR 0 1
68273: ST_TO_ADDR
// if value < 0 then
68274: LD_VAR 0 1
68278: PUSH
68279: LD_INT 0
68281: LESS
68282: IFFALSE 68299
// result := value * - 1 ;
68284: LD_ADDR_VAR 0 2
68288: PUSH
68289: LD_VAR 0 1
68293: PUSH
68294: LD_INT 1
68296: NEG
68297: MUL
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 2
68303: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68304: LD_INT 0
68306: PPUSH
68307: PPUSH
68308: PPUSH
68309: PPUSH
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
// if not unit or not building then
68314: LD_VAR 0 1
68318: NOT
68319: PUSH
68320: LD_VAR 0 2
68324: NOT
68325: OR
68326: IFFALSE 68330
// exit ;
68328: GO 68556
// x := GetX ( building ) ;
68330: LD_ADDR_VAR 0 4
68334: PUSH
68335: LD_VAR 0 2
68339: PPUSH
68340: CALL_OW 250
68344: ST_TO_ADDR
// y := GetY ( building ) ;
68345: LD_ADDR_VAR 0 6
68349: PUSH
68350: LD_VAR 0 2
68354: PPUSH
68355: CALL_OW 251
68359: ST_TO_ADDR
// d := GetDir ( building ) ;
68360: LD_ADDR_VAR 0 8
68364: PUSH
68365: LD_VAR 0 2
68369: PPUSH
68370: CALL_OW 254
68374: ST_TO_ADDR
// r := 4 ;
68375: LD_ADDR_VAR 0 9
68379: PUSH
68380: LD_INT 4
68382: ST_TO_ADDR
// for i := 1 to 5 do
68383: LD_ADDR_VAR 0 10
68387: PUSH
68388: DOUBLE
68389: LD_INT 1
68391: DEC
68392: ST_TO_ADDR
68393: LD_INT 5
68395: PUSH
68396: FOR_TO
68397: IFFALSE 68554
// begin _x := ShiftX ( x , d , r + i ) ;
68399: LD_ADDR_VAR 0 5
68403: PUSH
68404: LD_VAR 0 4
68408: PPUSH
68409: LD_VAR 0 8
68413: PPUSH
68414: LD_VAR 0 9
68418: PUSH
68419: LD_VAR 0 10
68423: PLUS
68424: PPUSH
68425: CALL_OW 272
68429: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68430: LD_ADDR_VAR 0 7
68434: PUSH
68435: LD_VAR 0 6
68439: PPUSH
68440: LD_VAR 0 8
68444: PPUSH
68445: LD_VAR 0 9
68449: PUSH
68450: LD_VAR 0 10
68454: PLUS
68455: PPUSH
68456: CALL_OW 273
68460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68461: LD_VAR 0 5
68465: PPUSH
68466: LD_VAR 0 7
68470: PPUSH
68471: CALL_OW 488
68475: PUSH
68476: LD_VAR 0 5
68480: PPUSH
68481: LD_VAR 0 7
68485: PPUSH
68486: CALL_OW 428
68490: PPUSH
68491: CALL_OW 247
68495: PUSH
68496: LD_INT 3
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: IN
68506: NOT
68507: AND
68508: IFFALSE 68552
// begin ComMoveXY ( unit , _x , _y ) ;
68510: LD_VAR 0 1
68514: PPUSH
68515: LD_VAR 0 5
68519: PPUSH
68520: LD_VAR 0 7
68524: PPUSH
68525: CALL_OW 111
// result := [ _x , _y ] ;
68529: LD_ADDR_VAR 0 3
68533: PUSH
68534: LD_VAR 0 5
68538: PUSH
68539: LD_VAR 0 7
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: ST_TO_ADDR
// exit ;
68548: POP
68549: POP
68550: GO 68556
// end ; end ;
68552: GO 68396
68554: POP
68555: POP
// end ;
68556: LD_VAR 0 3
68560: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68561: LD_INT 0
68563: PPUSH
68564: PPUSH
68565: PPUSH
// result := 0 ;
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_INT 0
68573: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 0
68581: LESS
68582: PUSH
68583: LD_VAR 0 1
68587: PUSH
68588: LD_INT 8
68590: GREATER
68591: OR
68592: PUSH
68593: LD_VAR 0 2
68597: PUSH
68598: LD_INT 0
68600: LESS
68601: OR
68602: PUSH
68603: LD_VAR 0 2
68607: PUSH
68608: LD_INT 8
68610: GREATER
68611: OR
68612: IFFALSE 68616
// exit ;
68614: GO 68691
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68616: LD_ADDR_VAR 0 4
68620: PUSH
68621: LD_INT 22
68623: PUSH
68624: LD_VAR 0 2
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PPUSH
68633: CALL_OW 69
68637: PUSH
68638: FOR_IN
68639: IFFALSE 68689
// begin un := UnitShoot ( i ) ;
68641: LD_ADDR_VAR 0 5
68645: PUSH
68646: LD_VAR 0 4
68650: PPUSH
68651: CALL_OW 504
68655: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68656: LD_VAR 0 5
68660: PPUSH
68661: CALL_OW 255
68665: PUSH
68666: LD_VAR 0 1
68670: EQUAL
68671: IFFALSE 68687
// begin result := un ;
68673: LD_ADDR_VAR 0 3
68677: PUSH
68678: LD_VAR 0 5
68682: ST_TO_ADDR
// exit ;
68683: POP
68684: POP
68685: GO 68691
// end ; end ;
68687: GO 68638
68689: POP
68690: POP
// end ;
68691: LD_VAR 0 3
68695: RET
// export function GetCargoBay ( units ) ; begin
68696: LD_INT 0
68698: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68699: LD_ADDR_VAR 0 2
68703: PUSH
68704: LD_VAR 0 1
68708: PPUSH
68709: LD_INT 2
68711: PUSH
68712: LD_INT 34
68714: PUSH
68715: LD_INT 12
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 34
68724: PUSH
68725: LD_INT 51
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 34
68734: PUSH
68735: LD_INT 32
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 34
68744: PUSH
68745: LD_EXP 98
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: PPUSH
68761: CALL_OW 72
68765: ST_TO_ADDR
// end ;
68766: LD_VAR 0 2
68770: RET
// export function Negate ( value ) ; begin
68771: LD_INT 0
68773: PPUSH
// result := not value ;
68774: LD_ADDR_VAR 0 2
68778: PUSH
68779: LD_VAR 0 1
68783: NOT
68784: ST_TO_ADDR
// end ;
68785: LD_VAR 0 2
68789: RET
// export function Inc ( value ) ; begin
68790: LD_INT 0
68792: PPUSH
// result := value + 1 ;
68793: LD_ADDR_VAR 0 2
68797: PUSH
68798: LD_VAR 0 1
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: ST_TO_ADDR
// end ;
68807: LD_VAR 0 2
68811: RET
// export function Dec ( value ) ; begin
68812: LD_INT 0
68814: PPUSH
// result := value - 1 ;
68815: LD_ADDR_VAR 0 2
68819: PUSH
68820: LD_VAR 0 1
68824: PUSH
68825: LD_INT 1
68827: MINUS
68828: ST_TO_ADDR
// end ;
68829: LD_VAR 0 2
68833: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68834: LD_INT 0
68836: PPUSH
68837: PPUSH
68838: PPUSH
68839: PPUSH
68840: PPUSH
68841: PPUSH
68842: PPUSH
68843: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68844: LD_VAR 0 1
68848: PPUSH
68849: LD_VAR 0 2
68853: PPUSH
68854: CALL_OW 488
68858: NOT
68859: PUSH
68860: LD_VAR 0 3
68864: PPUSH
68865: LD_VAR 0 4
68869: PPUSH
68870: CALL_OW 488
68874: NOT
68875: OR
68876: IFFALSE 68889
// begin result := - 1 ;
68878: LD_ADDR_VAR 0 5
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: ST_TO_ADDR
// exit ;
68887: GO 69124
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68889: LD_ADDR_VAR 0 12
68893: PUSH
68894: LD_VAR 0 1
68898: PPUSH
68899: LD_VAR 0 2
68903: PPUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: LD_VAR 0 4
68913: PPUSH
68914: CALL 67972 0 4
68918: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68919: LD_ADDR_VAR 0 11
68923: PUSH
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_VAR 0 2
68933: PPUSH
68934: LD_VAR 0 12
68938: PUSH
68939: LD_INT 1
68941: ARRAY
68942: PPUSH
68943: LD_VAR 0 12
68947: PUSH
68948: LD_INT 2
68950: ARRAY
68951: PPUSH
68952: CALL_OW 298
68956: ST_TO_ADDR
// distance := 9999 ;
68957: LD_ADDR_VAR 0 10
68961: PUSH
68962: LD_INT 9999
68964: ST_TO_ADDR
// for i := 0 to 5 do
68965: LD_ADDR_VAR 0 6
68969: PUSH
68970: DOUBLE
68971: LD_INT 0
68973: DEC
68974: ST_TO_ADDR
68975: LD_INT 5
68977: PUSH
68978: FOR_TO
68979: IFFALSE 69122
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68981: LD_ADDR_VAR 0 7
68985: PUSH
68986: LD_VAR 0 1
68990: PPUSH
68991: LD_VAR 0 6
68995: PPUSH
68996: LD_VAR 0 11
69000: PPUSH
69001: CALL_OW 272
69005: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69006: LD_ADDR_VAR 0 8
69010: PUSH
69011: LD_VAR 0 2
69015: PPUSH
69016: LD_VAR 0 6
69020: PPUSH
69021: LD_VAR 0 11
69025: PPUSH
69026: CALL_OW 273
69030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69031: LD_VAR 0 7
69035: PPUSH
69036: LD_VAR 0 8
69040: PPUSH
69041: CALL_OW 488
69045: NOT
69046: IFFALSE 69050
// continue ;
69048: GO 68978
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69050: LD_ADDR_VAR 0 9
69054: PUSH
69055: LD_VAR 0 12
69059: PUSH
69060: LD_INT 1
69062: ARRAY
69063: PPUSH
69064: LD_VAR 0 12
69068: PUSH
69069: LD_INT 2
69071: ARRAY
69072: PPUSH
69073: LD_VAR 0 7
69077: PPUSH
69078: LD_VAR 0 8
69082: PPUSH
69083: CALL_OW 298
69087: ST_TO_ADDR
// if tmp < distance then
69088: LD_VAR 0 9
69092: PUSH
69093: LD_VAR 0 10
69097: LESS
69098: IFFALSE 69120
// begin result := i ;
69100: LD_ADDR_VAR 0 5
69104: PUSH
69105: LD_VAR 0 6
69109: ST_TO_ADDR
// distance := tmp ;
69110: LD_ADDR_VAR 0 10
69114: PUSH
69115: LD_VAR 0 9
69119: ST_TO_ADDR
// end ; end ;
69120: GO 68978
69122: POP
69123: POP
// end ;
69124: LD_VAR 0 5
69128: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69129: LD_INT 0
69131: PPUSH
69132: PPUSH
// if not driver or not IsInUnit ( driver ) then
69133: LD_VAR 0 1
69137: NOT
69138: PUSH
69139: LD_VAR 0 1
69143: PPUSH
69144: CALL_OW 310
69148: NOT
69149: OR
69150: IFFALSE 69154
// exit ;
69152: GO 69244
// vehicle := IsInUnit ( driver ) ;
69154: LD_ADDR_VAR 0 3
69158: PUSH
69159: LD_VAR 0 1
69163: PPUSH
69164: CALL_OW 310
69168: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69169: LD_VAR 0 1
69173: PPUSH
69174: LD_STRING \
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: LD_INT 0
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: PUSH
69204: LD_STRING E
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: LD_VAR 0 3
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PPUSH
69240: CALL_OW 446
// end ;
69244: LD_VAR 0 2
69248: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69249: LD_INT 0
69251: PPUSH
69252: PPUSH
// if not driver or not IsInUnit ( driver ) then
69253: LD_VAR 0 1
69257: NOT
69258: PUSH
69259: LD_VAR 0 1
69263: PPUSH
69264: CALL_OW 310
69268: NOT
69269: OR
69270: IFFALSE 69274
// exit ;
69272: GO 69364
// vehicle := IsInUnit ( driver ) ;
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_VAR 0 1
69283: PPUSH
69284: CALL_OW 310
69288: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69289: LD_VAR 0 1
69293: PPUSH
69294: LD_STRING \
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: PUSH
69324: LD_STRING E
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_VAR 0 3
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PPUSH
69360: CALL_OW 447
// end ;
69364: LD_VAR 0 2
69368: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
69373: PPUSH
// tmp := [ ] ;
69374: LD_ADDR_VAR 0 5
69378: PUSH
69379: EMPTY
69380: ST_TO_ADDR
// for i in units do
69381: LD_ADDR_VAR 0 4
69385: PUSH
69386: LD_VAR 0 1
69390: PUSH
69391: FOR_IN
69392: IFFALSE 69430
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69394: LD_ADDR_VAR 0 5
69398: PUSH
69399: LD_VAR 0 5
69403: PPUSH
69404: LD_VAR 0 5
69408: PUSH
69409: LD_INT 1
69411: PLUS
69412: PPUSH
69413: LD_VAR 0 4
69417: PPUSH
69418: CALL_OW 256
69422: PPUSH
69423: CALL_OW 2
69427: ST_TO_ADDR
69428: GO 69391
69430: POP
69431: POP
// if not tmp then
69432: LD_VAR 0 5
69436: NOT
69437: IFFALSE 69441
// exit ;
69439: GO 69489
// if asc then
69441: LD_VAR 0 2
69445: IFFALSE 69469
// result := SortListByListAsc ( units , tmp ) else
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_VAR 0 1
69456: PPUSH
69457: LD_VAR 0 5
69461: PPUSH
69462: CALL_OW 76
69466: ST_TO_ADDR
69467: GO 69489
// result := SortListByListDesc ( units , tmp ) ;
69469: LD_ADDR_VAR 0 3
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 5
69483: PPUSH
69484: CALL_OW 77
69488: ST_TO_ADDR
// end ;
69489: LD_VAR 0 3
69493: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69494: LD_INT 0
69496: PPUSH
69497: PPUSH
// task := GetTaskList ( mech ) ;
69498: LD_ADDR_VAR 0 4
69502: PUSH
69503: LD_VAR 0 1
69507: PPUSH
69508: CALL_OW 437
69512: ST_TO_ADDR
// if not task then
69513: LD_VAR 0 4
69517: NOT
69518: IFFALSE 69522
// exit ;
69520: GO 69564
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69522: LD_ADDR_VAR 0 3
69526: PUSH
69527: LD_VAR 0 4
69531: PUSH
69532: LD_INT 1
69534: ARRAY
69535: PUSH
69536: LD_INT 1
69538: ARRAY
69539: PUSH
69540: LD_STRING r
69542: EQUAL
69543: PUSH
69544: LD_VAR 0 4
69548: PUSH
69549: LD_INT 1
69551: ARRAY
69552: PUSH
69553: LD_INT 4
69555: ARRAY
69556: PUSH
69557: LD_VAR 0 2
69561: EQUAL
69562: AND
69563: ST_TO_ADDR
// end ;
69564: LD_VAR 0 3
69568: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69569: LD_INT 0
69571: PPUSH
// SetDir ( unit , d ) ;
69572: LD_VAR 0 1
69576: PPUSH
69577: LD_VAR 0 4
69581: PPUSH
69582: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69586: LD_VAR 0 1
69590: PPUSH
69591: LD_VAR 0 2
69595: PPUSH
69596: LD_VAR 0 3
69600: PPUSH
69601: LD_VAR 0 5
69605: PPUSH
69606: CALL_OW 48
// end ;
69610: LD_VAR 0 6
69614: RET
// export function ToNaturalNumber ( number ) ; begin
69615: LD_INT 0
69617: PPUSH
// result := number div 1 ;
69618: LD_ADDR_VAR 0 2
69622: PUSH
69623: LD_VAR 0 1
69627: PUSH
69628: LD_INT 1
69630: DIV
69631: ST_TO_ADDR
// if number < 0 then
69632: LD_VAR 0 1
69636: PUSH
69637: LD_INT 0
69639: LESS
69640: IFFALSE 69650
// result := 0 ;
69642: LD_ADDR_VAR 0 2
69646: PUSH
69647: LD_INT 0
69649: ST_TO_ADDR
// end ;
69650: LD_VAR 0 2
69654: RET
// export function SortByClass ( units , class ) ; var un ; begin
69655: LD_INT 0
69657: PPUSH
69658: PPUSH
// if not units or not class then
69659: LD_VAR 0 1
69663: NOT
69664: PUSH
69665: LD_VAR 0 2
69669: NOT
69670: OR
69671: IFFALSE 69675
// exit ;
69673: GO 69770
// result := [ ] ;
69675: LD_ADDR_VAR 0 3
69679: PUSH
69680: EMPTY
69681: ST_TO_ADDR
// for un in units do
69682: LD_ADDR_VAR 0 4
69686: PUSH
69687: LD_VAR 0 1
69691: PUSH
69692: FOR_IN
69693: IFFALSE 69768
// if GetClass ( un ) = class then
69695: LD_VAR 0 4
69699: PPUSH
69700: CALL_OW 257
69704: PUSH
69705: LD_VAR 0 2
69709: EQUAL
69710: IFFALSE 69737
// result := Insert ( result , 1 , un ) else
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_VAR 0 3
69721: PPUSH
69722: LD_INT 1
69724: PPUSH
69725: LD_VAR 0 4
69729: PPUSH
69730: CALL_OW 2
69734: ST_TO_ADDR
69735: GO 69766
// result := Replace ( result , result + 1 , un ) ;
69737: LD_ADDR_VAR 0 3
69741: PUSH
69742: LD_VAR 0 3
69746: PPUSH
69747: LD_VAR 0 3
69751: PUSH
69752: LD_INT 1
69754: PLUS
69755: PPUSH
69756: LD_VAR 0 4
69760: PPUSH
69761: CALL_OW 1
69765: ST_TO_ADDR
69766: GO 69692
69768: POP
69769: POP
// end ;
69770: LD_VAR 0 3
69774: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69775: LD_INT 0
69777: PPUSH
69778: PPUSH
69779: PPUSH
69780: PPUSH
69781: PPUSH
69782: PPUSH
69783: PPUSH
// result := [ ] ;
69784: LD_ADDR_VAR 0 4
69788: PUSH
69789: EMPTY
69790: ST_TO_ADDR
// if x - r < 0 then
69791: LD_VAR 0 1
69795: PUSH
69796: LD_VAR 0 3
69800: MINUS
69801: PUSH
69802: LD_INT 0
69804: LESS
69805: IFFALSE 69817
// min_x := 0 else
69807: LD_ADDR_VAR 0 8
69811: PUSH
69812: LD_INT 0
69814: ST_TO_ADDR
69815: GO 69833
// min_x := x - r ;
69817: LD_ADDR_VAR 0 8
69821: PUSH
69822: LD_VAR 0 1
69826: PUSH
69827: LD_VAR 0 3
69831: MINUS
69832: ST_TO_ADDR
// if y - r < 0 then
69833: LD_VAR 0 2
69837: PUSH
69838: LD_VAR 0 3
69842: MINUS
69843: PUSH
69844: LD_INT 0
69846: LESS
69847: IFFALSE 69859
// min_y := 0 else
69849: LD_ADDR_VAR 0 7
69853: PUSH
69854: LD_INT 0
69856: ST_TO_ADDR
69857: GO 69875
// min_y := y - r ;
69859: LD_ADDR_VAR 0 7
69863: PUSH
69864: LD_VAR 0 2
69868: PUSH
69869: LD_VAR 0 3
69873: MINUS
69874: ST_TO_ADDR
// max_x := x + r ;
69875: LD_ADDR_VAR 0 9
69879: PUSH
69880: LD_VAR 0 1
69884: PUSH
69885: LD_VAR 0 3
69889: PLUS
69890: ST_TO_ADDR
// max_y := y + r ;
69891: LD_ADDR_VAR 0 10
69895: PUSH
69896: LD_VAR 0 2
69900: PUSH
69901: LD_VAR 0 3
69905: PLUS
69906: ST_TO_ADDR
// for _x = min_x to max_x do
69907: LD_ADDR_VAR 0 5
69911: PUSH
69912: DOUBLE
69913: LD_VAR 0 8
69917: DEC
69918: ST_TO_ADDR
69919: LD_VAR 0 9
69923: PUSH
69924: FOR_TO
69925: IFFALSE 70026
// for _y = min_y to max_y do
69927: LD_ADDR_VAR 0 6
69931: PUSH
69932: DOUBLE
69933: LD_VAR 0 7
69937: DEC
69938: ST_TO_ADDR
69939: LD_VAR 0 10
69943: PUSH
69944: FOR_TO
69945: IFFALSE 70022
// begin if not ValidHex ( _x , _y ) then
69947: LD_VAR 0 5
69951: PPUSH
69952: LD_VAR 0 6
69956: PPUSH
69957: CALL_OW 488
69961: NOT
69962: IFFALSE 69966
// continue ;
69964: GO 69944
// if GetResourceTypeXY ( _x , _y ) then
69966: LD_VAR 0 5
69970: PPUSH
69971: LD_VAR 0 6
69975: PPUSH
69976: CALL_OW 283
69980: IFFALSE 70020
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69982: LD_ADDR_VAR 0 4
69986: PUSH
69987: LD_VAR 0 4
69991: PPUSH
69992: LD_VAR 0 4
69996: PUSH
69997: LD_INT 1
69999: PLUS
70000: PPUSH
70001: LD_VAR 0 5
70005: PUSH
70006: LD_VAR 0 6
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PPUSH
70015: CALL_OW 1
70019: ST_TO_ADDR
// end ;
70020: GO 69944
70022: POP
70023: POP
70024: GO 69924
70026: POP
70027: POP
// end ;
70028: LD_VAR 0 4
70032: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70033: LD_INT 0
70035: PPUSH
70036: PPUSH
70037: PPUSH
70038: PPUSH
70039: PPUSH
70040: PPUSH
70041: PPUSH
70042: PPUSH
// if not units then
70043: LD_VAR 0 1
70047: NOT
70048: IFFALSE 70052
// exit ;
70050: GO 70578
// result := UnitFilter ( units , [ f_ok ] ) ;
70052: LD_ADDR_VAR 0 3
70056: PUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: LD_INT 50
70064: PUSH
70065: EMPTY
70066: LIST
70067: PPUSH
70068: CALL_OW 72
70072: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70073: LD_ADDR_VAR 0 8
70077: PUSH
70078: LD_VAR 0 1
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PPUSH
70087: CALL_OW 255
70091: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70092: LD_ADDR_VAR 0 10
70096: PUSH
70097: LD_INT 29
70099: PUSH
70100: LD_EXP 101
70104: PUSH
70105: LD_INT 49
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: ST_TO_ADDR
// if not result then
70113: LD_VAR 0 3
70117: NOT
70118: IFFALSE 70122
// exit ;
70120: GO 70578
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70122: LD_ADDR_VAR 0 5
70126: PUSH
70127: LD_INT 81
70129: PUSH
70130: LD_VAR 0 8
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PPUSH
70139: CALL_OW 69
70143: ST_TO_ADDR
// for i in result do
70144: LD_ADDR_VAR 0 4
70148: PUSH
70149: LD_VAR 0 3
70153: PUSH
70154: FOR_IN
70155: IFFALSE 70576
// begin tag := GetTag ( i ) + 1 ;
70157: LD_ADDR_VAR 0 9
70161: PUSH
70162: LD_VAR 0 4
70166: PPUSH
70167: CALL_OW 110
70171: PUSH
70172: LD_INT 1
70174: PLUS
70175: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70176: LD_ADDR_VAR 0 7
70180: PUSH
70181: LD_VAR 0 4
70185: PPUSH
70186: CALL_OW 250
70190: PPUSH
70191: LD_VAR 0 4
70195: PPUSH
70196: CALL_OW 251
70200: PPUSH
70201: LD_INT 6
70203: PPUSH
70204: CALL 69775 0 3
70208: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70209: LD_VAR 0 4
70213: PPUSH
70214: CALL_OW 247
70218: PUSH
70219: LD_INT 2
70221: EQUAL
70222: PUSH
70223: LD_VAR 0 7
70227: AND
70228: PUSH
70229: LD_VAR 0 4
70233: PPUSH
70234: CALL_OW 264
70238: PUSH
70239: LD_VAR 0 10
70243: IN
70244: NOT
70245: AND
70246: IFFALSE 70285
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70248: LD_VAR 0 4
70252: PPUSH
70253: LD_VAR 0 7
70257: PUSH
70258: LD_INT 1
70260: ARRAY
70261: PUSH
70262: LD_INT 1
70264: ARRAY
70265: PPUSH
70266: LD_VAR 0 7
70270: PUSH
70271: LD_INT 1
70273: ARRAY
70274: PUSH
70275: LD_INT 2
70277: ARRAY
70278: PPUSH
70279: CALL_OW 116
70283: GO 70574
// if path > tag then
70285: LD_VAR 0 2
70289: PUSH
70290: LD_VAR 0 9
70294: GREATER
70295: IFFALSE 70503
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70297: LD_ADDR_VAR 0 6
70301: PUSH
70302: LD_VAR 0 5
70306: PPUSH
70307: LD_INT 91
70309: PUSH
70310: LD_VAR 0 4
70314: PUSH
70315: LD_INT 8
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: PPUSH
70323: CALL_OW 72
70327: ST_TO_ADDR
// if nearEnemy then
70328: LD_VAR 0 6
70332: IFFALSE 70401
// begin if GetWeapon ( i ) = ru_time_lapser then
70334: LD_VAR 0 4
70338: PPUSH
70339: CALL_OW 264
70343: PUSH
70344: LD_INT 49
70346: EQUAL
70347: IFFALSE 70375
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70349: LD_VAR 0 4
70353: PPUSH
70354: LD_VAR 0 6
70358: PPUSH
70359: LD_VAR 0 4
70363: PPUSH
70364: CALL_OW 74
70368: PPUSH
70369: CALL_OW 112
70373: GO 70399
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70375: LD_VAR 0 4
70379: PPUSH
70380: LD_VAR 0 6
70384: PPUSH
70385: LD_VAR 0 4
70389: PPUSH
70390: CALL_OW 74
70394: PPUSH
70395: CALL_OW 115
// end else
70399: GO 70501
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70401: LD_VAR 0 4
70405: PPUSH
70406: LD_VAR 0 2
70410: PUSH
70411: LD_VAR 0 9
70415: ARRAY
70416: PUSH
70417: LD_INT 1
70419: ARRAY
70420: PPUSH
70421: LD_VAR 0 2
70425: PUSH
70426: LD_VAR 0 9
70430: ARRAY
70431: PUSH
70432: LD_INT 2
70434: ARRAY
70435: PPUSH
70436: CALL_OW 297
70440: PUSH
70441: LD_INT 6
70443: GREATER
70444: IFFALSE 70487
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70446: LD_VAR 0 4
70450: PPUSH
70451: LD_VAR 0 2
70455: PUSH
70456: LD_VAR 0 9
70460: ARRAY
70461: PUSH
70462: LD_INT 1
70464: ARRAY
70465: PPUSH
70466: LD_VAR 0 2
70470: PUSH
70471: LD_VAR 0 9
70475: ARRAY
70476: PUSH
70477: LD_INT 2
70479: ARRAY
70480: PPUSH
70481: CALL_OW 114
70485: GO 70501
// SetTag ( i , tag ) ;
70487: LD_VAR 0 4
70491: PPUSH
70492: LD_VAR 0 9
70496: PPUSH
70497: CALL_OW 109
// end else
70501: GO 70574
// if enemy then
70503: LD_VAR 0 5
70507: IFFALSE 70574
// begin if GetWeapon ( i ) = ru_time_lapser then
70509: LD_VAR 0 4
70513: PPUSH
70514: CALL_OW 264
70518: PUSH
70519: LD_INT 49
70521: EQUAL
70522: IFFALSE 70550
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70524: LD_VAR 0 4
70528: PPUSH
70529: LD_VAR 0 5
70533: PPUSH
70534: LD_VAR 0 4
70538: PPUSH
70539: CALL_OW 74
70543: PPUSH
70544: CALL_OW 112
70548: GO 70574
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70550: LD_VAR 0 4
70554: PPUSH
70555: LD_VAR 0 5
70559: PPUSH
70560: LD_VAR 0 4
70564: PPUSH
70565: CALL_OW 74
70569: PPUSH
70570: CALL_OW 115
// end ; end ;
70574: GO 70154
70576: POP
70577: POP
// end ;
70578: LD_VAR 0 3
70582: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70583: LD_INT 0
70585: PPUSH
70586: PPUSH
70587: PPUSH
// if not unit or IsInUnit ( unit ) then
70588: LD_VAR 0 1
70592: NOT
70593: PUSH
70594: LD_VAR 0 1
70598: PPUSH
70599: CALL_OW 310
70603: OR
70604: IFFALSE 70608
// exit ;
70606: GO 70699
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70608: LD_ADDR_VAR 0 4
70612: PUSH
70613: LD_VAR 0 1
70617: PPUSH
70618: CALL_OW 250
70622: PPUSH
70623: LD_VAR 0 2
70627: PPUSH
70628: LD_INT 1
70630: PPUSH
70631: CALL_OW 272
70635: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70636: LD_ADDR_VAR 0 5
70640: PUSH
70641: LD_VAR 0 1
70645: PPUSH
70646: CALL_OW 251
70650: PPUSH
70651: LD_VAR 0 2
70655: PPUSH
70656: LD_INT 1
70658: PPUSH
70659: CALL_OW 273
70663: ST_TO_ADDR
// if ValidHex ( x , y ) then
70664: LD_VAR 0 4
70668: PPUSH
70669: LD_VAR 0 5
70673: PPUSH
70674: CALL_OW 488
70678: IFFALSE 70699
// ComTurnXY ( unit , x , y ) ;
70680: LD_VAR 0 1
70684: PPUSH
70685: LD_VAR 0 4
70689: PPUSH
70690: LD_VAR 0 5
70694: PPUSH
70695: CALL_OW 118
// end ;
70699: LD_VAR 0 3
70703: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70704: LD_INT 0
70706: PPUSH
70707: PPUSH
// result := false ;
70708: LD_ADDR_VAR 0 3
70712: PUSH
70713: LD_INT 0
70715: ST_TO_ADDR
// if not units then
70716: LD_VAR 0 2
70720: NOT
70721: IFFALSE 70725
// exit ;
70723: GO 70770
// for i in units do
70725: LD_ADDR_VAR 0 4
70729: PUSH
70730: LD_VAR 0 2
70734: PUSH
70735: FOR_IN
70736: IFFALSE 70768
// if See ( side , i ) then
70738: LD_VAR 0 1
70742: PPUSH
70743: LD_VAR 0 4
70747: PPUSH
70748: CALL_OW 292
70752: IFFALSE 70766
// begin result := true ;
70754: LD_ADDR_VAR 0 3
70758: PUSH
70759: LD_INT 1
70761: ST_TO_ADDR
// exit ;
70762: POP
70763: POP
70764: GO 70770
// end ;
70766: GO 70735
70768: POP
70769: POP
// end ;
70770: LD_VAR 0 3
70774: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70775: LD_INT 0
70777: PPUSH
70778: PPUSH
70779: PPUSH
70780: PPUSH
// if not unit or not points then
70781: LD_VAR 0 1
70785: NOT
70786: PUSH
70787: LD_VAR 0 2
70791: NOT
70792: OR
70793: IFFALSE 70797
// exit ;
70795: GO 70887
// dist := 99999 ;
70797: LD_ADDR_VAR 0 5
70801: PUSH
70802: LD_INT 99999
70804: ST_TO_ADDR
// for i in points do
70805: LD_ADDR_VAR 0 4
70809: PUSH
70810: LD_VAR 0 2
70814: PUSH
70815: FOR_IN
70816: IFFALSE 70885
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70818: LD_ADDR_VAR 0 6
70822: PUSH
70823: LD_VAR 0 1
70827: PPUSH
70828: LD_VAR 0 4
70832: PUSH
70833: LD_INT 1
70835: ARRAY
70836: PPUSH
70837: LD_VAR 0 4
70841: PUSH
70842: LD_INT 2
70844: ARRAY
70845: PPUSH
70846: CALL_OW 297
70850: ST_TO_ADDR
// if tmpDist < dist then
70851: LD_VAR 0 6
70855: PUSH
70856: LD_VAR 0 5
70860: LESS
70861: IFFALSE 70883
// begin result := i ;
70863: LD_ADDR_VAR 0 3
70867: PUSH
70868: LD_VAR 0 4
70872: ST_TO_ADDR
// dist := tmpDist ;
70873: LD_ADDR_VAR 0 5
70877: PUSH
70878: LD_VAR 0 6
70882: ST_TO_ADDR
// end ; end ;
70883: GO 70815
70885: POP
70886: POP
// end ;
70887: LD_VAR 0 3
70891: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70892: LD_INT 0
70894: PPUSH
// uc_side := side ;
70895: LD_ADDR_OWVAR 20
70899: PUSH
70900: LD_VAR 0 1
70904: ST_TO_ADDR
// uc_nation := 3 ;
70905: LD_ADDR_OWVAR 21
70909: PUSH
70910: LD_INT 3
70912: ST_TO_ADDR
// vc_chassis := 25 ;
70913: LD_ADDR_OWVAR 37
70917: PUSH
70918: LD_INT 25
70920: ST_TO_ADDR
// vc_engine := engine_siberite ;
70921: LD_ADDR_OWVAR 39
70925: PUSH
70926: LD_INT 3
70928: ST_TO_ADDR
// vc_control := control_computer ;
70929: LD_ADDR_OWVAR 38
70933: PUSH
70934: LD_INT 3
70936: ST_TO_ADDR
// vc_weapon := 59 ;
70937: LD_ADDR_OWVAR 40
70941: PUSH
70942: LD_INT 59
70944: ST_TO_ADDR
// result := CreateVehicle ;
70945: LD_ADDR_VAR 0 5
70949: PUSH
70950: CALL_OW 45
70954: ST_TO_ADDR
// SetDir ( result , d ) ;
70955: LD_VAR 0 5
70959: PPUSH
70960: LD_VAR 0 4
70964: PPUSH
70965: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70969: LD_VAR 0 5
70973: PPUSH
70974: LD_VAR 0 2
70978: PPUSH
70979: LD_VAR 0 3
70983: PPUSH
70984: LD_INT 0
70986: PPUSH
70987: CALL_OW 48
// end ;
70991: LD_VAR 0 5
70995: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70996: LD_INT 0
70998: PPUSH
70999: PPUSH
71000: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71001: LD_ADDR_VAR 0 2
71005: PUSH
71006: LD_INT 0
71008: PUSH
71009: LD_INT 0
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71024: LD_VAR 0 1
71028: NOT
71029: PUSH
71030: LD_VAR 0 1
71034: PPUSH
71035: CALL_OW 264
71039: PUSH
71040: LD_INT 12
71042: PUSH
71043: LD_INT 51
71045: PUSH
71046: LD_INT 32
71048: PUSH
71049: LD_EXP 98
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: IN
71060: NOT
71061: OR
71062: IFFALSE 71066
// exit ;
71064: GO 71164
// for i := 1 to 3 do
71066: LD_ADDR_VAR 0 3
71070: PUSH
71071: DOUBLE
71072: LD_INT 1
71074: DEC
71075: ST_TO_ADDR
71076: LD_INT 3
71078: PUSH
71079: FOR_TO
71080: IFFALSE 71162
// begin tmp := GetCargo ( cargo , i ) ;
71082: LD_ADDR_VAR 0 4
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: LD_VAR 0 3
71096: PPUSH
71097: CALL_OW 289
71101: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71102: LD_ADDR_VAR 0 2
71106: PUSH
71107: LD_VAR 0 2
71111: PPUSH
71112: LD_VAR 0 3
71116: PPUSH
71117: LD_VAR 0 4
71121: PPUSH
71122: CALL_OW 1
71126: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71127: LD_ADDR_VAR 0 2
71131: PUSH
71132: LD_VAR 0 2
71136: PPUSH
71137: LD_INT 4
71139: PPUSH
71140: LD_VAR 0 2
71144: PUSH
71145: LD_INT 4
71147: ARRAY
71148: PUSH
71149: LD_VAR 0 4
71153: PLUS
71154: PPUSH
71155: CALL_OW 1
71159: ST_TO_ADDR
// end ;
71160: GO 71079
71162: POP
71163: POP
// end ;
71164: LD_VAR 0 2
71168: RET
// export function Length ( array ) ; begin
71169: LD_INT 0
71171: PPUSH
// result := array + 0 ;
71172: LD_ADDR_VAR 0 2
71176: PUSH
71177: LD_VAR 0 1
71181: PUSH
71182: LD_INT 0
71184: PLUS
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 2
71190: RET
// export function PrepareArray ( array ) ; begin
71191: LD_INT 0
71193: PPUSH
// result := array diff 0 ;
71194: LD_ADDR_VAR 0 2
71198: PUSH
71199: LD_VAR 0 1
71203: PUSH
71204: LD_INT 0
71206: DIFF
71207: ST_TO_ADDR
// if not result [ 1 ] then
71208: LD_VAR 0 2
71212: PUSH
71213: LD_INT 1
71215: ARRAY
71216: NOT
71217: IFFALSE 71237
// result := Delete ( result , 1 ) ;
71219: LD_ADDR_VAR 0 2
71223: PUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: LD_INT 1
71231: PPUSH
71232: CALL_OW 3
71236: ST_TO_ADDR
// end ; end_of_file
71237: LD_VAR 0 2
71241: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71242: LD_VAR 0 1
71246: PUSH
71247: LD_INT 200
71249: DOUBLE
71250: GREATEREQUAL
71251: IFFALSE 71259
71253: LD_INT 299
71255: DOUBLE
71256: LESSEQUAL
71257: IFTRUE 71261
71259: GO 71293
71261: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71262: LD_VAR 0 1
71266: PPUSH
71267: LD_VAR 0 2
71271: PPUSH
71272: LD_VAR 0 3
71276: PPUSH
71277: LD_VAR 0 4
71281: PPUSH
71282: LD_VAR 0 5
71286: PPUSH
71287: CALL 25933 0 5
71291: GO 71370
71293: LD_INT 300
71295: DOUBLE
71296: GREATEREQUAL
71297: IFFALSE 71305
71299: LD_INT 399
71301: DOUBLE
71302: LESSEQUAL
71303: IFTRUE 71307
71305: GO 71369
71307: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71308: LD_VAR 0 1
71312: PPUSH
71313: LD_VAR 0 2
71317: PPUSH
71318: LD_VAR 0 3
71322: PPUSH
71323: LD_VAR 0 4
71327: PPUSH
71328: LD_VAR 0 5
71332: PPUSH
71333: LD_VAR 0 6
71337: PPUSH
71338: LD_VAR 0 7
71342: PPUSH
71343: LD_VAR 0 8
71347: PPUSH
71348: LD_VAR 0 9
71352: PPUSH
71353: LD_VAR 0 10
71357: PPUSH
71358: LD_VAR 0 11
71362: PPUSH
71363: CALL 22262 0 11
71367: GO 71370
71369: POP
// end ;
71370: PPOPN 11
71372: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71373: LD_VAR 0 1
71377: PPUSH
71378: LD_VAR 0 2
71382: PPUSH
71383: LD_VAR 0 3
71387: PPUSH
71388: LD_VAR 0 4
71392: PPUSH
71393: LD_VAR 0 5
71397: PPUSH
71398: CALL 25669 0 5
// end ; end_of_file
71402: PPOPN 5
71404: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71405: LD_VAR 0 1
71409: PPUSH
71410: LD_VAR 0 2
71414: PPUSH
71415: LD_VAR 0 3
71419: PPUSH
71420: LD_VAR 0 4
71424: PPUSH
71425: LD_VAR 0 5
71429: PPUSH
71430: LD_VAR 0 6
71434: PPUSH
71435: CALL 9955 0 6
// end ;
71439: PPOPN 6
71441: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71442: LD_INT 0
71444: PPUSH
// begin if not units then
71445: LD_VAR 0 1
71449: NOT
71450: IFFALSE 71454
// exit ;
71452: GO 71454
// end ;
71454: PPOPN 7
71456: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71457: CALL 9926 0 0
// end ;
71461: PPOPN 1
71463: END
