// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareArabian ;
   8: CALL 1912 0 0
// PrepareAmerican ;
  12: CALL 6319 0 0
// PrepareRussian ;
  16: CALL 2829 0 0
// Action ;
  20: CALL 7879 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 03_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 03_
  56: ST_TO_ADDR
// baseConstructed := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// labConstructed := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// russianAlert := false ;
  81: LD_ADDR_EXP 8
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// activeGrishkoAI := true ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 1
  96: ST_TO_ADDR
// allowHeikeAttack := false ;
  97: LD_ADDR_EXP 10
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// allowToPatrol := false ;
 105: LD_ADDR_EXP 11
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// omicronFall := false ;
 113: LD_ADDR_EXP 12
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// startAttackOnOmicron := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// kirovDestroyed := false ;
 129: LD_ADDR_EXP 14
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// beriaDestroyed := false ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// kaganDestroyed := false ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// retreatFromOmicron := false ;
 153: LD_ADDR_EXP 18
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// escapeCounter := 0 ;
 161: LD_ADDR_EXP 17
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// loseCounter := 0 ;
 169: LD_ADDR_EXP 13
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// labCaptured := false ;
 177: LD_ADDR_EXP 19
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 185: LD_ADDR_EXP 7
 189: PUSH
 190: LD_INT 3
 192: PUSH
 193: LD_INT 4
 195: PUSH
 196: LD_INT 5
 198: PUSH
 199: LD_INT 6
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: LD_INT 8
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: ST_TO_ADDR
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// if exist_mode then
 225: LD_VAR 0 2
 229: IFFALSE 254
// unit := CreateCharacter ( prefix & ident ) else
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_VAR 0 1
 245: STR
 246: PPUSH
 247: CALL_OW 34
 251: ST_TO_ADDR
 252: GO 269
// unit := NewCharacter ( ident ) ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_VAR 0 1
 263: PPUSH
 264: CALL_OW 25
 268: ST_TO_ADDR
// result := unit ;
 269: LD_ADDR_VAR 0 4
 273: PUSH
 274: LD_VAR 0 5
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 4
 283: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 284: LD_INT 0
 286: PPUSH
// uc_side := side ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_VAR 0 1
 296: ST_TO_ADDR
// uc_nation := nation ;
 297: LD_ADDR_OWVAR 21
 301: PUSH
 302: LD_VAR 0 2
 306: ST_TO_ADDR
// vc_chassis := chassis ;
 307: LD_ADDR_OWVAR 37
 311: PUSH
 312: LD_VAR 0 3
 316: ST_TO_ADDR
// vc_engine := engine ;
 317: LD_ADDR_OWVAR 39
 321: PUSH
 322: LD_VAR 0 4
 326: ST_TO_ADDR
// vc_control := control ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_VAR 0 5
 336: ST_TO_ADDR
// vc_weapon := weapon ;
 337: LD_ADDR_OWVAR 40
 341: PUSH
 342: LD_VAR 0 6
 346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 347: LD_ADDR_OWVAR 41
 351: PUSH
 352: LD_VAR 0 7
 356: ST_TO_ADDR
// result := CreateVehicle ;
 357: LD_ADDR_VAR 0 8
 361: PUSH
 362: CALL_OW 45
 366: ST_TO_ADDR
// end ;
 367: LD_VAR 0 8
 371: RET
// export function SayX ( units , ident ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// result := false ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// if not units then
 384: LD_VAR 0 1
 388: NOT
 389: IFFALSE 393
// exit ;
 391: GO 447
// for i in units do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_VAR 0 1
 402: PUSH
 403: FOR_IN
 404: IFFALSE 445
// if IsOk ( i ) then
 406: LD_VAR 0 4
 410: PPUSH
 411: CALL_OW 302
 415: IFFALSE 443
// begin Say ( i , ident ) ;
 417: LD_VAR 0 4
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 88
// result := i ;
 431: LD_ADDR_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ST_TO_ADDR
// break ;
 441: GO 445
// end ;
 443: GO 403
 445: POP
 446: POP
// end ;
 447: LD_VAR 0 3
 451: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// InitUc ;
 456: CALL_OW 18
// InitHc ;
 460: CALL_OW 19
// uc_side := 0 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// uc_nation := 0 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// for i = 1 to amount do
 480: LD_ADDR_VAR 0 4
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_VAR 0 2
 494: PUSH
 495: FOR_TO
 496: IFFALSE 578
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 498: LD_ADDR_OWVAR 29
 502: PUSH
 503: LD_INT 9
 505: PPUSH
 506: LD_INT 12
 508: PPUSH
 509: CALL_OW 12
 513: PUSH
 514: LD_INT 9
 516: PPUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 12
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 1
 536: NEG
 537: PPUSH
 538: LD_INT 1
 540: PPUSH
 541: CALL_OW 12
 545: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 546: LD_INT 0
 548: PPUSH
 549: LD_INT 12
 551: PPUSH
 552: LD_INT 1
 554: PPUSH
 555: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 495
 578: POP
 579: POP
// InitHc ;
 580: CALL_OW 19
// end ;
 584: LD_VAR 0 3
 588: RET
// export function PrepareNature ( forest ) ; var i ; begin
 589: LD_INT 0
 591: PPUSH
 592: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 6
 600: PUSH
 601: LD_INT 5
 603: PUSH
 604: LD_INT 4
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: LIST
 611: PUSH
 612: LD_OWVAR 67
 616: ARRAY
 617: PPUSH
 618: CALL 452 0 2
// for i := 1 to 3 do
 622: LD_ADDR_VAR 0 3
 626: PUSH
 627: DOUBLE
 628: LD_INT 1
 630: DEC
 631: ST_TO_ADDR
 632: LD_INT 3
 634: PUSH
 635: FOR_TO
 636: IFFALSE 673
// begin hc_class := 21 ;
 638: LD_ADDR_OWVAR 28
 642: PUSH
 643: LD_INT 21
 645: ST_TO_ADDR
// hc_gallery :=  ;
 646: LD_ADDR_OWVAR 33
 650: PUSH
 651: LD_STRING 
 653: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 654: CALL_OW 44
 658: PPUSH
 659: LD_VAR 0 1
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL_OW 49
// end ;
 671: GO 635
 673: POP
 674: POP
// for i := 1 to 2 do
 675: LD_ADDR_VAR 0 3
 679: PUSH
 680: DOUBLE
 681: LD_INT 1
 683: DEC
 684: ST_TO_ADDR
 685: LD_INT 2
 687: PUSH
 688: FOR_TO
 689: IFFALSE 726
// begin hc_class := 18 ;
 691: LD_ADDR_OWVAR 28
 695: PUSH
 696: LD_INT 18
 698: ST_TO_ADDR
// hc_gallery :=  ;
 699: LD_ADDR_OWVAR 33
 703: PUSH
 704: LD_STRING 
 706: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 707: CALL_OW 44
 711: PPUSH
 712: LD_VAR 0 1
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 49
// end ;
 724: GO 688
 726: POP
 727: POP
// for i := 1 to 2 do
 728: LD_ADDR_VAR 0 3
 732: PUSH
 733: DOUBLE
 734: LD_INT 1
 736: DEC
 737: ST_TO_ADDR
 738: LD_INT 2
 740: PUSH
 741: FOR_TO
 742: IFFALSE 779
// begin hc_class := 13 ;
 744: LD_ADDR_OWVAR 28
 748: PUSH
 749: LD_INT 13
 751: ST_TO_ADDR
// hc_gallery :=  ;
 752: LD_ADDR_OWVAR 33
 756: PUSH
 757: LD_STRING 
 759: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_VAR 0 1
 769: PPUSH
 770: LD_INT 0
 772: PPUSH
 773: CALL_OW 49
// end ;
 777: GO 741
 779: POP
 780: POP
// end ;
 781: LD_VAR 0 2
 785: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 786: LD_INT 0
 788: PPUSH
 789: PPUSH
 790: PPUSH
// if not observer or not unit then
 791: LD_VAR 0 1
 795: NOT
 796: PUSH
 797: LD_VAR 0 2
 801: NOT
 802: OR
 803: IFFALSE 807
// exit ;
 805: GO 855
// if not See ( GetSide ( observer ) , unit ) then
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 255
 816: PPUSH
 817: LD_VAR 0 2
 821: PPUSH
 822: CALL_OW 292
 826: NOT
 827: IFFALSE 831
// exit ;
 829: GO 855
// result := GetDistUnits ( observer , unit ) < 12 ;
 831: LD_ADDR_VAR 0 3
 835: PUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: LD_VAR 0 2
 845: PPUSH
 846: CALL_OW 296
 850: PUSH
 851: LD_INT 12
 853: LESS
 854: ST_TO_ADDR
// end ;
 855: LD_VAR 0 3
 859: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 860: LD_INT 0
 862: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 863: LD_VAR 0 2
 867: PUSH
 868: LD_INT 1
 870: ARRAY
 871: PPUSH
 872: LD_VAR 0 2
 876: PUSH
 877: LD_INT 2
 879: ARRAY
 880: PPUSH
 881: CALL_OW 488
 885: PUSH
 886: LD_VAR 0 2
 890: PUSH
 891: LD_INT 1
 893: ARRAY
 894: PPUSH
 895: LD_VAR 0 2
 899: PUSH
 900: LD_INT 2
 902: ARRAY
 903: PPUSH
 904: CALL_OW 428
 908: PUSH
 909: LD_INT 0
 911: EQUAL
 912: AND
 913: IFFALSE 947
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_VAR 0 2
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: PPUSH
 929: LD_VAR 0 2
 933: PUSH
 934: LD_INT 2
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 3
 942: PPUSH
 943: CALL_OW 48
// end ;
 947: LD_VAR 0 4
 951: RET
// export function Video ( mode ) ; begin
 952: LD_INT 0
 954: PPUSH
// ingame_video = mode ;
 955: LD_ADDR_OWVAR 52
 959: PUSH
 960: LD_VAR 0 1
 964: ST_TO_ADDR
// interface_hidden = mode ;
 965: LD_ADDR_OWVAR 54
 969: PUSH
 970: LD_VAR 0 1
 974: ST_TO_ADDR
// end ;
 975: LD_VAR 0 2
 979: RET
// export function ReverseArray ( array ) ; var i ; begin
 980: LD_INT 0
 982: PPUSH
 983: PPUSH
// if not array then
 984: LD_VAR 0 1
 988: NOT
 989: IFFALSE 993
// exit ;
 991: GO 1051
// result := [ ] ;
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i := 1 to array do
1000: LD_ADDR_VAR 0 3
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_VAR 0 1
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1049
// result := Insert ( result , 1 , array [ i ] ) ;
1018: LD_ADDR_VAR 0 2
1022: PUSH
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: LD_VAR 0 1
1035: PUSH
1036: LD_VAR 0 3
1040: ARRAY
1041: PPUSH
1042: CALL_OW 2
1046: ST_TO_ADDR
1047: GO 1015
1049: POP
1050: POP
// end ;
1051: LD_VAR 0 2
1055: RET
// export function ComExit ( unit ) ; begin
1056: LD_INT 0
1058: PPUSH
// result := IsInUnit ( unit ) ;
1059: LD_ADDR_VAR 0 2
1063: PUSH
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 310
1073: ST_TO_ADDR
// if not result then
1074: LD_VAR 0 2
1078: NOT
1079: IFFALSE 1083
// exit ;
1081: GO 1118
// if GetType ( result ) = unit_vehicle then
1083: LD_VAR 0 2
1087: PPUSH
1088: CALL_OW 247
1092: PUSH
1093: LD_INT 2
1095: EQUAL
1096: IFFALSE 1109
// ComExitVehicle ( unit ) else
1098: LD_VAR 0 1
1102: PPUSH
1103: CALL_OW 121
1107: GO 1118
// ComExitBuilding ( unit ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 122
// end ;
1118: LD_VAR 0 2
1122: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1123: LD_INT 0
1125: PPUSH
1126: PPUSH
// if not side or not nation then
1127: LD_VAR 0 1
1131: NOT
1132: PUSH
1133: LD_VAR 0 2
1137: NOT
1138: OR
1139: IFFALSE 1143
// exit ;
1141: GO 1907
// case nation of nation_american :
1143: LD_VAR 0 2
1147: PUSH
1148: LD_INT 1
1150: DOUBLE
1151: EQUAL
1152: IFTRUE 1156
1154: GO 1370
1156: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_INT 35
1164: PUSH
1165: LD_INT 45
1167: PUSH
1168: LD_INT 46
1170: PUSH
1171: LD_INT 47
1173: PUSH
1174: LD_INT 82
1176: PUSH
1177: LD_INT 83
1179: PUSH
1180: LD_INT 84
1182: PUSH
1183: LD_INT 85
1185: PUSH
1186: LD_INT 86
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: LD_INT 2
1194: PUSH
1195: LD_INT 6
1197: PUSH
1198: LD_INT 15
1200: PUSH
1201: LD_INT 16
1203: PUSH
1204: LD_INT 7
1206: PUSH
1207: LD_INT 12
1209: PUSH
1210: LD_INT 13
1212: PUSH
1213: LD_INT 10
1215: PUSH
1216: LD_INT 14
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: LD_INT 21
1224: PUSH
1225: LD_INT 22
1227: PUSH
1228: LD_INT 25
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: LD_INT 27
1236: PUSH
1237: LD_INT 36
1239: PUSH
1240: LD_INT 69
1242: PUSH
1243: LD_INT 39
1245: PUSH
1246: LD_INT 34
1248: PUSH
1249: LD_INT 40
1251: PUSH
1252: LD_INT 48
1254: PUSH
1255: LD_INT 49
1257: PUSH
1258: LD_INT 50
1260: PUSH
1261: LD_INT 51
1263: PUSH
1264: LD_INT 52
1266: PUSH
1267: LD_INT 53
1269: PUSH
1270: LD_INT 54
1272: PUSH
1273: LD_INT 55
1275: PUSH
1276: LD_INT 56
1278: PUSH
1279: LD_INT 57
1281: PUSH
1282: LD_INT 58
1284: PUSH
1285: LD_INT 59
1287: PUSH
1288: LD_INT 60
1290: PUSH
1291: LD_INT 61
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: LD_INT 80
1299: PUSH
1300: LD_INT 82
1302: PUSH
1303: LD_INT 83
1305: PUSH
1306: LD_INT 84
1308: PUSH
1309: LD_INT 85
1311: PUSH
1312: LD_INT 86
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: ST_TO_ADDR
1368: GO 1831
1370: LD_INT 2
1372: DOUBLE
1373: EQUAL
1374: IFTRUE 1378
1376: GO 1600
1378: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1379: LD_ADDR_VAR 0 4
1383: PUSH
1384: LD_INT 35
1386: PUSH
1387: LD_INT 45
1389: PUSH
1390: LD_INT 46
1392: PUSH
1393: LD_INT 47
1395: PUSH
1396: LD_INT 82
1398: PUSH
1399: LD_INT 83
1401: PUSH
1402: LD_INT 84
1404: PUSH
1405: LD_INT 85
1407: PUSH
1408: LD_INT 87
1410: PUSH
1411: LD_INT 70
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 11
1419: PUSH
1420: LD_INT 3
1422: PUSH
1423: LD_INT 4
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 6
1431: PUSH
1432: LD_INT 15
1434: PUSH
1435: LD_INT 18
1437: PUSH
1438: LD_INT 7
1440: PUSH
1441: LD_INT 17
1443: PUSH
1444: LD_INT 8
1446: PUSH
1447: LD_INT 20
1449: PUSH
1450: LD_INT 21
1452: PUSH
1453: LD_INT 22
1455: PUSH
1456: LD_INT 72
1458: PUSH
1459: LD_INT 26
1461: PUSH
1462: LD_INT 69
1464: PUSH
1465: LD_INT 39
1467: PUSH
1468: LD_INT 40
1470: PUSH
1471: LD_INT 41
1473: PUSH
1474: LD_INT 42
1476: PUSH
1477: LD_INT 43
1479: PUSH
1480: LD_INT 48
1482: PUSH
1483: LD_INT 49
1485: PUSH
1486: LD_INT 50
1488: PUSH
1489: LD_INT 51
1491: PUSH
1492: LD_INT 52
1494: PUSH
1495: LD_INT 53
1497: PUSH
1498: LD_INT 54
1500: PUSH
1501: LD_INT 55
1503: PUSH
1504: LD_INT 56
1506: PUSH
1507: LD_INT 60
1509: PUSH
1510: LD_INT 61
1512: PUSH
1513: LD_INT 62
1515: PUSH
1516: LD_INT 66
1518: PUSH
1519: LD_INT 67
1521: PUSH
1522: LD_INT 68
1524: PUSH
1525: LD_INT 81
1527: PUSH
1528: LD_INT 82
1530: PUSH
1531: LD_INT 83
1533: PUSH
1534: LD_INT 84
1536: PUSH
1537: LD_INT 85
1539: PUSH
1540: LD_INT 87
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
1598: GO 1831
1600: LD_INT 3
1602: DOUBLE
1603: EQUAL
1604: IFTRUE 1608
1606: GO 1830
1608: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: LD_INT 46
1616: PUSH
1617: LD_INT 47
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 82
1628: PUSH
1629: LD_INT 83
1631: PUSH
1632: LD_INT 84
1634: PUSH
1635: LD_INT 85
1637: PUSH
1638: LD_INT 86
1640: PUSH
1641: LD_INT 11
1643: PUSH
1644: LD_INT 9
1646: PUSH
1647: LD_INT 20
1649: PUSH
1650: LD_INT 19
1652: PUSH
1653: LD_INT 21
1655: PUSH
1656: LD_INT 24
1658: PUSH
1659: LD_INT 22
1661: PUSH
1662: LD_INT 25
1664: PUSH
1665: LD_INT 28
1667: PUSH
1668: LD_INT 29
1670: PUSH
1671: LD_INT 30
1673: PUSH
1674: LD_INT 31
1676: PUSH
1677: LD_INT 37
1679: PUSH
1680: LD_INT 38
1682: PUSH
1683: LD_INT 32
1685: PUSH
1686: LD_INT 27
1688: PUSH
1689: LD_INT 33
1691: PUSH
1692: LD_INT 69
1694: PUSH
1695: LD_INT 39
1697: PUSH
1698: LD_INT 34
1700: PUSH
1701: LD_INT 40
1703: PUSH
1704: LD_INT 71
1706: PUSH
1707: LD_INT 23
1709: PUSH
1710: LD_INT 44
1712: PUSH
1713: LD_INT 48
1715: PUSH
1716: LD_INT 49
1718: PUSH
1719: LD_INT 50
1721: PUSH
1722: LD_INT 51
1724: PUSH
1725: LD_INT 52
1727: PUSH
1728: LD_INT 53
1730: PUSH
1731: LD_INT 54
1733: PUSH
1734: LD_INT 55
1736: PUSH
1737: LD_INT 56
1739: PUSH
1740: LD_INT 57
1742: PUSH
1743: LD_INT 58
1745: PUSH
1746: LD_INT 59
1748: PUSH
1749: LD_INT 63
1751: PUSH
1752: LD_INT 64
1754: PUSH
1755: LD_INT 65
1757: PUSH
1758: LD_INT 82
1760: PUSH
1761: LD_INT 83
1763: PUSH
1764: LD_INT 84
1766: PUSH
1767: LD_INT 85
1769: PUSH
1770: LD_INT 86
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: ST_TO_ADDR
1828: GO 1831
1830: POP
// if state > - 1 and state < 3 then
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: NEG
1839: GREATER
1840: PUSH
1841: LD_VAR 0 3
1845: PUSH
1846: LD_INT 3
1848: LESS
1849: AND
1850: IFFALSE 1907
// for i in result do
1852: LD_ADDR_VAR 0 5
1856: PUSH
1857: LD_VAR 0 4
1861: PUSH
1862: FOR_IN
1863: IFFALSE 1905
// if GetTech ( i , side ) <> state then
1865: LD_VAR 0 5
1869: PPUSH
1870: LD_VAR 0 1
1874: PPUSH
1875: CALL_OW 321
1879: PUSH
1880: LD_VAR 0 3
1884: NONEQUAL
1885: IFFALSE 1903
// result := result diff i ;
1887: LD_ADDR_VAR 0 4
1891: PUSH
1892: LD_VAR 0 4
1896: PUSH
1897: LD_VAR 0 5
1901: DIFF
1902: ST_TO_ADDR
1903: GO 1862
1905: POP
1906: POP
// end ; end_of_file
1907: LD_VAR 0 4
1911: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1912: LD_INT 0
1914: PPUSH
1915: PPUSH
// uc_side := 2 ;
1916: LD_ADDR_OWVAR 20
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// uc_nation := 2 ;
1924: LD_ADDR_OWVAR 21
1928: PUSH
1929: LD_INT 2
1931: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1932: LD_ADDR_EXP 20
1936: PUSH
1937: LD_STRING Heike
1939: PPUSH
1940: LD_EXP 1
1944: NOT
1945: PPUSH
1946: LD_EXP 2
1950: PPUSH
1951: CALL 221 0 3
1955: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1956: LD_ADDR_EXP 23
1960: PUSH
1961: LD_STRING Ibrahim
1963: PPUSH
1964: LD_EXP 1
1968: NOT
1969: PPUSH
1970: LD_EXP 2
1974: PPUSH
1975: CALL 221 0 3
1979: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1980: LD_ADDR_EXP 21
1984: PUSH
1985: LD_STRING Givi
1987: PPUSH
1988: LD_EXP 1
1992: NOT
1993: PPUSH
1994: LD_EXP 2
1998: PPUSH
1999: CALL 221 0 3
2003: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2004: LD_ADDR_EXP 24
2008: PUSH
2009: LD_STRING Kamil
2011: PPUSH
2012: LD_EXP 1
2016: NOT
2017: PPUSH
2018: LD_EXP 2
2022: PPUSH
2023: CALL 221 0 3
2027: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2028: LD_ADDR_EXP 25
2032: PUSH
2033: LD_STRING Kaia
2035: PPUSH
2036: LD_EXP 1
2040: NOT
2041: PPUSH
2042: LD_EXP 2
2046: PPUSH
2047: CALL 221 0 3
2051: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2052: LD_ADDR_EXP 26
2056: PUSH
2057: LD_STRING Sophia
2059: PPUSH
2060: LD_EXP 1
2064: NOT
2065: PPUSH
2066: LD_EXP 2
2070: PPUSH
2071: CALL 221 0 3
2075: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2076: LD_ADDR_EXP 27
2080: PUSH
2081: LD_STRING Markov
2083: PPUSH
2084: LD_EXP 1
2088: NOT
2089: PPUSH
2090: LD_EXP 2
2094: PPUSH
2095: CALL 221 0 3
2099: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2100: LD_ADDR_EXP 30
2104: PUSH
2105: LD_STRING Aviradze
2107: PPUSH
2108: LD_EXP 1
2112: NOT
2113: PPUSH
2114: LD_EXP 2
2118: PPUSH
2119: CALL 221 0 3
2123: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2124: LD_ADDR_EXP 33
2128: PUSH
2129: EMPTY
2130: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2131: LD_ADDR_EXP 31
2135: PUSH
2136: LD_STRING 03_others
2138: PPUSH
2139: CALL_OW 31
2143: ST_TO_ADDR
// uc_side := 5 ;
2144: LD_ADDR_OWVAR 20
2148: PUSH
2149: LD_INT 5
2151: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2152: LD_ADDR_EXP 29
2156: PUSH
2157: LD_STRING Kurt
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: LD_STRING 
2165: PPUSH
2166: CALL 221 0 3
2170: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2171: LD_ADDR_EXP 22
2175: PUSH
2176: LD_STRING Mike
2178: PPUSH
2179: LD_EXP 1
2183: NOT
2184: PPUSH
2185: LD_EXP 2
2189: PPUSH
2190: CALL 221 0 3
2194: ST_TO_ADDR
// if Mike then
2195: LD_EXP 22
2199: IFFALSE 2222
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2201: LD_EXP 22
2205: PPUSH
2206: LD_INT 142
2208: PPUSH
2209: LD_INT 63
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2222: LD_EXP 29
2226: PPUSH
2227: LD_INT 142
2229: PPUSH
2230: LD_INT 63
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2243: LD_EXP 29
2247: PUSH
2248: LD_EXP 22
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PPUSH
2257: CALL_OW 140
// end ;
2261: LD_VAR 0 1
2265: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
// uc_side := 5 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 5
2279: ST_TO_ADDR
// uc_nation := 2 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 2
2287: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2288: LD_ADDR_EXP 28
2292: PUSH
2293: LD_STRING Omar
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: LD_STRING 
2301: PPUSH
2302: CALL 221 0 3
2306: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2307: LD_EXP 28
2311: PPUSH
2312: LD_INT 284
2314: PPUSH
2315: LD_INT 163
2317: PPUSH
2318: LD_INT 0
2320: PPUSH
2321: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2325: LD_EXP 28
2329: PPUSH
2330: LD_INT 256
2332: PPUSH
2333: LD_INT 129
2335: PPUSH
2336: CALL_OW 111
// wait ( 0 0$2 ) ;
2340: LD_INT 70
2342: PPUSH
2343: CALL_OW 67
// omarSquad := [ ] ;
2347: LD_ADDR_EXP 32
2351: PUSH
2352: EMPTY
2353: ST_TO_ADDR
// for i := 1 to 5 do
2354: LD_ADDR_VAR 0 2
2358: PUSH
2359: DOUBLE
2360: LD_INT 1
2362: DEC
2363: ST_TO_ADDR
2364: LD_INT 5
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2574
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2370: LD_INT 5
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: LD_INT 13
2378: PUSH
2379: LD_INT 14
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_VAR 0 2
2390: PUSH
2391: LD_INT 2
2393: MOD
2394: PUSH
2395: LD_INT 1
2397: PLUS
2398: ARRAY
2399: PPUSH
2400: LD_INT 1
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 25
2408: PUSH
2409: LD_INT 27
2411: PUSH
2412: LD_INT 26
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: PUSH
2420: LD_VAR 0 2
2424: PUSH
2425: LD_INT 3
2427: MOD
2428: PUSH
2429: LD_INT 1
2431: PLUS
2432: ARRAY
2433: PPUSH
2434: LD_INT 100
2436: PPUSH
2437: CALL 284 0 7
// veh := CreateVehicle ;
2441: LD_ADDR_VAR 0 4
2445: PUSH
2446: CALL_OW 45
2450: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 233
// omarSquad := omarSquad union veh ;
2463: LD_ADDR_EXP 32
2467: PUSH
2468: LD_EXP 32
2472: PUSH
2473: LD_VAR 0 4
2477: UNION
2478: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2479: LD_VAR 0 4
2483: PPUSH
2484: LD_INT 284
2486: PPUSH
2487: LD_INT 163
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2497: LD_INT 0
2499: PPUSH
2500: LD_INT 3
2502: PPUSH
2503: LD_INT 3
2505: PPUSH
2506: CALL_OW 380
// un := CreateHuman ;
2510: LD_ADDR_VAR 0 3
2514: PUSH
2515: CALL_OW 44
2519: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2520: LD_ADDR_EXP 32
2524: PUSH
2525: LD_EXP 32
2529: PUSH
2530: LD_VAR 0 3
2534: UNION
2535: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2536: LD_VAR 0 3
2540: PPUSH
2541: LD_VAR 0 4
2545: PPUSH
2546: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2550: LD_VAR 0 3
2554: PPUSH
2555: LD_INT 271
2557: PPUSH
2558: LD_INT 144
2560: PPUSH
2561: CALL_OW 111
// wait ( 0 0$2 ) ;
2565: LD_INT 70
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2367
2574: POP
2575: POP
// for i := 1 to 3 do
2576: LD_ADDR_VAR 0 2
2580: PUSH
2581: DOUBLE
2582: LD_INT 1
2584: DEC
2585: ST_TO_ADDR
2586: LD_INT 3
2588: PUSH
2589: FOR_TO
2590: IFFALSE 2673
// begin PrepareHuman ( false , 1 , 3 ) ;
2592: LD_INT 0
2594: PPUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_INT 3
2600: PPUSH
2601: CALL_OW 380
// un := CreateHuman ;
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: CALL_OW 44
2614: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2615: LD_ADDR_EXP 32
2619: PUSH
2620: LD_EXP 32
2624: PUSH
2625: LD_VAR 0 3
2629: UNION
2630: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2631: LD_VAR 0 3
2635: PPUSH
2636: LD_INT 284
2638: PPUSH
2639: LD_INT 163
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2649: LD_VAR 0 3
2653: PPUSH
2654: LD_INT 257
2656: PPUSH
2657: LD_INT 138
2659: PPUSH
2660: CALL_OW 111
// wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// end ;
2671: GO 2589
2673: POP
2674: POP
// for i := 1 to 6 do
2675: LD_ADDR_VAR 0 2
2679: PUSH
2680: DOUBLE
2681: LD_INT 1
2683: DEC
2684: ST_TO_ADDR
2685: LD_INT 6
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2822
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2691: LD_INT 0
2693: PPUSH
2694: LD_INT 1
2696: PUSH
2697: LD_INT 1
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: PUSH
2708: LD_VAR 0 2
2712: PUSH
2713: LD_INT 3
2715: MOD
2716: PUSH
2717: LD_INT 1
2719: PLUS
2720: ARRAY
2721: PPUSH
2722: LD_INT 3
2724: PPUSH
2725: CALL_OW 380
// un := CreateHuman ;
2729: LD_ADDR_VAR 0 3
2733: PUSH
2734: CALL_OW 44
2738: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2739: LD_ADDR_EXP 32
2743: PUSH
2744: LD_EXP 32
2748: PUSH
2749: LD_VAR 0 3
2753: UNION
2754: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2755: LD_VAR 0 3
2759: PPUSH
2760: LD_INT 225
2762: PPUSH
2763: LD_INT 163
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 48
// if i = 1 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_INT 1
2780: EQUAL
2781: IFFALSE 2798
// SetAttr ( un , attr_speed , 12 ) ;
2783: LD_VAR 0 3
2787: PPUSH
2788: LD_INT 2
2790: PPUSH
2791: LD_INT 12
2793: PPUSH
2794: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2798: LD_VAR 0 3
2802: PPUSH
2803: LD_INT 222
2805: PPUSH
2806: LD_INT 157
2808: PPUSH
2809: CALL_OW 111
// wait ( 0 0$1 ) ;
2813: LD_INT 35
2815: PPUSH
2816: CALL_OW 67
// end ;
2820: GO 2688
2822: POP
2823: POP
// end ; end_of_file
2824: LD_VAR 0 1
2828: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2829: LD_INT 0
2831: PPUSH
2832: PPUSH
2833: PPUSH
2834: PPUSH
2835: PPUSH
2836: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2837: LD_ADDR_EXP 44
2841: PUSH
2842: LD_INT 22
2844: PUSH
2845: LD_INT 3
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 30
2854: PUSH
2855: LD_INT 7
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PPUSH
2866: CALL_OW 69
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: LD_INT 21
2882: PUSH
2883: LD_INT 3
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 23
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PPUSH
2904: CALL_OW 69
2908: PUSH
2909: FOR_IN
2910: IFFALSE 2926
// SetBLevel ( i , 5 ) ;
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_INT 5
2919: PPUSH
2920: CALL_OW 241
2924: GO 2909
2926: POP
2927: POP
// SetBName ( kirov , kirov ) ;
2928: LD_INT 71
2930: PPUSH
2931: LD_STRING kirov
2933: PPUSH
2934: CALL_OW 500
// SetBName ( beria , beria ) ;
2938: LD_INT 106
2940: PPUSH
2941: LD_STRING beria
2943: PPUSH
2944: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2948: LD_INT 112
2950: PPUSH
2951: LD_STRING kagan
2953: PPUSH
2954: CALL_OW 500
// uc_side := 6 ;
2958: LD_ADDR_OWVAR 20
2962: PUSH
2963: LD_INT 6
2965: ST_TO_ADDR
// uc_nation := 3 ;
2966: LD_ADDR_OWVAR 21
2970: PUSH
2971: LD_INT 3
2973: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2974: LD_ADDR_VAR 0 5
2978: PUSH
2979: LD_INT 22
2981: PUSH
2982: LD_INT 6
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 30
2991: PUSH
2992: LD_INT 5
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PPUSH
3003: CALL_OW 69
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3012: LD_ADDR_VAR 0 4
3016: PUSH
3017: LD_INT 22
3019: PUSH
3020: LD_INT 6
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 30
3029: PUSH
3030: LD_INT 4
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PPUSH
3041: CALL_OW 69
3045: PUSH
3046: LD_INT 1
3048: ARRAY
3049: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3050: LD_ADDR_EXP 38
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3057: LD_ADDR_EXP 39
3061: PUSH
3062: EMPTY
3063: ST_TO_ADDR
// russianPatrol := [ ] ;
3064: LD_ADDR_EXP 41
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3071: LD_ADDR_EXP 34
3075: PUSH
3076: LD_STRING Kurin
3078: PPUSH
3079: LD_INT 0
3081: PPUSH
3082: LD_STRING 
3084: PPUSH
3085: CALL 221 0 3
3089: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3090: LD_EXP 34
3094: PPUSH
3095: LD_INT 71
3097: PPUSH
3098: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3102: LD_ADDR_EXP 36
3106: PUSH
3107: LD_STRING Popov
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: LD_STRING 
3115: PPUSH
3116: CALL 221 0 3
3120: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3121: LD_EXP 36
3125: PPUSH
3126: LD_INT 71
3128: PPUSH
3129: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3133: LD_ADDR_EXP 35
3137: PUSH
3138: LD_STRING Grishko
3140: PPUSH
3141: LD_INT 0
3143: PPUSH
3144: LD_STRING 
3146: PPUSH
3147: CALL 221 0 3
3151: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3152: LD_EXP 35
3156: PPUSH
3157: LD_INT 207
3159: PPUSH
3160: LD_INT 106
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3170: LD_EXP 35
3174: PPUSH
3175: LD_INT 209
3177: PPUSH
3178: LD_INT 106
3180: PPUSH
3181: CALL_OW 118
// for i := 1 to 2 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 2
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3254
// begin PrepareHuman ( false , 2 , 2 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 2
3206: PPUSH
3207: LD_INT 2
3209: PPUSH
3210: CALL_OW 380
// un := CreateHuman ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: CALL_OW 44
3223: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3224: LD_VAR 0 3
3228: PPUSH
3229: LD_INT 71
3231: PPUSH
3232: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3236: LD_ADDR_EXP 38
3240: PUSH
3241: LD_EXP 38
3245: PUSH
3246: LD_VAR 0 3
3250: UNION
3251: ST_TO_ADDR
// end ;
3252: GO 3198
3254: POP
3255: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3256: LD_ADDR_VAR 0 2
3260: PUSH
3261: DOUBLE
3262: LD_INT 1
3264: DEC
3265: ST_TO_ADDR
3266: LD_INT 5
3268: PUSH
3269: LD_INT 6
3271: PUSH
3272: LD_INT 6
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PUSH
3280: LD_OWVAR 67
3284: ARRAY
3285: PUSH
3286: FOR_TO
3287: IFFALSE 3361
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 2
3297: PUSH
3298: LD_INT 3
3300: PUSH
3301: LD_INT 4
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: LIST
3308: PUSH
3309: LD_OWVAR 67
3313: ARRAY
3314: PPUSH
3315: CALL_OW 380
// un := CreateHuman ;
3319: LD_ADDR_VAR 0 3
3323: PUSH
3324: CALL_OW 44
3328: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3329: LD_VAR 0 3
3333: PPUSH
3334: LD_VAR 0 5
3338: PPUSH
3339: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3343: LD_ADDR_EXP 38
3347: PUSH
3348: LD_EXP 38
3352: PUSH
3353: LD_VAR 0 3
3357: UNION
3358: ST_TO_ADDR
// end ;
3359: GO 3286
3361: POP
3362: POP
// for i := 1 to 3 do
3363: LD_ADDR_VAR 0 2
3367: PUSH
3368: DOUBLE
3369: LD_INT 1
3371: DEC
3372: ST_TO_ADDR
3373: LD_INT 3
3375: PUSH
3376: FOR_TO
3377: IFFALSE 3432
// begin PrepareHuman ( false , 3 , 3 ) ;
3379: LD_INT 0
3381: PPUSH
3382: LD_INT 3
3384: PPUSH
3385: LD_INT 3
3387: PPUSH
3388: CALL_OW 380
// un := CreateHuman ;
3392: LD_ADDR_VAR 0 3
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3402: LD_VAR 0 3
3406: PPUSH
3407: LD_INT 92
3409: PPUSH
3410: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3414: LD_ADDR_EXP 38
3418: PUSH
3419: LD_EXP 38
3423: PUSH
3424: LD_VAR 0 3
3428: UNION
3429: ST_TO_ADDR
// end ;
3430: GO 3376
3432: POP
3433: POP
// for i := 1 to 2 do
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: DOUBLE
3440: LD_INT 1
3442: DEC
3443: ST_TO_ADDR
3444: LD_INT 2
3446: PUSH
3447: FOR_TO
3448: IFFALSE 3503
// begin PrepareHuman ( false , 4 , 3 ) ;
3450: LD_INT 0
3452: PPUSH
3453: LD_INT 4
3455: PPUSH
3456: LD_INT 3
3458: PPUSH
3459: CALL_OW 380
// un := CreateHuman ;
3463: LD_ADDR_VAR 0 3
3467: PUSH
3468: CALL_OW 44
3472: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3473: LD_VAR 0 3
3477: PPUSH
3478: LD_INT 83
3480: PPUSH
3481: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3485: LD_ADDR_EXP 38
3489: PUSH
3490: LD_EXP 38
3494: PUSH
3495: LD_VAR 0 3
3499: UNION
3500: ST_TO_ADDR
// end ;
3501: GO 3447
3503: POP
3504: POP
// for i := 1 to 5 do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: DOUBLE
3511: LD_INT 1
3513: DEC
3514: ST_TO_ADDR
3515: LD_INT 5
3517: PUSH
3518: FOR_TO
3519: IFFALSE 3576
// begin PrepareHuman ( false , 1 , 3 ) ;
3521: LD_INT 0
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: LD_INT 3
3529: PPUSH
3530: CALL_OW 380
// un := CreateHuman ;
3534: LD_ADDR_VAR 0 3
3538: PUSH
3539: CALL_OW 44
3543: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3544: LD_VAR 0 3
3548: PPUSH
3549: LD_VAR 0 4
3553: PPUSH
3554: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3558: LD_ADDR_EXP 40
3562: PUSH
3563: LD_EXP 40
3567: PUSH
3568: LD_VAR 0 3
3572: UNION
3573: ST_TO_ADDR
// end ;
3574: GO 3518
3576: POP
3577: POP
// russianCargo := [ ] ;
3578: LD_ADDR_EXP 43
3582: PUSH
3583: EMPTY
3584: ST_TO_ADDR
// for i := 1 to 2 do
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: DOUBLE
3591: LD_INT 1
3593: DEC
3594: ST_TO_ADDR
3595: LD_INT 2
3597: PUSH
3598: FOR_TO
3599: IFFALSE 3731
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3601: LD_INT 6
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_INT 21
3609: PPUSH
3610: LD_INT 1
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_INT 51
3618: PPUSH
3619: LD_INT 100
3621: PPUSH
3622: CALL 284 0 7
// un := CreateVehicle ;
3626: LD_ADDR_VAR 0 3
3630: PUSH
3631: CALL_OW 45
3635: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3636: LD_ADDR_EXP 43
3640: PUSH
3641: LD_EXP 43
3645: PUSH
3646: LD_VAR 0 3
3650: UNION
3651: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3652: LD_VAR 0 3
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 290
// SetDir ( un , 4 ) ;
3667: LD_VAR 0 3
3671: PPUSH
3672: LD_INT 4
3674: PPUSH
3675: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_INT 147
3686: PPUSH
3687: LD_INT 103
3689: PPUSH
3690: LD_INT 4
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 1
3705: PPUSH
3706: LD_OWVAR 67
3710: PPUSH
3711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3715: CALL_OW 44
3719: PPUSH
3720: LD_VAR 0 3
3724: PPUSH
3725: CALL_OW 52
// end ;
3729: GO 3598
3731: POP
3732: POP
// uc_side := 3 ;
3733: LD_ADDR_OWVAR 20
3737: PUSH
3738: LD_INT 3
3740: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3741: LD_ADDR_EXP 37
3745: PUSH
3746: LD_STRING Burlak
3748: PPUSH
3749: LD_INT 0
3751: PPUSH
3752: LD_STRING 
3754: PPUSH
3755: CALL 221 0 3
3759: ST_TO_ADDR
// for i := 1 to 2 do
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_INT 2
3772: PUSH
3773: FOR_TO
3774: IFFALSE 3867
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_OWVAR 67
3786: PUSH
3787: LD_INT 1
3789: PLUS
3790: PPUSH
3791: CALL_OW 380
// un := CreateHuman ;
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: CALL_OW 44
3804: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3805: LD_VAR 0 3
3809: PPUSH
3810: LD_INT 22
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 30
3822: PUSH
3823: LD_INT 32
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PPUSH
3834: CALL_OW 69
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: PPUSH
3845: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3849: LD_ADDR_EXP 39
3853: PUSH
3854: LD_EXP 39
3858: PUSH
3859: LD_VAR 0 3
3863: UNION
3864: ST_TO_ADDR
// end ;
3865: GO 3773
3867: POP
3868: POP
// for i := 1 to 2 do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 2
3881: PUSH
3882: FOR_TO
3883: IFFALSE 3974
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_OWVAR 67
3895: PUSH
3896: LD_INT 1
3898: PLUS
3899: PPUSH
3900: CALL_OW 380
// un := CreateHuman ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: CALL_OW 44
3913: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3914: LD_VAR 0 3
3918: PPUSH
3919: LD_INT 22
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: LD_INT 30
3931: PUSH
3932: LD_INT 5
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: CALL_OW 69
3947: PUSH
3948: LD_INT 1
3950: ARRAY
3951: PPUSH
3952: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3956: LD_ADDR_EXP 39
3960: PUSH
3961: LD_EXP 39
3965: PUSH
3966: LD_VAR 0 3
3970: UNION
3971: ST_TO_ADDR
// end ;
3972: GO 3882
3974: POP
3975: POP
// for i := 1 to 2 do
3976: LD_ADDR_VAR 0 2
3980: PUSH
3981: DOUBLE
3982: LD_INT 1
3984: DEC
3985: ST_TO_ADDR
3986: LD_INT 2
3988: PUSH
3989: FOR_TO
3990: IFFALSE 4077
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3992: LD_INT 0
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: LD_OWVAR 67
4002: PPUSH
4003: CALL_OW 380
// un := CreateHuman ;
4007: LD_ADDR_VAR 0 3
4011: PUSH
4012: CALL_OW 44
4016: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4017: LD_VAR 0 3
4021: PPUSH
4022: LD_INT 22
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PUSH
4032: LD_INT 30
4034: PUSH
4035: LD_INT 7
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 69
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4059: LD_ADDR_EXP 39
4063: PUSH
4064: LD_EXP 39
4068: PUSH
4069: LD_VAR 0 3
4073: UNION
4074: ST_TO_ADDR
// end ;
4075: GO 3989
4077: POP
4078: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4079: LD_INT 0
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: LD_OWVAR 67
4089: PPUSH
4090: CALL_OW 380
// un := CreateHuman ;
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: CALL_OW 44
4103: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4104: LD_VAR 0 3
4108: PPUSH
4109: LD_INT 106
4111: PPUSH
4112: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4116: LD_ADDR_EXP 39
4120: PUSH
4121: LD_EXP 39
4125: PUSH
4126: LD_VAR 0 3
4130: UNION
4131: ST_TO_ADDR
// for i := 1 to 3 do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: DOUBLE
4138: LD_INT 1
4140: DEC
4141: ST_TO_ADDR
4142: LD_INT 3
4144: PUSH
4145: FOR_TO
4146: IFFALSE 4273
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4148: LD_ADDR_VAR 0 6
4152: PUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 30
4165: PUSH
4166: LD_INT 31
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: LD_VAR 0 2
4186: ARRAY
4187: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4188: LD_INT 0
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: LD_OWVAR 67
4198: PPUSH
4199: CALL_OW 380
// un := CreateHuman ;
4203: LD_ADDR_VAR 0 3
4207: PUSH
4208: CALL_OW 44
4212: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) - 3 * - 1 ) ;
4213: LD_VAR 0 3
4217: PPUSH
4218: LD_VAR 0 6
4222: PPUSH
4223: CALL_OW 254
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: LD_INT 1
4233: NEG
4234: MUL
4235: MINUS
4236: PPUSH
4237: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4241: LD_VAR 0 3
4245: PPUSH
4246: LD_VAR 0 6
4250: PPUSH
4251: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4255: LD_ADDR_EXP 39
4259: PUSH
4260: LD_EXP 39
4264: PUSH
4265: LD_VAR 0 3
4269: UNION
4270: ST_TO_ADDR
// end ;
4271: GO 4145
4273: POP
4274: POP
// russianOmicronAttackers := [ ] ;
4275: LD_ADDR_EXP 42
4279: PUSH
4280: EMPTY
4281: ST_TO_ADDR
// for i := 1 to 6 do
4282: LD_ADDR_VAR 0 2
4286: PUSH
4287: DOUBLE
4288: LD_INT 1
4290: DEC
4291: ST_TO_ADDR
4292: LD_INT 6
4294: PUSH
4295: FOR_TO
4296: IFFALSE 4520
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4298: LD_INT 3
4300: PPUSH
4301: LD_INT 3
4303: PPUSH
4304: LD_INT 21
4306: PUSH
4307: LD_INT 23
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_VAR 0 2
4318: PUSH
4319: LD_INT 2
4321: MOD
4322: PUSH
4323: LD_INT 1
4325: PLUS
4326: ARRAY
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: LD_INT 43
4336: PUSH
4337: LD_INT 44
4339: PUSH
4340: LD_INT 42
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_VAR 0 2
4352: PUSH
4353: LD_INT 3
4355: MOD
4356: PUSH
4357: LD_INT 1
4359: PLUS
4360: ARRAY
4361: PPUSH
4362: LD_INT 100
4364: PPUSH
4365: CALL 284 0 7
// un := CreateVehicle ;
4369: LD_ADDR_VAR 0 3
4373: PUSH
4374: CALL_OW 45
4378: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 0
4386: PUSH
4387: LD_INT 5
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 12
4404: ARRAY
4405: PPUSH
4406: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4410: LD_ADDR_EXP 42
4414: PUSH
4415: LD_EXP 42
4419: PUSH
4420: LD_VAR 0 3
4424: UNION
4425: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: LD_INT 127
4433: PPUSH
4434: LD_INT 89
4436: PPUSH
4437: LD_INT 7
4439: PPUSH
4440: LD_INT 0
4442: PPUSH
4443: CALL_OW 50
// uc_side := 3 ;
4447: LD_ADDR_OWVAR 20
4451: PUSH
4452: LD_INT 3
4454: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4455: LD_INT 0
4457: PPUSH
4458: LD_INT 3
4460: PPUSH
4461: LD_INT 3
4463: PPUSH
4464: CALL_OW 380
// un := CreateHuman ;
4468: LD_ADDR_VAR 0 3
4472: PUSH
4473: CALL_OW 44
4477: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4478: LD_ADDR_EXP 42
4482: PUSH
4483: LD_EXP 42
4487: PUSH
4488: LD_VAR 0 3
4492: UNION
4493: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_EXP 42
4503: PUSH
4504: LD_EXP 42
4508: PUSH
4509: LD_INT 1
4511: MINUS
4512: ARRAY
4513: PPUSH
4514: CALL_OW 52
// end ;
4518: GO 4295
4520: POP
4521: POP
// for i := 1 to 3 do
4522: LD_ADDR_VAR 0 2
4526: PUSH
4527: DOUBLE
4528: LD_INT 1
4530: DEC
4531: ST_TO_ADDR
4532: LD_INT 3
4534: PUSH
4535: FOR_TO
4536: IFFALSE 4602
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4538: LD_INT 0
4540: PPUSH
4541: LD_INT 1
4543: PPUSH
4544: LD_OWVAR 67
4548: PPUSH
4549: CALL_OW 380
// un := CreateHuman ;
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: CALL_OW 44
4562: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4563: LD_ADDR_EXP 42
4567: PUSH
4568: LD_EXP 42
4572: PUSH
4573: LD_VAR 0 3
4577: UNION
4578: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4579: LD_VAR 0 3
4583: PPUSH
4584: LD_INT 91
4586: PPUSH
4587: LD_INT 60
4589: PPUSH
4590: LD_INT 3
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: CALL_OW 50
// end ;
4600: GO 4535
4602: POP
4603: POP
// end ;
4604: LD_VAR 0 1
4608: RET
// every 0 0$3 do var i ;
4609: GO 4611
4611: DISABLE
4612: LD_INT 0
4614: PPUSH
// begin for i := 1 to 4 do
4615: LD_ADDR_VAR 0 1
4619: PUSH
4620: DOUBLE
4621: LD_INT 1
4623: DEC
4624: ST_TO_ADDR
4625: LD_INT 4
4627: PUSH
4628: FOR_TO
4629: IFFALSE 4648
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4631: LD_EXP 40
4635: PUSH
4636: LD_VAR 0 1
4640: ARRAY
4641: PPUSH
4642: CALL_OW 122
4646: GO 4628
4648: POP
4649: POP
// wait ( 3 ) ;
4650: LD_INT 3
4652: PPUSH
4653: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4657: LD_EXP 40
4661: PUSH
4662: LD_INT 1
4664: ARRAY
4665: PPUSH
4666: LD_INT 22
4668: PUSH
4669: LD_INT 6
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 30
4678: PUSH
4679: LD_INT 31
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 69
4694: PPUSH
4695: LD_EXP 40
4699: PUSH
4700: LD_INT 1
4702: ARRAY
4703: PPUSH
4704: CALL_OW 74
4708: PPUSH
4709: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4713: LD_EXP 40
4717: PUSH
4718: LD_INT 2
4720: ARRAY
4721: PPUSH
4722: LD_INT 211
4724: PPUSH
4725: LD_INT 107
4727: PPUSH
4728: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4732: LD_EXP 40
4736: PUSH
4737: LD_INT 2
4739: ARRAY
4740: PPUSH
4741: LD_INT 209
4743: PPUSH
4744: LD_INT 106
4746: PPUSH
4747: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4751: LD_EXP 40
4755: PUSH
4756: LD_INT 3
4758: ARRAY
4759: PPUSH
4760: LD_INT 209
4762: PPUSH
4763: LD_INT 103
4765: PPUSH
4766: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4770: LD_EXP 40
4774: PUSH
4775: LD_INT 3
4777: ARRAY
4778: PPUSH
4779: LD_INT 209
4781: PPUSH
4782: LD_INT 106
4784: PPUSH
4785: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4789: LD_EXP 40
4793: PUSH
4794: LD_INT 4
4796: ARRAY
4797: PPUSH
4798: LD_INT 227
4800: PPUSH
4801: LD_INT 117
4803: PPUSH
4804: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4808: LD_EXP 40
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PPUSH
4817: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4821: LD_INT 700
4823: PPUSH
4824: CALL_OW 67
// for i := 3 downto 2 do
4828: LD_ADDR_VAR 0 1
4832: PUSH
4833: DOUBLE
4834: LD_INT 3
4836: INC
4837: ST_TO_ADDR
4838: LD_INT 2
4840: PUSH
4841: FOR_DOWNTO
4842: IFFALSE 5009
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4844: LD_EXP 40
4848: PUSH
4849: LD_VAR 0 1
4853: ARRAY
4854: PPUSH
4855: LD_INT 200
4857: PPUSH
4858: LD_INT 91
4860: PPUSH
4861: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4865: LD_EXP 40
4869: PUSH
4870: LD_VAR 0 1
4874: ARRAY
4875: PPUSH
4876: LD_INT 210
4878: PPUSH
4879: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4883: LD_EXP 40
4887: PUSH
4888: LD_VAR 0 1
4892: ARRAY
4893: PPUSH
4894: LD_INT 224
4896: PPUSH
4897: LD_INT 93
4899: PPUSH
4900: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4904: LD_EXP 40
4908: PUSH
4909: LD_VAR 0 1
4913: ARRAY
4914: PPUSH
4915: LD_INT 210
4917: PPUSH
4918: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4922: LD_EXP 40
4926: PUSH
4927: LD_VAR 0 1
4931: ARRAY
4932: PPUSH
4933: LD_INT 239
4935: PPUSH
4936: LD_INT 123
4938: PPUSH
4939: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4943: LD_EXP 40
4947: PUSH
4948: LD_VAR 0 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 210
4956: PPUSH
4957: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4961: LD_EXP 40
4965: PUSH
4966: LD_VAR 0 1
4970: ARRAY
4971: PPUSH
4972: LD_INT 212
4974: PPUSH
4975: LD_INT 105
4977: PPUSH
4978: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4982: LD_EXP 40
4986: PUSH
4987: LD_VAR 0 1
4991: ARRAY
4992: PPUSH
4993: LD_INT 700
4995: PPUSH
4996: CALL_OW 202
// wait ( 0 0$30 ) ;
5000: LD_INT 1050
5002: PPUSH
5003: CALL_OW 67
// end ;
5007: GO 4841
5009: POP
5010: POP
// until not activeGrishkoAI ;
5011: LD_EXP 9
5015: NOT
5016: IFFALSE 4821
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5018: LD_EXP 40
5022: PPUSH
5023: LD_INT 221
5025: PPUSH
5026: LD_INT 110
5028: PPUSH
5029: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5033: LD_EXP 40
5037: PPUSH
5038: LD_INT 228
5040: PPUSH
5041: LD_INT 115
5043: PPUSH
5044: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5048: LD_EXP 40
5052: PPUSH
5053: CALL_OW 200
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5060: LD_EXP 11
5064: IFFALSE 5652
5066: GO 5068
5068: DISABLE
5069: LD_INT 0
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
// begin uc_side := 6 ;
5075: LD_ADDR_OWVAR 20
5079: PUSH
5080: LD_INT 6
5082: ST_TO_ADDR
// uc_nation := 3 ;
5083: LD_ADDR_OWVAR 21
5087: PUSH
5088: LD_INT 3
5090: ST_TO_ADDR
// for i := 1 to 3 do
5091: LD_ADDR_VAR 0 2
5095: PUSH
5096: DOUBLE
5097: LD_INT 1
5099: DEC
5100: ST_TO_ADDR
5101: LD_INT 3
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5214
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5107: LD_INT 0
5109: PPUSH
5110: LD_INT 1
5112: PPUSH
5113: LD_INT 2
5115: PUSH
5116: LD_INT 3
5118: PUSH
5119: LD_INT 4
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_OWVAR 67
5131: ARRAY
5132: PPUSH
5133: CALL_OW 380
// un := CreateHuman ;
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: CALL_OW 44
5146: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5147: LD_ADDR_EXP 41
5151: PUSH
5152: LD_EXP 41
5156: PUSH
5157: LD_VAR 0 1
5161: UNION
5162: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_INT 210
5197: PPUSH
5198: LD_INT 159
5200: PPUSH
5201: CALL_OW 111
// wait ( 0 0$2 ) ;
5205: LD_INT 70
5207: PPUSH
5208: CALL_OW 67
// end ;
5212: GO 5104
5214: POP
5215: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
5216: LD_ADDR_VAR 0 4
5220: PUSH
5221: LD_INT 172
5223: PUSH
5224: LD_INT 76
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 150
5233: PUSH
5234: LD_INT 38
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: LD_INT 148
5243: PUSH
5244: LD_INT 9
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 165
5253: PUSH
5254: LD_INT 38
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 191
5269: PUSH
5270: LD_INT 77
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 168
5279: PUSH
5280: LD_INT 42
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 166
5289: PUSH
5290: LD_INT 11
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 151
5299: PUSH
5300: LD_INT 12
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 221
5315: PUSH
5316: LD_INT 88
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 217
5325: PUSH
5326: LD_INT 64
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 208
5335: PUSH
5336: LD_INT 42
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: LIST
5352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5353: LD_INT 35
5355: PPUSH
5356: CALL_OW 67
// for i := 1 to patrol do
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: DOUBLE
5366: LD_INT 1
5368: DEC
5369: ST_TO_ADDR
5370: LD_VAR 0 4
5374: PUSH
5375: FOR_TO
5376: IFFALSE 5616
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5378: LD_EXP 41
5382: PUSH
5383: LD_VAR 0 2
5387: ARRAY
5388: PPUSH
5389: CALL_OW 256
5393: PUSH
5394: LD_INT 990
5396: LESS
5397: PUSH
5398: LD_EXP 41
5402: PUSH
5403: LD_VAR 0 2
5407: ARRAY
5408: PPUSH
5409: CALL_OW 110
5413: PUSH
5414: LD_INT 1
5416: EQUAL
5417: AND
5418: IFFALSE 5438
// SetTag ( russianPatrol [ i ] , 2 ) ;
5420: LD_EXP 41
5424: PUSH
5425: LD_VAR 0 2
5429: ARRAY
5430: PPUSH
5431: LD_INT 2
5433: PPUSH
5434: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5438: LD_EXP 41
5442: PUSH
5443: LD_VAR 0 2
5447: ARRAY
5448: PPUSH
5449: CALL_OW 110
5453: PUSH
5454: LD_INT 2
5456: EQUAL
5457: IFFALSE 5514
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5459: LD_EXP 41
5463: PUSH
5464: LD_VAR 0 2
5468: ARRAY
5469: PPUSH
5470: LD_INT 166
5472: PPUSH
5473: LD_INT 101
5475: PPUSH
5476: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5480: LD_EXP 41
5484: PUSH
5485: LD_VAR 0 2
5489: ARRAY
5490: PPUSH
5491: LD_INT 71
5493: PPUSH
5494: CALL_OW 296
5498: PUSH
5499: LD_INT 10
5501: LESS
5502: IFFALSE 5512
// russianAlert := true ;
5504: LD_ADDR_EXP 8
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// continue ;
5512: GO 5375
// end ; if not HasTask ( russianPatrol [ i ] ) then
5514: LD_EXP 41
5518: PUSH
5519: LD_VAR 0 2
5523: ARRAY
5524: PPUSH
5525: CALL_OW 314
5529: NOT
5530: IFFALSE 5614
// for j in patrol [ i ] do
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_VAR 0 4
5541: PUSH
5542: LD_VAR 0 2
5546: ARRAY
5547: PUSH
5548: FOR_IN
5549: IFFALSE 5612
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5551: LD_EXP 41
5555: PUSH
5556: LD_VAR 0 2
5560: ARRAY
5561: PPUSH
5562: LD_INT 35
5564: PPUSH
5565: LD_INT 175
5567: PPUSH
5568: CALL_OW 12
5572: PPUSH
5573: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5577: LD_EXP 41
5581: PUSH
5582: LD_VAR 0 2
5586: ARRAY
5587: PPUSH
5588: LD_VAR 0 3
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_VAR 0 3
5601: PUSH
5602: LD_INT 2
5604: ARRAY
5605: PPUSH
5606: CALL_OW 174
// end ;
5610: GO 5548
5612: POP
5613: POP
// end ;
5614: GO 5375
5616: POP
5617: POP
// until not russianPatrol or russianAlert ;
5618: LD_EXP 41
5622: NOT
5623: PUSH
5624: LD_EXP 8
5628: OR
5629: IFFALSE 5353
// if russianPatrol then
5631: LD_EXP 41
5635: IFFALSE 5652
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5637: LD_EXP 41
5641: PPUSH
5642: LD_INT 161
5644: PPUSH
5645: LD_INT 107
5647: PPUSH
5648: CALL_OW 114
// end ;
5652: PPOPN 4
5654: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5655: LD_EXP 6
5659: PUSH
5660: LD_EXP 12
5664: NOT
5665: AND
5666: IFFALSE 6107
5668: GO 5670
5670: DISABLE
5671: LD_INT 0
5673: PPUSH
5674: PPUSH
5675: PPUSH
5676: PPUSH
5677: PPUSH
// begin enable ;
5678: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5679: LD_ADDR_VAR 0 2
5683: PUSH
5684: LD_EXP 42
5688: PPUSH
5689: LD_INT 21
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PPUSH
5699: CALL_OW 72
5703: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5704: LD_ADDR_VAR 0 4
5708: PUSH
5709: LD_INT 22
5711: PUSH
5712: LD_INT 4
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PPUSH
5719: CALL_OW 69
5723: ST_TO_ADDR
// for i in filter do
5724: LD_ADDR_VAR 0 1
5728: PUSH
5729: LD_VAR 0 2
5733: PUSH
5734: FOR_IN
5735: IFFALSE 6105
// begin tmp := IsDrivenBy ( i ) ;
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 311
5751: ST_TO_ADDR
// if not tmp then
5752: LD_VAR 0 3
5756: NOT
5757: IFFALSE 5761
// continue ;
5759: GO 5734
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5761: LD_VAR 0 1
5765: PPUSH
5766: CALL_OW 261
5770: PUSH
5771: LD_INT 90
5773: GREATER
5774: PUSH
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL_OW 110
5784: PUSH
5785: LD_INT 2
5787: EQUAL
5788: AND
5789: IFFALSE 5805
// SetTag ( i , 0 ) else
5791: LD_VAR 0 1
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 109
5803: GO 5856
// if GetTag ( i ) = 2 then
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 110
5814: PUSH
5815: LD_INT 2
5817: EQUAL
5818: IFFALSE 5856
// begin x := rand ( 1 , 2 ) ;
5820: LD_ADDR_VAR 0 5
5824: PUSH
5825: LD_INT 1
5827: PPUSH
5828: LD_INT 2
5830: PPUSH
5831: CALL_OW 12
5835: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_EXP 43
5845: PUSH
5846: LD_VAR 0 5
5850: ARRAY
5851: PPUSH
5852: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5856: LD_VAR 0 1
5860: PPUSH
5861: CALL_OW 256
5865: PUSH
5866: LD_INT 600
5868: GREATEREQUAL
5869: PUSH
5870: LD_VAR 0 1
5874: PPUSH
5875: CALL_OW 110
5879: NOT
5880: AND
5881: IFFALSE 5907
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5883: LD_VAR 0 1
5887: PPUSH
5888: LD_VAR 0 4
5892: PPUSH
5893: LD_VAR 0 1
5897: PPUSH
5898: CALL_OW 74
5902: PPUSH
5903: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 256
5916: PUSH
5917: LD_INT 600
5919: LESS
5920: PUSH
5921: LD_VAR 0 1
5925: PPUSH
5926: CALL_OW 110
5930: NOT
5931: AND
5932: IFFALSE 5961
// begin SetTag ( i , 1 ) ;
5934: LD_VAR 0 1
5938: PPUSH
5939: LD_INT 1
5941: PPUSH
5942: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 62
5953: PPUSH
5954: LD_INT 22
5956: PPUSH
5957: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 110
5970: PUSH
5971: LD_INT 1
5973: EQUAL
5974: PUSH
5975: LD_VAR 0 1
5979: PPUSH
5980: LD_INT 62
5982: PPUSH
5983: LD_INT 22
5985: PPUSH
5986: CALL_OW 297
5990: PUSH
5991: LD_INT 6
5993: LESS
5994: AND
5995: PUSH
5996: LD_VAR 0 3
6000: AND
6001: IFFALSE 6103
// begin ComExitVehicle ( tmp ) ;
6003: LD_VAR 0 3
6007: PPUSH
6008: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6012: LD_VAR 0 3
6016: PPUSH
6017: LD_VAR 0 1
6021: PPUSH
6022: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6026: LD_INT 35
6028: PPUSH
6029: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6033: LD_VAR 0 1
6037: PPUSH
6038: CALL_OW 256
6042: PUSH
6043: LD_INT 1000
6045: EQUAL
6046: IFFALSE 6026
// ComEnterUnit ( tmp , i ) ;
6048: LD_VAR 0 3
6052: PPUSH
6053: LD_VAR 0 1
6057: PPUSH
6058: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6062: LD_VAR 0 1
6066: PPUSH
6067: CALL_OW 261
6071: PUSH
6072: LD_INT 90
6074: LESSEQUAL
6075: IFFALSE 6091
// SetTag ( i , 2 ) else
6077: LD_VAR 0 1
6081: PPUSH
6082: LD_INT 2
6084: PPUSH
6085: CALL_OW 109
6089: GO 6103
// SetTag ( i , 0 ) ;
6091: LD_VAR 0 1
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 109
// end ; end ;
6103: GO 5734
6105: POP
6106: POP
// end ;
6107: PPOPN 5
6109: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6110: LD_EXP 18
6114: IFFALSE 6316
6116: GO 6118
6118: DISABLE
6119: LD_INT 0
6121: PPUSH
6122: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6123: LD_EXP 43
6127: PPUSH
6128: LD_INT 79
6130: PPUSH
6131: LD_INT 155
6133: PPUSH
6134: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6138: LD_EXP 43
6142: PPUSH
6143: LD_INT 16
6145: PPUSH
6146: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: LD_EXP 42
6159: PPUSH
6160: LD_INT 50
6162: PUSH
6163: EMPTY
6164: LIST
6165: PPUSH
6166: CALL_OW 72
6170: ST_TO_ADDR
// for i in tmp do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_VAR 0 2
6180: PUSH
6181: FOR_IN
6182: IFFALSE 6216
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6184: LD_VAR 0 1
6188: PPUSH
6189: LD_INT 123
6191: PPUSH
6192: LD_INT 60
6194: PPUSH
6195: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_INT 153
6206: PPUSH
6207: LD_INT 103
6209: PPUSH
6210: CALL_OW 174
// end ;
6214: GO 6181
6216: POP
6217: POP
// repeat wait ( 0 0$1 ) ;
6218: LD_INT 35
6220: PPUSH
6221: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6225: LD_ADDR_VAR 0 2
6229: PUSH
6230: LD_EXP 42
6234: PPUSH
6235: LD_INT 50
6237: PUSH
6238: EMPTY
6239: LIST
6240: PPUSH
6241: CALL_OW 72
6245: ST_TO_ADDR
// for i in tmp do
6246: LD_ADDR_VAR 0 1
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: FOR_IN
6257: IFFALSE 6307
// if not HasTask ( i ) then
6259: LD_VAR 0 1
6263: PPUSH
6264: CALL_OW 314
6268: NOT
6269: IFFALSE 6305
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6271: LD_VAR 0 1
6275: PPUSH
6276: LD_INT 81
6278: PUSH
6279: LD_INT 3
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 69
6290: PPUSH
6291: LD_VAR 0 1
6295: PPUSH
6296: CALL_OW 74
6300: PPUSH
6301: CALL_OW 115
6305: GO 6256
6307: POP
6308: POP
6309: LD_VAR 0 2
6313: NOT
6314: IFFALSE 6218
// end ; end_of_file
6316: PPOPN 2
6318: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6319: LD_INT 0
6321: PPUSH
6322: PPUSH
6323: PPUSH
// SetBName ( omikron , omikron ) ;
6324: LD_INT 64
6326: PPUSH
6327: LD_STRING omikron
6329: PPUSH
6330: CALL_OW 500
// uc_side := 4 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 4
6341: ST_TO_ADDR
// uc_nation := 1 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 1
6349: ST_TO_ADDR
// omicronSquad := [ ] ;
6350: LD_ADDR_EXP 45
6354: PUSH
6355: EMPTY
6356: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 4
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: LD_INT 30
6377: PUSH
6378: LD_INT 32
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 30
6387: PUSH
6388: LD_INT 31
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: PUSH
6409: FOR_IN
6410: IFFALSE 6467
// begin PrepareHuman ( false , 1 , 1 ) ;
6412: LD_INT 0
6414: PPUSH
6415: LD_INT 1
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: CALL_OW 380
// un := CreateHuman ;
6425: LD_ADDR_VAR 0 3
6429: PUSH
6430: CALL_OW 44
6434: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6435: LD_ADDR_EXP 45
6439: PUSH
6440: LD_EXP 45
6444: PUSH
6445: LD_VAR 0 3
6449: UNION
6450: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6451: LD_VAR 0 3
6455: PPUSH
6456: LD_VAR 0 2
6460: PPUSH
6461: CALL_OW 52
// end ;
6465: GO 6409
6467: POP
6468: POP
// for i := 1 to 3 do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_INT 3
6481: PUSH
6482: FOR_TO
6483: IFFALSE 6538
// begin PrepareHuman ( false , 2 , 2 ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 2
6490: PPUSH
6491: LD_INT 2
6493: PPUSH
6494: CALL_OW 380
// un := CreateHuman ;
6498: LD_ADDR_VAR 0 3
6502: PUSH
6503: CALL_OW 44
6507: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6508: LD_ADDR_EXP 45
6512: PUSH
6513: LD_EXP 45
6517: PUSH
6518: LD_VAR 0 3
6522: UNION
6523: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 64
6531: PPUSH
6532: CALL_OW 52
// end ;
6536: GO 6482
6538: POP
6539: POP
// for i := 1 to 2 do
6540: LD_ADDR_VAR 0 2
6544: PUSH
6545: DOUBLE
6546: LD_INT 1
6548: DEC
6549: ST_TO_ADDR
6550: LD_INT 2
6552: PUSH
6553: FOR_TO
6554: IFFALSE 6693
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6556: LD_INT 4
6558: PPUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 2
6564: PPUSH
6565: LD_INT 2
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 3
6573: PPUSH
6574: LD_INT 100
6576: PPUSH
6577: CALL 284 0 7
// un := CreateVehicle ;
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: CALL_OW 45
6590: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6591: LD_ADDR_EXP 45
6595: PUSH
6596: LD_EXP 45
6600: PUSH
6601: LD_VAR 0 3
6605: UNION
6606: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6607: LD_VAR 0 3
6611: PPUSH
6612: LD_INT 28
6614: PPUSH
6615: LD_INT 37
6617: PPUSH
6618: LD_INT 6
6620: PPUSH
6621: LD_INT 0
6623: PPUSH
6624: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6628: LD_INT 0
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: CALL_OW 380
// un := CreateHuman ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: CALL_OW 44
6650: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6651: LD_ADDR_EXP 45
6655: PUSH
6656: LD_EXP 45
6660: PUSH
6661: LD_VAR 0 3
6665: UNION
6666: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6667: LD_VAR 0 3
6671: PPUSH
6672: LD_EXP 45
6676: PUSH
6677: LD_EXP 45
6681: PUSH
6682: LD_INT 1
6684: MINUS
6685: ARRAY
6686: PPUSH
6687: CALL_OW 52
// end ;
6691: GO 6553
6693: POP
6694: POP
// end ;
6695: LD_VAR 0 1
6699: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
// uc_side := 4 ;
6706: LD_ADDR_OWVAR 20
6710: PUSH
6711: LD_INT 4
6713: ST_TO_ADDR
// uc_nation := 1 ;
6714: LD_ADDR_OWVAR 21
6718: PUSH
6719: LD_INT 1
6721: ST_TO_ADDR
// tmp := [ ] ;
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: EMPTY
6728: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6729: LD_INT 4
6731: PPUSH
6732: LD_INT 1
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: LD_INT 1
6740: PPUSH
6741: LD_INT 1
6743: PPUSH
6744: LD_INT 4
6746: PPUSH
6747: LD_INT 77
6749: PPUSH
6750: CALL 284 0 7
// un := CreateVehicle ;
6754: LD_ADDR_VAR 0 3
6758: PUSH
6759: CALL_OW 45
6763: ST_TO_ADDR
// tmp := tmp union un ;
6764: LD_ADDR_VAR 0 4
6768: PUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 3
6778: UNION
6779: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6780: LD_VAR 0 3
6784: PPUSH
6785: LD_INT 2
6787: PPUSH
6788: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6792: LD_VAR 0 3
6796: PPUSH
6797: LD_INT 106
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: LD_INT 0
6805: PPUSH
6806: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6810: LD_INT 0
6812: PPUSH
6813: LD_INT 3
6815: PPUSH
6816: LD_INT 2
6818: PPUSH
6819: CALL_OW 380
// un := CreateHuman ;
6823: LD_ADDR_VAR 0 3
6827: PUSH
6828: CALL_OW 44
6832: ST_TO_ADDR
// tmp := tmp union un ;
6833: LD_ADDR_VAR 0 4
6837: PUSH
6838: LD_VAR 0 4
6842: PUSH
6843: LD_VAR 0 3
6847: UNION
6848: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 4
6863: PUSH
6864: LD_INT 1
6866: MINUS
6867: ARRAY
6868: PPUSH
6869: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6873: LD_VAR 0 3
6877: PPUSH
6878: LD_INT 109
6880: PPUSH
6881: LD_INT 9
6883: PPUSH
6884: CALL_OW 111
// wait ( 0 0$1 ) ;
6888: LD_INT 35
6890: PPUSH
6891: CALL_OW 67
// for i := 1 to 2 do
6895: LD_ADDR_VAR 0 2
6899: PUSH
6900: DOUBLE
6901: LD_INT 1
6903: DEC
6904: ST_TO_ADDR
6905: LD_INT 2
6907: PUSH
6908: FOR_TO
6909: IFFALSE 6973
// begin PrepareHuman ( false , 1 , 2 ) ;
6911: LD_INT 0
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: LD_INT 2
6919: PPUSH
6920: CALL_OW 380
// un := CreateHuman ;
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: CALL_OW 44
6933: ST_TO_ADDR
// tmp := tmp union un ;
6934: LD_ADDR_VAR 0 4
6938: PUSH
6939: LD_VAR 0 4
6943: PUSH
6944: LD_VAR 0 3
6948: UNION
6949: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6950: LD_VAR 0 3
6954: PPUSH
6955: LD_INT 105
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 2
6963: PPUSH
6964: LD_INT 0
6966: PPUSH
6967: CALL_OW 50
// end ;
6971: GO 6908
6973: POP
6974: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6975: LD_VAR 0 4
6979: PPUSH
6980: LD_INT 26
6982: PPUSH
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6990: LD_INT 35
6992: PPUSH
6993: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6997: LD_VAR 0 4
7001: PPUSH
7002: LD_INT 50
7004: PUSH
7005: EMPTY
7006: LIST
7007: PPUSH
7008: CALL_OW 72
7012: NOT
7013: IFFALSE 7017
// exit ;
7015: GO 7144
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7017: LD_VAR 0 4
7021: PPUSH
7022: LD_INT 91
7024: PUSH
7025: LD_INT 64
7027: PUSH
7028: LD_INT 12
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 72
7040: PUSH
7041: LD_VAR 0 4
7045: EQUAL
7046: IFFALSE 6990
// omicronSquad := omicronSquad union tmp ;
7048: LD_ADDR_EXP 45
7052: PUSH
7053: LD_EXP 45
7057: PUSH
7058: LD_VAR 0 4
7062: UNION
7063: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7064: LD_ADDR_VAR 0 2
7068: PUSH
7069: LD_VAR 0 4
7073: PPUSH
7074: LD_INT 25
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: PUSH
7089: FOR_IN
7090: IFFALSE 7142
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7092: LD_VAR 0 2
7096: PPUSH
7097: LD_INT 22
7099: PUSH
7100: LD_INT 4
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 30
7109: PUSH
7110: LD_INT 4
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: PPUSH
7126: LD_VAR 0 2
7130: PPUSH
7131: CALL_OW 74
7135: PPUSH
7136: CALL_OW 120
7140: GO 7089
7142: POP
7143: POP
// end ;
7144: LD_VAR 0 1
7148: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7149: LD_EXP 12
7153: NOT
7154: IFFALSE 7725
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
7164: PPUSH
// begin enable ;
7165: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7166: LD_ADDR_VAR 0 2
7170: PUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 4
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 3
7193: PUSH
7194: LD_INT 24
7196: PUSH
7197: LD_INT 1000
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_EXP 45
7227: PPUSH
7228: LD_INT 25
7230: PUSH
7231: LD_INT 2
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PPUSH
7238: CALL_OW 72
7242: ST_TO_ADDR
// if filter and tmp then
7243: LD_VAR 0 2
7247: PUSH
7248: LD_VAR 0 3
7252: AND
7253: IFFALSE 7326
// begin for i in tmp do
7255: LD_ADDR_VAR 0 1
7259: PUSH
7260: LD_VAR 0 3
7264: PUSH
7265: FOR_IN
7266: IFFALSE 7322
// if IsInUnit ( i ) then
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 310
7277: IFFALSE 7290
// ComExitBuilding ( i ) else
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 122
7288: GO 7320
// if not HasTask ( i ) then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 314
7299: NOT
7300: IFFALSE 7320
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7302: LD_VAR 0 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_INT 1
7314: ARRAY
7315: PPUSH
7316: CALL_OW 130
7320: GO 7265
7322: POP
7323: POP
// end else
7324: GO 7397
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7326: LD_VAR 0 3
7330: PPUSH
7331: LD_INT 3
7333: PUSH
7334: LD_INT 54
7336: PUSH
7337: EMPTY
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 72
7348: IFFALSE 7397
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_INT 3
7362: PUSH
7363: LD_INT 54
7365: PUSH
7366: EMPTY
7367: LIST
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PPUSH
7373: CALL_OW 72
7377: PUSH
7378: FOR_IN
7379: IFFALSE 7395
// ComEnterUnit ( i , omikron ) ;
7381: LD_VAR 0 1
7385: PPUSH
7386: LD_INT 64
7388: PPUSH
7389: CALL_OW 120
7393: GO 7378
7395: POP
7396: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_EXP 45
7406: PPUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PPUSH
7417: CALL_OW 72
7421: ST_TO_ADDR
// if not filter then
7422: LD_VAR 0 2
7426: NOT
7427: IFFALSE 7431
// exit ;
7429: GO 7725
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7431: LD_ADDR_VAR 0 4
7435: PUSH
7436: LD_INT 13
7438: PPUSH
7439: LD_INT 81
7441: PUSH
7442: LD_INT 4
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL_OW 70
7453: ST_TO_ADDR
// if enemy then
7454: LD_VAR 0 4
7458: IFFALSE 7725
// begin for i in filter do
7460: LD_ADDR_VAR 0 1
7464: PUSH
7465: LD_VAR 0 2
7469: PUSH
7470: FOR_IN
7471: IFFALSE 7723
// begin tmp := IsDrivenBy ( i ) ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 311
7487: ST_TO_ADDR
// if not tmp then
7488: LD_VAR 0 3
7492: NOT
7493: IFFALSE 7497
// continue ;
7495: GO 7470
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7497: LD_VAR 0 1
7501: PPUSH
7502: CALL_OW 256
7506: PUSH
7507: LD_INT 600
7509: GREATEREQUAL
7510: PUSH
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 110
7520: PUSH
7521: LD_INT 1
7523: NONEQUAL
7524: AND
7525: IFFALSE 7551
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7527: LD_VAR 0 1
7531: PPUSH
7532: LD_VAR 0 4
7536: PPUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: CALL_OW 74
7546: PPUSH
7547: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7551: LD_VAR 0 1
7555: PPUSH
7556: CALL_OW 256
7560: PUSH
7561: LD_INT 600
7563: LESS
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 110
7574: PUSH
7575: LD_INT 1
7577: NONEQUAL
7578: AND
7579: IFFALSE 7608
// begin SetTag ( i , 1 ) ;
7581: LD_VAR 0 1
7585: PPUSH
7586: LD_INT 1
7588: PPUSH
7589: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7593: LD_VAR 0 1
7597: PPUSH
7598: LD_INT 27
7600: PPUSH
7601: LD_INT 35
7603: PPUSH
7604: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7608: LD_VAR 0 1
7612: PPUSH
7613: CALL_OW 110
7617: PUSH
7618: LD_INT 1
7620: EQUAL
7621: PUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: LD_INT 27
7629: PPUSH
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 297
7637: PUSH
7638: LD_INT 6
7640: LESS
7641: AND
7642: PUSH
7643: LD_VAR 0 3
7647: AND
7648: IFFALSE 7721
// begin ComExitVehicle ( tmp ) ;
7650: LD_VAR 0 3
7654: PPUSH
7655: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7659: LD_VAR 0 3
7663: PPUSH
7664: LD_VAR 0 1
7668: PPUSH
7669: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7673: LD_INT 35
7675: PPUSH
7676: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 256
7689: PUSH
7690: LD_INT 1000
7692: EQUAL
7693: IFFALSE 7673
// ComEnterUnit ( tmp , i ) ;
7695: LD_VAR 0 3
7699: PPUSH
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 120
// SetTag ( i , 0 ) ;
7709: LD_VAR 0 1
7713: PPUSH
7714: LD_INT 0
7716: PPUSH
7717: CALL_OW 109
// end ; end ;
7721: GO 7470
7723: POP
7724: POP
// end ; end ;
7725: PPOPN 4
7727: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7728: LD_EXP 12
7732: IFFALSE 7876
7734: GO 7736
7736: DISABLE
7737: LD_INT 0
7739: PPUSH
7740: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7741: LD_ADDR_VAR 0 2
7745: PUSH
7746: LD_EXP 45
7750: PPUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 50
7763: PUSH
7764: EMPTY
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 72
7775: ST_TO_ADDR
// if not tmp then
7776: LD_VAR 0 2
7780: NOT
7781: IFFALSE 7785
// exit ;
7783: GO 7876
// repeat wait ( 0 0$1 ) ;
7785: LD_INT 35
7787: PPUSH
7788: CALL_OW 67
// for i in tmp do
7792: LD_ADDR_VAR 0 1
7796: PUSH
7797: LD_VAR 0 2
7801: PUSH
7802: FOR_IN
7803: IFFALSE 7867
// begin ComExit ( i ) ;
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL 1056 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7814: LD_VAR 0 1
7818: PPUSH
7819: LD_INT 14
7821: PPUSH
7822: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7826: LD_VAR 0 1
7830: PPUSH
7831: LD_INT 14
7833: PPUSH
7834: CALL_OW 308
7838: IFFALSE 7865
// begin tmp := tmp diff i ;
7840: LD_ADDR_VAR 0 2
7844: PUSH
7845: LD_VAR 0 2
7849: PUSH
7850: LD_VAR 0 1
7854: DIFF
7855: ST_TO_ADDR
// RemoveUnit ( i ) ;
7856: LD_VAR 0 1
7860: PPUSH
7861: CALL_OW 64
// end ; end ;
7865: GO 7802
7867: POP
7868: POP
// until not tmp ;
7869: LD_VAR 0 2
7873: NOT
7874: IFFALSE 7785
// end ; end_of_file
7876: PPOPN 2
7878: END
// export function Action ; var i , un , veh , tmp ; begin
7879: LD_INT 0
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// InGameOn ;
7886: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7890: LD_INT 179
7892: PPUSH
7893: LD_INT 5
7895: PPUSH
7896: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7900: LD_ADDR_VAR 0 4
7904: PUSH
7905: LD_INT 2
7907: PPUSH
7908: LD_INT 2
7910: PPUSH
7911: LD_INT 12
7913: PPUSH
7914: LD_INT 1
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: LD_INT 24
7922: PPUSH
7923: LD_INT 33
7925: PPUSH
7926: CALL 284 0 7
7930: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7931: LD_VAR 0 4
7935: PPUSH
7936: LD_INT 2
7938: PPUSH
7939: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 178
7950: PPUSH
7951: LD_INT 2
7953: PPUSH
7954: LD_INT 0
7956: PPUSH
7957: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7961: LD_EXP 20
7965: PPUSH
7966: LD_VAR 0 4
7970: PPUSH
7971: CALL_OW 52
// if Kamil then
7975: LD_EXP 24
7979: IFFALSE 8014
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7981: LD_EXP 24
7985: PPUSH
7986: LD_INT 207
7988: PPUSH
7989: LD_INT 37
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7999: LD_EXP 24
8003: PPUSH
8004: LD_INT 211
8006: PPUSH
8007: LD_INT 38
8009: PPUSH
8010: CALL_OW 118
// end ; if Sophia then
8014: LD_EXP 26
8018: IFFALSE 8053
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8020: LD_EXP 26
8024: PPUSH
8025: LD_INT 209
8027: PPUSH
8028: LD_INT 40
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8038: LD_EXP 26
8042: PPUSH
8043: LD_INT 211
8045: PPUSH
8046: LD_INT 38
8048: PPUSH
8049: CALL_OW 118
// end ; if Givi then
8053: LD_EXP 21
8057: IFFALSE 8092
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8059: LD_EXP 21
8063: PPUSH
8064: LD_INT 201
8066: PPUSH
8067: LD_INT 34
8069: PPUSH
8070: LD_INT 0
8072: PPUSH
8073: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8077: LD_EXP 21
8081: PPUSH
8082: LD_INT 206
8084: PPUSH
8085: LD_INT 36
8087: PPUSH
8088: CALL_OW 118
// end ; if Markov then
8092: LD_EXP 27
8096: IFFALSE 8183
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8098: LD_ADDR_VAR 0 4
8102: PUSH
8103: LD_INT 2
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 13
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: LD_INT 1
8117: PPUSH
8118: LD_INT 25
8120: PPUSH
8121: LD_INT 80
8123: PUSH
8124: LD_INT 20
8126: PUSH
8127: LD_OWVAR 67
8131: MUL
8132: MINUS
8133: PPUSH
8134: CALL 284 0 7
8138: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8139: LD_VAR 0 4
8143: PPUSH
8144: LD_INT 2
8146: PPUSH
8147: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8151: LD_VAR 0 4
8155: PPUSH
8156: LD_INT 197
8158: PPUSH
8159: LD_INT 35
8161: PPUSH
8162: LD_INT 0
8164: PPUSH
8165: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8169: LD_EXP 27
8173: PPUSH
8174: LD_VAR 0 4
8178: PPUSH
8179: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8183: LD_ADDR_VAR 0 5
8187: PUSH
8188: LD_EXP 25
8192: PUSH
8193: LD_EXP 31
8197: UNION
8198: ST_TO_ADDR
// for i in tmp do
8199: LD_ADDR_VAR 0 2
8203: PUSH
8204: LD_VAR 0 5
8208: PUSH
8209: FOR_IN
8210: IFFALSE 8244
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8212: LD_VAR 0 2
8216: PPUSH
8217: LD_INT 203
8219: PPUSH
8220: LD_INT 41
8222: PPUSH
8223: LD_INT 6
8225: PPUSH
8226: LD_INT 0
8228: PPUSH
8229: CALL_OW 50
// ComHold ( i ) ;
8233: LD_VAR 0 2
8237: PPUSH
8238: CALL_OW 140
// end ;
8242: GO 8209
8244: POP
8245: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8246: LD_INT 22
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 25
8258: PUSH
8259: LD_INT 2
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 69
8274: NOT
8275: IFFALSE 8289
// SetClass ( Heike , 2 ) ;
8277: LD_EXP 20
8281: PPUSH
8282: LD_INT 2
8284: PPUSH
8285: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8289: LD_EXP 20
8293: PPUSH
8294: LD_INT 183
8296: PPUSH
8297: LD_INT 12
8299: PPUSH
8300: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8304: LD_EXP 20
8308: PPUSH
8309: LD_INT 188
8311: PPUSH
8312: LD_INT 20
8314: PPUSH
8315: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8319: LD_EXP 20
8323: PPUSH
8324: LD_INT 191
8326: PPUSH
8327: LD_INT 25
8329: PPUSH
8330: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8334: LD_EXP 20
8338: PPUSH
8339: LD_INT 203
8341: PPUSH
8342: LD_INT 29
8344: PPUSH
8345: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8349: LD_EXP 20
8353: PPUSH
8354: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8358: LD_INT 35
8360: PPUSH
8361: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8365: LD_EXP 20
8369: PPUSH
8370: CALL_OW 310
8374: NOT
8375: IFFALSE 8358
// CenterOnUnits ( Heike ) ;
8377: LD_EXP 20
8381: PPUSH
8382: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8386: LD_ADDR_VAR 0 5
8390: PUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 21
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 69
8419: PUSH
8420: LD_EXP 20
8424: PUSH
8425: LD_EXP 27
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: DIFF
8434: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8435: LD_VAR 0 5
8439: PPUSH
8440: LD_EXP 20
8444: PPUSH
8445: CALL_OW 119
// if Givi then
8449: LD_EXP 21
8453: IFFALSE 8471
// ComTurnUnit ( Heike , Givi ) else
8455: LD_EXP 20
8459: PPUSH
8460: LD_EXP 21
8464: PPUSH
8465: CALL_OW 119
8469: GO 8489
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8471: LD_EXP 20
8475: PPUSH
8476: LD_VAR 0 5
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8489: LD_EXP 20
8493: PPUSH
8494: LD_STRING DH-Start-1
8496: PPUSH
8497: CALL_OW 88
// if Givi then
8501: LD_EXP 21
8505: IFFALSE 8552
// begin Say ( Givi , DG-Start-2 ) ;
8507: LD_EXP 21
8511: PPUSH
8512: LD_STRING DG-Start-2
8514: PPUSH
8515: CALL_OW 88
// if not Mike then
8519: LD_EXP 22
8523: NOT
8524: IFFALSE 8550
// begin Say ( Givi , DG-Start-b-3 ) ;
8526: LD_EXP 21
8530: PPUSH
8531: LD_STRING DG-Start-b-3
8533: PPUSH
8534: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8538: LD_EXP 20
8542: PPUSH
8543: LD_STRING DH-Start-b-4
8545: PPUSH
8546: CALL_OW 88
// end ; end else
8550: GO 8617
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8552: LD_EXP 31
8556: PPUSH
8557: LD_INT 26
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PPUSH
8567: CALL_OW 72
8571: PUSH
8572: LD_INT 1
8574: ARRAY
8575: PPUSH
8576: LD_STRING DArm-Start-a-2
8578: PPUSH
8579: CALL_OW 88
8583: NOT
8584: IFFALSE 8617
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8586: LD_EXP 31
8590: PPUSH
8591: LD_INT 26
8593: PUSH
8594: LD_INT 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 72
8605: PUSH
8606: LD_INT 1
8608: ARRAY
8609: PPUSH
8610: LD_STRING DArf-Start-a-2
8612: PPUSH
8613: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8617: LD_EXP 20
8621: PPUSH
8622: LD_INT 211
8624: PPUSH
8625: LD_INT 38
8627: PPUSH
8628: CALL_OW 118
// wait ( 0 0$1 ) ;
8632: LD_INT 35
8634: PPUSH
8635: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8639: LD_EXP 20
8643: PPUSH
8644: LD_STRING DH-Start-3
8646: PPUSH
8647: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8651: LD_EXP 20
8655: PPUSH
8656: LD_STRING DH-Start-4
8658: PPUSH
8659: CALL_OW 88
// InGameOff ;
8663: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8667: LD_STRING Prepare
8669: PPUSH
8670: CALL_OW 337
// wait ( 0 0$10 ) ;
8674: LD_INT 350
8676: PPUSH
8677: CALL_OW 67
// if not Aviradze then
8681: LD_EXP 30
8685: NOT
8686: IFFALSE 8690
// exit ;
8688: GO 8882
// SetDir ( Aviradze , 4 ) ;
8690: LD_EXP 30
8694: PPUSH
8695: LD_INT 4
8697: PPUSH
8698: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8702: LD_EXP 30
8706: PPUSH
8707: LD_INT 225
8709: PPUSH
8710: LD_INT 33
8712: PPUSH
8713: LD_INT 0
8715: PPUSH
8716: CALL_OW 48
// for i := 1 to 2 do
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: DOUBLE
8726: LD_INT 1
8728: DEC
8729: ST_TO_ADDR
8730: LD_INT 2
8732: PUSH
8733: FOR_TO
8734: IFFALSE 8865
// begin uc_side := 2 ;
8736: LD_ADDR_OWVAR 20
8740: PUSH
8741: LD_INT 2
8743: ST_TO_ADDR
// uc_nation := 0 ;
8744: LD_ADDR_OWVAR 21
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8752: LD_INT 0
8754: PPUSH
8755: LD_INT 12
8757: PPUSH
8758: LD_INT 1
8760: PPUSH
8761: CALL_OW 380
// hc_gallery :=  ;
8765: LD_ADDR_OWVAR 33
8769: PUSH
8770: LD_STRING 
8772: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8773: LD_ADDR_OWVAR 26
8777: PUSH
8778: LD_STRING Artudito
8780: PUSH
8781: LD_STRING Textur
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_VAR 0 2
8792: ARRAY
8793: ST_TO_ADDR
// un := CreateHuman ;
8794: LD_ADDR_VAR 0 3
8798: PUSH
8799: CALL_OW 44
8803: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8804: LD_VAR 0 3
8808: PPUSH
8809: LD_INT 224
8811: PUSH
8812: LD_INT 226
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_VAR 0 2
8823: ARRAY
8824: PPUSH
8825: LD_INT 31
8827: PUSH
8828: LD_INT 35
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_VAR 0 2
8839: ARRAY
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 215
8855: PPUSH
8856: LD_INT 36
8858: PPUSH
8859: CALL_OW 111
// end ;
8863: GO 8733
8865: POP
8866: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8867: LD_EXP 30
8871: PPUSH
8872: LD_INT 215
8874: PPUSH
8875: LD_INT 36
8877: PPUSH
8878: CALL_OW 111
// end ;
8882: LD_VAR 0 1
8886: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8887: LD_EXP 3
8891: IFFALSE 10080
8893: GO 8895
8895: DISABLE
8896: LD_INT 0
8898: PPUSH
8899: PPUSH
8900: PPUSH
// begin DialogueOn ;
8901: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8905: LD_EXP 20
8909: PPUSH
8910: LD_STRING DH-base-1
8912: PPUSH
8913: CALL_OW 88
// if Markov then
8917: LD_EXP 27
8921: IFFALSE 8973
// begin Say ( Markov , DMar-base-2 ) ;
8923: LD_EXP 27
8927: PPUSH
8928: LD_STRING DMar-base-2
8930: PPUSH
8931: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8935: LD_EXP 27
8939: PPUSH
8940: LD_STRING DMar-base-3
8942: PPUSH
8943: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8947: LD_EXP 20
8951: PPUSH
8952: LD_STRING DH-base-4
8954: PPUSH
8955: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8959: LD_EXP 27
8963: PPUSH
8964: LD_STRING DMar-base-5
8966: PPUSH
8967: CALL_OW 88
// end else
8971: GO 9050
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8973: LD_EXP 31
8977: PPUSH
8978: LD_INT 26
8980: PUSH
8981: LD_INT 1
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 72
8992: PUSH
8993: LD_INT 1
8995: ARRAY
8996: PPUSH
8997: LD_STRING DArm-base-a-2
8999: PPUSH
9000: CALL_OW 88
9004: NOT
9005: IFFALSE 9038
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9007: LD_EXP 31
9011: PPUSH
9012: LD_INT 26
9014: PUSH
9015: LD_INT 2
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 72
9026: PUSH
9027: LD_INT 1
9029: ARRAY
9030: PPUSH
9031: LD_STRING DArf-base-a-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9038: LD_EXP 20
9042: PPUSH
9043: LD_STRING DH-base-a-3
9045: PPUSH
9046: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9050: LD_EXP 30
9054: PPUSH
9055: LD_STRING DA-base-6
9057: PPUSH
9058: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9062: LD_EXP 30
9066: PPUSH
9067: LD_STRING DA-base-7
9069: PPUSH
9070: CALL_OW 88
// DialogueOff ;
9074: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9078: LD_STRING Flamethrower
9080: PPUSH
9081: CALL_OW 337
// wait ( 2 2$00 ) ;
9085: LD_INT 4200
9087: PPUSH
9088: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9092: LD_EXP 29
9096: PUSH
9097: LD_EXP 22
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PPUSH
9106: LD_INT 203
9108: PPUSH
9109: LD_INT 37
9111: PPUSH
9112: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9116: LD_INT 22
9118: PUSH
9119: LD_INT 2
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 92
9128: PUSH
9129: LD_INT 203
9131: PUSH
9132: LD_INT 37
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PPUSH
9148: CALL_OW 69
9152: NOT
9153: IFFALSE 9193
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9155: LD_EXP 29
9159: PUSH
9160: LD_EXP 22
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PPUSH
9169: LD_EXP 20
9173: PPUSH
9174: CALL_OW 250
9178: PPUSH
9179: LD_EXP 20
9183: PPUSH
9184: CALL_OW 251
9188: PPUSH
9189: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9193: LD_INT 35
9195: PPUSH
9196: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
9200: LD_INT 2
9202: PPUSH
9203: LD_EXP 29
9207: PPUSH
9208: CALL_OW 292
9212: PUSH
9213: LD_EXP 29
9217: PPUSH
9218: LD_EXP 20
9222: PPUSH
9223: CALL_OW 296
9227: PUSH
9228: LD_INT 8
9230: LESS
9231: OR
9232: IFFALSE 9193
// InGameOn ;
9234: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9238: LD_EXP 29
9242: PPUSH
9243: CALL_OW 87
// if IsInUnit ( Heike ) then
9247: LD_EXP 20
9251: PPUSH
9252: CALL_OW 310
9256: IFFALSE 9267
// ComExitBuilding ( Heike ) ;
9258: LD_EXP 20
9262: PPUSH
9263: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9267: LD_EXP 29
9271: PUSH
9272: LD_EXP 22
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: LD_EXP 20
9285: PPUSH
9286: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9290: LD_EXP 20
9294: PPUSH
9295: LD_EXP 29
9299: PPUSH
9300: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9304: LD_INT 22
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 91
9316: PUSH
9317: LD_EXP 29
9321: PUSH
9322: LD_INT 10
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 21
9332: PUSH
9333: LD_INT 3
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 69
9349: IFFALSE 9375
// begin Say ( Kurt , DKs-scout-1 ) ;
9351: LD_EXP 29
9355: PPUSH
9356: LD_STRING DKs-scout-1
9358: PPUSH
9359: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9363: LD_EXP 20
9367: PPUSH
9368: LD_STRING DH-scout-2
9370: PPUSH
9371: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9375: LD_INT 35
9377: PPUSH
9378: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9382: LD_EXP 20
9386: PPUSH
9387: LD_EXP 29
9391: PPUSH
9392: CALL_OW 296
9396: PUSH
9397: LD_INT 6
9399: LESS
9400: IFFALSE 9375
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9402: LD_EXP 29
9406: PUSH
9407: LD_EXP 22
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: LD_EXP 20
9420: PPUSH
9421: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9425: LD_EXP 29
9429: PPUSH
9430: LD_STRING DKs-scout-3
9432: PPUSH
9433: CALL_OW 88
// if Kaia then
9437: LD_EXP 25
9441: IFFALSE 9624
// begin if IsInUnit ( Kaia ) then
9443: LD_EXP 25
9447: PPUSH
9448: CALL_OW 310
9452: IFFALSE 9463
// ComExitBuilding ( Kaia ) ;
9454: LD_EXP 25
9458: PPUSH
9459: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9463: LD_EXP 25
9467: PPUSH
9468: LD_EXP 29
9472: PPUSH
9473: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9477: LD_INT 35
9479: PPUSH
9480: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9484: LD_EXP 25
9488: PPUSH
9489: LD_EXP 29
9493: PPUSH
9494: CALL_OW 296
9498: PUSH
9499: LD_INT 6
9501: LESS
9502: IFFALSE 9477
// ComTurnUnit ( Kaia , Kurt ) ;
9504: LD_EXP 25
9508: PPUSH
9509: LD_EXP 29
9513: PPUSH
9514: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9518: LD_EXP 25
9522: PPUSH
9523: LD_STRING DK-scout-4
9525: PPUSH
9526: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9530: LD_EXP 29
9534: PPUSH
9535: LD_EXP 25
9539: PPUSH
9540: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9544: LD_EXP 29
9548: PPUSH
9549: LD_STRING DKs-scout-5
9551: PPUSH
9552: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9556: LD_EXP 25
9560: PPUSH
9561: LD_STRING DK-scout-6
9563: PPUSH
9564: CALL_OW 88
// if Mike then
9568: LD_EXP 22
9572: IFFALSE 9624
// begin Say ( Mike , DM-scout-7 ) ;
9574: LD_EXP 22
9578: PPUSH
9579: LD_STRING DM-scout-7
9581: PPUSH
9582: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9586: LD_EXP 25
9590: PPUSH
9591: LD_EXP 22
9595: PPUSH
9596: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9600: LD_EXP 25
9604: PPUSH
9605: LD_STRING DK-scout-8
9607: PPUSH
9608: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9612: LD_EXP 22
9616: PPUSH
9617: LD_STRING DM-scout-9
9619: PPUSH
9620: CALL_OW 88
// end ; end ; ShowArea ( 2 , scoutArea ) ;
9624: LD_INT 2
9626: PPUSH
9627: LD_INT 9
9629: PPUSH
9630: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
9634: LD_INT 184
9636: PPUSH
9637: LD_INT 100
9639: PPUSH
9640: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9644: LD_EXP 29
9648: PPUSH
9649: LD_STRING DKs-scout-10
9651: PPUSH
9652: CALL_OW 88
// wait ( 0 0$1 ) ;
9656: LD_INT 35
9658: PPUSH
9659: CALL_OW 67
// ShowArea ( 2 , hillArea ) ;
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 10
9668: PPUSH
9669: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
9673: LD_INT 144
9675: PPUSH
9676: LD_INT 65
9678: PPUSH
9679: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9683: LD_EXP 29
9687: PPUSH
9688: LD_STRING DKs-scout-11
9690: PPUSH
9691: CALL_OW 88
// wait ( 0 0$1 ) ;
9695: LD_INT 35
9697: PPUSH
9698: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9702: LD_EXP 29
9706: PPUSH
9707: CALL_OW 87
// if Mike and not Givi then
9711: LD_EXP 22
9715: PUSH
9716: LD_EXP 21
9720: NOT
9721: AND
9722: IFFALSE 9748
// begin Say ( Mike , DM-scout-a-1 ) ;
9724: LD_EXP 22
9728: PPUSH
9729: LD_STRING DM-scout-a-1
9731: PPUSH
9732: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9736: LD_EXP 20
9740: PPUSH
9741: LD_STRING DH-scout-a-2
9743: PPUSH
9744: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9748: LD_EXP 29
9752: PUSH
9753: LD_EXP 22
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: LD_INT 2
9764: PPUSH
9765: CALL_OW 235
// InGameOff ;
9769: CALL_OW 9
// allowToPatrol := true ;
9773: LD_ADDR_EXP 11
9777: PUSH
9778: LD_INT 1
9780: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9781: LD_INT 3150
9783: PPUSH
9784: CALL_OW 67
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9788: LD_ADDR_VAR 0 1
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_INT 3
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: LD_OWVAR 67
9816: ARRAY
9817: PUSH
9818: FOR_TO
9819: IFFALSE 10078
// begin uc_side := 2 ;
9821: LD_ADDR_OWVAR 20
9825: PUSH
9826: LD_INT 2
9828: ST_TO_ADDR
// uc_nation := 2 ;
9829: LD_ADDR_OWVAR 21
9833: PUSH
9834: LD_INT 2
9836: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
9837: LD_INT 0
9839: PPUSH
9840: LD_INT 1
9842: PUSH
9843: LD_INT 3
9845: PUSH
9846: LD_INT 1
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: LD_VAR 0 1
9858: PUSH
9859: LD_INT 3
9861: MOD
9862: PUSH
9863: LD_INT 1
9865: PLUS
9866: ARRAY
9867: PPUSH
9868: LD_INT 3
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PUSH
9882: LD_OWVAR 67
9886: ARRAY
9887: PPUSH
9888: CALL_OW 380
// un := CreateHuman ;
9892: LD_ADDR_VAR 0 2
9896: PUSH
9897: CALL_OW 44
9901: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
9902: LD_ADDR_EXP 31
9906: PUSH
9907: LD_EXP 31
9911: PUSH
9912: LD_VAR 0 2
9916: UNION
9917: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
9918: LD_INT 2
9920: PPUSH
9921: LD_INT 2
9923: PPUSH
9924: LD_INT 13
9926: PPUSH
9927: LD_INT 2
9929: PUSH
9930: LD_INT 1
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_VAR 0 1
9941: PUSH
9942: LD_INT 2
9944: MOD
9945: PUSH
9946: LD_INT 1
9948: PLUS
9949: ARRAY
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: LD_INT 27
9956: PUSH
9957: LD_INT 25
9959: PUSH
9960: LD_INT 27
9962: PUSH
9963: LD_INT 23
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: PUSH
9972: LD_OWVAR 67
9976: PUSH
9977: LD_INT 0
9979: PPUSH
9980: LD_INT 1
9982: PPUSH
9983: CALL_OW 12
9987: PLUS
9988: ARRAY
9989: PPUSH
9990: LD_INT 77
9992: PPUSH
9993: CALL 284 0 7
// veh := CreateVehicle ;
9997: LD_ADDR_VAR 0 3
10001: PUSH
10002: CALL_OW 45
10006: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 2
10014: PPUSH
10015: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10019: LD_VAR 0 3
10023: PPUSH
10024: LD_INT 178
10026: PPUSH
10027: LD_INT 2
10029: PPUSH
10030: LD_INT 2
10032: PPUSH
10033: LD_INT 0
10035: PPUSH
10036: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10040: LD_VAR 0 2
10044: PPUSH
10045: LD_VAR 0 3
10049: PPUSH
10050: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10054: LD_VAR 0 2
10058: PPUSH
10059: LD_INT 183
10061: PPUSH
10062: LD_INT 11
10064: PPUSH
10065: CALL_OW 111
// wait ( 0 0$2 ) ;
10069: LD_INT 70
10071: PPUSH
10072: CALL_OW 67
// end ;
10076: GO 9818
10078: POP
10079: POP
// end ;
10080: PPOPN 3
10082: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10083: LD_EXP 4
10087: PUSH
10088: LD_EXP 30
10092: PPUSH
10093: CALL_OW 302
10097: AND
10098: IFFALSE 10147
10100: GO 10102
10102: DISABLE
// begin DialogueOn ;
10103: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10107: LD_EXP 30
10111: PPUSH
10112: LD_STRING DA-lab-1
10114: PPUSH
10115: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10119: LD_EXP 30
10123: PPUSH
10124: LD_STRING DA-lab-2
10126: PPUSH
10127: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10131: LD_EXP 20
10135: PPUSH
10136: LD_STRING DH-lab-3
10138: PPUSH
10139: CALL_OW 88
// DialogueOff ;
10143: CALL_OW 7
// end ;
10147: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10148: LD_INT 17
10150: PPUSH
10151: LD_INT 2
10153: PPUSH
10154: CALL_OW 321
10158: PUSH
10159: LD_INT 2
10161: EQUAL
10162: IFFALSE 10294
10164: GO 10166
10166: DISABLE
10167: LD_INT 0
10169: PPUSH
// begin DialogueOn ;
10170: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10174: LD_EXP 30
10178: PPUSH
10179: LD_STRING DA-Cam-1
10181: PPUSH
10182: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10186: LD_EXP 30
10190: PPUSH
10191: LD_STRING DA-Cam-2
10193: PPUSH
10194: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10198: LD_EXP 30
10202: PPUSH
10203: LD_STRING DA-Cam-3
10205: PPUSH
10206: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10210: LD_EXP 20
10214: PPUSH
10215: LD_STRING DH-Cam-4
10217: PPUSH
10218: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10222: LD_EXP 25
10226: PPUSH
10227: LD_STRING DK-Cam-5
10229: PPUSH
10230: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10234: LD_EXP 25
10238: PPUSH
10239: LD_STRING DK-Cam-6
10241: PPUSH
10242: CALL_OW 88
// DialogueOff ;
10246: CALL_OW 7
// Query ( Camera ) ;
10250: LD_STRING Camera
10252: PPUSH
10253: CALL_OW 97
// hiddenCameraAllowed := true ;
10257: LD_ADDR_EXP 5
10261: PUSH
10262: LD_INT 1
10264: ST_TO_ADDR
// for i in camAreas do
10265: LD_ADDR_VAR 0 1
10269: PUSH
10270: LD_EXP 7
10274: PUSH
10275: FOR_IN
10276: IFFALSE 10292
// SetAreaMapShow ( i , 1 ) ;
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 424
10290: GO 10275
10292: POP
10293: POP
// end ;
10294: PPOPN 1
10296: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10297: LD_EXP 7
10301: NOT
10302: PUSH
10303: LD_EXP 5
10307: AND
10308: IFFALSE 10399
10310: GO 10312
10312: DISABLE
10313: LD_INT 0
10315: PPUSH
// begin stop_talking := true ;
10316: LD_ADDR_OWVAR 56
10320: PUSH
10321: LD_INT 1
10323: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10324: LD_ADDR_VAR 0 1
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 21
10341: PUSH
10342: LD_INT 1
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 23
10351: PUSH
10352: LD_INT 2
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: LIST
10363: PPUSH
10364: CALL_OW 69
10368: PUSH
10369: FOR_IN
10370: IFFALSE 10389
// AddExperience ( i , 2 , 450 ) ;
10372: LD_VAR 0 1
10376: PPUSH
10377: LD_INT 2
10379: PPUSH
10380: LD_INT 450
10382: PPUSH
10383: CALL_OW 492
10387: GO 10369
10389: POP
10390: POP
// stop_talking := false ;
10391: LD_ADDR_OWVAR 56
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// end ;
10399: PPOPN 1
10401: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
10402: LD_EXP 8
10406: PUSH
10407: LD_EXP 10
10411: NOT
10412: AND
10413: IFFALSE 10425
10415: GO 10417
10417: DISABLE
// YouLost ( Spotted ) ;
10418: LD_STRING Spotted
10420: PPUSH
10421: CALL_OW 104
10425: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10426: LD_INT 2
10428: PUSH
10429: LD_INT 22
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 6
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 101
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: PUSH
10473: LD_EXP 41
10477: DIFF
10478: IFFALSE 10491
10480: GO 10482
10482: DISABLE
// russianAlert := true ;
10483: LD_ADDR_EXP 8
10487: PUSH
10488: LD_INT 1
10490: ST_TO_ADDR
10491: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10492: LD_EXP 8
10496: IFFALSE 10793
10498: GO 10500
10500: DISABLE
10501: LD_INT 0
10503: PPUSH
10504: PPUSH
10505: PPUSH
10506: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10507: LD_ADDR_VAR 0 2
10511: PUSH
10512: LD_EXP 38
10516: PPUSH
10517: LD_INT 25
10519: PUSH
10520: LD_INT 1
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 54
10529: PUSH
10530: EMPTY
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PPUSH
10537: CALL_OW 72
10541: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
10542: LD_ADDR_VAR 0 3
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 6
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 30
10559: PUSH
10560: LD_INT 32
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: ST_TO_ADDR
// for i := 1 to tmp do
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: DOUBLE
10582: LD_INT 1
10584: DEC
10585: ST_TO_ADDR
10586: LD_VAR 0 2
10590: PUSH
10591: FOR_TO
10592: IFFALSE 10637
// begin ComExitBuilding ( tmp [ i ] ) ;
10594: LD_VAR 0 2
10598: PUSH
10599: LD_VAR 0 1
10603: ARRAY
10604: PPUSH
10605: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
10609: LD_VAR 0 2
10613: PUSH
10614: LD_VAR 0 1
10618: ARRAY
10619: PPUSH
10620: LD_VAR 0 3
10624: PUSH
10625: LD_VAR 0 1
10629: ARRAY
10630: PPUSH
10631: CALL_OW 180
// end ;
10635: GO 10591
10637: POP
10638: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10639: LD_ADDR_VAR 0 4
10643: PUSH
10644: LD_EXP 36
10648: PUSH
10649: LD_EXP 38
10653: PUSH
10654: LD_EXP 39
10658: UNION
10659: PPUSH
10660: LD_INT 3
10662: PUSH
10663: LD_INT 25
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: UNION
10682: ST_TO_ADDR
// for i in noncombat do
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: LD_VAR 0 4
10692: PUSH
10693: FOR_IN
10694: IFFALSE 10730
// begin if IsInUnit ( i ) then
10696: LD_VAR 0 1
10700: PPUSH
10701: CALL_OW 310
10705: IFFALSE 10716
// ComExitBuilding ( i ) ;
10707: LD_VAR 0 1
10711: PPUSH
10712: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
10716: LD_VAR 0 1
10720: PPUSH
10721: LD_INT 16
10723: PPUSH
10724: CALL_OW 173
// end ;
10728: GO 10693
10730: POP
10731: POP
// if not allowHeikeAttack then
10732: LD_EXP 10
10736: NOT
10737: IFFALSE 10741
// exit ;
10739: GO 10793
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10741: LD_EXP 34
10745: PPUSH
10746: LD_STRING D9a-Kur-1
10748: PPUSH
10749: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
10753: LD_EXP 37
10757: PPUSH
10758: LD_STRING D9a-Bur-1
10760: PPUSH
10761: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
10765: LD_EXP 34
10769: PPUSH
10770: LD_STRING D9a-Kur-2
10772: PPUSH
10773: CALL_OW 94
// omicronFall := true ;
10777: LD_ADDR_EXP 12
10781: PUSH
10782: LD_INT 1
10784: ST_TO_ADDR
// retreatFromOmicron := true ;
10785: LD_ADDR_EXP 18
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// end ;
10793: PPOPN 4
10795: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
10796: LD_INT 16
10798: PPUSH
10799: LD_INT 3
10801: PUSH
10802: LD_INT 22
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PPUSH
10830: CALL_OW 70
10834: IFFALSE 10917
10836: GO 10838
10838: DISABLE
10839: LD_INT 0
10841: PPUSH
// begin enable ;
10842: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
10843: LD_ADDR_VAR 0 1
10847: PUSH
10848: LD_INT 16
10850: PPUSH
10851: LD_INT 3
10853: PUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 23
10870: PUSH
10871: LD_INT 3
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PPUSH
10882: CALL_OW 70
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10915
// begin escapeCounter := escapeCounter + 1 ;
10890: LD_ADDR_EXP 17
10894: PUSH
10895: LD_EXP 17
10899: PUSH
10900: LD_INT 1
10902: PLUS
10903: ST_TO_ADDR
// RemoveUnit ( i ) ;
10904: LD_VAR 0 1
10908: PPUSH
10909: CALL_OW 64
// end ;
10913: GO 10887
10915: POP
10916: POP
// end ;
10917: PPOPN 1
10919: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
10920: LD_OWVAR 1
10924: PUSH
10925: LD_INT 13650
10927: PUSH
10928: LD_INT 0
10930: PPUSH
10931: LD_INT 3150
10933: PPUSH
10934: CALL_OW 12
10938: PLUS
10939: GREATEREQUAL
10940: IFFALSE 10949
10942: GO 10944
10944: DISABLE
// SmallAmericanReinforcements ;
10945: CALL 6700 0 0
10949: END
// every 0 0$1 trigger tick >= 9 9$15 do
10950: LD_OWVAR 1
10954: PUSH
10955: LD_INT 19425
10957: GREATEREQUAL
10958: IFFALSE 11023
10960: GO 10962
10962: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
10963: LD_EXP 42
10967: PPUSH
10968: LD_INT 21
10970: PUSH
10971: LD_INT 2
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 72
10982: PPUSH
10983: LD_INT 62
10985: PPUSH
10986: LD_INT 22
10988: PPUSH
10989: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
10993: LD_EXP 43
10997: PPUSH
10998: LD_INT 69
11000: PPUSH
11001: LD_INT 27
11003: PPUSH
11004: CALL_OW 111
// wait ( 1 1$00 ) ;
11008: LD_INT 2100
11010: PPUSH
11011: CALL_OW 67
// startAttackOnOmicron := true ;
11015: LD_ADDR_EXP 6
11019: PUSH
11020: LD_INT 1
11022: ST_TO_ADDR
// end ;
11023: END
// every 0 0$2 trigger tick >= 20 20$00 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11024: LD_OWVAR 1
11028: PUSH
11029: LD_INT 42000
11031: GREATEREQUAL
11032: IFFALSE 12891
11034: GO 11036
11036: DISABLE
11037: LD_INT 0
11039: PPUSH
11040: PPUSH
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11046: LD_INT 5
11048: PPUSH
11049: LD_INT 2
11051: PPUSH
11052: CALL_OW 343
// PrepareOmarForces ;
11056: CALL 2266 0 0
// wait ( 0 0$03 ) ;
11060: LD_INT 105
11062: PPUSH
11063: CALL_OW 67
// allowHeikeAttack := true ;
11067: LD_ADDR_EXP 10
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// activeGrishkoAI := false ;
11075: LD_ADDR_EXP 9
11079: PUSH
11080: LD_INT 0
11082: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11083: LD_EXP 28
11087: PPUSH
11088: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11092: LD_ADDR_VAR 0 1
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 21
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: PUSH
11126: FOR_IN
11127: IFFALSE 11151
// if HasTask ( i ) then
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 314
11138: IFFALSE 11149
// ComHold ( i ) ;
11140: LD_VAR 0 1
11144: PPUSH
11145: CALL_OW 140
11149: GO 11126
11151: POP
11152: POP
// DialogueOn ;
11153: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11157: LD_EXP 28
11161: PPUSH
11162: LD_STRING DO-assault-1
11164: PPUSH
11165: CALL_OW 94
// DialogueOff ;
11169: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11173: LD_ADDR_VAR 0 1
11177: PUSH
11178: LD_EXP 40
11182: PPUSH
11183: LD_INT 3
11185: PUSH
11186: LD_INT 54
11188: PUSH
11189: EMPTY
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PPUSH
11196: CALL_OW 72
11200: PUSH
11201: FOR_IN
11202: IFFALSE 11221
// ComMoveXY ( i , 226 , 114 ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: LD_INT 226
11211: PPUSH
11212: LD_INT 114
11214: PPUSH
11215: CALL_OW 111
11219: GO 11201
11221: POP
11222: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11223: LD_EXP 35
11227: PPUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 6
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PPUSH
11257: LD_EXP 35
11261: PPUSH
11262: CALL_OW 74
11266: PPUSH
11267: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11271: LD_STRING Attack
11273: PPUSH
11274: CALL_OW 337
// music_class := music_combat ;
11278: LD_ADDR_OWVAR 72
11282: PUSH
11283: LD_INT 1
11285: ST_TO_ADDR
// music_nat := 4 ;
11286: LD_ADDR_OWVAR 71
11290: PUSH
11291: LD_INT 4
11293: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11294: LD_INT 5
11296: PPUSH
11297: LD_EXP 35
11301: PPUSH
11302: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11306: LD_INT 6
11308: PPUSH
11309: LD_EXP 32
11313: PPUSH
11314: LD_INT 25
11316: PUSH
11317: LD_INT 1
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 72
11328: PUSH
11329: LD_INT 4
11331: ARRAY
11332: PPUSH
11333: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11337: LD_ADDR_VAR 0 1
11341: PUSH
11342: LD_EXP 32
11346: PPUSH
11347: LD_INT 3
11349: PUSH
11350: LD_INT 25
11352: PUSH
11353: LD_INT 4
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 72
11368: PUSH
11369: FOR_IN
11370: IFFALSE 11389
// ComAgressiveMove ( i , 221 , 110 ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 221
11379: PPUSH
11380: LD_INT 110
11382: PPUSH
11383: CALL_OW 114
11387: GO 11369
11389: POP
11390: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11391: LD_EXP 32
11395: PPUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 72
11410: PPUSH
11411: LD_INT 214
11413: PPUSH
11414: LD_INT 124
11416: PPUSH
11417: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11421: LD_EXP 32
11425: PPUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 72
11440: PUSH
11441: LD_INT 4
11443: ARRAY
11444: PPUSH
11445: LD_INT 214
11447: PPUSH
11448: LD_INT 114
11450: PPUSH
11451: LD_INT 0
11453: PPUSH
11454: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11458: LD_EXP 35
11462: PPUSH
11463: LD_STRING D9-Gri-1
11465: PPUSH
11466: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11470: LD_EXP 34
11474: PPUSH
11475: LD_STRING D9-Kur-1
11477: PPUSH
11478: CALL_OW 94
// wait ( 0 0$1 ) ;
11482: LD_INT 35
11484: PPUSH
11485: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11489: LD_EXP 28
11493: PPUSH
11494: LD_INT 233
11496: PPUSH
11497: LD_INT 130
11499: PPUSH
11500: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11504: LD_EXP 35
11508: PPUSH
11509: LD_STRING D9-Gri-2
11511: PPUSH
11512: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11516: LD_EXP 34
11520: PPUSH
11521: LD_STRING D9-Kur-2
11523: PPUSH
11524: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11528: LD_EXP 35
11532: PPUSH
11533: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11537: LD_EXP 35
11541: PPUSH
11542: LD_INT 211
11544: PPUSH
11545: LD_INT 104
11547: PPUSH
11548: CALL_OW 171
// AddComHold ( Grishko ) ;
11552: LD_EXP 35
11556: PPUSH
11557: CALL_OW 200
// repeat wait ( 3 ) ;
11561: LD_INT 3
11563: PPUSH
11564: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11568: LD_EXP 35
11572: PPUSH
11573: CALL_OW 310
11577: NOT
11578: IFFALSE 11561
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11580: LD_EXP 32
11584: PPUSH
11585: LD_INT 34
11587: PUSH
11588: LD_INT 26
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PPUSH
11595: CALL_OW 72
11599: PPUSH
11600: LD_EXP 35
11604: PPUSH
11605: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11609: LD_EXP 32
11613: PPUSH
11614: LD_INT 34
11616: PUSH
11617: LD_INT 26
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 72
11628: PPUSH
11629: LD_INT 215
11631: PPUSH
11632: LD_INT 106
11634: PPUSH
11635: CALL_OW 174
// repeat wait ( 3 ) ;
11639: LD_INT 3
11641: PPUSH
11642: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11646: LD_EXP 35
11650: PPUSH
11651: CALL_OW 256
11655: PUSH
11656: LD_INT 1000
11658: LESS
11659: IFFALSE 11639
// NormalAttack ( 5 , Grishko ) ;
11661: LD_INT 5
11663: PPUSH
11664: LD_EXP 35
11668: PPUSH
11669: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11673: LD_INT 6
11675: PPUSH
11676: LD_EXP 32
11680: PPUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 72
11695: PUSH
11696: LD_INT 4
11698: ARRAY
11699: PPUSH
11700: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11704: LD_EXP 35
11708: PPUSH
11709: LD_STRING D9-Gri-3
11711: PPUSH
11712: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
11716: LD_EXP 34
11720: PPUSH
11721: LD_STRING D9-Kur-3
11723: PPUSH
11724: CALL_OW 94
// music_class := music_auto ;
11728: LD_ADDR_OWVAR 72
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// music_nat := music_auto ;
11736: LD_ADDR_OWVAR 71
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// for i in omarSquad do
11744: LD_ADDR_VAR 0 1
11748: PUSH
11749: LD_EXP 32
11753: PUSH
11754: FOR_IN
11755: IFFALSE 11897
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 247
11766: PUSH
11767: LD_INT 2
11769: EQUAL
11770: PUSH
11771: LD_VAR 0 1
11775: PPUSH
11776: CALL_OW 256
11780: PUSH
11781: LD_INT 1000
11783: LESS
11784: AND
11785: IFFALSE 11851
// begin driver := IsDrivenBy ( i ) ;
11787: LD_ADDR_VAR 0 2
11791: PUSH
11792: LD_VAR 0 1
11796: PPUSH
11797: CALL_OW 311
11801: ST_TO_ADDR
// veh := i ;
11802: LD_ADDR_VAR 0 3
11806: PUSH
11807: LD_VAR 0 1
11811: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11812: LD_VAR 0 2
11816: PPUSH
11817: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
11821: LD_VAR 0 2
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
11835: LD_VAR 0 2
11839: PPUSH
11840: LD_VAR 0 3
11844: PPUSH
11845: CALL_OW 180
// end else
11849: GO 11895
// if GetLives ( i ) < 500 then
11851: LD_VAR 0 1
11855: PPUSH
11856: CALL_OW 256
11860: PUSH
11861: LD_INT 500
11863: LESS
11864: IFFALSE 11895
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
11866: LD_EXP 32
11870: PPUSH
11871: LD_INT 25
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PPUSH
11881: CALL_OW 72
11885: PPUSH
11886: LD_VAR 0 1
11890: PPUSH
11891: CALL_OW 188
// end ; end ;
11895: GO 11754
11897: POP
11898: POP
// repeat wait ( 0 0$1 ) ;
11899: LD_INT 35
11901: PPUSH
11902: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
11906: LD_EXP 32
11910: PPUSH
11911: LD_INT 3
11913: PUSH
11914: LD_INT 24
11916: PUSH
11917: LD_INT 1000
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 21
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 72
11946: NOT
11947: PUSH
11948: LD_EXP 32
11952: PPUSH
11953: LD_INT 3
11955: PUSH
11956: LD_INT 24
11958: PUSH
11959: LD_INT 250
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 72
11974: NOT
11975: AND
11976: IFFALSE 11899
// wait ( 0 0$2 ) ;
11978: LD_INT 70
11980: PPUSH
11981: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
11985: LD_ADDR_VAR 0 5
11989: PUSH
11990: LD_EXP 32
11994: PPUSH
11995: LD_INT 58
11997: PUSH
11998: EMPTY
11999: LIST
12000: PUSH
12001: LD_INT 21
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12020: LD_ADDR_VAR 0 6
12024: PUSH
12025: LD_EXP 32
12029: PPUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 3
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 3
12042: PUSH
12043: LD_INT 55
12045: PUSH
12046: EMPTY
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 72
12061: ST_TO_ADDR
// for i := 1 to tmp do
12062: LD_ADDR_VAR 0 1
12066: PUSH
12067: DOUBLE
12068: LD_INT 1
12070: DEC
12071: ST_TO_ADDR
12072: LD_VAR 0 5
12076: PUSH
12077: FOR_TO
12078: IFFALSE 12108
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12080: LD_VAR 0 6
12084: PUSH
12085: LD_VAR 0 1
12089: ARRAY
12090: PPUSH
12091: LD_VAR 0 5
12095: PUSH
12096: LD_VAR 0 1
12100: ARRAY
12101: PPUSH
12102: CALL_OW 120
12106: GO 12077
12108: POP
12109: POP
// wait ( 0 0$5 ) ;
12110: LD_INT 175
12112: PPUSH
12113: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12117: LD_EXP 32
12121: PPUSH
12122: LD_INT 199
12124: PPUSH
12125: LD_INT 141
12127: PPUSH
12128: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12132: LD_EXP 28
12136: PPUSH
12137: LD_INT 190
12139: PPUSH
12140: LD_INT 143
12142: PPUSH
12143: CALL_OW 111
// AddComHold ( Omar ) ;
12147: LD_EXP 28
12151: PPUSH
12152: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12156: LD_EXP 32
12160: PPUSH
12161: LD_INT 2
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 1
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 25
12176: PUSH
12177: LD_INT 4
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 72
12193: PPUSH
12194: LD_INT 161
12196: PPUSH
12197: LD_INT 130
12199: PPUSH
12200: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12204: LD_EXP 32
12208: PPUSH
12209: LD_INT 25
12211: PUSH
12212: LD_INT 1
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 72
12223: PPUSH
12224: LD_INT 163
12226: PPUSH
12227: LD_INT 122
12229: PPUSH
12230: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12234: LD_EXP 32
12238: PPUSH
12239: LD_INT 25
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: PUSH
12254: LD_INT 4
12256: ARRAY
12257: PPUSH
12258: LD_INT 165
12260: PPUSH
12261: LD_INT 118
12263: PPUSH
12264: LD_INT 0
12266: PPUSH
12267: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12271: LD_EXP 32
12275: PPUSH
12276: LD_INT 25
12278: PUSH
12279: LD_INT 1
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 72
12290: PUSH
12291: LD_INT 4
12293: ARRAY
12294: PPUSH
12295: LD_INT 159
12297: PPUSH
12298: LD_INT 116
12300: PPUSH
12301: LD_INT 0
12303: PPUSH
12304: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12308: LD_EXP 32
12312: PPUSH
12313: LD_INT 21
12315: PUSH
12316: LD_INT 2
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: PPUSH
12328: LD_INT 169
12330: PPUSH
12331: LD_INT 114
12333: PPUSH
12334: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12338: LD_INT 35
12340: PPUSH
12341: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12345: LD_ADDR_VAR 0 5
12349: PUSH
12350: LD_EXP 32
12354: PPUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 72
12369: ST_TO_ADDR
// for i in tmp do
12370: LD_ADDR_VAR 0 1
12374: PUSH
12375: LD_VAR 0 5
12379: PUSH
12380: FOR_IN
12381: IFFALSE 12478
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12383: LD_VAR 0 1
12387: PPUSH
12388: CALL_OW 256
12392: PUSH
12393: LD_INT 600
12395: LESS
12396: PUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: LD_INT 161
12404: PPUSH
12405: LD_INT 130
12407: PPUSH
12408: CALL_OW 297
12412: PUSH
12413: LD_INT 6
12415: GREATER
12416: AND
12417: IFFALSE 12434
// ComMoveXY ( i , 161 , 130 ) ;
12419: LD_VAR 0 1
12423: PPUSH
12424: LD_INT 161
12426: PPUSH
12427: LD_INT 130
12429: PPUSH
12430: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 256
12443: PUSH
12444: LD_INT 1000
12446: EQUAL
12447: PUSH
12448: LD_VAR 0 1
12452: PPUSH
12453: CALL_OW 314
12457: NOT
12458: AND
12459: IFFALSE 12476
// ComAgressiveMove ( i , 160 , 109 ) ;
12461: LD_VAR 0 1
12465: PPUSH
12466: LD_INT 160
12468: PPUSH
12469: LD_INT 109
12471: PPUSH
12472: CALL_OW 114
// end ;
12476: GO 12380
12478: POP
12479: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12480: LD_ADDR_VAR 0 5
12484: PUSH
12485: LD_EXP 32
12489: PPUSH
12490: LD_INT 21
12492: PUSH
12493: LD_INT 2
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 72
12504: ST_TO_ADDR
// for i in tmp do
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_VAR 0 5
12514: PUSH
12515: FOR_IN
12516: IFFALSE 12782
// begin tmp2 := IsDrivenBy ( i ) ;
12518: LD_ADDR_VAR 0 6
12522: PUSH
12523: LD_VAR 0 1
12527: PPUSH
12528: CALL_OW 311
12532: ST_TO_ADDR
// if not tmp2 then
12533: LD_VAR 0 6
12537: NOT
12538: IFFALSE 12542
// continue ;
12540: GO 12515
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 256
12551: PUSH
12552: LD_INT 600
12554: GREATEREQUAL
12555: PUSH
12556: LD_VAR 0 1
12560: PPUSH
12561: CALL_OW 110
12565: PUSH
12566: LD_INT 1
12568: EQUAL
12569: AND
12570: IFFALSE 12584
// SetTag ( i , 0 ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: LD_INT 0
12579: PPUSH
12580: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12584: LD_VAR 0 1
12588: PPUSH
12589: CALL_OW 256
12593: PUSH
12594: LD_INT 600
12596: GREATEREQUAL
12597: PUSH
12598: LD_VAR 0 1
12602: PPUSH
12603: CALL_OW 110
12607: NOT
12608: AND
12609: IFFALSE 12635
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12611: LD_VAR 0 1
12615: PPUSH
12616: LD_VAR 0 7
12620: PPUSH
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 74
12630: PPUSH
12631: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12635: LD_VAR 0 1
12639: PPUSH
12640: CALL_OW 256
12644: PUSH
12645: LD_INT 600
12647: LESS
12648: PUSH
12649: LD_VAR 0 1
12653: PPUSH
12654: CALL_OW 110
12658: NOT
12659: AND
12660: IFFALSE 12689
// begin SetTag ( i , 1 ) ;
12662: LD_VAR 0 1
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 202
12681: PPUSH
12682: LD_INT 150
12684: PPUSH
12685: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 110
12698: PUSH
12699: LD_INT 1
12701: EQUAL
12702: PUSH
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_INT 202
12710: PPUSH
12711: LD_INT 150
12713: PPUSH
12714: CALL_OW 297
12718: PUSH
12719: LD_INT 6
12721: LESS
12722: AND
12723: PUSH
12724: LD_VAR 0 6
12728: AND
12729: IFFALSE 12780
// begin ComExitVehicle ( tmp2 ) ;
12731: LD_VAR 0 6
12735: PPUSH
12736: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
12740: LD_VAR 0 6
12744: PPUSH
12745: LD_VAR 0 1
12749: PPUSH
12750: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
12754: LD_VAR 0 6
12758: PPUSH
12759: LD_INT 700
12761: PPUSH
12762: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
12766: LD_VAR 0 6
12770: PPUSH
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 180
// end ; end ;
12780: GO 12515
12782: POP
12783: POP
// until kirovDestroyed ;
12784: LD_EXP 14
12788: IFFALSE 12338
// repeat wait ( 0 0$1 ) ;
12790: LD_INT 35
12792: PPUSH
12793: CALL_OW 67
// for i in omarSquad union Omar do
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: LD_EXP 32
12806: PUSH
12807: LD_EXP 28
12811: UNION
12812: PUSH
12813: FOR_IN
12814: IFFALSE 12858
// if IsInArea ( i , southRoadArea ) then
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 15
12823: PPUSH
12824: CALL_OW 308
12828: IFFALSE 12841
// RemoveUnit ( i ) else
12830: LD_VAR 0 1
12834: PPUSH
12835: CALL_OW 64
12839: GO 12856
// ComMoveXY ( i , 208 , 162 ) ;
12841: LD_VAR 0 1
12845: PPUSH
12846: LD_INT 208
12848: PPUSH
12849: LD_INT 162
12851: PPUSH
12852: CALL_OW 111
12856: GO 12813
12858: POP
12859: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
12860: LD_INT 22
12862: PUSH
12863: LD_INT 5
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: LD_INT 21
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PPUSH
12884: CALL_OW 69
12888: NOT
12889: IFFALSE 12790
// end ;
12891: PPOPN 7
12893: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
12894: LD_INT 2
12896: PPUSH
12897: LD_EXP 44
12901: PPUSH
12902: CALL_OW 292
12906: PUSH
12907: LD_EXP 44
12911: PPUSH
12912: CALL_OW 302
12916: AND
12917: PUSH
12918: LD_EXP 20
12922: PPUSH
12923: CALL_OW 302
12927: AND
12928: PUSH
12929: LD_EXP 30
12933: PPUSH
12934: CALL_OW 302
12938: AND
12939: PUSH
12940: LD_INT 2
12942: PPUSH
12943: CALL_OW 463
12947: NOT
12948: AND
12949: IFFALSE 13315
12951: GO 12953
12953: DISABLE
12954: LD_INT 0
12956: PPUSH
12957: PPUSH
12958: PPUSH
// begin DialogueOn ;
12959: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
12963: LD_INT 111
12965: PPUSH
12966: LD_INT 90
12968: PPUSH
12969: LD_INT 2
12971: PPUSH
12972: LD_INT 6
12974: NEG
12975: PPUSH
12976: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
12980: LD_INT 111
12982: PPUSH
12983: LD_INT 90
12985: PPUSH
12986: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
12990: LD_EXP 30
12994: PPUSH
12995: LD_STRING DA-Cap-1
12997: PPUSH
12998: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13002: LD_EXP 20
13006: PPUSH
13007: LD_STRING DH-Cap-2
13009: PPUSH
13010: CALL_OW 88
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13014: LD_ADDR_VAR 0 2
13018: PUSH
13019: LD_EXP 31
13023: PUSH
13024: LD_EXP 23
13028: PUSH
13029: LD_EXP 24
13033: PUSH
13034: LD_EXP 26
13038: PUSH
13039: LD_EXP 25
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: UNION
13050: ST_TO_ADDR
// if tmp < 2 then
13051: LD_VAR 0 2
13055: PUSH
13056: LD_INT 2
13058: LESS
13059: IFFALSE 13071
// q := 2 else
13061: LD_ADDR_VAR 0 3
13065: PUSH
13066: LD_INT 2
13068: ST_TO_ADDR
13069: GO 13084
// q := Query ( LabCap ) ;
13071: LD_ADDR_VAR 0 3
13075: PUSH
13076: LD_STRING LabCap
13078: PPUSH
13079: CALL_OW 97
13083: ST_TO_ADDR
// case q of 1 :
13084: LD_VAR 0 3
13088: PUSH
13089: LD_INT 1
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13275
13097: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13098: LD_INT 2
13100: PPUSH
13101: LD_EXP 44
13105: PPUSH
13106: CALL_OW 471
// labCaptured := true ;
13110: LD_ADDR_EXP 19
13114: PUSH
13115: LD_INT 1
13117: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13118: LD_EXP 20
13122: PPUSH
13123: LD_STRING DH-Cap-a-1
13125: PPUSH
13126: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13130: LD_EXP 30
13134: PPUSH
13135: LD_STRING DA-Cap-a-2
13137: PPUSH
13138: CALL_OW 88
// SetSide ( ruLab , 5 ) ;
13142: LD_EXP 44
13146: PPUSH
13147: LD_INT 5
13149: PPUSH
13150: CALL_OW 235
// SetSide ( Aviradze , 5 ) ;
13154: LD_EXP 30
13158: PPUSH
13159: LD_INT 5
13161: PPUSH
13162: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13166: LD_ADDR_EXP 33
13170: PUSH
13171: LD_EXP 30
13175: PUSH
13176: EMPTY
13177: LIST
13178: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13179: LD_EXP 30
13183: PPUSH
13184: LD_EXP 44
13188: PPUSH
13189: CALL_OW 120
// for i := 1 to 2 do
13193: LD_ADDR_VAR 0 1
13197: PUSH
13198: DOUBLE
13199: LD_INT 1
13201: DEC
13202: ST_TO_ADDR
13203: LD_INT 2
13205: PUSH
13206: FOR_TO
13207: IFFALSE 13271
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13209: LD_ADDR_EXP 33
13213: PUSH
13214: LD_EXP 33
13218: PUSH
13219: LD_VAR 0 2
13223: PUSH
13224: LD_VAR 0 1
13228: ARRAY
13229: UNION
13230: ST_TO_ADDR
// SetSide ( tmp [ i ] , 5 ) ;
13231: LD_VAR 0 2
13235: PUSH
13236: LD_VAR 0 1
13240: ARRAY
13241: PPUSH
13242: LD_INT 5
13244: PPUSH
13245: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13249: LD_VAR 0 2
13253: PUSH
13254: LD_VAR 0 1
13258: ARRAY
13259: PPUSH
13260: LD_EXP 44
13264: PPUSH
13265: CALL_OW 120
// end ;
13269: GO 13206
13271: POP
13272: POP
// end ; 2 :
13273: GO 13311
13275: LD_INT 2
13277: DOUBLE
13278: EQUAL
13279: IFTRUE 13283
13281: GO 13310
13283: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13284: LD_EXP 20
13288: PPUSH
13289: LD_STRING DH-Cap-b-1
13291: PPUSH
13292: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13296: LD_EXP 30
13300: PPUSH
13301: LD_STRING DA-Cap-b-2
13303: PPUSH
13304: CALL_OW 88
// end ; end ;
13308: GO 13311
13310: POP
// DialogueOff ;
13311: CALL_OW 7
// end ;
13315: PPOPN 3
13317: END
// every 0 0$1 trigger kirovDestroyed and beriaDestroyed and kaganDestroyed do var i , tmp , tmp2 , cargo ;
13318: LD_EXP 14
13322: PUSH
13323: LD_EXP 15
13327: AND
13328: PUSH
13329: LD_EXP 16
13333: AND
13334: IFFALSE 14480
13336: GO 13338
13338: DISABLE
13339: LD_INT 0
13341: PPUSH
13342: PPUSH
13343: PPUSH
13344: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
13345: LD_STRING GoToWest
13347: PPUSH
13348: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
13352: LD_INT 17
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
13362: LD_INT 35
13364: PPUSH
13365: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) = FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
13369: LD_INT 22
13371: PUSH
13372: LD_INT 2
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 21
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 21
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 58
13407: PUSH
13408: EMPTY
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 69
13432: PUSH
13433: LD_INT 17
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 2
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 21
13461: PUSH
13462: LD_INT 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 58
13474: PUSH
13475: EMPTY
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 70
13499: EQUAL
13500: IFFALSE 13362
// SaveCharacters ( Heike , 04_1_Heike ) ;
13502: LD_EXP 20
13506: PPUSH
13507: LD_STRING 04_1_Heike
13509: PPUSH
13510: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
13514: LD_EXP 30
13518: PUSH
13519: LD_EXP 30
13523: PUSH
13524: LD_EXP 33
13528: IN
13529: NOT
13530: AND
13531: IFFALSE 13547
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
13533: LD_EXP 30
13537: PPUSH
13538: LD_STRING 04_1_Aviradze
13540: PPUSH
13541: CALL_OW 38
13545: GO 13565
// if Aviradze then
13547: LD_EXP 30
13551: IFFALSE 13565
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
13553: LD_EXP 30
13557: PPUSH
13558: LD_STRING 04_1_Aviradze_L
13560: PPUSH
13561: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
13565: LD_EXP 23
13569: PUSH
13570: LD_EXP 23
13574: PUSH
13575: LD_EXP 33
13579: IN
13580: NOT
13581: AND
13582: IFFALSE 13598
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
13584: LD_EXP 23
13588: PPUSH
13589: LD_STRING 04_1_Ibrahim
13591: PPUSH
13592: CALL_OW 38
13596: GO 13616
// if Ibrahim then
13598: LD_EXP 23
13602: IFFALSE 13616
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
13604: LD_EXP 23
13608: PPUSH
13609: LD_STRING 04_1_Ibrahim_L
13611: PPUSH
13612: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
13616: LD_EXP 24
13620: PUSH
13621: LD_EXP 24
13625: PUSH
13626: LD_EXP 33
13630: IN
13631: NOT
13632: AND
13633: IFFALSE 13649
// SaveCharacters ( Kamil , 04_1_Kamil ) else
13635: LD_EXP 24
13639: PPUSH
13640: LD_STRING 04_1_Kamil
13642: PPUSH
13643: CALL_OW 38
13647: GO 13667
// if Kamil then
13649: LD_EXP 24
13653: IFFALSE 13667
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
13655: LD_EXP 24
13659: PPUSH
13660: LD_STRING 04_1_Kamil_L
13662: PPUSH
13663: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
13667: LD_EXP 26
13671: PUSH
13672: LD_EXP 26
13676: PUSH
13677: LD_EXP 33
13681: IN
13682: NOT
13683: AND
13684: IFFALSE 13700
// SaveCharacters ( Sophia , 04_1_Sophia ) else
13686: LD_EXP 26
13690: PPUSH
13691: LD_STRING 04_1_Sophia
13693: PPUSH
13694: CALL_OW 38
13698: GO 13718
// if Sophia then
13700: LD_EXP 26
13704: IFFALSE 13718
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
13706: LD_EXP 26
13710: PPUSH
13711: LD_STRING 04_1_Sophia_L
13713: PPUSH
13714: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
13718: LD_EXP 25
13722: PUSH
13723: LD_EXP 25
13727: PUSH
13728: LD_EXP 33
13732: IN
13733: NOT
13734: AND
13735: IFFALSE 13751
// SaveCharacters ( Kaia , 04_1_Kaia ) else
13737: LD_EXP 25
13741: PPUSH
13742: LD_STRING 04_1_Kaia
13744: PPUSH
13745: CALL_OW 38
13749: GO 13769
// if Kaia then
13751: LD_EXP 25
13755: IFFALSE 13769
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
13757: LD_EXP 25
13761: PPUSH
13762: LD_STRING 04_1_Kaia_L
13764: PPUSH
13765: CALL_OW 38
// if Givi then
13769: LD_EXP 21
13773: IFFALSE 13787
// SaveCharacters ( Givi , 04_1_Givi ) ;
13775: LD_EXP 21
13779: PPUSH
13780: LD_STRING 04_1_Givi
13782: PPUSH
13783: CALL_OW 38
// if Mike then
13787: LD_EXP 22
13791: IFFALSE 13805
// SaveCharacters ( Mike , 04_1_Mike ) ;
13793: LD_EXP 22
13797: PPUSH
13798: LD_STRING 04_1_Mike
13800: PPUSH
13801: CALL_OW 38
// if Markov then
13805: LD_EXP 27
13809: IFFALSE 13823
// SaveCharacters ( Markov , 04_1_Markov ) ;
13811: LD_EXP 27
13815: PPUSH
13816: LD_STRING 04_1_Markov
13818: PPUSH
13819: CALL_OW 38
// if Kurt then
13823: LD_EXP 29
13827: IFFALSE 13841
// SaveCharacters ( Kurt , 04_1_Markov ) ;
13829: LD_EXP 29
13833: PPUSH
13834: LD_STRING 04_1_Markov
13836: PPUSH
13837: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
13841: LD_EXP 31
13845: PUSH
13846: LD_EXP 33
13850: DIFF
13851: IFFALSE 13871
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
13853: LD_EXP 31
13857: PUSH
13858: LD_EXP 33
13862: DIFF
13863: PPUSH
13864: LD_STRING 04_1_others
13866: PPUSH
13867: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
13871: LD_EXP 33
13875: PUSH
13876: LD_EXP 31
13880: AND
13881: IFFALSE 13966
// begin tmp := [ ] ;
13883: LD_ADDR_VAR 0 2
13887: PUSH
13888: EMPTY
13889: ST_TO_ADDR
// for i in heikeSecondSquad do
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: LD_EXP 31
13899: PUSH
13900: FOR_IN
13901: IFFALSE 13946
// if i in aviradzeSquad then
13903: LD_VAR 0 1
13907: PUSH
13908: LD_EXP 33
13912: IN
13913: IFFALSE 13944
// tmp := Replace ( tmp , tmp + 1 , i ) ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_VAR 0 2
13924: PPUSH
13925: LD_VAR 0 2
13929: PUSH
13930: LD_INT 1
13932: PLUS
13933: PPUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 1
13943: ST_TO_ADDR
13944: GO 13900
13946: POP
13947: POP
// if tmp then
13948: LD_VAR 0 2
13952: IFFALSE 13966
// SaveCharacters ( tmp , 04_1_others_L ) ;
13954: LD_VAR 0 2
13958: PPUSH
13959: LD_STRING 04_1_others_L
13961: PPUSH
13962: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 23
13983: PUSH
13984: LD_INT 0
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 69
13999: ST_TO_ADDR
// if tmp then
14000: LD_VAR 0 2
14004: IFFALSE 14018
// SaveCharacters ( tmp , 04_1_apes ) ;
14006: LD_VAR 0 2
14010: PPUSH
14011: LD_STRING 04_1_apes
14013: PPUSH
14014: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14018: LD_ADDR_VAR 0 2
14022: PUSH
14023: LD_INT 17
14025: PPUSH
14026: LD_INT 21
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PPUSH
14036: CALL_OW 70
14040: ST_TO_ADDR
// if tmp then
14041: LD_VAR 0 2
14045: IFFALSE 14339
// begin tmp2 := [ ] ;
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: EMPTY
14053: ST_TO_ADDR
// for i in tmp do
14054: LD_ADDR_VAR 0 1
14058: PUSH
14059: LD_VAR 0 2
14063: PUSH
14064: FOR_IN
14065: IFFALSE 14325
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 264
14076: PUSH
14077: LD_INT 32
14079: PUSH
14080: LD_INT 12
14082: PUSH
14083: LD_INT 51
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: IN
14091: IFFALSE 14228
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14093: LD_ADDR_VAR 0 4
14097: PUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 289
14110: PUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: LD_INT 2
14118: PPUSH
14119: CALL_OW 289
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14128: LD_ADDR_VAR 0 3
14132: PUSH
14133: LD_VAR 0 3
14137: PPUSH
14138: LD_VAR 0 3
14142: PUSH
14143: LD_INT 1
14145: PLUS
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 265
14156: PUSH
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 262
14166: PUSH
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 263
14176: PUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 264
14186: PUSH
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 248
14196: PUSH
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 256
14206: PUSH
14207: LD_VAR 0 4
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 1
14225: ST_TO_ADDR
// end else
14226: GO 14323
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
14228: LD_ADDR_VAR 0 3
14232: PUSH
14233: LD_VAR 0 3
14237: PPUSH
14238: LD_VAR 0 3
14242: PUSH
14243: LD_INT 1
14245: PLUS
14246: PPUSH
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 265
14256: PUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 262
14266: PUSH
14267: LD_VAR 0 1
14271: PPUSH
14272: CALL_OW 263
14276: PUSH
14277: LD_VAR 0 1
14281: PPUSH
14282: CALL_OW 264
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 248
14296: PUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 256
14306: PUSH
14307: EMPTY
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 1
14322: ST_TO_ADDR
14323: GO 14064
14325: POP
14326: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_STRING 04_1_Vehicles
14334: PPUSH
14335: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
14339: LD_EXP 19
14343: PPUSH
14344: LD_STRING 04_1_RuLabCaptured
14346: PPUSH
14347: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
14351: LD_EXP 17
14355: PPUSH
14356: LD_STRING 04_1_EscapeCounter
14358: PPUSH
14359: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
14363: LD_INT 10
14365: PPUSH
14366: LD_INT 22
14368: PUSH
14369: LD_INT 2
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 21
14378: PUSH
14379: LD_INT 3
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 70
14394: PUSH
14395: LD_INT 0
14397: GREATER
14398: PPUSH
14399: LD_STRING 04_1_BaseHill
14401: PPUSH
14402: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
14406: LD_OWVAR 1
14410: PPUSH
14411: LD_STRING 04_1_Time
14413: PPUSH
14414: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
14418: LD_EXP 13
14422: PPUSH
14423: LD_STRING 04_1_DeadCounter
14425: PPUSH
14426: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
14430: LD_INT 22
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 34
14442: PUSH
14443: LD_INT 26
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 69
14458: PUSH
14459: LD_INT 0
14461: PLUS
14462: PPUSH
14463: LD_STRING 04_1_Flamethrower
14465: PPUSH
14466: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
14470: LD_INT 1
14472: PPUSH
14473: LD_STRING __x1\04_cont2
14475: PPUSH
14476: CALL_OW 340
// end ; end_of_file
14480: PPOPN 4
14482: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 266
14492: PUSH
14493: LD_INT 0
14495: EQUAL
14496: PUSH
14497: LD_VAR 0 1
14501: PPUSH
14502: CALL_OW 255
14506: PUSH
14507: LD_INT 2
14509: EQUAL
14510: AND
14511: IFFALSE 14521
// baseConstructed := true ;
14513: LD_ADDR_EXP 3
14517: PUSH
14518: LD_INT 1
14520: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 266
14530: PUSH
14531: LD_INT 6
14533: EQUAL
14534: PUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 255
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: AND
14549: IFFALSE 14559
// labConstructed := true ;
14551: LD_ADDR_EXP 4
14555: PUSH
14556: LD_INT 1
14558: ST_TO_ADDR
// end ;
14559: PPOPN 1
14561: END
// on UnitDestroyed ( un ) do begin if un = Heike then
14562: LD_VAR 0 1
14566: PUSH
14567: LD_EXP 20
14571: EQUAL
14572: IFFALSE 14581
// YouLost ( Heike ) ;
14574: LD_STRING Heike
14576: PPUSH
14577: CALL_OW 104
// if un = Omar then
14581: LD_VAR 0 1
14585: PUSH
14586: LD_EXP 28
14590: EQUAL
14591: IFFALSE 14600
// YouLost ( Omar ) ;
14593: LD_STRING Omar
14595: PPUSH
14596: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
14600: LD_VAR 0 1
14604: PUSH
14605: LD_INT 22
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 23
14617: PUSH
14618: LD_INT 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 69
14644: IN
14645: IFFALSE 14661
// loseCounter := loseCounter + 1 ;
14647: LD_ADDR_EXP 13
14651: PUSH
14652: LD_EXP 13
14656: PUSH
14657: LD_INT 1
14659: PLUS
14660: ST_TO_ADDR
// if un = omikron then
14661: LD_VAR 0 1
14665: PUSH
14666: LD_INT 64
14668: EQUAL
14669: IFFALSE 14679
// omicronFall := true ;
14671: LD_ADDR_EXP 12
14675: PUSH
14676: LD_INT 1
14678: ST_TO_ADDR
// if un = kirov then
14679: LD_VAR 0 1
14683: PUSH
14684: LD_INT 71
14686: EQUAL
14687: IFFALSE 14704
// begin ChangeMissionObjectives ( KirovDone ) ;
14689: LD_STRING KirovDone
14691: PPUSH
14692: CALL_OW 337
// kirovDestroyed := true ;
14696: LD_ADDR_EXP 14
14700: PUSH
14701: LD_INT 1
14703: ST_TO_ADDR
// end ; if un = beria then
14704: LD_VAR 0 1
14708: PUSH
14709: LD_INT 106
14711: EQUAL
14712: IFFALSE 14729
// begin ChangeMissionObjectives ( BeriaDone ) ;
14714: LD_STRING BeriaDone
14716: PPUSH
14717: CALL_OW 337
// beriaDestroyed := true ;
14721: LD_ADDR_EXP 15
14725: PUSH
14726: LD_INT 1
14728: ST_TO_ADDR
// end ; if un = kagan then
14729: LD_VAR 0 1
14733: PUSH
14734: LD_INT 112
14736: EQUAL
14737: IFFALSE 14754
// begin ChangeMissionObjectives ( KaganDone ) ;
14739: LD_STRING KaganDone
14741: PPUSH
14742: CALL_OW 337
// kaganDestroyed := true ;
14746: LD_ADDR_EXP 16
14750: PUSH
14751: LD_INT 1
14753: ST_TO_ADDR
// end ; if un in russianPatrol then
14754: LD_VAR 0 1
14758: PUSH
14759: LD_EXP 41
14763: IN
14764: IFFALSE 14782
// russianPatrol := russianPatrol diff un ;
14766: LD_ADDR_EXP 41
14770: PUSH
14771: LD_EXP 41
14775: PUSH
14776: LD_VAR 0 1
14780: DIFF
14781: ST_TO_ADDR
// if un in russianOmicronAttackers then
14782: LD_VAR 0 1
14786: PUSH
14787: LD_EXP 42
14791: IN
14792: IFFALSE 14810
// russianOmicronAttackers := russianOmicronAttackers diff un ;
14794: LD_ADDR_EXP 42
14798: PUSH
14799: LD_EXP 42
14803: PUSH
14804: LD_VAR 0 1
14808: DIFF
14809: ST_TO_ADDR
// end ;
14810: PPOPN 1
14812: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
14813: LD_INT 0
14815: PPUSH
14816: PPUSH
14817: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
14818: LD_VAR 0 1
14822: PUSH
14823: LD_INT 2
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_INT 3
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 22
14838: PUSH
14839: LD_INT 4
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 22
14848: PUSH
14849: LD_INT 6
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PPUSH
14876: CALL_OW 69
14880: IN
14881: IFFALSE 15054
// begin sol := UnitsInside ( un ) ;
14883: LD_ADDR_VAR 0 3
14887: PUSH
14888: LD_VAR 0 1
14892: PPUSH
14893: CALL_OW 313
14897: ST_TO_ADDR
// if not sol then
14898: LD_VAR 0 3
14902: NOT
14903: IFFALSE 14907
// exit ;
14905: GO 15054
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
14907: LD_ADDR_VAR 0 4
14911: PUSH
14912: LD_INT 22
14914: PUSH
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 255
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: LD_INT 30
14934: PUSH
14935: LD_INT 4
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 30
14944: PUSH
14945: LD_INT 5
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: ST_TO_ADDR
// if not nearestBarracks then
14966: LD_VAR 0 4
14970: NOT
14971: IFFALSE 14975
// exit ;
14973: GO 15054
// for i in nearestBarracks do
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: LD_VAR 0 4
14984: PUSH
14985: FOR_IN
14986: IFFALSE 15021
// if UnitsInside ( i ) = 6 then
14988: LD_VAR 0 2
14992: PPUSH
14993: CALL_OW 313
14997: PUSH
14998: LD_INT 6
15000: EQUAL
15001: IFFALSE 15019
// nearestBarracks := nearestBarracks diff i ;
15003: LD_ADDR_VAR 0 4
15007: PUSH
15008: LD_VAR 0 4
15012: PUSH
15013: LD_VAR 0 2
15017: DIFF
15018: ST_TO_ADDR
15019: GO 14985
15021: POP
15022: POP
// if not nearestBarracks then
15023: LD_VAR 0 4
15027: NOT
15028: IFFALSE 15032
// exit ;
15030: GO 15054
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15032: LD_VAR 0 3
15036: PUSH
15037: LD_INT 1
15039: ARRAY
15040: PPUSH
15041: LD_VAR 0 4
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: CALL_OW 120
// end ; end ;
15054: PPOPN 4
15056: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15057: LD_INT 0
15059: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15060: LD_EXP 7
15064: NOT
15065: PUSH
15066: LD_EXP 5
15070: NOT
15071: OR
15072: IFFALSE 15076
// exit ;
15074: GO 15144
// for i in camAreas do
15076: LD_ADDR_VAR 0 5
15080: PUSH
15081: LD_EXP 7
15085: PUSH
15086: FOR_IN
15087: IFFALSE 15142
// if InArea ( x , y , i ) then
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_VAR 0 4
15098: PPUSH
15099: LD_VAR 0 5
15103: PPUSH
15104: CALL_OW 309
15108: IFFALSE 15140
// begin SetAreaMapShow ( i , 0 ) ;
15110: LD_VAR 0 5
15114: PPUSH
15115: LD_INT 0
15117: PPUSH
15118: CALL_OW 424
// camAreas := camAreas diff i ;
15122: LD_ADDR_EXP 7
15126: PUSH
15127: LD_EXP 7
15131: PUSH
15132: LD_VAR 0 5
15136: DIFF
15137: ST_TO_ADDR
// break ;
15138: GO 15142
// end ;
15140: GO 15086
15142: POP
15143: POP
// end ;
15144: PPOPN 5
15146: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
15147: LD_VAR 0 1
15151: PUSH
15152: LD_INT 2
15154: EQUAL
15155: PUSH
15156: LD_VAR 0 2
15160: PUSH
15161: LD_INT 5
15163: EQUAL
15164: AND
15165: IFFALSE 15174
// YouLost ( Ally ) ;
15167: LD_STRING Ally
15169: PPUSH
15170: CALL_OW 104
// end ; end_of_file
15174: PPOPN 2
15176: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15177: LD_EXP 10
15181: NOT
15182: PUSH
15183: LD_INT 12
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 287
15193: PUSH
15194: LD_INT 200
15196: PUSH
15197: LD_INT 160
15199: PUSH
15200: LD_INT 120
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: PUSH
15208: LD_OWVAR 67
15212: ARRAY
15213: LESS
15214: AND
15215: IFFALSE 15242
15217: GO 15219
15219: DISABLE
// begin enable ;
15220: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
15221: LD_INT 1
15223: PPUSH
15224: LD_INT 5
15226: PPUSH
15227: CALL_OW 12
15231: PPUSH
15232: LD_INT 12
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 55
// end ;
15242: END
