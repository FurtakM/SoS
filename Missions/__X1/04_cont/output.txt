// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1727 0 0
// PrepareArabian ;
  12: CALL 1916 0 0
// PrepareAmerican ;
  16: CALL 6326 0 0
// PrepareRussian ;
  20: CALL 2833 0 0
// Action ;
  24: CALL 7886 0 0
// if debug then
  28: LD_EXP 1
  32: IFFALSE 41
// FogOff ( 2 ) ;
  34: LD_INT 2
  36: PPUSH
  37: CALL_OW 344
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 15
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// escapeCounter := 0 ;
 173: LD_ADDR_EXP 18
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// loseCounter := 0 ;
 181: LD_ADDR_EXP 14
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// labCaptured := false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 197: LD_ADDR_EXP 8
 201: PUSH
 202: LD_INT 3
 204: PUSH
 205: LD_INT 4
 207: PUSH
 208: LD_INT 5
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 7
 216: PUSH
 217: LD_INT 8
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if exist_mode then
 237: LD_VAR 0 2
 241: IFFALSE 266
// unit := CreateCharacter ( prefix & ident ) else
 243: LD_ADDR_VAR 0 5
 247: PUSH
 248: LD_VAR 0 3
 252: PUSH
 253: LD_VAR 0 1
 257: STR
 258: PPUSH
 259: CALL_OW 34
 263: ST_TO_ADDR
 264: GO 281
// unit := NewCharacter ( ident ) ;
 266: LD_ADDR_VAR 0 5
 270: PUSH
 271: LD_VAR 0 1
 275: PPUSH
 276: CALL_OW 25
 280: ST_TO_ADDR
// result := unit ;
 281: LD_ADDR_VAR 0 4
 285: PUSH
 286: LD_VAR 0 5
 290: ST_TO_ADDR
// end ;
 291: LD_VAR 0 4
 295: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 296: LD_INT 0
 298: PPUSH
// uc_side := side ;
 299: LD_ADDR_OWVAR 20
 303: PUSH
 304: LD_VAR 0 1
 308: ST_TO_ADDR
// uc_nation := nation ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_VAR 0 2
 318: ST_TO_ADDR
// vc_chassis := chassis ;
 319: LD_ADDR_OWVAR 37
 323: PUSH
 324: LD_VAR 0 3
 328: ST_TO_ADDR
// vc_engine := engine ;
 329: LD_ADDR_OWVAR 39
 333: PUSH
 334: LD_VAR 0 4
 338: ST_TO_ADDR
// vc_control := control ;
 339: LD_ADDR_OWVAR 38
 343: PUSH
 344: LD_VAR 0 5
 348: ST_TO_ADDR
// vc_weapon := weapon ;
 349: LD_ADDR_OWVAR 40
 353: PUSH
 354: LD_VAR 0 6
 358: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 359: LD_ADDR_OWVAR 41
 363: PUSH
 364: LD_VAR 0 7
 368: ST_TO_ADDR
// result := CreateVehicle ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: CALL_OW 45
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 8
 383: RET
// export function SayX ( units , ident ) ; var i ; begin
 384: LD_INT 0
 386: PPUSH
 387: PPUSH
// result := false ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// if not units then
 396: LD_VAR 0 1
 400: NOT
 401: IFFALSE 405
// exit ;
 403: GO 459
// for i in units do
 405: LD_ADDR_VAR 0 4
 409: PUSH
 410: LD_VAR 0 1
 414: PUSH
 415: FOR_IN
 416: IFFALSE 457
// if IsOk ( i ) then
 418: LD_VAR 0 4
 422: PPUSH
 423: CALL_OW 302
 427: IFFALSE 455
// begin Say ( i , ident ) ;
 429: LD_VAR 0 4
 433: PPUSH
 434: LD_VAR 0 2
 438: PPUSH
 439: CALL_OW 88
// result := i ;
 443: LD_ADDR_VAR 0 3
 447: PUSH
 448: LD_VAR 0 4
 452: ST_TO_ADDR
// break ;
 453: GO 457
// end ;
 455: GO 415
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 3
 463: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
 468: PPUSH
// if not observer or not unit then
 469: LD_VAR 0 1
 473: NOT
 474: PUSH
 475: LD_VAR 0 2
 479: NOT
 480: OR
 481: IFFALSE 485
// exit ;
 483: GO 533
// if not See ( GetSide ( observer ) , unit ) then
 485: LD_VAR 0 1
 489: PPUSH
 490: CALL_OW 255
 494: PPUSH
 495: LD_VAR 0 2
 499: PPUSH
 500: CALL_OW 292
 504: NOT
 505: IFFALSE 509
// exit ;
 507: GO 533
// result := GetDistUnits ( observer , unit ) < 12 ;
 509: LD_ADDR_VAR 0 3
 513: PUSH
 514: LD_VAR 0 1
 518: PPUSH
 519: LD_VAR 0 2
 523: PPUSH
 524: CALL_OW 296
 528: PUSH
 529: LD_INT 12
 531: LESS
 532: ST_TO_ADDR
// end ;
 533: LD_VAR 0 3
 537: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 538: LD_INT 0
 540: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 541: LD_VAR 0 2
 545: PUSH
 546: LD_INT 1
 548: ARRAY
 549: PPUSH
 550: LD_VAR 0 2
 554: PUSH
 555: LD_INT 2
 557: ARRAY
 558: PPUSH
 559: CALL_OW 488
 563: PUSH
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 2
 580: ARRAY
 581: PPUSH
 582: CALL_OW 428
 586: PUSH
 587: LD_INT 0
 589: EQUAL
 590: AND
 591: IFFALSE 625
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_VAR 0 3
 620: PPUSH
 621: CALL_OW 48
// end ;
 625: LD_VAR 0 4
 629: RET
// export function Video ( mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// ingame_video = mode ;
 633: LD_ADDR_OWVAR 52
 637: PUSH
 638: LD_VAR 0 1
 642: ST_TO_ADDR
// interface_hidden = mode ;
 643: LD_ADDR_OWVAR 54
 647: PUSH
 648: LD_VAR 0 1
 652: ST_TO_ADDR
// end ;
 653: LD_VAR 0 2
 657: RET
// export function ReverseArray ( array ) ; var i ; begin
 658: LD_INT 0
 660: PPUSH
 661: PPUSH
// if not array then
 662: LD_VAR 0 1
 666: NOT
 667: IFFALSE 671
// exit ;
 669: GO 729
// result := [ ] ;
 671: LD_ADDR_VAR 0 2
 675: PUSH
 676: EMPTY
 677: ST_TO_ADDR
// for i := 1 to array do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_VAR 0 1
 692: PUSH
 693: FOR_TO
 694: IFFALSE 727
// result := Insert ( result , 1 , array [ i ] ) ;
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: LD_VAR 0 2
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_VAR 0 1
 713: PUSH
 714: LD_VAR 0 3
 718: ARRAY
 719: PPUSH
 720: CALL_OW 2
 724: ST_TO_ADDR
 725: GO 693
 727: POP
 728: POP
// end ;
 729: LD_VAR 0 2
 733: RET
// export function ComExit ( unit ) ; begin
 734: LD_INT 0
 736: PPUSH
// result := IsInUnit ( unit ) ;
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_VAR 0 1
 746: PPUSH
 747: CALL_OW 310
 751: ST_TO_ADDR
// if not result then
 752: LD_VAR 0 2
 756: NOT
 757: IFFALSE 761
// exit ;
 759: GO 796
// if GetType ( result ) = unit_vehicle then
 761: LD_VAR 0 2
 765: PPUSH
 766: CALL_OW 247
 770: PUSH
 771: LD_INT 2
 773: EQUAL
 774: IFFALSE 787
// ComExitVehicle ( unit ) else
 776: LD_VAR 0 1
 780: PPUSH
 781: CALL_OW 121
 785: GO 796
// ComExitBuilding ( unit ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 122
// end ;
 796: LD_VAR 0 2
 800: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 801: LD_INT 0
 803: PPUSH
 804: PPUSH
// if not side or not nation then
 805: LD_VAR 0 1
 809: NOT
 810: PUSH
 811: LD_VAR 0 2
 815: NOT
 816: OR
 817: IFFALSE 821
// exit ;
 819: GO 1585
// case nation of nation_american :
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: DOUBLE
 829: EQUAL
 830: IFTRUE 834
 832: GO 1048
 834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_INT 35
 842: PUSH
 843: LD_INT 45
 845: PUSH
 846: LD_INT 46
 848: PUSH
 849: LD_INT 47
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 83
 857: PUSH
 858: LD_INT 84
 860: PUSH
 861: LD_INT 85
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 6
 875: PUSH
 876: LD_INT 15
 878: PUSH
 879: LD_INT 16
 881: PUSH
 882: LD_INT 7
 884: PUSH
 885: LD_INT 12
 887: PUSH
 888: LD_INT 13
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: LD_INT 14
 896: PUSH
 897: LD_INT 20
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 22
 905: PUSH
 906: LD_INT 25
 908: PUSH
 909: LD_INT 32
 911: PUSH
 912: LD_INT 27
 914: PUSH
 915: LD_INT 36
 917: PUSH
 918: LD_INT 69
 920: PUSH
 921: LD_INT 39
 923: PUSH
 924: LD_INT 34
 926: PUSH
 927: LD_INT 40
 929: PUSH
 930: LD_INT 48
 932: PUSH
 933: LD_INT 49
 935: PUSH
 936: LD_INT 50
 938: PUSH
 939: LD_INT 51
 941: PUSH
 942: LD_INT 52
 944: PUSH
 945: LD_INT 53
 947: PUSH
 948: LD_INT 54
 950: PUSH
 951: LD_INT 55
 953: PUSH
 954: LD_INT 56
 956: PUSH
 957: LD_INT 57
 959: PUSH
 960: LD_INT 58
 962: PUSH
 963: LD_INT 59
 965: PUSH
 966: LD_INT 60
 968: PUSH
 969: LD_INT 61
 971: PUSH
 972: LD_INT 62
 974: PUSH
 975: LD_INT 80
 977: PUSH
 978: LD_INT 82
 980: PUSH
 981: LD_INT 83
 983: PUSH
 984: LD_INT 84
 986: PUSH
 987: LD_INT 85
 989: PUSH
 990: LD_INT 86
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: ST_TO_ADDR
1046: GO 1509
1048: LD_INT 2
1050: DOUBLE
1051: EQUAL
1052: IFTRUE 1056
1054: GO 1278
1056: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 35
1064: PUSH
1065: LD_INT 45
1067: PUSH
1068: LD_INT 46
1070: PUSH
1071: LD_INT 47
1073: PUSH
1074: LD_INT 82
1076: PUSH
1077: LD_INT 83
1079: PUSH
1080: LD_INT 84
1082: PUSH
1083: LD_INT 85
1085: PUSH
1086: LD_INT 87
1088: PUSH
1089: LD_INT 70
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 11
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: LD_INT 4
1103: PUSH
1104: LD_INT 5
1106: PUSH
1107: LD_INT 6
1109: PUSH
1110: LD_INT 15
1112: PUSH
1113: LD_INT 18
1115: PUSH
1116: LD_INT 7
1118: PUSH
1119: LD_INT 17
1121: PUSH
1122: LD_INT 8
1124: PUSH
1125: LD_INT 20
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 22
1133: PUSH
1134: LD_INT 72
1136: PUSH
1137: LD_INT 26
1139: PUSH
1140: LD_INT 69
1142: PUSH
1143: LD_INT 39
1145: PUSH
1146: LD_INT 40
1148: PUSH
1149: LD_INT 41
1151: PUSH
1152: LD_INT 42
1154: PUSH
1155: LD_INT 43
1157: PUSH
1158: LD_INT 48
1160: PUSH
1161: LD_INT 49
1163: PUSH
1164: LD_INT 50
1166: PUSH
1167: LD_INT 51
1169: PUSH
1170: LD_INT 52
1172: PUSH
1173: LD_INT 53
1175: PUSH
1176: LD_INT 54
1178: PUSH
1179: LD_INT 55
1181: PUSH
1182: LD_INT 56
1184: PUSH
1185: LD_INT 60
1187: PUSH
1188: LD_INT 61
1190: PUSH
1191: LD_INT 62
1193: PUSH
1194: LD_INT 66
1196: PUSH
1197: LD_INT 67
1199: PUSH
1200: LD_INT 68
1202: PUSH
1203: LD_INT 81
1205: PUSH
1206: LD_INT 82
1208: PUSH
1209: LD_INT 83
1211: PUSH
1212: LD_INT 84
1214: PUSH
1215: LD_INT 85
1217: PUSH
1218: LD_INT 87
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: ST_TO_ADDR
1276: GO 1509
1278: LD_INT 3
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1508
1286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_INT 46
1294: PUSH
1295: LD_INT 47
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 2
1303: PUSH
1304: LD_INT 82
1306: PUSH
1307: LD_INT 83
1309: PUSH
1310: LD_INT 84
1312: PUSH
1313: LD_INT 85
1315: PUSH
1316: LD_INT 86
1318: PUSH
1319: LD_INT 11
1321: PUSH
1322: LD_INT 9
1324: PUSH
1325: LD_INT 20
1327: PUSH
1328: LD_INT 19
1330: PUSH
1331: LD_INT 21
1333: PUSH
1334: LD_INT 24
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 25
1342: PUSH
1343: LD_INT 28
1345: PUSH
1346: LD_INT 29
1348: PUSH
1349: LD_INT 30
1351: PUSH
1352: LD_INT 31
1354: PUSH
1355: LD_INT 37
1357: PUSH
1358: LD_INT 38
1360: PUSH
1361: LD_INT 32
1363: PUSH
1364: LD_INT 27
1366: PUSH
1367: LD_INT 33
1369: PUSH
1370: LD_INT 69
1372: PUSH
1373: LD_INT 39
1375: PUSH
1376: LD_INT 34
1378: PUSH
1379: LD_INT 40
1381: PUSH
1382: LD_INT 71
1384: PUSH
1385: LD_INT 23
1387: PUSH
1388: LD_INT 44
1390: PUSH
1391: LD_INT 48
1393: PUSH
1394: LD_INT 49
1396: PUSH
1397: LD_INT 50
1399: PUSH
1400: LD_INT 51
1402: PUSH
1403: LD_INT 52
1405: PUSH
1406: LD_INT 53
1408: PUSH
1409: LD_INT 54
1411: PUSH
1412: LD_INT 55
1414: PUSH
1415: LD_INT 56
1417: PUSH
1418: LD_INT 57
1420: PUSH
1421: LD_INT 58
1423: PUSH
1424: LD_INT 59
1426: PUSH
1427: LD_INT 63
1429: PUSH
1430: LD_INT 64
1432: PUSH
1433: LD_INT 65
1435: PUSH
1436: LD_INT 82
1438: PUSH
1439: LD_INT 83
1441: PUSH
1442: LD_INT 84
1444: PUSH
1445: LD_INT 85
1447: PUSH
1448: LD_INT 86
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
1506: GO 1509
1508: POP
// if state > - 1 and state < 3 then
1509: LD_VAR 0 3
1513: PUSH
1514: LD_INT 1
1516: NEG
1517: GREATER
1518: PUSH
1519: LD_VAR 0 3
1523: PUSH
1524: LD_INT 3
1526: LESS
1527: AND
1528: IFFALSE 1585
// for i in result do
1530: LD_ADDR_VAR 0 5
1534: PUSH
1535: LD_VAR 0 4
1539: PUSH
1540: FOR_IN
1541: IFFALSE 1583
// if GetTech ( i , side ) <> state then
1543: LD_VAR 0 5
1547: PPUSH
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 321
1557: PUSH
1558: LD_VAR 0 3
1562: NONEQUAL
1563: IFFALSE 1581
// result := result diff i ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_VAR 0 4
1574: PUSH
1575: LD_VAR 0 5
1579: DIFF
1580: ST_TO_ADDR
1581: GO 1540
1583: POP
1584: POP
// end ;
1585: LD_VAR 0 4
1589: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
// InitUc ;
1594: CALL_OW 18
// InitHc ;
1598: CALL_OW 19
// uc_side := 0 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 0
1609: ST_TO_ADDR
// uc_nation := 0 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 0
1617: ST_TO_ADDR
// for i = 1 to amount do
1618: LD_ADDR_VAR 0 4
1622: PUSH
1623: DOUBLE
1624: LD_INT 1
1626: DEC
1627: ST_TO_ADDR
1628: LD_VAR 0 2
1632: PUSH
1633: FOR_TO
1634: IFFALSE 1716
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1636: LD_ADDR_OWVAR 29
1640: PUSH
1641: LD_INT 9
1643: PPUSH
1644: LD_INT 12
1646: PPUSH
1647: CALL_OW 12
1651: PUSH
1652: LD_INT 9
1654: PPUSH
1655: LD_INT 12
1657: PPUSH
1658: CALL_OW 12
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1667: LD_ADDR_OWVAR 35
1671: PUSH
1672: LD_INT 1
1674: NEG
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1684: LD_INT 0
1686: PPUSH
1687: LD_INT 12
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1697: CALL_OW 44
1701: PPUSH
1702: LD_VAR 0 1
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// end ;
1714: GO 1633
1716: POP
1717: POP
// InitHc ;
1718: CALL_OW 19
// end ;
1722: LD_VAR 0 3
1726: RET
// export function PrepareNature ; var i ; begin
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1731: LD_INT 18
1733: PPUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_OWVAR 67
1752: ARRAY
1753: PPUSH
1754: CALL 1590 0 2
// for i := 1 to 3 do
1758: LD_ADDR_VAR 0 2
1762: PUSH
1763: DOUBLE
1764: LD_INT 1
1766: DEC
1767: ST_TO_ADDR
1768: LD_INT 3
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1807
// begin hc_class := 21 ;
1774: LD_ADDR_OWVAR 28
1778: PUSH
1779: LD_INT 21
1781: ST_TO_ADDR
// hc_gallery :=  ;
1782: LD_ADDR_OWVAR 33
1786: PUSH
1787: LD_STRING 
1789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1790: CALL_OW 44
1794: PPUSH
1795: LD_INT 18
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// end ;
1805: GO 1771
1807: POP
1808: POP
// for i := 1 to 2 do
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1858
// begin hc_class := 18 ;
1825: LD_ADDR_OWVAR 28
1829: PUSH
1830: LD_INT 18
1832: ST_TO_ADDR
// hc_gallery :=  ;
1833: LD_ADDR_OWVAR 33
1837: PUSH
1838: LD_STRING 
1840: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1841: CALL_OW 44
1845: PPUSH
1846: LD_INT 18
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 49
// end ;
1856: GO 1822
1858: POP
1859: POP
// for i := 1 to 2 do
1860: LD_ADDR_VAR 0 2
1864: PUSH
1865: DOUBLE
1866: LD_INT 1
1868: DEC
1869: ST_TO_ADDR
1870: LD_INT 2
1872: PUSH
1873: FOR_TO
1874: IFFALSE 1909
// begin hc_class := 13 ;
1876: LD_ADDR_OWVAR 28
1880: PUSH
1881: LD_INT 13
1883: ST_TO_ADDR
// hc_gallery :=  ;
1884: LD_ADDR_OWVAR 33
1888: PUSH
1889: LD_STRING 
1891: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1892: CALL_OW 44
1896: PPUSH
1897: LD_INT 18
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: CALL_OW 49
// end ;
1907: GO 1873
1909: POP
1910: POP
// end ; end_of_file
1911: LD_VAR 0 1
1915: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1916: LD_INT 0
1918: PPUSH
1919: PPUSH
// uc_side := 2 ;
1920: LD_ADDR_OWVAR 20
1924: PUSH
1925: LD_INT 2
1927: ST_TO_ADDR
// uc_nation := 2 ;
1928: LD_ADDR_OWVAR 21
1932: PUSH
1933: LD_INT 2
1935: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1936: LD_ADDR_EXP 21
1940: PUSH
1941: LD_STRING Heike
1943: PPUSH
1944: LD_EXP 1
1948: NOT
1949: PPUSH
1950: LD_EXP 2
1954: PPUSH
1955: CALL 233 0 3
1959: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1960: LD_ADDR_EXP 24
1964: PUSH
1965: LD_STRING Ibrahim
1967: PPUSH
1968: LD_EXP 1
1972: NOT
1973: PPUSH
1974: LD_EXP 2
1978: PPUSH
1979: CALL 233 0 3
1983: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1984: LD_ADDR_EXP 22
1988: PUSH
1989: LD_STRING Givi
1991: PPUSH
1992: LD_EXP 1
1996: NOT
1997: PPUSH
1998: LD_EXP 2
2002: PPUSH
2003: CALL 233 0 3
2007: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2008: LD_ADDR_EXP 25
2012: PUSH
2013: LD_STRING Kamil
2015: PPUSH
2016: LD_EXP 1
2020: NOT
2021: PPUSH
2022: LD_EXP 2
2026: PPUSH
2027: CALL 233 0 3
2031: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2032: LD_ADDR_EXP 26
2036: PUSH
2037: LD_STRING Kaia
2039: PPUSH
2040: LD_EXP 1
2044: NOT
2045: PPUSH
2046: LD_EXP 2
2050: PPUSH
2051: CALL 233 0 3
2055: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: LD_STRING Sophia
2063: PPUSH
2064: LD_EXP 1
2068: NOT
2069: PPUSH
2070: LD_EXP 2
2074: PPUSH
2075: CALL 233 0 3
2079: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2080: LD_ADDR_EXP 28
2084: PUSH
2085: LD_STRING Markov
2087: PPUSH
2088: LD_EXP 1
2092: NOT
2093: PPUSH
2094: LD_EXP 2
2098: PPUSH
2099: CALL 233 0 3
2103: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2104: LD_ADDR_EXP 31
2108: PUSH
2109: LD_STRING Aviradze
2111: PPUSH
2112: LD_EXP 1
2116: NOT
2117: PPUSH
2118: LD_EXP 2
2122: PPUSH
2123: CALL 233 0 3
2127: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2128: LD_ADDR_EXP 34
2132: PUSH
2133: EMPTY
2134: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2135: LD_ADDR_EXP 32
2139: PUSH
2140: LD_STRING 03_others
2142: PPUSH
2143: CALL_OW 31
2147: ST_TO_ADDR
// uc_side := 5 ;
2148: LD_ADDR_OWVAR 20
2152: PUSH
2153: LD_INT 5
2155: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2156: LD_ADDR_EXP 30
2160: PUSH
2161: LD_STRING Kurt
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: LD_STRING 
2169: PPUSH
2170: CALL 233 0 3
2174: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2175: LD_ADDR_EXP 23
2179: PUSH
2180: LD_STRING Mike
2182: PPUSH
2183: LD_EXP 1
2187: NOT
2188: PPUSH
2189: LD_EXP 2
2193: PPUSH
2194: CALL 233 0 3
2198: ST_TO_ADDR
// if Mike then
2199: LD_EXP 23
2203: IFFALSE 2226
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2205: LD_EXP 23
2209: PPUSH
2210: LD_INT 142
2212: PPUSH
2213: LD_INT 63
2215: PPUSH
2216: LD_INT 2
2218: PPUSH
2219: LD_INT 0
2221: PPUSH
2222: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2226: LD_EXP 30
2230: PPUSH
2231: LD_INT 142
2233: PPUSH
2234: LD_INT 63
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2247: LD_EXP 30
2251: PUSH
2252: LD_EXP 23
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PPUSH
2261: CALL_OW 140
// end ;
2265: LD_VAR 0 1
2269: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2270: LD_INT 0
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
// uc_side := 5 ;
2276: LD_ADDR_OWVAR 20
2280: PUSH
2281: LD_INT 5
2283: ST_TO_ADDR
// uc_nation := 2 ;
2284: LD_ADDR_OWVAR 21
2288: PUSH
2289: LD_INT 2
2291: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2292: LD_ADDR_EXP 29
2296: PUSH
2297: LD_STRING Omar
2299: PPUSH
2300: LD_INT 0
2302: PPUSH
2303: LD_STRING 
2305: PPUSH
2306: CALL 233 0 3
2310: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2311: LD_EXP 29
2315: PPUSH
2316: LD_INT 284
2318: PPUSH
2319: LD_INT 163
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2329: LD_EXP 29
2333: PPUSH
2334: LD_INT 256
2336: PPUSH
2337: LD_INT 129
2339: PPUSH
2340: CALL_OW 111
// wait ( 0 0$2 ) ;
2344: LD_INT 70
2346: PPUSH
2347: CALL_OW 67
// omarSquad := [ ] ;
2351: LD_ADDR_EXP 33
2355: PUSH
2356: EMPTY
2357: ST_TO_ADDR
// for i := 1 to 5 do
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: DOUBLE
2364: LD_INT 1
2366: DEC
2367: ST_TO_ADDR
2368: LD_INT 5
2370: PUSH
2371: FOR_TO
2372: IFFALSE 2578
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2374: LD_INT 5
2376: PPUSH
2377: LD_INT 2
2379: PPUSH
2380: LD_INT 13
2382: PUSH
2383: LD_INT 14
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: LD_VAR 0 2
2394: PUSH
2395: LD_INT 2
2397: MOD
2398: PUSH
2399: LD_INT 1
2401: PLUS
2402: ARRAY
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: LD_INT 25
2412: PUSH
2413: LD_INT 27
2415: PUSH
2416: LD_INT 26
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 3
2431: MOD
2432: PUSH
2433: LD_INT 1
2435: PLUS
2436: ARRAY
2437: PPUSH
2438: LD_INT 100
2440: PPUSH
2441: CALL 296 0 7
// veh := CreateVehicle ;
2445: LD_ADDR_VAR 0 4
2449: PUSH
2450: CALL_OW 45
2454: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2455: LD_VAR 0 4
2459: PPUSH
2460: LD_INT 5
2462: PPUSH
2463: CALL_OW 233
// omarSquad := omarSquad union veh ;
2467: LD_ADDR_EXP 33
2471: PUSH
2472: LD_EXP 33
2476: PUSH
2477: LD_VAR 0 4
2481: UNION
2482: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_INT 284
2490: PPUSH
2491: LD_INT 163
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2501: LD_INT 0
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 380
// un := CreateHuman ;
2514: LD_ADDR_VAR 0 3
2518: PUSH
2519: CALL_OW 44
2523: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2524: LD_ADDR_EXP 33
2528: PUSH
2529: LD_EXP 33
2533: PUSH
2534: LD_VAR 0 3
2538: UNION
2539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2540: LD_VAR 0 3
2544: PPUSH
2545: LD_VAR 0 4
2549: PPUSH
2550: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 271
2561: PPUSH
2562: LD_INT 144
2564: PPUSH
2565: CALL_OW 111
// wait ( 0 0$2 ) ;
2569: LD_INT 70
2571: PPUSH
2572: CALL_OW 67
// end ;
2576: GO 2371
2578: POP
2579: POP
// for i := 1 to 3 do
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: DOUBLE
2586: LD_INT 1
2588: DEC
2589: ST_TO_ADDR
2590: LD_INT 3
2592: PUSH
2593: FOR_TO
2594: IFFALSE 2677
// begin PrepareHuman ( false , 1 , 3 ) ;
2596: LD_INT 0
2598: PPUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_INT 3
2604: PPUSH
2605: CALL_OW 380
// un := CreateHuman ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: CALL_OW 44
2618: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2619: LD_ADDR_EXP 33
2623: PUSH
2624: LD_EXP 33
2628: PUSH
2629: LD_VAR 0 3
2633: UNION
2634: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2635: LD_VAR 0 3
2639: PPUSH
2640: LD_INT 284
2642: PPUSH
2643: LD_INT 163
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2653: LD_VAR 0 3
2657: PPUSH
2658: LD_INT 257
2660: PPUSH
2661: LD_INT 138
2663: PPUSH
2664: CALL_OW 111
// wait ( 0 0$1 ) ;
2668: LD_INT 35
2670: PPUSH
2671: CALL_OW 67
// end ;
2675: GO 2593
2677: POP
2678: POP
// for i := 1 to 6 do
2679: LD_ADDR_VAR 0 2
2683: PUSH
2684: DOUBLE
2685: LD_INT 1
2687: DEC
2688: ST_TO_ADDR
2689: LD_INT 6
2691: PUSH
2692: FOR_TO
2693: IFFALSE 2826
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2695: LD_INT 0
2697: PPUSH
2698: LD_INT 1
2700: PUSH
2701: LD_INT 1
2703: PUSH
2704: LD_INT 4
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 3
2719: MOD
2720: PUSH
2721: LD_INT 1
2723: PLUS
2724: ARRAY
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: CALL_OW 380
// un := CreateHuman ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: CALL_OW 44
2742: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2743: LD_ADDR_EXP 33
2747: PUSH
2748: LD_EXP 33
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 225
2766: PPUSH
2767: LD_INT 163
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 48
// if i = 1 then
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: EQUAL
2785: IFFALSE 2802
// SetAttr ( un , attr_speed , 12 ) ;
2787: LD_VAR 0 3
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: LD_INT 12
2797: PPUSH
2798: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 222
2809: PPUSH
2810: LD_INT 157
2812: PPUSH
2813: CALL_OW 111
// wait ( 0 0$1 ) ;
2817: LD_INT 35
2819: PPUSH
2820: CALL_OW 67
// end ;
2824: GO 2692
2826: POP
2827: POP
// end ; end_of_file
2828: LD_VAR 0 1
2832: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
2837: PPUSH
2838: PPUSH
2839: PPUSH
2840: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2841: LD_ADDR_EXP 45
2845: PUSH
2846: LD_INT 22
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: LD_INT 30
2858: PUSH
2859: LD_INT 7
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PPUSH
2870: CALL_OW 69
2874: PUSH
2875: LD_INT 1
2877: ARRAY
2878: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_INT 21
2886: PUSH
2887: LD_INT 3
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 23
2896: PUSH
2897: LD_INT 3
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PPUSH
2908: CALL_OW 69
2912: PUSH
2913: FOR_IN
2914: IFFALSE 2930
// SetBLevel ( i , 5 ) ;
2916: LD_VAR 0 2
2920: PPUSH
2921: LD_INT 5
2923: PPUSH
2924: CALL_OW 241
2928: GO 2913
2930: POP
2931: POP
// SetBName ( kirov , kirov ) ;
2932: LD_INT 71
2934: PPUSH
2935: LD_STRING kirov
2937: PPUSH
2938: CALL_OW 500
// SetBName ( beria , beria ) ;
2942: LD_INT 106
2944: PPUSH
2945: LD_STRING beria
2947: PPUSH
2948: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2952: LD_INT 112
2954: PPUSH
2955: LD_STRING kagan
2957: PPUSH
2958: CALL_OW 500
// uc_side := 6 ;
2962: LD_ADDR_OWVAR 20
2966: PUSH
2967: LD_INT 6
2969: ST_TO_ADDR
// uc_nation := 3 ;
2970: LD_ADDR_OWVAR 21
2974: PUSH
2975: LD_INT 3
2977: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2978: LD_ADDR_VAR 0 5
2982: PUSH
2983: LD_INT 22
2985: PUSH
2986: LD_INT 6
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: PUSH
2993: LD_INT 30
2995: PUSH
2996: LD_INT 5
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: CALL_OW 69
3011: PUSH
3012: LD_INT 1
3014: ARRAY
3015: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3016: LD_ADDR_VAR 0 4
3020: PUSH
3021: LD_INT 22
3023: PUSH
3024: LD_INT 6
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 30
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 69
3049: PUSH
3050: LD_INT 1
3052: ARRAY
3053: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3054: LD_ADDR_EXP 39
3058: PUSH
3059: EMPTY
3060: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3061: LD_ADDR_EXP 40
3065: PUSH
3066: EMPTY
3067: ST_TO_ADDR
// russianPatrol := [ ] ;
3068: LD_ADDR_EXP 42
3072: PUSH
3073: EMPTY
3074: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3075: LD_ADDR_EXP 35
3079: PUSH
3080: LD_STRING Kurin
3082: PPUSH
3083: LD_INT 0
3085: PPUSH
3086: LD_STRING 
3088: PPUSH
3089: CALL 233 0 3
3093: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3094: LD_EXP 35
3098: PPUSH
3099: LD_INT 71
3101: PPUSH
3102: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3106: LD_ADDR_EXP 37
3110: PUSH
3111: LD_STRING Popov
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: LD_STRING 
3119: PPUSH
3120: CALL 233 0 3
3124: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3125: LD_EXP 37
3129: PPUSH
3130: LD_INT 71
3132: PPUSH
3133: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3137: LD_ADDR_EXP 36
3141: PUSH
3142: LD_STRING Grishko
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: LD_STRING 
3150: PPUSH
3151: CALL 233 0 3
3155: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3156: LD_EXP 36
3160: PPUSH
3161: LD_INT 207
3163: PPUSH
3164: LD_INT 106
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3174: LD_EXP 36
3178: PPUSH
3179: LD_INT 209
3181: PPUSH
3182: LD_INT 106
3184: PPUSH
3185: CALL_OW 118
// for i := 1 to 2 do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 2
3201: PUSH
3202: FOR_TO
3203: IFFALSE 3258
// begin PrepareHuman ( false , 2 , 2 ) ;
3205: LD_INT 0
3207: PPUSH
3208: LD_INT 2
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: CALL_OW 380
// un := CreateHuman ;
3218: LD_ADDR_VAR 0 3
3222: PUSH
3223: CALL_OW 44
3227: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3228: LD_VAR 0 3
3232: PPUSH
3233: LD_INT 71
3235: PPUSH
3236: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3240: LD_ADDR_EXP 39
3244: PUSH
3245: LD_EXP 39
3249: PUSH
3250: LD_VAR 0 3
3254: UNION
3255: ST_TO_ADDR
// end ;
3256: GO 3202
3258: POP
3259: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3260: LD_ADDR_VAR 0 2
3264: PUSH
3265: DOUBLE
3266: LD_INT 1
3268: DEC
3269: ST_TO_ADDR
3270: LD_INT 5
3272: PUSH
3273: LD_INT 6
3275: PUSH
3276: LD_INT 6
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: LIST
3283: PUSH
3284: LD_OWVAR 67
3288: ARRAY
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3365
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3293: LD_INT 0
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: LD_INT 2
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: LD_OWVAR 67
3317: ARRAY
3318: PPUSH
3319: CALL_OW 380
// un := CreateHuman ;
3323: LD_ADDR_VAR 0 3
3327: PUSH
3328: CALL_OW 44
3332: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_VAR 0 5
3342: PPUSH
3343: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3347: LD_ADDR_EXP 39
3351: PUSH
3352: LD_EXP 39
3356: PUSH
3357: LD_VAR 0 3
3361: UNION
3362: ST_TO_ADDR
// end ;
3363: GO 3290
3365: POP
3366: POP
// for i := 1 to 3 do
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: LD_INT 3
3379: PUSH
3380: FOR_TO
3381: IFFALSE 3436
// begin PrepareHuman ( false , 3 , 3 ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: CALL_OW 380
// un := CreateHuman ;
3396: LD_ADDR_VAR 0 3
3400: PUSH
3401: CALL_OW 44
3405: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3406: LD_VAR 0 3
3410: PPUSH
3411: LD_INT 92
3413: PPUSH
3414: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3418: LD_ADDR_EXP 39
3422: PUSH
3423: LD_EXP 39
3427: PUSH
3428: LD_VAR 0 3
3432: UNION
3433: ST_TO_ADDR
// end ;
3434: GO 3380
3436: POP
3437: POP
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3507
// begin PrepareHuman ( false , 4 , 3 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 4
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 3
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3477: LD_VAR 0 3
3481: PPUSH
3482: LD_INT 83
3484: PPUSH
3485: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3489: LD_ADDR_EXP 39
3493: PUSH
3494: LD_EXP 39
3498: PUSH
3499: LD_VAR 0 3
3503: UNION
3504: ST_TO_ADDR
// end ;
3505: GO 3451
3507: POP
3508: POP
// for i := 1 to 5 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 5
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3580
// begin PrepareHuman ( false , 1 , 3 ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PPUSH
3531: LD_INT 3
3533: PPUSH
3534: CALL_OW 380
// un := CreateHuman ;
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: CALL_OW 44
3547: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3548: LD_VAR 0 3
3552: PPUSH
3553: LD_VAR 0 4
3557: PPUSH
3558: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3562: LD_ADDR_EXP 41
3566: PUSH
3567: LD_EXP 41
3571: PUSH
3572: LD_VAR 0 3
3576: UNION
3577: ST_TO_ADDR
// end ;
3578: GO 3522
3580: POP
3581: POP
// russianCargo := [ ] ;
3582: LD_ADDR_EXP 44
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to 2 do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_INT 2
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3735
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3605: LD_INT 6
3607: PPUSH
3608: LD_INT 3
3610: PPUSH
3611: LD_INT 21
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 51
3622: PPUSH
3623: LD_INT 100
3625: PPUSH
3626: CALL 296 0 7
// un := CreateVehicle ;
3630: LD_ADDR_VAR 0 3
3634: PUSH
3635: CALL_OW 45
3639: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3640: LD_ADDR_EXP 44
3644: PUSH
3645: LD_EXP 44
3649: PUSH
3650: LD_VAR 0 3
3654: UNION
3655: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3656: LD_VAR 0 3
3660: PPUSH
3661: LD_INT 2
3663: PPUSH
3664: LD_INT 100
3666: PPUSH
3667: CALL_OW 290
// SetDir ( un , 4 ) ;
3671: LD_VAR 0 3
3675: PPUSH
3676: LD_INT 4
3678: PPUSH
3679: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3683: LD_VAR 0 3
3687: PPUSH
3688: LD_INT 147
3690: PPUSH
3691: LD_INT 103
3693: PPUSH
3694: LD_INT 4
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3704: LD_INT 0
3706: PPUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_OWVAR 67
3714: PPUSH
3715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3719: CALL_OW 44
3723: PPUSH
3724: LD_VAR 0 3
3728: PPUSH
3729: CALL_OW 52
// end ;
3733: GO 3602
3735: POP
3736: POP
// uc_side := 3 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 3
3744: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3745: LD_ADDR_EXP 38
3749: PUSH
3750: LD_STRING Burlak
3752: PPUSH
3753: LD_INT 0
3755: PPUSH
3756: LD_STRING 
3758: PPUSH
3759: CALL 233 0 3
3763: ST_TO_ADDR
// for i := 1 to 2 do
3764: LD_ADDR_VAR 0 2
3768: PUSH
3769: DOUBLE
3770: LD_INT 1
3772: DEC
3773: ST_TO_ADDR
3774: LD_INT 2
3776: PUSH
3777: FOR_TO
3778: IFFALSE 3871
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3780: LD_INT 0
3782: PPUSH
3783: LD_INT 1
3785: PPUSH
3786: LD_OWVAR 67
3790: PUSH
3791: LD_INT 1
3793: PLUS
3794: PPUSH
3795: CALL_OW 380
// un := CreateHuman ;
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: CALL_OW 44
3808: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 3
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 30
3826: PUSH
3827: LD_INT 32
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: LD_VAR 0 2
3847: ARRAY
3848: PPUSH
3849: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3853: LD_ADDR_EXP 40
3857: PUSH
3858: LD_EXP 40
3862: PUSH
3863: LD_VAR 0 3
3867: UNION
3868: ST_TO_ADDR
// end ;
3869: GO 3777
3871: POP
3872: POP
// for i := 1 to 2 do
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: DOUBLE
3879: LD_INT 1
3881: DEC
3882: ST_TO_ADDR
3883: LD_INT 2
3885: PUSH
3886: FOR_TO
3887: IFFALSE 3978
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3889: LD_INT 0
3891: PPUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_OWVAR 67
3899: PUSH
3900: LD_INT 1
3902: PLUS
3903: PPUSH
3904: CALL_OW 380
// un := CreateHuman ;
3908: LD_ADDR_VAR 0 3
3912: PUSH
3913: CALL_OW 44
3917: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3918: LD_VAR 0 3
3922: PPUSH
3923: LD_INT 22
3925: PUSH
3926: LD_INT 3
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 30
3935: PUSH
3936: LD_INT 5
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PPUSH
3947: CALL_OW 69
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3960: LD_ADDR_EXP 40
3964: PUSH
3965: LD_EXP 40
3969: PUSH
3970: LD_VAR 0 3
3974: UNION
3975: ST_TO_ADDR
// end ;
3976: GO 3886
3978: POP
3979: POP
// for i := 1 to 2 do
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: DOUBLE
3986: LD_INT 1
3988: DEC
3989: ST_TO_ADDR
3990: LD_INT 2
3992: PUSH
3993: FOR_TO
3994: IFFALSE 4081
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3996: LD_INT 0
3998: PPUSH
3999: LD_INT 4
4001: PPUSH
4002: LD_OWVAR 67
4006: PPUSH
4007: CALL_OW 380
// un := CreateHuman ;
4011: LD_ADDR_VAR 0 3
4015: PUSH
4016: CALL_OW 44
4020: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4021: LD_VAR 0 3
4025: PPUSH
4026: LD_INT 22
4028: PUSH
4029: LD_INT 3
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 30
4038: PUSH
4039: LD_INT 7
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 69
4054: PUSH
4055: LD_INT 1
4057: ARRAY
4058: PPUSH
4059: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4063: LD_ADDR_EXP 40
4067: PUSH
4068: LD_EXP 40
4072: PUSH
4073: LD_VAR 0 3
4077: UNION
4078: ST_TO_ADDR
// end ;
4079: GO 3993
4081: POP
4082: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4083: LD_INT 0
4085: PPUSH
4086: LD_INT 2
4088: PPUSH
4089: LD_OWVAR 67
4093: PPUSH
4094: CALL_OW 380
// un := CreateHuman ;
4098: LD_ADDR_VAR 0 3
4102: PUSH
4103: CALL_OW 44
4107: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_INT 106
4115: PPUSH
4116: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4120: LD_ADDR_EXP 40
4124: PUSH
4125: LD_EXP 40
4129: PUSH
4130: LD_VAR 0 3
4134: UNION
4135: ST_TO_ADDR
// for i := 1 to 3 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_INT 3
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4272
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4152: LD_ADDR_VAR 0 6
4156: PUSH
4157: LD_INT 22
4159: PUSH
4160: LD_INT 3
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 30
4169: PUSH
4170: LD_INT 31
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 69
4185: PUSH
4186: LD_VAR 0 2
4190: ARRAY
4191: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4192: LD_INT 0
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: LD_OWVAR 67
4202: PPUSH
4203: CALL_OW 380
// un := CreateHuman ;
4207: LD_ADDR_VAR 0 3
4211: PUSH
4212: CALL_OW 44
4216: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4217: LD_VAR 0 3
4221: PPUSH
4222: LD_VAR 0 6
4226: PPUSH
4227: CALL_OW 254
4231: PUSH
4232: LD_INT 3
4234: PLUS
4235: PPUSH
4236: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_VAR 0 6
4249: PPUSH
4250: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4254: LD_ADDR_EXP 40
4258: PUSH
4259: LD_EXP 40
4263: PUSH
4264: LD_VAR 0 3
4268: UNION
4269: ST_TO_ADDR
// end ;
4270: GO 4149
4272: POP
4273: POP
// russianOmicronAttackers := [ ] ;
4274: LD_ADDR_EXP 43
4278: PUSH
4279: EMPTY
4280: ST_TO_ADDR
// for i := 1 to 6 do
4281: LD_ADDR_VAR 0 2
4285: PUSH
4286: DOUBLE
4287: LD_INT 1
4289: DEC
4290: ST_TO_ADDR
4291: LD_INT 6
4293: PUSH
4294: FOR_TO
4295: IFFALSE 4519
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 3
4302: PPUSH
4303: LD_INT 21
4305: PUSH
4306: LD_INT 23
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_VAR 0 2
4317: PUSH
4318: LD_INT 2
4320: MOD
4321: PUSH
4322: LD_INT 1
4324: PLUS
4325: ARRAY
4326: PPUSH
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: LD_INT 43
4335: PUSH
4336: LD_INT 44
4338: PUSH
4339: LD_INT 42
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: LD_VAR 0 2
4351: PUSH
4352: LD_INT 3
4354: MOD
4355: PUSH
4356: LD_INT 1
4358: PLUS
4359: ARRAY
4360: PPUSH
4361: LD_INT 100
4363: PPUSH
4364: CALL 296 0 7
// un := CreateVehicle ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 45
4377: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 0
4385: PUSH
4386: LD_INT 5
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 2
4398: PPUSH
4399: CALL_OW 12
4403: ARRAY
4404: PPUSH
4405: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4409: LD_ADDR_EXP 43
4413: PUSH
4414: LD_EXP 43
4418: PUSH
4419: LD_VAR 0 3
4423: UNION
4424: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4425: LD_VAR 0 3
4429: PPUSH
4430: LD_INT 127
4432: PPUSH
4433: LD_INT 89
4435: PPUSH
4436: LD_INT 7
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 50
// uc_side := 3 ;
4446: LD_ADDR_OWVAR 20
4450: PUSH
4451: LD_INT 3
4453: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4454: LD_INT 0
4456: PPUSH
4457: LD_INT 3
4459: PPUSH
4460: LD_INT 3
4462: PPUSH
4463: CALL_OW 380
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4477: LD_ADDR_EXP 43
4481: PUSH
4482: LD_EXP 43
4486: PUSH
4487: LD_VAR 0 3
4491: UNION
4492: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4493: LD_VAR 0 3
4497: PPUSH
4498: LD_EXP 43
4502: PUSH
4503: LD_EXP 43
4507: PUSH
4508: LD_INT 1
4510: MINUS
4511: ARRAY
4512: PPUSH
4513: CALL_OW 52
// end ;
4517: GO 4294
4519: POP
4520: POP
// for i := 1 to 3 do
4521: LD_ADDR_VAR 0 2
4525: PUSH
4526: DOUBLE
4527: LD_INT 1
4529: DEC
4530: ST_TO_ADDR
4531: LD_INT 3
4533: PUSH
4534: FOR_TO
4535: IFFALSE 4601
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4537: LD_INT 0
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_OWVAR 67
4547: PPUSH
4548: CALL_OW 380
// un := CreateHuman ;
4552: LD_ADDR_VAR 0 3
4556: PUSH
4557: CALL_OW 44
4561: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4562: LD_ADDR_EXP 43
4566: PUSH
4567: LD_EXP 43
4571: PUSH
4572: LD_VAR 0 3
4576: UNION
4577: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 91
4585: PPUSH
4586: LD_INT 60
4588: PPUSH
4589: LD_INT 3
4591: PPUSH
4592: LD_INT 0
4594: PPUSH
4595: CALL_OW 50
// end ;
4599: GO 4534
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// every 0 0$3 do var i ;
4608: GO 4610
4610: DISABLE
4611: LD_INT 0
4613: PPUSH
// begin for i := 1 to 4 do
4614: LD_ADDR_VAR 0 1
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_INT 4
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4647
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4630: LD_EXP 41
4634: PUSH
4635: LD_VAR 0 1
4639: ARRAY
4640: PPUSH
4641: CALL_OW 122
4645: GO 4627
4647: POP
4648: POP
// wait ( 3 ) ;
4649: LD_INT 3
4651: PPUSH
4652: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4656: LD_EXP 41
4660: PUSH
4661: LD_INT 1
4663: ARRAY
4664: PPUSH
4665: LD_INT 22
4667: PUSH
4668: LD_INT 6
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 30
4677: PUSH
4678: LD_INT 31
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: PPUSH
4694: LD_EXP 41
4698: PUSH
4699: LD_INT 1
4701: ARRAY
4702: PPUSH
4703: CALL_OW 74
4707: PPUSH
4708: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4712: LD_EXP 41
4716: PUSH
4717: LD_INT 2
4719: ARRAY
4720: PPUSH
4721: LD_INT 211
4723: PPUSH
4724: LD_INT 107
4726: PPUSH
4727: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4731: LD_EXP 41
4735: PUSH
4736: LD_INT 2
4738: ARRAY
4739: PPUSH
4740: LD_INT 209
4742: PPUSH
4743: LD_INT 106
4745: PPUSH
4746: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4750: LD_EXP 41
4754: PUSH
4755: LD_INT 3
4757: ARRAY
4758: PPUSH
4759: LD_INT 209
4761: PPUSH
4762: LD_INT 103
4764: PPUSH
4765: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4769: LD_EXP 41
4773: PUSH
4774: LD_INT 3
4776: ARRAY
4777: PPUSH
4778: LD_INT 209
4780: PPUSH
4781: LD_INT 106
4783: PPUSH
4784: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4788: LD_EXP 41
4792: PUSH
4793: LD_INT 4
4795: ARRAY
4796: PPUSH
4797: LD_INT 227
4799: PPUSH
4800: LD_INT 117
4802: PPUSH
4803: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4807: LD_EXP 41
4811: PUSH
4812: LD_INT 4
4814: ARRAY
4815: PPUSH
4816: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4820: LD_INT 700
4822: PPUSH
4823: CALL_OW 67
// for i := 3 downto 2 do
4827: LD_ADDR_VAR 0 1
4831: PUSH
4832: DOUBLE
4833: LD_INT 3
4835: INC
4836: ST_TO_ADDR
4837: LD_INT 2
4839: PUSH
4840: FOR_DOWNTO
4841: IFFALSE 5008
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4843: LD_EXP 41
4847: PUSH
4848: LD_VAR 0 1
4852: ARRAY
4853: PPUSH
4854: LD_INT 200
4856: PPUSH
4857: LD_INT 91
4859: PPUSH
4860: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4864: LD_EXP 41
4868: PUSH
4869: LD_VAR 0 1
4873: ARRAY
4874: PPUSH
4875: LD_INT 210
4877: PPUSH
4878: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4882: LD_EXP 41
4886: PUSH
4887: LD_VAR 0 1
4891: ARRAY
4892: PPUSH
4893: LD_INT 224
4895: PPUSH
4896: LD_INT 93
4898: PPUSH
4899: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4903: LD_EXP 41
4907: PUSH
4908: LD_VAR 0 1
4912: ARRAY
4913: PPUSH
4914: LD_INT 210
4916: PPUSH
4917: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4921: LD_EXP 41
4925: PUSH
4926: LD_VAR 0 1
4930: ARRAY
4931: PPUSH
4932: LD_INT 239
4934: PPUSH
4935: LD_INT 123
4937: PPUSH
4938: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4942: LD_EXP 41
4946: PUSH
4947: LD_VAR 0 1
4951: ARRAY
4952: PPUSH
4953: LD_INT 210
4955: PPUSH
4956: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4960: LD_EXP 41
4964: PUSH
4965: LD_VAR 0 1
4969: ARRAY
4970: PPUSH
4971: LD_INT 212
4973: PPUSH
4974: LD_INT 105
4976: PPUSH
4977: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4981: LD_EXP 41
4985: PUSH
4986: LD_VAR 0 1
4990: ARRAY
4991: PPUSH
4992: LD_INT 700
4994: PPUSH
4995: CALL_OW 202
// wait ( 0 0$30 ) ;
4999: LD_INT 1050
5001: PPUSH
5002: CALL_OW 67
// end ;
5006: GO 4840
5008: POP
5009: POP
// until not activeGrishkoAI ;
5010: LD_EXP 10
5014: NOT
5015: IFFALSE 4820
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5017: LD_EXP 41
5021: PPUSH
5022: LD_INT 221
5024: PPUSH
5025: LD_INT 110
5027: PPUSH
5028: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5032: LD_EXP 41
5036: PPUSH
5037: LD_INT 228
5039: PPUSH
5040: LD_INT 115
5042: PPUSH
5043: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5047: LD_EXP 41
5051: PPUSH
5052: CALL_OW 200
// end ;
5056: PPOPN 1
5058: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5059: LD_EXP 12
5063: IFFALSE 5659
5065: GO 5067
5067: DISABLE
5068: LD_INT 0
5070: PPUSH
5071: PPUSH
5072: PPUSH
5073: PPUSH
// begin uc_side := 6 ;
5074: LD_ADDR_OWVAR 20
5078: PUSH
5079: LD_INT 6
5081: ST_TO_ADDR
// uc_nation := 3 ;
5082: LD_ADDR_OWVAR 21
5086: PUSH
5087: LD_INT 3
5089: ST_TO_ADDR
// for i := 1 to 3 do
5090: LD_ADDR_VAR 0 2
5094: PUSH
5095: DOUBLE
5096: LD_INT 1
5098: DEC
5099: ST_TO_ADDR
5100: LD_INT 3
5102: PUSH
5103: FOR_TO
5104: IFFALSE 5213
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5106: LD_INT 0
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 3
5117: PUSH
5118: LD_INT 4
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: PUSH
5126: LD_OWVAR 67
5130: ARRAY
5131: PPUSH
5132: CALL_OW 380
// un := CreateHuman ;
5136: LD_ADDR_VAR 0 1
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5146: LD_ADDR_EXP 42
5150: PUSH
5151: LD_EXP 42
5155: PUSH
5156: LD_VAR 0 1
5160: UNION
5161: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5162: LD_VAR 0 1
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_INT 11
5181: PPUSH
5182: LD_INT 0
5184: PPUSH
5185: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_INT 210
5196: PPUSH
5197: LD_INT 159
5199: PPUSH
5200: CALL_OW 111
// wait ( 0 0$2 ) ;
5204: LD_INT 70
5206: PPUSH
5207: CALL_OW 67
// end ;
5211: GO 5103
5213: POP
5214: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
5215: LD_ADDR_VAR 0 4
5219: PUSH
5220: LD_INT 172
5222: PUSH
5223: LD_INT 76
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PUSH
5230: LD_INT 150
5232: PUSH
5233: LD_INT 38
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 148
5242: PUSH
5243: LD_INT 9
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 165
5252: PUSH
5253: LD_INT 38
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_INT 191
5268: PUSH
5269: LD_INT 77
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: PUSH
5276: LD_INT 168
5278: PUSH
5279: LD_INT 42
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 166
5288: PUSH
5289: LD_INT 11
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 151
5298: PUSH
5299: LD_INT 12
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: PUSH
5312: LD_INT 221
5314: PUSH
5315: LD_INT 88
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PUSH
5322: LD_INT 217
5324: PUSH
5325: LD_INT 64
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 208
5334: PUSH
5335: LD_INT 42
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5352: LD_INT 35
5354: PPUSH
5355: CALL_OW 67
// for i := 1 to patrol do
5359: LD_ADDR_VAR 0 2
5363: PUSH
5364: DOUBLE
5365: LD_INT 1
5367: DEC
5368: ST_TO_ADDR
5369: LD_VAR 0 4
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5623
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5377: LD_EXP 42
5381: PUSH
5382: LD_VAR 0 2
5386: ARRAY
5387: PPUSH
5388: CALL_OW 256
5392: PUSH
5393: LD_INT 990
5395: LESS
5396: PUSH
5397: LD_EXP 42
5401: PUSH
5402: LD_VAR 0 2
5406: ARRAY
5407: PPUSH
5408: CALL_OW 110
5412: PUSH
5413: LD_INT 1
5415: EQUAL
5416: AND
5417: IFFALSE 5445
// begin spottedByPatrol := true ;
5419: LD_ADDR_EXP 7
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5427: LD_EXP 42
5431: PUSH
5432: LD_VAR 0 2
5436: ARRAY
5437: PPUSH
5438: LD_INT 2
5440: PPUSH
5441: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5445: LD_EXP 42
5449: PUSH
5450: LD_VAR 0 2
5454: ARRAY
5455: PPUSH
5456: CALL_OW 110
5460: PUSH
5461: LD_INT 2
5463: EQUAL
5464: IFFALSE 5521
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5466: LD_EXP 42
5470: PUSH
5471: LD_VAR 0 2
5475: ARRAY
5476: PPUSH
5477: LD_INT 166
5479: PPUSH
5480: LD_INT 101
5482: PPUSH
5483: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5487: LD_EXP 42
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: PPUSH
5498: LD_INT 71
5500: PPUSH
5501: CALL_OW 296
5505: PUSH
5506: LD_INT 10
5508: LESS
5509: IFFALSE 5519
// russianAlert := true ;
5511: LD_ADDR_EXP 9
5515: PUSH
5516: LD_INT 1
5518: ST_TO_ADDR
// continue ;
5519: GO 5374
// end ; if not HasTask ( russianPatrol [ i ] ) then
5521: LD_EXP 42
5525: PUSH
5526: LD_VAR 0 2
5530: ARRAY
5531: PPUSH
5532: CALL_OW 314
5536: NOT
5537: IFFALSE 5621
// for j in patrol [ i ] do
5539: LD_ADDR_VAR 0 3
5543: PUSH
5544: LD_VAR 0 4
5548: PUSH
5549: LD_VAR 0 2
5553: ARRAY
5554: PUSH
5555: FOR_IN
5556: IFFALSE 5619
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5558: LD_EXP 42
5562: PUSH
5563: LD_VAR 0 2
5567: ARRAY
5568: PPUSH
5569: LD_INT 35
5571: PPUSH
5572: LD_INT 175
5574: PPUSH
5575: CALL_OW 12
5579: PPUSH
5580: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5584: LD_EXP 42
5588: PUSH
5589: LD_VAR 0 2
5593: ARRAY
5594: PPUSH
5595: LD_VAR 0 3
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 3
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PPUSH
5613: CALL_OW 174
// end ;
5617: GO 5555
5619: POP
5620: POP
// end ;
5621: GO 5374
5623: POP
5624: POP
// until not russianPatrol or russianAlert ;
5625: LD_EXP 42
5629: NOT
5630: PUSH
5631: LD_EXP 9
5635: OR
5636: IFFALSE 5352
// if russianPatrol then
5638: LD_EXP 42
5642: IFFALSE 5659
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5644: LD_EXP 42
5648: PPUSH
5649: LD_INT 161
5651: PPUSH
5652: LD_INT 107
5654: PPUSH
5655: CALL_OW 114
// end ;
5659: PPOPN 4
5661: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5662: LD_EXP 6
5666: PUSH
5667: LD_EXP 13
5671: NOT
5672: AND
5673: IFFALSE 6114
5675: GO 5677
5677: DISABLE
5678: LD_INT 0
5680: PPUSH
5681: PPUSH
5682: PPUSH
5683: PPUSH
5684: PPUSH
// begin enable ;
5685: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5686: LD_ADDR_VAR 0 2
5690: PUSH
5691: LD_EXP 43
5695: PPUSH
5696: LD_INT 21
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 72
5710: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5711: LD_ADDR_VAR 0 4
5715: PUSH
5716: LD_INT 22
5718: PUSH
5719: LD_INT 4
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PPUSH
5726: CALL_OW 69
5730: ST_TO_ADDR
// for i in filter do
5731: LD_ADDR_VAR 0 1
5735: PUSH
5736: LD_VAR 0 2
5740: PUSH
5741: FOR_IN
5742: IFFALSE 6112
// begin tmp := IsDrivenBy ( i ) ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: LD_VAR 0 1
5753: PPUSH
5754: CALL_OW 311
5758: ST_TO_ADDR
// if not tmp then
5759: LD_VAR 0 3
5763: NOT
5764: IFFALSE 5768
// continue ;
5766: GO 5741
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5768: LD_VAR 0 1
5772: PPUSH
5773: CALL_OW 261
5777: PUSH
5778: LD_INT 90
5780: GREATER
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: CALL_OW 110
5791: PUSH
5792: LD_INT 2
5794: EQUAL
5795: AND
5796: IFFALSE 5812
// SetTag ( i , 0 ) else
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 0
5805: PPUSH
5806: CALL_OW 109
5810: GO 5863
// if GetTag ( i ) = 2 then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 110
5821: PUSH
5822: LD_INT 2
5824: EQUAL
5825: IFFALSE 5863
// begin x := rand ( 1 , 2 ) ;
5827: LD_ADDR_VAR 0 5
5831: PUSH
5832: LD_INT 1
5834: PPUSH
5835: LD_INT 2
5837: PPUSH
5838: CALL_OW 12
5842: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_EXP 44
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PPUSH
5859: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5863: LD_VAR 0 1
5867: PPUSH
5868: CALL_OW 256
5872: PUSH
5873: LD_INT 600
5875: GREATEREQUAL
5876: PUSH
5877: LD_VAR 0 1
5881: PPUSH
5882: CALL_OW 110
5886: NOT
5887: AND
5888: IFFALSE 5914
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5890: LD_VAR 0 1
5894: PPUSH
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 1
5904: PPUSH
5905: CALL_OW 74
5909: PPUSH
5910: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5914: LD_VAR 0 1
5918: PPUSH
5919: CALL_OW 256
5923: PUSH
5924: LD_INT 600
5926: LESS
5927: PUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 110
5937: NOT
5938: AND
5939: IFFALSE 5968
// begin SetTag ( i , 1 ) ;
5941: LD_VAR 0 1
5945: PPUSH
5946: LD_INT 1
5948: PPUSH
5949: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5953: LD_VAR 0 1
5957: PPUSH
5958: LD_INT 62
5960: PPUSH
5961: LD_INT 22
5963: PPUSH
5964: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 110
5977: PUSH
5978: LD_INT 1
5980: EQUAL
5981: PUSH
5982: LD_VAR 0 1
5986: PPUSH
5987: LD_INT 62
5989: PPUSH
5990: LD_INT 22
5992: PPUSH
5993: CALL_OW 297
5997: PUSH
5998: LD_INT 6
6000: LESS
6001: AND
6002: PUSH
6003: LD_VAR 0 3
6007: AND
6008: IFFALSE 6110
// begin ComExitVehicle ( tmp ) ;
6010: LD_VAR 0 3
6014: PPUSH
6015: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6019: LD_VAR 0 3
6023: PPUSH
6024: LD_VAR 0 1
6028: PPUSH
6029: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6033: LD_INT 35
6035: PPUSH
6036: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 1000
6052: EQUAL
6053: IFFALSE 6033
// ComEnterUnit ( tmp , i ) ;
6055: LD_VAR 0 3
6059: PPUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 261
6078: PUSH
6079: LD_INT 90
6081: LESSEQUAL
6082: IFFALSE 6098
// SetTag ( i , 2 ) else
6084: LD_VAR 0 1
6088: PPUSH
6089: LD_INT 2
6091: PPUSH
6092: CALL_OW 109
6096: GO 6110
// SetTag ( i , 0 ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: LD_INT 0
6105: PPUSH
6106: CALL_OW 109
// end ; end ;
6110: GO 5741
6112: POP
6113: POP
// end ;
6114: PPOPN 5
6116: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6117: LD_EXP 19
6121: IFFALSE 6323
6123: GO 6125
6125: DISABLE
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6130: LD_EXP 44
6134: PPUSH
6135: LD_INT 79
6137: PPUSH
6138: LD_INT 155
6140: PPUSH
6141: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6145: LD_EXP 44
6149: PPUSH
6150: LD_INT 16
6152: PPUSH
6153: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6157: LD_ADDR_VAR 0 2
6161: PUSH
6162: LD_EXP 43
6166: PPUSH
6167: LD_INT 50
6169: PUSH
6170: EMPTY
6171: LIST
6172: PPUSH
6173: CALL_OW 72
6177: ST_TO_ADDR
// for i in tmp do
6178: LD_ADDR_VAR 0 1
6182: PUSH
6183: LD_VAR 0 2
6187: PUSH
6188: FOR_IN
6189: IFFALSE 6223
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6191: LD_VAR 0 1
6195: PPUSH
6196: LD_INT 123
6198: PPUSH
6199: LD_INT 60
6201: PPUSH
6202: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6206: LD_VAR 0 1
6210: PPUSH
6211: LD_INT 153
6213: PPUSH
6214: LD_INT 103
6216: PPUSH
6217: CALL_OW 174
// end ;
6221: GO 6188
6223: POP
6224: POP
// repeat wait ( 0 0$1 ) ;
6225: LD_INT 35
6227: PPUSH
6228: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6232: LD_ADDR_VAR 0 2
6236: PUSH
6237: LD_EXP 43
6241: PPUSH
6242: LD_INT 50
6244: PUSH
6245: EMPTY
6246: LIST
6247: PPUSH
6248: CALL_OW 72
6252: ST_TO_ADDR
// for i in tmp do
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: LD_VAR 0 2
6262: PUSH
6263: FOR_IN
6264: IFFALSE 6314
// if not HasTask ( i ) then
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 314
6275: NOT
6276: IFFALSE 6312
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_INT 81
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 69
6297: PPUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 74
6307: PPUSH
6308: CALL_OW 115
6312: GO 6263
6314: POP
6315: POP
6316: LD_VAR 0 2
6320: NOT
6321: IFFALSE 6225
// end ; end_of_file
6323: PPOPN 2
6325: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6326: LD_INT 0
6328: PPUSH
6329: PPUSH
6330: PPUSH
// SetBName ( omikron , omikron ) ;
6331: LD_INT 64
6333: PPUSH
6334: LD_STRING omikron
6336: PPUSH
6337: CALL_OW 500
// uc_side := 4 ;
6341: LD_ADDR_OWVAR 20
6345: PUSH
6346: LD_INT 4
6348: ST_TO_ADDR
// uc_nation := 1 ;
6349: LD_ADDR_OWVAR 21
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// omicronSquad := [ ] ;
6357: LD_ADDR_EXP 46
6361: PUSH
6362: EMPTY
6363: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6364: LD_ADDR_VAR 0 2
6368: PUSH
6369: LD_INT 22
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 30
6384: PUSH
6385: LD_INT 32
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 30
6394: PUSH
6395: LD_INT 31
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PPUSH
6411: CALL_OW 69
6415: PUSH
6416: FOR_IN
6417: IFFALSE 6474
// begin PrepareHuman ( false , 1 , 1 ) ;
6419: LD_INT 0
6421: PPUSH
6422: LD_INT 1
6424: PPUSH
6425: LD_INT 1
6427: PPUSH
6428: CALL_OW 380
// un := CreateHuman ;
6432: LD_ADDR_VAR 0 3
6436: PUSH
6437: CALL_OW 44
6441: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6442: LD_ADDR_EXP 46
6446: PUSH
6447: LD_EXP 46
6451: PUSH
6452: LD_VAR 0 3
6456: UNION
6457: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6458: LD_VAR 0 3
6462: PPUSH
6463: LD_VAR 0 2
6467: PPUSH
6468: CALL_OW 52
// end ;
6472: GO 6416
6474: POP
6475: POP
// for i := 1 to 3 do
6476: LD_ADDR_VAR 0 2
6480: PUSH
6481: DOUBLE
6482: LD_INT 1
6484: DEC
6485: ST_TO_ADDR
6486: LD_INT 3
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6545
// begin PrepareHuman ( false , 2 , 2 ) ;
6492: LD_INT 0
6494: PPUSH
6495: LD_INT 2
6497: PPUSH
6498: LD_INT 2
6500: PPUSH
6501: CALL_OW 380
// un := CreateHuman ;
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: CALL_OW 44
6514: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6515: LD_ADDR_EXP 46
6519: PUSH
6520: LD_EXP 46
6524: PUSH
6525: LD_VAR 0 3
6529: UNION
6530: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 64
6538: PPUSH
6539: CALL_OW 52
// end ;
6543: GO 6489
6545: POP
6546: POP
// for i := 1 to 2 do
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: DOUBLE
6553: LD_INT 1
6555: DEC
6556: ST_TO_ADDR
6557: LD_INT 2
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6700
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6563: LD_INT 4
6565: PPUSH
6566: LD_INT 1
6568: PPUSH
6569: LD_INT 2
6571: PPUSH
6572: LD_INT 2
6574: PPUSH
6575: LD_INT 1
6577: PPUSH
6578: LD_INT 3
6580: PPUSH
6581: LD_INT 100
6583: PPUSH
6584: CALL 296 0 7
// un := CreateVehicle ;
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: CALL_OW 45
6597: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6598: LD_ADDR_EXP 46
6602: PUSH
6603: LD_EXP 46
6607: PUSH
6608: LD_VAR 0 3
6612: UNION
6613: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6614: LD_VAR 0 3
6618: PPUSH
6619: LD_INT 28
6621: PPUSH
6622: LD_INT 37
6624: PPUSH
6625: LD_INT 6
6627: PPUSH
6628: LD_INT 0
6630: PPUSH
6631: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6635: LD_INT 0
6637: PPUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 2
6643: PPUSH
6644: CALL_OW 380
// un := CreateHuman ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: CALL_OW 44
6657: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6658: LD_ADDR_EXP 46
6662: PUSH
6663: LD_EXP 46
6667: PUSH
6668: LD_VAR 0 3
6672: UNION
6673: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6674: LD_VAR 0 3
6678: PPUSH
6679: LD_EXP 46
6683: PUSH
6684: LD_EXP 46
6688: PUSH
6689: LD_INT 1
6691: MINUS
6692: ARRAY
6693: PPUSH
6694: CALL_OW 52
// end ;
6698: GO 6560
6700: POP
6701: POP
// end ;
6702: LD_VAR 0 1
6706: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6707: LD_INT 0
6709: PPUSH
6710: PPUSH
6711: PPUSH
6712: PPUSH
// uc_side := 4 ;
6713: LD_ADDR_OWVAR 20
6717: PUSH
6718: LD_INT 4
6720: ST_TO_ADDR
// uc_nation := 1 ;
6721: LD_ADDR_OWVAR 21
6725: PUSH
6726: LD_INT 1
6728: ST_TO_ADDR
// tmp := [ ] ;
6729: LD_ADDR_VAR 0 4
6733: PUSH
6734: EMPTY
6735: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 1
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: LD_INT 4
6753: PPUSH
6754: LD_INT 77
6756: PPUSH
6757: CALL 296 0 7
// un := CreateVehicle ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: CALL_OW 45
6770: ST_TO_ADDR
// tmp := tmp union un ;
6771: LD_ADDR_VAR 0 4
6775: PUSH
6776: LD_VAR 0 4
6780: PUSH
6781: LD_VAR 0 3
6785: UNION
6786: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_INT 2
6794: PPUSH
6795: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6799: LD_VAR 0 3
6803: PPUSH
6804: LD_INT 106
6806: PPUSH
6807: LD_INT 3
6809: PPUSH
6810: LD_INT 0
6812: PPUSH
6813: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6817: LD_INT 0
6819: PPUSH
6820: LD_INT 3
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 380
// un := CreateHuman ;
6830: LD_ADDR_VAR 0 3
6834: PUSH
6835: CALL_OW 44
6839: ST_TO_ADDR
// tmp := tmp union un ;
6840: LD_ADDR_VAR 0 4
6844: PUSH
6845: LD_VAR 0 4
6849: PUSH
6850: LD_VAR 0 3
6854: UNION
6855: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6856: LD_VAR 0 3
6860: PPUSH
6861: LD_VAR 0 4
6865: PUSH
6866: LD_VAR 0 4
6870: PUSH
6871: LD_INT 1
6873: MINUS
6874: ARRAY
6875: PPUSH
6876: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6880: LD_VAR 0 3
6884: PPUSH
6885: LD_INT 109
6887: PPUSH
6888: LD_INT 9
6890: PPUSH
6891: CALL_OW 111
// wait ( 0 0$1 ) ;
6895: LD_INT 35
6897: PPUSH
6898: CALL_OW 67
// for i := 1 to 2 do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: DOUBLE
6908: LD_INT 1
6910: DEC
6911: ST_TO_ADDR
6912: LD_INT 2
6914: PUSH
6915: FOR_TO
6916: IFFALSE 6980
// begin PrepareHuman ( false , 1 , 2 ) ;
6918: LD_INT 0
6920: PPUSH
6921: LD_INT 1
6923: PPUSH
6924: LD_INT 2
6926: PPUSH
6927: CALL_OW 380
// un := CreateHuman ;
6931: LD_ADDR_VAR 0 3
6935: PUSH
6936: CALL_OW 44
6940: ST_TO_ADDR
// tmp := tmp union un ;
6941: LD_ADDR_VAR 0 4
6945: PUSH
6946: LD_VAR 0 4
6950: PUSH
6951: LD_VAR 0 3
6955: UNION
6956: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6957: LD_VAR 0 3
6961: PPUSH
6962: LD_INT 105
6964: PPUSH
6965: LD_INT 2
6967: PPUSH
6968: LD_INT 2
6970: PPUSH
6971: LD_INT 0
6973: PPUSH
6974: CALL_OW 50
// end ;
6978: GO 6915
6980: POP
6981: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6982: LD_VAR 0 4
6986: PPUSH
6987: LD_INT 26
6989: PPUSH
6990: LD_INT 35
6992: PPUSH
6993: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6997: LD_INT 35
6999: PPUSH
7000: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7004: LD_VAR 0 4
7008: PPUSH
7009: LD_INT 50
7011: PUSH
7012: EMPTY
7013: LIST
7014: PPUSH
7015: CALL_OW 72
7019: NOT
7020: IFFALSE 7024
// exit ;
7022: GO 7151
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7024: LD_VAR 0 4
7028: PPUSH
7029: LD_INT 91
7031: PUSH
7032: LD_INT 64
7034: PUSH
7035: LD_INT 12
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 72
7047: PUSH
7048: LD_VAR 0 4
7052: EQUAL
7053: IFFALSE 6997
// omicronSquad := omicronSquad union tmp ;
7055: LD_ADDR_EXP 46
7059: PUSH
7060: LD_EXP 46
7064: PUSH
7065: LD_VAR 0 4
7069: UNION
7070: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_VAR 0 4
7080: PPUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 72
7095: PUSH
7096: FOR_IN
7097: IFFALSE 7149
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7099: LD_VAR 0 2
7103: PPUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 4
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PPUSH
7133: LD_VAR 0 2
7137: PPUSH
7138: CALL_OW 74
7142: PPUSH
7143: CALL_OW 120
7147: GO 7096
7149: POP
7150: POP
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7156: LD_EXP 13
7160: NOT
7161: IFFALSE 7732
7163: GO 7165
7165: DISABLE
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
7171: PPUSH
// begin enable ;
7172: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: LD_INT 22
7180: PUSH
7181: LD_INT 4
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 21
7190: PUSH
7191: LD_INT 3
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 24
7203: PUSH
7204: LD_INT 1000
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7225: LD_ADDR_VAR 0 3
7229: PUSH
7230: LD_EXP 46
7234: PPUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 72
7249: ST_TO_ADDR
// if filter and tmp then
7250: LD_VAR 0 2
7254: PUSH
7255: LD_VAR 0 3
7259: AND
7260: IFFALSE 7333
// begin for i in tmp do
7262: LD_ADDR_VAR 0 1
7266: PUSH
7267: LD_VAR 0 3
7271: PUSH
7272: FOR_IN
7273: IFFALSE 7329
// if IsInUnit ( i ) then
7275: LD_VAR 0 1
7279: PPUSH
7280: CALL_OW 310
7284: IFFALSE 7297
// ComExitBuilding ( i ) else
7286: LD_VAR 0 1
7290: PPUSH
7291: CALL_OW 122
7295: GO 7327
// if not HasTask ( i ) then
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 314
7306: NOT
7307: IFFALSE 7327
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7309: LD_VAR 0 1
7313: PPUSH
7314: LD_VAR 0 2
7318: PUSH
7319: LD_INT 1
7321: ARRAY
7322: PPUSH
7323: CALL_OW 130
7327: GO 7272
7329: POP
7330: POP
// end else
7331: GO 7404
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 54
7343: PUSH
7344: EMPTY
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PPUSH
7351: CALL_OW 72
7355: IFFALSE 7404
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7357: LD_ADDR_VAR 0 1
7361: PUSH
7362: LD_VAR 0 3
7366: PPUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 54
7372: PUSH
7373: EMPTY
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PPUSH
7380: CALL_OW 72
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7402
// ComEnterUnit ( i , omikron ) ;
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_INT 64
7395: PPUSH
7396: CALL_OW 120
7400: GO 7385
7402: POP
7403: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7404: LD_ADDR_VAR 0 2
7408: PUSH
7409: LD_EXP 46
7413: PPUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PPUSH
7424: CALL_OW 72
7428: ST_TO_ADDR
// if not filter then
7429: LD_VAR 0 2
7433: NOT
7434: IFFALSE 7438
// exit ;
7436: GO 7732
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7438: LD_ADDR_VAR 0 4
7442: PUSH
7443: LD_INT 13
7445: PPUSH
7446: LD_INT 81
7448: PUSH
7449: LD_INT 4
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: ST_TO_ADDR
// if enemy then
7461: LD_VAR 0 4
7465: IFFALSE 7732
// begin for i in filter do
7467: LD_ADDR_VAR 0 1
7471: PUSH
7472: LD_VAR 0 2
7476: PUSH
7477: FOR_IN
7478: IFFALSE 7730
// begin tmp := IsDrivenBy ( i ) ;
7480: LD_ADDR_VAR 0 3
7484: PUSH
7485: LD_VAR 0 1
7489: PPUSH
7490: CALL_OW 311
7494: ST_TO_ADDR
// if not tmp then
7495: LD_VAR 0 3
7499: NOT
7500: IFFALSE 7504
// continue ;
7502: GO 7477
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 256
7513: PUSH
7514: LD_INT 600
7516: GREATEREQUAL
7517: PUSH
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 110
7527: PUSH
7528: LD_INT 1
7530: NONEQUAL
7531: AND
7532: IFFALSE 7558
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_VAR 0 4
7543: PPUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 74
7553: PPUSH
7554: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 256
7567: PUSH
7568: LD_INT 600
7570: LESS
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 110
7581: PUSH
7582: LD_INT 1
7584: NONEQUAL
7585: AND
7586: IFFALSE 7615
// begin SetTag ( i , 1 ) ;
7588: LD_VAR 0 1
7592: PPUSH
7593: LD_INT 1
7595: PPUSH
7596: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7600: LD_VAR 0 1
7604: PPUSH
7605: LD_INT 27
7607: PPUSH
7608: LD_INT 35
7610: PPUSH
7611: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 110
7624: PUSH
7625: LD_INT 1
7627: EQUAL
7628: PUSH
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_INT 27
7636: PPUSH
7637: LD_INT 35
7639: PPUSH
7640: CALL_OW 297
7644: PUSH
7645: LD_INT 6
7647: LESS
7648: AND
7649: PUSH
7650: LD_VAR 0 3
7654: AND
7655: IFFALSE 7728
// begin ComExitVehicle ( tmp ) ;
7657: LD_VAR 0 3
7661: PPUSH
7662: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7666: LD_VAR 0 3
7670: PPUSH
7671: LD_VAR 0 1
7675: PPUSH
7676: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7680: LD_INT 35
7682: PPUSH
7683: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7687: LD_VAR 0 1
7691: PPUSH
7692: CALL_OW 256
7696: PUSH
7697: LD_INT 1000
7699: EQUAL
7700: IFFALSE 7680
// ComEnterUnit ( tmp , i ) ;
7702: LD_VAR 0 3
7706: PPUSH
7707: LD_VAR 0 1
7711: PPUSH
7712: CALL_OW 120
// SetTag ( i , 0 ) ;
7716: LD_VAR 0 1
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// end ; end ;
7728: GO 7477
7730: POP
7731: POP
// end ; end ;
7732: PPOPN 4
7734: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7735: LD_EXP 13
7739: IFFALSE 7883
7741: GO 7743
7743: DISABLE
7744: LD_INT 0
7746: PPUSH
7747: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7748: LD_ADDR_VAR 0 2
7752: PUSH
7753: LD_EXP 46
7757: PPUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 1
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 50
7770: PUSH
7771: EMPTY
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 72
7782: ST_TO_ADDR
// if not tmp then
7783: LD_VAR 0 2
7787: NOT
7788: IFFALSE 7792
// exit ;
7790: GO 7883
// repeat wait ( 0 0$1 ) ;
7792: LD_INT 35
7794: PPUSH
7795: CALL_OW 67
// for i in tmp do
7799: LD_ADDR_VAR 0 1
7803: PUSH
7804: LD_VAR 0 2
7808: PUSH
7809: FOR_IN
7810: IFFALSE 7874
// begin ComExit ( i ) ;
7812: LD_VAR 0 1
7816: PPUSH
7817: CALL 734 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 14
7828: PPUSH
7829: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7833: LD_VAR 0 1
7837: PPUSH
7838: LD_INT 14
7840: PPUSH
7841: CALL_OW 308
7845: IFFALSE 7872
// begin tmp := tmp diff i ;
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_VAR 0 2
7856: PUSH
7857: LD_VAR 0 1
7861: DIFF
7862: ST_TO_ADDR
// RemoveUnit ( i ) ;
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 64
// end ; end ;
7872: GO 7809
7874: POP
7875: POP
// until not tmp ;
7876: LD_VAR 0 2
7880: NOT
7881: IFFALSE 7792
// end ; end_of_file
7883: PPOPN 2
7885: END
// export function Action ; var i , un , veh , tmp ; begin
7886: LD_INT 0
7888: PPUSH
7889: PPUSH
7890: PPUSH
7891: PPUSH
7892: PPUSH
// InGameOn ;
7893: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7897: LD_INT 179
7899: PPUSH
7900: LD_INT 5
7902: PPUSH
7903: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7907: LD_ADDR_VAR 0 4
7911: PUSH
7912: LD_INT 2
7914: PPUSH
7915: LD_INT 2
7917: PPUSH
7918: LD_INT 12
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: LD_INT 1
7926: PPUSH
7927: LD_INT 24
7929: PPUSH
7930: LD_INT 33
7932: PPUSH
7933: CALL 296 0 7
7937: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7938: LD_VAR 0 4
7942: PPUSH
7943: LD_INT 2
7945: PPUSH
7946: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7950: LD_VAR 0 4
7954: PPUSH
7955: LD_INT 178
7957: PPUSH
7958: LD_INT 2
7960: PPUSH
7961: LD_INT 0
7963: PPUSH
7964: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7968: LD_EXP 21
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: CALL_OW 52
// if Kamil then
7982: LD_EXP 25
7986: IFFALSE 8021
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7988: LD_EXP 25
7992: PPUSH
7993: LD_INT 207
7995: PPUSH
7996: LD_INT 37
7998: PPUSH
7999: LD_INT 0
8001: PPUSH
8002: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8006: LD_EXP 25
8010: PPUSH
8011: LD_INT 211
8013: PPUSH
8014: LD_INT 38
8016: PPUSH
8017: CALL_OW 118
// end ; if Sophia then
8021: LD_EXP 27
8025: IFFALSE 8060
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8027: LD_EXP 27
8031: PPUSH
8032: LD_INT 209
8034: PPUSH
8035: LD_INT 40
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8045: LD_EXP 27
8049: PPUSH
8050: LD_INT 211
8052: PPUSH
8053: LD_INT 38
8055: PPUSH
8056: CALL_OW 118
// end ; if Givi then
8060: LD_EXP 22
8064: IFFALSE 8099
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8066: LD_EXP 22
8070: PPUSH
8071: LD_INT 201
8073: PPUSH
8074: LD_INT 34
8076: PPUSH
8077: LD_INT 0
8079: PPUSH
8080: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8084: LD_EXP 22
8088: PPUSH
8089: LD_INT 206
8091: PPUSH
8092: LD_INT 36
8094: PPUSH
8095: CALL_OW 118
// end ; if Markov then
8099: LD_EXP 28
8103: IFFALSE 8190
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8105: LD_ADDR_VAR 0 4
8109: PUSH
8110: LD_INT 2
8112: PPUSH
8113: LD_INT 2
8115: PPUSH
8116: LD_INT 13
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_INT 1
8124: PPUSH
8125: LD_INT 25
8127: PPUSH
8128: LD_INT 80
8130: PUSH
8131: LD_INT 20
8133: PUSH
8134: LD_OWVAR 67
8138: MUL
8139: MINUS
8140: PPUSH
8141: CALL 296 0 7
8145: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8146: LD_VAR 0 4
8150: PPUSH
8151: LD_INT 2
8153: PPUSH
8154: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8158: LD_VAR 0 4
8162: PPUSH
8163: LD_INT 197
8165: PPUSH
8166: LD_INT 35
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8176: LD_EXP 28
8180: PPUSH
8181: LD_VAR 0 4
8185: PPUSH
8186: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8190: LD_ADDR_VAR 0 5
8194: PUSH
8195: LD_EXP 26
8199: PUSH
8200: LD_EXP 32
8204: UNION
8205: ST_TO_ADDR
// for i in tmp do
8206: LD_ADDR_VAR 0 2
8210: PUSH
8211: LD_VAR 0 5
8215: PUSH
8216: FOR_IN
8217: IFFALSE 8251
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8219: LD_VAR 0 2
8223: PPUSH
8224: LD_INT 203
8226: PPUSH
8227: LD_INT 41
8229: PPUSH
8230: LD_INT 6
8232: PPUSH
8233: LD_INT 0
8235: PPUSH
8236: CALL_OW 50
// ComHold ( i ) ;
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 140
// end ;
8249: GO 8216
8251: POP
8252: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8253: LD_INT 22
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 25
8265: PUSH
8266: LD_INT 2
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PPUSH
8277: CALL_OW 69
8281: NOT
8282: IFFALSE 8296
// SetClass ( Heike , 2 ) ;
8284: LD_EXP 21
8288: PPUSH
8289: LD_INT 2
8291: PPUSH
8292: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8296: LD_EXP 21
8300: PPUSH
8301: LD_INT 183
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8311: LD_EXP 21
8315: PPUSH
8316: LD_INT 188
8318: PPUSH
8319: LD_INT 20
8321: PPUSH
8322: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8326: LD_EXP 21
8330: PPUSH
8331: LD_INT 191
8333: PPUSH
8334: LD_INT 25
8336: PPUSH
8337: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8341: LD_EXP 21
8345: PPUSH
8346: LD_INT 203
8348: PPUSH
8349: LD_INT 29
8351: PPUSH
8352: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8356: LD_EXP 21
8360: PPUSH
8361: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8372: LD_EXP 21
8376: PPUSH
8377: CALL_OW 310
8381: NOT
8382: IFFALSE 8365
// CenterOnUnits ( Heike ) ;
8384: LD_EXP 21
8388: PPUSH
8389: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8393: LD_ADDR_VAR 0 5
8397: PUSH
8398: LD_INT 22
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 21
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: PUSH
8427: LD_EXP 21
8431: PUSH
8432: LD_EXP 28
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: DIFF
8441: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8442: LD_VAR 0 5
8446: PPUSH
8447: LD_EXP 21
8451: PPUSH
8452: CALL_OW 119
// if Givi then
8456: LD_EXP 22
8460: IFFALSE 8478
// ComTurnUnit ( Heike , Givi ) else
8462: LD_EXP 21
8466: PPUSH
8467: LD_EXP 22
8471: PPUSH
8472: CALL_OW 119
8476: GO 8496
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8478: LD_EXP 21
8482: PPUSH
8483: LD_VAR 0 5
8487: PUSH
8488: LD_INT 1
8490: ARRAY
8491: PPUSH
8492: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8496: LD_EXP 21
8500: PPUSH
8501: LD_STRING DH-Start-1
8503: PPUSH
8504: CALL_OW 88
// if Givi then
8508: LD_EXP 22
8512: IFFALSE 8559
// begin Say ( Givi , DG-Start-2 ) ;
8514: LD_EXP 22
8518: PPUSH
8519: LD_STRING DG-Start-2
8521: PPUSH
8522: CALL_OW 88
// if not Mike then
8526: LD_EXP 23
8530: NOT
8531: IFFALSE 8557
// begin Say ( Givi , DG-Start-b-3 ) ;
8533: LD_EXP 22
8537: PPUSH
8538: LD_STRING DG-Start-b-3
8540: PPUSH
8541: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8545: LD_EXP 21
8549: PPUSH
8550: LD_STRING DH-Start-b-4
8552: PPUSH
8553: CALL_OW 88
// end ; end else
8557: GO 8624
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8559: LD_EXP 32
8563: PPUSH
8564: LD_INT 26
8566: PUSH
8567: LD_INT 1
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PPUSH
8574: CALL_OW 72
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: PPUSH
8583: LD_STRING DArm-Start-a-2
8585: PPUSH
8586: CALL_OW 88
8590: NOT
8591: IFFALSE 8624
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8593: LD_EXP 32
8597: PPUSH
8598: LD_INT 26
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 72
8612: PUSH
8613: LD_INT 1
8615: ARRAY
8616: PPUSH
8617: LD_STRING DArf-Start-a-2
8619: PPUSH
8620: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8624: LD_EXP 21
8628: PPUSH
8629: LD_INT 211
8631: PPUSH
8632: LD_INT 38
8634: PPUSH
8635: CALL_OW 118
// wait ( 0 0$1 ) ;
8639: LD_INT 35
8641: PPUSH
8642: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8646: LD_EXP 21
8650: PPUSH
8651: LD_STRING DH-Start-3
8653: PPUSH
8654: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8658: LD_EXP 21
8662: PPUSH
8663: LD_STRING DH-Start-4
8665: PPUSH
8666: CALL_OW 88
// InGameOff ;
8670: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8674: LD_STRING Prepare
8676: PPUSH
8677: CALL_OW 337
// wait ( 0 0$10 ) ;
8681: LD_INT 350
8683: PPUSH
8684: CALL_OW 67
// if not Aviradze then
8688: LD_EXP 31
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 8889
// SetDir ( Aviradze , 4 ) ;
8697: LD_EXP 31
8701: PPUSH
8702: LD_INT 4
8704: PPUSH
8705: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8709: LD_EXP 31
8713: PPUSH
8714: LD_INT 225
8716: PPUSH
8717: LD_INT 33
8719: PPUSH
8720: LD_INT 0
8722: PPUSH
8723: CALL_OW 48
// for i := 1 to 2 do
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: DOUBLE
8733: LD_INT 1
8735: DEC
8736: ST_TO_ADDR
8737: LD_INT 2
8739: PUSH
8740: FOR_TO
8741: IFFALSE 8872
// begin uc_side := 2 ;
8743: LD_ADDR_OWVAR 20
8747: PUSH
8748: LD_INT 2
8750: ST_TO_ADDR
// uc_nation := 0 ;
8751: LD_ADDR_OWVAR 21
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8759: LD_INT 0
8761: PPUSH
8762: LD_INT 12
8764: PPUSH
8765: LD_INT 1
8767: PPUSH
8768: CALL_OW 380
// hc_gallery :=  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING Artudito
8787: PUSH
8788: LD_STRING Textur
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: LD_VAR 0 2
8799: ARRAY
8800: ST_TO_ADDR
// un := CreateHuman ;
8801: LD_ADDR_VAR 0 3
8805: PUSH
8806: CALL_OW 44
8810: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8811: LD_VAR 0 3
8815: PPUSH
8816: LD_INT 224
8818: PUSH
8819: LD_INT 226
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: LD_VAR 0 2
8830: ARRAY
8831: PPUSH
8832: LD_INT 31
8834: PUSH
8835: LD_INT 35
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: LD_VAR 0 2
8846: ARRAY
8847: PPUSH
8848: LD_INT 0
8850: PPUSH
8851: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8855: LD_VAR 0 3
8859: PPUSH
8860: LD_INT 215
8862: PPUSH
8863: LD_INT 36
8865: PPUSH
8866: CALL_OW 111
// end ;
8870: GO 8740
8872: POP
8873: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8874: LD_EXP 31
8878: PPUSH
8879: LD_INT 215
8881: PPUSH
8882: LD_INT 36
8884: PPUSH
8885: CALL_OW 111
// end ;
8889: LD_VAR 0 1
8893: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8894: LD_EXP 3
8898: IFFALSE 10087
8900: GO 8902
8902: DISABLE
8903: LD_INT 0
8905: PPUSH
8906: PPUSH
8907: PPUSH
// begin DialogueOn ;
8908: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8912: LD_EXP 21
8916: PPUSH
8917: LD_STRING DH-base-1
8919: PPUSH
8920: CALL_OW 88
// if Markov then
8924: LD_EXP 28
8928: IFFALSE 8980
// begin Say ( Markov , DMar-base-2 ) ;
8930: LD_EXP 28
8934: PPUSH
8935: LD_STRING DMar-base-2
8937: PPUSH
8938: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8942: LD_EXP 28
8946: PPUSH
8947: LD_STRING DMar-base-3
8949: PPUSH
8950: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8954: LD_EXP 21
8958: PPUSH
8959: LD_STRING DH-base-4
8961: PPUSH
8962: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8966: LD_EXP 28
8970: PPUSH
8971: LD_STRING DMar-base-5
8973: PPUSH
8974: CALL_OW 88
// end else
8978: GO 9057
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8980: LD_EXP 32
8984: PPUSH
8985: LD_INT 26
8987: PUSH
8988: LD_INT 1
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PPUSH
8995: CALL_OW 72
8999: PUSH
9000: LD_INT 1
9002: ARRAY
9003: PPUSH
9004: LD_STRING DArm-base-a-2
9006: PPUSH
9007: CALL_OW 88
9011: NOT
9012: IFFALSE 9045
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9014: LD_EXP 32
9018: PPUSH
9019: LD_INT 26
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PPUSH
9029: CALL_OW 72
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PPUSH
9038: LD_STRING DArf-base-a-2
9040: PPUSH
9041: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9045: LD_EXP 21
9049: PPUSH
9050: LD_STRING DH-base-a-3
9052: PPUSH
9053: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9057: LD_EXP 31
9061: PPUSH
9062: LD_STRING DA-base-6
9064: PPUSH
9065: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9069: LD_EXP 31
9073: PPUSH
9074: LD_STRING DA-base-7
9076: PPUSH
9077: CALL_OW 88
// DialogueOff ;
9081: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9085: LD_STRING Flamethrower
9087: PPUSH
9088: CALL_OW 337
// wait ( 2 2$00 ) ;
9092: LD_INT 4200
9094: PPUSH
9095: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9099: LD_EXP 30
9103: PUSH
9104: LD_EXP 23
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PPUSH
9113: LD_INT 203
9115: PPUSH
9116: LD_INT 37
9118: PPUSH
9119: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9123: LD_INT 22
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 92
9135: PUSH
9136: LD_INT 203
9138: PUSH
9139: LD_INT 37
9141: PUSH
9142: LD_INT 10
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PPUSH
9155: CALL_OW 69
9159: NOT
9160: IFFALSE 9200
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9162: LD_EXP 30
9166: PUSH
9167: LD_EXP 23
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: LD_EXP 21
9180: PPUSH
9181: CALL_OW 250
9185: PPUSH
9186: LD_EXP 21
9190: PPUSH
9191: CALL_OW 251
9195: PPUSH
9196: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9200: LD_INT 35
9202: PPUSH
9203: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
9207: LD_INT 2
9209: PPUSH
9210: LD_EXP 30
9214: PPUSH
9215: CALL_OW 292
9219: PUSH
9220: LD_EXP 30
9224: PPUSH
9225: LD_EXP 21
9229: PPUSH
9230: CALL_OW 296
9234: PUSH
9235: LD_INT 8
9237: LESS
9238: OR
9239: IFFALSE 9200
// InGameOn ;
9241: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9245: LD_EXP 30
9249: PPUSH
9250: CALL_OW 87
// if IsInUnit ( Heike ) then
9254: LD_EXP 21
9258: PPUSH
9259: CALL_OW 310
9263: IFFALSE 9274
// ComExitBuilding ( Heike ) ;
9265: LD_EXP 21
9269: PPUSH
9270: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9274: LD_EXP 30
9278: PUSH
9279: LD_EXP 23
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: LD_EXP 21
9292: PPUSH
9293: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9297: LD_EXP 21
9301: PPUSH
9302: LD_EXP 30
9306: PPUSH
9307: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9311: LD_INT 22
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 91
9323: PUSH
9324: LD_EXP 30
9328: PUSH
9329: LD_INT 10
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 21
9339: PUSH
9340: LD_INT 3
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: IFFALSE 9382
// begin Say ( Kurt , DKs-scout-1 ) ;
9358: LD_EXP 30
9362: PPUSH
9363: LD_STRING DKs-scout-1
9365: PPUSH
9366: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9370: LD_EXP 21
9374: PPUSH
9375: LD_STRING DH-scout-2
9377: PPUSH
9378: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9382: LD_INT 35
9384: PPUSH
9385: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9389: LD_EXP 21
9393: PPUSH
9394: LD_EXP 30
9398: PPUSH
9399: CALL_OW 296
9403: PUSH
9404: LD_INT 6
9406: LESS
9407: IFFALSE 9382
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9409: LD_EXP 30
9413: PUSH
9414: LD_EXP 23
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PPUSH
9423: LD_EXP 21
9427: PPUSH
9428: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9432: LD_EXP 30
9436: PPUSH
9437: LD_STRING DKs-scout-3
9439: PPUSH
9440: CALL_OW 88
// if Kaia then
9444: LD_EXP 26
9448: IFFALSE 9631
// begin if IsInUnit ( Kaia ) then
9450: LD_EXP 26
9454: PPUSH
9455: CALL_OW 310
9459: IFFALSE 9470
// ComExitBuilding ( Kaia ) ;
9461: LD_EXP 26
9465: PPUSH
9466: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9470: LD_EXP 26
9474: PPUSH
9475: LD_EXP 30
9479: PPUSH
9480: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9484: LD_INT 35
9486: PPUSH
9487: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9491: LD_EXP 26
9495: PPUSH
9496: LD_EXP 30
9500: PPUSH
9501: CALL_OW 296
9505: PUSH
9506: LD_INT 6
9508: LESS
9509: IFFALSE 9484
// ComTurnUnit ( Kaia , Kurt ) ;
9511: LD_EXP 26
9515: PPUSH
9516: LD_EXP 30
9520: PPUSH
9521: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9525: LD_EXP 26
9529: PPUSH
9530: LD_STRING DK-scout-4
9532: PPUSH
9533: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9537: LD_EXP 30
9541: PPUSH
9542: LD_EXP 26
9546: PPUSH
9547: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9551: LD_EXP 30
9555: PPUSH
9556: LD_STRING DKs-scout-5
9558: PPUSH
9559: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9563: LD_EXP 26
9567: PPUSH
9568: LD_STRING DK-scout-6
9570: PPUSH
9571: CALL_OW 88
// if Mike then
9575: LD_EXP 23
9579: IFFALSE 9631
// begin Say ( Mike , DM-scout-7 ) ;
9581: LD_EXP 23
9585: PPUSH
9586: LD_STRING DM-scout-7
9588: PPUSH
9589: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9593: LD_EXP 26
9597: PPUSH
9598: LD_EXP 23
9602: PPUSH
9603: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9607: LD_EXP 26
9611: PPUSH
9612: LD_STRING DK-scout-8
9614: PPUSH
9615: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9619: LD_EXP 23
9623: PPUSH
9624: LD_STRING DM-scout-9
9626: PPUSH
9627: CALL_OW 88
// end ; end ; ShowArea ( 2 , scoutArea ) ;
9631: LD_INT 2
9633: PPUSH
9634: LD_INT 9
9636: PPUSH
9637: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
9641: LD_INT 184
9643: PPUSH
9644: LD_INT 100
9646: PPUSH
9647: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9651: LD_EXP 30
9655: PPUSH
9656: LD_STRING DKs-scout-10
9658: PPUSH
9659: CALL_OW 88
// wait ( 0 0$1 ) ;
9663: LD_INT 35
9665: PPUSH
9666: CALL_OW 67
// ShowArea ( 2 , hillArea ) ;
9670: LD_INT 2
9672: PPUSH
9673: LD_INT 10
9675: PPUSH
9676: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
9680: LD_INT 144
9682: PPUSH
9683: LD_INT 65
9685: PPUSH
9686: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9690: LD_EXP 30
9694: PPUSH
9695: LD_STRING DKs-scout-11
9697: PPUSH
9698: CALL_OW 88
// wait ( 0 0$1 ) ;
9702: LD_INT 35
9704: PPUSH
9705: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9709: LD_EXP 30
9713: PPUSH
9714: CALL_OW 87
// if Mike and not Givi then
9718: LD_EXP 23
9722: PUSH
9723: LD_EXP 22
9727: NOT
9728: AND
9729: IFFALSE 9755
// begin Say ( Mike , DM-scout-a-1 ) ;
9731: LD_EXP 23
9735: PPUSH
9736: LD_STRING DM-scout-a-1
9738: PPUSH
9739: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9743: LD_EXP 21
9747: PPUSH
9748: LD_STRING DH-scout-a-2
9750: PPUSH
9751: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9755: LD_EXP 30
9759: PUSH
9760: LD_EXP 23
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: CALL_OW 235
// InGameOff ;
9776: CALL_OW 9
// allowToPatrol := true ;
9780: LD_ADDR_EXP 12
9784: PUSH
9785: LD_INT 1
9787: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9788: LD_INT 3150
9790: PPUSH
9791: CALL_OW 67
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9795: LD_ADDR_VAR 0 1
9799: PUSH
9800: DOUBLE
9801: LD_INT 1
9803: DEC
9804: ST_TO_ADDR
9805: LD_INT 3
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 2
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_OWVAR 67
9823: ARRAY
9824: PUSH
9825: FOR_TO
9826: IFFALSE 10085
// begin uc_side := 2 ;
9828: LD_ADDR_OWVAR 20
9832: PUSH
9833: LD_INT 2
9835: ST_TO_ADDR
// uc_nation := 2 ;
9836: LD_ADDR_OWVAR 21
9840: PUSH
9841: LD_INT 2
9843: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
9844: LD_INT 0
9846: PPUSH
9847: LD_INT 1
9849: PUSH
9850: LD_INT 3
9852: PUSH
9853: LD_INT 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 3
9868: MOD
9869: PUSH
9870: LD_INT 1
9872: PLUS
9873: ARRAY
9874: PPUSH
9875: LD_INT 3
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: LD_OWVAR 67
9893: ARRAY
9894: PPUSH
9895: CALL_OW 380
// un := CreateHuman ;
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: CALL_OW 44
9908: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
9909: LD_ADDR_EXP 32
9913: PUSH
9914: LD_EXP 32
9918: PUSH
9919: LD_VAR 0 2
9923: UNION
9924: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
9925: LD_INT 2
9927: PPUSH
9928: LD_INT 2
9930: PPUSH
9931: LD_INT 13
9933: PPUSH
9934: LD_INT 2
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: LD_INT 2
9951: MOD
9952: PUSH
9953: LD_INT 1
9955: PLUS
9956: ARRAY
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: LD_INT 27
9963: PUSH
9964: LD_INT 25
9966: PUSH
9967: LD_INT 27
9969: PUSH
9970: LD_INT 23
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: LD_OWVAR 67
9983: PUSH
9984: LD_INT 0
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: CALL_OW 12
9994: PLUS
9995: ARRAY
9996: PPUSH
9997: LD_INT 77
9999: PPUSH
10000: CALL 296 0 7
// veh := CreateVehicle ;
10004: LD_ADDR_VAR 0 3
10008: PUSH
10009: CALL_OW 45
10013: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10014: LD_VAR 0 3
10018: PPUSH
10019: LD_INT 2
10021: PPUSH
10022: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10026: LD_VAR 0 3
10030: PPUSH
10031: LD_INT 178
10033: PPUSH
10034: LD_INT 2
10036: PPUSH
10037: LD_INT 2
10039: PPUSH
10040: LD_INT 0
10042: PPUSH
10043: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10047: LD_VAR 0 2
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10061: LD_VAR 0 2
10065: PPUSH
10066: LD_INT 183
10068: PPUSH
10069: LD_INT 11
10071: PPUSH
10072: CALL_OW 111
// wait ( 0 0$2 ) ;
10076: LD_INT 70
10078: PPUSH
10079: CALL_OW 67
// end ;
10083: GO 9825
10085: POP
10086: POP
// end ;
10087: PPOPN 3
10089: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10090: LD_EXP 4
10094: PUSH
10095: LD_EXP 31
10099: PPUSH
10100: CALL_OW 302
10104: AND
10105: IFFALSE 10154
10107: GO 10109
10109: DISABLE
// begin DialogueOn ;
10110: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10114: LD_EXP 31
10118: PPUSH
10119: LD_STRING DA-lab-1
10121: PPUSH
10122: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10126: LD_EXP 31
10130: PPUSH
10131: LD_STRING DA-lab-2
10133: PPUSH
10134: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10138: LD_EXP 21
10142: PPUSH
10143: LD_STRING DH-lab-3
10145: PPUSH
10146: CALL_OW 88
// DialogueOff ;
10150: CALL_OW 7
// end ;
10154: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10155: LD_INT 17
10157: PPUSH
10158: LD_INT 2
10160: PPUSH
10161: CALL_OW 321
10165: PUSH
10166: LD_INT 2
10168: EQUAL
10169: IFFALSE 10301
10171: GO 10173
10173: DISABLE
10174: LD_INT 0
10176: PPUSH
// begin DialogueOn ;
10177: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10181: LD_EXP 31
10185: PPUSH
10186: LD_STRING DA-Cam-1
10188: PPUSH
10189: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10193: LD_EXP 31
10197: PPUSH
10198: LD_STRING DA-Cam-2
10200: PPUSH
10201: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10205: LD_EXP 31
10209: PPUSH
10210: LD_STRING DA-Cam-3
10212: PPUSH
10213: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10217: LD_EXP 21
10221: PPUSH
10222: LD_STRING DH-Cam-4
10224: PPUSH
10225: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10229: LD_EXP 26
10233: PPUSH
10234: LD_STRING DK-Cam-5
10236: PPUSH
10237: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10241: LD_EXP 26
10245: PPUSH
10246: LD_STRING DK-Cam-6
10248: PPUSH
10249: CALL_OW 88
// DialogueOff ;
10253: CALL_OW 7
// Query ( Camera ) ;
10257: LD_STRING Camera
10259: PPUSH
10260: CALL_OW 97
// hiddenCameraAllowed := true ;
10264: LD_ADDR_EXP 5
10268: PUSH
10269: LD_INT 1
10271: ST_TO_ADDR
// for i in camAreas do
10272: LD_ADDR_VAR 0 1
10276: PUSH
10277: LD_EXP 8
10281: PUSH
10282: FOR_IN
10283: IFFALSE 10299
// SetAreaMapShow ( i , 1 ) ;
10285: LD_VAR 0 1
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 424
10297: GO 10282
10299: POP
10300: POP
// end ;
10301: PPOPN 1
10303: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10304: LD_EXP 8
10308: NOT
10309: PUSH
10310: LD_EXP 5
10314: AND
10315: IFFALSE 10406
10317: GO 10319
10319: DISABLE
10320: LD_INT 0
10322: PPUSH
// begin stop_talking := true ;
10323: LD_ADDR_OWVAR 56
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10331: LD_ADDR_VAR 0 1
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 23
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PUSH
10376: FOR_IN
10377: IFFALSE 10396
// AddExperience ( i , 2 , 450 ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_INT 2
10386: PPUSH
10387: LD_INT 450
10389: PPUSH
10390: CALL_OW 492
10394: GO 10376
10396: POP
10397: POP
// stop_talking := false ;
10398: LD_ADDR_OWVAR 56
10402: PUSH
10403: LD_INT 0
10405: ST_TO_ADDR
// end ;
10406: PPOPN 1
10408: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
10409: LD_EXP 9
10413: PUSH
10414: LD_EXP 11
10418: NOT
10419: AND
10420: IFFALSE 10450
10422: GO 10424
10424: DISABLE
// begin if spottedByPatrol then
10425: LD_EXP 7
10429: IFFALSE 10443
// Say ( Heike , DH-Spot-f-3 ) ;
10431: LD_EXP 21
10435: PPUSH
10436: LD_STRING DH-Spot-f-3
10438: PPUSH
10439: CALL_OW 88
// YouLost ( Spotted ) ;
10443: LD_STRING Spotted
10445: PPUSH
10446: CALL_OW 104
// end ;
10450: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10451: LD_INT 2
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_INT 3
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 22
10466: PUSH
10467: LD_INT 6
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 101
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PPUSH
10493: CALL_OW 69
10497: PUSH
10498: LD_EXP 42
10502: DIFF
10503: IFFALSE 10516
10505: GO 10507
10507: DISABLE
// russianAlert := true ;
10508: LD_ADDR_EXP 9
10512: PUSH
10513: LD_INT 1
10515: ST_TO_ADDR
10516: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10517: LD_EXP 9
10521: IFFALSE 10818
10523: GO 10525
10525: DISABLE
10526: LD_INT 0
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_EXP 39
10541: PPUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 1
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 54
10554: PUSH
10555: EMPTY
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 72
10566: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
10567: LD_ADDR_VAR 0 3
10571: PUSH
10572: LD_INT 22
10574: PUSH
10575: LD_INT 6
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 30
10584: PUSH
10585: LD_INT 32
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 69
10600: ST_TO_ADDR
// for i := 1 to tmp do
10601: LD_ADDR_VAR 0 1
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_VAR 0 2
10615: PUSH
10616: FOR_TO
10617: IFFALSE 10662
// begin ComExitBuilding ( tmp [ i ] ) ;
10619: LD_VAR 0 2
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PPUSH
10630: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
10634: LD_VAR 0 2
10638: PUSH
10639: LD_VAR 0 1
10643: ARRAY
10644: PPUSH
10645: LD_VAR 0 3
10649: PUSH
10650: LD_VAR 0 1
10654: ARRAY
10655: PPUSH
10656: CALL_OW 180
// end ;
10660: GO 10616
10662: POP
10663: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10664: LD_ADDR_VAR 0 4
10668: PUSH
10669: LD_EXP 37
10673: PUSH
10674: LD_EXP 39
10678: PUSH
10679: LD_EXP 40
10683: UNION
10684: PPUSH
10685: LD_INT 3
10687: PUSH
10688: LD_INT 25
10690: PUSH
10691: LD_INT 1
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PPUSH
10702: CALL_OW 72
10706: UNION
10707: ST_TO_ADDR
// for i in noncombat do
10708: LD_ADDR_VAR 0 1
10712: PUSH
10713: LD_VAR 0 4
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10755
// begin if IsInUnit ( i ) then
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 310
10730: IFFALSE 10741
// ComExitBuilding ( i ) ;
10732: LD_VAR 0 1
10736: PPUSH
10737: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
10741: LD_VAR 0 1
10745: PPUSH
10746: LD_INT 16
10748: PPUSH
10749: CALL_OW 173
// end ;
10753: GO 10718
10755: POP
10756: POP
// if not allowHeikeAttack then
10757: LD_EXP 11
10761: NOT
10762: IFFALSE 10766
// exit ;
10764: GO 10818
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10766: LD_EXP 35
10770: PPUSH
10771: LD_STRING D9a-Kur-1
10773: PPUSH
10774: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
10778: LD_EXP 38
10782: PPUSH
10783: LD_STRING D9a-Bur-1
10785: PPUSH
10786: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
10790: LD_EXP 35
10794: PPUSH
10795: LD_STRING D9a-Kur-2
10797: PPUSH
10798: CALL_OW 94
// omicronFall := true ;
10802: LD_ADDR_EXP 13
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// retreatFromOmicron := true ;
10810: LD_ADDR_EXP 19
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// end ;
10818: PPOPN 4
10820: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
10821: LD_INT 16
10823: PPUSH
10824: LD_INT 3
10826: PUSH
10827: LD_INT 22
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 23
10843: PUSH
10844: LD_INT 3
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 70
10859: IFFALSE 10942
10861: GO 10863
10863: DISABLE
10864: LD_INT 0
10866: PPUSH
// begin enable ;
10867: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
10868: LD_ADDR_VAR 0 1
10872: PUSH
10873: LD_INT 16
10875: PPUSH
10876: LD_INT 3
10878: PUSH
10879: LD_INT 22
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 23
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PPUSH
10907: CALL_OW 70
10911: PUSH
10912: FOR_IN
10913: IFFALSE 10940
// begin escapeCounter := escapeCounter + 1 ;
10915: LD_ADDR_EXP 18
10919: PUSH
10920: LD_EXP 18
10924: PUSH
10925: LD_INT 1
10927: PLUS
10928: ST_TO_ADDR
// RemoveUnit ( i ) ;
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 64
// end ;
10938: GO 10912
10940: POP
10941: POP
// end ;
10942: PPOPN 1
10944: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
10945: LD_OWVAR 1
10949: PUSH
10950: LD_INT 13650
10952: PUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_INT 3150
10958: PPUSH
10959: CALL_OW 12
10963: PLUS
10964: GREATEREQUAL
10965: IFFALSE 10974
10967: GO 10969
10969: DISABLE
// SmallAmericanReinforcements ;
10970: CALL 6707 0 0
10974: END
// every 0 0$1 trigger tick >= 9 9$15 do
10975: LD_OWVAR 1
10979: PUSH
10980: LD_INT 19425
10982: GREATEREQUAL
10983: IFFALSE 11048
10985: GO 10987
10987: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
10988: LD_EXP 43
10992: PPUSH
10993: LD_INT 21
10995: PUSH
10996: LD_INT 2
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PPUSH
11003: CALL_OW 72
11007: PPUSH
11008: LD_INT 62
11010: PPUSH
11011: LD_INT 22
11013: PPUSH
11014: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11018: LD_EXP 44
11022: PPUSH
11023: LD_INT 69
11025: PPUSH
11026: LD_INT 27
11028: PPUSH
11029: CALL_OW 111
// wait ( 1 1$00 ) ;
11033: LD_INT 2100
11035: PPUSH
11036: CALL_OW 67
// startAttackOnOmicron := true ;
11040: LD_ADDR_EXP 6
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// end ;
11048: END
// every 0 0$2 trigger tick >= 20 20$00 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11049: LD_OWVAR 1
11053: PUSH
11054: LD_INT 42000
11056: GREATEREQUAL
11057: IFFALSE 12916
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
11066: PPUSH
11067: PPUSH
11068: PPUSH
11069: PPUSH
11070: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11071: LD_INT 5
11073: PPUSH
11074: LD_INT 2
11076: PPUSH
11077: CALL_OW 343
// PrepareOmarForces ;
11081: CALL 2270 0 0
// wait ( 0 0$03 ) ;
11085: LD_INT 105
11087: PPUSH
11088: CALL_OW 67
// allowHeikeAttack := true ;
11092: LD_ADDR_EXP 11
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
// activeGrishkoAI := false ;
11100: LD_ADDR_EXP 10
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11108: LD_EXP 29
11112: PPUSH
11113: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11117: LD_ADDR_VAR 0 1
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_INT 2
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 21
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 69
11150: PUSH
11151: FOR_IN
11152: IFFALSE 11176
// if HasTask ( i ) then
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL_OW 314
11163: IFFALSE 11174
// ComHold ( i ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 140
11174: GO 11151
11176: POP
11177: POP
// DialogueOn ;
11178: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11182: LD_EXP 29
11186: PPUSH
11187: LD_STRING DO-assault-1
11189: PPUSH
11190: CALL_OW 94
// DialogueOff ;
11194: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11198: LD_ADDR_VAR 0 1
11202: PUSH
11203: LD_EXP 41
11207: PPUSH
11208: LD_INT 3
11210: PUSH
11211: LD_INT 54
11213: PUSH
11214: EMPTY
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 72
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// ComMoveXY ( i , 226 , 114 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 226
11236: PPUSH
11237: LD_INT 114
11239: PPUSH
11240: CALL_OW 111
11244: GO 11226
11246: POP
11247: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11248: LD_EXP 36
11252: PPUSH
11253: LD_INT 22
11255: PUSH
11256: LD_INT 6
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 30
11265: PUSH
11266: LD_INT 4
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PPUSH
11277: CALL_OW 69
11281: PPUSH
11282: LD_EXP 36
11286: PPUSH
11287: CALL_OW 74
11291: PPUSH
11292: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11296: LD_STRING Attack
11298: PPUSH
11299: CALL_OW 337
// music_class := music_combat ;
11303: LD_ADDR_OWVAR 72
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// music_nat := 4 ;
11311: LD_ADDR_OWVAR 71
11315: PUSH
11316: LD_INT 4
11318: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11319: LD_INT 5
11321: PPUSH
11322: LD_EXP 36
11326: PPUSH
11327: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11331: LD_INT 6
11333: PPUSH
11334: LD_EXP 33
11338: PPUSH
11339: LD_INT 25
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PPUSH
11349: CALL_OW 72
11353: PUSH
11354: LD_INT 4
11356: ARRAY
11357: PPUSH
11358: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11362: LD_ADDR_VAR 0 1
11366: PUSH
11367: LD_EXP 33
11371: PPUSH
11372: LD_INT 3
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 72
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11414
// ComAgressiveMove ( i , 221 , 110 ) ;
11397: LD_VAR 0 1
11401: PPUSH
11402: LD_INT 221
11404: PPUSH
11405: LD_INT 110
11407: PPUSH
11408: CALL_OW 114
11412: GO 11394
11414: POP
11415: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11416: LD_EXP 33
11420: PPUSH
11421: LD_INT 25
11423: PUSH
11424: LD_INT 4
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PPUSH
11431: CALL_OW 72
11435: PPUSH
11436: LD_INT 214
11438: PPUSH
11439: LD_INT 124
11441: PPUSH
11442: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11446: LD_EXP 33
11450: PPUSH
11451: LD_INT 25
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 72
11465: PUSH
11466: LD_INT 4
11468: ARRAY
11469: PPUSH
11470: LD_INT 214
11472: PPUSH
11473: LD_INT 114
11475: PPUSH
11476: LD_INT 0
11478: PPUSH
11479: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11483: LD_EXP 36
11487: PPUSH
11488: LD_STRING D9-Gri-1
11490: PPUSH
11491: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11495: LD_EXP 35
11499: PPUSH
11500: LD_STRING D9-Kur-1
11502: PPUSH
11503: CALL_OW 94
// wait ( 0 0$1 ) ;
11507: LD_INT 35
11509: PPUSH
11510: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11514: LD_EXP 29
11518: PPUSH
11519: LD_INT 233
11521: PPUSH
11522: LD_INT 130
11524: PPUSH
11525: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11529: LD_EXP 36
11533: PPUSH
11534: LD_STRING D9-Gri-2
11536: PPUSH
11537: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11541: LD_EXP 35
11545: PPUSH
11546: LD_STRING D9-Kur-2
11548: PPUSH
11549: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11553: LD_EXP 36
11557: PPUSH
11558: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11562: LD_EXP 36
11566: PPUSH
11567: LD_INT 211
11569: PPUSH
11570: LD_INT 104
11572: PPUSH
11573: CALL_OW 171
// AddComHold ( Grishko ) ;
11577: LD_EXP 36
11581: PPUSH
11582: CALL_OW 200
// repeat wait ( 3 ) ;
11586: LD_INT 3
11588: PPUSH
11589: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11593: LD_EXP 36
11597: PPUSH
11598: CALL_OW 310
11602: NOT
11603: IFFALSE 11586
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11605: LD_EXP 33
11609: PPUSH
11610: LD_INT 34
11612: PUSH
11613: LD_INT 26
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PPUSH
11620: CALL_OW 72
11624: PPUSH
11625: LD_EXP 36
11629: PPUSH
11630: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11634: LD_EXP 33
11638: PPUSH
11639: LD_INT 34
11641: PUSH
11642: LD_INT 26
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PPUSH
11649: CALL_OW 72
11653: PPUSH
11654: LD_INT 215
11656: PPUSH
11657: LD_INT 106
11659: PPUSH
11660: CALL_OW 174
// repeat wait ( 3 ) ;
11664: LD_INT 3
11666: PPUSH
11667: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11671: LD_EXP 36
11675: PPUSH
11676: CALL_OW 256
11680: PUSH
11681: LD_INT 1000
11683: LESS
11684: IFFALSE 11664
// NormalAttack ( 5 , Grishko ) ;
11686: LD_INT 5
11688: PPUSH
11689: LD_EXP 36
11693: PPUSH
11694: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11698: LD_INT 6
11700: PPUSH
11701: LD_EXP 33
11705: PPUSH
11706: LD_INT 25
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 72
11720: PUSH
11721: LD_INT 4
11723: ARRAY
11724: PPUSH
11725: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11729: LD_EXP 36
11733: PPUSH
11734: LD_STRING D9-Gri-3
11736: PPUSH
11737: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
11741: LD_EXP 35
11745: PPUSH
11746: LD_STRING D9-Kur-3
11748: PPUSH
11749: CALL_OW 94
// music_class := music_auto ;
11753: LD_ADDR_OWVAR 72
11757: PUSH
11758: LD_INT 0
11760: ST_TO_ADDR
// music_nat := music_auto ;
11761: LD_ADDR_OWVAR 71
11765: PUSH
11766: LD_INT 0
11768: ST_TO_ADDR
// for i in omarSquad do
11769: LD_ADDR_VAR 0 1
11773: PUSH
11774: LD_EXP 33
11778: PUSH
11779: FOR_IN
11780: IFFALSE 11922
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
11782: LD_VAR 0 1
11786: PPUSH
11787: CALL_OW 247
11791: PUSH
11792: LD_INT 2
11794: EQUAL
11795: PUSH
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 256
11805: PUSH
11806: LD_INT 1000
11808: LESS
11809: AND
11810: IFFALSE 11876
// begin driver := IsDrivenBy ( i ) ;
11812: LD_ADDR_VAR 0 2
11816: PUSH
11817: LD_VAR 0 1
11821: PPUSH
11822: CALL_OW 311
11826: ST_TO_ADDR
// veh := i ;
11827: LD_ADDR_VAR 0 3
11831: PUSH
11832: LD_VAR 0 1
11836: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11837: LD_VAR 0 2
11841: PPUSH
11842: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
11846: LD_VAR 0 2
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
11860: LD_VAR 0 2
11864: PPUSH
11865: LD_VAR 0 3
11869: PPUSH
11870: CALL_OW 180
// end else
11874: GO 11920
// if GetLives ( i ) < 500 then
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 256
11885: PUSH
11886: LD_INT 500
11888: LESS
11889: IFFALSE 11920
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
11891: LD_EXP 33
11895: PPUSH
11896: LD_INT 25
11898: PUSH
11899: LD_INT 4
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 72
11910: PPUSH
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 188
// end ; end ;
11920: GO 11779
11922: POP
11923: POP
// repeat wait ( 0 0$1 ) ;
11924: LD_INT 35
11926: PPUSH
11927: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
11931: LD_EXP 33
11935: PPUSH
11936: LD_INT 3
11938: PUSH
11939: LD_INT 24
11941: PUSH
11942: LD_INT 1000
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 21
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PPUSH
11967: CALL_OW 72
11971: NOT
11972: PUSH
11973: LD_EXP 33
11977: PPUSH
11978: LD_INT 3
11980: PUSH
11981: LD_INT 24
11983: PUSH
11984: LD_INT 250
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 72
11999: NOT
12000: AND
12001: IFFALSE 11924
// wait ( 0 0$2 ) ;
12003: LD_INT 70
12005: PPUSH
12006: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12010: LD_ADDR_VAR 0 5
12014: PUSH
12015: LD_EXP 33
12019: PPUSH
12020: LD_INT 58
12022: PUSH
12023: EMPTY
12024: LIST
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 72
12044: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12045: LD_ADDR_VAR 0 6
12049: PUSH
12050: LD_EXP 33
12054: PPUSH
12055: LD_INT 25
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 3
12067: PUSH
12068: LD_INT 55
12070: PUSH
12071: EMPTY
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: ST_TO_ADDR
// for i := 1 to tmp do
12087: LD_ADDR_VAR 0 1
12091: PUSH
12092: DOUBLE
12093: LD_INT 1
12095: DEC
12096: ST_TO_ADDR
12097: LD_VAR 0 5
12101: PUSH
12102: FOR_TO
12103: IFFALSE 12133
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12105: LD_VAR 0 6
12109: PUSH
12110: LD_VAR 0 1
12114: ARRAY
12115: PPUSH
12116: LD_VAR 0 5
12120: PUSH
12121: LD_VAR 0 1
12125: ARRAY
12126: PPUSH
12127: CALL_OW 120
12131: GO 12102
12133: POP
12134: POP
// wait ( 0 0$5 ) ;
12135: LD_INT 175
12137: PPUSH
12138: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12142: LD_EXP 33
12146: PPUSH
12147: LD_INT 199
12149: PPUSH
12150: LD_INT 141
12152: PPUSH
12153: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12157: LD_EXP 29
12161: PPUSH
12162: LD_INT 190
12164: PPUSH
12165: LD_INT 143
12167: PPUSH
12168: CALL_OW 111
// AddComHold ( Omar ) ;
12172: LD_EXP 29
12176: PPUSH
12177: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12181: LD_EXP 33
12185: PPUSH
12186: LD_INT 2
12188: PUSH
12189: LD_INT 25
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 4
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: PPUSH
12219: LD_INT 161
12221: PPUSH
12222: LD_INT 130
12224: PPUSH
12225: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12229: LD_EXP 33
12233: PPUSH
12234: LD_INT 25
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 72
12248: PPUSH
12249: LD_INT 163
12251: PPUSH
12252: LD_INT 122
12254: PPUSH
12255: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12259: LD_EXP 33
12263: PPUSH
12264: LD_INT 25
12266: PUSH
12267: LD_INT 1
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PPUSH
12274: CALL_OW 72
12278: PUSH
12279: LD_INT 4
12281: ARRAY
12282: PPUSH
12283: LD_INT 165
12285: PPUSH
12286: LD_INT 118
12288: PPUSH
12289: LD_INT 0
12291: PPUSH
12292: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12296: LD_EXP 33
12300: PPUSH
12301: LD_INT 25
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PPUSH
12311: CALL_OW 72
12315: PUSH
12316: LD_INT 4
12318: ARRAY
12319: PPUSH
12320: LD_INT 159
12322: PPUSH
12323: LD_INT 116
12325: PPUSH
12326: LD_INT 0
12328: PPUSH
12329: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12333: LD_EXP 33
12337: PPUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PPUSH
12348: CALL_OW 72
12352: PPUSH
12353: LD_INT 169
12355: PPUSH
12356: LD_INT 114
12358: PPUSH
12359: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12363: LD_INT 35
12365: PPUSH
12366: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12370: LD_ADDR_VAR 0 5
12374: PUSH
12375: LD_EXP 33
12379: PPUSH
12380: LD_INT 25
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: ST_TO_ADDR
// for i in tmp do
12395: LD_ADDR_VAR 0 1
12399: PUSH
12400: LD_VAR 0 5
12404: PUSH
12405: FOR_IN
12406: IFFALSE 12503
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12408: LD_VAR 0 1
12412: PPUSH
12413: CALL_OW 256
12417: PUSH
12418: LD_INT 600
12420: LESS
12421: PUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: LD_INT 161
12429: PPUSH
12430: LD_INT 130
12432: PPUSH
12433: CALL_OW 297
12437: PUSH
12438: LD_INT 6
12440: GREATER
12441: AND
12442: IFFALSE 12459
// ComMoveXY ( i , 161 , 130 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_INT 161
12451: PPUSH
12452: LD_INT 130
12454: PPUSH
12455: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12459: LD_VAR 0 1
12463: PPUSH
12464: CALL_OW 256
12468: PUSH
12469: LD_INT 1000
12471: EQUAL
12472: PUSH
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 314
12482: NOT
12483: AND
12484: IFFALSE 12501
// ComAgressiveMove ( i , 160 , 109 ) ;
12486: LD_VAR 0 1
12490: PPUSH
12491: LD_INT 160
12493: PPUSH
12494: LD_INT 109
12496: PPUSH
12497: CALL_OW 114
// end ;
12501: GO 12405
12503: POP
12504: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12505: LD_ADDR_VAR 0 5
12509: PUSH
12510: LD_EXP 33
12514: PPUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 2
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PPUSH
12525: CALL_OW 72
12529: ST_TO_ADDR
// for i in tmp do
12530: LD_ADDR_VAR 0 1
12534: PUSH
12535: LD_VAR 0 5
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12807
// begin tmp2 := IsDrivenBy ( i ) ;
12543: LD_ADDR_VAR 0 6
12547: PUSH
12548: LD_VAR 0 1
12552: PPUSH
12553: CALL_OW 311
12557: ST_TO_ADDR
// if not tmp2 then
12558: LD_VAR 0 6
12562: NOT
12563: IFFALSE 12567
// continue ;
12565: GO 12540
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12567: LD_VAR 0 1
12571: PPUSH
12572: CALL_OW 256
12576: PUSH
12577: LD_INT 600
12579: GREATEREQUAL
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 110
12590: PUSH
12591: LD_INT 1
12593: EQUAL
12594: AND
12595: IFFALSE 12609
// SetTag ( i , 0 ) ;
12597: LD_VAR 0 1
12601: PPUSH
12602: LD_INT 0
12604: PPUSH
12605: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12609: LD_VAR 0 1
12613: PPUSH
12614: CALL_OW 256
12618: PUSH
12619: LD_INT 600
12621: GREATEREQUAL
12622: PUSH
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 110
12632: NOT
12633: AND
12634: IFFALSE 12660
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12636: LD_VAR 0 1
12640: PPUSH
12641: LD_VAR 0 7
12645: PPUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: CALL_OW 74
12655: PPUSH
12656: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12660: LD_VAR 0 1
12664: PPUSH
12665: CALL_OW 256
12669: PUSH
12670: LD_INT 600
12672: LESS
12673: PUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 110
12683: NOT
12684: AND
12685: IFFALSE 12714
// begin SetTag ( i , 1 ) ;
12687: LD_VAR 0 1
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 202
12706: PPUSH
12707: LD_INT 150
12709: PPUSH
12710: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 110
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: LD_INT 202
12735: PPUSH
12736: LD_INT 150
12738: PPUSH
12739: CALL_OW 297
12743: PUSH
12744: LD_INT 6
12746: LESS
12747: AND
12748: PUSH
12749: LD_VAR 0 6
12753: AND
12754: IFFALSE 12805
// begin ComExitVehicle ( tmp2 ) ;
12756: LD_VAR 0 6
12760: PPUSH
12761: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
12765: LD_VAR 0 6
12769: PPUSH
12770: LD_VAR 0 1
12774: PPUSH
12775: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
12779: LD_VAR 0 6
12783: PPUSH
12784: LD_INT 700
12786: PPUSH
12787: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
12791: LD_VAR 0 6
12795: PPUSH
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 180
// end ; end ;
12805: GO 12540
12807: POP
12808: POP
// until kirovDestroyed ;
12809: LD_EXP 15
12813: IFFALSE 12363
// repeat wait ( 0 0$1 ) ;
12815: LD_INT 35
12817: PPUSH
12818: CALL_OW 67
// for i in omarSquad union Omar do
12822: LD_ADDR_VAR 0 1
12826: PUSH
12827: LD_EXP 33
12831: PUSH
12832: LD_EXP 29
12836: UNION
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12883
// if IsInArea ( i , southRoadArea ) then
12841: LD_VAR 0 1
12845: PPUSH
12846: LD_INT 15
12848: PPUSH
12849: CALL_OW 308
12853: IFFALSE 12866
// RemoveUnit ( i ) else
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 64
12864: GO 12881
// ComMoveXY ( i , 208 , 162 ) ;
12866: LD_VAR 0 1
12870: PPUSH
12871: LD_INT 208
12873: PPUSH
12874: LD_INT 162
12876: PPUSH
12877: CALL_OW 111
12881: GO 12838
12883: POP
12884: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
12885: LD_INT 22
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 21
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 69
12913: NOT
12914: IFFALSE 12815
// end ;
12916: PPOPN 7
12918: END
// every 0 0$1 trigger IsDead ( kirov ) do
12919: LD_INT 71
12921: PPUSH
12922: CALL_OW 301
12926: IFFALSE 12943
12928: GO 12930
12930: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
12931: LD_EXP 21
12935: PPUSH
12936: LD_STRING DH-1-Kirov
12938: PPUSH
12939: CALL_OW 88
12943: END
// every 0 0$1 trigger See ( 2 , beria ) do
12944: LD_INT 2
12946: PPUSH
12947: LD_INT 106
12949: PPUSH
12950: CALL_OW 292
12954: IFFALSE 12971
12956: GO 12958
12958: DISABLE
// Say ( Heike , DH-1-Beria ) ;
12959: LD_EXP 21
12963: PPUSH
12964: LD_STRING DH-1-Beria
12966: PPUSH
12967: CALL_OW 88
12971: END
// every 0 0$1 trigger See ( 2 , kagan ) do
12972: LD_INT 2
12974: PPUSH
12975: LD_INT 112
12977: PPUSH
12978: CALL_OW 292
12982: IFFALSE 12999
12984: GO 12986
12986: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
12987: LD_EXP 21
12991: PPUSH
12992: LD_STRING DH-1-Kagan
12994: PPUSH
12995: CALL_OW 88
12999: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
13000: LD_INT 2
13002: PPUSH
13003: LD_EXP 45
13007: PPUSH
13008: CALL_OW 292
13012: PUSH
13013: LD_EXP 45
13017: PPUSH
13018: CALL_OW 302
13022: AND
13023: PUSH
13024: LD_EXP 21
13028: PPUSH
13029: CALL_OW 302
13033: AND
13034: PUSH
13035: LD_EXP 31
13039: PPUSH
13040: CALL_OW 302
13044: AND
13045: PUSH
13046: LD_INT 2
13048: PPUSH
13049: CALL_OW 463
13053: NOT
13054: AND
13055: IFFALSE 13421
13057: GO 13059
13059: DISABLE
13060: LD_INT 0
13062: PPUSH
13063: PPUSH
13064: PPUSH
// begin DialogueOn ;
13065: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13069: LD_INT 111
13071: PPUSH
13072: LD_INT 90
13074: PPUSH
13075: LD_INT 2
13077: PPUSH
13078: LD_INT 6
13080: NEG
13081: PPUSH
13082: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13086: LD_INT 111
13088: PPUSH
13089: LD_INT 90
13091: PPUSH
13092: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13096: LD_EXP 31
13100: PPUSH
13101: LD_STRING DA-Cap-1
13103: PPUSH
13104: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13108: LD_EXP 21
13112: PPUSH
13113: LD_STRING DH-Cap-2
13115: PPUSH
13116: CALL_OW 88
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13120: LD_ADDR_VAR 0 2
13124: PUSH
13125: LD_EXP 32
13129: PUSH
13130: LD_EXP 24
13134: PUSH
13135: LD_EXP 25
13139: PUSH
13140: LD_EXP 27
13144: PUSH
13145: LD_EXP 26
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: UNION
13156: ST_TO_ADDR
// if tmp < 2 then
13157: LD_VAR 0 2
13161: PUSH
13162: LD_INT 2
13164: LESS
13165: IFFALSE 13177
// q := 2 else
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: LD_INT 2
13174: ST_TO_ADDR
13175: GO 13190
// q := Query ( LabCap ) ;
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_STRING LabCap
13184: PPUSH
13185: CALL_OW 97
13189: ST_TO_ADDR
// case q of 1 :
13190: LD_VAR 0 3
13194: PUSH
13195: LD_INT 1
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13381
13203: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13204: LD_INT 2
13206: PPUSH
13207: LD_EXP 45
13211: PPUSH
13212: CALL_OW 471
// labCaptured := true ;
13216: LD_ADDR_EXP 20
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13224: LD_EXP 21
13228: PPUSH
13229: LD_STRING DH-Cap-a-1
13231: PPUSH
13232: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13236: LD_EXP 31
13240: PPUSH
13241: LD_STRING DA-Cap-a-2
13243: PPUSH
13244: CALL_OW 88
// SetSide ( ruLab , 5 ) ;
13248: LD_EXP 45
13252: PPUSH
13253: LD_INT 5
13255: PPUSH
13256: CALL_OW 235
// SetSide ( Aviradze , 5 ) ;
13260: LD_EXP 31
13264: PPUSH
13265: LD_INT 5
13267: PPUSH
13268: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13272: LD_ADDR_EXP 34
13276: PUSH
13277: LD_EXP 31
13281: PUSH
13282: EMPTY
13283: LIST
13284: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13285: LD_EXP 31
13289: PPUSH
13290: LD_EXP 45
13294: PPUSH
13295: CALL_OW 120
// for i := 1 to 2 do
13299: LD_ADDR_VAR 0 1
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_INT 2
13311: PUSH
13312: FOR_TO
13313: IFFALSE 13377
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13315: LD_ADDR_EXP 34
13319: PUSH
13320: LD_EXP 34
13324: PUSH
13325: LD_VAR 0 2
13329: PUSH
13330: LD_VAR 0 1
13334: ARRAY
13335: UNION
13336: ST_TO_ADDR
// SetSide ( tmp [ i ] , 5 ) ;
13337: LD_VAR 0 2
13341: PUSH
13342: LD_VAR 0 1
13346: ARRAY
13347: PPUSH
13348: LD_INT 5
13350: PPUSH
13351: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13355: LD_VAR 0 2
13359: PUSH
13360: LD_VAR 0 1
13364: ARRAY
13365: PPUSH
13366: LD_EXP 45
13370: PPUSH
13371: CALL_OW 120
// end ;
13375: GO 13312
13377: POP
13378: POP
// end ; 2 :
13379: GO 13417
13381: LD_INT 2
13383: DOUBLE
13384: EQUAL
13385: IFTRUE 13389
13387: GO 13416
13389: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13390: LD_EXP 21
13394: PPUSH
13395: LD_STRING DH-Cap-b-1
13397: PPUSH
13398: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13402: LD_EXP 31
13406: PPUSH
13407: LD_STRING DA-Cap-b-2
13409: PPUSH
13410: CALL_OW 88
// end ; end ;
13414: GO 13417
13416: POP
// DialogueOff ;
13417: CALL_OW 7
// end ;
13421: PPOPN 3
13423: END
// every 0 0$1 trigger kirovDestroyed and beriaDestroyed and kaganDestroyed do var i , tmp , tmp2 , cargo ;
13424: LD_EXP 15
13428: PUSH
13429: LD_EXP 16
13433: AND
13434: PUSH
13435: LD_EXP 17
13439: AND
13440: IFFALSE 14586
13442: GO 13444
13444: DISABLE
13445: LD_INT 0
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
13451: LD_STRING GoToWest
13453: PPUSH
13454: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
13458: LD_INT 17
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
13468: LD_INT 35
13470: PPUSH
13471: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) = FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
13475: LD_INT 22
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 3
13510: PUSH
13511: LD_INT 58
13513: PUSH
13514: EMPTY
13515: LIST
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: PUSH
13539: LD_INT 17
13541: PPUSH
13542: LD_INT 22
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 2
13554: PUSH
13555: LD_INT 21
13557: PUSH
13558: LD_INT 1
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 21
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 3
13577: PUSH
13578: LD_INT 58
13580: PUSH
13581: EMPTY
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PPUSH
13601: CALL_OW 70
13605: EQUAL
13606: IFFALSE 13468
// SaveCharacters ( Heike , 04_1_Heike ) ;
13608: LD_EXP 21
13612: PPUSH
13613: LD_STRING 04_1_Heike
13615: PPUSH
13616: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
13620: LD_EXP 31
13624: PUSH
13625: LD_EXP 31
13629: PUSH
13630: LD_EXP 34
13634: IN
13635: NOT
13636: AND
13637: IFFALSE 13653
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
13639: LD_EXP 31
13643: PPUSH
13644: LD_STRING 04_1_Aviradze
13646: PPUSH
13647: CALL_OW 38
13651: GO 13671
// if Aviradze then
13653: LD_EXP 31
13657: IFFALSE 13671
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
13659: LD_EXP 31
13663: PPUSH
13664: LD_STRING 04_1_Aviradze_L
13666: PPUSH
13667: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
13671: LD_EXP 24
13675: PUSH
13676: LD_EXP 24
13680: PUSH
13681: LD_EXP 34
13685: IN
13686: NOT
13687: AND
13688: IFFALSE 13704
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
13690: LD_EXP 24
13694: PPUSH
13695: LD_STRING 04_1_Ibrahim
13697: PPUSH
13698: CALL_OW 38
13702: GO 13722
// if Ibrahim then
13704: LD_EXP 24
13708: IFFALSE 13722
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
13710: LD_EXP 24
13714: PPUSH
13715: LD_STRING 04_1_Ibrahim_L
13717: PPUSH
13718: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
13722: LD_EXP 25
13726: PUSH
13727: LD_EXP 25
13731: PUSH
13732: LD_EXP 34
13736: IN
13737: NOT
13738: AND
13739: IFFALSE 13755
// SaveCharacters ( Kamil , 04_1_Kamil ) else
13741: LD_EXP 25
13745: PPUSH
13746: LD_STRING 04_1_Kamil
13748: PPUSH
13749: CALL_OW 38
13753: GO 13773
// if Kamil then
13755: LD_EXP 25
13759: IFFALSE 13773
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
13761: LD_EXP 25
13765: PPUSH
13766: LD_STRING 04_1_Kamil_L
13768: PPUSH
13769: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
13773: LD_EXP 27
13777: PUSH
13778: LD_EXP 27
13782: PUSH
13783: LD_EXP 34
13787: IN
13788: NOT
13789: AND
13790: IFFALSE 13806
// SaveCharacters ( Sophia , 04_1_Sophia ) else
13792: LD_EXP 27
13796: PPUSH
13797: LD_STRING 04_1_Sophia
13799: PPUSH
13800: CALL_OW 38
13804: GO 13824
// if Sophia then
13806: LD_EXP 27
13810: IFFALSE 13824
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
13812: LD_EXP 27
13816: PPUSH
13817: LD_STRING 04_1_Sophia_L
13819: PPUSH
13820: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
13824: LD_EXP 26
13828: PUSH
13829: LD_EXP 26
13833: PUSH
13834: LD_EXP 34
13838: IN
13839: NOT
13840: AND
13841: IFFALSE 13857
// SaveCharacters ( Kaia , 04_1_Kaia ) else
13843: LD_EXP 26
13847: PPUSH
13848: LD_STRING 04_1_Kaia
13850: PPUSH
13851: CALL_OW 38
13855: GO 13875
// if Kaia then
13857: LD_EXP 26
13861: IFFALSE 13875
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
13863: LD_EXP 26
13867: PPUSH
13868: LD_STRING 04_1_Kaia_L
13870: PPUSH
13871: CALL_OW 38
// if Givi then
13875: LD_EXP 22
13879: IFFALSE 13893
// SaveCharacters ( Givi , 04_1_Givi ) ;
13881: LD_EXP 22
13885: PPUSH
13886: LD_STRING 04_1_Givi
13888: PPUSH
13889: CALL_OW 38
// if Mike then
13893: LD_EXP 23
13897: IFFALSE 13911
// SaveCharacters ( Mike , 04_1_Mike ) ;
13899: LD_EXP 23
13903: PPUSH
13904: LD_STRING 04_1_Mike
13906: PPUSH
13907: CALL_OW 38
// if Markov then
13911: LD_EXP 28
13915: IFFALSE 13929
// SaveCharacters ( Markov , 04_1_Markov ) ;
13917: LD_EXP 28
13921: PPUSH
13922: LD_STRING 04_1_Markov
13924: PPUSH
13925: CALL_OW 38
// if Kurt then
13929: LD_EXP 30
13933: IFFALSE 13947
// SaveCharacters ( Kurt , 04_1_Markov ) ;
13935: LD_EXP 30
13939: PPUSH
13940: LD_STRING 04_1_Markov
13942: PPUSH
13943: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
13947: LD_EXP 32
13951: PUSH
13952: LD_EXP 34
13956: DIFF
13957: IFFALSE 13977
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
13959: LD_EXP 32
13963: PUSH
13964: LD_EXP 34
13968: DIFF
13969: PPUSH
13970: LD_STRING 04_1_others
13972: PPUSH
13973: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
13977: LD_EXP 34
13981: PUSH
13982: LD_EXP 32
13986: AND
13987: IFFALSE 14072
// begin tmp := [ ] ;
13989: LD_ADDR_VAR 0 2
13993: PUSH
13994: EMPTY
13995: ST_TO_ADDR
// for i in heikeSecondSquad do
13996: LD_ADDR_VAR 0 1
14000: PUSH
14001: LD_EXP 32
14005: PUSH
14006: FOR_IN
14007: IFFALSE 14052
// if i in aviradzeSquad then
14009: LD_VAR 0 1
14013: PUSH
14014: LD_EXP 34
14018: IN
14019: IFFALSE 14050
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14021: LD_ADDR_VAR 0 2
14025: PUSH
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 1
14038: PLUS
14039: PPUSH
14040: LD_VAR 0 1
14044: PPUSH
14045: CALL_OW 1
14049: ST_TO_ADDR
14050: GO 14006
14052: POP
14053: POP
// if tmp then
14054: LD_VAR 0 2
14058: IFFALSE 14072
// SaveCharacters ( tmp , 04_1_others_L ) ;
14060: LD_VAR 0 2
14064: PPUSH
14065: LD_STRING 04_1_others_L
14067: PPUSH
14068: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14072: LD_ADDR_VAR 0 2
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 23
14089: PUSH
14090: LD_INT 0
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PPUSH
14101: CALL_OW 69
14105: ST_TO_ADDR
// if tmp then
14106: LD_VAR 0 2
14110: IFFALSE 14124
// SaveCharacters ( tmp , 04_1_apes ) ;
14112: LD_VAR 0 2
14116: PPUSH
14117: LD_STRING 04_1_apes
14119: PPUSH
14120: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14124: LD_ADDR_VAR 0 2
14128: PUSH
14129: LD_INT 17
14131: PPUSH
14132: LD_INT 21
14134: PUSH
14135: LD_INT 2
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PPUSH
14142: CALL_OW 70
14146: ST_TO_ADDR
// if tmp then
14147: LD_VAR 0 2
14151: IFFALSE 14445
// begin tmp2 := [ ] ;
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: EMPTY
14159: ST_TO_ADDR
// for i in tmp do
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: LD_VAR 0 2
14169: PUSH
14170: FOR_IN
14171: IFFALSE 14431
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 264
14182: PUSH
14183: LD_INT 32
14185: PUSH
14186: LD_INT 12
14188: PUSH
14189: LD_INT 51
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: IN
14197: IFFALSE 14334
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14199: LD_ADDR_VAR 0 4
14203: PUSH
14204: LD_VAR 0 1
14208: PPUSH
14209: LD_INT 1
14211: PPUSH
14212: CALL_OW 289
14216: PUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: LD_INT 2
14224: PPUSH
14225: CALL_OW 289
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14234: LD_ADDR_VAR 0 3
14238: PUSH
14239: LD_VAR 0 3
14243: PPUSH
14244: LD_VAR 0 3
14248: PUSH
14249: LD_INT 1
14251: PLUS
14252: PPUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 265
14262: PUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL_OW 262
14272: PUSH
14273: LD_VAR 0 1
14277: PPUSH
14278: CALL_OW 263
14282: PUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 264
14292: PUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 248
14302: PUSH
14303: LD_VAR 0 1
14307: PPUSH
14308: CALL_OW 256
14312: PUSH
14313: LD_VAR 0 4
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 1
14331: ST_TO_ADDR
// end else
14332: GO 14429
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
14334: LD_ADDR_VAR 0 3
14338: PUSH
14339: LD_VAR 0 3
14343: PPUSH
14344: LD_VAR 0 3
14348: PUSH
14349: LD_INT 1
14351: PLUS
14352: PPUSH
14353: LD_VAR 0 1
14357: PPUSH
14358: CALL_OW 265
14362: PUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 262
14372: PUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 263
14382: PUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 264
14392: PUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 248
14402: PUSH
14403: LD_VAR 0 1
14407: PPUSH
14408: CALL_OW 256
14412: PUSH
14413: EMPTY
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: PPUSH
14424: CALL_OW 1
14428: ST_TO_ADDR
14429: GO 14170
14431: POP
14432: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
14433: LD_VAR 0 3
14437: PPUSH
14438: LD_STRING 04_1_Vehicles
14440: PPUSH
14441: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
14445: LD_EXP 20
14449: PPUSH
14450: LD_STRING 04_1_RuLabCaptured
14452: PPUSH
14453: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
14457: LD_EXP 18
14461: PPUSH
14462: LD_STRING 04_1_EscapeCounter
14464: PPUSH
14465: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
14469: LD_INT 10
14471: PPUSH
14472: LD_INT 22
14474: PUSH
14475: LD_INT 2
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 21
14484: PUSH
14485: LD_INT 3
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PPUSH
14496: CALL_OW 70
14500: PUSH
14501: LD_INT 0
14503: GREATER
14504: PPUSH
14505: LD_STRING 04_1_BaseHill
14507: PPUSH
14508: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
14512: LD_OWVAR 1
14516: PPUSH
14517: LD_STRING 04_1_Time
14519: PPUSH
14520: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
14524: LD_EXP 14
14528: PPUSH
14529: LD_STRING 04_1_DeadCounter
14531: PPUSH
14532: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
14536: LD_INT 22
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 34
14548: PUSH
14549: LD_INT 26
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: PUSH
14565: LD_INT 0
14567: PLUS
14568: PPUSH
14569: LD_STRING 04_1_Flamethrower
14571: PPUSH
14572: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
14576: LD_INT 1
14578: PPUSH
14579: LD_STRING __x1\04_cont2
14581: PPUSH
14582: CALL_OW 340
// end ; end_of_file
14586: PPOPN 4
14588: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 266
14598: PUSH
14599: LD_INT 0
14601: EQUAL
14602: PUSH
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 255
14612: PUSH
14613: LD_INT 2
14615: EQUAL
14616: AND
14617: IFFALSE 14627
// baseConstructed := true ;
14619: LD_ADDR_EXP 3
14623: PUSH
14624: LD_INT 1
14626: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 266
14636: PUSH
14637: LD_INT 6
14639: EQUAL
14640: PUSH
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 255
14650: PUSH
14651: LD_INT 2
14653: EQUAL
14654: AND
14655: IFFALSE 14665
// labConstructed := true ;
14657: LD_ADDR_EXP 4
14661: PUSH
14662: LD_INT 1
14664: ST_TO_ADDR
// end ;
14665: PPOPN 1
14667: END
// on UnitDestroyed ( un ) do begin if un = Heike then
14668: LD_VAR 0 1
14672: PUSH
14673: LD_EXP 21
14677: EQUAL
14678: IFFALSE 14687
// YouLost ( Heike ) ;
14680: LD_STRING Heike
14682: PPUSH
14683: CALL_OW 104
// if un = Omar then
14687: LD_VAR 0 1
14691: PUSH
14692: LD_EXP 29
14696: EQUAL
14697: IFFALSE 14706
// YouLost ( Omar ) ;
14699: LD_STRING Omar
14701: PPUSH
14702: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
14706: LD_VAR 0 1
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_INT 2
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 23
14723: PUSH
14724: LD_INT 2
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 69
14750: IN
14751: IFFALSE 14767
// loseCounter := loseCounter + 1 ;
14753: LD_ADDR_EXP 14
14757: PUSH
14758: LD_EXP 14
14762: PUSH
14763: LD_INT 1
14765: PLUS
14766: ST_TO_ADDR
// if un = omikron then
14767: LD_VAR 0 1
14771: PUSH
14772: LD_INT 64
14774: EQUAL
14775: IFFALSE 14785
// omicronFall := true ;
14777: LD_ADDR_EXP 13
14781: PUSH
14782: LD_INT 1
14784: ST_TO_ADDR
// if un = kirov then
14785: LD_VAR 0 1
14789: PUSH
14790: LD_INT 71
14792: EQUAL
14793: IFFALSE 14810
// begin ChangeMissionObjectives ( KirovDone ) ;
14795: LD_STRING KirovDone
14797: PPUSH
14798: CALL_OW 337
// kirovDestroyed := true ;
14802: LD_ADDR_EXP 15
14806: PUSH
14807: LD_INT 1
14809: ST_TO_ADDR
// end ; if un = beria then
14810: LD_VAR 0 1
14814: PUSH
14815: LD_INT 106
14817: EQUAL
14818: IFFALSE 14835
// begin ChangeMissionObjectives ( BeriaDone ) ;
14820: LD_STRING BeriaDone
14822: PPUSH
14823: CALL_OW 337
// beriaDestroyed := true ;
14827: LD_ADDR_EXP 16
14831: PUSH
14832: LD_INT 1
14834: ST_TO_ADDR
// end ; if un = kagan then
14835: LD_VAR 0 1
14839: PUSH
14840: LD_INT 112
14842: EQUAL
14843: IFFALSE 14860
// begin ChangeMissionObjectives ( KaganDone ) ;
14845: LD_STRING KaganDone
14847: PPUSH
14848: CALL_OW 337
// kaganDestroyed := true ;
14852: LD_ADDR_EXP 17
14856: PUSH
14857: LD_INT 1
14859: ST_TO_ADDR
// end ; if un in russianPatrol then
14860: LD_VAR 0 1
14864: PUSH
14865: LD_EXP 42
14869: IN
14870: IFFALSE 14911
// begin if GetTag ( un ) = 2 then
14872: LD_VAR 0 1
14876: PPUSH
14877: CALL_OW 110
14881: PUSH
14882: LD_INT 2
14884: EQUAL
14885: IFFALSE 14895
// spottedByPatrol := false ;
14887: LD_ADDR_EXP 7
14891: PUSH
14892: LD_INT 0
14894: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
14895: LD_ADDR_EXP 42
14899: PUSH
14900: LD_EXP 42
14904: PUSH
14905: LD_VAR 0 1
14909: DIFF
14910: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
14911: LD_VAR 0 1
14915: PUSH
14916: LD_EXP 43
14920: IN
14921: IFFALSE 14939
// russianOmicronAttackers := russianOmicronAttackers diff un ;
14923: LD_ADDR_EXP 43
14927: PUSH
14928: LD_EXP 43
14932: PUSH
14933: LD_VAR 0 1
14937: DIFF
14938: ST_TO_ADDR
// end ;
14939: PPOPN 1
14941: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
14946: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
14947: LD_VAR 0 1
14951: PUSH
14952: LD_INT 2
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_INT 4
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 6
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 32
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 69
15009: IN
15010: IFFALSE 15183
// begin sol := UnitsInside ( un ) ;
15012: LD_ADDR_VAR 0 3
15016: PUSH
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 313
15026: ST_TO_ADDR
// if not sol then
15027: LD_VAR 0 3
15031: NOT
15032: IFFALSE 15036
// exit ;
15034: GO 15183
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15036: LD_ADDR_VAR 0 4
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_VAR 0 1
15048: PPUSH
15049: CALL_OW 255
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 30
15063: PUSH
15064: LD_INT 4
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 30
15073: PUSH
15074: LD_INT 5
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: ST_TO_ADDR
// if not nearestBarracks then
15095: LD_VAR 0 4
15099: NOT
15100: IFFALSE 15104
// exit ;
15102: GO 15183
// for i in nearestBarracks do
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: LD_VAR 0 4
15113: PUSH
15114: FOR_IN
15115: IFFALSE 15150
// if UnitsInside ( i ) = 6 then
15117: LD_VAR 0 2
15121: PPUSH
15122: CALL_OW 313
15126: PUSH
15127: LD_INT 6
15129: EQUAL
15130: IFFALSE 15148
// nearestBarracks := nearestBarracks diff i ;
15132: LD_ADDR_VAR 0 4
15136: PUSH
15137: LD_VAR 0 4
15141: PUSH
15142: LD_VAR 0 2
15146: DIFF
15147: ST_TO_ADDR
15148: GO 15114
15150: POP
15151: POP
// if not nearestBarracks then
15152: LD_VAR 0 4
15156: NOT
15157: IFFALSE 15161
// exit ;
15159: GO 15183
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15161: LD_VAR 0 3
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: PPUSH
15170: LD_VAR 0 4
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: PPUSH
15179: CALL_OW 120
// end ; end ;
15183: PPOPN 4
15185: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15186: LD_INT 0
15188: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15189: LD_EXP 8
15193: NOT
15194: PUSH
15195: LD_EXP 5
15199: NOT
15200: OR
15201: IFFALSE 15205
// exit ;
15203: GO 15273
// for i in camAreas do
15205: LD_ADDR_VAR 0 5
15209: PUSH
15210: LD_EXP 8
15214: PUSH
15215: FOR_IN
15216: IFFALSE 15271
// if InArea ( x , y , i ) then
15218: LD_VAR 0 3
15222: PPUSH
15223: LD_VAR 0 4
15227: PPUSH
15228: LD_VAR 0 5
15232: PPUSH
15233: CALL_OW 309
15237: IFFALSE 15269
// begin SetAreaMapShow ( i , 0 ) ;
15239: LD_VAR 0 5
15243: PPUSH
15244: LD_INT 0
15246: PPUSH
15247: CALL_OW 424
// camAreas := camAreas diff i ;
15251: LD_ADDR_EXP 8
15255: PUSH
15256: LD_EXP 8
15260: PUSH
15261: LD_VAR 0 5
15265: DIFF
15266: ST_TO_ADDR
// break ;
15267: GO 15271
// end ;
15269: GO 15215
15271: POP
15272: POP
// end ;
15273: PPOPN 5
15275: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
15276: LD_VAR 0 1
15280: PUSH
15281: LD_INT 2
15283: EQUAL
15284: PUSH
15285: LD_VAR 0 2
15289: PUSH
15290: LD_INT 5
15292: EQUAL
15293: AND
15294: IFFALSE 15303
// YouLost ( Ally ) ;
15296: LD_STRING Ally
15298: PPUSH
15299: CALL_OW 104
// end ; end_of_file
15303: PPOPN 2
15305: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15306: LD_EXP 11
15310: NOT
15311: PUSH
15312: LD_INT 12
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 287
15322: PUSH
15323: LD_INT 200
15325: PUSH
15326: LD_INT 160
15328: PUSH
15329: LD_INT 120
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: LD_OWVAR 67
15341: ARRAY
15342: LESS
15343: AND
15344: IFFALSE 15371
15346: GO 15348
15348: DISABLE
// begin enable ;
15349: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
15350: LD_INT 1
15352: PPUSH
15353: LD_INT 5
15355: PPUSH
15356: CALL_OW 12
15360: PPUSH
15361: LD_INT 12
15363: PPUSH
15364: LD_INT 1
15366: PPUSH
15367: CALL_OW 55
// end ;
15371: END
