// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1760 0 0
// PrepareArabian ;
  12: CALL 2125 0 0
// PrepareAmerican ;
  16: CALL 6671 0 0
// PrepareRussian ;
  20: CALL 3046 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8231 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// end ; end_of_file
 261: LD_VAR 0 1
 265: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// if exist_mode then
 270: LD_VAR 0 2
 274: IFFALSE 299
// unit := CreateCharacter ( prefix & ident ) else
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_VAR 0 3
 285: PUSH
 286: LD_VAR 0 1
 290: STR
 291: PPUSH
 292: CALL_OW 34
 296: ST_TO_ADDR
 297: GO 314
// unit := NewCharacter ( ident ) ;
 299: LD_ADDR_VAR 0 5
 303: PUSH
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 25
 313: ST_TO_ADDR
// result := unit ;
 314: LD_ADDR_VAR 0 4
 318: PUSH
 319: LD_VAR 0 5
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 4
 328: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 329: LD_INT 0
 331: PPUSH
// uc_side := side ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_VAR 0 1
 341: ST_TO_ADDR
// uc_nation := nation ;
 342: LD_ADDR_OWVAR 21
 346: PUSH
 347: LD_VAR 0 2
 351: ST_TO_ADDR
// vc_chassis := chassis ;
 352: LD_ADDR_OWVAR 37
 356: PUSH
 357: LD_VAR 0 3
 361: ST_TO_ADDR
// vc_engine := engine ;
 362: LD_ADDR_OWVAR 39
 366: PUSH
 367: LD_VAR 0 4
 371: ST_TO_ADDR
// vc_control := control ;
 372: LD_ADDR_OWVAR 38
 376: PUSH
 377: LD_VAR 0 5
 381: ST_TO_ADDR
// vc_weapon := weapon ;
 382: LD_ADDR_OWVAR 40
 386: PUSH
 387: LD_VAR 0 6
 391: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 392: LD_ADDR_OWVAR 41
 396: PUSH
 397: LD_VAR 0 7
 401: ST_TO_ADDR
// result := CreateVehicle ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: CALL_OW 45
 411: ST_TO_ADDR
// end ;
 412: LD_VAR 0 8
 416: RET
// export function SayX ( units , ident ) ; var i ; begin
 417: LD_INT 0
 419: PPUSH
 420: PPUSH
// result := false ;
 421: LD_ADDR_VAR 0 3
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// if not units then
 429: LD_VAR 0 1
 433: NOT
 434: IFFALSE 438
// exit ;
 436: GO 492
// for i in units do
 438: LD_ADDR_VAR 0 4
 442: PUSH
 443: LD_VAR 0 1
 447: PUSH
 448: FOR_IN
 449: IFFALSE 490
// if IsOk ( i ) then
 451: LD_VAR 0 4
 455: PPUSH
 456: CALL_OW 302
 460: IFFALSE 488
// begin Say ( i , ident ) ;
 462: LD_VAR 0 4
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: CALL_OW 88
// result := i ;
 476: LD_ADDR_VAR 0 3
 480: PUSH
 481: LD_VAR 0 4
 485: ST_TO_ADDR
// break ;
 486: GO 490
// end ;
 488: GO 448
 490: POP
 491: POP
// end ;
 492: LD_VAR 0 3
 496: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 497: LD_INT 0
 499: PPUSH
 500: PPUSH
 501: PPUSH
// if not observer or not unit then
 502: LD_VAR 0 1
 506: NOT
 507: PUSH
 508: LD_VAR 0 2
 512: NOT
 513: OR
 514: IFFALSE 518
// exit ;
 516: GO 566
// if not See ( GetSide ( observer ) , unit ) then
 518: LD_VAR 0 1
 522: PPUSH
 523: CALL_OW 255
 527: PPUSH
 528: LD_VAR 0 2
 532: PPUSH
 533: CALL_OW 292
 537: NOT
 538: IFFALSE 542
// exit ;
 540: GO 566
// result := GetDistUnits ( observer , unit ) < 12 ;
 542: LD_ADDR_VAR 0 3
 546: PUSH
 547: LD_VAR 0 1
 551: PPUSH
 552: LD_VAR 0 2
 556: PPUSH
 557: CALL_OW 296
 561: PUSH
 562: LD_INT 12
 564: LESS
 565: ST_TO_ADDR
// end ;
 566: LD_VAR 0 3
 570: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 571: LD_INT 0
 573: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 574: LD_VAR 0 2
 578: PUSH
 579: LD_INT 1
 581: ARRAY
 582: PPUSH
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: CALL_OW 488
 596: PUSH
 597: LD_VAR 0 2
 601: PUSH
 602: LD_INT 1
 604: ARRAY
 605: PPUSH
 606: LD_VAR 0 2
 610: PUSH
 611: LD_INT 2
 613: ARRAY
 614: PPUSH
 615: CALL_OW 428
 619: PUSH
 620: LD_INT 0
 622: EQUAL
 623: AND
 624: IFFALSE 658
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 626: LD_VAR 0 1
 630: PPUSH
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: LD_VAR 0 3
 653: PPUSH
 654: CALL_OW 48
// end ;
 658: LD_VAR 0 4
 662: RET
// export function Video ( mode ) ; begin
 663: LD_INT 0
 665: PPUSH
// ingame_video = mode ;
 666: LD_ADDR_OWVAR 52
 670: PUSH
 671: LD_VAR 0 1
 675: ST_TO_ADDR
// interface_hidden = mode ;
 676: LD_ADDR_OWVAR 54
 680: PUSH
 681: LD_VAR 0 1
 685: ST_TO_ADDR
// end ;
 686: LD_VAR 0 2
 690: RET
// export function ReverseArray ( array ) ; var i ; begin
 691: LD_INT 0
 693: PPUSH
 694: PPUSH
// if not array then
 695: LD_VAR 0 1
 699: NOT
 700: IFFALSE 704
// exit ;
 702: GO 762
// result := [ ] ;
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: EMPTY
 710: ST_TO_ADDR
// for i := 1 to array do
 711: LD_ADDR_VAR 0 3
 715: PUSH
 716: DOUBLE
 717: LD_INT 1
 719: DEC
 720: ST_TO_ADDR
 721: LD_VAR 0 1
 725: PUSH
 726: FOR_TO
 727: IFFALSE 760
// result := Insert ( result , 1 , array [ i ] ) ;
 729: LD_ADDR_VAR 0 2
 733: PUSH
 734: LD_VAR 0 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_VAR 0 1
 746: PUSH
 747: LD_VAR 0 3
 751: ARRAY
 752: PPUSH
 753: CALL_OW 2
 757: ST_TO_ADDR
 758: GO 726
 760: POP
 761: POP
// end ;
 762: LD_VAR 0 2
 766: RET
// export function ComExit ( unit ) ; begin
 767: LD_INT 0
 769: PPUSH
// result := IsInUnit ( unit ) ;
 770: LD_ADDR_VAR 0 2
 774: PUSH
 775: LD_VAR 0 1
 779: PPUSH
 780: CALL_OW 310
 784: ST_TO_ADDR
// if not result then
 785: LD_VAR 0 2
 789: NOT
 790: IFFALSE 794
// exit ;
 792: GO 829
// if GetType ( result ) = unit_vehicle then
 794: LD_VAR 0 2
 798: PPUSH
 799: CALL_OW 247
 803: PUSH
 804: LD_INT 2
 806: EQUAL
 807: IFFALSE 820
// ComExitVehicle ( unit ) else
 809: LD_VAR 0 1
 813: PPUSH
 814: CALL_OW 121
 818: GO 829
// ComExitBuilding ( unit ) ;
 820: LD_VAR 0 1
 824: PPUSH
 825: CALL_OW 122
// end ;
 829: LD_VAR 0 2
 833: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
// if not side or not nation then
 838: LD_VAR 0 1
 842: NOT
 843: PUSH
 844: LD_VAR 0 2
 848: NOT
 849: OR
 850: IFFALSE 854
// exit ;
 852: GO 1618
// case nation of nation_american :
 854: LD_VAR 0 2
 858: PUSH
 859: LD_INT 1
 861: DOUBLE
 862: EQUAL
 863: IFTRUE 867
 865: GO 1081
 867: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 868: LD_ADDR_VAR 0 4
 872: PUSH
 873: LD_INT 35
 875: PUSH
 876: LD_INT 45
 878: PUSH
 879: LD_INT 46
 881: PUSH
 882: LD_INT 47
 884: PUSH
 885: LD_INT 82
 887: PUSH
 888: LD_INT 83
 890: PUSH
 891: LD_INT 84
 893: PUSH
 894: LD_INT 85
 896: PUSH
 897: LD_INT 86
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: LD_INT 6
 908: PUSH
 909: LD_INT 15
 911: PUSH
 912: LD_INT 16
 914: PUSH
 915: LD_INT 7
 917: PUSH
 918: LD_INT 12
 920: PUSH
 921: LD_INT 13
 923: PUSH
 924: LD_INT 10
 926: PUSH
 927: LD_INT 14
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 21
 935: PUSH
 936: LD_INT 22
 938: PUSH
 939: LD_INT 25
 941: PUSH
 942: LD_INT 32
 944: PUSH
 945: LD_INT 27
 947: PUSH
 948: LD_INT 36
 950: PUSH
 951: LD_INT 69
 953: PUSH
 954: LD_INT 39
 956: PUSH
 957: LD_INT 34
 959: PUSH
 960: LD_INT 40
 962: PUSH
 963: LD_INT 48
 965: PUSH
 966: LD_INT 49
 968: PUSH
 969: LD_INT 50
 971: PUSH
 972: LD_INT 51
 974: PUSH
 975: LD_INT 52
 977: PUSH
 978: LD_INT 53
 980: PUSH
 981: LD_INT 54
 983: PUSH
 984: LD_INT 55
 986: PUSH
 987: LD_INT 56
 989: PUSH
 990: LD_INT 57
 992: PUSH
 993: LD_INT 58
 995: PUSH
 996: LD_INT 59
 998: PUSH
 999: LD_INT 60
1001: PUSH
1002: LD_INT 61
1004: PUSH
1005: LD_INT 62
1007: PUSH
1008: LD_INT 80
1010: PUSH
1011: LD_INT 82
1013: PUSH
1014: LD_INT 83
1016: PUSH
1017: LD_INT 84
1019: PUSH
1020: LD_INT 85
1022: PUSH
1023: LD_INT 86
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
1079: GO 1542
1081: LD_INT 2
1083: DOUBLE
1084: EQUAL
1085: IFTRUE 1089
1087: GO 1311
1089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 35
1097: PUSH
1098: LD_INT 45
1100: PUSH
1101: LD_INT 46
1103: PUSH
1104: LD_INT 47
1106: PUSH
1107: LD_INT 82
1109: PUSH
1110: LD_INT 83
1112: PUSH
1113: LD_INT 84
1115: PUSH
1116: LD_INT 85
1118: PUSH
1119: LD_INT 87
1121: PUSH
1122: LD_INT 70
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 11
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: LD_INT 4
1136: PUSH
1137: LD_INT 5
1139: PUSH
1140: LD_INT 6
1142: PUSH
1143: LD_INT 15
1145: PUSH
1146: LD_INT 18
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: LD_INT 17
1154: PUSH
1155: LD_INT 8
1157: PUSH
1158: LD_INT 20
1160: PUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 22
1166: PUSH
1167: LD_INT 72
1169: PUSH
1170: LD_INT 26
1172: PUSH
1173: LD_INT 69
1175: PUSH
1176: LD_INT 39
1178: PUSH
1179: LD_INT 40
1181: PUSH
1182: LD_INT 41
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: LD_INT 43
1190: PUSH
1191: LD_INT 48
1193: PUSH
1194: LD_INT 49
1196: PUSH
1197: LD_INT 50
1199: PUSH
1200: LD_INT 51
1202: PUSH
1203: LD_INT 52
1205: PUSH
1206: LD_INT 53
1208: PUSH
1209: LD_INT 54
1211: PUSH
1212: LD_INT 55
1214: PUSH
1215: LD_INT 56
1217: PUSH
1218: LD_INT 60
1220: PUSH
1221: LD_INT 61
1223: PUSH
1224: LD_INT 62
1226: PUSH
1227: LD_INT 66
1229: PUSH
1230: LD_INT 67
1232: PUSH
1233: LD_INT 68
1235: PUSH
1236: LD_INT 81
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 83
1244: PUSH
1245: LD_INT 84
1247: PUSH
1248: LD_INT 85
1250: PUSH
1251: LD_INT 87
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
1309: GO 1542
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1541
1319: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 46
1327: PUSH
1328: LD_INT 47
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 82
1339: PUSH
1340: LD_INT 83
1342: PUSH
1343: LD_INT 84
1345: PUSH
1346: LD_INT 85
1348: PUSH
1349: LD_INT 86
1351: PUSH
1352: LD_INT 11
1354: PUSH
1355: LD_INT 9
1357: PUSH
1358: LD_INT 20
1360: PUSH
1361: LD_INT 19
1363: PUSH
1364: LD_INT 21
1366: PUSH
1367: LD_INT 24
1369: PUSH
1370: LD_INT 22
1372: PUSH
1373: LD_INT 25
1375: PUSH
1376: LD_INT 28
1378: PUSH
1379: LD_INT 29
1381: PUSH
1382: LD_INT 30
1384: PUSH
1385: LD_INT 31
1387: PUSH
1388: LD_INT 37
1390: PUSH
1391: LD_INT 38
1393: PUSH
1394: LD_INT 32
1396: PUSH
1397: LD_INT 27
1399: PUSH
1400: LD_INT 33
1402: PUSH
1403: LD_INT 69
1405: PUSH
1406: LD_INT 39
1408: PUSH
1409: LD_INT 34
1411: PUSH
1412: LD_INT 40
1414: PUSH
1415: LD_INT 71
1417: PUSH
1418: LD_INT 23
1420: PUSH
1421: LD_INT 44
1423: PUSH
1424: LD_INT 48
1426: PUSH
1427: LD_INT 49
1429: PUSH
1430: LD_INT 50
1432: PUSH
1433: LD_INT 51
1435: PUSH
1436: LD_INT 52
1438: PUSH
1439: LD_INT 53
1441: PUSH
1442: LD_INT 54
1444: PUSH
1445: LD_INT 55
1447: PUSH
1448: LD_INT 56
1450: PUSH
1451: LD_INT 57
1453: PUSH
1454: LD_INT 58
1456: PUSH
1457: LD_INT 59
1459: PUSH
1460: LD_INT 63
1462: PUSH
1463: LD_INT 64
1465: PUSH
1466: LD_INT 65
1468: PUSH
1469: LD_INT 82
1471: PUSH
1472: LD_INT 83
1474: PUSH
1475: LD_INT 84
1477: PUSH
1478: LD_INT 85
1480: PUSH
1481: LD_INT 86
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: ST_TO_ADDR
1539: GO 1542
1541: POP
// if state > - 1 and state < 3 then
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 1
1549: NEG
1550: GREATER
1551: PUSH
1552: LD_VAR 0 3
1556: PUSH
1557: LD_INT 3
1559: LESS
1560: AND
1561: IFFALSE 1618
// for i in result do
1563: LD_ADDR_VAR 0 5
1567: PUSH
1568: LD_VAR 0 4
1572: PUSH
1573: FOR_IN
1574: IFFALSE 1616
// if GetTech ( i , side ) <> state then
1576: LD_VAR 0 5
1580: PPUSH
1581: LD_VAR 0 1
1585: PPUSH
1586: CALL_OW 321
1590: PUSH
1591: LD_VAR 0 3
1595: NONEQUAL
1596: IFFALSE 1614
// result := result diff i ;
1598: LD_ADDR_VAR 0 4
1602: PUSH
1603: LD_VAR 0 4
1607: PUSH
1608: LD_VAR 0 5
1612: DIFF
1613: ST_TO_ADDR
1614: GO 1573
1616: POP
1617: POP
// end ;
1618: LD_VAR 0 4
1622: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1623: LD_INT 0
1625: PPUSH
1626: PPUSH
// InitUc ;
1627: CALL_OW 18
// InitHc ;
1631: CALL_OW 19
// uc_side := 0 ;
1635: LD_ADDR_OWVAR 20
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// uc_nation := 0 ;
1643: LD_ADDR_OWVAR 21
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// for i = 1 to amount do
1651: LD_ADDR_VAR 0 4
1655: PUSH
1656: DOUBLE
1657: LD_INT 1
1659: DEC
1660: ST_TO_ADDR
1661: LD_VAR 0 2
1665: PUSH
1666: FOR_TO
1667: IFFALSE 1749
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1669: LD_ADDR_OWVAR 29
1673: PUSH
1674: LD_INT 9
1676: PPUSH
1677: LD_INT 12
1679: PPUSH
1680: CALL_OW 12
1684: PUSH
1685: LD_INT 9
1687: PPUSH
1688: LD_INT 12
1690: PPUSH
1691: CALL_OW 12
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1700: LD_ADDR_OWVAR 35
1704: PUSH
1705: LD_INT 1
1707: NEG
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: CALL_OW 12
1716: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 12
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1730: CALL_OW 44
1734: PPUSH
1735: LD_VAR 0 1
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// end ;
1747: GO 1666
1749: POP
1750: POP
// InitHc ;
1751: CALL_OW 19
// end ;
1755: LD_VAR 0 3
1759: RET
// export function PrepareNature ; var i ; begin
1760: LD_INT 0
1762: PPUSH
1763: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1764: LD_INT 18
1766: PPUSH
1767: LD_INT 5
1769: PUSH
1770: LD_INT 4
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_OWVAR 67
1785: ARRAY
1786: PPUSH
1787: CALL 1623 0 2
// for i := 1 to 3 do
1791: LD_ADDR_VAR 0 2
1795: PUSH
1796: DOUBLE
1797: LD_INT 1
1799: DEC
1800: ST_TO_ADDR
1801: LD_INT 3
1803: PUSH
1804: FOR_TO
1805: IFFALSE 1840
// begin hc_class := 21 ;
1807: LD_ADDR_OWVAR 28
1811: PUSH
1812: LD_INT 21
1814: ST_TO_ADDR
// hc_gallery :=  ;
1815: LD_ADDR_OWVAR 33
1819: PUSH
1820: LD_STRING 
1822: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1823: CALL_OW 44
1827: PPUSH
1828: LD_INT 18
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 49
// end ;
1838: GO 1804
1840: POP
1841: POP
// for i := 1 to 2 do
1842: LD_ADDR_VAR 0 2
1846: PUSH
1847: DOUBLE
1848: LD_INT 1
1850: DEC
1851: ST_TO_ADDR
1852: LD_INT 2
1854: PUSH
1855: FOR_TO
1856: IFFALSE 1891
// begin hc_class := 18 ;
1858: LD_ADDR_OWVAR 28
1862: PUSH
1863: LD_INT 18
1865: ST_TO_ADDR
// hc_gallery :=  ;
1866: LD_ADDR_OWVAR 33
1870: PUSH
1871: LD_STRING 
1873: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1874: CALL_OW 44
1878: PPUSH
1879: LD_INT 18
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// end ;
1889: GO 1855
1891: POP
1892: POP
// for i := 1 to 2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: DOUBLE
1899: LD_INT 1
1901: DEC
1902: ST_TO_ADDR
1903: LD_INT 2
1905: PUSH
1906: FOR_TO
1907: IFFALSE 1942
// begin hc_class := 13 ;
1909: LD_ADDR_OWVAR 28
1913: PUSH
1914: LD_INT 13
1916: ST_TO_ADDR
// hc_gallery :=  ;
1917: LD_ADDR_OWVAR 33
1921: PUSH
1922: LD_STRING 
1924: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1925: CALL_OW 44
1929: PPUSH
1930: LD_INT 18
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 49
// end ;
1940: GO 1906
1942: POP
1943: POP
// end ;
1944: LD_VAR 0 1
1948: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp ; begin
1949: LD_INT 0
1951: PPUSH
1952: PPUSH
1953: PPUSH
1954: PPUSH
// result := false ;
1955: LD_ADDR_VAR 0 4
1959: PUSH
1960: LD_INT 0
1962: ST_TO_ADDR
// if not sideList or not enemySide then
1963: LD_VAR 0 1
1967: NOT
1968: PUSH
1969: LD_VAR 0 2
1973: NOT
1974: OR
1975: IFFALSE 1979
// exit ;
1977: GO 2120
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1979: LD_ADDR_VAR 0 7
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_VAR 0 2
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PPUSH
1996: CALL_OW 69
2000: ST_TO_ADDR
// if not tmp then
2001: LD_VAR 0 7
2005: NOT
2006: IFFALSE 2010
// exit ;
2008: GO 2120
// for s in sideList do
2010: LD_ADDR_VAR 0 6
2014: PUSH
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2118
// for i in tmp do
2023: LD_ADDR_VAR 0 5
2027: PUSH
2028: LD_VAR 0 7
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2114
// if See ( s , i ) then
2036: LD_VAR 0 6
2040: PPUSH
2041: LD_VAR 0 5
2045: PPUSH
2046: CALL_OW 292
2050: IFFALSE 2112
// begin result := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2052: LD_ADDR_VAR 0 4
2056: PUSH
2057: LD_INT 22
2059: PUSH
2060: LD_VAR 0 6
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PPUSH
2069: CALL_OW 69
2073: PPUSH
2074: LD_VAR 0 5
2078: PPUSH
2079: CALL_OW 74
2083: ST_TO_ADDR
// if exceptUnits then
2084: LD_VAR 0 3
2088: IFFALSE 2112
// if result in exceptUnits then
2090: LD_VAR 0 4
2094: PUSH
2095: LD_VAR 0 3
2099: IN
2100: IFFALSE 2106
// continue else
2102: GO 2033
2104: GO 2112
// exit ;
2106: POP
2107: POP
2108: POP
2109: POP
2110: GO 2120
// end ;
2112: GO 2033
2114: POP
2115: POP
2116: GO 2020
2118: POP
2119: POP
// end ; end_of_file
2120: LD_VAR 0 4
2124: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2125: LD_INT 0
2127: PPUSH
2128: PPUSH
// uc_side := 2 ;
2129: LD_ADDR_OWVAR 20
2133: PUSH
2134: LD_INT 2
2136: ST_TO_ADDR
// uc_nation := 2 ;
2137: LD_ADDR_OWVAR 21
2141: PUSH
2142: LD_INT 2
2144: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2145: LD_ADDR_EXP 23
2149: PUSH
2150: LD_STRING Heike
2152: PPUSH
2153: LD_EXP 1
2157: NOT
2158: PPUSH
2159: LD_EXP 2
2163: PPUSH
2164: CALL 266 0 3
2168: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2169: LD_ADDR_EXP 26
2173: PUSH
2174: LD_STRING Ibrahim
2176: PPUSH
2177: LD_EXP 1
2181: NOT
2182: PPUSH
2183: LD_EXP 2
2187: PPUSH
2188: CALL 266 0 3
2192: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2193: LD_ADDR_EXP 24
2197: PUSH
2198: LD_STRING Givi
2200: PPUSH
2201: LD_EXP 1
2205: NOT
2206: PPUSH
2207: LD_EXP 2
2211: PPUSH
2212: CALL 266 0 3
2216: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2217: LD_ADDR_EXP 27
2221: PUSH
2222: LD_STRING Kamil
2224: PPUSH
2225: LD_EXP 1
2229: NOT
2230: PPUSH
2231: LD_EXP 2
2235: PPUSH
2236: CALL 266 0 3
2240: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2241: LD_ADDR_EXP 28
2245: PUSH
2246: LD_STRING Kaia
2248: PPUSH
2249: LD_EXP 1
2253: NOT
2254: PPUSH
2255: LD_EXP 2
2259: PPUSH
2260: CALL 266 0 3
2264: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2265: LD_ADDR_EXP 29
2269: PUSH
2270: LD_STRING Sophia
2272: PPUSH
2273: LD_EXP 1
2277: NOT
2278: PPUSH
2279: LD_EXP 2
2283: PPUSH
2284: CALL 266 0 3
2288: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2289: LD_ADDR_EXP 30
2293: PUSH
2294: LD_STRING Markov
2296: PPUSH
2297: LD_EXP 1
2301: NOT
2302: PPUSH
2303: LD_EXP 2
2307: PPUSH
2308: CALL 266 0 3
2312: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2313: LD_ADDR_EXP 33
2317: PUSH
2318: LD_STRING Aviradze
2320: PPUSH
2321: LD_EXP 1
2325: NOT
2326: PPUSH
2327: LD_EXP 2
2331: PPUSH
2332: CALL 266 0 3
2336: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2337: LD_ADDR_EXP 36
2341: PUSH
2342: EMPTY
2343: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2344: LD_ADDR_EXP 34
2348: PUSH
2349: LD_STRING 03_others
2351: PPUSH
2352: CALL_OW 31
2356: ST_TO_ADDR
// uc_side := 5 ;
2357: LD_ADDR_OWVAR 20
2361: PUSH
2362: LD_INT 5
2364: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2365: LD_ADDR_EXP 32
2369: PUSH
2370: LD_STRING Kurt
2372: PPUSH
2373: LD_INT 0
2375: PPUSH
2376: LD_STRING 
2378: PPUSH
2379: CALL 266 0 3
2383: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2384: LD_ADDR_EXP 25
2388: PUSH
2389: LD_STRING Mike
2391: PPUSH
2392: LD_EXP 1
2396: NOT
2397: PPUSH
2398: LD_EXP 2
2402: PPUSH
2403: CALL 266 0 3
2407: ST_TO_ADDR
// if Mike then
2408: LD_EXP 25
2412: IFFALSE 2435
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2414: LD_EXP 25
2418: PPUSH
2419: LD_INT 142
2421: PPUSH
2422: LD_INT 63
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: LD_INT 0
2430: PPUSH
2431: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2435: LD_EXP 32
2439: PPUSH
2440: LD_INT 142
2442: PPUSH
2443: LD_INT 63
2445: PPUSH
2446: LD_INT 3
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2456: LD_EXP 32
2460: PUSH
2461: LD_EXP 25
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PPUSH
2470: CALL_OW 140
// end ;
2474: LD_VAR 0 1
2478: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2479: LD_INT 0
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
// uc_side := 5 ;
2485: LD_ADDR_OWVAR 20
2489: PUSH
2490: LD_INT 5
2492: ST_TO_ADDR
// uc_nation := 2 ;
2493: LD_ADDR_OWVAR 21
2497: PUSH
2498: LD_INT 2
2500: ST_TO_ADDR
// InitHc ;
2501: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2505: LD_ADDR_EXP 31
2509: PUSH
2510: LD_STRING Omar
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: LD_STRING 
2518: PPUSH
2519: CALL 266 0 3
2523: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2524: LD_EXP 31
2528: PPUSH
2529: LD_INT 284
2531: PPUSH
2532: LD_INT 163
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2542: LD_EXP 31
2546: PPUSH
2547: LD_INT 256
2549: PPUSH
2550: LD_INT 129
2552: PPUSH
2553: CALL_OW 111
// wait ( 0 0$2 ) ;
2557: LD_INT 70
2559: PPUSH
2560: CALL_OW 67
// omarSquad := [ ] ;
2564: LD_ADDR_EXP 35
2568: PUSH
2569: EMPTY
2570: ST_TO_ADDR
// for i := 1 to 5 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 5
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2791
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2587: LD_INT 5
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 13
2595: PUSH
2596: LD_INT 14
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: LD_INT 2
2610: MOD
2611: PUSH
2612: LD_INT 1
2614: PLUS
2615: ARRAY
2616: PPUSH
2617: LD_INT 1
2619: PPUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 25
2625: PUSH
2626: LD_INT 27
2628: PUSH
2629: LD_INT 26
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: PUSH
2637: LD_VAR 0 2
2641: PUSH
2642: LD_INT 3
2644: MOD
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: ARRAY
2650: PPUSH
2651: LD_INT 100
2653: PPUSH
2654: CALL 329 0 7
// veh := CreateVehicle ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 45
2667: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 5
2675: PPUSH
2676: CALL_OW 233
// omarSquad := omarSquad union veh ;
2680: LD_ADDR_EXP 35
2684: PUSH
2685: LD_EXP 35
2689: PUSH
2690: LD_VAR 0 4
2694: UNION
2695: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 284
2703: PPUSH
2704: LD_INT 163
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2714: LD_INT 0
2716: PPUSH
2717: LD_INT 3
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 380
// un := CreateHuman ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 44
2736: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2737: LD_ADDR_EXP 35
2741: PUSH
2742: LD_EXP 35
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2753: LD_VAR 0 3
2757: PPUSH
2758: LD_VAR 0 4
2762: PPUSH
2763: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 271
2774: PPUSH
2775: LD_INT 144
2777: PPUSH
2778: CALL_OW 111
// wait ( 0 0$2 ) ;
2782: LD_INT 70
2784: PPUSH
2785: CALL_OW 67
// end ;
2789: GO 2584
2791: POP
2792: POP
// for i := 1 to 3 do
2793: LD_ADDR_VAR 0 2
2797: PUSH
2798: DOUBLE
2799: LD_INT 1
2801: DEC
2802: ST_TO_ADDR
2803: LD_INT 3
2805: PUSH
2806: FOR_TO
2807: IFFALSE 2890
// begin PrepareHuman ( false , 1 , 3 ) ;
2809: LD_INT 0
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL_OW 380
// un := CreateHuman ;
2822: LD_ADDR_VAR 0 3
2826: PUSH
2827: CALL_OW 44
2831: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2832: LD_ADDR_EXP 35
2836: PUSH
2837: LD_EXP 35
2841: PUSH
2842: LD_VAR 0 3
2846: UNION
2847: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_INT 284
2855: PPUSH
2856: LD_INT 163
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2866: LD_VAR 0 3
2870: PPUSH
2871: LD_INT 257
2873: PPUSH
2874: LD_INT 138
2876: PPUSH
2877: CALL_OW 111
// wait ( 0 0$1 ) ;
2881: LD_INT 35
2883: PPUSH
2884: CALL_OW 67
// end ;
2888: GO 2806
2890: POP
2891: POP
// for i := 1 to 6 do
2892: LD_ADDR_VAR 0 2
2896: PUSH
2897: DOUBLE
2898: LD_INT 1
2900: DEC
2901: ST_TO_ADDR
2902: LD_INT 6
2904: PUSH
2905: FOR_TO
2906: IFFALSE 3039
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2908: LD_INT 0
2910: PPUSH
2911: LD_INT 1
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: LD_INT 3
2932: MOD
2933: PUSH
2934: LD_INT 1
2936: PLUS
2937: ARRAY
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: CALL_OW 380
// un := CreateHuman ;
2946: LD_ADDR_VAR 0 3
2950: PUSH
2951: CALL_OW 44
2955: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2956: LD_ADDR_EXP 35
2960: PUSH
2961: LD_EXP 35
2965: PUSH
2966: LD_VAR 0 3
2970: UNION
2971: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2972: LD_VAR 0 3
2976: PPUSH
2977: LD_INT 225
2979: PPUSH
2980: LD_INT 163
2982: PPUSH
2983: LD_INT 0
2985: PPUSH
2986: CALL_OW 48
// if i = 1 then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_INT 1
2997: EQUAL
2998: IFFALSE 3015
// SetAttr ( un , attr_speed , 12 ) ;
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_INT 2
3007: PPUSH
3008: LD_INT 12
3010: PPUSH
3011: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3015: LD_VAR 0 3
3019: PPUSH
3020: LD_INT 222
3022: PPUSH
3023: LD_INT 157
3025: PPUSH
3026: CALL_OW 111
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// end ;
3037: GO 2905
3039: POP
3040: POP
// end ; end_of_file
3041: LD_VAR 0 1
3045: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3046: LD_INT 0
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
3054: LD_ADDR_EXP 47
3058: PUSH
3059: LD_INT 22
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 30
3071: PUSH
3072: LD_INT 7
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: PPUSH
3083: CALL_OW 69
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_INT 21
3099: PUSH
3100: LD_INT 3
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 23
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3143
// SetBLevel ( i , 5 ) ;
3129: LD_VAR 0 2
3133: PPUSH
3134: LD_INT 5
3136: PPUSH
3137: CALL_OW 241
3141: GO 3126
3143: POP
3144: POP
// SetBName ( kirov , kirov ) ;
3145: LD_INT 71
3147: PPUSH
3148: LD_STRING kirov
3150: PPUSH
3151: CALL_OW 500
// SetBName ( beria , beria ) ;
3155: LD_INT 106
3157: PPUSH
3158: LD_STRING beria
3160: PPUSH
3161: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3165: LD_INT 112
3167: PPUSH
3168: LD_STRING kagan
3170: PPUSH
3171: CALL_OW 500
// uc_side := 6 ;
3175: LD_ADDR_OWVAR 20
3179: PUSH
3180: LD_INT 6
3182: ST_TO_ADDR
// uc_nation := 3 ;
3183: LD_ADDR_OWVAR 21
3187: PUSH
3188: LD_INT 3
3190: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3191: LD_ADDR_VAR 0 5
3195: PUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 6
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 30
3208: PUSH
3209: LD_INT 5
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: LD_INT 1
3227: ARRAY
3228: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3229: LD_ADDR_VAR 0 4
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 6
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 30
3246: PUSH
3247: LD_INT 4
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3267: LD_ADDR_EXP 41
3271: PUSH
3272: EMPTY
3273: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3274: LD_ADDR_EXP 42
3278: PUSH
3279: EMPTY
3280: ST_TO_ADDR
// russianPatrol := [ ] ;
3281: LD_ADDR_EXP 44
3285: PUSH
3286: EMPTY
3287: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3288: LD_ADDR_EXP 37
3292: PUSH
3293: LD_STRING Kurin
3295: PPUSH
3296: LD_INT 0
3298: PPUSH
3299: LD_STRING 
3301: PPUSH
3302: CALL 266 0 3
3306: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3307: LD_EXP 37
3311: PPUSH
3312: LD_INT 71
3314: PPUSH
3315: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3319: LD_ADDR_EXP 39
3323: PUSH
3324: LD_STRING Popov
3326: PPUSH
3327: LD_INT 0
3329: PPUSH
3330: LD_STRING 
3332: PPUSH
3333: CALL 266 0 3
3337: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3338: LD_EXP 39
3342: PPUSH
3343: LD_INT 71
3345: PPUSH
3346: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3350: LD_ADDR_EXP 38
3354: PUSH
3355: LD_STRING Grishko
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: LD_STRING 
3363: PPUSH
3364: CALL 266 0 3
3368: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3369: LD_EXP 38
3373: PPUSH
3374: LD_INT 207
3376: PPUSH
3377: LD_INT 106
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3387: LD_EXP 38
3391: PPUSH
3392: LD_INT 209
3394: PPUSH
3395: LD_INT 106
3397: PPUSH
3398: CALL_OW 118
// for i := 1 to 2 do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 2
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3471
// begin PrepareHuman ( false , 2 , 2 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: CALL_OW 380
// un := CreateHuman ;
3431: LD_ADDR_VAR 0 3
3435: PUSH
3436: CALL_OW 44
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_INT 71
3448: PPUSH
3449: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3453: LD_ADDR_EXP 41
3457: PUSH
3458: LD_EXP 41
3462: PUSH
3463: LD_VAR 0 3
3467: UNION
3468: ST_TO_ADDR
// end ;
3469: GO 3415
3471: POP
3472: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3473: LD_ADDR_VAR 0 2
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_INT 5
3485: PUSH
3486: LD_INT 6
3488: PUSH
3489: LD_INT 6
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_OWVAR 67
3501: ARRAY
3502: PUSH
3503: FOR_TO
3504: IFFALSE 3578
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3506: LD_INT 0
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: LD_INT 2
3514: PUSH
3515: LD_INT 3
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: PUSH
3526: LD_OWVAR 67
3530: ARRAY
3531: PPUSH
3532: CALL_OW 380
// un := CreateHuman ;
3536: LD_ADDR_VAR 0 3
3540: PUSH
3541: CALL_OW 44
3545: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3546: LD_VAR 0 3
3550: PPUSH
3551: LD_VAR 0 5
3555: PPUSH
3556: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3560: LD_ADDR_EXP 41
3564: PUSH
3565: LD_EXP 41
3569: PUSH
3570: LD_VAR 0 3
3574: UNION
3575: ST_TO_ADDR
// end ;
3576: GO 3503
3578: POP
3579: POP
// for i := 1 to 3 do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 3
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3649
// begin PrepareHuman ( false , 3 , 3 ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 3
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: CALL_OW 380
// un := CreateHuman ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: CALL_OW 44
3618: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3619: LD_VAR 0 3
3623: PPUSH
3624: LD_INT 92
3626: PPUSH
3627: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3631: LD_ADDR_EXP 41
3635: PUSH
3636: LD_EXP 41
3640: PUSH
3641: LD_VAR 0 3
3645: UNION
3646: ST_TO_ADDR
// end ;
3647: GO 3593
3649: POP
3650: POP
// for i := 1 to 2 do
3651: LD_ADDR_VAR 0 2
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: FOR_TO
3665: IFFALSE 3720
// begin PrepareHuman ( false , 4 , 3 ) ;
3667: LD_INT 0
3669: PPUSH
3670: LD_INT 4
3672: PPUSH
3673: LD_INT 3
3675: PPUSH
3676: CALL_OW 380
// un := CreateHuman ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: CALL_OW 44
3689: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3690: LD_VAR 0 3
3694: PPUSH
3695: LD_INT 83
3697: PPUSH
3698: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3702: LD_ADDR_EXP 41
3706: PUSH
3707: LD_EXP 41
3711: PUSH
3712: LD_VAR 0 3
3716: UNION
3717: ST_TO_ADDR
// end ;
3718: GO 3664
3720: POP
3721: POP
// for i := 1 to 5 do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_INT 5
3734: PUSH
3735: FOR_TO
3736: IFFALSE 3793
// begin PrepareHuman ( false , 1 , 3 ) ;
3738: LD_INT 0
3740: PPUSH
3741: LD_INT 1
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: CALL_OW 380
// un := CreateHuman ;
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: CALL_OW 44
3760: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 4
3770: PPUSH
3771: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3775: LD_ADDR_EXP 43
3779: PUSH
3780: LD_EXP 43
3784: PUSH
3785: LD_VAR 0 3
3789: UNION
3790: ST_TO_ADDR
// end ;
3791: GO 3735
3793: POP
3794: POP
// russianCargo := [ ] ;
3795: LD_ADDR_EXP 46
3799: PUSH
3800: EMPTY
3801: ST_TO_ADDR
// for i := 1 to 2 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 2
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3948
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3818: LD_INT 6
3820: PPUSH
3821: LD_INT 3
3823: PPUSH
3824: LD_INT 21
3826: PPUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 51
3835: PPUSH
3836: LD_INT 100
3838: PPUSH
3839: CALL 329 0 7
// un := CreateVehicle ;
3843: LD_ADDR_VAR 0 3
3847: PUSH
3848: CALL_OW 45
3852: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3853: LD_ADDR_EXP 46
3857: PUSH
3858: LD_EXP 46
3862: PUSH
3863: LD_VAR 0 3
3867: UNION
3868: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 2
3876: PPUSH
3877: LD_INT 100
3879: PPUSH
3880: CALL_OW 290
// SetDir ( un , 4 ) ;
3884: LD_VAR 0 3
3888: PPUSH
3889: LD_INT 4
3891: PPUSH
3892: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 147
3903: PPUSH
3904: LD_INT 103
3906: PPUSH
3907: LD_INT 4
3909: PPUSH
3910: LD_INT 0
3912: PPUSH
3913: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3917: LD_INT 0
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: LD_OWVAR 67
3927: PPUSH
3928: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3932: CALL_OW 44
3936: PPUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 52
// end ;
3946: GO 3815
3948: POP
3949: POP
// uc_side := 3 ;
3950: LD_ADDR_OWVAR 20
3954: PUSH
3955: LD_INT 3
3957: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3958: LD_ADDR_EXP 40
3962: PUSH
3963: LD_STRING Burlak
3965: PPUSH
3966: LD_INT 0
3968: PPUSH
3969: LD_STRING 
3971: PPUSH
3972: CALL 266 0 3
3976: ST_TO_ADDR
// for i := 1 to 2 do
3977: LD_ADDR_VAR 0 2
3981: PUSH
3982: DOUBLE
3983: LD_INT 1
3985: DEC
3986: ST_TO_ADDR
3987: LD_INT 2
3989: PUSH
3990: FOR_TO
3991: IFFALSE 4084
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3993: LD_INT 0
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_OWVAR 67
4003: PUSH
4004: LD_INT 1
4006: PLUS
4007: PPUSH
4008: CALL_OW 380
// un := CreateHuman ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 44
4021: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 22
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 30
4039: PUSH
4040: LD_INT 32
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 69
4055: PUSH
4056: LD_VAR 0 2
4060: ARRAY
4061: PPUSH
4062: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4066: LD_ADDR_EXP 42
4070: PUSH
4071: LD_EXP 42
4075: PUSH
4076: LD_VAR 0 3
4080: UNION
4081: ST_TO_ADDR
// end ;
4082: GO 3990
4084: POP
4085: POP
// for i := 1 to 2 do
4086: LD_ADDR_VAR 0 2
4090: PUSH
4091: DOUBLE
4092: LD_INT 1
4094: DEC
4095: ST_TO_ADDR
4096: LD_INT 2
4098: PUSH
4099: FOR_TO
4100: IFFALSE 4191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4102: LD_INT 0
4104: PPUSH
4105: LD_INT 1
4107: PPUSH
4108: LD_OWVAR 67
4112: PUSH
4113: LD_INT 1
4115: PLUS
4116: PPUSH
4117: CALL_OW 380
// un := CreateHuman ;
4121: LD_ADDR_VAR 0 3
4125: PUSH
4126: CALL_OW 44
4130: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4131: LD_VAR 0 3
4135: PPUSH
4136: LD_INT 22
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 30
4148: PUSH
4149: LD_INT 5
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: CALL_OW 69
4164: PUSH
4165: LD_INT 1
4167: ARRAY
4168: PPUSH
4169: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4173: LD_ADDR_EXP 42
4177: PUSH
4178: LD_EXP 42
4182: PUSH
4183: LD_VAR 0 3
4187: UNION
4188: ST_TO_ADDR
// end ;
4189: GO 4099
4191: POP
4192: POP
// for i := 1 to 2 do
4193: LD_ADDR_VAR 0 2
4197: PUSH
4198: DOUBLE
4199: LD_INT 1
4201: DEC
4202: ST_TO_ADDR
4203: LD_INT 2
4205: PUSH
4206: FOR_TO
4207: IFFALSE 4294
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 4
4214: PPUSH
4215: LD_OWVAR 67
4219: PPUSH
4220: CALL_OW 380
// un := CreateHuman ;
4224: LD_ADDR_VAR 0 3
4228: PUSH
4229: CALL_OW 44
4233: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4234: LD_VAR 0 3
4238: PPUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 30
4251: PUSH
4252: LD_INT 7
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: PPUSH
4272: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4276: LD_ADDR_EXP 42
4280: PUSH
4281: LD_EXP 42
4285: PUSH
4286: LD_VAR 0 3
4290: UNION
4291: ST_TO_ADDR
// end ;
4292: GO 4206
4294: POP
4295: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 2
4301: PPUSH
4302: LD_OWVAR 67
4306: PPUSH
4307: CALL_OW 380
// un := CreateHuman ;
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4321: LD_VAR 0 3
4325: PPUSH
4326: LD_INT 106
4328: PPUSH
4329: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4333: LD_ADDR_EXP 42
4337: PUSH
4338: LD_EXP 42
4342: PUSH
4343: LD_VAR 0 3
4347: UNION
4348: ST_TO_ADDR
// for i := 1 to 3 do
4349: LD_ADDR_VAR 0 2
4353: PUSH
4354: DOUBLE
4355: LD_INT 1
4357: DEC
4358: ST_TO_ADDR
4359: LD_INT 3
4361: PUSH
4362: FOR_TO
4363: IFFALSE 4485
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4365: LD_ADDR_VAR 0 6
4369: PUSH
4370: LD_INT 22
4372: PUSH
4373: LD_INT 3
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 30
4382: PUSH
4383: LD_INT 31
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PPUSH
4394: CALL_OW 69
4398: PUSH
4399: LD_VAR 0 2
4403: ARRAY
4404: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 1
4410: PPUSH
4411: LD_OWVAR 67
4415: PPUSH
4416: CALL_OW 380
// un := CreateHuman ;
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: CALL_OW 44
4429: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_VAR 0 6
4439: PPUSH
4440: CALL_OW 254
4444: PUSH
4445: LD_INT 3
4447: PLUS
4448: PPUSH
4449: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4453: LD_VAR 0 3
4457: PPUSH
4458: LD_VAR 0 6
4462: PPUSH
4463: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4467: LD_ADDR_EXP 42
4471: PUSH
4472: LD_EXP 42
4476: PUSH
4477: LD_VAR 0 3
4481: UNION
4482: ST_TO_ADDR
// end ;
4483: GO 4362
4485: POP
4486: POP
// russianOmicronAttackers := [ ] ;
4487: LD_ADDR_EXP 45
4491: PUSH
4492: EMPTY
4493: ST_TO_ADDR
// for i := 1 to 6 do
4494: LD_ADDR_VAR 0 2
4498: PUSH
4499: DOUBLE
4500: LD_INT 1
4502: DEC
4503: ST_TO_ADDR
4504: LD_INT 6
4506: PUSH
4507: FOR_TO
4508: IFFALSE 4732
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4510: LD_INT 3
4512: PPUSH
4513: LD_INT 3
4515: PPUSH
4516: LD_INT 21
4518: PUSH
4519: LD_INT 23
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PUSH
4526: LD_VAR 0 2
4530: PUSH
4531: LD_INT 2
4533: MOD
4534: PUSH
4535: LD_INT 1
4537: PLUS
4538: ARRAY
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_INT 1
4545: PPUSH
4546: LD_INT 43
4548: PUSH
4549: LD_INT 44
4551: PUSH
4552: LD_INT 42
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_VAR 0 2
4564: PUSH
4565: LD_INT 3
4567: MOD
4568: PUSH
4569: LD_INT 1
4571: PLUS
4572: ARRAY
4573: PPUSH
4574: LD_INT 100
4576: PPUSH
4577: CALL 329 0 7
// un := CreateVehicle ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: CALL_OW 45
4590: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_INT 0
4598: PUSH
4599: LD_INT 5
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 1
4608: PPUSH
4609: LD_INT 2
4611: PPUSH
4612: CALL_OW 12
4616: ARRAY
4617: PPUSH
4618: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4622: LD_ADDR_EXP 45
4626: PUSH
4627: LD_EXP 45
4631: PUSH
4632: LD_VAR 0 3
4636: UNION
4637: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4638: LD_VAR 0 3
4642: PPUSH
4643: LD_INT 127
4645: PPUSH
4646: LD_INT 89
4648: PPUSH
4649: LD_INT 7
4651: PPUSH
4652: LD_INT 0
4654: PPUSH
4655: CALL_OW 50
// uc_side := 3 ;
4659: LD_ADDR_OWVAR 20
4663: PUSH
4664: LD_INT 3
4666: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4667: LD_INT 0
4669: PPUSH
4670: LD_INT 3
4672: PPUSH
4673: LD_INT 3
4675: PPUSH
4676: CALL_OW 380
// un := CreateHuman ;
4680: LD_ADDR_VAR 0 3
4684: PUSH
4685: CALL_OW 44
4689: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4690: LD_ADDR_EXP 45
4694: PUSH
4695: LD_EXP 45
4699: PUSH
4700: LD_VAR 0 3
4704: UNION
4705: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: LD_EXP 45
4715: PUSH
4716: LD_EXP 45
4720: PUSH
4721: LD_INT 1
4723: MINUS
4724: ARRAY
4725: PPUSH
4726: CALL_OW 52
// end ;
4730: GO 4507
4732: POP
4733: POP
// for i := 1 to 3 do
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_INT 3
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4814
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4750: LD_INT 0
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: LD_OWVAR 67
4760: PPUSH
4761: CALL_OW 380
// un := CreateHuman ;
4765: LD_ADDR_VAR 0 3
4769: PUSH
4770: CALL_OW 44
4774: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4775: LD_ADDR_EXP 45
4779: PUSH
4780: LD_EXP 45
4784: PUSH
4785: LD_VAR 0 3
4789: UNION
4790: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4791: LD_VAR 0 3
4795: PPUSH
4796: LD_INT 91
4798: PPUSH
4799: LD_INT 60
4801: PPUSH
4802: LD_INT 3
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 50
// end ;
4812: GO 4747
4814: POP
4815: POP
// end ;
4816: LD_VAR 0 1
4820: RET
// every 0 0$3 do var i ;
4821: GO 4823
4823: DISABLE
4824: LD_INT 0
4826: PPUSH
// begin for i := 1 to 4 do
4827: LD_ADDR_VAR 0 1
4831: PUSH
4832: DOUBLE
4833: LD_INT 1
4835: DEC
4836: ST_TO_ADDR
4837: LD_INT 4
4839: PUSH
4840: FOR_TO
4841: IFFALSE 4860
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4843: LD_EXP 43
4847: PUSH
4848: LD_VAR 0 1
4852: ARRAY
4853: PPUSH
4854: CALL_OW 122
4858: GO 4840
4860: POP
4861: POP
// wait ( 3 ) ;
4862: LD_INT 3
4864: PPUSH
4865: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4869: LD_EXP 43
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: PPUSH
4878: LD_INT 22
4880: PUSH
4881: LD_INT 6
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 30
4890: PUSH
4891: LD_INT 31
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PPUSH
4907: LD_EXP 43
4911: PUSH
4912: LD_INT 1
4914: ARRAY
4915: PPUSH
4916: CALL_OW 74
4920: PPUSH
4921: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4925: LD_EXP 43
4929: PUSH
4930: LD_INT 2
4932: ARRAY
4933: PPUSH
4934: LD_INT 211
4936: PPUSH
4937: LD_INT 107
4939: PPUSH
4940: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4944: LD_EXP 43
4948: PUSH
4949: LD_INT 2
4951: ARRAY
4952: PPUSH
4953: LD_INT 209
4955: PPUSH
4956: LD_INT 106
4958: PPUSH
4959: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4963: LD_EXP 43
4967: PUSH
4968: LD_INT 3
4970: ARRAY
4971: PPUSH
4972: LD_INT 209
4974: PPUSH
4975: LD_INT 103
4977: PPUSH
4978: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4982: LD_EXP 43
4986: PUSH
4987: LD_INT 3
4989: ARRAY
4990: PPUSH
4991: LD_INT 209
4993: PPUSH
4994: LD_INT 106
4996: PPUSH
4997: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5001: LD_EXP 43
5005: PUSH
5006: LD_INT 4
5008: ARRAY
5009: PPUSH
5010: LD_INT 227
5012: PPUSH
5013: LD_INT 117
5015: PPUSH
5016: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5020: LD_EXP 43
5024: PUSH
5025: LD_INT 4
5027: ARRAY
5028: PPUSH
5029: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5033: LD_INT 700
5035: PPUSH
5036: CALL_OW 67
// for i := 3 downto 2 do
5040: LD_ADDR_VAR 0 1
5044: PUSH
5045: DOUBLE
5046: LD_INT 3
5048: INC
5049: ST_TO_ADDR
5050: LD_INT 2
5052: PUSH
5053: FOR_DOWNTO
5054: IFFALSE 5221
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5056: LD_EXP 43
5060: PUSH
5061: LD_VAR 0 1
5065: ARRAY
5066: PPUSH
5067: LD_INT 200
5069: PPUSH
5070: LD_INT 91
5072: PPUSH
5073: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5077: LD_EXP 43
5081: PUSH
5082: LD_VAR 0 1
5086: ARRAY
5087: PPUSH
5088: LD_INT 210
5090: PPUSH
5091: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5095: LD_EXP 43
5099: PUSH
5100: LD_VAR 0 1
5104: ARRAY
5105: PPUSH
5106: LD_INT 224
5108: PPUSH
5109: LD_INT 93
5111: PPUSH
5112: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5116: LD_EXP 43
5120: PUSH
5121: LD_VAR 0 1
5125: ARRAY
5126: PPUSH
5127: LD_INT 210
5129: PPUSH
5130: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5134: LD_EXP 43
5138: PUSH
5139: LD_VAR 0 1
5143: ARRAY
5144: PPUSH
5145: LD_INT 239
5147: PPUSH
5148: LD_INT 123
5150: PPUSH
5151: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5155: LD_EXP 43
5159: PUSH
5160: LD_VAR 0 1
5164: ARRAY
5165: PPUSH
5166: LD_INT 210
5168: PPUSH
5169: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5173: LD_EXP 43
5177: PUSH
5178: LD_VAR 0 1
5182: ARRAY
5183: PPUSH
5184: LD_INT 212
5186: PPUSH
5187: LD_INT 105
5189: PPUSH
5190: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5194: LD_EXP 43
5198: PUSH
5199: LD_VAR 0 1
5203: ARRAY
5204: PPUSH
5205: LD_INT 700
5207: PPUSH
5208: CALL_OW 202
// wait ( 0 0$30 ) ;
5212: LD_INT 1050
5214: PPUSH
5215: CALL_OW 67
// end ;
5219: GO 5053
5221: POP
5222: POP
// until not activeGrishkoAI ;
5223: LD_EXP 10
5227: NOT
5228: IFFALSE 5033
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5230: LD_EXP 43
5234: PPUSH
5235: LD_INT 221
5237: PPUSH
5238: LD_INT 110
5240: PPUSH
5241: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5245: LD_EXP 43
5249: PPUSH
5250: LD_INT 228
5252: PPUSH
5253: LD_INT 115
5255: PPUSH
5256: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5260: LD_EXP 43
5264: PPUSH
5265: CALL_OW 200
// end ;
5269: PPOPN 1
5271: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5272: LD_EXP 12
5276: IFFALSE 5894
5278: GO 5280
5280: DISABLE
5281: LD_INT 0
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
// begin uc_side := 6 ;
5287: LD_ADDR_OWVAR 20
5291: PUSH
5292: LD_INT 6
5294: ST_TO_ADDR
// uc_nation := 3 ;
5295: LD_ADDR_OWVAR 21
5299: PUSH
5300: LD_INT 3
5302: ST_TO_ADDR
// for i := 1 to 3 do
5303: LD_ADDR_VAR 0 2
5307: PUSH
5308: DOUBLE
5309: LD_INT 1
5311: DEC
5312: ST_TO_ADDR
5313: LD_INT 3
5315: PUSH
5316: FOR_TO
5317: IFFALSE 5426
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5319: LD_INT 0
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: LD_INT 2
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_INT 4
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: LD_OWVAR 67
5343: ARRAY
5344: PPUSH
5345: CALL_OW 380
// un := CreateHuman ;
5349: LD_ADDR_VAR 0 1
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5359: LD_ADDR_EXP 44
5363: PUSH
5364: LD_EXP 44
5368: PUSH
5369: LD_VAR 0 1
5373: UNION
5374: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 1
5382: PPUSH
5383: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 11
5394: PPUSH
5395: LD_INT 0
5397: PPUSH
5398: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5402: LD_VAR 0 1
5406: PPUSH
5407: LD_INT 210
5409: PPUSH
5410: LD_INT 159
5412: PPUSH
5413: CALL_OW 111
// wait ( 0 0$2 ) ;
5417: LD_INT 70
5419: PPUSH
5420: CALL_OW 67
// end ;
5424: GO 5316
5426: POP
5427: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5428: LD_ADDR_VAR 0 4
5432: PUSH
5433: LD_INT 172
5435: PUSH
5436: LD_INT 76
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 150
5445: PUSH
5446: LD_INT 38
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 148
5455: PUSH
5456: LD_INT 9
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 165
5465: PUSH
5466: LD_INT 38
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 191
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 168
5491: PUSH
5492: LD_INT 42
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 166
5501: PUSH
5502: LD_INT 11
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 151
5511: PUSH
5512: LD_INT 12
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 221
5527: PUSH
5528: LD_INT 88
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 217
5537: PUSH
5538: LD_INT 64
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 232
5547: PUSH
5548: LD_INT 66
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 200
5557: PUSH
5558: LD_INT 56
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: LIST
5575: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5576: LD_INT 35
5578: PPUSH
5579: CALL_OW 67
// for i := 1 to patrol do
5583: LD_ADDR_VAR 0 2
5587: PUSH
5588: DOUBLE
5589: LD_INT 1
5591: DEC
5592: ST_TO_ADDR
5593: LD_VAR 0 4
5597: PUSH
5598: FOR_TO
5599: IFFALSE 5858
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5601: LD_EXP 44
5605: PUSH
5606: LD_VAR 0 2
5610: ARRAY
5611: PPUSH
5612: CALL_OW 256
5616: PUSH
5617: LD_INT 990
5619: LESS
5620: PUSH
5621: LD_EXP 44
5625: PUSH
5626: LD_VAR 0 2
5630: ARRAY
5631: PPUSH
5632: CALL_OW 110
5636: PUSH
5637: LD_INT 1
5639: EQUAL
5640: AND
5641: IFFALSE 5669
// begin spottedByPatrol := true ;
5643: LD_ADDR_EXP 7
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5651: LD_EXP 44
5655: PUSH
5656: LD_VAR 0 2
5660: ARRAY
5661: PPUSH
5662: LD_INT 2
5664: PPUSH
5665: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5669: LD_EXP 44
5673: PUSH
5674: LD_VAR 0 2
5678: ARRAY
5679: PPUSH
5680: CALL_OW 110
5684: PUSH
5685: LD_INT 2
5687: EQUAL
5688: IFFALSE 5756
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5690: LD_EXP 44
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PPUSH
5701: LD_INT 166
5703: PPUSH
5704: LD_INT 101
5706: PPUSH
5707: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5711: LD_EXP 44
5715: PUSH
5716: LD_VAR 0 2
5720: ARRAY
5721: PPUSH
5722: LD_INT 71
5724: PPUSH
5725: CALL_OW 296
5729: PUSH
5730: LD_INT 10
5732: LESS
5733: IFFALSE 5754
// russianAlert := [ russianPatrol [ i ] ] ;
5735: LD_ADDR_EXP 9
5739: PUSH
5740: LD_EXP 44
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PUSH
5751: EMPTY
5752: LIST
5753: ST_TO_ADDR
// continue ;
5754: GO 5598
// end ; if not HasTask ( russianPatrol [ i ] ) then
5756: LD_EXP 44
5760: PUSH
5761: LD_VAR 0 2
5765: ARRAY
5766: PPUSH
5767: CALL_OW 314
5771: NOT
5772: IFFALSE 5856
// for j in patrol [ i ] do
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_VAR 0 4
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: FOR_IN
5791: IFFALSE 5854
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5793: LD_EXP 44
5797: PUSH
5798: LD_VAR 0 2
5802: ARRAY
5803: PPUSH
5804: LD_INT 35
5806: PPUSH
5807: LD_INT 175
5809: PPUSH
5810: CALL_OW 12
5814: PPUSH
5815: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5819: LD_EXP 44
5823: PUSH
5824: LD_VAR 0 2
5828: ARRAY
5829: PPUSH
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 1
5837: ARRAY
5838: PPUSH
5839: LD_VAR 0 3
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PPUSH
5848: CALL_OW 174
// end ;
5852: GO 5790
5854: POP
5855: POP
// end ;
5856: GO 5598
5858: POP
5859: POP
// until not russianPatrol or russianAlert ;
5860: LD_EXP 44
5864: NOT
5865: PUSH
5866: LD_EXP 9
5870: OR
5871: IFFALSE 5576
// if russianPatrol then
5873: LD_EXP 44
5877: IFFALSE 5894
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5879: LD_EXP 44
5883: PPUSH
5884: LD_INT 161
5886: PPUSH
5887: LD_INT 107
5889: PPUSH
5890: CALL_OW 114
// end ;
5894: PPOPN 4
5896: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5897: LD_EXP 6
5901: PUSH
5902: LD_EXP 13
5906: NOT
5907: AND
5908: IFFALSE 6349
5910: GO 5912
5912: DISABLE
5913: LD_INT 0
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
5919: PPUSH
// begin enable ;
5920: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5921: LD_ADDR_VAR 0 2
5925: PUSH
5926: LD_EXP 45
5930: PPUSH
5931: LD_INT 21
5933: PUSH
5934: LD_INT 2
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 72
5945: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PPUSH
5961: CALL_OW 69
5965: ST_TO_ADDR
// for i in filter do
5966: LD_ADDR_VAR 0 1
5970: PUSH
5971: LD_VAR 0 2
5975: PUSH
5976: FOR_IN
5977: IFFALSE 6347
// begin tmp := IsDrivenBy ( i ) ;
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 311
5993: ST_TO_ADDR
// if not tmp then
5994: LD_VAR 0 3
5998: NOT
5999: IFFALSE 6003
// continue ;
6001: GO 5976
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 261
6012: PUSH
6013: LD_INT 90
6015: GREATER
6016: PUSH
6017: LD_VAR 0 1
6021: PPUSH
6022: CALL_OW 110
6026: PUSH
6027: LD_INT 2
6029: EQUAL
6030: AND
6031: IFFALSE 6047
// SetTag ( i , 0 ) else
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_INT 0
6040: PPUSH
6041: CALL_OW 109
6045: GO 6098
// if GetTag ( i ) = 2 then
6047: LD_VAR 0 1
6051: PPUSH
6052: CALL_OW 110
6056: PUSH
6057: LD_INT 2
6059: EQUAL
6060: IFFALSE 6098
// begin x := rand ( 1 , 2 ) ;
6062: LD_ADDR_VAR 0 5
6066: PUSH
6067: LD_INT 1
6069: PPUSH
6070: LD_INT 2
6072: PPUSH
6073: CALL_OW 12
6077: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6078: LD_VAR 0 1
6082: PPUSH
6083: LD_EXP 46
6087: PUSH
6088: LD_VAR 0 5
6092: ARRAY
6093: PPUSH
6094: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 256
6107: PUSH
6108: LD_INT 600
6110: GREATEREQUAL
6111: PUSH
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 110
6121: NOT
6122: AND
6123: IFFALSE 6149
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_VAR 0 4
6134: PPUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: CALL_OW 74
6144: PPUSH
6145: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6149: LD_VAR 0 1
6153: PPUSH
6154: CALL_OW 256
6158: PUSH
6159: LD_INT 600
6161: LESS
6162: PUSH
6163: LD_VAR 0 1
6167: PPUSH
6168: CALL_OW 110
6172: NOT
6173: AND
6174: IFFALSE 6203
// begin SetTag ( i , 1 ) ;
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6188: LD_VAR 0 1
6192: PPUSH
6193: LD_INT 62
6195: PPUSH
6196: LD_INT 22
6198: PPUSH
6199: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6203: LD_VAR 0 1
6207: PPUSH
6208: CALL_OW 110
6212: PUSH
6213: LD_INT 1
6215: EQUAL
6216: PUSH
6217: LD_VAR 0 1
6221: PPUSH
6222: LD_INT 62
6224: PPUSH
6225: LD_INT 22
6227: PPUSH
6228: CALL_OW 297
6232: PUSH
6233: LD_INT 6
6235: LESS
6236: AND
6237: PUSH
6238: LD_VAR 0 3
6242: AND
6243: IFFALSE 6345
// begin ComExitVehicle ( tmp ) ;
6245: LD_VAR 0 3
6249: PPUSH
6250: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_VAR 0 1
6263: PPUSH
6264: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6268: LD_INT 35
6270: PPUSH
6271: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6275: LD_VAR 0 1
6279: PPUSH
6280: CALL_OW 256
6284: PUSH
6285: LD_INT 1000
6287: EQUAL
6288: IFFALSE 6268
// ComEnterUnit ( tmp , i ) ;
6290: LD_VAR 0 3
6294: PPUSH
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6304: LD_VAR 0 1
6308: PPUSH
6309: CALL_OW 261
6313: PUSH
6314: LD_INT 90
6316: LESSEQUAL
6317: IFFALSE 6333
// SetTag ( i , 2 ) else
6319: LD_VAR 0 1
6323: PPUSH
6324: LD_INT 2
6326: PPUSH
6327: CALL_OW 109
6331: GO 6345
// SetTag ( i , 0 ) ;
6333: LD_VAR 0 1
6337: PPUSH
6338: LD_INT 0
6340: PPUSH
6341: CALL_OW 109
// end ; end ;
6345: GO 5976
6347: POP
6348: POP
// end ;
6349: PPOPN 5
6351: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6352: LD_EXP 20
6356: IFFALSE 6558
6358: GO 6360
6360: DISABLE
6361: LD_INT 0
6363: PPUSH
6364: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6365: LD_EXP 46
6369: PPUSH
6370: LD_INT 79
6372: PPUSH
6373: LD_INT 155
6375: PPUSH
6376: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6380: LD_EXP 46
6384: PPUSH
6385: LD_INT 16
6387: PPUSH
6388: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6392: LD_ADDR_VAR 0 2
6396: PUSH
6397: LD_EXP 45
6401: PPUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PPUSH
6408: CALL_OW 72
6412: ST_TO_ADDR
// for i in tmp do
6413: LD_ADDR_VAR 0 1
6417: PUSH
6418: LD_VAR 0 2
6422: PUSH
6423: FOR_IN
6424: IFFALSE 6458
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6426: LD_VAR 0 1
6430: PPUSH
6431: LD_INT 123
6433: PPUSH
6434: LD_INT 60
6436: PPUSH
6437: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6441: LD_VAR 0 1
6445: PPUSH
6446: LD_INT 153
6448: PPUSH
6449: LD_INT 103
6451: PPUSH
6452: CALL_OW 174
// end ;
6456: GO 6423
6458: POP
6459: POP
// repeat wait ( 0 0$1 ) ;
6460: LD_INT 35
6462: PPUSH
6463: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6467: LD_ADDR_VAR 0 2
6471: PUSH
6472: LD_EXP 45
6476: PPUSH
6477: LD_INT 50
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: ST_TO_ADDR
// for i in tmp do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_VAR 0 2
6497: PUSH
6498: FOR_IN
6499: IFFALSE 6549
// if not HasTask ( i ) then
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 314
6510: NOT
6511: IFFALSE 6547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6513: LD_VAR 0 1
6517: PPUSH
6518: LD_INT 81
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PPUSH
6533: LD_VAR 0 1
6537: PPUSH
6538: CALL_OW 74
6542: PPUSH
6543: CALL_OW 115
6547: GO 6498
6549: POP
6550: POP
6551: LD_VAR 0 2
6555: NOT
6556: IFFALSE 6460
// end ;
6558: PPOPN 2
6560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6561: LD_INT 22
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 32
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6668
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
// begin enable ;
6597: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6598: LD_ADDR_VAR 0 1
6602: PUSH
6603: LD_INT 22
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 32
6615: PUSH
6616: LD_INT 1
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 69
6631: PUSH
6632: FOR_IN
6633: IFFALSE 6666
// if GetFuel ( i ) < 1 then
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 261
6644: PUSH
6645: LD_INT 1
6647: LESS
6648: IFFALSE 6664
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 311
6659: PPUSH
6660: CALL_OW 121
6664: GO 6632
6666: POP
6667: POP
// end ; end_of_file
6668: PPOPN 1
6670: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6671: LD_INT 0
6673: PPUSH
6674: PPUSH
6675: PPUSH
// SetBName ( omikron , omikron ) ;
6676: LD_INT 64
6678: PPUSH
6679: LD_STRING omikron
6681: PPUSH
6682: CALL_OW 500
// uc_side := 4 ;
6686: LD_ADDR_OWVAR 20
6690: PUSH
6691: LD_INT 4
6693: ST_TO_ADDR
// uc_nation := 1 ;
6694: LD_ADDR_OWVAR 21
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// omicronSquad := [ ] ;
6702: LD_ADDR_EXP 48
6706: PUSH
6707: EMPTY
6708: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_INT 22
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 30
6729: PUSH
6730: LD_INT 32
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 30
6739: PUSH
6740: LD_INT 31
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PPUSH
6756: CALL_OW 69
6760: PUSH
6761: FOR_IN
6762: IFFALSE 6819
// begin PrepareHuman ( false , 1 , 1 ) ;
6764: LD_INT 0
6766: PPUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: CALL_OW 380
// un := CreateHuman ;
6777: LD_ADDR_VAR 0 3
6781: PUSH
6782: CALL_OW 44
6786: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6787: LD_ADDR_EXP 48
6791: PUSH
6792: LD_EXP 48
6796: PUSH
6797: LD_VAR 0 3
6801: UNION
6802: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_VAR 0 2
6812: PPUSH
6813: CALL_OW 52
// end ;
6817: GO 6761
6819: POP
6820: POP
// for i := 1 to 3 do
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: DOUBLE
6827: LD_INT 1
6829: DEC
6830: ST_TO_ADDR
6831: LD_INT 3
6833: PUSH
6834: FOR_TO
6835: IFFALSE 6890
// begin PrepareHuman ( false , 2 , 2 ) ;
6837: LD_INT 0
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 2
6845: PPUSH
6846: CALL_OW 380
// un := CreateHuman ;
6850: LD_ADDR_VAR 0 3
6854: PUSH
6855: CALL_OW 44
6859: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6860: LD_ADDR_EXP 48
6864: PUSH
6865: LD_EXP 48
6869: PUSH
6870: LD_VAR 0 3
6874: UNION
6875: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6876: LD_VAR 0 3
6880: PPUSH
6881: LD_INT 64
6883: PPUSH
6884: CALL_OW 52
// end ;
6888: GO 6834
6890: POP
6891: POP
// for i := 1 to 2 do
6892: LD_ADDR_VAR 0 2
6896: PUSH
6897: DOUBLE
6898: LD_INT 1
6900: DEC
6901: ST_TO_ADDR
6902: LD_INT 2
6904: PUSH
6905: FOR_TO
6906: IFFALSE 7045
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6908: LD_INT 4
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: LD_INT 2
6916: PPUSH
6917: LD_INT 2
6919: PPUSH
6920: LD_INT 1
6922: PPUSH
6923: LD_INT 3
6925: PPUSH
6926: LD_INT 100
6928: PPUSH
6929: CALL 329 0 7
// un := CreateVehicle ;
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: CALL_OW 45
6942: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6943: LD_ADDR_EXP 48
6947: PUSH
6948: LD_EXP 48
6952: PUSH
6953: LD_VAR 0 3
6957: UNION
6958: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6959: LD_VAR 0 3
6963: PPUSH
6964: LD_INT 28
6966: PPUSH
6967: LD_INT 37
6969: PPUSH
6970: LD_INT 6
6972: PPUSH
6973: LD_INT 0
6975: PPUSH
6976: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 3
6985: PPUSH
6986: LD_INT 2
6988: PPUSH
6989: CALL_OW 380
// un := CreateHuman ;
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: CALL_OW 44
7002: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7003: LD_ADDR_EXP 48
7007: PUSH
7008: LD_EXP 48
7012: PUSH
7013: LD_VAR 0 3
7017: UNION
7018: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7019: LD_VAR 0 3
7023: PPUSH
7024: LD_EXP 48
7028: PUSH
7029: LD_EXP 48
7033: PUSH
7034: LD_INT 1
7036: MINUS
7037: ARRAY
7038: PPUSH
7039: CALL_OW 52
// end ;
7043: GO 6905
7045: POP
7046: POP
// end ;
7047: LD_VAR 0 1
7051: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7052: LD_INT 0
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
// uc_side := 4 ;
7058: LD_ADDR_OWVAR 20
7062: PUSH
7063: LD_INT 4
7065: ST_TO_ADDR
// uc_nation := 1 ;
7066: LD_ADDR_OWVAR 21
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// tmp := [ ] ;
7074: LD_ADDR_VAR 0 4
7078: PUSH
7079: EMPTY
7080: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7081: LD_INT 4
7083: PPUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_INT 2
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: LD_INT 1
7095: PPUSH
7096: LD_INT 4
7098: PPUSH
7099: LD_INT 77
7101: PPUSH
7102: CALL 329 0 7
// un := CreateVehicle ;
7106: LD_ADDR_VAR 0 3
7110: PUSH
7111: CALL_OW 45
7115: ST_TO_ADDR
// tmp := tmp union un ;
7116: LD_ADDR_VAR 0 4
7120: PUSH
7121: LD_VAR 0 4
7125: PUSH
7126: LD_VAR 0 3
7130: UNION
7131: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 2
7139: PPUSH
7140: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_INT 106
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7162: LD_INT 0
7164: PPUSH
7165: LD_INT 3
7167: PPUSH
7168: LD_INT 2
7170: PPUSH
7171: CALL_OW 380
// un := CreateHuman ;
7175: LD_ADDR_VAR 0 3
7179: PUSH
7180: CALL_OW 44
7184: ST_TO_ADDR
// tmp := tmp union un ;
7185: LD_ADDR_VAR 0 4
7189: PUSH
7190: LD_VAR 0 4
7194: PUSH
7195: LD_VAR 0 3
7199: UNION
7200: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7201: LD_VAR 0 3
7205: PPUSH
7206: LD_VAR 0 4
7210: PUSH
7211: LD_VAR 0 4
7215: PUSH
7216: LD_INT 1
7218: MINUS
7219: ARRAY
7220: PPUSH
7221: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 109
7232: PPUSH
7233: LD_INT 9
7235: PPUSH
7236: CALL_OW 111
// wait ( 0 0$1 ) ;
7240: LD_INT 35
7242: PPUSH
7243: CALL_OW 67
// for i := 1 to 2 do
7247: LD_ADDR_VAR 0 2
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_INT 2
7259: PUSH
7260: FOR_TO
7261: IFFALSE 7325
// begin PrepareHuman ( false , 1 , 2 ) ;
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 1
7268: PPUSH
7269: LD_INT 2
7271: PPUSH
7272: CALL_OW 380
// un := CreateHuman ;
7276: LD_ADDR_VAR 0 3
7280: PUSH
7281: CALL_OW 44
7285: ST_TO_ADDR
// tmp := tmp union un ;
7286: LD_ADDR_VAR 0 4
7290: PUSH
7291: LD_VAR 0 4
7295: PUSH
7296: LD_VAR 0 3
7300: UNION
7301: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7302: LD_VAR 0 3
7306: PPUSH
7307: LD_INT 105
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: LD_INT 2
7315: PPUSH
7316: LD_INT 0
7318: PPUSH
7319: CALL_OW 50
// end ;
7323: GO 7260
7325: POP
7326: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7327: LD_VAR 0 4
7331: PPUSH
7332: LD_INT 26
7334: PPUSH
7335: LD_INT 35
7337: PPUSH
7338: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7342: LD_INT 35
7344: PPUSH
7345: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7349: LD_VAR 0 4
7353: PPUSH
7354: LD_INT 50
7356: PUSH
7357: EMPTY
7358: LIST
7359: PPUSH
7360: CALL_OW 72
7364: NOT
7365: IFFALSE 7369
// exit ;
7367: GO 7496
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7369: LD_VAR 0 4
7373: PPUSH
7374: LD_INT 91
7376: PUSH
7377: LD_INT 64
7379: PUSH
7380: LD_INT 12
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 72
7392: PUSH
7393: LD_VAR 0 4
7397: EQUAL
7398: IFFALSE 7342
// omicronSquad := omicronSquad union tmp ;
7400: LD_ADDR_EXP 48
7404: PUSH
7405: LD_EXP 48
7409: PUSH
7410: LD_VAR 0 4
7414: UNION
7415: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7416: LD_ADDR_VAR 0 2
7420: PUSH
7421: LD_VAR 0 4
7425: PPUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 72
7440: PUSH
7441: FOR_IN
7442: IFFALSE 7494
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7444: LD_VAR 0 2
7448: PPUSH
7449: LD_INT 22
7451: PUSH
7452: LD_INT 4
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: LD_INT 30
7461: PUSH
7462: LD_INT 4
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 69
7477: PPUSH
7478: LD_VAR 0 2
7482: PPUSH
7483: CALL_OW 74
7487: PPUSH
7488: CALL_OW 120
7492: GO 7441
7494: POP
7495: POP
// end ;
7496: LD_VAR 0 1
7500: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7501: LD_EXP 13
7505: NOT
7506: IFFALSE 8077
7508: GO 7510
7510: DISABLE
7511: LD_INT 0
7513: PPUSH
7514: PPUSH
7515: PPUSH
7516: PPUSH
// begin enable ;
7517: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7518: LD_ADDR_VAR 0 2
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 21
7535: PUSH
7536: LD_INT 3
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 3
7545: PUSH
7546: LD_INT 24
7548: PUSH
7549: LD_INT 1000
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 69
7569: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: LD_EXP 48
7579: PPUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 2
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 72
7594: ST_TO_ADDR
// if filter and tmp then
7595: LD_VAR 0 2
7599: PUSH
7600: LD_VAR 0 3
7604: AND
7605: IFFALSE 7678
// begin for i in tmp do
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_VAR 0 3
7616: PUSH
7617: FOR_IN
7618: IFFALSE 7674
// if IsInUnit ( i ) then
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 310
7629: IFFALSE 7642
// ComExitBuilding ( i ) else
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 122
7640: GO 7672
// if not HasTask ( i ) then
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 314
7651: NOT
7652: IFFALSE 7672
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7654: LD_VAR 0 1
7658: PPUSH
7659: LD_VAR 0 2
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: CALL_OW 130
7672: GO 7617
7674: POP
7675: POP
// end else
7676: GO 7749
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7678: LD_VAR 0 3
7682: PPUSH
7683: LD_INT 3
7685: PUSH
7686: LD_INT 54
7688: PUSH
7689: EMPTY
7690: LIST
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 72
7700: IFFALSE 7749
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7702: LD_ADDR_VAR 0 1
7706: PUSH
7707: LD_VAR 0 3
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 54
7717: PUSH
7718: EMPTY
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 72
7729: PUSH
7730: FOR_IN
7731: IFFALSE 7747
// ComEnterUnit ( i , omikron ) ;
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_INT 64
7740: PPUSH
7741: CALL_OW 120
7745: GO 7730
7747: POP
7748: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7749: LD_ADDR_VAR 0 2
7753: PUSH
7754: LD_EXP 48
7758: PPUSH
7759: LD_INT 21
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PPUSH
7769: CALL_OW 72
7773: ST_TO_ADDR
// if not filter then
7774: LD_VAR 0 2
7778: NOT
7779: IFFALSE 7783
// exit ;
7781: GO 8077
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_INT 13
7790: PPUSH
7791: LD_INT 81
7793: PUSH
7794: LD_INT 4
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 70
7805: ST_TO_ADDR
// if enemy then
7806: LD_VAR 0 4
7810: IFFALSE 8077
// begin for i in filter do
7812: LD_ADDR_VAR 0 1
7816: PUSH
7817: LD_VAR 0 2
7821: PUSH
7822: FOR_IN
7823: IFFALSE 8075
// begin tmp := IsDrivenBy ( i ) ;
7825: LD_ADDR_VAR 0 3
7829: PUSH
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 311
7839: ST_TO_ADDR
// if not tmp then
7840: LD_VAR 0 3
7844: NOT
7845: IFFALSE 7849
// continue ;
7847: GO 7822
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 256
7858: PUSH
7859: LD_INT 600
7861: GREATEREQUAL
7862: PUSH
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 110
7872: PUSH
7873: LD_INT 1
7875: NONEQUAL
7876: AND
7877: IFFALSE 7903
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7879: LD_VAR 0 1
7883: PPUSH
7884: LD_VAR 0 4
7888: PPUSH
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 74
7898: PPUSH
7899: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL_OW 256
7912: PUSH
7913: LD_INT 600
7915: LESS
7916: PUSH
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 110
7926: PUSH
7927: LD_INT 1
7929: NONEQUAL
7930: AND
7931: IFFALSE 7960
// begin SetTag ( i , 1 ) ;
7933: LD_VAR 0 1
7937: PPUSH
7938: LD_INT 1
7940: PPUSH
7941: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7945: LD_VAR 0 1
7949: PPUSH
7950: LD_INT 27
7952: PPUSH
7953: LD_INT 35
7955: PPUSH
7956: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7960: LD_VAR 0 1
7964: PPUSH
7965: CALL_OW 110
7969: PUSH
7970: LD_INT 1
7972: EQUAL
7973: PUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 27
7981: PPUSH
7982: LD_INT 35
7984: PPUSH
7985: CALL_OW 297
7989: PUSH
7990: LD_INT 6
7992: LESS
7993: AND
7994: PUSH
7995: LD_VAR 0 3
7999: AND
8000: IFFALSE 8073
// begin ComExitVehicle ( tmp ) ;
8002: LD_VAR 0 3
8006: PPUSH
8007: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8011: LD_VAR 0 3
8015: PPUSH
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8025: LD_INT 35
8027: PPUSH
8028: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8032: LD_VAR 0 1
8036: PPUSH
8037: CALL_OW 256
8041: PUSH
8042: LD_INT 1000
8044: EQUAL
8045: IFFALSE 8025
// ComEnterUnit ( tmp , i ) ;
8047: LD_VAR 0 3
8051: PPUSH
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL_OW 120
// SetTag ( i , 0 ) ;
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_INT 0
8068: PPUSH
8069: CALL_OW 109
// end ; end ;
8073: GO 7822
8075: POP
8076: POP
// end ; end ;
8077: PPOPN 4
8079: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8080: LD_EXP 13
8084: IFFALSE 8228
8086: GO 8088
8088: DISABLE
8089: LD_INT 0
8091: PPUSH
8092: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_EXP 48
8102: PPUSH
8103: LD_INT 21
8105: PUSH
8106: LD_INT 1
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 50
8115: PUSH
8116: EMPTY
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 72
8127: ST_TO_ADDR
// if not tmp then
8128: LD_VAR 0 2
8132: NOT
8133: IFFALSE 8137
// exit ;
8135: GO 8228
// repeat wait ( 0 0$1 ) ;
8137: LD_INT 35
8139: PPUSH
8140: CALL_OW 67
// for i in tmp do
8144: LD_ADDR_VAR 0 1
8148: PUSH
8149: LD_VAR 0 2
8153: PUSH
8154: FOR_IN
8155: IFFALSE 8219
// begin ComExit ( i ) ;
8157: LD_VAR 0 1
8161: PPUSH
8162: CALL 767 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8166: LD_VAR 0 1
8170: PPUSH
8171: LD_INT 14
8173: PPUSH
8174: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8178: LD_VAR 0 1
8182: PPUSH
8183: LD_INT 14
8185: PPUSH
8186: CALL_OW 308
8190: IFFALSE 8217
// begin tmp := tmp diff i ;
8192: LD_ADDR_VAR 0 2
8196: PUSH
8197: LD_VAR 0 2
8201: PUSH
8202: LD_VAR 0 1
8206: DIFF
8207: ST_TO_ADDR
// RemoveUnit ( i ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 64
// end ; end ;
8217: GO 8154
8219: POP
8220: POP
// until not tmp ;
8221: LD_VAR 0 2
8225: NOT
8226: IFFALSE 8137
// end ; end_of_file
8228: PPOPN 2
8230: END
// export function Action ; var i , un , veh , tmp ; begin
8231: LD_INT 0
8233: PPUSH
8234: PPUSH
8235: PPUSH
8236: PPUSH
8237: PPUSH
// InGameOn ;
8238: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8242: LD_INT 179
8244: PPUSH
8245: LD_INT 5
8247: PPUSH
8248: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8252: LD_ADDR_VAR 0 4
8256: PUSH
8257: LD_INT 2
8259: PPUSH
8260: LD_INT 2
8262: PPUSH
8263: LD_INT 12
8265: PPUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 1
8271: PPUSH
8272: LD_INT 24
8274: PPUSH
8275: LD_INT 33
8277: PPUSH
8278: CALL 329 0 7
8282: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8283: LD_VAR 0 4
8287: PPUSH
8288: LD_INT 2
8290: PPUSH
8291: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8295: LD_VAR 0 4
8299: PPUSH
8300: LD_INT 178
8302: PPUSH
8303: LD_INT 2
8305: PPUSH
8306: LD_INT 0
8308: PPUSH
8309: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8313: LD_EXP 23
8317: PPUSH
8318: LD_VAR 0 4
8322: PPUSH
8323: CALL_OW 52
// if Kamil then
8327: LD_EXP 27
8331: IFFALSE 8366
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8333: LD_EXP 27
8337: PPUSH
8338: LD_INT 207
8340: PPUSH
8341: LD_INT 37
8343: PPUSH
8344: LD_INT 0
8346: PPUSH
8347: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8351: LD_EXP 27
8355: PPUSH
8356: LD_INT 211
8358: PPUSH
8359: LD_INT 38
8361: PPUSH
8362: CALL_OW 118
// end ; if Sophia then
8366: LD_EXP 29
8370: IFFALSE 8405
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8372: LD_EXP 29
8376: PPUSH
8377: LD_INT 209
8379: PPUSH
8380: LD_INT 40
8382: PPUSH
8383: LD_INT 0
8385: PPUSH
8386: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8390: LD_EXP 29
8394: PPUSH
8395: LD_INT 211
8397: PPUSH
8398: LD_INT 38
8400: PPUSH
8401: CALL_OW 118
// end ; if Givi then
8405: LD_EXP 24
8409: IFFALSE 8444
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8411: LD_EXP 24
8415: PPUSH
8416: LD_INT 201
8418: PPUSH
8419: LD_INT 34
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8429: LD_EXP 24
8433: PPUSH
8434: LD_INT 206
8436: PPUSH
8437: LD_INT 36
8439: PPUSH
8440: CALL_OW 118
// end ; if Ibrahim then
8444: LD_EXP 26
8448: IFFALSE 8483
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8450: LD_EXP 26
8454: PPUSH
8455: LD_INT 202
8457: PPUSH
8458: LD_INT 39
8460: PPUSH
8461: LD_INT 0
8463: PPUSH
8464: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8468: LD_EXP 26
8472: PPUSH
8473: LD_INT 206
8475: PPUSH
8476: LD_INT 36
8478: PPUSH
8479: CALL_OW 118
// end ; if Markov then
8483: LD_EXP 30
8487: IFFALSE 8574
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: LD_INT 2
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: LD_INT 13
8502: PPUSH
8503: LD_INT 1
8505: PPUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_INT 25
8511: PPUSH
8512: LD_INT 80
8514: PUSH
8515: LD_INT 20
8517: PUSH
8518: LD_OWVAR 67
8522: MUL
8523: MINUS
8524: PPUSH
8525: CALL 329 0 7
8529: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8530: LD_VAR 0 4
8534: PPUSH
8535: LD_INT 2
8537: PPUSH
8538: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 197
8549: PPUSH
8550: LD_INT 35
8552: PPUSH
8553: LD_INT 0
8555: PPUSH
8556: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8560: LD_EXP 30
8564: PPUSH
8565: LD_VAR 0 4
8569: PPUSH
8570: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8574: LD_ADDR_VAR 0 5
8578: PUSH
8579: LD_EXP 28
8583: PUSH
8584: LD_EXP 34
8588: UNION
8589: ST_TO_ADDR
// for i in tmp do
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_VAR 0 5
8599: PUSH
8600: FOR_IN
8601: IFFALSE 8635
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8603: LD_VAR 0 2
8607: PPUSH
8608: LD_INT 203
8610: PPUSH
8611: LD_INT 41
8613: PPUSH
8614: LD_INT 6
8616: PPUSH
8617: LD_INT 0
8619: PPUSH
8620: CALL_OW 50
// ComHold ( i ) ;
8624: LD_VAR 0 2
8628: PPUSH
8629: CALL_OW 140
// end ;
8633: GO 8600
8635: POP
8636: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8637: LD_INT 22
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 25
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 69
8665: NOT
8666: IFFALSE 8680
// SetClass ( Heike , 2 ) ;
8668: LD_EXP 23
8672: PPUSH
8673: LD_INT 2
8675: PPUSH
8676: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8680: LD_EXP 23
8684: PPUSH
8685: LD_INT 183
8687: PPUSH
8688: LD_INT 12
8690: PPUSH
8691: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8695: LD_EXP 23
8699: PPUSH
8700: LD_INT 188
8702: PPUSH
8703: LD_INT 20
8705: PPUSH
8706: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8710: LD_EXP 23
8714: PPUSH
8715: LD_INT 191
8717: PPUSH
8718: LD_INT 25
8720: PPUSH
8721: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8725: LD_EXP 23
8729: PPUSH
8730: LD_INT 203
8732: PPUSH
8733: LD_INT 29
8735: PPUSH
8736: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8740: LD_EXP 23
8744: PPUSH
8745: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8749: LD_INT 35
8751: PPUSH
8752: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8756: LD_EXP 23
8760: PPUSH
8761: CALL_OW 310
8765: NOT
8766: IFFALSE 8749
// CenterOnUnits ( Heike ) ;
8768: LD_EXP 23
8772: PPUSH
8773: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8777: LD_ADDR_VAR 0 5
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_EXP 23
8815: PUSH
8816: LD_EXP 30
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: DIFF
8825: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8826: LD_VAR 0 5
8830: PPUSH
8831: LD_EXP 23
8835: PPUSH
8836: CALL_OW 119
// if Givi then
8840: LD_EXP 24
8844: IFFALSE 8862
// ComTurnUnit ( Heike , Givi ) else
8846: LD_EXP 23
8850: PPUSH
8851: LD_EXP 24
8855: PPUSH
8856: CALL_OW 119
8860: GO 8880
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8862: LD_EXP 23
8866: PPUSH
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 1
8874: ARRAY
8875: PPUSH
8876: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8880: LD_EXP 23
8884: PPUSH
8885: LD_STRING DH-Start-1
8887: PPUSH
8888: CALL_OW 88
// if Givi then
8892: LD_EXP 24
8896: IFFALSE 8943
// begin Say ( Givi , DG-Start-2 ) ;
8898: LD_EXP 24
8902: PPUSH
8903: LD_STRING DG-Start-2
8905: PPUSH
8906: CALL_OW 88
// if not Mike then
8910: LD_EXP 25
8914: NOT
8915: IFFALSE 8941
// begin Say ( Givi , DG-Start-b-3 ) ;
8917: LD_EXP 24
8921: PPUSH
8922: LD_STRING DG-Start-b-3
8924: PPUSH
8925: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8929: LD_EXP 23
8933: PPUSH
8934: LD_STRING DH-Start-b-4
8936: PPUSH
8937: CALL_OW 88
// end ; end else
8941: GO 9008
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8943: LD_EXP 34
8947: PPUSH
8948: LD_INT 26
8950: PUSH
8951: LD_INT 1
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 72
8962: PUSH
8963: LD_INT 1
8965: ARRAY
8966: PPUSH
8967: LD_STRING DArm-Start-a-2
8969: PPUSH
8970: CALL_OW 88
8974: NOT
8975: IFFALSE 9008
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8977: LD_EXP 34
8981: PPUSH
8982: LD_INT 26
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 72
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PPUSH
9001: LD_STRING DArf-Start-a-2
9003: PPUSH
9004: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9008: LD_EXP 23
9012: PPUSH
9013: LD_INT 211
9015: PPUSH
9016: LD_INT 38
9018: PPUSH
9019: CALL_OW 118
// wait ( 0 0$1 ) ;
9023: LD_INT 35
9025: PPUSH
9026: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9030: LD_EXP 23
9034: PPUSH
9035: LD_STRING DH-Start-3
9037: PPUSH
9038: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9042: LD_EXP 23
9046: PPUSH
9047: LD_STRING DH-Start-4
9049: PPUSH
9050: CALL_OW 88
// InGameOff ;
9054: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9058: LD_STRING Prepare
9060: PPUSH
9061: CALL_OW 337
// SaveForQuickRestart ;
9065: CALL_OW 22
// wait ( 0 0$30 ) ;
9069: LD_INT 1050
9071: PPUSH
9072: CALL_OW 67
// if not Aviradze then
9076: LD_EXP 33
9080: NOT
9081: IFFALSE 9085
// exit ;
9083: GO 9289
// SetDir ( Aviradze , 4 ) ;
9085: LD_EXP 33
9089: PPUSH
9090: LD_INT 4
9092: PPUSH
9093: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9097: LD_EXP 33
9101: PPUSH
9102: LD_INT 225
9104: PPUSH
9105: LD_INT 33
9107: PPUSH
9108: LD_INT 0
9110: PPUSH
9111: CALL_OW 48
// for i := 1 to 2 do
9115: LD_ADDR_VAR 0 2
9119: PUSH
9120: DOUBLE
9121: LD_INT 1
9123: DEC
9124: ST_TO_ADDR
9125: LD_INT 2
9127: PUSH
9128: FOR_TO
9129: IFFALSE 9260
// begin uc_side := 2 ;
9131: LD_ADDR_OWVAR 20
9135: PUSH
9136: LD_INT 2
9138: ST_TO_ADDR
// uc_nation := 0 ;
9139: LD_ADDR_OWVAR 21
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9147: LD_INT 0
9149: PPUSH
9150: LD_INT 12
9152: PPUSH
9153: LD_INT 1
9155: PPUSH
9156: CALL_OW 380
// hc_gallery :=  ;
9160: LD_ADDR_OWVAR 33
9164: PUSH
9165: LD_STRING 
9167: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9168: LD_ADDR_OWVAR 26
9172: PUSH
9173: LD_STRING Artudito
9175: PUSH
9176: LD_STRING Textur
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_VAR 0 2
9187: ARRAY
9188: ST_TO_ADDR
// un := CreateHuman ;
9189: LD_ADDR_VAR 0 3
9193: PUSH
9194: CALL_OW 44
9198: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9199: LD_VAR 0 3
9203: PPUSH
9204: LD_INT 224
9206: PUSH
9207: LD_INT 226
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: LD_VAR 0 2
9218: ARRAY
9219: PPUSH
9220: LD_INT 31
9222: PUSH
9223: LD_INT 35
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_VAR 0 2
9234: ARRAY
9235: PPUSH
9236: LD_INT 0
9238: PPUSH
9239: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9243: LD_VAR 0 3
9247: PPUSH
9248: LD_INT 215
9250: PPUSH
9251: LD_INT 36
9253: PPUSH
9254: CALL_OW 111
// end ;
9258: GO 9128
9260: POP
9261: POP
// hc_name :=  ;
9262: LD_ADDR_OWVAR 26
9266: PUSH
9267: LD_STRING 
9269: ST_TO_ADDR
// InitHc ;
9270: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9274: LD_EXP 33
9278: PPUSH
9279: LD_INT 215
9281: PPUSH
9282: LD_INT 36
9284: PPUSH
9285: CALL_OW 111
// end ;
9289: LD_VAR 0 1
9293: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9294: LD_EXP 3
9298: IFFALSE 10607
9300: GO 9302
9302: DISABLE
9303: LD_INT 0
9305: PPUSH
9306: PPUSH
9307: PPUSH
// begin DialogueOn ;
9308: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9312: LD_EXP 23
9316: PPUSH
9317: LD_STRING DH-base-1
9319: PPUSH
9320: CALL_OW 88
// if Markov then
9324: LD_EXP 30
9328: IFFALSE 9380
// begin Say ( Markov , DMar-base-2 ) ;
9330: LD_EXP 30
9334: PPUSH
9335: LD_STRING DMar-base-2
9337: PPUSH
9338: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9342: LD_EXP 30
9346: PPUSH
9347: LD_STRING DMar-base-3
9349: PPUSH
9350: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9354: LD_EXP 23
9358: PPUSH
9359: LD_STRING DH-base-4
9361: PPUSH
9362: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9366: LD_EXP 30
9370: PPUSH
9371: LD_STRING DMar-base-5
9373: PPUSH
9374: CALL_OW 88
// end else
9378: GO 9457
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9380: LD_EXP 34
9384: PPUSH
9385: LD_INT 26
9387: PUSH
9388: LD_INT 1
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 72
9399: PUSH
9400: LD_INT 1
9402: ARRAY
9403: PPUSH
9404: LD_STRING DArm-base-a-2
9406: PPUSH
9407: CALL_OW 88
9411: NOT
9412: IFFALSE 9445
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9414: LD_EXP 34
9418: PPUSH
9419: LD_INT 26
9421: PUSH
9422: LD_INT 2
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 72
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: PPUSH
9438: LD_STRING DArf-base-a-2
9440: PPUSH
9441: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9445: LD_EXP 23
9449: PPUSH
9450: LD_STRING DH-base-a-3
9452: PPUSH
9453: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9457: LD_EXP 33
9461: PPUSH
9462: LD_STRING DA-base-6
9464: PPUSH
9465: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9469: LD_EXP 33
9473: PPUSH
9474: LD_STRING DA-base-7
9476: PPUSH
9477: CALL_OW 88
// DialogueOff ;
9481: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9485: LD_STRING Flamethrower
9487: PPUSH
9488: CALL_OW 337
// wait ( 2 2$00 ) ;
9492: LD_INT 4200
9494: PPUSH
9495: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9499: LD_EXP 32
9503: PUSH
9504: LD_EXP 25
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PPUSH
9513: LD_INT 203
9515: PPUSH
9516: LD_INT 37
9518: PPUSH
9519: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9523: LD_INT 22
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 92
9535: PUSH
9536: LD_INT 203
9538: PUSH
9539: LD_INT 37
9541: PUSH
9542: LD_INT 10
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 69
9559: NOT
9560: IFFALSE 9600
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9562: LD_EXP 32
9566: PUSH
9567: LD_EXP 25
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PPUSH
9576: LD_EXP 23
9580: PPUSH
9581: CALL_OW 250
9585: PPUSH
9586: LD_EXP 23
9590: PPUSH
9591: CALL_OW 251
9595: PPUSH
9596: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9600: LD_INT 35
9602: PPUSH
9603: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9607: LD_INT 2
9609: PPUSH
9610: LD_EXP 32
9614: PPUSH
9615: CALL_OW 292
9619: PUSH
9620: LD_EXP 32
9624: PPUSH
9625: LD_EXP 23
9629: PPUSH
9630: CALL_OW 296
9634: PUSH
9635: LD_INT 8
9637: LESS
9638: PUSH
9639: LD_EXP 32
9643: PPUSH
9644: LD_INT 22
9646: PUSH
9647: LD_INT 2
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 69
9672: PPUSH
9673: LD_EXP 32
9677: PPUSH
9678: CALL_OW 74
9682: PPUSH
9683: CALL_OW 296
9687: PUSH
9688: LD_INT 7
9690: LESS
9691: OR
9692: AND
9693: PUSH
9694: LD_EXP 32
9698: PPUSH
9699: LD_INT 10
9701: PPUSH
9702: CALL_OW 308
9706: NOT
9707: AND
9708: IFFALSE 9600
// InGameOn ;
9710: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9714: LD_EXP 32
9718: PPUSH
9719: CALL_OW 87
// if IsInUnit ( Heike ) then
9723: LD_EXP 23
9727: PPUSH
9728: CALL_OW 310
9732: IFFALSE 9743
// ComExitBuilding ( Heike ) ;
9734: LD_EXP 23
9738: PPUSH
9739: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9743: LD_EXP 32
9747: PUSH
9748: LD_EXP 25
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PPUSH
9757: LD_EXP 23
9761: PPUSH
9762: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9766: LD_EXP 23
9770: PPUSH
9771: LD_EXP 32
9775: PPUSH
9776: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9780: LD_INT 22
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 91
9792: PUSH
9793: LD_EXP 32
9797: PUSH
9798: LD_INT 10
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 3
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: IFFALSE 9851
// begin Say ( Kurt , DKs-scout-1 ) ;
9827: LD_EXP 32
9831: PPUSH
9832: LD_STRING DKs-scout-1
9834: PPUSH
9835: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9839: LD_EXP 23
9843: PPUSH
9844: LD_STRING DH-scout-2
9846: PPUSH
9847: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9851: LD_INT 35
9853: PPUSH
9854: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9858: LD_EXP 23
9862: PPUSH
9863: LD_EXP 32
9867: PPUSH
9868: CALL_OW 296
9872: PUSH
9873: LD_INT 6
9875: LESS
9876: IFFALSE 9851
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9878: LD_EXP 32
9882: PUSH
9883: LD_EXP 25
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PPUSH
9892: LD_EXP 23
9896: PPUSH
9897: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9901: LD_EXP 32
9905: PPUSH
9906: LD_STRING DKs-scout-3
9908: PPUSH
9909: CALL_OW 88
// if Kaia then
9913: LD_EXP 28
9917: IFFALSE 10100
// begin if IsInUnit ( Kaia ) then
9919: LD_EXP 28
9923: PPUSH
9924: CALL_OW 310
9928: IFFALSE 9939
// ComExitBuilding ( Kaia ) ;
9930: LD_EXP 28
9934: PPUSH
9935: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9939: LD_EXP 28
9943: PPUSH
9944: LD_EXP 32
9948: PPUSH
9949: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9953: LD_INT 35
9955: PPUSH
9956: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9960: LD_EXP 28
9964: PPUSH
9965: LD_EXP 32
9969: PPUSH
9970: CALL_OW 296
9974: PUSH
9975: LD_INT 6
9977: LESS
9978: IFFALSE 9953
// ComTurnUnit ( Kaia , Kurt ) ;
9980: LD_EXP 28
9984: PPUSH
9985: LD_EXP 32
9989: PPUSH
9990: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9994: LD_EXP 28
9998: PPUSH
9999: LD_STRING DK-scout-4
10001: PPUSH
10002: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10006: LD_EXP 32
10010: PPUSH
10011: LD_EXP 28
10015: PPUSH
10016: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10020: LD_EXP 32
10024: PPUSH
10025: LD_STRING DKs-scout-5
10027: PPUSH
10028: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10032: LD_EXP 28
10036: PPUSH
10037: LD_STRING DK-scout-6
10039: PPUSH
10040: CALL_OW 88
// if Mike then
10044: LD_EXP 25
10048: IFFALSE 10100
// begin Say ( Mike , DM-scout-7 ) ;
10050: LD_EXP 25
10054: PPUSH
10055: LD_STRING DM-scout-7
10057: PPUSH
10058: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10062: LD_EXP 28
10066: PPUSH
10067: LD_EXP 25
10071: PPUSH
10072: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10076: LD_EXP 28
10080: PPUSH
10081: LD_STRING DK-scout-8
10083: PPUSH
10084: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10088: LD_EXP 25
10092: PPUSH
10093: LD_STRING DM-scout-9
10095: PPUSH
10096: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10100: LD_INT 184
10102: PPUSH
10103: LD_INT 100
10105: PPUSH
10106: LD_INT 2
10108: PPUSH
10109: LD_INT 12
10111: NEG
10112: PPUSH
10113: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10117: LD_INT 184
10119: PPUSH
10120: LD_INT 100
10122: PPUSH
10123: LD_INT 2
10125: PPUSH
10126: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10130: LD_INT 184
10132: PPUSH
10133: LD_INT 100
10135: PPUSH
10136: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10140: LD_EXP 32
10144: PPUSH
10145: LD_STRING DKs-scout-10
10147: PPUSH
10148: CALL_OW 88
// wait ( 0 0$1 ) ;
10152: LD_INT 35
10154: PPUSH
10155: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10159: LD_INT 144
10161: PPUSH
10162: LD_INT 65
10164: PPUSH
10165: LD_INT 2
10167: PPUSH
10168: LD_INT 12
10170: NEG
10171: PPUSH
10172: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10176: LD_INT 144
10178: PPUSH
10179: LD_INT 65
10181: PPUSH
10182: LD_INT 2
10184: PPUSH
10185: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10189: LD_INT 144
10191: PPUSH
10192: LD_INT 65
10194: PPUSH
10195: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10199: LD_EXP 32
10203: PPUSH
10204: LD_STRING DKs-scout-11
10206: PPUSH
10207: CALL_OW 88
// wait ( 0 0$1 ) ;
10211: LD_INT 35
10213: PPUSH
10214: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10218: LD_EXP 32
10222: PPUSH
10223: CALL_OW 87
// if Mike and not Givi then
10227: LD_EXP 25
10231: PUSH
10232: LD_EXP 24
10236: NOT
10237: AND
10238: IFFALSE 10264
// begin Say ( Mike , DM-scout-a-1 ) ;
10240: LD_EXP 25
10244: PPUSH
10245: LD_STRING DM-scout-a-1
10247: PPUSH
10248: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10252: LD_EXP 23
10256: PPUSH
10257: LD_STRING DH-scout-a-2
10259: PPUSH
10260: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10264: LD_EXP 32
10268: PUSH
10269: LD_EXP 25
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: LD_INT 2
10280: PPUSH
10281: CALL_OW 235
// InGameOff ;
10285: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10289: LD_STRING Hill
10291: PPUSH
10292: CALL_OW 337
// allowToPatrol := true ;
10296: LD_ADDR_EXP 12
10300: PUSH
10301: LD_INT 1
10303: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10304: LD_INT 3150
10306: PPUSH
10307: CALL_OW 67
// InitHc ;
10311: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10315: LD_ADDR_VAR 0 1
10319: PUSH
10320: DOUBLE
10321: LD_INT 1
10323: DEC
10324: ST_TO_ADDR
10325: LD_INT 3
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: LD_INT 2
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: LD_OWVAR 67
10343: ARRAY
10344: PUSH
10345: FOR_TO
10346: IFFALSE 10605
// begin uc_side := 2 ;
10348: LD_ADDR_OWVAR 20
10352: PUSH
10353: LD_INT 2
10355: ST_TO_ADDR
// uc_nation := 2 ;
10356: LD_ADDR_OWVAR 21
10360: PUSH
10361: LD_INT 2
10363: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10364: LD_INT 0
10366: PPUSH
10367: LD_INT 1
10369: PUSH
10370: LD_INT 3
10372: PUSH
10373: LD_INT 1
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: LD_VAR 0 1
10385: PUSH
10386: LD_INT 3
10388: MOD
10389: PUSH
10390: LD_INT 1
10392: PLUS
10393: ARRAY
10394: PPUSH
10395: LD_INT 3
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: PUSH
10409: LD_OWVAR 67
10413: ARRAY
10414: PPUSH
10415: CALL_OW 380
// un := CreateHuman ;
10419: LD_ADDR_VAR 0 2
10423: PUSH
10424: CALL_OW 44
10428: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10429: LD_ADDR_EXP 34
10433: PUSH
10434: LD_EXP 34
10438: PUSH
10439: LD_VAR 0 2
10443: UNION
10444: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10445: LD_INT 2
10447: PPUSH
10448: LD_INT 2
10450: PPUSH
10451: LD_INT 13
10453: PPUSH
10454: LD_INT 2
10456: PUSH
10457: LD_INT 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 2
10471: MOD
10472: PUSH
10473: LD_INT 1
10475: PLUS
10476: ARRAY
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: LD_INT 27
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 27
10489: PUSH
10490: LD_INT 23
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_OWVAR 67
10503: PUSH
10504: LD_INT 0
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 12
10514: PLUS
10515: ARRAY
10516: PPUSH
10517: LD_INT 77
10519: PPUSH
10520: CALL 329 0 7
// veh := CreateVehicle ;
10524: LD_ADDR_VAR 0 3
10528: PUSH
10529: CALL_OW 45
10533: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10534: LD_VAR 0 3
10538: PPUSH
10539: LD_INT 2
10541: PPUSH
10542: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10546: LD_VAR 0 3
10550: PPUSH
10551: LD_INT 178
10553: PPUSH
10554: LD_INT 2
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: LD_INT 0
10562: PPUSH
10563: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10567: LD_VAR 0 2
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10581: LD_VAR 0 2
10585: PPUSH
10586: LD_INT 183
10588: PPUSH
10589: LD_INT 11
10591: PPUSH
10592: CALL_OW 111
// wait ( 0 0$2 ) ;
10596: LD_INT 70
10598: PPUSH
10599: CALL_OW 67
// end ;
10603: GO 10345
10605: POP
10606: POP
// end ;
10607: PPOPN 3
10609: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10610: LD_EXP 4
10614: PUSH
10615: LD_EXP 33
10619: PPUSH
10620: CALL_OW 302
10624: AND
10625: IFFALSE 10674
10627: GO 10629
10629: DISABLE
// begin DialogueOn ;
10630: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10634: LD_EXP 33
10638: PPUSH
10639: LD_STRING DA-lab-1
10641: PPUSH
10642: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10646: LD_EXP 33
10650: PPUSH
10651: LD_STRING DA-lab-2
10653: PPUSH
10654: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10658: LD_EXP 23
10662: PPUSH
10663: LD_STRING DH-lab-3
10665: PPUSH
10666: CALL_OW 88
// DialogueOff ;
10670: CALL_OW 7
// end ;
10674: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10675: LD_INT 17
10677: PPUSH
10678: LD_INT 2
10680: PPUSH
10681: CALL_OW 321
10685: PUSH
10686: LD_INT 2
10688: EQUAL
10689: IFFALSE 10821
10691: GO 10693
10693: DISABLE
10694: LD_INT 0
10696: PPUSH
// begin DialogueOn ;
10697: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10701: LD_EXP 33
10705: PPUSH
10706: LD_STRING DA-Cam-1
10708: PPUSH
10709: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10713: LD_EXP 33
10717: PPUSH
10718: LD_STRING DA-Cam-2
10720: PPUSH
10721: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10725: LD_EXP 33
10729: PPUSH
10730: LD_STRING DA-Cam-3
10732: PPUSH
10733: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10737: LD_EXP 23
10741: PPUSH
10742: LD_STRING DH-Cam-4
10744: PPUSH
10745: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10749: LD_EXP 28
10753: PPUSH
10754: LD_STRING DK-Cam-5
10756: PPUSH
10757: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10761: LD_EXP 28
10765: PPUSH
10766: LD_STRING DK-Cam-6
10768: PPUSH
10769: CALL_OW 88
// DialogueOff ;
10773: CALL_OW 7
// Query ( Camera ) ;
10777: LD_STRING Camera
10779: PPUSH
10780: CALL_OW 97
// hiddenCameraAllowed := true ;
10784: LD_ADDR_EXP 5
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// for i in camAreas do
10792: LD_ADDR_VAR 0 1
10796: PUSH
10797: LD_EXP 8
10801: PUSH
10802: FOR_IN
10803: IFFALSE 10819
// SetAreaMapShow ( i , 1 ) ;
10805: LD_VAR 0 1
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 424
10817: GO 10802
10819: POP
10820: POP
// end ;
10821: PPOPN 1
10823: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10824: LD_EXP 8
10828: NOT
10829: PUSH
10830: LD_EXP 5
10834: AND
10835: IFFALSE 10933
10837: GO 10839
10839: DISABLE
10840: LD_INT 0
10842: PPUSH
// begin stop_talking := true ;
10843: LD_ADDR_OWVAR 56
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10851: LD_ADDR_VAR 0 1
10855: PUSH
10856: LD_INT 22
10858: PUSH
10859: LD_INT 2
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 21
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 23
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 69
10895: PUSH
10896: FOR_IN
10897: IFFALSE 10916
// AddExperience ( i , 2 , 450 ) ;
10899: LD_VAR 0 1
10903: PPUSH
10904: LD_INT 2
10906: PPUSH
10907: LD_INT 450
10909: PPUSH
10910: CALL_OW 492
10914: GO 10896
10916: POP
10917: POP
// stop_talking := false ;
10918: LD_ADDR_OWVAR 56
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10926: LD_STRING ACH_CAMERA
10928: PPUSH
10929: CALL_OW 543
// end ;
10933: PPOPN 1
10935: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10936: LD_EXP 9
10940: PUSH
10941: LD_EXP 11
10945: NOT
10946: AND
10947: IFFALSE 11040
10949: GO 10951
10951: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
10952: LD_EXP 9
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: CALL_OW 250
10965: PPUSH
10966: LD_EXP 9
10970: PUSH
10971: LD_INT 1
10973: ARRAY
10974: PPUSH
10975: CALL_OW 251
10979: PPUSH
10980: LD_INT 2
10982: PPUSH
10983: LD_INT 6
10985: NEG
10986: PPUSH
10987: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
10991: LD_EXP 9
10995: PUSH
10996: LD_INT 1
10998: ARRAY
10999: PPUSH
11000: CALL_OW 87
// DialogueOn ;
11004: CALL_OW 6
// if spottedByPatrol then
11008: LD_EXP 7
11012: IFFALSE 11026
// Say ( Heike , DH-Spot-f-3 ) ;
11014: LD_EXP 23
11018: PPUSH
11019: LD_STRING DH-Spot-f-3
11021: PPUSH
11022: CALL_OW 88
// dwait ( 0 0$2 ) ;
11026: LD_INT 70
11028: PPUSH
11029: CALL_OW 68
// YouLost ( Spotted ) ;
11033: LD_STRING Spotted
11035: PPUSH
11036: CALL_OW 104
// end ;
11040: END
// every 0 0$3 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11041: LD_INT 3
11043: PUSH
11044: LD_INT 6
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: LD_INT 2
11053: PPUSH
11054: LD_EXP 44
11058: PPUSH
11059: CALL 1949 0 3
11063: IFFALSE 11100
11065: GO 11067
11067: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) [ 1 ] ;
11068: LD_ADDR_EXP 9
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: LD_INT 6
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: LD_INT 2
11085: PPUSH
11086: LD_EXP 44
11090: PPUSH
11091: CALL 1949 0 3
11095: PUSH
11096: LD_INT 1
11098: ARRAY
11099: ST_TO_ADDR
11100: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11101: LD_EXP 9
11105: IFFALSE 11402
11107: GO 11109
11109: DISABLE
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
11114: PPUSH
11115: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: LD_EXP 41
11125: PPUSH
11126: LD_INT 25
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 54
11138: PUSH
11139: EMPTY
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 72
11150: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11151: LD_ADDR_VAR 0 3
11155: PUSH
11156: LD_INT 22
11158: PUSH
11159: LD_INT 6
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 30
11168: PUSH
11169: LD_INT 32
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PPUSH
11180: CALL_OW 69
11184: ST_TO_ADDR
// for i := 1 to tmp do
11185: LD_ADDR_VAR 0 1
11189: PUSH
11190: DOUBLE
11191: LD_INT 1
11193: DEC
11194: ST_TO_ADDR
11195: LD_VAR 0 2
11199: PUSH
11200: FOR_TO
11201: IFFALSE 11246
// begin ComExitBuilding ( tmp [ i ] ) ;
11203: LD_VAR 0 2
11207: PUSH
11208: LD_VAR 0 1
11212: ARRAY
11213: PPUSH
11214: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11218: LD_VAR 0 2
11222: PUSH
11223: LD_VAR 0 1
11227: ARRAY
11228: PPUSH
11229: LD_VAR 0 3
11233: PUSH
11234: LD_VAR 0 1
11238: ARRAY
11239: PPUSH
11240: CALL_OW 180
// end ;
11244: GO 11200
11246: POP
11247: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11248: LD_ADDR_VAR 0 4
11252: PUSH
11253: LD_EXP 39
11257: PUSH
11258: LD_EXP 41
11262: PUSH
11263: LD_EXP 42
11267: UNION
11268: PPUSH
11269: LD_INT 3
11271: PUSH
11272: LD_INT 25
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 72
11290: UNION
11291: ST_TO_ADDR
// for i in noncombat do
11292: LD_ADDR_VAR 0 1
11296: PUSH
11297: LD_VAR 0 4
11301: PUSH
11302: FOR_IN
11303: IFFALSE 11339
// begin if IsInUnit ( i ) then
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 310
11314: IFFALSE 11325
// ComExitBuilding ( i ) ;
11316: LD_VAR 0 1
11320: PPUSH
11321: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11325: LD_VAR 0 1
11329: PPUSH
11330: LD_INT 16
11332: PPUSH
11333: CALL_OW 173
// end ;
11337: GO 11302
11339: POP
11340: POP
// if not allowHeikeAttack then
11341: LD_EXP 11
11345: NOT
11346: IFFALSE 11350
// exit ;
11348: GO 11402
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11350: LD_EXP 37
11354: PPUSH
11355: LD_STRING D9a-Kur-1
11357: PPUSH
11358: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11362: LD_EXP 40
11366: PPUSH
11367: LD_STRING D9a-Bur-1
11369: PPUSH
11370: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11374: LD_EXP 37
11378: PPUSH
11379: LD_STRING D9a-Kur-2
11381: PPUSH
11382: CALL_OW 94
// omicronFall := true ;
11386: LD_ADDR_EXP 13
11390: PUSH
11391: LD_INT 1
11393: ST_TO_ADDR
// retreatFromOmicron := true ;
11394: LD_ADDR_EXP 20
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// end ;
11402: PPOPN 4
11404: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11405: LD_INT 16
11407: PPUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 23
11427: PUSH
11428: LD_INT 3
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 70
11443: IFFALSE 11526
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
// begin enable ;
11451: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11452: LD_ADDR_VAR 0 1
11456: PUSH
11457: LD_INT 16
11459: PPUSH
11460: LD_INT 3
11462: PUSH
11463: LD_INT 22
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 23
11479: PUSH
11480: LD_INT 3
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 70
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11524
// begin escapeCounter := escapeCounter + 1 ;
11499: LD_ADDR_EXP 19
11503: PUSH
11504: LD_EXP 19
11508: PUSH
11509: LD_INT 1
11511: PLUS
11512: ST_TO_ADDR
// RemoveUnit ( i ) ;
11513: LD_VAR 0 1
11517: PPUSH
11518: CALL_OW 64
// end ;
11522: GO 11496
11524: POP
11525: POP
// end ;
11526: PPOPN 1
11528: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11529: LD_OWVAR 1
11533: PUSH
11534: LD_INT 13650
11536: PUSH
11537: LD_INT 0
11539: PPUSH
11540: LD_INT 3150
11542: PPUSH
11543: CALL_OW 12
11547: PLUS
11548: GREATEREQUAL
11549: IFFALSE 11558
11551: GO 11553
11553: DISABLE
// SmallAmericanReinforcements ;
11554: CALL 7052 0 0
11558: END
// every 0 0$1 trigger tick >= 9 9$15 do
11559: LD_OWVAR 1
11563: PUSH
11564: LD_INT 19425
11566: GREATEREQUAL
11567: IFFALSE 11632
11569: GO 11571
11571: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11572: LD_EXP 45
11576: PPUSH
11577: LD_INT 21
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PPUSH
11592: LD_INT 62
11594: PPUSH
11595: LD_INT 22
11597: PPUSH
11598: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11602: LD_EXP 46
11606: PPUSH
11607: LD_INT 69
11609: PPUSH
11610: LD_INT 27
11612: PPUSH
11613: CALL_OW 111
// wait ( 1 1$00 ) ;
11617: LD_INT 2100
11619: PPUSH
11620: CALL_OW 67
// startAttackOnOmicron := true ;
11624: LD_ADDR_EXP 6
11628: PUSH
11629: LD_INT 1
11631: ST_TO_ADDR
// end ;
11632: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11633: LD_EXP 22
11637: PUSH
11638: LD_INT 0
11640: EQUAL
11641: IFFALSE 13514
11643: GO 11645
11645: DISABLE
11646: LD_INT 0
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
11652: PPUSH
11653: PPUSH
11654: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11655: LD_INT 5
11657: PPUSH
11658: LD_INT 2
11660: PPUSH
11661: CALL_OW 343
// PrepareOmarForces ;
11665: CALL 2479 0 0
// wait ( 0 0$03 ) ;
11669: LD_INT 105
11671: PPUSH
11672: CALL_OW 67
// allowHeikeAttack := true ;
11676: LD_ADDR_EXP 11
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// activeGrishkoAI := false ;
11684: LD_ADDR_EXP 10
11688: PUSH
11689: LD_INT 0
11691: ST_TO_ADDR
// if not hillBase then
11692: LD_EXP 15
11696: NOT
11697: IFFALSE 11706
// ChangeMissionObjectives ( HillDone ) ;
11699: LD_STRING HillDone
11701: PPUSH
11702: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11706: LD_EXP 31
11710: PPUSH
11711: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11715: LD_ADDR_VAR 0 1
11719: PUSH
11720: LD_INT 22
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: PUSH
11749: FOR_IN
11750: IFFALSE 11774
// if HasTask ( i ) then
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL_OW 314
11761: IFFALSE 11772
// ComHold ( i ) ;
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL_OW 140
11772: GO 11749
11774: POP
11775: POP
// DialogueOn ;
11776: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11780: LD_EXP 31
11784: PPUSH
11785: LD_STRING DO-assault-1
11787: PPUSH
11788: CALL_OW 94
// DialogueOff ;
11792: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11796: LD_ADDR_VAR 0 1
11800: PUSH
11801: LD_EXP 43
11805: PPUSH
11806: LD_INT 3
11808: PUSH
11809: LD_INT 54
11811: PUSH
11812: EMPTY
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PPUSH
11819: CALL_OW 72
11823: PUSH
11824: FOR_IN
11825: IFFALSE 11844
// ComMoveXY ( i , 226 , 114 ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_INT 226
11834: PPUSH
11835: LD_INT 114
11837: PPUSH
11838: CALL_OW 111
11842: GO 11824
11844: POP
11845: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11846: LD_EXP 38
11850: PPUSH
11851: LD_INT 22
11853: PUSH
11854: LD_INT 6
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PPUSH
11875: CALL_OW 69
11879: PPUSH
11880: LD_EXP 38
11884: PPUSH
11885: CALL_OW 74
11889: PPUSH
11890: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11894: LD_STRING Attack
11896: PPUSH
11897: CALL_OW 337
// music_class := music_combat ;
11901: LD_ADDR_OWVAR 72
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// music_nat := 4 ;
11909: LD_ADDR_OWVAR 71
11913: PUSH
11914: LD_INT 4
11916: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11917: LD_INT 5
11919: PPUSH
11920: LD_EXP 38
11924: PPUSH
11925: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11929: LD_INT 6
11931: PPUSH
11932: LD_EXP 35
11936: PPUSH
11937: LD_INT 25
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 72
11951: PUSH
11952: LD_INT 4
11954: ARRAY
11955: PPUSH
11956: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11960: LD_ADDR_VAR 0 1
11964: PUSH
11965: LD_EXP 35
11969: PPUSH
11970: LD_INT 3
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 72
11991: PUSH
11992: FOR_IN
11993: IFFALSE 12012
// ComAgressiveMove ( i , 221 , 110 ) ;
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_INT 221
12002: PPUSH
12003: LD_INT 110
12005: PPUSH
12006: CALL_OW 114
12010: GO 11992
12012: POP
12013: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12014: LD_EXP 35
12018: PPUSH
12019: LD_INT 25
12021: PUSH
12022: LD_INT 4
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 72
12033: PPUSH
12034: LD_INT 214
12036: PPUSH
12037: LD_INT 124
12039: PPUSH
12040: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12044: LD_EXP 35
12048: PPUSH
12049: LD_INT 25
12051: PUSH
12052: LD_INT 1
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 72
12063: PUSH
12064: LD_INT 4
12066: ARRAY
12067: PPUSH
12068: LD_INT 214
12070: PPUSH
12071: LD_INT 114
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12081: LD_EXP 38
12085: PPUSH
12086: LD_STRING D9-Gri-1
12088: PPUSH
12089: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12093: LD_EXP 37
12097: PPUSH
12098: LD_STRING D9-Kur-1
12100: PPUSH
12101: CALL_OW 94
// wait ( 0 0$1 ) ;
12105: LD_INT 35
12107: PPUSH
12108: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12112: LD_EXP 31
12116: PPUSH
12117: LD_INT 233
12119: PPUSH
12120: LD_INT 130
12122: PPUSH
12123: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12127: LD_EXP 38
12131: PPUSH
12132: LD_STRING D9-Gri-2
12134: PPUSH
12135: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12139: LD_EXP 37
12143: PPUSH
12144: LD_STRING D9-Kur-2
12146: PPUSH
12147: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12151: LD_EXP 38
12155: PPUSH
12156: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12160: LD_EXP 38
12164: PPUSH
12165: LD_INT 211
12167: PPUSH
12168: LD_INT 104
12170: PPUSH
12171: CALL_OW 171
// AddComHold ( Grishko ) ;
12175: LD_EXP 38
12179: PPUSH
12180: CALL_OW 200
// repeat wait ( 3 ) ;
12184: LD_INT 3
12186: PPUSH
12187: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12191: LD_EXP 38
12195: PPUSH
12196: CALL_OW 310
12200: NOT
12201: IFFALSE 12184
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12203: LD_EXP 35
12207: PPUSH
12208: LD_INT 34
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 72
12222: PPUSH
12223: LD_EXP 38
12227: PPUSH
12228: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12232: LD_EXP 35
12236: PPUSH
12237: LD_INT 34
12239: PUSH
12240: LD_INT 26
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PPUSH
12247: CALL_OW 72
12251: PPUSH
12252: LD_INT 215
12254: PPUSH
12255: LD_INT 106
12257: PPUSH
12258: CALL_OW 174
// repeat wait ( 3 ) ;
12262: LD_INT 3
12264: PPUSH
12265: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12269: LD_EXP 38
12273: PPUSH
12274: CALL_OW 256
12278: PUSH
12279: LD_INT 1000
12281: LESS
12282: IFFALSE 12262
// NormalAttack ( 5 , Grishko ) ;
12284: LD_INT 5
12286: PPUSH
12287: LD_EXP 38
12291: PPUSH
12292: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12296: LD_INT 6
12298: PPUSH
12299: LD_EXP 35
12303: PPUSH
12304: LD_INT 25
12306: PUSH
12307: LD_INT 1
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PPUSH
12314: CALL_OW 72
12318: PUSH
12319: LD_INT 4
12321: ARRAY
12322: PPUSH
12323: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12327: LD_EXP 38
12331: PPUSH
12332: LD_STRING D9-Gri-3
12334: PPUSH
12335: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12339: LD_EXP 37
12343: PPUSH
12344: LD_STRING D9-Kur-3
12346: PPUSH
12347: CALL_OW 94
// music_class := music_auto ;
12351: LD_ADDR_OWVAR 72
12355: PUSH
12356: LD_INT 0
12358: ST_TO_ADDR
// music_nat := music_auto ;
12359: LD_ADDR_OWVAR 71
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// for i in omarSquad do
12367: LD_ADDR_VAR 0 1
12371: PUSH
12372: LD_EXP 35
12376: PUSH
12377: FOR_IN
12378: IFFALSE 12520
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 247
12389: PUSH
12390: LD_INT 2
12392: EQUAL
12393: PUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 256
12403: PUSH
12404: LD_INT 1000
12406: LESS
12407: AND
12408: IFFALSE 12474
// begin driver := IsDrivenBy ( i ) ;
12410: LD_ADDR_VAR 0 2
12414: PUSH
12415: LD_VAR 0 1
12419: PPUSH
12420: CALL_OW 311
12424: ST_TO_ADDR
// veh := i ;
12425: LD_ADDR_VAR 0 3
12429: PUSH
12430: LD_VAR 0 1
12434: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12435: LD_VAR 0 2
12439: PPUSH
12440: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12444: LD_VAR 0 2
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12458: LD_VAR 0 2
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: CALL_OW 180
// end else
12472: GO 12518
// if GetLives ( i ) < 500 then
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 256
12483: PUSH
12484: LD_INT 500
12486: LESS
12487: IFFALSE 12518
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12489: LD_EXP 35
12493: PPUSH
12494: LD_INT 25
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 72
12508: PPUSH
12509: LD_VAR 0 1
12513: PPUSH
12514: CALL_OW 188
// end ; end ;
12518: GO 12377
12520: POP
12521: POP
// repeat wait ( 0 0$1 ) ;
12522: LD_INT 35
12524: PPUSH
12525: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12529: LD_EXP 35
12533: PPUSH
12534: LD_INT 3
12536: PUSH
12537: LD_INT 24
12539: PUSH
12540: LD_INT 1000
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 21
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 72
12569: NOT
12570: PUSH
12571: LD_EXP 35
12575: PPUSH
12576: LD_INT 3
12578: PUSH
12579: LD_INT 24
12581: PUSH
12582: LD_INT 250
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 72
12597: NOT
12598: AND
12599: IFFALSE 12522
// wait ( 0 0$2 ) ;
12601: LD_INT 70
12603: PPUSH
12604: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12608: LD_ADDR_VAR 0 5
12612: PUSH
12613: LD_EXP 35
12617: PPUSH
12618: LD_INT 58
12620: PUSH
12621: EMPTY
12622: LIST
12623: PUSH
12624: LD_INT 21
12626: PUSH
12627: LD_INT 2
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 72
12642: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12643: LD_ADDR_VAR 0 6
12647: PUSH
12648: LD_EXP 35
12652: PPUSH
12653: LD_INT 25
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 3
12665: PUSH
12666: LD_INT 55
12668: PUSH
12669: EMPTY
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 72
12684: ST_TO_ADDR
// for i := 1 to tmp do
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: DOUBLE
12691: LD_INT 1
12693: DEC
12694: ST_TO_ADDR
12695: LD_VAR 0 5
12699: PUSH
12700: FOR_TO
12701: IFFALSE 12731
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12703: LD_VAR 0 6
12707: PUSH
12708: LD_VAR 0 1
12712: ARRAY
12713: PPUSH
12714: LD_VAR 0 5
12718: PUSH
12719: LD_VAR 0 1
12723: ARRAY
12724: PPUSH
12725: CALL_OW 120
12729: GO 12700
12731: POP
12732: POP
// wait ( 0 0$5 ) ;
12733: LD_INT 175
12735: PPUSH
12736: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12740: LD_EXP 35
12744: PPUSH
12745: LD_INT 199
12747: PPUSH
12748: LD_INT 141
12750: PPUSH
12751: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12755: LD_EXP 31
12759: PPUSH
12760: LD_INT 190
12762: PPUSH
12763: LD_INT 143
12765: PPUSH
12766: CALL_OW 111
// AddComHold ( Omar ) ;
12770: LD_EXP 31
12774: PPUSH
12775: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12779: LD_EXP 35
12783: PPUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 25
12789: PUSH
12790: LD_INT 1
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 25
12799: PUSH
12800: LD_INT 4
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 72
12816: PPUSH
12817: LD_INT 161
12819: PPUSH
12820: LD_INT 130
12822: PPUSH
12823: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12827: LD_EXP 35
12831: PPUSH
12832: LD_INT 25
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 72
12846: PPUSH
12847: LD_INT 163
12849: PPUSH
12850: LD_INT 122
12852: PPUSH
12853: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12857: LD_EXP 35
12861: PPUSH
12862: LD_INT 25
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 72
12876: PUSH
12877: LD_INT 4
12879: ARRAY
12880: PPUSH
12881: LD_INT 165
12883: PPUSH
12884: LD_INT 118
12886: PPUSH
12887: LD_INT 0
12889: PPUSH
12890: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12894: LD_EXP 35
12898: PPUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 1
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 72
12913: PUSH
12914: LD_INT 4
12916: ARRAY
12917: PPUSH
12918: LD_INT 159
12920: PPUSH
12921: LD_INT 116
12923: PPUSH
12924: LD_INT 0
12926: PPUSH
12927: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12931: LD_EXP 35
12935: PPUSH
12936: LD_INT 21
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 72
12950: PPUSH
12951: LD_INT 169
12953: PPUSH
12954: LD_INT 114
12956: PPUSH
12957: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12961: LD_INT 35
12963: PPUSH
12964: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12968: LD_ADDR_VAR 0 5
12972: PUSH
12973: LD_EXP 35
12977: PPUSH
12978: LD_INT 25
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 72
12992: ST_TO_ADDR
// for i in tmp do
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_VAR 0 5
13002: PUSH
13003: FOR_IN
13004: IFFALSE 13101
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 256
13015: PUSH
13016: LD_INT 600
13018: LESS
13019: PUSH
13020: LD_VAR 0 1
13024: PPUSH
13025: LD_INT 161
13027: PPUSH
13028: LD_INT 130
13030: PPUSH
13031: CALL_OW 297
13035: PUSH
13036: LD_INT 6
13038: GREATER
13039: AND
13040: IFFALSE 13057
// ComMoveXY ( i , 161 , 130 ) ;
13042: LD_VAR 0 1
13046: PPUSH
13047: LD_INT 161
13049: PPUSH
13050: LD_INT 130
13052: PPUSH
13053: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 256
13066: PUSH
13067: LD_INT 1000
13069: EQUAL
13070: PUSH
13071: LD_VAR 0 1
13075: PPUSH
13076: CALL_OW 314
13080: NOT
13081: AND
13082: IFFALSE 13099
// ComAgressiveMove ( i , 160 , 109 ) ;
13084: LD_VAR 0 1
13088: PPUSH
13089: LD_INT 160
13091: PPUSH
13092: LD_INT 109
13094: PPUSH
13095: CALL_OW 114
// end ;
13099: GO 13003
13101: POP
13102: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13103: LD_ADDR_VAR 0 5
13107: PUSH
13108: LD_EXP 35
13112: PPUSH
13113: LD_INT 21
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 72
13127: ST_TO_ADDR
// for i in tmp do
13128: LD_ADDR_VAR 0 1
13132: PUSH
13133: LD_VAR 0 5
13137: PUSH
13138: FOR_IN
13139: IFFALSE 13405
// begin tmp2 := IsDrivenBy ( i ) ;
13141: LD_ADDR_VAR 0 6
13145: PUSH
13146: LD_VAR 0 1
13150: PPUSH
13151: CALL_OW 311
13155: ST_TO_ADDR
// if not tmp2 then
13156: LD_VAR 0 6
13160: NOT
13161: IFFALSE 13165
// continue ;
13163: GO 13138
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 256
13174: PUSH
13175: LD_INT 600
13177: GREATEREQUAL
13178: PUSH
13179: LD_VAR 0 1
13183: PPUSH
13184: CALL_OW 110
13188: PUSH
13189: LD_INT 1
13191: EQUAL
13192: AND
13193: IFFALSE 13207
// SetTag ( i , 0 ) ;
13195: LD_VAR 0 1
13199: PPUSH
13200: LD_INT 0
13202: PPUSH
13203: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13207: LD_VAR 0 1
13211: PPUSH
13212: CALL_OW 256
13216: PUSH
13217: LD_INT 600
13219: GREATEREQUAL
13220: PUSH
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 110
13230: NOT
13231: AND
13232: IFFALSE 13258
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13234: LD_VAR 0 1
13238: PPUSH
13239: LD_VAR 0 7
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: CALL_OW 74
13253: PPUSH
13254: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 256
13267: PUSH
13268: LD_INT 600
13270: LESS
13271: PUSH
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 110
13281: NOT
13282: AND
13283: IFFALSE 13312
// begin SetTag ( i , 1 ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13297: LD_VAR 0 1
13301: PPUSH
13302: LD_INT 202
13304: PPUSH
13305: LD_INT 150
13307: PPUSH
13308: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13312: LD_VAR 0 1
13316: PPUSH
13317: CALL_OW 110
13321: PUSH
13322: LD_INT 1
13324: EQUAL
13325: PUSH
13326: LD_VAR 0 1
13330: PPUSH
13331: LD_INT 202
13333: PPUSH
13334: LD_INT 150
13336: PPUSH
13337: CALL_OW 297
13341: PUSH
13342: LD_INT 6
13344: LESS
13345: AND
13346: PUSH
13347: LD_VAR 0 6
13351: AND
13352: IFFALSE 13403
// begin ComExitVehicle ( tmp2 ) ;
13354: LD_VAR 0 6
13358: PPUSH
13359: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13363: LD_VAR 0 6
13367: PPUSH
13368: LD_VAR 0 1
13372: PPUSH
13373: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13377: LD_VAR 0 6
13381: PPUSH
13382: LD_INT 700
13384: PPUSH
13385: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13389: LD_VAR 0 6
13393: PPUSH
13394: LD_VAR 0 1
13398: PPUSH
13399: CALL_OW 180
// end ; end ;
13403: GO 13138
13405: POP
13406: POP
// until kirovDestroyed ;
13407: LD_EXP 16
13411: IFFALSE 12961
// repeat wait ( 0 0$1 ) ;
13413: LD_INT 35
13415: PPUSH
13416: CALL_OW 67
// for i in omarSquad union Omar do
13420: LD_ADDR_VAR 0 1
13424: PUSH
13425: LD_EXP 35
13429: PUSH
13430: LD_EXP 31
13434: UNION
13435: PUSH
13436: FOR_IN
13437: IFFALSE 13481
// if IsInArea ( i , southRoadArea ) then
13439: LD_VAR 0 1
13443: PPUSH
13444: LD_INT 15
13446: PPUSH
13447: CALL_OW 308
13451: IFFALSE 13464
// RemoveUnit ( i ) else
13453: LD_VAR 0 1
13457: PPUSH
13458: CALL_OW 64
13462: GO 13479
// ComMoveXY ( i , 208 , 162 ) ;
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_INT 208
13471: PPUSH
13472: LD_INT 162
13474: PPUSH
13475: CALL_OW 111
13479: GO 13436
13481: POP
13482: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13483: LD_INT 22
13485: PUSH
13486: LD_INT 5
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 21
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: NOT
13512: IFFALSE 13413
// end ;
13514: PPOPN 7
13516: END
// every 0 0$1 trigger IsDead ( kirov ) do
13517: LD_INT 71
13519: PPUSH
13520: CALL_OW 301
13524: IFFALSE 13541
13526: GO 13528
13528: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13529: LD_EXP 23
13533: PPUSH
13534: LD_STRING DH-1-Kirov
13536: PPUSH
13537: CALL_OW 88
13541: END
// every 0 0$1 trigger See ( 2 , beria ) do
13542: LD_INT 2
13544: PPUSH
13545: LD_INT 106
13547: PPUSH
13548: CALL_OW 292
13552: IFFALSE 13569
13554: GO 13556
13556: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13557: LD_EXP 23
13561: PPUSH
13562: LD_STRING DH-1-Beria
13564: PPUSH
13565: CALL_OW 88
13569: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13570: LD_INT 2
13572: PPUSH
13573: LD_INT 112
13575: PPUSH
13576: CALL_OW 292
13580: IFFALSE 13597
13582: GO 13584
13584: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
13585: LD_EXP 23
13589: PPUSH
13590: LD_STRING DH-1-Kagan
13592: PPUSH
13593: CALL_OW 88
13597: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , tmp2 , q , settings ;
13598: LD_INT 2
13600: PPUSH
13601: LD_EXP 47
13605: PPUSH
13606: CALL_OW 292
13610: PUSH
13611: LD_EXP 47
13615: PPUSH
13616: CALL_OW 302
13620: AND
13621: PUSH
13622: LD_EXP 23
13626: PPUSH
13627: CALL_OW 302
13631: AND
13632: PUSH
13633: LD_EXP 33
13637: PPUSH
13638: CALL_OW 302
13642: AND
13643: PUSH
13644: LD_INT 2
13646: PPUSH
13647: CALL_OW 463
13651: NOT
13652: AND
13653: IFFALSE 14216
13655: GO 13657
13657: DISABLE
13658: LD_INT 0
13660: PPUSH
13661: PPUSH
13662: PPUSH
13663: PPUSH
13664: PPUSH
// begin DialogueOn ;
13665: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13669: LD_INT 111
13671: PPUSH
13672: LD_INT 90
13674: PPUSH
13675: LD_INT 2
13677: PPUSH
13678: LD_INT 6
13680: NEG
13681: PPUSH
13682: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13686: LD_INT 111
13688: PPUSH
13689: LD_INT 90
13691: PPUSH
13692: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13696: LD_EXP 33
13700: PPUSH
13701: LD_STRING DA-Cap-1
13703: PPUSH
13704: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13708: LD_EXP 23
13712: PPUSH
13713: LD_STRING DH-Cap-2
13715: PPUSH
13716: CALL_OW 88
// DialogueOff ;
13720: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13724: LD_INT 35
13726: PPUSH
13727: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
13731: LD_EXP 17
13735: PUSH
13736: LD_EXP 47
13740: PPUSH
13741: CALL_OW 302
13745: AND
13746: PUSH
13747: LD_EXP 33
13751: PPUSH
13752: CALL_OW 302
13756: AND
13757: IFFALSE 13724
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13759: LD_ADDR_VAR 0 2
13763: PUSH
13764: LD_EXP 34
13768: PUSH
13769: LD_EXP 26
13773: PUSH
13774: LD_EXP 27
13778: PUSH
13779: LD_EXP 29
13783: PUSH
13784: LD_EXP 28
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: UNION
13795: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_VAR 0 2
13805: PPUSH
13806: LD_INT 50
13808: PUSH
13809: EMPTY
13810: LIST
13811: PPUSH
13812: CALL_OW 72
13816: ST_TO_ADDR
// if tmp < 2 then
13817: LD_VAR 0 2
13821: PUSH
13822: LD_INT 2
13824: LESS
13825: IFFALSE 13837
// q := 2 else
13827: LD_ADDR_VAR 0 4
13831: PUSH
13832: LD_INT 2
13834: ST_TO_ADDR
13835: GO 13850
// q := Query ( LabCap ) ;
13837: LD_ADDR_VAR 0 4
13841: PUSH
13842: LD_STRING LabCap
13844: PPUSH
13845: CALL_OW 97
13849: ST_TO_ADDR
// case q of 1 :
13850: LD_VAR 0 4
13854: PUSH
13855: LD_INT 1
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 14180
13863: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13864: LD_INT 2
13866: PPUSH
13867: LD_EXP 47
13871: PPUSH
13872: CALL_OW 471
// labCaptured := true ;
13876: LD_ADDR_EXP 21
13880: PUSH
13881: LD_INT 1
13883: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13884: LD_EXP 23
13888: PPUSH
13889: LD_STRING DH-Cap-a-1
13891: PPUSH
13892: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13896: LD_EXP 33
13900: PPUSH
13901: LD_STRING DA-Cap-a-2
13903: PPUSH
13904: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
13908: LD_ADDR_VAR 0 5
13912: PUSH
13913: LD_EXP 23
13917: PUSH
13918: LD_INT -3
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_VAR 0 2
13929: ADD
13930: PUSH
13931: LD_INT -2
13933: PUSH
13934: LD_INT -4
13936: PUSH
13937: LD_EXP 33
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: ADD
13947: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
13948: LD_ADDR_VAR 0 3
13952: PUSH
13953: LD_STRING Select two characters to go with Aviradze
13955: PPUSH
13956: LD_INT 2
13958: PPUSH
13959: LD_INT 2
13961: PPUSH
13962: LD_VAR 0 5
13966: PPUSH
13967: EMPTY
13968: PPUSH
13969: CALL_OW 42
13973: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
13974: LD_EXP 47
13978: PPUSH
13979: LD_INT 8
13981: PPUSH
13982: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
13986: LD_EXP 33
13990: PPUSH
13991: LD_INT 8
13993: PPUSH
13994: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13998: LD_ADDR_EXP 36
14002: PUSH
14003: LD_EXP 33
14007: PUSH
14008: EMPTY
14009: LIST
14010: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14011: LD_EXP 33
14015: PPUSH
14016: CALL_OW 310
14020: IFFALSE 14031
// ComExit ( Aviradze ) ;
14022: LD_EXP 33
14026: PPUSH
14027: CALL 767 0 1
// wait ( 3 ) ;
14031: LD_INT 3
14033: PPUSH
14034: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14038: LD_EXP 33
14042: PPUSH
14043: LD_EXP 47
14047: PPUSH
14048: CALL_OW 120
// for i := 1 to 2 do
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: DOUBLE
14058: LD_INT 1
14060: DEC
14061: ST_TO_ADDR
14062: LD_INT 2
14064: PUSH
14065: FOR_TO
14066: IFFALSE 14169
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14068: LD_ADDR_EXP 36
14072: PUSH
14073: LD_EXP 36
14077: PUSH
14078: LD_VAR 0 3
14082: PUSH
14083: LD_VAR 0 1
14087: ARRAY
14088: UNION
14089: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14090: LD_VAR 0 3
14094: PUSH
14095: LD_VAR 0 1
14099: ARRAY
14100: PPUSH
14101: LD_INT 8
14103: PPUSH
14104: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14108: LD_VAR 0 3
14112: PUSH
14113: LD_VAR 0 1
14117: ARRAY
14118: PPUSH
14119: CALL_OW 310
14123: IFFALSE 14140
// ComExit ( tmp2 [ i ] ) ;
14125: LD_VAR 0 3
14129: PUSH
14130: LD_VAR 0 1
14134: ARRAY
14135: PPUSH
14136: CALL 767 0 1
// wait ( 3 ) ;
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14147: LD_VAR 0 3
14151: PUSH
14152: LD_VAR 0 1
14156: ARRAY
14157: PPUSH
14158: LD_EXP 47
14162: PPUSH
14163: CALL_OW 120
// end ;
14167: GO 14065
14169: POP
14170: POP
// SetAchievement ( ACH_LAB ) ;
14171: LD_STRING ACH_LAB
14173: PPUSH
14174: CALL_OW 543
// end ; 2 :
14178: GO 14216
14180: LD_INT 2
14182: DOUBLE
14183: EQUAL
14184: IFTRUE 14188
14186: GO 14215
14188: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14189: LD_EXP 23
14193: PPUSH
14194: LD_STRING DH-Cap-b-1
14196: PPUSH
14197: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14201: LD_EXP 33
14205: PPUSH
14206: LD_STRING DA-Cap-b-2
14208: PPUSH
14209: CALL_OW 88
// end ; end ;
14213: GO 14216
14215: POP
// end ;
14216: PPOPN 5
14218: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14219: LD_INT 10
14221: PPUSH
14222: LD_INT 22
14224: PUSH
14225: LD_INT 2
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: LD_INT 30
14234: PUSH
14235: LD_INT 31
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PPUSH
14246: CALL_OW 70
14250: PUSH
14251: LD_INT 2
14253: GREATEREQUAL
14254: IFFALSE 14266
14256: GO 14258
14258: DISABLE
// SetAchievement ( ACH_KING ) ;
14259: LD_STRING ACH_KING
14261: PPUSH
14262: CALL_OW 543
14266: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14267: LD_EXP 11
14271: NOT
14272: PUSH
14273: LD_INT 10
14275: PPUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 2
14288: PUSH
14289: LD_INT 30
14291: PUSH
14292: LD_INT 31
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 30
14301: PUSH
14302: LD_INT 4
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 70
14322: AND
14323: IFFALSE 14343
14325: GO 14327
14327: DISABLE
// begin hillBase := true ;
14328: LD_ADDR_EXP 15
14332: PUSH
14333: LD_INT 1
14335: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14336: LD_STRING HillDone
14338: PPUSH
14339: CALL_OW 337
// end ;
14343: END
// every 0 0$1 trigger debug or ( kirovDestroyed and beriaDestroyed and kaganDestroyed ) do var i , tmp , tmp2 , cargo ;
14344: LD_EXP 1
14348: PUSH
14349: LD_EXP 16
14353: PUSH
14354: LD_EXP 17
14358: AND
14359: PUSH
14360: LD_EXP 18
14364: AND
14365: OR
14366: IFFALSE 15523
14368: GO 14370
14370: DISABLE
14371: LD_INT 0
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14377: LD_STRING GoToWest
14379: PPUSH
14380: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14384: LD_INT 17
14386: PPUSH
14387: LD_INT 1
14389: PPUSH
14390: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14394: LD_INT 35
14396: PPUSH
14397: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14401: LD_ADDR_VAR 0 2
14405: PUSH
14406: LD_INT 17
14408: PPUSH
14409: LD_INT 22
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 3
14444: PUSH
14445: LD_INT 58
14447: PUSH
14448: EMPTY
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 70
14472: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14473: LD_ADDR_VAR 0 3
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_INT 2
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 3
14490: PUSH
14491: LD_INT 55
14493: PUSH
14494: EMPTY
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: LD_INT 21
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 21
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 3
14526: PUSH
14527: LD_INT 58
14529: PUSH
14530: EMPTY
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: PPUSH
14551: CALL_OW 69
14555: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
14556: LD_VAR 0 2
14560: PUSH
14561: LD_INT 0
14563: PLUS
14564: PUSH
14565: LD_VAR 0 3
14569: PUSH
14570: LD_INT 0
14572: PLUS
14573: EQUAL
14574: IFFALSE 14394
// SaveCharacters ( Heike , 04_1_Heike ) ;
14576: LD_EXP 23
14580: PPUSH
14581: LD_STRING 04_1_Heike
14583: PPUSH
14584: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
14588: LD_EXP 33
14592: PUSH
14593: LD_EXP 33
14597: PUSH
14598: LD_EXP 36
14602: IN
14603: NOT
14604: AND
14605: IFFALSE 14621
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
14607: LD_EXP 33
14611: PPUSH
14612: LD_STRING 04_1_Aviradze
14614: PPUSH
14615: CALL_OW 38
14619: GO 14639
// if Aviradze then
14621: LD_EXP 33
14625: IFFALSE 14639
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
14627: LD_EXP 33
14631: PPUSH
14632: LD_STRING 04_1_Aviradze_L
14634: PPUSH
14635: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
14639: LD_EXP 26
14643: PUSH
14644: LD_EXP 26
14648: PUSH
14649: LD_EXP 36
14653: IN
14654: NOT
14655: AND
14656: IFFALSE 14672
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
14658: LD_EXP 26
14662: PPUSH
14663: LD_STRING 04_1_Ibrahim
14665: PPUSH
14666: CALL_OW 38
14670: GO 14690
// if Ibrahim then
14672: LD_EXP 26
14676: IFFALSE 14690
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
14678: LD_EXP 26
14682: PPUSH
14683: LD_STRING 04_1_Ibrahim_L
14685: PPUSH
14686: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
14690: LD_EXP 27
14694: PUSH
14695: LD_EXP 27
14699: PUSH
14700: LD_EXP 36
14704: IN
14705: NOT
14706: AND
14707: IFFALSE 14723
// SaveCharacters ( Kamil , 04_1_Kamil ) else
14709: LD_EXP 27
14713: PPUSH
14714: LD_STRING 04_1_Kamil
14716: PPUSH
14717: CALL_OW 38
14721: GO 14741
// if Kamil then
14723: LD_EXP 27
14727: IFFALSE 14741
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
14729: LD_EXP 27
14733: PPUSH
14734: LD_STRING 04_1_Kamil_L
14736: PPUSH
14737: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
14741: LD_EXP 29
14745: PUSH
14746: LD_EXP 29
14750: PUSH
14751: LD_EXP 36
14755: IN
14756: NOT
14757: AND
14758: IFFALSE 14774
// SaveCharacters ( Sophia , 04_1_Sophia ) else
14760: LD_EXP 29
14764: PPUSH
14765: LD_STRING 04_1_Sophia
14767: PPUSH
14768: CALL_OW 38
14772: GO 14792
// if Sophia then
14774: LD_EXP 29
14778: IFFALSE 14792
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
14780: LD_EXP 29
14784: PPUSH
14785: LD_STRING 04_1_Sophia_L
14787: PPUSH
14788: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
14792: LD_EXP 28
14796: PUSH
14797: LD_EXP 28
14801: PUSH
14802: LD_EXP 36
14806: IN
14807: NOT
14808: AND
14809: IFFALSE 14825
// SaveCharacters ( Kaia , 04_1_Kaia ) else
14811: LD_EXP 28
14815: PPUSH
14816: LD_STRING 04_1_Kaia
14818: PPUSH
14819: CALL_OW 38
14823: GO 14843
// if Kaia then
14825: LD_EXP 28
14829: IFFALSE 14843
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
14831: LD_EXP 28
14835: PPUSH
14836: LD_STRING 04_1_Kaia_L
14838: PPUSH
14839: CALL_OW 38
// if Givi then
14843: LD_EXP 24
14847: IFFALSE 14861
// SaveCharacters ( Givi , 04_1_Givi ) ;
14849: LD_EXP 24
14853: PPUSH
14854: LD_STRING 04_1_Givi
14856: PPUSH
14857: CALL_OW 38
// if Mike then
14861: LD_EXP 25
14865: IFFALSE 14879
// SaveCharacters ( Mike , 04_1_Mike ) ;
14867: LD_EXP 25
14871: PPUSH
14872: LD_STRING 04_1_Mike
14874: PPUSH
14875: CALL_OW 38
// if Markov then
14879: LD_EXP 30
14883: IFFALSE 14897
// SaveCharacters ( Markov , 04_1_Markov ) ;
14885: LD_EXP 30
14889: PPUSH
14890: LD_STRING 04_1_Markov
14892: PPUSH
14893: CALL_OW 38
// if Kurt then
14897: LD_EXP 32
14901: IFFALSE 14915
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
14903: LD_EXP 32
14907: PPUSH
14908: LD_STRING 04_1_Kurt
14910: PPUSH
14911: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
14915: LD_EXP 34
14919: PUSH
14920: LD_EXP 36
14924: DIFF
14925: IFFALSE 14945
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
14927: LD_EXP 34
14931: PUSH
14932: LD_EXP 36
14936: DIFF
14937: PPUSH
14938: LD_STRING 04_1_others
14940: PPUSH
14941: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
14945: LD_EXP 36
14949: PUSH
14950: LD_EXP 34
14954: AND
14955: IFFALSE 15040
// begin tmp := [ ] ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: EMPTY
14963: ST_TO_ADDR
// for i in heikeSecondSquad do
14964: LD_ADDR_VAR 0 1
14968: PUSH
14969: LD_EXP 34
14973: PUSH
14974: FOR_IN
14975: IFFALSE 15020
// if i in aviradzeSquad then
14977: LD_VAR 0 1
14981: PUSH
14982: LD_EXP 36
14986: IN
14987: IFFALSE 15018
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14989: LD_ADDR_VAR 0 2
14993: PUSH
14994: LD_VAR 0 2
14998: PPUSH
14999: LD_VAR 0 2
15003: PUSH
15004: LD_INT 1
15006: PLUS
15007: PPUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 1
15017: ST_TO_ADDR
15018: GO 14974
15020: POP
15021: POP
// if tmp then
15022: LD_VAR 0 2
15026: IFFALSE 15040
// SaveCharacters ( tmp , 04_1_others_L ) ;
15028: LD_VAR 0 2
15032: PPUSH
15033: LD_STRING 04_1_others_L
15035: PPUSH
15036: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 23
15057: PUSH
15058: LD_INT 0
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 69
15073: ST_TO_ADDR
// if tmp then
15074: LD_VAR 0 2
15078: IFFALSE 15092
// SaveCharacters ( tmp , 04_1_apes ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_STRING 04_1_apes
15087: PPUSH
15088: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15092: LD_ADDR_VAR 0 2
15096: PUSH
15097: LD_INT 17
15099: PPUSH
15100: LD_INT 21
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PPUSH
15110: CALL_OW 70
15114: ST_TO_ADDR
// if tmp then
15115: LD_VAR 0 2
15119: IFFALSE 15413
// begin tmp2 := [ ] ;
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: EMPTY
15127: ST_TO_ADDR
// for i in tmp do
15128: LD_ADDR_VAR 0 1
15132: PUSH
15133: LD_VAR 0 2
15137: PUSH
15138: FOR_IN
15139: IFFALSE 15399
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 264
15150: PUSH
15151: LD_INT 32
15153: PUSH
15154: LD_INT 12
15156: PUSH
15157: LD_INT 51
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: IN
15165: IFFALSE 15302
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15167: LD_ADDR_VAR 0 4
15171: PUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 289
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: LD_INT 2
15192: PPUSH
15193: CALL_OW 289
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15202: LD_ADDR_VAR 0 3
15206: PUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 1
15219: PLUS
15220: PPUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 265
15230: PUSH
15231: LD_VAR 0 1
15235: PPUSH
15236: CALL_OW 262
15240: PUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 263
15250: PUSH
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 264
15260: PUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 248
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 256
15280: PUSH
15281: LD_VAR 0 4
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 1
15299: ST_TO_ADDR
// end else
15300: GO 15397
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15302: LD_ADDR_VAR 0 3
15306: PUSH
15307: LD_VAR 0 3
15311: PPUSH
15312: LD_VAR 0 3
15316: PUSH
15317: LD_INT 1
15319: PLUS
15320: PPUSH
15321: LD_VAR 0 1
15325: PPUSH
15326: CALL_OW 265
15330: PUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 262
15340: PUSH
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 263
15350: PUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: CALL_OW 264
15360: PUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 248
15370: PUSH
15371: LD_VAR 0 1
15375: PPUSH
15376: CALL_OW 256
15380: PUSH
15381: EMPTY
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PPUSH
15392: CALL_OW 1
15396: ST_TO_ADDR
15397: GO 15138
15399: POP
15400: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_STRING 04_1_Vehicles
15408: PPUSH
15409: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15413: LD_EXP 21
15417: PPUSH
15418: LD_STRING 04_1_RuLabCaptured
15420: PPUSH
15421: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15425: LD_EXP 19
15429: PPUSH
15430: LD_STRING 04_1_EscapeCounter
15432: PPUSH
15433: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15437: LD_EXP 15
15441: PPUSH
15442: LD_STRING 04_1_BaseHill
15444: PPUSH
15445: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15449: LD_OWVAR 1
15453: PPUSH
15454: LD_STRING 04_1_Time
15456: PPUSH
15457: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15461: LD_EXP 14
15465: PPUSH
15466: LD_STRING 04_1_DeadCounter
15468: PPUSH
15469: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15473: LD_INT 22
15475: PUSH
15476: LD_INT 2
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 34
15485: PUSH
15486: LD_INT 26
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: PUSH
15502: LD_INT 0
15504: PLUS
15505: PPUSH
15506: LD_STRING 04_1_Flamethrower
15508: PPUSH
15509: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
15513: LD_INT 1
15515: PPUSH
15516: LD_STRING __x1\04_cont2
15518: PPUSH
15519: CALL_OW 340
// end ; end_of_file
15523: PPOPN 4
15525: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL_OW 266
15535: PUSH
15536: LD_INT 0
15538: EQUAL
15539: PUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: CALL_OW 255
15549: PUSH
15550: LD_INT 2
15552: EQUAL
15553: AND
15554: IFFALSE 15564
// baseConstructed := true ;
15556: LD_ADDR_EXP 3
15560: PUSH
15561: LD_INT 1
15563: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 266
15573: PUSH
15574: LD_INT 6
15576: EQUAL
15577: PUSH
15578: LD_VAR 0 1
15582: PPUSH
15583: CALL_OW 255
15587: PUSH
15588: LD_INT 2
15590: EQUAL
15591: AND
15592: IFFALSE 15602
// labConstructed := true ;
15594: LD_ADDR_EXP 4
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// end ;
15602: PPOPN 1
15604: END
// on UnitDestroyed ( un ) do begin if un = Heike then
15605: LD_VAR 0 1
15609: PUSH
15610: LD_EXP 23
15614: EQUAL
15615: IFFALSE 15624
// YouLost ( Heike ) ;
15617: LD_STRING Heike
15619: PPUSH
15620: CALL_OW 104
// if un = Omar then
15624: LD_VAR 0 1
15628: PUSH
15629: LD_EXP 31
15633: EQUAL
15634: IFFALSE 15643
// YouLost ( Omar ) ;
15636: LD_STRING Omar
15638: PPUSH
15639: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
15643: LD_VAR 0 1
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 23
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 21
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: IN
15688: IFFALSE 15704
// loseCounter := loseCounter + 1 ;
15690: LD_ADDR_EXP 14
15694: PUSH
15695: LD_EXP 14
15699: PUSH
15700: LD_INT 1
15702: PLUS
15703: ST_TO_ADDR
// if un = omikron then
15704: LD_VAR 0 1
15708: PUSH
15709: LD_INT 64
15711: EQUAL
15712: IFFALSE 15722
// omicronFall := true ;
15714: LD_ADDR_EXP 13
15718: PUSH
15719: LD_INT 1
15721: ST_TO_ADDR
// if un = kirov then
15722: LD_VAR 0 1
15726: PUSH
15727: LD_INT 71
15729: EQUAL
15730: IFFALSE 15747
// begin ChangeMissionObjectives ( KirovDone ) ;
15732: LD_STRING KirovDone
15734: PPUSH
15735: CALL_OW 337
// kirovDestroyed := true ;
15739: LD_ADDR_EXP 16
15743: PUSH
15744: LD_INT 1
15746: ST_TO_ADDR
// end ; if un = beria then
15747: LD_VAR 0 1
15751: PUSH
15752: LD_INT 106
15754: EQUAL
15755: IFFALSE 15772
// begin ChangeMissionObjectives ( BeriaDone ) ;
15757: LD_STRING BeriaDone
15759: PPUSH
15760: CALL_OW 337
// beriaDestroyed := true ;
15764: LD_ADDR_EXP 17
15768: PUSH
15769: LD_INT 1
15771: ST_TO_ADDR
// end ; if un = kagan then
15772: LD_VAR 0 1
15776: PUSH
15777: LD_INT 112
15779: EQUAL
15780: IFFALSE 15797
// begin ChangeMissionObjectives ( KaganDone ) ;
15782: LD_STRING KaganDone
15784: PPUSH
15785: CALL_OW 337
// kaganDestroyed := true ;
15789: LD_ADDR_EXP 18
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// end ; if un in russianPatrol then
15797: LD_VAR 0 1
15801: PUSH
15802: LD_EXP 44
15806: IN
15807: IFFALSE 15848
// begin if GetTag ( un ) = 2 then
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 110
15818: PUSH
15819: LD_INT 2
15821: EQUAL
15822: IFFALSE 15832
// spottedByPatrol := false ;
15824: LD_ADDR_EXP 7
15828: PUSH
15829: LD_INT 0
15831: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
15832: LD_ADDR_EXP 44
15836: PUSH
15837: LD_EXP 44
15841: PUSH
15842: LD_VAR 0 1
15846: DIFF
15847: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
15848: LD_VAR 0 1
15852: PUSH
15853: LD_EXP 45
15857: IN
15858: IFFALSE 15876
// russianOmicronAttackers := russianOmicronAttackers diff un ;
15860: LD_ADDR_EXP 45
15864: PUSH
15865: LD_EXP 45
15869: PUSH
15870: LD_VAR 0 1
15874: DIFF
15875: ST_TO_ADDR
// end ;
15876: PPOPN 1
15878: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
15879: LD_INT 0
15881: PPUSH
15882: PPUSH
15883: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
15884: LD_VAR 0 1
15888: PUSH
15889: LD_INT 2
15891: PUSH
15892: LD_INT 22
15894: PUSH
15895: LD_INT 3
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_INT 4
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 22
15914: PUSH
15915: LD_INT 6
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 30
15930: PUSH
15931: LD_INT 32
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: IN
15947: IFFALSE 16120
// begin sol := UnitsInside ( un ) ;
15949: LD_ADDR_VAR 0 3
15953: PUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 313
15963: ST_TO_ADDR
// if not sol then
15964: LD_VAR 0 3
15968: NOT
15969: IFFALSE 15973
// exit ;
15971: GO 16120
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15973: LD_ADDR_VAR 0 4
15977: PUSH
15978: LD_INT 22
15980: PUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 255
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: LD_INT 30
16000: PUSH
16001: LD_INT 4
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 30
16010: PUSH
16011: LD_INT 5
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// if not nearestBarracks then
16032: LD_VAR 0 4
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16120
// for i in nearestBarracks do
16041: LD_ADDR_VAR 0 2
16045: PUSH
16046: LD_VAR 0 4
16050: PUSH
16051: FOR_IN
16052: IFFALSE 16087
// if UnitsInside ( i ) = 6 then
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 313
16063: PUSH
16064: LD_INT 6
16066: EQUAL
16067: IFFALSE 16085
// nearestBarracks := nearestBarracks diff i ;
16069: LD_ADDR_VAR 0 4
16073: PUSH
16074: LD_VAR 0 4
16078: PUSH
16079: LD_VAR 0 2
16083: DIFF
16084: ST_TO_ADDR
16085: GO 16051
16087: POP
16088: POP
// if not nearestBarracks then
16089: LD_VAR 0 4
16093: NOT
16094: IFFALSE 16098
// exit ;
16096: GO 16120
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: PPUSH
16107: LD_VAR 0 4
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: CALL_OW 120
// end ; end ;
16120: PPOPN 4
16122: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16123: LD_INT 0
16125: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16126: LD_EXP 8
16130: NOT
16131: PUSH
16132: LD_EXP 5
16136: NOT
16137: OR
16138: IFFALSE 16142
// exit ;
16140: GO 16210
// for i in camAreas do
16142: LD_ADDR_VAR 0 5
16146: PUSH
16147: LD_EXP 8
16151: PUSH
16152: FOR_IN
16153: IFFALSE 16208
// if InArea ( x , y , i ) then
16155: LD_VAR 0 3
16159: PPUSH
16160: LD_VAR 0 4
16164: PPUSH
16165: LD_VAR 0 5
16169: PPUSH
16170: CALL_OW 309
16174: IFFALSE 16206
// begin SetAreaMapShow ( i , 0 ) ;
16176: LD_VAR 0 5
16180: PPUSH
16181: LD_INT 0
16183: PPUSH
16184: CALL_OW 424
// camAreas := camAreas diff i ;
16188: LD_ADDR_EXP 8
16192: PUSH
16193: LD_EXP 8
16197: PUSH
16198: LD_VAR 0 5
16202: DIFF
16203: ST_TO_ADDR
// break ;
16204: GO 16208
// end ;
16206: GO 16152
16208: POP
16209: POP
// end ;
16210: PPOPN 5
16212: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16213: LD_VAR 0 1
16217: PUSH
16218: LD_INT 2
16220: EQUAL
16221: PUSH
16222: LD_VAR 0 2
16226: PUSH
16227: LD_INT 5
16229: PUSH
16230: LD_INT 8
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: IN
16237: AND
16238: IFFALSE 16247
// YouLost ( Ally ) ;
16240: LD_STRING Ally
16242: PPUSH
16243: CALL_OW 104
// end ; end_of_file
16247: PPOPN 2
16249: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16250: LD_EXP 11
16254: NOT
16255: PUSH
16256: LD_INT 12
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 287
16266: PUSH
16267: LD_INT 20
16269: PUSH
16270: LD_INT 16
16272: PUSH
16273: LD_INT 12
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: PUSH
16281: LD_OWVAR 67
16285: ARRAY
16286: LESS
16287: AND
16288: IFFALSE 16315
16290: GO 16292
16292: DISABLE
// begin enable ;
16293: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16294: LD_INT 1
16296: PPUSH
16297: LD_INT 5
16299: PPUSH
16300: CALL_OW 12
16304: PPUSH
16305: LD_INT 12
16307: PPUSH
16308: LD_INT 1
16310: PPUSH
16311: CALL_OW 55
// end ; end_of_file
16315: END
