// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1776 0 0
// PrepareArabian ;
  12: CALL 2146 0 0
// PrepareAmerican ;
  16: CALL 6850 0 0
// PrepareRussian ;
  20: CALL 3102 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8410 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// kaganCaptured := false ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
// if exist_mode then
 286: LD_VAR 0 2
 290: IFFALSE 315
// unit := CreateCharacter ( prefix & ident ) else
 292: LD_ADDR_VAR 0 5
 296: PUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_VAR 0 1
 306: STR
 307: PPUSH
 308: CALL_OW 34
 312: ST_TO_ADDR
 313: GO 330
// unit := NewCharacter ( ident ) ;
 315: LD_ADDR_VAR 0 5
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 25
 329: ST_TO_ADDR
// result := unit ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 5
 339: ST_TO_ADDR
// end ;
 340: LD_VAR 0 4
 344: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 345: LD_INT 0
 347: PPUSH
// uc_side := side ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_VAR 0 1
 357: ST_TO_ADDR
// uc_nation := nation ;
 358: LD_ADDR_OWVAR 21
 362: PUSH
 363: LD_VAR 0 2
 367: ST_TO_ADDR
// vc_chassis := chassis ;
 368: LD_ADDR_OWVAR 37
 372: PUSH
 373: LD_VAR 0 3
 377: ST_TO_ADDR
// vc_engine := engine ;
 378: LD_ADDR_OWVAR 39
 382: PUSH
 383: LD_VAR 0 4
 387: ST_TO_ADDR
// vc_control := control ;
 388: LD_ADDR_OWVAR 38
 392: PUSH
 393: LD_VAR 0 5
 397: ST_TO_ADDR
// vc_weapon := weapon ;
 398: LD_ADDR_OWVAR 40
 402: PUSH
 403: LD_VAR 0 6
 407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 408: LD_ADDR_OWVAR 41
 412: PUSH
 413: LD_VAR 0 7
 417: ST_TO_ADDR
// result := CreateVehicle ;
 418: LD_ADDR_VAR 0 8
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// end ;
 428: LD_VAR 0 8
 432: RET
// export function SayX ( units , ident ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// result := false ;
 437: LD_ADDR_VAR 0 3
 441: PUSH
 442: LD_INT 0
 444: ST_TO_ADDR
// if not units then
 445: LD_VAR 0 1
 449: NOT
 450: IFFALSE 454
// exit ;
 452: GO 508
// for i in units do
 454: LD_ADDR_VAR 0 4
 458: PUSH
 459: LD_VAR 0 1
 463: PUSH
 464: FOR_IN
 465: IFFALSE 506
// if IsOk ( i ) then
 467: LD_VAR 0 4
 471: PPUSH
 472: CALL_OW 302
 476: IFFALSE 504
// begin Say ( i , ident ) ;
 478: LD_VAR 0 4
 482: PPUSH
 483: LD_VAR 0 2
 487: PPUSH
 488: CALL_OW 88
// result := i ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: LD_VAR 0 4
 501: ST_TO_ADDR
// break ;
 502: GO 506
// end ;
 504: GO 464
 506: POP
 507: POP
// end ;
 508: LD_VAR 0 3
 512: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
 517: PPUSH
// if not observer or not unit then
 518: LD_VAR 0 1
 522: NOT
 523: PUSH
 524: LD_VAR 0 2
 528: NOT
 529: OR
 530: IFFALSE 534
// exit ;
 532: GO 582
// if not See ( GetSide ( observer ) , unit ) then
 534: LD_VAR 0 1
 538: PPUSH
 539: CALL_OW 255
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 292
 553: NOT
 554: IFFALSE 558
// exit ;
 556: GO 582
// result := GetDistUnits ( observer , unit ) < 12 ;
 558: LD_ADDR_VAR 0 3
 562: PUSH
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: CALL_OW 296
 577: PUSH
 578: LD_INT 12
 580: LESS
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 3
 586: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 587: LD_INT 0
 589: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 590: LD_VAR 0 2
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 2
 606: ARRAY
 607: PPUSH
 608: CALL_OW 488
 612: PUSH
 613: LD_VAR 0 2
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: CALL_OW 428
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: AND
 640: IFFALSE 674
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: PPUSH
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 2
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 3
 669: PPUSH
 670: CALL_OW 48
// end ;
 674: LD_VAR 0 4
 678: RET
// export function Video ( mode ) ; begin
 679: LD_INT 0
 681: PPUSH
// ingame_video = mode ;
 682: LD_ADDR_OWVAR 52
 686: PUSH
 687: LD_VAR 0 1
 691: ST_TO_ADDR
// interface_hidden = mode ;
 692: LD_ADDR_OWVAR 54
 696: PUSH
 697: LD_VAR 0 1
 701: ST_TO_ADDR
// end ;
 702: LD_VAR 0 2
 706: RET
// export function ReverseArray ( array ) ; var i ; begin
 707: LD_INT 0
 709: PPUSH
 710: PPUSH
// if not array then
 711: LD_VAR 0 1
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 778
// result := [ ] ;
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// for i := 1 to array do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_VAR 0 1
 741: PUSH
 742: FOR_TO
 743: IFFALSE 776
// result := Insert ( result , 1 , array [ i ] ) ;
 745: LD_ADDR_VAR 0 2
 749: PUSH
 750: LD_VAR 0 2
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_VAR 0 1
 762: PUSH
 763: LD_VAR 0 3
 767: ARRAY
 768: PPUSH
 769: CALL_OW 2
 773: ST_TO_ADDR
 774: GO 742
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 2
 782: RET
// export function ComExit ( unit ) ; begin
 783: LD_INT 0
 785: PPUSH
// result := IsInUnit ( unit ) ;
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 310
 800: ST_TO_ADDR
// if not result then
 801: LD_VAR 0 2
 805: NOT
 806: IFFALSE 810
// exit ;
 808: GO 845
// if GetType ( result ) = unit_vehicle then
 810: LD_VAR 0 2
 814: PPUSH
 815: CALL_OW 247
 819: PUSH
 820: LD_INT 2
 822: EQUAL
 823: IFFALSE 836
// ComExitVehicle ( unit ) else
 825: LD_VAR 0 1
 829: PPUSH
 830: CALL_OW 121
 834: GO 845
// ComExitBuilding ( unit ) ;
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 122
// end ;
 845: LD_VAR 0 2
 849: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
// if not side or not nation then
 854: LD_VAR 0 1
 858: NOT
 859: PUSH
 860: LD_VAR 0 2
 864: NOT
 865: OR
 866: IFFALSE 870
// exit ;
 868: GO 1634
// case nation of nation_american :
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: DOUBLE
 878: EQUAL
 879: IFTRUE 883
 881: GO 1097
 883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 35
 891: PUSH
 892: LD_INT 45
 894: PUSH
 895: LD_INT 46
 897: PUSH
 898: LD_INT 47
 900: PUSH
 901: LD_INT 82
 903: PUSH
 904: LD_INT 83
 906: PUSH
 907: LD_INT 84
 909: PUSH
 910: LD_INT 85
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: LD_INT 15
 927: PUSH
 928: LD_INT 16
 930: PUSH
 931: LD_INT 7
 933: PUSH
 934: LD_INT 12
 936: PUSH
 937: LD_INT 13
 939: PUSH
 940: LD_INT 10
 942: PUSH
 943: LD_INT 14
 945: PUSH
 946: LD_INT 20
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 25
 957: PUSH
 958: LD_INT 32
 960: PUSH
 961: LD_INT 27
 963: PUSH
 964: LD_INT 36
 966: PUSH
 967: LD_INT 69
 969: PUSH
 970: LD_INT 39
 972: PUSH
 973: LD_INT 34
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 48
 981: PUSH
 982: LD_INT 49
 984: PUSH
 985: LD_INT 50
 987: PUSH
 988: LD_INT 51
 990: PUSH
 991: LD_INT 52
 993: PUSH
 994: LD_INT 53
 996: PUSH
 997: LD_INT 54
 999: PUSH
1000: LD_INT 55
1002: PUSH
1003: LD_INT 56
1005: PUSH
1006: LD_INT 57
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: LD_INT 59
1014: PUSH
1015: LD_INT 60
1017: PUSH
1018: LD_INT 61
1020: PUSH
1021: LD_INT 62
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 82
1029: PUSH
1030: LD_INT 83
1032: PUSH
1033: LD_INT 84
1035: PUSH
1036: LD_INT 85
1038: PUSH
1039: LD_INT 86
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1558
1097: LD_INT 2
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1327
1105: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_INT 35
1113: PUSH
1114: LD_INT 45
1116: PUSH
1117: LD_INT 46
1119: PUSH
1120: LD_INT 47
1122: PUSH
1123: LD_INT 82
1125: PUSH
1126: LD_INT 83
1128: PUSH
1129: LD_INT 84
1131: PUSH
1132: LD_INT 85
1134: PUSH
1135: LD_INT 87
1137: PUSH
1138: LD_INT 70
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 11
1146: PUSH
1147: LD_INT 3
1149: PUSH
1150: LD_INT 4
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 6
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 18
1164: PUSH
1165: LD_INT 7
1167: PUSH
1168: LD_INT 17
1170: PUSH
1171: LD_INT 8
1173: PUSH
1174: LD_INT 20
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 72
1185: PUSH
1186: LD_INT 26
1188: PUSH
1189: LD_INT 69
1191: PUSH
1192: LD_INT 39
1194: PUSH
1195: LD_INT 40
1197: PUSH
1198: LD_INT 41
1200: PUSH
1201: LD_INT 42
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 48
1209: PUSH
1210: LD_INT 49
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 51
1218: PUSH
1219: LD_INT 52
1221: PUSH
1222: LD_INT 53
1224: PUSH
1225: LD_INT 54
1227: PUSH
1228: LD_INT 55
1230: PUSH
1231: LD_INT 56
1233: PUSH
1234: LD_INT 60
1236: PUSH
1237: LD_INT 61
1239: PUSH
1240: LD_INT 62
1242: PUSH
1243: LD_INT 66
1245: PUSH
1246: LD_INT 67
1248: PUSH
1249: LD_INT 68
1251: PUSH
1252: LD_INT 81
1254: PUSH
1255: LD_INT 82
1257: PUSH
1258: LD_INT 83
1260: PUSH
1261: LD_INT 84
1263: PUSH
1264: LD_INT 85
1266: PUSH
1267: LD_INT 87
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
1325: GO 1558
1327: LD_INT 3
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1557
1335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 46
1343: PUSH
1344: LD_INT 47
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: LD_INT 82
1355: PUSH
1356: LD_INT 83
1358: PUSH
1359: LD_INT 84
1361: PUSH
1362: LD_INT 85
1364: PUSH
1365: LD_INT 86
1367: PUSH
1368: LD_INT 11
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 20
1376: PUSH
1377: LD_INT 19
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 24
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 25
1391: PUSH
1392: LD_INT 28
1394: PUSH
1395: LD_INT 29
1397: PUSH
1398: LD_INT 30
1400: PUSH
1401: LD_INT 31
1403: PUSH
1404: LD_INT 37
1406: PUSH
1407: LD_INT 38
1409: PUSH
1410: LD_INT 32
1412: PUSH
1413: LD_INT 27
1415: PUSH
1416: LD_INT 33
1418: PUSH
1419: LD_INT 69
1421: PUSH
1422: LD_INT 39
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 40
1430: PUSH
1431: LD_INT 71
1433: PUSH
1434: LD_INT 23
1436: PUSH
1437: LD_INT 44
1439: PUSH
1440: LD_INT 48
1442: PUSH
1443: LD_INT 49
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 51
1451: PUSH
1452: LD_INT 52
1454: PUSH
1455: LD_INT 53
1457: PUSH
1458: LD_INT 54
1460: PUSH
1461: LD_INT 55
1463: PUSH
1464: LD_INT 56
1466: PUSH
1467: LD_INT 57
1469: PUSH
1470: LD_INT 58
1472: PUSH
1473: LD_INT 59
1475: PUSH
1476: LD_INT 63
1478: PUSH
1479: LD_INT 64
1481: PUSH
1482: LD_INT 65
1484: PUSH
1485: LD_INT 82
1487: PUSH
1488: LD_INT 83
1490: PUSH
1491: LD_INT 84
1493: PUSH
1494: LD_INT 85
1496: PUSH
1497: LD_INT 86
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: ST_TO_ADDR
1555: GO 1558
1557: POP
// if state > - 1 and state < 3 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 1
1565: NEG
1566: GREATER
1567: PUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 3
1575: LESS
1576: AND
1577: IFFALSE 1634
// for i in result do
1579: LD_ADDR_VAR 0 5
1583: PUSH
1584: LD_VAR 0 4
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1632
// if GetTech ( i , side ) <> state then
1592: LD_VAR 0 5
1596: PPUSH
1597: LD_VAR 0 1
1601: PPUSH
1602: CALL_OW 321
1606: PUSH
1607: LD_VAR 0 3
1611: NONEQUAL
1612: IFFALSE 1630
// result := result diff i ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_VAR 0 4
1623: PUSH
1624: LD_VAR 0 5
1628: DIFF
1629: ST_TO_ADDR
1630: GO 1589
1632: POP
1633: POP
// end ;
1634: LD_VAR 0 4
1638: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
// InitUc ;
1643: CALL_OW 18
// InitHc ;
1647: CALL_OW 19
// uc_side := 0 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// uc_nation := 0 ;
1659: LD_ADDR_OWVAR 21
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// for i = 1 to amount do
1667: LD_ADDR_VAR 0 4
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_VAR 0 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1765
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1685: LD_ADDR_OWVAR 29
1689: PUSH
1690: LD_INT 9
1692: PPUSH
1693: LD_INT 12
1695: PPUSH
1696: CALL_OW 12
1700: PUSH
1701: LD_INT 9
1703: PPUSH
1704: LD_INT 12
1706: PPUSH
1707: CALL_OW 12
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1716: LD_ADDR_OWVAR 35
1720: PUSH
1721: LD_INT 1
1723: NEG
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 12
1732: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1733: LD_INT 0
1735: PPUSH
1736: LD_INT 12
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1746: CALL_OW 44
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end ;
1763: GO 1682
1765: POP
1766: POP
// InitHc ;
1767: CALL_OW 19
// end ;
1771: LD_VAR 0 3
1775: RET
// export function PrepareNature ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1780: LD_INT 18
1782: PPUSH
1783: LD_INT 5
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_OWVAR 67
1801: ARRAY
1802: PPUSH
1803: CALL 1639 0 2
// for i := 1 to 3 do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 3
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1856
// begin hc_class := 21 ;
1823: LD_ADDR_OWVAR 28
1827: PUSH
1828: LD_INT 21
1830: ST_TO_ADDR
// hc_gallery :=  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1839: CALL_OW 44
1843: PPUSH
1844: LD_INT 18
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// end ;
1854: GO 1820
1856: POP
1857: POP
// for i := 1 to 2 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 2
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1907
// begin hc_class := 18 ;
1874: LD_ADDR_OWVAR 28
1878: PUSH
1879: LD_INT 18
1881: ST_TO_ADDR
// hc_gallery :=  ;
1882: LD_ADDR_OWVAR 33
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1890: CALL_OW 44
1894: PPUSH
1895: LD_INT 18
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1871
1907: POP
1908: POP
// for i := 1 to 2 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 2
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1958
// begin hc_class := 13 ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 13
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_INT 18
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// end ;
1956: GO 1922
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
1971: PPUSH
// result := false ;
1972: LD_ADDR_VAR 0 4
1976: PUSH
1977: LD_INT 0
1979: ST_TO_ADDR
// if not sideList or not enemySide then
1980: LD_VAR 0 1
1984: NOT
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2141
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1996: LD_ADDR_VAR 0 7
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_VAR 0 2
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PPUSH
2013: CALL_OW 69
2017: ST_TO_ADDR
// if not tmp then
2018: LD_VAR 0 7
2022: NOT
2023: IFFALSE 2027
// exit ;
2025: GO 2141
// for s in sideList do
2027: LD_ADDR_VAR 0 6
2031: PUSH
2032: LD_VAR 0 1
2036: PUSH
2037: FOR_IN
2038: IFFALSE 2139
// for i in tmp do
2040: LD_ADDR_VAR 0 5
2044: PUSH
2045: LD_VAR 0 7
2049: PUSH
2050: FOR_IN
2051: IFFALSE 2135
// if See ( s , i ) then
2053: LD_VAR 0 6
2057: PPUSH
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 292
2067: IFFALSE 2133
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2069: LD_ADDR_VAR 0 8
2073: PUSH
2074: LD_INT 22
2076: PUSH
2077: LD_VAR 0 6
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PPUSH
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 74
2100: ST_TO_ADDR
// if tmp2 in exceptUnits then
2101: LD_VAR 0 8
2105: PUSH
2106: LD_VAR 0 3
2110: IN
2111: IFFALSE 2117
// continue else
2113: GO 2050
2115: GO 2133
// begin result := tmp2 ;
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: LD_VAR 0 8
2126: ST_TO_ADDR
// exit ;
2127: POP
2128: POP
2129: POP
2130: POP
2131: GO 2141
// end ; end ;
2133: GO 2050
2135: POP
2136: POP
2137: GO 2037
2139: POP
2140: POP
// end ; end_of_file
2141: LD_VAR 0 4
2145: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2146: LD_INT 0
2148: PPUSH
2149: PPUSH
// uc_side := 5 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 5
2157: ST_TO_ADDR
// uc_nation := 2 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 2
2165: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2166: LD_ADDR_EXP 36
2170: PUSH
2171: LD_STRING Abdul
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 282 0 3
2184: ST_TO_ADDR
// uc_side := 2 ;
2185: LD_ADDR_OWVAR 20
2189: PUSH
2190: LD_INT 2
2192: ST_TO_ADDR
// uc_nation := 2 ;
2193: LD_ADDR_OWVAR 21
2197: PUSH
2198: LD_INT 2
2200: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2201: LD_ADDR_EXP 25
2205: PUSH
2206: LD_STRING Heike
2208: PPUSH
2209: LD_EXP 1
2213: NOT
2214: PPUSH
2215: LD_EXP 2
2219: PPUSH
2220: CALL 282 0 3
2224: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2225: LD_ADDR_EXP 28
2229: PUSH
2230: LD_STRING Ibrahim
2232: PPUSH
2233: LD_EXP 1
2237: NOT
2238: PPUSH
2239: LD_EXP 2
2243: PPUSH
2244: CALL 282 0 3
2248: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2249: LD_ADDR_EXP 26
2253: PUSH
2254: LD_STRING Givi
2256: PPUSH
2257: LD_EXP 1
2261: NOT
2262: PPUSH
2263: LD_EXP 2
2267: PPUSH
2268: CALL 282 0 3
2272: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2273: LD_ADDR_EXP 29
2277: PUSH
2278: LD_STRING Kamil
2280: PPUSH
2281: LD_EXP 1
2285: NOT
2286: PPUSH
2287: LD_EXP 2
2291: PPUSH
2292: CALL 282 0 3
2296: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2297: LD_ADDR_EXP 30
2301: PUSH
2302: LD_STRING Kaia
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_EXP 2
2315: PPUSH
2316: CALL 282 0 3
2320: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2321: LD_ADDR_EXP 31
2325: PUSH
2326: LD_STRING Sophia
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_EXP 2
2339: PPUSH
2340: CALL 282 0 3
2344: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2345: LD_ADDR_EXP 32
2349: PUSH
2350: LD_STRING Markov
2352: PPUSH
2353: LD_EXP 1
2357: NOT
2358: PPUSH
2359: LD_EXP 2
2363: PPUSH
2364: CALL 282 0 3
2368: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2369: LD_ADDR_EXP 35
2373: PUSH
2374: LD_STRING Aviradze
2376: PPUSH
2377: LD_EXP 1
2381: NOT
2382: PPUSH
2383: LD_EXP 2
2387: PPUSH
2388: CALL 282 0 3
2392: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2393: LD_ADDR_EXP 39
2397: PUSH
2398: EMPTY
2399: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2400: LD_ADDR_EXP 37
2404: PUSH
2405: LD_STRING 03_others
2407: PPUSH
2408: CALL_OW 31
2412: ST_TO_ADDR
// uc_side := 5 ;
2413: LD_ADDR_OWVAR 20
2417: PUSH
2418: LD_INT 5
2420: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2421: LD_ADDR_EXP 34
2425: PUSH
2426: LD_STRING Kurt
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: LD_STRING 
2434: PPUSH
2435: CALL 282 0 3
2439: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2440: LD_ADDR_EXP 27
2444: PUSH
2445: LD_STRING Mike
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_EXP 2
2458: PPUSH
2459: CALL 282 0 3
2463: ST_TO_ADDR
// if Mike then
2464: LD_EXP 27
2468: IFFALSE 2491
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2470: LD_EXP 27
2474: PPUSH
2475: LD_INT 142
2477: PPUSH
2478: LD_INT 63
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2491: LD_EXP 34
2495: PPUSH
2496: LD_INT 142
2498: PPUSH
2499: LD_INT 63
2501: PPUSH
2502: LD_INT 3
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2512: LD_EXP 34
2516: PUSH
2517: LD_EXP 27
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PPUSH
2526: CALL_OW 140
// end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
// uc_side := 5 ;
2541: LD_ADDR_OWVAR 20
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// uc_nation := 2 ;
2549: LD_ADDR_OWVAR 21
2553: PUSH
2554: LD_INT 2
2556: ST_TO_ADDR
// InitHc ;
2557: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2561: LD_ADDR_EXP 33
2565: PUSH
2566: LD_STRING Omar
2568: PPUSH
2569: LD_INT 0
2571: PPUSH
2572: LD_STRING 
2574: PPUSH
2575: CALL 282 0 3
2579: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2580: LD_EXP 33
2584: PPUSH
2585: LD_INT 284
2587: PPUSH
2588: LD_INT 163
2590: PPUSH
2591: LD_INT 0
2593: PPUSH
2594: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2598: LD_EXP 33
2602: PPUSH
2603: LD_INT 256
2605: PPUSH
2606: LD_INT 129
2608: PPUSH
2609: CALL_OW 111
// wait ( 0 0$2 ) ;
2613: LD_INT 70
2615: PPUSH
2616: CALL_OW 67
// omarSquad := [ ] ;
2620: LD_ADDR_EXP 38
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 5 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 5
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2847
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2643: LD_INT 5
2645: PPUSH
2646: LD_INT 2
2648: PPUSH
2649: LD_INT 13
2651: PUSH
2652: LD_INT 14
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: MOD
2667: PUSH
2668: LD_INT 1
2670: PLUS
2671: ARRAY
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: LD_INT 25
2681: PUSH
2682: LD_INT 27
2684: PUSH
2685: LD_INT 26
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: LIST
2692: PUSH
2693: LD_VAR 0 2
2697: PUSH
2698: LD_INT 3
2700: MOD
2701: PUSH
2702: LD_INT 1
2704: PLUS
2705: ARRAY
2706: PPUSH
2707: LD_INT 100
2709: PPUSH
2710: CALL 345 0 7
// veh := CreateVehicle ;
2714: LD_ADDR_VAR 0 4
2718: PUSH
2719: CALL_OW 45
2723: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_INT 5
2731: PPUSH
2732: CALL_OW 233
// omarSquad := omarSquad union veh ;
2736: LD_ADDR_EXP 38
2740: PUSH
2741: LD_EXP 38
2745: PUSH
2746: LD_VAR 0 4
2750: UNION
2751: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 284
2759: PPUSH
2760: LD_INT 163
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2770: LD_INT 0
2772: PPUSH
2773: LD_INT 3
2775: PPUSH
2776: LD_INT 3
2778: PPUSH
2779: CALL_OW 380
// un := CreateHuman ;
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: CALL_OW 44
2792: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2793: LD_ADDR_EXP 38
2797: PUSH
2798: LD_EXP 38
2802: PUSH
2803: LD_VAR 0 3
2807: UNION
2808: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2809: LD_VAR 0 3
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2823: LD_VAR 0 3
2827: PPUSH
2828: LD_INT 271
2830: PPUSH
2831: LD_INT 144
2833: PPUSH
2834: CALL_OW 111
// wait ( 0 0$2 ) ;
2838: LD_INT 70
2840: PPUSH
2841: CALL_OW 67
// end ;
2845: GO 2640
2847: POP
2848: POP
// for i := 1 to 3 do
2849: LD_ADDR_VAR 0 2
2853: PUSH
2854: DOUBLE
2855: LD_INT 1
2857: DEC
2858: ST_TO_ADDR
2859: LD_INT 3
2861: PUSH
2862: FOR_TO
2863: IFFALSE 2946
// begin PrepareHuman ( false , 1 , 3 ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 3
2873: PPUSH
2874: CALL_OW 380
// un := CreateHuman ;
2878: LD_ADDR_VAR 0 3
2882: PUSH
2883: CALL_OW 44
2887: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2888: LD_ADDR_EXP 38
2892: PUSH
2893: LD_EXP 38
2897: PUSH
2898: LD_VAR 0 3
2902: UNION
2903: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2904: LD_VAR 0 3
2908: PPUSH
2909: LD_INT 284
2911: PPUSH
2912: LD_INT 163
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 257
2929: PPUSH
2930: LD_INT 138
2932: PPUSH
2933: CALL_OW 111
// wait ( 0 0$1 ) ;
2937: LD_INT 35
2939: PPUSH
2940: CALL_OW 67
// end ;
2944: GO 2862
2946: POP
2947: POP
// for i := 1 to 6 do
2948: LD_ADDR_VAR 0 2
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 6
2960: PUSH
2961: FOR_TO
2962: IFFALSE 3095
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2964: LD_INT 0
2966: PPUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 4
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: PUSH
2981: LD_VAR 0 2
2985: PUSH
2986: LD_INT 3
2988: MOD
2989: PUSH
2990: LD_INT 1
2992: PLUS
2993: ARRAY
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: CALL_OW 380
// un := CreateHuman ;
3002: LD_ADDR_VAR 0 3
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3012: LD_ADDR_EXP 38
3016: PUSH
3017: LD_EXP 38
3021: PUSH
3022: LD_VAR 0 3
3026: UNION
3027: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3028: LD_VAR 0 3
3032: PPUSH
3033: LD_INT 225
3035: PPUSH
3036: LD_INT 163
3038: PPUSH
3039: LD_INT 0
3041: PPUSH
3042: CALL_OW 48
// if i = 1 then
3046: LD_VAR 0 2
3050: PUSH
3051: LD_INT 1
3053: EQUAL
3054: IFFALSE 3071
// SetAttr ( un , attr_speed , 12 ) ;
3056: LD_VAR 0 3
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: LD_INT 12
3066: PPUSH
3067: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3071: LD_VAR 0 3
3075: PPUSH
3076: LD_INT 222
3078: PPUSH
3079: LD_INT 157
3081: PPUSH
3082: CALL_OW 111
// wait ( 0 0$1 ) ;
3086: LD_INT 35
3088: PPUSH
3089: CALL_OW 67
// end ;
3093: GO 2961
3095: POP
3096: POP
// end ; end_of_file
3097: LD_VAR 0 1
3101: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
3110: LD_ADDR_EXP 50
3114: PUSH
3115: LD_INT 22
3117: PUSH
3118: LD_INT 3
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 30
3127: PUSH
3128: LD_INT 7
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 69
3143: PUSH
3144: LD_INT 1
3146: ARRAY
3147: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_INT 21
3155: PUSH
3156: LD_INT 3
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PUSH
3163: LD_INT 23
3165: PUSH
3166: LD_INT 3
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PPUSH
3177: CALL_OW 69
3181: PUSH
3182: FOR_IN
3183: IFFALSE 3199
// SetBLevel ( i , 5 ) ;
3185: LD_VAR 0 2
3189: PPUSH
3190: LD_INT 5
3192: PPUSH
3193: CALL_OW 241
3197: GO 3182
3199: POP
3200: POP
// SetBName ( kirov , kirov ) ;
3201: LD_INT 71
3203: PPUSH
3204: LD_STRING kirov
3206: PPUSH
3207: CALL_OW 500
// SetBName ( beria , beria ) ;
3211: LD_INT 106
3213: PPUSH
3214: LD_STRING beria
3216: PPUSH
3217: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3221: LD_INT 112
3223: PPUSH
3224: LD_STRING kagan
3226: PPUSH
3227: CALL_OW 500
// uc_side := 6 ;
3231: LD_ADDR_OWVAR 20
3235: PUSH
3236: LD_INT 6
3238: ST_TO_ADDR
// uc_nation := 3 ;
3239: LD_ADDR_OWVAR 21
3243: PUSH
3244: LD_INT 3
3246: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3247: LD_ADDR_VAR 0 5
3251: PUSH
3252: LD_INT 22
3254: PUSH
3255: LD_INT 6
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 30
3264: PUSH
3265: LD_INT 5
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: PUSH
3281: LD_INT 1
3283: ARRAY
3284: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3285: LD_ADDR_VAR 0 4
3289: PUSH
3290: LD_INT 22
3292: PUSH
3293: LD_INT 6
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 30
3302: PUSH
3303: LD_INT 4
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PPUSH
3314: CALL_OW 69
3318: PUSH
3319: LD_INT 1
3321: ARRAY
3322: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3323: LD_ADDR_EXP 44
3327: PUSH
3328: EMPTY
3329: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3330: LD_ADDR_EXP 45
3334: PUSH
3335: EMPTY
3336: ST_TO_ADDR
// russianPatrol := [ ] ;
3337: LD_ADDR_EXP 47
3341: PUSH
3342: EMPTY
3343: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3344: LD_ADDR_EXP 40
3348: PUSH
3349: LD_STRING Kurin
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: LD_STRING 
3357: PPUSH
3358: CALL 282 0 3
3362: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3363: LD_EXP 40
3367: PPUSH
3368: LD_INT 71
3370: PPUSH
3371: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3375: LD_ADDR_EXP 42
3379: PUSH
3380: LD_STRING Popov
3382: PPUSH
3383: LD_INT 0
3385: PPUSH
3386: LD_STRING 
3388: PPUSH
3389: CALL 282 0 3
3393: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3394: LD_EXP 42
3398: PPUSH
3399: LD_INT 71
3401: PPUSH
3402: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3406: LD_ADDR_EXP 41
3410: PUSH
3411: LD_STRING Grishko
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: LD_STRING 
3419: PPUSH
3420: CALL 282 0 3
3424: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3425: LD_EXP 41
3429: PPUSH
3430: LD_INT 207
3432: PPUSH
3433: LD_INT 106
3435: PPUSH
3436: LD_INT 0
3438: PPUSH
3439: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3443: LD_EXP 41
3447: PPUSH
3448: LD_INT 209
3450: PPUSH
3451: LD_INT 106
3453: PPUSH
3454: CALL_OW 118
// for i := 1 to 2 do
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: DOUBLE
3464: LD_INT 1
3466: DEC
3467: ST_TO_ADDR
3468: LD_INT 2
3470: PUSH
3471: FOR_TO
3472: IFFALSE 3527
// begin PrepareHuman ( false , 2 , 2 ) ;
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 2
3479: PPUSH
3480: LD_INT 2
3482: PPUSH
3483: CALL_OW 380
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 3
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3497: LD_VAR 0 3
3501: PPUSH
3502: LD_INT 71
3504: PPUSH
3505: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3509: LD_ADDR_EXP 44
3513: PUSH
3514: LD_EXP 44
3518: PUSH
3519: LD_VAR 0 3
3523: UNION
3524: ST_TO_ADDR
// end ;
3525: GO 3471
3527: POP
3528: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 5
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 6
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: PUSH
3553: LD_OWVAR 67
3557: ARRAY
3558: PUSH
3559: FOR_TO
3560: IFFALSE 3634
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3562: LD_INT 0
3564: PPUSH
3565: LD_INT 1
3567: PPUSH
3568: LD_INT 2
3570: PUSH
3571: LD_INT 3
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: LD_OWVAR 67
3586: ARRAY
3587: PPUSH
3588: CALL_OW 380
// un := CreateHuman ;
3592: LD_ADDR_VAR 0 3
3596: PUSH
3597: CALL_OW 44
3601: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_VAR 0 5
3611: PPUSH
3612: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3616: LD_ADDR_EXP 44
3620: PUSH
3621: LD_EXP 44
3625: PUSH
3626: LD_VAR 0 3
3630: UNION
3631: ST_TO_ADDR
// end ;
3632: GO 3559
3634: POP
3635: POP
// for i := 1 to 3 do
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: DOUBLE
3642: LD_INT 1
3644: DEC
3645: ST_TO_ADDR
3646: LD_INT 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3705
// begin PrepareHuman ( false , 3 , 3 ) ;
3652: LD_INT 0
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: LD_INT 3
3660: PPUSH
3661: CALL_OW 380
// un := CreateHuman ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: CALL_OW 44
3674: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_INT 92
3682: PPUSH
3683: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3687: LD_ADDR_EXP 44
3691: PUSH
3692: LD_EXP 44
3696: PUSH
3697: LD_VAR 0 3
3701: UNION
3702: ST_TO_ADDR
// end ;
3703: GO 3649
3705: POP
3706: POP
// for i := 1 to 2 do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: DOUBLE
3713: LD_INT 1
3715: DEC
3716: ST_TO_ADDR
3717: LD_INT 2
3719: PUSH
3720: FOR_TO
3721: IFFALSE 3776
// begin PrepareHuman ( false , 4 , 3 ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_INT 4
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: CALL_OW 380
// un := CreateHuman ;
3736: LD_ADDR_VAR 0 3
3740: PUSH
3741: CALL_OW 44
3745: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3746: LD_VAR 0 3
3750: PPUSH
3751: LD_INT 83
3753: PPUSH
3754: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3758: LD_ADDR_EXP 44
3762: PUSH
3763: LD_EXP 44
3767: PUSH
3768: LD_VAR 0 3
3772: UNION
3773: ST_TO_ADDR
// end ;
3774: GO 3720
3776: POP
3777: POP
// for i := 1 to 5 do
3778: LD_ADDR_VAR 0 2
3782: PUSH
3783: DOUBLE
3784: LD_INT 1
3786: DEC
3787: ST_TO_ADDR
3788: LD_INT 5
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3849
// begin PrepareHuman ( false , 1 , 3 ) ;
3794: LD_INT 0
3796: PPUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 3
3802: PPUSH
3803: CALL_OW 380
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 3
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3817: LD_VAR 0 3
3821: PPUSH
3822: LD_VAR 0 4
3826: PPUSH
3827: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3831: LD_ADDR_EXP 46
3835: PUSH
3836: LD_EXP 46
3840: PUSH
3841: LD_VAR 0 3
3845: UNION
3846: ST_TO_ADDR
// end ;
3847: GO 3791
3849: POP
3850: POP
// russianCargo := [ ] ;
3851: LD_ADDR_EXP 49
3855: PUSH
3856: EMPTY
3857: ST_TO_ADDR
// for i := 1 to 2 do
3858: LD_ADDR_VAR 0 2
3862: PUSH
3863: DOUBLE
3864: LD_INT 1
3866: DEC
3867: ST_TO_ADDR
3868: LD_INT 2
3870: PUSH
3871: FOR_TO
3872: IFFALSE 4004
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3874: LD_INT 6
3876: PPUSH
3877: LD_INT 3
3879: PPUSH
3880: LD_INT 21
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: LD_INT 51
3891: PPUSH
3892: LD_INT 100
3894: PPUSH
3895: CALL 345 0 7
// un := CreateVehicle ;
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: CALL_OW 45
3908: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3909: LD_ADDR_EXP 49
3913: PUSH
3914: LD_EXP 49
3918: PUSH
3919: LD_VAR 0 3
3923: UNION
3924: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3925: LD_VAR 0 3
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 100
3935: PPUSH
3936: CALL_OW 290
// SetDir ( un , 4 ) ;
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_INT 4
3947: PPUSH
3948: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3952: LD_VAR 0 3
3956: PPUSH
3957: LD_INT 147
3959: PPUSH
3960: LD_INT 103
3962: PPUSH
3963: LD_INT 4
3965: PPUSH
3966: LD_INT 0
3968: PPUSH
3969: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3973: LD_INT 0
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: LD_OWVAR 67
3983: PPUSH
3984: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3988: CALL_OW 44
3992: PPUSH
3993: LD_VAR 0 3
3997: PPUSH
3998: CALL_OW 52
// end ;
4002: GO 3871
4004: POP
4005: POP
// uc_side := 3 ;
4006: LD_ADDR_OWVAR 20
4010: PUSH
4011: LD_INT 3
4013: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4014: LD_ADDR_EXP 43
4018: PUSH
4019: LD_STRING Burlak
4021: PPUSH
4022: LD_INT 0
4024: PPUSH
4025: LD_STRING 
4027: PPUSH
4028: CALL 282 0 3
4032: ST_TO_ADDR
// for i := 1 to 2 do
4033: LD_ADDR_VAR 0 2
4037: PUSH
4038: DOUBLE
4039: LD_INT 1
4041: DEC
4042: ST_TO_ADDR
4043: LD_INT 2
4045: PUSH
4046: FOR_TO
4047: IFFALSE 4140
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4049: LD_INT 0
4051: PPUSH
4052: LD_INT 1
4054: PPUSH
4055: LD_OWVAR 67
4059: PUSH
4060: LD_INT 1
4062: PLUS
4063: PPUSH
4064: CALL_OW 380
// un := CreateHuman ;
4068: LD_ADDR_VAR 0 3
4072: PUSH
4073: CALL_OW 44
4077: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4078: LD_VAR 0 3
4082: PPUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 3
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 30
4095: PUSH
4096: LD_INT 32
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: PUSH
4112: LD_VAR 0 2
4116: ARRAY
4117: PPUSH
4118: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4122: LD_ADDR_EXP 45
4126: PUSH
4127: LD_EXP 45
4131: PUSH
4132: LD_VAR 0 3
4136: UNION
4137: ST_TO_ADDR
// end ;
4138: GO 4046
4140: POP
4141: POP
// for i := 1 to 2 do
4142: LD_ADDR_VAR 0 2
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_INT 2
4154: PUSH
4155: FOR_TO
4156: IFFALSE 4247
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4158: LD_INT 0
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_OWVAR 67
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: PPUSH
4173: CALL_OW 380
// un := CreateHuman ;
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: CALL_OW 44
4186: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4187: LD_VAR 0 3
4191: PPUSH
4192: LD_INT 22
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 30
4204: PUSH
4205: LD_INT 5
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 69
4220: PUSH
4221: LD_INT 1
4223: ARRAY
4224: PPUSH
4225: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4229: LD_ADDR_EXP 45
4233: PUSH
4234: LD_EXP 45
4238: PUSH
4239: LD_VAR 0 3
4243: UNION
4244: ST_TO_ADDR
// end ;
4245: GO 4155
4247: POP
4248: POP
// for i := 1 to 2 do
4249: LD_ADDR_VAR 0 2
4253: PUSH
4254: DOUBLE
4255: LD_INT 1
4257: DEC
4258: ST_TO_ADDR
4259: LD_INT 2
4261: PUSH
4262: FOR_TO
4263: IFFALSE 4350
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4265: LD_INT 0
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: LD_OWVAR 67
4275: PPUSH
4276: CALL_OW 380
// un := CreateHuman ;
4280: LD_ADDR_VAR 0 3
4284: PUSH
4285: CALL_OW 44
4289: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 3
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 7
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: LD_INT 1
4326: ARRAY
4327: PPUSH
4328: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4332: LD_ADDR_EXP 45
4336: PUSH
4337: LD_EXP 45
4341: PUSH
4342: LD_VAR 0 3
4346: UNION
4347: ST_TO_ADDR
// end ;
4348: GO 4262
4350: POP
4351: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 2
4357: PPUSH
4358: LD_OWVAR 67
4362: PPUSH
4363: CALL_OW 380
// un := CreateHuman ;
4367: LD_ADDR_VAR 0 3
4371: PUSH
4372: CALL_OW 44
4376: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4377: LD_VAR 0 3
4381: PPUSH
4382: LD_INT 106
4384: PPUSH
4385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4389: LD_ADDR_EXP 45
4393: PUSH
4394: LD_EXP 45
4398: PUSH
4399: LD_VAR 0 3
4403: UNION
4404: ST_TO_ADDR
// for i := 1 to 3 do
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: DOUBLE
4411: LD_INT 1
4413: DEC
4414: ST_TO_ADDR
4415: LD_INT 3
4417: PUSH
4418: FOR_TO
4419: IFFALSE 4541
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4421: LD_ADDR_VAR 0 6
4425: PUSH
4426: LD_INT 22
4428: PUSH
4429: LD_INT 3
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 30
4438: PUSH
4439: LD_INT 31
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: PUSH
4455: LD_VAR 0 2
4459: ARRAY
4460: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4461: LD_INT 0
4463: PPUSH
4464: LD_INT 1
4466: PPUSH
4467: LD_OWVAR 67
4471: PPUSH
4472: CALL_OW 380
// un := CreateHuman ;
4476: LD_ADDR_VAR 0 3
4480: PUSH
4481: CALL_OW 44
4485: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4486: LD_VAR 0 3
4490: PPUSH
4491: LD_VAR 0 6
4495: PPUSH
4496: CALL_OW 254
4500: PUSH
4501: LD_INT 3
4503: PLUS
4504: PPUSH
4505: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4509: LD_VAR 0 3
4513: PPUSH
4514: LD_VAR 0 6
4518: PPUSH
4519: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4523: LD_ADDR_EXP 45
4527: PUSH
4528: LD_EXP 45
4532: PUSH
4533: LD_VAR 0 3
4537: UNION
4538: ST_TO_ADDR
// end ;
4539: GO 4418
4541: POP
4542: POP
// russianOmicronAttackers := [ ] ;
4543: LD_ADDR_EXP 48
4547: PUSH
4548: EMPTY
4549: ST_TO_ADDR
// for i := 1 to 6 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 6
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4788
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4566: LD_INT 3
4568: PPUSH
4569: LD_INT 3
4571: PPUSH
4572: LD_INT 21
4574: PUSH
4575: LD_INT 23
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: LD_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: MOD
4590: PUSH
4591: LD_INT 1
4593: PLUS
4594: ARRAY
4595: PPUSH
4596: LD_INT 1
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: LD_INT 43
4604: PUSH
4605: LD_INT 44
4607: PUSH
4608: LD_INT 42
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 3
4623: MOD
4624: PUSH
4625: LD_INT 1
4627: PLUS
4628: ARRAY
4629: PPUSH
4630: LD_INT 100
4632: PPUSH
4633: CALL 345 0 7
// un := CreateVehicle ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 45
4646: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 0
4654: PUSH
4655: LD_INT 5
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 1
4664: PPUSH
4665: LD_INT 2
4667: PPUSH
4668: CALL_OW 12
4672: ARRAY
4673: PPUSH
4674: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4678: LD_ADDR_EXP 48
4682: PUSH
4683: LD_EXP 48
4687: PUSH
4688: LD_VAR 0 3
4692: UNION
4693: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_INT 127
4701: PPUSH
4702: LD_INT 89
4704: PPUSH
4705: LD_INT 7
4707: PPUSH
4708: LD_INT 0
4710: PPUSH
4711: CALL_OW 50
// uc_side := 3 ;
4715: LD_ADDR_OWVAR 20
4719: PUSH
4720: LD_INT 3
4722: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4723: LD_INT 0
4725: PPUSH
4726: LD_INT 3
4728: PPUSH
4729: LD_INT 3
4731: PPUSH
4732: CALL_OW 380
// un := CreateHuman ;
4736: LD_ADDR_VAR 0 3
4740: PUSH
4741: CALL_OW 44
4745: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4746: LD_ADDR_EXP 48
4750: PUSH
4751: LD_EXP 48
4755: PUSH
4756: LD_VAR 0 3
4760: UNION
4761: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4762: LD_VAR 0 3
4766: PPUSH
4767: LD_EXP 48
4771: PUSH
4772: LD_EXP 48
4776: PUSH
4777: LD_INT 1
4779: MINUS
4780: ARRAY
4781: PPUSH
4782: CALL_OW 52
// end ;
4786: GO 4563
4788: POP
4789: POP
// for i := 1 to 3 do
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: DOUBLE
4796: LD_INT 1
4798: DEC
4799: ST_TO_ADDR
4800: LD_INT 3
4802: PUSH
4803: FOR_TO
4804: IFFALSE 4870
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4806: LD_INT 0
4808: PPUSH
4809: LD_INT 1
4811: PPUSH
4812: LD_OWVAR 67
4816: PPUSH
4817: CALL_OW 380
// un := CreateHuman ;
4821: LD_ADDR_VAR 0 3
4825: PUSH
4826: CALL_OW 44
4830: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4831: LD_ADDR_EXP 48
4835: PUSH
4836: LD_EXP 48
4840: PUSH
4841: LD_VAR 0 3
4845: UNION
4846: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_INT 91
4854: PPUSH
4855: LD_INT 60
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: LD_INT 0
4863: PPUSH
4864: CALL_OW 50
// end ;
4868: GO 4803
4870: POP
4871: POP
// end ;
4872: LD_VAR 0 1
4876: RET
// every 0 0$3 do var i ;
4877: GO 4879
4879: DISABLE
4880: LD_INT 0
4882: PPUSH
// begin for i := 1 to 4 do
4883: LD_ADDR_VAR 0 1
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 4
4895: PUSH
4896: FOR_TO
4897: IFFALSE 4916
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4899: LD_EXP 46
4903: PUSH
4904: LD_VAR 0 1
4908: ARRAY
4909: PPUSH
4910: CALL_OW 122
4914: GO 4896
4916: POP
4917: POP
// wait ( 3 ) ;
4918: LD_INT 3
4920: PPUSH
4921: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4925: LD_EXP 46
4929: PUSH
4930: LD_INT 1
4932: ARRAY
4933: PPUSH
4934: LD_INT 22
4936: PUSH
4937: LD_INT 6
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 30
4946: PUSH
4947: LD_INT 31
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PPUSH
4958: CALL_OW 69
4962: PPUSH
4963: LD_EXP 46
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PPUSH
4972: CALL_OW 74
4976: PPUSH
4977: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4981: LD_EXP 46
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: LD_INT 211
4992: PPUSH
4993: LD_INT 107
4995: PPUSH
4996: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5000: LD_EXP 46
5004: PUSH
5005: LD_INT 2
5007: ARRAY
5008: PPUSH
5009: LD_INT 209
5011: PPUSH
5012: LD_INT 106
5014: PPUSH
5015: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5019: LD_EXP 46
5023: PUSH
5024: LD_INT 3
5026: ARRAY
5027: PPUSH
5028: LD_INT 209
5030: PPUSH
5031: LD_INT 103
5033: PPUSH
5034: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5038: LD_EXP 46
5042: PUSH
5043: LD_INT 3
5045: ARRAY
5046: PPUSH
5047: LD_INT 209
5049: PPUSH
5050: LD_INT 106
5052: PPUSH
5053: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5057: LD_EXP 46
5061: PUSH
5062: LD_INT 4
5064: ARRAY
5065: PPUSH
5066: LD_INT 227
5068: PPUSH
5069: LD_INT 117
5071: PPUSH
5072: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5076: LD_EXP 46
5080: PUSH
5081: LD_INT 4
5083: ARRAY
5084: PPUSH
5085: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5089: LD_INT 700
5091: PPUSH
5092: CALL_OW 67
// for i := 3 downto 2 do
5096: LD_ADDR_VAR 0 1
5100: PUSH
5101: DOUBLE
5102: LD_INT 3
5104: INC
5105: ST_TO_ADDR
5106: LD_INT 2
5108: PUSH
5109: FOR_DOWNTO
5110: IFFALSE 5277
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5112: LD_EXP 46
5116: PUSH
5117: LD_VAR 0 1
5121: ARRAY
5122: PPUSH
5123: LD_INT 200
5125: PPUSH
5126: LD_INT 91
5128: PPUSH
5129: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5133: LD_EXP 46
5137: PUSH
5138: LD_VAR 0 1
5142: ARRAY
5143: PPUSH
5144: LD_INT 210
5146: PPUSH
5147: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5151: LD_EXP 46
5155: PUSH
5156: LD_VAR 0 1
5160: ARRAY
5161: PPUSH
5162: LD_INT 224
5164: PPUSH
5165: LD_INT 93
5167: PPUSH
5168: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5172: LD_EXP 46
5176: PUSH
5177: LD_VAR 0 1
5181: ARRAY
5182: PPUSH
5183: LD_INT 210
5185: PPUSH
5186: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5190: LD_EXP 46
5194: PUSH
5195: LD_VAR 0 1
5199: ARRAY
5200: PPUSH
5201: LD_INT 239
5203: PPUSH
5204: LD_INT 123
5206: PPUSH
5207: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5211: LD_EXP 46
5215: PUSH
5216: LD_VAR 0 1
5220: ARRAY
5221: PPUSH
5222: LD_INT 210
5224: PPUSH
5225: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5229: LD_EXP 46
5233: PUSH
5234: LD_VAR 0 1
5238: ARRAY
5239: PPUSH
5240: LD_INT 212
5242: PPUSH
5243: LD_INT 105
5245: PPUSH
5246: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5250: LD_EXP 46
5254: PUSH
5255: LD_VAR 0 1
5259: ARRAY
5260: PPUSH
5261: LD_INT 700
5263: PPUSH
5264: CALL_OW 202
// wait ( 0 0$30 ) ;
5268: LD_INT 1050
5270: PPUSH
5271: CALL_OW 67
// end ;
5275: GO 5109
5277: POP
5278: POP
// until not activeGrishkoAI ;
5279: LD_EXP 10
5283: NOT
5284: IFFALSE 5089
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5286: LD_EXP 46
5290: PPUSH
5291: LD_INT 221
5293: PPUSH
5294: LD_INT 110
5296: PPUSH
5297: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5301: LD_EXP 46
5305: PPUSH
5306: LD_INT 228
5308: PPUSH
5309: LD_INT 115
5311: PPUSH
5312: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5316: LD_EXP 46
5320: PPUSH
5321: CALL_OW 200
// end ;
5325: PPOPN 1
5327: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5328: LD_EXP 12
5332: IFFALSE 6028
5334: GO 5336
5336: DISABLE
5337: LD_INT 0
5339: PPUSH
5340: PPUSH
5341: PPUSH
5342: PPUSH
// begin uc_side := 6 ;
5343: LD_ADDR_OWVAR 20
5347: PUSH
5348: LD_INT 6
5350: ST_TO_ADDR
// uc_nation := 3 ;
5351: LD_ADDR_OWVAR 21
5355: PUSH
5356: LD_INT 3
5358: ST_TO_ADDR
// for i := 1 to 3 do
5359: LD_ADDR_VAR 0 2
5363: PUSH
5364: DOUBLE
5365: LD_INT 1
5367: DEC
5368: ST_TO_ADDR
5369: LD_INT 3
5371: PUSH
5372: FOR_TO
5373: IFFALSE 5482
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5375: LD_INT 0
5377: PPUSH
5378: LD_INT 1
5380: PPUSH
5381: LD_INT 2
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 4
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_OWVAR 67
5399: ARRAY
5400: PPUSH
5401: CALL_OW 380
// un := CreateHuman ;
5405: LD_ADDR_VAR 0 1
5409: PUSH
5410: CALL_OW 44
5414: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5415: LD_ADDR_EXP 47
5419: PUSH
5420: LD_EXP 47
5424: PUSH
5425: LD_VAR 0 1
5429: UNION
5430: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_INT 1
5438: PPUSH
5439: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5443: LD_VAR 0 1
5447: PPUSH
5448: LD_INT 11
5450: PPUSH
5451: LD_INT 0
5453: PPUSH
5454: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5458: LD_VAR 0 1
5462: PPUSH
5463: LD_INT 210
5465: PPUSH
5466: LD_INT 159
5468: PPUSH
5469: CALL_OW 111
// wait ( 0 0$2 ) ;
5473: LD_INT 70
5475: PPUSH
5476: CALL_OW 67
// end ;
5480: GO 5372
5482: POP
5483: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5484: LD_ADDR_VAR 0 4
5488: PUSH
5489: LD_INT 172
5491: PUSH
5492: LD_INT 76
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 150
5501: PUSH
5502: LD_INT 38
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 148
5511: PUSH
5512: LD_INT 9
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 165
5521: PUSH
5522: LD_INT 38
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 191
5537: PUSH
5538: LD_INT 77
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 168
5547: PUSH
5548: LD_INT 42
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 166
5557: PUSH
5558: LD_INT 11
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 151
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: PUSH
5581: LD_INT 221
5583: PUSH
5584: LD_INT 88
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 217
5593: PUSH
5594: LD_INT 64
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 232
5603: PUSH
5604: LD_INT 66
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 200
5613: PUSH
5614: LD_INT 56
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5632: LD_INT 35
5634: PPUSH
5635: CALL_OW 67
// for i := 1 to patrol do
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: DOUBLE
5645: LD_INT 1
5647: DEC
5648: ST_TO_ADDR
5649: LD_VAR 0 4
5653: PUSH
5654: FOR_TO
5655: IFFALSE 5992
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5657: LD_EXP 47
5661: PUSH
5662: LD_VAR 0 2
5666: ARRAY
5667: PPUSH
5668: CALL_OW 256
5672: PUSH
5673: LD_INT 990
5675: LESS
5676: PUSH
5677: LD_EXP 47
5681: PUSH
5682: LD_VAR 0 2
5686: ARRAY
5687: PPUSH
5688: CALL_OW 110
5692: PUSH
5693: LD_INT 1
5695: EQUAL
5696: AND
5697: IFFALSE 5717
// SetTag ( russianPatrol [ i ] , 2 ) ;
5699: LD_EXP 47
5703: PUSH
5704: LD_VAR 0 2
5708: ARRAY
5709: PPUSH
5710: LD_INT 2
5712: PPUSH
5713: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5717: LD_EXP 47
5721: PUSH
5722: LD_VAR 0 2
5726: ARRAY
5727: PPUSH
5728: CALL_OW 110
5732: PUSH
5733: LD_INT 2
5735: EQUAL
5736: IFFALSE 5803
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5738: LD_EXP 47
5742: PUSH
5743: LD_VAR 0 2
5747: ARRAY
5748: PPUSH
5749: LD_INT 166
5751: PPUSH
5752: LD_INT 101
5754: PPUSH
5755: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5759: LD_EXP 47
5763: PUSH
5764: LD_VAR 0 2
5768: ARRAY
5769: PPUSH
5770: LD_INT 71
5772: PPUSH
5773: CALL_OW 296
5777: PUSH
5778: LD_INT 10
5780: LESS
5781: IFFALSE 5801
// SetTag ( russianPatrol [ i ] , 3 ) ;
5783: LD_EXP 47
5787: PUSH
5788: LD_VAR 0 2
5792: ARRAY
5793: PPUSH
5794: LD_INT 3
5796: PPUSH
5797: CALL_OW 109
// continue ;
5801: GO 5654
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5803: LD_EXP 47
5807: PUSH
5808: LD_VAR 0 2
5812: ARRAY
5813: PPUSH
5814: CALL_OW 110
5818: PUSH
5819: LD_INT 3
5821: EQUAL
5822: IFFALSE 5890
// begin spottedByPatrol := true ;
5824: LD_ADDR_EXP 7
5828: PUSH
5829: LD_INT 1
5831: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5832: LD_EXP 47
5836: PUSH
5837: LD_VAR 0 2
5841: ARRAY
5842: PPUSH
5843: CALL_OW 250
5847: PPUSH
5848: LD_EXP 47
5852: PUSH
5853: LD_VAR 0 2
5857: ARRAY
5858: PPUSH
5859: CALL_OW 251
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: LD_INT 6
5869: NEG
5870: PPUSH
5871: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5875: LD_EXP 47
5879: PUSH
5880: LD_VAR 0 2
5884: ARRAY
5885: PPUSH
5886: CALL_OW 87
// end ; if not HasTask ( russianPatrol [ i ] ) then
5890: LD_EXP 47
5894: PUSH
5895: LD_VAR 0 2
5899: ARRAY
5900: PPUSH
5901: CALL_OW 314
5905: NOT
5906: IFFALSE 5990
// for j in patrol [ i ] do
5908: LD_ADDR_VAR 0 3
5912: PUSH
5913: LD_VAR 0 4
5917: PUSH
5918: LD_VAR 0 2
5922: ARRAY
5923: PUSH
5924: FOR_IN
5925: IFFALSE 5988
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5927: LD_EXP 47
5931: PUSH
5932: LD_VAR 0 2
5936: ARRAY
5937: PPUSH
5938: LD_INT 35
5940: PPUSH
5941: LD_INT 175
5943: PPUSH
5944: CALL_OW 12
5948: PPUSH
5949: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5953: LD_EXP 47
5957: PUSH
5958: LD_VAR 0 2
5962: ARRAY
5963: PPUSH
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: LD_VAR 0 3
5977: PUSH
5978: LD_INT 2
5980: ARRAY
5981: PPUSH
5982: CALL_OW 174
// end ;
5986: GO 5924
5988: POP
5989: POP
// end ;
5990: GO 5654
5992: POP
5993: POP
// until not russianPatrol or russianAlert ;
5994: LD_EXP 47
5998: NOT
5999: PUSH
6000: LD_EXP 9
6004: OR
6005: IFFALSE 5632
// if russianPatrol then
6007: LD_EXP 47
6011: IFFALSE 6028
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6013: LD_EXP 47
6017: PPUSH
6018: LD_INT 161
6020: PPUSH
6021: LD_INT 107
6023: PPUSH
6024: CALL_OW 114
// end ;
6028: PPOPN 4
6030: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6031: LD_EXP 6
6035: PUSH
6036: LD_EXP 13
6040: NOT
6041: AND
6042: IFFALSE 6528
6044: GO 6046
6046: DISABLE
6047: LD_INT 0
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
// begin enable ;
6054: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6055: LD_ADDR_VAR 0 2
6059: PUSH
6060: LD_EXP 48
6064: PPUSH
6065: LD_INT 21
6067: PUSH
6068: LD_INT 2
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PPUSH
6075: CALL_OW 72
6079: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6080: LD_ADDR_VAR 0 4
6084: PUSH
6085: LD_INT 22
6087: PUSH
6088: LD_INT 4
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PPUSH
6095: CALL_OW 69
6099: ST_TO_ADDR
// for i in filter do
6100: LD_ADDR_VAR 0 1
6104: PUSH
6105: LD_VAR 0 2
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6526
// begin tmp := IsDrivenBy ( i ) ;
6113: LD_ADDR_VAR 0 3
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: CALL_OW 311
6127: ST_TO_ADDR
// if not tmp then
6128: LD_VAR 0 3
6132: NOT
6133: IFFALSE 6137
// continue ;
6135: GO 6110
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6137: LD_VAR 0 1
6141: PPUSH
6142: CALL_OW 261
6146: PUSH
6147: LD_INT 90
6149: GREATER
6150: PUSH
6151: LD_VAR 0 1
6155: PPUSH
6156: CALL_OW 110
6160: PUSH
6161: LD_INT 2
6163: EQUAL
6164: AND
6165: IFFALSE 6181
// SetTag ( i , 0 ) else
6167: LD_VAR 0 1
6171: PPUSH
6172: LD_INT 0
6174: PPUSH
6175: CALL_OW 109
6179: GO 6277
// if GetTag ( i ) = 2 then
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 110
6190: PUSH
6191: LD_INT 2
6193: EQUAL
6194: IFFALSE 6277
// begin x := rand ( 1 , 2 ) ;
6196: LD_ADDR_VAR 0 5
6200: PUSH
6201: LD_INT 1
6203: PPUSH
6204: LD_INT 2
6206: PPUSH
6207: CALL_OW 12
6211: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6212: LD_VAR 0 1
6216: PPUSH
6217: LD_EXP 49
6221: PUSH
6222: LD_VAR 0 5
6226: ARRAY
6227: PPUSH
6228: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6232: LD_EXP 49
6236: PUSH
6237: LD_VAR 0 5
6241: ARRAY
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 289
6250: PUSH
6251: LD_INT 20
6253: LESS
6254: IFFALSE 6277
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6256: LD_EXP 49
6260: PUSH
6261: LD_VAR 0 5
6265: ARRAY
6266: PPUSH
6267: LD_INT 2
6269: PPUSH
6270: LD_INT 100
6272: PPUSH
6273: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6277: LD_VAR 0 1
6281: PPUSH
6282: CALL_OW 256
6286: PUSH
6287: LD_INT 600
6289: GREATEREQUAL
6290: PUSH
6291: LD_VAR 0 1
6295: PPUSH
6296: CALL_OW 110
6300: NOT
6301: AND
6302: IFFALSE 6328
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6304: LD_VAR 0 1
6308: PPUSH
6309: LD_VAR 0 4
6313: PPUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 74
6323: PPUSH
6324: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6328: LD_VAR 0 1
6332: PPUSH
6333: CALL_OW 256
6337: PUSH
6338: LD_INT 600
6340: LESS
6341: PUSH
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 110
6351: NOT
6352: AND
6353: IFFALSE 6382
// begin SetTag ( i , 1 ) ;
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 1
6362: PPUSH
6363: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6367: LD_VAR 0 1
6371: PPUSH
6372: LD_INT 62
6374: PPUSH
6375: LD_INT 22
6377: PPUSH
6378: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6382: LD_VAR 0 1
6386: PPUSH
6387: CALL_OW 110
6391: PUSH
6392: LD_INT 1
6394: EQUAL
6395: PUSH
6396: LD_VAR 0 1
6400: PPUSH
6401: LD_INT 62
6403: PPUSH
6404: LD_INT 22
6406: PPUSH
6407: CALL_OW 297
6411: PUSH
6412: LD_INT 6
6414: LESS
6415: AND
6416: PUSH
6417: LD_VAR 0 3
6421: AND
6422: IFFALSE 6524
// begin ComExitVehicle ( tmp ) ;
6424: LD_VAR 0 3
6428: PPUSH
6429: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_VAR 0 1
6442: PPUSH
6443: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6447: LD_INT 35
6449: PPUSH
6450: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6454: LD_VAR 0 1
6458: PPUSH
6459: CALL_OW 256
6463: PUSH
6464: LD_INT 1000
6466: EQUAL
6467: IFFALSE 6447
// ComEnterUnit ( tmp , i ) ;
6469: LD_VAR 0 3
6473: PPUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6483: LD_VAR 0 1
6487: PPUSH
6488: CALL_OW 261
6492: PUSH
6493: LD_INT 90
6495: LESSEQUAL
6496: IFFALSE 6512
// SetTag ( i , 2 ) else
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 109
6510: GO 6524
// SetTag ( i , 0 ) ;
6512: LD_VAR 0 1
6516: PPUSH
6517: LD_INT 0
6519: PPUSH
6520: CALL_OW 109
// end ; end ;
6524: GO 6110
6526: POP
6527: POP
// end ;
6528: PPOPN 5
6530: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6531: LD_EXP 20
6535: IFFALSE 6737
6537: GO 6539
6539: DISABLE
6540: LD_INT 0
6542: PPUSH
6543: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6544: LD_EXP 49
6548: PPUSH
6549: LD_INT 79
6551: PPUSH
6552: LD_INT 155
6554: PPUSH
6555: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6559: LD_EXP 49
6563: PPUSH
6564: LD_INT 16
6566: PPUSH
6567: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6571: LD_ADDR_VAR 0 2
6575: PUSH
6576: LD_EXP 48
6580: PPUSH
6581: LD_INT 50
6583: PUSH
6584: EMPTY
6585: LIST
6586: PPUSH
6587: CALL_OW 72
6591: ST_TO_ADDR
// for i in tmp do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 2
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6637
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6605: LD_VAR 0 1
6609: PPUSH
6610: LD_INT 123
6612: PPUSH
6613: LD_INT 60
6615: PPUSH
6616: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6620: LD_VAR 0 1
6624: PPUSH
6625: LD_INT 153
6627: PPUSH
6628: LD_INT 103
6630: PPUSH
6631: CALL_OW 174
// end ;
6635: GO 6602
6637: POP
6638: POP
// repeat wait ( 0 0$1 ) ;
6639: LD_INT 35
6641: PPUSH
6642: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6646: LD_ADDR_VAR 0 2
6650: PUSH
6651: LD_EXP 48
6655: PPUSH
6656: LD_INT 50
6658: PUSH
6659: EMPTY
6660: LIST
6661: PPUSH
6662: CALL_OW 72
6666: ST_TO_ADDR
// for i in tmp do
6667: LD_ADDR_VAR 0 1
6671: PUSH
6672: LD_VAR 0 2
6676: PUSH
6677: FOR_IN
6678: IFFALSE 6728
// if not HasTask ( i ) then
6680: LD_VAR 0 1
6684: PPUSH
6685: CALL_OW 314
6689: NOT
6690: IFFALSE 6726
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_INT 81
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: PPUSH
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 74
6721: PPUSH
6722: CALL_OW 115
6726: GO 6677
6728: POP
6729: POP
6730: LD_VAR 0 2
6734: NOT
6735: IFFALSE 6639
// end ;
6737: PPOPN 2
6739: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6740: LD_INT 22
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 32
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PPUSH
6764: CALL_OW 69
6768: IFFALSE 6847
6770: GO 6772
6772: DISABLE
6773: LD_INT 0
6775: PPUSH
// begin enable ;
6776: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6777: LD_ADDR_VAR 0 1
6781: PUSH
6782: LD_INT 22
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 32
6794: PUSH
6795: LD_INT 1
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PPUSH
6806: CALL_OW 69
6810: PUSH
6811: FOR_IN
6812: IFFALSE 6845
// if GetFuel ( i ) < 1 then
6814: LD_VAR 0 1
6818: PPUSH
6819: CALL_OW 261
6823: PUSH
6824: LD_INT 1
6826: LESS
6827: IFFALSE 6843
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6829: LD_VAR 0 1
6833: PPUSH
6834: CALL_OW 311
6838: PPUSH
6839: CALL_OW 121
6843: GO 6811
6845: POP
6846: POP
// end ; end_of_file
6847: PPOPN 1
6849: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6850: LD_INT 0
6852: PPUSH
6853: PPUSH
6854: PPUSH
// SetBName ( omikron , omikron ) ;
6855: LD_INT 64
6857: PPUSH
6858: LD_STRING omikron
6860: PPUSH
6861: CALL_OW 500
// uc_side := 4 ;
6865: LD_ADDR_OWVAR 20
6869: PUSH
6870: LD_INT 4
6872: ST_TO_ADDR
// uc_nation := 1 ;
6873: LD_ADDR_OWVAR 21
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// omicronSquad := [ ] ;
6881: LD_ADDR_EXP 51
6885: PUSH
6886: EMPTY
6887: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6888: LD_ADDR_VAR 0 2
6892: PUSH
6893: LD_INT 22
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 2
6905: PUSH
6906: LD_INT 30
6908: PUSH
6909: LD_INT 32
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 30
6918: PUSH
6919: LD_INT 31
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 69
6939: PUSH
6940: FOR_IN
6941: IFFALSE 6998
// begin PrepareHuman ( false , 1 , 1 ) ;
6943: LD_INT 0
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 380
// un := CreateHuman ;
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: CALL_OW 44
6965: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6966: LD_ADDR_EXP 51
6970: PUSH
6971: LD_EXP 51
6975: PUSH
6976: LD_VAR 0 3
6980: UNION
6981: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_VAR 0 2
6991: PPUSH
6992: CALL_OW 52
// end ;
6996: GO 6940
6998: POP
6999: POP
// for i := 1 to 3 do
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: DOUBLE
7006: LD_INT 1
7008: DEC
7009: ST_TO_ADDR
7010: LD_INT 3
7012: PUSH
7013: FOR_TO
7014: IFFALSE 7069
// begin PrepareHuman ( false , 2 , 2 ) ;
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 2
7021: PPUSH
7022: LD_INT 2
7024: PPUSH
7025: CALL_OW 380
// un := CreateHuman ;
7029: LD_ADDR_VAR 0 3
7033: PUSH
7034: CALL_OW 44
7038: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7039: LD_ADDR_EXP 51
7043: PUSH
7044: LD_EXP 51
7048: PUSH
7049: LD_VAR 0 3
7053: UNION
7054: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7055: LD_VAR 0 3
7059: PPUSH
7060: LD_INT 64
7062: PPUSH
7063: CALL_OW 52
// end ;
7067: GO 7013
7069: POP
7070: POP
// for i := 1 to 2 do
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: DOUBLE
7077: LD_INT 1
7079: DEC
7080: ST_TO_ADDR
7081: LD_INT 2
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7224
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7087: LD_INT 4
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: LD_INT 2
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 3
7104: PPUSH
7105: LD_INT 100
7107: PPUSH
7108: CALL 345 0 7
// un := CreateVehicle ;
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: CALL_OW 45
7121: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7122: LD_ADDR_EXP 51
7126: PUSH
7127: LD_EXP 51
7131: PUSH
7132: LD_VAR 0 3
7136: UNION
7137: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7138: LD_VAR 0 3
7142: PPUSH
7143: LD_INT 28
7145: PPUSH
7146: LD_INT 37
7148: PPUSH
7149: LD_INT 6
7151: PPUSH
7152: LD_INT 0
7154: PPUSH
7155: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7159: LD_INT 0
7161: PPUSH
7162: LD_INT 3
7164: PPUSH
7165: LD_INT 2
7167: PPUSH
7168: CALL_OW 380
// un := CreateHuman ;
7172: LD_ADDR_VAR 0 3
7176: PUSH
7177: CALL_OW 44
7181: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7182: LD_ADDR_EXP 51
7186: PUSH
7187: LD_EXP 51
7191: PUSH
7192: LD_VAR 0 3
7196: UNION
7197: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_EXP 51
7207: PUSH
7208: LD_EXP 51
7212: PUSH
7213: LD_INT 1
7215: MINUS
7216: ARRAY
7217: PPUSH
7218: CALL_OW 52
// end ;
7222: GO 7084
7224: POP
7225: POP
// end ;
7226: LD_VAR 0 1
7230: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7231: LD_INT 0
7233: PPUSH
7234: PPUSH
7235: PPUSH
7236: PPUSH
// uc_side := 4 ;
7237: LD_ADDR_OWVAR 20
7241: PUSH
7242: LD_INT 4
7244: ST_TO_ADDR
// uc_nation := 1 ;
7245: LD_ADDR_OWVAR 21
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// tmp := [ ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: EMPTY
7259: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7260: LD_INT 4
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: LD_INT 2
7268: PPUSH
7269: LD_INT 1
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: LD_INT 4
7277: PPUSH
7278: LD_INT 77
7280: PPUSH
7281: CALL 345 0 7
// un := CreateVehicle ;
7285: LD_ADDR_VAR 0 3
7289: PUSH
7290: CALL_OW 45
7294: ST_TO_ADDR
// tmp := tmp union un ;
7295: LD_ADDR_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_VAR 0 3
7309: UNION
7310: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7311: LD_VAR 0 3
7315: PPUSH
7316: LD_INT 2
7318: PPUSH
7319: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7323: LD_VAR 0 3
7327: PPUSH
7328: LD_INT 106
7330: PPUSH
7331: LD_INT 3
7333: PPUSH
7334: LD_INT 0
7336: PPUSH
7337: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7341: LD_INT 0
7343: PPUSH
7344: LD_INT 3
7346: PPUSH
7347: LD_INT 2
7349: PPUSH
7350: CALL_OW 380
// un := CreateHuman ;
7354: LD_ADDR_VAR 0 3
7358: PUSH
7359: CALL_OW 44
7363: ST_TO_ADDR
// tmp := tmp union un ;
7364: LD_ADDR_VAR 0 4
7368: PUSH
7369: LD_VAR 0 4
7373: PUSH
7374: LD_VAR 0 3
7378: UNION
7379: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7380: LD_VAR 0 3
7384: PPUSH
7385: LD_VAR 0 4
7389: PUSH
7390: LD_VAR 0 4
7394: PUSH
7395: LD_INT 1
7397: MINUS
7398: ARRAY
7399: PPUSH
7400: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7404: LD_VAR 0 3
7408: PPUSH
7409: LD_INT 109
7411: PPUSH
7412: LD_INT 9
7414: PPUSH
7415: CALL_OW 111
// wait ( 0 0$1 ) ;
7419: LD_INT 35
7421: PPUSH
7422: CALL_OW 67
// for i := 1 to 2 do
7426: LD_ADDR_VAR 0 2
7430: PUSH
7431: DOUBLE
7432: LD_INT 1
7434: DEC
7435: ST_TO_ADDR
7436: LD_INT 2
7438: PUSH
7439: FOR_TO
7440: IFFALSE 7504
// begin PrepareHuman ( false , 1 , 2 ) ;
7442: LD_INT 0
7444: PPUSH
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 2
7450: PPUSH
7451: CALL_OW 380
// un := CreateHuman ;
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: CALL_OW 44
7464: ST_TO_ADDR
// tmp := tmp union un ;
7465: LD_ADDR_VAR 0 4
7469: PUSH
7470: LD_VAR 0 4
7474: PUSH
7475: LD_VAR 0 3
7479: UNION
7480: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: LD_INT 105
7488: PPUSH
7489: LD_INT 2
7491: PPUSH
7492: LD_INT 2
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL_OW 50
// end ;
7502: GO 7439
7504: POP
7505: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7506: LD_VAR 0 4
7510: PPUSH
7511: LD_INT 26
7513: PPUSH
7514: LD_INT 35
7516: PPUSH
7517: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7521: LD_INT 35
7523: PPUSH
7524: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7528: LD_VAR 0 4
7532: PPUSH
7533: LD_INT 50
7535: PUSH
7536: EMPTY
7537: LIST
7538: PPUSH
7539: CALL_OW 72
7543: NOT
7544: IFFALSE 7548
// exit ;
7546: GO 7675
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_INT 91
7555: PUSH
7556: LD_INT 64
7558: PUSH
7559: LD_INT 12
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: PPUSH
7567: CALL_OW 72
7571: PUSH
7572: LD_VAR 0 4
7576: EQUAL
7577: IFFALSE 7521
// omicronSquad := omicronSquad union tmp ;
7579: LD_ADDR_EXP 51
7583: PUSH
7584: LD_EXP 51
7588: PUSH
7589: LD_VAR 0 4
7593: UNION
7594: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_VAR 0 4
7604: PPUSH
7605: LD_INT 25
7607: PUSH
7608: LD_INT 1
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PPUSH
7615: CALL_OW 72
7619: PUSH
7620: FOR_IN
7621: IFFALSE 7673
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 4
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 30
7640: PUSH
7641: LD_INT 4
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 69
7656: PPUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 74
7666: PPUSH
7667: CALL_OW 120
7671: GO 7620
7673: POP
7674: POP
// end ;
7675: LD_VAR 0 1
7679: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7680: LD_EXP 13
7684: NOT
7685: IFFALSE 8256
7687: GO 7689
7689: DISABLE
7690: LD_INT 0
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
// begin enable ;
7696: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_INT 4
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 21
7714: PUSH
7715: LD_INT 3
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 3
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1000
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7749: LD_ADDR_VAR 0 3
7753: PUSH
7754: LD_EXP 51
7758: PPUSH
7759: LD_INT 25
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PPUSH
7769: CALL_OW 72
7773: ST_TO_ADDR
// if filter and tmp then
7774: LD_VAR 0 2
7778: PUSH
7779: LD_VAR 0 3
7783: AND
7784: IFFALSE 7857
// begin for i in tmp do
7786: LD_ADDR_VAR 0 1
7790: PUSH
7791: LD_VAR 0 3
7795: PUSH
7796: FOR_IN
7797: IFFALSE 7853
// if IsInUnit ( i ) then
7799: LD_VAR 0 1
7803: PPUSH
7804: CALL_OW 310
7808: IFFALSE 7821
// ComExitBuilding ( i ) else
7810: LD_VAR 0 1
7814: PPUSH
7815: CALL_OW 122
7819: GO 7851
// if not HasTask ( i ) then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 314
7830: NOT
7831: IFFALSE 7851
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7833: LD_VAR 0 1
7837: PPUSH
7838: LD_VAR 0 2
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PPUSH
7847: CALL_OW 130
7851: GO 7796
7853: POP
7854: POP
// end else
7855: GO 7928
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7857: LD_VAR 0 3
7861: PPUSH
7862: LD_INT 3
7864: PUSH
7865: LD_INT 54
7867: PUSH
7868: EMPTY
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 72
7879: IFFALSE 7928
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7881: LD_ADDR_VAR 0 1
7885: PUSH
7886: LD_VAR 0 3
7890: PPUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 54
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 72
7908: PUSH
7909: FOR_IN
7910: IFFALSE 7926
// ComEnterUnit ( i , omikron ) ;
7912: LD_VAR 0 1
7916: PPUSH
7917: LD_INT 64
7919: PPUSH
7920: CALL_OW 120
7924: GO 7909
7926: POP
7927: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_EXP 51
7937: PPUSH
7938: LD_INT 21
7940: PUSH
7941: LD_INT 2
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PPUSH
7948: CALL_OW 72
7952: ST_TO_ADDR
// if not filter then
7953: LD_VAR 0 2
7957: NOT
7958: IFFALSE 7962
// exit ;
7960: GO 8256
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7962: LD_ADDR_VAR 0 4
7966: PUSH
7967: LD_INT 13
7969: PPUSH
7970: LD_INT 81
7972: PUSH
7973: LD_INT 4
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 70
7984: ST_TO_ADDR
// if enemy then
7985: LD_VAR 0 4
7989: IFFALSE 8256
// begin for i in filter do
7991: LD_ADDR_VAR 0 1
7995: PUSH
7996: LD_VAR 0 2
8000: PUSH
8001: FOR_IN
8002: IFFALSE 8254
// begin tmp := IsDrivenBy ( i ) ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 311
8018: ST_TO_ADDR
// if not tmp then
8019: LD_VAR 0 3
8023: NOT
8024: IFFALSE 8028
// continue ;
8026: GO 8001
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 256
8037: PUSH
8038: LD_INT 600
8040: GREATEREQUAL
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL_OW 110
8051: PUSH
8052: LD_INT 1
8054: NONEQUAL
8055: AND
8056: IFFALSE 8082
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: LD_VAR 0 4
8067: PPUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 74
8077: PPUSH
8078: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8082: LD_VAR 0 1
8086: PPUSH
8087: CALL_OW 256
8091: PUSH
8092: LD_INT 600
8094: LESS
8095: PUSH
8096: LD_VAR 0 1
8100: PPUSH
8101: CALL_OW 110
8105: PUSH
8106: LD_INT 1
8108: NONEQUAL
8109: AND
8110: IFFALSE 8139
// begin SetTag ( i , 1 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 1
8119: PPUSH
8120: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8124: LD_VAR 0 1
8128: PPUSH
8129: LD_INT 27
8131: PPUSH
8132: LD_INT 35
8134: PPUSH
8135: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 110
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 27
8160: PPUSH
8161: LD_INT 35
8163: PPUSH
8164: CALL_OW 297
8168: PUSH
8169: LD_INT 6
8171: LESS
8172: AND
8173: PUSH
8174: LD_VAR 0 3
8178: AND
8179: IFFALSE 8252
// begin ComExitVehicle ( tmp ) ;
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8190: LD_VAR 0 3
8194: PPUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8204: LD_INT 35
8206: PPUSH
8207: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 256
8220: PUSH
8221: LD_INT 1000
8223: EQUAL
8224: IFFALSE 8204
// ComEnterUnit ( tmp , i ) ;
8226: LD_VAR 0 3
8230: PPUSH
8231: LD_VAR 0 1
8235: PPUSH
8236: CALL_OW 120
// SetTag ( i , 0 ) ;
8240: LD_VAR 0 1
8244: PPUSH
8245: LD_INT 0
8247: PPUSH
8248: CALL_OW 109
// end ; end ;
8252: GO 8001
8254: POP
8255: POP
// end ; end ;
8256: PPOPN 4
8258: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8259: LD_EXP 13
8263: IFFALSE 8407
8265: GO 8267
8267: DISABLE
8268: LD_INT 0
8270: PPUSH
8271: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8272: LD_ADDR_VAR 0 2
8276: PUSH
8277: LD_EXP 51
8281: PPUSH
8282: LD_INT 21
8284: PUSH
8285: LD_INT 1
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 50
8294: PUSH
8295: EMPTY
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 72
8306: ST_TO_ADDR
// if not tmp then
8307: LD_VAR 0 2
8311: NOT
8312: IFFALSE 8316
// exit ;
8314: GO 8407
// repeat wait ( 0 0$1 ) ;
8316: LD_INT 35
8318: PPUSH
8319: CALL_OW 67
// for i in tmp do
8323: LD_ADDR_VAR 0 1
8327: PUSH
8328: LD_VAR 0 2
8332: PUSH
8333: FOR_IN
8334: IFFALSE 8398
// begin ComExit ( i ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL 783 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8345: LD_VAR 0 1
8349: PPUSH
8350: LD_INT 14
8352: PPUSH
8353: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8357: LD_VAR 0 1
8361: PPUSH
8362: LD_INT 14
8364: PPUSH
8365: CALL_OW 308
8369: IFFALSE 8396
// begin tmp := tmp diff i ;
8371: LD_ADDR_VAR 0 2
8375: PUSH
8376: LD_VAR 0 2
8380: PUSH
8381: LD_VAR 0 1
8385: DIFF
8386: ST_TO_ADDR
// RemoveUnit ( i ) ;
8387: LD_VAR 0 1
8391: PPUSH
8392: CALL_OW 64
// end ; end ;
8396: GO 8333
8398: POP
8399: POP
// until not tmp ;
8400: LD_VAR 0 2
8404: NOT
8405: IFFALSE 8316
// end ; end_of_file
8407: PPOPN 2
8409: END
// export function Action ; var i , un , veh , tmp ; begin
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
// InGameOn ;
8417: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8421: LD_INT 179
8423: PPUSH
8424: LD_INT 5
8426: PPUSH
8427: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: LD_INT 2
8438: PPUSH
8439: LD_INT 2
8441: PPUSH
8442: LD_INT 12
8444: PPUSH
8445: LD_INT 1
8447: PPUSH
8448: LD_INT 1
8450: PPUSH
8451: LD_INT 24
8453: PPUSH
8454: LD_INT 33
8456: PPUSH
8457: CALL 345 0 7
8461: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_INT 2
8469: PPUSH
8470: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8474: LD_VAR 0 4
8478: PPUSH
8479: LD_INT 178
8481: PPUSH
8482: LD_INT 2
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_VAR 0 4
8501: PPUSH
8502: CALL_OW 52
// if Kamil then
8506: LD_EXP 29
8510: IFFALSE 8545
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8512: LD_EXP 29
8516: PPUSH
8517: LD_INT 207
8519: PPUSH
8520: LD_INT 37
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8530: LD_EXP 29
8534: PPUSH
8535: LD_INT 211
8537: PPUSH
8538: LD_INT 38
8540: PPUSH
8541: CALL_OW 118
// end ; if Sophia then
8545: LD_EXP 31
8549: IFFALSE 8584
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8551: LD_EXP 31
8555: PPUSH
8556: LD_INT 209
8558: PPUSH
8559: LD_INT 40
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8569: LD_EXP 31
8573: PPUSH
8574: LD_INT 211
8576: PPUSH
8577: LD_INT 38
8579: PPUSH
8580: CALL_OW 118
// end ; if Givi then
8584: LD_EXP 26
8588: IFFALSE 8623
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8590: LD_EXP 26
8594: PPUSH
8595: LD_INT 201
8597: PPUSH
8598: LD_INT 34
8600: PPUSH
8601: LD_INT 0
8603: PPUSH
8604: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8608: LD_EXP 26
8612: PPUSH
8613: LD_INT 206
8615: PPUSH
8616: LD_INT 36
8618: PPUSH
8619: CALL_OW 118
// end ; if Ibrahim then
8623: LD_EXP 28
8627: IFFALSE 8662
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8629: LD_EXP 28
8633: PPUSH
8634: LD_INT 202
8636: PPUSH
8637: LD_INT 39
8639: PPUSH
8640: LD_INT 0
8642: PPUSH
8643: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8647: LD_EXP 28
8651: PPUSH
8652: LD_INT 206
8654: PPUSH
8655: LD_INT 36
8657: PPUSH
8658: CALL_OW 118
// end ; if Markov then
8662: LD_EXP 32
8666: IFFALSE 8753
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8668: LD_ADDR_VAR 0 4
8672: PUSH
8673: LD_INT 2
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: LD_INT 13
8681: PPUSH
8682: LD_INT 1
8684: PPUSH
8685: LD_INT 1
8687: PPUSH
8688: LD_INT 25
8690: PPUSH
8691: LD_INT 80
8693: PUSH
8694: LD_INT 20
8696: PUSH
8697: LD_OWVAR 67
8701: MUL
8702: MINUS
8703: PPUSH
8704: CALL 345 0 7
8708: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8709: LD_VAR 0 4
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8721: LD_VAR 0 4
8725: PPUSH
8726: LD_INT 197
8728: PPUSH
8729: LD_INT 35
8731: PPUSH
8732: LD_INT 0
8734: PPUSH
8735: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8739: LD_EXP 32
8743: PPUSH
8744: LD_VAR 0 4
8748: PPUSH
8749: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8753: LD_ADDR_VAR 0 5
8757: PUSH
8758: LD_EXP 30
8762: PUSH
8763: LD_EXP 37
8767: UNION
8768: ST_TO_ADDR
// for i in tmp do
8769: LD_ADDR_VAR 0 2
8773: PUSH
8774: LD_VAR 0 5
8778: PUSH
8779: FOR_IN
8780: IFFALSE 8814
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8782: LD_VAR 0 2
8786: PPUSH
8787: LD_INT 203
8789: PPUSH
8790: LD_INT 41
8792: PPUSH
8793: LD_INT 6
8795: PPUSH
8796: LD_INT 0
8798: PPUSH
8799: CALL_OW 50
// ComHold ( i ) ;
8803: LD_VAR 0 2
8807: PPUSH
8808: CALL_OW 140
// end ;
8812: GO 8779
8814: POP
8815: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8816: LD_INT 22
8818: PUSH
8819: LD_INT 2
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: LD_INT 25
8828: PUSH
8829: LD_INT 2
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PPUSH
8840: CALL_OW 69
8844: NOT
8845: IFFALSE 8859
// SetClass ( Heike , 2 ) ;
8847: LD_EXP 25
8851: PPUSH
8852: LD_INT 2
8854: PPUSH
8855: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8859: LD_EXP 25
8863: PPUSH
8864: LD_INT 183
8866: PPUSH
8867: LD_INT 12
8869: PPUSH
8870: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8874: LD_EXP 25
8878: PPUSH
8879: LD_INT 188
8881: PPUSH
8882: LD_INT 20
8884: PPUSH
8885: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8889: LD_EXP 25
8893: PPUSH
8894: LD_INT 191
8896: PPUSH
8897: LD_INT 25
8899: PPUSH
8900: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8904: LD_EXP 25
8908: PPUSH
8909: LD_INT 203
8911: PPUSH
8912: LD_INT 29
8914: PPUSH
8915: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8919: LD_EXP 25
8923: PPUSH
8924: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8928: LD_INT 35
8930: PPUSH
8931: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8935: LD_EXP 25
8939: PPUSH
8940: CALL_OW 310
8944: NOT
8945: IFFALSE 8928
// CenterOnUnits ( Heike ) ;
8947: LD_EXP 25
8951: PPUSH
8952: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8956: LD_ADDR_VAR 0 5
8960: PUSH
8961: LD_INT 22
8963: PUSH
8964: LD_INT 2
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 21
8973: PUSH
8974: LD_INT 1
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PPUSH
8985: CALL_OW 69
8989: PUSH
8990: LD_EXP 25
8994: PUSH
8995: LD_EXP 32
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: DIFF
9004: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9005: LD_VAR 0 5
9009: PPUSH
9010: LD_EXP 25
9014: PPUSH
9015: CALL_OW 119
// if Givi then
9019: LD_EXP 26
9023: IFFALSE 9041
// ComTurnUnit ( Heike , Givi ) else
9025: LD_EXP 25
9029: PPUSH
9030: LD_EXP 26
9034: PPUSH
9035: CALL_OW 119
9039: GO 9059
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9041: LD_EXP 25
9045: PPUSH
9046: LD_VAR 0 5
9050: PUSH
9051: LD_INT 1
9053: ARRAY
9054: PPUSH
9055: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9059: LD_EXP 25
9063: PPUSH
9064: LD_STRING DH-Start-1
9066: PPUSH
9067: CALL_OW 88
// if Givi then
9071: LD_EXP 26
9075: IFFALSE 9122
// begin Say ( Givi , DG-Start-2 ) ;
9077: LD_EXP 26
9081: PPUSH
9082: LD_STRING DG-Start-2
9084: PPUSH
9085: CALL_OW 88
// if not Mike then
9089: LD_EXP 27
9093: NOT
9094: IFFALSE 9120
// begin Say ( Givi , DG-Start-b-3 ) ;
9096: LD_EXP 26
9100: PPUSH
9101: LD_STRING DG-Start-b-3
9103: PPUSH
9104: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9108: LD_EXP 25
9112: PPUSH
9113: LD_STRING DH-Start-b-4
9115: PPUSH
9116: CALL_OW 88
// end ; end else
9120: GO 9187
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9122: LD_EXP 37
9126: PPUSH
9127: LD_INT 26
9129: PUSH
9130: LD_INT 1
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PPUSH
9137: CALL_OW 72
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: LD_STRING DArm-Start-a-2
9148: PPUSH
9149: CALL_OW 88
9153: NOT
9154: IFFALSE 9187
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9156: LD_EXP 37
9160: PPUSH
9161: LD_INT 26
9163: PUSH
9164: LD_INT 2
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PPUSH
9171: CALL_OW 72
9175: PUSH
9176: LD_INT 1
9178: ARRAY
9179: PPUSH
9180: LD_STRING DArf-Start-a-2
9182: PPUSH
9183: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9187: LD_EXP 25
9191: PPUSH
9192: LD_INT 211
9194: PPUSH
9195: LD_INT 38
9197: PPUSH
9198: CALL_OW 118
// wait ( 0 0$1 ) ;
9202: LD_INT 35
9204: PPUSH
9205: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9209: LD_EXP 25
9213: PPUSH
9214: LD_STRING DH-Start-3
9216: PPUSH
9217: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9221: LD_EXP 25
9225: PPUSH
9226: LD_STRING DH-Start-4
9228: PPUSH
9229: CALL_OW 88
// InGameOff ;
9233: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9237: LD_STRING Prepare
9239: PPUSH
9240: CALL_OW 337
// SaveForQuickRestart ;
9244: CALL_OW 22
// wait ( 0 0$30 ) ;
9248: LD_INT 1050
9250: PPUSH
9251: CALL_OW 67
// if not Aviradze then
9255: LD_EXP 35
9259: NOT
9260: IFFALSE 9264
// exit ;
9262: GO 9468
// SetDir ( Aviradze , 4 ) ;
9264: LD_EXP 35
9268: PPUSH
9269: LD_INT 4
9271: PPUSH
9272: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9276: LD_EXP 35
9280: PPUSH
9281: LD_INT 225
9283: PPUSH
9284: LD_INT 33
9286: PPUSH
9287: LD_INT 0
9289: PPUSH
9290: CALL_OW 48
// for i := 1 to 2 do
9294: LD_ADDR_VAR 0 2
9298: PUSH
9299: DOUBLE
9300: LD_INT 1
9302: DEC
9303: ST_TO_ADDR
9304: LD_INT 2
9306: PUSH
9307: FOR_TO
9308: IFFALSE 9439
// begin uc_side := 2 ;
9310: LD_ADDR_OWVAR 20
9314: PUSH
9315: LD_INT 2
9317: ST_TO_ADDR
// uc_nation := 0 ;
9318: LD_ADDR_OWVAR 21
9322: PUSH
9323: LD_INT 0
9325: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9326: LD_INT 0
9328: PPUSH
9329: LD_INT 12
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 380
// hc_gallery :=  ;
9339: LD_ADDR_OWVAR 33
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9347: LD_ADDR_OWVAR 26
9351: PUSH
9352: LD_STRING Artudito
9354: PUSH
9355: LD_STRING Textur
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_VAR 0 2
9366: ARRAY
9367: ST_TO_ADDR
// un := CreateHuman ;
9368: LD_ADDR_VAR 0 3
9372: PUSH
9373: CALL_OW 44
9377: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9378: LD_VAR 0 3
9382: PPUSH
9383: LD_INT 224
9385: PUSH
9386: LD_INT 226
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PUSH
9393: LD_VAR 0 2
9397: ARRAY
9398: PPUSH
9399: LD_INT 31
9401: PUSH
9402: LD_INT 35
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: LD_VAR 0 2
9413: ARRAY
9414: PPUSH
9415: LD_INT 0
9417: PPUSH
9418: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9422: LD_VAR 0 3
9426: PPUSH
9427: LD_INT 215
9429: PPUSH
9430: LD_INT 36
9432: PPUSH
9433: CALL_OW 111
// end ;
9437: GO 9307
9439: POP
9440: POP
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// InitHc ;
9449: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9453: LD_EXP 35
9457: PPUSH
9458: LD_INT 215
9460: PPUSH
9461: LD_INT 36
9463: PPUSH
9464: CALL_OW 111
// end ;
9468: LD_VAR 0 1
9472: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9473: LD_EXP 3
9477: IFFALSE 10786
9479: GO 9481
9481: DISABLE
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
9486: PPUSH
// begin DialogueOn ;
9487: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9491: LD_EXP 25
9495: PPUSH
9496: LD_STRING DH-base-1
9498: PPUSH
9499: CALL_OW 88
// if Markov then
9503: LD_EXP 32
9507: IFFALSE 9559
// begin Say ( Markov , DMar-base-2 ) ;
9509: LD_EXP 32
9513: PPUSH
9514: LD_STRING DMar-base-2
9516: PPUSH
9517: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9521: LD_EXP 32
9525: PPUSH
9526: LD_STRING DMar-base-3
9528: PPUSH
9529: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9533: LD_EXP 25
9537: PPUSH
9538: LD_STRING DH-base-4
9540: PPUSH
9541: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9545: LD_EXP 32
9549: PPUSH
9550: LD_STRING DMar-base-5
9552: PPUSH
9553: CALL_OW 88
// end else
9557: GO 9636
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9559: LD_EXP 37
9563: PPUSH
9564: LD_INT 26
9566: PUSH
9567: LD_INT 1
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PPUSH
9574: CALL_OW 72
9578: PUSH
9579: LD_INT 1
9581: ARRAY
9582: PPUSH
9583: LD_STRING DArm-base-a-2
9585: PPUSH
9586: CALL_OW 88
9590: NOT
9591: IFFALSE 9624
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9593: LD_EXP 37
9597: PPUSH
9598: LD_INT 26
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PPUSH
9608: CALL_OW 72
9612: PUSH
9613: LD_INT 1
9615: ARRAY
9616: PPUSH
9617: LD_STRING DArf-base-a-2
9619: PPUSH
9620: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9624: LD_EXP 25
9628: PPUSH
9629: LD_STRING DH-base-a-3
9631: PPUSH
9632: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9636: LD_EXP 35
9640: PPUSH
9641: LD_STRING DA-base-6
9643: PPUSH
9644: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9648: LD_EXP 35
9652: PPUSH
9653: LD_STRING DA-base-7
9655: PPUSH
9656: CALL_OW 88
// DialogueOff ;
9660: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9664: LD_STRING Flamethrower
9666: PPUSH
9667: CALL_OW 337
// wait ( 2 2$00 ) ;
9671: LD_INT 4200
9673: PPUSH
9674: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9678: LD_EXP 34
9682: PUSH
9683: LD_EXP 27
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: LD_INT 203
9694: PPUSH
9695: LD_INT 37
9697: PPUSH
9698: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9702: LD_INT 22
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 92
9714: PUSH
9715: LD_INT 203
9717: PUSH
9718: LD_INT 37
9720: PUSH
9721: LD_INT 10
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PPUSH
9734: CALL_OW 69
9738: NOT
9739: IFFALSE 9779
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9741: LD_EXP 34
9745: PUSH
9746: LD_EXP 27
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: LD_EXP 25
9759: PPUSH
9760: CALL_OW 250
9764: PPUSH
9765: LD_EXP 25
9769: PPUSH
9770: CALL_OW 251
9774: PPUSH
9775: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9779: LD_INT 35
9781: PPUSH
9782: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9786: LD_INT 2
9788: PPUSH
9789: LD_EXP 34
9793: PPUSH
9794: CALL_OW 292
9798: PUSH
9799: LD_EXP 34
9803: PPUSH
9804: LD_EXP 25
9808: PPUSH
9809: CALL_OW 296
9813: PUSH
9814: LD_INT 8
9816: LESS
9817: PUSH
9818: LD_EXP 34
9822: PPUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 3
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: PPUSH
9852: LD_EXP 34
9856: PPUSH
9857: CALL_OW 74
9861: PPUSH
9862: CALL_OW 296
9866: PUSH
9867: LD_INT 7
9869: LESS
9870: OR
9871: AND
9872: PUSH
9873: LD_EXP 34
9877: PPUSH
9878: LD_INT 10
9880: PPUSH
9881: CALL_OW 308
9885: NOT
9886: AND
9887: IFFALSE 9779
// InGameOn ;
9889: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9893: LD_EXP 34
9897: PPUSH
9898: CALL_OW 87
// if IsInUnit ( Heike ) then
9902: LD_EXP 25
9906: PPUSH
9907: CALL_OW 310
9911: IFFALSE 9922
// ComExitBuilding ( Heike ) ;
9913: LD_EXP 25
9917: PPUSH
9918: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9922: LD_EXP 34
9926: PUSH
9927: LD_EXP 27
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PPUSH
9936: LD_EXP 25
9940: PPUSH
9941: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9945: LD_EXP 25
9949: PPUSH
9950: LD_EXP 34
9954: PPUSH
9955: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9959: LD_INT 22
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 91
9971: PUSH
9972: LD_EXP 34
9976: PUSH
9977: LD_INT 10
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 21
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 69
10004: IFFALSE 10030
// begin Say ( Kurt , DKs-scout-1 ) ;
10006: LD_EXP 34
10010: PPUSH
10011: LD_STRING DKs-scout-1
10013: PPUSH
10014: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10018: LD_EXP 25
10022: PPUSH
10023: LD_STRING DH-scout-2
10025: PPUSH
10026: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10030: LD_INT 35
10032: PPUSH
10033: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10037: LD_EXP 25
10041: PPUSH
10042: LD_EXP 34
10046: PPUSH
10047: CALL_OW 296
10051: PUSH
10052: LD_INT 6
10054: LESS
10055: IFFALSE 10030
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10057: LD_EXP 34
10061: PUSH
10062: LD_EXP 27
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: LD_EXP 25
10075: PPUSH
10076: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10080: LD_EXP 34
10084: PPUSH
10085: LD_STRING DKs-scout-3
10087: PPUSH
10088: CALL_OW 88
// if Kaia then
10092: LD_EXP 30
10096: IFFALSE 10279
// begin if IsInUnit ( Kaia ) then
10098: LD_EXP 30
10102: PPUSH
10103: CALL_OW 310
10107: IFFALSE 10118
// ComExitBuilding ( Kaia ) ;
10109: LD_EXP 30
10113: PPUSH
10114: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_EXP 34
10127: PPUSH
10128: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10132: LD_INT 35
10134: PPUSH
10135: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10139: LD_EXP 30
10143: PPUSH
10144: LD_EXP 34
10148: PPUSH
10149: CALL_OW 296
10153: PUSH
10154: LD_INT 6
10156: LESS
10157: IFFALSE 10132
// ComTurnUnit ( Kaia , Kurt ) ;
10159: LD_EXP 30
10163: PPUSH
10164: LD_EXP 34
10168: PPUSH
10169: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10173: LD_EXP 30
10177: PPUSH
10178: LD_STRING DK-scout-4
10180: PPUSH
10181: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10185: LD_EXP 34
10189: PPUSH
10190: LD_EXP 30
10194: PPUSH
10195: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10199: LD_EXP 34
10203: PPUSH
10204: LD_STRING DKs-scout-5
10206: PPUSH
10207: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DK-scout-6
10218: PPUSH
10219: CALL_OW 88
// if Mike then
10223: LD_EXP 27
10227: IFFALSE 10279
// begin Say ( Mike , DM-scout-7 ) ;
10229: LD_EXP 27
10233: PPUSH
10234: LD_STRING DM-scout-7
10236: PPUSH
10237: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10241: LD_EXP 30
10245: PPUSH
10246: LD_EXP 27
10250: PPUSH
10251: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10255: LD_EXP 30
10259: PPUSH
10260: LD_STRING DK-scout-8
10262: PPUSH
10263: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10267: LD_EXP 27
10271: PPUSH
10272: LD_STRING DM-scout-9
10274: PPUSH
10275: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10279: LD_INT 184
10281: PPUSH
10282: LD_INT 100
10284: PPUSH
10285: LD_INT 2
10287: PPUSH
10288: LD_INT 12
10290: NEG
10291: PPUSH
10292: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10296: LD_INT 184
10298: PPUSH
10299: LD_INT 100
10301: PPUSH
10302: LD_INT 2
10304: PPUSH
10305: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10309: LD_INT 184
10311: PPUSH
10312: LD_INT 100
10314: PPUSH
10315: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10319: LD_EXP 34
10323: PPUSH
10324: LD_STRING DKs-scout-10
10326: PPUSH
10327: CALL_OW 88
// wait ( 0 0$1 ) ;
10331: LD_INT 35
10333: PPUSH
10334: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10338: LD_INT 144
10340: PPUSH
10341: LD_INT 65
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 12
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10355: LD_INT 144
10357: PPUSH
10358: LD_INT 65
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10368: LD_INT 144
10370: PPUSH
10371: LD_INT 65
10373: PPUSH
10374: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10378: LD_EXP 34
10382: PPUSH
10383: LD_STRING DKs-scout-11
10385: PPUSH
10386: CALL_OW 88
// wait ( 0 0$1 ) ;
10390: LD_INT 35
10392: PPUSH
10393: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10397: LD_EXP 34
10401: PPUSH
10402: CALL_OW 87
// if Mike and not Givi then
10406: LD_EXP 27
10410: PUSH
10411: LD_EXP 26
10415: NOT
10416: AND
10417: IFFALSE 10443
// begin Say ( Mike , DM-scout-a-1 ) ;
10419: LD_EXP 27
10423: PPUSH
10424: LD_STRING DM-scout-a-1
10426: PPUSH
10427: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10431: LD_EXP 25
10435: PPUSH
10436: LD_STRING DH-scout-a-2
10438: PPUSH
10439: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10443: LD_EXP 34
10447: PUSH
10448: LD_EXP 27
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: LD_INT 2
10459: PPUSH
10460: CALL_OW 235
// InGameOff ;
10464: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10468: LD_STRING Hill
10470: PPUSH
10471: CALL_OW 337
// allowToPatrol := true ;
10475: LD_ADDR_EXP 12
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10483: LD_INT 3150
10485: PPUSH
10486: CALL_OW 67
// InitHc ;
10490: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: DOUBLE
10500: LD_INT 1
10502: DEC
10503: ST_TO_ADDR
10504: LD_INT 3
10506: PUSH
10507: LD_INT 3
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: LD_OWVAR 67
10522: ARRAY
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10784
// begin uc_side := 2 ;
10527: LD_ADDR_OWVAR 20
10531: PUSH
10532: LD_INT 2
10534: ST_TO_ADDR
// uc_nation := 2 ;
10535: LD_ADDR_OWVAR 21
10539: PUSH
10540: LD_INT 2
10542: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10543: LD_INT 0
10545: PPUSH
10546: LD_INT 1
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: PUSH
10560: LD_VAR 0 1
10564: PUSH
10565: LD_INT 3
10567: MOD
10568: PUSH
10569: LD_INT 1
10571: PLUS
10572: ARRAY
10573: PPUSH
10574: LD_INT 3
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: LD_INT 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: PUSH
10588: LD_OWVAR 67
10592: ARRAY
10593: PPUSH
10594: CALL_OW 380
// un := CreateHuman ;
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: CALL_OW 44
10607: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10608: LD_ADDR_EXP 37
10612: PUSH
10613: LD_EXP 37
10617: PUSH
10618: LD_VAR 0 2
10622: UNION
10623: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10624: LD_INT 2
10626: PPUSH
10627: LD_INT 2
10629: PPUSH
10630: LD_INT 13
10632: PPUSH
10633: LD_INT 2
10635: PUSH
10636: LD_INT 1
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_VAR 0 1
10647: PUSH
10648: LD_INT 2
10650: MOD
10651: PUSH
10652: LD_INT 1
10654: PLUS
10655: ARRAY
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: LD_INT 27
10662: PUSH
10663: LD_INT 25
10665: PUSH
10666: LD_INT 27
10668: PUSH
10669: LD_INT 23
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_OWVAR 67
10682: PUSH
10683: LD_INT 0
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 12
10693: PLUS
10694: ARRAY
10695: PPUSH
10696: LD_INT 77
10698: PPUSH
10699: CALL 345 0 7
// veh := CreateVehicle ;
10703: LD_ADDR_VAR 0 3
10707: PUSH
10708: CALL_OW 45
10712: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 2
10720: PPUSH
10721: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10725: LD_VAR 0 3
10729: PPUSH
10730: LD_INT 178
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: LD_INT 2
10738: PPUSH
10739: LD_INT 0
10741: PPUSH
10742: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10746: LD_VAR 0 2
10750: PPUSH
10751: LD_VAR 0 3
10755: PPUSH
10756: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10760: LD_VAR 0 2
10764: PPUSH
10765: LD_INT 183
10767: PPUSH
10768: LD_INT 11
10770: PPUSH
10771: CALL_OW 111
// wait ( 0 0$2 ) ;
10775: LD_INT 70
10777: PPUSH
10778: CALL_OW 67
// end ;
10782: GO 10524
10784: POP
10785: POP
// end ;
10786: PPOPN 3
10788: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10789: LD_EXP 4
10793: PUSH
10794: LD_EXP 35
10798: PPUSH
10799: CALL_OW 302
10803: AND
10804: IFFALSE 10853
10806: GO 10808
10808: DISABLE
// begin DialogueOn ;
10809: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10813: LD_EXP 35
10817: PPUSH
10818: LD_STRING DA-lab-1
10820: PPUSH
10821: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10825: LD_EXP 35
10829: PPUSH
10830: LD_STRING DA-lab-2
10832: PPUSH
10833: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10837: LD_EXP 25
10841: PPUSH
10842: LD_STRING DH-lab-3
10844: PPUSH
10845: CALL_OW 88
// DialogueOff ;
10849: CALL_OW 7
// end ;
10853: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10854: LD_INT 17
10856: PPUSH
10857: LD_INT 2
10859: PPUSH
10860: CALL_OW 321
10864: PUSH
10865: LD_INT 2
10867: EQUAL
10868: IFFALSE 11000
10870: GO 10872
10872: DISABLE
10873: LD_INT 0
10875: PPUSH
// begin DialogueOn ;
10876: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10880: LD_EXP 35
10884: PPUSH
10885: LD_STRING DA-Cam-1
10887: PPUSH
10888: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10892: LD_EXP 35
10896: PPUSH
10897: LD_STRING DA-Cam-2
10899: PPUSH
10900: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10904: LD_EXP 35
10908: PPUSH
10909: LD_STRING DA-Cam-3
10911: PPUSH
10912: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10916: LD_EXP 25
10920: PPUSH
10921: LD_STRING DH-Cam-4
10923: PPUSH
10924: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10928: LD_EXP 30
10932: PPUSH
10933: LD_STRING DK-Cam-5
10935: PPUSH
10936: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10940: LD_EXP 30
10944: PPUSH
10945: LD_STRING DK-Cam-6
10947: PPUSH
10948: CALL_OW 88
// DialogueOff ;
10952: CALL_OW 7
// Query ( Camera ) ;
10956: LD_STRING Camera
10958: PPUSH
10959: CALL_OW 97
// hiddenCameraAllowed := true ;
10963: LD_ADDR_EXP 5
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// for i in camAreas do
10971: LD_ADDR_VAR 0 1
10975: PUSH
10976: LD_EXP 8
10980: PUSH
10981: FOR_IN
10982: IFFALSE 10998
// SetAreaMapShow ( i , 1 ) ;
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 424
10996: GO 10981
10998: POP
10999: POP
// end ;
11000: PPOPN 1
11002: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11003: LD_EXP 8
11007: NOT
11008: PUSH
11009: LD_EXP 5
11013: AND
11014: IFFALSE 11112
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
// begin stop_talking := true ;
11022: LD_ADDR_OWVAR 56
11026: PUSH
11027: LD_INT 1
11029: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11030: LD_ADDR_VAR 0 1
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 21
11047: PUSH
11048: LD_INT 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 23
11057: PUSH
11058: LD_INT 2
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 69
11074: PUSH
11075: FOR_IN
11076: IFFALSE 11095
// AddExperience ( i , 2 , 450 ) ;
11078: LD_VAR 0 1
11082: PPUSH
11083: LD_INT 2
11085: PPUSH
11086: LD_INT 450
11088: PPUSH
11089: CALL_OW 492
11093: GO 11075
11095: POP
11096: POP
// stop_talking := false ;
11097: LD_ADDR_OWVAR 56
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11105: LD_STRING ACH_CAMERA
11107: PPUSH
11108: CALL_OW 543
// end ;
11112: PPOPN 1
11114: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11115: LD_EXP 9
11119: PUSH
11120: LD_EXP 11
11124: NOT
11125: AND
11126: IFFALSE 11207
11128: GO 11130
11130: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11131: LD_EXP 9
11135: PPUSH
11136: CALL_OW 250
11140: PPUSH
11141: LD_EXP 9
11145: PPUSH
11146: CALL_OW 251
11150: PPUSH
11151: LD_INT 2
11153: PPUSH
11154: LD_INT 6
11156: NEG
11157: PPUSH
11158: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11162: LD_EXP 9
11166: PPUSH
11167: CALL_OW 87
// DialogueOn ;
11171: CALL_OW 6
// if spottedByPatrol then
11175: LD_EXP 7
11179: IFFALSE 11193
// Say ( Heike , DH-Spot-f-3 ) ;
11181: LD_EXP 25
11185: PPUSH
11186: LD_STRING DH-Spot-f-3
11188: PPUSH
11189: CALL_OW 88
// dwait ( 0 0$2 ) ;
11193: LD_INT 70
11195: PPUSH
11196: CALL_OW 68
// YouLost ( Spotted ) ;
11200: LD_STRING Spotted
11202: PPUSH
11203: CALL_OW 104
// end ;
11207: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11208: LD_INT 3
11210: PUSH
11211: LD_INT 6
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: LD_INT 2
11220: PPUSH
11221: LD_EXP 47
11225: PPUSH
11226: CALL 1965 0 3
11230: IFFALSE 11263
11232: GO 11234
11234: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11235: LD_ADDR_EXP 9
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: LD_INT 6
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PPUSH
11250: LD_INT 2
11252: PPUSH
11253: LD_EXP 47
11257: PPUSH
11258: CALL 1965 0 3
11262: ST_TO_ADDR
11263: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11264: LD_EXP 9
11268: IFFALSE 11565
11270: GO 11272
11272: DISABLE
11273: LD_INT 0
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: LD_EXP 44
11288: PPUSH
11289: LD_INT 25
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 54
11301: PUSH
11302: EMPTY
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 72
11313: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11314: LD_ADDR_VAR 0 3
11318: PUSH
11319: LD_INT 22
11321: PUSH
11322: LD_INT 6
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 32
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PPUSH
11343: CALL_OW 69
11347: ST_TO_ADDR
// for i := 1 to tmp do
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: DOUBLE
11354: LD_INT 1
11356: DEC
11357: ST_TO_ADDR
11358: LD_VAR 0 2
11362: PUSH
11363: FOR_TO
11364: IFFALSE 11409
// begin ComExitBuilding ( tmp [ i ] ) ;
11366: LD_VAR 0 2
11370: PUSH
11371: LD_VAR 0 1
11375: ARRAY
11376: PPUSH
11377: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11381: LD_VAR 0 2
11385: PUSH
11386: LD_VAR 0 1
11390: ARRAY
11391: PPUSH
11392: LD_VAR 0 3
11396: PUSH
11397: LD_VAR 0 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 180
// end ;
11407: GO 11363
11409: POP
11410: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11411: LD_ADDR_VAR 0 4
11415: PUSH
11416: LD_EXP 42
11420: PUSH
11421: LD_EXP 44
11425: PUSH
11426: LD_EXP 45
11430: UNION
11431: PPUSH
11432: LD_INT 3
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 1
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PPUSH
11449: CALL_OW 72
11453: UNION
11454: ST_TO_ADDR
// for i in noncombat do
11455: LD_ADDR_VAR 0 1
11459: PUSH
11460: LD_VAR 0 4
11464: PUSH
11465: FOR_IN
11466: IFFALSE 11502
// begin if IsInUnit ( i ) then
11468: LD_VAR 0 1
11472: PPUSH
11473: CALL_OW 310
11477: IFFALSE 11488
// ComExitBuilding ( i ) ;
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_INT 16
11495: PPUSH
11496: CALL_OW 173
// end ;
11500: GO 11465
11502: POP
11503: POP
// if not allowHeikeAttack then
11504: LD_EXP 11
11508: NOT
11509: IFFALSE 11513
// exit ;
11511: GO 11565
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11513: LD_EXP 40
11517: PPUSH
11518: LD_STRING D9a-Kur-1
11520: PPUSH
11521: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11525: LD_EXP 43
11529: PPUSH
11530: LD_STRING D9a-Bur-1
11532: PPUSH
11533: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11537: LD_EXP 40
11541: PPUSH
11542: LD_STRING D9a-Kur-2
11544: PPUSH
11545: CALL_OW 94
// omicronFall := true ;
11549: LD_ADDR_EXP 13
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// retreatFromOmicron := true ;
11557: LD_ADDR_EXP 20
11561: PUSH
11562: LD_INT 1
11564: ST_TO_ADDR
// end ;
11565: PPOPN 4
11567: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11568: LD_INT 16
11570: PPUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 22
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 23
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 70
11606: IFFALSE 11689
11608: GO 11610
11610: DISABLE
11611: LD_INT 0
11613: PPUSH
// begin enable ;
11614: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11615: LD_ADDR_VAR 0 1
11619: PUSH
11620: LD_INT 16
11622: PPUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 22
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 23
11642: PUSH
11643: LD_INT 3
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 70
11658: PUSH
11659: FOR_IN
11660: IFFALSE 11687
// begin escapeCounter := escapeCounter + 1 ;
11662: LD_ADDR_EXP 19
11666: PUSH
11667: LD_EXP 19
11671: PUSH
11672: LD_INT 1
11674: PLUS
11675: ST_TO_ADDR
// RemoveUnit ( i ) ;
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 64
// end ;
11685: GO 11659
11687: POP
11688: POP
// end ;
11689: PPOPN 1
11691: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11692: LD_OWVAR 1
11696: PUSH
11697: LD_INT 13650
11699: PUSH
11700: LD_INT 0
11702: PPUSH
11703: LD_INT 3150
11705: PPUSH
11706: CALL_OW 12
11710: PLUS
11711: GREATEREQUAL
11712: IFFALSE 11721
11714: GO 11716
11716: DISABLE
// SmallAmericanReinforcements ;
11717: CALL 7231 0 0
11721: END
// every 0 0$1 trigger tick >= 9 9$15 do
11722: LD_OWVAR 1
11726: PUSH
11727: LD_INT 19425
11729: GREATEREQUAL
11730: IFFALSE 11795
11732: GO 11734
11734: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11735: LD_EXP 48
11739: PPUSH
11740: LD_INT 21
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 72
11754: PPUSH
11755: LD_INT 62
11757: PPUSH
11758: LD_INT 22
11760: PPUSH
11761: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11765: LD_EXP 49
11769: PPUSH
11770: LD_INT 69
11772: PPUSH
11773: LD_INT 27
11775: PPUSH
11776: CALL_OW 111
// wait ( 1 1$00 ) ;
11780: LD_INT 2100
11782: PPUSH
11783: CALL_OW 67
// startAttackOnOmicron := true ;
11787: LD_ADDR_EXP 6
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// end ;
11795: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11796: LD_EXP 22
11800: PUSH
11801: LD_INT 0
11803: EQUAL
11804: IFFALSE 13677
11806: GO 11808
11808: DISABLE
11809: LD_INT 0
11811: PPUSH
11812: PPUSH
11813: PPUSH
11814: PPUSH
11815: PPUSH
11816: PPUSH
11817: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11818: LD_INT 5
11820: PPUSH
11821: LD_INT 2
11823: PPUSH
11824: CALL_OW 343
// PrepareOmarForces ;
11828: CALL 2535 0 0
// wait ( 0 0$03 ) ;
11832: LD_INT 105
11834: PPUSH
11835: CALL_OW 67
// allowHeikeAttack := true ;
11839: LD_ADDR_EXP 11
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// activeGrishkoAI := false ;
11847: LD_ADDR_EXP 10
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// if not hillBase then
11855: LD_EXP 15
11859: NOT
11860: IFFALSE 11869
// ChangeMissionObjectives ( HillDone ) ;
11862: LD_STRING HillDone
11864: PPUSH
11865: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11869: LD_EXP 33
11873: PPUSH
11874: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11878: LD_ADDR_VAR 0 1
11882: PUSH
11883: LD_INT 22
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 1
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: PUSH
11912: FOR_IN
11913: IFFALSE 11937
// if HasTask ( i ) then
11915: LD_VAR 0 1
11919: PPUSH
11920: CALL_OW 314
11924: IFFALSE 11935
// ComHold ( i ) ;
11926: LD_VAR 0 1
11930: PPUSH
11931: CALL_OW 140
11935: GO 11912
11937: POP
11938: POP
// DialogueOn ;
11939: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11943: LD_EXP 33
11947: PPUSH
11948: LD_STRING DO-assault-1
11950: PPUSH
11951: CALL_OW 94
// DialogueOff ;
11955: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11959: LD_ADDR_VAR 0 1
11963: PUSH
11964: LD_EXP 46
11968: PPUSH
11969: LD_INT 3
11971: PUSH
11972: LD_INT 54
11974: PUSH
11975: EMPTY
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 72
11986: PUSH
11987: FOR_IN
11988: IFFALSE 12007
// ComMoveXY ( i , 226 , 114 ) ;
11990: LD_VAR 0 1
11994: PPUSH
11995: LD_INT 226
11997: PPUSH
11998: LD_INT 114
12000: PPUSH
12001: CALL_OW 111
12005: GO 11987
12007: POP
12008: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12009: LD_EXP 41
12013: PPUSH
12014: LD_INT 22
12016: PUSH
12017: LD_INT 6
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 30
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PPUSH
12043: LD_EXP 41
12047: PPUSH
12048: CALL_OW 74
12052: PPUSH
12053: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12057: LD_STRING Attack
12059: PPUSH
12060: CALL_OW 337
// music_class := music_combat ;
12064: LD_ADDR_OWVAR 72
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// music_nat := 4 ;
12072: LD_ADDR_OWVAR 71
12076: PUSH
12077: LD_INT 4
12079: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12080: LD_INT 5
12082: PPUSH
12083: LD_EXP 41
12087: PPUSH
12088: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12092: LD_INT 6
12094: PPUSH
12095: LD_EXP 38
12099: PPUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: PUSH
12115: LD_INT 4
12117: ARRAY
12118: PPUSH
12119: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12123: LD_ADDR_VAR 0 1
12127: PUSH
12128: LD_EXP 38
12132: PPUSH
12133: LD_INT 3
12135: PUSH
12136: LD_INT 25
12138: PUSH
12139: LD_INT 4
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 72
12154: PUSH
12155: FOR_IN
12156: IFFALSE 12175
// ComAgressiveMove ( i , 221 , 110 ) ;
12158: LD_VAR 0 1
12162: PPUSH
12163: LD_INT 221
12165: PPUSH
12166: LD_INT 110
12168: PPUSH
12169: CALL_OW 114
12173: GO 12155
12175: POP
12176: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12177: LD_EXP 38
12181: PPUSH
12182: LD_INT 25
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 72
12196: PPUSH
12197: LD_INT 214
12199: PPUSH
12200: LD_INT 124
12202: PPUSH
12203: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12207: LD_EXP 38
12211: PPUSH
12212: LD_INT 25
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 72
12226: PUSH
12227: LD_INT 4
12229: ARRAY
12230: PPUSH
12231: LD_INT 214
12233: PPUSH
12234: LD_INT 114
12236: PPUSH
12237: LD_INT 0
12239: PPUSH
12240: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12244: LD_EXP 41
12248: PPUSH
12249: LD_STRING D9-Gri-1
12251: PPUSH
12252: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12256: LD_EXP 40
12260: PPUSH
12261: LD_STRING D9-Kur-1
12263: PPUSH
12264: CALL_OW 94
// wait ( 0 0$1 ) ;
12268: LD_INT 35
12270: PPUSH
12271: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12275: LD_EXP 33
12279: PPUSH
12280: LD_INT 233
12282: PPUSH
12283: LD_INT 130
12285: PPUSH
12286: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12290: LD_EXP 41
12294: PPUSH
12295: LD_STRING D9-Gri-2
12297: PPUSH
12298: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12302: LD_EXP 40
12306: PPUSH
12307: LD_STRING D9-Kur-2
12309: PPUSH
12310: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12314: LD_EXP 41
12318: PPUSH
12319: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12323: LD_EXP 41
12327: PPUSH
12328: LD_INT 211
12330: PPUSH
12331: LD_INT 104
12333: PPUSH
12334: CALL_OW 171
// AddComHold ( Grishko ) ;
12338: LD_EXP 41
12342: PPUSH
12343: CALL_OW 200
// repeat wait ( 3 ) ;
12347: LD_INT 3
12349: PPUSH
12350: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12354: LD_EXP 41
12358: PPUSH
12359: CALL_OW 310
12363: NOT
12364: IFFALSE 12347
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12366: LD_EXP 38
12370: PPUSH
12371: LD_INT 34
12373: PUSH
12374: LD_INT 26
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 72
12385: PPUSH
12386: LD_EXP 41
12390: PPUSH
12391: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12395: LD_EXP 38
12399: PPUSH
12400: LD_INT 34
12402: PUSH
12403: LD_INT 26
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 72
12414: PPUSH
12415: LD_INT 215
12417: PPUSH
12418: LD_INT 106
12420: PPUSH
12421: CALL_OW 174
// repeat wait ( 3 ) ;
12425: LD_INT 3
12427: PPUSH
12428: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12432: LD_EXP 41
12436: PPUSH
12437: CALL_OW 256
12441: PUSH
12442: LD_INT 1000
12444: LESS
12445: IFFALSE 12425
// NormalAttack ( 5 , Grishko ) ;
12447: LD_INT 5
12449: PPUSH
12450: LD_EXP 41
12454: PPUSH
12455: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12459: LD_INT 6
12461: PPUSH
12462: LD_EXP 38
12466: PPUSH
12467: LD_INT 25
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 72
12481: PUSH
12482: LD_INT 4
12484: ARRAY
12485: PPUSH
12486: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12490: LD_EXP 41
12494: PPUSH
12495: LD_STRING D9-Gri-3
12497: PPUSH
12498: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12502: LD_EXP 40
12506: PPUSH
12507: LD_STRING D9-Kur-3
12509: PPUSH
12510: CALL_OW 94
// music_class := music_auto ;
12514: LD_ADDR_OWVAR 72
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// music_nat := music_auto ;
12522: LD_ADDR_OWVAR 71
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// for i in omarSquad do
12530: LD_ADDR_VAR 0 1
12534: PUSH
12535: LD_EXP 38
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12683
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12543: LD_VAR 0 1
12547: PPUSH
12548: CALL_OW 247
12552: PUSH
12553: LD_INT 2
12555: EQUAL
12556: PUSH
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 256
12566: PUSH
12567: LD_INT 1000
12569: LESS
12570: AND
12571: IFFALSE 12637
// begin driver := IsDrivenBy ( i ) ;
12573: LD_ADDR_VAR 0 2
12577: PUSH
12578: LD_VAR 0 1
12582: PPUSH
12583: CALL_OW 311
12587: ST_TO_ADDR
// veh := i ;
12588: LD_ADDR_VAR 0 3
12592: PUSH
12593: LD_VAR 0 1
12597: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12598: LD_VAR 0 2
12602: PPUSH
12603: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12607: LD_VAR 0 2
12611: PPUSH
12612: LD_VAR 0 3
12616: PPUSH
12617: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12621: LD_VAR 0 2
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: CALL_OW 180
// end else
12635: GO 12681
// if GetLives ( i ) < 500 then
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 256
12646: PUSH
12647: LD_INT 500
12649: LESS
12650: IFFALSE 12681
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12652: LD_EXP 38
12656: PPUSH
12657: LD_INT 25
12659: PUSH
12660: LD_INT 4
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: CALL_OW 72
12671: PPUSH
12672: LD_VAR 0 1
12676: PPUSH
12677: CALL_OW 188
// end ; end ;
12681: GO 12540
12683: POP
12684: POP
// repeat wait ( 0 0$1 ) ;
12685: LD_INT 35
12687: PPUSH
12688: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12692: LD_EXP 38
12696: PPUSH
12697: LD_INT 3
12699: PUSH
12700: LD_INT 24
12702: PUSH
12703: LD_INT 1000
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 21
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PPUSH
12728: CALL_OW 72
12732: NOT
12733: PUSH
12734: LD_EXP 38
12738: PPUSH
12739: LD_INT 3
12741: PUSH
12742: LD_INT 24
12744: PUSH
12745: LD_INT 250
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: NOT
12761: AND
12762: IFFALSE 12685
// wait ( 0 0$2 ) ;
12764: LD_INT 70
12766: PPUSH
12767: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12771: LD_ADDR_VAR 0 5
12775: PUSH
12776: LD_EXP 38
12780: PPUSH
12781: LD_INT 58
12783: PUSH
12784: EMPTY
12785: LIST
12786: PUSH
12787: LD_INT 21
12789: PUSH
12790: LD_INT 2
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 72
12805: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12806: LD_ADDR_VAR 0 6
12810: PUSH
12811: LD_EXP 38
12815: PPUSH
12816: LD_INT 25
12818: PUSH
12819: LD_INT 3
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 3
12828: PUSH
12829: LD_INT 55
12831: PUSH
12832: EMPTY
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: ST_TO_ADDR
// for i := 1 to tmp do
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: DOUBLE
12854: LD_INT 1
12856: DEC
12857: ST_TO_ADDR
12858: LD_VAR 0 5
12862: PUSH
12863: FOR_TO
12864: IFFALSE 12894
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12866: LD_VAR 0 6
12870: PUSH
12871: LD_VAR 0 1
12875: ARRAY
12876: PPUSH
12877: LD_VAR 0 5
12881: PUSH
12882: LD_VAR 0 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 120
12892: GO 12863
12894: POP
12895: POP
// wait ( 0 0$5 ) ;
12896: LD_INT 175
12898: PPUSH
12899: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12903: LD_EXP 38
12907: PPUSH
12908: LD_INT 199
12910: PPUSH
12911: LD_INT 141
12913: PPUSH
12914: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12918: LD_EXP 33
12922: PPUSH
12923: LD_INT 190
12925: PPUSH
12926: LD_INT 143
12928: PPUSH
12929: CALL_OW 111
// AddComHold ( Omar ) ;
12933: LD_EXP 33
12937: PPUSH
12938: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12942: LD_EXP 38
12946: PPUSH
12947: LD_INT 2
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 25
12962: PUSH
12963: LD_INT 4
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 72
12979: PPUSH
12980: LD_INT 161
12982: PPUSH
12983: LD_INT 130
12985: PPUSH
12986: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12990: LD_EXP 38
12994: PPUSH
12995: LD_INT 25
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PPUSH
13005: CALL_OW 72
13009: PPUSH
13010: LD_INT 163
13012: PPUSH
13013: LD_INT 122
13015: PPUSH
13016: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13020: LD_EXP 38
13024: PPUSH
13025: LD_INT 25
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 72
13039: PUSH
13040: LD_INT 4
13042: ARRAY
13043: PPUSH
13044: LD_INT 165
13046: PPUSH
13047: LD_INT 118
13049: PPUSH
13050: LD_INT 0
13052: PPUSH
13053: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13057: LD_EXP 38
13061: PPUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 72
13076: PUSH
13077: LD_INT 4
13079: ARRAY
13080: PPUSH
13081: LD_INT 159
13083: PPUSH
13084: LD_INT 116
13086: PPUSH
13087: LD_INT 0
13089: PPUSH
13090: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13094: LD_EXP 38
13098: PPUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PPUSH
13114: LD_INT 169
13116: PPUSH
13117: LD_INT 114
13119: PPUSH
13120: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13124: LD_INT 35
13126: PPUSH
13127: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13131: LD_ADDR_VAR 0 5
13135: PUSH
13136: LD_EXP 38
13140: PPUSH
13141: LD_INT 25
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 72
13155: ST_TO_ADDR
// for i in tmp do
13156: LD_ADDR_VAR 0 1
13160: PUSH
13161: LD_VAR 0 5
13165: PUSH
13166: FOR_IN
13167: IFFALSE 13264
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13169: LD_VAR 0 1
13173: PPUSH
13174: CALL_OW 256
13178: PUSH
13179: LD_INT 600
13181: LESS
13182: PUSH
13183: LD_VAR 0 1
13187: PPUSH
13188: LD_INT 161
13190: PPUSH
13191: LD_INT 130
13193: PPUSH
13194: CALL_OW 297
13198: PUSH
13199: LD_INT 6
13201: GREATER
13202: AND
13203: IFFALSE 13220
// ComMoveXY ( i , 161 , 130 ) ;
13205: LD_VAR 0 1
13209: PPUSH
13210: LD_INT 161
13212: PPUSH
13213: LD_INT 130
13215: PPUSH
13216: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 256
13229: PUSH
13230: LD_INT 1000
13232: EQUAL
13233: PUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 314
13243: NOT
13244: AND
13245: IFFALSE 13262
// ComAgressiveMove ( i , 160 , 109 ) ;
13247: LD_VAR 0 1
13251: PPUSH
13252: LD_INT 160
13254: PPUSH
13255: LD_INT 109
13257: PPUSH
13258: CALL_OW 114
// end ;
13262: GO 13166
13264: POP
13265: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13266: LD_ADDR_VAR 0 5
13270: PUSH
13271: LD_EXP 38
13275: PPUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 72
13290: ST_TO_ADDR
// for i in tmp do
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: LD_VAR 0 5
13300: PUSH
13301: FOR_IN
13302: IFFALSE 13568
// begin tmp2 := IsDrivenBy ( i ) ;
13304: LD_ADDR_VAR 0 6
13308: PUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 311
13318: ST_TO_ADDR
// if not tmp2 then
13319: LD_VAR 0 6
13323: NOT
13324: IFFALSE 13328
// continue ;
13326: GO 13301
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 256
13337: PUSH
13338: LD_INT 600
13340: GREATEREQUAL
13341: PUSH
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL_OW 110
13351: PUSH
13352: LD_INT 1
13354: EQUAL
13355: AND
13356: IFFALSE 13370
// SetTag ( i , 0 ) ;
13358: LD_VAR 0 1
13362: PPUSH
13363: LD_INT 0
13365: PPUSH
13366: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 256
13379: PUSH
13380: LD_INT 600
13382: GREATEREQUAL
13383: PUSH
13384: LD_VAR 0 1
13388: PPUSH
13389: CALL_OW 110
13393: NOT
13394: AND
13395: IFFALSE 13421
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_VAR 0 7
13406: PPUSH
13407: LD_VAR 0 1
13411: PPUSH
13412: CALL_OW 74
13416: PPUSH
13417: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13421: LD_VAR 0 1
13425: PPUSH
13426: CALL_OW 256
13430: PUSH
13431: LD_INT 600
13433: LESS
13434: PUSH
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 110
13444: NOT
13445: AND
13446: IFFALSE 13475
// begin SetTag ( i , 1 ) ;
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13460: LD_VAR 0 1
13464: PPUSH
13465: LD_INT 202
13467: PPUSH
13468: LD_INT 150
13470: PPUSH
13471: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 110
13484: PUSH
13485: LD_INT 1
13487: EQUAL
13488: PUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_INT 202
13496: PPUSH
13497: LD_INT 150
13499: PPUSH
13500: CALL_OW 297
13504: PUSH
13505: LD_INT 6
13507: LESS
13508: AND
13509: PUSH
13510: LD_VAR 0 6
13514: AND
13515: IFFALSE 13566
// begin ComExitVehicle ( tmp2 ) ;
13517: LD_VAR 0 6
13521: PPUSH
13522: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13526: LD_VAR 0 6
13530: PPUSH
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13540: LD_VAR 0 6
13544: PPUSH
13545: LD_INT 700
13547: PPUSH
13548: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13552: LD_VAR 0 6
13556: PPUSH
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 180
// end ; end ;
13566: GO 13301
13568: POP
13569: POP
// until kirovDestroyed ;
13570: LD_EXP 16
13574: IFFALSE 13124
// repeat wait ( 0 0$1 ) ;
13576: LD_INT 35
13578: PPUSH
13579: CALL_OW 67
// for i in omarSquad union Omar do
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: LD_EXP 38
13592: PUSH
13593: LD_EXP 33
13597: UNION
13598: PUSH
13599: FOR_IN
13600: IFFALSE 13644
// if IsInArea ( i , southRoadArea ) then
13602: LD_VAR 0 1
13606: PPUSH
13607: LD_INT 15
13609: PPUSH
13610: CALL_OW 308
13614: IFFALSE 13627
// RemoveUnit ( i ) else
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 64
13625: GO 13642
// ComMoveXY ( i , 208 , 162 ) ;
13627: LD_VAR 0 1
13631: PPUSH
13632: LD_INT 208
13634: PPUSH
13635: LD_INT 162
13637: PPUSH
13638: CALL_OW 111
13642: GO 13599
13644: POP
13645: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13646: LD_INT 22
13648: PUSH
13649: LD_INT 5
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 21
13658: PUSH
13659: LD_INT 1
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PPUSH
13670: CALL_OW 69
13674: NOT
13675: IFFALSE 13576
// end ;
13677: PPOPN 7
13679: END
// every 0 0$1 trigger IsDead ( kirov ) do
13680: LD_INT 71
13682: PPUSH
13683: CALL_OW 301
13687: IFFALSE 13704
13689: GO 13691
13691: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13692: LD_EXP 25
13696: PPUSH
13697: LD_STRING DH-1-Kirov
13699: PPUSH
13700: CALL_OW 88
13704: END
// every 0 0$1 trigger See ( 2 , beria ) do
13705: LD_INT 2
13707: PPUSH
13708: LD_INT 106
13710: PPUSH
13711: CALL_OW 292
13715: IFFALSE 13732
13717: GO 13719
13719: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13720: LD_EXP 25
13724: PPUSH
13725: LD_STRING DH-1-Beria
13727: PPUSH
13728: CALL_OW 88
13732: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13733: LD_INT 2
13735: PPUSH
13736: LD_INT 112
13738: PPUSH
13739: CALL_OW 292
13743: IFFALSE 13988
13745: GO 13747
13747: DISABLE
// begin DialogueOn ;
13748: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13752: LD_INT 112
13754: PPUSH
13755: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13759: LD_EXP 25
13763: PPUSH
13764: LD_STRING DH-1-Kagan
13766: PPUSH
13767: CALL_OW 88
// if Kamil then
13771: LD_EXP 29
13775: IFFALSE 13813
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13777: LD_EXP 29
13781: PPUSH
13782: LD_STRING DKam-Kagan-2
13784: PPUSH
13785: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13789: LD_EXP 26
13793: PPUSH
13794: LD_STRING DG-Kagan-3
13796: PPUSH
13797: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13801: LD_EXP 26
13805: PPUSH
13806: LD_STRING DG-Kagan-4
13808: PPUSH
13809: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13813: LD_STRING KaganBase
13815: PPUSH
13816: CALL_OW 97
13820: PUSH
13821: LD_INT 1
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13924
13829: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13830: LD_EXP 25
13834: PPUSH
13835: LD_STRING DH-Kagan-5
13837: PPUSH
13838: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13842: LD_EXP 25
13846: PPUSH
13847: LD_STRING DH-Kagan-6
13849: PPUSH
13850: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13854: LD_EXP 36
13858: PPUSH
13859: LD_STRING DShar-Kagan-7
13861: PPUSH
13862: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13866: LD_EXP 25
13870: PPUSH
13871: LD_STRING DH-Kagan-8
13873: PPUSH
13874: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13878: LD_EXP 25
13882: PPUSH
13883: LD_STRING DH-Kagan-9
13885: PPUSH
13886: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13890: LD_EXP 36
13894: PPUSH
13895: LD_STRING DShar-Kagan-10
13897: PPUSH
13898: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13902: LD_EXP 25
13906: PPUSH
13907: LD_STRING DH-Kagan-11
13909: PPUSH
13910: CALL_OW 88
// kaganCaptured := true ;
13914: LD_ADDR_EXP 24
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// end ; 2 :
13922: GO 13984
13924: LD_INT 2
13926: DOUBLE
13927: EQUAL
13928: IFTRUE 13932
13930: GO 13983
13932: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
13933: LD_EXP 25
13937: PPUSH
13938: LD_STRING DH-Kagan-a-5
13940: PPUSH
13941: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13945: LD_EXP 25
13949: PPUSH
13950: LD_STRING DH-Kagan-a-6
13952: PPUSH
13953: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13957: LD_EXP 25
13961: PPUSH
13962: LD_STRING DH-Kagan-a-7
13964: PPUSH
13965: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13969: LD_EXP 26
13973: PPUSH
13974: LD_STRING DG-Kagan-a-8
13976: PPUSH
13977: CALL_OW 88
// end ; end ;
13981: GO 13984
13983: POP
// DialogueOff ;
13984: CALL_OW 7
// end ;
13988: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13989: LD_EXP 18
13993: PUSH
13994: LD_INT 112
13996: PPUSH
13997: CALL_OW 255
14001: PUSH
14002: LD_INT 2
14004: EQUAL
14005: OR
14006: IFFALSE 14018
14008: GO 14010
14010: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14011: LD_STRING KaganDone
14013: PPUSH
14014: CALL_OW 337
14018: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14019: LD_EXP 6
14023: PUSH
14024: LD_EXP 48
14028: PPUSH
14029: LD_INT 95
14031: PUSH
14032: LD_INT 19
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 72
14043: AND
14044: IFFALSE 14121
14046: GO 14048
14048: DISABLE
// begin DialogueOn ;
14049: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14053: LD_INT 63
14055: PPUSH
14056: LD_INT 32
14058: PPUSH
14059: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14063: LD_INT 63
14065: PPUSH
14066: LD_INT 32
14068: PPUSH
14069: LD_INT 2
14071: PPUSH
14072: LD_INT 12
14074: NEG
14075: PPUSH
14076: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14080: LD_EXP 25
14084: PPUSH
14085: LD_STRING DH-Omicron-1
14087: PPUSH
14088: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14092: LD_EXP 27
14096: PPUSH
14097: LD_STRING DM-Omicron-2
14099: PPUSH
14100: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14104: LD_INT 63
14106: PPUSH
14107: LD_INT 32
14109: PPUSH
14110: LD_INT 2
14112: PPUSH
14113: CALL_OW 331
// DialogueOff ;
14117: CALL_OW 7
// end ;
14121: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , tmp2 , q , settings ;
14122: LD_INT 2
14124: PPUSH
14125: LD_EXP 50
14129: PPUSH
14130: CALL_OW 292
14134: PUSH
14135: LD_EXP 50
14139: PPUSH
14140: CALL_OW 302
14144: AND
14145: PUSH
14146: LD_EXP 25
14150: PPUSH
14151: CALL_OW 302
14155: AND
14156: PUSH
14157: LD_EXP 35
14161: PPUSH
14162: CALL_OW 302
14166: AND
14167: PUSH
14168: LD_INT 2
14170: PPUSH
14171: CALL_OW 463
14175: NOT
14176: AND
14177: IFFALSE 14740
14179: GO 14181
14181: DISABLE
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
// begin DialogueOn ;
14189: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14193: LD_INT 111
14195: PPUSH
14196: LD_INT 90
14198: PPUSH
14199: LD_INT 2
14201: PPUSH
14202: LD_INT 6
14204: NEG
14205: PPUSH
14206: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14210: LD_INT 111
14212: PPUSH
14213: LD_INT 90
14215: PPUSH
14216: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14220: LD_EXP 35
14224: PPUSH
14225: LD_STRING DA-Cap-1
14227: PPUSH
14228: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14232: LD_EXP 25
14236: PPUSH
14237: LD_STRING DH-Cap-2
14239: PPUSH
14240: CALL_OW 88
// DialogueOff ;
14244: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14248: LD_INT 35
14250: PPUSH
14251: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
14255: LD_EXP 17
14259: PUSH
14260: LD_EXP 50
14264: PPUSH
14265: CALL_OW 302
14269: AND
14270: PUSH
14271: LD_EXP 35
14275: PPUSH
14276: CALL_OW 302
14280: AND
14281: IFFALSE 14248
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14283: LD_ADDR_VAR 0 2
14287: PUSH
14288: LD_EXP 37
14292: PUSH
14293: LD_EXP 28
14297: PUSH
14298: LD_EXP 29
14302: PUSH
14303: LD_EXP 31
14307: PUSH
14308: LD_EXP 30
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: UNION
14319: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14320: LD_ADDR_VAR 0 2
14324: PUSH
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_INT 50
14332: PUSH
14333: EMPTY
14334: LIST
14335: PPUSH
14336: CALL_OW 72
14340: ST_TO_ADDR
// if tmp < 2 then
14341: LD_VAR 0 2
14345: PUSH
14346: LD_INT 2
14348: LESS
14349: IFFALSE 14361
// q := 2 else
14351: LD_ADDR_VAR 0 4
14355: PUSH
14356: LD_INT 2
14358: ST_TO_ADDR
14359: GO 14374
// q := Query ( LabCap ) ;
14361: LD_ADDR_VAR 0 4
14365: PUSH
14366: LD_STRING LabCap
14368: PPUSH
14369: CALL_OW 97
14373: ST_TO_ADDR
// case q of 1 :
14374: LD_VAR 0 4
14378: PUSH
14379: LD_INT 1
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14704
14387: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14388: LD_INT 2
14390: PPUSH
14391: LD_EXP 50
14395: PPUSH
14396: CALL_OW 471
// labCaptured := true ;
14400: LD_ADDR_EXP 21
14404: PUSH
14405: LD_INT 1
14407: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14408: LD_EXP 25
14412: PPUSH
14413: LD_STRING DH-Cap-a-1
14415: PPUSH
14416: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14420: LD_EXP 35
14424: PPUSH
14425: LD_STRING DA-Cap-a-2
14427: PPUSH
14428: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_EXP 25
14441: PUSH
14442: LD_INT -3
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_VAR 0 2
14453: ADD
14454: PUSH
14455: LD_INT -2
14457: PUSH
14458: LD_INT -4
14460: PUSH
14461: LD_EXP 35
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: ADD
14471: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14472: LD_ADDR_VAR 0 3
14476: PUSH
14477: LD_STRING Select two characters to go with Aviradze
14479: PPUSH
14480: LD_INT 2
14482: PPUSH
14483: LD_INT 2
14485: PPUSH
14486: LD_VAR 0 5
14490: PPUSH
14491: EMPTY
14492: PPUSH
14493: CALL_OW 42
14497: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14498: LD_EXP 50
14502: PPUSH
14503: LD_INT 8
14505: PPUSH
14506: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14510: LD_EXP 35
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14522: LD_ADDR_EXP 39
14526: PUSH
14527: LD_EXP 35
14531: PUSH
14532: EMPTY
14533: LIST
14534: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14535: LD_EXP 35
14539: PPUSH
14540: CALL_OW 310
14544: IFFALSE 14555
// ComExit ( Aviradze ) ;
14546: LD_EXP 35
14550: PPUSH
14551: CALL 783 0 1
// wait ( 3 ) ;
14555: LD_INT 3
14557: PPUSH
14558: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14562: LD_EXP 35
14566: PPUSH
14567: LD_EXP 50
14571: PPUSH
14572: CALL_OW 120
// for i := 1 to 2 do
14576: LD_ADDR_VAR 0 1
14580: PUSH
14581: DOUBLE
14582: LD_INT 1
14584: DEC
14585: ST_TO_ADDR
14586: LD_INT 2
14588: PUSH
14589: FOR_TO
14590: IFFALSE 14693
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14592: LD_ADDR_EXP 39
14596: PUSH
14597: LD_EXP 39
14601: PUSH
14602: LD_VAR 0 3
14606: PUSH
14607: LD_VAR 0 1
14611: ARRAY
14612: UNION
14613: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14614: LD_VAR 0 3
14618: PUSH
14619: LD_VAR 0 1
14623: ARRAY
14624: PPUSH
14625: LD_INT 8
14627: PPUSH
14628: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14632: LD_VAR 0 3
14636: PUSH
14637: LD_VAR 0 1
14641: ARRAY
14642: PPUSH
14643: CALL_OW 310
14647: IFFALSE 14664
// ComExit ( tmp2 [ i ] ) ;
14649: LD_VAR 0 3
14653: PUSH
14654: LD_VAR 0 1
14658: ARRAY
14659: PPUSH
14660: CALL 783 0 1
// wait ( 3 ) ;
14664: LD_INT 3
14666: PPUSH
14667: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14671: LD_VAR 0 3
14675: PUSH
14676: LD_VAR 0 1
14680: ARRAY
14681: PPUSH
14682: LD_EXP 50
14686: PPUSH
14687: CALL_OW 120
// end ;
14691: GO 14589
14693: POP
14694: POP
// SetAchievement ( ACH_LAB ) ;
14695: LD_STRING ACH_LAB
14697: PPUSH
14698: CALL_OW 543
// end ; 2 :
14702: GO 14740
14704: LD_INT 2
14706: DOUBLE
14707: EQUAL
14708: IFTRUE 14712
14710: GO 14739
14712: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14713: LD_EXP 25
14717: PPUSH
14718: LD_STRING DH-Cap-b-1
14720: PPUSH
14721: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14725: LD_EXP 35
14729: PPUSH
14730: LD_STRING DA-Cap-b-2
14732: PPUSH
14733: CALL_OW 88
// end ; end ;
14737: GO 14740
14739: POP
// end ;
14740: PPOPN 5
14742: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14743: LD_INT 10
14745: PPUSH
14746: LD_INT 22
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 30
14758: PUSH
14759: LD_INT 31
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 70
14774: PUSH
14775: LD_INT 2
14777: GREATEREQUAL
14778: IFFALSE 14790
14780: GO 14782
14782: DISABLE
// SetAchievement ( ACH_KING ) ;
14783: LD_STRING ACH_KING
14785: PPUSH
14786: CALL_OW 543
14790: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14791: LD_EXP 11
14795: NOT
14796: PUSH
14797: LD_INT 10
14799: PPUSH
14800: LD_INT 22
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 2
14812: PUSH
14813: LD_INT 30
14815: PUSH
14816: LD_INT 31
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: LD_INT 4
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 70
14846: AND
14847: IFFALSE 14867
14849: GO 14851
14851: DISABLE
// begin hillBase := true ;
14852: LD_ADDR_EXP 15
14856: PUSH
14857: LD_INT 1
14859: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14860: LD_STRING HillDone
14862: PPUSH
14863: CALL_OW 337
// end ;
14867: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14868: LD_EXP 30
14872: PUSH
14873: LD_EXP 30
14877: PPUSH
14878: CALL_OW 256
14882: PUSH
14883: LD_INT 3
14885: LESS
14886: AND
14887: IFFALSE 14933
14889: GO 14891
14891: DISABLE
// begin DialogueOn ;
14892: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14896: LD_EXP 30
14900: PPUSH
14901: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14905: LD_EXP 30
14909: PPUSH
14910: LD_STRING DK-Kkilled-1
14912: PPUSH
14913: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14917: LD_EXP 25
14921: PPUSH
14922: LD_STRING DH-Kkilled-2
14924: PPUSH
14925: CALL_OW 88
// DialogueOff ;
14929: CALL_OW 7
// end ;
14933: END
// every 0 0$1 trigger kaiaKilledByRussian do
14934: LD_EXP 23
14938: IFFALSE 14955
14940: GO 14942
14942: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14943: LD_EXP 25
14947: PPUSH
14948: LD_STRING DH-Kkilled-3
14950: PPUSH
14951: CALL_OW 88
14955: END
// every 0 0$1 trigger ( kirovDestroyed and beriaDestroyed and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14956: LD_EXP 16
14960: PUSH
14961: LD_EXP 17
14965: AND
14966: PUSH
14967: LD_EXP 18
14971: PUSH
14972: LD_EXP 24
14976: PUSH
14977: LD_INT 112
14979: PPUSH
14980: CALL_OW 255
14984: PUSH
14985: LD_INT 2
14987: EQUAL
14988: AND
14989: OR
14990: AND
14991: IFFALSE 16173
14993: GO 14995
14995: DISABLE
14996: LD_INT 0
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15002: LD_STRING GoToWest
15004: PPUSH
15005: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15009: LD_INT 17
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15019: LD_INT 35
15021: PPUSH
15022: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15026: LD_ADDR_VAR 0 2
15030: PUSH
15031: LD_INT 17
15033: PPUSH
15034: LD_INT 22
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 2
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 2
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 3
15069: PUSH
15070: LD_INT 58
15072: PUSH
15073: EMPTY
15074: LIST
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 70
15097: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_INT 22
15105: PUSH
15106: LD_INT 2
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 3
15115: PUSH
15116: LD_INT 55
15118: PUSH
15119: EMPTY
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: LD_INT 21
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 3
15151: PUSH
15152: LD_INT 58
15154: PUSH
15155: EMPTY
15156: LIST
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15181: LD_VAR 0 2
15185: PUSH
15186: LD_INT 0
15188: PLUS
15189: PUSH
15190: LD_VAR 0 3
15194: PUSH
15195: LD_INT 0
15197: PLUS
15198: EQUAL
15199: IFFALSE 15019
// SaveCharacters ( Heike , 04_1_Heike ) ;
15201: LD_EXP 25
15205: PPUSH
15206: LD_STRING 04_1_Heike
15208: PPUSH
15209: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15213: LD_EXP 35
15217: PUSH
15218: LD_EXP 35
15222: PUSH
15223: LD_EXP 39
15227: IN
15228: NOT
15229: AND
15230: IFFALSE 15246
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15232: LD_EXP 35
15236: PPUSH
15237: LD_STRING 04_1_Aviradze
15239: PPUSH
15240: CALL_OW 38
15244: GO 15264
// if Aviradze then
15246: LD_EXP 35
15250: IFFALSE 15264
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15252: LD_EXP 35
15256: PPUSH
15257: LD_STRING 04_1_Aviradze_L
15259: PPUSH
15260: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15264: LD_EXP 28
15268: PUSH
15269: LD_EXP 28
15273: PUSH
15274: LD_EXP 39
15278: IN
15279: NOT
15280: AND
15281: IFFALSE 15297
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15283: LD_EXP 28
15287: PPUSH
15288: LD_STRING 04_1_Ibrahim
15290: PPUSH
15291: CALL_OW 38
15295: GO 15315
// if Ibrahim then
15297: LD_EXP 28
15301: IFFALSE 15315
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15303: LD_EXP 28
15307: PPUSH
15308: LD_STRING 04_1_Ibrahim_L
15310: PPUSH
15311: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15315: LD_EXP 29
15319: PUSH
15320: LD_EXP 29
15324: PUSH
15325: LD_EXP 39
15329: IN
15330: NOT
15331: AND
15332: IFFALSE 15348
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15334: LD_EXP 29
15338: PPUSH
15339: LD_STRING 04_1_Kamil
15341: PPUSH
15342: CALL_OW 38
15346: GO 15366
// if Kamil then
15348: LD_EXP 29
15352: IFFALSE 15366
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15354: LD_EXP 29
15358: PPUSH
15359: LD_STRING 04_1_Kamil_L
15361: PPUSH
15362: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15366: LD_EXP 31
15370: PUSH
15371: LD_EXP 31
15375: PUSH
15376: LD_EXP 39
15380: IN
15381: NOT
15382: AND
15383: IFFALSE 15399
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15385: LD_EXP 31
15389: PPUSH
15390: LD_STRING 04_1_Sophia
15392: PPUSH
15393: CALL_OW 38
15397: GO 15417
// if Sophia then
15399: LD_EXP 31
15403: IFFALSE 15417
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15405: LD_EXP 31
15409: PPUSH
15410: LD_STRING 04_1_Sophia_L
15412: PPUSH
15413: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15417: LD_EXP 30
15421: PUSH
15422: LD_EXP 30
15426: PUSH
15427: LD_EXP 39
15431: IN
15432: NOT
15433: AND
15434: IFFALSE 15450
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15436: LD_EXP 30
15440: PPUSH
15441: LD_STRING 04_1_Kaia
15443: PPUSH
15444: CALL_OW 38
15448: GO 15468
// if Kaia then
15450: LD_EXP 30
15454: IFFALSE 15468
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15456: LD_EXP 30
15460: PPUSH
15461: LD_STRING 04_1_Kaia_L
15463: PPUSH
15464: CALL_OW 38
// if Givi then
15468: LD_EXP 26
15472: IFFALSE 15486
// SaveCharacters ( Givi , 04_1_Givi ) ;
15474: LD_EXP 26
15478: PPUSH
15479: LD_STRING 04_1_Givi
15481: PPUSH
15482: CALL_OW 38
// if Mike then
15486: LD_EXP 27
15490: IFFALSE 15504
// SaveCharacters ( Mike , 04_1_Mike ) ;
15492: LD_EXP 27
15496: PPUSH
15497: LD_STRING 04_1_Mike
15499: PPUSH
15500: CALL_OW 38
// if Markov then
15504: LD_EXP 32
15508: IFFALSE 15522
// SaveCharacters ( Markov , 04_1_Markov ) ;
15510: LD_EXP 32
15514: PPUSH
15515: LD_STRING 04_1_Markov
15517: PPUSH
15518: CALL_OW 38
// if Kurt then
15522: LD_EXP 34
15526: IFFALSE 15540
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15528: LD_EXP 34
15532: PPUSH
15533: LD_STRING 04_1_Kurt
15535: PPUSH
15536: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15540: LD_EXP 37
15544: PUSH
15545: LD_EXP 39
15549: DIFF
15550: IFFALSE 15570
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15552: LD_EXP 37
15556: PUSH
15557: LD_EXP 39
15561: DIFF
15562: PPUSH
15563: LD_STRING 04_1_others
15565: PPUSH
15566: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15570: LD_EXP 39
15574: PUSH
15575: LD_EXP 37
15579: AND
15580: IFFALSE 15665
// begin tmp := [ ] ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: EMPTY
15588: ST_TO_ADDR
// for i in heikeSecondSquad do
15589: LD_ADDR_VAR 0 1
15593: PUSH
15594: LD_EXP 37
15598: PUSH
15599: FOR_IN
15600: IFFALSE 15645
// if i in aviradzeSquad then
15602: LD_VAR 0 1
15606: PUSH
15607: LD_EXP 39
15611: IN
15612: IFFALSE 15643
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: LD_VAR 0 2
15628: PUSH
15629: LD_INT 1
15631: PLUS
15632: PPUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: CALL_OW 1
15642: ST_TO_ADDR
15643: GO 15599
15645: POP
15646: POP
// if tmp then
15647: LD_VAR 0 2
15651: IFFALSE 15665
// SaveCharacters ( tmp , 04_1_others_L ) ;
15653: LD_VAR 0 2
15657: PPUSH
15658: LD_STRING 04_1_others_L
15660: PPUSH
15661: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: LD_INT 22
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 23
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: ST_TO_ADDR
// if tmp then
15699: LD_VAR 0 2
15703: IFFALSE 15717
// SaveCharacters ( tmp , 04_1_apes ) ;
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_STRING 04_1_apes
15712: PPUSH
15713: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15717: LD_ADDR_VAR 0 2
15721: PUSH
15722: LD_INT 17
15724: PPUSH
15725: LD_INT 21
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 70
15739: ST_TO_ADDR
// if tmp then
15740: LD_VAR 0 2
15744: IFFALSE 16038
// begin tmp2 := [ ] ;
15746: LD_ADDR_VAR 0 3
15750: PUSH
15751: EMPTY
15752: ST_TO_ADDR
// for i in tmp do
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: LD_VAR 0 2
15762: PUSH
15763: FOR_IN
15764: IFFALSE 16024
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15766: LD_VAR 0 1
15770: PPUSH
15771: CALL_OW 264
15775: PUSH
15776: LD_INT 32
15778: PUSH
15779: LD_INT 12
15781: PUSH
15782: LD_INT 51
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: IN
15790: IFFALSE 15927
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15792: LD_ADDR_VAR 0 4
15796: PUSH
15797: LD_VAR 0 1
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 289
15809: PUSH
15810: LD_VAR 0 1
15814: PPUSH
15815: LD_INT 2
15817: PPUSH
15818: CALL_OW 289
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15827: LD_ADDR_VAR 0 3
15831: PUSH
15832: LD_VAR 0 3
15836: PPUSH
15837: LD_VAR 0 3
15841: PUSH
15842: LD_INT 1
15844: PLUS
15845: PPUSH
15846: LD_VAR 0 1
15850: PPUSH
15851: CALL_OW 265
15855: PUSH
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 262
15865: PUSH
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 263
15875: PUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 264
15885: PUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 248
15895: PUSH
15896: LD_VAR 0 1
15900: PPUSH
15901: CALL_OW 256
15905: PUSH
15906: LD_VAR 0 4
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: PPUSH
15920: CALL_OW 1
15924: ST_TO_ADDR
// end else
15925: GO 16022
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15927: LD_ADDR_VAR 0 3
15931: PUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 1
15944: PLUS
15945: PPUSH
15946: LD_VAR 0 1
15950: PPUSH
15951: CALL_OW 265
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 262
15965: PUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 263
15975: PUSH
15976: LD_VAR 0 1
15980: PPUSH
15981: CALL_OW 264
15985: PUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 248
15995: PUSH
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 256
16005: PUSH
16006: EMPTY
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: PPUSH
16017: CALL_OW 1
16021: ST_TO_ADDR
16022: GO 15763
16024: POP
16025: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16026: LD_VAR 0 3
16030: PPUSH
16031: LD_STRING 04_1_Vehicles
16033: PPUSH
16034: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16038: LD_EXP 21
16042: PPUSH
16043: LD_STRING 04_1_RuLabCaptured
16045: PPUSH
16046: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16050: LD_EXP 19
16054: PPUSH
16055: LD_STRING 04_1_EscapeCounter
16057: PPUSH
16058: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16062: LD_EXP 15
16066: PPUSH
16067: LD_STRING 04_1_BaseHill
16069: PPUSH
16070: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16074: LD_OWVAR 1
16078: PPUSH
16079: LD_STRING 04_1_Time
16081: PPUSH
16082: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16086: LD_EXP 14
16090: PPUSH
16091: LD_STRING 04_1_DeadCounter
16093: PPUSH
16094: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16098: LD_EXP 24
16102: PUSH
16103: LD_INT 112
16105: PPUSH
16106: CALL_OW 255
16110: MUL
16111: PUSH
16112: LD_INT 2
16114: EQUAL
16115: PPUSH
16116: LD_STRING 04_1_KaganCaptured
16118: PPUSH
16119: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16123: LD_INT 22
16125: PUSH
16126: LD_INT 2
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 34
16135: PUSH
16136: LD_INT 26
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PPUSH
16147: CALL_OW 69
16151: PUSH
16152: LD_INT 0
16154: PLUS
16155: PPUSH
16156: LD_STRING 04_1_Flamethrower
16158: PPUSH
16159: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16163: LD_INT 1
16165: PPUSH
16166: LD_STRING __x1\04_cont2
16168: PPUSH
16169: CALL_OW 340
// end ; end_of_file
16173: PPOPN 4
16175: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 266
16185: PUSH
16186: LD_INT 0
16188: EQUAL
16189: PUSH
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 255
16199: PUSH
16200: LD_INT 2
16202: EQUAL
16203: AND
16204: IFFALSE 16214
// baseConstructed := true ;
16206: LD_ADDR_EXP 3
16210: PUSH
16211: LD_INT 1
16213: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 266
16223: PUSH
16224: LD_INT 6
16226: EQUAL
16227: PUSH
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 255
16237: PUSH
16238: LD_INT 2
16240: EQUAL
16241: AND
16242: IFFALSE 16252
// labConstructed := true ;
16244: LD_ADDR_EXP 4
16248: PUSH
16249: LD_INT 1
16251: ST_TO_ADDR
// end ;
16252: PPOPN 1
16254: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16255: LD_VAR 0 1
16259: PUSH
16260: LD_EXP 25
16264: EQUAL
16265: IFFALSE 16274
// YouLost ( Heike ) ;
16267: LD_STRING Heike
16269: PPUSH
16270: CALL_OW 104
// if un = Omar then
16274: LD_VAR 0 1
16278: PUSH
16279: LD_EXP 33
16283: EQUAL
16284: IFFALSE 16293
// YouLost ( Omar ) ;
16286: LD_STRING Omar
16288: PPUSH
16289: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16293: LD_VAR 0 1
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 23
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 21
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: IN
16338: IFFALSE 16354
// loseCounter := loseCounter + 1 ;
16340: LD_ADDR_EXP 14
16344: PUSH
16345: LD_EXP 14
16349: PUSH
16350: LD_INT 1
16352: PLUS
16353: ST_TO_ADDR
// if un = omikron then
16354: LD_VAR 0 1
16358: PUSH
16359: LD_INT 64
16361: EQUAL
16362: IFFALSE 16372
// omicronFall := true ;
16364: LD_ADDR_EXP 13
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// if un = kirov then
16372: LD_VAR 0 1
16376: PUSH
16377: LD_INT 71
16379: EQUAL
16380: IFFALSE 16397
// begin ChangeMissionObjectives ( KirovDone ) ;
16382: LD_STRING KirovDone
16384: PPUSH
16385: CALL_OW 337
// kirovDestroyed := true ;
16389: LD_ADDR_EXP 16
16393: PUSH
16394: LD_INT 1
16396: ST_TO_ADDR
// end ; if un = beria then
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 106
16404: EQUAL
16405: IFFALSE 16422
// begin ChangeMissionObjectives ( BeriaDone ) ;
16407: LD_STRING BeriaDone
16409: PPUSH
16410: CALL_OW 337
// beriaDestroyed := true ;
16414: LD_ADDR_EXP 17
16418: PUSH
16419: LD_INT 1
16421: ST_TO_ADDR
// end ; if un = kagan then
16422: LD_VAR 0 1
16426: PUSH
16427: LD_INT 112
16429: EQUAL
16430: IFFALSE 16440
// kaganDestroyed := true ;
16432: LD_ADDR_EXP 18
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// if un in russianPatrol then
16440: LD_VAR 0 1
16444: PUSH
16445: LD_EXP 47
16449: IN
16450: IFFALSE 16491
// begin if GetTag ( un ) = 2 then
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 110
16461: PUSH
16462: LD_INT 2
16464: EQUAL
16465: IFFALSE 16475
// spottedByPatrol := false ;
16467: LD_ADDR_EXP 7
16471: PUSH
16472: LD_INT 0
16474: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
16475: LD_ADDR_EXP 47
16479: PUSH
16480: LD_EXP 47
16484: PUSH
16485: LD_VAR 0 1
16489: DIFF
16490: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
16491: LD_VAR 0 1
16495: PUSH
16496: LD_EXP 48
16500: IN
16501: IFFALSE 16519
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16503: LD_ADDR_EXP 48
16507: PUSH
16508: LD_EXP 48
16512: PUSH
16513: LD_VAR 0 1
16517: DIFF
16518: ST_TO_ADDR
// end ;
16519: PPOPN 1
16521: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16527: LD_VAR 0 1
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_INT 4
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_INT 6
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 30
16573: PUSH
16574: LD_INT 32
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: IN
16590: IFFALSE 16763
// begin sol := UnitsInside ( un ) ;
16592: LD_ADDR_VAR 0 3
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 313
16606: ST_TO_ADDR
// if not sol then
16607: LD_VAR 0 3
16611: NOT
16612: IFFALSE 16616
// exit ;
16614: GO 16763
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16616: LD_ADDR_VAR 0 4
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 255
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: LD_INT 30
16643: PUSH
16644: LD_INT 4
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 30
16653: PUSH
16654: LD_INT 5
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PPUSH
16670: CALL_OW 69
16674: ST_TO_ADDR
// if not nearestBarracks then
16675: LD_VAR 0 4
16679: NOT
16680: IFFALSE 16684
// exit ;
16682: GO 16763
// for i in nearestBarracks do
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: LD_VAR 0 4
16693: PUSH
16694: FOR_IN
16695: IFFALSE 16730
// if UnitsInside ( i ) = 6 then
16697: LD_VAR 0 2
16701: PPUSH
16702: CALL_OW 313
16706: PUSH
16707: LD_INT 6
16709: EQUAL
16710: IFFALSE 16728
// nearestBarracks := nearestBarracks diff i ;
16712: LD_ADDR_VAR 0 4
16716: PUSH
16717: LD_VAR 0 4
16721: PUSH
16722: LD_VAR 0 2
16726: DIFF
16727: ST_TO_ADDR
16728: GO 16694
16730: POP
16731: POP
// if not nearestBarracks then
16732: LD_VAR 0 4
16736: NOT
16737: IFFALSE 16741
// exit ;
16739: GO 16763
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16741: LD_VAR 0 3
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PPUSH
16750: LD_VAR 0 4
16754: PUSH
16755: LD_INT 1
16757: ARRAY
16758: PPUSH
16759: CALL_OW 120
// end ; end ;
16763: PPOPN 4
16765: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16766: LD_INT 0
16768: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16769: LD_EXP 8
16773: NOT
16774: PUSH
16775: LD_EXP 5
16779: NOT
16780: OR
16781: IFFALSE 16785
// exit ;
16783: GO 16853
// for i in camAreas do
16785: LD_ADDR_VAR 0 5
16789: PUSH
16790: LD_EXP 8
16794: PUSH
16795: FOR_IN
16796: IFFALSE 16851
// if InArea ( x , y , i ) then
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_VAR 0 4
16807: PPUSH
16808: LD_VAR 0 5
16812: PPUSH
16813: CALL_OW 309
16817: IFFALSE 16849
// begin SetAreaMapShow ( i , 0 ) ;
16819: LD_VAR 0 5
16823: PPUSH
16824: LD_INT 0
16826: PPUSH
16827: CALL_OW 424
// camAreas := camAreas diff i ;
16831: LD_ADDR_EXP 8
16835: PUSH
16836: LD_EXP 8
16840: PUSH
16841: LD_VAR 0 5
16845: DIFF
16846: ST_TO_ADDR
// break ;
16847: GO 16851
// end ;
16849: GO 16795
16851: POP
16852: POP
// end ;
16853: PPOPN 5
16855: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16856: LD_VAR 0 1
16860: PUSH
16861: LD_INT 2
16863: EQUAL
16864: PUSH
16865: LD_VAR 0 2
16869: PUSH
16870: LD_INT 5
16872: PUSH
16873: LD_INT 8
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: IN
16880: AND
16881: IFFALSE 16890
// YouLost ( Ally ) ;
16883: LD_STRING Ally
16885: PPUSH
16886: CALL_OW 104
// end ;
16890: PPOPN 2
16892: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16893: LD_VAR 0 1
16897: PUSH
16898: LD_EXP 30
16902: EQUAL
16903: PUSH
16904: LD_VAR 0 2
16908: PUSH
16909: LD_INT 3
16911: PUSH
16912: LD_INT 6
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: IN
16919: AND
16920: IFFALSE 16951
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16922: LD_ADDR_EXP 23
16926: PUSH
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 250
16936: PUSH
16937: LD_VAR 0 1
16941: PPUSH
16942: CALL_OW 251
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: ST_TO_ADDR
// end ; end_of_file
16951: PPOPN 3
16953: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16954: LD_EXP 11
16958: NOT
16959: PUSH
16960: LD_INT 12
16962: PPUSH
16963: LD_INT 1
16965: PPUSH
16966: CALL_OW 287
16970: PUSH
16971: LD_INT 20
16973: PUSH
16974: LD_INT 16
16976: PUSH
16977: LD_INT 12
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: PUSH
16985: LD_OWVAR 67
16989: ARRAY
16990: LESS
16991: AND
16992: IFFALSE 17019
16994: GO 16996
16996: DISABLE
// begin enable ;
16997: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16998: LD_INT 1
17000: PPUSH
17001: LD_INT 5
17003: PPUSH
17004: CALL_OW 12
17008: PPUSH
17009: LD_INT 12
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: CALL_OW 55
// end ; end_of_file
17019: END
// every 0 0$1 trigger omarCountdown do
17020: LD_EXP 22
17024: IFFALSE 17076
17026: GO 17028
17028: DISABLE
// begin enable ;
17029: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17030: LD_ADDR_OWVAR 47
17034: PUSH
17035: LD_STRING #X104-1
17037: PUSH
17038: LD_EXP 22
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17047: LD_ADDR_EXP 22
17051: PUSH
17052: LD_EXP 22
17056: PUSH
17057: LD_INT 35
17059: MINUS
17060: ST_TO_ADDR
// if not omarCountdown then
17061: LD_EXP 22
17065: NOT
17066: IFFALSE 17076
// display_strings :=  ;
17068: LD_ADDR_OWVAR 47
17072: PUSH
17073: LD_STRING 
17075: ST_TO_ADDR
// end ;
17076: END
