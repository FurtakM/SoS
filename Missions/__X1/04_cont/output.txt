// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// PrepareNature ;
   8: CALL 1860 0 0
// PrepareArabian ;
  12: CALL 2230 0 0
// PrepareAmerican ;
  16: CALL 7108 0 0
// PrepareRussian ;
  20: CALL 3186 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8668 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 366: LD_INT 0
 368: PPUSH
 369: PPUSH
// if exist_mode then
 370: LD_VAR 0 2
 374: IFFALSE 399
// unit := CreateCharacter ( prefix & ident ) else
 376: LD_ADDR_VAR 0 5
 380: PUSH
 381: LD_VAR 0 3
 385: PUSH
 386: LD_VAR 0 1
 390: STR
 391: PPUSH
 392: CALL_OW 34
 396: ST_TO_ADDR
 397: GO 414
// unit := NewCharacter ( ident ) ;
 399: LD_ADDR_VAR 0 5
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 25
 413: ST_TO_ADDR
// result := unit ;
 414: LD_ADDR_VAR 0 4
 418: PUSH
 419: LD_VAR 0 5
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 4
 428: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 429: LD_INT 0
 431: PPUSH
// uc_side := side ;
 432: LD_ADDR_OWVAR 20
 436: PUSH
 437: LD_VAR 0 1
 441: ST_TO_ADDR
// uc_nation := nation ;
 442: LD_ADDR_OWVAR 21
 446: PUSH
 447: LD_VAR 0 2
 451: ST_TO_ADDR
// vc_chassis := chassis ;
 452: LD_ADDR_OWVAR 37
 456: PUSH
 457: LD_VAR 0 3
 461: ST_TO_ADDR
// vc_engine := engine ;
 462: LD_ADDR_OWVAR 39
 466: PUSH
 467: LD_VAR 0 4
 471: ST_TO_ADDR
// vc_control := control ;
 472: LD_ADDR_OWVAR 38
 476: PUSH
 477: LD_VAR 0 5
 481: ST_TO_ADDR
// vc_weapon := weapon ;
 482: LD_ADDR_OWVAR 40
 486: PUSH
 487: LD_VAR 0 6
 491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 492: LD_ADDR_OWVAR 41
 496: PUSH
 497: LD_VAR 0 7
 501: ST_TO_ADDR
// result := CreateVehicle ;
 502: LD_ADDR_VAR 0 8
 506: PUSH
 507: CALL_OW 45
 511: ST_TO_ADDR
// end ;
 512: LD_VAR 0 8
 516: RET
// export function SayX ( units , ident ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// result := false ;
 521: LD_ADDR_VAR 0 3
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// if not units then
 529: LD_VAR 0 1
 533: NOT
 534: IFFALSE 538
// exit ;
 536: GO 592
// for i in units do
 538: LD_ADDR_VAR 0 4
 542: PUSH
 543: LD_VAR 0 1
 547: PUSH
 548: FOR_IN
 549: IFFALSE 590
// if IsOk ( i ) then
 551: LD_VAR 0 4
 555: PPUSH
 556: CALL_OW 302
 560: IFFALSE 588
// begin Say ( i , ident ) ;
 562: LD_VAR 0 4
 566: PPUSH
 567: LD_VAR 0 2
 571: PPUSH
 572: CALL_OW 88
// result := i ;
 576: LD_ADDR_VAR 0 3
 580: PUSH
 581: LD_VAR 0 4
 585: ST_TO_ADDR
// break ;
 586: GO 590
// end ;
 588: GO 548
 590: POP
 591: POP
// end ;
 592: LD_VAR 0 3
 596: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if not observer or not unit then
 602: LD_VAR 0 1
 606: NOT
 607: PUSH
 608: LD_VAR 0 2
 612: NOT
 613: OR
 614: IFFALSE 618
// exit ;
 616: GO 666
// if not See ( GetSide ( observer ) , unit ) then
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 255
 627: PPUSH
 628: LD_VAR 0 2
 632: PPUSH
 633: CALL_OW 292
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 666
// result := GetDistUnits ( observer , unit ) < 12 ;
 642: LD_ADDR_VAR 0 3
 646: PUSH
 647: LD_VAR 0 1
 651: PPUSH
 652: LD_VAR 0 2
 656: PPUSH
 657: CALL_OW 296
 661: PUSH
 662: LD_INT 12
 664: LESS
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 3
 670: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 671: LD_INT 0
 673: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 674: LD_VAR 0 2
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: LD_VAR 0 2
 687: PUSH
 688: LD_INT 2
 690: ARRAY
 691: PPUSH
 692: CALL_OW 488
 696: PUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 1
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 2
 713: ARRAY
 714: PPUSH
 715: CALL_OW 428
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: IFFALSE 758
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 726: LD_VAR 0 1
 730: PPUSH
 731: LD_VAR 0 2
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 2
 747: ARRAY
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 48
// end ;
 758: LD_VAR 0 4
 762: RET
// export function Video ( mode ) ; begin
 763: LD_INT 0
 765: PPUSH
// ingame_video = mode ;
 766: LD_ADDR_OWVAR 52
 770: PUSH
 771: LD_VAR 0 1
 775: ST_TO_ADDR
// interface_hidden = mode ;
 776: LD_ADDR_OWVAR 54
 780: PUSH
 781: LD_VAR 0 1
 785: ST_TO_ADDR
// end ;
 786: LD_VAR 0 2
 790: RET
// export function ReverseArray ( array ) ; var i ; begin
 791: LD_INT 0
 793: PPUSH
 794: PPUSH
// if not array then
 795: LD_VAR 0 1
 799: NOT
 800: IFFALSE 804
// exit ;
 802: GO 862
// result := [ ] ;
 804: LD_ADDR_VAR 0 2
 808: PUSH
 809: EMPTY
 810: ST_TO_ADDR
// for i := 1 to array do
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 1
 825: PUSH
 826: FOR_TO
 827: IFFALSE 860
// result := Insert ( result , 1 , array [ i ] ) ;
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: LD_VAR 0 2
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: LD_VAR 0 1
 846: PUSH
 847: LD_VAR 0 3
 851: ARRAY
 852: PPUSH
 853: CALL_OW 2
 857: ST_TO_ADDR
 858: GO 826
 860: POP
 861: POP
// end ;
 862: LD_VAR 0 2
 866: RET
// export function ComExit ( unit ) ; begin
 867: LD_INT 0
 869: PPUSH
// result := IsInUnit ( unit ) ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 310
 884: ST_TO_ADDR
// if not result then
 885: LD_VAR 0 2
 889: NOT
 890: IFFALSE 894
// exit ;
 892: GO 929
// if GetType ( result ) = unit_vehicle then
 894: LD_VAR 0 2
 898: PPUSH
 899: CALL_OW 247
 903: PUSH
 904: LD_INT 2
 906: EQUAL
 907: IFFALSE 920
// ComExitVehicle ( unit ) else
 909: LD_VAR 0 1
 913: PPUSH
 914: CALL_OW 121
 918: GO 929
// ComExitBuilding ( unit ) ;
 920: LD_VAR 0 1
 924: PPUSH
 925: CALL_OW 122
// end ;
 929: LD_VAR 0 2
 933: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 934: LD_INT 0
 936: PPUSH
 937: PPUSH
// if not side or not nation then
 938: LD_VAR 0 1
 942: NOT
 943: PUSH
 944: LD_VAR 0 2
 948: NOT
 949: OR
 950: IFFALSE 954
// exit ;
 952: GO 1718
// case nation of nation_american :
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: DOUBLE
 962: EQUAL
 963: IFTRUE 967
 965: GO 1181
 967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 35
 975: PUSH
 976: LD_INT 45
 978: PUSH
 979: LD_INT 46
 981: PUSH
 982: LD_INT 47
 984: PUSH
 985: LD_INT 82
 987: PUSH
 988: LD_INT 83
 990: PUSH
 991: LD_INT 84
 993: PUSH
 994: LD_INT 85
 996: PUSH
 997: LD_INT 86
 999: PUSH
1000: LD_INT 1
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: LD_INT 6
1008: PUSH
1009: LD_INT 15
1011: PUSH
1012: LD_INT 16
1014: PUSH
1015: LD_INT 7
1017: PUSH
1018: LD_INT 12
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 10
1026: PUSH
1027: LD_INT 14
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: LD_INT 21
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 25
1041: PUSH
1042: LD_INT 32
1044: PUSH
1045: LD_INT 27
1047: PUSH
1048: LD_INT 36
1050: PUSH
1051: LD_INT 69
1053: PUSH
1054: LD_INT 39
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 40
1062: PUSH
1063: LD_INT 48
1065: PUSH
1066: LD_INT 49
1068: PUSH
1069: LD_INT 50
1071: PUSH
1072: LD_INT 51
1074: PUSH
1075: LD_INT 52
1077: PUSH
1078: LD_INT 53
1080: PUSH
1081: LD_INT 54
1083: PUSH
1084: LD_INT 55
1086: PUSH
1087: LD_INT 56
1089: PUSH
1090: LD_INT 57
1092: PUSH
1093: LD_INT 58
1095: PUSH
1096: LD_INT 59
1098: PUSH
1099: LD_INT 60
1101: PUSH
1102: LD_INT 61
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: LD_INT 80
1110: PUSH
1111: LD_INT 82
1113: PUSH
1114: LD_INT 83
1116: PUSH
1117: LD_INT 84
1119: PUSH
1120: LD_INT 85
1122: PUSH
1123: LD_INT 86
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: ST_TO_ADDR
1179: GO 1642
1181: LD_INT 2
1183: DOUBLE
1184: EQUAL
1185: IFTRUE 1189
1187: GO 1411
1189: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1190: LD_ADDR_VAR 0 4
1194: PUSH
1195: LD_INT 35
1197: PUSH
1198: LD_INT 45
1200: PUSH
1201: LD_INT 46
1203: PUSH
1204: LD_INT 47
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 83
1212: PUSH
1213: LD_INT 84
1215: PUSH
1216: LD_INT 85
1218: PUSH
1219: LD_INT 87
1221: PUSH
1222: LD_INT 70
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 11
1230: PUSH
1231: LD_INT 3
1233: PUSH
1234: LD_INT 4
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: LD_INT 6
1242: PUSH
1243: LD_INT 15
1245: PUSH
1246: LD_INT 18
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 17
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 72
1269: PUSH
1270: LD_INT 26
1272: PUSH
1273: LD_INT 69
1275: PUSH
1276: LD_INT 39
1278: PUSH
1279: LD_INT 40
1281: PUSH
1282: LD_INT 41
1284: PUSH
1285: LD_INT 42
1287: PUSH
1288: LD_INT 43
1290: PUSH
1291: LD_INT 48
1293: PUSH
1294: LD_INT 49
1296: PUSH
1297: LD_INT 50
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: LD_INT 52
1305: PUSH
1306: LD_INT 53
1308: PUSH
1309: LD_INT 54
1311: PUSH
1312: LD_INT 55
1314: PUSH
1315: LD_INT 56
1317: PUSH
1318: LD_INT 60
1320: PUSH
1321: LD_INT 61
1323: PUSH
1324: LD_INT 62
1326: PUSH
1327: LD_INT 66
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: LD_INT 68
1335: PUSH
1336: LD_INT 81
1338: PUSH
1339: LD_INT 82
1341: PUSH
1342: LD_INT 83
1344: PUSH
1345: LD_INT 84
1347: PUSH
1348: LD_INT 85
1350: PUSH
1351: LD_INT 87
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
1409: GO 1642
1411: LD_INT 3
1413: DOUBLE
1414: EQUAL
1415: IFTRUE 1419
1417: GO 1641
1419: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 46
1427: PUSH
1428: LD_INT 47
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 82
1439: PUSH
1440: LD_INT 83
1442: PUSH
1443: LD_INT 84
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 86
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 20
1460: PUSH
1461: LD_INT 19
1463: PUSH
1464: LD_INT 21
1466: PUSH
1467: LD_INT 24
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 25
1475: PUSH
1476: LD_INT 28
1478: PUSH
1479: LD_INT 29
1481: PUSH
1482: LD_INT 30
1484: PUSH
1485: LD_INT 31
1487: PUSH
1488: LD_INT 37
1490: PUSH
1491: LD_INT 38
1493: PUSH
1494: LD_INT 32
1496: PUSH
1497: LD_INT 27
1499: PUSH
1500: LD_INT 33
1502: PUSH
1503: LD_INT 69
1505: PUSH
1506: LD_INT 39
1508: PUSH
1509: LD_INT 34
1511: PUSH
1512: LD_INT 40
1514: PUSH
1515: LD_INT 71
1517: PUSH
1518: LD_INT 23
1520: PUSH
1521: LD_INT 44
1523: PUSH
1524: LD_INT 48
1526: PUSH
1527: LD_INT 49
1529: PUSH
1530: LD_INT 50
1532: PUSH
1533: LD_INT 51
1535: PUSH
1536: LD_INT 52
1538: PUSH
1539: LD_INT 53
1541: PUSH
1542: LD_INT 54
1544: PUSH
1545: LD_INT 55
1547: PUSH
1548: LD_INT 56
1550: PUSH
1551: LD_INT 57
1553: PUSH
1554: LD_INT 58
1556: PUSH
1557: LD_INT 59
1559: PUSH
1560: LD_INT 63
1562: PUSH
1563: LD_INT 64
1565: PUSH
1566: LD_INT 65
1568: PUSH
1569: LD_INT 82
1571: PUSH
1572: LD_INT 83
1574: PUSH
1575: LD_INT 84
1577: PUSH
1578: LD_INT 85
1580: PUSH
1581: LD_INT 86
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
1639: GO 1642
1641: POP
// if state > - 1 and state < 3 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: GREATER
1651: PUSH
1652: LD_VAR 0 3
1656: PUSH
1657: LD_INT 3
1659: LESS
1660: AND
1661: IFFALSE 1718
// for i in result do
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 4
1672: PUSH
1673: FOR_IN
1674: IFFALSE 1716
// if GetTech ( i , side ) <> state then
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL_OW 321
1690: PUSH
1691: LD_VAR 0 3
1695: NONEQUAL
1696: IFFALSE 1714
// result := result diff i ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 4
1707: PUSH
1708: LD_VAR 0 5
1712: DIFF
1713: ST_TO_ADDR
1714: GO 1673
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 4
1722: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
// InitUc ;
1727: CALL_OW 18
// InitHc ;
1731: CALL_OW 19
// uc_side := 0 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// uc_nation := 0 ;
1743: LD_ADDR_OWVAR 21
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// for i = 1 to amount do
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 2
1765: PUSH
1766: FOR_TO
1767: IFFALSE 1849
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1769: LD_ADDR_OWVAR 29
1773: PUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 12
1779: PPUSH
1780: CALL_OW 12
1784: PUSH
1785: LD_INT 9
1787: PPUSH
1788: LD_INT 12
1790: PPUSH
1791: CALL_OW 12
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1800: LD_ADDR_OWVAR 35
1804: PUSH
1805: LD_INT 1
1807: NEG
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 12
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1830: CALL_OW 44
1834: PPUSH
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 49
// end ;
1847: GO 1766
1849: POP
1850: POP
// InitHc ;
1851: CALL_OW 19
// end ;
1855: LD_VAR 0 3
1859: RET
// export function PrepareNature ; var i ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1864: LD_INT 18
1866: PPUSH
1867: LD_INT 5
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_OWVAR 67
1885: ARRAY
1886: PPUSH
1887: CALL 1723 0 2
// for i := 1 to 3 do
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1940
// begin hc_class := 21 ;
1907: LD_ADDR_OWVAR 28
1911: PUSH
1912: LD_INT 21
1914: ST_TO_ADDR
// hc_gallery :=  ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING 
1922: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1923: CALL_OW 44
1927: PPUSH
1928: LD_INT 18
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// end ;
1938: GO 1904
1940: POP
1941: POP
// for i := 1 to 2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_INT 2
1954: PUSH
1955: FOR_TO
1956: IFFALSE 1991
// begin hc_class := 18 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 18
1965: ST_TO_ADDR
// hc_gallery :=  ;
1966: LD_ADDR_OWVAR 33
1970: PUSH
1971: LD_STRING 
1973: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1974: CALL_OW 44
1978: PPUSH
1979: LD_INT 18
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// end ;
1989: GO 1955
1991: POP
1992: POP
// for i := 1 to 2 do
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: DOUBLE
1999: LD_INT 1
2001: DEC
2002: ST_TO_ADDR
2003: LD_INT 2
2005: PUSH
2006: FOR_TO
2007: IFFALSE 2042
// begin hc_class := 13 ;
2009: LD_ADDR_OWVAR 28
2013: PUSH
2014: LD_INT 13
2016: ST_TO_ADDR
// hc_gallery :=  ;
2017: LD_ADDR_OWVAR 33
2021: PUSH
2022: LD_STRING 
2024: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
2025: CALL_OW 44
2029: PPUSH
2030: LD_INT 18
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// end ;
2040: GO 2006
2042: POP
2043: POP
// end ;
2044: LD_VAR 0 1
2048: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
2055: PPUSH
// result := false ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// if not sideList or not enemySide then
2064: LD_VAR 0 1
2068: NOT
2069: PUSH
2070: LD_VAR 0 2
2074: NOT
2075: OR
2076: IFFALSE 2080
// exit ;
2078: GO 2225
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 22
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PPUSH
2097: CALL_OW 69
2101: ST_TO_ADDR
// if not tmp then
2102: LD_VAR 0 7
2106: NOT
2107: IFFALSE 2111
// exit ;
2109: GO 2225
// for s in sideList do
2111: LD_ADDR_VAR 0 6
2115: PUSH
2116: LD_VAR 0 1
2120: PUSH
2121: FOR_IN
2122: IFFALSE 2223
// for i in tmp do
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_VAR 0 7
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2219
// if See ( s , i ) then
2137: LD_VAR 0 6
2141: PPUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: CALL_OW 292
2151: IFFALSE 2217
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2153: LD_ADDR_VAR 0 8
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_VAR 0 6
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PPUSH
2170: CALL_OW 69
2174: PPUSH
2175: LD_VAR 0 5
2179: PPUSH
2180: CALL_OW 74
2184: ST_TO_ADDR
// if tmp2 in exceptUnits then
2185: LD_VAR 0 8
2189: PUSH
2190: LD_VAR 0 3
2194: IN
2195: IFFALSE 2201
// continue else
2197: GO 2134
2199: GO 2217
// begin result := tmp2 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 8
2210: ST_TO_ADDR
// exit ;
2211: POP
2212: POP
2213: POP
2214: POP
2215: GO 2225
// end ; end ;
2217: GO 2134
2219: POP
2220: POP
2221: GO 2121
2223: POP
2224: POP
// end ; end_of_file
2225: LD_VAR 0 4
2229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
// uc_side := 5 ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_INT 5
2241: ST_TO_ADDR
// uc_nation := 2 ;
2242: LD_ADDR_OWVAR 21
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2250: LD_ADDR_EXP 36
2254: PUSH
2255: LD_STRING Abdul
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: LD_STRING 
2263: PPUSH
2264: CALL 366 0 3
2268: ST_TO_ADDR
// uc_side := 2 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 2
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2285: LD_ADDR_EXP 25
2289: PUSH
2290: LD_STRING Heike
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_EXP 2
2303: PPUSH
2304: CALL 366 0 3
2308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2309: LD_ADDR_EXP 28
2313: PUSH
2314: LD_STRING Ibrahim
2316: PPUSH
2317: LD_EXP 1
2321: NOT
2322: PPUSH
2323: LD_EXP 2
2327: PPUSH
2328: CALL 366 0 3
2332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2333: LD_ADDR_EXP 26
2337: PUSH
2338: LD_STRING Givi
2340: PPUSH
2341: LD_EXP 1
2345: NOT
2346: PPUSH
2347: LD_EXP 2
2351: PPUSH
2352: CALL 366 0 3
2356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2357: LD_ADDR_EXP 29
2361: PUSH
2362: LD_STRING Kamil
2364: PPUSH
2365: LD_EXP 1
2369: NOT
2370: PPUSH
2371: LD_EXP 2
2375: PPUSH
2376: CALL 366 0 3
2380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2381: LD_ADDR_EXP 30
2385: PUSH
2386: LD_STRING Kaia
2388: PPUSH
2389: LD_EXP 1
2393: NOT
2394: PPUSH
2395: LD_EXP 2
2399: PPUSH
2400: CALL 366 0 3
2404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2405: LD_ADDR_EXP 31
2409: PUSH
2410: LD_STRING Sophia
2412: PPUSH
2413: LD_EXP 1
2417: NOT
2418: PPUSH
2419: LD_EXP 2
2423: PPUSH
2424: CALL 366 0 3
2428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2429: LD_ADDR_EXP 32
2433: PUSH
2434: LD_STRING Markov
2436: PPUSH
2437: LD_EXP 1
2441: NOT
2442: PPUSH
2443: LD_EXP 2
2447: PPUSH
2448: CALL 366 0 3
2452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2453: LD_ADDR_EXP 35
2457: PUSH
2458: LD_STRING Aviradze
2460: PPUSH
2461: LD_EXP 1
2465: NOT
2466: PPUSH
2467: LD_EXP 2
2471: PPUSH
2472: CALL 366 0 3
2476: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2477: LD_ADDR_EXP 39
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2484: LD_ADDR_EXP 37
2488: PUSH
2489: LD_STRING 03_others
2491: PPUSH
2492: CALL_OW 31
2496: ST_TO_ADDR
// uc_side := 5 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 5
2504: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2505: LD_ADDR_EXP 34
2509: PUSH
2510: LD_STRING Kurt
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: LD_STRING 
2518: PPUSH
2519: CALL 366 0 3
2523: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2524: LD_ADDR_EXP 27
2528: PUSH
2529: LD_STRING Mike
2531: PPUSH
2532: LD_EXP 1
2536: NOT
2537: PPUSH
2538: LD_EXP 2
2542: PPUSH
2543: CALL 366 0 3
2547: ST_TO_ADDR
// if Mike then
2548: LD_EXP 27
2552: IFFALSE 2575
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2554: LD_EXP 27
2558: PPUSH
2559: LD_INT 142
2561: PPUSH
2562: LD_INT 63
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2575: LD_EXP 34
2579: PPUSH
2580: LD_INT 142
2582: PPUSH
2583: LD_INT 63
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2596: LD_EXP 34
2600: PUSH
2601: LD_EXP 27
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL_OW 140
// end ;
2614: LD_VAR 0 1
2618: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// uc_side := 5 ;
2625: LD_ADDR_OWVAR 20
2629: PUSH
2630: LD_INT 5
2632: ST_TO_ADDR
// uc_nation := 2 ;
2633: LD_ADDR_OWVAR 21
2637: PUSH
2638: LD_INT 2
2640: ST_TO_ADDR
// InitHc ;
2641: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2645: LD_ADDR_EXP 33
2649: PUSH
2650: LD_STRING Omar
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: LD_STRING 
2658: PPUSH
2659: CALL 366 0 3
2663: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2664: LD_EXP 33
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2682: LD_EXP 33
2686: PPUSH
2687: LD_INT 256
2689: PPUSH
2690: LD_INT 129
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$2 ) ;
2697: LD_INT 70
2699: PPUSH
2700: CALL_OW 67
// omarSquad := [ ] ;
2704: LD_ADDR_EXP 38
2708: PUSH
2709: EMPTY
2710: ST_TO_ADDR
// for i := 1 to 5 do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: DOUBLE
2717: LD_INT 1
2719: DEC
2720: ST_TO_ADDR
2721: LD_INT 5
2723: PUSH
2724: FOR_TO
2725: IFFALSE 2931
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2727: LD_INT 5
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: LD_INT 13
2735: PUSH
2736: LD_INT 14
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 2
2750: MOD
2751: PUSH
2752: LD_INT 1
2754: PLUS
2755: ARRAY
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_INT 25
2765: PUSH
2766: LD_INT 27
2768: PUSH
2769: LD_INT 26
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 3
2784: MOD
2785: PUSH
2786: LD_INT 1
2788: PLUS
2789: ARRAY
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL 429 0 7
// veh := CreateVehicle ;
2798: LD_ADDR_VAR 0 4
2802: PUSH
2803: CALL_OW 45
2807: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 233
// omarSquad := omarSquad union veh ;
2820: LD_ADDR_EXP 38
2824: PUSH
2825: LD_EXP 38
2829: PUSH
2830: LD_VAR 0 4
2834: UNION
2835: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_INT 284
2843: PPUSH
2844: LD_INT 163
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: CALL_OW 380
// un := CreateHuman ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: CALL_OW 44
2876: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2877: LD_ADDR_EXP 38
2881: PUSH
2882: LD_EXP 38
2886: PUSH
2887: LD_VAR 0 3
2891: UNION
2892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2893: LD_VAR 0 3
2897: PPUSH
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 271
2914: PPUSH
2915: LD_INT 144
2917: PPUSH
2918: CALL_OW 111
// wait ( 0 0$2 ) ;
2922: LD_INT 70
2924: PPUSH
2925: CALL_OW 67
// end ;
2929: GO 2724
2931: POP
2932: POP
// for i := 1 to 3 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 3
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3030
// begin PrepareHuman ( false , 1 , 2 ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: CALL_OW 380
// un := CreateHuman ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2972: LD_ADDR_EXP 38
2976: PUSH
2977: LD_EXP 38
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 284
2995: PPUSH
2996: LD_INT 163
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 257
3013: PPUSH
3014: LD_INT 138
3016: PPUSH
3017: CALL_OW 111
// wait ( 0 0$1 ) ;
3021: LD_INT 35
3023: PPUSH
3024: CALL_OW 67
// end ;
3028: GO 2946
3030: POP
3031: POP
// for i := 1 to 6 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 6
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3179
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
3048: LD_INT 0
3050: PPUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 1
3056: PUSH
3057: LD_INT 4
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_VAR 0 2
3069: PUSH
3070: LD_INT 3
3072: MOD
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: ARRAY
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 380
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3096: LD_ADDR_EXP 38
3100: PUSH
3101: LD_EXP 38
3105: PUSH
3106: LD_VAR 0 3
3110: UNION
3111: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3112: LD_VAR 0 3
3116: PPUSH
3117: LD_INT 225
3119: PPUSH
3120: LD_INT 163
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 48
// if i = 1 then
3130: LD_VAR 0 2
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3155
// SetAttr ( un , attr_speed , 12 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 12
3150: PPUSH
3151: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_INT 222
3162: PPUSH
3163: LD_INT 157
3165: PPUSH
3166: CALL_OW 111
// wait ( 0 0$1 ) ;
3170: LD_INT 35
3172: PPUSH
3173: CALL_OW 67
// end ;
3177: GO 3045
3179: POP
3180: POP
// end ; end_of_file
3181: LD_VAR 0 1
3185: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3186: LD_INT 0
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 149
3199: PPUSH
3200: LD_INT 67
3202: PPUSH
3203: CALL_OW 428
3207: PPUSH
3208: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
3212: LD_ADDR_EXP 50
3216: PUSH
3217: LD_INT 111
3219: PPUSH
3220: LD_INT 89
3222: PPUSH
3223: CALL_OW 428
3227: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 21
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 23
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3279
// SetBLevel ( i , 5 ) ;
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 5
3272: PPUSH
3273: CALL_OW 241
3277: GO 3262
3279: POP
3280: POP
// SetBName ( kirov , kirov ) ;
3281: LD_INT 71
3283: PPUSH
3284: LD_STRING kirov
3286: PPUSH
3287: CALL_OW 500
// SetBName ( beria , beria ) ;
3291: LD_INT 106
3293: PPUSH
3294: LD_STRING beria
3296: PPUSH
3297: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3301: LD_INT 112
3303: PPUSH
3304: LD_STRING kagan
3306: PPUSH
3307: CALL_OW 500
// uc_side := 6 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 6
3318: ST_TO_ADDR
// uc_nation := 3 ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 3
3326: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_INT 22
3334: PUSH
3335: LD_INT 6
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 30
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: LD_INT 22
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 30
3382: PUSH
3383: LD_INT 4
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 69
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3403: LD_ADDR_EXP 44
3407: PUSH
3408: EMPTY
3409: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3410: LD_ADDR_EXP 45
3414: PUSH
3415: EMPTY
3416: ST_TO_ADDR
// russianPatrol := [ ] ;
3417: LD_ADDR_EXP 47
3421: PUSH
3422: EMPTY
3423: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3424: LD_ADDR_EXP 40
3428: PUSH
3429: LD_STRING Kurin
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: LD_STRING 
3437: PPUSH
3438: CALL 366 0 3
3442: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3443: LD_EXP 40
3447: PPUSH
3448: LD_INT 71
3450: PPUSH
3451: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3455: LD_ADDR_EXP 42
3459: PUSH
3460: LD_STRING Popov
3462: PPUSH
3463: LD_INT 0
3465: PPUSH
3466: LD_STRING 
3468: PPUSH
3469: CALL 366 0 3
3473: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3474: LD_EXP 42
3478: PPUSH
3479: LD_INT 71
3481: PPUSH
3482: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3486: LD_ADDR_EXP 41
3490: PUSH
3491: LD_STRING Grishko
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: LD_STRING 
3499: PPUSH
3500: CALL 366 0 3
3504: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3505: LD_EXP 41
3509: PPUSH
3510: LD_INT 207
3512: PPUSH
3513: LD_INT 106
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3523: LD_EXP 41
3527: PPUSH
3528: LD_INT 209
3530: PPUSH
3531: LD_INT 106
3533: PPUSH
3534: CALL_OW 118
// for i := 1 to 2 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3607
// begin PrepareHuman ( false , 2 , 2 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 71
3584: PPUSH
3585: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3589: LD_ADDR_EXP 44
3593: PUSH
3594: LD_EXP 44
3598: PUSH
3599: LD_VAR 0 3
3603: UNION
3604: ST_TO_ADDR
// end ;
3605: GO 3551
3607: POP
3608: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3714
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: CALL_OW 380
// un := CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3682: LD_VAR 0 3
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3696: LD_ADDR_EXP 44
3700: PUSH
3701: LD_EXP 44
3705: PUSH
3706: LD_VAR 0 3
3710: UNION
3711: ST_TO_ADDR
// end ;
3712: GO 3639
3714: POP
3715: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_INT 22
3723: PUSH
3724: LD_INT 6
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 30
3733: PUSH
3734: LD_INT 32
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3825
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3753: LD_INT 0
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PPUSH
3779: CALL_OW 380
// un := CreateHuman ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: CALL_OW 44
3792: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_VAR 0 2
3802: PPUSH
3803: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3807: LD_ADDR_EXP 44
3811: PUSH
3812: LD_EXP 44
3816: PUSH
3817: LD_VAR 0 3
3821: UNION
3822: ST_TO_ADDR
// end ;
3823: GO 3750
3825: POP
3826: POP
// for i := 1 to 3 do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 3
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3896
// begin PrepareHuman ( false , 3 , 3 ) ;
3843: LD_INT 0
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL_OW 380
// un := CreateHuman ;
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3866: LD_VAR 0 3
3870: PPUSH
3871: LD_INT 92
3873: PPUSH
3874: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3878: LD_ADDR_EXP 44
3882: PUSH
3883: LD_EXP 44
3887: PUSH
3888: LD_VAR 0 3
3892: UNION
3893: ST_TO_ADDR
// end ;
3894: GO 3840
3896: POP
3897: POP
// for i := 1 to 2 do
3898: LD_ADDR_VAR 0 2
3902: PUSH
3903: DOUBLE
3904: LD_INT 1
3906: DEC
3907: ST_TO_ADDR
3908: LD_INT 2
3910: PUSH
3911: FOR_TO
3912: IFFALSE 3967
// begin PrepareHuman ( false , 4 , 3 ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_INT 4
3919: PPUSH
3920: LD_INT 3
3922: PPUSH
3923: CALL_OW 380
// un := CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 83
3944: PPUSH
3945: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3949: LD_ADDR_EXP 44
3953: PUSH
3954: LD_EXP 44
3958: PUSH
3959: LD_VAR 0 3
3963: UNION
3964: ST_TO_ADDR
// end ;
3965: GO 3911
3967: POP
3968: POP
// for i := 1 to 5 do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: DOUBLE
3975: LD_INT 1
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 5
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4040
// begin PrepareHuman ( false , 1 , 3 ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 3
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 4
4017: PPUSH
4018: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
4022: LD_ADDR_EXP 46
4026: PUSH
4027: LD_EXP 46
4031: PUSH
4032: LD_VAR 0 3
4036: UNION
4037: ST_TO_ADDR
// end ;
4038: GO 3982
4040: POP
4041: POP
// russianCargo := [ ] ;
4042: LD_ADDR_EXP 49
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// for i := 1 to 2 do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 2
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4195
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
4065: LD_INT 6
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 21
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: LD_INT 51
4082: PPUSH
4083: LD_INT 100
4085: PPUSH
4086: CALL 429 0 7
// un := CreateVehicle ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: CALL_OW 45
4099: ST_TO_ADDR
// russianCargo := russianCargo union un ;
4100: LD_ADDR_EXP 49
4104: PUSH
4105: LD_EXP 49
4109: PUSH
4110: LD_VAR 0 3
4114: UNION
4115: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
4116: LD_VAR 0 3
4120: PPUSH
4121: LD_INT 2
4123: PPUSH
4124: LD_INT 100
4126: PPUSH
4127: CALL_OW 290
// SetDir ( un , 4 ) ;
4131: LD_VAR 0 3
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 147
4150: PPUSH
4151: LD_INT 103
4153: PPUSH
4154: LD_INT 4
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: LD_OWVAR 67
4174: PPUSH
4175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4179: CALL_OW 44
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 52
// end ;
4193: GO 4062
4195: POP
4196: POP
// uc_side := 3 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 3
4204: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4205: LD_ADDR_EXP 43
4209: PUSH
4210: LD_STRING Burlak
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: LD_STRING 
4218: PPUSH
4219: CALL 366 0 3
4223: ST_TO_ADDR
// for i := 1 to 5 do
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: DOUBLE
4230: LD_INT 1
4232: DEC
4233: ST_TO_ADDR
4234: LD_INT 5
4236: PUSH
4237: FOR_TO
4238: IFFALSE 4331
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_OWVAR 67
4250: PUSH
4251: LD_INT 1
4253: PLUS
4254: PPUSH
4255: CALL_OW 380
// un := CreateHuman ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 32
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 69
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4313: LD_ADDR_EXP 45
4317: PUSH
4318: LD_EXP 45
4322: PUSH
4323: LD_VAR 0 3
4327: UNION
4328: ST_TO_ADDR
// end ;
4329: GO 4237
4331: POP
4332: POP
// for i := 1 to 2 do
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 2
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4438
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4349: LD_INT 0
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_OWVAR 67
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 30
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4420: LD_ADDR_EXP 45
4424: PUSH
4425: LD_EXP 45
4429: PUSH
4430: LD_VAR 0 3
4434: UNION
4435: ST_TO_ADDR
// end ;
4436: GO 4346
4438: POP
4439: POP
// for i := 1 to 2 do
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: DOUBLE
4446: LD_INT 1
4448: DEC
4449: ST_TO_ADDR
4450: LD_INT 2
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4541
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 7
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4523: LD_ADDR_EXP 45
4527: PUSH
4528: LD_EXP 45
4532: PUSH
4533: LD_VAR 0 3
4537: UNION
4538: ST_TO_ADDR
// end ;
4539: GO 4453
4541: POP
4542: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 380
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_INT 106
4575: PPUSH
4576: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4580: LD_ADDR_EXP 45
4584: PUSH
4585: LD_EXP 45
4589: PUSH
4590: LD_VAR 0 3
4594: UNION
4595: ST_TO_ADDR
// for i := 1 to 3 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 3
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4732
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 3
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 30
4629: PUSH
4630: LD_INT 31
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_VAR 0 2
4650: ARRAY
4651: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_OWVAR 67
4662: PPUSH
4663: CALL_OW 380
// un := CreateHuman ;
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: CALL_OW 44
4676: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: CALL_OW 254
4691: PUSH
4692: LD_INT 3
4694: PLUS
4695: PPUSH
4696: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4700: LD_VAR 0 3
4704: PPUSH
4705: LD_VAR 0 6
4709: PPUSH
4710: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4714: LD_ADDR_EXP 45
4718: PUSH
4719: LD_EXP 45
4723: PUSH
4724: LD_VAR 0 3
4728: UNION
4729: ST_TO_ADDR
// end ;
4730: GO 4609
4732: POP
4733: POP
// russianOmicronAttackers := [ ] ;
4734: LD_ADDR_EXP 48
4738: PUSH
4739: EMPTY
4740: ST_TO_ADDR
// for i := 1 to 6 do
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: DOUBLE
4747: LD_INT 1
4749: DEC
4750: ST_TO_ADDR
4751: LD_INT 6
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4979
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4757: LD_INT 3
4759: PPUSH
4760: LD_INT 3
4762: PPUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 23
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_VAR 0 2
4777: PUSH
4778: LD_INT 2
4780: MOD
4781: PUSH
4782: LD_INT 1
4784: PLUS
4785: ARRAY
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 43
4795: PUSH
4796: LD_INT 44
4798: PUSH
4799: LD_INT 42
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: PUSH
4807: LD_VAR 0 2
4811: PUSH
4812: LD_INT 3
4814: MOD
4815: PUSH
4816: LD_INT 1
4818: PLUS
4819: ARRAY
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: CALL 429 0 7
// un := CreateVehicle ;
4828: LD_ADDR_VAR 0 3
4832: PUSH
4833: CALL_OW 45
4837: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4838: LD_VAR 0 3
4842: PPUSH
4843: LD_INT 0
4845: PUSH
4846: LD_INT 5
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 1
4855: PPUSH
4856: LD_INT 2
4858: PPUSH
4859: CALL_OW 12
4863: ARRAY
4864: PPUSH
4865: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4869: LD_ADDR_EXP 48
4873: PUSH
4874: LD_EXP 48
4878: PUSH
4879: LD_VAR 0 3
4883: UNION
4884: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4885: LD_VAR 0 3
4889: PPUSH
4890: LD_INT 127
4892: PPUSH
4893: LD_INT 89
4895: PPUSH
4896: LD_INT 7
4898: PPUSH
4899: LD_INT 0
4901: PPUSH
4902: CALL_OW 50
// uc_side := 3 ;
4906: LD_ADDR_OWVAR 20
4910: PUSH
4911: LD_INT 3
4913: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4914: LD_INT 0
4916: PPUSH
4917: LD_INT 3
4919: PPUSH
4920: LD_INT 3
4922: PPUSH
4923: CALL_OW 380
// un := CreateHuman ;
4927: LD_ADDR_VAR 0 3
4931: PUSH
4932: CALL_OW 44
4936: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4937: LD_ADDR_EXP 48
4941: PUSH
4942: LD_EXP 48
4946: PUSH
4947: LD_VAR 0 3
4951: UNION
4952: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4953: LD_VAR 0 3
4957: PPUSH
4958: LD_EXP 48
4962: PUSH
4963: LD_EXP 48
4967: PUSH
4968: LD_INT 1
4970: MINUS
4971: ARRAY
4972: PPUSH
4973: CALL_OW 52
// end ;
4977: GO 4754
4979: POP
4980: POP
// for i := 1 to 3 do
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: DOUBLE
4987: LD_INT 1
4989: DEC
4990: ST_TO_ADDR
4991: LD_INT 3
4993: PUSH
4994: FOR_TO
4995: IFFALSE 5061
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4997: LD_INT 0
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: LD_OWVAR 67
5007: PPUSH
5008: CALL_OW 380
// un := CreateHuman ;
5012: LD_ADDR_VAR 0 3
5016: PUSH
5017: CALL_OW 44
5021: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5022: LD_ADDR_EXP 48
5026: PUSH
5027: LD_EXP 48
5031: PUSH
5032: LD_VAR 0 3
5036: UNION
5037: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_INT 91
5045: PPUSH
5046: LD_INT 60
5048: PPUSH
5049: LD_INT 3
5051: PPUSH
5052: LD_INT 0
5054: PPUSH
5055: CALL_OW 50
// end ;
5059: GO 4994
5061: POP
5062: POP
// end ;
5063: LD_VAR 0 1
5067: RET
// every 0 0$3 do var i ;
5068: GO 5070
5070: DISABLE
5071: LD_INT 0
5073: PPUSH
// begin for i := 1 to 4 do
5074: LD_ADDR_VAR 0 1
5078: PUSH
5079: DOUBLE
5080: LD_INT 1
5082: DEC
5083: ST_TO_ADDR
5084: LD_INT 4
5086: PUSH
5087: FOR_TO
5088: IFFALSE 5107
// ComExitBuilding ( grishkoSquad [ i ] ) ;
5090: LD_EXP 46
5094: PUSH
5095: LD_VAR 0 1
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5087
5107: POP
5108: POP
// wait ( 3 ) ;
5109: LD_INT 3
5111: PPUSH
5112: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
5116: LD_EXP 46
5120: PUSH
5121: LD_INT 1
5123: ARRAY
5124: PPUSH
5125: LD_INT 22
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: LD_INT 30
5137: PUSH
5138: LD_INT 31
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 69
5153: PPUSH
5154: LD_EXP 46
5158: PUSH
5159: LD_INT 1
5161: ARRAY
5162: PPUSH
5163: CALL_OW 74
5167: PPUSH
5168: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
5172: LD_EXP 46
5176: PUSH
5177: LD_INT 2
5179: ARRAY
5180: PPUSH
5181: LD_INT 211
5183: PPUSH
5184: LD_INT 107
5186: PPUSH
5187: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5191: LD_EXP 46
5195: PUSH
5196: LD_INT 2
5198: ARRAY
5199: PPUSH
5200: LD_INT 209
5202: PPUSH
5203: LD_INT 106
5205: PPUSH
5206: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5210: LD_EXP 46
5214: PUSH
5215: LD_INT 3
5217: ARRAY
5218: PPUSH
5219: LD_INT 209
5221: PPUSH
5222: LD_INT 103
5224: PPUSH
5225: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5229: LD_EXP 46
5233: PUSH
5234: LD_INT 3
5236: ARRAY
5237: PPUSH
5238: LD_INT 209
5240: PPUSH
5241: LD_INT 106
5243: PPUSH
5244: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5248: LD_EXP 46
5252: PUSH
5253: LD_INT 4
5255: ARRAY
5256: PPUSH
5257: LD_INT 227
5259: PPUSH
5260: LD_INT 117
5262: PPUSH
5263: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5267: LD_EXP 46
5271: PUSH
5272: LD_INT 4
5274: ARRAY
5275: PPUSH
5276: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5280: LD_INT 700
5282: PPUSH
5283: CALL_OW 67
// for i := 3 downto 2 do
5287: LD_ADDR_VAR 0 1
5291: PUSH
5292: DOUBLE
5293: LD_INT 3
5295: INC
5296: ST_TO_ADDR
5297: LD_INT 2
5299: PUSH
5300: FOR_DOWNTO
5301: IFFALSE 5468
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5303: LD_EXP 46
5307: PUSH
5308: LD_VAR 0 1
5312: ARRAY
5313: PPUSH
5314: LD_INT 200
5316: PPUSH
5317: LD_INT 91
5319: PPUSH
5320: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5324: LD_EXP 46
5328: PUSH
5329: LD_VAR 0 1
5333: ARRAY
5334: PPUSH
5335: LD_INT 210
5337: PPUSH
5338: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5342: LD_EXP 46
5346: PUSH
5347: LD_VAR 0 1
5351: ARRAY
5352: PPUSH
5353: LD_INT 224
5355: PPUSH
5356: LD_INT 93
5358: PPUSH
5359: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5363: LD_EXP 46
5367: PUSH
5368: LD_VAR 0 1
5372: ARRAY
5373: PPUSH
5374: LD_INT 210
5376: PPUSH
5377: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5381: LD_EXP 46
5385: PUSH
5386: LD_VAR 0 1
5390: ARRAY
5391: PPUSH
5392: LD_INT 239
5394: PPUSH
5395: LD_INT 123
5397: PPUSH
5398: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5402: LD_EXP 46
5406: PUSH
5407: LD_VAR 0 1
5411: ARRAY
5412: PPUSH
5413: LD_INT 210
5415: PPUSH
5416: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5420: LD_EXP 46
5424: PUSH
5425: LD_VAR 0 1
5429: ARRAY
5430: PPUSH
5431: LD_INT 212
5433: PPUSH
5434: LD_INT 105
5436: PPUSH
5437: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5441: LD_EXP 46
5445: PUSH
5446: LD_VAR 0 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 700
5454: PPUSH
5455: CALL_OW 202
// wait ( 0 0$30 ) ;
5459: LD_INT 1050
5461: PPUSH
5462: CALL_OW 67
// end ;
5466: GO 5300
5468: POP
5469: POP
// until not activeGrishkoAI ;
5470: LD_EXP 10
5474: NOT
5475: IFFALSE 5280
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5477: LD_EXP 46
5481: PPUSH
5482: LD_INT 221
5484: PPUSH
5485: LD_INT 110
5487: PPUSH
5488: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5492: LD_EXP 46
5496: PPUSH
5497: LD_INT 228
5499: PPUSH
5500: LD_INT 115
5502: PPUSH
5503: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5507: LD_EXP 46
5511: PPUSH
5512: CALL_OW 200
// end ;
5516: PPOPN 1
5518: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5519: LD_EXP 12
5523: IFFALSE 6265
5525: GO 5527
5527: DISABLE
5528: LD_INT 0
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
// begin uc_side := 6 ;
5534: LD_ADDR_OWVAR 20
5538: PUSH
5539: LD_INT 6
5541: ST_TO_ADDR
// uc_nation := 3 ;
5542: LD_ADDR_OWVAR 21
5546: PUSH
5547: LD_INT 3
5549: ST_TO_ADDR
// for i := 1 to 3 do
5550: LD_ADDR_VAR 0 2
5554: PUSH
5555: DOUBLE
5556: LD_INT 1
5558: DEC
5559: ST_TO_ADDR
5560: LD_INT 3
5562: PUSH
5563: FOR_TO
5564: IFFALSE 5673
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5566: LD_INT 0
5568: PPUSH
5569: LD_INT 1
5571: PPUSH
5572: LD_INT 2
5574: PUSH
5575: LD_INT 3
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: PUSH
5586: LD_OWVAR 67
5590: ARRAY
5591: PPUSH
5592: CALL_OW 380
// un := CreateHuman ;
5596: LD_ADDR_VAR 0 1
5600: PUSH
5601: CALL_OW 44
5605: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5606: LD_ADDR_EXP 47
5610: PUSH
5611: LD_EXP 47
5615: PUSH
5616: LD_VAR 0 1
5620: UNION
5621: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5622: LD_VAR 0 1
5626: PPUSH
5627: LD_INT 1
5629: PPUSH
5630: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5634: LD_VAR 0 1
5638: PPUSH
5639: LD_INT 11
5641: PPUSH
5642: LD_INT 0
5644: PPUSH
5645: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5649: LD_VAR 0 1
5653: PPUSH
5654: LD_INT 210
5656: PPUSH
5657: LD_INT 159
5659: PPUSH
5660: CALL_OW 111
// wait ( 0 0$2 ) ;
5664: LD_INT 70
5666: PPUSH
5667: CALL_OW 67
// end ;
5671: GO 5563
5673: POP
5674: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5675: LD_ADDR_VAR 0 4
5679: PUSH
5680: LD_INT 172
5682: PUSH
5683: LD_INT 76
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 150
5692: PUSH
5693: LD_INT 38
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 148
5702: PUSH
5703: LD_INT 9
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 165
5712: PUSH
5713: LD_INT 38
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 191
5728: PUSH
5729: LD_INT 77
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PUSH
5736: LD_INT 168
5738: PUSH
5739: LD_INT 42
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 166
5748: PUSH
5749: LD_INT 11
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PUSH
5756: LD_INT 151
5758: PUSH
5759: LD_INT 12
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 221
5774: PUSH
5775: LD_INT 88
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 217
5784: PUSH
5785: LD_INT 64
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 232
5794: PUSH
5795: LD_INT 66
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 200
5804: PUSH
5805: LD_INT 56
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5823: LD_INT 35
5825: PPUSH
5826: CALL_OW 67
// for i := russianPatrol downto 1 do
5830: LD_ADDR_VAR 0 2
5834: PUSH
5835: DOUBLE
5836: LD_EXP 47
5840: INC
5841: ST_TO_ADDR
5842: LD_INT 1
5844: PUSH
5845: FOR_DOWNTO
5846: IFFALSE 6229
// begin if IsDead ( russianPatrol [ i ] ) then
5848: LD_EXP 47
5852: PUSH
5853: LD_VAR 0 2
5857: ARRAY
5858: PPUSH
5859: CALL_OW 301
5863: IFFALSE 5867
// continue ;
5865: GO 5845
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5867: LD_EXP 47
5871: PUSH
5872: LD_VAR 0 2
5876: ARRAY
5877: PPUSH
5878: CALL_OW 256
5882: PUSH
5883: LD_INT 990
5885: LESS
5886: PUSH
5887: LD_EXP 47
5891: PUSH
5892: LD_VAR 0 2
5896: ARRAY
5897: PPUSH
5898: CALL_OW 110
5902: PUSH
5903: LD_INT 1
5905: EQUAL
5906: AND
5907: IFFALSE 5927
// SetTag ( russianPatrol [ i ] , 2 ) ;
5909: LD_EXP 47
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: PPUSH
5920: LD_INT 2
5922: PPUSH
5923: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5927: LD_EXP 47
5931: PUSH
5932: LD_VAR 0 2
5936: ARRAY
5937: PPUSH
5938: CALL_OW 110
5942: PUSH
5943: LD_INT 2
5945: EQUAL
5946: IFFALSE 6013
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5948: LD_EXP 47
5952: PUSH
5953: LD_VAR 0 2
5957: ARRAY
5958: PPUSH
5959: LD_INT 166
5961: PPUSH
5962: LD_INT 101
5964: PPUSH
5965: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5969: LD_EXP 47
5973: PUSH
5974: LD_VAR 0 2
5978: ARRAY
5979: PPUSH
5980: LD_INT 71
5982: PPUSH
5983: CALL_OW 296
5987: PUSH
5988: LD_INT 10
5990: LESS
5991: IFFALSE 6011
// SetTag ( russianPatrol [ i ] , 3 ) ;
5993: LD_EXP 47
5997: PUSH
5998: LD_VAR 0 2
6002: ARRAY
6003: PPUSH
6004: LD_INT 3
6006: PPUSH
6007: CALL_OW 109
// continue ;
6011: GO 5845
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
6013: LD_EXP 47
6017: PUSH
6018: LD_VAR 0 2
6022: ARRAY
6023: PPUSH
6024: CALL_OW 110
6028: PUSH
6029: LD_INT 3
6031: EQUAL
6032: IFFALSE 6127
// begin spottedByPatrol := true ;
6034: LD_ADDR_EXP 7
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
6042: LD_EXP 47
6046: PUSH
6047: LD_VAR 0 2
6051: ARRAY
6052: PPUSH
6053: CALL_OW 250
6057: PPUSH
6058: LD_EXP 47
6062: PUSH
6063: LD_VAR 0 2
6067: ARRAY
6068: PPUSH
6069: CALL_OW 251
6073: PPUSH
6074: LD_INT 2
6076: PPUSH
6077: LD_INT 6
6079: NEG
6080: PPUSH
6081: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
6085: LD_EXP 47
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 87
// DialogueOn ;
6100: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
6104: LD_EXP 25
6108: PPUSH
6109: LD_STRING DH-Spot-f-3
6111: PPUSH
6112: CALL_OW 88
// DialogueOff ;
6116: CALL_OW 7
// YouLost ( Spotted ) ;
6120: LD_STRING Spotted
6122: PPUSH
6123: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
6127: LD_EXP 47
6131: PUSH
6132: LD_VAR 0 2
6136: ARRAY
6137: PPUSH
6138: CALL_OW 314
6142: NOT
6143: IFFALSE 6227
// for j in patrol [ i ] do
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: PUSH
6155: LD_VAR 0 2
6159: ARRAY
6160: PUSH
6161: FOR_IN
6162: IFFALSE 6225
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
6164: LD_EXP 47
6168: PUSH
6169: LD_VAR 0 2
6173: ARRAY
6174: PPUSH
6175: LD_INT 35
6177: PPUSH
6178: LD_INT 175
6180: PPUSH
6181: CALL_OW 12
6185: PPUSH
6186: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
6190: LD_EXP 47
6194: PUSH
6195: LD_VAR 0 2
6199: ARRAY
6200: PPUSH
6201: LD_VAR 0 3
6205: PUSH
6206: LD_INT 1
6208: ARRAY
6209: PPUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_INT 2
6217: ARRAY
6218: PPUSH
6219: CALL_OW 174
// end ;
6223: GO 6161
6225: POP
6226: POP
// end ;
6227: GO 5845
6229: POP
6230: POP
// until not russianPatrol or russianAlert ;
6231: LD_EXP 47
6235: NOT
6236: PUSH
6237: LD_EXP 9
6241: OR
6242: IFFALSE 5823
// if russianPatrol then
6244: LD_EXP 47
6248: IFFALSE 6265
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6250: LD_EXP 47
6254: PPUSH
6255: LD_INT 161
6257: PPUSH
6258: LD_INT 107
6260: PPUSH
6261: CALL_OW 114
// end ;
6265: PPOPN 4
6267: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6268: LD_EXP 6
6272: PUSH
6273: LD_EXP 13
6277: NOT
6278: AND
6279: IFFALSE 6765
6281: GO 6283
6283: DISABLE
6284: LD_INT 0
6286: PPUSH
6287: PPUSH
6288: PPUSH
6289: PPUSH
6290: PPUSH
// begin enable ;
6291: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6292: LD_ADDR_VAR 0 2
6296: PUSH
6297: LD_EXP 48
6301: PPUSH
6302: LD_INT 21
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 72
6316: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 22
6324: PUSH
6325: LD_INT 4
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 69
6336: ST_TO_ADDR
// for i in filter do
6337: LD_ADDR_VAR 0 1
6341: PUSH
6342: LD_VAR 0 2
6346: PUSH
6347: FOR_IN
6348: IFFALSE 6763
// begin tmp := IsDrivenBy ( i ) ;
6350: LD_ADDR_VAR 0 3
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: CALL_OW 311
6364: ST_TO_ADDR
// if not tmp then
6365: LD_VAR 0 3
6369: NOT
6370: IFFALSE 6374
// continue ;
6372: GO 6347
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 261
6383: PUSH
6384: LD_INT 90
6386: GREATER
6387: PUSH
6388: LD_VAR 0 1
6392: PPUSH
6393: CALL_OW 110
6397: PUSH
6398: LD_INT 2
6400: EQUAL
6401: AND
6402: IFFALSE 6418
// SetTag ( i , 0 ) else
6404: LD_VAR 0 1
6408: PPUSH
6409: LD_INT 0
6411: PPUSH
6412: CALL_OW 109
6416: GO 6514
// if GetTag ( i ) = 2 then
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 110
6427: PUSH
6428: LD_INT 2
6430: EQUAL
6431: IFFALSE 6514
// begin x := rand ( 1 , 2 ) ;
6433: LD_ADDR_VAR 0 5
6437: PUSH
6438: LD_INT 1
6440: PPUSH
6441: LD_INT 2
6443: PPUSH
6444: CALL_OW 12
6448: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6449: LD_VAR 0 1
6453: PPUSH
6454: LD_EXP 49
6458: PUSH
6459: LD_VAR 0 5
6463: ARRAY
6464: PPUSH
6465: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6469: LD_EXP 49
6473: PUSH
6474: LD_VAR 0 5
6478: ARRAY
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: CALL_OW 289
6487: PUSH
6488: LD_INT 20
6490: LESS
6491: IFFALSE 6514
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6493: LD_EXP 49
6497: PUSH
6498: LD_VAR 0 5
6502: ARRAY
6503: PPUSH
6504: LD_INT 2
6506: PPUSH
6507: LD_INT 100
6509: PPUSH
6510: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6514: LD_VAR 0 1
6518: PPUSH
6519: CALL_OW 256
6523: PUSH
6524: LD_INT 600
6526: GREATEREQUAL
6527: PUSH
6528: LD_VAR 0 1
6532: PPUSH
6533: CALL_OW 110
6537: NOT
6538: AND
6539: IFFALSE 6565
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6541: LD_VAR 0 1
6545: PPUSH
6546: LD_VAR 0 4
6550: PPUSH
6551: LD_VAR 0 1
6555: PPUSH
6556: CALL_OW 74
6560: PPUSH
6561: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 256
6574: PUSH
6575: LD_INT 600
6577: LESS
6578: PUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: CALL_OW 110
6588: NOT
6589: AND
6590: IFFALSE 6619
// begin SetTag ( i , 1 ) ;
6592: LD_VAR 0 1
6596: PPUSH
6597: LD_INT 1
6599: PPUSH
6600: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6604: LD_VAR 0 1
6608: PPUSH
6609: LD_INT 62
6611: PPUSH
6612: LD_INT 22
6614: PPUSH
6615: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6619: LD_VAR 0 1
6623: PPUSH
6624: CALL_OW 110
6628: PUSH
6629: LD_INT 1
6631: EQUAL
6632: PUSH
6633: LD_VAR 0 1
6637: PPUSH
6638: LD_INT 62
6640: PPUSH
6641: LD_INT 22
6643: PPUSH
6644: CALL_OW 297
6648: PUSH
6649: LD_INT 6
6651: LESS
6652: AND
6653: PUSH
6654: LD_VAR 0 3
6658: AND
6659: IFFALSE 6761
// begin ComExitVehicle ( tmp ) ;
6661: LD_VAR 0 3
6665: PPUSH
6666: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6670: LD_VAR 0 3
6674: PPUSH
6675: LD_VAR 0 1
6679: PPUSH
6680: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6684: LD_INT 35
6686: PPUSH
6687: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 256
6700: PUSH
6701: LD_INT 1000
6703: EQUAL
6704: IFFALSE 6684
// ComEnterUnit ( tmp , i ) ;
6706: LD_VAR 0 3
6710: PPUSH
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 261
6729: PUSH
6730: LD_INT 90
6732: LESSEQUAL
6733: IFFALSE 6749
// SetTag ( i , 2 ) else
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_INT 2
6742: PPUSH
6743: CALL_OW 109
6747: GO 6761
// SetTag ( i , 0 ) ;
6749: LD_VAR 0 1
6753: PPUSH
6754: LD_INT 0
6756: PPUSH
6757: CALL_OW 109
// end ; end ;
6761: GO 6347
6763: POP
6764: POP
// end ;
6765: PPOPN 5
6767: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6768: LD_EXP 20
6772: IFFALSE 6995
6774: GO 6776
6776: DISABLE
6777: LD_INT 0
6779: PPUSH
6780: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6781: LD_EXP 49
6785: PPUSH
6786: LD_INT 79
6788: PPUSH
6789: LD_INT 155
6791: PPUSH
6792: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6796: LD_EXP 49
6800: PPUSH
6801: LD_INT 16
6803: PPUSH
6804: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_EXP 48
6817: PPUSH
6818: LD_INT 50
6820: PUSH
6821: EMPTY
6822: LIST
6823: PPUSH
6824: CALL_OW 72
6828: ST_TO_ADDR
// for i in tmp do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: FOR_IN
6840: IFFALSE 6874
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6842: LD_VAR 0 1
6846: PPUSH
6847: LD_INT 123
6849: PPUSH
6850: LD_INT 60
6852: PPUSH
6853: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 153
6864: PPUSH
6865: LD_INT 103
6867: PPUSH
6868: CALL_OW 174
// end ;
6872: GO 6839
6874: POP
6875: POP
// repeat wait ( 0 0$1 ) ;
6876: LD_INT 35
6878: PPUSH
6879: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6883: LD_ADDR_VAR 0 2
6887: PUSH
6888: LD_EXP 48
6892: PPUSH
6893: LD_INT 50
6895: PUSH
6896: EMPTY
6897: LIST
6898: PPUSH
6899: CALL_OW 72
6903: ST_TO_ADDR
// for i in tmp do
6904: LD_ADDR_VAR 0 1
6908: PUSH
6909: LD_VAR 0 2
6913: PUSH
6914: FOR_IN
6915: IFFALSE 6986
// if not HasTask ( i ) then
6917: LD_VAR 0 1
6921: PPUSH
6922: CALL_OW 314
6926: NOT
6927: IFFALSE 6984
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_INT 81
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: PPUSH
6970: LD_VAR 0 1
6974: PPUSH
6975: CALL_OW 74
6979: PPUSH
6980: CALL_OW 115
6984: GO 6914
6986: POP
6987: POP
6988: LD_VAR 0 2
6992: NOT
6993: IFFALSE 6876
// end ;
6995: PPOPN 2
6997: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6998: LD_INT 22
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 32
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 69
7026: IFFALSE 7105
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
// begin enable ;
7034: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
7035: LD_ADDR_VAR 0 1
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_INT 3
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 32
7052: PUSH
7053: LD_INT 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 69
7068: PUSH
7069: FOR_IN
7070: IFFALSE 7103
// if GetFuel ( i ) < 1 then
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 261
7081: PUSH
7082: LD_INT 1
7084: LESS
7085: IFFALSE 7101
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 311
7096: PPUSH
7097: CALL_OW 121
7101: GO 7069
7103: POP
7104: POP
// end ; end_of_file
7105: PPOPN 1
7107: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
7112: PPUSH
// SetBName ( omikron , omikron ) ;
7113: LD_INT 64
7115: PPUSH
7116: LD_STRING omikron
7118: PPUSH
7119: CALL_OW 500
// uc_side := 4 ;
7123: LD_ADDR_OWVAR 20
7127: PUSH
7128: LD_INT 4
7130: ST_TO_ADDR
// uc_nation := 1 ;
7131: LD_ADDR_OWVAR 21
7135: PUSH
7136: LD_INT 1
7138: ST_TO_ADDR
// omicronSquad := [ ] ;
7139: LD_ADDR_EXP 51
7143: PUSH
7144: EMPTY
7145: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
7146: LD_ADDR_VAR 0 2
7150: PUSH
7151: LD_INT 22
7153: PUSH
7154: LD_INT 4
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 2
7163: PUSH
7164: LD_INT 30
7166: PUSH
7167: LD_INT 32
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 31
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: PUSH
7198: FOR_IN
7199: IFFALSE 7256
// begin PrepareHuman ( false , 1 , 1 ) ;
7201: LD_INT 0
7203: PPUSH
7204: LD_INT 1
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: CALL_OW 380
// un := CreateHuman ;
7214: LD_ADDR_VAR 0 3
7218: PUSH
7219: CALL_OW 44
7223: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7224: LD_ADDR_EXP 51
7228: PUSH
7229: LD_EXP 51
7233: PUSH
7234: LD_VAR 0 3
7238: UNION
7239: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7240: LD_VAR 0 3
7244: PPUSH
7245: LD_VAR 0 2
7249: PPUSH
7250: CALL_OW 52
// end ;
7254: GO 7198
7256: POP
7257: POP
// for i := 1 to 3 do
7258: LD_ADDR_VAR 0 2
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_INT 3
7270: PUSH
7271: FOR_TO
7272: IFFALSE 7327
// begin PrepareHuman ( false , 2 , 2 ) ;
7274: LD_INT 0
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 2
7282: PPUSH
7283: CALL_OW 380
// un := CreateHuman ;
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: CALL_OW 44
7296: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7297: LD_ADDR_EXP 51
7301: PUSH
7302: LD_EXP 51
7306: PUSH
7307: LD_VAR 0 3
7311: UNION
7312: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7313: LD_VAR 0 3
7317: PPUSH
7318: LD_INT 64
7320: PPUSH
7321: CALL_OW 52
// end ;
7325: GO 7271
7327: POP
7328: POP
// for i := 1 to 2 do
7329: LD_ADDR_VAR 0 2
7333: PUSH
7334: DOUBLE
7335: LD_INT 1
7337: DEC
7338: ST_TO_ADDR
7339: LD_INT 2
7341: PUSH
7342: FOR_TO
7343: IFFALSE 7482
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7345: LD_INT 4
7347: PPUSH
7348: LD_INT 1
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_INT 3
7362: PPUSH
7363: LD_INT 100
7365: PPUSH
7366: CALL 429 0 7
// un := CreateVehicle ;
7370: LD_ADDR_VAR 0 3
7374: PUSH
7375: CALL_OW 45
7379: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7380: LD_ADDR_EXP 51
7384: PUSH
7385: LD_EXP 51
7389: PUSH
7390: LD_VAR 0 3
7394: UNION
7395: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 28
7403: PPUSH
7404: LD_INT 37
7406: PPUSH
7407: LD_INT 6
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 3
7422: PPUSH
7423: LD_INT 2
7425: PPUSH
7426: CALL_OW 380
// un := CreateHuman ;
7430: LD_ADDR_VAR 0 3
7434: PUSH
7435: CALL_OW 44
7439: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7440: LD_ADDR_EXP 51
7444: PUSH
7445: LD_EXP 51
7449: PUSH
7450: LD_VAR 0 3
7454: UNION
7455: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7456: LD_VAR 0 3
7460: PPUSH
7461: LD_EXP 51
7465: PUSH
7466: LD_EXP 51
7470: PUSH
7471: LD_INT 1
7473: MINUS
7474: ARRAY
7475: PPUSH
7476: CALL_OW 52
// end ;
7480: GO 7342
7482: POP
7483: POP
// end ;
7484: LD_VAR 0 1
7488: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7489: LD_INT 0
7491: PPUSH
7492: PPUSH
7493: PPUSH
7494: PPUSH
// uc_side := 4 ;
7495: LD_ADDR_OWVAR 20
7499: PUSH
7500: LD_INT 4
7502: ST_TO_ADDR
// uc_nation := 1 ;
7503: LD_ADDR_OWVAR 21
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// tmp := [ ] ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: EMPTY
7517: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7518: LD_INT 4
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: LD_INT 4
7535: PPUSH
7536: LD_INT 77
7538: PPUSH
7539: CALL 429 0 7
// un := CreateVehicle ;
7543: LD_ADDR_VAR 0 3
7547: PUSH
7548: CALL_OW 45
7552: ST_TO_ADDR
// tmp := tmp union un ;
7553: LD_ADDR_VAR 0 4
7557: PUSH
7558: LD_VAR 0 4
7562: PUSH
7563: LD_VAR 0 3
7567: UNION
7568: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_INT 2
7576: PPUSH
7577: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7581: LD_VAR 0 3
7585: PPUSH
7586: LD_INT 106
7588: PPUSH
7589: LD_INT 3
7591: PPUSH
7592: LD_INT 0
7594: PPUSH
7595: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7599: LD_INT 0
7601: PPUSH
7602: LD_INT 3
7604: PPUSH
7605: LD_INT 2
7607: PPUSH
7608: CALL_OW 380
// un := CreateHuman ;
7612: LD_ADDR_VAR 0 3
7616: PUSH
7617: CALL_OW 44
7621: ST_TO_ADDR
// tmp := tmp union un ;
7622: LD_ADDR_VAR 0 4
7626: PUSH
7627: LD_VAR 0 4
7631: PUSH
7632: LD_VAR 0 3
7636: UNION
7637: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7638: LD_VAR 0 3
7642: PPUSH
7643: LD_VAR 0 4
7647: PUSH
7648: LD_VAR 0 4
7652: PUSH
7653: LD_INT 1
7655: MINUS
7656: ARRAY
7657: PPUSH
7658: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7662: LD_VAR 0 3
7666: PPUSH
7667: LD_INT 109
7669: PPUSH
7670: LD_INT 9
7672: PPUSH
7673: CALL_OW 111
// wait ( 0 0$1 ) ;
7677: LD_INT 35
7679: PPUSH
7680: CALL_OW 67
// for i := 1 to 2 do
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: DOUBLE
7690: LD_INT 1
7692: DEC
7693: ST_TO_ADDR
7694: LD_INT 2
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7762
// begin PrepareHuman ( false , 1 , 2 ) ;
7700: LD_INT 0
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: LD_INT 2
7708: PPUSH
7709: CALL_OW 380
// un := CreateHuman ;
7713: LD_ADDR_VAR 0 3
7717: PUSH
7718: CALL_OW 44
7722: ST_TO_ADDR
// tmp := tmp union un ;
7723: LD_ADDR_VAR 0 4
7727: PUSH
7728: LD_VAR 0 4
7732: PUSH
7733: LD_VAR 0 3
7737: UNION
7738: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7739: LD_VAR 0 3
7743: PPUSH
7744: LD_INT 105
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: LD_INT 2
7752: PPUSH
7753: LD_INT 0
7755: PPUSH
7756: CALL_OW 50
// end ;
7760: GO 7697
7762: POP
7763: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7764: LD_VAR 0 4
7768: PPUSH
7769: LD_INT 26
7771: PPUSH
7772: LD_INT 35
7774: PPUSH
7775: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7779: LD_INT 35
7781: PPUSH
7782: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7786: LD_VAR 0 4
7790: PPUSH
7791: LD_INT 50
7793: PUSH
7794: EMPTY
7795: LIST
7796: PPUSH
7797: CALL_OW 72
7801: NOT
7802: IFFALSE 7806
// exit ;
7804: GO 7933
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7806: LD_VAR 0 4
7810: PPUSH
7811: LD_INT 91
7813: PUSH
7814: LD_INT 64
7816: PUSH
7817: LD_INT 12
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: PUSH
7830: LD_VAR 0 4
7834: EQUAL
7835: IFFALSE 7779
// omicronSquad := omicronSquad union tmp ;
7837: LD_ADDR_EXP 51
7841: PUSH
7842: LD_EXP 51
7846: PUSH
7847: LD_VAR 0 4
7851: UNION
7852: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7853: LD_ADDR_VAR 0 2
7857: PUSH
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 25
7865: PUSH
7866: LD_INT 1
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: PUSH
7878: FOR_IN
7879: IFFALSE 7931
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7881: LD_VAR 0 2
7885: PPUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 4
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 30
7898: PUSH
7899: LD_INT 4
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PPUSH
7910: CALL_OW 69
7914: PPUSH
7915: LD_VAR 0 2
7919: PPUSH
7920: CALL_OW 74
7924: PPUSH
7925: CALL_OW 120
7929: GO 7878
7931: POP
7932: POP
// end ;
7933: LD_VAR 0 1
7937: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7938: LD_EXP 13
7942: NOT
7943: IFFALSE 8514
7945: GO 7947
7947: DISABLE
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7955: LD_ADDR_VAR 0 2
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_INT 4
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 21
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 3
7982: PUSH
7983: LD_INT 24
7985: PUSH
7986: LD_INT 1000
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
8007: LD_ADDR_VAR 0 3
8011: PUSH
8012: LD_EXP 51
8016: PPUSH
8017: LD_INT 25
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 72
8031: ST_TO_ADDR
// if filter and tmp then
8032: LD_VAR 0 2
8036: PUSH
8037: LD_VAR 0 3
8041: AND
8042: IFFALSE 8115
// begin for i in tmp do
8044: LD_ADDR_VAR 0 1
8048: PUSH
8049: LD_VAR 0 3
8053: PUSH
8054: FOR_IN
8055: IFFALSE 8111
// if IsInUnit ( i ) then
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 310
8066: IFFALSE 8079
// ComExitBuilding ( i ) else
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 122
8077: GO 8109
// if not HasTask ( i ) then
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 314
8088: NOT
8089: IFFALSE 8109
// ComRepairBuilding ( i , filter [ 1 ] ) ;
8091: LD_VAR 0 1
8095: PPUSH
8096: LD_VAR 0 2
8100: PUSH
8101: LD_INT 1
8103: ARRAY
8104: PPUSH
8105: CALL_OW 130
8109: GO 8054
8111: POP
8112: POP
// end else
8113: GO 8186
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 3
8122: PUSH
8123: LD_INT 54
8125: PUSH
8126: EMPTY
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 72
8137: IFFALSE 8186
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
8139: LD_ADDR_VAR 0 1
8143: PUSH
8144: LD_VAR 0 3
8148: PPUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 54
8154: PUSH
8155: EMPTY
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PPUSH
8162: CALL_OW 72
8166: PUSH
8167: FOR_IN
8168: IFFALSE 8184
// ComEnterUnit ( i , omikron ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_INT 64
8177: PPUSH
8178: CALL_OW 120
8182: GO 8167
8184: POP
8185: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
8186: LD_ADDR_VAR 0 2
8190: PUSH
8191: LD_EXP 51
8195: PPUSH
8196: LD_INT 21
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 72
8210: ST_TO_ADDR
// if not filter then
8211: LD_VAR 0 2
8215: NOT
8216: IFFALSE 8220
// exit ;
8218: GO 8514
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
8220: LD_ADDR_VAR 0 4
8224: PUSH
8225: LD_INT 13
8227: PPUSH
8228: LD_INT 81
8230: PUSH
8231: LD_INT 4
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// if enemy then
8243: LD_VAR 0 4
8247: IFFALSE 8514
// begin for i in filter do
8249: LD_ADDR_VAR 0 1
8253: PUSH
8254: LD_VAR 0 2
8258: PUSH
8259: FOR_IN
8260: IFFALSE 8512
// begin tmp := IsDrivenBy ( i ) ;
8262: LD_ADDR_VAR 0 3
8266: PUSH
8267: LD_VAR 0 1
8271: PPUSH
8272: CALL_OW 311
8276: ST_TO_ADDR
// if not tmp then
8277: LD_VAR 0 3
8281: NOT
8282: IFFALSE 8286
// continue ;
8284: GO 8259
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 256
8295: PUSH
8296: LD_INT 600
8298: GREATEREQUAL
8299: PUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 110
8309: PUSH
8310: LD_INT 1
8312: NONEQUAL
8313: AND
8314: IFFALSE 8340
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8316: LD_VAR 0 1
8320: PPUSH
8321: LD_VAR 0 4
8325: PPUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 74
8335: PPUSH
8336: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 256
8349: PUSH
8350: LD_INT 600
8352: LESS
8353: PUSH
8354: LD_VAR 0 1
8358: PPUSH
8359: CALL_OW 110
8363: PUSH
8364: LD_INT 1
8366: NONEQUAL
8367: AND
8368: IFFALSE 8397
// begin SetTag ( i , 1 ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8382: LD_VAR 0 1
8386: PPUSH
8387: LD_INT 27
8389: PPUSH
8390: LD_INT 35
8392: PPUSH
8393: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 110
8406: PUSH
8407: LD_INT 1
8409: EQUAL
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 27
8418: PPUSH
8419: LD_INT 35
8421: PPUSH
8422: CALL_OW 297
8426: PUSH
8427: LD_INT 6
8429: LESS
8430: AND
8431: PUSH
8432: LD_VAR 0 3
8436: AND
8437: IFFALSE 8510
// begin ComExitVehicle ( tmp ) ;
8439: LD_VAR 0 3
8443: PPUSH
8444: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8448: LD_VAR 0 3
8452: PPUSH
8453: LD_VAR 0 1
8457: PPUSH
8458: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8462: LD_INT 35
8464: PPUSH
8465: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8469: LD_VAR 0 1
8473: PPUSH
8474: CALL_OW 256
8478: PUSH
8479: LD_INT 1000
8481: EQUAL
8482: IFFALSE 8462
// ComEnterUnit ( tmp , i ) ;
8484: LD_VAR 0 3
8488: PPUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 120
// SetTag ( i , 0 ) ;
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_INT 0
8505: PPUSH
8506: CALL_OW 109
// end ; end ;
8510: GO 8259
8512: POP
8513: POP
// end ; end ;
8514: PPOPN 4
8516: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8517: LD_EXP 13
8521: IFFALSE 8665
8523: GO 8525
8525: DISABLE
8526: LD_INT 0
8528: PPUSH
8529: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_EXP 51
8539: PPUSH
8540: LD_INT 21
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 50
8552: PUSH
8553: EMPTY
8554: LIST
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PPUSH
8560: CALL_OW 72
8564: ST_TO_ADDR
// if not tmp then
8565: LD_VAR 0 2
8569: NOT
8570: IFFALSE 8574
// exit ;
8572: GO 8665
// repeat wait ( 0 0$1 ) ;
8574: LD_INT 35
8576: PPUSH
8577: CALL_OW 67
// for i in tmp do
8581: LD_ADDR_VAR 0 1
8585: PUSH
8586: LD_VAR 0 2
8590: PUSH
8591: FOR_IN
8592: IFFALSE 8656
// begin ComExit ( i ) ;
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL 867 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8603: LD_VAR 0 1
8607: PPUSH
8608: LD_INT 14
8610: PPUSH
8611: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 14
8622: PPUSH
8623: CALL_OW 308
8627: IFFALSE 8654
// begin tmp := tmp diff i ;
8629: LD_ADDR_VAR 0 2
8633: PUSH
8634: LD_VAR 0 2
8638: PUSH
8639: LD_VAR 0 1
8643: DIFF
8644: ST_TO_ADDR
// RemoveUnit ( i ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: CALL_OW 64
// end ; end ;
8654: GO 8591
8656: POP
8657: POP
// until not tmp ;
8658: LD_VAR 0 2
8662: NOT
8663: IFFALSE 8574
// end ; end_of_file
8665: PPOPN 2
8667: END
// export function Action ; var i , un , veh , tmp ; begin
8668: LD_INT 0
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
8674: PPUSH
// InGameOn ;
8675: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8679: LD_INT 179
8681: PPUSH
8682: LD_INT 5
8684: PPUSH
8685: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: LD_INT 2
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: LD_INT 12
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_INT 1
8708: PPUSH
8709: LD_INT 24
8711: PPUSH
8712: LD_INT 33
8714: PPUSH
8715: CALL 429 0 7
8719: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8720: LD_VAR 0 4
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8732: LD_VAR 0 4
8736: PPUSH
8737: LD_INT 178
8739: PPUSH
8740: LD_INT 2
8742: PPUSH
8743: LD_INT 0
8745: PPUSH
8746: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8750: LD_EXP 25
8754: PPUSH
8755: LD_VAR 0 4
8759: PPUSH
8760: CALL_OW 52
// if Kamil then
8764: LD_EXP 29
8768: IFFALSE 8803
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8770: LD_EXP 29
8774: PPUSH
8775: LD_INT 207
8777: PPUSH
8778: LD_INT 37
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8788: LD_EXP 29
8792: PPUSH
8793: LD_INT 211
8795: PPUSH
8796: LD_INT 38
8798: PPUSH
8799: CALL_OW 118
// end ; if Sophia then
8803: LD_EXP 31
8807: IFFALSE 8842
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8809: LD_EXP 31
8813: PPUSH
8814: LD_INT 209
8816: PPUSH
8817: LD_INT 40
8819: PPUSH
8820: LD_INT 0
8822: PPUSH
8823: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8827: LD_EXP 31
8831: PPUSH
8832: LD_INT 211
8834: PPUSH
8835: LD_INT 38
8837: PPUSH
8838: CALL_OW 118
// end ; if Givi then
8842: LD_EXP 26
8846: IFFALSE 8881
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8848: LD_EXP 26
8852: PPUSH
8853: LD_INT 201
8855: PPUSH
8856: LD_INT 34
8858: PPUSH
8859: LD_INT 0
8861: PPUSH
8862: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8866: LD_EXP 26
8870: PPUSH
8871: LD_INT 206
8873: PPUSH
8874: LD_INT 36
8876: PPUSH
8877: CALL_OW 118
// end ; if Ibrahim then
8881: LD_EXP 28
8885: IFFALSE 8920
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8887: LD_EXP 28
8891: PPUSH
8892: LD_INT 202
8894: PPUSH
8895: LD_INT 39
8897: PPUSH
8898: LD_INT 0
8900: PPUSH
8901: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8905: LD_EXP 28
8909: PPUSH
8910: LD_INT 206
8912: PPUSH
8913: LD_INT 36
8915: PPUSH
8916: CALL_OW 118
// end ; if Markov then
8920: LD_EXP 32
8924: IFFALSE 9011
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8926: LD_ADDR_VAR 0 4
8930: PUSH
8931: LD_INT 2
8933: PPUSH
8934: LD_INT 2
8936: PPUSH
8937: LD_INT 13
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_INT 1
8945: PPUSH
8946: LD_INT 25
8948: PPUSH
8949: LD_INT 80
8951: PUSH
8952: LD_INT 20
8954: PUSH
8955: LD_OWVAR 67
8959: MUL
8960: MINUS
8961: PPUSH
8962: CALL 429 0 7
8966: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8967: LD_VAR 0 4
8971: PPUSH
8972: LD_INT 2
8974: PPUSH
8975: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8979: LD_VAR 0 4
8983: PPUSH
8984: LD_INT 197
8986: PPUSH
8987: LD_INT 35
8989: PPUSH
8990: LD_INT 0
8992: PPUSH
8993: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8997: LD_EXP 32
9001: PPUSH
9002: LD_VAR 0 4
9006: PPUSH
9007: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
9011: LD_ADDR_VAR 0 5
9015: PUSH
9016: LD_EXP 30
9020: PUSH
9021: LD_EXP 37
9025: UNION
9026: ST_TO_ADDR
// for i in tmp do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: LD_VAR 0 5
9036: PUSH
9037: FOR_IN
9038: IFFALSE 9072
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 203
9047: PPUSH
9048: LD_INT 41
9050: PPUSH
9051: LD_INT 6
9053: PPUSH
9054: LD_INT 0
9056: PPUSH
9057: CALL_OW 50
// ComHold ( i ) ;
9061: LD_VAR 0 2
9065: PPUSH
9066: CALL_OW 140
// end ;
9070: GO 9037
9072: POP
9073: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
9074: LD_INT 22
9076: PUSH
9077: LD_INT 2
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 2
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PPUSH
9098: CALL_OW 69
9102: NOT
9103: IFFALSE 9117
// SetClass ( Heike , 2 ) ;
9105: LD_EXP 25
9109: PPUSH
9110: LD_INT 2
9112: PPUSH
9113: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
9117: LD_EXP 25
9121: PPUSH
9122: LD_INT 183
9124: PPUSH
9125: LD_INT 12
9127: PPUSH
9128: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
9132: LD_EXP 25
9136: PPUSH
9137: LD_INT 188
9139: PPUSH
9140: LD_INT 20
9142: PPUSH
9143: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
9147: LD_EXP 25
9151: PPUSH
9152: LD_INT 191
9154: PPUSH
9155: LD_INT 25
9157: PPUSH
9158: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
9162: LD_EXP 25
9166: PPUSH
9167: LD_INT 203
9169: PPUSH
9170: LD_INT 29
9172: PPUSH
9173: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
9177: LD_EXP 25
9181: PPUSH
9182: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9186: LD_INT 35
9188: PPUSH
9189: CALL_OW 67
// until not IsInUnit ( Heike ) ;
9193: LD_EXP 25
9197: PPUSH
9198: CALL_OW 310
9202: NOT
9203: IFFALSE 9186
// CenterOnUnits ( Heike ) ;
9205: LD_EXP 25
9209: PPUSH
9210: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
9214: LD_ADDR_VAR 0 5
9218: PUSH
9219: LD_INT 22
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 21
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PPUSH
9243: CALL_OW 69
9247: PUSH
9248: LD_EXP 25
9252: PUSH
9253: LD_EXP 32
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: DIFF
9262: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9263: LD_VAR 0 5
9267: PPUSH
9268: LD_EXP 25
9272: PPUSH
9273: CALL_OW 119
// if Givi then
9277: LD_EXP 26
9281: IFFALSE 9299
// ComTurnUnit ( Heike , Givi ) else
9283: LD_EXP 25
9287: PPUSH
9288: LD_EXP 26
9292: PPUSH
9293: CALL_OW 119
9297: GO 9317
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9299: LD_EXP 25
9303: PPUSH
9304: LD_VAR 0 5
9308: PUSH
9309: LD_INT 1
9311: ARRAY
9312: PPUSH
9313: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9317: LD_EXP 25
9321: PPUSH
9322: LD_STRING DH-Start-1
9324: PPUSH
9325: CALL_OW 88
// if Givi then
9329: LD_EXP 26
9333: IFFALSE 9380
// begin Say ( Givi , DG-Start-2 ) ;
9335: LD_EXP 26
9339: PPUSH
9340: LD_STRING DG-Start-2
9342: PPUSH
9343: CALL_OW 88
// if not Mike then
9347: LD_EXP 27
9351: NOT
9352: IFFALSE 9378
// begin Say ( Givi , DG-Start-b-3 ) ;
9354: LD_EXP 26
9358: PPUSH
9359: LD_STRING DG-Start-b-3
9361: PPUSH
9362: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9366: LD_EXP 25
9370: PPUSH
9371: LD_STRING DH-Start-b-4
9373: PPUSH
9374: CALL_OW 88
// end ; end else
9378: GO 9445
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9380: LD_EXP 37
9384: PPUSH
9385: LD_INT 26
9387: PUSH
9388: LD_INT 1
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 72
9399: PUSH
9400: LD_INT 1
9402: ARRAY
9403: PPUSH
9404: LD_STRING DArm-Start-a-2
9406: PPUSH
9407: CALL_OW 88
9411: NOT
9412: IFFALSE 9445
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9414: LD_EXP 37
9418: PPUSH
9419: LD_INT 26
9421: PUSH
9422: LD_INT 2
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 72
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: PPUSH
9438: LD_STRING DArf-Start-a-2
9440: PPUSH
9441: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9445: LD_EXP 25
9449: PPUSH
9450: LD_INT 211
9452: PPUSH
9453: LD_INT 38
9455: PPUSH
9456: CALL_OW 118
// wait ( 0 0$1 ) ;
9460: LD_INT 35
9462: PPUSH
9463: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9467: LD_EXP 25
9471: PPUSH
9472: LD_STRING DH-Start-3
9474: PPUSH
9475: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9479: LD_EXP 25
9483: PPUSH
9484: LD_STRING DH-Start-4
9486: PPUSH
9487: CALL_OW 88
// InGameOff ;
9491: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9495: LD_STRING Prepare
9497: PPUSH
9498: CALL_OW 337
// SaveForQuickRestart ;
9502: CALL_OW 22
// wait ( 0 0$10 ) ;
9506: LD_INT 350
9508: PPUSH
9509: CALL_OW 67
// if not Aviradze then
9513: LD_EXP 35
9517: NOT
9518: IFFALSE 9522
// exit ;
9520: GO 9762
// SetDir ( Aviradze , 4 ) ;
9522: LD_EXP 35
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9534: LD_EXP 35
9538: PPUSH
9539: LD_INT 225
9541: PPUSH
9542: LD_INT 33
9544: PPUSH
9545: LD_INT 0
9547: PPUSH
9548: CALL_OW 48
// for i := 1 to 2 do
9552: LD_ADDR_VAR 0 2
9556: PUSH
9557: DOUBLE
9558: LD_INT 1
9560: DEC
9561: ST_TO_ADDR
9562: LD_INT 2
9564: PUSH
9565: FOR_TO
9566: IFFALSE 9697
// begin uc_side := 2 ;
9568: LD_ADDR_OWVAR 20
9572: PUSH
9573: LD_INT 2
9575: ST_TO_ADDR
// uc_nation := 0 ;
9576: LD_ADDR_OWVAR 21
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9584: LD_INT 0
9586: PPUSH
9587: LD_INT 12
9589: PPUSH
9590: LD_INT 1
9592: PPUSH
9593: CALL_OW 380
// hc_gallery :=  ;
9597: LD_ADDR_OWVAR 33
9601: PUSH
9602: LD_STRING 
9604: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9605: LD_ADDR_OWVAR 26
9609: PUSH
9610: LD_STRING Artudito
9612: PUSH
9613: LD_STRING Textur
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_VAR 0 2
9624: ARRAY
9625: ST_TO_ADDR
// un := CreateHuman ;
9626: LD_ADDR_VAR 0 3
9630: PUSH
9631: CALL_OW 44
9635: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9636: LD_VAR 0 3
9640: PPUSH
9641: LD_INT 224
9643: PUSH
9644: LD_INT 226
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_VAR 0 2
9655: ARRAY
9656: PPUSH
9657: LD_INT 31
9659: PUSH
9660: LD_INT 35
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: LD_VAR 0 2
9671: ARRAY
9672: PPUSH
9673: LD_INT 0
9675: PPUSH
9676: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 215
9687: PPUSH
9688: LD_INT 36
9690: PPUSH
9691: CALL_OW 111
// end ;
9695: GO 9565
9697: POP
9698: POP
// hc_name :=  ;
9699: LD_ADDR_OWVAR 26
9703: PUSH
9704: LD_STRING 
9706: ST_TO_ADDR
// InitHc ;
9707: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9711: LD_EXP 35
9715: PPUSH
9716: LD_INT 215
9718: PPUSH
9719: LD_INT 36
9721: PPUSH
9722: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9726: LD_EXP 35
9730: PPUSH
9731: LD_STRING DA-Arrive-1
9733: PPUSH
9734: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9738: LD_EXP 25
9742: PPUSH
9743: LD_STRING DH-Arrive-2
9745: PPUSH
9746: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9750: LD_EXP 35
9754: PPUSH
9755: LD_STRING DA-Arrive-3
9757: PPUSH
9758: CALL_OW 88
// end ;
9762: LD_VAR 0 1
9766: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9767: LD_EXP 3
9771: IFFALSE 11080
9773: GO 9775
9775: DISABLE
9776: LD_INT 0
9778: PPUSH
9779: PPUSH
9780: PPUSH
// begin DialogueOn ;
9781: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9785: LD_EXP 25
9789: PPUSH
9790: LD_STRING DH-base-1
9792: PPUSH
9793: CALL_OW 88
// if Markov then
9797: LD_EXP 32
9801: IFFALSE 9853
// begin Say ( Markov , DMar-base-2 ) ;
9803: LD_EXP 32
9807: PPUSH
9808: LD_STRING DMar-base-2
9810: PPUSH
9811: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9815: LD_EXP 32
9819: PPUSH
9820: LD_STRING DMar-base-3
9822: PPUSH
9823: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9827: LD_EXP 25
9831: PPUSH
9832: LD_STRING DH-base-4
9834: PPUSH
9835: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9839: LD_EXP 32
9843: PPUSH
9844: LD_STRING DMar-base-5
9846: PPUSH
9847: CALL_OW 88
// end else
9851: GO 9930
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9853: LD_EXP 37
9857: PPUSH
9858: LD_INT 26
9860: PUSH
9861: LD_INT 1
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PPUSH
9868: CALL_OW 72
9872: PUSH
9873: LD_INT 1
9875: ARRAY
9876: PPUSH
9877: LD_STRING DArm-base-a-2
9879: PPUSH
9880: CALL_OW 88
9884: NOT
9885: IFFALSE 9918
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9887: LD_EXP 37
9891: PPUSH
9892: LD_INT 26
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PPUSH
9902: CALL_OW 72
9906: PUSH
9907: LD_INT 1
9909: ARRAY
9910: PPUSH
9911: LD_STRING DArf-base-a-2
9913: PPUSH
9914: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9918: LD_EXP 25
9922: PPUSH
9923: LD_STRING DH-base-a-3
9925: PPUSH
9926: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9930: LD_EXP 35
9934: PPUSH
9935: LD_STRING DA-base-6
9937: PPUSH
9938: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9942: LD_EXP 35
9946: PPUSH
9947: LD_STRING DA-base-7
9949: PPUSH
9950: CALL_OW 88
// DialogueOff ;
9954: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9958: LD_STRING Flamethrower
9960: PPUSH
9961: CALL_OW 337
// wait ( 2 2$00 ) ;
9965: LD_INT 4200
9967: PPUSH
9968: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9972: LD_EXP 34
9976: PUSH
9977: LD_EXP 27
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: LD_INT 203
9988: PPUSH
9989: LD_INT 37
9991: PPUSH
9992: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9996: LD_INT 22
9998: PUSH
9999: LD_INT 2
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 92
10008: PUSH
10009: LD_INT 203
10011: PUSH
10012: LD_INT 37
10014: PUSH
10015: LD_INT 10
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: NOT
10033: IFFALSE 10073
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
10035: LD_EXP 34
10039: PUSH
10040: LD_EXP 27
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: LD_EXP 25
10053: PPUSH
10054: CALL_OW 250
10058: PPUSH
10059: LD_EXP 25
10063: PPUSH
10064: CALL_OW 251
10068: PPUSH
10069: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10073: LD_INT 35
10075: PPUSH
10076: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
10080: LD_INT 2
10082: PPUSH
10083: LD_EXP 34
10087: PPUSH
10088: CALL_OW 292
10092: PUSH
10093: LD_EXP 34
10097: PPUSH
10098: LD_EXP 25
10102: PPUSH
10103: CALL_OW 296
10107: PUSH
10108: LD_INT 8
10110: LESS
10111: PUSH
10112: LD_EXP 34
10116: PPUSH
10117: LD_INT 22
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 21
10129: PUSH
10130: LD_INT 3
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: PPUSH
10146: LD_EXP 34
10150: PPUSH
10151: CALL_OW 74
10155: PPUSH
10156: CALL_OW 296
10160: PUSH
10161: LD_INT 7
10163: LESS
10164: OR
10165: AND
10166: PUSH
10167: LD_EXP 34
10171: PPUSH
10172: LD_INT 10
10174: PPUSH
10175: CALL_OW 308
10179: NOT
10180: AND
10181: IFFALSE 10073
// InGameOn ;
10183: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
10187: LD_EXP 34
10191: PPUSH
10192: CALL_OW 87
// if IsInUnit ( Heike ) then
10196: LD_EXP 25
10200: PPUSH
10201: CALL_OW 310
10205: IFFALSE 10216
// ComExitBuilding ( Heike ) ;
10207: LD_EXP 25
10211: PPUSH
10212: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10216: LD_EXP 34
10220: PUSH
10221: LD_EXP 27
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PPUSH
10230: LD_EXP 25
10234: PPUSH
10235: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10239: LD_EXP 25
10243: PPUSH
10244: LD_EXP 34
10248: PPUSH
10249: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10253: LD_INT 22
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 91
10265: PUSH
10266: LD_EXP 34
10270: PUSH
10271: LD_INT 10
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 21
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: PPUSH
10294: CALL_OW 69
10298: IFFALSE 10324
// begin Say ( Kurt , DKs-scout-1 ) ;
10300: LD_EXP 34
10304: PPUSH
10305: LD_STRING DKs-scout-1
10307: PPUSH
10308: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10312: LD_EXP 25
10316: PPUSH
10317: LD_STRING DH-scout-2
10319: PPUSH
10320: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10324: LD_INT 35
10326: PPUSH
10327: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10331: LD_EXP 25
10335: PPUSH
10336: LD_EXP 34
10340: PPUSH
10341: CALL_OW 296
10345: PUSH
10346: LD_INT 6
10348: LESS
10349: IFFALSE 10324
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10351: LD_EXP 34
10355: PUSH
10356: LD_EXP 27
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PPUSH
10365: LD_EXP 25
10369: PPUSH
10370: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10374: LD_EXP 34
10378: PPUSH
10379: LD_STRING DKs-scout-3
10381: PPUSH
10382: CALL_OW 88
// if Kaia then
10386: LD_EXP 30
10390: IFFALSE 10573
// begin if IsInUnit ( Kaia ) then
10392: LD_EXP 30
10396: PPUSH
10397: CALL_OW 310
10401: IFFALSE 10412
// ComExitBuilding ( Kaia ) ;
10403: LD_EXP 30
10407: PPUSH
10408: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
10412: LD_EXP 30
10416: PPUSH
10417: LD_EXP 34
10421: PPUSH
10422: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10426: LD_INT 35
10428: PPUSH
10429: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10433: LD_EXP 30
10437: PPUSH
10438: LD_EXP 34
10442: PPUSH
10443: CALL_OW 296
10447: PUSH
10448: LD_INT 6
10450: LESS
10451: IFFALSE 10426
// ComTurnUnit ( Kaia , Kurt ) ;
10453: LD_EXP 30
10457: PPUSH
10458: LD_EXP 34
10462: PPUSH
10463: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10467: LD_EXP 30
10471: PPUSH
10472: LD_STRING DK-scout-4
10474: PPUSH
10475: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10479: LD_EXP 34
10483: PPUSH
10484: LD_EXP 30
10488: PPUSH
10489: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10493: LD_EXP 34
10497: PPUSH
10498: LD_STRING DKs-scout-5
10500: PPUSH
10501: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10505: LD_EXP 30
10509: PPUSH
10510: LD_STRING DK-scout-6
10512: PPUSH
10513: CALL_OW 88
// if Mike then
10517: LD_EXP 27
10521: IFFALSE 10573
// begin Say ( Mike , DM-scout-7 ) ;
10523: LD_EXP 27
10527: PPUSH
10528: LD_STRING DM-scout-7
10530: PPUSH
10531: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10535: LD_EXP 30
10539: PPUSH
10540: LD_EXP 27
10544: PPUSH
10545: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10549: LD_EXP 30
10553: PPUSH
10554: LD_STRING DK-scout-8
10556: PPUSH
10557: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10561: LD_EXP 27
10565: PPUSH
10566: LD_STRING DM-scout-9
10568: PPUSH
10569: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10573: LD_INT 184
10575: PPUSH
10576: LD_INT 100
10578: PPUSH
10579: LD_INT 2
10581: PPUSH
10582: LD_INT 12
10584: NEG
10585: PPUSH
10586: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10590: LD_INT 184
10592: PPUSH
10593: LD_INT 100
10595: PPUSH
10596: LD_INT 2
10598: PPUSH
10599: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10603: LD_INT 184
10605: PPUSH
10606: LD_INT 100
10608: PPUSH
10609: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10613: LD_EXP 34
10617: PPUSH
10618: LD_STRING DKs-scout-10
10620: PPUSH
10621: CALL_OW 88
// wait ( 0 0$1 ) ;
10625: LD_INT 35
10627: PPUSH
10628: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10632: LD_INT 144
10634: PPUSH
10635: LD_INT 65
10637: PPUSH
10638: LD_INT 2
10640: PPUSH
10641: LD_INT 12
10643: NEG
10644: PPUSH
10645: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10649: LD_INT 144
10651: PPUSH
10652: LD_INT 65
10654: PPUSH
10655: LD_INT 2
10657: PPUSH
10658: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10662: LD_INT 144
10664: PPUSH
10665: LD_INT 65
10667: PPUSH
10668: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10672: LD_EXP 34
10676: PPUSH
10677: LD_STRING DKs-scout-11
10679: PPUSH
10680: CALL_OW 88
// wait ( 0 0$1 ) ;
10684: LD_INT 35
10686: PPUSH
10687: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10691: LD_EXP 34
10695: PPUSH
10696: CALL_OW 87
// if Mike and not Givi then
10700: LD_EXP 27
10704: PUSH
10705: LD_EXP 26
10709: NOT
10710: AND
10711: IFFALSE 10737
// begin Say ( Mike , DM-scout-a-1 ) ;
10713: LD_EXP 27
10717: PPUSH
10718: LD_STRING DM-scout-a-1
10720: PPUSH
10721: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10725: LD_EXP 25
10729: PPUSH
10730: LD_STRING DH-scout-a-2
10732: PPUSH
10733: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10737: LD_EXP 34
10741: PUSH
10742: LD_EXP 27
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: LD_INT 2
10753: PPUSH
10754: CALL_OW 235
// InGameOff ;
10758: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10762: LD_STRING Hill
10764: PPUSH
10765: CALL_OW 337
// allowToPatrol := true ;
10769: LD_ADDR_EXP 12
10773: PUSH
10774: LD_INT 1
10776: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10777: LD_INT 3150
10779: PPUSH
10780: CALL_OW 67
// InitHc ;
10784: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10788: LD_ADDR_VAR 0 1
10792: PUSH
10793: DOUBLE
10794: LD_INT 1
10796: DEC
10797: ST_TO_ADDR
10798: LD_INT 3
10800: PUSH
10801: LD_INT 3
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: LD_OWVAR 67
10816: ARRAY
10817: PUSH
10818: FOR_TO
10819: IFFALSE 11078
// begin uc_side := 2 ;
10821: LD_ADDR_OWVAR 20
10825: PUSH
10826: LD_INT 2
10828: ST_TO_ADDR
// uc_nation := 2 ;
10829: LD_ADDR_OWVAR 21
10833: PUSH
10834: LD_INT 2
10836: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10837: LD_INT 0
10839: PPUSH
10840: LD_INT 1
10842: PUSH
10843: LD_INT 3
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: LD_VAR 0 1
10858: PUSH
10859: LD_INT 3
10861: MOD
10862: PUSH
10863: LD_INT 1
10865: PLUS
10866: ARRAY
10867: PPUSH
10868: LD_INT 3
10870: PUSH
10871: LD_INT 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: LD_OWVAR 67
10886: ARRAY
10887: PPUSH
10888: CALL_OW 380
// un := CreateHuman ;
10892: LD_ADDR_VAR 0 2
10896: PUSH
10897: CALL_OW 44
10901: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10902: LD_ADDR_EXP 37
10906: PUSH
10907: LD_EXP 37
10911: PUSH
10912: LD_VAR 0 2
10916: UNION
10917: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10918: LD_INT 2
10920: PPUSH
10921: LD_INT 2
10923: PPUSH
10924: LD_INT 13
10926: PPUSH
10927: LD_INT 2
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_VAR 0 1
10941: PUSH
10942: LD_INT 2
10944: MOD
10945: PUSH
10946: LD_INT 1
10948: PLUS
10949: ARRAY
10950: PPUSH
10951: LD_INT 1
10953: PPUSH
10954: LD_INT 27
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 27
10962: PUSH
10963: LD_INT 23
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_OWVAR 67
10976: PUSH
10977: LD_INT 0
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 12
10987: PLUS
10988: ARRAY
10989: PPUSH
10990: LD_INT 77
10992: PPUSH
10993: CALL 429 0 7
// veh := CreateVehicle ;
10997: LD_ADDR_VAR 0 3
11001: PUSH
11002: CALL_OW 45
11006: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11007: LD_VAR 0 3
11011: PPUSH
11012: LD_INT 2
11014: PPUSH
11015: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
11019: LD_VAR 0 3
11023: PPUSH
11024: LD_INT 178
11026: PPUSH
11027: LD_INT 2
11029: PPUSH
11030: LD_INT 2
11032: PPUSH
11033: LD_INT 0
11035: PPUSH
11036: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11040: LD_VAR 0 2
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11054: LD_VAR 0 2
11058: PPUSH
11059: LD_INT 183
11061: PPUSH
11062: LD_INT 11
11064: PPUSH
11065: CALL_OW 111
// wait ( 0 0$2 ) ;
11069: LD_INT 70
11071: PPUSH
11072: CALL_OW 67
// end ;
11076: GO 10818
11078: POP
11079: POP
// end ;
11080: PPOPN 3
11082: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11083: LD_EXP 4
11087: PUSH
11088: LD_EXP 35
11092: PPUSH
11093: CALL_OW 302
11097: AND
11098: IFFALSE 11147
11100: GO 11102
11102: DISABLE
// begin DialogueOn ;
11103: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11107: LD_EXP 35
11111: PPUSH
11112: LD_STRING DA-lab-1
11114: PPUSH
11115: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11119: LD_EXP 35
11123: PPUSH
11124: LD_STRING DA-lab-2
11126: PPUSH
11127: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11131: LD_EXP 25
11135: PPUSH
11136: LD_STRING DH-lab-3
11138: PPUSH
11139: CALL_OW 88
// DialogueOff ;
11143: CALL_OW 7
// end ;
11147: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11148: LD_INT 17
11150: PPUSH
11151: LD_INT 2
11153: PPUSH
11154: CALL_OW 321
11158: PUSH
11159: LD_INT 2
11161: EQUAL
11162: IFFALSE 11294
11164: GO 11166
11166: DISABLE
11167: LD_INT 0
11169: PPUSH
// begin DialogueOn ;
11170: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11174: LD_EXP 35
11178: PPUSH
11179: LD_STRING DA-Cam-1
11181: PPUSH
11182: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11186: LD_EXP 35
11190: PPUSH
11191: LD_STRING DA-Cam-2
11193: PPUSH
11194: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11198: LD_EXP 35
11202: PPUSH
11203: LD_STRING DA-Cam-3
11205: PPUSH
11206: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11210: LD_EXP 25
11214: PPUSH
11215: LD_STRING DH-Cam-4
11217: PPUSH
11218: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11222: LD_EXP 30
11226: PPUSH
11227: LD_STRING DK-Cam-5
11229: PPUSH
11230: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11234: LD_EXP 30
11238: PPUSH
11239: LD_STRING DK-Cam-6
11241: PPUSH
11242: CALL_OW 88
// DialogueOff ;
11246: CALL_OW 7
// Query ( Camera ) ;
11250: LD_STRING Camera
11252: PPUSH
11253: CALL_OW 97
// hiddenCameraAllowed := true ;
11257: LD_ADDR_EXP 5
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// for i in camAreas do
11265: LD_ADDR_VAR 0 1
11269: PUSH
11270: LD_EXP 8
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11292
// SetAreaMapShow ( i , 1 ) ;
11278: LD_VAR 0 1
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 424
11290: GO 11275
11292: POP
11293: POP
// end ;
11294: PPOPN 1
11296: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11297: LD_EXP 8
11301: NOT
11302: PUSH
11303: LD_EXP 5
11307: AND
11308: IFFALSE 11406
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin stop_talking := true ;
11316: LD_ADDR_OWVAR 56
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11324: LD_ADDR_VAR 0 1
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 23
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: FOR_IN
11370: IFFALSE 11389
// AddExperience ( i , 2 , 450 ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 2
11379: PPUSH
11380: LD_INT 450
11382: PPUSH
11383: CALL_OW 492
11387: GO 11369
11389: POP
11390: POP
// stop_talking := false ;
11391: LD_ADDR_OWVAR 56
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11399: LD_STRING ACH_CAMERA
11401: PPUSH
11402: CALL_OW 543
// end ;
11406: PPOPN 1
11408: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11409: LD_EXP 9
11413: PUSH
11414: LD_EXP 11
11418: NOT
11419: AND
11420: IFFALSE 11479
11422: GO 11424
11424: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11425: LD_EXP 9
11429: PPUSH
11430: CALL_OW 250
11434: PPUSH
11435: LD_EXP 9
11439: PPUSH
11440: CALL_OW 251
11444: PPUSH
11445: LD_INT 2
11447: PPUSH
11448: LD_INT 6
11450: NEG
11451: PPUSH
11452: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11456: LD_EXP 9
11460: PPUSH
11461: CALL_OW 87
// wait ( 0 0$1 ) ;
11465: LD_INT 35
11467: PPUSH
11468: CALL_OW 67
// YouLost ( Spotted ) ;
11472: LD_STRING Spotted
11474: PPUSH
11475: CALL_OW 104
// end ;
11479: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11480: LD_INT 3
11482: PUSH
11483: LD_INT 6
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: LD_EXP 47
11497: PPUSH
11498: CALL 2049 0 3
11502: IFFALSE 11535
11504: GO 11506
11506: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11507: LD_ADDR_EXP 9
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: LD_INT 6
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: LD_EXP 47
11529: PPUSH
11530: CALL 2049 0 3
11534: ST_TO_ADDR
11535: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11536: LD_INT 22
11538: PUSH
11539: LD_INT 6
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 30
11548: PUSH
11549: LD_INT 32
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: LD_INT 24
11561: PUSH
11562: LD_INT 1000
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PPUSH
11578: CALL_OW 69
11582: IFFALSE 11643
11584: GO 11586
11586: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11587: LD_ADDR_EXP 9
11591: PUSH
11592: LD_INT 22
11594: PUSH
11595: LD_INT 6
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 30
11604: PUSH
11605: LD_INT 32
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 3
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 1000
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: PPUSH
11634: CALL_OW 69
11638: PUSH
11639: LD_INT 1
11641: ARRAY
11642: ST_TO_ADDR
11643: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11644: LD_EXP 9
11648: IFFALSE 11880
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11659: LD_ADDR_VAR 0 4
11663: PUSH
11664: LD_EXP 42
11668: PUSH
11669: LD_EXP 44
11673: PUSH
11674: LD_EXP 45
11678: UNION
11679: PPUSH
11680: LD_INT 3
11682: PUSH
11683: LD_INT 25
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PPUSH
11697: CALL_OW 72
11701: UNION
11702: ST_TO_ADDR
// for i in noncombat do
11703: LD_ADDR_VAR 0 1
11707: PUSH
11708: LD_VAR 0 4
11712: PUSH
11713: FOR_IN
11714: IFFALSE 11810
// begin if IsInUnit ( i ) then
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 310
11725: IFFALSE 11736
// ComExitBuilding ( i ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11736: LD_VAR 0 1
11740: PPUSH
11741: LD_INT 114
11743: PPUSH
11744: LD_INT 97
11746: PPUSH
11747: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11751: LD_VAR 0 1
11755: PPUSH
11756: LD_INT 99
11758: PPUSH
11759: LD_INT 128
11761: PPUSH
11762: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_INT 91
11773: PPUSH
11774: LD_INT 145
11776: PPUSH
11777: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11781: LD_VAR 0 1
11785: PPUSH
11786: LD_INT 82
11788: PPUSH
11789: LD_INT 153
11791: PPUSH
11792: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11796: LD_VAR 0 1
11800: PPUSH
11801: LD_INT 16
11803: PPUSH
11804: CALL_OW 173
// end ;
11808: GO 11713
11810: POP
11811: POP
// if not allowHeikeAttack then
11812: LD_EXP 11
11816: NOT
11817: IFFALSE 11821
// exit ;
11819: GO 11880
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11821: LD_EXP 40
11825: PPUSH
11826: LD_STRING D9a-Kur-1
11828: PPUSH
11829: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11833: LD_EXP 43
11837: PPUSH
11838: LD_STRING D9a-Bur-1
11840: PPUSH
11841: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11845: LD_EXP 40
11849: PPUSH
11850: LD_STRING D9a-Kur-2
11852: PPUSH
11853: CALL_OW 94
// omicronFall := true ;
11857: LD_ADDR_EXP 13
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11865: LD_INT 105
11867: PPUSH
11868: CALL_OW 67
// retreatFromOmicron := true ;
11872: LD_ADDR_EXP 20
11876: PUSH
11877: LD_INT 1
11879: ST_TO_ADDR
// end ;
11880: PPOPN 4
11882: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11883: LD_INT 16
11885: PPUSH
11886: LD_INT 3
11888: PUSH
11889: LD_INT 22
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 23
11905: PUSH
11906: LD_INT 3
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 70
11921: IFFALSE 12004
11923: GO 11925
11925: DISABLE
11926: LD_INT 0
11928: PPUSH
// begin enable ;
11929: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11930: LD_ADDR_VAR 0 1
11934: PUSH
11935: LD_INT 16
11937: PPUSH
11938: LD_INT 3
11940: PUSH
11941: LD_INT 22
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 23
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 70
11973: PUSH
11974: FOR_IN
11975: IFFALSE 12002
// begin escapeCounter := escapeCounter + 1 ;
11977: LD_ADDR_EXP 19
11981: PUSH
11982: LD_EXP 19
11986: PUSH
11987: LD_INT 1
11989: PLUS
11990: ST_TO_ADDR
// RemoveUnit ( i ) ;
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 64
// end ;
12000: GO 11974
12002: POP
12003: POP
// end ;
12004: PPOPN 1
12006: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12007: LD_OWVAR 1
12011: PUSH
12012: LD_INT 13650
12014: PUSH
12015: LD_INT 0
12017: PPUSH
12018: LD_INT 3150
12020: PPUSH
12021: CALL_OW 12
12025: PLUS
12026: GREATEREQUAL
12027: IFFALSE 12036
12029: GO 12031
12031: DISABLE
// SmallAmericanReinforcements ;
12032: CALL 7489 0 0
12036: END
// every 0 0$1 trigger tick >= 9 9$15 do
12037: LD_OWVAR 1
12041: PUSH
12042: LD_INT 19425
12044: GREATEREQUAL
12045: IFFALSE 12110
12047: GO 12049
12049: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12050: LD_EXP 48
12054: PPUSH
12055: LD_INT 21
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 72
12069: PPUSH
12070: LD_INT 62
12072: PPUSH
12073: LD_INT 22
12075: PPUSH
12076: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12080: LD_EXP 49
12084: PPUSH
12085: LD_INT 69
12087: PPUSH
12088: LD_INT 27
12090: PPUSH
12091: CALL_OW 111
// wait ( 1 1$00 ) ;
12095: LD_INT 2100
12097: PPUSH
12098: CALL_OW 67
// startAttackOnOmicron := true ;
12102: LD_ADDR_EXP 6
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// end ;
12110: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12111: LD_EXP 22
12115: PUSH
12116: LD_INT 0
12118: EQUAL
12119: IFFALSE 14118
12121: GO 12123
12123: DISABLE
12124: LD_INT 0
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12133: LD_INT 5
12135: PPUSH
12136: LD_INT 2
12138: PPUSH
12139: CALL_OW 343
// PrepareOmarForces ;
12143: CALL 2619 0 0
// wait ( 0 0$03 ) ;
12147: LD_INT 105
12149: PPUSH
12150: CALL_OW 67
// allowHeikeAttack := true ;
12154: LD_ADDR_EXP 11
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// activeGrishkoAI := false ;
12162: LD_ADDR_EXP 10
12166: PUSH
12167: LD_INT 0
12169: ST_TO_ADDR
// if not hillBase then
12170: LD_EXP 15
12174: NOT
12175: IFFALSE 12184
// ChangeMissionObjectives ( HillDone ) ;
12177: LD_STRING HillDone
12179: PPUSH
12180: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12184: LD_EXP 33
12188: PPUSH
12189: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12193: LD_ADDR_VAR 0 1
12197: PUSH
12198: LD_INT 22
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 21
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 69
12226: PUSH
12227: FOR_IN
12228: IFFALSE 12252
// if HasTask ( i ) then
12230: LD_VAR 0 1
12234: PPUSH
12235: CALL_OW 314
12239: IFFALSE 12250
// ComHold ( i ) ;
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL_OW 140
12250: GO 12227
12252: POP
12253: POP
// DialogueOn ;
12254: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12258: LD_EXP 33
12262: PPUSH
12263: LD_STRING DO-assault-1
12265: PPUSH
12266: CALL_OW 94
// DialogueOff ;
12270: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_EXP 46
12283: PPUSH
12284: LD_INT 3
12286: PUSH
12287: LD_INT 54
12289: PUSH
12290: EMPTY
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 72
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12322
// ComMoveXY ( i , 226 , 114 ) ;
12305: LD_VAR 0 1
12309: PPUSH
12310: LD_INT 226
12312: PPUSH
12313: LD_INT 114
12315: PPUSH
12316: CALL_OW 111
12320: GO 12302
12322: POP
12323: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12324: LD_EXP 41
12328: PPUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 6
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 30
12341: PUSH
12342: LD_INT 4
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: PPUSH
12358: LD_EXP 41
12362: PPUSH
12363: CALL_OW 74
12367: PPUSH
12368: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12372: LD_STRING Attack
12374: PPUSH
12375: CALL_OW 337
// music_class := music_combat ;
12379: LD_ADDR_OWVAR 72
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// music_nat := 4 ;
12387: LD_ADDR_OWVAR 71
12391: PUSH
12392: LD_INT 4
12394: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12395: LD_INT 5
12397: PPUSH
12398: LD_EXP 41
12402: PPUSH
12403: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12407: LD_INT 6
12409: PPUSH
12410: LD_EXP 38
12414: PPUSH
12415: LD_INT 25
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 72
12429: PUSH
12430: LD_INT 4
12432: ARRAY
12433: PPUSH
12434: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: LD_EXP 38
12447: PPUSH
12448: LD_INT 3
12450: PUSH
12451: LD_INT 25
12453: PUSH
12454: LD_INT 4
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 72
12469: PUSH
12470: FOR_IN
12471: IFFALSE 12490
// ComAgressiveMove ( i , 221 , 110 ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_INT 221
12480: PPUSH
12481: LD_INT 110
12483: PPUSH
12484: CALL_OW 114
12488: GO 12470
12490: POP
12491: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12492: LD_EXP 38
12496: PPUSH
12497: LD_INT 25
12499: PUSH
12500: LD_INT 4
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 72
12511: PPUSH
12512: LD_INT 214
12514: PPUSH
12515: LD_INT 124
12517: PPUSH
12518: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12522: LD_EXP 38
12526: PPUSH
12527: LD_INT 25
12529: PUSH
12530: LD_INT 1
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: PUSH
12542: LD_INT 4
12544: ARRAY
12545: PPUSH
12546: LD_INT 214
12548: PPUSH
12549: LD_INT 114
12551: PPUSH
12552: LD_INT 0
12554: PPUSH
12555: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12559: LD_EXP 41
12563: PPUSH
12564: LD_STRING D9-Gri-1
12566: PPUSH
12567: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12571: LD_EXP 40
12575: PPUSH
12576: LD_STRING D9-Kur-1
12578: PPUSH
12579: CALL_OW 94
// wait ( 0 0$1 ) ;
12583: LD_INT 35
12585: PPUSH
12586: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12590: LD_EXP 33
12594: PPUSH
12595: LD_INT 233
12597: PPUSH
12598: LD_INT 130
12600: PPUSH
12601: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12605: LD_EXP 41
12609: PPUSH
12610: LD_STRING D9-Gri-2
12612: PPUSH
12613: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12617: LD_EXP 40
12621: PPUSH
12622: LD_STRING D9-Kur-2
12624: PPUSH
12625: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12629: LD_EXP 41
12633: PPUSH
12634: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12638: LD_EXP 41
12642: PPUSH
12643: LD_INT 211
12645: PPUSH
12646: LD_INT 104
12648: PPUSH
12649: CALL_OW 171
// AddComHold ( Grishko ) ;
12653: LD_EXP 41
12657: PPUSH
12658: CALL_OW 200
// repeat wait ( 3 ) ;
12662: LD_INT 3
12664: PPUSH
12665: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12669: LD_EXP 41
12673: PPUSH
12674: CALL_OW 310
12678: NOT
12679: IFFALSE 12662
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12681: LD_EXP 38
12685: PPUSH
12686: LD_INT 34
12688: PUSH
12689: LD_INT 26
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 72
12700: PPUSH
12701: LD_EXP 41
12705: PPUSH
12706: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12710: LD_EXP 38
12714: PPUSH
12715: LD_INT 34
12717: PUSH
12718: LD_INT 26
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PPUSH
12725: CALL_OW 72
12729: PPUSH
12730: LD_INT 215
12732: PPUSH
12733: LD_INT 106
12735: PPUSH
12736: CALL_OW 174
// repeat wait ( 3 ) ;
12740: LD_INT 3
12742: PPUSH
12743: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12747: LD_EXP 41
12751: PPUSH
12752: CALL_OW 256
12756: PUSH
12757: LD_INT 1000
12759: LESS
12760: IFFALSE 12740
// NormalAttack ( 5 , Grishko ) ;
12762: LD_INT 5
12764: PPUSH
12765: LD_EXP 41
12769: PPUSH
12770: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12774: LD_INT 6
12776: PPUSH
12777: LD_EXP 38
12781: PPUSH
12782: LD_INT 25
12784: PUSH
12785: LD_INT 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 72
12796: PUSH
12797: LD_INT 4
12799: ARRAY
12800: PPUSH
12801: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12805: LD_EXP 41
12809: PPUSH
12810: LD_STRING D9-Gri-3
12812: PPUSH
12813: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12817: LD_EXP 40
12821: PPUSH
12822: LD_STRING D9-Kur-3
12824: PPUSH
12825: CALL_OW 94
// music_class := music_auto ;
12829: LD_ADDR_OWVAR 72
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// music_nat := music_auto ;
12837: LD_ADDR_OWVAR 71
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// for i in omarSquad do
12845: LD_ADDR_VAR 0 1
12849: PUSH
12850: LD_EXP 38
12854: PUSH
12855: FOR_IN
12856: IFFALSE 12998
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 247
12867: PUSH
12868: LD_INT 2
12870: EQUAL
12871: PUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 256
12881: PUSH
12882: LD_INT 1000
12884: LESS
12885: AND
12886: IFFALSE 12952
// begin driver := IsDrivenBy ( i ) ;
12888: LD_ADDR_VAR 0 2
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 311
12902: ST_TO_ADDR
// veh := i ;
12903: LD_ADDR_VAR 0 3
12907: PUSH
12908: LD_VAR 0 1
12912: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12913: LD_VAR 0 2
12917: PPUSH
12918: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12922: LD_VAR 0 2
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_VAR 0 3
12945: PPUSH
12946: CALL_OW 180
// end else
12950: GO 12996
// if GetLives ( i ) < 500 then
12952: LD_VAR 0 1
12956: PPUSH
12957: CALL_OW 256
12961: PUSH
12962: LD_INT 500
12964: LESS
12965: IFFALSE 12996
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12967: LD_EXP 38
12971: PPUSH
12972: LD_INT 25
12974: PUSH
12975: LD_INT 4
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PPUSH
12982: CALL_OW 72
12986: PPUSH
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 188
// end ; end ;
12996: GO 12855
12998: POP
12999: POP
// repeat wait ( 0 0$1 ) ;
13000: LD_INT 35
13002: PPUSH
13003: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13007: LD_EXP 38
13011: PPUSH
13012: LD_INT 3
13014: PUSH
13015: LD_INT 24
13017: PUSH
13018: LD_INT 1000
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 21
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 72
13047: NOT
13048: PUSH
13049: LD_EXP 38
13053: PPUSH
13054: LD_INT 3
13056: PUSH
13057: LD_INT 24
13059: PUSH
13060: LD_INT 250
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 72
13075: NOT
13076: AND
13077: IFFALSE 13000
// wait ( 0 0$2 ) ;
13079: LD_INT 70
13081: PPUSH
13082: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13086: LD_ADDR_VAR 0 5
13090: PUSH
13091: LD_EXP 38
13095: PPUSH
13096: LD_INT 58
13098: PUSH
13099: EMPTY
13100: LIST
13101: PUSH
13102: LD_INT 21
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PPUSH
13116: CALL_OW 72
13120: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13121: LD_ADDR_VAR 0 6
13125: PUSH
13126: LD_EXP 38
13130: PPUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 3
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 55
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 72
13162: ST_TO_ADDR
// for i := 1 to tmp do
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: DOUBLE
13169: LD_INT 1
13171: DEC
13172: ST_TO_ADDR
13173: LD_VAR 0 5
13177: PUSH
13178: FOR_TO
13179: IFFALSE 13209
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13181: LD_VAR 0 6
13185: PUSH
13186: LD_VAR 0 1
13190: ARRAY
13191: PPUSH
13192: LD_VAR 0 5
13196: PUSH
13197: LD_VAR 0 1
13201: ARRAY
13202: PPUSH
13203: CALL_OW 120
13207: GO 13178
13209: POP
13210: POP
// wait ( 0 0$5 ) ;
13211: LD_INT 175
13213: PPUSH
13214: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13218: LD_EXP 38
13222: PPUSH
13223: LD_INT 199
13225: PPUSH
13226: LD_INT 141
13228: PPUSH
13229: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13233: LD_EXP 33
13237: PPUSH
13238: LD_INT 190
13240: PPUSH
13241: LD_INT 143
13243: PPUSH
13244: CALL_OW 114
// AddComHold ( Omar ) ;
13248: LD_EXP 33
13252: PPUSH
13253: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13257: LD_EXP 38
13261: PPUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 25
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 72
13294: PPUSH
13295: LD_INT 161
13297: PPUSH
13298: LD_INT 130
13300: PPUSH
13301: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13305: LD_EXP 38
13309: PPUSH
13310: LD_INT 25
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 72
13324: PPUSH
13325: LD_INT 163
13327: PPUSH
13328: LD_INT 122
13330: PPUSH
13331: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13335: LD_EXP 38
13339: PPUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 1
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 72
13354: PUSH
13355: LD_INT 4
13357: ARRAY
13358: PPUSH
13359: LD_INT 165
13361: PPUSH
13362: LD_INT 118
13364: PPUSH
13365: LD_INT 0
13367: PPUSH
13368: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13372: LD_EXP 38
13376: PPUSH
13377: LD_INT 25
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 72
13391: PUSH
13392: LD_INT 4
13394: ARRAY
13395: PPUSH
13396: LD_INT 159
13398: PPUSH
13399: LD_INT 116
13401: PPUSH
13402: LD_INT 0
13404: PPUSH
13405: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13409: LD_EXP 38
13413: PPUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PPUSH
13424: CALL_OW 72
13428: PPUSH
13429: LD_INT 169
13431: PPUSH
13432: LD_INT 114
13434: PPUSH
13435: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13439: LD_INT 35
13441: PPUSH
13442: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13446: LD_ADDR_VAR 0 5
13450: PUSH
13451: LD_EXP 38
13455: PPUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PPUSH
13466: CALL_OW 72
13470: ST_TO_ADDR
// for i in tmp do
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_VAR 0 5
13480: PUSH
13481: FOR_IN
13482: IFFALSE 13579
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 256
13493: PUSH
13494: LD_INT 600
13496: LESS
13497: PUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: LD_INT 161
13505: PPUSH
13506: LD_INT 130
13508: PPUSH
13509: CALL_OW 297
13513: PUSH
13514: LD_INT 6
13516: GREATER
13517: AND
13518: IFFALSE 13535
// ComMoveXY ( i , 161 , 130 ) ;
13520: LD_VAR 0 1
13524: PPUSH
13525: LD_INT 161
13527: PPUSH
13528: LD_INT 130
13530: PPUSH
13531: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 256
13544: PUSH
13545: LD_INT 1000
13547: EQUAL
13548: PUSH
13549: LD_VAR 0 1
13553: PPUSH
13554: CALL_OW 314
13558: NOT
13559: AND
13560: IFFALSE 13577
// ComAgressiveMove ( i , 160 , 109 ) ;
13562: LD_VAR 0 1
13566: PPUSH
13567: LD_INT 160
13569: PPUSH
13570: LD_INT 109
13572: PPUSH
13573: CALL_OW 114
// end ;
13577: GO 13481
13579: POP
13580: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13581: LD_ADDR_VAR 0 5
13585: PUSH
13586: LD_EXP 38
13590: PPUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 2
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PPUSH
13601: CALL_OW 72
13605: ST_TO_ADDR
// for i in tmp do
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_VAR 0 5
13615: PUSH
13616: FOR_IN
13617: IFFALSE 13883
// begin tmp2 := IsDrivenBy ( i ) ;
13619: LD_ADDR_VAR 0 6
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: CALL_OW 311
13633: ST_TO_ADDR
// if not tmp2 then
13634: LD_VAR 0 6
13638: NOT
13639: IFFALSE 13643
// continue ;
13641: GO 13616
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 256
13652: PUSH
13653: LD_INT 600
13655: GREATEREQUAL
13656: PUSH
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 110
13666: PUSH
13667: LD_INT 1
13669: EQUAL
13670: AND
13671: IFFALSE 13685
// SetTag ( i , 0 ) ;
13673: LD_VAR 0 1
13677: PPUSH
13678: LD_INT 0
13680: PPUSH
13681: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13685: LD_VAR 0 1
13689: PPUSH
13690: CALL_OW 256
13694: PUSH
13695: LD_INT 600
13697: GREATEREQUAL
13698: PUSH
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 110
13708: NOT
13709: AND
13710: IFFALSE 13736
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13712: LD_VAR 0 1
13716: PPUSH
13717: LD_VAR 0 7
13721: PPUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 74
13731: PPUSH
13732: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 256
13745: PUSH
13746: LD_INT 600
13748: LESS
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 110
13759: NOT
13760: AND
13761: IFFALSE 13790
// begin SetTag ( i , 1 ) ;
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 202
13782: PPUSH
13783: LD_INT 150
13785: PPUSH
13786: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13790: LD_VAR 0 1
13794: PPUSH
13795: CALL_OW 110
13799: PUSH
13800: LD_INT 1
13802: EQUAL
13803: PUSH
13804: LD_VAR 0 1
13808: PPUSH
13809: LD_INT 202
13811: PPUSH
13812: LD_INT 150
13814: PPUSH
13815: CALL_OW 297
13819: PUSH
13820: LD_INT 6
13822: LESS
13823: AND
13824: PUSH
13825: LD_VAR 0 6
13829: AND
13830: IFFALSE 13881
// begin ComExitVehicle ( tmp2 ) ;
13832: LD_VAR 0 6
13836: PPUSH
13837: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13841: LD_VAR 0 6
13845: PPUSH
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13855: LD_VAR 0 6
13859: PPUSH
13860: LD_INT 700
13862: PPUSH
13863: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13867: LD_VAR 0 6
13871: PPUSH
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 180
// end ; end ;
13881: GO 13616
13883: POP
13884: POP
// until kirovDestroyed ;
13885: LD_EXP 16
13889: IFFALSE 13439
// repeat wait ( 0 0$1 ) ;
13891: LD_INT 35
13893: PPUSH
13894: CALL_OW 67
// for i in omarSquad union Omar do
13898: LD_ADDR_VAR 0 1
13902: PUSH
13903: LD_EXP 38
13907: PUSH
13908: LD_EXP 33
13912: UNION
13913: PUSH
13914: FOR_IN
13915: IFFALSE 14085
// if IsInArea ( i , southRoadArea ) then
13917: LD_VAR 0 1
13921: PPUSH
13922: LD_INT 15
13924: PPUSH
13925: CALL_OW 308
13929: IFFALSE 13942
// RemoveUnit ( i ) else
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 64
13940: GO 14083
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 257
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 310
13965: NOT
13966: AND
13967: PUSH
13968: LD_INT 22
13970: PUSH
13971: LD_INT 5
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 24
13980: PUSH
13981: LD_INT 251
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 58
14000: PUSH
14001: EMPTY
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: AND
14015: IFFALSE 14068
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14017: LD_VAR 0 1
14021: PPUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 5
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 21
14034: PUSH
14035: LD_INT 2
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 58
14044: PUSH
14045: EMPTY
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: PPUSH
14062: CALL_OW 120
14066: GO 14083
// ComMoveXY ( i , 208 , 162 ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_INT 208
14075: PPUSH
14076: LD_INT 162
14078: PPUSH
14079: CALL_OW 111
// end ;
14083: GO 13914
14085: POP
14086: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14087: LD_INT 22
14089: PUSH
14090: LD_INT 5
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 21
14099: PUSH
14100: LD_INT 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: NOT
14116: IFFALSE 13891
// end ;
14118: PPOPN 7
14120: END
// every 0 0$1 trigger IsDead ( kirov ) do
14121: LD_INT 71
14123: PPUSH
14124: CALL_OW 301
14128: IFFALSE 14145
14130: GO 14132
14132: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14133: LD_EXP 25
14137: PPUSH
14138: LD_STRING DH-1-Kirov
14140: PPUSH
14141: CALL_OW 88
14145: END
// every 0 0$1 trigger See ( 2 , beria ) do
14146: LD_INT 2
14148: PPUSH
14149: LD_INT 106
14151: PPUSH
14152: CALL_OW 292
14156: IFFALSE 14173
14158: GO 14160
14160: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14161: LD_EXP 25
14165: PPUSH
14166: LD_STRING DH-1-Beria
14168: PPUSH
14169: CALL_OW 88
14173: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14174: LD_INT 2
14176: PPUSH
14177: LD_INT 112
14179: PPUSH
14180: CALL_OW 292
14184: IFFALSE 14429
14186: GO 14188
14188: DISABLE
// begin DialogueOn ;
14189: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14193: LD_INT 112
14195: PPUSH
14196: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14200: LD_EXP 25
14204: PPUSH
14205: LD_STRING DH-1-Kagan
14207: PPUSH
14208: CALL_OW 88
// if Kamil then
14212: LD_EXP 29
14216: IFFALSE 14254
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14218: LD_EXP 29
14222: PPUSH
14223: LD_STRING DKam-Kagan-2
14225: PPUSH
14226: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14230: LD_EXP 26
14234: PPUSH
14235: LD_STRING DG-Kagan-3
14237: PPUSH
14238: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14242: LD_EXP 26
14246: PPUSH
14247: LD_STRING DG-Kagan-4
14249: PPUSH
14250: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14254: LD_STRING KaganBase
14256: PPUSH
14257: CALL_OW 97
14261: PUSH
14262: LD_INT 1
14264: DOUBLE
14265: EQUAL
14266: IFTRUE 14270
14268: GO 14365
14270: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14271: LD_EXP 25
14275: PPUSH
14276: LD_STRING DH-Kagan-5
14278: PPUSH
14279: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14283: LD_EXP 25
14287: PPUSH
14288: LD_STRING DH-Kagan-6
14290: PPUSH
14291: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14295: LD_EXP 36
14299: PPUSH
14300: LD_STRING DShar-Kagan-7
14302: PPUSH
14303: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14307: LD_EXP 25
14311: PPUSH
14312: LD_STRING DH-Kagan-8
14314: PPUSH
14315: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14319: LD_EXP 25
14323: PPUSH
14324: LD_STRING DH-Kagan-9
14326: PPUSH
14327: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14331: LD_EXP 36
14335: PPUSH
14336: LD_STRING DShar-Kagan-10
14338: PPUSH
14339: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14343: LD_EXP 25
14347: PPUSH
14348: LD_STRING DH-Kagan-11
14350: PPUSH
14351: CALL_OW 88
// kaganCaptured := true ;
14355: LD_ADDR_EXP 24
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// end ; 2 :
14363: GO 14425
14365: LD_INT 2
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14424
14373: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
14374: LD_EXP 25
14378: PPUSH
14379: LD_STRING DH-Kagan-a-5
14381: PPUSH
14382: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14386: LD_EXP 25
14390: PPUSH
14391: LD_STRING DH-Kagan-a-6
14393: PPUSH
14394: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14398: LD_EXP 25
14402: PPUSH
14403: LD_STRING DH-Kagan-a-7
14405: PPUSH
14406: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14410: LD_EXP 26
14414: PPUSH
14415: LD_STRING DG-Kagan-a-8
14417: PPUSH
14418: CALL_OW 88
// end ; end ;
14422: GO 14425
14424: POP
// DialogueOff ;
14425: CALL_OW 7
// end ;
14429: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14430: LD_EXP 18
14434: PUSH
14435: LD_INT 112
14437: PPUSH
14438: CALL_OW 255
14442: PUSH
14443: LD_INT 2
14445: EQUAL
14446: OR
14447: IFFALSE 14459
14449: GO 14451
14451: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14452: LD_STRING KaganDone
14454: PPUSH
14455: CALL_OW 337
14459: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14460: LD_EXP 6
14464: PUSH
14465: LD_EXP 48
14469: PPUSH
14470: LD_INT 95
14472: PUSH
14473: LD_INT 19
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 72
14484: AND
14485: IFFALSE 14562
14487: GO 14489
14489: DISABLE
// begin DialogueOn ;
14490: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14494: LD_INT 63
14496: PPUSH
14497: LD_INT 32
14499: PPUSH
14500: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14504: LD_INT 63
14506: PPUSH
14507: LD_INT 32
14509: PPUSH
14510: LD_INT 2
14512: PPUSH
14513: LD_INT 12
14515: NEG
14516: PPUSH
14517: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14521: LD_EXP 25
14525: PPUSH
14526: LD_STRING DH-Omicron-1
14528: PPUSH
14529: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14533: LD_EXP 27
14537: PPUSH
14538: LD_STRING DM-Omicron-2
14540: PPUSH
14541: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14545: LD_INT 63
14547: PPUSH
14548: LD_INT 32
14550: PPUSH
14551: LD_INT 2
14553: PPUSH
14554: CALL_OW 331
// DialogueOff ;
14558: CALL_OW 7
// end ;
14562: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14563: LD_INT 2
14565: PPUSH
14566: LD_EXP 50
14570: PPUSH
14571: CALL_OW 292
14575: PUSH
14576: LD_EXP 50
14580: PPUSH
14581: CALL_OW 255
14585: PUSH
14586: LD_INT 2
14588: EQUAL
14589: OR
14590: PUSH
14591: LD_INT 106
14593: PPUSH
14594: CALL_OW 255
14598: PUSH
14599: LD_INT 2
14601: EQUAL
14602: OR
14603: PUSH
14604: LD_EXP 50
14608: PPUSH
14609: CALL_OW 302
14613: AND
14614: PUSH
14615: LD_EXP 25
14619: PPUSH
14620: CALL_OW 302
14624: AND
14625: PUSH
14626: LD_EXP 35
14630: PPUSH
14631: CALL_OW 302
14635: AND
14636: IFFALSE 15250
14638: GO 14640
14640: DISABLE
14641: LD_INT 0
14643: PPUSH
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
// begin DialogueOn ;
14648: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14652: LD_INT 111
14654: PPUSH
14655: LD_INT 90
14657: PPUSH
14658: LD_INT 2
14660: PPUSH
14661: LD_INT 6
14663: NEG
14664: PPUSH
14665: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14669: LD_INT 111
14671: PPUSH
14672: LD_INT 90
14674: PPUSH
14675: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14679: LD_EXP 35
14683: PPUSH
14684: LD_STRING DA-Cap-1
14686: PPUSH
14687: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14691: LD_EXP 25
14695: PPUSH
14696: LD_STRING DH-Cap-2
14698: PPUSH
14699: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14703: LD_INT 111
14705: PPUSH
14706: LD_INT 90
14708: PPUSH
14709: LD_INT 2
14711: PPUSH
14712: CALL_OW 331
// DialogueOff ;
14716: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14720: LD_INT 35
14722: PPUSH
14723: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) ;
14727: LD_EXP 17
14731: PUSH
14732: LD_INT 106
14734: PPUSH
14735: CALL_OW 255
14739: PUSH
14740: LD_INT 2
14742: EQUAL
14743: OR
14744: PUSH
14745: LD_EXP 50
14749: PPUSH
14750: CALL_OW 255
14754: PUSH
14755: LD_INT 2
14757: EQUAL
14758: OR
14759: PUSH
14760: LD_EXP 50
14764: PPUSH
14765: CALL_OW 302
14769: AND
14770: PUSH
14771: LD_EXP 35
14775: PPUSH
14776: CALL_OW 302
14780: AND
14781: PUSH
14782: LD_INT 2
14784: PPUSH
14785: CALL_OW 463
14789: NOT
14790: AND
14791: IFFALSE 14720
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_EXP 37
14802: PUSH
14803: LD_EXP 28
14807: PUSH
14808: LD_EXP 29
14812: PUSH
14813: LD_EXP 31
14817: PUSH
14818: LD_EXP 30
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: UNION
14829: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: LD_INT 50
14842: PUSH
14843: EMPTY
14844: LIST
14845: PPUSH
14846: CALL_OW 72
14850: ST_TO_ADDR
// if tmp < 2 then
14851: LD_VAR 0 2
14855: PUSH
14856: LD_INT 2
14858: LESS
14859: IFFALSE 14871
// q := 2 else
14861: LD_ADDR_VAR 0 4
14865: PUSH
14866: LD_INT 2
14868: ST_TO_ADDR
14869: GO 14884
// q := Query ( LabCap ) ;
14871: LD_ADDR_VAR 0 4
14875: PUSH
14876: LD_STRING LabCap
14878: PPUSH
14879: CALL_OW 97
14883: ST_TO_ADDR
// case q of 1 :
14884: LD_VAR 0 4
14888: PUSH
14889: LD_INT 1
14891: DOUBLE
14892: EQUAL
14893: IFTRUE 14897
14895: GO 15214
14897: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14898: LD_INT 2
14900: PPUSH
14901: LD_EXP 50
14905: PPUSH
14906: CALL_OW 471
// labCaptured := true ;
14910: LD_ADDR_EXP 21
14914: PUSH
14915: LD_INT 1
14917: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14918: LD_EXP 25
14922: PPUSH
14923: LD_STRING DH-Cap-a-1
14925: PPUSH
14926: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14930: LD_EXP 35
14934: PPUSH
14935: LD_STRING DA-Cap-a-2
14937: PPUSH
14938: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14942: LD_ADDR_VAR 0 5
14946: PUSH
14947: LD_EXP 25
14951: PUSH
14952: LD_INT -3
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_VAR 0 2
14963: ADD
14964: PUSH
14965: LD_INT -2
14967: PUSH
14968: LD_INT -4
14970: PUSH
14971: LD_EXP 35
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: ADD
14981: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_STRING Select two characters to go with Aviradze
14989: PPUSH
14990: LD_INT 2
14992: PPUSH
14993: LD_INT 2
14995: PPUSH
14996: LD_VAR 0 5
15000: PPUSH
15001: EMPTY
15002: PPUSH
15003: CALL_OW 42
15007: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15008: LD_EXP 50
15012: PPUSH
15013: LD_INT 8
15015: PPUSH
15016: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15020: LD_EXP 35
15024: PPUSH
15025: LD_INT 8
15027: PPUSH
15028: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15032: LD_ADDR_EXP 39
15036: PUSH
15037: LD_EXP 35
15041: PUSH
15042: EMPTY
15043: LIST
15044: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15045: LD_EXP 35
15049: PPUSH
15050: CALL_OW 310
15054: IFFALSE 15065
// ComExit ( Aviradze ) ;
15056: LD_EXP 35
15060: PPUSH
15061: CALL 867 0 1
// wait ( 3 ) ;
15065: LD_INT 3
15067: PPUSH
15068: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15072: LD_EXP 35
15076: PPUSH
15077: LD_EXP 50
15081: PPUSH
15082: CALL_OW 120
// for i := 1 to 2 do
15086: LD_ADDR_VAR 0 1
15090: PUSH
15091: DOUBLE
15092: LD_INT 1
15094: DEC
15095: ST_TO_ADDR
15096: LD_INT 2
15098: PUSH
15099: FOR_TO
15100: IFFALSE 15203
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15102: LD_ADDR_EXP 39
15106: PUSH
15107: LD_EXP 39
15111: PUSH
15112: LD_VAR 0 3
15116: PUSH
15117: LD_VAR 0 1
15121: ARRAY
15122: UNION
15123: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15124: LD_VAR 0 3
15128: PUSH
15129: LD_VAR 0 1
15133: ARRAY
15134: PPUSH
15135: LD_INT 8
15137: PPUSH
15138: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15142: LD_VAR 0 3
15146: PUSH
15147: LD_VAR 0 1
15151: ARRAY
15152: PPUSH
15153: CALL_OW 310
15157: IFFALSE 15174
// ComExit ( tmp2 [ i ] ) ;
15159: LD_VAR 0 3
15163: PUSH
15164: LD_VAR 0 1
15168: ARRAY
15169: PPUSH
15170: CALL 867 0 1
// wait ( 3 ) ;
15174: LD_INT 3
15176: PPUSH
15177: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15181: LD_VAR 0 3
15185: PUSH
15186: LD_VAR 0 1
15190: ARRAY
15191: PPUSH
15192: LD_EXP 50
15196: PPUSH
15197: CALL_OW 120
// end ;
15201: GO 15099
15203: POP
15204: POP
// SetAchievement ( ACH_LAB ) ;
15205: LD_STRING ACH_LAB
15207: PPUSH
15208: CALL_OW 543
// end ; 2 :
15212: GO 15250
15214: LD_INT 2
15216: DOUBLE
15217: EQUAL
15218: IFTRUE 15222
15220: GO 15249
15222: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15223: LD_EXP 25
15227: PPUSH
15228: LD_STRING DH-Cap-b-1
15230: PPUSH
15231: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15235: LD_EXP 35
15239: PPUSH
15240: LD_STRING DA-Cap-b-2
15242: PPUSH
15243: CALL_OW 88
// end ; end ;
15247: GO 15250
15249: POP
// end ;
15250: PPOPN 5
15252: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15253: LD_INT 10
15255: PPUSH
15256: LD_INT 22
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 30
15268: PUSH
15269: LD_INT 31
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 70
15284: PUSH
15285: LD_INT 2
15287: GREATEREQUAL
15288: IFFALSE 15300
15290: GO 15292
15292: DISABLE
// SetAchievement ( ACH_KING ) ;
15293: LD_STRING ACH_KING
15295: PPUSH
15296: CALL_OW 543
15300: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15301: LD_EXP 11
15305: NOT
15306: PUSH
15307: LD_INT 10
15309: PPUSH
15310: LD_INT 22
15312: PUSH
15313: LD_INT 2
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 2
15322: PUSH
15323: LD_INT 30
15325: PUSH
15326: LD_INT 31
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 30
15335: PUSH
15336: LD_INT 4
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 70
15356: AND
15357: IFFALSE 15377
15359: GO 15361
15361: DISABLE
// begin hillBase := true ;
15362: LD_ADDR_EXP 15
15366: PUSH
15367: LD_INT 1
15369: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15370: LD_STRING HillDone
15372: PPUSH
15373: CALL_OW 337
// end ;
15377: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15378: LD_EXP 30
15382: PUSH
15383: LD_EXP 30
15387: PPUSH
15388: CALL_OW 256
15392: PUSH
15393: LD_INT 3
15395: LESS
15396: AND
15397: IFFALSE 15443
15399: GO 15401
15401: DISABLE
// begin DialogueOn ;
15402: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15406: LD_EXP 30
15410: PPUSH
15411: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15415: LD_EXP 30
15419: PPUSH
15420: LD_STRING DK-Kkilled-1
15422: PPUSH
15423: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15427: LD_EXP 25
15431: PPUSH
15432: LD_STRING DH-Kkilled-2
15434: PPUSH
15435: CALL_OW 88
// DialogueOff ;
15439: CALL_OW 7
// end ;
15443: END
// every 0 0$1 trigger kaiaKilledByRussian do
15444: LD_EXP 23
15448: IFFALSE 15465
15450: GO 15452
15452: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15453: LD_EXP 25
15457: PPUSH
15458: LD_STRING DH-Kkilled-3
15460: PPUSH
15461: CALL_OW 88
15465: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15466: LD_EXP 16
15470: PUSH
15471: LD_INT 106
15473: PPUSH
15474: CALL_OW 255
15478: PUSH
15479: LD_INT 2
15481: EQUAL
15482: PUSH
15483: LD_EXP 17
15487: OR
15488: AND
15489: PUSH
15490: LD_EXP 18
15494: PUSH
15495: LD_EXP 24
15499: PUSH
15500: LD_INT 112
15502: PPUSH
15503: CALL_OW 255
15507: PUSH
15508: LD_INT 2
15510: EQUAL
15511: AND
15512: OR
15513: AND
15514: IFFALSE 16696
15516: GO 15518
15518: DISABLE
15519: LD_INT 0
15521: PPUSH
15522: PPUSH
15523: PPUSH
15524: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15525: LD_STRING GoToWest
15527: PPUSH
15528: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15532: LD_INT 17
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15542: LD_INT 35
15544: PPUSH
15545: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: LD_INT 17
15556: PPUSH
15557: LD_INT 22
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: LD_INT 58
15595: PUSH
15596: EMPTY
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 70
15620: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15621: LD_ADDR_VAR 0 3
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: LD_INT 55
15641: PUSH
15642: EMPTY
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 2
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 3
15674: PUSH
15675: LD_INT 58
15677: PUSH
15678: EMPTY
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 69
15703: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15704: LD_VAR 0 2
15708: PUSH
15709: LD_INT 0
15711: PLUS
15712: PUSH
15713: LD_VAR 0 3
15717: PUSH
15718: LD_INT 0
15720: PLUS
15721: EQUAL
15722: IFFALSE 15542
// SaveCharacters ( Heike , 04_1_Heike ) ;
15724: LD_EXP 25
15728: PPUSH
15729: LD_STRING 04_1_Heike
15731: PPUSH
15732: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15736: LD_EXP 35
15740: PUSH
15741: LD_EXP 35
15745: PUSH
15746: LD_EXP 39
15750: IN
15751: NOT
15752: AND
15753: IFFALSE 15769
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15755: LD_EXP 35
15759: PPUSH
15760: LD_STRING 04_1_Aviradze
15762: PPUSH
15763: CALL_OW 38
15767: GO 15787
// if Aviradze then
15769: LD_EXP 35
15773: IFFALSE 15787
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15775: LD_EXP 35
15779: PPUSH
15780: LD_STRING 04_1_Aviradze_L
15782: PPUSH
15783: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15787: LD_EXP 28
15791: PUSH
15792: LD_EXP 28
15796: PUSH
15797: LD_EXP 39
15801: IN
15802: NOT
15803: AND
15804: IFFALSE 15820
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15806: LD_EXP 28
15810: PPUSH
15811: LD_STRING 04_1_Ibrahim
15813: PPUSH
15814: CALL_OW 38
15818: GO 15838
// if Ibrahim then
15820: LD_EXP 28
15824: IFFALSE 15838
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15826: LD_EXP 28
15830: PPUSH
15831: LD_STRING 04_1_Ibrahim_L
15833: PPUSH
15834: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15838: LD_EXP 29
15842: PUSH
15843: LD_EXP 29
15847: PUSH
15848: LD_EXP 39
15852: IN
15853: NOT
15854: AND
15855: IFFALSE 15871
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15857: LD_EXP 29
15861: PPUSH
15862: LD_STRING 04_1_Kamil
15864: PPUSH
15865: CALL_OW 38
15869: GO 15889
// if Kamil then
15871: LD_EXP 29
15875: IFFALSE 15889
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15877: LD_EXP 29
15881: PPUSH
15882: LD_STRING 04_1_Kamil_L
15884: PPUSH
15885: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15889: LD_EXP 31
15893: PUSH
15894: LD_EXP 31
15898: PUSH
15899: LD_EXP 39
15903: IN
15904: NOT
15905: AND
15906: IFFALSE 15922
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15908: LD_EXP 31
15912: PPUSH
15913: LD_STRING 04_1_Sophia
15915: PPUSH
15916: CALL_OW 38
15920: GO 15940
// if Sophia then
15922: LD_EXP 31
15926: IFFALSE 15940
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15928: LD_EXP 31
15932: PPUSH
15933: LD_STRING 04_1_Sophia_L
15935: PPUSH
15936: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15940: LD_EXP 30
15944: PUSH
15945: LD_EXP 30
15949: PUSH
15950: LD_EXP 39
15954: IN
15955: NOT
15956: AND
15957: IFFALSE 15973
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15959: LD_EXP 30
15963: PPUSH
15964: LD_STRING 04_1_Kaia
15966: PPUSH
15967: CALL_OW 38
15971: GO 15991
// if Kaia then
15973: LD_EXP 30
15977: IFFALSE 15991
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15979: LD_EXP 30
15983: PPUSH
15984: LD_STRING 04_1_Kaia_L
15986: PPUSH
15987: CALL_OW 38
// if Givi then
15991: LD_EXP 26
15995: IFFALSE 16009
// SaveCharacters ( Givi , 04_1_Givi ) ;
15997: LD_EXP 26
16001: PPUSH
16002: LD_STRING 04_1_Givi
16004: PPUSH
16005: CALL_OW 38
// if Mike then
16009: LD_EXP 27
16013: IFFALSE 16027
// SaveCharacters ( Mike , 04_1_Mike ) ;
16015: LD_EXP 27
16019: PPUSH
16020: LD_STRING 04_1_Mike
16022: PPUSH
16023: CALL_OW 38
// if Markov then
16027: LD_EXP 32
16031: IFFALSE 16045
// SaveCharacters ( Markov , 04_1_Markov ) ;
16033: LD_EXP 32
16037: PPUSH
16038: LD_STRING 04_1_Markov
16040: PPUSH
16041: CALL_OW 38
// if Kurt then
16045: LD_EXP 34
16049: IFFALSE 16063
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
16051: LD_EXP 34
16055: PPUSH
16056: LD_STRING 04_1_Kurt
16058: PPUSH
16059: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
16063: LD_EXP 37
16067: PUSH
16068: LD_EXP 39
16072: DIFF
16073: IFFALSE 16093
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16075: LD_EXP 37
16079: PUSH
16080: LD_EXP 39
16084: DIFF
16085: PPUSH
16086: LD_STRING 04_1_others
16088: PPUSH
16089: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16093: LD_EXP 39
16097: PUSH
16098: LD_EXP 37
16102: AND
16103: IFFALSE 16188
// begin tmp := [ ] ;
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: EMPTY
16111: ST_TO_ADDR
// for i in heikeSecondSquad do
16112: LD_ADDR_VAR 0 1
16116: PUSH
16117: LD_EXP 37
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16168
// if i in aviradzeSquad then
16125: LD_VAR 0 1
16129: PUSH
16130: LD_EXP 39
16134: IN
16135: IFFALSE 16166
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16137: LD_ADDR_VAR 0 2
16141: PUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: LD_VAR 0 2
16151: PUSH
16152: LD_INT 1
16154: PLUS
16155: PPUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 1
16165: ST_TO_ADDR
16166: GO 16122
16168: POP
16169: POP
// if tmp then
16170: LD_VAR 0 2
16174: IFFALSE 16188
// SaveCharacters ( tmp , 04_1_others_L ) ;
16176: LD_VAR 0 2
16180: PPUSH
16181: LD_STRING 04_1_others_L
16183: PPUSH
16184: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16188: LD_ADDR_VAR 0 2
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: ST_TO_ADDR
// if tmp then
16222: LD_VAR 0 2
16226: IFFALSE 16240
// SaveCharacters ( tmp , 04_1_apes ) ;
16228: LD_VAR 0 2
16232: PPUSH
16233: LD_STRING 04_1_apes
16235: PPUSH
16236: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16240: LD_ADDR_VAR 0 2
16244: PUSH
16245: LD_INT 17
16247: PPUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PPUSH
16258: CALL_OW 70
16262: ST_TO_ADDR
// if tmp then
16263: LD_VAR 0 2
16267: IFFALSE 16561
// begin tmp2 := [ ] ;
16269: LD_ADDR_VAR 0 3
16273: PUSH
16274: EMPTY
16275: ST_TO_ADDR
// for i in tmp do
16276: LD_ADDR_VAR 0 1
16280: PUSH
16281: LD_VAR 0 2
16285: PUSH
16286: FOR_IN
16287: IFFALSE 16547
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16289: LD_VAR 0 1
16293: PPUSH
16294: CALL_OW 264
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: LD_INT 12
16304: PUSH
16305: LD_INT 51
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: IN
16313: IFFALSE 16450
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16315: LD_ADDR_VAR 0 4
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_INT 1
16327: PPUSH
16328: CALL_OW 289
16332: PUSH
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 2
16340: PPUSH
16341: CALL_OW 289
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16350: LD_ADDR_VAR 0 3
16354: PUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_VAR 0 3
16364: PUSH
16365: LD_INT 1
16367: PLUS
16368: PPUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 265
16378: PUSH
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 262
16388: PUSH
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 263
16398: PUSH
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 264
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 248
16418: PUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 256
16428: PUSH
16429: LD_VAR 0 4
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: PPUSH
16443: CALL_OW 1
16447: ST_TO_ADDR
// end else
16448: GO 16545
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_VAR 0 3
16459: PPUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 1
16467: PLUS
16468: PPUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 265
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 262
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 263
16498: PUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 264
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 248
16518: PUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 256
16528: PUSH
16529: EMPTY
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 1
16544: ST_TO_ADDR
16545: GO 16286
16547: POP
16548: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_STRING 04_1_Vehicles
16556: PPUSH
16557: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16561: LD_EXP 21
16565: PPUSH
16566: LD_STRING 04_1_RuLabCaptured
16568: PPUSH
16569: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16573: LD_EXP 19
16577: PPUSH
16578: LD_STRING 04_1_EscapeCounter
16580: PPUSH
16581: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16585: LD_EXP 15
16589: PPUSH
16590: LD_STRING 04_1_BaseHill
16592: PPUSH
16593: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16597: LD_OWVAR 1
16601: PPUSH
16602: LD_STRING 04_1_Time
16604: PPUSH
16605: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16609: LD_EXP 14
16613: PPUSH
16614: LD_STRING 04_1_DeadCounter
16616: PPUSH
16617: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16621: LD_EXP 24
16625: PUSH
16626: LD_INT 112
16628: PPUSH
16629: CALL_OW 255
16633: MUL
16634: PUSH
16635: LD_INT 2
16637: EQUAL
16638: PPUSH
16639: LD_STRING 04_1_KaganCaptured
16641: PPUSH
16642: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16646: LD_INT 22
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 34
16658: PUSH
16659: LD_INT 26
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PPUSH
16670: CALL_OW 69
16674: PUSH
16675: LD_INT 0
16677: PLUS
16678: PPUSH
16679: LD_STRING 04_1_Flamethrower
16681: PPUSH
16682: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16686: LD_INT 1
16688: PPUSH
16689: LD_STRING __x1\04_cont2
16691: PPUSH
16692: CALL_OW 340
// end ; end_of_file
16696: PPOPN 4
16698: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 0
16711: EQUAL
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 255
16722: PUSH
16723: LD_INT 2
16725: EQUAL
16726: AND
16727: IFFALSE 16737
// baseConstructed := true ;
16729: LD_ADDR_EXP 3
16733: PUSH
16734: LD_INT 1
16736: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 266
16746: PUSH
16747: LD_INT 6
16749: EQUAL
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 255
16760: PUSH
16761: LD_INT 2
16763: EQUAL
16764: AND
16765: IFFALSE 16775
// labConstructed := true ;
16767: LD_ADDR_EXP 4
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// end ;
16775: PPOPN 1
16777: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16778: LD_VAR 0 1
16782: PUSH
16783: LD_EXP 25
16787: EQUAL
16788: IFFALSE 16797
// YouLost ( Heike ) ;
16790: LD_STRING Heike
16792: PPUSH
16793: CALL_OW 104
// if un = Omar then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_EXP 33
16806: EQUAL
16807: IFFALSE 16816
// YouLost ( Omar ) ;
16809: LD_STRING Omar
16811: PPUSH
16812: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16816: LD_VAR 0 1
16820: PUSH
16821: LD_INT 22
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 23
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 21
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PPUSH
16856: CALL_OW 69
16860: IN
16861: IFFALSE 16877
// loseCounter := loseCounter + 1 ;
16863: LD_ADDR_EXP 14
16867: PUSH
16868: LD_EXP 14
16872: PUSH
16873: LD_INT 1
16875: PLUS
16876: ST_TO_ADDR
// if un = omikron then
16877: LD_VAR 0 1
16881: PUSH
16882: LD_INT 64
16884: EQUAL
16885: IFFALSE 16895
// omicronFall := true ;
16887: LD_ADDR_EXP 13
16891: PUSH
16892: LD_INT 1
16894: ST_TO_ADDR
// if un = kirov then
16895: LD_VAR 0 1
16899: PUSH
16900: LD_INT 71
16902: EQUAL
16903: IFFALSE 16920
// begin ChangeMissionObjectives ( KirovDone ) ;
16905: LD_STRING KirovDone
16907: PPUSH
16908: CALL_OW 337
// kirovDestroyed := true ;
16912: LD_ADDR_EXP 16
16916: PUSH
16917: LD_INT 1
16919: ST_TO_ADDR
// end ; if un = beria then
16920: LD_VAR 0 1
16924: PUSH
16925: LD_INT 106
16927: EQUAL
16928: IFFALSE 16945
// begin ChangeMissionObjectives ( BeriaDone ) ;
16930: LD_STRING BeriaDone
16932: PPUSH
16933: CALL_OW 337
// beriaDestroyed := true ;
16937: LD_ADDR_EXP 17
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// end ; if un = kagan then
16945: LD_VAR 0 1
16949: PUSH
16950: LD_INT 112
16952: EQUAL
16953: IFFALSE 16963
// kaganDestroyed := true ;
16955: LD_ADDR_EXP 18
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// if un in russianPatrol then
16963: LD_VAR 0 1
16967: PUSH
16968: LD_EXP 47
16972: IN
16973: IFFALSE 16991
// russianPatrol := russianPatrol diff un ;
16975: LD_ADDR_EXP 47
16979: PUSH
16980: LD_EXP 47
16984: PUSH
16985: LD_VAR 0 1
16989: DIFF
16990: ST_TO_ADDR
// if un in russianOmicronAttackers then
16991: LD_VAR 0 1
16995: PUSH
16996: LD_EXP 48
17000: IN
17001: IFFALSE 17019
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17003: LD_ADDR_EXP 48
17007: PUSH
17008: LD_EXP 48
17012: PUSH
17013: LD_VAR 0 1
17017: DIFF
17018: ST_TO_ADDR
// end ;
17019: PPOPN 1
17021: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17022: LD_INT 0
17024: PPUSH
17025: PPUSH
17026: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17027: LD_VAR 0 1
17031: PUSH
17032: LD_INT 2
17034: PUSH
17035: LD_INT 22
17037: PUSH
17038: LD_INT 3
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 22
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_INT 6
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 30
17073: PUSH
17074: LD_INT 32
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: IN
17090: IFFALSE 17263
// begin sol := UnitsInside ( un ) ;
17092: LD_ADDR_VAR 0 3
17096: PUSH
17097: LD_VAR 0 1
17101: PPUSH
17102: CALL_OW 313
17106: ST_TO_ADDR
// if not sol then
17107: LD_VAR 0 3
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17263
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17116: LD_ADDR_VAR 0 4
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 255
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 2
17140: PUSH
17141: LD_INT 30
17143: PUSH
17144: LD_INT 4
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: LD_INT 5
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: LIST
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PPUSH
17170: CALL_OW 69
17174: ST_TO_ADDR
// if not nearestBarracks then
17175: LD_VAR 0 4
17179: NOT
17180: IFFALSE 17184
// exit ;
17182: GO 17263
// for i in nearestBarracks do
17184: LD_ADDR_VAR 0 2
17188: PUSH
17189: LD_VAR 0 4
17193: PUSH
17194: FOR_IN
17195: IFFALSE 17230
// if UnitsInside ( i ) = 6 then
17197: LD_VAR 0 2
17201: PPUSH
17202: CALL_OW 313
17206: PUSH
17207: LD_INT 6
17209: EQUAL
17210: IFFALSE 17228
// nearestBarracks := nearestBarracks diff i ;
17212: LD_ADDR_VAR 0 4
17216: PUSH
17217: LD_VAR 0 4
17221: PUSH
17222: LD_VAR 0 2
17226: DIFF
17227: ST_TO_ADDR
17228: GO 17194
17230: POP
17231: POP
// if not nearestBarracks then
17232: LD_VAR 0 4
17236: NOT
17237: IFFALSE 17241
// exit ;
17239: GO 17263
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 1
17248: ARRAY
17249: PPUSH
17250: LD_VAR 0 4
17254: PUSH
17255: LD_INT 1
17257: ARRAY
17258: PPUSH
17259: CALL_OW 120
// end ; end ;
17263: PPOPN 4
17265: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17266: LD_INT 0
17268: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17269: LD_EXP 8
17273: NOT
17274: PUSH
17275: LD_EXP 5
17279: NOT
17280: OR
17281: IFFALSE 17285
// exit ;
17283: GO 17353
// for i in camAreas do
17285: LD_ADDR_VAR 0 5
17289: PUSH
17290: LD_EXP 8
17294: PUSH
17295: FOR_IN
17296: IFFALSE 17351
// if InArea ( x , y , i ) then
17298: LD_VAR 0 3
17302: PPUSH
17303: LD_VAR 0 4
17307: PPUSH
17308: LD_VAR 0 5
17312: PPUSH
17313: CALL_OW 309
17317: IFFALSE 17349
// begin SetAreaMapShow ( i , 0 ) ;
17319: LD_VAR 0 5
17323: PPUSH
17324: LD_INT 0
17326: PPUSH
17327: CALL_OW 424
// camAreas := camAreas diff i ;
17331: LD_ADDR_EXP 8
17335: PUSH
17336: LD_EXP 8
17340: PUSH
17341: LD_VAR 0 5
17345: DIFF
17346: ST_TO_ADDR
// break ;
17347: GO 17351
// end ;
17349: GO 17295
17351: POP
17352: POP
// end ;
17353: PPOPN 5
17355: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17356: LD_VAR 0 1
17360: PUSH
17361: LD_INT 2
17363: EQUAL
17364: PUSH
17365: LD_VAR 0 2
17369: PUSH
17370: LD_INT 5
17372: PUSH
17373: LD_INT 8
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: IN
17380: AND
17381: IFFALSE 17390
// YouLost ( Ally ) ;
17383: LD_STRING Ally
17385: PPUSH
17386: CALL_OW 104
// end ;
17390: PPOPN 2
17392: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17393: LD_VAR 0 1
17397: PUSH
17398: LD_EXP 30
17402: EQUAL
17403: PUSH
17404: LD_VAR 0 2
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 6
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: IN
17419: AND
17420: IFFALSE 17451
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17422: LD_ADDR_EXP 23
17426: PUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 250
17436: PUSH
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 251
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: ST_TO_ADDR
// end ; end_of_file
17451: PPOPN 3
17453: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
17454: LD_EXP 11
17458: NOT
17459: PUSH
17460: LD_INT 12
17462: PPUSH
17463: LD_INT 1
17465: PPUSH
17466: CALL_OW 287
17470: PUSH
17471: LD_INT 20
17473: PUSH
17474: LD_INT 16
17476: PUSH
17477: LD_INT 12
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: PUSH
17485: LD_OWVAR 67
17489: ARRAY
17490: LESS
17491: AND
17492: IFFALSE 17519
17494: GO 17496
17496: DISABLE
// begin enable ;
17497: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17498: LD_INT 1
17500: PPUSH
17501: LD_INT 5
17503: PPUSH
17504: CALL_OW 12
17508: PPUSH
17509: LD_INT 12
17511: PPUSH
17512: LD_INT 1
17514: PPUSH
17515: CALL_OW 55
// end ; end_of_file
17519: END
// every 0 0$1 trigger omarCountdown do
17520: LD_EXP 22
17524: IFFALSE 17576
17526: GO 17528
17528: DISABLE
// begin enable ;
17529: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17530: LD_ADDR_OWVAR 47
17534: PUSH
17535: LD_STRING #X104-1
17537: PUSH
17538: LD_EXP 22
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17547: LD_ADDR_EXP 22
17551: PUSH
17552: LD_EXP 22
17556: PUSH
17557: LD_INT 35
17559: MINUS
17560: ST_TO_ADDR
// if not omarCountdown then
17561: LD_EXP 22
17565: NOT
17566: IFFALSE 17576
// display_strings :=  ;
17568: LD_ADDR_OWVAR 47
17572: PUSH
17573: LD_STRING 
17575: ST_TO_ADDR
// end ;
17576: END
