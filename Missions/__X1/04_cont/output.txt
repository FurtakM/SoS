// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37633 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37633 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37633 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37633 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37633 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37633 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37633 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37633 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37633 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37633 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37633 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37633 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37633 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37633 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37633 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37633 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75480 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9371: LD_EXP 3
9375: IFFALSE 10783
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
// begin DialogueOn ;
9385: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9389: LD_EXP 25
9393: PPUSH
9394: LD_STRING DH-base-1
9396: PPUSH
9397: CALL_OW 88
// if Markov then
9401: LD_EXP 32
9405: IFFALSE 9457
// begin Say ( Markov , DMar-base-2 ) ;
9407: LD_EXP 32
9411: PPUSH
9412: LD_STRING DMar-base-2
9414: PPUSH
9415: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9419: LD_EXP 32
9423: PPUSH
9424: LD_STRING DMar-base-3
9426: PPUSH
9427: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING DH-base-4
9438: PPUSH
9439: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9443: LD_EXP 32
9447: PPUSH
9448: LD_STRING DMar-base-5
9450: PPUSH
9451: CALL_OW 88
// end else
9455: GO 9534
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9457: LD_EXP 37
9461: PPUSH
9462: LD_INT 26
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 72
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PPUSH
9481: LD_STRING DArm-base-a-2
9483: PPUSH
9484: CALL_OW 88
9488: NOT
9489: IFFALSE 9522
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9491: LD_EXP 37
9495: PPUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 72
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_STRING DArf-base-a-2
9517: PPUSH
9518: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9522: LD_EXP 25
9526: PPUSH
9527: LD_STRING DH-base-a-3
9529: PPUSH
9530: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9534: LD_EXP 35
9538: PPUSH
9539: LD_STRING DA-base-6
9541: PPUSH
9542: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9546: LD_EXP 35
9550: PPUSH
9551: LD_STRING DA-base-7
9553: PPUSH
9554: CALL_OW 88
// DialogueOff ;
9558: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9562: LD_STRING Flamethrower
9564: PPUSH
9565: CALL_OW 337
// wait ( 2 2$00 ) ;
9569: LD_INT 4200
9571: PPUSH
9572: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9576: LD_EXP 34
9580: PUSH
9581: LD_EXP 27
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: LD_INT 203
9592: PPUSH
9593: LD_INT 37
9595: PPUSH
9596: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 92
9612: PUSH
9613: LD_INT 203
9615: PUSH
9616: LD_INT 37
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: NOT
9637: IFFALSE 9677
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9639: LD_EXP 34
9643: PUSH
9644: LD_EXP 27
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: LD_EXP 25
9657: PPUSH
9658: CALL_OW 250
9662: PPUSH
9663: LD_EXP 25
9667: PPUSH
9668: CALL_OW 251
9672: PPUSH
9673: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9677: LD_INT 35
9679: PPUSH
9680: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9684: LD_INT 2
9686: PPUSH
9687: LD_EXP 34
9691: PPUSH
9692: CALL_OW 292
9696: PUSH
9697: LD_EXP 34
9701: PPUSH
9702: LD_EXP 25
9706: PPUSH
9707: CALL_OW 296
9711: PUSH
9712: LD_INT 8
9714: LESS
9715: PUSH
9716: LD_EXP 34
9720: PPUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 3
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PPUSH
9750: LD_EXP 34
9754: PPUSH
9755: CALL_OW 74
9759: PPUSH
9760: CALL_OW 296
9764: PUSH
9765: LD_INT 7
9767: LESS
9768: OR
9769: AND
9770: PUSH
9771: LD_EXP 34
9775: PPUSH
9776: LD_INT 10
9778: PPUSH
9779: CALL_OW 308
9783: NOT
9784: AND
9785: IFFALSE 9677
// InGameOn ;
9787: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9791: LD_EXP 34
9795: PPUSH
9796: CALL_OW 87
// if IsInUnit ( Heike ) then
9800: LD_EXP 25
9804: PPUSH
9805: CALL_OW 310
9809: IFFALSE 9820
// ComExitBuilding ( Heike ) ;
9811: LD_EXP 25
9815: PPUSH
9816: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9820: LD_EXP 34
9824: PUSH
9825: LD_EXP 27
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: LD_EXP 25
9838: PPUSH
9839: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9843: LD_EXP 25
9847: PPUSH
9848: LD_EXP 34
9852: PPUSH
9853: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 91
9869: PUSH
9870: LD_EXP 34
9874: PUSH
9875: LD_INT 10
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 21
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: IFFALSE 9928
// begin Say ( Kurt , DKs-scout-1 ) ;
9904: LD_EXP 34
9908: PPUSH
9909: LD_STRING DKs-scout-1
9911: PPUSH
9912: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9916: LD_EXP 25
9920: PPUSH
9921: LD_STRING DH-scout-2
9923: PPUSH
9924: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9928: LD_EXP 25
9932: PPUSH
9933: CALL_OW 85
// if IsInUnit ( Heike ) then
9937: LD_EXP 25
9941: PPUSH
9942: CALL_OW 310
9946: IFFALSE 9957
// ComExit ( Heike ) ;
9948: LD_EXP 25
9952: PPUSH
9953: CALL 75480 0 1
// repeat wait ( 0 0$1 ) ;
9957: LD_INT 35
9959: PPUSH
9960: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9964: LD_EXP 25
9968: PPUSH
9969: LD_EXP 34
9973: PPUSH
9974: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9978: LD_EXP 25
9982: PPUSH
9983: LD_EXP 34
9987: PPUSH
9988: CALL_OW 296
9992: PUSH
9993: LD_INT 6
9995: LESS
9996: IFFALSE 9957
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9998: LD_EXP 34
10002: PUSH
10003: LD_EXP 27
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PPUSH
10012: LD_EXP 25
10016: PPUSH
10017: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10021: LD_EXP 34
10025: PPUSH
10026: LD_STRING DKs-scout-3
10028: PPUSH
10029: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10033: LD_EXP 30
10037: PUSH
10038: LD_EXP 30
10042: PPUSH
10043: LD_EXP 34
10047: PPUSH
10048: CALL_OW 296
10052: PUSH
10053: LD_INT 15
10055: LESS
10056: AND
10057: IFFALSE 10247
// begin if IsInUnit ( Kaia ) then
10059: LD_EXP 30
10063: PPUSH
10064: CALL_OW 310
10068: IFFALSE 10079
// ComExitBuilding ( Kaia ) ;
10070: LD_EXP 30
10074: PPUSH
10075: CALL_OW 122
// wait ( 0 0$1 ) ;
10079: LD_INT 35
10081: PPUSH
10082: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_EXP 34
10095: PPUSH
10096: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10100: LD_INT 35
10102: PPUSH
10103: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10107: LD_EXP 30
10111: PPUSH
10112: LD_EXP 34
10116: PPUSH
10117: CALL_OW 296
10121: PUSH
10122: LD_INT 6
10124: LESS
10125: IFFALSE 10100
// ComTurnUnit ( Kaia , Kurt ) ;
10127: LD_EXP 30
10131: PPUSH
10132: LD_EXP 34
10136: PPUSH
10137: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10141: LD_EXP 30
10145: PPUSH
10146: LD_STRING DK-scout-4
10148: PPUSH
10149: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_EXP 30
10162: PPUSH
10163: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10167: LD_EXP 34
10171: PPUSH
10172: LD_STRING DKs-scout-5
10174: PPUSH
10175: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10179: LD_EXP 30
10183: PPUSH
10184: LD_STRING DK-scout-6
10186: PPUSH
10187: CALL_OW 88
// if Mike then
10191: LD_EXP 27
10195: IFFALSE 10247
// begin Say ( Mike , DM-scout-7 ) ;
10197: LD_EXP 27
10201: PPUSH
10202: LD_STRING DM-scout-7
10204: PPUSH
10205: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10209: LD_EXP 30
10213: PPUSH
10214: LD_EXP 27
10218: PPUSH
10219: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10223: LD_EXP 30
10227: PPUSH
10228: LD_STRING DK-scout-8
10230: PPUSH
10231: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10235: LD_EXP 27
10239: PPUSH
10240: LD_STRING DM-scout-9
10242: PPUSH
10243: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10247: LD_INT 184
10249: PPUSH
10250: LD_INT 100
10252: PPUSH
10253: LD_INT 2
10255: PPUSH
10256: LD_INT 12
10258: NEG
10259: PPUSH
10260: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10264: LD_INT 184
10266: PPUSH
10267: LD_INT 100
10269: PPUSH
10270: LD_INT 2
10272: PPUSH
10273: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10277: LD_INT 184
10279: PPUSH
10280: LD_INT 100
10282: PPUSH
10283: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10287: LD_EXP 34
10291: PPUSH
10292: LD_STRING DKs-scout-10
10294: PPUSH
10295: CALL_OW 88
// wait ( 0 0$1 ) ;
10299: LD_INT 35
10301: PPUSH
10302: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10306: LD_INT 144
10308: PPUSH
10309: LD_INT 65
10311: PPUSH
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 12
10317: NEG
10318: PPUSH
10319: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10323: LD_INT 144
10325: PPUSH
10326: LD_INT 65
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10336: LD_INT 144
10338: PPUSH
10339: LD_INT 65
10341: PPUSH
10342: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10346: LD_EXP 34
10350: PPUSH
10351: LD_STRING DKs-scout-11
10353: PPUSH
10354: CALL_OW 88
// wait ( 0 0$1 ) ;
10358: LD_INT 35
10360: PPUSH
10361: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10365: LD_EXP 34
10369: PPUSH
10370: CALL_OW 87
// if Mike and not Givi then
10374: LD_EXP 27
10378: PUSH
10379: LD_EXP 26
10383: NOT
10384: AND
10385: IFFALSE 10411
// begin Say ( Mike , DM-scout-a-1 ) ;
10387: LD_EXP 27
10391: PPUSH
10392: LD_STRING DM-scout-a-1
10394: PPUSH
10395: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10399: LD_EXP 25
10403: PPUSH
10404: LD_STRING DH-scout-a-2
10406: PPUSH
10407: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10411: LD_EXP 34
10415: PUSH
10416: LD_EXP 27
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 2
10427: PPUSH
10428: CALL_OW 235
// InGameOff ;
10432: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10436: LD_STRING Hill
10438: PPUSH
10439: CALL_OW 337
// Hint ( BunkerHill ) ;
10443: LD_STRING BunkerHill
10445: PPUSH
10446: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10450: LD_INT 20
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 424
// allowToPatrol := true ;
10460: LD_ADDR_EXP 12
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10468: LD_INT 3150
10470: PPUSH
10471: CALL_OW 67
// InitHc ;
10475: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 3
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_OWVAR 67
10511: ARRAY
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10781
// begin uc_side := 2 ;
10516: LD_ADDR_OWVAR 20
10520: PUSH
10521: LD_INT 2
10523: ST_TO_ADDR
// uc_nation := 2 ;
10524: LD_ADDR_OWVAR 21
10528: PUSH
10529: LD_INT 2
10531: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10532: LD_INT 0
10534: PPUSH
10535: LD_INT 1
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_VAR 0 1
10553: PUSH
10554: LD_INT 3
10556: MOD
10557: PUSH
10558: LD_INT 1
10560: PLUS
10561: ARRAY
10562: PPUSH
10563: LD_INT 3
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: LD_OWVAR 67
10585: ARRAY
10586: PPUSH
10587: CALL_OW 380
// un := CreateHuman ;
10591: LD_ADDR_VAR 0 2
10595: PUSH
10596: CALL_OW 44
10600: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10601: LD_ADDR_EXP 37
10605: PUSH
10606: LD_EXP 37
10610: PUSH
10611: LD_VAR 0 2
10615: UNION
10616: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10617: LD_INT 2
10619: PPUSH
10620: LD_INT 2
10622: PPUSH
10623: LD_INT 13
10625: PPUSH
10626: LD_INT 2
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_VAR 0 1
10640: PUSH
10641: LD_INT 2
10643: MOD
10644: PUSH
10645: LD_INT 1
10647: PLUS
10648: ARRAY
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: LD_INT 27
10655: PUSH
10656: LD_INT 25
10658: PUSH
10659: LD_INT 27
10661: PUSH
10662: LD_INT 23
10664: PUSH
10665: LD_INT 23
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_OWVAR 67
10679: PUSH
10680: LD_INT 0
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 12
10690: PLUS
10691: ARRAY
10692: PPUSH
10693: LD_INT 77
10695: PPUSH
10696: CALL 370 0 7
// veh := CreateVehicle ;
10700: LD_ADDR_VAR 0 3
10704: PUSH
10705: CALL_OW 45
10709: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 178
10729: PPUSH
10730: LD_INT 2
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10743: LD_VAR 0 2
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10757: LD_VAR 0 2
10761: PPUSH
10762: LD_INT 183
10764: PPUSH
10765: LD_INT 11
10767: PPUSH
10768: CALL_OW 111
// wait ( 0 0$2 ) ;
10772: LD_INT 70
10774: PPUSH
10775: CALL_OW 67
// end ;
10779: GO 10513
10781: POP
10782: POP
// end ;
10783: PPOPN 3
10785: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10786: LD_EXP 4
10790: PUSH
10791: LD_EXP 35
10795: PPUSH
10796: CALL_OW 302
10800: AND
10801: IFFALSE 10850
10803: GO 10805
10805: DISABLE
// begin DialogueOn ;
10806: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10810: LD_EXP 35
10814: PPUSH
10815: LD_STRING DA-lab-1
10817: PPUSH
10818: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10822: LD_EXP 35
10826: PPUSH
10827: LD_STRING DA-lab-2
10829: PPUSH
10830: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10834: LD_EXP 25
10838: PPUSH
10839: LD_STRING DH-lab-3
10841: PPUSH
10842: CALL_OW 88
// DialogueOff ;
10846: CALL_OW 7
// end ;
10850: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10851: LD_INT 17
10853: PPUSH
10854: LD_INT 2
10856: PPUSH
10857: CALL_OW 321
10861: PUSH
10862: LD_INT 2
10864: EQUAL
10865: IFFALSE 10997
10867: GO 10869
10869: DISABLE
10870: LD_INT 0
10872: PPUSH
// begin DialogueOn ;
10873: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10877: LD_EXP 35
10881: PPUSH
10882: LD_STRING DA-Cam-1
10884: PPUSH
10885: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10889: LD_EXP 35
10893: PPUSH
10894: LD_STRING DA-Cam-2
10896: PPUSH
10897: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10901: LD_EXP 35
10905: PPUSH
10906: LD_STRING DA-Cam-3
10908: PPUSH
10909: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10913: LD_EXP 25
10917: PPUSH
10918: LD_STRING DH-Cam-4
10920: PPUSH
10921: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10925: LD_EXP 30
10929: PPUSH
10930: LD_STRING DK-Cam-5
10932: PPUSH
10933: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10937: LD_EXP 30
10941: PPUSH
10942: LD_STRING DK-Cam-6
10944: PPUSH
10945: CALL_OW 88
// DialogueOff ;
10949: CALL_OW 7
// Query ( Camera ) ;
10953: LD_STRING Camera
10955: PPUSH
10956: CALL_OW 97
// hiddenCameraAllowed := true ;
10960: LD_ADDR_EXP 5
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// for i in camAreas do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_EXP 8
10977: PUSH
10978: FOR_IN
10979: IFFALSE 10995
// SetAreaMapShow ( i , 1 ) ;
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 424
10993: GO 10978
10995: POP
10996: POP
// end ;
10997: PPOPN 1
10999: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11000: LD_EXP 8
11004: NOT
11005: PUSH
11006: LD_EXP 5
11010: AND
11011: IFFALSE 11109
11013: GO 11015
11015: DISABLE
11016: LD_INT 0
11018: PPUSH
// begin stop_talking := true ;
11019: LD_ADDR_OWVAR 56
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11027: LD_ADDR_VAR 0 1
11031: PUSH
11032: LD_INT 22
11034: PUSH
11035: LD_INT 2
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 23
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: PUSH
11072: FOR_IN
11073: IFFALSE 11092
// AddExperience ( i , 2 , 450 ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: LD_INT 2
11082: PPUSH
11083: LD_INT 450
11085: PPUSH
11086: CALL_OW 492
11090: GO 11072
11092: POP
11093: POP
// stop_talking := false ;
11094: LD_ADDR_OWVAR 56
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11102: LD_STRING ACH_CAMERA
11104: PPUSH
11105: CALL_OW 543
// end ;
11109: PPOPN 1
11111: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11112: LD_EXP 9
11116: PUSH
11117: LD_EXP 11
11121: NOT
11122: AND
11123: IFFALSE 11182
11125: GO 11127
11127: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11128: LD_EXP 9
11132: PPUSH
11133: CALL_OW 250
11137: PPUSH
11138: LD_EXP 9
11142: PPUSH
11143: CALL_OW 251
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: LD_INT 6
11153: NEG
11154: PPUSH
11155: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11159: LD_EXP 9
11163: PPUSH
11164: CALL_OW 87
// wait ( 0 0$1 ) ;
11168: LD_INT 35
11170: PPUSH
11171: CALL_OW 67
// YouLost ( Spotted ) ;
11175: LD_STRING Spotted
11177: PPUSH
11178: CALL_OW 104
// end ;
11182: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11183: LD_INT 3
11185: PUSH
11186: LD_INT 6
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: LD_INT 2
11195: PPUSH
11196: LD_EXP 47
11200: PPUSH
11201: CALL 1034 0 3
11205: IFFALSE 11238
11207: GO 11209
11209: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11210: LD_ADDR_EXP 9
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: LD_INT 6
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: LD_INT 2
11227: PPUSH
11228: LD_EXP 47
11232: PPUSH
11233: CALL 1034 0 3
11237: ST_TO_ADDR
11238: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11239: LD_INT 22
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 32
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 3
11261: PUSH
11262: LD_INT 24
11264: PUSH
11265: LD_INT 1000
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PPUSH
11281: CALL_OW 69
11285: IFFALSE 11346
11287: GO 11289
11289: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11290: LD_ADDR_EXP 9
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 6
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 24
11320: PUSH
11321: LD_INT 1000
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 69
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: ST_TO_ADDR
11346: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11347: LD_EXP 9
11351: PUSH
11352: LD_INT 21
11354: PPUSH
11355: LD_INT 21
11357: PUSH
11358: LD_INT 3
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 3
11367: PUSH
11368: LD_INT 24
11370: PUSH
11371: LD_INT 1000
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 70
11390: AND
11391: IFFALSE 11630
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_EXP 42
11411: PUSH
11412: LD_EXP 44
11416: PUSH
11417: LD_EXP 45
11421: UNION
11422: PPUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 72
11444: UNION
11445: ST_TO_ADDR
// for i in noncombat do
11446: LD_ADDR_VAR 0 1
11450: PUSH
11451: LD_VAR 0 4
11455: PUSH
11456: FOR_IN
11457: IFFALSE 11553
// begin if IsInUnit ( i ) then
11459: LD_VAR 0 1
11463: PPUSH
11464: CALL_OW 310
11468: IFFALSE 11479
// ComExitBuilding ( i ) ;
11470: LD_VAR 0 1
11474: PPUSH
11475: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_INT 114
11486: PPUSH
11487: LD_INT 97
11489: PPUSH
11490: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_INT 99
11501: PPUSH
11502: LD_INT 128
11504: PPUSH
11505: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11509: LD_VAR 0 1
11513: PPUSH
11514: LD_INT 91
11516: PPUSH
11517: LD_INT 145
11519: PPUSH
11520: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11524: LD_VAR 0 1
11528: PPUSH
11529: LD_INT 82
11531: PPUSH
11532: LD_INT 153
11534: PPUSH
11535: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_INT 16
11546: PPUSH
11547: CALL_OW 173
// end ;
11551: GO 11456
11553: POP
11554: POP
// if not allowHeikeAttack then
11555: LD_EXP 11
11559: NOT
11560: IFFALSE 11564
// exit ;
11562: GO 11630
// wait ( 0 0$05 ) ;
11564: LD_INT 175
11566: PPUSH
11567: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11571: LD_EXP 40
11575: PPUSH
11576: LD_STRING D9a-Kur-1
11578: PPUSH
11579: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11583: LD_EXP 43
11587: PPUSH
11588: LD_STRING D9a-Bur-1
11590: PPUSH
11591: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11595: LD_EXP 40
11599: PPUSH
11600: LD_STRING D9a-Kur-2
11602: PPUSH
11603: CALL_OW 94
// omicronFall := true ;
11607: LD_ADDR_EXP 13
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11615: LD_INT 105
11617: PPUSH
11618: CALL_OW 67
// retreatFromOmicron := true ;
11622: LD_ADDR_EXP 20
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// end ;
11630: PPOPN 4
11632: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11633: LD_INT 16
11635: PPUSH
11636: LD_INT 3
11638: PUSH
11639: LD_INT 22
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 23
11655: PUSH
11656: LD_INT 3
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 70
11671: IFFALSE 11754
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
// begin enable ;
11679: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11680: LD_ADDR_VAR 0 1
11684: PUSH
11685: LD_INT 16
11687: PPUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 22
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 3
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL_OW 70
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11752
// begin escapeCounter := escapeCounter + 1 ;
11727: LD_ADDR_EXP 19
11731: PUSH
11732: LD_EXP 19
11736: PUSH
11737: LD_INT 1
11739: PLUS
11740: ST_TO_ADDR
// RemoveUnit ( i ) ;
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 64
// end ;
11750: GO 11724
11752: POP
11753: POP
// end ;
11754: PPOPN 1
11756: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11757: LD_OWVAR 1
11761: PUSH
11762: LD_INT 13650
11764: PUSH
11765: LD_INT 0
11767: PPUSH
11768: LD_INT 3150
11770: PPUSH
11771: CALL_OW 12
11775: PLUS
11776: GREATEREQUAL
11777: IFFALSE 11786
11779: GO 11781
11781: DISABLE
// SmallAmericanReinforcements ;
11782: CALL 7093 0 0
11786: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11787: LD_OWVAR 1
11791: PUSH
11792: LD_INT 31500
11794: PUSH
11795: LD_INT 29400
11797: PUSH
11798: LD_INT 27300
11800: PUSH
11801: LD_INT 25200
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: PUSH
11810: LD_OWVAR 67
11814: ARRAY
11815: GREATEREQUAL
11816: IFFALSE 11881
11818: GO 11820
11820: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11821: LD_EXP 48
11825: PPUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PPUSH
11841: LD_INT 62
11843: PPUSH
11844: LD_INT 22
11846: PPUSH
11847: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11851: LD_EXP 49
11855: PPUSH
11856: LD_INT 69
11858: PPUSH
11859: LD_INT 27
11861: PPUSH
11862: CALL_OW 111
// wait ( 1 1$00 ) ;
11866: LD_INT 2100
11868: PPUSH
11869: CALL_OW 67
// startAttackOnOmicron := true ;
11873: LD_ADDR_EXP 6
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// end ;
11881: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11882: LD_EXP 22
11886: PUSH
11887: LD_INT 0
11889: EQUAL
11890: IFFALSE 13907
11892: GO 11894
11894: DISABLE
11895: LD_INT 0
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11904: LD_INT 5
11906: PPUSH
11907: LD_INT 2
11909: PPUSH
11910: CALL_OW 343
// PrepareOmarForces ;
11914: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11918: LD_INT 105
11920: PPUSH
11921: CALL_OW 67
// allowHeikeAttack := true ;
11925: LD_ADDR_EXP 11
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// activeGrishkoAI := false ;
11933: LD_ADDR_EXP 10
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11941: LD_INT 20
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 424
// if not hillBase then
11951: LD_EXP 15
11955: NOT
11956: IFFALSE 11965
// ChangeMissionObjectives ( HillDone ) ;
11958: LD_STRING HillDone
11960: PPUSH
11961: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11965: LD_EXP 33
11969: PPUSH
11970: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12033
// if HasTask ( i ) then
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 314
12020: IFFALSE 12031
// ComHold ( i ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 140
12031: GO 12008
12033: POP
12034: POP
// DialogueOn ;
12035: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12039: LD_EXP 33
12043: PPUSH
12044: LD_STRING DO-assault-1
12046: PPUSH
12047: CALL_OW 94
// DialogueOff ;
12051: CALL_OW 7
// game_speed := 4 ;
12055: LD_ADDR_OWVAR 65
12059: PUSH
12060: LD_INT 4
12062: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12063: LD_ADDR_VAR 0 1
12067: PUSH
12068: LD_EXP 46
12072: PPUSH
12073: LD_INT 3
12075: PUSH
12076: LD_INT 54
12078: PUSH
12079: EMPTY
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PPUSH
12086: CALL_OW 72
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12111
// ComMoveXY ( i , 226 , 114 ) ;
12094: LD_VAR 0 1
12098: PPUSH
12099: LD_INT 226
12101: PPUSH
12102: LD_INT 114
12104: PPUSH
12105: CALL_OW 111
12109: GO 12091
12111: POP
12112: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12113: LD_EXP 41
12117: PPUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 4
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: PPUSH
12147: LD_EXP 41
12151: PPUSH
12152: CALL_OW 74
12156: PPUSH
12157: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12161: LD_STRING Attack
12163: PPUSH
12164: CALL_OW 337
// music_class := music_combat ;
12168: LD_ADDR_OWVAR 72
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// music_nat := 4 ;
12176: LD_ADDR_OWVAR 71
12180: PUSH
12181: LD_INT 4
12183: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12184: LD_INT 5
12186: PPUSH
12187: LD_EXP 41
12191: PPUSH
12192: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12196: LD_INT 6
12198: PPUSH
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: PUSH
12219: LD_INT 4
12221: ARRAY
12222: PPUSH
12223: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12227: LD_ADDR_VAR 0 1
12231: PUSH
12232: LD_EXP 38
12236: PPUSH
12237: LD_INT 3
12239: PUSH
12240: LD_INT 25
12242: PUSH
12243: LD_INT 4
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 72
12258: PUSH
12259: FOR_IN
12260: IFFALSE 12279
// ComAgressiveMove ( i , 221 , 110 ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: LD_INT 221
12269: PPUSH
12270: LD_INT 110
12272: PPUSH
12273: CALL_OW 114
12277: GO 12259
12279: POP
12280: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12281: LD_EXP 38
12285: PPUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 72
12300: PPUSH
12301: LD_INT 214
12303: PPUSH
12304: LD_INT 124
12306: PPUSH
12307: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12311: LD_EXP 38
12315: PPUSH
12316: LD_INT 25
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 72
12330: PUSH
12331: LD_INT 4
12333: ARRAY
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 114
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12348: LD_EXP 41
12352: PPUSH
12353: LD_STRING D9-Gri-1
12355: PPUSH
12356: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12360: LD_EXP 40
12364: PPUSH
12365: LD_STRING D9-Kur-1
12367: PPUSH
12368: CALL_OW 94
// wait ( 0 0$1 ) ;
12372: LD_INT 35
12374: PPUSH
12375: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12379: LD_EXP 33
12383: PPUSH
12384: LD_INT 233
12386: PPUSH
12387: LD_INT 130
12389: PPUSH
12390: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12394: LD_EXP 41
12398: PPUSH
12399: LD_STRING D9-Gri-2
12401: PPUSH
12402: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12406: LD_EXP 40
12410: PPUSH
12411: LD_STRING D9-Kur-2
12413: PPUSH
12414: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12418: LD_EXP 41
12422: PPUSH
12423: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12427: LD_EXP 41
12431: PPUSH
12432: LD_INT 211
12434: PPUSH
12435: LD_INT 104
12437: PPUSH
12438: CALL_OW 171
// AddComHold ( Grishko ) ;
12442: LD_EXP 41
12446: PPUSH
12447: CALL_OW 200
// repeat wait ( 3 ) ;
12451: LD_INT 3
12453: PPUSH
12454: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12458: LD_EXP 41
12462: PPUSH
12463: CALL_OW 310
12467: NOT
12468: IFFALSE 12451
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12470: LD_EXP 38
12474: PPUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 26
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 72
12489: PPUSH
12490: LD_EXP 41
12494: PPUSH
12495: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12499: LD_EXP 38
12503: PPUSH
12504: LD_INT 34
12506: PUSH
12507: LD_INT 26
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 72
12518: PPUSH
12519: LD_INT 215
12521: PPUSH
12522: LD_INT 106
12524: PPUSH
12525: CALL_OW 174
// repeat wait ( 3 ) ;
12529: LD_INT 3
12531: PPUSH
12532: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12536: LD_EXP 41
12540: PPUSH
12541: CALL_OW 256
12545: PUSH
12546: LD_INT 1000
12548: LESS
12549: IFFALSE 12529
// NormalAttack ( 5 , Grishko ) ;
12551: LD_INT 5
12553: PPUSH
12554: LD_EXP 41
12558: PPUSH
12559: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12563: LD_INT 6
12565: PPUSH
12566: LD_EXP 38
12570: PPUSH
12571: LD_INT 25
12573: PUSH
12574: LD_INT 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 72
12585: PUSH
12586: LD_INT 4
12588: ARRAY
12589: PPUSH
12590: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12594: LD_EXP 41
12598: PPUSH
12599: LD_STRING D9-Gri-3
12601: PPUSH
12602: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12606: LD_EXP 40
12610: PPUSH
12611: LD_STRING D9-Kur-3
12613: PPUSH
12614: CALL_OW 94
// music_class := music_auto ;
12618: LD_ADDR_OWVAR 72
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// music_nat := music_auto ;
12626: LD_ADDR_OWVAR 71
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// for i in omarSquad do
12634: LD_ADDR_VAR 0 1
12638: PUSH
12639: LD_EXP 38
12643: PUSH
12644: FOR_IN
12645: IFFALSE 12787
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 247
12656: PUSH
12657: LD_INT 2
12659: EQUAL
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 256
12670: PUSH
12671: LD_INT 1000
12673: LESS
12674: AND
12675: IFFALSE 12741
// begin driver := IsDrivenBy ( i ) ;
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 311
12691: ST_TO_ADDR
// veh := i ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_VAR 0 1
12701: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12702: LD_VAR 0 2
12706: PPUSH
12707: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12711: LD_VAR 0 2
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12725: LD_VAR 0 2
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: CALL_OW 180
// end else
12739: GO 12785
// if GetLives ( i ) < 500 then
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 256
12750: PUSH
12751: LD_INT 500
12753: LESS
12754: IFFALSE 12785
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12756: LD_EXP 38
12760: PPUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 72
12775: PPUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 188
// end ; end ;
12785: GO 12644
12787: POP
12788: POP
// repeat wait ( 0 0$1 ) ;
12789: LD_INT 35
12791: PPUSH
12792: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12796: LD_EXP 38
12800: PPUSH
12801: LD_INT 3
12803: PUSH
12804: LD_INT 24
12806: PUSH
12807: LD_INT 1000
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 21
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 72
12836: NOT
12837: PUSH
12838: LD_EXP 38
12842: PPUSH
12843: LD_INT 3
12845: PUSH
12846: LD_INT 24
12848: PUSH
12849: LD_INT 250
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 72
12864: NOT
12865: AND
12866: IFFALSE 12789
// wait ( 0 0$2 ) ;
12868: LD_INT 70
12870: PPUSH
12871: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12875: LD_ADDR_VAR 0 5
12879: PUSH
12880: LD_EXP 38
12884: PPUSH
12885: LD_INT 58
12887: PUSH
12888: EMPTY
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 72
12909: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12910: LD_ADDR_VAR 0 6
12914: PUSH
12915: LD_EXP 38
12919: PPUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: LD_INT 55
12935: PUSH
12936: EMPTY
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 72
12951: ST_TO_ADDR
// for i := 1 to tmp do
12952: LD_ADDR_VAR 0 1
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 5
12966: PUSH
12967: FOR_TO
12968: IFFALSE 12998
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12970: LD_VAR 0 6
12974: PUSH
12975: LD_VAR 0 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 5
12985: PUSH
12986: LD_VAR 0 1
12990: ARRAY
12991: PPUSH
12992: CALL_OW 120
12996: GO 12967
12998: POP
12999: POP
// wait ( 0 0$5 ) ;
13000: LD_INT 175
13002: PPUSH
13003: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13007: LD_EXP 38
13011: PPUSH
13012: LD_INT 199
13014: PPUSH
13015: LD_INT 141
13017: PPUSH
13018: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13022: LD_EXP 33
13026: PPUSH
13027: LD_INT 190
13029: PPUSH
13030: LD_INT 143
13032: PPUSH
13033: CALL_OW 114
// AddComHold ( Omar ) ;
13037: LD_EXP 33
13041: PPUSH
13042: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13046: LD_EXP 38
13050: PPUSH
13051: LD_INT 2
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 25
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 72
13083: PPUSH
13084: LD_INT 161
13086: PPUSH
13087: LD_INT 130
13089: PPUSH
13090: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13094: LD_EXP 38
13098: PPUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PPUSH
13114: LD_INT 163
13116: PPUSH
13117: LD_INT 122
13119: PPUSH
13120: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13124: LD_EXP 38
13128: PPUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PUSH
13144: LD_INT 4
13146: ARRAY
13147: PPUSH
13148: LD_INT 165
13150: PPUSH
13151: LD_INT 118
13153: PPUSH
13154: LD_INT 0
13156: PPUSH
13157: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PUSH
13181: LD_INT 4
13183: ARRAY
13184: PPUSH
13185: LD_INT 159
13187: PPUSH
13188: LD_INT 116
13190: PPUSH
13191: LD_INT 0
13193: PPUSH
13194: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13198: LD_EXP 38
13202: PPUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 72
13217: PPUSH
13218: LD_INT 169
13220: PPUSH
13221: LD_INT 114
13223: PPUSH
13224: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13228: LD_INT 35
13230: PPUSH
13231: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13235: LD_ADDR_VAR 0 5
13239: PUSH
13240: LD_EXP 38
13244: PPUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 72
13259: ST_TO_ADDR
// for i in tmp do
13260: LD_ADDR_VAR 0 1
13264: PUSH
13265: LD_VAR 0 5
13269: PUSH
13270: FOR_IN
13271: IFFALSE 13368
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 256
13282: PUSH
13283: LD_INT 600
13285: LESS
13286: PUSH
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_INT 161
13294: PPUSH
13295: LD_INT 130
13297: PPUSH
13298: CALL_OW 297
13302: PUSH
13303: LD_INT 6
13305: GREATER
13306: AND
13307: IFFALSE 13324
// ComMoveXY ( i , 161 , 130 ) ;
13309: LD_VAR 0 1
13313: PPUSH
13314: LD_INT 161
13316: PPUSH
13317: LD_INT 130
13319: PPUSH
13320: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 256
13333: PUSH
13334: LD_INT 1000
13336: EQUAL
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 314
13347: NOT
13348: AND
13349: IFFALSE 13366
// ComAgressiveMove ( i , 160 , 109 ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_INT 160
13358: PPUSH
13359: LD_INT 109
13361: PPUSH
13362: CALL_OW 114
// end ;
13366: GO 13270
13368: POP
13369: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13370: LD_ADDR_VAR 0 5
13374: PUSH
13375: LD_EXP 38
13379: PPUSH
13380: LD_INT 21
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 72
13394: ST_TO_ADDR
// for i in tmp do
13395: LD_ADDR_VAR 0 1
13399: PUSH
13400: LD_VAR 0 5
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13672
// begin tmp2 := IsDrivenBy ( i ) ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_VAR 0 1
13417: PPUSH
13418: CALL_OW 311
13422: ST_TO_ADDR
// if not tmp2 then
13423: LD_VAR 0 6
13427: NOT
13428: IFFALSE 13432
// continue ;
13430: GO 13405
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 256
13441: PUSH
13442: LD_INT 600
13444: GREATEREQUAL
13445: PUSH
13446: LD_VAR 0 1
13450: PPUSH
13451: CALL_OW 110
13455: PUSH
13456: LD_INT 1
13458: EQUAL
13459: AND
13460: IFFALSE 13474
// SetTag ( i , 0 ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_INT 0
13469: PPUSH
13470: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 256
13483: PUSH
13484: LD_INT 600
13486: GREATEREQUAL
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 110
13497: NOT
13498: AND
13499: IFFALSE 13525
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_VAR 0 7
13510: PPUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 74
13520: PPUSH
13521: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 256
13534: PUSH
13535: LD_INT 600
13537: LESS
13538: PUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 110
13548: NOT
13549: AND
13550: IFFALSE 13579
// begin SetTag ( i , 1 ) ;
13552: LD_VAR 0 1
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13564: LD_VAR 0 1
13568: PPUSH
13569: LD_INT 202
13571: PPUSH
13572: LD_INT 150
13574: PPUSH
13575: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 110
13588: PUSH
13589: LD_INT 1
13591: EQUAL
13592: PUSH
13593: LD_VAR 0 1
13597: PPUSH
13598: LD_INT 202
13600: PPUSH
13601: LD_INT 150
13603: PPUSH
13604: CALL_OW 297
13608: PUSH
13609: LD_INT 6
13611: LESS
13612: AND
13613: PUSH
13614: LD_VAR 0 6
13618: AND
13619: IFFALSE 13670
// begin ComExitVehicle ( tmp2 ) ;
13621: LD_VAR 0 6
13625: PPUSH
13626: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13630: LD_VAR 0 6
13634: PPUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13644: LD_VAR 0 6
13648: PPUSH
13649: LD_INT 700
13651: PPUSH
13652: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13656: LD_VAR 0 6
13660: PPUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 180
// end ; end ;
13670: GO 13405
13672: POP
13673: POP
// until kirovDestroyed ;
13674: LD_EXP 16
13678: IFFALSE 13228
// repeat wait ( 0 0$1 ) ;
13680: LD_INT 35
13682: PPUSH
13683: CALL_OW 67
// for i in omarSquad union Omar do
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: LD_EXP 38
13696: PUSH
13697: LD_EXP 33
13701: UNION
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13874
// if IsInArea ( i , southRoadArea ) then
13706: LD_VAR 0 1
13710: PPUSH
13711: LD_INT 15
13713: PPUSH
13714: CALL_OW 308
13718: IFFALSE 13731
// RemoveUnit ( i ) else
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 64
13729: GO 13872
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13731: LD_VAR 0 1
13735: PPUSH
13736: CALL_OW 257
13740: PUSH
13741: LD_INT 3
13743: EQUAL
13744: PUSH
13745: LD_VAR 0 1
13749: PPUSH
13750: CALL_OW 310
13754: NOT
13755: AND
13756: PUSH
13757: LD_INT 22
13759: PUSH
13760: LD_INT 5
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 24
13769: PUSH
13770: LD_INT 251
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 58
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: AND
13804: IFFALSE 13857
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 22
13813: PUSH
13814: LD_INT 5
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 21
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 58
13833: PUSH
13834: EMPTY
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: CALL_OW 120
13855: GO 13872
// ComMoveXY ( i , 208 , 162 ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_INT 208
13864: PPUSH
13865: LD_INT 162
13867: PPUSH
13868: CALL_OW 111
// end ;
13872: GO 13703
13874: POP
13875: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13876: LD_INT 22
13878: PUSH
13879: LD_INT 5
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 21
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: NOT
13905: IFFALSE 13680
// end ;
13907: PPOPN 7
13909: END
// every 0 0$1 trigger IsDead ( kirov ) do
13910: LD_INT 71
13912: PPUSH
13913: CALL_OW 301
13917: IFFALSE 13934
13919: GO 13921
13921: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13922: LD_EXP 25
13926: PPUSH
13927: LD_STRING DH-1-Kirov
13929: PPUSH
13930: CALL_OW 88
13934: END
// every 0 0$1 trigger See ( 2 , beria ) do
13935: LD_INT 2
13937: PPUSH
13938: LD_INT 106
13940: PPUSH
13941: CALL_OW 292
13945: IFFALSE 13962
13947: GO 13949
13949: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13950: LD_EXP 25
13954: PPUSH
13955: LD_STRING DH-1-Beria
13957: PPUSH
13958: CALL_OW 88
13962: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13963: LD_INT 2
13965: PPUSH
13966: LD_INT 112
13968: PPUSH
13969: CALL_OW 292
13973: IFFALSE 14240
13975: GO 13977
13977: DISABLE
// begin DialogueOn ;
13978: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13982: LD_INT 112
13984: PPUSH
13985: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kagan
13996: PPUSH
13997: CALL_OW 88
// if Kamil then
14001: LD_EXP 29
14005: IFFALSE 14043
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14007: LD_EXP 29
14011: PPUSH
14012: LD_STRING DKam-Kagan-2
14014: PPUSH
14015: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14019: LD_EXP 26
14023: PPUSH
14024: LD_STRING DG-Kagan-3
14026: PPUSH
14027: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14031: LD_EXP 26
14035: PPUSH
14036: LD_STRING DG-Kagan-4
14038: PPUSH
14039: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14043: LD_STRING KaganBase
14045: PPUSH
14046: CALL_OW 97
14050: PUSH
14051: LD_INT 1
14053: DOUBLE
14054: EQUAL
14055: IFTRUE 14059
14057: GO 14154
14059: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14060: LD_EXP 25
14064: PPUSH
14065: LD_STRING DH-Kagan-5
14067: PPUSH
14068: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14072: LD_EXP 25
14076: PPUSH
14077: LD_STRING DH-Kagan-6
14079: PPUSH
14080: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14084: LD_EXP 36
14088: PPUSH
14089: LD_STRING DShar-Kagan-7
14091: PPUSH
14092: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14096: LD_EXP 25
14100: PPUSH
14101: LD_STRING DH-Kagan-8
14103: PPUSH
14104: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14108: LD_EXP 25
14112: PPUSH
14113: LD_STRING DH-Kagan-9
14115: PPUSH
14116: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14120: LD_EXP 36
14124: PPUSH
14125: LD_STRING DShar-Kagan-10
14127: PPUSH
14128: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14132: LD_EXP 25
14136: PPUSH
14137: LD_STRING DH-Kagan-11
14139: PPUSH
14140: CALL_OW 88
// kaganCaptured := true ;
14144: LD_ADDR_EXP 24
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// end ; 2 :
14152: GO 14236
14154: LD_INT 2
14156: DOUBLE
14157: EQUAL
14158: IFTRUE 14162
14160: GO 14235
14162: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14163: LD_INT 22
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PUSH
14178: LD_EXP 35
14182: AND
14183: IFFALSE 14197
// Say ( Heike , DH-Kagan-a-5 ) ;
14185: LD_EXP 25
14189: PPUSH
14190: LD_STRING DH-Kagan-a-5
14192: PPUSH
14193: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14197: LD_EXP 25
14201: PPUSH
14202: LD_STRING DH-Kagan-a-6
14204: PPUSH
14205: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14209: LD_EXP 25
14213: PPUSH
14214: LD_STRING DH-Kagan-a-7
14216: PPUSH
14217: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14221: LD_EXP 26
14225: PPUSH
14226: LD_STRING DG-Kagan-a-8
14228: PPUSH
14229: CALL_OW 88
// end ; end ;
14233: GO 14236
14235: POP
// DialogueOff ;
14236: CALL_OW 7
// end ;
14240: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14241: LD_EXP 18
14245: PUSH
14246: LD_INT 112
14248: PPUSH
14249: CALL_OW 255
14253: PUSH
14254: LD_INT 2
14256: EQUAL
14257: OR
14258: IFFALSE 14270
14260: GO 14262
14262: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14263: LD_STRING KaganDone
14265: PPUSH
14266: CALL_OW 337
14270: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14271: LD_EXP 6
14275: PUSH
14276: LD_EXP 48
14280: PPUSH
14281: LD_INT 95
14283: PUSH
14284: LD_INT 19
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: AND
14296: IFFALSE 14373
14298: GO 14300
14300: DISABLE
// begin DialogueOn ;
14301: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14305: LD_INT 63
14307: PPUSH
14308: LD_INT 32
14310: PPUSH
14311: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14315: LD_INT 63
14317: PPUSH
14318: LD_INT 32
14320: PPUSH
14321: LD_INT 2
14323: PPUSH
14324: LD_INT 12
14326: NEG
14327: PPUSH
14328: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14332: LD_EXP 25
14336: PPUSH
14337: LD_STRING DH-Omicron-1
14339: PPUSH
14340: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14344: LD_EXP 27
14348: PPUSH
14349: LD_STRING DM-Omicron-2
14351: PPUSH
14352: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14356: LD_INT 63
14358: PPUSH
14359: LD_INT 32
14361: PPUSH
14362: LD_INT 2
14364: PPUSH
14365: CALL_OW 331
// DialogueOff ;
14369: CALL_OW 7
// end ;
14373: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14374: LD_INT 2
14376: PPUSH
14377: LD_EXP 50
14381: PPUSH
14382: CALL_OW 292
14386: PUSH
14387: LD_EXP 50
14391: PPUSH
14392: CALL_OW 255
14396: PUSH
14397: LD_INT 2
14399: EQUAL
14400: OR
14401: PUSH
14402: LD_INT 106
14404: PPUSH
14405: CALL_OW 255
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: OR
14414: PUSH
14415: LD_EXP 50
14419: PPUSH
14420: CALL_OW 302
14424: AND
14425: PUSH
14426: LD_EXP 25
14430: PPUSH
14431: CALL_OW 302
14435: AND
14436: PUSH
14437: LD_EXP 35
14441: PPUSH
14442: CALL_OW 302
14446: AND
14447: IFFALSE 15168
14449: GO 14451
14451: DISABLE
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
// begin DialogueOn ;
14459: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14463: LD_INT 111
14465: PPUSH
14466: LD_INT 90
14468: PPUSH
14469: LD_INT 2
14471: PPUSH
14472: LD_INT 6
14474: NEG
14475: PPUSH
14476: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14480: LD_INT 111
14482: PPUSH
14483: LD_INT 90
14485: PPUSH
14486: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14490: LD_EXP 35
14494: PPUSH
14495: LD_STRING DA-Cap-1
14497: PPUSH
14498: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14502: LD_EXP 25
14506: PPUSH
14507: LD_STRING DH-Cap-2
14509: PPUSH
14510: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14514: LD_INT 111
14516: PPUSH
14517: LD_INT 90
14519: PPUSH
14520: LD_INT 2
14522: PPUSH
14523: CALL_OW 331
// DialogueOff ;
14527: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14531: LD_INT 35
14533: PPUSH
14534: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14538: LD_EXP 17
14542: PUSH
14543: LD_INT 106
14545: PPUSH
14546: CALL_OW 255
14550: PUSH
14551: LD_INT 2
14553: EQUAL
14554: OR
14555: PUSH
14556: LD_EXP 50
14560: PPUSH
14561: CALL_OW 255
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: OR
14570: PUSH
14571: LD_EXP 50
14575: PPUSH
14576: CALL_OW 302
14580: AND
14581: PUSH
14582: LD_EXP 35
14586: PPUSH
14587: CALL_OW 302
14591: AND
14592: PUSH
14593: LD_INT 2
14595: PPUSH
14596: CALL_OW 463
14600: NOT
14601: AND
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 1
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 92
14625: PUSH
14626: LD_INT 110
14628: PUSH
14629: LD_INT 95
14631: PUSH
14632: LD_INT 12
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: NOT
14651: AND
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 30
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 92
14675: PUSH
14676: LD_INT 110
14678: PUSH
14679: LD_INT 95
14681: PUSH
14682: LD_INT 12
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: NOT
14701: AND
14702: IFFALSE 14531
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: LD_EXP 37
14713: PUSH
14714: LD_EXP 28
14718: PUSH
14719: LD_EXP 29
14723: PUSH
14724: LD_EXP 31
14728: PUSH
14729: LD_EXP 30
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: UNION
14740: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14741: LD_ADDR_VAR 0 2
14745: PUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_INT 50
14753: PUSH
14754: EMPTY
14755: LIST
14756: PPUSH
14757: CALL_OW 72
14761: ST_TO_ADDR
// if tmp < 2 then
14762: LD_VAR 0 2
14766: PUSH
14767: LD_INT 2
14769: LESS
14770: IFFALSE 14782
// q := 2 else
14772: LD_ADDR_VAR 0 4
14776: PUSH
14777: LD_INT 2
14779: ST_TO_ADDR
14780: GO 14795
// q := Query ( LabCap ) ;
14782: LD_ADDR_VAR 0 4
14786: PUSH
14787: LD_STRING LabCap
14789: PPUSH
14790: CALL_OW 97
14794: ST_TO_ADDR
// case q of 1 :
14795: LD_VAR 0 4
14799: PUSH
14800: LD_INT 1
14802: DOUBLE
14803: EQUAL
14804: IFTRUE 14808
14806: GO 15132
14808: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14809: LD_INT 2
14811: PPUSH
14812: LD_EXP 50
14816: PPUSH
14817: CALL_OW 471
// labCaptured := true ;
14821: LD_ADDR_EXP 21
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14829: LD_EXP 25
14833: PPUSH
14834: LD_STRING DH-Cap-a-1
14836: PPUSH
14837: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14841: LD_EXP 35
14845: PPUSH
14846: LD_STRING DA-Cap-a-2
14848: PPUSH
14849: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14853: LD_ADDR_VAR 0 5
14857: PUSH
14858: LD_EXP 35
14862: PUSH
14863: LD_INT -3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT -2
14872: PUSH
14873: LD_INT -4
14875: PUSH
14876: LD_EXP 25
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: ADD
14886: PUSH
14887: LD_INT -3
14889: PUSH
14890: EMPTY
14891: LIST
14892: ADD
14893: PUSH
14894: LD_VAR 0 2
14898: ADD
14899: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14900: LD_ADDR_VAR 0 3
14904: PUSH
14905: LD_STRING Select two characters to go with Aviradze
14907: PPUSH
14908: LD_INT 2
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: LD_VAR 0 5
14918: PPUSH
14919: EMPTY
14920: PPUSH
14921: CALL_OW 42
14925: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14926: LD_EXP 50
14930: PPUSH
14931: LD_INT 8
14933: PPUSH
14934: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14938: LD_EXP 35
14942: PPUSH
14943: LD_INT 8
14945: PPUSH
14946: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14950: LD_ADDR_EXP 39
14954: PUSH
14955: LD_EXP 35
14959: PUSH
14960: EMPTY
14961: LIST
14962: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14963: LD_EXP 35
14967: PPUSH
14968: CALL_OW 310
14972: IFFALSE 14983
// ComExit ( Aviradze ) ;
14974: LD_EXP 35
14978: PPUSH
14979: CALL 75480 0 1
// wait ( 3 ) ;
14983: LD_INT 3
14985: PPUSH
14986: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14990: LD_EXP 35
14994: PPUSH
14995: LD_EXP 50
14999: PPUSH
15000: CALL_OW 120
// for i := 1 to 2 do
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: DOUBLE
15010: LD_INT 1
15012: DEC
15013: ST_TO_ADDR
15014: LD_INT 2
15016: PUSH
15017: FOR_TO
15018: IFFALSE 15121
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15020: LD_ADDR_EXP 39
15024: PUSH
15025: LD_EXP 39
15029: PUSH
15030: LD_VAR 0 3
15034: PUSH
15035: LD_VAR 0 1
15039: ARRAY
15040: UNION
15041: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15042: LD_VAR 0 3
15046: PUSH
15047: LD_VAR 0 1
15051: ARRAY
15052: PPUSH
15053: LD_INT 8
15055: PPUSH
15056: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15060: LD_VAR 0 3
15064: PUSH
15065: LD_VAR 0 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 310
15075: IFFALSE 15092
// ComExit ( tmp2 [ i ] ) ;
15077: LD_VAR 0 3
15081: PUSH
15082: LD_VAR 0 1
15086: ARRAY
15087: PPUSH
15088: CALL 75480 0 1
// wait ( 3 ) ;
15092: LD_INT 3
15094: PPUSH
15095: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15099: LD_VAR 0 3
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: PPUSH
15110: LD_EXP 50
15114: PPUSH
15115: CALL_OW 120
// end ;
15119: GO 15017
15121: POP
15122: POP
// SetAchievement ( ACH_LAB ) ;
15123: LD_STRING ACH_LAB
15125: PPUSH
15126: CALL_OW 543
// end ; 2 :
15130: GO 15168
15132: LD_INT 2
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15167
15140: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15141: LD_EXP 25
15145: PPUSH
15146: LD_STRING DH-Cap-b-1
15148: PPUSH
15149: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15153: LD_EXP 35
15157: PPUSH
15158: LD_STRING DA-Cap-b-2
15160: PPUSH
15161: CALL_OW 88
// end ; end ;
15165: GO 15168
15167: POP
// end ;
15168: PPOPN 5
15170: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15171: LD_INT 10
15173: PPUSH
15174: LD_INT 22
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 31
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 70
15202: PUSH
15203: LD_INT 2
15205: GREATEREQUAL
15206: IFFALSE 15218
15208: GO 15210
15210: DISABLE
// SetAchievement ( ACH_KING ) ;
15211: LD_STRING ACH_KING
15213: PPUSH
15214: CALL_OW 543
15218: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15219: LD_EXP 11
15223: NOT
15224: PUSH
15225: LD_INT 10
15227: PPUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 30
15243: PUSH
15244: LD_INT 31
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 4
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 70
15274: AND
15275: IFFALSE 15295
15277: GO 15279
15279: DISABLE
// begin hillBase := true ;
15280: LD_ADDR_EXP 15
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15288: LD_STRING HillDone
15290: PPUSH
15291: CALL_OW 337
// end ;
15295: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15296: LD_EXP 30
15300: PUSH
15301: LD_EXP 30
15305: PPUSH
15306: CALL_OW 256
15310: PUSH
15311: LD_INT 3
15313: LESS
15314: AND
15315: IFFALSE 15361
15317: GO 15319
15319: DISABLE
// begin DialogueOn ;
15320: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15324: LD_EXP 30
15328: PPUSH
15329: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15333: LD_EXP 30
15337: PPUSH
15338: LD_STRING DK-Kkilled-1
15340: PPUSH
15341: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15345: LD_EXP 25
15349: PPUSH
15350: LD_STRING DH-Kkilled-2
15352: PPUSH
15353: CALL_OW 88
// DialogueOff ;
15357: CALL_OW 7
// end ;
15361: END
// every 0 0$1 trigger kaiaKilledByRussian do
15362: LD_EXP 23
15366: IFFALSE 15383
15368: GO 15370
15370: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15371: LD_EXP 25
15375: PPUSH
15376: LD_STRING DH-Kkilled-3
15378: PPUSH
15379: CALL_OW 88
15383: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15384: LD_EXP 16
15388: PUSH
15389: LD_INT 106
15391: PPUSH
15392: CALL_OW 255
15396: PUSH
15397: LD_INT 2
15399: EQUAL
15400: PUSH
15401: LD_EXP 17
15405: OR
15406: AND
15407: PUSH
15408: LD_EXP 18
15412: PUSH
15413: LD_EXP 24
15417: PUSH
15418: LD_INT 112
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 2
15428: EQUAL
15429: AND
15430: OR
15431: AND
15432: IFFALSE 16621
15434: GO 15436
15436: DISABLE
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15443: LD_STRING GoToWest
15445: PPUSH
15446: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15450: LD_INT 17
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 17
15474: PPUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 2
15487: PUSH
15488: LD_INT 21
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 2
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 3
15510: PUSH
15511: LD_INT 58
15513: PUSH
15514: EMPTY
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 70
15538: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15539: LD_ADDR_VAR 0 3
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_INT 2
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 3
15556: PUSH
15557: LD_INT 55
15559: PUSH
15560: EMPTY
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: LD_INT 58
15595: PUSH
15596: EMPTY
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: PPUSH
15617: CALL_OW 69
15621: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15622: LD_VAR 0 2
15626: PUSH
15627: LD_INT 0
15629: PLUS
15630: PUSH
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 0
15638: PLUS
15639: EQUAL
15640: IFFALSE 15460
// SaveCharacters ( Heike , 04_1_Heike ) ;
15642: LD_EXP 25
15646: PPUSH
15647: LD_STRING 04_1_Heike
15649: PPUSH
15650: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15654: LD_EXP 35
15658: PUSH
15659: LD_EXP 35
15663: PUSH
15664: LD_EXP 39
15668: IN
15669: NOT
15670: AND
15671: IFFALSE 15687
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15673: LD_EXP 35
15677: PPUSH
15678: LD_STRING 04_1_Aviradze
15680: PPUSH
15681: CALL_OW 38
15685: GO 15705
// if Aviradze then
15687: LD_EXP 35
15691: IFFALSE 15705
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15693: LD_EXP 35
15697: PPUSH
15698: LD_STRING 04_1_Aviradze_L
15700: PPUSH
15701: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15705: LD_EXP 28
15709: PUSH
15710: LD_EXP 28
15714: PUSH
15715: LD_EXP 39
15719: IN
15720: NOT
15721: AND
15722: IFFALSE 15738
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15724: LD_EXP 28
15728: PPUSH
15729: LD_STRING 04_1_Ibrahim
15731: PPUSH
15732: CALL_OW 38
15736: GO 15756
// if Ibrahim then
15738: LD_EXP 28
15742: IFFALSE 15756
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15744: LD_EXP 28
15748: PPUSH
15749: LD_STRING 04_1_Ibrahim_L
15751: PPUSH
15752: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15756: LD_EXP 29
15760: PUSH
15761: LD_EXP 29
15765: PUSH
15766: LD_EXP 39
15770: IN
15771: NOT
15772: AND
15773: IFFALSE 15789
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15775: LD_EXP 29
15779: PPUSH
15780: LD_STRING 04_1_Kamil
15782: PPUSH
15783: CALL_OW 38
15787: GO 15807
// if Kamil then
15789: LD_EXP 29
15793: IFFALSE 15807
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15795: LD_EXP 29
15799: PPUSH
15800: LD_STRING 04_1_Kamil_L
15802: PPUSH
15803: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15807: LD_EXP 31
15811: PUSH
15812: LD_EXP 31
15816: PUSH
15817: LD_EXP 39
15821: IN
15822: NOT
15823: AND
15824: IFFALSE 15840
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15826: LD_EXP 31
15830: PPUSH
15831: LD_STRING 04_1_Sophia
15833: PPUSH
15834: CALL_OW 38
15838: GO 15858
// if Sophia then
15840: LD_EXP 31
15844: IFFALSE 15858
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15846: LD_EXP 31
15850: PPUSH
15851: LD_STRING 04_1_Sophia_L
15853: PPUSH
15854: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15858: LD_EXP 30
15862: PUSH
15863: LD_EXP 30
15867: PUSH
15868: LD_EXP 39
15872: IN
15873: NOT
15874: AND
15875: IFFALSE 15891
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15877: LD_EXP 30
15881: PPUSH
15882: LD_STRING 04_1_Kaia
15884: PPUSH
15885: CALL_OW 38
15889: GO 15909
// if Kaia then
15891: LD_EXP 30
15895: IFFALSE 15909
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15897: LD_EXP 30
15901: PPUSH
15902: LD_STRING 04_1_Kaia_L
15904: PPUSH
15905: CALL_OW 38
// if Givi then
15909: LD_EXP 26
15913: IFFALSE 15927
// SaveCharacters ( Givi , 04_1_Givi ) ;
15915: LD_EXP 26
15919: PPUSH
15920: LD_STRING 04_1_Givi
15922: PPUSH
15923: CALL_OW 38
// if Mike then
15927: LD_EXP 27
15931: IFFALSE 15945
// SaveCharacters ( Mike , 04_1_Mike ) ;
15933: LD_EXP 27
15937: PPUSH
15938: LD_STRING 04_1_Mike
15940: PPUSH
15941: CALL_OW 38
// if Markov then
15945: LD_EXP 32
15949: IFFALSE 15963
// SaveCharacters ( Markov , 04_1_Markov ) ;
15951: LD_EXP 32
15955: PPUSH
15956: LD_STRING 04_1_Markov
15958: PPUSH
15959: CALL_OW 38
// if Kurt then
15963: LD_EXP 34
15967: IFFALSE 15988
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15969: LD_EXP 34
15973: PPUSH
15974: LD_STRING 04_1_Kurt
15976: PPUSH
15977: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15981: LD_STRING enableBioCharacter(BIO_KURT)
15983: PPUSH
15984: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15988: LD_EXP 37
15992: PUSH
15993: LD_EXP 39
15997: DIFF
15998: IFFALSE 16018
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16000: LD_EXP 37
16004: PUSH
16005: LD_EXP 39
16009: DIFF
16010: PPUSH
16011: LD_STRING 04_1_others
16013: PPUSH
16014: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16018: LD_EXP 39
16022: PUSH
16023: LD_EXP 37
16027: AND
16028: IFFALSE 16113
// begin tmp := [ ] ;
16030: LD_ADDR_VAR 0 2
16034: PUSH
16035: EMPTY
16036: ST_TO_ADDR
// for i in heikeSecondSquad do
16037: LD_ADDR_VAR 0 1
16041: PUSH
16042: LD_EXP 37
16046: PUSH
16047: FOR_IN
16048: IFFALSE 16093
// if i in aviradzeSquad then
16050: LD_VAR 0 1
16054: PUSH
16055: LD_EXP 39
16059: IN
16060: IFFALSE 16091
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_VAR 0 2
16071: PPUSH
16072: LD_VAR 0 2
16076: PUSH
16077: LD_INT 1
16079: PLUS
16080: PPUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 1
16090: ST_TO_ADDR
16091: GO 16047
16093: POP
16094: POP
// if tmp then
16095: LD_VAR 0 2
16099: IFFALSE 16113
// SaveCharacters ( tmp , 04_1_others_L ) ;
16101: LD_VAR 0 2
16105: PPUSH
16106: LD_STRING 04_1_others_L
16108: PPUSH
16109: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: LD_INT 22
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 23
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PPUSH
16142: CALL_OW 69
16146: ST_TO_ADDR
// if tmp then
16147: LD_VAR 0 2
16151: IFFALSE 16165
// SaveCharacters ( tmp , 04_1_apes ) ;
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_STRING 04_1_apes
16160: PPUSH
16161: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16165: LD_ADDR_VAR 0 2
16169: PUSH
16170: LD_INT 17
16172: PPUSH
16173: LD_INT 21
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PPUSH
16183: CALL_OW 70
16187: ST_TO_ADDR
// if tmp then
16188: LD_VAR 0 2
16192: IFFALSE 16486
// begin tmp2 := [ ] ;
16194: LD_ADDR_VAR 0 3
16198: PUSH
16199: EMPTY
16200: ST_TO_ADDR
// for i in tmp do
16201: LD_ADDR_VAR 0 1
16205: PUSH
16206: LD_VAR 0 2
16210: PUSH
16211: FOR_IN
16212: IFFALSE 16472
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 264
16223: PUSH
16224: LD_INT 32
16226: PUSH
16227: LD_INT 12
16229: PUSH
16230: LD_INT 51
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: IN
16238: IFFALSE 16375
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: LD_INT 1
16252: PPUSH
16253: CALL_OW 289
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_INT 2
16265: PPUSH
16266: CALL_OW 289
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16275: LD_ADDR_VAR 0 3
16279: PUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_VAR 0 3
16289: PUSH
16290: LD_INT 1
16292: PLUS
16293: PPUSH
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 265
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 262
16313: PUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 263
16323: PUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 264
16333: PUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 248
16343: PUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 256
16353: PUSH
16354: LD_VAR 0 4
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 1
16372: ST_TO_ADDR
// end else
16373: GO 16470
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16375: LD_ADDR_VAR 0 3
16379: PUSH
16380: LD_VAR 0 3
16384: PPUSH
16385: LD_VAR 0 3
16389: PUSH
16390: LD_INT 1
16392: PLUS
16393: PPUSH
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 265
16403: PUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 262
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 263
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 264
16433: PUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 248
16443: PUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 256
16453: PUSH
16454: EMPTY
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PPUSH
16465: CALL_OW 1
16469: ST_TO_ADDR
16470: GO 16211
16472: POP
16473: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_STRING 04_1_Vehicles
16481: PPUSH
16482: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16486: LD_EXP 21
16490: PPUSH
16491: LD_STRING 04_1_RuLabCaptured
16493: PPUSH
16494: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16498: LD_EXP 19
16502: PPUSH
16503: LD_STRING 04_1_EscapeCounter
16505: PPUSH
16506: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16510: LD_EXP 15
16514: PPUSH
16515: LD_STRING 04_1_BaseHill
16517: PPUSH
16518: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16522: LD_OWVAR 1
16526: PPUSH
16527: LD_STRING 04_1_Time
16529: PPUSH
16530: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16534: LD_EXP 14
16538: PPUSH
16539: LD_STRING 04_1_DeadCounter
16541: PPUSH
16542: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16546: LD_EXP 24
16550: PUSH
16551: LD_INT 112
16553: PPUSH
16554: CALL_OW 255
16558: MUL
16559: PUSH
16560: LD_INT 2
16562: EQUAL
16563: PPUSH
16564: LD_STRING 04_1_KaganCaptured
16566: PPUSH
16567: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16571: LD_INT 22
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 34
16583: PUSH
16584: LD_INT 26
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: PUSH
16600: LD_INT 0
16602: PLUS
16603: PPUSH
16604: LD_STRING 04_1_Flamethrower
16606: PPUSH
16607: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16611: LD_INT 1
16613: PPUSH
16614: LD_STRING __x1\04_cont2
16616: PPUSH
16617: CALL_OW 340
// end ; end_of_file
16621: PPOPN 4
16623: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 266
16633: PUSH
16634: LD_INT 0
16636: EQUAL
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: LD_INT 2
16650: EQUAL
16651: AND
16652: IFFALSE 16662
// baseConstructed := true ;
16654: LD_ADDR_EXP 3
16658: PUSH
16659: LD_INT 1
16661: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 266
16671: PUSH
16672: LD_INT 6
16674: EQUAL
16675: PUSH
16676: LD_VAR 0 1
16680: PPUSH
16681: CALL_OW 255
16685: PUSH
16686: LD_INT 2
16688: EQUAL
16689: AND
16690: IFFALSE 16700
// labConstructed := true ;
16692: LD_ADDR_EXP 4
16696: PUSH
16697: LD_INT 1
16699: ST_TO_ADDR
// end ;
16700: PPOPN 1
16702: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL 33344 0 1
// if un = Heike then
16712: LD_VAR 0 1
16716: PUSH
16717: LD_EXP 25
16721: EQUAL
16722: IFFALSE 16731
// YouLost ( Heike ) ;
16724: LD_STRING Heike
16726: PPUSH
16727: CALL_OW 104
// if un = Omar then
16731: LD_VAR 0 1
16735: PUSH
16736: LD_EXP 33
16740: EQUAL
16741: IFFALSE 16750
// YouLost ( Omar ) ;
16743: LD_STRING Omar
16745: PPUSH
16746: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16750: LD_VAR 0 1
16754: PUSH
16755: LD_INT 22
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 23
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 21
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: IN
16795: IFFALSE 16811
// loseCounter := loseCounter + 1 ;
16797: LD_ADDR_EXP 14
16801: PUSH
16802: LD_EXP 14
16806: PUSH
16807: LD_INT 1
16809: PLUS
16810: ST_TO_ADDR
// if un = omikron then
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 64
16818: EQUAL
16819: IFFALSE 16829
// omicronFall := true ;
16821: LD_ADDR_EXP 13
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// if un = kirov then
16829: LD_VAR 0 1
16833: PUSH
16834: LD_INT 71
16836: EQUAL
16837: IFFALSE 16854
// begin ChangeMissionObjectives ( KirovDone ) ;
16839: LD_STRING KirovDone
16841: PPUSH
16842: CALL_OW 337
// kirovDestroyed := true ;
16846: LD_ADDR_EXP 16
16850: PUSH
16851: LD_INT 1
16853: ST_TO_ADDR
// end ; if un = beria then
16854: LD_VAR 0 1
16858: PUSH
16859: LD_INT 106
16861: EQUAL
16862: IFFALSE 16879
// begin ChangeMissionObjectives ( BeriaDone ) ;
16864: LD_STRING BeriaDone
16866: PPUSH
16867: CALL_OW 337
// beriaDestroyed := true ;
16871: LD_ADDR_EXP 17
16875: PUSH
16876: LD_INT 1
16878: ST_TO_ADDR
// end ; if un = kagan then
16879: LD_VAR 0 1
16883: PUSH
16884: LD_INT 112
16886: EQUAL
16887: IFFALSE 16897
// kaganDestroyed := true ;
16889: LD_ADDR_EXP 18
16893: PUSH
16894: LD_INT 1
16896: ST_TO_ADDR
// if un in russianPatrol then
16897: LD_VAR 0 1
16901: PUSH
16902: LD_EXP 47
16906: IN
16907: IFFALSE 16925
// russianPatrol := russianPatrol diff un ;
16909: LD_ADDR_EXP 47
16913: PUSH
16914: LD_EXP 47
16918: PUSH
16919: LD_VAR 0 1
16923: DIFF
16924: ST_TO_ADDR
// if un in russianOmicronAttackers then
16925: LD_VAR 0 1
16929: PUSH
16930: LD_EXP 48
16934: IN
16935: IFFALSE 16953
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16937: LD_ADDR_EXP 48
16941: PUSH
16942: LD_EXP 48
16946: PUSH
16947: LD_VAR 0 1
16951: DIFF
16952: ST_TO_ADDR
// end ;
16953: PPOPN 1
16955: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16956: LD_INT 0
16958: PPUSH
16959: PPUSH
16960: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16961: LD_VAR 0 1
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 22
16971: PUSH
16972: LD_INT 3
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 22
16981: PUSH
16982: LD_INT 4
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_INT 6
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 30
17007: PUSH
17008: LD_INT 32
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PPUSH
17019: CALL_OW 69
17023: IN
17024: IFFALSE 17197
// begin sol := UnitsInside ( un ) ;
17026: LD_ADDR_VAR 0 3
17030: PUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL_OW 313
17040: ST_TO_ADDR
// if not sol then
17041: LD_VAR 0 3
17045: NOT
17046: IFFALSE 17050
// exit ;
17048: GO 17197
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17050: LD_ADDR_VAR 0 4
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 255
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 30
17077: PUSH
17078: LD_INT 4
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: LD_INT 5
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PPUSH
17104: CALL_OW 69
17108: ST_TO_ADDR
// if not nearestBarracks then
17109: LD_VAR 0 4
17113: NOT
17114: IFFALSE 17118
// exit ;
17116: GO 17197
// for i in nearestBarracks do
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_VAR 0 4
17127: PUSH
17128: FOR_IN
17129: IFFALSE 17164
// if UnitsInside ( i ) = 6 then
17131: LD_VAR 0 2
17135: PPUSH
17136: CALL_OW 313
17140: PUSH
17141: LD_INT 6
17143: EQUAL
17144: IFFALSE 17162
// nearestBarracks := nearestBarracks diff i ;
17146: LD_ADDR_VAR 0 4
17150: PUSH
17151: LD_VAR 0 4
17155: PUSH
17156: LD_VAR 0 2
17160: DIFF
17161: ST_TO_ADDR
17162: GO 17128
17164: POP
17165: POP
// if not nearestBarracks then
17166: LD_VAR 0 4
17170: NOT
17171: IFFALSE 17175
// exit ;
17173: GO 17197
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17175: LD_VAR 0 3
17179: PUSH
17180: LD_INT 1
17182: ARRAY
17183: PPUSH
17184: LD_VAR 0 4
17188: PUSH
17189: LD_INT 1
17191: ARRAY
17192: PPUSH
17193: CALL_OW 120
// end ; end ;
17197: PPOPN 4
17199: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17200: LD_INT 0
17202: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17203: LD_EXP 8
17207: NOT
17208: PUSH
17209: LD_EXP 5
17213: NOT
17214: OR
17215: IFFALSE 17219
// exit ;
17217: GO 17287
// for i in camAreas do
17219: LD_ADDR_VAR 0 5
17223: PUSH
17224: LD_EXP 8
17228: PUSH
17229: FOR_IN
17230: IFFALSE 17285
// if InArea ( x , y , i ) then
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_VAR 0 4
17241: PPUSH
17242: LD_VAR 0 5
17246: PPUSH
17247: CALL_OW 309
17251: IFFALSE 17283
// begin SetAreaMapShow ( i , 0 ) ;
17253: LD_VAR 0 5
17257: PPUSH
17258: LD_INT 0
17260: PPUSH
17261: CALL_OW 424
// camAreas := camAreas diff i ;
17265: LD_ADDR_EXP 8
17269: PUSH
17270: LD_EXP 8
17274: PUSH
17275: LD_VAR 0 5
17279: DIFF
17280: ST_TO_ADDR
// break ;
17281: GO 17285
// end ;
17283: GO 17229
17285: POP
17286: POP
// end ;
17287: PPOPN 5
17289: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17290: LD_VAR 0 1
17294: PUSH
17295: LD_INT 2
17297: EQUAL
17298: PUSH
17299: LD_VAR 0 2
17303: PUSH
17304: LD_INT 5
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: IN
17314: AND
17315: IFFALSE 17324
// YouLost ( Ally ) ;
17317: LD_STRING Ally
17319: PPUSH
17320: CALL_OW 104
// end ;
17324: PPOPN 2
17326: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17327: LD_VAR 0 1
17331: PUSH
17332: LD_EXP 30
17336: EQUAL
17337: PUSH
17338: LD_VAR 0 2
17342: PUSH
17343: LD_INT 3
17345: PUSH
17346: LD_INT 6
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: IN
17353: AND
17354: IFFALSE 17385
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17356: LD_ADDR_EXP 23
17360: PUSH
17361: LD_VAR 0 1
17365: PPUSH
17366: CALL_OW 250
17370: PUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: CALL_OW 251
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: ST_TO_ADDR
// end ;
17385: PPOPN 3
17387: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_VAR 0 2
17397: PPUSH
17398: CALL 33464 0 2
// end ; end_of_file
17402: PPOPN 2
17404: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17405: LD_EXP 11
17409: NOT
17410: PUSH
17411: LD_INT 12
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 287
17421: PUSH
17422: LD_INT 20
17424: PUSH
17425: LD_INT 16
17427: PUSH
17428: LD_INT 12
17430: PUSH
17431: LD_INT 10
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: LD_OWVAR 67
17444: ARRAY
17445: LESS
17446: AND
17447: IFFALSE 17474
17449: GO 17451
17451: DISABLE
// begin enable ;
17452: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17453: LD_INT 1
17455: PPUSH
17456: LD_INT 5
17458: PPUSH
17459: CALL_OW 12
17463: PPUSH
17464: LD_INT 12
17466: PPUSH
17467: LD_INT 1
17469: PPUSH
17470: CALL_OW 55
// end ; end_of_file
17474: END
// every 0 0$1 trigger omarCountdown do
17475: LD_EXP 22
17479: IFFALSE 17531
17481: GO 17483
17483: DISABLE
// begin enable ;
17484: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17485: LD_ADDR_OWVAR 47
17489: PUSH
17490: LD_STRING #X104-1
17492: PUSH
17493: LD_EXP 22
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17502: LD_ADDR_EXP 22
17506: PUSH
17507: LD_EXP 22
17511: PUSH
17512: LD_INT 35
17514: MINUS
17515: ST_TO_ADDR
// if not omarCountdown then
17516: LD_EXP 22
17520: NOT
17521: IFFALSE 17531
// display_strings :=  ;
17523: LD_ADDR_OWVAR 47
17527: PUSH
17528: LD_STRING 
17530: ST_TO_ADDR
// end ; end_of_file
17531: END
// every 0 0$1 do
17532: GO 17534
17534: DISABLE
// begin enable ;
17535: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17536: LD_STRING updateTimer(
17538: PUSH
17539: LD_OWVAR 1
17543: STR
17544: PUSH
17545: LD_STRING );
17547: STR
17548: PPUSH
17549: CALL_OW 559
// end ;
17553: END
// export function SOS_MapStart ( ) ; begin
17554: LD_INT 0
17556: PPUSH
// if streamModeActive then
17557: LD_EXP 52
17561: IFFALSE 17570
// DefineStreamItems ( true ) ;
17563: LD_INT 1
17565: PPUSH
17566: CALL 19224 0 1
// UpdateFactoryWaypoints ( ) ;
17570: CALL 32085 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17574: CALL 32342 0 0
// end ;
17578: LD_VAR 0 1
17582: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17583: LD_INT 0
17585: PPUSH
// if p2 = hack_mode then
17586: LD_VAR 0 2
17590: PUSH
17591: LD_INT 100
17593: EQUAL
17594: IFFALSE 18597
// begin if not StreamModeActive then
17596: LD_EXP 52
17600: NOT
17601: IFFALSE 17611
// StreamModeActive := true ;
17603: LD_ADDR_EXP 52
17607: PUSH
17608: LD_INT 1
17610: ST_TO_ADDR
// if p3 = 0 then
17611: LD_VAR 0 3
17615: PUSH
17616: LD_INT 0
17618: EQUAL
17619: IFFALSE 17625
// InitStreamMode ;
17621: CALL 18760 0 0
// if p3 = 1 then
17625: LD_VAR 0 3
17629: PUSH
17630: LD_INT 1
17632: EQUAL
17633: IFFALSE 17643
// sRocket := true ;
17635: LD_ADDR_EXP 57
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// if p3 = 2 then
17643: LD_VAR 0 3
17647: PUSH
17648: LD_INT 2
17650: EQUAL
17651: IFFALSE 17661
// sSpeed := true ;
17653: LD_ADDR_EXP 56
17657: PUSH
17658: LD_INT 1
17660: ST_TO_ADDR
// if p3 = 3 then
17661: LD_VAR 0 3
17665: PUSH
17666: LD_INT 3
17668: EQUAL
17669: IFFALSE 17679
// sEngine := true ;
17671: LD_ADDR_EXP 58
17675: PUSH
17676: LD_INT 1
17678: ST_TO_ADDR
// if p3 = 4 then
17679: LD_VAR 0 3
17683: PUSH
17684: LD_INT 4
17686: EQUAL
17687: IFFALSE 17697
// sSpec := true ;
17689: LD_ADDR_EXP 55
17693: PUSH
17694: LD_INT 1
17696: ST_TO_ADDR
// if p3 = 5 then
17697: LD_VAR 0 3
17701: PUSH
17702: LD_INT 5
17704: EQUAL
17705: IFFALSE 17715
// sLevel := true ;
17707: LD_ADDR_EXP 59
17711: PUSH
17712: LD_INT 1
17714: ST_TO_ADDR
// if p3 = 6 then
17715: LD_VAR 0 3
17719: PUSH
17720: LD_INT 6
17722: EQUAL
17723: IFFALSE 17733
// sArmoury := true ;
17725: LD_ADDR_EXP 60
17729: PUSH
17730: LD_INT 1
17732: ST_TO_ADDR
// if p3 = 7 then
17733: LD_VAR 0 3
17737: PUSH
17738: LD_INT 7
17740: EQUAL
17741: IFFALSE 17751
// sRadar := true ;
17743: LD_ADDR_EXP 61
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
// if p3 = 8 then
17751: LD_VAR 0 3
17755: PUSH
17756: LD_INT 8
17758: EQUAL
17759: IFFALSE 17769
// sBunker := true ;
17761: LD_ADDR_EXP 62
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
// if p3 = 9 then
17769: LD_VAR 0 3
17773: PUSH
17774: LD_INT 9
17776: EQUAL
17777: IFFALSE 17787
// sHack := true ;
17779: LD_ADDR_EXP 63
17783: PUSH
17784: LD_INT 1
17786: ST_TO_ADDR
// if p3 = 10 then
17787: LD_VAR 0 3
17791: PUSH
17792: LD_INT 10
17794: EQUAL
17795: IFFALSE 17805
// sFire := true ;
17797: LD_ADDR_EXP 64
17801: PUSH
17802: LD_INT 1
17804: ST_TO_ADDR
// if p3 = 11 then
17805: LD_VAR 0 3
17809: PUSH
17810: LD_INT 11
17812: EQUAL
17813: IFFALSE 17823
// sRefresh := true ;
17815: LD_ADDR_EXP 65
17819: PUSH
17820: LD_INT 1
17822: ST_TO_ADDR
// if p3 = 12 then
17823: LD_VAR 0 3
17827: PUSH
17828: LD_INT 12
17830: EQUAL
17831: IFFALSE 17841
// sExp := true ;
17833: LD_ADDR_EXP 66
17837: PUSH
17838: LD_INT 1
17840: ST_TO_ADDR
// if p3 = 13 then
17841: LD_VAR 0 3
17845: PUSH
17846: LD_INT 13
17848: EQUAL
17849: IFFALSE 17859
// sDepot := true ;
17851: LD_ADDR_EXP 67
17855: PUSH
17856: LD_INT 1
17858: ST_TO_ADDR
// if p3 = 14 then
17859: LD_VAR 0 3
17863: PUSH
17864: LD_INT 14
17866: EQUAL
17867: IFFALSE 17877
// sFlag := true ;
17869: LD_ADDR_EXP 68
17873: PUSH
17874: LD_INT 1
17876: ST_TO_ADDR
// if p3 = 15 then
17877: LD_VAR 0 3
17881: PUSH
17882: LD_INT 15
17884: EQUAL
17885: IFFALSE 17895
// sKamikadze := true ;
17887: LD_ADDR_EXP 76
17891: PUSH
17892: LD_INT 1
17894: ST_TO_ADDR
// if p3 = 16 then
17895: LD_VAR 0 3
17899: PUSH
17900: LD_INT 16
17902: EQUAL
17903: IFFALSE 17913
// sTroll := true ;
17905: LD_ADDR_EXP 77
17909: PUSH
17910: LD_INT 1
17912: ST_TO_ADDR
// if p3 = 17 then
17913: LD_VAR 0 3
17917: PUSH
17918: LD_INT 17
17920: EQUAL
17921: IFFALSE 17931
// sSlow := true ;
17923: LD_ADDR_EXP 78
17927: PUSH
17928: LD_INT 1
17930: ST_TO_ADDR
// if p3 = 18 then
17931: LD_VAR 0 3
17935: PUSH
17936: LD_INT 18
17938: EQUAL
17939: IFFALSE 17949
// sLack := true ;
17941: LD_ADDR_EXP 79
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if p3 = 19 then
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 19
17956: EQUAL
17957: IFFALSE 17967
// sTank := true ;
17959: LD_ADDR_EXP 81
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
// if p3 = 20 then
17967: LD_VAR 0 3
17971: PUSH
17972: LD_INT 20
17974: EQUAL
17975: IFFALSE 17985
// sRemote := true ;
17977: LD_ADDR_EXP 82
17981: PUSH
17982: LD_INT 1
17984: ST_TO_ADDR
// if p3 = 21 then
17985: LD_VAR 0 3
17989: PUSH
17990: LD_INT 21
17992: EQUAL
17993: IFFALSE 18003
// sPowell := true ;
17995: LD_ADDR_EXP 83
17999: PUSH
18000: LD_INT 1
18002: ST_TO_ADDR
// if p3 = 22 then
18003: LD_VAR 0 3
18007: PUSH
18008: LD_INT 22
18010: EQUAL
18011: IFFALSE 18021
// sTeleport := true ;
18013: LD_ADDR_EXP 86
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// if p3 = 23 then
18021: LD_VAR 0 3
18025: PUSH
18026: LD_INT 23
18028: EQUAL
18029: IFFALSE 18039
// sOilTower := true ;
18031: LD_ADDR_EXP 88
18035: PUSH
18036: LD_INT 1
18038: ST_TO_ADDR
// if p3 = 24 then
18039: LD_VAR 0 3
18043: PUSH
18044: LD_INT 24
18046: EQUAL
18047: IFFALSE 18057
// sShovel := true ;
18049: LD_ADDR_EXP 89
18053: PUSH
18054: LD_INT 1
18056: ST_TO_ADDR
// if p3 = 25 then
18057: LD_VAR 0 3
18061: PUSH
18062: LD_INT 25
18064: EQUAL
18065: IFFALSE 18075
// sSheik := true ;
18067: LD_ADDR_EXP 90
18071: PUSH
18072: LD_INT 1
18074: ST_TO_ADDR
// if p3 = 26 then
18075: LD_VAR 0 3
18079: PUSH
18080: LD_INT 26
18082: EQUAL
18083: IFFALSE 18093
// sEarthquake := true ;
18085: LD_ADDR_EXP 92
18089: PUSH
18090: LD_INT 1
18092: ST_TO_ADDR
// if p3 = 27 then
18093: LD_VAR 0 3
18097: PUSH
18098: LD_INT 27
18100: EQUAL
18101: IFFALSE 18111
// sAI := true ;
18103: LD_ADDR_EXP 93
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// if p3 = 28 then
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 28
18118: EQUAL
18119: IFFALSE 18129
// sCargo := true ;
18121: LD_ADDR_EXP 96
18125: PUSH
18126: LD_INT 1
18128: ST_TO_ADDR
// if p3 = 29 then
18129: LD_VAR 0 3
18133: PUSH
18134: LD_INT 29
18136: EQUAL
18137: IFFALSE 18147
// sDLaser := true ;
18139: LD_ADDR_EXP 97
18143: PUSH
18144: LD_INT 1
18146: ST_TO_ADDR
// if p3 = 30 then
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 30
18154: EQUAL
18155: IFFALSE 18165
// sExchange := true ;
18157: LD_ADDR_EXP 98
18161: PUSH
18162: LD_INT 1
18164: ST_TO_ADDR
// if p3 = 31 then
18165: LD_VAR 0 3
18169: PUSH
18170: LD_INT 31
18172: EQUAL
18173: IFFALSE 18183
// sFac := true ;
18175: LD_ADDR_EXP 99
18179: PUSH
18180: LD_INT 1
18182: ST_TO_ADDR
// if p3 = 32 then
18183: LD_VAR 0 3
18187: PUSH
18188: LD_INT 32
18190: EQUAL
18191: IFFALSE 18201
// sPower := true ;
18193: LD_ADDR_EXP 100
18197: PUSH
18198: LD_INT 1
18200: ST_TO_ADDR
// if p3 = 33 then
18201: LD_VAR 0 3
18205: PUSH
18206: LD_INT 33
18208: EQUAL
18209: IFFALSE 18219
// sRandom := true ;
18211: LD_ADDR_EXP 101
18215: PUSH
18216: LD_INT 1
18218: ST_TO_ADDR
// if p3 = 34 then
18219: LD_VAR 0 3
18223: PUSH
18224: LD_INT 34
18226: EQUAL
18227: IFFALSE 18237
// sShield := true ;
18229: LD_ADDR_EXP 102
18233: PUSH
18234: LD_INT 1
18236: ST_TO_ADDR
// if p3 = 35 then
18237: LD_VAR 0 3
18241: PUSH
18242: LD_INT 35
18244: EQUAL
18245: IFFALSE 18255
// sTime := true ;
18247: LD_ADDR_EXP 103
18251: PUSH
18252: LD_INT 1
18254: ST_TO_ADDR
// if p3 = 36 then
18255: LD_VAR 0 3
18259: PUSH
18260: LD_INT 36
18262: EQUAL
18263: IFFALSE 18273
// sTools := true ;
18265: LD_ADDR_EXP 104
18269: PUSH
18270: LD_INT 1
18272: ST_TO_ADDR
// if p3 = 101 then
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 101
18280: EQUAL
18281: IFFALSE 18291
// sSold := true ;
18283: LD_ADDR_EXP 69
18287: PUSH
18288: LD_INT 1
18290: ST_TO_ADDR
// if p3 = 102 then
18291: LD_VAR 0 3
18295: PUSH
18296: LD_INT 102
18298: EQUAL
18299: IFFALSE 18309
// sDiff := true ;
18301: LD_ADDR_EXP 70
18305: PUSH
18306: LD_INT 1
18308: ST_TO_ADDR
// if p3 = 103 then
18309: LD_VAR 0 3
18313: PUSH
18314: LD_INT 103
18316: EQUAL
18317: IFFALSE 18327
// sFog := true ;
18319: LD_ADDR_EXP 73
18323: PUSH
18324: LD_INT 1
18326: ST_TO_ADDR
// if p3 = 104 then
18327: LD_VAR 0 3
18331: PUSH
18332: LD_INT 104
18334: EQUAL
18335: IFFALSE 18345
// sReset := true ;
18337: LD_ADDR_EXP 74
18341: PUSH
18342: LD_INT 1
18344: ST_TO_ADDR
// if p3 = 105 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 105
18352: EQUAL
18353: IFFALSE 18363
// sSun := true ;
18355: LD_ADDR_EXP 75
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// if p3 = 106 then
18363: LD_VAR 0 3
18367: PUSH
18368: LD_INT 106
18370: EQUAL
18371: IFFALSE 18381
// sTiger := true ;
18373: LD_ADDR_EXP 71
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if p3 = 107 then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 107
18388: EQUAL
18389: IFFALSE 18399
// sBomb := true ;
18391: LD_ADDR_EXP 72
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// if p3 = 108 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 108
18406: EQUAL
18407: IFFALSE 18417
// sWound := true ;
18409: LD_ADDR_EXP 80
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// if p3 = 109 then
18417: LD_VAR 0 3
18421: PUSH
18422: LD_INT 109
18424: EQUAL
18425: IFFALSE 18435
// sBetray := true ;
18427: LD_ADDR_EXP 84
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// if p3 = 110 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 110
18442: EQUAL
18443: IFFALSE 18453
// sContamin := true ;
18445: LD_ADDR_EXP 85
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if p3 = 111 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 111
18460: EQUAL
18461: IFFALSE 18471
// sOil := true ;
18463: LD_ADDR_EXP 87
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// if p3 = 112 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_INT 112
18478: EQUAL
18479: IFFALSE 18489
// sStu := true ;
18481: LD_ADDR_EXP 91
18485: PUSH
18486: LD_INT 1
18488: ST_TO_ADDR
// if p3 = 113 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 113
18496: EQUAL
18497: IFFALSE 18507
// sBazooka := true ;
18499: LD_ADDR_EXP 94
18503: PUSH
18504: LD_INT 1
18506: ST_TO_ADDR
// if p3 = 114 then
18507: LD_VAR 0 3
18511: PUSH
18512: LD_INT 114
18514: EQUAL
18515: IFFALSE 18525
// sMortar := true ;
18517: LD_ADDR_EXP 95
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if p3 = 115 then
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 115
18532: EQUAL
18533: IFFALSE 18543
// sRanger := true ;
18535: LD_ADDR_EXP 105
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// if p3 = 116 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 116
18550: EQUAL
18551: IFFALSE 18561
// sComputer := true ;
18553: LD_ADDR_EXP 106
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// if p3 = 117 then
18561: LD_VAR 0 3
18565: PUSH
18566: LD_INT 117
18568: EQUAL
18569: IFFALSE 18579
// s30 := true ;
18571: LD_ADDR_EXP 107
18575: PUSH
18576: LD_INT 1
18578: ST_TO_ADDR
// if p3 = 118 then
18579: LD_VAR 0 3
18583: PUSH
18584: LD_INT 118
18586: EQUAL
18587: IFFALSE 18597
// s60 := true ;
18589: LD_ADDR_EXP 108
18593: PUSH
18594: LD_INT 1
18596: ST_TO_ADDR
// end ; if p2 = stream_mode then
18597: LD_VAR 0 2
18601: PUSH
18602: LD_INT 101
18604: EQUAL
18605: IFFALSE 18733
// begin case p3 of 1 :
18607: LD_VAR 0 3
18611: PUSH
18612: LD_INT 1
18614: DOUBLE
18615: EQUAL
18616: IFTRUE 18620
18618: GO 18627
18620: POP
// hHackUnlimitedResources ; 2 :
18621: CALL 30831 0 0
18625: GO 18733
18627: LD_INT 2
18629: DOUBLE
18630: EQUAL
18631: IFTRUE 18635
18633: GO 18642
18635: POP
// hHackSetLevel10 ; 3 :
18636: CALL 30964 0 0
18640: GO 18733
18642: LD_INT 3
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18657
18650: POP
// hHackSetLevel10YourUnits ; 4 :
18651: CALL 31049 0 0
18655: GO 18733
18657: LD_INT 4
18659: DOUBLE
18660: EQUAL
18661: IFTRUE 18665
18663: GO 18672
18665: POP
// hHackInvincible ; 5 :
18666: CALL 31497 0 0
18670: GO 18733
18672: LD_INT 5
18674: DOUBLE
18675: EQUAL
18676: IFTRUE 18680
18678: GO 18687
18680: POP
// hHackInvisible ; 6 :
18681: CALL 31608 0 0
18685: GO 18733
18687: LD_INT 6
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18702
18695: POP
// hHackChangeYourSide ; 7 :
18696: CALL 31665 0 0
18700: GO 18733
18702: LD_INT 7
18704: DOUBLE
18705: EQUAL
18706: IFTRUE 18710
18708: GO 18717
18710: POP
// hHackChangeUnitSide ; 8 :
18711: CALL 31707 0 0
18715: GO 18733
18717: LD_INT 8
18719: DOUBLE
18720: EQUAL
18721: IFTRUE 18725
18723: GO 18732
18725: POP
// hHackFog ; end ;
18726: CALL 31808 0 0
18730: GO 18733
18732: POP
// end ; end ;
18733: LD_VAR 0 7
18737: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18738: GO 18740
18740: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18741: LD_STRING initStreamRollete();
18743: PPUSH
18744: CALL_OW 559
// InitStreamMode ;
18748: CALL 18760 0 0
// DefineStreamItems ( false ) ;
18752: LD_INT 0
18754: PPUSH
18755: CALL 19224 0 1
// end ;
18759: END
// function InitStreamMode ; begin
18760: LD_INT 0
18762: PPUSH
// streamModeActive := false ;
18763: LD_ADDR_EXP 52
18767: PUSH
18768: LD_INT 0
18770: ST_TO_ADDR
// normalCounter := 36 ;
18771: LD_ADDR_EXP 53
18775: PUSH
18776: LD_INT 36
18778: ST_TO_ADDR
// hardcoreCounter := 18 ;
18779: LD_ADDR_EXP 54
18783: PUSH
18784: LD_INT 18
18786: ST_TO_ADDR
// sRocket := false ;
18787: LD_ADDR_EXP 57
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// sSpeed := false ;
18795: LD_ADDR_EXP 56
18799: PUSH
18800: LD_INT 0
18802: ST_TO_ADDR
// sEngine := false ;
18803: LD_ADDR_EXP 58
18807: PUSH
18808: LD_INT 0
18810: ST_TO_ADDR
// sSpec := false ;
18811: LD_ADDR_EXP 55
18815: PUSH
18816: LD_INT 0
18818: ST_TO_ADDR
// sLevel := false ;
18819: LD_ADDR_EXP 59
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// sArmoury := false ;
18827: LD_ADDR_EXP 60
18831: PUSH
18832: LD_INT 0
18834: ST_TO_ADDR
// sRadar := false ;
18835: LD_ADDR_EXP 61
18839: PUSH
18840: LD_INT 0
18842: ST_TO_ADDR
// sBunker := false ;
18843: LD_ADDR_EXP 62
18847: PUSH
18848: LD_INT 0
18850: ST_TO_ADDR
// sHack := false ;
18851: LD_ADDR_EXP 63
18855: PUSH
18856: LD_INT 0
18858: ST_TO_ADDR
// sFire := false ;
18859: LD_ADDR_EXP 64
18863: PUSH
18864: LD_INT 0
18866: ST_TO_ADDR
// sRefresh := false ;
18867: LD_ADDR_EXP 65
18871: PUSH
18872: LD_INT 0
18874: ST_TO_ADDR
// sExp := false ;
18875: LD_ADDR_EXP 66
18879: PUSH
18880: LD_INT 0
18882: ST_TO_ADDR
// sDepot := false ;
18883: LD_ADDR_EXP 67
18887: PUSH
18888: LD_INT 0
18890: ST_TO_ADDR
// sFlag := false ;
18891: LD_ADDR_EXP 68
18895: PUSH
18896: LD_INT 0
18898: ST_TO_ADDR
// sKamikadze := false ;
18899: LD_ADDR_EXP 76
18903: PUSH
18904: LD_INT 0
18906: ST_TO_ADDR
// sTroll := false ;
18907: LD_ADDR_EXP 77
18911: PUSH
18912: LD_INT 0
18914: ST_TO_ADDR
// sSlow := false ;
18915: LD_ADDR_EXP 78
18919: PUSH
18920: LD_INT 0
18922: ST_TO_ADDR
// sLack := false ;
18923: LD_ADDR_EXP 79
18927: PUSH
18928: LD_INT 0
18930: ST_TO_ADDR
// sTank := false ;
18931: LD_ADDR_EXP 81
18935: PUSH
18936: LD_INT 0
18938: ST_TO_ADDR
// sRemote := false ;
18939: LD_ADDR_EXP 82
18943: PUSH
18944: LD_INT 0
18946: ST_TO_ADDR
// sPowell := false ;
18947: LD_ADDR_EXP 83
18951: PUSH
18952: LD_INT 0
18954: ST_TO_ADDR
// sTeleport := false ;
18955: LD_ADDR_EXP 86
18959: PUSH
18960: LD_INT 0
18962: ST_TO_ADDR
// sOilTower := false ;
18963: LD_ADDR_EXP 88
18967: PUSH
18968: LD_INT 0
18970: ST_TO_ADDR
// sShovel := false ;
18971: LD_ADDR_EXP 89
18975: PUSH
18976: LD_INT 0
18978: ST_TO_ADDR
// sSheik := false ;
18979: LD_ADDR_EXP 90
18983: PUSH
18984: LD_INT 0
18986: ST_TO_ADDR
// sEarthquake := false ;
18987: LD_ADDR_EXP 92
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// sAI := false ;
18995: LD_ADDR_EXP 93
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
// sCargo := false ;
19003: LD_ADDR_EXP 96
19007: PUSH
19008: LD_INT 0
19010: ST_TO_ADDR
// sDLaser := false ;
19011: LD_ADDR_EXP 97
19015: PUSH
19016: LD_INT 0
19018: ST_TO_ADDR
// sExchange := false ;
19019: LD_ADDR_EXP 98
19023: PUSH
19024: LD_INT 0
19026: ST_TO_ADDR
// sFac := false ;
19027: LD_ADDR_EXP 99
19031: PUSH
19032: LD_INT 0
19034: ST_TO_ADDR
// sPower := false ;
19035: LD_ADDR_EXP 100
19039: PUSH
19040: LD_INT 0
19042: ST_TO_ADDR
// sRandom := false ;
19043: LD_ADDR_EXP 101
19047: PUSH
19048: LD_INT 0
19050: ST_TO_ADDR
// sShield := false ;
19051: LD_ADDR_EXP 102
19055: PUSH
19056: LD_INT 0
19058: ST_TO_ADDR
// sTime := false ;
19059: LD_ADDR_EXP 103
19063: PUSH
19064: LD_INT 0
19066: ST_TO_ADDR
// sTools := false ;
19067: LD_ADDR_EXP 104
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// sSold := false ;
19075: LD_ADDR_EXP 69
19079: PUSH
19080: LD_INT 0
19082: ST_TO_ADDR
// sDiff := false ;
19083: LD_ADDR_EXP 70
19087: PUSH
19088: LD_INT 0
19090: ST_TO_ADDR
// sFog := false ;
19091: LD_ADDR_EXP 73
19095: PUSH
19096: LD_INT 0
19098: ST_TO_ADDR
// sReset := false ;
19099: LD_ADDR_EXP 74
19103: PUSH
19104: LD_INT 0
19106: ST_TO_ADDR
// sSun := false ;
19107: LD_ADDR_EXP 75
19111: PUSH
19112: LD_INT 0
19114: ST_TO_ADDR
// sTiger := false ;
19115: LD_ADDR_EXP 71
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// sBomb := false ;
19123: LD_ADDR_EXP 72
19127: PUSH
19128: LD_INT 0
19130: ST_TO_ADDR
// sWound := false ;
19131: LD_ADDR_EXP 80
19135: PUSH
19136: LD_INT 0
19138: ST_TO_ADDR
// sBetray := false ;
19139: LD_ADDR_EXP 84
19143: PUSH
19144: LD_INT 0
19146: ST_TO_ADDR
// sContamin := false ;
19147: LD_ADDR_EXP 85
19151: PUSH
19152: LD_INT 0
19154: ST_TO_ADDR
// sOil := false ;
19155: LD_ADDR_EXP 87
19159: PUSH
19160: LD_INT 0
19162: ST_TO_ADDR
// sStu := false ;
19163: LD_ADDR_EXP 91
19167: PUSH
19168: LD_INT 0
19170: ST_TO_ADDR
// sBazooka := false ;
19171: LD_ADDR_EXP 94
19175: PUSH
19176: LD_INT 0
19178: ST_TO_ADDR
// sMortar := false ;
19179: LD_ADDR_EXP 95
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// sRanger := false ;
19187: LD_ADDR_EXP 105
19191: PUSH
19192: LD_INT 0
19194: ST_TO_ADDR
// sComputer := false ;
19195: LD_ADDR_EXP 106
19199: PUSH
19200: LD_INT 0
19202: ST_TO_ADDR
// s30 := false ;
19203: LD_ADDR_EXP 107
19207: PUSH
19208: LD_INT 0
19210: ST_TO_ADDR
// s60 := false ;
19211: LD_ADDR_EXP 108
19215: PUSH
19216: LD_INT 0
19218: ST_TO_ADDR
// end ;
19219: LD_VAR 0 1
19223: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
// result := [ ] ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: EMPTY
19239: ST_TO_ADDR
// if campaign_id = 1 then
19240: LD_OWVAR 69
19244: PUSH
19245: LD_INT 1
19247: EQUAL
19248: IFFALSE 22414
// begin case mission_number of 1 :
19250: LD_OWVAR 70
19254: PUSH
19255: LD_INT 1
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19339
19263: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19264: LD_ADDR_VAR 0 2
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: LD_INT 4
19274: PUSH
19275: LD_INT 11
19277: PUSH
19278: LD_INT 12
19280: PUSH
19281: LD_INT 15
19283: PUSH
19284: LD_INT 16
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_INT 23
19292: PUSH
19293: LD_INT 26
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 101
19309: PUSH
19310: LD_INT 102
19312: PUSH
19313: LD_INT 106
19315: PUSH
19316: LD_INT 116
19318: PUSH
19319: LD_INT 117
19321: PUSH
19322: LD_INT 118
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: ST_TO_ADDR
19337: GO 22412
19339: LD_INT 2
19341: DOUBLE
19342: EQUAL
19343: IFTRUE 19347
19345: GO 19431
19347: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19348: LD_ADDR_VAR 0 2
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 4
19358: PUSH
19359: LD_INT 11
19361: PUSH
19362: LD_INT 12
19364: PUSH
19365: LD_INT 15
19367: PUSH
19368: LD_INT 16
19370: PUSH
19371: LD_INT 22
19373: PUSH
19374: LD_INT 23
19376: PUSH
19377: LD_INT 26
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 101
19393: PUSH
19394: LD_INT 102
19396: PUSH
19397: LD_INT 105
19399: PUSH
19400: LD_INT 106
19402: PUSH
19403: LD_INT 108
19405: PUSH
19406: LD_INT 116
19408: PUSH
19409: LD_INT 117
19411: PUSH
19412: LD_INT 118
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: ST_TO_ADDR
19429: GO 22412
19431: LD_INT 3
19433: DOUBLE
19434: EQUAL
19435: IFTRUE 19439
19437: GO 19527
19439: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 4
19450: PUSH
19451: LD_INT 5
19453: PUSH
19454: LD_INT 11
19456: PUSH
19457: LD_INT 12
19459: PUSH
19460: LD_INT 15
19462: PUSH
19463: LD_INT 16
19465: PUSH
19466: LD_INT 22
19468: PUSH
19469: LD_INT 26
19471: PUSH
19472: LD_INT 36
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 101
19489: PUSH
19490: LD_INT 102
19492: PUSH
19493: LD_INT 105
19495: PUSH
19496: LD_INT 106
19498: PUSH
19499: LD_INT 108
19501: PUSH
19502: LD_INT 116
19504: PUSH
19505: LD_INT 117
19507: PUSH
19508: LD_INT 118
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: ST_TO_ADDR
19525: GO 22412
19527: LD_INT 4
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19631
19535: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 4
19546: PUSH
19547: LD_INT 5
19549: PUSH
19550: LD_INT 8
19552: PUSH
19553: LD_INT 11
19555: PUSH
19556: LD_INT 12
19558: PUSH
19559: LD_INT 15
19561: PUSH
19562: LD_INT 16
19564: PUSH
19565: LD_INT 22
19567: PUSH
19568: LD_INT 23
19570: PUSH
19571: LD_INT 26
19573: PUSH
19574: LD_INT 36
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 101
19593: PUSH
19594: LD_INT 102
19596: PUSH
19597: LD_INT 105
19599: PUSH
19600: LD_INT 106
19602: PUSH
19603: LD_INT 108
19605: PUSH
19606: LD_INT 116
19608: PUSH
19609: LD_INT 117
19611: PUSH
19612: LD_INT 118
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: ST_TO_ADDR
19629: GO 22412
19631: LD_INT 5
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19751
19639: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19640: LD_ADDR_VAR 0 2
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: LD_INT 4
19650: PUSH
19651: LD_INT 5
19653: PUSH
19654: LD_INT 6
19656: PUSH
19657: LD_INT 8
19659: PUSH
19660: LD_INT 11
19662: PUSH
19663: LD_INT 12
19665: PUSH
19666: LD_INT 15
19668: PUSH
19669: LD_INT 16
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 25
19680: PUSH
19681: LD_INT 26
19683: PUSH
19684: LD_INT 36
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 101
19705: PUSH
19706: LD_INT 102
19708: PUSH
19709: LD_INT 105
19711: PUSH
19712: LD_INT 106
19714: PUSH
19715: LD_INT 108
19717: PUSH
19718: LD_INT 109
19720: PUSH
19721: LD_INT 112
19723: PUSH
19724: LD_INT 116
19726: PUSH
19727: LD_INT 117
19729: PUSH
19730: LD_INT 118
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: ST_TO_ADDR
19749: GO 22412
19751: LD_INT 6
19753: DOUBLE
19754: EQUAL
19755: IFTRUE 19759
19757: GO 19891
19759: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_INT 2
19767: PUSH
19768: LD_INT 4
19770: PUSH
19771: LD_INT 5
19773: PUSH
19774: LD_INT 6
19776: PUSH
19777: LD_INT 8
19779: PUSH
19780: LD_INT 11
19782: PUSH
19783: LD_INT 12
19785: PUSH
19786: LD_INT 15
19788: PUSH
19789: LD_INT 16
19791: PUSH
19792: LD_INT 20
19794: PUSH
19795: LD_INT 21
19797: PUSH
19798: LD_INT 22
19800: PUSH
19801: LD_INT 23
19803: PUSH
19804: LD_INT 25
19806: PUSH
19807: LD_INT 26
19809: PUSH
19810: LD_INT 30
19812: PUSH
19813: LD_INT 31
19815: PUSH
19816: LD_INT 32
19818: PUSH
19819: LD_INT 36
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 101
19845: PUSH
19846: LD_INT 102
19848: PUSH
19849: LD_INT 105
19851: PUSH
19852: LD_INT 106
19854: PUSH
19855: LD_INT 108
19857: PUSH
19858: LD_INT 109
19860: PUSH
19861: LD_INT 112
19863: PUSH
19864: LD_INT 116
19866: PUSH
19867: LD_INT 117
19869: PUSH
19870: LD_INT 118
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: ST_TO_ADDR
19889: GO 22412
19891: LD_INT 7
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 20011
19899: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 4
19910: PUSH
19911: LD_INT 5
19913: PUSH
19914: LD_INT 7
19916: PUSH
19917: LD_INT 11
19919: PUSH
19920: LD_INT 12
19922: PUSH
19923: LD_INT 15
19925: PUSH
19926: LD_INT 16
19928: PUSH
19929: LD_INT 20
19931: PUSH
19932: LD_INT 21
19934: PUSH
19935: LD_INT 22
19937: PUSH
19938: LD_INT 23
19940: PUSH
19941: LD_INT 25
19943: PUSH
19944: LD_INT 26
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 101
19965: PUSH
19966: LD_INT 102
19968: PUSH
19969: LD_INT 103
19971: PUSH
19972: LD_INT 105
19974: PUSH
19975: LD_INT 106
19977: PUSH
19978: LD_INT 108
19980: PUSH
19981: LD_INT 112
19983: PUSH
19984: LD_INT 116
19986: PUSH
19987: LD_INT 117
19989: PUSH
19990: LD_INT 118
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: ST_TO_ADDR
20009: GO 22412
20011: LD_INT 8
20013: DOUBLE
20014: EQUAL
20015: IFTRUE 20019
20017: GO 20159
20019: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20020: LD_ADDR_VAR 0 2
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 4
20030: PUSH
20031: LD_INT 5
20033: PUSH
20034: LD_INT 6
20036: PUSH
20037: LD_INT 7
20039: PUSH
20040: LD_INT 8
20042: PUSH
20043: LD_INT 11
20045: PUSH
20046: LD_INT 12
20048: PUSH
20049: LD_INT 15
20051: PUSH
20052: LD_INT 16
20054: PUSH
20055: LD_INT 20
20057: PUSH
20058: LD_INT 21
20060: PUSH
20061: LD_INT 22
20063: PUSH
20064: LD_INT 23
20066: PUSH
20067: LD_INT 25
20069: PUSH
20070: LD_INT 26
20072: PUSH
20073: LD_INT 30
20075: PUSH
20076: LD_INT 31
20078: PUSH
20079: LD_INT 32
20081: PUSH
20082: LD_INT 36
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 101
20109: PUSH
20110: LD_INT 102
20112: PUSH
20113: LD_INT 103
20115: PUSH
20116: LD_INT 105
20118: PUSH
20119: LD_INT 106
20121: PUSH
20122: LD_INT 108
20124: PUSH
20125: LD_INT 109
20127: PUSH
20128: LD_INT 112
20130: PUSH
20131: LD_INT 116
20133: PUSH
20134: LD_INT 117
20136: PUSH
20137: LD_INT 118
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: ST_TO_ADDR
20157: GO 22412
20159: LD_INT 9
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20315
20167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20168: LD_ADDR_VAR 0 2
20172: PUSH
20173: LD_INT 2
20175: PUSH
20176: LD_INT 4
20178: PUSH
20179: LD_INT 5
20181: PUSH
20182: LD_INT 6
20184: PUSH
20185: LD_INT 7
20187: PUSH
20188: LD_INT 8
20190: PUSH
20191: LD_INT 11
20193: PUSH
20194: LD_INT 12
20196: PUSH
20197: LD_INT 15
20199: PUSH
20200: LD_INT 16
20202: PUSH
20203: LD_INT 20
20205: PUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_INT 23
20214: PUSH
20215: LD_INT 25
20217: PUSH
20218: LD_INT 26
20220: PUSH
20221: LD_INT 28
20223: PUSH
20224: LD_INT 30
20226: PUSH
20227: LD_INT 31
20229: PUSH
20230: LD_INT 32
20232: PUSH
20233: LD_INT 36
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 101
20261: PUSH
20262: LD_INT 102
20264: PUSH
20265: LD_INT 103
20267: PUSH
20268: LD_INT 105
20270: PUSH
20271: LD_INT 106
20273: PUSH
20274: LD_INT 108
20276: PUSH
20277: LD_INT 109
20279: PUSH
20280: LD_INT 112
20282: PUSH
20283: LD_INT 114
20285: PUSH
20286: LD_INT 116
20288: PUSH
20289: LD_INT 117
20291: PUSH
20292: LD_INT 118
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: ST_TO_ADDR
20313: GO 22412
20315: LD_INT 10
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20519
20323: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20324: LD_ADDR_VAR 0 2
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 4
20334: PUSH
20335: LD_INT 5
20337: PUSH
20338: LD_INT 6
20340: PUSH
20341: LD_INT 7
20343: PUSH
20344: LD_INT 8
20346: PUSH
20347: LD_INT 9
20349: PUSH
20350: LD_INT 10
20352: PUSH
20353: LD_INT 11
20355: PUSH
20356: LD_INT 12
20358: PUSH
20359: LD_INT 13
20361: PUSH
20362: LD_INT 14
20364: PUSH
20365: LD_INT 15
20367: PUSH
20368: LD_INT 16
20370: PUSH
20371: LD_INT 17
20373: PUSH
20374: LD_INT 18
20376: PUSH
20377: LD_INT 19
20379: PUSH
20380: LD_INT 20
20382: PUSH
20383: LD_INT 21
20385: PUSH
20386: LD_INT 22
20388: PUSH
20389: LD_INT 23
20391: PUSH
20392: LD_INT 24
20394: PUSH
20395: LD_INT 25
20397: PUSH
20398: LD_INT 26
20400: PUSH
20401: LD_INT 28
20403: PUSH
20404: LD_INT 30
20406: PUSH
20407: LD_INT 31
20409: PUSH
20410: LD_INT 32
20412: PUSH
20413: LD_INT 36
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 101
20449: PUSH
20450: LD_INT 102
20452: PUSH
20453: LD_INT 103
20455: PUSH
20456: LD_INT 104
20458: PUSH
20459: LD_INT 105
20461: PUSH
20462: LD_INT 106
20464: PUSH
20465: LD_INT 107
20467: PUSH
20468: LD_INT 108
20470: PUSH
20471: LD_INT 109
20473: PUSH
20474: LD_INT 110
20476: PUSH
20477: LD_INT 111
20479: PUSH
20480: LD_INT 112
20482: PUSH
20483: LD_INT 114
20485: PUSH
20486: LD_INT 116
20488: PUSH
20489: LD_INT 117
20491: PUSH
20492: LD_INT 118
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: ST_TO_ADDR
20517: GO 22412
20519: LD_INT 11
20521: DOUBLE
20522: EQUAL
20523: IFTRUE 20527
20525: GO 20731
20527: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20528: LD_ADDR_VAR 0 2
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: LD_INT 3
20538: PUSH
20539: LD_INT 4
20541: PUSH
20542: LD_INT 5
20544: PUSH
20545: LD_INT 6
20547: PUSH
20548: LD_INT 7
20550: PUSH
20551: LD_INT 8
20553: PUSH
20554: LD_INT 9
20556: PUSH
20557: LD_INT 10
20559: PUSH
20560: LD_INT 11
20562: PUSH
20563: LD_INT 12
20565: PUSH
20566: LD_INT 13
20568: PUSH
20569: LD_INT 14
20571: PUSH
20572: LD_INT 15
20574: PUSH
20575: LD_INT 16
20577: PUSH
20578: LD_INT 17
20580: PUSH
20581: LD_INT 18
20583: PUSH
20584: LD_INT 19
20586: PUSH
20587: LD_INT 20
20589: PUSH
20590: LD_INT 21
20592: PUSH
20593: LD_INT 22
20595: PUSH
20596: LD_INT 23
20598: PUSH
20599: LD_INT 24
20601: PUSH
20602: LD_INT 25
20604: PUSH
20605: LD_INT 26
20607: PUSH
20608: LD_INT 28
20610: PUSH
20611: LD_INT 30
20613: PUSH
20614: LD_INT 31
20616: PUSH
20617: LD_INT 32
20619: PUSH
20620: LD_INT 34
20622: PUSH
20623: LD_INT 36
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 101
20661: PUSH
20662: LD_INT 102
20664: PUSH
20665: LD_INT 103
20667: PUSH
20668: LD_INT 104
20670: PUSH
20671: LD_INT 105
20673: PUSH
20674: LD_INT 106
20676: PUSH
20677: LD_INT 107
20679: PUSH
20680: LD_INT 108
20682: PUSH
20683: LD_INT 109
20685: PUSH
20686: LD_INT 110
20688: PUSH
20689: LD_INT 111
20691: PUSH
20692: LD_INT 112
20694: PUSH
20695: LD_INT 114
20697: PUSH
20698: LD_INT 116
20700: PUSH
20701: LD_INT 117
20703: PUSH
20704: LD_INT 118
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: ST_TO_ADDR
20729: GO 22412
20731: LD_INT 12
20733: DOUBLE
20734: EQUAL
20735: IFTRUE 20739
20737: GO 20959
20739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20740: LD_ADDR_VAR 0 2
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: LD_INT 3
20753: PUSH
20754: LD_INT 4
20756: PUSH
20757: LD_INT 5
20759: PUSH
20760: LD_INT 6
20762: PUSH
20763: LD_INT 7
20765: PUSH
20766: LD_INT 8
20768: PUSH
20769: LD_INT 9
20771: PUSH
20772: LD_INT 10
20774: PUSH
20775: LD_INT 11
20777: PUSH
20778: LD_INT 12
20780: PUSH
20781: LD_INT 13
20783: PUSH
20784: LD_INT 14
20786: PUSH
20787: LD_INT 15
20789: PUSH
20790: LD_INT 16
20792: PUSH
20793: LD_INT 17
20795: PUSH
20796: LD_INT 18
20798: PUSH
20799: LD_INT 19
20801: PUSH
20802: LD_INT 20
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_INT 23
20813: PUSH
20814: LD_INT 24
20816: PUSH
20817: LD_INT 25
20819: PUSH
20820: LD_INT 26
20822: PUSH
20823: LD_INT 27
20825: PUSH
20826: LD_INT 28
20828: PUSH
20829: LD_INT 30
20831: PUSH
20832: LD_INT 31
20834: PUSH
20835: LD_INT 32
20837: PUSH
20838: LD_INT 33
20840: PUSH
20841: LD_INT 34
20843: PUSH
20844: LD_INT 36
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 101
20885: PUSH
20886: LD_INT 102
20888: PUSH
20889: LD_INT 103
20891: PUSH
20892: LD_INT 104
20894: PUSH
20895: LD_INT 105
20897: PUSH
20898: LD_INT 106
20900: PUSH
20901: LD_INT 107
20903: PUSH
20904: LD_INT 108
20906: PUSH
20907: LD_INT 109
20909: PUSH
20910: LD_INT 110
20912: PUSH
20913: LD_INT 111
20915: PUSH
20916: LD_INT 112
20918: PUSH
20919: LD_INT 113
20921: PUSH
20922: LD_INT 114
20924: PUSH
20925: LD_INT 116
20927: PUSH
20928: LD_INT 117
20930: PUSH
20931: LD_INT 118
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: ST_TO_ADDR
20957: GO 22412
20959: LD_INT 13
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 21175
20967: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: LD_INT 4
20984: PUSH
20985: LD_INT 5
20987: PUSH
20988: LD_INT 8
20990: PUSH
20991: LD_INT 9
20993: PUSH
20994: LD_INT 10
20996: PUSH
20997: LD_INT 11
20999: PUSH
21000: LD_INT 12
21002: PUSH
21003: LD_INT 14
21005: PUSH
21006: LD_INT 15
21008: PUSH
21009: LD_INT 16
21011: PUSH
21012: LD_INT 17
21014: PUSH
21015: LD_INT 18
21017: PUSH
21018: LD_INT 19
21020: PUSH
21021: LD_INT 20
21023: PUSH
21024: LD_INT 21
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_INT 23
21032: PUSH
21033: LD_INT 24
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 26
21041: PUSH
21042: LD_INT 27
21044: PUSH
21045: LD_INT 28
21047: PUSH
21048: LD_INT 30
21050: PUSH
21051: LD_INT 31
21053: PUSH
21054: LD_INT 32
21056: PUSH
21057: LD_INT 33
21059: PUSH
21060: LD_INT 34
21062: PUSH
21063: LD_INT 36
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 101
21101: PUSH
21102: LD_INT 102
21104: PUSH
21105: LD_INT 103
21107: PUSH
21108: LD_INT 104
21110: PUSH
21111: LD_INT 105
21113: PUSH
21114: LD_INT 106
21116: PUSH
21117: LD_INT 107
21119: PUSH
21120: LD_INT 108
21122: PUSH
21123: LD_INT 109
21125: PUSH
21126: LD_INT 110
21128: PUSH
21129: LD_INT 111
21131: PUSH
21132: LD_INT 112
21134: PUSH
21135: LD_INT 113
21137: PUSH
21138: LD_INT 114
21140: PUSH
21141: LD_INT 116
21143: PUSH
21144: LD_INT 117
21146: PUSH
21147: LD_INT 118
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: ST_TO_ADDR
21173: GO 22412
21175: LD_INT 14
21177: DOUBLE
21178: EQUAL
21179: IFTRUE 21183
21181: GO 21407
21183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21184: LD_ADDR_VAR 0 2
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: LD_INT 4
21200: PUSH
21201: LD_INT 5
21203: PUSH
21204: LD_INT 6
21206: PUSH
21207: LD_INT 7
21209: PUSH
21210: LD_INT 8
21212: PUSH
21213: LD_INT 9
21215: PUSH
21216: LD_INT 10
21218: PUSH
21219: LD_INT 11
21221: PUSH
21222: LD_INT 12
21224: PUSH
21225: LD_INT 13
21227: PUSH
21228: LD_INT 14
21230: PUSH
21231: LD_INT 15
21233: PUSH
21234: LD_INT 16
21236: PUSH
21237: LD_INT 17
21239: PUSH
21240: LD_INT 18
21242: PUSH
21243: LD_INT 19
21245: PUSH
21246: LD_INT 20
21248: PUSH
21249: LD_INT 21
21251: PUSH
21252: LD_INT 22
21254: PUSH
21255: LD_INT 23
21257: PUSH
21258: LD_INT 24
21260: PUSH
21261: LD_INT 25
21263: PUSH
21264: LD_INT 26
21266: PUSH
21267: LD_INT 27
21269: PUSH
21270: LD_INT 28
21272: PUSH
21273: LD_INT 29
21275: PUSH
21276: LD_INT 30
21278: PUSH
21279: LD_INT 31
21281: PUSH
21282: LD_INT 32
21284: PUSH
21285: LD_INT 33
21287: PUSH
21288: LD_INT 34
21290: PUSH
21291: LD_INT 36
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 101
21333: PUSH
21334: LD_INT 102
21336: PUSH
21337: LD_INT 103
21339: PUSH
21340: LD_INT 104
21342: PUSH
21343: LD_INT 105
21345: PUSH
21346: LD_INT 106
21348: PUSH
21349: LD_INT 107
21351: PUSH
21352: LD_INT 108
21354: PUSH
21355: LD_INT 109
21357: PUSH
21358: LD_INT 110
21360: PUSH
21361: LD_INT 111
21363: PUSH
21364: LD_INT 112
21366: PUSH
21367: LD_INT 113
21369: PUSH
21370: LD_INT 114
21372: PUSH
21373: LD_INT 116
21375: PUSH
21376: LD_INT 117
21378: PUSH
21379: LD_INT 118
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: ST_TO_ADDR
21405: GO 22412
21407: LD_INT 15
21409: DOUBLE
21410: EQUAL
21411: IFTRUE 21415
21413: GO 21639
21415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21416: LD_ADDR_VAR 0 2
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: LD_INT 4
21432: PUSH
21433: LD_INT 5
21435: PUSH
21436: LD_INT 6
21438: PUSH
21439: LD_INT 7
21441: PUSH
21442: LD_INT 8
21444: PUSH
21445: LD_INT 9
21447: PUSH
21448: LD_INT 10
21450: PUSH
21451: LD_INT 11
21453: PUSH
21454: LD_INT 12
21456: PUSH
21457: LD_INT 13
21459: PUSH
21460: LD_INT 14
21462: PUSH
21463: LD_INT 15
21465: PUSH
21466: LD_INT 16
21468: PUSH
21469: LD_INT 17
21471: PUSH
21472: LD_INT 18
21474: PUSH
21475: LD_INT 19
21477: PUSH
21478: LD_INT 20
21480: PUSH
21481: LD_INT 21
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_INT 23
21489: PUSH
21490: LD_INT 24
21492: PUSH
21493: LD_INT 25
21495: PUSH
21496: LD_INT 26
21498: PUSH
21499: LD_INT 27
21501: PUSH
21502: LD_INT 28
21504: PUSH
21505: LD_INT 29
21507: PUSH
21508: LD_INT 30
21510: PUSH
21511: LD_INT 31
21513: PUSH
21514: LD_INT 32
21516: PUSH
21517: LD_INT 33
21519: PUSH
21520: LD_INT 34
21522: PUSH
21523: LD_INT 36
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 101
21565: PUSH
21566: LD_INT 102
21568: PUSH
21569: LD_INT 103
21571: PUSH
21572: LD_INT 104
21574: PUSH
21575: LD_INT 105
21577: PUSH
21578: LD_INT 106
21580: PUSH
21581: LD_INT 107
21583: PUSH
21584: LD_INT 108
21586: PUSH
21587: LD_INT 109
21589: PUSH
21590: LD_INT 110
21592: PUSH
21593: LD_INT 111
21595: PUSH
21596: LD_INT 112
21598: PUSH
21599: LD_INT 113
21601: PUSH
21602: LD_INT 114
21604: PUSH
21605: LD_INT 116
21607: PUSH
21608: LD_INT 117
21610: PUSH
21611: LD_INT 118
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: ST_TO_ADDR
21637: GO 22412
21639: LD_INT 16
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21783
21647: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21648: LD_ADDR_VAR 0 2
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 4
21658: PUSH
21659: LD_INT 5
21661: PUSH
21662: LD_INT 7
21664: PUSH
21665: LD_INT 11
21667: PUSH
21668: LD_INT 12
21670: PUSH
21671: LD_INT 15
21673: PUSH
21674: LD_INT 16
21676: PUSH
21677: LD_INT 20
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 30
21697: PUSH
21698: LD_INT 31
21700: PUSH
21701: LD_INT 32
21703: PUSH
21704: LD_INT 33
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 101
21733: PUSH
21734: LD_INT 102
21736: PUSH
21737: LD_INT 103
21739: PUSH
21740: LD_INT 106
21742: PUSH
21743: LD_INT 108
21745: PUSH
21746: LD_INT 112
21748: PUSH
21749: LD_INT 113
21751: PUSH
21752: LD_INT 114
21754: PUSH
21755: LD_INT 116
21757: PUSH
21758: LD_INT 117
21760: PUSH
21761: LD_INT 118
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: ST_TO_ADDR
21781: GO 22412
21783: LD_INT 17
21785: DOUBLE
21786: EQUAL
21787: IFTRUE 21791
21789: GO 22015
21791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21792: LD_ADDR_VAR 0 2
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 3
21805: PUSH
21806: LD_INT 4
21808: PUSH
21809: LD_INT 5
21811: PUSH
21812: LD_INT 6
21814: PUSH
21815: LD_INT 7
21817: PUSH
21818: LD_INT 8
21820: PUSH
21821: LD_INT 9
21823: PUSH
21824: LD_INT 10
21826: PUSH
21827: LD_INT 11
21829: PUSH
21830: LD_INT 12
21832: PUSH
21833: LD_INT 13
21835: PUSH
21836: LD_INT 14
21838: PUSH
21839: LD_INT 15
21841: PUSH
21842: LD_INT 16
21844: PUSH
21845: LD_INT 17
21847: PUSH
21848: LD_INT 18
21850: PUSH
21851: LD_INT 19
21853: PUSH
21854: LD_INT 20
21856: PUSH
21857: LD_INT 21
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_INT 23
21865: PUSH
21866: LD_INT 24
21868: PUSH
21869: LD_INT 25
21871: PUSH
21872: LD_INT 26
21874: PUSH
21875: LD_INT 27
21877: PUSH
21878: LD_INT 28
21880: PUSH
21881: LD_INT 29
21883: PUSH
21884: LD_INT 30
21886: PUSH
21887: LD_INT 31
21889: PUSH
21890: LD_INT 32
21892: PUSH
21893: LD_INT 33
21895: PUSH
21896: LD_INT 34
21898: PUSH
21899: LD_INT 36
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 101
21941: PUSH
21942: LD_INT 102
21944: PUSH
21945: LD_INT 103
21947: PUSH
21948: LD_INT 104
21950: PUSH
21951: LD_INT 105
21953: PUSH
21954: LD_INT 106
21956: PUSH
21957: LD_INT 107
21959: PUSH
21960: LD_INT 108
21962: PUSH
21963: LD_INT 109
21965: PUSH
21966: LD_INT 110
21968: PUSH
21969: LD_INT 111
21971: PUSH
21972: LD_INT 112
21974: PUSH
21975: LD_INT 113
21977: PUSH
21978: LD_INT 114
21980: PUSH
21981: LD_INT 116
21983: PUSH
21984: LD_INT 117
21986: PUSH
21987: LD_INT 118
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: ST_TO_ADDR
22013: GO 22412
22015: LD_INT 18
22017: DOUBLE
22018: EQUAL
22019: IFTRUE 22023
22021: GO 22171
22023: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22024: LD_ADDR_VAR 0 2
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 4
22034: PUSH
22035: LD_INT 5
22037: PUSH
22038: LD_INT 7
22040: PUSH
22041: LD_INT 11
22043: PUSH
22044: LD_INT 12
22046: PUSH
22047: LD_INT 15
22049: PUSH
22050: LD_INT 16
22052: PUSH
22053: LD_INT 20
22055: PUSH
22056: LD_INT 21
22058: PUSH
22059: LD_INT 22
22061: PUSH
22062: LD_INT 23
22064: PUSH
22065: LD_INT 25
22067: PUSH
22068: LD_INT 26
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 31
22076: PUSH
22077: LD_INT 32
22079: PUSH
22080: LD_INT 33
22082: PUSH
22083: LD_INT 34
22085: PUSH
22086: LD_INT 35
22088: PUSH
22089: LD_INT 36
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 101
22117: PUSH
22118: LD_INT 102
22120: PUSH
22121: LD_INT 103
22123: PUSH
22124: LD_INT 106
22126: PUSH
22127: LD_INT 108
22129: PUSH
22130: LD_INT 112
22132: PUSH
22133: LD_INT 113
22135: PUSH
22136: LD_INT 114
22138: PUSH
22139: LD_INT 115
22141: PUSH
22142: LD_INT 116
22144: PUSH
22145: LD_INT 117
22147: PUSH
22148: LD_INT 118
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: ST_TO_ADDR
22169: GO 22412
22171: LD_INT 19
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22411
22179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22180: LD_ADDR_VAR 0 2
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: LD_INT 4
22196: PUSH
22197: LD_INT 5
22199: PUSH
22200: LD_INT 6
22202: PUSH
22203: LD_INT 7
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 9
22211: PUSH
22212: LD_INT 10
22214: PUSH
22215: LD_INT 11
22217: PUSH
22218: LD_INT 12
22220: PUSH
22221: LD_INT 13
22223: PUSH
22224: LD_INT 14
22226: PUSH
22227: LD_INT 15
22229: PUSH
22230: LD_INT 16
22232: PUSH
22233: LD_INT 17
22235: PUSH
22236: LD_INT 18
22238: PUSH
22239: LD_INT 19
22241: PUSH
22242: LD_INT 20
22244: PUSH
22245: LD_INT 21
22247: PUSH
22248: LD_INT 22
22250: PUSH
22251: LD_INT 23
22253: PUSH
22254: LD_INT 24
22256: PUSH
22257: LD_INT 25
22259: PUSH
22260: LD_INT 26
22262: PUSH
22263: LD_INT 27
22265: PUSH
22266: LD_INT 28
22268: PUSH
22269: LD_INT 29
22271: PUSH
22272: LD_INT 30
22274: PUSH
22275: LD_INT 31
22277: PUSH
22278: LD_INT 32
22280: PUSH
22281: LD_INT 33
22283: PUSH
22284: LD_INT 34
22286: PUSH
22287: LD_INT 35
22289: PUSH
22290: LD_INT 36
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 101
22333: PUSH
22334: LD_INT 102
22336: PUSH
22337: LD_INT 103
22339: PUSH
22340: LD_INT 104
22342: PUSH
22343: LD_INT 105
22345: PUSH
22346: LD_INT 106
22348: PUSH
22349: LD_INT 107
22351: PUSH
22352: LD_INT 108
22354: PUSH
22355: LD_INT 109
22357: PUSH
22358: LD_INT 110
22360: PUSH
22361: LD_INT 111
22363: PUSH
22364: LD_INT 112
22366: PUSH
22367: LD_INT 113
22369: PUSH
22370: LD_INT 114
22372: PUSH
22373: LD_INT 115
22375: PUSH
22376: LD_INT 116
22378: PUSH
22379: LD_INT 117
22381: PUSH
22382: LD_INT 118
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: ST_TO_ADDR
22409: GO 22412
22411: POP
// end else
22412: GO 22643
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22414: LD_ADDR_VAR 0 2
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: LD_INT 4
22430: PUSH
22431: LD_INT 5
22433: PUSH
22434: LD_INT 6
22436: PUSH
22437: LD_INT 7
22439: PUSH
22440: LD_INT 8
22442: PUSH
22443: LD_INT 9
22445: PUSH
22446: LD_INT 10
22448: PUSH
22449: LD_INT 11
22451: PUSH
22452: LD_INT 12
22454: PUSH
22455: LD_INT 13
22457: PUSH
22458: LD_INT 14
22460: PUSH
22461: LD_INT 15
22463: PUSH
22464: LD_INT 16
22466: PUSH
22467: LD_INT 17
22469: PUSH
22470: LD_INT 18
22472: PUSH
22473: LD_INT 19
22475: PUSH
22476: LD_INT 20
22478: PUSH
22479: LD_INT 21
22481: PUSH
22482: LD_INT 22
22484: PUSH
22485: LD_INT 23
22487: PUSH
22488: LD_INT 24
22490: PUSH
22491: LD_INT 25
22493: PUSH
22494: LD_INT 26
22496: PUSH
22497: LD_INT 27
22499: PUSH
22500: LD_INT 28
22502: PUSH
22503: LD_INT 29
22505: PUSH
22506: LD_INT 30
22508: PUSH
22509: LD_INT 31
22511: PUSH
22512: LD_INT 32
22514: PUSH
22515: LD_INT 33
22517: PUSH
22518: LD_INT 34
22520: PUSH
22521: LD_INT 35
22523: PUSH
22524: LD_INT 36
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 101
22567: PUSH
22568: LD_INT 102
22570: PUSH
22571: LD_INT 103
22573: PUSH
22574: LD_INT 104
22576: PUSH
22577: LD_INT 105
22579: PUSH
22580: LD_INT 106
22582: PUSH
22583: LD_INT 107
22585: PUSH
22586: LD_INT 108
22588: PUSH
22589: LD_INT 109
22591: PUSH
22592: LD_INT 110
22594: PUSH
22595: LD_INT 111
22597: PUSH
22598: LD_INT 112
22600: PUSH
22601: LD_INT 113
22603: PUSH
22604: LD_INT 114
22606: PUSH
22607: LD_INT 115
22609: PUSH
22610: LD_INT 116
22612: PUSH
22613: LD_INT 117
22615: PUSH
22616: LD_INT 118
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: ST_TO_ADDR
// if result then
22643: LD_VAR 0 2
22647: IFFALSE 23433
// begin normal :=  ;
22649: LD_ADDR_VAR 0 5
22653: PUSH
22654: LD_STRING 
22656: ST_TO_ADDR
// hardcore :=  ;
22657: LD_ADDR_VAR 0 6
22661: PUSH
22662: LD_STRING 
22664: ST_TO_ADDR
// active :=  ;
22665: LD_ADDR_VAR 0 7
22669: PUSH
22670: LD_STRING 
22672: ST_TO_ADDR
// for i = 1 to normalCounter do
22673: LD_ADDR_VAR 0 8
22677: PUSH
22678: DOUBLE
22679: LD_INT 1
22681: DEC
22682: ST_TO_ADDR
22683: LD_EXP 53
22687: PUSH
22688: FOR_TO
22689: IFFALSE 22790
// begin tmp := 0 ;
22691: LD_ADDR_VAR 0 3
22695: PUSH
22696: LD_STRING 0
22698: ST_TO_ADDR
// if result [ 1 ] then
22699: LD_VAR 0 2
22703: PUSH
22704: LD_INT 1
22706: ARRAY
22707: IFFALSE 22772
// if result [ 1 ] [ 1 ] = i then
22709: LD_VAR 0 2
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: PUSH
22718: LD_INT 1
22720: ARRAY
22721: PUSH
22722: LD_VAR 0 8
22726: EQUAL
22727: IFFALSE 22772
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22729: LD_ADDR_VAR 0 2
22733: PUSH
22734: LD_VAR 0 2
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: LD_VAR 0 2
22746: PUSH
22747: LD_INT 1
22749: ARRAY
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL_OW 3
22758: PPUSH
22759: CALL_OW 1
22763: ST_TO_ADDR
// tmp := 1 ;
22764: LD_ADDR_VAR 0 3
22768: PUSH
22769: LD_STRING 1
22771: ST_TO_ADDR
// end ; normal := normal & tmp ;
22772: LD_ADDR_VAR 0 5
22776: PUSH
22777: LD_VAR 0 5
22781: PUSH
22782: LD_VAR 0 3
22786: STR
22787: ST_TO_ADDR
// end ;
22788: GO 22688
22790: POP
22791: POP
// for i = 1 to hardcoreCounter do
22792: LD_ADDR_VAR 0 8
22796: PUSH
22797: DOUBLE
22798: LD_INT 1
22800: DEC
22801: ST_TO_ADDR
22802: LD_EXP 54
22806: PUSH
22807: FOR_TO
22808: IFFALSE 22913
// begin tmp := 0 ;
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_STRING 0
22817: ST_TO_ADDR
// if result [ 2 ] then
22818: LD_VAR 0 2
22822: PUSH
22823: LD_INT 2
22825: ARRAY
22826: IFFALSE 22895
// if result [ 2 ] [ 1 ] = 100 + i then
22828: LD_VAR 0 2
22832: PUSH
22833: LD_INT 2
22835: ARRAY
22836: PUSH
22837: LD_INT 1
22839: ARRAY
22840: PUSH
22841: LD_INT 100
22843: PUSH
22844: LD_VAR 0 8
22848: PLUS
22849: EQUAL
22850: IFFALSE 22895
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22852: LD_ADDR_VAR 0 2
22856: PUSH
22857: LD_VAR 0 2
22861: PPUSH
22862: LD_INT 2
22864: PPUSH
22865: LD_VAR 0 2
22869: PUSH
22870: LD_INT 2
22872: ARRAY
22873: PPUSH
22874: LD_INT 1
22876: PPUSH
22877: CALL_OW 3
22881: PPUSH
22882: CALL_OW 1
22886: ST_TO_ADDR
// tmp := 1 ;
22887: LD_ADDR_VAR 0 3
22891: PUSH
22892: LD_STRING 1
22894: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22895: LD_ADDR_VAR 0 6
22899: PUSH
22900: LD_VAR 0 6
22904: PUSH
22905: LD_VAR 0 3
22909: STR
22910: ST_TO_ADDR
// end ;
22911: GO 22807
22913: POP
22914: POP
// if isGameLoad then
22915: LD_VAR 0 1
22919: IFFALSE 23394
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22921: LD_ADDR_VAR 0 4
22925: PUSH
22926: LD_EXP 57
22930: PUSH
22931: LD_EXP 56
22935: PUSH
22936: LD_EXP 58
22940: PUSH
22941: LD_EXP 55
22945: PUSH
22946: LD_EXP 59
22950: PUSH
22951: LD_EXP 60
22955: PUSH
22956: LD_EXP 61
22960: PUSH
22961: LD_EXP 62
22965: PUSH
22966: LD_EXP 63
22970: PUSH
22971: LD_EXP 64
22975: PUSH
22976: LD_EXP 65
22980: PUSH
22981: LD_EXP 66
22985: PUSH
22986: LD_EXP 67
22990: PUSH
22991: LD_EXP 68
22995: PUSH
22996: LD_EXP 76
23000: PUSH
23001: LD_EXP 77
23005: PUSH
23006: LD_EXP 78
23010: PUSH
23011: LD_EXP 79
23015: PUSH
23016: LD_EXP 81
23020: PUSH
23021: LD_EXP 82
23025: PUSH
23026: LD_EXP 83
23030: PUSH
23031: LD_EXP 86
23035: PUSH
23036: LD_EXP 88
23040: PUSH
23041: LD_EXP 89
23045: PUSH
23046: LD_EXP 90
23050: PUSH
23051: LD_EXP 92
23055: PUSH
23056: LD_EXP 93
23060: PUSH
23061: LD_EXP 96
23065: PUSH
23066: LD_EXP 97
23070: PUSH
23071: LD_EXP 98
23075: PUSH
23076: LD_EXP 99
23080: PUSH
23081: LD_EXP 100
23085: PUSH
23086: LD_EXP 101
23090: PUSH
23091: LD_EXP 102
23095: PUSH
23096: LD_EXP 103
23100: PUSH
23101: LD_EXP 104
23105: PUSH
23106: LD_EXP 69
23110: PUSH
23111: LD_EXP 70
23115: PUSH
23116: LD_EXP 73
23120: PUSH
23121: LD_EXP 74
23125: PUSH
23126: LD_EXP 75
23130: PUSH
23131: LD_EXP 71
23135: PUSH
23136: LD_EXP 72
23140: PUSH
23141: LD_EXP 80
23145: PUSH
23146: LD_EXP 84
23150: PUSH
23151: LD_EXP 85
23155: PUSH
23156: LD_EXP 87
23160: PUSH
23161: LD_EXP 91
23165: PUSH
23166: LD_EXP 94
23170: PUSH
23171: LD_EXP 95
23175: PUSH
23176: LD_EXP 105
23180: PUSH
23181: LD_EXP 106
23185: PUSH
23186: LD_EXP 107
23190: PUSH
23191: LD_EXP 108
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: ST_TO_ADDR
// tmp :=  ;
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_STRING 
23259: ST_TO_ADDR
// for i = 1 to normalCounter do
23260: LD_ADDR_VAR 0 8
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_EXP 53
23274: PUSH
23275: FOR_TO
23276: IFFALSE 23312
// begin if flags [ i ] then
23278: LD_VAR 0 4
23282: PUSH
23283: LD_VAR 0 8
23287: ARRAY
23288: IFFALSE 23310
// tmp := tmp & i & ; ;
23290: LD_ADDR_VAR 0 3
23294: PUSH
23295: LD_VAR 0 3
23299: PUSH
23300: LD_VAR 0 8
23304: STR
23305: PUSH
23306: LD_STRING ;
23308: STR
23309: ST_TO_ADDR
// end ;
23310: GO 23275
23312: POP
23313: POP
// for i = 1 to hardcoreCounter do
23314: LD_ADDR_VAR 0 8
23318: PUSH
23319: DOUBLE
23320: LD_INT 1
23322: DEC
23323: ST_TO_ADDR
23324: LD_EXP 54
23328: PUSH
23329: FOR_TO
23330: IFFALSE 23376
// begin if flags [ normalCounter + i ] then
23332: LD_VAR 0 4
23336: PUSH
23337: LD_EXP 53
23341: PUSH
23342: LD_VAR 0 8
23346: PLUS
23347: ARRAY
23348: IFFALSE 23374
// tmp := tmp & ( 100 + i ) & ; ;
23350: LD_ADDR_VAR 0 3
23354: PUSH
23355: LD_VAR 0 3
23359: PUSH
23360: LD_INT 100
23362: PUSH
23363: LD_VAR 0 8
23367: PLUS
23368: STR
23369: PUSH
23370: LD_STRING ;
23372: STR
23373: ST_TO_ADDR
// end ;
23374: GO 23329
23376: POP
23377: POP
// if tmp then
23378: LD_VAR 0 3
23382: IFFALSE 23394
// active := tmp ;
23384: LD_ADDR_VAR 0 7
23388: PUSH
23389: LD_VAR 0 3
23393: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23394: LD_STRING getStreamItemsFromMission("
23396: PUSH
23397: LD_VAR 0 5
23401: STR
23402: PUSH
23403: LD_STRING ","
23405: STR
23406: PUSH
23407: LD_VAR 0 6
23411: STR
23412: PUSH
23413: LD_STRING ","
23415: STR
23416: PUSH
23417: LD_VAR 0 7
23421: STR
23422: PUSH
23423: LD_STRING ")
23425: STR
23426: PPUSH
23427: CALL_OW 559
// end else
23431: GO 23440
// ToLua ( getStreamItemsFromMission("","","") ) ;
23433: LD_STRING getStreamItemsFromMission("","","")
23435: PPUSH
23436: CALL_OW 559
// end ;
23440: LD_VAR 0 2
23444: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23445: LD_EXP 52
23449: PUSH
23450: LD_EXP 57
23454: AND
23455: IFFALSE 23579
23457: GO 23459
23459: DISABLE
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
// begin enable ;
23464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 22
23472: PUSH
23473: LD_OWVAR 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 34
23487: PUSH
23488: LD_INT 7
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 34
23497: PUSH
23498: LD_INT 45
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 34
23507: PUSH
23508: LD_INT 28
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 34
23517: PUSH
23518: LD_INT 47
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PPUSH
23536: CALL_OW 69
23540: ST_TO_ADDR
// if not tmp then
23541: LD_VAR 0 2
23545: NOT
23546: IFFALSE 23550
// exit ;
23548: GO 23579
// for i in tmp do
23550: LD_ADDR_VAR 0 1
23554: PUSH
23555: LD_VAR 0 2
23559: PUSH
23560: FOR_IN
23561: IFFALSE 23577
// begin SetLives ( i , 0 ) ;
23563: LD_VAR 0 1
23567: PPUSH
23568: LD_INT 0
23570: PPUSH
23571: CALL_OW 234
// end ;
23575: GO 23560
23577: POP
23578: POP
// end ;
23579: PPOPN 2
23581: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23582: LD_EXP 52
23586: PUSH
23587: LD_EXP 58
23591: AND
23592: IFFALSE 23676
23594: GO 23596
23596: DISABLE
23597: LD_INT 0
23599: PPUSH
23600: PPUSH
// begin enable ;
23601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23602: LD_ADDR_VAR 0 2
23606: PUSH
23607: LD_INT 22
23609: PUSH
23610: LD_OWVAR 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 32
23621: PUSH
23622: LD_INT 3
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PPUSH
23633: CALL_OW 69
23637: ST_TO_ADDR
// if not tmp then
23638: LD_VAR 0 2
23642: NOT
23643: IFFALSE 23647
// exit ;
23645: GO 23676
// for i in tmp do
23647: LD_ADDR_VAR 0 1
23651: PUSH
23652: LD_VAR 0 2
23656: PUSH
23657: FOR_IN
23658: IFFALSE 23674
// begin SetLives ( i , 0 ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_INT 0
23667: PPUSH
23668: CALL_OW 234
// end ;
23672: GO 23657
23674: POP
23675: POP
// end ;
23676: PPOPN 2
23678: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23679: LD_EXP 52
23683: PUSH
23684: LD_EXP 55
23688: AND
23689: IFFALSE 23782
23691: GO 23693
23693: DISABLE
23694: LD_INT 0
23696: PPUSH
// begin enable ;
23697: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23698: LD_ADDR_VAR 0 1
23702: PUSH
23703: LD_INT 22
23705: PUSH
23706: LD_OWVAR 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 25
23720: PUSH
23721: LD_INT 5
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 25
23730: PUSH
23731: LD_INT 9
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 25
23740: PUSH
23741: LD_INT 8
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 69
23762: PUSH
23763: FOR_IN
23764: IFFALSE 23780
// begin SetClass ( i , 1 ) ;
23766: LD_VAR 0 1
23770: PPUSH
23771: LD_INT 1
23773: PPUSH
23774: CALL_OW 336
// end ;
23778: GO 23763
23780: POP
23781: POP
// end ;
23782: PPOPN 1
23784: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23785: LD_EXP 52
23789: PUSH
23790: LD_EXP 56
23794: AND
23795: PUSH
23796: LD_OWVAR 65
23800: PUSH
23801: LD_INT 7
23803: LESS
23804: AND
23805: IFFALSE 23819
23807: GO 23809
23809: DISABLE
// begin enable ;
23810: ENABLE
// game_speed := 7 ;
23811: LD_ADDR_OWVAR 65
23815: PUSH
23816: LD_INT 7
23818: ST_TO_ADDR
// end ;
23819: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23820: LD_EXP 52
23824: PUSH
23825: LD_EXP 59
23829: AND
23830: IFFALSE 24032
23832: GO 23834
23834: DISABLE
23835: LD_INT 0
23837: PPUSH
23838: PPUSH
23839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23840: LD_ADDR_VAR 0 3
23844: PUSH
23845: LD_INT 81
23847: PUSH
23848: LD_OWVAR 2
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 21
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PPUSH
23871: CALL_OW 69
23875: ST_TO_ADDR
// if not tmp then
23876: LD_VAR 0 3
23880: NOT
23881: IFFALSE 23885
// exit ;
23883: GO 24032
// if tmp > 5 then
23885: LD_VAR 0 3
23889: PUSH
23890: LD_INT 5
23892: GREATER
23893: IFFALSE 23905
// k := 5 else
23895: LD_ADDR_VAR 0 2
23899: PUSH
23900: LD_INT 5
23902: ST_TO_ADDR
23903: GO 23915
// k := tmp ;
23905: LD_ADDR_VAR 0 2
23909: PUSH
23910: LD_VAR 0 3
23914: ST_TO_ADDR
// for i := 1 to k do
23915: LD_ADDR_VAR 0 1
23919: PUSH
23920: DOUBLE
23921: LD_INT 1
23923: DEC
23924: ST_TO_ADDR
23925: LD_VAR 0 2
23929: PUSH
23930: FOR_TO
23931: IFFALSE 24030
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23933: LD_VAR 0 3
23937: PUSH
23938: LD_VAR 0 1
23942: ARRAY
23943: PPUSH
23944: LD_VAR 0 1
23948: PUSH
23949: LD_INT 4
23951: MOD
23952: PUSH
23953: LD_INT 1
23955: PLUS
23956: PPUSH
23957: CALL_OW 259
23961: PUSH
23962: LD_INT 10
23964: LESS
23965: IFFALSE 24028
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23967: LD_VAR 0 3
23971: PUSH
23972: LD_VAR 0 1
23976: ARRAY
23977: PPUSH
23978: LD_VAR 0 1
23982: PUSH
23983: LD_INT 4
23985: MOD
23986: PUSH
23987: LD_INT 1
23989: PLUS
23990: PPUSH
23991: LD_VAR 0 3
23995: PUSH
23996: LD_VAR 0 1
24000: ARRAY
24001: PPUSH
24002: LD_VAR 0 1
24006: PUSH
24007: LD_INT 4
24009: MOD
24010: PUSH
24011: LD_INT 1
24013: PLUS
24014: PPUSH
24015: CALL_OW 259
24019: PUSH
24020: LD_INT 1
24022: PLUS
24023: PPUSH
24024: CALL_OW 237
24028: GO 23930
24030: POP
24031: POP
// end ;
24032: PPOPN 3
24034: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24035: LD_EXP 52
24039: PUSH
24040: LD_EXP 60
24044: AND
24045: IFFALSE 24065
24047: GO 24049
24049: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24050: LD_INT 4
24052: PPUSH
24053: LD_OWVAR 2
24057: PPUSH
24058: LD_INT 0
24060: PPUSH
24061: CALL_OW 324
24065: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24066: LD_EXP 52
24070: PUSH
24071: LD_EXP 89
24075: AND
24076: IFFALSE 24096
24078: GO 24080
24080: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24081: LD_INT 19
24083: PPUSH
24084: LD_OWVAR 2
24088: PPUSH
24089: LD_INT 0
24091: PPUSH
24092: CALL_OW 324
24096: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24097: LD_EXP 52
24101: PUSH
24102: LD_EXP 61
24106: AND
24107: IFFALSE 24209
24109: GO 24111
24111: DISABLE
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
// begin enable ;
24116: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24117: LD_ADDR_VAR 0 2
24121: PUSH
24122: LD_INT 22
24124: PUSH
24125: LD_OWVAR 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: LD_INT 34
24139: PUSH
24140: LD_INT 11
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 34
24149: PUSH
24150: LD_INT 30
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 69
24170: ST_TO_ADDR
// if not tmp then
24171: LD_VAR 0 2
24175: NOT
24176: IFFALSE 24180
// exit ;
24178: GO 24209
// for i in tmp do
24180: LD_ADDR_VAR 0 1
24184: PUSH
24185: LD_VAR 0 2
24189: PUSH
24190: FOR_IN
24191: IFFALSE 24207
// begin SetLives ( i , 0 ) ;
24193: LD_VAR 0 1
24197: PPUSH
24198: LD_INT 0
24200: PPUSH
24201: CALL_OW 234
// end ;
24205: GO 24190
24207: POP
24208: POP
// end ;
24209: PPOPN 2
24211: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24212: LD_EXP 52
24216: PUSH
24217: LD_EXP 62
24221: AND
24222: IFFALSE 24242
24224: GO 24226
24226: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24227: LD_INT 32
24229: PPUSH
24230: LD_OWVAR 2
24234: PPUSH
24235: LD_INT 0
24237: PPUSH
24238: CALL_OW 324
24242: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24243: LD_EXP 52
24247: PUSH
24248: LD_EXP 63
24252: AND
24253: IFFALSE 24434
24255: GO 24257
24257: DISABLE
24258: LD_INT 0
24260: PPUSH
24261: PPUSH
24262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_OWVAR 2
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 33
24282: PUSH
24283: LD_INT 3
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PPUSH
24294: CALL_OW 69
24298: ST_TO_ADDR
// if not tmp then
24299: LD_VAR 0 2
24303: NOT
24304: IFFALSE 24308
// exit ;
24306: GO 24434
// side := 0 ;
24308: LD_ADDR_VAR 0 3
24312: PUSH
24313: LD_INT 0
24315: ST_TO_ADDR
// for i := 1 to 8 do
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: DOUBLE
24322: LD_INT 1
24324: DEC
24325: ST_TO_ADDR
24326: LD_INT 8
24328: PUSH
24329: FOR_TO
24330: IFFALSE 24378
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24332: LD_OWVAR 2
24336: PUSH
24337: LD_VAR 0 1
24341: NONEQUAL
24342: PUSH
24343: LD_OWVAR 2
24347: PPUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: CALL_OW 81
24357: PUSH
24358: LD_INT 2
24360: EQUAL
24361: AND
24362: IFFALSE 24376
// begin side := i ;
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_VAR 0 1
24373: ST_TO_ADDR
// break ;
24374: GO 24378
// end ;
24376: GO 24329
24378: POP
24379: POP
// if not side then
24380: LD_VAR 0 3
24384: NOT
24385: IFFALSE 24389
// exit ;
24387: GO 24434
// for i := 1 to tmp do
24389: LD_ADDR_VAR 0 1
24393: PUSH
24394: DOUBLE
24395: LD_INT 1
24397: DEC
24398: ST_TO_ADDR
24399: LD_VAR 0 2
24403: PUSH
24404: FOR_TO
24405: IFFALSE 24432
// if Prob ( 60 ) then
24407: LD_INT 60
24409: PPUSH
24410: CALL_OW 13
24414: IFFALSE 24430
// SetSide ( i , side ) ;
24416: LD_VAR 0 1
24420: PPUSH
24421: LD_VAR 0 3
24425: PPUSH
24426: CALL_OW 235
24430: GO 24404
24432: POP
24433: POP
// end ;
24434: PPOPN 3
24436: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24437: LD_EXP 52
24441: PUSH
24442: LD_EXP 65
24446: AND
24447: IFFALSE 24566
24449: GO 24451
24451: DISABLE
24452: LD_INT 0
24454: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_INT 22
24462: PUSH
24463: LD_OWVAR 2
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 21
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: LD_INT 23
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: PPUSH
24504: CALL_OW 69
24508: PUSH
24509: FOR_IN
24510: IFFALSE 24564
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 257
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: LD_INT 4
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: IN
24540: IFFALSE 24562
// SetClass ( un , rand ( 1 , 4 ) ) ;
24542: LD_VAR 0 1
24546: PPUSH
24547: LD_INT 1
24549: PPUSH
24550: LD_INT 4
24552: PPUSH
24553: CALL_OW 12
24557: PPUSH
24558: CALL_OW 336
24562: GO 24509
24564: POP
24565: POP
// end ;
24566: PPOPN 1
24568: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24569: LD_EXP 52
24573: PUSH
24574: LD_EXP 64
24578: AND
24579: IFFALSE 24658
24581: GO 24583
24583: DISABLE
24584: LD_INT 0
24586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24587: LD_ADDR_VAR 0 1
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_OWVAR 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 21
24606: PUSH
24607: LD_INT 3
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PPUSH
24618: CALL_OW 69
24622: ST_TO_ADDR
// if not tmp then
24623: LD_VAR 0 1
24627: NOT
24628: IFFALSE 24632
// exit ;
24630: GO 24658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24632: LD_VAR 0 1
24636: PUSH
24637: LD_INT 1
24639: PPUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: CALL_OW 12
24649: ARRAY
24650: PPUSH
24651: LD_INT 100
24653: PPUSH
24654: CALL_OW 234
// end ;
24658: PPOPN 1
24660: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24661: LD_EXP 52
24665: PUSH
24666: LD_EXP 66
24670: AND
24671: IFFALSE 24769
24673: GO 24675
24675: DISABLE
24676: LD_INT 0
24678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_INT 22
24686: PUSH
24687: LD_OWVAR 2
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 21
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PPUSH
24710: CALL_OW 69
24714: ST_TO_ADDR
// if not tmp then
24715: LD_VAR 0 1
24719: NOT
24720: IFFALSE 24724
// exit ;
24722: GO 24769
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24724: LD_VAR 0 1
24728: PUSH
24729: LD_INT 1
24731: PPUSH
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL_OW 12
24741: ARRAY
24742: PPUSH
24743: LD_INT 1
24745: PPUSH
24746: LD_INT 4
24748: PPUSH
24749: CALL_OW 12
24753: PPUSH
24754: LD_INT 3000
24756: PPUSH
24757: LD_INT 9000
24759: PPUSH
24760: CALL_OW 12
24764: PPUSH
24765: CALL_OW 492
// end ;
24769: PPOPN 1
24771: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24772: LD_EXP 52
24776: PUSH
24777: LD_EXP 67
24781: AND
24782: IFFALSE 24802
24784: GO 24786
24786: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24787: LD_INT 1
24789: PPUSH
24790: LD_OWVAR 2
24794: PPUSH
24795: LD_INT 0
24797: PPUSH
24798: CALL_OW 324
24802: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24803: LD_EXP 52
24807: PUSH
24808: LD_EXP 68
24812: AND
24813: IFFALSE 24896
24815: GO 24817
24817: DISABLE
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24822: LD_ADDR_VAR 0 2
24826: PUSH
24827: LD_INT 22
24829: PUSH
24830: LD_OWVAR 2
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PPUSH
24853: CALL_OW 69
24857: ST_TO_ADDR
// if not tmp then
24858: LD_VAR 0 2
24862: NOT
24863: IFFALSE 24867
// exit ;
24865: GO 24896
// for i in tmp do
24867: LD_ADDR_VAR 0 1
24871: PUSH
24872: LD_VAR 0 2
24876: PUSH
24877: FOR_IN
24878: IFFALSE 24894
// SetBLevel ( i , 10 ) ;
24880: LD_VAR 0 1
24884: PPUSH
24885: LD_INT 10
24887: PPUSH
24888: CALL_OW 241
24892: GO 24877
24894: POP
24895: POP
// end ;
24896: PPOPN 2
24898: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24899: LD_EXP 52
24903: PUSH
24904: LD_EXP 69
24908: AND
24909: IFFALSE 25020
24911: GO 24913
24913: DISABLE
24914: LD_INT 0
24916: PPUSH
24917: PPUSH
24918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24919: LD_ADDR_VAR 0 3
24923: PUSH
24924: LD_INT 22
24926: PUSH
24927: LD_OWVAR 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 25
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PPUSH
24950: CALL_OW 69
24954: ST_TO_ADDR
// if not tmp then
24955: LD_VAR 0 3
24959: NOT
24960: IFFALSE 24964
// exit ;
24962: GO 25020
// un := tmp [ rand ( 1 , tmp ) ] ;
24964: LD_ADDR_VAR 0 2
24968: PUSH
24969: LD_VAR 0 3
24973: PUSH
24974: LD_INT 1
24976: PPUSH
24977: LD_VAR 0 3
24981: PPUSH
24982: CALL_OW 12
24986: ARRAY
24987: ST_TO_ADDR
// if Crawls ( un ) then
24988: LD_VAR 0 2
24992: PPUSH
24993: CALL_OW 318
24997: IFFALSE 25008
// ComWalk ( un ) ;
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25008: LD_VAR 0 2
25012: PPUSH
25013: LD_INT 5
25015: PPUSH
25016: CALL_OW 336
// end ;
25020: PPOPN 3
25022: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25023: LD_EXP 52
25027: PUSH
25028: LD_EXP 70
25032: AND
25033: PUSH
25034: LD_OWVAR 67
25038: PUSH
25039: LD_INT 4
25041: LESS
25042: AND
25043: IFFALSE 25062
25045: GO 25047
25047: DISABLE
// begin Difficulty := Difficulty + 1 ;
25048: LD_ADDR_OWVAR 67
25052: PUSH
25053: LD_OWVAR 67
25057: PUSH
25058: LD_INT 1
25060: PLUS
25061: ST_TO_ADDR
// end ;
25062: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25063: LD_EXP 52
25067: PUSH
25068: LD_EXP 71
25072: AND
25073: IFFALSE 25176
25075: GO 25077
25077: DISABLE
25078: LD_INT 0
25080: PPUSH
// begin for i := 1 to 5 do
25081: LD_ADDR_VAR 0 1
25085: PUSH
25086: DOUBLE
25087: LD_INT 1
25089: DEC
25090: ST_TO_ADDR
25091: LD_INT 5
25093: PUSH
25094: FOR_TO
25095: IFFALSE 25174
// begin uc_nation := nation_nature ;
25097: LD_ADDR_OWVAR 21
25101: PUSH
25102: LD_INT 0
25104: ST_TO_ADDR
// uc_side := 0 ;
25105: LD_ADDR_OWVAR 20
25109: PUSH
25110: LD_INT 0
25112: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25113: LD_ADDR_OWVAR 29
25117: PUSH
25118: LD_INT 12
25120: PUSH
25121: LD_INT 12
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: ST_TO_ADDR
// hc_agressivity := 20 ;
25128: LD_ADDR_OWVAR 35
25132: PUSH
25133: LD_INT 20
25135: ST_TO_ADDR
// hc_class := class_tiger ;
25136: LD_ADDR_OWVAR 28
25140: PUSH
25141: LD_INT 14
25143: ST_TO_ADDR
// hc_gallery :=  ;
25144: LD_ADDR_OWVAR 33
25148: PUSH
25149: LD_STRING 
25151: ST_TO_ADDR
// hc_name :=  ;
25152: LD_ADDR_OWVAR 26
25156: PUSH
25157: LD_STRING 
25159: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25160: CALL_OW 44
25164: PPUSH
25165: LD_INT 0
25167: PPUSH
25168: CALL_OW 51
// end ;
25172: GO 25094
25174: POP
25175: POP
// end ;
25176: PPOPN 1
25178: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25179: LD_EXP 52
25183: PUSH
25184: LD_EXP 72
25188: AND
25189: IFFALSE 25198
25191: GO 25193
25193: DISABLE
// StreamSibBomb ;
25194: CALL 25199 0 0
25198: END
// export function StreamSibBomb ; var i , x , y ; begin
25199: LD_INT 0
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
// result := false ;
25205: LD_ADDR_VAR 0 1
25209: PUSH
25210: LD_INT 0
25212: ST_TO_ADDR
// for i := 1 to 16 do
25213: LD_ADDR_VAR 0 2
25217: PUSH
25218: DOUBLE
25219: LD_INT 1
25221: DEC
25222: ST_TO_ADDR
25223: LD_INT 16
25225: PUSH
25226: FOR_TO
25227: IFFALSE 25426
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25229: LD_ADDR_VAR 0 3
25233: PUSH
25234: LD_INT 10
25236: PUSH
25237: LD_INT 20
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 40
25245: PUSH
25246: LD_INT 50
25248: PUSH
25249: LD_INT 60
25251: PUSH
25252: LD_INT 70
25254: PUSH
25255: LD_INT 80
25257: PUSH
25258: LD_INT 90
25260: PUSH
25261: LD_INT 100
25263: PUSH
25264: LD_INT 110
25266: PUSH
25267: LD_INT 120
25269: PUSH
25270: LD_INT 130
25272: PUSH
25273: LD_INT 140
25275: PUSH
25276: LD_INT 150
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: PPUSH
25299: LD_INT 15
25301: PPUSH
25302: CALL_OW 12
25306: ARRAY
25307: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_INT 10
25315: PUSH
25316: LD_INT 20
25318: PUSH
25319: LD_INT 30
25321: PUSH
25322: LD_INT 40
25324: PUSH
25325: LD_INT 50
25327: PUSH
25328: LD_INT 60
25330: PUSH
25331: LD_INT 70
25333: PUSH
25334: LD_INT 80
25336: PUSH
25337: LD_INT 90
25339: PUSH
25340: LD_INT 100
25342: PUSH
25343: LD_INT 110
25345: PUSH
25346: LD_INT 120
25348: PUSH
25349: LD_INT 130
25351: PUSH
25352: LD_INT 140
25354: PUSH
25355: LD_INT 150
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PPUSH
25378: LD_INT 15
25380: PPUSH
25381: CALL_OW 12
25385: ARRAY
25386: ST_TO_ADDR
// if ValidHex ( x , y ) then
25387: LD_VAR 0 3
25391: PPUSH
25392: LD_VAR 0 4
25396: PPUSH
25397: CALL_OW 488
25401: IFFALSE 25424
// begin result := [ x , y ] ;
25403: LD_ADDR_VAR 0 1
25407: PUSH
25408: LD_VAR 0 3
25412: PUSH
25413: LD_VAR 0 4
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: ST_TO_ADDR
// break ;
25422: GO 25426
// end ; end ;
25424: GO 25226
25426: POP
25427: POP
// if result then
25428: LD_VAR 0 1
25432: IFFALSE 25492
// begin ToLua ( playSibBomb() ) ;
25434: LD_STRING playSibBomb()
25436: PPUSH
25437: CALL_OW 559
// wait ( 0 0$14 ) ;
25441: LD_INT 490
25443: PPUSH
25444: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25448: LD_VAR 0 1
25452: PUSH
25453: LD_INT 1
25455: ARRAY
25456: PPUSH
25457: LD_VAR 0 1
25461: PUSH
25462: LD_INT 2
25464: ARRAY
25465: PPUSH
25466: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25470: LD_VAR 0 1
25474: PUSH
25475: LD_INT 1
25477: ARRAY
25478: PPUSH
25479: LD_VAR 0 1
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: PPUSH
25488: CALL_OW 429
// end ; end ;
25492: LD_VAR 0 1
25496: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25497: LD_EXP 52
25501: PUSH
25502: LD_EXP 74
25506: AND
25507: IFFALSE 25519
25509: GO 25511
25511: DISABLE
// YouLost (  ) ;
25512: LD_STRING 
25514: PPUSH
25515: CALL_OW 104
25519: END
// every 0 0$1 trigger StreamModeActive and sFog do
25520: LD_EXP 52
25524: PUSH
25525: LD_EXP 73
25529: AND
25530: IFFALSE 25544
25532: GO 25534
25534: DISABLE
// FogOff ( your_side ) ;
25535: LD_OWVAR 2
25539: PPUSH
25540: CALL_OW 344
25544: END
// every 0 0$1 trigger StreamModeActive and sSun do
25545: LD_EXP 52
25549: PUSH
25550: LD_EXP 75
25554: AND
25555: IFFALSE 25583
25557: GO 25559
25559: DISABLE
// begin solar_recharge_percent := 0 ;
25560: LD_ADDR_OWVAR 79
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25568: LD_INT 10500
25570: PPUSH
25571: CALL_OW 67
// solar_recharge_percent := 100 ;
25575: LD_ADDR_OWVAR 79
25579: PUSH
25580: LD_INT 100
25582: ST_TO_ADDR
// end ;
25583: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25584: LD_EXP 52
25588: PUSH
25589: LD_EXP 76
25593: AND
25594: IFFALSE 25833
25596: GO 25598
25598: DISABLE
25599: LD_INT 0
25601: PPUSH
25602: PPUSH
25603: PPUSH
// begin tmp := [ ] ;
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: EMPTY
25610: ST_TO_ADDR
// for i := 1 to 6 do
25611: LD_ADDR_VAR 0 1
25615: PUSH
25616: DOUBLE
25617: LD_INT 1
25619: DEC
25620: ST_TO_ADDR
25621: LD_INT 6
25623: PUSH
25624: FOR_TO
25625: IFFALSE 25730
// begin uc_nation := nation_nature ;
25627: LD_ADDR_OWVAR 21
25631: PUSH
25632: LD_INT 0
25634: ST_TO_ADDR
// uc_side := 0 ;
25635: LD_ADDR_OWVAR 20
25639: PUSH
25640: LD_INT 0
25642: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25643: LD_ADDR_OWVAR 29
25647: PUSH
25648: LD_INT 12
25650: PUSH
25651: LD_INT 12
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: ST_TO_ADDR
// hc_agressivity := 20 ;
25658: LD_ADDR_OWVAR 35
25662: PUSH
25663: LD_INT 20
25665: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25666: LD_ADDR_OWVAR 28
25670: PUSH
25671: LD_INT 17
25673: ST_TO_ADDR
// hc_gallery :=  ;
25674: LD_ADDR_OWVAR 33
25678: PUSH
25679: LD_STRING 
25681: ST_TO_ADDR
// hc_name :=  ;
25682: LD_ADDR_OWVAR 26
25686: PUSH
25687: LD_STRING 
25689: ST_TO_ADDR
// un := CreateHuman ;
25690: LD_ADDR_VAR 0 2
25694: PUSH
25695: CALL_OW 44
25699: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25700: LD_VAR 0 2
25704: PPUSH
25705: LD_INT 1
25707: PPUSH
25708: CALL_OW 51
// tmp := tmp ^ un ;
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_VAR 0 3
25721: PUSH
25722: LD_VAR 0 2
25726: ADD
25727: ST_TO_ADDR
// end ;
25728: GO 25624
25730: POP
25731: POP
// repeat wait ( 0 0$1 ) ;
25732: LD_INT 35
25734: PPUSH
25735: CALL_OW 67
// for un in tmp do
25739: LD_ADDR_VAR 0 2
25743: PUSH
25744: LD_VAR 0 3
25748: PUSH
25749: FOR_IN
25750: IFFALSE 25824
// begin if IsDead ( un ) then
25752: LD_VAR 0 2
25756: PPUSH
25757: CALL_OW 301
25761: IFFALSE 25781
// begin tmp := tmp diff un ;
25763: LD_ADDR_VAR 0 3
25767: PUSH
25768: LD_VAR 0 3
25772: PUSH
25773: LD_VAR 0 2
25777: DIFF
25778: ST_TO_ADDR
// continue ;
25779: GO 25749
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25781: LD_VAR 0 2
25785: PPUSH
25786: LD_INT 3
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PPUSH
25803: CALL_OW 69
25807: PPUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 74
25817: PPUSH
25818: CALL_OW 115
// end ;
25822: GO 25749
25824: POP
25825: POP
// until not tmp ;
25826: LD_VAR 0 3
25830: NOT
25831: IFFALSE 25732
// end ;
25833: PPOPN 3
25835: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25836: LD_EXP 52
25840: PUSH
25841: LD_EXP 77
25845: AND
25846: IFFALSE 25900
25848: GO 25850
25850: DISABLE
// begin ToLua ( displayTroll(); ) ;
25851: LD_STRING displayTroll();
25853: PPUSH
25854: CALL_OW 559
// wait ( 3 3$00 ) ;
25858: LD_INT 6300
25860: PPUSH
25861: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25865: LD_STRING hideTroll();
25867: PPUSH
25868: CALL_OW 559
// wait ( 1 1$00 ) ;
25872: LD_INT 2100
25874: PPUSH
25875: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25879: LD_STRING displayTroll();
25881: PPUSH
25882: CALL_OW 559
// wait ( 1 1$00 ) ;
25886: LD_INT 2100
25888: PPUSH
25889: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25893: LD_STRING hideTroll();
25895: PPUSH
25896: CALL_OW 559
// end ;
25900: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25901: LD_EXP 52
25905: PUSH
25906: LD_EXP 78
25910: AND
25911: IFFALSE 25974
25913: GO 25915
25915: DISABLE
25916: LD_INT 0
25918: PPUSH
// begin p := 0 ;
25919: LD_ADDR_VAR 0 1
25923: PUSH
25924: LD_INT 0
25926: ST_TO_ADDR
// repeat game_speed := 1 ;
25927: LD_ADDR_OWVAR 65
25931: PUSH
25932: LD_INT 1
25934: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25935: LD_INT 35
25937: PPUSH
25938: CALL_OW 67
// p := p + 1 ;
25942: LD_ADDR_VAR 0 1
25946: PUSH
25947: LD_VAR 0 1
25951: PUSH
25952: LD_INT 1
25954: PLUS
25955: ST_TO_ADDR
// until p >= 60 ;
25956: LD_VAR 0 1
25960: PUSH
25961: LD_INT 60
25963: GREATEREQUAL
25964: IFFALSE 25927
// game_speed := 4 ;
25966: LD_ADDR_OWVAR 65
25970: PUSH
25971: LD_INT 4
25973: ST_TO_ADDR
// end ;
25974: PPOPN 1
25976: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25977: LD_EXP 52
25981: PUSH
25982: LD_EXP 79
25986: AND
25987: IFFALSE 26133
25989: GO 25991
25991: DISABLE
25992: LD_INT 0
25994: PPUSH
25995: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25996: LD_ADDR_VAR 0 1
26000: PUSH
26001: LD_INT 22
26003: PUSH
26004: LD_OWVAR 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 30
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 30
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PPUSH
26045: CALL_OW 69
26049: ST_TO_ADDR
// if not depot then
26050: LD_VAR 0 1
26054: NOT
26055: IFFALSE 26059
// exit ;
26057: GO 26133
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26059: LD_ADDR_VAR 0 2
26063: PUSH
26064: LD_VAR 0 1
26068: PUSH
26069: LD_INT 1
26071: PPUSH
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 12
26081: ARRAY
26082: PPUSH
26083: CALL_OW 274
26087: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26088: LD_VAR 0 2
26092: PPUSH
26093: LD_INT 1
26095: PPUSH
26096: LD_INT 0
26098: PPUSH
26099: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26103: LD_VAR 0 2
26107: PPUSH
26108: LD_INT 2
26110: PPUSH
26111: LD_INT 0
26113: PPUSH
26114: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26118: LD_VAR 0 2
26122: PPUSH
26123: LD_INT 3
26125: PPUSH
26126: LD_INT 0
26128: PPUSH
26129: CALL_OW 277
// end ;
26133: PPOPN 2
26135: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26136: LD_EXP 52
26140: PUSH
26141: LD_EXP 80
26145: AND
26146: IFFALSE 26243
26148: GO 26150
26150: DISABLE
26151: LD_INT 0
26153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26154: LD_ADDR_VAR 0 1
26158: PUSH
26159: LD_INT 22
26161: PUSH
26162: LD_OWVAR 2
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 21
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 23
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: PPUSH
26203: CALL_OW 69
26207: ST_TO_ADDR
// if not tmp then
26208: LD_VAR 0 1
26212: NOT
26213: IFFALSE 26217
// exit ;
26215: GO 26243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26217: LD_VAR 0 1
26221: PUSH
26222: LD_INT 1
26224: PPUSH
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 12
26234: ARRAY
26235: PPUSH
26236: LD_INT 200
26238: PPUSH
26239: CALL_OW 234
// end ;
26243: PPOPN 1
26245: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26246: LD_EXP 52
26250: PUSH
26251: LD_EXP 81
26255: AND
26256: IFFALSE 26335
26258: GO 26260
26260: DISABLE
26261: LD_INT 0
26263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26264: LD_ADDR_VAR 0 1
26268: PUSH
26269: LD_INT 22
26271: PUSH
26272: LD_OWVAR 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 21
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: ST_TO_ADDR
// if not tmp then
26300: LD_VAR 0 1
26304: NOT
26305: IFFALSE 26309
// exit ;
26307: GO 26335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26309: LD_VAR 0 1
26313: PUSH
26314: LD_INT 1
26316: PPUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 12
26326: ARRAY
26327: PPUSH
26328: LD_INT 60
26330: PPUSH
26331: CALL_OW 234
// end ;
26335: PPOPN 1
26337: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26338: LD_EXP 52
26342: PUSH
26343: LD_EXP 82
26347: AND
26348: IFFALSE 26447
26350: GO 26352
26352: DISABLE
26353: LD_INT 0
26355: PPUSH
26356: PPUSH
// begin enable ;
26357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26358: LD_ADDR_VAR 0 1
26362: PUSH
26363: LD_INT 22
26365: PUSH
26366: LD_OWVAR 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 61
26377: PUSH
26378: EMPTY
26379: LIST
26380: PUSH
26381: LD_INT 33
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: PPUSH
26396: CALL_OW 69
26400: ST_TO_ADDR
// if not tmp then
26401: LD_VAR 0 1
26405: NOT
26406: IFFALSE 26410
// exit ;
26408: GO 26447
// for i in tmp do
26410: LD_ADDR_VAR 0 2
26414: PUSH
26415: LD_VAR 0 1
26419: PUSH
26420: FOR_IN
26421: IFFALSE 26445
// if IsControledBy ( i ) then
26423: LD_VAR 0 2
26427: PPUSH
26428: CALL_OW 312
26432: IFFALSE 26443
// ComUnlink ( i ) ;
26434: LD_VAR 0 2
26438: PPUSH
26439: CALL_OW 136
26443: GO 26420
26445: POP
26446: POP
// end ;
26447: PPOPN 2
26449: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26450: LD_EXP 52
26454: PUSH
26455: LD_EXP 83
26459: AND
26460: IFFALSE 26600
26462: GO 26464
26464: DISABLE
26465: LD_INT 0
26467: PPUSH
26468: PPUSH
// begin ToLua ( displayPowell(); ) ;
26469: LD_STRING displayPowell();
26471: PPUSH
26472: CALL_OW 559
// uc_side := 0 ;
26476: LD_ADDR_OWVAR 20
26480: PUSH
26481: LD_INT 0
26483: ST_TO_ADDR
// uc_nation := 2 ;
26484: LD_ADDR_OWVAR 21
26488: PUSH
26489: LD_INT 2
26491: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26492: LD_ADDR_OWVAR 37
26496: PUSH
26497: LD_INT 14
26499: ST_TO_ADDR
// vc_engine := engine_siberite ;
26500: LD_ADDR_OWVAR 39
26504: PUSH
26505: LD_INT 3
26507: ST_TO_ADDR
// vc_control := control_apeman ;
26508: LD_ADDR_OWVAR 38
26512: PUSH
26513: LD_INT 5
26515: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26516: LD_ADDR_OWVAR 40
26520: PUSH
26521: LD_INT 29
26523: ST_TO_ADDR
// un := CreateVehicle ;
26524: LD_ADDR_VAR 0 2
26528: PUSH
26529: CALL_OW 45
26533: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26534: LD_VAR 0 2
26538: PPUSH
26539: LD_INT 1
26541: PPUSH
26542: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26546: LD_INT 35
26548: PPUSH
26549: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26553: LD_VAR 0 2
26557: PPUSH
26558: LD_INT 22
26560: PUSH
26561: LD_OWVAR 2
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PPUSH
26570: CALL_OW 69
26574: PPUSH
26575: LD_VAR 0 2
26579: PPUSH
26580: CALL_OW 74
26584: PPUSH
26585: CALL_OW 115
// until IsDead ( un ) ;
26589: LD_VAR 0 2
26593: PPUSH
26594: CALL_OW 301
26598: IFFALSE 26546
// end ;
26600: PPOPN 2
26602: END
// every 0 0$1 trigger StreamModeActive and sStu do
26603: LD_EXP 52
26607: PUSH
26608: LD_EXP 91
26612: AND
26613: IFFALSE 26629
26615: GO 26617
26617: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26618: LD_STRING displayStucuk();
26620: PPUSH
26621: CALL_OW 559
// ResetFog ;
26625: CALL_OW 335
// end ;
26629: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26630: LD_EXP 52
26634: PUSH
26635: LD_EXP 84
26639: AND
26640: IFFALSE 26781
26642: GO 26644
26644: DISABLE
26645: LD_INT 0
26647: PPUSH
26648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26649: LD_ADDR_VAR 0 2
26653: PUSH
26654: LD_INT 22
26656: PUSH
26657: LD_OWVAR 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 21
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: CALL_OW 69
26684: ST_TO_ADDR
// if not tmp then
26685: LD_VAR 0 2
26689: NOT
26690: IFFALSE 26694
// exit ;
26692: GO 26781
// un := tmp [ rand ( 1 , tmp ) ] ;
26694: LD_ADDR_VAR 0 1
26698: PUSH
26699: LD_VAR 0 2
26703: PUSH
26704: LD_INT 1
26706: PPUSH
26707: LD_VAR 0 2
26711: PPUSH
26712: CALL_OW 12
26716: ARRAY
26717: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 0
26725: PPUSH
26726: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26730: LD_VAR 0 1
26734: PPUSH
26735: LD_OWVAR 3
26739: PUSH
26740: LD_VAR 0 1
26744: DIFF
26745: PPUSH
26746: LD_VAR 0 1
26750: PPUSH
26751: CALL_OW 74
26755: PPUSH
26756: CALL_OW 115
// wait ( 0 0$20 ) ;
26760: LD_INT 700
26762: PPUSH
26763: CALL_OW 67
// SetSide ( un , your_side ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: LD_OWVAR 2
26776: PPUSH
26777: CALL_OW 235
// end ;
26781: PPOPN 2
26783: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26784: LD_EXP 52
26788: PUSH
26789: LD_EXP 85
26793: AND
26794: IFFALSE 26900
26796: GO 26798
26798: DISABLE
26799: LD_INT 0
26801: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26802: LD_ADDR_VAR 0 1
26806: PUSH
26807: LD_INT 22
26809: PUSH
26810: LD_OWVAR 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 30
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 30
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: ST_TO_ADDR
// if not depot then
26856: LD_VAR 0 1
26860: NOT
26861: IFFALSE 26865
// exit ;
26863: GO 26900
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26865: LD_VAR 0 1
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: CALL_OW 250
26878: PPUSH
26879: LD_VAR 0 1
26883: PUSH
26884: LD_INT 1
26886: ARRAY
26887: PPUSH
26888: CALL_OW 251
26892: PPUSH
26893: LD_INT 70
26895: PPUSH
26896: CALL_OW 495
// end ;
26900: PPOPN 1
26902: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26903: LD_EXP 52
26907: PUSH
26908: LD_EXP 86
26912: AND
26913: IFFALSE 27124
26915: GO 26917
26917: DISABLE
26918: LD_INT 0
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26925: LD_ADDR_VAR 0 5
26929: PUSH
26930: LD_INT 22
26932: PUSH
26933: LD_OWVAR 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 21
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PPUSH
26956: CALL_OW 69
26960: ST_TO_ADDR
// if not tmp then
26961: LD_VAR 0 5
26965: NOT
26966: IFFALSE 26970
// exit ;
26968: GO 27124
// for i in tmp do
26970: LD_ADDR_VAR 0 1
26974: PUSH
26975: LD_VAR 0 5
26979: PUSH
26980: FOR_IN
26981: IFFALSE 27122
// begin d := rand ( 0 , 5 ) ;
26983: LD_ADDR_VAR 0 4
26987: PUSH
26988: LD_INT 0
26990: PPUSH
26991: LD_INT 5
26993: PPUSH
26994: CALL_OW 12
26998: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 250
27013: PPUSH
27014: LD_VAR 0 4
27018: PPUSH
27019: LD_INT 3
27021: PPUSH
27022: LD_INT 12
27024: PPUSH
27025: CALL_OW 12
27029: PPUSH
27030: CALL_OW 272
27034: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: CALL_OW 251
27049: PPUSH
27050: LD_VAR 0 4
27054: PPUSH
27055: LD_INT 3
27057: PPUSH
27058: LD_INT 12
27060: PPUSH
27061: CALL_OW 12
27065: PPUSH
27066: CALL_OW 273
27070: ST_TO_ADDR
// if ValidHex ( x , y ) then
27071: LD_VAR 0 2
27075: PPUSH
27076: LD_VAR 0 3
27080: PPUSH
27081: CALL_OW 488
27085: IFFALSE 27120
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: LD_VAR 0 2
27096: PPUSH
27097: LD_VAR 0 3
27101: PPUSH
27102: LD_INT 3
27104: PPUSH
27105: LD_INT 6
27107: PPUSH
27108: CALL_OW 12
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: CALL_OW 483
// end ;
27120: GO 26980
27122: POP
27123: POP
// end ;
27124: PPOPN 5
27126: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27127: LD_EXP 52
27131: PUSH
27132: LD_EXP 87
27136: AND
27137: IFFALSE 27231
27139: GO 27141
27141: DISABLE
27142: LD_INT 0
27144: PPUSH
27145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27146: LD_ADDR_VAR 0 2
27150: PUSH
27151: LD_INT 22
27153: PUSH
27154: LD_OWVAR 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 32
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 21
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 69
27192: ST_TO_ADDR
// if not tmp then
27193: LD_VAR 0 2
27197: NOT
27198: IFFALSE 27202
// exit ;
27200: GO 27231
// for i in tmp do
27202: LD_ADDR_VAR 0 1
27206: PUSH
27207: LD_VAR 0 2
27211: PUSH
27212: FOR_IN
27213: IFFALSE 27229
// SetFuel ( i , 0 ) ;
27215: LD_VAR 0 1
27219: PPUSH
27220: LD_INT 0
27222: PPUSH
27223: CALL_OW 240
27227: GO 27212
27229: POP
27230: POP
// end ;
27231: PPOPN 2
27233: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27234: LD_EXP 52
27238: PUSH
27239: LD_EXP 88
27243: AND
27244: IFFALSE 27310
27246: GO 27248
27248: DISABLE
27249: LD_INT 0
27251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_INT 22
27259: PUSH
27260: LD_OWVAR 2
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 30
27271: PUSH
27272: LD_INT 29
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: ST_TO_ADDR
// if not tmp then
27288: LD_VAR 0 1
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27310
// DestroyUnit ( tmp [ 1 ] ) ;
27297: LD_VAR 0 1
27301: PUSH
27302: LD_INT 1
27304: ARRAY
27305: PPUSH
27306: CALL_OW 65
// end ;
27310: PPOPN 1
27312: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27313: LD_EXP 52
27317: PUSH
27318: LD_EXP 90
27322: AND
27323: IFFALSE 27452
27325: GO 27327
27327: DISABLE
27328: LD_INT 0
27330: PPUSH
// begin uc_side := 0 ;
27331: LD_ADDR_OWVAR 20
27335: PUSH
27336: LD_INT 0
27338: ST_TO_ADDR
// uc_nation := nation_arabian ;
27339: LD_ADDR_OWVAR 21
27343: PUSH
27344: LD_INT 2
27346: ST_TO_ADDR
// hc_gallery :=  ;
27347: LD_ADDR_OWVAR 33
27351: PUSH
27352: LD_STRING 
27354: ST_TO_ADDR
// hc_name :=  ;
27355: LD_ADDR_OWVAR 26
27359: PUSH
27360: LD_STRING 
27362: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27363: LD_INT 1
27365: PPUSH
27366: LD_INT 11
27368: PPUSH
27369: LD_INT 10
27371: PPUSH
27372: CALL_OW 380
// un := CreateHuman ;
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: CALL_OW 44
27385: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27386: LD_VAR 0 1
27390: PPUSH
27391: LD_INT 1
27393: PPUSH
27394: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27398: LD_INT 35
27400: PPUSH
27401: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27405: LD_VAR 0 1
27409: PPUSH
27410: LD_INT 22
27412: PUSH
27413: LD_OWVAR 2
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: PPUSH
27427: LD_VAR 0 1
27431: PPUSH
27432: CALL_OW 74
27436: PPUSH
27437: CALL_OW 115
// until IsDead ( un ) ;
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 301
27450: IFFALSE 27398
// end ;
27452: PPOPN 1
27454: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27455: LD_EXP 52
27459: PUSH
27460: LD_EXP 92
27464: AND
27465: IFFALSE 27477
27467: GO 27469
27469: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27470: LD_STRING earthquake(getX(game), 0, 32)
27472: PPUSH
27473: CALL_OW 559
27477: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27478: LD_EXP 52
27482: PUSH
27483: LD_EXP 93
27487: AND
27488: IFFALSE 27579
27490: GO 27492
27492: DISABLE
27493: LD_INT 0
27495: PPUSH
// begin enable ;
27496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27497: LD_ADDR_VAR 0 1
27501: PUSH
27502: LD_INT 22
27504: PUSH
27505: LD_OWVAR 2
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 21
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 33
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: PPUSH
27539: CALL_OW 69
27543: ST_TO_ADDR
// if not tmp then
27544: LD_VAR 0 1
27548: NOT
27549: IFFALSE 27553
// exit ;
27551: GO 27579
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27553: LD_VAR 0 1
27557: PUSH
27558: LD_INT 1
27560: PPUSH
27561: LD_VAR 0 1
27565: PPUSH
27566: CALL_OW 12
27570: ARRAY
27571: PPUSH
27572: LD_INT 1
27574: PPUSH
27575: CALL_OW 234
// end ;
27579: PPOPN 1
27581: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27582: LD_EXP 52
27586: PUSH
27587: LD_EXP 94
27591: AND
27592: IFFALSE 27733
27594: GO 27596
27596: DISABLE
27597: LD_INT 0
27599: PPUSH
27600: PPUSH
27601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27602: LD_ADDR_VAR 0 3
27606: PUSH
27607: LD_INT 22
27609: PUSH
27610: LD_OWVAR 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 25
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PPUSH
27633: CALL_OW 69
27637: ST_TO_ADDR
// if not tmp then
27638: LD_VAR 0 3
27642: NOT
27643: IFFALSE 27647
// exit ;
27645: GO 27733
// un := tmp [ rand ( 1 , tmp ) ] ;
27647: LD_ADDR_VAR 0 2
27651: PUSH
27652: LD_VAR 0 3
27656: PUSH
27657: LD_INT 1
27659: PPUSH
27660: LD_VAR 0 3
27664: PPUSH
27665: CALL_OW 12
27669: ARRAY
27670: ST_TO_ADDR
// if Crawls ( un ) then
27671: LD_VAR 0 2
27675: PPUSH
27676: CALL_OW 318
27680: IFFALSE 27691
// ComWalk ( un ) ;
27682: LD_VAR 0 2
27686: PPUSH
27687: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27691: LD_VAR 0 2
27695: PPUSH
27696: LD_INT 9
27698: PPUSH
27699: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27703: LD_INT 28
27705: PPUSH
27706: LD_OWVAR 2
27710: PPUSH
27711: LD_INT 2
27713: PPUSH
27714: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27718: LD_INT 29
27720: PPUSH
27721: LD_OWVAR 2
27725: PPUSH
27726: LD_INT 2
27728: PPUSH
27729: CALL_OW 322
// end ;
27733: PPOPN 3
27735: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27736: LD_EXP 52
27740: PUSH
27741: LD_EXP 95
27745: AND
27746: IFFALSE 27857
27748: GO 27750
27750: DISABLE
27751: LD_INT 0
27753: PPUSH
27754: PPUSH
27755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27756: LD_ADDR_VAR 0 3
27760: PUSH
27761: LD_INT 22
27763: PUSH
27764: LD_OWVAR 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 25
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: ST_TO_ADDR
// if not tmp then
27792: LD_VAR 0 3
27796: NOT
27797: IFFALSE 27801
// exit ;
27799: GO 27857
// un := tmp [ rand ( 1 , tmp ) ] ;
27801: LD_ADDR_VAR 0 2
27805: PUSH
27806: LD_VAR 0 3
27810: PUSH
27811: LD_INT 1
27813: PPUSH
27814: LD_VAR 0 3
27818: PPUSH
27819: CALL_OW 12
27823: ARRAY
27824: ST_TO_ADDR
// if Crawls ( un ) then
27825: LD_VAR 0 2
27829: PPUSH
27830: CALL_OW 318
27834: IFFALSE 27845
// ComWalk ( un ) ;
27836: LD_VAR 0 2
27840: PPUSH
27841: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27845: LD_VAR 0 2
27849: PPUSH
27850: LD_INT 8
27852: PPUSH
27853: CALL_OW 336
// end ;
27857: PPOPN 3
27859: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27860: LD_EXP 52
27864: PUSH
27865: LD_EXP 96
27869: AND
27870: IFFALSE 28014
27872: GO 27874
27874: DISABLE
27875: LD_INT 0
27877: PPUSH
27878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27879: LD_ADDR_VAR 0 2
27883: PUSH
27884: LD_INT 22
27886: PUSH
27887: LD_OWVAR 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 21
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 34
27911: PUSH
27912: LD_INT 12
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 34
27921: PUSH
27922: LD_INT 51
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 34
27931: PUSH
27932: LD_INT 32
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PPUSH
27950: CALL_OW 69
27954: ST_TO_ADDR
// if not tmp then
27955: LD_VAR 0 2
27959: NOT
27960: IFFALSE 27964
// exit ;
27962: GO 28014
// for i in tmp do
27964: LD_ADDR_VAR 0 1
27968: PUSH
27969: LD_VAR 0 2
27973: PUSH
27974: FOR_IN
27975: IFFALSE 28012
// if GetCargo ( i , mat_artifact ) = 0 then
27977: LD_VAR 0 1
27981: PPUSH
27982: LD_INT 4
27984: PPUSH
27985: CALL_OW 289
27989: PUSH
27990: LD_INT 0
27992: EQUAL
27993: IFFALSE 28010
// SetCargo ( i , mat_siberit , 100 ) ;
27995: LD_VAR 0 1
27999: PPUSH
28000: LD_INT 3
28002: PPUSH
28003: LD_INT 100
28005: PPUSH
28006: CALL_OW 290
28010: GO 27974
28012: POP
28013: POP
// end ;
28014: PPOPN 2
28016: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28017: LD_EXP 52
28021: PUSH
28022: LD_EXP 97
28026: AND
28027: IFFALSE 28210
28029: GO 28031
28031: DISABLE
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28036: LD_ADDR_VAR 0 2
28040: PUSH
28041: LD_INT 22
28043: PUSH
28044: LD_OWVAR 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 69
28057: ST_TO_ADDR
// if not tmp then
28058: LD_VAR 0 2
28062: NOT
28063: IFFALSE 28067
// exit ;
28065: GO 28210
// for i := 1 to 2 do
28067: LD_ADDR_VAR 0 1
28071: PUSH
28072: DOUBLE
28073: LD_INT 1
28075: DEC
28076: ST_TO_ADDR
28077: LD_INT 2
28079: PUSH
28080: FOR_TO
28081: IFFALSE 28208
// begin uc_side := your_side ;
28083: LD_ADDR_OWVAR 20
28087: PUSH
28088: LD_OWVAR 2
28092: ST_TO_ADDR
// uc_nation := nation_american ;
28093: LD_ADDR_OWVAR 21
28097: PUSH
28098: LD_INT 1
28100: ST_TO_ADDR
// vc_chassis := us_morphling ;
28101: LD_ADDR_OWVAR 37
28105: PUSH
28106: LD_INT 5
28108: ST_TO_ADDR
// vc_engine := engine_siberite ;
28109: LD_ADDR_OWVAR 39
28113: PUSH
28114: LD_INT 3
28116: ST_TO_ADDR
// vc_control := control_computer ;
28117: LD_ADDR_OWVAR 38
28121: PUSH
28122: LD_INT 3
28124: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28125: LD_ADDR_OWVAR 40
28129: PUSH
28130: LD_INT 10
28132: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28133: LD_VAR 0 2
28137: PUSH
28138: LD_INT 1
28140: ARRAY
28141: PPUSH
28142: CALL_OW 310
28146: NOT
28147: IFFALSE 28194
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28149: CALL_OW 45
28153: PPUSH
28154: LD_VAR 0 2
28158: PUSH
28159: LD_INT 1
28161: ARRAY
28162: PPUSH
28163: CALL_OW 250
28167: PPUSH
28168: LD_VAR 0 2
28172: PUSH
28173: LD_INT 1
28175: ARRAY
28176: PPUSH
28177: CALL_OW 251
28181: PPUSH
28182: LD_INT 12
28184: PPUSH
28185: LD_INT 1
28187: PPUSH
28188: CALL_OW 50
28192: GO 28206
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28194: CALL_OW 45
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: CALL_OW 51
// end ;
28206: GO 28080
28208: POP
28209: POP
// end ;
28210: PPOPN 2
28212: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28213: LD_EXP 52
28217: PUSH
28218: LD_EXP 98
28222: AND
28223: IFFALSE 28445
28225: GO 28227
28227: DISABLE
28228: LD_INT 0
28230: PPUSH
28231: PPUSH
28232: PPUSH
28233: PPUSH
28234: PPUSH
28235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28236: LD_ADDR_VAR 0 6
28240: PUSH
28241: LD_INT 22
28243: PUSH
28244: LD_OWVAR 2
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 21
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 23
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: PPUSH
28285: CALL_OW 69
28289: ST_TO_ADDR
// if not tmp then
28290: LD_VAR 0 6
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 28445
// s1 := rand ( 1 , 4 ) ;
28299: LD_ADDR_VAR 0 2
28303: PUSH
28304: LD_INT 1
28306: PPUSH
28307: LD_INT 4
28309: PPUSH
28310: CALL_OW 12
28314: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_VAR 0 6
28324: PUSH
28325: LD_INT 1
28327: ARRAY
28328: PPUSH
28329: LD_VAR 0 2
28333: PPUSH
28334: CALL_OW 259
28338: ST_TO_ADDR
// if s1 = 1 then
28339: LD_VAR 0 2
28343: PUSH
28344: LD_INT 1
28346: EQUAL
28347: IFFALSE 28367
// s2 := rand ( 2 , 4 ) else
28349: LD_ADDR_VAR 0 3
28353: PUSH
28354: LD_INT 2
28356: PPUSH
28357: LD_INT 4
28359: PPUSH
28360: CALL_OW 12
28364: ST_TO_ADDR
28365: GO 28375
// s2 := 1 ;
28367: LD_ADDR_VAR 0 3
28371: PUSH
28372: LD_INT 1
28374: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28375: LD_ADDR_VAR 0 5
28379: PUSH
28380: LD_VAR 0 6
28384: PUSH
28385: LD_INT 1
28387: ARRAY
28388: PPUSH
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL_OW 259
28398: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28399: LD_VAR 0 6
28403: PUSH
28404: LD_INT 1
28406: ARRAY
28407: PPUSH
28408: LD_VAR 0 2
28412: PPUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28422: LD_VAR 0 6
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PPUSH
28431: LD_VAR 0 3
28435: PPUSH
28436: LD_VAR 0 4
28440: PPUSH
28441: CALL_OW 237
// end ;
28445: PPOPN 6
28447: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28448: LD_EXP 52
28452: PUSH
28453: LD_EXP 99
28457: AND
28458: IFFALSE 28537
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: LD_INT 22
28473: PUSH
28474: LD_OWVAR 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 30
28485: PUSH
28486: LD_INT 3
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PPUSH
28497: CALL_OW 69
28501: ST_TO_ADDR
// if not tmp then
28502: LD_VAR 0 1
28506: NOT
28507: IFFALSE 28511
// exit ;
28509: GO 28537
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28511: LD_VAR 0 1
28515: PUSH
28516: LD_INT 1
28518: PPUSH
28519: LD_VAR 0 1
28523: PPUSH
28524: CALL_OW 12
28528: ARRAY
28529: PPUSH
28530: LD_INT 1
28532: PPUSH
28533: CALL_OW 234
// end ;
28537: PPOPN 1
28539: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28540: LD_EXP 52
28544: PUSH
28545: LD_EXP 100
28549: AND
28550: IFFALSE 28662
28552: GO 28554
28554: DISABLE
28555: LD_INT 0
28557: PPUSH
28558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28559: LD_ADDR_VAR 0 2
28563: PUSH
28564: LD_INT 22
28566: PUSH
28567: LD_OWVAR 2
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 30
28581: PUSH
28582: LD_INT 27
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 30
28591: PUSH
28592: LD_INT 26
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 30
28601: PUSH
28602: LD_INT 28
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PPUSH
28619: CALL_OW 69
28623: ST_TO_ADDR
// if not tmp then
28624: LD_VAR 0 2
28628: NOT
28629: IFFALSE 28633
// exit ;
28631: GO 28662
// for i in tmp do
28633: LD_ADDR_VAR 0 1
28637: PUSH
28638: LD_VAR 0 2
28642: PUSH
28643: FOR_IN
28644: IFFALSE 28660
// SetLives ( i , 1 ) ;
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_INT 1
28653: PPUSH
28654: CALL_OW 234
28658: GO 28643
28660: POP
28661: POP
// end ;
28662: PPOPN 2
28664: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28665: LD_EXP 52
28669: PUSH
28670: LD_EXP 101
28674: AND
28675: IFFALSE 28962
28677: GO 28679
28679: DISABLE
28680: LD_INT 0
28682: PPUSH
28683: PPUSH
28684: PPUSH
// begin i := rand ( 1 , 7 ) ;
28685: LD_ADDR_VAR 0 1
28689: PUSH
28690: LD_INT 1
28692: PPUSH
28693: LD_INT 7
28695: PPUSH
28696: CALL_OW 12
28700: ST_TO_ADDR
// case i of 1 :
28701: LD_VAR 0 1
28705: PUSH
28706: LD_INT 1
28708: DOUBLE
28709: EQUAL
28710: IFTRUE 28714
28712: GO 28724
28714: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28715: LD_STRING earthquake(getX(game), 0, 32)
28717: PPUSH
28718: CALL_OW 559
28722: GO 28962
28724: LD_INT 2
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28732
28730: GO 28746
28732: POP
// begin ToLua ( displayStucuk(); ) ;
28733: LD_STRING displayStucuk();
28735: PPUSH
28736: CALL_OW 559
// ResetFog ;
28740: CALL_OW 335
// end ; 3 :
28744: GO 28962
28746: LD_INT 3
28748: DOUBLE
28749: EQUAL
28750: IFTRUE 28754
28752: GO 28858
28754: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28755: LD_ADDR_VAR 0 2
28759: PUSH
28760: LD_INT 22
28762: PUSH
28763: LD_OWVAR 2
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 25
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PPUSH
28786: CALL_OW 69
28790: ST_TO_ADDR
// if not tmp then
28791: LD_VAR 0 2
28795: NOT
28796: IFFALSE 28800
// exit ;
28798: GO 28962
// un := tmp [ rand ( 1 , tmp ) ] ;
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_VAR 0 2
28809: PUSH
28810: LD_INT 1
28812: PPUSH
28813: LD_VAR 0 2
28817: PPUSH
28818: CALL_OW 12
28822: ARRAY
28823: ST_TO_ADDR
// if Crawls ( un ) then
28824: LD_VAR 0 3
28828: PPUSH
28829: CALL_OW 318
28833: IFFALSE 28844
// ComWalk ( un ) ;
28835: LD_VAR 0 3
28839: PPUSH
28840: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28844: LD_VAR 0 3
28848: PPUSH
28849: LD_INT 8
28851: PPUSH
28852: CALL_OW 336
// end ; 4 :
28856: GO 28962
28858: LD_INT 4
28860: DOUBLE
28861: EQUAL
28862: IFTRUE 28866
28864: GO 28940
28866: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28867: LD_ADDR_VAR 0 2
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_OWVAR 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 30
28886: PUSH
28887: LD_INT 29
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 69
28902: ST_TO_ADDR
// if not tmp then
28903: LD_VAR 0 2
28907: NOT
28908: IFFALSE 28912
// exit ;
28910: GO 28962
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28912: LD_VAR 0 2
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28925: LD_VAR 0 2
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: PPUSH
28934: CALL_OW 65
// end ; 5 .. 7 :
28938: GO 28962
28940: LD_INT 5
28942: DOUBLE
28943: GREATEREQUAL
28944: IFFALSE 28952
28946: LD_INT 7
28948: DOUBLE
28949: LESSEQUAL
28950: IFTRUE 28954
28952: GO 28961
28954: POP
// StreamSibBomb ; end ;
28955: CALL 25199 0 0
28959: GO 28962
28961: POP
// end ;
28962: PPOPN 3
28964: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28965: LD_EXP 52
28969: PUSH
28970: LD_EXP 102
28974: AND
28975: IFFALSE 29131
28977: GO 28979
28979: DISABLE
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
28984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28985: LD_ADDR_VAR 0 2
28989: PUSH
28990: LD_INT 81
28992: PUSH
28993: LD_OWVAR 2
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 21
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 21
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PPUSH
29034: CALL_OW 69
29038: ST_TO_ADDR
// if not tmp then
29039: LD_VAR 0 2
29043: NOT
29044: IFFALSE 29048
// exit ;
29046: GO 29131
// p := 0 ;
29048: LD_ADDR_VAR 0 3
29052: PUSH
29053: LD_INT 0
29055: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29056: LD_INT 35
29058: PPUSH
29059: CALL_OW 67
// p := p + 1 ;
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_VAR 0 3
29072: PUSH
29073: LD_INT 1
29075: PLUS
29076: ST_TO_ADDR
// for i in tmp do
29077: LD_ADDR_VAR 0 1
29081: PUSH
29082: LD_VAR 0 2
29086: PUSH
29087: FOR_IN
29088: IFFALSE 29119
// if GetLives ( i ) < 1000 then
29090: LD_VAR 0 1
29094: PPUSH
29095: CALL_OW 256
29099: PUSH
29100: LD_INT 1000
29102: LESS
29103: IFFALSE 29117
// SetLives ( i , 1000 ) ;
29105: LD_VAR 0 1
29109: PPUSH
29110: LD_INT 1000
29112: PPUSH
29113: CALL_OW 234
29117: GO 29087
29119: POP
29120: POP
// until p > 20 ;
29121: LD_VAR 0 3
29125: PUSH
29126: LD_INT 20
29128: GREATER
29129: IFFALSE 29056
// end ;
29131: PPOPN 3
29133: END
// every 0 0$1 trigger StreamModeActive and sTime do
29134: LD_EXP 52
29138: PUSH
29139: LD_EXP 103
29143: AND
29144: IFFALSE 29179
29146: GO 29148
29148: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29149: LD_INT 28
29151: PPUSH
29152: LD_OWVAR 2
29156: PPUSH
29157: LD_INT 2
29159: PPUSH
29160: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29164: LD_INT 30
29166: PPUSH
29167: LD_OWVAR 2
29171: PPUSH
29172: LD_INT 2
29174: PPUSH
29175: CALL_OW 322
// end ;
29179: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29180: LD_EXP 52
29184: PUSH
29185: LD_EXP 104
29189: AND
29190: IFFALSE 29311
29192: GO 29194
29194: DISABLE
29195: LD_INT 0
29197: PPUSH
29198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29199: LD_ADDR_VAR 0 2
29203: PUSH
29204: LD_INT 22
29206: PUSH
29207: LD_OWVAR 2
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 21
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 23
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: ST_TO_ADDR
// if not tmp then
29253: LD_VAR 0 2
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 29311
// for i in tmp do
29262: LD_ADDR_VAR 0 1
29266: PUSH
29267: LD_VAR 0 2
29271: PUSH
29272: FOR_IN
29273: IFFALSE 29309
// begin if Crawls ( i ) then
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 318
29284: IFFALSE 29295
// ComWalk ( i ) ;
29286: LD_VAR 0 1
29290: PPUSH
29291: CALL_OW 138
// SetClass ( i , 2 ) ;
29295: LD_VAR 0 1
29299: PPUSH
29300: LD_INT 2
29302: PPUSH
29303: CALL_OW 336
// end ;
29307: GO 29272
29309: POP
29310: POP
// end ;
29311: PPOPN 2
29313: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29314: LD_EXP 52
29318: PUSH
29319: LD_EXP 105
29323: AND
29324: IFFALSE 29612
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
29333: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29334: LD_OWVAR 2
29338: PPUSH
29339: LD_INT 9
29341: PPUSH
29342: LD_INT 1
29344: PPUSH
29345: LD_INT 1
29347: PPUSH
29348: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29352: LD_INT 9
29354: PPUSH
29355: LD_OWVAR 2
29359: PPUSH
29360: CALL_OW 343
// uc_side := 9 ;
29364: LD_ADDR_OWVAR 20
29368: PUSH
29369: LD_INT 9
29371: ST_TO_ADDR
// uc_nation := 2 ;
29372: LD_ADDR_OWVAR 21
29376: PUSH
29377: LD_INT 2
29379: ST_TO_ADDR
// hc_name := Dark Warrior ;
29380: LD_ADDR_OWVAR 26
29384: PUSH
29385: LD_STRING Dark Warrior
29387: ST_TO_ADDR
// hc_gallery :=  ;
29388: LD_ADDR_OWVAR 33
29392: PUSH
29393: LD_STRING 
29395: ST_TO_ADDR
// hc_noskilllimit := true ;
29396: LD_ADDR_OWVAR 76
29400: PUSH
29401: LD_INT 1
29403: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29404: LD_ADDR_OWVAR 31
29408: PUSH
29409: LD_INT 30
29411: PUSH
29412: LD_INT 30
29414: PUSH
29415: LD_INT 30
29417: PUSH
29418: LD_INT 30
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// un := CreateHuman ;
29427: LD_ADDR_VAR 0 3
29431: PUSH
29432: CALL_OW 44
29436: ST_TO_ADDR
// hc_noskilllimit := false ;
29437: LD_ADDR_OWVAR 76
29441: PUSH
29442: LD_INT 0
29444: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29445: LD_VAR 0 3
29449: PPUSH
29450: LD_INT 1
29452: PPUSH
29453: CALL_OW 51
// ToLua ( playRanger() ) ;
29457: LD_STRING playRanger()
29459: PPUSH
29460: CALL_OW 559
// p := 0 ;
29464: LD_ADDR_VAR 0 2
29468: PUSH
29469: LD_INT 0
29471: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29472: LD_INT 35
29474: PPUSH
29475: CALL_OW 67
// p := p + 1 ;
29479: LD_ADDR_VAR 0 2
29483: PUSH
29484: LD_VAR 0 2
29488: PUSH
29489: LD_INT 1
29491: PLUS
29492: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29493: LD_VAR 0 3
29497: PPUSH
29498: CALL_OW 256
29502: PUSH
29503: LD_INT 1000
29505: LESS
29506: IFFALSE 29520
// SetLives ( un , 1000 ) ;
29508: LD_VAR 0 3
29512: PPUSH
29513: LD_INT 1000
29515: PPUSH
29516: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29520: LD_VAR 0 3
29524: PPUSH
29525: LD_INT 81
29527: PUSH
29528: LD_OWVAR 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 91
29539: PUSH
29540: LD_VAR 0 3
29544: PUSH
29545: LD_INT 30
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PPUSH
29557: CALL_OW 69
29561: PPUSH
29562: LD_VAR 0 3
29566: PPUSH
29567: CALL_OW 74
29571: PPUSH
29572: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29576: LD_VAR 0 2
29580: PUSH
29581: LD_INT 80
29583: GREATER
29584: PUSH
29585: LD_VAR 0 3
29589: PPUSH
29590: CALL_OW 301
29594: OR
29595: IFFALSE 29472
// if un then
29597: LD_VAR 0 3
29601: IFFALSE 29612
// RemoveUnit ( un ) ;
29603: LD_VAR 0 3
29607: PPUSH
29608: CALL_OW 64
// end ;
29612: PPOPN 3
29614: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29615: LD_EXP 106
29619: IFFALSE 29735
29621: GO 29623
29623: DISABLE
29624: LD_INT 0
29626: PPUSH
29627: PPUSH
29628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29629: LD_ADDR_VAR 0 2
29633: PUSH
29634: LD_INT 81
29636: PUSH
29637: LD_OWVAR 2
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 21
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PPUSH
29660: CALL_OW 69
29664: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29665: LD_STRING playComputer()
29667: PPUSH
29668: CALL_OW 559
// if not tmp then
29672: LD_VAR 0 2
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 29735
// for i in tmp do
29681: LD_ADDR_VAR 0 1
29685: PUSH
29686: LD_VAR 0 2
29690: PUSH
29691: FOR_IN
29692: IFFALSE 29733
// for j := 1 to 4 do
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: DOUBLE
29700: LD_INT 1
29702: DEC
29703: ST_TO_ADDR
29704: LD_INT 4
29706: PUSH
29707: FOR_TO
29708: IFFALSE 29729
// SetSkill ( i , j , 10 ) ;
29710: LD_VAR 0 1
29714: PPUSH
29715: LD_VAR 0 3
29719: PPUSH
29720: LD_INT 10
29722: PPUSH
29723: CALL_OW 237
29727: GO 29707
29729: POP
29730: POP
29731: GO 29691
29733: POP
29734: POP
// end ;
29735: PPOPN 3
29737: END
// every 0 0$1 trigger s30 do var i , tmp ;
29738: LD_EXP 107
29742: IFFALSE 29811
29744: GO 29746
29746: DISABLE
29747: LD_INT 0
29749: PPUSH
29750: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29751: LD_ADDR_VAR 0 2
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PPUSH
29768: CALL_OW 69
29772: ST_TO_ADDR
// if not tmp then
29773: LD_VAR 0 2
29777: NOT
29778: IFFALSE 29782
// exit ;
29780: GO 29811
// for i in tmp do
29782: LD_ADDR_VAR 0 1
29786: PUSH
29787: LD_VAR 0 2
29791: PUSH
29792: FOR_IN
29793: IFFALSE 29809
// SetLives ( i , 300 ) ;
29795: LD_VAR 0 1
29799: PPUSH
29800: LD_INT 300
29802: PPUSH
29803: CALL_OW 234
29807: GO 29792
29809: POP
29810: POP
// end ;
29811: PPOPN 2
29813: END
// every 0 0$1 trigger s60 do var i , tmp ;
29814: LD_EXP 108
29818: IFFALSE 29887
29820: GO 29822
29822: DISABLE
29823: LD_INT 0
29825: PPUSH
29826: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29827: LD_ADDR_VAR 0 2
29831: PUSH
29832: LD_INT 22
29834: PUSH
29835: LD_OWVAR 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PPUSH
29844: CALL_OW 69
29848: ST_TO_ADDR
// if not tmp then
29849: LD_VAR 0 2
29853: NOT
29854: IFFALSE 29858
// exit ;
29856: GO 29887
// for i in tmp do
29858: LD_ADDR_VAR 0 1
29862: PUSH
29863: LD_VAR 0 2
29867: PUSH
29868: FOR_IN
29869: IFFALSE 29885
// SetLives ( i , 600 ) ;
29871: LD_VAR 0 1
29875: PPUSH
29876: LD_INT 600
29878: PPUSH
29879: CALL_OW 234
29883: GO 29868
29885: POP
29886: POP
// end ;
29887: PPOPN 2
29889: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29890: LD_INT 0
29892: PPUSH
// case cmd of 301 :
29893: LD_VAR 0 1
29897: PUSH
29898: LD_INT 301
29900: DOUBLE
29901: EQUAL
29902: IFTRUE 29906
29904: GO 29938
29906: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29907: LD_VAR 0 6
29911: PPUSH
29912: LD_VAR 0 7
29916: PPUSH
29917: LD_VAR 0 8
29921: PPUSH
29922: LD_VAR 0 4
29926: PPUSH
29927: LD_VAR 0 5
29931: PPUSH
29932: CALL 31139 0 5
29936: GO 30059
29938: LD_INT 302
29940: DOUBLE
29941: EQUAL
29942: IFTRUE 29946
29944: GO 29983
29946: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29947: LD_VAR 0 6
29951: PPUSH
29952: LD_VAR 0 7
29956: PPUSH
29957: LD_VAR 0 8
29961: PPUSH
29962: LD_VAR 0 9
29966: PPUSH
29967: LD_VAR 0 4
29971: PPUSH
29972: LD_VAR 0 5
29976: PPUSH
29977: CALL 31230 0 6
29981: GO 30059
29983: LD_INT 303
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30028
29991: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29992: LD_VAR 0 6
29996: PPUSH
29997: LD_VAR 0 7
30001: PPUSH
30002: LD_VAR 0 8
30006: PPUSH
30007: LD_VAR 0 9
30011: PPUSH
30012: LD_VAR 0 4
30016: PPUSH
30017: LD_VAR 0 5
30021: PPUSH
30022: CALL 30064 0 6
30026: GO 30059
30028: LD_INT 304
30030: DOUBLE
30031: EQUAL
30032: IFTRUE 30036
30034: GO 30058
30036: POP
// hHackTeleport ( unit , x , y ) ; end ;
30037: LD_VAR 0 2
30041: PPUSH
30042: LD_VAR 0 4
30046: PPUSH
30047: LD_VAR 0 5
30051: PPUSH
30052: CALL 31823 0 3
30056: GO 30059
30058: POP
// end ;
30059: LD_VAR 0 12
30063: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30064: LD_INT 0
30066: PPUSH
30067: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30068: LD_VAR 0 1
30072: PUSH
30073: LD_INT 1
30075: LESS
30076: PUSH
30077: LD_VAR 0 1
30081: PUSH
30082: LD_INT 3
30084: GREATER
30085: OR
30086: PUSH
30087: LD_VAR 0 5
30091: PPUSH
30092: LD_VAR 0 6
30096: PPUSH
30097: CALL_OW 428
30101: OR
30102: IFFALSE 30106
// exit ;
30104: GO 30826
// uc_side := your_side ;
30106: LD_ADDR_OWVAR 20
30110: PUSH
30111: LD_OWVAR 2
30115: ST_TO_ADDR
// uc_nation := nation ;
30116: LD_ADDR_OWVAR 21
30120: PUSH
30121: LD_VAR 0 1
30125: ST_TO_ADDR
// bc_level = 1 ;
30126: LD_ADDR_OWVAR 43
30130: PUSH
30131: LD_INT 1
30133: ST_TO_ADDR
// case btype of 1 :
30134: LD_VAR 0 2
30138: PUSH
30139: LD_INT 1
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30158
30147: POP
// bc_type := b_depot ; 2 :
30148: LD_ADDR_OWVAR 42
30152: PUSH
30153: LD_INT 0
30155: ST_TO_ADDR
30156: GO 30770
30158: LD_INT 2
30160: DOUBLE
30161: EQUAL
30162: IFTRUE 30166
30164: GO 30177
30166: POP
// bc_type := b_warehouse ; 3 :
30167: LD_ADDR_OWVAR 42
30171: PUSH
30172: LD_INT 1
30174: ST_TO_ADDR
30175: GO 30770
30177: LD_INT 3
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30196
30185: POP
// bc_type := b_lab ; 4 .. 9 :
30186: LD_ADDR_OWVAR 42
30190: PUSH
30191: LD_INT 6
30193: ST_TO_ADDR
30194: GO 30770
30196: LD_INT 4
30198: DOUBLE
30199: GREATEREQUAL
30200: IFFALSE 30208
30202: LD_INT 9
30204: DOUBLE
30205: LESSEQUAL
30206: IFTRUE 30210
30208: GO 30262
30210: POP
// begin bc_type := b_lab_half ;
30211: LD_ADDR_OWVAR 42
30215: PUSH
30216: LD_INT 7
30218: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30219: LD_ADDR_OWVAR 44
30223: PUSH
30224: LD_INT 10
30226: PUSH
30227: LD_INT 11
30229: PUSH
30230: LD_INT 12
30232: PUSH
30233: LD_INT 15
30235: PUSH
30236: LD_INT 14
30238: PUSH
30239: LD_INT 13
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: LD_VAR 0 2
30254: PUSH
30255: LD_INT 3
30257: MINUS
30258: ARRAY
30259: ST_TO_ADDR
// end ; 10 .. 13 :
30260: GO 30770
30262: LD_INT 10
30264: DOUBLE
30265: GREATEREQUAL
30266: IFFALSE 30274
30268: LD_INT 13
30270: DOUBLE
30271: LESSEQUAL
30272: IFTRUE 30276
30274: GO 30353
30276: POP
// begin bc_type := b_lab_full ;
30277: LD_ADDR_OWVAR 42
30281: PUSH
30282: LD_INT 8
30284: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30285: LD_ADDR_OWVAR 44
30289: PUSH
30290: LD_INT 10
30292: PUSH
30293: LD_INT 12
30295: PUSH
30296: LD_INT 14
30298: PUSH
30299: LD_INT 13
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: PUSH
30308: LD_VAR 0 2
30312: PUSH
30313: LD_INT 9
30315: MINUS
30316: ARRAY
30317: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30318: LD_ADDR_OWVAR 45
30322: PUSH
30323: LD_INT 11
30325: PUSH
30326: LD_INT 15
30328: PUSH
30329: LD_INT 12
30331: PUSH
30332: LD_INT 15
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: PUSH
30341: LD_VAR 0 2
30345: PUSH
30346: LD_INT 9
30348: MINUS
30349: ARRAY
30350: ST_TO_ADDR
// end ; 14 :
30351: GO 30770
30353: LD_INT 14
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30372
30361: POP
// bc_type := b_workshop ; 15 :
30362: LD_ADDR_OWVAR 42
30366: PUSH
30367: LD_INT 2
30369: ST_TO_ADDR
30370: GO 30770
30372: LD_INT 15
30374: DOUBLE
30375: EQUAL
30376: IFTRUE 30380
30378: GO 30391
30380: POP
// bc_type := b_factory ; 16 :
30381: LD_ADDR_OWVAR 42
30385: PUSH
30386: LD_INT 3
30388: ST_TO_ADDR
30389: GO 30770
30391: LD_INT 16
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30399
30397: GO 30410
30399: POP
// bc_type := b_ext_gun ; 17 :
30400: LD_ADDR_OWVAR 42
30404: PUSH
30405: LD_INT 17
30407: ST_TO_ADDR
30408: GO 30770
30410: LD_INT 17
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30446
30418: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30419: LD_ADDR_OWVAR 42
30423: PUSH
30424: LD_INT 19
30426: PUSH
30427: LD_INT 23
30429: PUSH
30430: LD_INT 19
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: LD_VAR 0 1
30442: ARRAY
30443: ST_TO_ADDR
30444: GO 30770
30446: LD_INT 18
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30465
30454: POP
// bc_type := b_ext_radar ; 19 :
30455: LD_ADDR_OWVAR 42
30459: PUSH
30460: LD_INT 20
30462: ST_TO_ADDR
30463: GO 30770
30465: LD_INT 19
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30484
30473: POP
// bc_type := b_ext_radio ; 20 :
30474: LD_ADDR_OWVAR 42
30478: PUSH
30479: LD_INT 22
30481: ST_TO_ADDR
30482: GO 30770
30484: LD_INT 20
30486: DOUBLE
30487: EQUAL
30488: IFTRUE 30492
30490: GO 30503
30492: POP
// bc_type := b_ext_siberium ; 21 :
30493: LD_ADDR_OWVAR 42
30497: PUSH
30498: LD_INT 21
30500: ST_TO_ADDR
30501: GO 30770
30503: LD_INT 21
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 30522
30511: POP
// bc_type := b_ext_computer ; 22 :
30512: LD_ADDR_OWVAR 42
30516: PUSH
30517: LD_INT 24
30519: ST_TO_ADDR
30520: GO 30770
30522: LD_INT 22
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30541
30530: POP
// bc_type := b_ext_track ; 23 :
30531: LD_ADDR_OWVAR 42
30535: PUSH
30536: LD_INT 16
30538: ST_TO_ADDR
30539: GO 30770
30541: LD_INT 23
30543: DOUBLE
30544: EQUAL
30545: IFTRUE 30549
30547: GO 30560
30549: POP
// bc_type := b_ext_laser ; 24 :
30550: LD_ADDR_OWVAR 42
30554: PUSH
30555: LD_INT 25
30557: ST_TO_ADDR
30558: GO 30770
30560: LD_INT 24
30562: DOUBLE
30563: EQUAL
30564: IFTRUE 30568
30566: GO 30579
30568: POP
// bc_type := b_control_tower ; 25 :
30569: LD_ADDR_OWVAR 42
30573: PUSH
30574: LD_INT 36
30576: ST_TO_ADDR
30577: GO 30770
30579: LD_INT 25
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30598
30587: POP
// bc_type := b_breastwork ; 26 :
30588: LD_ADDR_OWVAR 42
30592: PUSH
30593: LD_INT 31
30595: ST_TO_ADDR
30596: GO 30770
30598: LD_INT 26
30600: DOUBLE
30601: EQUAL
30602: IFTRUE 30606
30604: GO 30617
30606: POP
// bc_type := b_bunker ; 27 :
30607: LD_ADDR_OWVAR 42
30611: PUSH
30612: LD_INT 32
30614: ST_TO_ADDR
30615: GO 30770
30617: LD_INT 27
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30636
30625: POP
// bc_type := b_turret ; 28 :
30626: LD_ADDR_OWVAR 42
30630: PUSH
30631: LD_INT 33
30633: ST_TO_ADDR
30634: GO 30770
30636: LD_INT 28
30638: DOUBLE
30639: EQUAL
30640: IFTRUE 30644
30642: GO 30655
30644: POP
// bc_type := b_armoury ; 29 :
30645: LD_ADDR_OWVAR 42
30649: PUSH
30650: LD_INT 4
30652: ST_TO_ADDR
30653: GO 30770
30655: LD_INT 29
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30674
30663: POP
// bc_type := b_barracks ; 30 :
30664: LD_ADDR_OWVAR 42
30668: PUSH
30669: LD_INT 5
30671: ST_TO_ADDR
30672: GO 30770
30674: LD_INT 30
30676: DOUBLE
30677: EQUAL
30678: IFTRUE 30682
30680: GO 30693
30682: POP
// bc_type := b_solar_power ; 31 :
30683: LD_ADDR_OWVAR 42
30687: PUSH
30688: LD_INT 27
30690: ST_TO_ADDR
30691: GO 30770
30693: LD_INT 31
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30712
30701: POP
// bc_type := b_oil_power ; 32 :
30702: LD_ADDR_OWVAR 42
30706: PUSH
30707: LD_INT 26
30709: ST_TO_ADDR
30710: GO 30770
30712: LD_INT 32
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30731
30720: POP
// bc_type := b_siberite_power ; 33 :
30721: LD_ADDR_OWVAR 42
30725: PUSH
30726: LD_INT 28
30728: ST_TO_ADDR
30729: GO 30770
30731: LD_INT 33
30733: DOUBLE
30734: EQUAL
30735: IFTRUE 30739
30737: GO 30750
30739: POP
// bc_type := b_oil_mine ; 34 :
30740: LD_ADDR_OWVAR 42
30744: PUSH
30745: LD_INT 29
30747: ST_TO_ADDR
30748: GO 30770
30750: LD_INT 34
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30769
30758: POP
// bc_type := b_siberite_mine ; end ;
30759: LD_ADDR_OWVAR 42
30763: PUSH
30764: LD_INT 30
30766: ST_TO_ADDR
30767: GO 30770
30769: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30770: LD_ADDR_VAR 0 8
30774: PUSH
30775: LD_VAR 0 5
30779: PPUSH
30780: LD_VAR 0 6
30784: PPUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: CALL_OW 47
30794: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30795: LD_OWVAR 42
30799: PUSH
30800: LD_INT 32
30802: PUSH
30803: LD_INT 33
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: IN
30810: IFFALSE 30826
// PlaceWeaponTurret ( b , weapon ) ;
30812: LD_VAR 0 8
30816: PPUSH
30817: LD_VAR 0 4
30821: PPUSH
30822: CALL_OW 431
// end ;
30826: LD_VAR 0 7
30830: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30831: LD_INT 0
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30837: LD_ADDR_VAR 0 4
30841: PUSH
30842: LD_INT 22
30844: PUSH
30845: LD_OWVAR 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 30
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 30
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PPUSH
30886: CALL_OW 69
30890: ST_TO_ADDR
// if not tmp then
30891: LD_VAR 0 4
30895: NOT
30896: IFFALSE 30900
// exit ;
30898: GO 30959
// for i in tmp do
30900: LD_ADDR_VAR 0 2
30904: PUSH
30905: LD_VAR 0 4
30909: PUSH
30910: FOR_IN
30911: IFFALSE 30957
// for j = 1 to 3 do
30913: LD_ADDR_VAR 0 3
30917: PUSH
30918: DOUBLE
30919: LD_INT 1
30921: DEC
30922: ST_TO_ADDR
30923: LD_INT 3
30925: PUSH
30926: FOR_TO
30927: IFFALSE 30953
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30929: LD_VAR 0 2
30933: PPUSH
30934: CALL_OW 274
30938: PPUSH
30939: LD_VAR 0 3
30943: PPUSH
30944: LD_INT 99999
30946: PPUSH
30947: CALL_OW 277
30951: GO 30926
30953: POP
30954: POP
30955: GO 30910
30957: POP
30958: POP
// end ;
30959: LD_VAR 0 1
30963: RET
// export function hHackSetLevel10 ; var i , j ; begin
30964: LD_INT 0
30966: PPUSH
30967: PPUSH
30968: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30969: LD_ADDR_VAR 0 2
30973: PUSH
30974: LD_INT 21
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PPUSH
30984: CALL_OW 69
30988: PUSH
30989: FOR_IN
30990: IFFALSE 31042
// if IsSelected ( i ) then
30992: LD_VAR 0 2
30996: PPUSH
30997: CALL_OW 306
31001: IFFALSE 31040
// begin for j := 1 to 4 do
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: DOUBLE
31009: LD_INT 1
31011: DEC
31012: ST_TO_ADDR
31013: LD_INT 4
31015: PUSH
31016: FOR_TO
31017: IFFALSE 31038
// SetSkill ( i , j , 10 ) ;
31019: LD_VAR 0 2
31023: PPUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: LD_INT 10
31031: PPUSH
31032: CALL_OW 237
31036: GO 31016
31038: POP
31039: POP
// end ;
31040: GO 30989
31042: POP
31043: POP
// end ;
31044: LD_VAR 0 1
31048: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31049: LD_INT 0
31051: PPUSH
31052: PPUSH
31053: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31054: LD_ADDR_VAR 0 2
31058: PUSH
31059: LD_INT 22
31061: PUSH
31062: LD_OWVAR 2
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 21
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PPUSH
31085: CALL_OW 69
31089: PUSH
31090: FOR_IN
31091: IFFALSE 31132
// begin for j := 1 to 4 do
31093: LD_ADDR_VAR 0 3
31097: PUSH
31098: DOUBLE
31099: LD_INT 1
31101: DEC
31102: ST_TO_ADDR
31103: LD_INT 4
31105: PUSH
31106: FOR_TO
31107: IFFALSE 31128
// SetSkill ( i , j , 10 ) ;
31109: LD_VAR 0 2
31113: PPUSH
31114: LD_VAR 0 3
31118: PPUSH
31119: LD_INT 10
31121: PPUSH
31122: CALL_OW 237
31126: GO 31106
31128: POP
31129: POP
// end ;
31130: GO 31090
31132: POP
31133: POP
// end ;
31134: LD_VAR 0 1
31138: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31139: LD_INT 0
31141: PPUSH
// uc_side := your_side ;
31142: LD_ADDR_OWVAR 20
31146: PUSH
31147: LD_OWVAR 2
31151: ST_TO_ADDR
// uc_nation := nation ;
31152: LD_ADDR_OWVAR 21
31156: PUSH
31157: LD_VAR 0 1
31161: ST_TO_ADDR
// InitHc ;
31162: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31166: LD_INT 0
31168: PPUSH
31169: LD_VAR 0 2
31173: PPUSH
31174: LD_VAR 0 3
31178: PPUSH
31179: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31183: LD_VAR 0 4
31187: PPUSH
31188: LD_VAR 0 5
31192: PPUSH
31193: CALL_OW 428
31197: PUSH
31198: LD_INT 0
31200: EQUAL
31201: IFFALSE 31225
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31203: CALL_OW 44
31207: PPUSH
31208: LD_VAR 0 4
31212: PPUSH
31213: LD_VAR 0 5
31217: PPUSH
31218: LD_INT 1
31220: PPUSH
31221: CALL_OW 48
// end ;
31225: LD_VAR 0 6
31229: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31230: LD_INT 0
31232: PPUSH
31233: PPUSH
// uc_side := your_side ;
31234: LD_ADDR_OWVAR 20
31238: PUSH
31239: LD_OWVAR 2
31243: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31244: LD_VAR 0 1
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: LD_INT 5
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: IN
31271: IFFALSE 31283
// uc_nation := nation_american else
31273: LD_ADDR_OWVAR 21
31277: PUSH
31278: LD_INT 1
31280: ST_TO_ADDR
31281: GO 31326
// if chassis in [ 11 , 12 , 13 , 14 ] then
31283: LD_VAR 0 1
31287: PUSH
31288: LD_INT 11
31290: PUSH
31291: LD_INT 12
31293: PUSH
31294: LD_INT 13
31296: PUSH
31297: LD_INT 14
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: IN
31306: IFFALSE 31318
// uc_nation := nation_arabian else
31308: LD_ADDR_OWVAR 21
31312: PUSH
31313: LD_INT 2
31315: ST_TO_ADDR
31316: GO 31326
// uc_nation := nation_russian ;
31318: LD_ADDR_OWVAR 21
31322: PUSH
31323: LD_INT 3
31325: ST_TO_ADDR
// vc_chassis := chassis ;
31326: LD_ADDR_OWVAR 37
31330: PUSH
31331: LD_VAR 0 1
31335: ST_TO_ADDR
// vc_engine := engine ;
31336: LD_ADDR_OWVAR 39
31340: PUSH
31341: LD_VAR 0 2
31345: ST_TO_ADDR
// vc_control := control ;
31346: LD_ADDR_OWVAR 38
31350: PUSH
31351: LD_VAR 0 3
31355: ST_TO_ADDR
// vc_weapon := weapon ;
31356: LD_ADDR_OWVAR 40
31360: PUSH
31361: LD_VAR 0 4
31365: ST_TO_ADDR
// un := CreateVehicle ;
31366: LD_ADDR_VAR 0 8
31370: PUSH
31371: CALL_OW 45
31375: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31376: LD_VAR 0 8
31380: PPUSH
31381: LD_INT 0
31383: PPUSH
31384: LD_INT 5
31386: PPUSH
31387: CALL_OW 12
31391: PPUSH
31392: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31396: LD_VAR 0 8
31400: PPUSH
31401: LD_VAR 0 5
31405: PPUSH
31406: LD_VAR 0 6
31410: PPUSH
31411: LD_INT 1
31413: PPUSH
31414: CALL_OW 48
// end ;
31418: LD_VAR 0 7
31422: RET
// export hInvincible ; every 1 do
31423: GO 31425
31425: DISABLE
// hInvincible := [ ] ;
31426: LD_ADDR_EXP 109
31430: PUSH
31431: EMPTY
31432: ST_TO_ADDR
31433: END
// every 10 do var i ;
31434: GO 31436
31436: DISABLE
31437: LD_INT 0
31439: PPUSH
// begin enable ;
31440: ENABLE
// if not hInvincible then
31441: LD_EXP 109
31445: NOT
31446: IFFALSE 31450
// exit ;
31448: GO 31494
// for i in hInvincible do
31450: LD_ADDR_VAR 0 1
31454: PUSH
31455: LD_EXP 109
31459: PUSH
31460: FOR_IN
31461: IFFALSE 31492
// if GetLives ( i ) < 1000 then
31463: LD_VAR 0 1
31467: PPUSH
31468: CALL_OW 256
31472: PUSH
31473: LD_INT 1000
31475: LESS
31476: IFFALSE 31490
// SetLives ( i , 1000 ) ;
31478: LD_VAR 0 1
31482: PPUSH
31483: LD_INT 1000
31485: PPUSH
31486: CALL_OW 234
31490: GO 31460
31492: POP
31493: POP
// end ;
31494: PPOPN 1
31496: END
// export function hHackInvincible ; var i ; begin
31497: LD_INT 0
31499: PPUSH
31500: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31501: LD_ADDR_VAR 0 2
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 21
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 21
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: PUSH
31539: FOR_IN
31540: IFFALSE 31601
// if IsSelected ( i ) then
31542: LD_VAR 0 2
31546: PPUSH
31547: CALL_OW 306
31551: IFFALSE 31599
// begin if i in hInvincible then
31553: LD_VAR 0 2
31557: PUSH
31558: LD_EXP 109
31562: IN
31563: IFFALSE 31583
// hInvincible := hInvincible diff i else
31565: LD_ADDR_EXP 109
31569: PUSH
31570: LD_EXP 109
31574: PUSH
31575: LD_VAR 0 2
31579: DIFF
31580: ST_TO_ADDR
31581: GO 31599
// hInvincible := hInvincible union i ;
31583: LD_ADDR_EXP 109
31587: PUSH
31588: LD_EXP 109
31592: PUSH
31593: LD_VAR 0 2
31597: UNION
31598: ST_TO_ADDR
// end ;
31599: GO 31539
31601: POP
31602: POP
// end ;
31603: LD_VAR 0 1
31607: RET
// export function hHackInvisible ; var i , j ; begin
31608: LD_INT 0
31610: PPUSH
31611: PPUSH
31612: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31613: LD_ADDR_VAR 0 2
31617: PUSH
31618: LD_INT 21
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PPUSH
31628: CALL_OW 69
31632: PUSH
31633: FOR_IN
31634: IFFALSE 31658
// if IsSelected ( i ) then
31636: LD_VAR 0 2
31640: PPUSH
31641: CALL_OW 306
31645: IFFALSE 31656
// ComForceInvisible ( i ) ;
31647: LD_VAR 0 2
31651: PPUSH
31652: CALL_OW 496
31656: GO 31633
31658: POP
31659: POP
// end ;
31660: LD_VAR 0 1
31664: RET
// export function hHackChangeYourSide ; begin
31665: LD_INT 0
31667: PPUSH
// if your_side = 8 then
31668: LD_OWVAR 2
31672: PUSH
31673: LD_INT 8
31675: EQUAL
31676: IFFALSE 31688
// your_side := 0 else
31678: LD_ADDR_OWVAR 2
31682: PUSH
31683: LD_INT 0
31685: ST_TO_ADDR
31686: GO 31702
// your_side := your_side + 1 ;
31688: LD_ADDR_OWVAR 2
31692: PUSH
31693: LD_OWVAR 2
31697: PUSH
31698: LD_INT 1
31700: PLUS
31701: ST_TO_ADDR
// end ;
31702: LD_VAR 0 1
31706: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31707: LD_INT 0
31709: PPUSH
31710: PPUSH
31711: PPUSH
// for i in all_units do
31712: LD_ADDR_VAR 0 2
31716: PUSH
31717: LD_OWVAR 3
31721: PUSH
31722: FOR_IN
31723: IFFALSE 31801
// if IsSelected ( i ) then
31725: LD_VAR 0 2
31729: PPUSH
31730: CALL_OW 306
31734: IFFALSE 31799
// begin j := GetSide ( i ) ;
31736: LD_ADDR_VAR 0 3
31740: PUSH
31741: LD_VAR 0 2
31745: PPUSH
31746: CALL_OW 255
31750: ST_TO_ADDR
// if j = 8 then
31751: LD_VAR 0 3
31755: PUSH
31756: LD_INT 8
31758: EQUAL
31759: IFFALSE 31771
// j := 0 else
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_INT 0
31768: ST_TO_ADDR
31769: GO 31785
// j := j + 1 ;
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_VAR 0 3
31780: PUSH
31781: LD_INT 1
31783: PLUS
31784: ST_TO_ADDR
// SetSide ( i , j ) ;
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_VAR 0 3
31794: PPUSH
31795: CALL_OW 235
// end ;
31799: GO 31722
31801: POP
31802: POP
// end ;
31803: LD_VAR 0 1
31807: RET
// export function hHackFog ; begin
31808: LD_INT 0
31810: PPUSH
// FogOff ( true ) ;
31811: LD_INT 1
31813: PPUSH
31814: CALL_OW 344
// end ;
31818: LD_VAR 0 1
31822: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31823: LD_INT 0
31825: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31826: LD_VAR 0 1
31830: PPUSH
31831: LD_VAR 0 2
31835: PPUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_INT 1
31843: PPUSH
31844: LD_INT 1
31846: PPUSH
31847: CALL_OW 483
// CenterOnXY ( x , y ) ;
31851: LD_VAR 0 2
31855: PPUSH
31856: LD_VAR 0 3
31860: PPUSH
31861: CALL_OW 84
// end ;
31865: LD_VAR 0 4
31869: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31870: LD_INT 0
31872: PPUSH
31873: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31874: LD_VAR 0 1
31878: NOT
31879: PUSH
31880: LD_VAR 0 2
31884: PPUSH
31885: LD_VAR 0 3
31889: PPUSH
31890: CALL_OW 488
31894: NOT
31895: OR
31896: PUSH
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL_OW 266
31906: PUSH
31907: LD_INT 3
31909: NONEQUAL
31910: PUSH
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 247
31920: PUSH
31921: LD_INT 1
31923: EQUAL
31924: NOT
31925: AND
31926: OR
31927: IFFALSE 31931
// exit ;
31929: GO 32080
// if GetType ( factory ) = unit_human then
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 247
31940: PUSH
31941: LD_INT 1
31943: EQUAL
31944: IFFALSE 31961
// factory := IsInUnit ( factory ) ;
31946: LD_ADDR_VAR 0 1
31950: PUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: CALL_OW 310
31960: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 266
31970: PUSH
31971: LD_INT 3
31973: NONEQUAL
31974: IFFALSE 31978
// exit ;
31976: GO 32080
// if HexInfo ( x , y ) = factory then
31978: LD_VAR 0 2
31982: PPUSH
31983: LD_VAR 0 3
31987: PPUSH
31988: CALL_OW 428
31992: PUSH
31993: LD_VAR 0 1
31997: EQUAL
31998: IFFALSE 32025
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32000: LD_ADDR_EXP 110
32004: PUSH
32005: LD_EXP 110
32009: PPUSH
32010: LD_VAR 0 1
32014: PPUSH
32015: LD_INT 0
32017: PPUSH
32018: CALL_OW 1
32022: ST_TO_ADDR
32023: GO 32076
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32025: LD_ADDR_EXP 110
32029: PUSH
32030: LD_EXP 110
32034: PPUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: LD_VAR 0 1
32044: PPUSH
32045: CALL_OW 255
32049: PUSH
32050: LD_VAR 0 1
32054: PUSH
32055: LD_VAR 0 2
32059: PUSH
32060: LD_VAR 0 3
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: PPUSH
32071: CALL_OW 1
32075: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32076: CALL 32085 0 0
// end ;
32080: LD_VAR 0 4
32084: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
32089: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32090: LD_STRING resetFactoryWaypoint();
32092: PPUSH
32093: CALL_OW 559
// if factoryWaypoints then
32097: LD_EXP 110
32101: IFFALSE 32227
// begin list := PrepareArray ( factoryWaypoints ) ;
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_EXP 110
32112: PPUSH
32113: CALL 78840 0 1
32117: ST_TO_ADDR
// for i := 1 to list do
32118: LD_ADDR_VAR 0 2
32122: PUSH
32123: DOUBLE
32124: LD_INT 1
32126: DEC
32127: ST_TO_ADDR
32128: LD_VAR 0 3
32132: PUSH
32133: FOR_TO
32134: IFFALSE 32225
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32136: LD_STRING setFactoryWaypointXY(
32138: PUSH
32139: LD_VAR 0 3
32143: PUSH
32144: LD_VAR 0 2
32148: ARRAY
32149: PUSH
32150: LD_INT 1
32152: ARRAY
32153: STR
32154: PUSH
32155: LD_STRING ,
32157: STR
32158: PUSH
32159: LD_VAR 0 3
32163: PUSH
32164: LD_VAR 0 2
32168: ARRAY
32169: PUSH
32170: LD_INT 2
32172: ARRAY
32173: STR
32174: PUSH
32175: LD_STRING ,
32177: STR
32178: PUSH
32179: LD_VAR 0 3
32183: PUSH
32184: LD_VAR 0 2
32188: ARRAY
32189: PUSH
32190: LD_INT 3
32192: ARRAY
32193: STR
32194: PUSH
32195: LD_STRING ,
32197: STR
32198: PUSH
32199: LD_VAR 0 3
32203: PUSH
32204: LD_VAR 0 2
32208: ARRAY
32209: PUSH
32210: LD_INT 4
32212: ARRAY
32213: STR
32214: PUSH
32215: LD_STRING )
32217: STR
32218: PPUSH
32219: CALL_OW 559
32223: GO 32133
32225: POP
32226: POP
// end ; end ;
32227: LD_VAR 0 1
32231: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32232: LD_INT 0
32234: PPUSH
// if HexInfo ( x , y ) = warehouse then
32235: LD_VAR 0 2
32239: PPUSH
32240: LD_VAR 0 3
32244: PPUSH
32245: CALL_OW 428
32249: PUSH
32250: LD_VAR 0 1
32254: EQUAL
32255: IFFALSE 32282
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32257: LD_ADDR_EXP 111
32261: PUSH
32262: LD_EXP 111
32266: PPUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: LD_INT 0
32274: PPUSH
32275: CALL_OW 1
32279: ST_TO_ADDR
32280: GO 32333
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32282: LD_ADDR_EXP 111
32286: PUSH
32287: LD_EXP 111
32291: PPUSH
32292: LD_VAR 0 1
32296: PPUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL_OW 255
32306: PUSH
32307: LD_VAR 0 1
32311: PUSH
32312: LD_VAR 0 2
32316: PUSH
32317: LD_VAR 0 3
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: PPUSH
32328: CALL_OW 1
32332: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32333: CALL 32342 0 0
// end ;
32337: LD_VAR 0 4
32341: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32342: LD_INT 0
32344: PPUSH
32345: PPUSH
32346: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32347: LD_STRING resetWarehouseGatheringPoints();
32349: PPUSH
32350: CALL_OW 559
// if warehouseGatheringPoints then
32354: LD_EXP 111
32358: IFFALSE 32484
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32360: LD_ADDR_VAR 0 3
32364: PUSH
32365: LD_EXP 111
32369: PPUSH
32370: CALL 78840 0 1
32374: ST_TO_ADDR
// for i := 1 to list do
32375: LD_ADDR_VAR 0 2
32379: PUSH
32380: DOUBLE
32381: LD_INT 1
32383: DEC
32384: ST_TO_ADDR
32385: LD_VAR 0 3
32389: PUSH
32390: FOR_TO
32391: IFFALSE 32482
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32393: LD_STRING setWarehouseGatheringPointXY(
32395: PUSH
32396: LD_VAR 0 3
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: PUSH
32407: LD_INT 1
32409: ARRAY
32410: STR
32411: PUSH
32412: LD_STRING ,
32414: STR
32415: PUSH
32416: LD_VAR 0 3
32420: PUSH
32421: LD_VAR 0 2
32425: ARRAY
32426: PUSH
32427: LD_INT 2
32429: ARRAY
32430: STR
32431: PUSH
32432: LD_STRING ,
32434: STR
32435: PUSH
32436: LD_VAR 0 3
32440: PUSH
32441: LD_VAR 0 2
32445: ARRAY
32446: PUSH
32447: LD_INT 3
32449: ARRAY
32450: STR
32451: PUSH
32452: LD_STRING ,
32454: STR
32455: PUSH
32456: LD_VAR 0 3
32460: PUSH
32461: LD_VAR 0 2
32465: ARRAY
32466: PUSH
32467: LD_INT 4
32469: ARRAY
32470: STR
32471: PUSH
32472: LD_STRING )
32474: STR
32475: PPUSH
32476: CALL_OW 559
32480: GO 32390
32482: POP
32483: POP
// end ; end ;
32484: LD_VAR 0 1
32488: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32489: LD_EXP 111
32493: IFFALSE 33178
32495: GO 32497
32497: DISABLE
32498: LD_INT 0
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
// begin enable ;
32509: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_EXP 111
32519: PPUSH
32520: CALL 78840 0 1
32524: ST_TO_ADDR
// if not list then
32525: LD_VAR 0 3
32529: NOT
32530: IFFALSE 32534
// exit ;
32532: GO 33178
// for i := 1 to list do
32534: LD_ADDR_VAR 0 1
32538: PUSH
32539: DOUBLE
32540: LD_INT 1
32542: DEC
32543: ST_TO_ADDR
32544: LD_VAR 0 3
32548: PUSH
32549: FOR_TO
32550: IFFALSE 33176
// begin depot := list [ i ] [ 2 ] ;
32552: LD_ADDR_VAR 0 8
32556: PUSH
32557: LD_VAR 0 3
32561: PUSH
32562: LD_VAR 0 1
32566: ARRAY
32567: PUSH
32568: LD_INT 2
32570: ARRAY
32571: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32572: LD_ADDR_VAR 0 5
32576: PUSH
32577: LD_VAR 0 3
32581: PUSH
32582: LD_VAR 0 1
32586: ARRAY
32587: PUSH
32588: LD_INT 1
32590: ARRAY
32591: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32592: LD_VAR 0 8
32596: PPUSH
32597: CALL_OW 301
32601: PUSH
32602: LD_VAR 0 5
32606: PUSH
32607: LD_VAR 0 8
32611: PPUSH
32612: CALL_OW 255
32616: NONEQUAL
32617: OR
32618: IFFALSE 32647
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32620: LD_ADDR_EXP 111
32624: PUSH
32625: LD_EXP 111
32629: PPUSH
32630: LD_VAR 0 8
32634: PPUSH
32635: LD_INT 0
32637: PPUSH
32638: CALL_OW 1
32642: ST_TO_ADDR
// exit ;
32643: POP
32644: POP
32645: GO 33178
// end ; x := list [ i ] [ 3 ] ;
32647: LD_ADDR_VAR 0 6
32651: PUSH
32652: LD_VAR 0 3
32656: PUSH
32657: LD_VAR 0 1
32661: ARRAY
32662: PUSH
32663: LD_INT 3
32665: ARRAY
32666: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32667: LD_ADDR_VAR 0 7
32671: PUSH
32672: LD_VAR 0 3
32676: PUSH
32677: LD_VAR 0 1
32681: ARRAY
32682: PUSH
32683: LD_INT 4
32685: ARRAY
32686: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32687: LD_ADDR_VAR 0 9
32691: PUSH
32692: LD_VAR 0 6
32696: PPUSH
32697: LD_VAR 0 7
32701: PPUSH
32702: LD_INT 16
32704: PPUSH
32705: CALL 77428 0 3
32709: ST_TO_ADDR
// if not cratesNearbyPoint then
32710: LD_VAR 0 9
32714: NOT
32715: IFFALSE 32721
// exit ;
32717: POP
32718: POP
32719: GO 33178
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32721: LD_ADDR_VAR 0 4
32725: PUSH
32726: LD_INT 22
32728: PUSH
32729: LD_VAR 0 5
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 60
32743: PUSH
32744: EMPTY
32745: LIST
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 91
32753: PUSH
32754: LD_VAR 0 8
32758: PUSH
32759: LD_INT 6
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 25
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 25
32782: PUSH
32783: LD_INT 16
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: PPUSH
32801: CALL_OW 69
32805: PUSH
32806: LD_VAR 0 8
32810: PPUSH
32811: CALL_OW 313
32815: PPUSH
32816: LD_INT 3
32818: PUSH
32819: LD_INT 60
32821: PUSH
32822: EMPTY
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 25
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 25
32844: PUSH
32845: LD_INT 16
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PPUSH
32861: CALL_OW 72
32865: UNION
32866: ST_TO_ADDR
// if tmp then
32867: LD_VAR 0 4
32871: IFFALSE 32951
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32873: LD_ADDR_VAR 0 4
32877: PUSH
32878: LD_VAR 0 4
32882: PPUSH
32883: LD_INT 3
32885: PPUSH
32886: CALL 75397 0 2
32890: ST_TO_ADDR
// for j in tmp do
32891: LD_ADDR_VAR 0 2
32895: PUSH
32896: LD_VAR 0 4
32900: PUSH
32901: FOR_IN
32902: IFFALSE 32945
// begin if IsInUnit ( j ) then
32904: LD_VAR 0 2
32908: PPUSH
32909: CALL_OW 310
32913: IFFALSE 32924
// ComExit ( j ) ;
32915: LD_VAR 0 2
32919: PPUSH
32920: CALL 75480 0 1
// AddComCollect ( j , x , y ) ;
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_VAR 0 6
32933: PPUSH
32934: LD_VAR 0 7
32938: PPUSH
32939: CALL_OW 177
// end ;
32943: GO 32901
32945: POP
32946: POP
// exit ;
32947: POP
32948: POP
32949: GO 33178
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: LD_INT 22
32958: PUSH
32959: LD_VAR 0 5
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 91
32970: PUSH
32971: LD_VAR 0 8
32975: PUSH
32976: LD_INT 8
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 34
32989: PUSH
32990: LD_INT 12
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 34
32999: PUSH
33000: LD_INT 51
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 34
33009: PUSH
33010: LD_INT 32
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 34
33019: PUSH
33020: LD_INT 89
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 69
33043: ST_TO_ADDR
// if tmp then
33044: LD_VAR 0 4
33048: IFFALSE 33174
// begin for j in tmp do
33050: LD_ADDR_VAR 0 2
33054: PUSH
33055: LD_VAR 0 4
33059: PUSH
33060: FOR_IN
33061: IFFALSE 33172
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33063: LD_VAR 0 2
33067: PPUSH
33068: CALL_OW 262
33072: PUSH
33073: LD_INT 3
33075: EQUAL
33076: PUSH
33077: LD_VAR 0 2
33081: PPUSH
33082: CALL_OW 261
33086: PUSH
33087: LD_INT 20
33089: GREATER
33090: OR
33091: PUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: CALL_OW 314
33101: NOT
33102: AND
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: CALL_OW 263
33113: PUSH
33114: LD_INT 1
33116: NONEQUAL
33117: PUSH
33118: LD_VAR 0 2
33122: PPUSH
33123: CALL_OW 311
33127: OR
33128: AND
33129: IFFALSE 33170
// begin ComCollect ( j , x , y ) ;
33131: LD_VAR 0 2
33135: PPUSH
33136: LD_VAR 0 6
33140: PPUSH
33141: LD_VAR 0 7
33145: PPUSH
33146: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33150: LD_VAR 0 2
33154: PPUSH
33155: LD_VAR 0 8
33159: PPUSH
33160: CALL_OW 172
// exit ;
33164: POP
33165: POP
33166: POP
33167: POP
33168: GO 33178
// end ;
33170: GO 33060
33172: POP
33173: POP
// end ; end ;
33174: GO 32549
33176: POP
33177: POP
// end ; end_of_file
33178: PPOPN 9
33180: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33181: LD_VAR 0 1
33185: PUSH
33186: LD_INT 200
33188: DOUBLE
33189: GREATEREQUAL
33190: IFFALSE 33198
33192: LD_INT 299
33194: DOUBLE
33195: LESSEQUAL
33196: IFTRUE 33200
33198: GO 33232
33200: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33201: LD_VAR 0 1
33205: PPUSH
33206: LD_VAR 0 2
33210: PPUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: LD_VAR 0 4
33220: PPUSH
33221: LD_VAR 0 5
33225: PPUSH
33226: CALL 33720 0 5
33230: GO 33309
33232: LD_INT 300
33234: DOUBLE
33235: GREATEREQUAL
33236: IFFALSE 33244
33238: LD_INT 399
33240: DOUBLE
33241: LESSEQUAL
33242: IFTRUE 33246
33244: GO 33308
33246: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33247: LD_VAR 0 1
33251: PPUSH
33252: LD_VAR 0 2
33256: PPUSH
33257: LD_VAR 0 3
33261: PPUSH
33262: LD_VAR 0 4
33266: PPUSH
33267: LD_VAR 0 5
33271: PPUSH
33272: LD_VAR 0 6
33276: PPUSH
33277: LD_VAR 0 7
33281: PPUSH
33282: LD_VAR 0 8
33286: PPUSH
33287: LD_VAR 0 9
33291: PPUSH
33292: LD_VAR 0 10
33296: PPUSH
33297: LD_VAR 0 11
33301: PPUSH
33302: CALL 29890 0 11
33306: GO 33309
33308: POP
// end ;
33309: PPOPN 11
33311: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33312: LD_VAR 0 1
33316: PPUSH
33317: LD_VAR 0 2
33321: PPUSH
33322: LD_VAR 0 3
33326: PPUSH
33327: LD_VAR 0 4
33331: PPUSH
33332: LD_VAR 0 5
33336: PPUSH
33337: CALL 33456 0 5
// end ; end_of_file
33341: PPOPN 5
33343: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33344: LD_INT 0
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33350: LD_VAR 0 1
33354: PPUSH
33355: CALL_OW 264
33359: PUSH
33360: LD_INT 91
33362: EQUAL
33363: IFFALSE 33435
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33365: LD_INT 68
33367: PPUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 255
33377: PPUSH
33378: CALL_OW 321
33382: PUSH
33383: LD_INT 2
33385: EQUAL
33386: IFFALSE 33398
// eff := 70 else
33388: LD_ADDR_VAR 0 4
33392: PUSH
33393: LD_INT 70
33395: ST_TO_ADDR
33396: GO 33406
// eff := 30 ;
33398: LD_ADDR_VAR 0 4
33402: PUSH
33403: LD_INT 30
33405: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 250
33415: PPUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: CALL_OW 251
33425: PPUSH
33426: LD_VAR 0 4
33430: PPUSH
33431: CALL_OW 495
// end ; end ;
33435: LD_VAR 0 2
33439: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33440: LD_INT 0
33442: PPUSH
// end ;
33443: LD_VAR 0 4
33447: RET
// export function SOS_Command ( cmd ) ; begin
33448: LD_INT 0
33450: PPUSH
// end ;
33451: LD_VAR 0 2
33455: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33456: LD_INT 0
33458: PPUSH
// end ;
33459: LD_VAR 0 6
33463: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33464: LD_INT 0
33466: PPUSH
33467: PPUSH
// if not vehicle or not factory then
33468: LD_VAR 0 1
33472: NOT
33473: PUSH
33474: LD_VAR 0 2
33478: NOT
33479: OR
33480: IFFALSE 33484
// exit ;
33482: GO 33715
// if factoryWaypoints >= factory then
33484: LD_EXP 110
33488: PUSH
33489: LD_VAR 0 2
33493: GREATEREQUAL
33494: IFFALSE 33715
// if factoryWaypoints [ factory ] then
33496: LD_EXP 110
33500: PUSH
33501: LD_VAR 0 2
33505: ARRAY
33506: IFFALSE 33715
// begin if GetControl ( vehicle ) = control_manual then
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 263
33517: PUSH
33518: LD_INT 1
33520: EQUAL
33521: IFFALSE 33602
// begin driver := IsDrivenBy ( vehicle ) ;
33523: LD_ADDR_VAR 0 4
33527: PUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: CALL_OW 311
33537: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33538: LD_VAR 0 4
33542: PPUSH
33543: LD_EXP 110
33547: PUSH
33548: LD_VAR 0 2
33552: ARRAY
33553: PUSH
33554: LD_INT 3
33556: ARRAY
33557: PPUSH
33558: LD_EXP 110
33562: PUSH
33563: LD_VAR 0 2
33567: ARRAY
33568: PUSH
33569: LD_INT 4
33571: ARRAY
33572: PPUSH
33573: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33577: LD_VAR 0 4
33581: PPUSH
33582: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33586: LD_VAR 0 4
33590: PPUSH
33591: LD_VAR 0 2
33595: PPUSH
33596: CALL_OW 180
// end else
33600: GO 33715
// if GetControl ( vehicle ) = control_remote then
33602: LD_VAR 0 1
33606: PPUSH
33607: CALL_OW 263
33611: PUSH
33612: LD_INT 2
33614: EQUAL
33615: IFFALSE 33676
// begin wait ( 0 0$2 ) ;
33617: LD_INT 70
33619: PPUSH
33620: CALL_OW 67
// if Connect ( vehicle ) then
33624: LD_VAR 0 1
33628: PPUSH
33629: CALL 45739 0 1
33633: IFFALSE 33674
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33635: LD_VAR 0 1
33639: PPUSH
33640: LD_EXP 110
33644: PUSH
33645: LD_VAR 0 2
33649: ARRAY
33650: PUSH
33651: LD_INT 3
33653: ARRAY
33654: PPUSH
33655: LD_EXP 110
33659: PUSH
33660: LD_VAR 0 2
33664: ARRAY
33665: PUSH
33666: LD_INT 4
33668: ARRAY
33669: PPUSH
33670: CALL_OW 171
// end else
33674: GO 33715
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33676: LD_VAR 0 1
33680: PPUSH
33681: LD_EXP 110
33685: PUSH
33686: LD_VAR 0 2
33690: ARRAY
33691: PUSH
33692: LD_INT 3
33694: ARRAY
33695: PPUSH
33696: LD_EXP 110
33700: PUSH
33701: LD_VAR 0 2
33705: ARRAY
33706: PUSH
33707: LD_INT 4
33709: ARRAY
33710: PPUSH
33711: CALL_OW 171
// end ; end ;
33715: LD_VAR 0 3
33719: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33720: LD_INT 0
33722: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33723: LD_VAR 0 1
33727: PUSH
33728: LD_INT 250
33730: EQUAL
33731: PUSH
33732: LD_VAR 0 2
33736: PPUSH
33737: CALL_OW 264
33741: PUSH
33742: LD_INT 81
33744: EQUAL
33745: AND
33746: IFFALSE 33767
// MinerPlaceMine ( unit , x , y ) ;
33748: LD_VAR 0 2
33752: PPUSH
33753: LD_VAR 0 4
33757: PPUSH
33758: LD_VAR 0 5
33762: PPUSH
33763: CALL 36152 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33767: LD_VAR 0 1
33771: PUSH
33772: LD_INT 251
33774: EQUAL
33775: PUSH
33776: LD_VAR 0 2
33780: PPUSH
33781: CALL_OW 264
33785: PUSH
33786: LD_INT 81
33788: EQUAL
33789: AND
33790: IFFALSE 33811
// MinerDetonateMine ( unit , x , y ) ;
33792: LD_VAR 0 2
33796: PPUSH
33797: LD_VAR 0 4
33801: PPUSH
33802: LD_VAR 0 5
33806: PPUSH
33807: CALL 36427 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33811: LD_VAR 0 1
33815: PUSH
33816: LD_INT 252
33818: EQUAL
33819: PUSH
33820: LD_VAR 0 2
33824: PPUSH
33825: CALL_OW 264
33829: PUSH
33830: LD_INT 81
33832: EQUAL
33833: AND
33834: IFFALSE 33855
// MinerCreateMinefield ( unit , x , y ) ;
33836: LD_VAR 0 2
33840: PPUSH
33841: LD_VAR 0 4
33845: PPUSH
33846: LD_VAR 0 5
33850: PPUSH
33851: CALL 36844 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33855: LD_VAR 0 1
33859: PUSH
33860: LD_INT 253
33862: EQUAL
33863: PUSH
33864: LD_VAR 0 2
33868: PPUSH
33869: CALL_OW 257
33873: PUSH
33874: LD_INT 5
33876: EQUAL
33877: AND
33878: IFFALSE 33899
// ComBinocular ( unit , x , y ) ;
33880: LD_VAR 0 2
33884: PPUSH
33885: LD_VAR 0 4
33889: PPUSH
33890: LD_VAR 0 5
33894: PPUSH
33895: CALL 37213 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33899: LD_VAR 0 1
33903: PUSH
33904: LD_INT 254
33906: EQUAL
33907: PUSH
33908: LD_VAR 0 2
33912: PPUSH
33913: CALL_OW 264
33917: PUSH
33918: LD_INT 99
33920: EQUAL
33921: AND
33922: PUSH
33923: LD_VAR 0 3
33927: PPUSH
33928: CALL_OW 263
33932: PUSH
33933: LD_INT 3
33935: EQUAL
33936: AND
33937: IFFALSE 33953
// HackDestroyVehicle ( unit , selectedUnit ) ;
33939: LD_VAR 0 2
33943: PPUSH
33944: LD_VAR 0 3
33948: PPUSH
33949: CALL 35516 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33953: LD_VAR 0 1
33957: PUSH
33958: LD_INT 255
33960: EQUAL
33961: PUSH
33962: LD_VAR 0 2
33966: PPUSH
33967: CALL_OW 264
33971: PUSH
33972: LD_INT 14
33974: PUSH
33975: LD_INT 53
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: IN
33982: AND
33983: PUSH
33984: LD_VAR 0 4
33988: PPUSH
33989: LD_VAR 0 5
33993: PPUSH
33994: CALL_OW 488
33998: AND
33999: IFFALSE 34023
// CutTreeXYR ( unit , x , y , 12 ) ;
34001: LD_VAR 0 2
34005: PPUSH
34006: LD_VAR 0 4
34010: PPUSH
34011: LD_VAR 0 5
34015: PPUSH
34016: LD_INT 12
34018: PPUSH
34019: CALL 34086 0 4
// if cmd = 256 then
34023: LD_VAR 0 1
34027: PUSH
34028: LD_INT 256
34030: EQUAL
34031: IFFALSE 34052
// SetFactoryWaypoint ( unit , x , y ) ;
34033: LD_VAR 0 2
34037: PPUSH
34038: LD_VAR 0 4
34042: PPUSH
34043: LD_VAR 0 5
34047: PPUSH
34048: CALL 31870 0 3
// if cmd = 257 then
34052: LD_VAR 0 1
34056: PUSH
34057: LD_INT 257
34059: EQUAL
34060: IFFALSE 34081
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34062: LD_VAR 0 2
34066: PPUSH
34067: LD_VAR 0 4
34071: PPUSH
34072: LD_VAR 0 5
34076: PPUSH
34077: CALL 32232 0 3
// end ;
34081: LD_VAR 0 6
34085: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
34096: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34097: LD_VAR 0 1
34101: NOT
34102: PUSH
34103: LD_VAR 0 2
34107: PPUSH
34108: LD_VAR 0 3
34112: PPUSH
34113: CALL_OW 488
34117: NOT
34118: OR
34119: PUSH
34120: LD_VAR 0 4
34124: NOT
34125: OR
34126: IFFALSE 34130
// exit ;
34128: GO 34470
// list := [ ] ;
34130: LD_ADDR_VAR 0 13
34134: PUSH
34135: EMPTY
34136: ST_TO_ADDR
// if x - r < 0 then
34137: LD_VAR 0 2
34141: PUSH
34142: LD_VAR 0 4
34146: MINUS
34147: PUSH
34148: LD_INT 0
34150: LESS
34151: IFFALSE 34163
// min_x := 0 else
34153: LD_ADDR_VAR 0 7
34157: PUSH
34158: LD_INT 0
34160: ST_TO_ADDR
34161: GO 34179
// min_x := x - r ;
34163: LD_ADDR_VAR 0 7
34167: PUSH
34168: LD_VAR 0 2
34172: PUSH
34173: LD_VAR 0 4
34177: MINUS
34178: ST_TO_ADDR
// if y - r < 0 then
34179: LD_VAR 0 3
34183: PUSH
34184: LD_VAR 0 4
34188: MINUS
34189: PUSH
34190: LD_INT 0
34192: LESS
34193: IFFALSE 34205
// min_y := 0 else
34195: LD_ADDR_VAR 0 8
34199: PUSH
34200: LD_INT 0
34202: ST_TO_ADDR
34203: GO 34221
// min_y := y - r ;
34205: LD_ADDR_VAR 0 8
34209: PUSH
34210: LD_VAR 0 3
34214: PUSH
34215: LD_VAR 0 4
34219: MINUS
34220: ST_TO_ADDR
// max_x := x + r ;
34221: LD_ADDR_VAR 0 9
34225: PUSH
34226: LD_VAR 0 2
34230: PUSH
34231: LD_VAR 0 4
34235: PLUS
34236: ST_TO_ADDR
// max_y := y + r ;
34237: LD_ADDR_VAR 0 10
34241: PUSH
34242: LD_VAR 0 3
34246: PUSH
34247: LD_VAR 0 4
34251: PLUS
34252: ST_TO_ADDR
// for _x = min_x to max_x do
34253: LD_ADDR_VAR 0 11
34257: PUSH
34258: DOUBLE
34259: LD_VAR 0 7
34263: DEC
34264: ST_TO_ADDR
34265: LD_VAR 0 9
34269: PUSH
34270: FOR_TO
34271: IFFALSE 34388
// for _y = min_y to max_y do
34273: LD_ADDR_VAR 0 12
34277: PUSH
34278: DOUBLE
34279: LD_VAR 0 8
34283: DEC
34284: ST_TO_ADDR
34285: LD_VAR 0 10
34289: PUSH
34290: FOR_TO
34291: IFFALSE 34384
// begin if not ValidHex ( _x , _y ) then
34293: LD_VAR 0 11
34297: PPUSH
34298: LD_VAR 0 12
34302: PPUSH
34303: CALL_OW 488
34307: NOT
34308: IFFALSE 34312
// continue ;
34310: GO 34290
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34312: LD_VAR 0 11
34316: PPUSH
34317: LD_VAR 0 12
34321: PPUSH
34322: CALL_OW 351
34326: PUSH
34327: LD_VAR 0 11
34331: PPUSH
34332: LD_VAR 0 12
34336: PPUSH
34337: CALL_OW 554
34341: AND
34342: IFFALSE 34382
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34344: LD_ADDR_VAR 0 13
34348: PUSH
34349: LD_VAR 0 13
34353: PPUSH
34354: LD_VAR 0 13
34358: PUSH
34359: LD_INT 1
34361: PLUS
34362: PPUSH
34363: LD_VAR 0 11
34367: PUSH
34368: LD_VAR 0 12
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PPUSH
34377: CALL_OW 2
34381: ST_TO_ADDR
// end ;
34382: GO 34290
34384: POP
34385: POP
34386: GO 34270
34388: POP
34389: POP
// if not list then
34390: LD_VAR 0 13
34394: NOT
34395: IFFALSE 34399
// exit ;
34397: GO 34470
// for i in list do
34399: LD_ADDR_VAR 0 6
34403: PUSH
34404: LD_VAR 0 13
34408: PUSH
34409: FOR_IN
34410: IFFALSE 34468
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34412: LD_VAR 0 1
34416: PPUSH
34417: LD_STRING M
34419: PUSH
34420: LD_VAR 0 6
34424: PUSH
34425: LD_INT 1
34427: ARRAY
34428: PUSH
34429: LD_VAR 0 6
34433: PUSH
34434: LD_INT 2
34436: ARRAY
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: PPUSH
34462: CALL_OW 447
34466: GO 34409
34468: POP
34469: POP
// end ;
34470: LD_VAR 0 5
34474: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34475: LD_EXP 113
34479: NOT
34480: IFFALSE 34530
34482: GO 34484
34484: DISABLE
// begin initHack := true ;
34485: LD_ADDR_EXP 113
34489: PUSH
34490: LD_INT 1
34492: ST_TO_ADDR
// hackTanks := [ ] ;
34493: LD_ADDR_EXP 114
34497: PUSH
34498: EMPTY
34499: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34500: LD_ADDR_EXP 115
34504: PUSH
34505: EMPTY
34506: ST_TO_ADDR
// hackLimit := 3 ;
34507: LD_ADDR_EXP 116
34511: PUSH
34512: LD_INT 3
34514: ST_TO_ADDR
// hackDist := 12 ;
34515: LD_ADDR_EXP 117
34519: PUSH
34520: LD_INT 12
34522: ST_TO_ADDR
// hackCounter := [ ] ;
34523: LD_ADDR_EXP 118
34527: PUSH
34528: EMPTY
34529: ST_TO_ADDR
// end ;
34530: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34531: LD_EXP 113
34535: PUSH
34536: LD_INT 34
34538: PUSH
34539: LD_INT 99
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PPUSH
34546: CALL_OW 69
34550: AND
34551: IFFALSE 34804
34553: GO 34555
34555: DISABLE
34556: LD_INT 0
34558: PPUSH
34559: PPUSH
// begin enable ;
34560: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34561: LD_ADDR_VAR 0 1
34565: PUSH
34566: LD_INT 34
34568: PUSH
34569: LD_INT 99
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PPUSH
34576: CALL_OW 69
34580: PUSH
34581: FOR_IN
34582: IFFALSE 34802
// begin if not i in hackTanks then
34584: LD_VAR 0 1
34588: PUSH
34589: LD_EXP 114
34593: IN
34594: NOT
34595: IFFALSE 34678
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34597: LD_ADDR_EXP 114
34601: PUSH
34602: LD_EXP 114
34606: PPUSH
34607: LD_EXP 114
34611: PUSH
34612: LD_INT 1
34614: PLUS
34615: PPUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 1
34625: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34626: LD_ADDR_EXP 115
34630: PUSH
34631: LD_EXP 115
34635: PPUSH
34636: LD_EXP 115
34640: PUSH
34641: LD_INT 1
34643: PLUS
34644: PPUSH
34645: EMPTY
34646: PPUSH
34647: CALL_OW 1
34651: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34652: LD_ADDR_EXP 118
34656: PUSH
34657: LD_EXP 118
34661: PPUSH
34662: LD_EXP 118
34666: PUSH
34667: LD_INT 1
34669: PLUS
34670: PPUSH
34671: EMPTY
34672: PPUSH
34673: CALL_OW 1
34677: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34678: LD_VAR 0 1
34682: PPUSH
34683: CALL_OW 302
34687: NOT
34688: IFFALSE 34701
// begin HackUnlinkAll ( i ) ;
34690: LD_VAR 0 1
34694: PPUSH
34695: CALL 34807 0 1
// continue ;
34699: GO 34581
// end ; HackCheckCapturedStatus ( i ) ;
34701: LD_VAR 0 1
34705: PPUSH
34706: CALL 35250 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34710: LD_ADDR_VAR 0 2
34714: PUSH
34715: LD_INT 81
34717: PUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: CALL_OW 255
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 33
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 91
34744: PUSH
34745: LD_VAR 0 1
34749: PUSH
34750: LD_EXP 117
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 50
34762: PUSH
34763: EMPTY
34764: LIST
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: PPUSH
34772: CALL_OW 69
34776: ST_TO_ADDR
// if not tmp then
34777: LD_VAR 0 2
34781: NOT
34782: IFFALSE 34786
// continue ;
34784: GO 34581
// HackLink ( i , tmp ) ;
34786: LD_VAR 0 1
34790: PPUSH
34791: LD_VAR 0 2
34795: PPUSH
34796: CALL 34943 0 2
// end ;
34800: GO 34581
34802: POP
34803: POP
// end ;
34804: PPOPN 2
34806: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
// if not hack in hackTanks then
34812: LD_VAR 0 1
34816: PUSH
34817: LD_EXP 114
34821: IN
34822: NOT
34823: IFFALSE 34827
// exit ;
34825: GO 34938
// index := GetElementIndex ( hackTanks , hack ) ;
34827: LD_ADDR_VAR 0 4
34831: PUSH
34832: LD_EXP 114
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL 42555 0 2
34846: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34847: LD_EXP 115
34851: PUSH
34852: LD_VAR 0 4
34856: ARRAY
34857: IFFALSE 34938
// begin for i in hackTanksCaptured [ index ] do
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_EXP 115
34868: PUSH
34869: LD_VAR 0 4
34873: ARRAY
34874: PUSH
34875: FOR_IN
34876: IFFALSE 34902
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34878: LD_VAR 0 3
34882: PUSH
34883: LD_INT 1
34885: ARRAY
34886: PPUSH
34887: LD_VAR 0 3
34891: PUSH
34892: LD_INT 2
34894: ARRAY
34895: PPUSH
34896: CALL_OW 235
34900: GO 34875
34902: POP
34903: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34904: LD_ADDR_EXP 115
34908: PUSH
34909: LD_EXP 115
34913: PPUSH
34914: LD_VAR 0 4
34918: PPUSH
34919: EMPTY
34920: PPUSH
34921: CALL_OW 1
34925: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_INT 0
34933: PPUSH
34934: CALL_OW 505
// end ; end ;
34938: LD_VAR 0 2
34942: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
// if not hack in hackTanks or not vehicles then
34948: LD_VAR 0 1
34952: PUSH
34953: LD_EXP 114
34957: IN
34958: NOT
34959: PUSH
34960: LD_VAR 0 2
34964: NOT
34965: OR
34966: IFFALSE 34970
// exit ;
34968: GO 35245
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34970: LD_ADDR_VAR 0 2
34974: PUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: LD_VAR 0 2
34984: PPUSH
34985: LD_INT 1
34987: PPUSH
34988: LD_INT 1
34990: PPUSH
34991: CALL 43205 0 4
34995: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34996: LD_ADDR_VAR 0 5
35000: PUSH
35001: LD_EXP 114
35005: PPUSH
35006: LD_VAR 0 1
35010: PPUSH
35011: CALL 42555 0 2
35015: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35016: LD_EXP 115
35020: PUSH
35021: LD_VAR 0 5
35025: ARRAY
35026: PUSH
35027: LD_EXP 116
35031: LESS
35032: IFFALSE 35221
// begin for i := 1 to vehicles do
35034: LD_ADDR_VAR 0 4
35038: PUSH
35039: DOUBLE
35040: LD_INT 1
35042: DEC
35043: ST_TO_ADDR
35044: LD_VAR 0 2
35048: PUSH
35049: FOR_TO
35050: IFFALSE 35219
// begin if hackTanksCaptured [ index ] = hackLimit then
35052: LD_EXP 115
35056: PUSH
35057: LD_VAR 0 5
35061: ARRAY
35062: PUSH
35063: LD_EXP 116
35067: EQUAL
35068: IFFALSE 35072
// break ;
35070: GO 35219
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35072: LD_ADDR_EXP 118
35076: PUSH
35077: LD_EXP 118
35081: PPUSH
35082: LD_VAR 0 5
35086: PPUSH
35087: LD_EXP 118
35091: PUSH
35092: LD_VAR 0 5
35096: ARRAY
35097: PUSH
35098: LD_INT 1
35100: PLUS
35101: PPUSH
35102: CALL_OW 1
35106: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35107: LD_ADDR_EXP 115
35111: PUSH
35112: LD_EXP 115
35116: PPUSH
35117: LD_VAR 0 5
35121: PUSH
35122: LD_EXP 115
35126: PUSH
35127: LD_VAR 0 5
35131: ARRAY
35132: PUSH
35133: LD_INT 1
35135: PLUS
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PPUSH
35141: LD_VAR 0 2
35145: PUSH
35146: LD_VAR 0 4
35150: ARRAY
35151: PUSH
35152: LD_VAR 0 2
35156: PUSH
35157: LD_VAR 0 4
35161: ARRAY
35162: PPUSH
35163: CALL_OW 255
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PPUSH
35172: CALL 42770 0 3
35176: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35177: LD_VAR 0 2
35181: PUSH
35182: LD_VAR 0 4
35186: ARRAY
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 255
35197: PPUSH
35198: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35202: LD_VAR 0 2
35206: PUSH
35207: LD_VAR 0 4
35211: ARRAY
35212: PPUSH
35213: CALL_OW 141
// end ;
35217: GO 35049
35219: POP
35220: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35221: LD_VAR 0 1
35225: PPUSH
35226: LD_EXP 115
35230: PUSH
35231: LD_VAR 0 5
35235: ARRAY
35236: PUSH
35237: LD_INT 0
35239: PLUS
35240: PPUSH
35241: CALL_OW 505
// end ;
35245: LD_VAR 0 3
35249: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35250: LD_INT 0
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
// if not hack in hackTanks then
35256: LD_VAR 0 1
35260: PUSH
35261: LD_EXP 114
35265: IN
35266: NOT
35267: IFFALSE 35271
// exit ;
35269: GO 35511
// index := GetElementIndex ( hackTanks , hack ) ;
35271: LD_ADDR_VAR 0 4
35275: PUSH
35276: LD_EXP 114
35280: PPUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: CALL 42555 0 2
35290: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35291: LD_ADDR_VAR 0 3
35295: PUSH
35296: DOUBLE
35297: LD_EXP 115
35301: PUSH
35302: LD_VAR 0 4
35306: ARRAY
35307: INC
35308: ST_TO_ADDR
35309: LD_INT 1
35311: PUSH
35312: FOR_DOWNTO
35313: IFFALSE 35485
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35315: LD_ADDR_VAR 0 5
35319: PUSH
35320: LD_EXP 115
35324: PUSH
35325: LD_VAR 0 4
35329: ARRAY
35330: PUSH
35331: LD_VAR 0 3
35335: ARRAY
35336: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35337: LD_VAR 0 5
35341: PUSH
35342: LD_INT 1
35344: ARRAY
35345: PPUSH
35346: CALL_OW 302
35350: NOT
35351: PUSH
35352: LD_VAR 0 5
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: PPUSH
35361: CALL_OW 255
35365: PUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL_OW 255
35375: NONEQUAL
35376: OR
35377: IFFALSE 35483
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35379: LD_VAR 0 5
35383: PUSH
35384: LD_INT 1
35386: ARRAY
35387: PPUSH
35388: CALL_OW 305
35392: PUSH
35393: LD_VAR 0 5
35397: PUSH
35398: LD_INT 1
35400: ARRAY
35401: PPUSH
35402: CALL_OW 255
35406: PUSH
35407: LD_VAR 0 1
35411: PPUSH
35412: CALL_OW 255
35416: EQUAL
35417: AND
35418: IFFALSE 35442
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35420: LD_VAR 0 5
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PPUSH
35429: LD_VAR 0 5
35433: PUSH
35434: LD_INT 2
35436: ARRAY
35437: PPUSH
35438: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35442: LD_ADDR_EXP 115
35446: PUSH
35447: LD_EXP 115
35451: PPUSH
35452: LD_VAR 0 4
35456: PPUSH
35457: LD_EXP 115
35461: PUSH
35462: LD_VAR 0 4
35466: ARRAY
35467: PPUSH
35468: LD_VAR 0 3
35472: PPUSH
35473: CALL_OW 3
35477: PPUSH
35478: CALL_OW 1
35482: ST_TO_ADDR
// end ; end ;
35483: GO 35312
35485: POP
35486: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35487: LD_VAR 0 1
35491: PPUSH
35492: LD_EXP 115
35496: PUSH
35497: LD_VAR 0 4
35501: ARRAY
35502: PUSH
35503: LD_INT 0
35505: PLUS
35506: PPUSH
35507: CALL_OW 505
// end ;
35511: LD_VAR 0 2
35515: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35516: LD_INT 0
35518: PPUSH
35519: PPUSH
35520: PPUSH
35521: PPUSH
// if not hack in hackTanks then
35522: LD_VAR 0 1
35526: PUSH
35527: LD_EXP 114
35531: IN
35532: NOT
35533: IFFALSE 35537
// exit ;
35535: GO 35622
// index := GetElementIndex ( hackTanks , hack ) ;
35537: LD_ADDR_VAR 0 5
35541: PUSH
35542: LD_EXP 114
35546: PPUSH
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL 42555 0 2
35556: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35557: LD_ADDR_VAR 0 4
35561: PUSH
35562: DOUBLE
35563: LD_INT 1
35565: DEC
35566: ST_TO_ADDR
35567: LD_EXP 115
35571: PUSH
35572: LD_VAR 0 5
35576: ARRAY
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35620
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35581: LD_EXP 115
35585: PUSH
35586: LD_VAR 0 5
35590: ARRAY
35591: PUSH
35592: LD_VAR 0 4
35596: ARRAY
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PUSH
35602: LD_VAR 0 2
35606: EQUAL
35607: IFFALSE 35618
// KillUnit ( vehicle ) ;
35609: LD_VAR 0 2
35613: PPUSH
35614: CALL_OW 66
35618: GO 35578
35620: POP
35621: POP
// end ;
35622: LD_VAR 0 3
35626: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35627: LD_EXP 119
35631: NOT
35632: IFFALSE 35667
35634: GO 35636
35636: DISABLE
// begin initMiner := true ;
35637: LD_ADDR_EXP 119
35641: PUSH
35642: LD_INT 1
35644: ST_TO_ADDR
// minersList := [ ] ;
35645: LD_ADDR_EXP 120
35649: PUSH
35650: EMPTY
35651: ST_TO_ADDR
// minerMinesList := [ ] ;
35652: LD_ADDR_EXP 121
35656: PUSH
35657: EMPTY
35658: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35659: LD_ADDR_EXP 122
35663: PUSH
35664: LD_INT 5
35666: ST_TO_ADDR
// end ;
35667: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35668: LD_EXP 119
35672: PUSH
35673: LD_INT 34
35675: PUSH
35676: LD_INT 81
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PPUSH
35683: CALL_OW 69
35687: AND
35688: IFFALSE 36149
35690: GO 35692
35692: DISABLE
35693: LD_INT 0
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
// begin enable ;
35699: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35700: LD_ADDR_VAR 0 1
35704: PUSH
35705: LD_INT 34
35707: PUSH
35708: LD_INT 81
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PPUSH
35715: CALL_OW 69
35719: PUSH
35720: FOR_IN
35721: IFFALSE 35793
// begin if not i in minersList then
35723: LD_VAR 0 1
35727: PUSH
35728: LD_EXP 120
35732: IN
35733: NOT
35734: IFFALSE 35791
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35736: LD_ADDR_EXP 120
35740: PUSH
35741: LD_EXP 120
35745: PPUSH
35746: LD_EXP 120
35750: PUSH
35751: LD_INT 1
35753: PLUS
35754: PPUSH
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL_OW 1
35764: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35765: LD_ADDR_EXP 121
35769: PUSH
35770: LD_EXP 121
35774: PPUSH
35775: LD_EXP 121
35779: PUSH
35780: LD_INT 1
35782: PLUS
35783: PPUSH
35784: EMPTY
35785: PPUSH
35786: CALL_OW 1
35790: ST_TO_ADDR
// end end ;
35791: GO 35720
35793: POP
35794: POP
// for i := minerMinesList downto 1 do
35795: LD_ADDR_VAR 0 1
35799: PUSH
35800: DOUBLE
35801: LD_EXP 121
35805: INC
35806: ST_TO_ADDR
35807: LD_INT 1
35809: PUSH
35810: FOR_DOWNTO
35811: IFFALSE 36147
// begin if IsLive ( minersList [ i ] ) then
35813: LD_EXP 120
35817: PUSH
35818: LD_VAR 0 1
35822: ARRAY
35823: PPUSH
35824: CALL_OW 300
35828: IFFALSE 35856
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35830: LD_EXP 120
35834: PUSH
35835: LD_VAR 0 1
35839: ARRAY
35840: PPUSH
35841: LD_EXP 121
35845: PUSH
35846: LD_VAR 0 1
35850: ARRAY
35851: PPUSH
35852: CALL_OW 505
// if not minerMinesList [ i ] then
35856: LD_EXP 121
35860: PUSH
35861: LD_VAR 0 1
35865: ARRAY
35866: NOT
35867: IFFALSE 35871
// continue ;
35869: GO 35810
// for j := minerMinesList [ i ] downto 1 do
35871: LD_ADDR_VAR 0 2
35875: PUSH
35876: DOUBLE
35877: LD_EXP 121
35881: PUSH
35882: LD_VAR 0 1
35886: ARRAY
35887: INC
35888: ST_TO_ADDR
35889: LD_INT 1
35891: PUSH
35892: FOR_DOWNTO
35893: IFFALSE 36143
// begin side := GetSide ( minersList [ i ] ) ;
35895: LD_ADDR_VAR 0 3
35899: PUSH
35900: LD_EXP 120
35904: PUSH
35905: LD_VAR 0 1
35909: ARRAY
35910: PPUSH
35911: CALL_OW 255
35915: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35916: LD_ADDR_VAR 0 4
35920: PUSH
35921: LD_EXP 121
35925: PUSH
35926: LD_VAR 0 1
35930: ARRAY
35931: PUSH
35932: LD_VAR 0 2
35936: ARRAY
35937: PUSH
35938: LD_INT 1
35940: ARRAY
35941: PPUSH
35942: LD_EXP 121
35946: PUSH
35947: LD_VAR 0 1
35951: ARRAY
35952: PUSH
35953: LD_VAR 0 2
35957: ARRAY
35958: PUSH
35959: LD_INT 2
35961: ARRAY
35962: PPUSH
35963: CALL_OW 428
35967: ST_TO_ADDR
// if not tmp then
35968: LD_VAR 0 4
35972: NOT
35973: IFFALSE 35977
// continue ;
35975: GO 35892
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35977: LD_VAR 0 4
35981: PUSH
35982: LD_INT 81
35984: PUSH
35985: LD_VAR 0 3
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 69
35998: IN
35999: PUSH
36000: LD_EXP 121
36004: PUSH
36005: LD_VAR 0 1
36009: ARRAY
36010: PUSH
36011: LD_VAR 0 2
36015: ARRAY
36016: PUSH
36017: LD_INT 1
36019: ARRAY
36020: PPUSH
36021: LD_EXP 121
36025: PUSH
36026: LD_VAR 0 1
36030: ARRAY
36031: PUSH
36032: LD_VAR 0 2
36036: ARRAY
36037: PUSH
36038: LD_INT 2
36040: ARRAY
36041: PPUSH
36042: CALL_OW 458
36046: AND
36047: IFFALSE 36141
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36049: LD_EXP 121
36053: PUSH
36054: LD_VAR 0 1
36058: ARRAY
36059: PUSH
36060: LD_VAR 0 2
36064: ARRAY
36065: PUSH
36066: LD_INT 1
36068: ARRAY
36069: PPUSH
36070: LD_EXP 121
36074: PUSH
36075: LD_VAR 0 1
36079: ARRAY
36080: PUSH
36081: LD_VAR 0 2
36085: ARRAY
36086: PUSH
36087: LD_INT 2
36089: ARRAY
36090: PPUSH
36091: LD_VAR 0 3
36095: PPUSH
36096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36100: LD_ADDR_EXP 121
36104: PUSH
36105: LD_EXP 121
36109: PPUSH
36110: LD_VAR 0 1
36114: PPUSH
36115: LD_EXP 121
36119: PUSH
36120: LD_VAR 0 1
36124: ARRAY
36125: PPUSH
36126: LD_VAR 0 2
36130: PPUSH
36131: CALL_OW 3
36135: PPUSH
36136: CALL_OW 1
36140: ST_TO_ADDR
// end ; end ;
36141: GO 35892
36143: POP
36144: POP
// end ;
36145: GO 35810
36147: POP
36148: POP
// end ;
36149: PPOPN 4
36151: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36152: LD_INT 0
36154: PPUSH
36155: PPUSH
// result := false ;
36156: LD_ADDR_VAR 0 4
36160: PUSH
36161: LD_INT 0
36163: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36164: LD_VAR 0 1
36168: PPUSH
36169: CALL_OW 264
36173: PUSH
36174: LD_INT 81
36176: EQUAL
36177: NOT
36178: IFFALSE 36182
// exit ;
36180: GO 36422
// index := GetElementIndex ( minersList , unit ) ;
36182: LD_ADDR_VAR 0 5
36186: PUSH
36187: LD_EXP 120
36191: PPUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL 42555 0 2
36201: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36202: LD_EXP 121
36206: PUSH
36207: LD_VAR 0 5
36211: ARRAY
36212: PUSH
36213: LD_EXP 122
36217: GREATEREQUAL
36218: IFFALSE 36222
// exit ;
36220: GO 36422
// ComMoveXY ( unit , x , y ) ;
36222: LD_VAR 0 1
36226: PPUSH
36227: LD_VAR 0 2
36231: PPUSH
36232: LD_VAR 0 3
36236: PPUSH
36237: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36241: LD_INT 35
36243: PPUSH
36244: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_VAR 0 2
36257: PPUSH
36258: LD_VAR 0 3
36262: PPUSH
36263: CALL 73891 0 3
36267: NOT
36268: PUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 314
36278: AND
36279: IFFALSE 36283
// exit ;
36281: GO 36422
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36283: LD_VAR 0 2
36287: PPUSH
36288: LD_VAR 0 3
36292: PPUSH
36293: CALL_OW 428
36297: PUSH
36298: LD_VAR 0 1
36302: EQUAL
36303: PUSH
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 314
36313: NOT
36314: AND
36315: IFFALSE 36241
// PlaySoundXY ( x , y , PlantMine ) ;
36317: LD_VAR 0 2
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: LD_STRING PlantMine
36329: PPUSH
36330: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36334: LD_VAR 0 2
36338: PPUSH
36339: LD_VAR 0 3
36343: PPUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: CALL_OW 255
36353: PPUSH
36354: LD_INT 0
36356: PPUSH
36357: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36361: LD_ADDR_EXP 121
36365: PUSH
36366: LD_EXP 121
36370: PPUSH
36371: LD_VAR 0 5
36375: PUSH
36376: LD_EXP 121
36380: PUSH
36381: LD_VAR 0 5
36385: ARRAY
36386: PUSH
36387: LD_INT 1
36389: PLUS
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PPUSH
36395: LD_VAR 0 2
36399: PUSH
36400: LD_VAR 0 3
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PPUSH
36409: CALL 42770 0 3
36413: ST_TO_ADDR
// result := true ;
36414: LD_ADDR_VAR 0 4
36418: PUSH
36419: LD_INT 1
36421: ST_TO_ADDR
// end ;
36422: LD_VAR 0 4
36426: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36427: LD_INT 0
36429: PPUSH
36430: PPUSH
36431: PPUSH
// if not unit in minersList then
36432: LD_VAR 0 1
36436: PUSH
36437: LD_EXP 120
36441: IN
36442: NOT
36443: IFFALSE 36447
// exit ;
36445: GO 36839
// index := GetElementIndex ( minersList , unit ) ;
36447: LD_ADDR_VAR 0 6
36451: PUSH
36452: LD_EXP 120
36456: PPUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL 42555 0 2
36466: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36467: LD_ADDR_VAR 0 5
36471: PUSH
36472: DOUBLE
36473: LD_EXP 121
36477: PUSH
36478: LD_VAR 0 6
36482: ARRAY
36483: INC
36484: ST_TO_ADDR
36485: LD_INT 1
36487: PUSH
36488: FOR_DOWNTO
36489: IFFALSE 36650
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36491: LD_EXP 121
36495: PUSH
36496: LD_VAR 0 6
36500: ARRAY
36501: PUSH
36502: LD_VAR 0 5
36506: ARRAY
36507: PUSH
36508: LD_INT 1
36510: ARRAY
36511: PUSH
36512: LD_VAR 0 2
36516: EQUAL
36517: PUSH
36518: LD_EXP 121
36522: PUSH
36523: LD_VAR 0 6
36527: ARRAY
36528: PUSH
36529: LD_VAR 0 5
36533: ARRAY
36534: PUSH
36535: LD_INT 2
36537: ARRAY
36538: PUSH
36539: LD_VAR 0 3
36543: EQUAL
36544: AND
36545: IFFALSE 36648
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36547: LD_EXP 121
36551: PUSH
36552: LD_VAR 0 6
36556: ARRAY
36557: PUSH
36558: LD_VAR 0 5
36562: ARRAY
36563: PUSH
36564: LD_INT 1
36566: ARRAY
36567: PPUSH
36568: LD_EXP 121
36572: PUSH
36573: LD_VAR 0 6
36577: ARRAY
36578: PUSH
36579: LD_VAR 0 5
36583: ARRAY
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: PPUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 255
36598: PPUSH
36599: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36603: LD_ADDR_EXP 121
36607: PUSH
36608: LD_EXP 121
36612: PPUSH
36613: LD_VAR 0 6
36617: PPUSH
36618: LD_EXP 121
36622: PUSH
36623: LD_VAR 0 6
36627: ARRAY
36628: PPUSH
36629: LD_VAR 0 5
36633: PPUSH
36634: CALL_OW 3
36638: PPUSH
36639: CALL_OW 1
36643: ST_TO_ADDR
// exit ;
36644: POP
36645: POP
36646: GO 36839
// end ; end ;
36648: GO 36488
36650: POP
36651: POP
// for i := minerMinesList [ index ] downto 1 do
36652: LD_ADDR_VAR 0 5
36656: PUSH
36657: DOUBLE
36658: LD_EXP 121
36662: PUSH
36663: LD_VAR 0 6
36667: ARRAY
36668: INC
36669: ST_TO_ADDR
36670: LD_INT 1
36672: PUSH
36673: FOR_DOWNTO
36674: IFFALSE 36837
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36676: LD_EXP 121
36680: PUSH
36681: LD_VAR 0 6
36685: ARRAY
36686: PUSH
36687: LD_VAR 0 5
36691: ARRAY
36692: PUSH
36693: LD_INT 1
36695: ARRAY
36696: PPUSH
36697: LD_EXP 121
36701: PUSH
36702: LD_VAR 0 6
36706: ARRAY
36707: PUSH
36708: LD_VAR 0 5
36712: ARRAY
36713: PUSH
36714: LD_INT 2
36716: ARRAY
36717: PPUSH
36718: LD_VAR 0 2
36722: PPUSH
36723: LD_VAR 0 3
36727: PPUSH
36728: CALL_OW 298
36732: PUSH
36733: LD_INT 6
36735: LESS
36736: IFFALSE 36835
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36738: LD_EXP 121
36742: PUSH
36743: LD_VAR 0 6
36747: ARRAY
36748: PUSH
36749: LD_VAR 0 5
36753: ARRAY
36754: PUSH
36755: LD_INT 1
36757: ARRAY
36758: PPUSH
36759: LD_EXP 121
36763: PUSH
36764: LD_VAR 0 6
36768: ARRAY
36769: PUSH
36770: LD_VAR 0 5
36774: ARRAY
36775: PUSH
36776: LD_INT 2
36778: ARRAY
36779: PPUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 255
36789: PPUSH
36790: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36794: LD_ADDR_EXP 121
36798: PUSH
36799: LD_EXP 121
36803: PPUSH
36804: LD_VAR 0 6
36808: PPUSH
36809: LD_EXP 121
36813: PUSH
36814: LD_VAR 0 6
36818: ARRAY
36819: PPUSH
36820: LD_VAR 0 5
36824: PPUSH
36825: CALL_OW 3
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
// end ; end ;
36835: GO 36673
36837: POP
36838: POP
// end ;
36839: LD_VAR 0 4
36843: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36844: LD_INT 0
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 264
36864: PUSH
36865: LD_INT 81
36867: EQUAL
36868: NOT
36869: PUSH
36870: LD_VAR 0 1
36874: PUSH
36875: LD_EXP 120
36879: IN
36880: NOT
36881: OR
36882: IFFALSE 36886
// exit ;
36884: GO 37208
// index := GetElementIndex ( minersList , unit ) ;
36886: LD_ADDR_VAR 0 6
36890: PUSH
36891: LD_EXP 120
36895: PPUSH
36896: LD_VAR 0 1
36900: PPUSH
36901: CALL 42555 0 2
36905: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36906: LD_ADDR_VAR 0 8
36910: PUSH
36911: LD_EXP 122
36915: PUSH
36916: LD_EXP 121
36920: PUSH
36921: LD_VAR 0 6
36925: ARRAY
36926: MINUS
36927: ST_TO_ADDR
// if not minesFreeAmount then
36928: LD_VAR 0 8
36932: NOT
36933: IFFALSE 36937
// exit ;
36935: GO 37208
// tmp := [ ] ;
36937: LD_ADDR_VAR 0 7
36941: PUSH
36942: EMPTY
36943: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36944: LD_ADDR_VAR 0 5
36948: PUSH
36949: DOUBLE
36950: LD_INT 1
36952: DEC
36953: ST_TO_ADDR
36954: LD_VAR 0 8
36958: PUSH
36959: FOR_TO
36960: IFFALSE 37155
// begin _d := rand ( 0 , 5 ) ;
36962: LD_ADDR_VAR 0 11
36966: PUSH
36967: LD_INT 0
36969: PPUSH
36970: LD_INT 5
36972: PPUSH
36973: CALL_OW 12
36977: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36978: LD_ADDR_VAR 0 12
36982: PUSH
36983: LD_INT 2
36985: PPUSH
36986: LD_INT 6
36988: PPUSH
36989: CALL_OW 12
36993: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36994: LD_ADDR_VAR 0 9
36998: PUSH
36999: LD_VAR 0 2
37003: PPUSH
37004: LD_VAR 0 11
37008: PPUSH
37009: LD_VAR 0 12
37013: PPUSH
37014: CALL_OW 272
37018: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37019: LD_ADDR_VAR 0 10
37023: PUSH
37024: LD_VAR 0 3
37028: PPUSH
37029: LD_VAR 0 11
37033: PPUSH
37034: LD_VAR 0 12
37038: PPUSH
37039: CALL_OW 273
37043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37044: LD_VAR 0 9
37048: PPUSH
37049: LD_VAR 0 10
37053: PPUSH
37054: CALL_OW 488
37058: PUSH
37059: LD_VAR 0 9
37063: PUSH
37064: LD_VAR 0 10
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_VAR 0 7
37077: IN
37078: NOT
37079: AND
37080: PUSH
37081: LD_VAR 0 9
37085: PPUSH
37086: LD_VAR 0 10
37090: PPUSH
37091: CALL_OW 458
37095: NOT
37096: AND
37097: IFFALSE 37139
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: LD_VAR 0 7
37108: PPUSH
37109: LD_VAR 0 7
37113: PUSH
37114: LD_INT 1
37116: PLUS
37117: PPUSH
37118: LD_VAR 0 9
37122: PUSH
37123: LD_VAR 0 10
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PPUSH
37132: CALL_OW 1
37136: ST_TO_ADDR
37137: GO 37153
// i := i - 1 ;
37139: LD_ADDR_VAR 0 5
37143: PUSH
37144: LD_VAR 0 5
37148: PUSH
37149: LD_INT 1
37151: MINUS
37152: ST_TO_ADDR
// end ;
37153: GO 36959
37155: POP
37156: POP
// for i in tmp do
37157: LD_ADDR_VAR 0 5
37161: PUSH
37162: LD_VAR 0 7
37166: PUSH
37167: FOR_IN
37168: IFFALSE 37206
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37170: LD_VAR 0 1
37174: PPUSH
37175: LD_VAR 0 5
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PPUSH
37184: LD_VAR 0 5
37188: PUSH
37189: LD_INT 2
37191: ARRAY
37192: PPUSH
37193: CALL 36152 0 3
37197: NOT
37198: IFFALSE 37204
// exit ;
37200: POP
37201: POP
37202: GO 37208
37204: GO 37167
37206: POP
37207: POP
// end ;
37208: LD_VAR 0 4
37212: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37213: LD_INT 0
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
// if not GetClass ( unit ) = class_sniper then
37222: LD_VAR 0 1
37226: PPUSH
37227: CALL_OW 257
37231: PUSH
37232: LD_INT 5
37234: EQUAL
37235: NOT
37236: IFFALSE 37240
// exit ;
37238: GO 37628
// dist := 8 ;
37240: LD_ADDR_VAR 0 5
37244: PUSH
37245: LD_INT 8
37247: ST_TO_ADDR
// viewRange := 12 ;
37248: LD_ADDR_VAR 0 7
37252: PUSH
37253: LD_INT 12
37255: ST_TO_ADDR
// side := GetSide ( unit ) ;
37256: LD_ADDR_VAR 0 6
37260: PUSH
37261: LD_VAR 0 1
37265: PPUSH
37266: CALL_OW 255
37270: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37271: LD_INT 61
37273: PPUSH
37274: LD_VAR 0 6
37278: PPUSH
37279: CALL_OW 321
37283: PUSH
37284: LD_INT 2
37286: EQUAL
37287: IFFALSE 37297
// viewRange := 16 ;
37289: LD_ADDR_VAR 0 7
37293: PUSH
37294: LD_INT 16
37296: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37297: LD_VAR 0 1
37301: PPUSH
37302: LD_VAR 0 2
37306: PPUSH
37307: LD_VAR 0 3
37311: PPUSH
37312: CALL_OW 297
37316: PUSH
37317: LD_VAR 0 5
37321: GREATER
37322: IFFALSE 37401
// begin ComMoveXY ( unit , x , y ) ;
37324: LD_VAR 0 1
37328: PPUSH
37329: LD_VAR 0 2
37333: PPUSH
37334: LD_VAR 0 3
37338: PPUSH
37339: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37343: LD_INT 35
37345: PPUSH
37346: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_VAR 0 2
37359: PPUSH
37360: LD_VAR 0 3
37364: PPUSH
37365: CALL 73891 0 3
37369: NOT
37370: IFFALSE 37374
// exit ;
37372: GO 37628
// until GetDistUnitXY ( unit , x , y ) < dist ;
37374: LD_VAR 0 1
37378: PPUSH
37379: LD_VAR 0 2
37383: PPUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 297
37393: PUSH
37394: LD_VAR 0 5
37398: LESS
37399: IFFALSE 37343
// end ; ComTurnXY ( unit , x , y ) ;
37401: LD_VAR 0 1
37405: PPUSH
37406: LD_VAR 0 2
37410: PPUSH
37411: LD_VAR 0 3
37415: PPUSH
37416: CALL_OW 118
// wait ( 5 ) ;
37420: LD_INT 5
37422: PPUSH
37423: CALL_OW 67
// _d := GetDir ( unit ) ;
37427: LD_ADDR_VAR 0 10
37431: PUSH
37432: LD_VAR 0 1
37436: PPUSH
37437: CALL_OW 254
37441: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37442: LD_ADDR_VAR 0 8
37446: PUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 250
37456: PPUSH
37457: LD_VAR 0 10
37461: PPUSH
37462: LD_VAR 0 5
37466: PPUSH
37467: CALL_OW 272
37471: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 251
37486: PPUSH
37487: LD_VAR 0 10
37491: PPUSH
37492: LD_VAR 0 5
37496: PPUSH
37497: CALL_OW 273
37501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37502: LD_VAR 0 8
37506: PPUSH
37507: LD_VAR 0 9
37511: PPUSH
37512: CALL_OW 488
37516: NOT
37517: IFFALSE 37521
// exit ;
37519: GO 37628
// ComAnimCustom ( unit , 1 ) ;
37521: LD_VAR 0 1
37525: PPUSH
37526: LD_INT 1
37528: PPUSH
37529: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37533: LD_VAR 0 8
37537: PPUSH
37538: LD_VAR 0 9
37542: PPUSH
37543: LD_VAR 0 6
37547: PPUSH
37548: LD_VAR 0 7
37552: PPUSH
37553: CALL_OW 330
// repeat wait ( 1 ) ;
37557: LD_INT 1
37559: PPUSH
37560: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37564: LD_VAR 0 1
37568: PPUSH
37569: CALL_OW 316
37573: PUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: CALL_OW 314
37583: OR
37584: PUSH
37585: LD_VAR 0 1
37589: PPUSH
37590: CALL_OW 302
37594: NOT
37595: OR
37596: PUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 301
37606: OR
37607: IFFALSE 37557
// RemoveSeeing ( _x , _y , side ) ;
37609: LD_VAR 0 8
37613: PPUSH
37614: LD_VAR 0 9
37618: PPUSH
37619: LD_VAR 0 6
37623: PPUSH
37624: CALL_OW 331
// end ; end_of_file
37628: LD_VAR 0 4
37632: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37633: LD_INT 0
37635: PPUSH
37636: PPUSH
// if exist_mode then
37637: LD_VAR 0 2
37641: IFFALSE 37666
// unit := CreateCharacter ( prefix & ident ) else
37643: LD_ADDR_VAR 0 5
37647: PUSH
37648: LD_VAR 0 3
37652: PUSH
37653: LD_VAR 0 1
37657: STR
37658: PPUSH
37659: CALL_OW 34
37663: ST_TO_ADDR
37664: GO 37681
// unit := NewCharacter ( ident ) ;
37666: LD_ADDR_VAR 0 5
37670: PUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 25
37680: ST_TO_ADDR
// result := unit ;
37681: LD_ADDR_VAR 0 4
37685: PUSH
37686: LD_VAR 0 5
37690: ST_TO_ADDR
// end ;
37691: LD_VAR 0 4
37695: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37696: LD_INT 0
37698: PPUSH
37699: PPUSH
// if not side or not nation then
37700: LD_VAR 0 1
37704: NOT
37705: PUSH
37706: LD_VAR 0 2
37710: NOT
37711: OR
37712: IFFALSE 37716
// exit ;
37714: GO 38484
// case nation of nation_american :
37716: LD_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37729
37727: GO 37943
37729: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37730: LD_ADDR_VAR 0 4
37734: PUSH
37735: LD_INT 35
37737: PUSH
37738: LD_INT 45
37740: PUSH
37741: LD_INT 46
37743: PUSH
37744: LD_INT 47
37746: PUSH
37747: LD_INT 82
37749: PUSH
37750: LD_INT 83
37752: PUSH
37753: LD_INT 84
37755: PUSH
37756: LD_INT 85
37758: PUSH
37759: LD_INT 86
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 2
37767: PUSH
37768: LD_INT 6
37770: PUSH
37771: LD_INT 15
37773: PUSH
37774: LD_INT 16
37776: PUSH
37777: LD_INT 7
37779: PUSH
37780: LD_INT 12
37782: PUSH
37783: LD_INT 13
37785: PUSH
37786: LD_INT 10
37788: PUSH
37789: LD_INT 14
37791: PUSH
37792: LD_INT 20
37794: PUSH
37795: LD_INT 21
37797: PUSH
37798: LD_INT 22
37800: PUSH
37801: LD_INT 25
37803: PUSH
37804: LD_INT 32
37806: PUSH
37807: LD_INT 27
37809: PUSH
37810: LD_INT 36
37812: PUSH
37813: LD_INT 69
37815: PUSH
37816: LD_INT 39
37818: PUSH
37819: LD_INT 34
37821: PUSH
37822: LD_INT 40
37824: PUSH
37825: LD_INT 48
37827: PUSH
37828: LD_INT 49
37830: PUSH
37831: LD_INT 50
37833: PUSH
37834: LD_INT 51
37836: PUSH
37837: LD_INT 52
37839: PUSH
37840: LD_INT 53
37842: PUSH
37843: LD_INT 54
37845: PUSH
37846: LD_INT 55
37848: PUSH
37849: LD_INT 56
37851: PUSH
37852: LD_INT 57
37854: PUSH
37855: LD_INT 58
37857: PUSH
37858: LD_INT 59
37860: PUSH
37861: LD_INT 60
37863: PUSH
37864: LD_INT 61
37866: PUSH
37867: LD_INT 62
37869: PUSH
37870: LD_INT 80
37872: PUSH
37873: LD_INT 82
37875: PUSH
37876: LD_INT 83
37878: PUSH
37879: LD_INT 84
37881: PUSH
37882: LD_INT 85
37884: PUSH
37885: LD_INT 86
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
37941: GO 38408
37943: LD_INT 2
37945: DOUBLE
37946: EQUAL
37947: IFTRUE 37951
37949: GO 38177
37951: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37952: LD_ADDR_VAR 0 4
37956: PUSH
37957: LD_INT 35
37959: PUSH
37960: LD_INT 45
37962: PUSH
37963: LD_INT 46
37965: PUSH
37966: LD_INT 47
37968: PUSH
37969: LD_INT 82
37971: PUSH
37972: LD_INT 83
37974: PUSH
37975: LD_INT 84
37977: PUSH
37978: LD_INT 85
37980: PUSH
37981: LD_INT 87
37983: PUSH
37984: LD_INT 70
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 11
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: LD_INT 4
37998: PUSH
37999: LD_INT 5
38001: PUSH
38002: LD_INT 6
38004: PUSH
38005: LD_INT 15
38007: PUSH
38008: LD_INT 18
38010: PUSH
38011: LD_INT 7
38013: PUSH
38014: LD_INT 17
38016: PUSH
38017: LD_INT 8
38019: PUSH
38020: LD_INT 20
38022: PUSH
38023: LD_INT 21
38025: PUSH
38026: LD_INT 22
38028: PUSH
38029: LD_INT 72
38031: PUSH
38032: LD_INT 26
38034: PUSH
38035: LD_INT 69
38037: PUSH
38038: LD_INT 39
38040: PUSH
38041: LD_INT 40
38043: PUSH
38044: LD_INT 41
38046: PUSH
38047: LD_INT 42
38049: PUSH
38050: LD_INT 43
38052: PUSH
38053: LD_INT 48
38055: PUSH
38056: LD_INT 49
38058: PUSH
38059: LD_INT 50
38061: PUSH
38062: LD_INT 51
38064: PUSH
38065: LD_INT 52
38067: PUSH
38068: LD_INT 53
38070: PUSH
38071: LD_INT 54
38073: PUSH
38074: LD_INT 55
38076: PUSH
38077: LD_INT 56
38079: PUSH
38080: LD_INT 60
38082: PUSH
38083: LD_INT 61
38085: PUSH
38086: LD_INT 62
38088: PUSH
38089: LD_INT 66
38091: PUSH
38092: LD_INT 67
38094: PUSH
38095: LD_INT 68
38097: PUSH
38098: LD_INT 81
38100: PUSH
38101: LD_INT 82
38103: PUSH
38104: LD_INT 83
38106: PUSH
38107: LD_INT 84
38109: PUSH
38110: LD_INT 85
38112: PUSH
38113: LD_INT 87
38115: PUSH
38116: LD_INT 88
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: ST_TO_ADDR
38175: GO 38408
38177: LD_INT 3
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38407
38185: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38186: LD_ADDR_VAR 0 4
38190: PUSH
38191: LD_INT 46
38193: PUSH
38194: LD_INT 47
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 82
38205: PUSH
38206: LD_INT 83
38208: PUSH
38209: LD_INT 84
38211: PUSH
38212: LD_INT 85
38214: PUSH
38215: LD_INT 86
38217: PUSH
38218: LD_INT 11
38220: PUSH
38221: LD_INT 9
38223: PUSH
38224: LD_INT 20
38226: PUSH
38227: LD_INT 19
38229: PUSH
38230: LD_INT 21
38232: PUSH
38233: LD_INT 24
38235: PUSH
38236: LD_INT 22
38238: PUSH
38239: LD_INT 25
38241: PUSH
38242: LD_INT 28
38244: PUSH
38245: LD_INT 29
38247: PUSH
38248: LD_INT 30
38250: PUSH
38251: LD_INT 31
38253: PUSH
38254: LD_INT 37
38256: PUSH
38257: LD_INT 38
38259: PUSH
38260: LD_INT 32
38262: PUSH
38263: LD_INT 27
38265: PUSH
38266: LD_INT 33
38268: PUSH
38269: LD_INT 69
38271: PUSH
38272: LD_INT 39
38274: PUSH
38275: LD_INT 34
38277: PUSH
38278: LD_INT 40
38280: PUSH
38281: LD_INT 71
38283: PUSH
38284: LD_INT 23
38286: PUSH
38287: LD_INT 44
38289: PUSH
38290: LD_INT 48
38292: PUSH
38293: LD_INT 49
38295: PUSH
38296: LD_INT 50
38298: PUSH
38299: LD_INT 51
38301: PUSH
38302: LD_INT 52
38304: PUSH
38305: LD_INT 53
38307: PUSH
38308: LD_INT 54
38310: PUSH
38311: LD_INT 55
38313: PUSH
38314: LD_INT 56
38316: PUSH
38317: LD_INT 57
38319: PUSH
38320: LD_INT 58
38322: PUSH
38323: LD_INT 59
38325: PUSH
38326: LD_INT 63
38328: PUSH
38329: LD_INT 64
38331: PUSH
38332: LD_INT 65
38334: PUSH
38335: LD_INT 82
38337: PUSH
38338: LD_INT 83
38340: PUSH
38341: LD_INT 84
38343: PUSH
38344: LD_INT 85
38346: PUSH
38347: LD_INT 86
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: ST_TO_ADDR
38405: GO 38408
38407: POP
// if state > - 1 and state < 3 then
38408: LD_VAR 0 3
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: GREATER
38417: PUSH
38418: LD_VAR 0 3
38422: PUSH
38423: LD_INT 3
38425: LESS
38426: AND
38427: IFFALSE 38484
// for i in result do
38429: LD_ADDR_VAR 0 5
38433: PUSH
38434: LD_VAR 0 4
38438: PUSH
38439: FOR_IN
38440: IFFALSE 38482
// if GetTech ( i , side ) <> state then
38442: LD_VAR 0 5
38446: PPUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 321
38456: PUSH
38457: LD_VAR 0 3
38461: NONEQUAL
38462: IFFALSE 38480
// result := result diff i ;
38464: LD_ADDR_VAR 0 4
38468: PUSH
38469: LD_VAR 0 4
38473: PUSH
38474: LD_VAR 0 5
38478: DIFF
38479: ST_TO_ADDR
38480: GO 38439
38482: POP
38483: POP
// end ;
38484: LD_VAR 0 4
38488: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38489: LD_INT 0
38491: PPUSH
38492: PPUSH
38493: PPUSH
// result := true ;
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: LD_INT 1
38501: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38502: LD_ADDR_VAR 0 5
38506: PUSH
38507: LD_VAR 0 2
38511: PPUSH
38512: CALL_OW 480
38516: ST_TO_ADDR
// if not tmp then
38517: LD_VAR 0 5
38521: NOT
38522: IFFALSE 38526
// exit ;
38524: GO 38575
// for i in tmp do
38526: LD_ADDR_VAR 0 4
38530: PUSH
38531: LD_VAR 0 5
38535: PUSH
38536: FOR_IN
38537: IFFALSE 38573
// if GetTech ( i , side ) <> state_researched then
38539: LD_VAR 0 4
38543: PPUSH
38544: LD_VAR 0 1
38548: PPUSH
38549: CALL_OW 321
38553: PUSH
38554: LD_INT 2
38556: NONEQUAL
38557: IFFALSE 38571
// begin result := false ;
38559: LD_ADDR_VAR 0 3
38563: PUSH
38564: LD_INT 0
38566: ST_TO_ADDR
// exit ;
38567: POP
38568: POP
38569: GO 38575
// end ;
38571: GO 38536
38573: POP
38574: POP
// end ;
38575: LD_VAR 0 3
38579: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38580: LD_INT 0
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38595: LD_VAR 0 1
38599: NOT
38600: PUSH
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 257
38610: PUSH
38611: LD_INT 9
38613: NONEQUAL
38614: OR
38615: IFFALSE 38619
// exit ;
38617: GO 39192
// side := GetSide ( unit ) ;
38619: LD_ADDR_VAR 0 9
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 255
38633: ST_TO_ADDR
// tech_space := tech_spacanom ;
38634: LD_ADDR_VAR 0 12
38638: PUSH
38639: LD_INT 29
38641: ST_TO_ADDR
// tech_time := tech_taurad ;
38642: LD_ADDR_VAR 0 13
38646: PUSH
38647: LD_INT 28
38649: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38650: LD_ADDR_VAR 0 11
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 310
38664: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38665: LD_VAR 0 11
38669: PPUSH
38670: CALL_OW 247
38674: PUSH
38675: LD_INT 2
38677: EQUAL
38678: IFFALSE 38682
// exit ;
38680: GO 39192
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38682: LD_ADDR_VAR 0 8
38686: PUSH
38687: LD_INT 81
38689: PUSH
38690: LD_VAR 0 9
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: LD_INT 21
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PPUSH
38720: CALL_OW 69
38724: ST_TO_ADDR
// if not tmp then
38725: LD_VAR 0 8
38729: NOT
38730: IFFALSE 38734
// exit ;
38732: GO 39192
// if in_unit then
38734: LD_VAR 0 11
38738: IFFALSE 38762
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38740: LD_ADDR_VAR 0 10
38744: PUSH
38745: LD_VAR 0 8
38749: PPUSH
38750: LD_VAR 0 11
38754: PPUSH
38755: CALL_OW 74
38759: ST_TO_ADDR
38760: GO 38782
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38762: LD_ADDR_VAR 0 10
38766: PUSH
38767: LD_VAR 0 8
38771: PPUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 74
38781: ST_TO_ADDR
// if not enemy then
38782: LD_VAR 0 10
38786: NOT
38787: IFFALSE 38791
// exit ;
38789: GO 39192
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38791: LD_VAR 0 11
38795: PUSH
38796: LD_VAR 0 11
38800: PPUSH
38801: LD_VAR 0 10
38805: PPUSH
38806: CALL_OW 296
38810: PUSH
38811: LD_INT 13
38813: GREATER
38814: AND
38815: PUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: LD_VAR 0 10
38825: PPUSH
38826: CALL_OW 296
38830: PUSH
38831: LD_INT 12
38833: GREATER
38834: OR
38835: IFFALSE 38839
// exit ;
38837: GO 39192
// missile := [ 1 ] ;
38839: LD_ADDR_VAR 0 14
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38850: LD_VAR 0 9
38854: PPUSH
38855: LD_VAR 0 12
38859: PPUSH
38860: CALL_OW 325
38864: IFFALSE 38893
// missile := Replace ( missile , missile + 1 , 2 ) ;
38866: LD_ADDR_VAR 0 14
38870: PUSH
38871: LD_VAR 0 14
38875: PPUSH
38876: LD_VAR 0 14
38880: PUSH
38881: LD_INT 1
38883: PLUS
38884: PPUSH
38885: LD_INT 2
38887: PPUSH
38888: CALL_OW 1
38892: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38893: LD_VAR 0 9
38897: PPUSH
38898: LD_VAR 0 13
38902: PPUSH
38903: CALL_OW 325
38907: PUSH
38908: LD_VAR 0 10
38912: PPUSH
38913: CALL_OW 255
38917: PPUSH
38918: LD_VAR 0 13
38922: PPUSH
38923: CALL_OW 325
38927: NOT
38928: AND
38929: IFFALSE 38958
// missile := Replace ( missile , missile + 1 , 3 ) ;
38931: LD_ADDR_VAR 0 14
38935: PUSH
38936: LD_VAR 0 14
38940: PPUSH
38941: LD_VAR 0 14
38945: PUSH
38946: LD_INT 1
38948: PLUS
38949: PPUSH
38950: LD_INT 3
38952: PPUSH
38953: CALL_OW 1
38957: ST_TO_ADDR
// if missile < 2 then
38958: LD_VAR 0 14
38962: PUSH
38963: LD_INT 2
38965: LESS
38966: IFFALSE 38970
// exit ;
38968: GO 39192
// x := GetX ( enemy ) ;
38970: LD_ADDR_VAR 0 4
38974: PUSH
38975: LD_VAR 0 10
38979: PPUSH
38980: CALL_OW 250
38984: ST_TO_ADDR
// y := GetY ( enemy ) ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: LD_VAR 0 10
38994: PPUSH
38995: CALL_OW 251
38999: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39000: LD_ADDR_VAR 0 6
39004: PUSH
39005: LD_VAR 0 4
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PPUSH
39014: LD_INT 1
39016: PPUSH
39017: CALL_OW 12
39021: PLUS
39022: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39023: LD_ADDR_VAR 0 7
39027: PUSH
39028: LD_VAR 0 5
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PPUSH
39037: LD_INT 1
39039: PPUSH
39040: CALL_OW 12
39044: PLUS
39045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39046: LD_VAR 0 6
39050: PPUSH
39051: LD_VAR 0 7
39055: PPUSH
39056: CALL_OW 488
39060: NOT
39061: IFFALSE 39083
// begin _x := x ;
39063: LD_ADDR_VAR 0 6
39067: PUSH
39068: LD_VAR 0 4
39072: ST_TO_ADDR
// _y := y ;
39073: LD_ADDR_VAR 0 7
39077: PUSH
39078: LD_VAR 0 5
39082: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39083: LD_ADDR_VAR 0 3
39087: PUSH
39088: LD_INT 1
39090: PPUSH
39091: LD_VAR 0 14
39095: PPUSH
39096: CALL_OW 12
39100: ST_TO_ADDR
// case i of 1 :
39101: LD_VAR 0 3
39105: PUSH
39106: LD_INT 1
39108: DOUBLE
39109: EQUAL
39110: IFTRUE 39114
39112: GO 39131
39114: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39115: LD_VAR 0 1
39119: PPUSH
39120: LD_VAR 0 10
39124: PPUSH
39125: CALL_OW 115
39129: GO 39192
39131: LD_INT 2
39133: DOUBLE
39134: EQUAL
39135: IFTRUE 39139
39137: GO 39161
39139: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39140: LD_VAR 0 1
39144: PPUSH
39145: LD_VAR 0 6
39149: PPUSH
39150: LD_VAR 0 7
39154: PPUSH
39155: CALL_OW 153
39159: GO 39192
39161: LD_INT 3
39163: DOUBLE
39164: EQUAL
39165: IFTRUE 39169
39167: GO 39191
39169: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39170: LD_VAR 0 1
39174: PPUSH
39175: LD_VAR 0 6
39179: PPUSH
39180: LD_VAR 0 7
39184: PPUSH
39185: CALL_OW 154
39189: GO 39192
39191: POP
// end ;
39192: LD_VAR 0 2
39196: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39197: LD_INT 0
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
// if not unit or not building then
39205: LD_VAR 0 1
39209: NOT
39210: PUSH
39211: LD_VAR 0 2
39215: NOT
39216: OR
39217: IFFALSE 39221
// exit ;
39219: GO 39379
// x := GetX ( building ) ;
39221: LD_ADDR_VAR 0 5
39225: PUSH
39226: LD_VAR 0 2
39230: PPUSH
39231: CALL_OW 250
39235: ST_TO_ADDR
// y := GetY ( building ) ;
39236: LD_ADDR_VAR 0 6
39240: PUSH
39241: LD_VAR 0 2
39245: PPUSH
39246: CALL_OW 251
39250: ST_TO_ADDR
// for i = 0 to 5 do
39251: LD_ADDR_VAR 0 4
39255: PUSH
39256: DOUBLE
39257: LD_INT 0
39259: DEC
39260: ST_TO_ADDR
39261: LD_INT 5
39263: PUSH
39264: FOR_TO
39265: IFFALSE 39377
// begin _x := ShiftX ( x , i , 3 ) ;
39267: LD_ADDR_VAR 0 7
39271: PUSH
39272: LD_VAR 0 5
39276: PPUSH
39277: LD_VAR 0 4
39281: PPUSH
39282: LD_INT 3
39284: PPUSH
39285: CALL_OW 272
39289: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39290: LD_ADDR_VAR 0 8
39294: PUSH
39295: LD_VAR 0 6
39299: PPUSH
39300: LD_VAR 0 4
39304: PPUSH
39305: LD_INT 3
39307: PPUSH
39308: CALL_OW 273
39312: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39313: LD_VAR 0 7
39317: PPUSH
39318: LD_VAR 0 8
39322: PPUSH
39323: CALL_OW 488
39327: NOT
39328: IFFALSE 39332
// continue ;
39330: GO 39264
// if HexInfo ( _x , _y ) = 0 then
39332: LD_VAR 0 7
39336: PPUSH
39337: LD_VAR 0 8
39341: PPUSH
39342: CALL_OW 428
39346: PUSH
39347: LD_INT 0
39349: EQUAL
39350: IFFALSE 39375
// begin ComMoveXY ( unit , _x , _y ) ;
39352: LD_VAR 0 1
39356: PPUSH
39357: LD_VAR 0 7
39361: PPUSH
39362: LD_VAR 0 8
39366: PPUSH
39367: CALL_OW 111
// exit ;
39371: POP
39372: POP
39373: GO 39379
// end ; end ;
39375: GO 39264
39377: POP
39378: POP
// end ;
39379: LD_VAR 0 3
39383: RET
// export function ScanBase ( side , base_area ) ; begin
39384: LD_INT 0
39386: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_VAR 0 2
39396: PPUSH
39397: LD_INT 81
39399: PUSH
39400: LD_VAR 0 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PPUSH
39409: CALL_OW 70
39413: ST_TO_ADDR
// end ;
39414: LD_VAR 0 3
39418: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39419: LD_INT 0
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
// result := false ;
39425: LD_ADDR_VAR 0 2
39429: PUSH
39430: LD_INT 0
39432: ST_TO_ADDR
// side := GetSide ( unit ) ;
39433: LD_ADDR_VAR 0 3
39437: PUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 255
39447: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39448: LD_ADDR_VAR 0 4
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 248
39462: ST_TO_ADDR
// case nat of 1 :
39463: LD_VAR 0 4
39467: PUSH
39468: LD_INT 1
39470: DOUBLE
39471: EQUAL
39472: IFTRUE 39476
39474: GO 39487
39476: POP
// tech := tech_lassight ; 2 :
39477: LD_ADDR_VAR 0 5
39481: PUSH
39482: LD_INT 12
39484: ST_TO_ADDR
39485: GO 39526
39487: LD_INT 2
39489: DOUBLE
39490: EQUAL
39491: IFTRUE 39495
39493: GO 39506
39495: POP
// tech := tech_mortar ; 3 :
39496: LD_ADDR_VAR 0 5
39500: PUSH
39501: LD_INT 41
39503: ST_TO_ADDR
39504: GO 39526
39506: LD_INT 3
39508: DOUBLE
39509: EQUAL
39510: IFTRUE 39514
39512: GO 39525
39514: POP
// tech := tech_bazooka ; end ;
39515: LD_ADDR_VAR 0 5
39519: PUSH
39520: LD_INT 44
39522: ST_TO_ADDR
39523: GO 39526
39525: POP
// if Researched ( side , tech ) then
39526: LD_VAR 0 3
39530: PPUSH
39531: LD_VAR 0 5
39535: PPUSH
39536: CALL_OW 325
39540: IFFALSE 39567
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39542: LD_ADDR_VAR 0 2
39546: PUSH
39547: LD_INT 5
39549: PUSH
39550: LD_INT 8
39552: PUSH
39553: LD_INT 9
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: PUSH
39561: LD_VAR 0 4
39565: ARRAY
39566: ST_TO_ADDR
// end ;
39567: LD_VAR 0 2
39571: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
39576: PPUSH
// if not mines then
39577: LD_VAR 0 2
39581: NOT
39582: IFFALSE 39586
// exit ;
39584: GO 39730
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39586: LD_ADDR_VAR 0 5
39590: PUSH
39591: LD_INT 81
39593: PUSH
39594: LD_VAR 0 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: PUSH
39606: LD_INT 21
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PPUSH
39624: CALL_OW 69
39628: ST_TO_ADDR
// for i in mines do
39629: LD_ADDR_VAR 0 4
39633: PUSH
39634: LD_VAR 0 2
39638: PUSH
39639: FOR_IN
39640: IFFALSE 39728
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39642: LD_VAR 0 4
39646: PUSH
39647: LD_INT 1
39649: ARRAY
39650: PPUSH
39651: LD_VAR 0 4
39655: PUSH
39656: LD_INT 2
39658: ARRAY
39659: PPUSH
39660: CALL_OW 458
39664: NOT
39665: IFFALSE 39669
// continue ;
39667: GO 39639
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39669: LD_VAR 0 4
39673: PUSH
39674: LD_INT 1
39676: ARRAY
39677: PPUSH
39678: LD_VAR 0 4
39682: PUSH
39683: LD_INT 2
39685: ARRAY
39686: PPUSH
39687: CALL_OW 428
39691: PUSH
39692: LD_VAR 0 5
39696: IN
39697: IFFALSE 39726
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39699: LD_VAR 0 4
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: PPUSH
39708: LD_VAR 0 4
39712: PUSH
39713: LD_INT 2
39715: ARRAY
39716: PPUSH
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL_OW 456
// end ;
39726: GO 39639
39728: POP
39729: POP
// end ;
39730: LD_VAR 0 3
39734: RET
// export function Count ( array ) ; var i ; begin
39735: LD_INT 0
39737: PPUSH
39738: PPUSH
// result := 0 ;
39739: LD_ADDR_VAR 0 2
39743: PUSH
39744: LD_INT 0
39746: ST_TO_ADDR
// for i in array do
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_VAR 0 1
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39782
// if i then
39760: LD_VAR 0 3
39764: IFFALSE 39780
// result := result + 1 ;
39766: LD_ADDR_VAR 0 2
39770: PUSH
39771: LD_VAR 0 2
39775: PUSH
39776: LD_INT 1
39778: PLUS
39779: ST_TO_ADDR
39780: GO 39757
39782: POP
39783: POP
// end ;
39784: LD_VAR 0 2
39788: RET
// export function IsEmpty ( building ) ; begin
39789: LD_INT 0
39791: PPUSH
// if not building then
39792: LD_VAR 0 1
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 39844
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39801: LD_ADDR_VAR 0 2
39805: PUSH
39806: LD_VAR 0 1
39810: PUSH
39811: LD_INT 22
39813: PUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 255
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 58
39830: PUSH
39831: EMPTY
39832: LIST
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PPUSH
39838: CALL_OW 69
39842: IN
39843: ST_TO_ADDR
// end ;
39844: LD_VAR 0 2
39848: RET
// export function IsNotFull ( building ) ; var places ; begin
39849: LD_INT 0
39851: PPUSH
39852: PPUSH
// if not building then
39853: LD_VAR 0 1
39857: NOT
39858: IFFALSE 39862
// exit ;
39860: GO 40033
// result := false ;
39862: LD_ADDR_VAR 0 2
39866: PUSH
39867: LD_INT 0
39869: ST_TO_ADDR
// places := 0 ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_INT 0
39877: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 266
39887: PUSH
39888: LD_INT 0
39890: DOUBLE
39891: EQUAL
39892: IFTRUE 39950
39894: LD_INT 1
39896: DOUBLE
39897: EQUAL
39898: IFTRUE 39950
39900: LD_INT 6
39902: DOUBLE
39903: EQUAL
39904: IFTRUE 39950
39906: LD_INT 7
39908: DOUBLE
39909: EQUAL
39910: IFTRUE 39950
39912: LD_INT 8
39914: DOUBLE
39915: EQUAL
39916: IFTRUE 39950
39918: LD_INT 4
39920: DOUBLE
39921: EQUAL
39922: IFTRUE 39950
39924: LD_INT 5
39926: DOUBLE
39927: EQUAL
39928: IFTRUE 39950
39930: LD_INT 2
39932: DOUBLE
39933: EQUAL
39934: IFTRUE 39950
39936: LD_INT 3
39938: DOUBLE
39939: EQUAL
39940: IFTRUE 39950
39942: LD_INT 35
39944: DOUBLE
39945: EQUAL
39946: IFTRUE 39950
39948: GO 39961
39950: POP
// places := 6 ; b_bunker , b_breastwork :
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: LD_INT 6
39958: ST_TO_ADDR
39959: GO 40006
39961: LD_INT 32
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39975
39967: LD_INT 31
39969: DOUBLE
39970: EQUAL
39971: IFTRUE 39975
39973: GO 39986
39975: POP
// places := 1 ; b_control_tower :
39976: LD_ADDR_VAR 0 3
39980: PUSH
39981: LD_INT 1
39983: ST_TO_ADDR
39984: GO 40006
39986: LD_INT 36
39988: DOUBLE
39989: EQUAL
39990: IFTRUE 39994
39992: GO 40005
39994: POP
// places := 3 ; end ;
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_INT 3
40002: ST_TO_ADDR
40003: GO 40006
40005: POP
// if places then
40006: LD_VAR 0 3
40010: IFFALSE 40033
// result := UnitsInside ( building ) < places ;
40012: LD_ADDR_VAR 0 2
40016: PUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 313
40026: PUSH
40027: LD_VAR 0 3
40031: LESS
40032: ST_TO_ADDR
// end ;
40033: LD_VAR 0 2
40037: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
// tmp := [ ] ;
40044: LD_ADDR_VAR 0 3
40048: PUSH
40049: EMPTY
40050: ST_TO_ADDR
// list := [ ] ;
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: EMPTY
40057: ST_TO_ADDR
// for i = 16 to 25 do
40058: LD_ADDR_VAR 0 4
40062: PUSH
40063: DOUBLE
40064: LD_INT 16
40066: DEC
40067: ST_TO_ADDR
40068: LD_INT 25
40070: PUSH
40071: FOR_TO
40072: IFFALSE 40145
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_VAR 0 3
40083: PUSH
40084: LD_INT 22
40086: PUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 255
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 91
40103: PUSH
40104: LD_VAR 0 1
40108: PUSH
40109: LD_INT 6
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 30
40119: PUSH
40120: LD_VAR 0 4
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: PPUSH
40137: CALL_OW 69
40141: ADD
40142: ST_TO_ADDR
40143: GO 40071
40145: POP
40146: POP
// for i = 1 to tmp do
40147: LD_ADDR_VAR 0 4
40151: PUSH
40152: DOUBLE
40153: LD_INT 1
40155: DEC
40156: ST_TO_ADDR
40157: LD_VAR 0 3
40161: PUSH
40162: FOR_TO
40163: IFFALSE 40251
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40165: LD_ADDR_VAR 0 5
40169: PUSH
40170: LD_VAR 0 5
40174: PUSH
40175: LD_VAR 0 3
40179: PUSH
40180: LD_VAR 0 4
40184: ARRAY
40185: PPUSH
40186: CALL_OW 266
40190: PUSH
40191: LD_VAR 0 3
40195: PUSH
40196: LD_VAR 0 4
40200: ARRAY
40201: PPUSH
40202: CALL_OW 250
40206: PUSH
40207: LD_VAR 0 3
40211: PUSH
40212: LD_VAR 0 4
40216: ARRAY
40217: PPUSH
40218: CALL_OW 251
40222: PUSH
40223: LD_VAR 0 3
40227: PUSH
40228: LD_VAR 0 4
40232: ARRAY
40233: PPUSH
40234: CALL_OW 254
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: ADD
40248: ST_TO_ADDR
40249: GO 40162
40251: POP
40252: POP
// result := list ;
40253: LD_ADDR_VAR 0 2
40257: PUSH
40258: LD_VAR 0 5
40262: ST_TO_ADDR
// end ;
40263: LD_VAR 0 2
40267: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40268: LD_INT 0
40270: PPUSH
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
// if not factory then
40277: LD_VAR 0 1
40281: NOT
40282: IFFALSE 40286
// exit ;
40284: GO 40879
// if control = control_apeman then
40286: LD_VAR 0 4
40290: PUSH
40291: LD_INT 5
40293: EQUAL
40294: IFFALSE 40403
// begin tmp := UnitsInside ( factory ) ;
40296: LD_ADDR_VAR 0 8
40300: PUSH
40301: LD_VAR 0 1
40305: PPUSH
40306: CALL_OW 313
40310: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40311: LD_VAR 0 8
40315: PPUSH
40316: LD_INT 25
40318: PUSH
40319: LD_INT 12
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PPUSH
40326: CALL_OW 72
40330: NOT
40331: IFFALSE 40341
// control := control_manual ;
40333: LD_ADDR_VAR 0 4
40337: PUSH
40338: LD_INT 1
40340: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40341: LD_ADDR_VAR 0 8
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL 40038 0 1
40355: ST_TO_ADDR
// if tmp then
40356: LD_VAR 0 8
40360: IFFALSE 40403
// begin for i in tmp do
40362: LD_ADDR_VAR 0 7
40366: PUSH
40367: LD_VAR 0 8
40371: PUSH
40372: FOR_IN
40373: IFFALSE 40401
// if i [ 1 ] = b_ext_radio then
40375: LD_VAR 0 7
40379: PUSH
40380: LD_INT 1
40382: ARRAY
40383: PUSH
40384: LD_INT 22
40386: EQUAL
40387: IFFALSE 40399
// begin control := control_remote ;
40389: LD_ADDR_VAR 0 4
40393: PUSH
40394: LD_INT 2
40396: ST_TO_ADDR
// break ;
40397: GO 40401
// end ;
40399: GO 40372
40401: POP
40402: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 2
40412: PPUSH
40413: LD_VAR 0 3
40417: PPUSH
40418: LD_VAR 0 4
40422: PPUSH
40423: LD_VAR 0 5
40427: PPUSH
40428: CALL_OW 448
40432: IFFALSE 40467
// begin result := [ chassis , engine , control , weapon ] ;
40434: LD_ADDR_VAR 0 6
40438: PUSH
40439: LD_VAR 0 2
40443: PUSH
40444: LD_VAR 0 3
40448: PUSH
40449: LD_VAR 0 4
40453: PUSH
40454: LD_VAR 0 5
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
// exit ;
40465: GO 40879
// end ; _chassis := AvailableChassisList ( factory ) ;
40467: LD_ADDR_VAR 0 9
40471: PUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: CALL_OW 475
40481: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40482: LD_ADDR_VAR 0 11
40486: PUSH
40487: LD_VAR 0 1
40491: PPUSH
40492: CALL_OW 476
40496: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40497: LD_ADDR_VAR 0 12
40501: PUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: CALL_OW 477
40511: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40512: LD_ADDR_VAR 0 10
40516: PUSH
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 478
40526: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40527: LD_VAR 0 9
40531: NOT
40532: PUSH
40533: LD_VAR 0 11
40537: NOT
40538: OR
40539: PUSH
40540: LD_VAR 0 12
40544: NOT
40545: OR
40546: PUSH
40547: LD_VAR 0 10
40551: NOT
40552: OR
40553: IFFALSE 40588
// begin result := [ chassis , engine , control , weapon ] ;
40555: LD_ADDR_VAR 0 6
40559: PUSH
40560: LD_VAR 0 2
40564: PUSH
40565: LD_VAR 0 3
40569: PUSH
40570: LD_VAR 0 4
40574: PUSH
40575: LD_VAR 0 5
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// exit ;
40586: GO 40879
// end ; if not chassis in _chassis then
40588: LD_VAR 0 2
40592: PUSH
40593: LD_VAR 0 9
40597: IN
40598: NOT
40599: IFFALSE 40625
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40601: LD_ADDR_VAR 0 2
40605: PUSH
40606: LD_VAR 0 9
40610: PUSH
40611: LD_INT 1
40613: PPUSH
40614: LD_VAR 0 9
40618: PPUSH
40619: CALL_OW 12
40623: ARRAY
40624: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40625: LD_VAR 0 2
40629: PPUSH
40630: LD_VAR 0 3
40634: PPUSH
40635: CALL 40884 0 2
40639: NOT
40640: IFFALSE 40699
// repeat engine := _engine [ 1 ] ;
40642: LD_ADDR_VAR 0 3
40646: PUSH
40647: LD_VAR 0 11
40651: PUSH
40652: LD_INT 1
40654: ARRAY
40655: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40656: LD_ADDR_VAR 0 11
40660: PUSH
40661: LD_VAR 0 11
40665: PPUSH
40666: LD_INT 1
40668: PPUSH
40669: CALL_OW 3
40673: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40674: LD_VAR 0 2
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: CALL 40884 0 2
40688: PUSH
40689: LD_VAR 0 11
40693: PUSH
40694: EMPTY
40695: EQUAL
40696: OR
40697: IFFALSE 40642
// if not control in _control then
40699: LD_VAR 0 4
40703: PUSH
40704: LD_VAR 0 12
40708: IN
40709: NOT
40710: IFFALSE 40736
// control := _control [ rand ( 1 , _control ) ] ;
40712: LD_ADDR_VAR 0 4
40716: PUSH
40717: LD_VAR 0 12
40721: PUSH
40722: LD_INT 1
40724: PPUSH
40725: LD_VAR 0 12
40729: PPUSH
40730: CALL_OW 12
40734: ARRAY
40735: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40736: LD_VAR 0 2
40740: PPUSH
40741: LD_VAR 0 5
40745: PPUSH
40746: CALL 41104 0 2
40750: NOT
40751: IFFALSE 40810
// repeat weapon := _weapon [ 1 ] ;
40753: LD_ADDR_VAR 0 5
40757: PUSH
40758: LD_VAR 0 10
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40767: LD_ADDR_VAR 0 10
40771: PUSH
40772: LD_VAR 0 10
40776: PPUSH
40777: LD_INT 1
40779: PPUSH
40780: CALL_OW 3
40784: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40785: LD_VAR 0 2
40789: PPUSH
40790: LD_VAR 0 5
40794: PPUSH
40795: CALL 41104 0 2
40799: PUSH
40800: LD_VAR 0 10
40804: PUSH
40805: EMPTY
40806: EQUAL
40807: OR
40808: IFFALSE 40753
// result := [ ] ;
40810: LD_ADDR_VAR 0 6
40814: PUSH
40815: EMPTY
40816: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40817: LD_VAR 0 1
40821: PPUSH
40822: LD_VAR 0 2
40826: PPUSH
40827: LD_VAR 0 3
40831: PPUSH
40832: LD_VAR 0 4
40836: PPUSH
40837: LD_VAR 0 5
40841: PPUSH
40842: CALL_OW 448
40846: IFFALSE 40879
// result := [ chassis , engine , control , weapon ] ;
40848: LD_ADDR_VAR 0 6
40852: PUSH
40853: LD_VAR 0 2
40857: PUSH
40858: LD_VAR 0 3
40862: PUSH
40863: LD_VAR 0 4
40867: PUSH
40868: LD_VAR 0 5
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// end ;
40879: LD_VAR 0 6
40883: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40884: LD_INT 0
40886: PPUSH
// if not chassis or not engine then
40887: LD_VAR 0 1
40891: NOT
40892: PUSH
40893: LD_VAR 0 2
40897: NOT
40898: OR
40899: IFFALSE 40903
// exit ;
40901: GO 41099
// case engine of engine_solar :
40903: LD_VAR 0 2
40907: PUSH
40908: LD_INT 2
40910: DOUBLE
40911: EQUAL
40912: IFTRUE 40916
40914: GO 40954
40916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40917: LD_ADDR_VAR 0 3
40921: PUSH
40922: LD_INT 11
40924: PUSH
40925: LD_INT 12
40927: PUSH
40928: LD_INT 13
40930: PUSH
40931: LD_INT 14
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 3
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: ST_TO_ADDR
40952: GO 41083
40954: LD_INT 1
40956: DOUBLE
40957: EQUAL
40958: IFTRUE 40962
40960: GO 41024
40962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40963: LD_ADDR_VAR 0 3
40967: PUSH
40968: LD_INT 11
40970: PUSH
40971: LD_INT 12
40973: PUSH
40974: LD_INT 13
40976: PUSH
40977: LD_INT 14
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: LD_INT 4
40991: PUSH
40992: LD_INT 5
40994: PUSH
40995: LD_INT 21
40997: PUSH
40998: LD_INT 23
41000: PUSH
41001: LD_INT 22
41003: PUSH
41004: LD_INT 24
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: ST_TO_ADDR
41022: GO 41083
41024: LD_INT 3
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41082
41032: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_INT 13
41040: PUSH
41041: LD_INT 14
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: LD_INT 21
41058: PUSH
41059: LD_INT 22
41061: PUSH
41062: LD_INT 23
41064: PUSH
41065: LD_INT 24
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: ST_TO_ADDR
41080: GO 41083
41082: POP
// result := ( chassis in result ) ;
41083: LD_ADDR_VAR 0 3
41087: PUSH
41088: LD_VAR 0 1
41092: PUSH
41093: LD_VAR 0 3
41097: IN
41098: ST_TO_ADDR
// end ;
41099: LD_VAR 0 3
41103: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41104: LD_INT 0
41106: PPUSH
// if not chassis or not weapon then
41107: LD_VAR 0 1
41111: NOT
41112: PUSH
41113: LD_VAR 0 2
41117: NOT
41118: OR
41119: IFFALSE 41123
// exit ;
41121: GO 42183
// case weapon of us_machine_gun :
41123: LD_VAR 0 2
41127: PUSH
41128: LD_INT 2
41130: DOUBLE
41131: EQUAL
41132: IFTRUE 41136
41134: GO 41166
41136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41137: LD_ADDR_VAR 0 3
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: LD_INT 5
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: ST_TO_ADDR
41164: GO 42167
41166: LD_INT 3
41168: DOUBLE
41169: EQUAL
41170: IFTRUE 41174
41172: GO 41204
41174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: LD_INT 3
41188: PUSH
41189: LD_INT 4
41191: PUSH
41192: LD_INT 5
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: ST_TO_ADDR
41202: GO 42167
41204: LD_INT 11
41206: DOUBLE
41207: EQUAL
41208: IFTRUE 41212
41210: GO 41242
41212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41213: LD_ADDR_VAR 0 3
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 3
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: LD_INT 5
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: ST_TO_ADDR
41240: GO 42167
41242: LD_INT 4
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41276
41250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: LD_INT 4
41264: PUSH
41265: LD_INT 5
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: ST_TO_ADDR
41274: GO 42167
41276: LD_INT 5
41278: DOUBLE
41279: EQUAL
41280: IFTRUE 41284
41282: GO 41310
41284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 3
41295: PUSH
41296: LD_INT 4
41298: PUSH
41299: LD_INT 5
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
41308: GO 42167
41310: LD_INT 9
41312: DOUBLE
41313: EQUAL
41314: IFTRUE 41318
41316: GO 41344
41318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41319: LD_ADDR_VAR 0 3
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: LD_INT 3
41329: PUSH
41330: LD_INT 4
41332: PUSH
41333: LD_INT 5
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: ST_TO_ADDR
41342: GO 42167
41344: LD_INT 7
41346: DOUBLE
41347: EQUAL
41348: IFTRUE 41352
41350: GO 41378
41352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: LD_INT 4
41366: PUSH
41367: LD_INT 5
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: ST_TO_ADDR
41376: GO 42167
41378: LD_INT 12
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41386
41384: GO 41412
41386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: LD_INT 4
41400: PUSH
41401: LD_INT 5
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
41410: GO 42167
41412: LD_INT 13
41414: DOUBLE
41415: EQUAL
41416: IFTRUE 41420
41418: GO 41446
41420: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41421: LD_ADDR_VAR 0 3
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 4
41434: PUSH
41435: LD_INT 5
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: ST_TO_ADDR
41444: GO 42167
41446: LD_INT 14
41448: DOUBLE
41449: EQUAL
41450: IFTRUE 41454
41452: GO 41472
41454: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41455: LD_ADDR_VAR 0 3
41459: PUSH
41460: LD_INT 4
41462: PUSH
41463: LD_INT 5
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: ST_TO_ADDR
41470: GO 42167
41472: LD_INT 6
41474: DOUBLE
41475: EQUAL
41476: IFTRUE 41480
41478: GO 41498
41480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41481: LD_ADDR_VAR 0 3
41485: PUSH
41486: LD_INT 4
41488: PUSH
41489: LD_INT 5
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: ST_TO_ADDR
41496: GO 42167
41498: LD_INT 10
41500: DOUBLE
41501: EQUAL
41502: IFTRUE 41506
41504: GO 41524
41506: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41507: LD_ADDR_VAR 0 3
41511: PUSH
41512: LD_INT 4
41514: PUSH
41515: LD_INT 5
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: ST_TO_ADDR
41522: GO 42167
41524: LD_INT 22
41526: DOUBLE
41527: EQUAL
41528: IFTRUE 41532
41530: GO 41558
41532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41533: LD_ADDR_VAR 0 3
41537: PUSH
41538: LD_INT 11
41540: PUSH
41541: LD_INT 12
41543: PUSH
41544: LD_INT 13
41546: PUSH
41547: LD_INT 14
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
41556: GO 42167
41558: LD_INT 23
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 41592
41566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41567: LD_ADDR_VAR 0 3
41571: PUSH
41572: LD_INT 11
41574: PUSH
41575: LD_INT 12
41577: PUSH
41578: LD_INT 13
41580: PUSH
41581: LD_INT 14
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: ST_TO_ADDR
41590: GO 42167
41592: LD_INT 24
41594: DOUBLE
41595: EQUAL
41596: IFTRUE 41600
41598: GO 41626
41600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_INT 11
41608: PUSH
41609: LD_INT 12
41611: PUSH
41612: LD_INT 13
41614: PUSH
41615: LD_INT 14
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: ST_TO_ADDR
41624: GO 42167
41626: LD_INT 30
41628: DOUBLE
41629: EQUAL
41630: IFTRUE 41634
41632: GO 41660
41634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_INT 11
41642: PUSH
41643: LD_INT 12
41645: PUSH
41646: LD_INT 13
41648: PUSH
41649: LD_INT 14
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: ST_TO_ADDR
41658: GO 42167
41660: LD_INT 25
41662: DOUBLE
41663: EQUAL
41664: IFTRUE 41668
41666: GO 41686
41668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41669: LD_ADDR_VAR 0 3
41673: PUSH
41674: LD_INT 13
41676: PUSH
41677: LD_INT 14
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: ST_TO_ADDR
41684: GO 42167
41686: LD_INT 27
41688: DOUBLE
41689: EQUAL
41690: IFTRUE 41694
41692: GO 41712
41694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: LD_INT 13
41702: PUSH
41703: LD_INT 14
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: ST_TO_ADDR
41710: GO 42167
41712: LD_INT 92
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41720
41718: GO 41746
41720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 11
41728: PUSH
41729: LD_INT 12
41731: PUSH
41732: LD_INT 13
41734: PUSH
41735: LD_INT 14
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
41744: GO 42167
41746: LD_INT 28
41748: DOUBLE
41749: EQUAL
41750: IFTRUE 41754
41752: GO 41772
41754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_INT 13
41762: PUSH
41763: LD_INT 14
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: ST_TO_ADDR
41770: GO 42167
41772: LD_INT 29
41774: DOUBLE
41775: EQUAL
41776: IFTRUE 41780
41778: GO 41798
41780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41781: LD_ADDR_VAR 0 3
41785: PUSH
41786: LD_INT 13
41788: PUSH
41789: LD_INT 14
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: ST_TO_ADDR
41796: GO 42167
41798: LD_INT 31
41800: DOUBLE
41801: EQUAL
41802: IFTRUE 41806
41804: GO 41824
41806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41807: LD_ADDR_VAR 0 3
41811: PUSH
41812: LD_INT 13
41814: PUSH
41815: LD_INT 14
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: ST_TO_ADDR
41822: GO 42167
41824: LD_INT 26
41826: DOUBLE
41827: EQUAL
41828: IFTRUE 41832
41830: GO 41850
41832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41833: LD_ADDR_VAR 0 3
41837: PUSH
41838: LD_INT 13
41840: PUSH
41841: LD_INT 14
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: ST_TO_ADDR
41848: GO 42167
41850: LD_INT 42
41852: DOUBLE
41853: EQUAL
41854: IFTRUE 41858
41856: GO 41884
41858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41859: LD_ADDR_VAR 0 3
41863: PUSH
41864: LD_INT 21
41866: PUSH
41867: LD_INT 22
41869: PUSH
41870: LD_INT 23
41872: PUSH
41873: LD_INT 24
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: ST_TO_ADDR
41882: GO 42167
41884: LD_INT 43
41886: DOUBLE
41887: EQUAL
41888: IFTRUE 41892
41890: GO 41918
41892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41893: LD_ADDR_VAR 0 3
41897: PUSH
41898: LD_INT 21
41900: PUSH
41901: LD_INT 22
41903: PUSH
41904: LD_INT 23
41906: PUSH
41907: LD_INT 24
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
41916: GO 42167
41918: LD_INT 44
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41926
41924: GO 41952
41926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41927: LD_ADDR_VAR 0 3
41931: PUSH
41932: LD_INT 21
41934: PUSH
41935: LD_INT 22
41937: PUSH
41938: LD_INT 23
41940: PUSH
41941: LD_INT 24
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
41950: GO 42167
41952: LD_INT 45
41954: DOUBLE
41955: EQUAL
41956: IFTRUE 41960
41958: GO 41986
41960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41961: LD_ADDR_VAR 0 3
41965: PUSH
41966: LD_INT 21
41968: PUSH
41969: LD_INT 22
41971: PUSH
41972: LD_INT 23
41974: PUSH
41975: LD_INT 24
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
41984: GO 42167
41986: LD_INT 49
41988: DOUBLE
41989: EQUAL
41990: IFTRUE 41994
41992: GO 42020
41994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_INT 21
42002: PUSH
42003: LD_INT 22
42005: PUSH
42006: LD_INT 23
42008: PUSH
42009: LD_INT 24
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
42018: GO 42167
42020: LD_INT 51
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42054
42028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_INT 21
42036: PUSH
42037: LD_INT 22
42039: PUSH
42040: LD_INT 23
42042: PUSH
42043: LD_INT 24
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: ST_TO_ADDR
42052: GO 42167
42054: LD_INT 52
42056: DOUBLE
42057: EQUAL
42058: IFTRUE 42062
42060: GO 42088
42062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42063: LD_ADDR_VAR 0 3
42067: PUSH
42068: LD_INT 21
42070: PUSH
42071: LD_INT 22
42073: PUSH
42074: LD_INT 23
42076: PUSH
42077: LD_INT 24
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: ST_TO_ADDR
42086: GO 42167
42088: LD_INT 53
42090: DOUBLE
42091: EQUAL
42092: IFTRUE 42096
42094: GO 42114
42096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42097: LD_ADDR_VAR 0 3
42101: PUSH
42102: LD_INT 23
42104: PUSH
42105: LD_INT 24
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: ST_TO_ADDR
42112: GO 42167
42114: LD_INT 46
42116: DOUBLE
42117: EQUAL
42118: IFTRUE 42122
42120: GO 42140
42122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: LD_INT 23
42130: PUSH
42131: LD_INT 24
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: ST_TO_ADDR
42138: GO 42167
42140: LD_INT 47
42142: DOUBLE
42143: EQUAL
42144: IFTRUE 42148
42146: GO 42166
42148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: LD_INT 23
42156: PUSH
42157: LD_INT 24
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: ST_TO_ADDR
42164: GO 42167
42166: POP
// result := ( chassis in result ) ;
42167: LD_ADDR_VAR 0 3
42171: PUSH
42172: LD_VAR 0 1
42176: PUSH
42177: LD_VAR 0 3
42181: IN
42182: ST_TO_ADDR
// end ;
42183: LD_VAR 0 3
42187: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42188: LD_INT 0
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
// result := array ;
42197: LD_ADDR_VAR 0 5
42201: PUSH
42202: LD_VAR 0 1
42206: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42207: LD_VAR 0 1
42211: NOT
42212: PUSH
42213: LD_VAR 0 2
42217: NOT
42218: OR
42219: PUSH
42220: LD_VAR 0 3
42224: NOT
42225: OR
42226: PUSH
42227: LD_VAR 0 2
42231: PUSH
42232: LD_VAR 0 1
42236: GREATER
42237: OR
42238: PUSH
42239: LD_VAR 0 3
42243: PUSH
42244: LD_VAR 0 1
42248: GREATER
42249: OR
42250: IFFALSE 42254
// exit ;
42252: GO 42550
// if direction then
42254: LD_VAR 0 4
42258: IFFALSE 42322
// begin d := 1 ;
42260: LD_ADDR_VAR 0 9
42264: PUSH
42265: LD_INT 1
42267: ST_TO_ADDR
// if i_from > i_to then
42268: LD_VAR 0 2
42272: PUSH
42273: LD_VAR 0 3
42277: GREATER
42278: IFFALSE 42304
// length := ( array - i_from ) + i_to else
42280: LD_ADDR_VAR 0 11
42284: PUSH
42285: LD_VAR 0 1
42289: PUSH
42290: LD_VAR 0 2
42294: MINUS
42295: PUSH
42296: LD_VAR 0 3
42300: PLUS
42301: ST_TO_ADDR
42302: GO 42320
// length := i_to - i_from ;
42304: LD_ADDR_VAR 0 11
42308: PUSH
42309: LD_VAR 0 3
42313: PUSH
42314: LD_VAR 0 2
42318: MINUS
42319: ST_TO_ADDR
// end else
42320: GO 42383
// begin d := - 1 ;
42322: LD_ADDR_VAR 0 9
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: ST_TO_ADDR
// if i_from > i_to then
42331: LD_VAR 0 2
42335: PUSH
42336: LD_VAR 0 3
42340: GREATER
42341: IFFALSE 42361
// length := i_from - i_to else
42343: LD_ADDR_VAR 0 11
42347: PUSH
42348: LD_VAR 0 2
42352: PUSH
42353: LD_VAR 0 3
42357: MINUS
42358: ST_TO_ADDR
42359: GO 42383
// length := ( array - i_to ) + i_from ;
42361: LD_ADDR_VAR 0 11
42365: PUSH
42366: LD_VAR 0 1
42370: PUSH
42371: LD_VAR 0 3
42375: MINUS
42376: PUSH
42377: LD_VAR 0 2
42381: PLUS
42382: ST_TO_ADDR
// end ; if not length then
42383: LD_VAR 0 11
42387: NOT
42388: IFFALSE 42392
// exit ;
42390: GO 42550
// tmp := array ;
42392: LD_ADDR_VAR 0 10
42396: PUSH
42397: LD_VAR 0 1
42401: ST_TO_ADDR
// for i = 1 to length do
42402: LD_ADDR_VAR 0 6
42406: PUSH
42407: DOUBLE
42408: LD_INT 1
42410: DEC
42411: ST_TO_ADDR
42412: LD_VAR 0 11
42416: PUSH
42417: FOR_TO
42418: IFFALSE 42538
// begin for j = 1 to array do
42420: LD_ADDR_VAR 0 7
42424: PUSH
42425: DOUBLE
42426: LD_INT 1
42428: DEC
42429: ST_TO_ADDR
42430: LD_VAR 0 1
42434: PUSH
42435: FOR_TO
42436: IFFALSE 42524
// begin k := j + d ;
42438: LD_ADDR_VAR 0 8
42442: PUSH
42443: LD_VAR 0 7
42447: PUSH
42448: LD_VAR 0 9
42452: PLUS
42453: ST_TO_ADDR
// if k > array then
42454: LD_VAR 0 8
42458: PUSH
42459: LD_VAR 0 1
42463: GREATER
42464: IFFALSE 42474
// k := 1 ;
42466: LD_ADDR_VAR 0 8
42470: PUSH
42471: LD_INT 1
42473: ST_TO_ADDR
// if not k then
42474: LD_VAR 0 8
42478: NOT
42479: IFFALSE 42491
// k := array ;
42481: LD_ADDR_VAR 0 8
42485: PUSH
42486: LD_VAR 0 1
42490: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42491: LD_ADDR_VAR 0 10
42495: PUSH
42496: LD_VAR 0 10
42500: PPUSH
42501: LD_VAR 0 8
42505: PPUSH
42506: LD_VAR 0 1
42510: PUSH
42511: LD_VAR 0 7
42515: ARRAY
42516: PPUSH
42517: CALL_OW 1
42521: ST_TO_ADDR
// end ;
42522: GO 42435
42524: POP
42525: POP
// array := tmp ;
42526: LD_ADDR_VAR 0 1
42530: PUSH
42531: LD_VAR 0 10
42535: ST_TO_ADDR
// end ;
42536: GO 42417
42538: POP
42539: POP
// result := array ;
42540: LD_ADDR_VAR 0 5
42544: PUSH
42545: LD_VAR 0 1
42549: ST_TO_ADDR
// end ;
42550: LD_VAR 0 5
42554: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42555: LD_INT 0
42557: PPUSH
42558: PPUSH
// result := 0 ;
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 0
42566: ST_TO_ADDR
// if not array or not value in array then
42567: LD_VAR 0 1
42571: NOT
42572: PUSH
42573: LD_VAR 0 2
42577: PUSH
42578: LD_VAR 0 1
42582: IN
42583: NOT
42584: OR
42585: IFFALSE 42589
// exit ;
42587: GO 42643
// for i = 1 to array do
42589: LD_ADDR_VAR 0 4
42593: PUSH
42594: DOUBLE
42595: LD_INT 1
42597: DEC
42598: ST_TO_ADDR
42599: LD_VAR 0 1
42603: PUSH
42604: FOR_TO
42605: IFFALSE 42641
// if value = array [ i ] then
42607: LD_VAR 0 2
42611: PUSH
42612: LD_VAR 0 1
42616: PUSH
42617: LD_VAR 0 4
42621: ARRAY
42622: EQUAL
42623: IFFALSE 42639
// begin result := i ;
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: LD_VAR 0 4
42634: ST_TO_ADDR
// exit ;
42635: POP
42636: POP
42637: GO 42643
// end ;
42639: GO 42604
42641: POP
42642: POP
// end ;
42643: LD_VAR 0 3
42647: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42648: LD_INT 0
42650: PPUSH
// vc_chassis := chassis ;
42651: LD_ADDR_OWVAR 37
42655: PUSH
42656: LD_VAR 0 1
42660: ST_TO_ADDR
// vc_engine := engine ;
42661: LD_ADDR_OWVAR 39
42665: PUSH
42666: LD_VAR 0 2
42670: ST_TO_ADDR
// vc_control := control ;
42671: LD_ADDR_OWVAR 38
42675: PUSH
42676: LD_VAR 0 3
42680: ST_TO_ADDR
// vc_weapon := weapon ;
42681: LD_ADDR_OWVAR 40
42685: PUSH
42686: LD_VAR 0 4
42690: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42691: LD_ADDR_OWVAR 41
42695: PUSH
42696: LD_VAR 0 5
42700: ST_TO_ADDR
// end ;
42701: LD_VAR 0 6
42705: RET
// export function WantPlant ( unit ) ; var task ; begin
42706: LD_INT 0
42708: PPUSH
42709: PPUSH
// result := false ;
42710: LD_ADDR_VAR 0 2
42714: PUSH
42715: LD_INT 0
42717: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42718: LD_ADDR_VAR 0 3
42722: PUSH
42723: LD_VAR 0 1
42727: PPUSH
42728: CALL_OW 437
42732: ST_TO_ADDR
// if task then
42733: LD_VAR 0 3
42737: IFFALSE 42765
// if task [ 1 ] [ 1 ] = p then
42739: LD_VAR 0 3
42743: PUSH
42744: LD_INT 1
42746: ARRAY
42747: PUSH
42748: LD_INT 1
42750: ARRAY
42751: PUSH
42752: LD_STRING p
42754: EQUAL
42755: IFFALSE 42765
// result := true ;
42757: LD_ADDR_VAR 0 2
42761: PUSH
42762: LD_INT 1
42764: ST_TO_ADDR
// end ;
42765: LD_VAR 0 2
42769: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42770: LD_INT 0
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
// if pos < 1 then
42776: LD_VAR 0 2
42780: PUSH
42781: LD_INT 1
42783: LESS
42784: IFFALSE 42788
// exit ;
42786: GO 43091
// if pos = 1 then
42788: LD_VAR 0 2
42792: PUSH
42793: LD_INT 1
42795: EQUAL
42796: IFFALSE 42829
// result := Replace ( arr , pos [ 1 ] , value ) else
42798: LD_ADDR_VAR 0 4
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: LD_VAR 0 2
42812: PUSH
42813: LD_INT 1
42815: ARRAY
42816: PPUSH
42817: LD_VAR 0 3
42821: PPUSH
42822: CALL_OW 1
42826: ST_TO_ADDR
42827: GO 43091
// begin tmp := arr ;
42829: LD_ADDR_VAR 0 6
42833: PUSH
42834: LD_VAR 0 1
42838: ST_TO_ADDR
// s_arr := [ tmp ] ;
42839: LD_ADDR_VAR 0 7
42843: PUSH
42844: LD_VAR 0 6
42848: PUSH
42849: EMPTY
42850: LIST
42851: ST_TO_ADDR
// for i = 1 to pos - 1 do
42852: LD_ADDR_VAR 0 5
42856: PUSH
42857: DOUBLE
42858: LD_INT 1
42860: DEC
42861: ST_TO_ADDR
42862: LD_VAR 0 2
42866: PUSH
42867: LD_INT 1
42869: MINUS
42870: PUSH
42871: FOR_TO
42872: IFFALSE 42917
// begin tmp := tmp [ pos [ i ] ] ;
42874: LD_ADDR_VAR 0 6
42878: PUSH
42879: LD_VAR 0 6
42883: PUSH
42884: LD_VAR 0 2
42888: PUSH
42889: LD_VAR 0 5
42893: ARRAY
42894: ARRAY
42895: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42896: LD_ADDR_VAR 0 7
42900: PUSH
42901: LD_VAR 0 7
42905: PUSH
42906: LD_VAR 0 6
42910: PUSH
42911: EMPTY
42912: LIST
42913: ADD
42914: ST_TO_ADDR
// end ;
42915: GO 42871
42917: POP
42918: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42919: LD_ADDR_VAR 0 6
42923: PUSH
42924: LD_VAR 0 6
42928: PPUSH
42929: LD_VAR 0 2
42933: PUSH
42934: LD_VAR 0 2
42938: ARRAY
42939: PPUSH
42940: LD_VAR 0 3
42944: PPUSH
42945: CALL_OW 1
42949: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42950: LD_ADDR_VAR 0 7
42954: PUSH
42955: LD_VAR 0 7
42959: PPUSH
42960: LD_VAR 0 7
42964: PPUSH
42965: LD_VAR 0 6
42969: PPUSH
42970: CALL_OW 1
42974: ST_TO_ADDR
// for i = s_arr downto 2 do
42975: LD_ADDR_VAR 0 5
42979: PUSH
42980: DOUBLE
42981: LD_VAR 0 7
42985: INC
42986: ST_TO_ADDR
42987: LD_INT 2
42989: PUSH
42990: FOR_DOWNTO
42991: IFFALSE 43075
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42993: LD_ADDR_VAR 0 6
42997: PUSH
42998: LD_VAR 0 7
43002: PUSH
43003: LD_VAR 0 5
43007: PUSH
43008: LD_INT 1
43010: MINUS
43011: ARRAY
43012: PPUSH
43013: LD_VAR 0 2
43017: PUSH
43018: LD_VAR 0 5
43022: PUSH
43023: LD_INT 1
43025: MINUS
43026: ARRAY
43027: PPUSH
43028: LD_VAR 0 7
43032: PUSH
43033: LD_VAR 0 5
43037: ARRAY
43038: PPUSH
43039: CALL_OW 1
43043: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43044: LD_ADDR_VAR 0 7
43048: PUSH
43049: LD_VAR 0 7
43053: PPUSH
43054: LD_VAR 0 5
43058: PUSH
43059: LD_INT 1
43061: MINUS
43062: PPUSH
43063: LD_VAR 0 6
43067: PPUSH
43068: CALL_OW 1
43072: ST_TO_ADDR
// end ;
43073: GO 42990
43075: POP
43076: POP
// result := s_arr [ 1 ] ;
43077: LD_ADDR_VAR 0 4
43081: PUSH
43082: LD_VAR 0 7
43086: PUSH
43087: LD_INT 1
43089: ARRAY
43090: ST_TO_ADDR
// end ; end ;
43091: LD_VAR 0 4
43095: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43096: LD_INT 0
43098: PPUSH
43099: PPUSH
// if not list then
43100: LD_VAR 0 1
43104: NOT
43105: IFFALSE 43109
// exit ;
43107: GO 43200
// i := list [ pos1 ] ;
43109: LD_ADDR_VAR 0 5
43113: PUSH
43114: LD_VAR 0 1
43118: PUSH
43119: LD_VAR 0 2
43123: ARRAY
43124: ST_TO_ADDR
// if not i then
43125: LD_VAR 0 5
43129: NOT
43130: IFFALSE 43134
// exit ;
43132: GO 43200
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43134: LD_ADDR_VAR 0 1
43138: PUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: LD_VAR 0 2
43148: PPUSH
43149: LD_VAR 0 1
43153: PUSH
43154: LD_VAR 0 3
43158: ARRAY
43159: PPUSH
43160: CALL_OW 1
43164: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43165: LD_ADDR_VAR 0 1
43169: PUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: LD_VAR 0 3
43179: PPUSH
43180: LD_VAR 0 5
43184: PPUSH
43185: CALL_OW 1
43189: ST_TO_ADDR
// result := list ;
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: LD_VAR 0 1
43199: ST_TO_ADDR
// end ;
43200: LD_VAR 0 4
43204: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43205: LD_INT 0
43207: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43208: LD_ADDR_VAR 0 5
43212: PUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 250
43222: PPUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 251
43232: PPUSH
43233: LD_VAR 0 2
43237: PPUSH
43238: LD_VAR 0 3
43242: PPUSH
43243: LD_VAR 0 4
43247: PPUSH
43248: CALL 43258 0 5
43252: ST_TO_ADDR
// end ;
43253: LD_VAR 0 5
43257: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43258: LD_INT 0
43260: PPUSH
43261: PPUSH
43262: PPUSH
43263: PPUSH
// if not list then
43264: LD_VAR 0 3
43268: NOT
43269: IFFALSE 43273
// exit ;
43271: GO 43661
// result := [ ] ;
43273: LD_ADDR_VAR 0 6
43277: PUSH
43278: EMPTY
43279: ST_TO_ADDR
// for i in list do
43280: LD_ADDR_VAR 0 7
43284: PUSH
43285: LD_VAR 0 3
43289: PUSH
43290: FOR_IN
43291: IFFALSE 43493
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43293: LD_ADDR_VAR 0 9
43297: PUSH
43298: LD_VAR 0 7
43302: PPUSH
43303: LD_VAR 0 1
43307: PPUSH
43308: LD_VAR 0 2
43312: PPUSH
43313: CALL_OW 297
43317: ST_TO_ADDR
// if not result then
43318: LD_VAR 0 6
43322: NOT
43323: IFFALSE 43349
// result := [ [ i , tmp ] ] else
43325: LD_ADDR_VAR 0 6
43329: PUSH
43330: LD_VAR 0 7
43334: PUSH
43335: LD_VAR 0 9
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: ST_TO_ADDR
43347: GO 43491
// begin if result [ result ] [ 2 ] < tmp then
43349: LD_VAR 0 6
43353: PUSH
43354: LD_VAR 0 6
43358: ARRAY
43359: PUSH
43360: LD_INT 2
43362: ARRAY
43363: PUSH
43364: LD_VAR 0 9
43368: LESS
43369: IFFALSE 43411
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43371: LD_ADDR_VAR 0 6
43375: PUSH
43376: LD_VAR 0 6
43380: PPUSH
43381: LD_VAR 0 6
43385: PUSH
43386: LD_INT 1
43388: PLUS
43389: PPUSH
43390: LD_VAR 0 7
43394: PUSH
43395: LD_VAR 0 9
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PPUSH
43404: CALL_OW 2
43408: ST_TO_ADDR
43409: GO 43491
// for j = 1 to result do
43411: LD_ADDR_VAR 0 8
43415: PUSH
43416: DOUBLE
43417: LD_INT 1
43419: DEC
43420: ST_TO_ADDR
43421: LD_VAR 0 6
43425: PUSH
43426: FOR_TO
43427: IFFALSE 43489
// begin if tmp < result [ j ] [ 2 ] then
43429: LD_VAR 0 9
43433: PUSH
43434: LD_VAR 0 6
43438: PUSH
43439: LD_VAR 0 8
43443: ARRAY
43444: PUSH
43445: LD_INT 2
43447: ARRAY
43448: LESS
43449: IFFALSE 43487
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43451: LD_ADDR_VAR 0 6
43455: PUSH
43456: LD_VAR 0 6
43460: PPUSH
43461: LD_VAR 0 8
43465: PPUSH
43466: LD_VAR 0 7
43470: PUSH
43471: LD_VAR 0 9
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PPUSH
43480: CALL_OW 2
43484: ST_TO_ADDR
// break ;
43485: GO 43489
// end ; end ;
43487: GO 43426
43489: POP
43490: POP
// end ; end ;
43491: GO 43290
43493: POP
43494: POP
// if result and not asc then
43495: LD_VAR 0 6
43499: PUSH
43500: LD_VAR 0 4
43504: NOT
43505: AND
43506: IFFALSE 43581
// begin tmp := result ;
43508: LD_ADDR_VAR 0 9
43512: PUSH
43513: LD_VAR 0 6
43517: ST_TO_ADDR
// for i = tmp downto 1 do
43518: LD_ADDR_VAR 0 7
43522: PUSH
43523: DOUBLE
43524: LD_VAR 0 9
43528: INC
43529: ST_TO_ADDR
43530: LD_INT 1
43532: PUSH
43533: FOR_DOWNTO
43534: IFFALSE 43579
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43536: LD_ADDR_VAR 0 6
43540: PUSH
43541: LD_VAR 0 6
43545: PPUSH
43546: LD_VAR 0 9
43550: PUSH
43551: LD_VAR 0 7
43555: MINUS
43556: PUSH
43557: LD_INT 1
43559: PLUS
43560: PPUSH
43561: LD_VAR 0 9
43565: PUSH
43566: LD_VAR 0 7
43570: ARRAY
43571: PPUSH
43572: CALL_OW 1
43576: ST_TO_ADDR
43577: GO 43533
43579: POP
43580: POP
// end ; tmp := [ ] ;
43581: LD_ADDR_VAR 0 9
43585: PUSH
43586: EMPTY
43587: ST_TO_ADDR
// if mode then
43588: LD_VAR 0 5
43592: IFFALSE 43661
// begin for i = 1 to result do
43594: LD_ADDR_VAR 0 7
43598: PUSH
43599: DOUBLE
43600: LD_INT 1
43602: DEC
43603: ST_TO_ADDR
43604: LD_VAR 0 6
43608: PUSH
43609: FOR_TO
43610: IFFALSE 43649
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43612: LD_ADDR_VAR 0 9
43616: PUSH
43617: LD_VAR 0 9
43621: PPUSH
43622: LD_VAR 0 7
43626: PPUSH
43627: LD_VAR 0 6
43631: PUSH
43632: LD_VAR 0 7
43636: ARRAY
43637: PUSH
43638: LD_INT 1
43640: ARRAY
43641: PPUSH
43642: CALL_OW 1
43646: ST_TO_ADDR
43647: GO 43609
43649: POP
43650: POP
// result := tmp ;
43651: LD_ADDR_VAR 0 6
43655: PUSH
43656: LD_VAR 0 9
43660: ST_TO_ADDR
// end ; end ;
43661: LD_VAR 0 6
43665: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43666: LD_INT 0
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43674: LD_ADDR_VAR 0 5
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// if not x or not y then
43696: LD_VAR 0 2
43700: NOT
43701: PUSH
43702: LD_VAR 0 3
43706: NOT
43707: OR
43708: IFFALSE 43712
// exit ;
43710: GO 45362
// if not range then
43712: LD_VAR 0 4
43716: NOT
43717: IFFALSE 43727
// range := 10 ;
43719: LD_ADDR_VAR 0 4
43723: PUSH
43724: LD_INT 10
43726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43727: LD_ADDR_VAR 0 8
43731: PUSH
43732: LD_INT 81
43734: PUSH
43735: LD_VAR 0 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 92
43746: PUSH
43747: LD_VAR 0 2
43751: PUSH
43752: LD_VAR 0 3
43756: PUSH
43757: LD_VAR 0 4
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: LD_INT 21
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: PPUSH
43790: CALL_OW 69
43794: ST_TO_ADDR
// if not tmp then
43795: LD_VAR 0 8
43799: NOT
43800: IFFALSE 43804
// exit ;
43802: GO 45362
// for i in tmp do
43804: LD_ADDR_VAR 0 6
43808: PUSH
43809: LD_VAR 0 8
43813: PUSH
43814: FOR_IN
43815: IFFALSE 45337
// begin points := [ 0 , 0 , 0 ] ;
43817: LD_ADDR_VAR 0 9
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// bpoints := 1 ;
43836: LD_ADDR_VAR 0 10
43840: PUSH
43841: LD_INT 1
43843: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43844: LD_VAR 0 6
43848: PPUSH
43849: CALL_OW 247
43853: PUSH
43854: LD_INT 1
43856: DOUBLE
43857: EQUAL
43858: IFTRUE 43862
43860: GO 44440
43862: POP
// begin if GetClass ( i ) = 1 then
43863: LD_VAR 0 6
43867: PPUSH
43868: CALL_OW 257
43872: PUSH
43873: LD_INT 1
43875: EQUAL
43876: IFFALSE 43897
// points := [ 10 , 5 , 3 ] ;
43878: LD_ADDR_VAR 0 9
43882: PUSH
43883: LD_INT 10
43885: PUSH
43886: LD_INT 5
43888: PUSH
43889: LD_INT 3
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: LIST
43896: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43897: LD_VAR 0 6
43901: PPUSH
43902: CALL_OW 257
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 3
43912: PUSH
43913: LD_INT 4
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: IN
43921: IFFALSE 43942
// points := [ 3 , 2 , 1 ] ;
43923: LD_ADDR_VAR 0 9
43927: PUSH
43928: LD_INT 3
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43942: LD_VAR 0 6
43946: PPUSH
43947: CALL_OW 257
43951: PUSH
43952: LD_INT 5
43954: EQUAL
43955: IFFALSE 43976
// points := [ 130 , 5 , 2 ] ;
43957: LD_ADDR_VAR 0 9
43961: PUSH
43962: LD_INT 130
43964: PUSH
43965: LD_INT 5
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43976: LD_VAR 0 6
43980: PPUSH
43981: CALL_OW 257
43985: PUSH
43986: LD_INT 8
43988: EQUAL
43989: IFFALSE 44010
// points := [ 35 , 35 , 30 ] ;
43991: LD_ADDR_VAR 0 9
43995: PUSH
43996: LD_INT 35
43998: PUSH
43999: LD_INT 35
44001: PUSH
44002: LD_INT 30
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44010: LD_VAR 0 6
44014: PPUSH
44015: CALL_OW 257
44019: PUSH
44020: LD_INT 9
44022: EQUAL
44023: IFFALSE 44044
// points := [ 20 , 55 , 40 ] ;
44025: LD_ADDR_VAR 0 9
44029: PUSH
44030: LD_INT 20
44032: PUSH
44033: LD_INT 55
44035: PUSH
44036: LD_INT 40
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44044: LD_VAR 0 6
44048: PPUSH
44049: CALL_OW 257
44053: PUSH
44054: LD_INT 12
44056: PUSH
44057: LD_INT 16
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: IN
44064: IFFALSE 44085
// points := [ 5 , 3 , 2 ] ;
44066: LD_ADDR_VAR 0 9
44070: PUSH
44071: LD_INT 5
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44085: LD_VAR 0 6
44089: PPUSH
44090: CALL_OW 257
44094: PUSH
44095: LD_INT 17
44097: EQUAL
44098: IFFALSE 44119
// points := [ 100 , 50 , 75 ] ;
44100: LD_ADDR_VAR 0 9
44104: PUSH
44105: LD_INT 100
44107: PUSH
44108: LD_INT 50
44110: PUSH
44111: LD_INT 75
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44119: LD_VAR 0 6
44123: PPUSH
44124: CALL_OW 257
44128: PUSH
44129: LD_INT 15
44131: EQUAL
44132: IFFALSE 44153
// points := [ 10 , 5 , 3 ] ;
44134: LD_ADDR_VAR 0 9
44138: PUSH
44139: LD_INT 10
44141: PUSH
44142: LD_INT 5
44144: PUSH
44145: LD_INT 3
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44153: LD_VAR 0 6
44157: PPUSH
44158: CALL_OW 257
44162: PUSH
44163: LD_INT 14
44165: EQUAL
44166: IFFALSE 44187
// points := [ 10 , 0 , 0 ] ;
44168: LD_ADDR_VAR 0 9
44172: PUSH
44173: LD_INT 10
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44187: LD_VAR 0 6
44191: PPUSH
44192: CALL_OW 257
44196: PUSH
44197: LD_INT 11
44199: EQUAL
44200: IFFALSE 44221
// points := [ 30 , 10 , 5 ] ;
44202: LD_ADDR_VAR 0 9
44206: PUSH
44207: LD_INT 30
44209: PUSH
44210: LD_INT 10
44212: PUSH
44213: LD_INT 5
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44221: LD_VAR 0 1
44225: PPUSH
44226: LD_INT 5
44228: PPUSH
44229: CALL_OW 321
44233: PUSH
44234: LD_INT 2
44236: EQUAL
44237: IFFALSE 44254
// bpoints := bpoints * 1.8 ;
44239: LD_ADDR_VAR 0 10
44243: PUSH
44244: LD_VAR 0 10
44248: PUSH
44249: LD_REAL  1.80000000000000E+0000
44252: MUL
44253: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44254: LD_VAR 0 6
44258: PPUSH
44259: CALL_OW 257
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 4
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: IN
44282: PUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: LD_INT 51
44290: PPUSH
44291: CALL_OW 321
44295: PUSH
44296: LD_INT 2
44298: EQUAL
44299: AND
44300: IFFALSE 44317
// bpoints := bpoints * 1.2 ;
44302: LD_ADDR_VAR 0 10
44306: PUSH
44307: LD_VAR 0 10
44311: PUSH
44312: LD_REAL  1.20000000000000E+0000
44315: MUL
44316: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44317: LD_VAR 0 6
44321: PPUSH
44322: CALL_OW 257
44326: PUSH
44327: LD_INT 5
44329: PUSH
44330: LD_INT 7
44332: PUSH
44333: LD_INT 9
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: LIST
44340: IN
44341: PUSH
44342: LD_VAR 0 1
44346: PPUSH
44347: LD_INT 52
44349: PPUSH
44350: CALL_OW 321
44354: PUSH
44355: LD_INT 2
44357: EQUAL
44358: AND
44359: IFFALSE 44376
// bpoints := bpoints * 1.5 ;
44361: LD_ADDR_VAR 0 10
44365: PUSH
44366: LD_VAR 0 10
44370: PUSH
44371: LD_REAL  1.50000000000000E+0000
44374: MUL
44375: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44376: LD_VAR 0 1
44380: PPUSH
44381: LD_INT 66
44383: PPUSH
44384: CALL_OW 321
44388: PUSH
44389: LD_INT 2
44391: EQUAL
44392: IFFALSE 44409
// bpoints := bpoints * 1.1 ;
44394: LD_ADDR_VAR 0 10
44398: PUSH
44399: LD_VAR 0 10
44403: PUSH
44404: LD_REAL  1.10000000000000E+0000
44407: MUL
44408: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44409: LD_ADDR_VAR 0 10
44413: PUSH
44414: LD_VAR 0 10
44418: PUSH
44419: LD_VAR 0 6
44423: PPUSH
44424: LD_INT 1
44426: PPUSH
44427: CALL_OW 259
44431: PUSH
44432: LD_REAL  1.15000000000000E+0000
44435: MUL
44436: MUL
44437: ST_TO_ADDR
// end ; unit_vehicle :
44438: GO 45266
44440: LD_INT 2
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44448
44446: GO 45254
44448: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44449: LD_VAR 0 6
44453: PPUSH
44454: CALL_OW 264
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 42
44464: PUSH
44465: LD_INT 24
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: IN
44473: IFFALSE 44494
// points := [ 25 , 5 , 3 ] ;
44475: LD_ADDR_VAR 0 9
44479: PUSH
44480: LD_INT 25
44482: PUSH
44483: LD_INT 5
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44494: LD_VAR 0 6
44498: PPUSH
44499: CALL_OW 264
44503: PUSH
44504: LD_INT 4
44506: PUSH
44507: LD_INT 43
44509: PUSH
44510: LD_INT 25
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: IN
44518: IFFALSE 44539
// points := [ 40 , 15 , 5 ] ;
44520: LD_ADDR_VAR 0 9
44524: PUSH
44525: LD_INT 40
44527: PUSH
44528: LD_INT 15
44530: PUSH
44531: LD_INT 5
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44539: LD_VAR 0 6
44543: PPUSH
44544: CALL_OW 264
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: LD_INT 23
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: IN
44559: IFFALSE 44580
// points := [ 7 , 25 , 8 ] ;
44561: LD_ADDR_VAR 0 9
44565: PUSH
44566: LD_INT 7
44568: PUSH
44569: LD_INT 25
44571: PUSH
44572: LD_INT 8
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44580: LD_VAR 0 6
44584: PPUSH
44585: CALL_OW 264
44589: PUSH
44590: LD_INT 5
44592: PUSH
44593: LD_INT 27
44595: PUSH
44596: LD_INT 44
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: IN
44604: IFFALSE 44625
// points := [ 14 , 50 , 16 ] ;
44606: LD_ADDR_VAR 0 9
44610: PUSH
44611: LD_INT 14
44613: PUSH
44614: LD_INT 50
44616: PUSH
44617: LD_INT 16
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44625: LD_VAR 0 6
44629: PPUSH
44630: CALL_OW 264
44634: PUSH
44635: LD_INT 6
44637: PUSH
44638: LD_INT 46
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: IN
44645: IFFALSE 44666
// points := [ 32 , 120 , 70 ] ;
44647: LD_ADDR_VAR 0 9
44651: PUSH
44652: LD_INT 32
44654: PUSH
44655: LD_INT 120
44657: PUSH
44658: LD_INT 70
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44666: LD_VAR 0 6
44670: PPUSH
44671: CALL_OW 264
44675: PUSH
44676: LD_INT 7
44678: PUSH
44679: LD_INT 28
44681: PUSH
44682: LD_INT 45
44684: PUSH
44685: LD_INT 92
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: IN
44694: IFFALSE 44715
// points := [ 35 , 20 , 45 ] ;
44696: LD_ADDR_VAR 0 9
44700: PUSH
44701: LD_INT 35
44703: PUSH
44704: LD_INT 20
44706: PUSH
44707: LD_INT 45
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44715: LD_VAR 0 6
44719: PPUSH
44720: CALL_OW 264
44724: PUSH
44725: LD_INT 47
44727: PUSH
44728: EMPTY
44729: LIST
44730: IN
44731: IFFALSE 44752
// points := [ 67 , 45 , 75 ] ;
44733: LD_ADDR_VAR 0 9
44737: PUSH
44738: LD_INT 67
44740: PUSH
44741: LD_INT 45
44743: PUSH
44744: LD_INT 75
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44752: LD_VAR 0 6
44756: PPUSH
44757: CALL_OW 264
44761: PUSH
44762: LD_INT 26
44764: PUSH
44765: EMPTY
44766: LIST
44767: IN
44768: IFFALSE 44789
// points := [ 120 , 30 , 80 ] ;
44770: LD_ADDR_VAR 0 9
44774: PUSH
44775: LD_INT 120
44777: PUSH
44778: LD_INT 30
44780: PUSH
44781: LD_INT 80
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44789: LD_VAR 0 6
44793: PPUSH
44794: CALL_OW 264
44798: PUSH
44799: LD_INT 22
44801: PUSH
44802: EMPTY
44803: LIST
44804: IN
44805: IFFALSE 44826
// points := [ 40 , 1 , 1 ] ;
44807: LD_ADDR_VAR 0 9
44811: PUSH
44812: LD_INT 40
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44826: LD_VAR 0 6
44830: PPUSH
44831: CALL_OW 264
44835: PUSH
44836: LD_INT 29
44838: PUSH
44839: EMPTY
44840: LIST
44841: IN
44842: IFFALSE 44863
// points := [ 70 , 200 , 400 ] ;
44844: LD_ADDR_VAR 0 9
44848: PUSH
44849: LD_INT 70
44851: PUSH
44852: LD_INT 200
44854: PUSH
44855: LD_INT 400
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44863: LD_VAR 0 6
44867: PPUSH
44868: CALL_OW 264
44872: PUSH
44873: LD_INT 14
44875: PUSH
44876: LD_INT 53
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: IN
44883: IFFALSE 44904
// points := [ 40 , 10 , 20 ] ;
44885: LD_ADDR_VAR 0 9
44889: PUSH
44890: LD_INT 40
44892: PUSH
44893: LD_INT 10
44895: PUSH
44896: LD_INT 20
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44904: LD_VAR 0 6
44908: PPUSH
44909: CALL_OW 264
44913: PUSH
44914: LD_INT 9
44916: PUSH
44917: EMPTY
44918: LIST
44919: IN
44920: IFFALSE 44941
// points := [ 5 , 70 , 20 ] ;
44922: LD_ADDR_VAR 0 9
44926: PUSH
44927: LD_INT 5
44929: PUSH
44930: LD_INT 70
44932: PUSH
44933: LD_INT 20
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44941: LD_VAR 0 6
44945: PPUSH
44946: CALL_OW 264
44950: PUSH
44951: LD_INT 10
44953: PUSH
44954: EMPTY
44955: LIST
44956: IN
44957: IFFALSE 44978
// points := [ 35 , 110 , 70 ] ;
44959: LD_ADDR_VAR 0 9
44963: PUSH
44964: LD_INT 35
44966: PUSH
44967: LD_INT 110
44969: PUSH
44970: LD_INT 70
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44978: LD_VAR 0 6
44982: PPUSH
44983: CALL_OW 265
44987: PUSH
44988: LD_INT 25
44990: EQUAL
44991: IFFALSE 45012
// points := [ 80 , 65 , 100 ] ;
44993: LD_ADDR_VAR 0 9
44997: PUSH
44998: LD_INT 80
45000: PUSH
45001: LD_INT 65
45003: PUSH
45004: LD_INT 100
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45012: LD_VAR 0 6
45016: PPUSH
45017: CALL_OW 263
45021: PUSH
45022: LD_INT 1
45024: EQUAL
45025: IFFALSE 45060
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45027: LD_ADDR_VAR 0 10
45031: PUSH
45032: LD_VAR 0 10
45036: PUSH
45037: LD_VAR 0 6
45041: PPUSH
45042: CALL_OW 311
45046: PPUSH
45047: LD_INT 3
45049: PPUSH
45050: CALL_OW 259
45054: PUSH
45055: LD_INT 4
45057: MUL
45058: MUL
45059: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45060: LD_VAR 0 6
45064: PPUSH
45065: CALL_OW 263
45069: PUSH
45070: LD_INT 2
45072: EQUAL
45073: IFFALSE 45124
// begin j := IsControledBy ( i ) ;
45075: LD_ADDR_VAR 0 7
45079: PUSH
45080: LD_VAR 0 6
45084: PPUSH
45085: CALL_OW 312
45089: ST_TO_ADDR
// if j then
45090: LD_VAR 0 7
45094: IFFALSE 45124
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45096: LD_ADDR_VAR 0 10
45100: PUSH
45101: LD_VAR 0 10
45105: PUSH
45106: LD_VAR 0 7
45110: PPUSH
45111: LD_INT 3
45113: PPUSH
45114: CALL_OW 259
45118: PUSH
45119: LD_INT 3
45121: MUL
45122: MUL
45123: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45124: LD_VAR 0 6
45128: PPUSH
45129: CALL_OW 264
45133: PUSH
45134: LD_INT 5
45136: PUSH
45137: LD_INT 6
45139: PUSH
45140: LD_INT 46
45142: PUSH
45143: LD_INT 44
45145: PUSH
45146: LD_INT 47
45148: PUSH
45149: LD_INT 45
45151: PUSH
45152: LD_INT 28
45154: PUSH
45155: LD_INT 7
45157: PUSH
45158: LD_INT 27
45160: PUSH
45161: LD_INT 29
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: IN
45176: PUSH
45177: LD_VAR 0 1
45181: PPUSH
45182: LD_INT 52
45184: PPUSH
45185: CALL_OW 321
45189: PUSH
45190: LD_INT 2
45192: EQUAL
45193: AND
45194: IFFALSE 45211
// bpoints := bpoints * 1.2 ;
45196: LD_ADDR_VAR 0 10
45200: PUSH
45201: LD_VAR 0 10
45205: PUSH
45206: LD_REAL  1.20000000000000E+0000
45209: MUL
45210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45211: LD_VAR 0 6
45215: PPUSH
45216: CALL_OW 264
45220: PUSH
45221: LD_INT 6
45223: PUSH
45224: LD_INT 46
45226: PUSH
45227: LD_INT 47
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: IN
45235: IFFALSE 45252
// bpoints := bpoints * 1.2 ;
45237: LD_ADDR_VAR 0 10
45241: PUSH
45242: LD_VAR 0 10
45246: PUSH
45247: LD_REAL  1.20000000000000E+0000
45250: MUL
45251: ST_TO_ADDR
// end ; unit_building :
45252: GO 45266
45254: LD_INT 3
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45265
45262: POP
// ; end ;
45263: GO 45266
45265: POP
// for j = 1 to 3 do
45266: LD_ADDR_VAR 0 7
45270: PUSH
45271: DOUBLE
45272: LD_INT 1
45274: DEC
45275: ST_TO_ADDR
45276: LD_INT 3
45278: PUSH
45279: FOR_TO
45280: IFFALSE 45333
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45282: LD_ADDR_VAR 0 5
45286: PUSH
45287: LD_VAR 0 5
45291: PPUSH
45292: LD_VAR 0 7
45296: PPUSH
45297: LD_VAR 0 5
45301: PUSH
45302: LD_VAR 0 7
45306: ARRAY
45307: PUSH
45308: LD_VAR 0 9
45312: PUSH
45313: LD_VAR 0 7
45317: ARRAY
45318: PUSH
45319: LD_VAR 0 10
45323: MUL
45324: PLUS
45325: PPUSH
45326: CALL_OW 1
45330: ST_TO_ADDR
45331: GO 45279
45333: POP
45334: POP
// end ;
45335: GO 43814
45337: POP
45338: POP
// result := Replace ( result , 4 , tmp ) ;
45339: LD_ADDR_VAR 0 5
45343: PUSH
45344: LD_VAR 0 5
45348: PPUSH
45349: LD_INT 4
45351: PPUSH
45352: LD_VAR 0 8
45356: PPUSH
45357: CALL_OW 1
45361: ST_TO_ADDR
// end ;
45362: LD_VAR 0 5
45366: RET
// export function DangerAtRange ( unit , range ) ; begin
45367: LD_INT 0
45369: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45370: LD_ADDR_VAR 0 3
45374: PUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 255
45384: PPUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: CALL_OW 250
45394: PPUSH
45395: LD_VAR 0 1
45399: PPUSH
45400: CALL_OW 251
45404: PPUSH
45405: LD_VAR 0 2
45409: PPUSH
45410: CALL 43666 0 4
45414: ST_TO_ADDR
// end ;
45415: LD_VAR 0 3
45419: RET
// export function DangerInArea ( side , area ) ; begin
45420: LD_INT 0
45422: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45423: LD_ADDR_VAR 0 3
45427: PUSH
45428: LD_VAR 0 2
45432: PPUSH
45433: LD_INT 81
45435: PUSH
45436: LD_VAR 0 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PPUSH
45445: CALL_OW 70
45449: ST_TO_ADDR
// end ;
45450: LD_VAR 0 3
45454: RET
// export function IsExtension ( b ) ; begin
45455: LD_INT 0
45457: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45458: LD_ADDR_VAR 0 2
45462: PUSH
45463: LD_VAR 0 1
45467: PUSH
45468: LD_INT 23
45470: PUSH
45471: LD_INT 20
45473: PUSH
45474: LD_INT 22
45476: PUSH
45477: LD_INT 17
45479: PUSH
45480: LD_INT 24
45482: PUSH
45483: LD_INT 21
45485: PUSH
45486: LD_INT 19
45488: PUSH
45489: LD_INT 16
45491: PUSH
45492: LD_INT 25
45494: PUSH
45495: LD_INT 18
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: IN
45510: ST_TO_ADDR
// end ;
45511: LD_VAR 0 2
45515: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45516: LD_INT 0
45518: PPUSH
45519: PPUSH
45520: PPUSH
// result := [ ] ;
45521: LD_ADDR_VAR 0 4
45525: PUSH
45526: EMPTY
45527: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45528: LD_ADDR_VAR 0 5
45532: PUSH
45533: LD_VAR 0 2
45537: PPUSH
45538: LD_INT 21
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PPUSH
45548: CALL_OW 70
45552: ST_TO_ADDR
// if not tmp then
45553: LD_VAR 0 5
45557: NOT
45558: IFFALSE 45562
// exit ;
45560: GO 45626
// if checkLink then
45562: LD_VAR 0 3
45566: IFFALSE 45616
// begin for i in tmp do
45568: LD_ADDR_VAR 0 6
45572: PUSH
45573: LD_VAR 0 5
45577: PUSH
45578: FOR_IN
45579: IFFALSE 45614
// if GetBase ( i ) <> base then
45581: LD_VAR 0 6
45585: PPUSH
45586: CALL_OW 274
45590: PUSH
45591: LD_VAR 0 1
45595: NONEQUAL
45596: IFFALSE 45612
// ComLinkToBase ( base , i ) ;
45598: LD_VAR 0 1
45602: PPUSH
45603: LD_VAR 0 6
45607: PPUSH
45608: CALL_OW 169
45612: GO 45578
45614: POP
45615: POP
// end ; result := tmp ;
45616: LD_ADDR_VAR 0 4
45620: PUSH
45621: LD_VAR 0 5
45625: ST_TO_ADDR
// end ;
45626: LD_VAR 0 4
45630: RET
// export function ComComplete ( units , b ) ; var i ; begin
45631: LD_INT 0
45633: PPUSH
45634: PPUSH
// if not units then
45635: LD_VAR 0 1
45639: NOT
45640: IFFALSE 45644
// exit ;
45642: GO 45734
// for i in units do
45644: LD_ADDR_VAR 0 4
45648: PUSH
45649: LD_VAR 0 1
45653: PUSH
45654: FOR_IN
45655: IFFALSE 45732
// if BuildingStatus ( b ) = bs_build then
45657: LD_VAR 0 2
45661: PPUSH
45662: CALL_OW 461
45666: PUSH
45667: LD_INT 1
45669: EQUAL
45670: IFFALSE 45730
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45672: LD_VAR 0 4
45676: PPUSH
45677: LD_STRING h
45679: PUSH
45680: LD_VAR 0 2
45684: PPUSH
45685: CALL_OW 250
45689: PUSH
45690: LD_VAR 0 2
45694: PPUSH
45695: CALL_OW 251
45699: PUSH
45700: LD_VAR 0 2
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: PUSH
45723: EMPTY
45724: LIST
45725: PPUSH
45726: CALL_OW 446
45730: GO 45654
45732: POP
45733: POP
// end ;
45734: LD_VAR 0 3
45738: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45739: LD_INT 0
45741: PPUSH
45742: PPUSH
45743: PPUSH
45744: PPUSH
45745: PPUSH
45746: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45747: LD_VAR 0 1
45751: NOT
45752: PUSH
45753: LD_VAR 0 1
45757: PPUSH
45758: CALL_OW 263
45762: PUSH
45763: LD_INT 2
45765: NONEQUAL
45766: OR
45767: IFFALSE 45771
// exit ;
45769: GO 46087
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45771: LD_ADDR_VAR 0 6
45775: PUSH
45776: LD_INT 22
45778: PUSH
45779: LD_VAR 0 1
45783: PPUSH
45784: CALL_OW 255
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 30
45798: PUSH
45799: LD_INT 36
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 34
45808: PUSH
45809: LD_INT 31
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PPUSH
45825: CALL_OW 69
45829: ST_TO_ADDR
// if not tmp then
45830: LD_VAR 0 6
45834: NOT
45835: IFFALSE 45839
// exit ;
45837: GO 46087
// result := [ ] ;
45839: LD_ADDR_VAR 0 2
45843: PUSH
45844: EMPTY
45845: ST_TO_ADDR
// for i in tmp do
45846: LD_ADDR_VAR 0 3
45850: PUSH
45851: LD_VAR 0 6
45855: PUSH
45856: FOR_IN
45857: IFFALSE 45928
// begin t := UnitsInside ( i ) ;
45859: LD_ADDR_VAR 0 4
45863: PUSH
45864: LD_VAR 0 3
45868: PPUSH
45869: CALL_OW 313
45873: ST_TO_ADDR
// if t then
45874: LD_VAR 0 4
45878: IFFALSE 45926
// for j in t do
45880: LD_ADDR_VAR 0 7
45884: PUSH
45885: LD_VAR 0 4
45889: PUSH
45890: FOR_IN
45891: IFFALSE 45924
// result := Replace ( result , result + 1 , j ) ;
45893: LD_ADDR_VAR 0 2
45897: PUSH
45898: LD_VAR 0 2
45902: PPUSH
45903: LD_VAR 0 2
45907: PUSH
45908: LD_INT 1
45910: PLUS
45911: PPUSH
45912: LD_VAR 0 7
45916: PPUSH
45917: CALL_OW 1
45921: ST_TO_ADDR
45922: GO 45890
45924: POP
45925: POP
// end ;
45926: GO 45856
45928: POP
45929: POP
// if not result then
45930: LD_VAR 0 2
45934: NOT
45935: IFFALSE 45939
// exit ;
45937: GO 46087
// mech := result [ 1 ] ;
45939: LD_ADDR_VAR 0 5
45943: PUSH
45944: LD_VAR 0 2
45948: PUSH
45949: LD_INT 1
45951: ARRAY
45952: ST_TO_ADDR
// if result > 1 then
45953: LD_VAR 0 2
45957: PUSH
45958: LD_INT 1
45960: GREATER
45961: IFFALSE 46073
// begin for i = 2 to result do
45963: LD_ADDR_VAR 0 3
45967: PUSH
45968: DOUBLE
45969: LD_INT 2
45971: DEC
45972: ST_TO_ADDR
45973: LD_VAR 0 2
45977: PUSH
45978: FOR_TO
45979: IFFALSE 46071
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45981: LD_ADDR_VAR 0 4
45985: PUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_VAR 0 3
45995: ARRAY
45996: PPUSH
45997: LD_INT 3
45999: PPUSH
46000: CALL_OW 259
46004: PUSH
46005: LD_VAR 0 2
46009: PUSH
46010: LD_VAR 0 3
46014: ARRAY
46015: PPUSH
46016: CALL_OW 432
46020: MINUS
46021: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46022: LD_VAR 0 4
46026: PUSH
46027: LD_VAR 0 5
46031: PPUSH
46032: LD_INT 3
46034: PPUSH
46035: CALL_OW 259
46039: PUSH
46040: LD_VAR 0 5
46044: PPUSH
46045: CALL_OW 432
46049: MINUS
46050: GREATEREQUAL
46051: IFFALSE 46069
// mech := result [ i ] ;
46053: LD_ADDR_VAR 0 5
46057: PUSH
46058: LD_VAR 0 2
46062: PUSH
46063: LD_VAR 0 3
46067: ARRAY
46068: ST_TO_ADDR
// end ;
46069: GO 45978
46071: POP
46072: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46073: LD_VAR 0 1
46077: PPUSH
46078: LD_VAR 0 5
46082: PPUSH
46083: CALL_OW 135
// end ;
46087: LD_VAR 0 2
46091: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46092: LD_INT 0
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
46099: PPUSH
46100: PPUSH
46101: PPUSH
46102: PPUSH
46103: PPUSH
46104: PPUSH
46105: PPUSH
46106: PPUSH
// result := [ ] ;
46107: LD_ADDR_VAR 0 7
46111: PUSH
46112: EMPTY
46113: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46114: LD_VAR 0 1
46118: PPUSH
46119: CALL_OW 266
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: IN
46134: NOT
46135: IFFALSE 46139
// exit ;
46137: GO 47773
// if name then
46139: LD_VAR 0 3
46143: IFFALSE 46159
// SetBName ( base_dep , name ) ;
46145: LD_VAR 0 1
46149: PPUSH
46150: LD_VAR 0 3
46154: PPUSH
46155: CALL_OW 500
// base := GetBase ( base_dep ) ;
46159: LD_ADDR_VAR 0 15
46163: PUSH
46164: LD_VAR 0 1
46168: PPUSH
46169: CALL_OW 274
46173: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46174: LD_ADDR_VAR 0 16
46178: PUSH
46179: LD_VAR 0 1
46183: PPUSH
46184: CALL_OW 255
46188: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46189: LD_ADDR_VAR 0 17
46193: PUSH
46194: LD_VAR 0 1
46198: PPUSH
46199: CALL_OW 248
46203: ST_TO_ADDR
// if sources then
46204: LD_VAR 0 5
46208: IFFALSE 46255
// for i = 1 to 3 do
46210: LD_ADDR_VAR 0 8
46214: PUSH
46215: DOUBLE
46216: LD_INT 1
46218: DEC
46219: ST_TO_ADDR
46220: LD_INT 3
46222: PUSH
46223: FOR_TO
46224: IFFALSE 46253
// AddResourceType ( base , i , sources [ i ] ) ;
46226: LD_VAR 0 15
46230: PPUSH
46231: LD_VAR 0 8
46235: PPUSH
46236: LD_VAR 0 5
46240: PUSH
46241: LD_VAR 0 8
46245: ARRAY
46246: PPUSH
46247: CALL_OW 276
46251: GO 46223
46253: POP
46254: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46255: LD_ADDR_VAR 0 18
46259: PUSH
46260: LD_VAR 0 15
46264: PPUSH
46265: LD_VAR 0 2
46269: PPUSH
46270: LD_INT 1
46272: PPUSH
46273: CALL 45516 0 3
46277: ST_TO_ADDR
// InitHc ;
46278: CALL_OW 19
// InitUc ;
46282: CALL_OW 18
// uc_side := side ;
46286: LD_ADDR_OWVAR 20
46290: PUSH
46291: LD_VAR 0 16
46295: ST_TO_ADDR
// uc_nation := nation ;
46296: LD_ADDR_OWVAR 21
46300: PUSH
46301: LD_VAR 0 17
46305: ST_TO_ADDR
// if buildings then
46306: LD_VAR 0 18
46310: IFFALSE 47632
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46312: LD_ADDR_VAR 0 19
46316: PUSH
46317: LD_VAR 0 18
46321: PPUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 30
46327: PUSH
46328: LD_INT 29
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 30
46337: PUSH
46338: LD_INT 30
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: PPUSH
46350: CALL_OW 72
46354: ST_TO_ADDR
// if tmp then
46355: LD_VAR 0 19
46359: IFFALSE 46407
// for i in tmp do
46361: LD_ADDR_VAR 0 8
46365: PUSH
46366: LD_VAR 0 19
46370: PUSH
46371: FOR_IN
46372: IFFALSE 46405
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46374: LD_VAR 0 8
46378: PPUSH
46379: CALL_OW 250
46383: PPUSH
46384: LD_VAR 0 8
46388: PPUSH
46389: CALL_OW 251
46393: PPUSH
46394: LD_VAR 0 16
46398: PPUSH
46399: CALL_OW 441
46403: GO 46371
46405: POP
46406: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46407: LD_VAR 0 18
46411: PPUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 30
46417: PUSH
46418: LD_INT 32
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 30
46427: PUSH
46428: LD_INT 33
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: PPUSH
46440: CALL_OW 72
46444: IFFALSE 46532
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46446: LD_ADDR_VAR 0 8
46450: PUSH
46451: LD_VAR 0 18
46455: PPUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 30
46461: PUSH
46462: LD_INT 32
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 30
46471: PUSH
46472: LD_INT 33
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: PPUSH
46484: CALL_OW 72
46488: PUSH
46489: FOR_IN
46490: IFFALSE 46530
// begin if not GetBWeapon ( i ) then
46492: LD_VAR 0 8
46496: PPUSH
46497: CALL_OW 269
46501: NOT
46502: IFFALSE 46528
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46504: LD_VAR 0 8
46508: PPUSH
46509: LD_VAR 0 8
46513: PPUSH
46514: LD_VAR 0 2
46518: PPUSH
46519: CALL 47778 0 2
46523: PPUSH
46524: CALL_OW 431
// end ;
46528: GO 46489
46530: POP
46531: POP
// end ; for i = 1 to personel do
46532: LD_ADDR_VAR 0 8
46536: PUSH
46537: DOUBLE
46538: LD_INT 1
46540: DEC
46541: ST_TO_ADDR
46542: LD_VAR 0 6
46546: PUSH
46547: FOR_TO
46548: IFFALSE 47612
// begin if i > 4 then
46550: LD_VAR 0 8
46554: PUSH
46555: LD_INT 4
46557: GREATER
46558: IFFALSE 46562
// break ;
46560: GO 47612
// case i of 1 :
46562: LD_VAR 0 8
46566: PUSH
46567: LD_INT 1
46569: DOUBLE
46570: EQUAL
46571: IFTRUE 46575
46573: GO 46655
46575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46576: LD_ADDR_VAR 0 12
46580: PUSH
46581: LD_VAR 0 18
46585: PPUSH
46586: LD_INT 22
46588: PUSH
46589: LD_VAR 0 16
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 58
46600: PUSH
46601: EMPTY
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 30
46609: PUSH
46610: LD_INT 32
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 30
46619: PUSH
46620: LD_INT 4
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 30
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: PPUSH
46648: CALL_OW 72
46652: ST_TO_ADDR
46653: GO 46877
46655: LD_INT 2
46657: DOUBLE
46658: EQUAL
46659: IFTRUE 46663
46661: GO 46725
46663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46664: LD_ADDR_VAR 0 12
46668: PUSH
46669: LD_VAR 0 18
46673: PPUSH
46674: LD_INT 22
46676: PUSH
46677: LD_VAR 0 16
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 30
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 30
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PPUSH
46718: CALL_OW 72
46722: ST_TO_ADDR
46723: GO 46877
46725: LD_INT 3
46727: DOUBLE
46728: EQUAL
46729: IFTRUE 46733
46731: GO 46795
46733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46734: LD_ADDR_VAR 0 12
46738: PUSH
46739: LD_VAR 0 18
46743: PPUSH
46744: LD_INT 22
46746: PUSH
46747: LD_VAR 0 16
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 30
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 30
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PPUSH
46788: CALL_OW 72
46792: ST_TO_ADDR
46793: GO 46877
46795: LD_INT 4
46797: DOUBLE
46798: EQUAL
46799: IFTRUE 46803
46801: GO 46876
46803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46804: LD_ADDR_VAR 0 12
46808: PUSH
46809: LD_VAR 0 18
46813: PPUSH
46814: LD_INT 22
46816: PUSH
46817: LD_VAR 0 16
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 30
46831: PUSH
46832: LD_INT 6
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 30
46841: PUSH
46842: LD_INT 7
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 30
46851: PUSH
46852: LD_INT 8
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PPUSH
46869: CALL_OW 72
46873: ST_TO_ADDR
46874: GO 46877
46876: POP
// if i = 1 then
46877: LD_VAR 0 8
46881: PUSH
46882: LD_INT 1
46884: EQUAL
46885: IFFALSE 46996
// begin tmp := [ ] ;
46887: LD_ADDR_VAR 0 19
46891: PUSH
46892: EMPTY
46893: ST_TO_ADDR
// for j in f do
46894: LD_ADDR_VAR 0 9
46898: PUSH
46899: LD_VAR 0 12
46903: PUSH
46904: FOR_IN
46905: IFFALSE 46978
// if GetBType ( j ) = b_bunker then
46907: LD_VAR 0 9
46911: PPUSH
46912: CALL_OW 266
46916: PUSH
46917: LD_INT 32
46919: EQUAL
46920: IFFALSE 46947
// tmp := Insert ( tmp , 1 , j ) else
46922: LD_ADDR_VAR 0 19
46926: PUSH
46927: LD_VAR 0 19
46931: PPUSH
46932: LD_INT 1
46934: PPUSH
46935: LD_VAR 0 9
46939: PPUSH
46940: CALL_OW 2
46944: ST_TO_ADDR
46945: GO 46976
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46947: LD_ADDR_VAR 0 19
46951: PUSH
46952: LD_VAR 0 19
46956: PPUSH
46957: LD_VAR 0 19
46961: PUSH
46962: LD_INT 1
46964: PLUS
46965: PPUSH
46966: LD_VAR 0 9
46970: PPUSH
46971: CALL_OW 2
46975: ST_TO_ADDR
46976: GO 46904
46978: POP
46979: POP
// if tmp then
46980: LD_VAR 0 19
46984: IFFALSE 46996
// f := tmp ;
46986: LD_ADDR_VAR 0 12
46990: PUSH
46991: LD_VAR 0 19
46995: ST_TO_ADDR
// end ; x := personel [ i ] ;
46996: LD_ADDR_VAR 0 13
47000: PUSH
47001: LD_VAR 0 6
47005: PUSH
47006: LD_VAR 0 8
47010: ARRAY
47011: ST_TO_ADDR
// if x = - 1 then
47012: LD_VAR 0 13
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: EQUAL
47021: IFFALSE 47230
// begin for j in f do
47023: LD_ADDR_VAR 0 9
47027: PUSH
47028: LD_VAR 0 12
47032: PUSH
47033: FOR_IN
47034: IFFALSE 47226
// repeat InitHc ;
47036: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47040: LD_VAR 0 9
47044: PPUSH
47045: CALL_OW 266
47049: PUSH
47050: LD_INT 5
47052: EQUAL
47053: IFFALSE 47123
// begin if UnitsInside ( j ) < 3 then
47055: LD_VAR 0 9
47059: PPUSH
47060: CALL_OW 313
47064: PUSH
47065: LD_INT 3
47067: LESS
47068: IFFALSE 47104
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47070: LD_INT 0
47072: PPUSH
47073: LD_INT 5
47075: PUSH
47076: LD_INT 8
47078: PUSH
47079: LD_INT 9
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: PUSH
47087: LD_VAR 0 17
47091: ARRAY
47092: PPUSH
47093: LD_VAR 0 4
47097: PPUSH
47098: CALL_OW 380
47102: GO 47121
// PrepareHuman ( false , i , skill ) ;
47104: LD_INT 0
47106: PPUSH
47107: LD_VAR 0 8
47111: PPUSH
47112: LD_VAR 0 4
47116: PPUSH
47117: CALL_OW 380
// end else
47121: GO 47140
// PrepareHuman ( false , i , skill ) ;
47123: LD_INT 0
47125: PPUSH
47126: LD_VAR 0 8
47130: PPUSH
47131: LD_VAR 0 4
47135: PPUSH
47136: CALL_OW 380
// un := CreateHuman ;
47140: LD_ADDR_VAR 0 14
47144: PUSH
47145: CALL_OW 44
47149: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47150: LD_ADDR_VAR 0 7
47154: PUSH
47155: LD_VAR 0 7
47159: PPUSH
47160: LD_INT 1
47162: PPUSH
47163: LD_VAR 0 14
47167: PPUSH
47168: CALL_OW 2
47172: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47173: LD_VAR 0 14
47177: PPUSH
47178: LD_VAR 0 9
47182: PPUSH
47183: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47187: LD_VAR 0 9
47191: PPUSH
47192: CALL_OW 313
47196: PUSH
47197: LD_INT 6
47199: EQUAL
47200: PUSH
47201: LD_VAR 0 9
47205: PPUSH
47206: CALL_OW 266
47210: PUSH
47211: LD_INT 32
47213: PUSH
47214: LD_INT 31
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: IN
47221: OR
47222: IFFALSE 47036
47224: GO 47033
47226: POP
47227: POP
// end else
47228: GO 47610
// for j = 1 to x do
47230: LD_ADDR_VAR 0 9
47234: PUSH
47235: DOUBLE
47236: LD_INT 1
47238: DEC
47239: ST_TO_ADDR
47240: LD_VAR 0 13
47244: PUSH
47245: FOR_TO
47246: IFFALSE 47608
// begin InitHc ;
47248: CALL_OW 19
// if not f then
47252: LD_VAR 0 12
47256: NOT
47257: IFFALSE 47346
// begin PrepareHuman ( false , i , skill ) ;
47259: LD_INT 0
47261: PPUSH
47262: LD_VAR 0 8
47266: PPUSH
47267: LD_VAR 0 4
47271: PPUSH
47272: CALL_OW 380
// un := CreateHuman ;
47276: LD_ADDR_VAR 0 14
47280: PUSH
47281: CALL_OW 44
47285: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47286: LD_ADDR_VAR 0 7
47290: PUSH
47291: LD_VAR 0 7
47295: PPUSH
47296: LD_INT 1
47298: PPUSH
47299: LD_VAR 0 14
47303: PPUSH
47304: CALL_OW 2
47308: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47309: LD_VAR 0 14
47313: PPUSH
47314: LD_VAR 0 1
47318: PPUSH
47319: CALL_OW 250
47323: PPUSH
47324: LD_VAR 0 1
47328: PPUSH
47329: CALL_OW 251
47333: PPUSH
47334: LD_INT 10
47336: PPUSH
47337: LD_INT 0
47339: PPUSH
47340: CALL_OW 50
// continue ;
47344: GO 47245
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47346: LD_VAR 0 12
47350: PUSH
47351: LD_INT 1
47353: ARRAY
47354: PPUSH
47355: CALL_OW 313
47359: PUSH
47360: LD_VAR 0 12
47364: PUSH
47365: LD_INT 1
47367: ARRAY
47368: PPUSH
47369: CALL_OW 266
47373: PUSH
47374: LD_INT 32
47376: PUSH
47377: LD_INT 31
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: IN
47384: AND
47385: PUSH
47386: LD_VAR 0 12
47390: PUSH
47391: LD_INT 1
47393: ARRAY
47394: PPUSH
47395: CALL_OW 313
47399: PUSH
47400: LD_INT 6
47402: EQUAL
47403: OR
47404: IFFALSE 47424
// f := Delete ( f , 1 ) ;
47406: LD_ADDR_VAR 0 12
47410: PUSH
47411: LD_VAR 0 12
47415: PPUSH
47416: LD_INT 1
47418: PPUSH
47419: CALL_OW 3
47423: ST_TO_ADDR
// if not f then
47424: LD_VAR 0 12
47428: NOT
47429: IFFALSE 47447
// begin x := x + 2 ;
47431: LD_ADDR_VAR 0 13
47435: PUSH
47436: LD_VAR 0 13
47440: PUSH
47441: LD_INT 2
47443: PLUS
47444: ST_TO_ADDR
// continue ;
47445: GO 47245
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47447: LD_VAR 0 12
47451: PUSH
47452: LD_INT 1
47454: ARRAY
47455: PPUSH
47456: CALL_OW 266
47460: PUSH
47461: LD_INT 5
47463: EQUAL
47464: IFFALSE 47538
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47466: LD_VAR 0 12
47470: PUSH
47471: LD_INT 1
47473: ARRAY
47474: PPUSH
47475: CALL_OW 313
47479: PUSH
47480: LD_INT 3
47482: LESS
47483: IFFALSE 47519
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47485: LD_INT 0
47487: PPUSH
47488: LD_INT 5
47490: PUSH
47491: LD_INT 8
47493: PUSH
47494: LD_INT 9
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: PUSH
47502: LD_VAR 0 17
47506: ARRAY
47507: PPUSH
47508: LD_VAR 0 4
47512: PPUSH
47513: CALL_OW 380
47517: GO 47536
// PrepareHuman ( false , i , skill ) ;
47519: LD_INT 0
47521: PPUSH
47522: LD_VAR 0 8
47526: PPUSH
47527: LD_VAR 0 4
47531: PPUSH
47532: CALL_OW 380
// end else
47536: GO 47555
// PrepareHuman ( false , i , skill ) ;
47538: LD_INT 0
47540: PPUSH
47541: LD_VAR 0 8
47545: PPUSH
47546: LD_VAR 0 4
47550: PPUSH
47551: CALL_OW 380
// un := CreateHuman ;
47555: LD_ADDR_VAR 0 14
47559: PUSH
47560: CALL_OW 44
47564: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47565: LD_ADDR_VAR 0 7
47569: PUSH
47570: LD_VAR 0 7
47574: PPUSH
47575: LD_INT 1
47577: PPUSH
47578: LD_VAR 0 14
47582: PPUSH
47583: CALL_OW 2
47587: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47588: LD_VAR 0 14
47592: PPUSH
47593: LD_VAR 0 12
47597: PUSH
47598: LD_INT 1
47600: ARRAY
47601: PPUSH
47602: CALL_OW 52
// end ;
47606: GO 47245
47608: POP
47609: POP
// end ;
47610: GO 46547
47612: POP
47613: POP
// result := result ^ buildings ;
47614: LD_ADDR_VAR 0 7
47618: PUSH
47619: LD_VAR 0 7
47623: PUSH
47624: LD_VAR 0 18
47628: ADD
47629: ST_TO_ADDR
// end else
47630: GO 47773
// begin for i = 1 to personel do
47632: LD_ADDR_VAR 0 8
47636: PUSH
47637: DOUBLE
47638: LD_INT 1
47640: DEC
47641: ST_TO_ADDR
47642: LD_VAR 0 6
47646: PUSH
47647: FOR_TO
47648: IFFALSE 47771
// begin if i > 4 then
47650: LD_VAR 0 8
47654: PUSH
47655: LD_INT 4
47657: GREATER
47658: IFFALSE 47662
// break ;
47660: GO 47771
// x := personel [ i ] ;
47662: LD_ADDR_VAR 0 13
47666: PUSH
47667: LD_VAR 0 6
47671: PUSH
47672: LD_VAR 0 8
47676: ARRAY
47677: ST_TO_ADDR
// if x = - 1 then
47678: LD_VAR 0 13
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: EQUAL
47687: IFFALSE 47691
// continue ;
47689: GO 47647
// PrepareHuman ( false , i , skill ) ;
47691: LD_INT 0
47693: PPUSH
47694: LD_VAR 0 8
47698: PPUSH
47699: LD_VAR 0 4
47703: PPUSH
47704: CALL_OW 380
// un := CreateHuman ;
47708: LD_ADDR_VAR 0 14
47712: PUSH
47713: CALL_OW 44
47717: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47718: LD_VAR 0 14
47722: PPUSH
47723: LD_VAR 0 1
47727: PPUSH
47728: CALL_OW 250
47732: PPUSH
47733: LD_VAR 0 1
47737: PPUSH
47738: CALL_OW 251
47742: PPUSH
47743: LD_INT 10
47745: PPUSH
47746: LD_INT 0
47748: PPUSH
47749: CALL_OW 50
// result := result ^ un ;
47753: LD_ADDR_VAR 0 7
47757: PUSH
47758: LD_VAR 0 7
47762: PUSH
47763: LD_VAR 0 14
47767: ADD
47768: ST_TO_ADDR
// end ;
47769: GO 47647
47771: POP
47772: POP
// end ; end ;
47773: LD_VAR 0 7
47777: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47778: LD_INT 0
47780: PPUSH
47781: PPUSH
47782: PPUSH
47783: PPUSH
47784: PPUSH
47785: PPUSH
47786: PPUSH
47787: PPUSH
47788: PPUSH
47789: PPUSH
47790: PPUSH
47791: PPUSH
47792: PPUSH
47793: PPUSH
47794: PPUSH
47795: PPUSH
// result := false ;
47796: LD_ADDR_VAR 0 3
47800: PUSH
47801: LD_INT 0
47803: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47804: LD_VAR 0 1
47808: NOT
47809: PUSH
47810: LD_VAR 0 1
47814: PPUSH
47815: CALL_OW 266
47819: PUSH
47820: LD_INT 32
47822: PUSH
47823: LD_INT 33
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: IN
47830: NOT
47831: OR
47832: IFFALSE 47836
// exit ;
47834: GO 48945
// nat := GetNation ( tower ) ;
47836: LD_ADDR_VAR 0 12
47840: PUSH
47841: LD_VAR 0 1
47845: PPUSH
47846: CALL_OW 248
47850: ST_TO_ADDR
// side := GetSide ( tower ) ;
47851: LD_ADDR_VAR 0 16
47855: PUSH
47856: LD_VAR 0 1
47860: PPUSH
47861: CALL_OW 255
47865: ST_TO_ADDR
// x := GetX ( tower ) ;
47866: LD_ADDR_VAR 0 10
47870: PUSH
47871: LD_VAR 0 1
47875: PPUSH
47876: CALL_OW 250
47880: ST_TO_ADDR
// y := GetY ( tower ) ;
47881: LD_ADDR_VAR 0 11
47885: PUSH
47886: LD_VAR 0 1
47890: PPUSH
47891: CALL_OW 251
47895: ST_TO_ADDR
// if not x or not y then
47896: LD_VAR 0 10
47900: NOT
47901: PUSH
47902: LD_VAR 0 11
47906: NOT
47907: OR
47908: IFFALSE 47912
// exit ;
47910: GO 48945
// weapon := 0 ;
47912: LD_ADDR_VAR 0 18
47916: PUSH
47917: LD_INT 0
47919: ST_TO_ADDR
// fac_list := [ ] ;
47920: LD_ADDR_VAR 0 17
47924: PUSH
47925: EMPTY
47926: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47927: LD_ADDR_VAR 0 6
47931: PUSH
47932: LD_VAR 0 1
47936: PPUSH
47937: CALL_OW 274
47941: PPUSH
47942: LD_VAR 0 2
47946: PPUSH
47947: LD_INT 0
47949: PPUSH
47950: CALL 45516 0 3
47954: PPUSH
47955: LD_INT 30
47957: PUSH
47958: LD_INT 3
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PPUSH
47965: CALL_OW 72
47969: ST_TO_ADDR
// if not factories then
47970: LD_VAR 0 6
47974: NOT
47975: IFFALSE 47979
// exit ;
47977: GO 48945
// for i in factories do
47979: LD_ADDR_VAR 0 8
47983: PUSH
47984: LD_VAR 0 6
47988: PUSH
47989: FOR_IN
47990: IFFALSE 48015
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47992: LD_ADDR_VAR 0 17
47996: PUSH
47997: LD_VAR 0 17
48001: PUSH
48002: LD_VAR 0 8
48006: PPUSH
48007: CALL_OW 478
48011: UNION
48012: ST_TO_ADDR
48013: GO 47989
48015: POP
48016: POP
// if not fac_list then
48017: LD_VAR 0 17
48021: NOT
48022: IFFALSE 48026
// exit ;
48024: GO 48945
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48026: LD_ADDR_VAR 0 5
48030: PUSH
48031: LD_INT 4
48033: PUSH
48034: LD_INT 5
48036: PUSH
48037: LD_INT 9
48039: PUSH
48040: LD_INT 10
48042: PUSH
48043: LD_INT 6
48045: PUSH
48046: LD_INT 7
48048: PUSH
48049: LD_INT 11
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 27
48063: PUSH
48064: LD_INT 28
48066: PUSH
48067: LD_INT 26
48069: PUSH
48070: LD_INT 30
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 43
48081: PUSH
48082: LD_INT 44
48084: PUSH
48085: LD_INT 46
48087: PUSH
48088: LD_INT 45
48090: PUSH
48091: LD_INT 47
48093: PUSH
48094: LD_INT 49
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: PUSH
48110: LD_VAR 0 12
48114: ARRAY
48115: ST_TO_ADDR
// list := list isect fac_list ;
48116: LD_ADDR_VAR 0 5
48120: PUSH
48121: LD_VAR 0 5
48125: PUSH
48126: LD_VAR 0 17
48130: ISECT
48131: ST_TO_ADDR
// if not list then
48132: LD_VAR 0 5
48136: NOT
48137: IFFALSE 48141
// exit ;
48139: GO 48945
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48141: LD_VAR 0 12
48145: PUSH
48146: LD_INT 3
48148: EQUAL
48149: PUSH
48150: LD_INT 49
48152: PUSH
48153: LD_VAR 0 5
48157: IN
48158: AND
48159: PUSH
48160: LD_INT 31
48162: PPUSH
48163: LD_VAR 0 16
48167: PPUSH
48168: CALL_OW 321
48172: PUSH
48173: LD_INT 2
48175: EQUAL
48176: AND
48177: IFFALSE 48237
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48179: LD_INT 22
48181: PUSH
48182: LD_VAR 0 16
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 35
48193: PUSH
48194: LD_INT 49
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 91
48203: PUSH
48204: LD_VAR 0 1
48208: PUSH
48209: LD_INT 10
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: PPUSH
48222: CALL_OW 69
48226: NOT
48227: IFFALSE 48237
// weapon := ru_time_lapser ;
48229: LD_ADDR_VAR 0 18
48233: PUSH
48234: LD_INT 49
48236: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48237: LD_VAR 0 12
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: IN
48252: PUSH
48253: LD_INT 11
48255: PUSH
48256: LD_VAR 0 5
48260: IN
48261: PUSH
48262: LD_INT 30
48264: PUSH
48265: LD_VAR 0 5
48269: IN
48270: OR
48271: AND
48272: PUSH
48273: LD_INT 6
48275: PPUSH
48276: LD_VAR 0 16
48280: PPUSH
48281: CALL_OW 321
48285: PUSH
48286: LD_INT 2
48288: EQUAL
48289: AND
48290: IFFALSE 48455
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48292: LD_INT 22
48294: PUSH
48295: LD_VAR 0 16
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: LD_INT 35
48309: PUSH
48310: LD_INT 11
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 35
48319: PUSH
48320: LD_INT 30
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 91
48334: PUSH
48335: LD_VAR 0 1
48339: PUSH
48340: LD_INT 18
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: PPUSH
48353: CALL_OW 69
48357: NOT
48358: PUSH
48359: LD_INT 22
48361: PUSH
48362: LD_VAR 0 16
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 30
48376: PUSH
48377: LD_INT 32
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 30
48386: PUSH
48387: LD_INT 33
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 91
48401: PUSH
48402: LD_VAR 0 1
48406: PUSH
48407: LD_INT 12
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: PUSH
48420: EMPTY
48421: LIST
48422: PPUSH
48423: CALL_OW 69
48427: PUSH
48428: LD_INT 2
48430: GREATER
48431: AND
48432: IFFALSE 48455
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48434: LD_ADDR_VAR 0 18
48438: PUSH
48439: LD_INT 11
48441: PUSH
48442: LD_INT 30
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_VAR 0 12
48453: ARRAY
48454: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48455: LD_VAR 0 18
48459: NOT
48460: PUSH
48461: LD_INT 40
48463: PPUSH
48464: LD_VAR 0 16
48468: PPUSH
48469: CALL_OW 321
48473: PUSH
48474: LD_INT 2
48476: EQUAL
48477: AND
48478: PUSH
48479: LD_INT 7
48481: PUSH
48482: LD_VAR 0 5
48486: IN
48487: PUSH
48488: LD_INT 28
48490: PUSH
48491: LD_VAR 0 5
48495: IN
48496: OR
48497: PUSH
48498: LD_INT 45
48500: PUSH
48501: LD_VAR 0 5
48505: IN
48506: OR
48507: AND
48508: IFFALSE 48762
// begin hex := GetHexInfo ( x , y ) ;
48510: LD_ADDR_VAR 0 4
48514: PUSH
48515: LD_VAR 0 10
48519: PPUSH
48520: LD_VAR 0 11
48524: PPUSH
48525: CALL_OW 546
48529: ST_TO_ADDR
// if hex [ 1 ] then
48530: LD_VAR 0 4
48534: PUSH
48535: LD_INT 1
48537: ARRAY
48538: IFFALSE 48542
// exit ;
48540: GO 48945
// height := hex [ 2 ] ;
48542: LD_ADDR_VAR 0 15
48546: PUSH
48547: LD_VAR 0 4
48551: PUSH
48552: LD_INT 2
48554: ARRAY
48555: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48556: LD_ADDR_VAR 0 14
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 5
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// for i in tmp do
48579: LD_ADDR_VAR 0 8
48583: PUSH
48584: LD_VAR 0 14
48588: PUSH
48589: FOR_IN
48590: IFFALSE 48760
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48592: LD_ADDR_VAR 0 9
48596: PUSH
48597: LD_VAR 0 10
48601: PPUSH
48602: LD_VAR 0 8
48606: PPUSH
48607: LD_INT 5
48609: PPUSH
48610: CALL_OW 272
48614: PUSH
48615: LD_VAR 0 11
48619: PPUSH
48620: LD_VAR 0 8
48624: PPUSH
48625: LD_INT 5
48627: PPUSH
48628: CALL_OW 273
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48637: LD_VAR 0 9
48641: PUSH
48642: LD_INT 1
48644: ARRAY
48645: PPUSH
48646: LD_VAR 0 9
48650: PUSH
48651: LD_INT 2
48653: ARRAY
48654: PPUSH
48655: CALL_OW 488
48659: IFFALSE 48758
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48661: LD_ADDR_VAR 0 4
48665: PUSH
48666: LD_VAR 0 9
48670: PUSH
48671: LD_INT 1
48673: ARRAY
48674: PPUSH
48675: LD_VAR 0 9
48679: PUSH
48680: LD_INT 2
48682: ARRAY
48683: PPUSH
48684: CALL_OW 546
48688: ST_TO_ADDR
// if hex [ 1 ] then
48689: LD_VAR 0 4
48693: PUSH
48694: LD_INT 1
48696: ARRAY
48697: IFFALSE 48701
// continue ;
48699: GO 48589
// h := hex [ 2 ] ;
48701: LD_ADDR_VAR 0 13
48705: PUSH
48706: LD_VAR 0 4
48710: PUSH
48711: LD_INT 2
48713: ARRAY
48714: ST_TO_ADDR
// if h + 7 < height then
48715: LD_VAR 0 13
48719: PUSH
48720: LD_INT 7
48722: PLUS
48723: PUSH
48724: LD_VAR 0 15
48728: LESS
48729: IFFALSE 48758
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48731: LD_ADDR_VAR 0 18
48735: PUSH
48736: LD_INT 7
48738: PUSH
48739: LD_INT 28
48741: PUSH
48742: LD_INT 45
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: PUSH
48750: LD_VAR 0 12
48754: ARRAY
48755: ST_TO_ADDR
// break ;
48756: GO 48760
// end ; end ; end ;
48758: GO 48589
48760: POP
48761: POP
// end ; if not weapon then
48762: LD_VAR 0 18
48766: NOT
48767: IFFALSE 48827
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48769: LD_ADDR_VAR 0 5
48773: PUSH
48774: LD_VAR 0 5
48778: PUSH
48779: LD_INT 11
48781: PUSH
48782: LD_INT 30
48784: PUSH
48785: LD_INT 49
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: DIFF
48793: ST_TO_ADDR
// if not list then
48794: LD_VAR 0 5
48798: NOT
48799: IFFALSE 48803
// exit ;
48801: GO 48945
// weapon := list [ rand ( 1 , list ) ] ;
48803: LD_ADDR_VAR 0 18
48807: PUSH
48808: LD_VAR 0 5
48812: PUSH
48813: LD_INT 1
48815: PPUSH
48816: LD_VAR 0 5
48820: PPUSH
48821: CALL_OW 12
48825: ARRAY
48826: ST_TO_ADDR
// end ; if weapon then
48827: LD_VAR 0 18
48831: IFFALSE 48945
// begin tmp := CostOfWeapon ( weapon ) ;
48833: LD_ADDR_VAR 0 14
48837: PUSH
48838: LD_VAR 0 18
48842: PPUSH
48843: CALL_OW 451
48847: ST_TO_ADDR
// j := GetBase ( tower ) ;
48848: LD_ADDR_VAR 0 9
48852: PUSH
48853: LD_VAR 0 1
48857: PPUSH
48858: CALL_OW 274
48862: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48863: LD_VAR 0 9
48867: PPUSH
48868: LD_INT 1
48870: PPUSH
48871: CALL_OW 275
48875: PUSH
48876: LD_VAR 0 14
48880: PUSH
48881: LD_INT 1
48883: ARRAY
48884: GREATEREQUAL
48885: PUSH
48886: LD_VAR 0 9
48890: PPUSH
48891: LD_INT 2
48893: PPUSH
48894: CALL_OW 275
48898: PUSH
48899: LD_VAR 0 14
48903: PUSH
48904: LD_INT 2
48906: ARRAY
48907: GREATEREQUAL
48908: AND
48909: PUSH
48910: LD_VAR 0 9
48914: PPUSH
48915: LD_INT 3
48917: PPUSH
48918: CALL_OW 275
48922: PUSH
48923: LD_VAR 0 14
48927: PUSH
48928: LD_INT 3
48930: ARRAY
48931: GREATEREQUAL
48932: AND
48933: IFFALSE 48945
// result := weapon ;
48935: LD_ADDR_VAR 0 3
48939: PUSH
48940: LD_VAR 0 18
48944: ST_TO_ADDR
// end ; end ;
48945: LD_VAR 0 3
48949: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48950: LD_INT 0
48952: PPUSH
48953: PPUSH
// result := true ;
48954: LD_ADDR_VAR 0 3
48958: PUSH
48959: LD_INT 1
48961: ST_TO_ADDR
// if array1 = array2 then
48962: LD_VAR 0 1
48966: PUSH
48967: LD_VAR 0 2
48971: EQUAL
48972: IFFALSE 49032
// begin for i = 1 to array1 do
48974: LD_ADDR_VAR 0 4
48978: PUSH
48979: DOUBLE
48980: LD_INT 1
48982: DEC
48983: ST_TO_ADDR
48984: LD_VAR 0 1
48988: PUSH
48989: FOR_TO
48990: IFFALSE 49028
// if array1 [ i ] <> array2 [ i ] then
48992: LD_VAR 0 1
48996: PUSH
48997: LD_VAR 0 4
49001: ARRAY
49002: PUSH
49003: LD_VAR 0 2
49007: PUSH
49008: LD_VAR 0 4
49012: ARRAY
49013: NONEQUAL
49014: IFFALSE 49026
// begin result := false ;
49016: LD_ADDR_VAR 0 3
49020: PUSH
49021: LD_INT 0
49023: ST_TO_ADDR
// break ;
49024: GO 49028
// end ;
49026: GO 48989
49028: POP
49029: POP
// end else
49030: GO 49040
// result := false ;
49032: LD_ADDR_VAR 0 3
49036: PUSH
49037: LD_INT 0
49039: ST_TO_ADDR
// end ;
49040: LD_VAR 0 3
49044: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49045: LD_INT 0
49047: PPUSH
49048: PPUSH
// if not array1 or not array2 then
49049: LD_VAR 0 1
49053: NOT
49054: PUSH
49055: LD_VAR 0 2
49059: NOT
49060: OR
49061: IFFALSE 49065
// exit ;
49063: GO 49129
// result := true ;
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_INT 1
49072: ST_TO_ADDR
// for i = 1 to array1 do
49073: LD_ADDR_VAR 0 4
49077: PUSH
49078: DOUBLE
49079: LD_INT 1
49081: DEC
49082: ST_TO_ADDR
49083: LD_VAR 0 1
49087: PUSH
49088: FOR_TO
49089: IFFALSE 49127
// if array1 [ i ] <> array2 [ i ] then
49091: LD_VAR 0 1
49095: PUSH
49096: LD_VAR 0 4
49100: ARRAY
49101: PUSH
49102: LD_VAR 0 2
49106: PUSH
49107: LD_VAR 0 4
49111: ARRAY
49112: NONEQUAL
49113: IFFALSE 49125
// begin result := false ;
49115: LD_ADDR_VAR 0 3
49119: PUSH
49120: LD_INT 0
49122: ST_TO_ADDR
// break ;
49123: GO 49127
// end ;
49125: GO 49088
49127: POP
49128: POP
// end ;
49129: LD_VAR 0 3
49133: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49134: LD_INT 0
49136: PPUSH
49137: PPUSH
49138: PPUSH
// pom := GetBase ( fac ) ;
49139: LD_ADDR_VAR 0 5
49143: PUSH
49144: LD_VAR 0 1
49148: PPUSH
49149: CALL_OW 274
49153: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49154: LD_ADDR_VAR 0 4
49158: PUSH
49159: LD_VAR 0 2
49163: PUSH
49164: LD_INT 1
49166: ARRAY
49167: PPUSH
49168: LD_VAR 0 2
49172: PUSH
49173: LD_INT 2
49175: ARRAY
49176: PPUSH
49177: LD_VAR 0 2
49181: PUSH
49182: LD_INT 3
49184: ARRAY
49185: PPUSH
49186: LD_VAR 0 2
49190: PUSH
49191: LD_INT 4
49193: ARRAY
49194: PPUSH
49195: CALL_OW 449
49199: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49200: LD_ADDR_VAR 0 3
49204: PUSH
49205: LD_VAR 0 5
49209: PPUSH
49210: LD_INT 1
49212: PPUSH
49213: CALL_OW 275
49217: PUSH
49218: LD_VAR 0 4
49222: PUSH
49223: LD_INT 1
49225: ARRAY
49226: GREATEREQUAL
49227: PUSH
49228: LD_VAR 0 5
49232: PPUSH
49233: LD_INT 2
49235: PPUSH
49236: CALL_OW 275
49240: PUSH
49241: LD_VAR 0 4
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: GREATEREQUAL
49250: AND
49251: PUSH
49252: LD_VAR 0 5
49256: PPUSH
49257: LD_INT 3
49259: PPUSH
49260: CALL_OW 275
49264: PUSH
49265: LD_VAR 0 4
49269: PUSH
49270: LD_INT 3
49272: ARRAY
49273: GREATEREQUAL
49274: AND
49275: ST_TO_ADDR
// end ;
49276: LD_VAR 0 3
49280: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49281: LD_INT 0
49283: PPUSH
49284: PPUSH
49285: PPUSH
49286: PPUSH
// pom := GetBase ( building ) ;
49287: LD_ADDR_VAR 0 3
49291: PUSH
49292: LD_VAR 0 1
49296: PPUSH
49297: CALL_OW 274
49301: ST_TO_ADDR
// if not pom then
49302: LD_VAR 0 3
49306: NOT
49307: IFFALSE 49311
// exit ;
49309: GO 49481
// btype := GetBType ( building ) ;
49311: LD_ADDR_VAR 0 5
49315: PUSH
49316: LD_VAR 0 1
49320: PPUSH
49321: CALL_OW 266
49325: ST_TO_ADDR
// if btype = b_armoury then
49326: LD_VAR 0 5
49330: PUSH
49331: LD_INT 4
49333: EQUAL
49334: IFFALSE 49344
// btype := b_barracks ;
49336: LD_ADDR_VAR 0 5
49340: PUSH
49341: LD_INT 5
49343: ST_TO_ADDR
// if btype = b_depot then
49344: LD_VAR 0 5
49348: PUSH
49349: LD_INT 0
49351: EQUAL
49352: IFFALSE 49362
// btype := b_warehouse ;
49354: LD_ADDR_VAR 0 5
49358: PUSH
49359: LD_INT 1
49361: ST_TO_ADDR
// if btype = b_workshop then
49362: LD_VAR 0 5
49366: PUSH
49367: LD_INT 2
49369: EQUAL
49370: IFFALSE 49380
// btype := b_factory ;
49372: LD_ADDR_VAR 0 5
49376: PUSH
49377: LD_INT 3
49379: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49380: LD_ADDR_VAR 0 4
49384: PUSH
49385: LD_VAR 0 5
49389: PPUSH
49390: LD_VAR 0 1
49394: PPUSH
49395: CALL_OW 248
49399: PPUSH
49400: CALL_OW 450
49404: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49405: LD_ADDR_VAR 0 2
49409: PUSH
49410: LD_VAR 0 3
49414: PPUSH
49415: LD_INT 1
49417: PPUSH
49418: CALL_OW 275
49422: PUSH
49423: LD_VAR 0 4
49427: PUSH
49428: LD_INT 1
49430: ARRAY
49431: GREATEREQUAL
49432: PUSH
49433: LD_VAR 0 3
49437: PPUSH
49438: LD_INT 2
49440: PPUSH
49441: CALL_OW 275
49445: PUSH
49446: LD_VAR 0 4
49450: PUSH
49451: LD_INT 2
49453: ARRAY
49454: GREATEREQUAL
49455: AND
49456: PUSH
49457: LD_VAR 0 3
49461: PPUSH
49462: LD_INT 3
49464: PPUSH
49465: CALL_OW 275
49469: PUSH
49470: LD_VAR 0 4
49474: PUSH
49475: LD_INT 3
49477: ARRAY
49478: GREATEREQUAL
49479: AND
49480: ST_TO_ADDR
// end ;
49481: LD_VAR 0 2
49485: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49486: LD_INT 0
49488: PPUSH
49489: PPUSH
49490: PPUSH
// pom := GetBase ( building ) ;
49491: LD_ADDR_VAR 0 4
49495: PUSH
49496: LD_VAR 0 1
49500: PPUSH
49501: CALL_OW 274
49505: ST_TO_ADDR
// if not pom then
49506: LD_VAR 0 4
49510: NOT
49511: IFFALSE 49515
// exit ;
49513: GO 49616
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49515: LD_ADDR_VAR 0 5
49519: PUSH
49520: LD_VAR 0 2
49524: PPUSH
49525: LD_VAR 0 1
49529: PPUSH
49530: CALL_OW 248
49534: PPUSH
49535: CALL_OW 450
49539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49540: LD_ADDR_VAR 0 3
49544: PUSH
49545: LD_VAR 0 4
49549: PPUSH
49550: LD_INT 1
49552: PPUSH
49553: CALL_OW 275
49557: PUSH
49558: LD_VAR 0 5
49562: PUSH
49563: LD_INT 1
49565: ARRAY
49566: GREATEREQUAL
49567: PUSH
49568: LD_VAR 0 4
49572: PPUSH
49573: LD_INT 2
49575: PPUSH
49576: CALL_OW 275
49580: PUSH
49581: LD_VAR 0 5
49585: PUSH
49586: LD_INT 2
49588: ARRAY
49589: GREATEREQUAL
49590: AND
49591: PUSH
49592: LD_VAR 0 4
49596: PPUSH
49597: LD_INT 3
49599: PPUSH
49600: CALL_OW 275
49604: PUSH
49605: LD_VAR 0 5
49609: PUSH
49610: LD_INT 3
49612: ARRAY
49613: GREATEREQUAL
49614: AND
49615: ST_TO_ADDR
// end ;
49616: LD_VAR 0 3
49620: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49621: LD_INT 0
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
49630: PPUSH
49631: PPUSH
49632: PPUSH
49633: PPUSH
// result := false ;
49634: LD_ADDR_VAR 0 8
49638: PUSH
49639: LD_INT 0
49641: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49642: LD_VAR 0 5
49646: NOT
49647: PUSH
49648: LD_VAR 0 1
49652: NOT
49653: OR
49654: PUSH
49655: LD_VAR 0 2
49659: NOT
49660: OR
49661: PUSH
49662: LD_VAR 0 3
49666: NOT
49667: OR
49668: IFFALSE 49672
// exit ;
49670: GO 50486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49672: LD_ADDR_VAR 0 14
49676: PUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: LD_VAR 0 2
49686: PPUSH
49687: LD_VAR 0 3
49691: PPUSH
49692: LD_VAR 0 4
49696: PPUSH
49697: LD_VAR 0 5
49701: PUSH
49702: LD_INT 1
49704: ARRAY
49705: PPUSH
49706: CALL_OW 248
49710: PPUSH
49711: LD_INT 0
49713: PPUSH
49714: CALL 51719 0 6
49718: ST_TO_ADDR
// if not hexes then
49719: LD_VAR 0 14
49723: NOT
49724: IFFALSE 49728
// exit ;
49726: GO 50486
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49728: LD_ADDR_VAR 0 17
49732: PUSH
49733: LD_VAR 0 5
49737: PPUSH
49738: LD_INT 22
49740: PUSH
49741: LD_VAR 0 13
49745: PPUSH
49746: CALL_OW 255
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 30
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 30
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PPUSH
49787: CALL_OW 72
49791: ST_TO_ADDR
// for i = 1 to hexes do
49792: LD_ADDR_VAR 0 9
49796: PUSH
49797: DOUBLE
49798: LD_INT 1
49800: DEC
49801: ST_TO_ADDR
49802: LD_VAR 0 14
49806: PUSH
49807: FOR_TO
49808: IFFALSE 50484
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49810: LD_ADDR_VAR 0 13
49814: PUSH
49815: LD_VAR 0 14
49819: PUSH
49820: LD_VAR 0 9
49824: ARRAY
49825: PUSH
49826: LD_INT 1
49828: ARRAY
49829: PPUSH
49830: LD_VAR 0 14
49834: PUSH
49835: LD_VAR 0 9
49839: ARRAY
49840: PUSH
49841: LD_INT 2
49843: ARRAY
49844: PPUSH
49845: CALL_OW 428
49849: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49850: LD_VAR 0 14
49854: PUSH
49855: LD_VAR 0 9
49859: ARRAY
49860: PUSH
49861: LD_INT 1
49863: ARRAY
49864: PPUSH
49865: LD_VAR 0 14
49869: PUSH
49870: LD_VAR 0 9
49874: ARRAY
49875: PUSH
49876: LD_INT 2
49878: ARRAY
49879: PPUSH
49880: CALL_OW 351
49884: PUSH
49885: LD_VAR 0 14
49889: PUSH
49890: LD_VAR 0 9
49894: ARRAY
49895: PUSH
49896: LD_INT 1
49898: ARRAY
49899: PPUSH
49900: LD_VAR 0 14
49904: PUSH
49905: LD_VAR 0 9
49909: ARRAY
49910: PUSH
49911: LD_INT 2
49913: ARRAY
49914: PPUSH
49915: CALL_OW 488
49919: NOT
49920: OR
49921: PUSH
49922: LD_VAR 0 13
49926: PPUSH
49927: CALL_OW 247
49931: PUSH
49932: LD_INT 3
49934: EQUAL
49935: OR
49936: IFFALSE 49942
// exit ;
49938: POP
49939: POP
49940: GO 50486
// if not tmp then
49942: LD_VAR 0 13
49946: NOT
49947: IFFALSE 49951
// continue ;
49949: GO 49807
// result := true ;
49951: LD_ADDR_VAR 0 8
49955: PUSH
49956: LD_INT 1
49958: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49959: LD_VAR 0 6
49963: PUSH
49964: LD_VAR 0 13
49968: PPUSH
49969: CALL_OW 247
49973: PUSH
49974: LD_INT 2
49976: EQUAL
49977: AND
49978: PUSH
49979: LD_VAR 0 13
49983: PPUSH
49984: CALL_OW 263
49988: PUSH
49989: LD_INT 1
49991: EQUAL
49992: AND
49993: IFFALSE 50157
// begin if IsDrivenBy ( tmp ) then
49995: LD_VAR 0 13
49999: PPUSH
50000: CALL_OW 311
50004: IFFALSE 50008
// continue ;
50006: GO 49807
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50008: LD_VAR 0 6
50012: PPUSH
50013: LD_INT 3
50015: PUSH
50016: LD_INT 60
50018: PUSH
50019: EMPTY
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: LD_INT 55
50031: PUSH
50032: EMPTY
50033: LIST
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PPUSH
50043: CALL_OW 72
50047: IFFALSE 50155
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50049: LD_ADDR_VAR 0 18
50053: PUSH
50054: LD_VAR 0 6
50058: PPUSH
50059: LD_INT 3
50061: PUSH
50062: LD_INT 60
50064: PUSH
50065: EMPTY
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: LD_INT 55
50077: PUSH
50078: EMPTY
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PPUSH
50089: CALL_OW 72
50093: PUSH
50094: LD_INT 1
50096: ARRAY
50097: ST_TO_ADDR
// if IsInUnit ( driver ) then
50098: LD_VAR 0 18
50102: PPUSH
50103: CALL_OW 310
50107: IFFALSE 50118
// ComExit ( driver ) ;
50109: LD_VAR 0 18
50113: PPUSH
50114: CALL 75480 0 1
// AddComEnterUnit ( driver , tmp ) ;
50118: LD_VAR 0 18
50122: PPUSH
50123: LD_VAR 0 13
50127: PPUSH
50128: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50132: LD_VAR 0 18
50136: PPUSH
50137: LD_VAR 0 7
50141: PPUSH
50142: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50146: LD_VAR 0 18
50150: PPUSH
50151: CALL_OW 181
// end ; continue ;
50155: GO 49807
// end ; if not cleaners or not tmp in cleaners then
50157: LD_VAR 0 6
50161: NOT
50162: PUSH
50163: LD_VAR 0 13
50167: PUSH
50168: LD_VAR 0 6
50172: IN
50173: NOT
50174: OR
50175: IFFALSE 50482
// begin if dep then
50177: LD_VAR 0 17
50181: IFFALSE 50317
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50183: LD_ADDR_VAR 0 16
50187: PUSH
50188: LD_VAR 0 17
50192: PUSH
50193: LD_INT 1
50195: ARRAY
50196: PPUSH
50197: CALL_OW 250
50201: PPUSH
50202: LD_VAR 0 17
50206: PUSH
50207: LD_INT 1
50209: ARRAY
50210: PPUSH
50211: CALL_OW 254
50215: PPUSH
50216: LD_INT 5
50218: PPUSH
50219: CALL_OW 272
50223: PUSH
50224: LD_VAR 0 17
50228: PUSH
50229: LD_INT 1
50231: ARRAY
50232: PPUSH
50233: CALL_OW 251
50237: PPUSH
50238: LD_VAR 0 17
50242: PUSH
50243: LD_INT 1
50245: ARRAY
50246: PPUSH
50247: CALL_OW 254
50251: PPUSH
50252: LD_INT 5
50254: PPUSH
50255: CALL_OW 273
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50264: LD_VAR 0 16
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: PPUSH
50273: LD_VAR 0 16
50277: PUSH
50278: LD_INT 2
50280: ARRAY
50281: PPUSH
50282: CALL_OW 488
50286: IFFALSE 50317
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50288: LD_VAR 0 13
50292: PPUSH
50293: LD_VAR 0 16
50297: PUSH
50298: LD_INT 1
50300: ARRAY
50301: PPUSH
50302: LD_VAR 0 16
50306: PUSH
50307: LD_INT 2
50309: ARRAY
50310: PPUSH
50311: CALL_OW 111
// continue ;
50315: GO 49807
// end ; end ; r := GetDir ( tmp ) ;
50317: LD_ADDR_VAR 0 15
50321: PUSH
50322: LD_VAR 0 13
50326: PPUSH
50327: CALL_OW 254
50331: ST_TO_ADDR
// if r = 5 then
50332: LD_VAR 0 15
50336: PUSH
50337: LD_INT 5
50339: EQUAL
50340: IFFALSE 50350
// r := 0 ;
50342: LD_ADDR_VAR 0 15
50346: PUSH
50347: LD_INT 0
50349: ST_TO_ADDR
// for j = r to 5 do
50350: LD_ADDR_VAR 0 10
50354: PUSH
50355: DOUBLE
50356: LD_VAR 0 15
50360: DEC
50361: ST_TO_ADDR
50362: LD_INT 5
50364: PUSH
50365: FOR_TO
50366: IFFALSE 50480
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50368: LD_ADDR_VAR 0 11
50372: PUSH
50373: LD_VAR 0 13
50377: PPUSH
50378: CALL_OW 250
50382: PPUSH
50383: LD_VAR 0 10
50387: PPUSH
50388: LD_INT 2
50390: PPUSH
50391: CALL_OW 272
50395: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50396: LD_ADDR_VAR 0 12
50400: PUSH
50401: LD_VAR 0 13
50405: PPUSH
50406: CALL_OW 251
50410: PPUSH
50411: LD_VAR 0 10
50415: PPUSH
50416: LD_INT 2
50418: PPUSH
50419: CALL_OW 273
50423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50424: LD_VAR 0 11
50428: PPUSH
50429: LD_VAR 0 12
50433: PPUSH
50434: CALL_OW 488
50438: PUSH
50439: LD_VAR 0 11
50443: PPUSH
50444: LD_VAR 0 12
50448: PPUSH
50449: CALL_OW 428
50453: NOT
50454: AND
50455: IFFALSE 50478
// begin ComMoveXY ( tmp , _x , _y ) ;
50457: LD_VAR 0 13
50461: PPUSH
50462: LD_VAR 0 11
50466: PPUSH
50467: LD_VAR 0 12
50471: PPUSH
50472: CALL_OW 111
// break ;
50476: GO 50480
// end ; end ;
50478: GO 50365
50480: POP
50481: POP
// end ; end ;
50482: GO 49807
50484: POP
50485: POP
// end ;
50486: LD_VAR 0 8
50490: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50491: LD_INT 0
50493: PPUSH
// result := true ;
50494: LD_ADDR_VAR 0 3
50498: PUSH
50499: LD_INT 1
50501: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50502: LD_VAR 0 2
50506: PUSH
50507: LD_INT 24
50509: DOUBLE
50510: EQUAL
50511: IFTRUE 50521
50513: LD_INT 33
50515: DOUBLE
50516: EQUAL
50517: IFTRUE 50521
50519: GO 50546
50521: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50522: LD_ADDR_VAR 0 3
50526: PUSH
50527: LD_INT 32
50529: PPUSH
50530: LD_VAR 0 1
50534: PPUSH
50535: CALL_OW 321
50539: PUSH
50540: LD_INT 2
50542: EQUAL
50543: ST_TO_ADDR
50544: GO 50862
50546: LD_INT 20
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50554
50552: GO 50579
50554: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50555: LD_ADDR_VAR 0 3
50559: PUSH
50560: LD_INT 6
50562: PPUSH
50563: LD_VAR 0 1
50567: PPUSH
50568: CALL_OW 321
50572: PUSH
50573: LD_INT 2
50575: EQUAL
50576: ST_TO_ADDR
50577: GO 50862
50579: LD_INT 22
50581: DOUBLE
50582: EQUAL
50583: IFTRUE 50593
50585: LD_INT 36
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50593
50591: GO 50618
50593: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50594: LD_ADDR_VAR 0 3
50598: PUSH
50599: LD_INT 15
50601: PPUSH
50602: LD_VAR 0 1
50606: PPUSH
50607: CALL_OW 321
50611: PUSH
50612: LD_INT 2
50614: EQUAL
50615: ST_TO_ADDR
50616: GO 50862
50618: LD_INT 30
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50626
50624: GO 50651
50626: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50627: LD_ADDR_VAR 0 3
50631: PUSH
50632: LD_INT 20
50634: PPUSH
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 321
50644: PUSH
50645: LD_INT 2
50647: EQUAL
50648: ST_TO_ADDR
50649: GO 50862
50651: LD_INT 28
50653: DOUBLE
50654: EQUAL
50655: IFTRUE 50665
50657: LD_INT 21
50659: DOUBLE
50660: EQUAL
50661: IFTRUE 50665
50663: GO 50690
50665: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50666: LD_ADDR_VAR 0 3
50670: PUSH
50671: LD_INT 21
50673: PPUSH
50674: LD_VAR 0 1
50678: PPUSH
50679: CALL_OW 321
50683: PUSH
50684: LD_INT 2
50686: EQUAL
50687: ST_TO_ADDR
50688: GO 50862
50690: LD_INT 16
50692: DOUBLE
50693: EQUAL
50694: IFTRUE 50698
50696: GO 50723
50698: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50699: LD_ADDR_VAR 0 3
50703: PUSH
50704: LD_INT 84
50706: PPUSH
50707: LD_VAR 0 1
50711: PPUSH
50712: CALL_OW 321
50716: PUSH
50717: LD_INT 2
50719: EQUAL
50720: ST_TO_ADDR
50721: GO 50862
50723: LD_INT 19
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50737
50729: LD_INT 23
50731: DOUBLE
50732: EQUAL
50733: IFTRUE 50737
50735: GO 50762
50737: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50738: LD_ADDR_VAR 0 3
50742: PUSH
50743: LD_INT 83
50745: PPUSH
50746: LD_VAR 0 1
50750: PPUSH
50751: CALL_OW 321
50755: PUSH
50756: LD_INT 2
50758: EQUAL
50759: ST_TO_ADDR
50760: GO 50862
50762: LD_INT 17
50764: DOUBLE
50765: EQUAL
50766: IFTRUE 50770
50768: GO 50795
50770: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50771: LD_ADDR_VAR 0 3
50775: PUSH
50776: LD_INT 39
50778: PPUSH
50779: LD_VAR 0 1
50783: PPUSH
50784: CALL_OW 321
50788: PUSH
50789: LD_INT 2
50791: EQUAL
50792: ST_TO_ADDR
50793: GO 50862
50795: LD_INT 18
50797: DOUBLE
50798: EQUAL
50799: IFTRUE 50803
50801: GO 50828
50803: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50804: LD_ADDR_VAR 0 3
50808: PUSH
50809: LD_INT 40
50811: PPUSH
50812: LD_VAR 0 1
50816: PPUSH
50817: CALL_OW 321
50821: PUSH
50822: LD_INT 2
50824: EQUAL
50825: ST_TO_ADDR
50826: GO 50862
50828: LD_INT 27
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50836
50834: GO 50861
50836: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50837: LD_ADDR_VAR 0 3
50841: PUSH
50842: LD_INT 35
50844: PPUSH
50845: LD_VAR 0 1
50849: PPUSH
50850: CALL_OW 321
50854: PUSH
50855: LD_INT 2
50857: EQUAL
50858: ST_TO_ADDR
50859: GO 50862
50861: POP
// end ;
50862: LD_VAR 0 3
50866: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50867: LD_INT 0
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
50876: PPUSH
50877: PPUSH
50878: PPUSH
50879: PPUSH
// result := false ;
50880: LD_ADDR_VAR 0 6
50884: PUSH
50885: LD_INT 0
50887: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50888: LD_VAR 0 1
50892: NOT
50893: PUSH
50894: LD_VAR 0 1
50898: PPUSH
50899: CALL_OW 266
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: IN
50914: NOT
50915: OR
50916: PUSH
50917: LD_VAR 0 2
50921: NOT
50922: OR
50923: PUSH
50924: LD_VAR 0 5
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: LD_INT 5
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: IN
50955: NOT
50956: OR
50957: PUSH
50958: LD_VAR 0 3
50962: PPUSH
50963: LD_VAR 0 4
50967: PPUSH
50968: CALL_OW 488
50972: NOT
50973: OR
50974: IFFALSE 50978
// exit ;
50976: GO 51714
// side := GetSide ( depot ) ;
50978: LD_ADDR_VAR 0 9
50982: PUSH
50983: LD_VAR 0 1
50987: PPUSH
50988: CALL_OW 255
50992: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50993: LD_VAR 0 9
50997: PPUSH
50998: LD_VAR 0 2
51002: PPUSH
51003: CALL 50491 0 2
51007: NOT
51008: IFFALSE 51012
// exit ;
51010: GO 51714
// pom := GetBase ( depot ) ;
51012: LD_ADDR_VAR 0 10
51016: PUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: CALL_OW 274
51026: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51027: LD_ADDR_VAR 0 11
51031: PUSH
51032: LD_VAR 0 2
51036: PPUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: CALL_OW 248
51046: PPUSH
51047: CALL_OW 450
51051: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51052: LD_VAR 0 10
51056: PPUSH
51057: LD_INT 1
51059: PPUSH
51060: CALL_OW 275
51064: PUSH
51065: LD_VAR 0 11
51069: PUSH
51070: LD_INT 1
51072: ARRAY
51073: GREATEREQUAL
51074: PUSH
51075: LD_VAR 0 10
51079: PPUSH
51080: LD_INT 2
51082: PPUSH
51083: CALL_OW 275
51087: PUSH
51088: LD_VAR 0 11
51092: PUSH
51093: LD_INT 2
51095: ARRAY
51096: GREATEREQUAL
51097: AND
51098: PUSH
51099: LD_VAR 0 10
51103: PPUSH
51104: LD_INT 3
51106: PPUSH
51107: CALL_OW 275
51111: PUSH
51112: LD_VAR 0 11
51116: PUSH
51117: LD_INT 3
51119: ARRAY
51120: GREATEREQUAL
51121: AND
51122: NOT
51123: IFFALSE 51127
// exit ;
51125: GO 51714
// if GetBType ( depot ) = b_depot then
51127: LD_VAR 0 1
51131: PPUSH
51132: CALL_OW 266
51136: PUSH
51137: LD_INT 0
51139: EQUAL
51140: IFFALSE 51152
// dist := 28 else
51142: LD_ADDR_VAR 0 14
51146: PUSH
51147: LD_INT 28
51149: ST_TO_ADDR
51150: GO 51160
// dist := 36 ;
51152: LD_ADDR_VAR 0 14
51156: PUSH
51157: LD_INT 36
51159: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51160: LD_VAR 0 1
51164: PPUSH
51165: LD_VAR 0 3
51169: PPUSH
51170: LD_VAR 0 4
51174: PPUSH
51175: CALL_OW 297
51179: PUSH
51180: LD_VAR 0 14
51184: GREATER
51185: IFFALSE 51189
// exit ;
51187: GO 51714
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51189: LD_ADDR_VAR 0 12
51193: PUSH
51194: LD_VAR 0 2
51198: PPUSH
51199: LD_VAR 0 3
51203: PPUSH
51204: LD_VAR 0 4
51208: PPUSH
51209: LD_VAR 0 5
51213: PPUSH
51214: LD_VAR 0 1
51218: PPUSH
51219: CALL_OW 248
51223: PPUSH
51224: LD_INT 0
51226: PPUSH
51227: CALL 51719 0 6
51231: ST_TO_ADDR
// if not hexes then
51232: LD_VAR 0 12
51236: NOT
51237: IFFALSE 51241
// exit ;
51239: GO 51714
// hex := GetHexInfo ( x , y ) ;
51241: LD_ADDR_VAR 0 15
51245: PUSH
51246: LD_VAR 0 3
51250: PPUSH
51251: LD_VAR 0 4
51255: PPUSH
51256: CALL_OW 546
51260: ST_TO_ADDR
// if hex [ 1 ] then
51261: LD_VAR 0 15
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: IFFALSE 51273
// exit ;
51271: GO 51714
// height := hex [ 2 ] ;
51273: LD_ADDR_VAR 0 13
51277: PUSH
51278: LD_VAR 0 15
51282: PUSH
51283: LD_INT 2
51285: ARRAY
51286: ST_TO_ADDR
// for i = 1 to hexes do
51287: LD_ADDR_VAR 0 7
51291: PUSH
51292: DOUBLE
51293: LD_INT 1
51295: DEC
51296: ST_TO_ADDR
51297: LD_VAR 0 12
51301: PUSH
51302: FOR_TO
51303: IFFALSE 51633
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51305: LD_VAR 0 12
51309: PUSH
51310: LD_VAR 0 7
51314: ARRAY
51315: PUSH
51316: LD_INT 1
51318: ARRAY
51319: PPUSH
51320: LD_VAR 0 12
51324: PUSH
51325: LD_VAR 0 7
51329: ARRAY
51330: PUSH
51331: LD_INT 2
51333: ARRAY
51334: PPUSH
51335: CALL_OW 488
51339: NOT
51340: PUSH
51341: LD_VAR 0 12
51345: PUSH
51346: LD_VAR 0 7
51350: ARRAY
51351: PUSH
51352: LD_INT 1
51354: ARRAY
51355: PPUSH
51356: LD_VAR 0 12
51360: PUSH
51361: LD_VAR 0 7
51365: ARRAY
51366: PUSH
51367: LD_INT 2
51369: ARRAY
51370: PPUSH
51371: CALL_OW 428
51375: PUSH
51376: LD_INT 0
51378: GREATER
51379: OR
51380: PUSH
51381: LD_VAR 0 12
51385: PUSH
51386: LD_VAR 0 7
51390: ARRAY
51391: PUSH
51392: LD_INT 1
51394: ARRAY
51395: PPUSH
51396: LD_VAR 0 12
51400: PUSH
51401: LD_VAR 0 7
51405: ARRAY
51406: PUSH
51407: LD_INT 2
51409: ARRAY
51410: PPUSH
51411: CALL_OW 351
51415: OR
51416: IFFALSE 51422
// exit ;
51418: POP
51419: POP
51420: GO 51714
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51422: LD_ADDR_VAR 0 8
51426: PUSH
51427: LD_VAR 0 12
51431: PUSH
51432: LD_VAR 0 7
51436: ARRAY
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: PPUSH
51442: LD_VAR 0 12
51446: PUSH
51447: LD_VAR 0 7
51451: ARRAY
51452: PUSH
51453: LD_INT 2
51455: ARRAY
51456: PPUSH
51457: CALL_OW 546
51461: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51462: LD_VAR 0 8
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PUSH
51471: LD_VAR 0 8
51475: PUSH
51476: LD_INT 2
51478: ARRAY
51479: PUSH
51480: LD_VAR 0 13
51484: PUSH
51485: LD_INT 2
51487: PLUS
51488: GREATER
51489: OR
51490: PUSH
51491: LD_VAR 0 8
51495: PUSH
51496: LD_INT 2
51498: ARRAY
51499: PUSH
51500: LD_VAR 0 13
51504: PUSH
51505: LD_INT 2
51507: MINUS
51508: LESS
51509: OR
51510: PUSH
51511: LD_VAR 0 8
51515: PUSH
51516: LD_INT 3
51518: ARRAY
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 8
51525: PUSH
51526: LD_INT 9
51528: PUSH
51529: LD_INT 10
51531: PUSH
51532: LD_INT 11
51534: PUSH
51535: LD_INT 12
51537: PUSH
51538: LD_INT 13
51540: PUSH
51541: LD_INT 16
51543: PUSH
51544: LD_INT 17
51546: PUSH
51547: LD_INT 18
51549: PUSH
51550: LD_INT 19
51552: PUSH
51553: LD_INT 20
51555: PUSH
51556: LD_INT 21
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: IN
51574: NOT
51575: OR
51576: PUSH
51577: LD_VAR 0 8
51581: PUSH
51582: LD_INT 5
51584: ARRAY
51585: NOT
51586: OR
51587: PUSH
51588: LD_VAR 0 8
51592: PUSH
51593: LD_INT 6
51595: ARRAY
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 7
51605: PUSH
51606: LD_INT 9
51608: PUSH
51609: LD_INT 10
51611: PUSH
51612: LD_INT 11
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: IN
51623: NOT
51624: OR
51625: IFFALSE 51631
// exit ;
51627: POP
51628: POP
51629: GO 51714
// end ;
51631: GO 51302
51633: POP
51634: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51635: LD_VAR 0 9
51639: PPUSH
51640: LD_VAR 0 3
51644: PPUSH
51645: LD_VAR 0 4
51649: PPUSH
51650: LD_INT 20
51652: PPUSH
51653: CALL 43666 0 4
51657: PUSH
51658: LD_INT 4
51660: ARRAY
51661: IFFALSE 51665
// exit ;
51663: GO 51714
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51665: LD_VAR 0 2
51669: PUSH
51670: LD_INT 29
51672: PUSH
51673: LD_INT 30
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: IN
51680: PUSH
51681: LD_VAR 0 3
51685: PPUSH
51686: LD_VAR 0 4
51690: PPUSH
51691: LD_VAR 0 9
51695: PPUSH
51696: CALL_OW 440
51700: NOT
51701: AND
51702: IFFALSE 51706
// exit ;
51704: GO 51714
// result := true ;
51706: LD_ADDR_VAR 0 6
51710: PUSH
51711: LD_INT 1
51713: ST_TO_ADDR
// end ;
51714: LD_VAR 0 6
51718: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51719: LD_INT 0
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
51735: PPUSH
51736: PPUSH
51737: PPUSH
51738: PPUSH
51739: PPUSH
51740: PPUSH
51741: PPUSH
51742: PPUSH
51743: PPUSH
51744: PPUSH
51745: PPUSH
51746: PPUSH
51747: PPUSH
51748: PPUSH
51749: PPUSH
51750: PPUSH
51751: PPUSH
51752: PPUSH
51753: PPUSH
51754: PPUSH
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
51760: PPUSH
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
51766: PPUSH
51767: PPUSH
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
51775: PPUSH
51776: PPUSH
51777: PPUSH
51778: PPUSH
// result = [ ] ;
51779: LD_ADDR_VAR 0 7
51783: PUSH
51784: EMPTY
51785: ST_TO_ADDR
// temp_list = [ ] ;
51786: LD_ADDR_VAR 0 9
51790: PUSH
51791: EMPTY
51792: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51793: LD_VAR 0 4
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: LD_INT 5
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: IN
51824: NOT
51825: PUSH
51826: LD_VAR 0 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: IN
51841: PUSH
51842: LD_VAR 0 5
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: IN
51861: NOT
51862: AND
51863: OR
51864: IFFALSE 51868
// exit ;
51866: GO 70259
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51868: LD_VAR 0 1
51872: PUSH
51873: LD_INT 6
51875: PUSH
51876: LD_INT 7
51878: PUSH
51879: LD_INT 8
51881: PUSH
51882: LD_INT 13
51884: PUSH
51885: LD_INT 12
51887: PUSH
51888: LD_INT 15
51890: PUSH
51891: LD_INT 11
51893: PUSH
51894: LD_INT 14
51896: PUSH
51897: LD_INT 10
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: IN
51911: IFFALSE 51921
// btype = b_lab ;
51913: LD_ADDR_VAR 0 1
51917: PUSH
51918: LD_INT 6
51920: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51921: LD_VAR 0 6
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: IN
51940: NOT
51941: PUSH
51942: LD_VAR 0 1
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: LD_INT 6
51961: PUSH
51962: LD_INT 36
51964: PUSH
51965: LD_INT 4
51967: PUSH
51968: LD_INT 5
51970: PUSH
51971: LD_INT 31
51973: PUSH
51974: LD_INT 32
51976: PUSH
51977: LD_INT 33
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: IN
51993: NOT
51994: PUSH
51995: LD_VAR 0 6
51999: PUSH
52000: LD_INT 1
52002: EQUAL
52003: AND
52004: OR
52005: PUSH
52006: LD_VAR 0 1
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: IN
52021: NOT
52022: PUSH
52023: LD_VAR 0 6
52027: PUSH
52028: LD_INT 2
52030: EQUAL
52031: AND
52032: OR
52033: IFFALSE 52043
// mode = 0 ;
52035: LD_ADDR_VAR 0 6
52039: PUSH
52040: LD_INT 0
52042: ST_TO_ADDR
// case mode of 0 :
52043: LD_VAR 0 6
52047: PUSH
52048: LD_INT 0
52050: DOUBLE
52051: EQUAL
52052: IFTRUE 52056
52054: GO 63509
52056: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52057: LD_ADDR_VAR 0 11
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52250: LD_ADDR_VAR 0 12
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52446: LD_ADDR_VAR 0 13
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52645: LD_ADDR_VAR 0 14
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52841: LD_ADDR_VAR 0 15
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53034: LD_ADDR_VAR 0 16
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53227: LD_ADDR_VAR 0 17
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53457: LD_ADDR_VAR 0 18
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53687: LD_ADDR_VAR 0 19
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53917: LD_ADDR_VAR 0 20
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54147: LD_ADDR_VAR 0 21
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54377: LD_ADDR_VAR 0 22
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54607: LD_ADDR_VAR 0 23
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54887: LD_ADDR_VAR 0 24
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55163: LD_ADDR_VAR 0 25
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55437: LD_ADDR_VAR 0 26
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55713: LD_ADDR_VAR 0 27
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55993: LD_ADDR_VAR 0 28
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56275: LD_ADDR_VAR 0 29
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56554: LD_ADDR_VAR 0 30
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56832: LD_ADDR_VAR 0 31
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57110: LD_ADDR_VAR 0 32
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57388: LD_ADDR_VAR 0 33
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57667: LD_ADDR_VAR 0 34
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57947: LD_ADDR_VAR 0 35
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58059: LD_ADDR_VAR 0 36
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58171: LD_ADDR_VAR 0 37
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58283: LD_ADDR_VAR 0 38
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58395: LD_ADDR_VAR 0 39
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58507: LD_ADDR_VAR 0 40
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58619: LD_ADDR_VAR 0 41
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58969: LD_ADDR_VAR 0 42
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 3
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59319: LD_ADDR_VAR 0 43
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: LD_INT 3
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59667: LD_ADDR_VAR 0 44
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: LD_INT 3
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60017: LD_ADDR_VAR 0 45
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: LD_INT 3
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60367: LD_ADDR_VAR 0 46
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 3
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 3
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60715: LD_ADDR_VAR 0 47
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60866: LD_ADDR_VAR 0 48
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61013: LD_ADDR_VAR 0 49
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61157: LD_ADDR_VAR 0 50
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61301: LD_ADDR_VAR 0 51
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61448: LD_ADDR_VAR 0 52
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61599: LD_ADDR_VAR 0 53
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61829: LD_ADDR_VAR 0 54
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62059: LD_ADDR_VAR 0 55
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62289: LD_ADDR_VAR 0 56
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: NEG
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62519: LD_ADDR_VAR 0 57
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62749: LD_ADDR_VAR 0 58
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 2
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 2
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: NEG
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62979: LD_ADDR_VAR 0 59
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63067: LD_ADDR_VAR 0 60
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63155: LD_ADDR_VAR 0 61
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63243: LD_ADDR_VAR 0 62
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63331: LD_ADDR_VAR 0 63
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63419: LD_ADDR_VAR 0 64
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// end ; 1 :
63507: GO 69404
63509: LD_INT 1
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63517
63515: GO 66140
63517: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63518: LD_ADDR_VAR 0 11
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: LD_INT 3
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63562: LD_ADDR_VAR 0 12
63566: PUSH
63567: LD_INT 2
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 3
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63603: LD_ADDR_VAR 0 13
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63643: LD_ADDR_VAR 0 14
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63684: LD_ADDR_VAR 0 15
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 3
63702: NEG
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 3
63713: NEG
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63728: LD_ADDR_VAR 0 16
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: NEG
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: NEG
63760: PUSH
63761: LD_INT 3
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63774: LD_ADDR_VAR 0 17
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: LD_INT 3
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 3
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63818: LD_ADDR_VAR 0 18
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63859: LD_ADDR_VAR 0 19
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 3
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 3
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63899: LD_ADDR_VAR 0 20
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 3
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 3
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63940: LD_ADDR_VAR 0 21
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63984: LD_ADDR_VAR 0 22
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: LD_INT 3
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64030: LD_ADDR_VAR 0 23
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 3
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64074: LD_ADDR_VAR 0 24
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 3
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 4
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64115: LD_ADDR_VAR 0 25
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64155: LD_ADDR_VAR 0 26
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 4
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64196: LD_ADDR_VAR 0 27
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 4
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64240: LD_ADDR_VAR 0 28
64244: PUSH
64245: LD_INT 3
64247: NEG
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: LD_INT 4
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 4
64271: NEG
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: LIST
64285: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64286: LD_ADDR_VAR 0 29
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 3
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 4
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 5
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 5
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 4
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 6
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: LD_INT 6
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 5
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64441: LD_ADDR_VAR 0 30
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 3
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 3
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 4
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 4
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 5
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 5
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 5
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 6
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 6
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64584: LD_ADDR_VAR 0 31
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 4
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 4
64631: PUSH
64632: LD_INT 4
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 3
64641: PUSH
64642: LD_INT 4
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 5
64651: PUSH
64652: LD_INT 4
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 5
64661: PUSH
64662: LD_INT 5
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 4
64671: PUSH
64672: LD_INT 5
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 6
64681: PUSH
64682: LD_INT 5
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 6
64691: PUSH
64692: LD_INT 6
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 5
64701: PUSH
64702: LD_INT 6
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64723: LD_ADDR_VAR 0 32
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 3
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 4
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 4
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: LD_INT 3
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 5
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 5
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 4
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 6
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 6
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 5
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64866: LD_ADDR_VAR 0 33
64870: PUSH
64871: LD_INT 2
64873: NEG
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 3
64907: NEG
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 4
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 5
64952: NEG
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 5
64963: NEG
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 5
64975: NEG
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 6
64986: NEG
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 6
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65021: LD_ADDR_VAR 0 34
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 3
65040: NEG
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 3
65052: NEG
65053: PUSH
65054: LD_INT 3
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: NEG
65065: PUSH
65066: LD_INT 4
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 4
65076: NEG
65077: PUSH
65078: LD_INT 3
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 4
65088: NEG
65089: PUSH
65090: LD_INT 4
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 4
65100: NEG
65101: PUSH
65102: LD_INT 5
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 5
65112: NEG
65113: PUSH
65114: LD_INT 4
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 5
65124: NEG
65125: PUSH
65126: LD_INT 5
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 5
65136: NEG
65137: PUSH
65138: LD_INT 6
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 6
65148: NEG
65149: PUSH
65150: LD_INT 5
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 6
65160: NEG
65161: PUSH
65162: LD_INT 6
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65184: LD_ADDR_VAR 0 41
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 3
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65228: LD_ADDR_VAR 0 42
65232: PUSH
65233: LD_INT 2
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 2
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 3
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65269: LD_ADDR_VAR 0 43
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 3
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65309: LD_ADDR_VAR 0 44
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 3
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65350: LD_ADDR_VAR 0 45
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 2
65368: NEG
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 3
65379: NEG
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65394: LD_ADDR_VAR 0 46
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: LD_INT 3
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 3
65425: NEG
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65440: LD_ADDR_VAR 0 47
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: LD_INT 3
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65473: LD_ADDR_VAR 0 48
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65504: LD_ADDR_VAR 0 49
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 3
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65533: LD_ADDR_VAR 0 50
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65562: LD_ADDR_VAR 0 51
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65593: LD_ADDR_VAR 0 52
65597: PUSH
65598: LD_INT 3
65600: NEG
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 3
65612: NEG
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65626: LD_ADDR_VAR 0 53
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: LIST
65669: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65670: LD_ADDR_VAR 0 54
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65711: LD_ADDR_VAR 0 55
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 3
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65751: LD_ADDR_VAR 0 56
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65792: LD_ADDR_VAR 0 57
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 3
65810: NEG
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65836: LD_ADDR_VAR 0 58
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 3
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 3
65855: NEG
65856: PUSH
65857: LD_INT 2
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: LD_INT 3
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65882: LD_ADDR_VAR 0 59
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 2
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65926: LD_ADDR_VAR 0 60
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65967: LD_ADDR_VAR 0 61
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 2
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66007: LD_ADDR_VAR 0 62
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66048: LD_ADDR_VAR 0 63
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: LD_INT 1
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: LIST
66091: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66092: LD_ADDR_VAR 0 64
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// end ; 2 :
66138: GO 69404
66140: LD_INT 2
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66148
66146: GO 69403
66148: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66149: LD_ADDR_VAR 0 29
66153: PUSH
66154: LD_INT 4
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 4
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 5
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 5
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 4
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 3
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 3
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 5
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 3
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 4
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 4
66279: PUSH
66280: LD_INT 4
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 3
66289: PUSH
66290: LD_INT 4
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 4
66319: PUSH
66320: LD_INT 2
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 2
66329: PUSH
66330: LD_INT 4
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 4
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 3
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: LD_INT 4
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 5
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: LD_INT 5
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: LD_INT 4
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 5
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 3
66432: NEG
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: NEG
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: NEG
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 3
66477: NEG
66478: PUSH
66479: LD_INT 1
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 4
66488: NEG
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 4
66499: NEG
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 4
66511: NEG
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PUSH
66525: LD_INT 2
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 4
66534: NEG
66535: PUSH
66536: LD_INT 4
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: LD_INT 5
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 3
66558: NEG
66559: PUSH
66560: LD_INT 4
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 4
66582: NEG
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 5
66594: NEG
66595: PUSH
66596: LD_INT 4
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 5
66606: NEG
66607: PUSH
66608: LD_INT 5
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 3
66618: NEG
66619: PUSH
66620: LD_INT 5
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 5
66630: NEG
66631: PUSH
66632: LD_INT 3
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66687: LD_ADDR_VAR 0 30
66691: PUSH
66692: LD_INT 4
66694: PUSH
66695: LD_INT 4
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 4
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 5
66714: PUSH
66715: LD_INT 4
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 5
66724: PUSH
66725: LD_INT 5
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 4
66734: PUSH
66735: LD_INT 5
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 4
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: LD_INT 3
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 5
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: LD_INT 5
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: LD_INT 4
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: LD_INT 4
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: LD_INT 3
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 2
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 2
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 4
66877: NEG
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 4
66888: NEG
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 4
66922: NEG
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 5
66933: NEG
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 5
66944: NEG
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 5
66956: NEG
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 3
66979: NEG
66980: PUSH
66981: LD_INT 3
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: NEG
66992: PUSH
66993: LD_INT 4
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: LD_INT 3
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: LD_INT 2
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 3
67027: NEG
67028: PUSH
67029: LD_INT 2
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 4
67039: NEG
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 4
67051: NEG
67052: PUSH
67053: LD_INT 4
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: LD_INT 4
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 4
67075: NEG
67076: PUSH
67077: LD_INT 2
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: LD_INT 4
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 5
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: LD_INT 4
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: LD_INT 3
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: LD_INT 4
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: LD_INT 5
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: LD_INT 5
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67234: LD_ADDR_VAR 0 31
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: LD_INT 3
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: LD_INT 4
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: LD_INT 5
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 5
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 4
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 2
67313: PUSH
67314: LD_INT 5
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 2
67357: NEG
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: NEG
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: NEG
67380: PUSH
67381: LD_INT 1
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: NEG
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 4
67401: NEG
67402: PUSH
67403: LD_INT 1
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 4
67413: NEG
67414: PUSH
67415: LD_INT 2
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: LD_INT 2
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 4
67436: NEG
67437: PUSH
67438: LD_INT 4
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 4
67448: NEG
67449: PUSH
67450: LD_INT 5
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 3
67460: NEG
67461: PUSH
67462: LD_INT 4
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 5
67496: NEG
67497: PUSH
67498: LD_INT 4
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 5
67508: NEG
67509: PUSH
67510: LD_INT 5
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: LD_INT 5
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 5
67532: NEG
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 3
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: LD_INT 4
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 2
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 1
67611: NEG
67612: PUSH
67613: LD_INT 4
67615: NEG
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 2
67623: PUSH
67624: LD_INT 2
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 2
67634: NEG
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 5
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 5
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 4
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: PUSH
67698: LD_INT 0
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: LD_INT 1
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: LD_INT 2
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 5
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67784: LD_ADDR_VAR 0 32
67788: PUSH
67789: LD_INT 4
67791: NEG
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 4
67802: NEG
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 3
67814: NEG
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: NEG
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 4
67836: NEG
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 5
67847: NEG
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 5
67858: NEG
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 5
67870: NEG
67871: PUSH
67872: LD_INT 2
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 3
67882: NEG
67883: PUSH
67884: LD_INT 2
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: LD_INT 4
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 2
67917: NEG
67918: PUSH
67919: LD_INT 3
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 2
67929: NEG
67930: PUSH
67931: LD_INT 2
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 3
67941: NEG
67942: PUSH
67943: LD_INT 2
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: NEG
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 4
67965: NEG
67966: PUSH
67967: LD_INT 4
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: LD_INT 4
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 4
67989: NEG
67990: PUSH
67991: LD_INT 2
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: LD_INT 4
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: LD_INT 5
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: PUSH
68035: LD_INT 3
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 3
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: NEG
68057: PUSH
68058: LD_INT 4
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 1
68068: NEG
68069: PUSH
68070: LD_INT 5
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: PUSH
68081: LD_INT 3
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 2
68091: NEG
68092: PUSH
68093: LD_INT 5
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 4
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 4
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 3
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: LD_INT 1
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: LD_INT 2
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 4
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 4
68196: PUSH
68197: LD_INT 4
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 4
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 5
68216: PUSH
68217: LD_INT 4
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 5
68226: PUSH
68227: LD_INT 5
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 4
68236: PUSH
68237: LD_INT 5
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: LD_INT 4
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 5
68266: PUSH
68267: LD_INT 3
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 3
68276: PUSH
68277: LD_INT 5
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68331: LD_ADDR_VAR 0 33
68335: PUSH
68336: LD_INT 4
68338: NEG
68339: PUSH
68340: LD_INT 4
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 4
68350: NEG
68351: PUSH
68352: LD_INT 5
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: LD_INT 4
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: NEG
68375: PUSH
68376: LD_INT 3
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 4
68386: NEG
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 5
68398: NEG
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 5
68410: NEG
68411: PUSH
68412: LD_INT 5
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 5
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 5
68434: NEG
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 3
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 4
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: LD_INT 3
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: LD_INT 2
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: LD_INT 2
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 3
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: PUSH
68515: LD_INT 4
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 2
68536: NEG
68537: PUSH
68538: LD_INT 4
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 4
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 4
68558: PUSH
68559: LD_INT 1
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 5
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 5
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 4
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 3
68620: PUSH
68621: LD_INT 2
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 5
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: LD_INT 3
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 3
68651: PUSH
68652: LD_INT 2
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 4
68661: PUSH
68662: LD_INT 3
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 4
68671: PUSH
68672: LD_INT 4
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: LD_INT 4
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 2
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 4
68711: PUSH
68712: LD_INT 2
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: LD_INT 4
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 4
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: LD_INT 3
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 4
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: LD_INT 5
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 5
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: LD_INT 4
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 2
68803: PUSH
68804: LD_INT 5
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 2
68813: NEG
68814: PUSH
68815: LD_INT 3
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68869: LD_ADDR_VAR 0 34
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 4
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 5
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 1
68898: PUSH
68899: LD_INT 4
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 1
68909: PUSH
68910: LD_INT 3
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: PUSH
68945: LD_INT 5
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: LD_INT 3
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: NEG
68967: PUSH
68968: LD_INT 5
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 3
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 4
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 4
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: LD_INT 1
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 2
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 2
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: LD_INT 2
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 4
69061: PUSH
69062: LD_INT 2
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 4
69071: PUSH
69072: LD_INT 4
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 4
69081: PUSH
69082: LD_INT 3
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 5
69091: PUSH
69092: LD_INT 4
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 5
69101: PUSH
69102: LD_INT 5
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 4
69111: PUSH
69112: LD_INT 5
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 3
69121: PUSH
69122: LD_INT 4
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: PUSH
69132: LD_INT 3
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 5
69141: PUSH
69142: LD_INT 3
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: LD_INT 5
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: LD_INT 2
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: LD_INT 3
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: LD_INT 4
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 4
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: LD_INT 3
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 2
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 2
69243: NEG
69244: PUSH
69245: LD_INT 2
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 4
69254: NEG
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 4
69265: NEG
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 3
69277: NEG
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 3
69288: NEG
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 4
69299: NEG
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 5
69310: NEG
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 5
69321: NEG
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 5
69333: NEG
69334: PUSH
69335: LD_INT 2
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 3
69345: NEG
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: ST_TO_ADDR
// end ; end ;
69401: GO 69404
69403: POP
// case btype of b_depot , b_warehouse :
69404: LD_VAR 0 1
69408: PUSH
69409: LD_INT 0
69411: DOUBLE
69412: EQUAL
69413: IFTRUE 69423
69415: LD_INT 1
69417: DOUBLE
69418: EQUAL
69419: IFTRUE 69423
69421: GO 69624
69423: POP
// case nation of nation_american :
69424: LD_VAR 0 5
69428: PUSH
69429: LD_INT 1
69431: DOUBLE
69432: EQUAL
69433: IFTRUE 69437
69435: GO 69493
69437: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69438: LD_ADDR_VAR 0 9
69442: PUSH
69443: LD_VAR 0 11
69447: PUSH
69448: LD_VAR 0 12
69452: PUSH
69453: LD_VAR 0 13
69457: PUSH
69458: LD_VAR 0 14
69462: PUSH
69463: LD_VAR 0 15
69467: PUSH
69468: LD_VAR 0 16
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: PUSH
69481: LD_VAR 0 4
69485: PUSH
69486: LD_INT 1
69488: PLUS
69489: ARRAY
69490: ST_TO_ADDR
69491: GO 69622
69493: LD_INT 2
69495: DOUBLE
69496: EQUAL
69497: IFTRUE 69501
69499: GO 69557
69501: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69502: LD_ADDR_VAR 0 9
69506: PUSH
69507: LD_VAR 0 17
69511: PUSH
69512: LD_VAR 0 18
69516: PUSH
69517: LD_VAR 0 19
69521: PUSH
69522: LD_VAR 0 20
69526: PUSH
69527: LD_VAR 0 21
69531: PUSH
69532: LD_VAR 0 22
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: LD_VAR 0 4
69549: PUSH
69550: LD_INT 1
69552: PLUS
69553: ARRAY
69554: ST_TO_ADDR
69555: GO 69622
69557: LD_INT 3
69559: DOUBLE
69560: EQUAL
69561: IFTRUE 69565
69563: GO 69621
69565: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69566: LD_ADDR_VAR 0 9
69570: PUSH
69571: LD_VAR 0 23
69575: PUSH
69576: LD_VAR 0 24
69580: PUSH
69581: LD_VAR 0 25
69585: PUSH
69586: LD_VAR 0 26
69590: PUSH
69591: LD_VAR 0 27
69595: PUSH
69596: LD_VAR 0 28
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: PUSH
69609: LD_VAR 0 4
69613: PUSH
69614: LD_INT 1
69616: PLUS
69617: ARRAY
69618: ST_TO_ADDR
69619: GO 69622
69621: POP
69622: GO 70177
69624: LD_INT 2
69626: DOUBLE
69627: EQUAL
69628: IFTRUE 69638
69630: LD_INT 3
69632: DOUBLE
69633: EQUAL
69634: IFTRUE 69638
69636: GO 69694
69638: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69639: LD_ADDR_VAR 0 9
69643: PUSH
69644: LD_VAR 0 29
69648: PUSH
69649: LD_VAR 0 30
69653: PUSH
69654: LD_VAR 0 31
69658: PUSH
69659: LD_VAR 0 32
69663: PUSH
69664: LD_VAR 0 33
69668: PUSH
69669: LD_VAR 0 34
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: PUSH
69682: LD_VAR 0 4
69686: PUSH
69687: LD_INT 1
69689: PLUS
69690: ARRAY
69691: ST_TO_ADDR
69692: GO 70177
69694: LD_INT 16
69696: DOUBLE
69697: EQUAL
69698: IFTRUE 69756
69700: LD_INT 17
69702: DOUBLE
69703: EQUAL
69704: IFTRUE 69756
69706: LD_INT 18
69708: DOUBLE
69709: EQUAL
69710: IFTRUE 69756
69712: LD_INT 19
69714: DOUBLE
69715: EQUAL
69716: IFTRUE 69756
69718: LD_INT 22
69720: DOUBLE
69721: EQUAL
69722: IFTRUE 69756
69724: LD_INT 20
69726: DOUBLE
69727: EQUAL
69728: IFTRUE 69756
69730: LD_INT 21
69732: DOUBLE
69733: EQUAL
69734: IFTRUE 69756
69736: LD_INT 23
69738: DOUBLE
69739: EQUAL
69740: IFTRUE 69756
69742: LD_INT 24
69744: DOUBLE
69745: EQUAL
69746: IFTRUE 69756
69748: LD_INT 25
69750: DOUBLE
69751: EQUAL
69752: IFTRUE 69756
69754: GO 69812
69756: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69757: LD_ADDR_VAR 0 9
69761: PUSH
69762: LD_VAR 0 35
69766: PUSH
69767: LD_VAR 0 36
69771: PUSH
69772: LD_VAR 0 37
69776: PUSH
69777: LD_VAR 0 38
69781: PUSH
69782: LD_VAR 0 39
69786: PUSH
69787: LD_VAR 0 40
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: PUSH
69800: LD_VAR 0 4
69804: PUSH
69805: LD_INT 1
69807: PLUS
69808: ARRAY
69809: ST_TO_ADDR
69810: GO 70177
69812: LD_INT 6
69814: DOUBLE
69815: EQUAL
69816: IFTRUE 69868
69818: LD_INT 7
69820: DOUBLE
69821: EQUAL
69822: IFTRUE 69868
69824: LD_INT 8
69826: DOUBLE
69827: EQUAL
69828: IFTRUE 69868
69830: LD_INT 13
69832: DOUBLE
69833: EQUAL
69834: IFTRUE 69868
69836: LD_INT 12
69838: DOUBLE
69839: EQUAL
69840: IFTRUE 69868
69842: LD_INT 15
69844: DOUBLE
69845: EQUAL
69846: IFTRUE 69868
69848: LD_INT 11
69850: DOUBLE
69851: EQUAL
69852: IFTRUE 69868
69854: LD_INT 14
69856: DOUBLE
69857: EQUAL
69858: IFTRUE 69868
69860: LD_INT 10
69862: DOUBLE
69863: EQUAL
69864: IFTRUE 69868
69866: GO 69924
69868: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69869: LD_ADDR_VAR 0 9
69873: PUSH
69874: LD_VAR 0 41
69878: PUSH
69879: LD_VAR 0 42
69883: PUSH
69884: LD_VAR 0 43
69888: PUSH
69889: LD_VAR 0 44
69893: PUSH
69894: LD_VAR 0 45
69898: PUSH
69899: LD_VAR 0 46
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: PUSH
69912: LD_VAR 0 4
69916: PUSH
69917: LD_INT 1
69919: PLUS
69920: ARRAY
69921: ST_TO_ADDR
69922: GO 70177
69924: LD_INT 36
69926: DOUBLE
69927: EQUAL
69928: IFTRUE 69932
69930: GO 69988
69932: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69933: LD_ADDR_VAR 0 9
69937: PUSH
69938: LD_VAR 0 47
69942: PUSH
69943: LD_VAR 0 48
69947: PUSH
69948: LD_VAR 0 49
69952: PUSH
69953: LD_VAR 0 50
69957: PUSH
69958: LD_VAR 0 51
69962: PUSH
69963: LD_VAR 0 52
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: LD_VAR 0 4
69980: PUSH
69981: LD_INT 1
69983: PLUS
69984: ARRAY
69985: ST_TO_ADDR
69986: GO 70177
69988: LD_INT 4
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 70014
69994: LD_INT 5
69996: DOUBLE
69997: EQUAL
69998: IFTRUE 70014
70000: LD_INT 34
70002: DOUBLE
70003: EQUAL
70004: IFTRUE 70014
70006: LD_INT 37
70008: DOUBLE
70009: EQUAL
70010: IFTRUE 70014
70012: GO 70070
70014: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70015: LD_ADDR_VAR 0 9
70019: PUSH
70020: LD_VAR 0 53
70024: PUSH
70025: LD_VAR 0 54
70029: PUSH
70030: LD_VAR 0 55
70034: PUSH
70035: LD_VAR 0 56
70039: PUSH
70040: LD_VAR 0 57
70044: PUSH
70045: LD_VAR 0 58
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: PUSH
70058: LD_VAR 0 4
70062: PUSH
70063: LD_INT 1
70065: PLUS
70066: ARRAY
70067: ST_TO_ADDR
70068: GO 70177
70070: LD_INT 31
70072: DOUBLE
70073: EQUAL
70074: IFTRUE 70120
70076: LD_INT 32
70078: DOUBLE
70079: EQUAL
70080: IFTRUE 70120
70082: LD_INT 33
70084: DOUBLE
70085: EQUAL
70086: IFTRUE 70120
70088: LD_INT 27
70090: DOUBLE
70091: EQUAL
70092: IFTRUE 70120
70094: LD_INT 26
70096: DOUBLE
70097: EQUAL
70098: IFTRUE 70120
70100: LD_INT 28
70102: DOUBLE
70103: EQUAL
70104: IFTRUE 70120
70106: LD_INT 29
70108: DOUBLE
70109: EQUAL
70110: IFTRUE 70120
70112: LD_INT 30
70114: DOUBLE
70115: EQUAL
70116: IFTRUE 70120
70118: GO 70176
70120: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70121: LD_ADDR_VAR 0 9
70125: PUSH
70126: LD_VAR 0 59
70130: PUSH
70131: LD_VAR 0 60
70135: PUSH
70136: LD_VAR 0 61
70140: PUSH
70141: LD_VAR 0 62
70145: PUSH
70146: LD_VAR 0 63
70150: PUSH
70151: LD_VAR 0 64
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: PUSH
70164: LD_VAR 0 4
70168: PUSH
70169: LD_INT 1
70171: PLUS
70172: ARRAY
70173: ST_TO_ADDR
70174: GO 70177
70176: POP
// temp_list2 = [ ] ;
70177: LD_ADDR_VAR 0 10
70181: PUSH
70182: EMPTY
70183: ST_TO_ADDR
// for i in temp_list do
70184: LD_ADDR_VAR 0 8
70188: PUSH
70189: LD_VAR 0 9
70193: PUSH
70194: FOR_IN
70195: IFFALSE 70247
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70197: LD_ADDR_VAR 0 10
70201: PUSH
70202: LD_VAR 0 10
70206: PUSH
70207: LD_VAR 0 8
70211: PUSH
70212: LD_INT 1
70214: ARRAY
70215: PUSH
70216: LD_VAR 0 2
70220: PLUS
70221: PUSH
70222: LD_VAR 0 8
70226: PUSH
70227: LD_INT 2
70229: ARRAY
70230: PUSH
70231: LD_VAR 0 3
70235: PLUS
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: EMPTY
70242: LIST
70243: ADD
70244: ST_TO_ADDR
70245: GO 70194
70247: POP
70248: POP
// result = temp_list2 ;
70249: LD_ADDR_VAR 0 7
70253: PUSH
70254: LD_VAR 0 10
70258: ST_TO_ADDR
// end ;
70259: LD_VAR 0 7
70263: RET
// export function EnemyInRange ( unit , dist ) ; begin
70264: LD_INT 0
70266: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70267: LD_ADDR_VAR 0 3
70271: PUSH
70272: LD_VAR 0 1
70276: PPUSH
70277: CALL_OW 255
70281: PPUSH
70282: LD_VAR 0 1
70286: PPUSH
70287: CALL_OW 250
70291: PPUSH
70292: LD_VAR 0 1
70296: PPUSH
70297: CALL_OW 251
70301: PPUSH
70302: LD_VAR 0 2
70306: PPUSH
70307: CALL 43666 0 4
70311: PUSH
70312: LD_INT 4
70314: ARRAY
70315: ST_TO_ADDR
// end ;
70316: LD_VAR 0 3
70320: RET
// export function PlayerSeeMe ( unit ) ; begin
70321: LD_INT 0
70323: PPUSH
// result := See ( your_side , unit ) ;
70324: LD_ADDR_VAR 0 2
70328: PUSH
70329: LD_OWVAR 2
70333: PPUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: CALL_OW 292
70343: ST_TO_ADDR
// end ;
70344: LD_VAR 0 2
70348: RET
// export function ReverseDir ( unit ) ; begin
70349: LD_INT 0
70351: PPUSH
// if not unit then
70352: LD_VAR 0 1
70356: NOT
70357: IFFALSE 70361
// exit ;
70359: GO 70384
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70361: LD_ADDR_VAR 0 2
70365: PUSH
70366: LD_VAR 0 1
70370: PPUSH
70371: CALL_OW 254
70375: PUSH
70376: LD_INT 3
70378: PLUS
70379: PUSH
70380: LD_INT 6
70382: MOD
70383: ST_TO_ADDR
// end ;
70384: LD_VAR 0 2
70388: RET
// export function ReverseArray ( array ) ; var i ; begin
70389: LD_INT 0
70391: PPUSH
70392: PPUSH
// if not array then
70393: LD_VAR 0 1
70397: NOT
70398: IFFALSE 70402
// exit ;
70400: GO 70457
// result := [ ] ;
70402: LD_ADDR_VAR 0 2
70406: PUSH
70407: EMPTY
70408: ST_TO_ADDR
// for i := array downto 1 do
70409: LD_ADDR_VAR 0 3
70413: PUSH
70414: DOUBLE
70415: LD_VAR 0 1
70419: INC
70420: ST_TO_ADDR
70421: LD_INT 1
70423: PUSH
70424: FOR_DOWNTO
70425: IFFALSE 70455
// result := Join ( result , array [ i ] ) ;
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: LD_VAR 0 2
70436: PPUSH
70437: LD_VAR 0 1
70441: PUSH
70442: LD_VAR 0 3
70446: ARRAY
70447: PPUSH
70448: CALL 75082 0 2
70452: ST_TO_ADDR
70453: GO 70424
70455: POP
70456: POP
// end ;
70457: LD_VAR 0 2
70461: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
// if not unit or not hexes then
70470: LD_VAR 0 1
70474: NOT
70475: PUSH
70476: LD_VAR 0 2
70480: NOT
70481: OR
70482: IFFALSE 70486
// exit ;
70484: GO 70609
// dist := 9999 ;
70486: LD_ADDR_VAR 0 5
70490: PUSH
70491: LD_INT 9999
70493: ST_TO_ADDR
// for i = 1 to hexes do
70494: LD_ADDR_VAR 0 4
70498: PUSH
70499: DOUBLE
70500: LD_INT 1
70502: DEC
70503: ST_TO_ADDR
70504: LD_VAR 0 2
70508: PUSH
70509: FOR_TO
70510: IFFALSE 70597
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70512: LD_ADDR_VAR 0 6
70516: PUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: LD_VAR 0 2
70526: PUSH
70527: LD_VAR 0 4
70531: ARRAY
70532: PUSH
70533: LD_INT 1
70535: ARRAY
70536: PPUSH
70537: LD_VAR 0 2
70541: PUSH
70542: LD_VAR 0 4
70546: ARRAY
70547: PUSH
70548: LD_INT 2
70550: ARRAY
70551: PPUSH
70552: CALL_OW 297
70556: ST_TO_ADDR
// if tdist < dist then
70557: LD_VAR 0 6
70561: PUSH
70562: LD_VAR 0 5
70566: LESS
70567: IFFALSE 70595
// begin hex := hexes [ i ] ;
70569: LD_ADDR_VAR 0 8
70573: PUSH
70574: LD_VAR 0 2
70578: PUSH
70579: LD_VAR 0 4
70583: ARRAY
70584: ST_TO_ADDR
// dist := tdist ;
70585: LD_ADDR_VAR 0 5
70589: PUSH
70590: LD_VAR 0 6
70594: ST_TO_ADDR
// end ; end ;
70595: GO 70509
70597: POP
70598: POP
// result := hex ;
70599: LD_ADDR_VAR 0 3
70603: PUSH
70604: LD_VAR 0 8
70608: ST_TO_ADDR
// end ;
70609: LD_VAR 0 3
70613: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70614: LD_INT 0
70616: PPUSH
70617: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70618: LD_VAR 0 1
70622: NOT
70623: PUSH
70624: LD_VAR 0 1
70628: PUSH
70629: LD_INT 21
70631: PUSH
70632: LD_INT 2
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 23
70641: PUSH
70642: LD_INT 2
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PPUSH
70653: CALL_OW 69
70657: IN
70658: NOT
70659: OR
70660: IFFALSE 70664
// exit ;
70662: GO 70711
// for i = 1 to 3 do
70664: LD_ADDR_VAR 0 3
70668: PUSH
70669: DOUBLE
70670: LD_INT 1
70672: DEC
70673: ST_TO_ADDR
70674: LD_INT 3
70676: PUSH
70677: FOR_TO
70678: IFFALSE 70709
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70680: LD_VAR 0 1
70684: PPUSH
70685: CALL_OW 250
70689: PPUSH
70690: LD_VAR 0 1
70694: PPUSH
70695: CALL_OW 251
70699: PPUSH
70700: LD_INT 1
70702: PPUSH
70703: CALL_OW 453
70707: GO 70677
70709: POP
70710: POP
// end ;
70711: LD_VAR 0 2
70715: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70716: LD_INT 0
70718: PPUSH
70719: PPUSH
70720: PPUSH
70721: PPUSH
70722: PPUSH
70723: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70724: LD_VAR 0 1
70728: NOT
70729: PUSH
70730: LD_VAR 0 2
70734: NOT
70735: OR
70736: PUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: CALL_OW 314
70746: OR
70747: IFFALSE 70751
// exit ;
70749: GO 71192
// x := GetX ( enemy_unit ) ;
70751: LD_ADDR_VAR 0 7
70755: PUSH
70756: LD_VAR 0 2
70760: PPUSH
70761: CALL_OW 250
70765: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70766: LD_ADDR_VAR 0 8
70770: PUSH
70771: LD_VAR 0 2
70775: PPUSH
70776: CALL_OW 251
70780: ST_TO_ADDR
// if not x or not y then
70781: LD_VAR 0 7
70785: NOT
70786: PUSH
70787: LD_VAR 0 8
70791: NOT
70792: OR
70793: IFFALSE 70797
// exit ;
70795: GO 71192
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70797: LD_ADDR_VAR 0 6
70801: PUSH
70802: LD_VAR 0 7
70806: PPUSH
70807: LD_INT 0
70809: PPUSH
70810: LD_INT 4
70812: PPUSH
70813: CALL_OW 272
70817: PUSH
70818: LD_VAR 0 8
70822: PPUSH
70823: LD_INT 0
70825: PPUSH
70826: LD_INT 4
70828: PPUSH
70829: CALL_OW 273
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_VAR 0 7
70842: PPUSH
70843: LD_INT 1
70845: PPUSH
70846: LD_INT 4
70848: PPUSH
70849: CALL_OW 272
70853: PUSH
70854: LD_VAR 0 8
70858: PPUSH
70859: LD_INT 1
70861: PPUSH
70862: LD_INT 4
70864: PPUSH
70865: CALL_OW 273
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_VAR 0 7
70878: PPUSH
70879: LD_INT 2
70881: PPUSH
70882: LD_INT 4
70884: PPUSH
70885: CALL_OW 272
70889: PUSH
70890: LD_VAR 0 8
70894: PPUSH
70895: LD_INT 2
70897: PPUSH
70898: LD_INT 4
70900: PPUSH
70901: CALL_OW 273
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_VAR 0 7
70914: PPUSH
70915: LD_INT 3
70917: PPUSH
70918: LD_INT 4
70920: PPUSH
70921: CALL_OW 272
70925: PUSH
70926: LD_VAR 0 8
70930: PPUSH
70931: LD_INT 3
70933: PPUSH
70934: LD_INT 4
70936: PPUSH
70937: CALL_OW 273
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_VAR 0 7
70950: PPUSH
70951: LD_INT 4
70953: PPUSH
70954: LD_INT 4
70956: PPUSH
70957: CALL_OW 272
70961: PUSH
70962: LD_VAR 0 8
70966: PPUSH
70967: LD_INT 4
70969: PPUSH
70970: LD_INT 4
70972: PPUSH
70973: CALL_OW 273
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_VAR 0 7
70986: PPUSH
70987: LD_INT 5
70989: PPUSH
70990: LD_INT 4
70992: PPUSH
70993: CALL_OW 272
70997: PUSH
70998: LD_VAR 0 8
71002: PPUSH
71003: LD_INT 5
71005: PPUSH
71006: LD_INT 4
71008: PPUSH
71009: CALL_OW 273
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: ST_TO_ADDR
// for i = tmp downto 1 do
71026: LD_ADDR_VAR 0 4
71030: PUSH
71031: DOUBLE
71032: LD_VAR 0 6
71036: INC
71037: ST_TO_ADDR
71038: LD_INT 1
71040: PUSH
71041: FOR_DOWNTO
71042: IFFALSE 71143
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71044: LD_VAR 0 6
71048: PUSH
71049: LD_VAR 0 4
71053: ARRAY
71054: PUSH
71055: LD_INT 1
71057: ARRAY
71058: PPUSH
71059: LD_VAR 0 6
71063: PUSH
71064: LD_VAR 0 4
71068: ARRAY
71069: PUSH
71070: LD_INT 2
71072: ARRAY
71073: PPUSH
71074: CALL_OW 488
71078: NOT
71079: PUSH
71080: LD_VAR 0 6
71084: PUSH
71085: LD_VAR 0 4
71089: ARRAY
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PPUSH
71095: LD_VAR 0 6
71099: PUSH
71100: LD_VAR 0 4
71104: ARRAY
71105: PUSH
71106: LD_INT 2
71108: ARRAY
71109: PPUSH
71110: CALL_OW 428
71114: PUSH
71115: LD_INT 0
71117: NONEQUAL
71118: OR
71119: IFFALSE 71141
// tmp := Delete ( tmp , i ) ;
71121: LD_ADDR_VAR 0 6
71125: PUSH
71126: LD_VAR 0 6
71130: PPUSH
71131: LD_VAR 0 4
71135: PPUSH
71136: CALL_OW 3
71140: ST_TO_ADDR
71141: GO 71041
71143: POP
71144: POP
// j := GetClosestHex ( unit , tmp ) ;
71145: LD_ADDR_VAR 0 5
71149: PUSH
71150: LD_VAR 0 1
71154: PPUSH
71155: LD_VAR 0 6
71159: PPUSH
71160: CALL 70462 0 2
71164: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71165: LD_VAR 0 1
71169: PPUSH
71170: LD_VAR 0 5
71174: PUSH
71175: LD_INT 1
71177: ARRAY
71178: PPUSH
71179: LD_VAR 0 5
71183: PUSH
71184: LD_INT 2
71186: ARRAY
71187: PPUSH
71188: CALL_OW 111
// end ;
71192: LD_VAR 0 3
71196: RET
// export function PrepareApemanSoldier ( ) ; begin
71197: LD_INT 0
71199: PPUSH
// uc_nation := 0 ;
71200: LD_ADDR_OWVAR 21
71204: PUSH
71205: LD_INT 0
71207: ST_TO_ADDR
// hc_sex := sex_male ;
71208: LD_ADDR_OWVAR 27
71212: PUSH
71213: LD_INT 1
71215: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71216: LD_ADDR_OWVAR 28
71220: PUSH
71221: LD_INT 15
71223: ST_TO_ADDR
// hc_gallery :=  ;
71224: LD_ADDR_OWVAR 33
71228: PUSH
71229: LD_STRING 
71231: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71232: LD_ADDR_OWVAR 31
71236: PUSH
71237: LD_INT 0
71239: PPUSH
71240: LD_INT 3
71242: PPUSH
71243: CALL_OW 12
71247: PUSH
71248: LD_INT 0
71250: PPUSH
71251: LD_INT 3
71253: PPUSH
71254: CALL_OW 12
71258: PUSH
71259: LD_INT 0
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: ST_TO_ADDR
// end ;
71271: LD_VAR 0 1
71275: RET
// export function PrepareApemanEngineer ( ) ; begin
71276: LD_INT 0
71278: PPUSH
// uc_nation := 0 ;
71279: LD_ADDR_OWVAR 21
71283: PUSH
71284: LD_INT 0
71286: ST_TO_ADDR
// hc_sex := sex_male ;
71287: LD_ADDR_OWVAR 27
71291: PUSH
71292: LD_INT 1
71294: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71295: LD_ADDR_OWVAR 28
71299: PUSH
71300: LD_INT 16
71302: ST_TO_ADDR
// hc_gallery :=  ;
71303: LD_ADDR_OWVAR 33
71307: PUSH
71308: LD_STRING 
71310: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71311: LD_ADDR_OWVAR 31
71315: PUSH
71316: LD_INT 0
71318: PPUSH
71319: LD_INT 3
71321: PPUSH
71322: CALL_OW 12
71326: PUSH
71327: LD_INT 0
71329: PPUSH
71330: LD_INT 3
71332: PPUSH
71333: CALL_OW 12
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: ST_TO_ADDR
// end ;
71350: LD_VAR 0 1
71354: RET
// export function PrepareApeman ( agressivity ) ; begin
71355: LD_INT 0
71357: PPUSH
// uc_side := 0 ;
71358: LD_ADDR_OWVAR 20
71362: PUSH
71363: LD_INT 0
71365: ST_TO_ADDR
// uc_nation := 0 ;
71366: LD_ADDR_OWVAR 21
71370: PUSH
71371: LD_INT 0
71373: ST_TO_ADDR
// hc_sex := sex_male ;
71374: LD_ADDR_OWVAR 27
71378: PUSH
71379: LD_INT 1
71381: ST_TO_ADDR
// hc_class := class_apeman ;
71382: LD_ADDR_OWVAR 28
71386: PUSH
71387: LD_INT 12
71389: ST_TO_ADDR
// hc_gallery :=  ;
71390: LD_ADDR_OWVAR 33
71394: PUSH
71395: LD_STRING 
71397: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71398: LD_ADDR_OWVAR 35
71402: PUSH
71403: LD_VAR 0 1
71407: NEG
71408: PPUSH
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 12
71418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71419: LD_ADDR_OWVAR 31
71423: PUSH
71424: LD_INT 0
71426: PPUSH
71427: LD_INT 3
71429: PPUSH
71430: CALL_OW 12
71434: PUSH
71435: LD_INT 0
71437: PPUSH
71438: LD_INT 3
71440: PPUSH
71441: CALL_OW 12
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: ST_TO_ADDR
// end ;
71458: LD_VAR 0 2
71462: RET
// export function PrepareTiger ( agressivity ) ; begin
71463: LD_INT 0
71465: PPUSH
// uc_side := 0 ;
71466: LD_ADDR_OWVAR 20
71470: PUSH
71471: LD_INT 0
71473: ST_TO_ADDR
// uc_nation := 0 ;
71474: LD_ADDR_OWVAR 21
71478: PUSH
71479: LD_INT 0
71481: ST_TO_ADDR
// hc_class := class_tiger ;
71482: LD_ADDR_OWVAR 28
71486: PUSH
71487: LD_INT 14
71489: ST_TO_ADDR
// hc_gallery :=  ;
71490: LD_ADDR_OWVAR 33
71494: PUSH
71495: LD_STRING 
71497: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71498: LD_ADDR_OWVAR 35
71502: PUSH
71503: LD_VAR 0 1
71507: NEG
71508: PPUSH
71509: LD_VAR 0 1
71513: PPUSH
71514: CALL_OW 12
71518: ST_TO_ADDR
// end ;
71519: LD_VAR 0 2
71523: RET
// export function PrepareEnchidna ( ) ; begin
71524: LD_INT 0
71526: PPUSH
// uc_side := 0 ;
71527: LD_ADDR_OWVAR 20
71531: PUSH
71532: LD_INT 0
71534: ST_TO_ADDR
// uc_nation := 0 ;
71535: LD_ADDR_OWVAR 21
71539: PUSH
71540: LD_INT 0
71542: ST_TO_ADDR
// hc_class := class_baggie ;
71543: LD_ADDR_OWVAR 28
71547: PUSH
71548: LD_INT 13
71550: ST_TO_ADDR
// hc_gallery :=  ;
71551: LD_ADDR_OWVAR 33
71555: PUSH
71556: LD_STRING 
71558: ST_TO_ADDR
// end ;
71559: LD_VAR 0 1
71563: RET
// export function PrepareFrog ( ) ; begin
71564: LD_INT 0
71566: PPUSH
// uc_side := 0 ;
71567: LD_ADDR_OWVAR 20
71571: PUSH
71572: LD_INT 0
71574: ST_TO_ADDR
// uc_nation := 0 ;
71575: LD_ADDR_OWVAR 21
71579: PUSH
71580: LD_INT 0
71582: ST_TO_ADDR
// hc_class := class_frog ;
71583: LD_ADDR_OWVAR 28
71587: PUSH
71588: LD_INT 19
71590: ST_TO_ADDR
// hc_gallery :=  ;
71591: LD_ADDR_OWVAR 33
71595: PUSH
71596: LD_STRING 
71598: ST_TO_ADDR
// end ;
71599: LD_VAR 0 1
71603: RET
// export function PrepareFish ( ) ; begin
71604: LD_INT 0
71606: PPUSH
// uc_side := 0 ;
71607: LD_ADDR_OWVAR 20
71611: PUSH
71612: LD_INT 0
71614: ST_TO_ADDR
// uc_nation := 0 ;
71615: LD_ADDR_OWVAR 21
71619: PUSH
71620: LD_INT 0
71622: ST_TO_ADDR
// hc_class := class_fish ;
71623: LD_ADDR_OWVAR 28
71627: PUSH
71628: LD_INT 20
71630: ST_TO_ADDR
// hc_gallery :=  ;
71631: LD_ADDR_OWVAR 33
71635: PUSH
71636: LD_STRING 
71638: ST_TO_ADDR
// end ;
71639: LD_VAR 0 1
71643: RET
// export function PrepareBird ( ) ; begin
71644: LD_INT 0
71646: PPUSH
// uc_side := 0 ;
71647: LD_ADDR_OWVAR 20
71651: PUSH
71652: LD_INT 0
71654: ST_TO_ADDR
// uc_nation := 0 ;
71655: LD_ADDR_OWVAR 21
71659: PUSH
71660: LD_INT 0
71662: ST_TO_ADDR
// hc_class := class_phororhacos ;
71663: LD_ADDR_OWVAR 28
71667: PUSH
71668: LD_INT 18
71670: ST_TO_ADDR
// hc_gallery :=  ;
71671: LD_ADDR_OWVAR 33
71675: PUSH
71676: LD_STRING 
71678: ST_TO_ADDR
// end ;
71679: LD_VAR 0 1
71683: RET
// export function PrepareHorse ( ) ; begin
71684: LD_INT 0
71686: PPUSH
// uc_side := 0 ;
71687: LD_ADDR_OWVAR 20
71691: PUSH
71692: LD_INT 0
71694: ST_TO_ADDR
// uc_nation := 0 ;
71695: LD_ADDR_OWVAR 21
71699: PUSH
71700: LD_INT 0
71702: ST_TO_ADDR
// hc_class := class_horse ;
71703: LD_ADDR_OWVAR 28
71707: PUSH
71708: LD_INT 21
71710: ST_TO_ADDR
// hc_gallery :=  ;
71711: LD_ADDR_OWVAR 33
71715: PUSH
71716: LD_STRING 
71718: ST_TO_ADDR
// end ;
71719: LD_VAR 0 1
71723: RET
// export function PrepareMastodont ( ) ; begin
71724: LD_INT 0
71726: PPUSH
// uc_side := 0 ;
71727: LD_ADDR_OWVAR 20
71731: PUSH
71732: LD_INT 0
71734: ST_TO_ADDR
// uc_nation := 0 ;
71735: LD_ADDR_OWVAR 21
71739: PUSH
71740: LD_INT 0
71742: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71743: LD_ADDR_OWVAR 37
71747: PUSH
71748: LD_INT 31
71750: ST_TO_ADDR
// vc_control := control_rider ;
71751: LD_ADDR_OWVAR 38
71755: PUSH
71756: LD_INT 4
71758: ST_TO_ADDR
// end ;
71759: LD_VAR 0 1
71763: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71764: LD_INT 0
71766: PPUSH
71767: PPUSH
71768: PPUSH
// uc_side = 0 ;
71769: LD_ADDR_OWVAR 20
71773: PUSH
71774: LD_INT 0
71776: ST_TO_ADDR
// uc_nation = 0 ;
71777: LD_ADDR_OWVAR 21
71781: PUSH
71782: LD_INT 0
71784: ST_TO_ADDR
// InitHc_All ( ) ;
71785: CALL_OW 584
// InitVc ;
71789: CALL_OW 20
// if mastodonts then
71793: LD_VAR 0 6
71797: IFFALSE 71864
// for i = 1 to mastodonts do
71799: LD_ADDR_VAR 0 11
71803: PUSH
71804: DOUBLE
71805: LD_INT 1
71807: DEC
71808: ST_TO_ADDR
71809: LD_VAR 0 6
71813: PUSH
71814: FOR_TO
71815: IFFALSE 71862
// begin vc_chassis := 31 ;
71817: LD_ADDR_OWVAR 37
71821: PUSH
71822: LD_INT 31
71824: ST_TO_ADDR
// vc_control := control_rider ;
71825: LD_ADDR_OWVAR 38
71829: PUSH
71830: LD_INT 4
71832: ST_TO_ADDR
// animal := CreateVehicle ;
71833: LD_ADDR_VAR 0 12
71837: PUSH
71838: CALL_OW 45
71842: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71843: LD_VAR 0 12
71847: PPUSH
71848: LD_VAR 0 8
71852: PPUSH
71853: LD_INT 0
71855: PPUSH
71856: CALL 73999 0 3
// end ;
71860: GO 71814
71862: POP
71863: POP
// if horses then
71864: LD_VAR 0 5
71868: IFFALSE 71935
// for i = 1 to horses do
71870: LD_ADDR_VAR 0 11
71874: PUSH
71875: DOUBLE
71876: LD_INT 1
71878: DEC
71879: ST_TO_ADDR
71880: LD_VAR 0 5
71884: PUSH
71885: FOR_TO
71886: IFFALSE 71933
// begin hc_class := 21 ;
71888: LD_ADDR_OWVAR 28
71892: PUSH
71893: LD_INT 21
71895: ST_TO_ADDR
// hc_gallery :=  ;
71896: LD_ADDR_OWVAR 33
71900: PUSH
71901: LD_STRING 
71903: ST_TO_ADDR
// animal := CreateHuman ;
71904: LD_ADDR_VAR 0 12
71908: PUSH
71909: CALL_OW 44
71913: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71914: LD_VAR 0 12
71918: PPUSH
71919: LD_VAR 0 8
71923: PPUSH
71924: LD_INT 0
71926: PPUSH
71927: CALL 73999 0 3
// end ;
71931: GO 71885
71933: POP
71934: POP
// if birds then
71935: LD_VAR 0 1
71939: IFFALSE 72006
// for i = 1 to birds do
71941: LD_ADDR_VAR 0 11
71945: PUSH
71946: DOUBLE
71947: LD_INT 1
71949: DEC
71950: ST_TO_ADDR
71951: LD_VAR 0 1
71955: PUSH
71956: FOR_TO
71957: IFFALSE 72004
// begin hc_class = 18 ;
71959: LD_ADDR_OWVAR 28
71963: PUSH
71964: LD_INT 18
71966: ST_TO_ADDR
// hc_gallery =  ;
71967: LD_ADDR_OWVAR 33
71971: PUSH
71972: LD_STRING 
71974: ST_TO_ADDR
// animal := CreateHuman ;
71975: LD_ADDR_VAR 0 12
71979: PUSH
71980: CALL_OW 44
71984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71985: LD_VAR 0 12
71989: PPUSH
71990: LD_VAR 0 8
71994: PPUSH
71995: LD_INT 0
71997: PPUSH
71998: CALL 73999 0 3
// end ;
72002: GO 71956
72004: POP
72005: POP
// if tigers then
72006: LD_VAR 0 2
72010: IFFALSE 72094
// for i = 1 to tigers do
72012: LD_ADDR_VAR 0 11
72016: PUSH
72017: DOUBLE
72018: LD_INT 1
72020: DEC
72021: ST_TO_ADDR
72022: LD_VAR 0 2
72026: PUSH
72027: FOR_TO
72028: IFFALSE 72092
// begin hc_class = class_tiger ;
72030: LD_ADDR_OWVAR 28
72034: PUSH
72035: LD_INT 14
72037: ST_TO_ADDR
// hc_gallery =  ;
72038: LD_ADDR_OWVAR 33
72042: PUSH
72043: LD_STRING 
72045: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72046: LD_ADDR_OWVAR 35
72050: PUSH
72051: LD_INT 7
72053: NEG
72054: PPUSH
72055: LD_INT 7
72057: PPUSH
72058: CALL_OW 12
72062: ST_TO_ADDR
// animal := CreateHuman ;
72063: LD_ADDR_VAR 0 12
72067: PUSH
72068: CALL_OW 44
72072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72073: LD_VAR 0 12
72077: PPUSH
72078: LD_VAR 0 8
72082: PPUSH
72083: LD_INT 0
72085: PPUSH
72086: CALL 73999 0 3
// end ;
72090: GO 72027
72092: POP
72093: POP
// if apemans then
72094: LD_VAR 0 3
72098: IFFALSE 72221
// for i = 1 to apemans do
72100: LD_ADDR_VAR 0 11
72104: PUSH
72105: DOUBLE
72106: LD_INT 1
72108: DEC
72109: ST_TO_ADDR
72110: LD_VAR 0 3
72114: PUSH
72115: FOR_TO
72116: IFFALSE 72219
// begin hc_class = class_apeman ;
72118: LD_ADDR_OWVAR 28
72122: PUSH
72123: LD_INT 12
72125: ST_TO_ADDR
// hc_gallery =  ;
72126: LD_ADDR_OWVAR 33
72130: PUSH
72131: LD_STRING 
72133: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72134: LD_ADDR_OWVAR 35
72138: PUSH
72139: LD_INT 2
72141: NEG
72142: PPUSH
72143: LD_INT 2
72145: PPUSH
72146: CALL_OW 12
72150: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72151: LD_ADDR_OWVAR 31
72155: PUSH
72156: LD_INT 1
72158: PPUSH
72159: LD_INT 3
72161: PPUSH
72162: CALL_OW 12
72166: PUSH
72167: LD_INT 1
72169: PPUSH
72170: LD_INT 3
72172: PPUSH
72173: CALL_OW 12
72177: PUSH
72178: LD_INT 0
72180: PUSH
72181: LD_INT 0
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: ST_TO_ADDR
// animal := CreateHuman ;
72190: LD_ADDR_VAR 0 12
72194: PUSH
72195: CALL_OW 44
72199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72200: LD_VAR 0 12
72204: PPUSH
72205: LD_VAR 0 8
72209: PPUSH
72210: LD_INT 0
72212: PPUSH
72213: CALL 73999 0 3
// end ;
72217: GO 72115
72219: POP
72220: POP
// if enchidnas then
72221: LD_VAR 0 4
72225: IFFALSE 72292
// for i = 1 to enchidnas do
72227: LD_ADDR_VAR 0 11
72231: PUSH
72232: DOUBLE
72233: LD_INT 1
72235: DEC
72236: ST_TO_ADDR
72237: LD_VAR 0 4
72241: PUSH
72242: FOR_TO
72243: IFFALSE 72290
// begin hc_class = 13 ;
72245: LD_ADDR_OWVAR 28
72249: PUSH
72250: LD_INT 13
72252: ST_TO_ADDR
// hc_gallery =  ;
72253: LD_ADDR_OWVAR 33
72257: PUSH
72258: LD_STRING 
72260: ST_TO_ADDR
// animal := CreateHuman ;
72261: LD_ADDR_VAR 0 12
72265: PUSH
72266: CALL_OW 44
72270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72271: LD_VAR 0 12
72275: PPUSH
72276: LD_VAR 0 8
72280: PPUSH
72281: LD_INT 0
72283: PPUSH
72284: CALL 73999 0 3
// end ;
72288: GO 72242
72290: POP
72291: POP
// if fishes then
72292: LD_VAR 0 7
72296: IFFALSE 72363
// for i = 1 to fishes do
72298: LD_ADDR_VAR 0 11
72302: PUSH
72303: DOUBLE
72304: LD_INT 1
72306: DEC
72307: ST_TO_ADDR
72308: LD_VAR 0 7
72312: PUSH
72313: FOR_TO
72314: IFFALSE 72361
// begin hc_class = 20 ;
72316: LD_ADDR_OWVAR 28
72320: PUSH
72321: LD_INT 20
72323: ST_TO_ADDR
// hc_gallery =  ;
72324: LD_ADDR_OWVAR 33
72328: PUSH
72329: LD_STRING 
72331: ST_TO_ADDR
// animal := CreateHuman ;
72332: LD_ADDR_VAR 0 12
72336: PUSH
72337: CALL_OW 44
72341: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72342: LD_VAR 0 12
72346: PPUSH
72347: LD_VAR 0 9
72351: PPUSH
72352: LD_INT 0
72354: PPUSH
72355: CALL 73999 0 3
// end ;
72359: GO 72313
72361: POP
72362: POP
// end ;
72363: LD_VAR 0 10
72367: RET
// export function WantHeal ( sci , unit ) ; begin
72368: LD_INT 0
72370: PPUSH
// if GetTaskList ( sci ) > 0 then
72371: LD_VAR 0 1
72375: PPUSH
72376: CALL_OW 437
72380: PUSH
72381: LD_INT 0
72383: GREATER
72384: IFFALSE 72454
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72386: LD_VAR 0 1
72390: PPUSH
72391: CALL_OW 437
72395: PUSH
72396: LD_INT 1
72398: ARRAY
72399: PUSH
72400: LD_INT 1
72402: ARRAY
72403: PUSH
72404: LD_STRING l
72406: EQUAL
72407: PUSH
72408: LD_VAR 0 1
72412: PPUSH
72413: CALL_OW 437
72417: PUSH
72418: LD_INT 1
72420: ARRAY
72421: PUSH
72422: LD_INT 4
72424: ARRAY
72425: PUSH
72426: LD_VAR 0 2
72430: EQUAL
72431: AND
72432: IFFALSE 72444
// result := true else
72434: LD_ADDR_VAR 0 3
72438: PUSH
72439: LD_INT 1
72441: ST_TO_ADDR
72442: GO 72452
// result := false ;
72444: LD_ADDR_VAR 0 3
72448: PUSH
72449: LD_INT 0
72451: ST_TO_ADDR
// end else
72452: GO 72462
// result := false ;
72454: LD_ADDR_VAR 0 3
72458: PUSH
72459: LD_INT 0
72461: ST_TO_ADDR
// end ;
72462: LD_VAR 0 3
72466: RET
// export function HealTarget ( sci ) ; begin
72467: LD_INT 0
72469: PPUSH
// if not sci then
72470: LD_VAR 0 1
72474: NOT
72475: IFFALSE 72479
// exit ;
72477: GO 72544
// result := 0 ;
72479: LD_ADDR_VAR 0 2
72483: PUSH
72484: LD_INT 0
72486: ST_TO_ADDR
// if GetTaskList ( sci ) then
72487: LD_VAR 0 1
72491: PPUSH
72492: CALL_OW 437
72496: IFFALSE 72544
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72498: LD_VAR 0 1
72502: PPUSH
72503: CALL_OW 437
72507: PUSH
72508: LD_INT 1
72510: ARRAY
72511: PUSH
72512: LD_INT 1
72514: ARRAY
72515: PUSH
72516: LD_STRING l
72518: EQUAL
72519: IFFALSE 72544
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72521: LD_ADDR_VAR 0 2
72525: PUSH
72526: LD_VAR 0 1
72530: PPUSH
72531: CALL_OW 437
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: PUSH
72540: LD_INT 4
72542: ARRAY
72543: ST_TO_ADDR
// end ;
72544: LD_VAR 0 2
72548: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72549: LD_INT 0
72551: PPUSH
72552: PPUSH
72553: PPUSH
72554: PPUSH
// if not base_units then
72555: LD_VAR 0 1
72559: NOT
72560: IFFALSE 72564
// exit ;
72562: GO 72651
// result := false ;
72564: LD_ADDR_VAR 0 2
72568: PUSH
72569: LD_INT 0
72571: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72572: LD_ADDR_VAR 0 5
72576: PUSH
72577: LD_VAR 0 1
72581: PPUSH
72582: LD_INT 21
72584: PUSH
72585: LD_INT 3
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PPUSH
72592: CALL_OW 72
72596: ST_TO_ADDR
// if not tmp then
72597: LD_VAR 0 5
72601: NOT
72602: IFFALSE 72606
// exit ;
72604: GO 72651
// for i in tmp do
72606: LD_ADDR_VAR 0 3
72610: PUSH
72611: LD_VAR 0 5
72615: PUSH
72616: FOR_IN
72617: IFFALSE 72649
// begin result := EnemyInRange ( i , 22 ) ;
72619: LD_ADDR_VAR 0 2
72623: PUSH
72624: LD_VAR 0 3
72628: PPUSH
72629: LD_INT 22
72631: PPUSH
72632: CALL 70264 0 2
72636: ST_TO_ADDR
// if result then
72637: LD_VAR 0 2
72641: IFFALSE 72647
// exit ;
72643: POP
72644: POP
72645: GO 72651
// end ;
72647: GO 72616
72649: POP
72650: POP
// end ;
72651: LD_VAR 0 2
72655: RET
// export function FilterByTag ( units , tag ) ; begin
72656: LD_INT 0
72658: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72659: LD_ADDR_VAR 0 3
72663: PUSH
72664: LD_VAR 0 1
72668: PPUSH
72669: LD_INT 120
72671: PUSH
72672: LD_VAR 0 2
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PPUSH
72681: CALL_OW 72
72685: ST_TO_ADDR
// end ;
72686: LD_VAR 0 3
72690: RET
// export function IsDriver ( un ) ; begin
72691: LD_INT 0
72693: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72694: LD_ADDR_VAR 0 2
72698: PUSH
72699: LD_VAR 0 1
72703: PUSH
72704: LD_INT 55
72706: PUSH
72707: EMPTY
72708: LIST
72709: PPUSH
72710: CALL_OW 69
72714: IN
72715: ST_TO_ADDR
// end ;
72716: LD_VAR 0 2
72720: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72721: LD_INT 0
72723: PPUSH
72724: PPUSH
// list := [ ] ;
72725: LD_ADDR_VAR 0 5
72729: PUSH
72730: EMPTY
72731: ST_TO_ADDR
// case d of 0 :
72732: LD_VAR 0 3
72736: PUSH
72737: LD_INT 0
72739: DOUBLE
72740: EQUAL
72741: IFTRUE 72745
72743: GO 72878
72745: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72746: LD_ADDR_VAR 0 5
72750: PUSH
72751: LD_VAR 0 1
72755: PUSH
72756: LD_INT 4
72758: MINUS
72759: PUSH
72760: LD_VAR 0 2
72764: PUSH
72765: LD_INT 4
72767: MINUS
72768: PUSH
72769: LD_INT 2
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: LIST
72776: PUSH
72777: LD_VAR 0 1
72781: PUSH
72782: LD_INT 3
72784: MINUS
72785: PUSH
72786: LD_VAR 0 2
72790: PUSH
72791: LD_INT 1
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: LIST
72798: PUSH
72799: LD_VAR 0 1
72803: PUSH
72804: LD_INT 4
72806: PLUS
72807: PUSH
72808: LD_VAR 0 2
72812: PUSH
72813: LD_INT 4
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: LIST
72820: PUSH
72821: LD_VAR 0 1
72825: PUSH
72826: LD_INT 3
72828: PLUS
72829: PUSH
72830: LD_VAR 0 2
72834: PUSH
72835: LD_INT 3
72837: PLUS
72838: PUSH
72839: LD_INT 5
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: LIST
72846: PUSH
72847: LD_VAR 0 1
72851: PUSH
72852: LD_VAR 0 2
72856: PUSH
72857: LD_INT 4
72859: PLUS
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: LIST
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: ST_TO_ADDR
// end ; 1 :
72876: GO 73576
72878: LD_INT 1
72880: DOUBLE
72881: EQUAL
72882: IFTRUE 72886
72884: GO 73019
72886: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72887: LD_ADDR_VAR 0 5
72891: PUSH
72892: LD_VAR 0 1
72896: PUSH
72897: LD_VAR 0 2
72901: PUSH
72902: LD_INT 4
72904: MINUS
72905: PUSH
72906: LD_INT 3
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: PUSH
72914: LD_VAR 0 1
72918: PUSH
72919: LD_INT 3
72921: MINUS
72922: PUSH
72923: LD_VAR 0 2
72927: PUSH
72928: LD_INT 3
72930: MINUS
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: LIST
72939: PUSH
72940: LD_VAR 0 1
72944: PUSH
72945: LD_INT 4
72947: MINUS
72948: PUSH
72949: LD_VAR 0 2
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: LIST
72961: PUSH
72962: LD_VAR 0 1
72966: PUSH
72967: LD_VAR 0 2
72971: PUSH
72972: LD_INT 3
72974: PLUS
72975: PUSH
72976: LD_INT 0
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: LIST
72983: PUSH
72984: LD_VAR 0 1
72988: PUSH
72989: LD_INT 4
72991: PLUS
72992: PUSH
72993: LD_VAR 0 2
72997: PUSH
72998: LD_INT 4
73000: PLUS
73001: PUSH
73002: LD_INT 5
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: LIST
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: ST_TO_ADDR
// end ; 2 :
73017: GO 73576
73019: LD_INT 2
73021: DOUBLE
73022: EQUAL
73023: IFTRUE 73027
73025: GO 73156
73027: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73028: LD_ADDR_VAR 0 5
73032: PUSH
73033: LD_VAR 0 1
73037: PUSH
73038: LD_VAR 0 2
73042: PUSH
73043: LD_INT 3
73045: MINUS
73046: PUSH
73047: LD_INT 3
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: LIST
73054: PUSH
73055: LD_VAR 0 1
73059: PUSH
73060: LD_INT 4
73062: PLUS
73063: PUSH
73064: LD_VAR 0 2
73068: PUSH
73069: LD_INT 4
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: LIST
73076: PUSH
73077: LD_VAR 0 1
73081: PUSH
73082: LD_VAR 0 2
73086: PUSH
73087: LD_INT 4
73089: PLUS
73090: PUSH
73091: LD_INT 0
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_VAR 0 1
73103: PUSH
73104: LD_INT 3
73106: MINUS
73107: PUSH
73108: LD_VAR 0 2
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: LIST
73120: PUSH
73121: LD_VAR 0 1
73125: PUSH
73126: LD_INT 4
73128: MINUS
73129: PUSH
73130: LD_VAR 0 2
73134: PUSH
73135: LD_INT 4
73137: MINUS
73138: PUSH
73139: LD_INT 2
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: LIST
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: ST_TO_ADDR
// end ; 3 :
73154: GO 73576
73156: LD_INT 3
73158: DOUBLE
73159: EQUAL
73160: IFTRUE 73164
73162: GO 73297
73164: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73165: LD_ADDR_VAR 0 5
73169: PUSH
73170: LD_VAR 0 1
73174: PUSH
73175: LD_INT 3
73177: PLUS
73178: PUSH
73179: LD_VAR 0 2
73183: PUSH
73184: LD_INT 4
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: LIST
73191: PUSH
73192: LD_VAR 0 1
73196: PUSH
73197: LD_INT 4
73199: PLUS
73200: PUSH
73201: LD_VAR 0 2
73205: PUSH
73206: LD_INT 4
73208: PLUS
73209: PUSH
73210: LD_INT 5
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: LIST
73217: PUSH
73218: LD_VAR 0 1
73222: PUSH
73223: LD_INT 4
73225: MINUS
73226: PUSH
73227: LD_VAR 0 2
73231: PUSH
73232: LD_INT 1
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: PUSH
73240: LD_VAR 0 1
73244: PUSH
73245: LD_VAR 0 2
73249: PUSH
73250: LD_INT 4
73252: MINUS
73253: PUSH
73254: LD_INT 3
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: PUSH
73262: LD_VAR 0 1
73266: PUSH
73267: LD_INT 3
73269: MINUS
73270: PUSH
73271: LD_VAR 0 2
73275: PUSH
73276: LD_INT 3
73278: MINUS
73279: PUSH
73280: LD_INT 2
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: LIST
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: ST_TO_ADDR
// end ; 4 :
73295: GO 73576
73297: LD_INT 4
73299: DOUBLE
73300: EQUAL
73301: IFTRUE 73305
73303: GO 73438
73305: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73306: LD_ADDR_VAR 0 5
73310: PUSH
73311: LD_VAR 0 1
73315: PUSH
73316: LD_VAR 0 2
73320: PUSH
73321: LD_INT 4
73323: PLUS
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: LIST
73332: PUSH
73333: LD_VAR 0 1
73337: PUSH
73338: LD_INT 3
73340: PLUS
73341: PUSH
73342: LD_VAR 0 2
73346: PUSH
73347: LD_INT 3
73349: PLUS
73350: PUSH
73351: LD_INT 5
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: LIST
73358: PUSH
73359: LD_VAR 0 1
73363: PUSH
73364: LD_INT 4
73366: PLUS
73367: PUSH
73368: LD_VAR 0 2
73372: PUSH
73373: LD_INT 4
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: LIST
73380: PUSH
73381: LD_VAR 0 1
73385: PUSH
73386: LD_VAR 0 2
73390: PUSH
73391: LD_INT 3
73393: MINUS
73394: PUSH
73395: LD_INT 3
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: PUSH
73403: LD_VAR 0 1
73407: PUSH
73408: LD_INT 4
73410: MINUS
73411: PUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 4
73419: MINUS
73420: PUSH
73421: LD_INT 2
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: ST_TO_ADDR
// end ; 5 :
73436: GO 73576
73438: LD_INT 5
73440: DOUBLE
73441: EQUAL
73442: IFTRUE 73446
73444: GO 73575
73446: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73447: LD_ADDR_VAR 0 5
73451: PUSH
73452: LD_VAR 0 1
73456: PUSH
73457: LD_INT 4
73459: MINUS
73460: PUSH
73461: LD_VAR 0 2
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: LIST
73473: PUSH
73474: LD_VAR 0 1
73478: PUSH
73479: LD_VAR 0 2
73483: PUSH
73484: LD_INT 4
73486: MINUS
73487: PUSH
73488: LD_INT 3
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: PUSH
73496: LD_VAR 0 1
73500: PUSH
73501: LD_INT 4
73503: PLUS
73504: PUSH
73505: LD_VAR 0 2
73509: PUSH
73510: LD_INT 4
73512: PLUS
73513: PUSH
73514: LD_INT 5
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: LIST
73521: PUSH
73522: LD_VAR 0 1
73526: PUSH
73527: LD_INT 3
73529: PLUS
73530: PUSH
73531: LD_VAR 0 2
73535: PUSH
73536: LD_INT 4
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: PUSH
73544: LD_VAR 0 1
73548: PUSH
73549: LD_VAR 0 2
73553: PUSH
73554: LD_INT 3
73556: PLUS
73557: PUSH
73558: LD_INT 0
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: LIST
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: ST_TO_ADDR
// end ; end ;
73573: GO 73576
73575: POP
// result := list ;
73576: LD_ADDR_VAR 0 4
73580: PUSH
73581: LD_VAR 0 5
73585: ST_TO_ADDR
// end ;
73586: LD_VAR 0 4
73590: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73591: LD_INT 0
73593: PPUSH
73594: PPUSH
73595: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73596: LD_VAR 0 1
73600: NOT
73601: PUSH
73602: LD_VAR 0 2
73606: PUSH
73607: LD_INT 1
73609: PUSH
73610: LD_INT 2
73612: PUSH
73613: LD_INT 3
73615: PUSH
73616: LD_INT 4
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: IN
73625: NOT
73626: OR
73627: IFFALSE 73631
// exit ;
73629: GO 73723
// tmp := [ ] ;
73631: LD_ADDR_VAR 0 5
73635: PUSH
73636: EMPTY
73637: ST_TO_ADDR
// for i in units do
73638: LD_ADDR_VAR 0 4
73642: PUSH
73643: LD_VAR 0 1
73647: PUSH
73648: FOR_IN
73649: IFFALSE 73692
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73651: LD_ADDR_VAR 0 5
73655: PUSH
73656: LD_VAR 0 5
73660: PPUSH
73661: LD_VAR 0 5
73665: PUSH
73666: LD_INT 1
73668: PLUS
73669: PPUSH
73670: LD_VAR 0 4
73674: PPUSH
73675: LD_VAR 0 2
73679: PPUSH
73680: CALL_OW 259
73684: PPUSH
73685: CALL_OW 2
73689: ST_TO_ADDR
73690: GO 73648
73692: POP
73693: POP
// if not tmp then
73694: LD_VAR 0 5
73698: NOT
73699: IFFALSE 73703
// exit ;
73701: GO 73723
// result := SortListByListDesc ( units , tmp ) ;
73703: LD_ADDR_VAR 0 3
73707: PUSH
73708: LD_VAR 0 1
73712: PPUSH
73713: LD_VAR 0 5
73717: PPUSH
73718: CALL_OW 77
73722: ST_TO_ADDR
// end ;
73723: LD_VAR 0 3
73727: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73728: LD_INT 0
73730: PPUSH
73731: PPUSH
73732: PPUSH
// result := false ;
73733: LD_ADDR_VAR 0 3
73737: PUSH
73738: LD_INT 0
73740: ST_TO_ADDR
// x := GetX ( building ) ;
73741: LD_ADDR_VAR 0 4
73745: PUSH
73746: LD_VAR 0 2
73750: PPUSH
73751: CALL_OW 250
73755: ST_TO_ADDR
// y := GetY ( building ) ;
73756: LD_ADDR_VAR 0 5
73760: PUSH
73761: LD_VAR 0 2
73765: PPUSH
73766: CALL_OW 251
73770: ST_TO_ADDR
// if not building or not x or not y then
73771: LD_VAR 0 2
73775: NOT
73776: PUSH
73777: LD_VAR 0 4
73781: NOT
73782: OR
73783: PUSH
73784: LD_VAR 0 5
73788: NOT
73789: OR
73790: IFFALSE 73794
// exit ;
73792: GO 73886
// if GetTaskList ( unit ) then
73794: LD_VAR 0 1
73798: PPUSH
73799: CALL_OW 437
73803: IFFALSE 73886
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73805: LD_STRING e
73807: PUSH
73808: LD_VAR 0 1
73812: PPUSH
73813: CALL_OW 437
73817: PUSH
73818: LD_INT 1
73820: ARRAY
73821: PUSH
73822: LD_INT 1
73824: ARRAY
73825: EQUAL
73826: PUSH
73827: LD_VAR 0 4
73831: PUSH
73832: LD_VAR 0 1
73836: PPUSH
73837: CALL_OW 437
73841: PUSH
73842: LD_INT 1
73844: ARRAY
73845: PUSH
73846: LD_INT 2
73848: ARRAY
73849: EQUAL
73850: AND
73851: PUSH
73852: LD_VAR 0 5
73856: PUSH
73857: LD_VAR 0 1
73861: PPUSH
73862: CALL_OW 437
73866: PUSH
73867: LD_INT 1
73869: ARRAY
73870: PUSH
73871: LD_INT 3
73873: ARRAY
73874: EQUAL
73875: AND
73876: IFFALSE 73886
// result := true end ;
73878: LD_ADDR_VAR 0 3
73882: PUSH
73883: LD_INT 1
73885: ST_TO_ADDR
// end ;
73886: LD_VAR 0 3
73890: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73891: LD_INT 0
73893: PPUSH
// result := false ;
73894: LD_ADDR_VAR 0 4
73898: PUSH
73899: LD_INT 0
73901: ST_TO_ADDR
// if GetTaskList ( unit ) then
73902: LD_VAR 0 1
73906: PPUSH
73907: CALL_OW 437
73911: IFFALSE 73994
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73913: LD_STRING M
73915: PUSH
73916: LD_VAR 0 1
73920: PPUSH
73921: CALL_OW 437
73925: PUSH
73926: LD_INT 1
73928: ARRAY
73929: PUSH
73930: LD_INT 1
73932: ARRAY
73933: EQUAL
73934: PUSH
73935: LD_VAR 0 2
73939: PUSH
73940: LD_VAR 0 1
73944: PPUSH
73945: CALL_OW 437
73949: PUSH
73950: LD_INT 1
73952: ARRAY
73953: PUSH
73954: LD_INT 2
73956: ARRAY
73957: EQUAL
73958: AND
73959: PUSH
73960: LD_VAR 0 3
73964: PUSH
73965: LD_VAR 0 1
73969: PPUSH
73970: CALL_OW 437
73974: PUSH
73975: LD_INT 1
73977: ARRAY
73978: PUSH
73979: LD_INT 3
73981: ARRAY
73982: EQUAL
73983: AND
73984: IFFALSE 73994
// result := true ;
73986: LD_ADDR_VAR 0 4
73990: PUSH
73991: LD_INT 1
73993: ST_TO_ADDR
// end ; end ;
73994: LD_VAR 0 4
73998: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73999: LD_INT 0
74001: PPUSH
74002: PPUSH
74003: PPUSH
74004: PPUSH
// if not unit or not area then
74005: LD_VAR 0 1
74009: NOT
74010: PUSH
74011: LD_VAR 0 2
74015: NOT
74016: OR
74017: IFFALSE 74021
// exit ;
74019: GO 74185
// tmp := AreaToList ( area , i ) ;
74021: LD_ADDR_VAR 0 6
74025: PUSH
74026: LD_VAR 0 2
74030: PPUSH
74031: LD_VAR 0 5
74035: PPUSH
74036: CALL_OW 517
74040: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74041: LD_ADDR_VAR 0 5
74045: PUSH
74046: DOUBLE
74047: LD_INT 1
74049: DEC
74050: ST_TO_ADDR
74051: LD_VAR 0 6
74055: PUSH
74056: LD_INT 1
74058: ARRAY
74059: PUSH
74060: FOR_TO
74061: IFFALSE 74183
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74063: LD_ADDR_VAR 0 7
74067: PUSH
74068: LD_VAR 0 6
74072: PUSH
74073: LD_INT 1
74075: ARRAY
74076: PUSH
74077: LD_VAR 0 5
74081: ARRAY
74082: PUSH
74083: LD_VAR 0 6
74087: PUSH
74088: LD_INT 2
74090: ARRAY
74091: PUSH
74092: LD_VAR 0 5
74096: ARRAY
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74102: LD_VAR 0 7
74106: PUSH
74107: LD_INT 1
74109: ARRAY
74110: PPUSH
74111: LD_VAR 0 7
74115: PUSH
74116: LD_INT 2
74118: ARRAY
74119: PPUSH
74120: CALL_OW 428
74124: PUSH
74125: LD_INT 0
74127: EQUAL
74128: IFFALSE 74181
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74130: LD_VAR 0 1
74134: PPUSH
74135: LD_VAR 0 7
74139: PUSH
74140: LD_INT 1
74142: ARRAY
74143: PPUSH
74144: LD_VAR 0 7
74148: PUSH
74149: LD_INT 2
74151: ARRAY
74152: PPUSH
74153: LD_VAR 0 3
74157: PPUSH
74158: CALL_OW 48
// result := IsPlaced ( unit ) ;
74162: LD_ADDR_VAR 0 4
74166: PUSH
74167: LD_VAR 0 1
74171: PPUSH
74172: CALL_OW 305
74176: ST_TO_ADDR
// exit ;
74177: POP
74178: POP
74179: GO 74185
// end ; end ;
74181: GO 74060
74183: POP
74184: POP
// end ;
74185: LD_VAR 0 4
74189: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74190: LD_INT 0
74192: PPUSH
74193: PPUSH
74194: PPUSH
// if not side or side > 8 then
74195: LD_VAR 0 1
74199: NOT
74200: PUSH
74201: LD_VAR 0 1
74205: PUSH
74206: LD_INT 8
74208: GREATER
74209: OR
74210: IFFALSE 74214
// exit ;
74212: GO 74401
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74214: LD_ADDR_VAR 0 4
74218: PUSH
74219: LD_INT 22
74221: PUSH
74222: LD_VAR 0 1
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 21
74233: PUSH
74234: LD_INT 3
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PPUSH
74245: CALL_OW 69
74249: ST_TO_ADDR
// if not tmp then
74250: LD_VAR 0 4
74254: NOT
74255: IFFALSE 74259
// exit ;
74257: GO 74401
// enable_addtolog := true ;
74259: LD_ADDR_OWVAR 81
74263: PUSH
74264: LD_INT 1
74266: ST_TO_ADDR
// AddToLog ( [ ) ;
74267: LD_STRING [
74269: PPUSH
74270: CALL_OW 561
// for i in tmp do
74274: LD_ADDR_VAR 0 3
74278: PUSH
74279: LD_VAR 0 4
74283: PUSH
74284: FOR_IN
74285: IFFALSE 74392
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74287: LD_STRING [
74289: PUSH
74290: LD_VAR 0 3
74294: PPUSH
74295: CALL_OW 266
74299: STR
74300: PUSH
74301: LD_STRING , 
74303: STR
74304: PUSH
74305: LD_VAR 0 3
74309: PPUSH
74310: CALL_OW 250
74314: STR
74315: PUSH
74316: LD_STRING , 
74318: STR
74319: PUSH
74320: LD_VAR 0 3
74324: PPUSH
74325: CALL_OW 251
74329: STR
74330: PUSH
74331: LD_STRING , 
74333: STR
74334: PUSH
74335: LD_VAR 0 3
74339: PPUSH
74340: CALL_OW 254
74344: STR
74345: PUSH
74346: LD_STRING , 
74348: STR
74349: PUSH
74350: LD_VAR 0 3
74354: PPUSH
74355: LD_INT 1
74357: PPUSH
74358: CALL_OW 268
74362: STR
74363: PUSH
74364: LD_STRING , 
74366: STR
74367: PUSH
74368: LD_VAR 0 3
74372: PPUSH
74373: LD_INT 2
74375: PPUSH
74376: CALL_OW 268
74380: STR
74381: PUSH
74382: LD_STRING ],
74384: STR
74385: PPUSH
74386: CALL_OW 561
// end ;
74390: GO 74284
74392: POP
74393: POP
// AddToLog ( ]; ) ;
74394: LD_STRING ];
74396: PPUSH
74397: CALL_OW 561
// end ;
74401: LD_VAR 0 2
74405: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74406: LD_INT 0
74408: PPUSH
74409: PPUSH
74410: PPUSH
74411: PPUSH
74412: PPUSH
// if not area or not rate or not max then
74413: LD_VAR 0 1
74417: NOT
74418: PUSH
74419: LD_VAR 0 2
74423: NOT
74424: OR
74425: PUSH
74426: LD_VAR 0 4
74430: NOT
74431: OR
74432: IFFALSE 74436
// exit ;
74434: GO 74625
// while 1 do
74436: LD_INT 1
74438: IFFALSE 74625
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74440: LD_ADDR_VAR 0 9
74444: PUSH
74445: LD_VAR 0 1
74449: PPUSH
74450: LD_INT 1
74452: PPUSH
74453: CALL_OW 287
74457: PUSH
74458: LD_INT 10
74460: MUL
74461: ST_TO_ADDR
// r := rate / 10 ;
74462: LD_ADDR_VAR 0 7
74466: PUSH
74467: LD_VAR 0 2
74471: PUSH
74472: LD_INT 10
74474: DIVREAL
74475: ST_TO_ADDR
// time := 1 1$00 ;
74476: LD_ADDR_VAR 0 8
74480: PUSH
74481: LD_INT 2100
74483: ST_TO_ADDR
// if amount < min then
74484: LD_VAR 0 9
74488: PUSH
74489: LD_VAR 0 3
74493: LESS
74494: IFFALSE 74512
// r := r * 2 else
74496: LD_ADDR_VAR 0 7
74500: PUSH
74501: LD_VAR 0 7
74505: PUSH
74506: LD_INT 2
74508: MUL
74509: ST_TO_ADDR
74510: GO 74538
// if amount > max then
74512: LD_VAR 0 9
74516: PUSH
74517: LD_VAR 0 4
74521: GREATER
74522: IFFALSE 74538
// r := r / 2 ;
74524: LD_ADDR_VAR 0 7
74528: PUSH
74529: LD_VAR 0 7
74533: PUSH
74534: LD_INT 2
74536: DIVREAL
74537: ST_TO_ADDR
// time := time / r ;
74538: LD_ADDR_VAR 0 8
74542: PUSH
74543: LD_VAR 0 8
74547: PUSH
74548: LD_VAR 0 7
74552: DIVREAL
74553: ST_TO_ADDR
// if time < 0 then
74554: LD_VAR 0 8
74558: PUSH
74559: LD_INT 0
74561: LESS
74562: IFFALSE 74579
// time := time * - 1 ;
74564: LD_ADDR_VAR 0 8
74568: PUSH
74569: LD_VAR 0 8
74573: PUSH
74574: LD_INT 1
74576: NEG
74577: MUL
74578: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74579: LD_VAR 0 8
74583: PUSH
74584: LD_INT 35
74586: PPUSH
74587: LD_INT 875
74589: PPUSH
74590: CALL_OW 12
74594: PLUS
74595: PPUSH
74596: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74600: LD_INT 1
74602: PPUSH
74603: LD_INT 5
74605: PPUSH
74606: CALL_OW 12
74610: PPUSH
74611: LD_VAR 0 1
74615: PPUSH
74616: LD_INT 1
74618: PPUSH
74619: CALL_OW 55
// end ;
74623: GO 74436
// end ;
74625: LD_VAR 0 5
74629: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74630: LD_INT 0
74632: PPUSH
74633: PPUSH
74634: PPUSH
74635: PPUSH
74636: PPUSH
74637: PPUSH
74638: PPUSH
74639: PPUSH
// if not turrets or not factories then
74640: LD_VAR 0 1
74644: NOT
74645: PUSH
74646: LD_VAR 0 2
74650: NOT
74651: OR
74652: IFFALSE 74656
// exit ;
74654: GO 74963
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74656: LD_ADDR_VAR 0 10
74660: PUSH
74661: LD_INT 5
74663: PUSH
74664: LD_INT 6
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_INT 2
74673: PUSH
74674: LD_INT 4
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 3
74683: PUSH
74684: LD_INT 5
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 24
74698: PUSH
74699: LD_INT 25
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PUSH
74706: LD_INT 23
74708: PUSH
74709: LD_INT 27
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 42
74722: PUSH
74723: LD_INT 43
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 44
74732: PUSH
74733: LD_INT 46
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 45
74742: PUSH
74743: LD_INT 47
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: LIST
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: LIST
74759: ST_TO_ADDR
// result := [ ] ;
74760: LD_ADDR_VAR 0 3
74764: PUSH
74765: EMPTY
74766: ST_TO_ADDR
// for i in turrets do
74767: LD_ADDR_VAR 0 4
74771: PUSH
74772: LD_VAR 0 1
74776: PUSH
74777: FOR_IN
74778: IFFALSE 74961
// begin nat := GetNation ( i ) ;
74780: LD_ADDR_VAR 0 7
74784: PUSH
74785: LD_VAR 0 4
74789: PPUSH
74790: CALL_OW 248
74794: ST_TO_ADDR
// weapon := 0 ;
74795: LD_ADDR_VAR 0 8
74799: PUSH
74800: LD_INT 0
74802: ST_TO_ADDR
// if not nat then
74803: LD_VAR 0 7
74807: NOT
74808: IFFALSE 74812
// continue ;
74810: GO 74777
// for j in list [ nat ] do
74812: LD_ADDR_VAR 0 5
74816: PUSH
74817: LD_VAR 0 10
74821: PUSH
74822: LD_VAR 0 7
74826: ARRAY
74827: PUSH
74828: FOR_IN
74829: IFFALSE 74870
// if GetBWeapon ( i ) = j [ 1 ] then
74831: LD_VAR 0 4
74835: PPUSH
74836: CALL_OW 269
74840: PUSH
74841: LD_VAR 0 5
74845: PUSH
74846: LD_INT 1
74848: ARRAY
74849: EQUAL
74850: IFFALSE 74868
// begin weapon := j [ 2 ] ;
74852: LD_ADDR_VAR 0 8
74856: PUSH
74857: LD_VAR 0 5
74861: PUSH
74862: LD_INT 2
74864: ARRAY
74865: ST_TO_ADDR
// break ;
74866: GO 74870
// end ;
74868: GO 74828
74870: POP
74871: POP
// if not weapon then
74872: LD_VAR 0 8
74876: NOT
74877: IFFALSE 74881
// continue ;
74879: GO 74777
// for k in factories do
74881: LD_ADDR_VAR 0 6
74885: PUSH
74886: LD_VAR 0 2
74890: PUSH
74891: FOR_IN
74892: IFFALSE 74957
// begin weapons := AvailableWeaponList ( k ) ;
74894: LD_ADDR_VAR 0 9
74898: PUSH
74899: LD_VAR 0 6
74903: PPUSH
74904: CALL_OW 478
74908: ST_TO_ADDR
// if not weapons then
74909: LD_VAR 0 9
74913: NOT
74914: IFFALSE 74918
// continue ;
74916: GO 74891
// if weapon in weapons then
74918: LD_VAR 0 8
74922: PUSH
74923: LD_VAR 0 9
74927: IN
74928: IFFALSE 74955
// begin result := [ i , weapon ] ;
74930: LD_ADDR_VAR 0 3
74934: PUSH
74935: LD_VAR 0 4
74939: PUSH
74940: LD_VAR 0 8
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: ST_TO_ADDR
// exit ;
74949: POP
74950: POP
74951: POP
74952: POP
74953: GO 74963
// end ; end ;
74955: GO 74891
74957: POP
74958: POP
// end ;
74959: GO 74777
74961: POP
74962: POP
// end ;
74963: LD_VAR 0 3
74967: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74968: LD_INT 0
74970: PPUSH
// if not side or side > 8 then
74971: LD_VAR 0 3
74975: NOT
74976: PUSH
74977: LD_VAR 0 3
74981: PUSH
74982: LD_INT 8
74984: GREATER
74985: OR
74986: IFFALSE 74990
// exit ;
74988: GO 75049
// if not range then
74990: LD_VAR 0 4
74994: NOT
74995: IFFALSE 75006
// range := - 12 ;
74997: LD_ADDR_VAR 0 4
75001: PUSH
75002: LD_INT 12
75004: NEG
75005: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75006: LD_VAR 0 1
75010: PPUSH
75011: LD_VAR 0 2
75015: PPUSH
75016: LD_VAR 0 3
75020: PPUSH
75021: LD_VAR 0 4
75025: PPUSH
75026: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75030: LD_VAR 0 1
75034: PPUSH
75035: LD_VAR 0 2
75039: PPUSH
75040: LD_VAR 0 3
75044: PPUSH
75045: CALL_OW 331
// end ;
75049: LD_VAR 0 5
75053: RET
// export function Video ( mode ) ; begin
75054: LD_INT 0
75056: PPUSH
// ingame_video = mode ;
75057: LD_ADDR_OWVAR 52
75061: PUSH
75062: LD_VAR 0 1
75066: ST_TO_ADDR
// interface_hidden = mode ;
75067: LD_ADDR_OWVAR 54
75071: PUSH
75072: LD_VAR 0 1
75076: ST_TO_ADDR
// end ;
75077: LD_VAR 0 2
75081: RET
// export function Join ( array , element ) ; begin
75082: LD_INT 0
75084: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75085: LD_ADDR_VAR 0 3
75089: PUSH
75090: LD_VAR 0 1
75094: PPUSH
75095: LD_VAR 0 1
75099: PUSH
75100: LD_INT 1
75102: PLUS
75103: PPUSH
75104: LD_VAR 0 2
75108: PPUSH
75109: CALL_OW 1
75113: ST_TO_ADDR
// end ;
75114: LD_VAR 0 3
75118: RET
// export function JoinUnion ( array , element ) ; begin
75119: LD_INT 0
75121: PPUSH
// result := array union element ;
75122: LD_ADDR_VAR 0 3
75126: PUSH
75127: LD_VAR 0 1
75131: PUSH
75132: LD_VAR 0 2
75136: UNION
75137: ST_TO_ADDR
// end ;
75138: LD_VAR 0 3
75142: RET
// export function GetBehemoths ( side ) ; begin
75143: LD_INT 0
75145: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75146: LD_ADDR_VAR 0 2
75150: PUSH
75151: LD_INT 22
75153: PUSH
75154: LD_VAR 0 1
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 31
75165: PUSH
75166: LD_INT 25
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PPUSH
75177: CALL_OW 69
75181: ST_TO_ADDR
// end ;
75182: LD_VAR 0 2
75186: RET
// export function Shuffle ( array ) ; var i , index ; begin
75187: LD_INT 0
75189: PPUSH
75190: PPUSH
75191: PPUSH
// result := [ ] ;
75192: LD_ADDR_VAR 0 2
75196: PUSH
75197: EMPTY
75198: ST_TO_ADDR
// if not array then
75199: LD_VAR 0 1
75203: NOT
75204: IFFALSE 75208
// exit ;
75206: GO 75307
// Randomize ;
75208: CALL_OW 10
// for i = array downto 1 do
75212: LD_ADDR_VAR 0 3
75216: PUSH
75217: DOUBLE
75218: LD_VAR 0 1
75222: INC
75223: ST_TO_ADDR
75224: LD_INT 1
75226: PUSH
75227: FOR_DOWNTO
75228: IFFALSE 75305
// begin index := rand ( 1 , array ) ;
75230: LD_ADDR_VAR 0 4
75234: PUSH
75235: LD_INT 1
75237: PPUSH
75238: LD_VAR 0 1
75242: PPUSH
75243: CALL_OW 12
75247: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75248: LD_ADDR_VAR 0 2
75252: PUSH
75253: LD_VAR 0 2
75257: PPUSH
75258: LD_VAR 0 2
75262: PUSH
75263: LD_INT 1
75265: PLUS
75266: PPUSH
75267: LD_VAR 0 1
75271: PUSH
75272: LD_VAR 0 4
75276: ARRAY
75277: PPUSH
75278: CALL_OW 2
75282: ST_TO_ADDR
// array := Delete ( array , index ) ;
75283: LD_ADDR_VAR 0 1
75287: PUSH
75288: LD_VAR 0 1
75292: PPUSH
75293: LD_VAR 0 4
75297: PPUSH
75298: CALL_OW 3
75302: ST_TO_ADDR
// end ;
75303: GO 75227
75305: POP
75306: POP
// end ;
75307: LD_VAR 0 2
75311: RET
// export function GetBaseMaterials ( base ) ; begin
75312: LD_INT 0
75314: PPUSH
// result := [ 0 , 0 , 0 ] ;
75315: LD_ADDR_VAR 0 2
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: LD_INT 0
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: LIST
75333: ST_TO_ADDR
// if not base then
75334: LD_VAR 0 1
75338: NOT
75339: IFFALSE 75343
// exit ;
75341: GO 75392
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75343: LD_ADDR_VAR 0 2
75347: PUSH
75348: LD_VAR 0 1
75352: PPUSH
75353: LD_INT 1
75355: PPUSH
75356: CALL_OW 275
75360: PUSH
75361: LD_VAR 0 1
75365: PPUSH
75366: LD_INT 2
75368: PPUSH
75369: CALL_OW 275
75373: PUSH
75374: LD_VAR 0 1
75378: PPUSH
75379: LD_INT 3
75381: PPUSH
75382: CALL_OW 275
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: LIST
75391: ST_TO_ADDR
// end ;
75392: LD_VAR 0 2
75396: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75397: LD_INT 0
75399: PPUSH
75400: PPUSH
// result := array ;
75401: LD_ADDR_VAR 0 3
75405: PUSH
75406: LD_VAR 0 1
75410: ST_TO_ADDR
// if size >= result then
75411: LD_VAR 0 2
75415: PUSH
75416: LD_VAR 0 3
75420: GREATEREQUAL
75421: IFFALSE 75425
// exit ;
75423: GO 75475
// if size then
75425: LD_VAR 0 2
75429: IFFALSE 75475
// for i := array downto size do
75431: LD_ADDR_VAR 0 4
75435: PUSH
75436: DOUBLE
75437: LD_VAR 0 1
75441: INC
75442: ST_TO_ADDR
75443: LD_VAR 0 2
75447: PUSH
75448: FOR_DOWNTO
75449: IFFALSE 75473
// result := Delete ( result , result ) ;
75451: LD_ADDR_VAR 0 3
75455: PUSH
75456: LD_VAR 0 3
75460: PPUSH
75461: LD_VAR 0 3
75465: PPUSH
75466: CALL_OW 3
75470: ST_TO_ADDR
75471: GO 75448
75473: POP
75474: POP
// end ;
75475: LD_VAR 0 3
75479: RET
// export function ComExit ( unit ) ; var tmp ; begin
75480: LD_INT 0
75482: PPUSH
75483: PPUSH
// if not IsInUnit ( unit ) then
75484: LD_VAR 0 1
75488: PPUSH
75489: CALL_OW 310
75493: NOT
75494: IFFALSE 75498
// exit ;
75496: GO 75558
// tmp := IsInUnit ( unit ) ;
75498: LD_ADDR_VAR 0 3
75502: PUSH
75503: LD_VAR 0 1
75507: PPUSH
75508: CALL_OW 310
75512: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75513: LD_VAR 0 3
75517: PPUSH
75518: CALL_OW 247
75522: PUSH
75523: LD_INT 2
75525: EQUAL
75526: IFFALSE 75539
// ComExitVehicle ( unit ) else
75528: LD_VAR 0 1
75532: PPUSH
75533: CALL_OW 121
75537: GO 75548
// ComExitBuilding ( unit ) ;
75539: LD_VAR 0 1
75543: PPUSH
75544: CALL_OW 122
// result := tmp ;
75548: LD_ADDR_VAR 0 2
75552: PUSH
75553: LD_VAR 0 3
75557: ST_TO_ADDR
// end ;
75558: LD_VAR 0 2
75562: RET
// export function ComExitAll ( units ) ; var i ; begin
75563: LD_INT 0
75565: PPUSH
75566: PPUSH
// if not units then
75567: LD_VAR 0 1
75571: NOT
75572: IFFALSE 75576
// exit ;
75574: GO 75602
// for i in units do
75576: LD_ADDR_VAR 0 3
75580: PUSH
75581: LD_VAR 0 1
75585: PUSH
75586: FOR_IN
75587: IFFALSE 75600
// ComExit ( i ) ;
75589: LD_VAR 0 3
75593: PPUSH
75594: CALL 75480 0 1
75598: GO 75586
75600: POP
75601: POP
// end ;
75602: LD_VAR 0 2
75606: RET
// export function ResetHc ; begin
75607: LD_INT 0
75609: PPUSH
// InitHc ;
75610: CALL_OW 19
// hc_importance := 0 ;
75614: LD_ADDR_OWVAR 32
75618: PUSH
75619: LD_INT 0
75621: ST_TO_ADDR
// end ;
75622: LD_VAR 0 1
75626: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75627: LD_INT 0
75629: PPUSH
75630: PPUSH
75631: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75632: LD_ADDR_VAR 0 6
75636: PUSH
75637: LD_VAR 0 1
75641: PUSH
75642: LD_VAR 0 3
75646: PLUS
75647: PUSH
75648: LD_INT 2
75650: DIV
75651: ST_TO_ADDR
// if _x < 0 then
75652: LD_VAR 0 6
75656: PUSH
75657: LD_INT 0
75659: LESS
75660: IFFALSE 75677
// _x := _x * - 1 ;
75662: LD_ADDR_VAR 0 6
75666: PUSH
75667: LD_VAR 0 6
75671: PUSH
75672: LD_INT 1
75674: NEG
75675: MUL
75676: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75677: LD_ADDR_VAR 0 7
75681: PUSH
75682: LD_VAR 0 2
75686: PUSH
75687: LD_VAR 0 4
75691: PLUS
75692: PUSH
75693: LD_INT 2
75695: DIV
75696: ST_TO_ADDR
// if _y < 0 then
75697: LD_VAR 0 7
75701: PUSH
75702: LD_INT 0
75704: LESS
75705: IFFALSE 75722
// _y := _y * - 1 ;
75707: LD_ADDR_VAR 0 7
75711: PUSH
75712: LD_VAR 0 7
75716: PUSH
75717: LD_INT 1
75719: NEG
75720: MUL
75721: ST_TO_ADDR
// result := [ _x , _y ] ;
75722: LD_ADDR_VAR 0 5
75726: PUSH
75727: LD_VAR 0 6
75731: PUSH
75732: LD_VAR 0 7
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: ST_TO_ADDR
// end ;
75741: LD_VAR 0 5
75745: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75746: LD_INT 0
75748: PPUSH
75749: PPUSH
75750: PPUSH
75751: PPUSH
// task := GetTaskList ( unit ) ;
75752: LD_ADDR_VAR 0 7
75756: PUSH
75757: LD_VAR 0 1
75761: PPUSH
75762: CALL_OW 437
75766: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75767: LD_VAR 0 7
75771: NOT
75772: PUSH
75773: LD_VAR 0 1
75777: PPUSH
75778: LD_VAR 0 2
75782: PPUSH
75783: CALL_OW 308
75787: NOT
75788: AND
75789: IFFALSE 75793
// exit ;
75791: GO 75911
// if IsInArea ( unit , area ) then
75793: LD_VAR 0 1
75797: PPUSH
75798: LD_VAR 0 2
75802: PPUSH
75803: CALL_OW 308
75807: IFFALSE 75825
// begin ComMoveToArea ( unit , goAway ) ;
75809: LD_VAR 0 1
75813: PPUSH
75814: LD_VAR 0 3
75818: PPUSH
75819: CALL_OW 113
// exit ;
75823: GO 75911
// end ; if task [ 1 ] [ 1 ] <> M then
75825: LD_VAR 0 7
75829: PUSH
75830: LD_INT 1
75832: ARRAY
75833: PUSH
75834: LD_INT 1
75836: ARRAY
75837: PUSH
75838: LD_STRING M
75840: NONEQUAL
75841: IFFALSE 75845
// exit ;
75843: GO 75911
// x := task [ 1 ] [ 2 ] ;
75845: LD_ADDR_VAR 0 5
75849: PUSH
75850: LD_VAR 0 7
75854: PUSH
75855: LD_INT 1
75857: ARRAY
75858: PUSH
75859: LD_INT 2
75861: ARRAY
75862: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75863: LD_ADDR_VAR 0 6
75867: PUSH
75868: LD_VAR 0 7
75872: PUSH
75873: LD_INT 1
75875: ARRAY
75876: PUSH
75877: LD_INT 3
75879: ARRAY
75880: ST_TO_ADDR
// if InArea ( x , y , area ) then
75881: LD_VAR 0 5
75885: PPUSH
75886: LD_VAR 0 6
75890: PPUSH
75891: LD_VAR 0 2
75895: PPUSH
75896: CALL_OW 309
75900: IFFALSE 75911
// ComStop ( unit ) ;
75902: LD_VAR 0 1
75906: PPUSH
75907: CALL_OW 141
// end ;
75911: LD_VAR 0 4
75915: RET
// export function Abs ( value ) ; begin
75916: LD_INT 0
75918: PPUSH
// result := value ;
75919: LD_ADDR_VAR 0 2
75923: PUSH
75924: LD_VAR 0 1
75928: ST_TO_ADDR
// if value < 0 then
75929: LD_VAR 0 1
75933: PUSH
75934: LD_INT 0
75936: LESS
75937: IFFALSE 75954
// result := value * - 1 ;
75939: LD_ADDR_VAR 0 2
75943: PUSH
75944: LD_VAR 0 1
75948: PUSH
75949: LD_INT 1
75951: NEG
75952: MUL
75953: ST_TO_ADDR
// end ;
75954: LD_VAR 0 2
75958: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75959: LD_INT 0
75961: PPUSH
75962: PPUSH
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
75967: PPUSH
75968: PPUSH
// if not unit or not building then
75969: LD_VAR 0 1
75973: NOT
75974: PUSH
75975: LD_VAR 0 2
75979: NOT
75980: OR
75981: IFFALSE 75985
// exit ;
75983: GO 76211
// x := GetX ( building ) ;
75985: LD_ADDR_VAR 0 4
75989: PUSH
75990: LD_VAR 0 2
75994: PPUSH
75995: CALL_OW 250
75999: ST_TO_ADDR
// y := GetY ( building ) ;
76000: LD_ADDR_VAR 0 6
76004: PUSH
76005: LD_VAR 0 2
76009: PPUSH
76010: CALL_OW 251
76014: ST_TO_ADDR
// d := GetDir ( building ) ;
76015: LD_ADDR_VAR 0 8
76019: PUSH
76020: LD_VAR 0 2
76024: PPUSH
76025: CALL_OW 254
76029: ST_TO_ADDR
// r := 4 ;
76030: LD_ADDR_VAR 0 9
76034: PUSH
76035: LD_INT 4
76037: ST_TO_ADDR
// for i := 1 to 5 do
76038: LD_ADDR_VAR 0 10
76042: PUSH
76043: DOUBLE
76044: LD_INT 1
76046: DEC
76047: ST_TO_ADDR
76048: LD_INT 5
76050: PUSH
76051: FOR_TO
76052: IFFALSE 76209
// begin _x := ShiftX ( x , d , r + i ) ;
76054: LD_ADDR_VAR 0 5
76058: PUSH
76059: LD_VAR 0 4
76063: PPUSH
76064: LD_VAR 0 8
76068: PPUSH
76069: LD_VAR 0 9
76073: PUSH
76074: LD_VAR 0 10
76078: PLUS
76079: PPUSH
76080: CALL_OW 272
76084: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76085: LD_ADDR_VAR 0 7
76089: PUSH
76090: LD_VAR 0 6
76094: PPUSH
76095: LD_VAR 0 8
76099: PPUSH
76100: LD_VAR 0 9
76104: PUSH
76105: LD_VAR 0 10
76109: PLUS
76110: PPUSH
76111: CALL_OW 273
76115: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76116: LD_VAR 0 5
76120: PPUSH
76121: LD_VAR 0 7
76125: PPUSH
76126: CALL_OW 488
76130: PUSH
76131: LD_VAR 0 5
76135: PPUSH
76136: LD_VAR 0 7
76140: PPUSH
76141: CALL_OW 428
76145: PPUSH
76146: CALL_OW 247
76150: PUSH
76151: LD_INT 3
76153: PUSH
76154: LD_INT 2
76156: PUSH
76157: EMPTY
76158: LIST
76159: LIST
76160: IN
76161: NOT
76162: AND
76163: IFFALSE 76207
// begin ComMoveXY ( unit , _x , _y ) ;
76165: LD_VAR 0 1
76169: PPUSH
76170: LD_VAR 0 5
76174: PPUSH
76175: LD_VAR 0 7
76179: PPUSH
76180: CALL_OW 111
// result := [ _x , _y ] ;
76184: LD_ADDR_VAR 0 3
76188: PUSH
76189: LD_VAR 0 5
76193: PUSH
76194: LD_VAR 0 7
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: ST_TO_ADDR
// exit ;
76203: POP
76204: POP
76205: GO 76211
// end ; end ;
76207: GO 76051
76209: POP
76210: POP
// end ;
76211: LD_VAR 0 3
76215: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76216: LD_INT 0
76218: PPUSH
76219: PPUSH
76220: PPUSH
// result := 0 ;
76221: LD_ADDR_VAR 0 3
76225: PUSH
76226: LD_INT 0
76228: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76229: LD_VAR 0 1
76233: PUSH
76234: LD_INT 0
76236: LESS
76237: PUSH
76238: LD_VAR 0 1
76242: PUSH
76243: LD_INT 8
76245: GREATER
76246: OR
76247: PUSH
76248: LD_VAR 0 2
76252: PUSH
76253: LD_INT 0
76255: LESS
76256: OR
76257: PUSH
76258: LD_VAR 0 2
76262: PUSH
76263: LD_INT 8
76265: GREATER
76266: OR
76267: IFFALSE 76271
// exit ;
76269: GO 76346
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76271: LD_ADDR_VAR 0 4
76275: PUSH
76276: LD_INT 22
76278: PUSH
76279: LD_VAR 0 2
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: PPUSH
76288: CALL_OW 69
76292: PUSH
76293: FOR_IN
76294: IFFALSE 76344
// begin un := UnitShoot ( i ) ;
76296: LD_ADDR_VAR 0 5
76300: PUSH
76301: LD_VAR 0 4
76305: PPUSH
76306: CALL_OW 504
76310: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76311: LD_VAR 0 5
76315: PPUSH
76316: CALL_OW 255
76320: PUSH
76321: LD_VAR 0 1
76325: EQUAL
76326: IFFALSE 76342
// begin result := un ;
76328: LD_ADDR_VAR 0 3
76332: PUSH
76333: LD_VAR 0 5
76337: ST_TO_ADDR
// exit ;
76338: POP
76339: POP
76340: GO 76346
// end ; end ;
76342: GO 76293
76344: POP
76345: POP
// end ;
76346: LD_VAR 0 3
76350: RET
// export function GetCargoBay ( units ) ; begin
76351: LD_INT 0
76353: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76354: LD_ADDR_VAR 0 2
76358: PUSH
76359: LD_VAR 0 1
76363: PPUSH
76364: LD_INT 2
76366: PUSH
76367: LD_INT 34
76369: PUSH
76370: LD_INT 12
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 34
76379: PUSH
76380: LD_INT 51
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 34
76389: PUSH
76390: LD_INT 32
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: LD_INT 34
76399: PUSH
76400: LD_INT 89
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: LIST
76411: LIST
76412: LIST
76413: PPUSH
76414: CALL_OW 72
76418: ST_TO_ADDR
// end ;
76419: LD_VAR 0 2
76423: RET
// export function Negate ( value ) ; begin
76424: LD_INT 0
76426: PPUSH
// result := not value ;
76427: LD_ADDR_VAR 0 2
76431: PUSH
76432: LD_VAR 0 1
76436: NOT
76437: ST_TO_ADDR
// end ;
76438: LD_VAR 0 2
76442: RET
// export function Inc ( value ) ; begin
76443: LD_INT 0
76445: PPUSH
// result := value + 1 ;
76446: LD_ADDR_VAR 0 2
76450: PUSH
76451: LD_VAR 0 1
76455: PUSH
76456: LD_INT 1
76458: PLUS
76459: ST_TO_ADDR
// end ;
76460: LD_VAR 0 2
76464: RET
// export function Dec ( value ) ; begin
76465: LD_INT 0
76467: PPUSH
// result := value - 1 ;
76468: LD_ADDR_VAR 0 2
76472: PUSH
76473: LD_VAR 0 1
76477: PUSH
76478: LD_INT 1
76480: MINUS
76481: ST_TO_ADDR
// end ;
76482: LD_VAR 0 2
76486: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76487: LD_INT 0
76489: PPUSH
76490: PPUSH
76491: PPUSH
76492: PPUSH
76493: PPUSH
76494: PPUSH
76495: PPUSH
76496: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76497: LD_VAR 0 1
76501: PPUSH
76502: LD_VAR 0 2
76506: PPUSH
76507: CALL_OW 488
76511: NOT
76512: PUSH
76513: LD_VAR 0 3
76517: PPUSH
76518: LD_VAR 0 4
76522: PPUSH
76523: CALL_OW 488
76527: NOT
76528: OR
76529: IFFALSE 76542
// begin result := - 1 ;
76531: LD_ADDR_VAR 0 5
76535: PUSH
76536: LD_INT 1
76538: NEG
76539: ST_TO_ADDR
// exit ;
76540: GO 76777
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76542: LD_ADDR_VAR 0 12
76546: PUSH
76547: LD_VAR 0 1
76551: PPUSH
76552: LD_VAR 0 2
76556: PPUSH
76557: LD_VAR 0 3
76561: PPUSH
76562: LD_VAR 0 4
76566: PPUSH
76567: CALL 75627 0 4
76571: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76572: LD_ADDR_VAR 0 11
76576: PUSH
76577: LD_VAR 0 1
76581: PPUSH
76582: LD_VAR 0 2
76586: PPUSH
76587: LD_VAR 0 12
76591: PUSH
76592: LD_INT 1
76594: ARRAY
76595: PPUSH
76596: LD_VAR 0 12
76600: PUSH
76601: LD_INT 2
76603: ARRAY
76604: PPUSH
76605: CALL_OW 298
76609: ST_TO_ADDR
// distance := 9999 ;
76610: LD_ADDR_VAR 0 10
76614: PUSH
76615: LD_INT 9999
76617: ST_TO_ADDR
// for i := 0 to 5 do
76618: LD_ADDR_VAR 0 6
76622: PUSH
76623: DOUBLE
76624: LD_INT 0
76626: DEC
76627: ST_TO_ADDR
76628: LD_INT 5
76630: PUSH
76631: FOR_TO
76632: IFFALSE 76775
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76634: LD_ADDR_VAR 0 7
76638: PUSH
76639: LD_VAR 0 1
76643: PPUSH
76644: LD_VAR 0 6
76648: PPUSH
76649: LD_VAR 0 11
76653: PPUSH
76654: CALL_OW 272
76658: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76659: LD_ADDR_VAR 0 8
76663: PUSH
76664: LD_VAR 0 2
76668: PPUSH
76669: LD_VAR 0 6
76673: PPUSH
76674: LD_VAR 0 11
76678: PPUSH
76679: CALL_OW 273
76683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76684: LD_VAR 0 7
76688: PPUSH
76689: LD_VAR 0 8
76693: PPUSH
76694: CALL_OW 488
76698: NOT
76699: IFFALSE 76703
// continue ;
76701: GO 76631
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76703: LD_ADDR_VAR 0 9
76707: PUSH
76708: LD_VAR 0 12
76712: PUSH
76713: LD_INT 1
76715: ARRAY
76716: PPUSH
76717: LD_VAR 0 12
76721: PUSH
76722: LD_INT 2
76724: ARRAY
76725: PPUSH
76726: LD_VAR 0 7
76730: PPUSH
76731: LD_VAR 0 8
76735: PPUSH
76736: CALL_OW 298
76740: ST_TO_ADDR
// if tmp < distance then
76741: LD_VAR 0 9
76745: PUSH
76746: LD_VAR 0 10
76750: LESS
76751: IFFALSE 76773
// begin result := i ;
76753: LD_ADDR_VAR 0 5
76757: PUSH
76758: LD_VAR 0 6
76762: ST_TO_ADDR
// distance := tmp ;
76763: LD_ADDR_VAR 0 10
76767: PUSH
76768: LD_VAR 0 9
76772: ST_TO_ADDR
// end ; end ;
76773: GO 76631
76775: POP
76776: POP
// end ;
76777: LD_VAR 0 5
76781: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76782: LD_INT 0
76784: PPUSH
76785: PPUSH
// if not driver or not IsInUnit ( driver ) then
76786: LD_VAR 0 1
76790: NOT
76791: PUSH
76792: LD_VAR 0 1
76796: PPUSH
76797: CALL_OW 310
76801: NOT
76802: OR
76803: IFFALSE 76807
// exit ;
76805: GO 76897
// vehicle := IsInUnit ( driver ) ;
76807: LD_ADDR_VAR 0 3
76811: PUSH
76812: LD_VAR 0 1
76816: PPUSH
76817: CALL_OW 310
76821: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76822: LD_VAR 0 1
76826: PPUSH
76827: LD_STRING \
76829: PUSH
76830: LD_INT 0
76832: PUSH
76833: LD_INT 0
76835: PUSH
76836: LD_INT 0
76838: PUSH
76839: LD_INT 0
76841: PUSH
76842: LD_INT 0
76844: PUSH
76845: LD_INT 0
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: PUSH
76857: LD_STRING E
76859: PUSH
76860: LD_INT 0
76862: PUSH
76863: LD_INT 0
76865: PUSH
76866: LD_VAR 0 3
76870: PUSH
76871: LD_INT 0
76873: PUSH
76874: LD_INT 0
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: LIST
76887: LIST
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PPUSH
76893: CALL_OW 446
// end ;
76897: LD_VAR 0 2
76901: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76902: LD_INT 0
76904: PPUSH
76905: PPUSH
// if not driver or not IsInUnit ( driver ) then
76906: LD_VAR 0 1
76910: NOT
76911: PUSH
76912: LD_VAR 0 1
76916: PPUSH
76917: CALL_OW 310
76921: NOT
76922: OR
76923: IFFALSE 76927
// exit ;
76925: GO 77017
// vehicle := IsInUnit ( driver ) ;
76927: LD_ADDR_VAR 0 3
76931: PUSH
76932: LD_VAR 0 1
76936: PPUSH
76937: CALL_OW 310
76941: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76942: LD_VAR 0 1
76946: PPUSH
76947: LD_STRING \
76949: PUSH
76950: LD_INT 0
76952: PUSH
76953: LD_INT 0
76955: PUSH
76956: LD_INT 0
76958: PUSH
76959: LD_INT 0
76961: PUSH
76962: LD_INT 0
76964: PUSH
76965: LD_INT 0
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: LIST
76975: LIST
76976: PUSH
76977: LD_STRING E
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: LD_INT 0
76985: PUSH
76986: LD_VAR 0 3
76990: PUSH
76991: LD_INT 0
76993: PUSH
76994: LD_INT 0
76996: PUSH
76997: LD_INT 0
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PPUSH
77013: CALL_OW 447
// end ;
77017: LD_VAR 0 2
77021: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77022: LD_INT 0
77024: PPUSH
77025: PPUSH
77026: PPUSH
// tmp := [ ] ;
77027: LD_ADDR_VAR 0 5
77031: PUSH
77032: EMPTY
77033: ST_TO_ADDR
// for i in units do
77034: LD_ADDR_VAR 0 4
77038: PUSH
77039: LD_VAR 0 1
77043: PUSH
77044: FOR_IN
77045: IFFALSE 77083
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77047: LD_ADDR_VAR 0 5
77051: PUSH
77052: LD_VAR 0 5
77056: PPUSH
77057: LD_VAR 0 5
77061: PUSH
77062: LD_INT 1
77064: PLUS
77065: PPUSH
77066: LD_VAR 0 4
77070: PPUSH
77071: CALL_OW 256
77075: PPUSH
77076: CALL_OW 2
77080: ST_TO_ADDR
77081: GO 77044
77083: POP
77084: POP
// if not tmp then
77085: LD_VAR 0 5
77089: NOT
77090: IFFALSE 77094
// exit ;
77092: GO 77142
// if asc then
77094: LD_VAR 0 2
77098: IFFALSE 77122
// result := SortListByListAsc ( units , tmp ) else
77100: LD_ADDR_VAR 0 3
77104: PUSH
77105: LD_VAR 0 1
77109: PPUSH
77110: LD_VAR 0 5
77114: PPUSH
77115: CALL_OW 76
77119: ST_TO_ADDR
77120: GO 77142
// result := SortListByListDesc ( units , tmp ) ;
77122: LD_ADDR_VAR 0 3
77126: PUSH
77127: LD_VAR 0 1
77131: PPUSH
77132: LD_VAR 0 5
77136: PPUSH
77137: CALL_OW 77
77141: ST_TO_ADDR
// end ;
77142: LD_VAR 0 3
77146: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77147: LD_INT 0
77149: PPUSH
77150: PPUSH
// task := GetTaskList ( mech ) ;
77151: LD_ADDR_VAR 0 4
77155: PUSH
77156: LD_VAR 0 1
77160: PPUSH
77161: CALL_OW 437
77165: ST_TO_ADDR
// if not task then
77166: LD_VAR 0 4
77170: NOT
77171: IFFALSE 77175
// exit ;
77173: GO 77217
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77175: LD_ADDR_VAR 0 3
77179: PUSH
77180: LD_VAR 0 4
77184: PUSH
77185: LD_INT 1
77187: ARRAY
77188: PUSH
77189: LD_INT 1
77191: ARRAY
77192: PUSH
77193: LD_STRING r
77195: EQUAL
77196: PUSH
77197: LD_VAR 0 4
77201: PUSH
77202: LD_INT 1
77204: ARRAY
77205: PUSH
77206: LD_INT 4
77208: ARRAY
77209: PUSH
77210: LD_VAR 0 2
77214: EQUAL
77215: AND
77216: ST_TO_ADDR
// end ;
77217: LD_VAR 0 3
77221: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77222: LD_INT 0
77224: PPUSH
// SetDir ( unit , d ) ;
77225: LD_VAR 0 1
77229: PPUSH
77230: LD_VAR 0 4
77234: PPUSH
77235: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77239: LD_VAR 0 1
77243: PPUSH
77244: LD_VAR 0 2
77248: PPUSH
77249: LD_VAR 0 3
77253: PPUSH
77254: LD_VAR 0 5
77258: PPUSH
77259: CALL_OW 48
// end ;
77263: LD_VAR 0 6
77267: RET
// export function ToNaturalNumber ( number ) ; begin
77268: LD_INT 0
77270: PPUSH
// result := number div 1 ;
77271: LD_ADDR_VAR 0 2
77275: PUSH
77276: LD_VAR 0 1
77280: PUSH
77281: LD_INT 1
77283: DIV
77284: ST_TO_ADDR
// if number < 0 then
77285: LD_VAR 0 1
77289: PUSH
77290: LD_INT 0
77292: LESS
77293: IFFALSE 77303
// result := 0 ;
77295: LD_ADDR_VAR 0 2
77299: PUSH
77300: LD_INT 0
77302: ST_TO_ADDR
// end ;
77303: LD_VAR 0 2
77307: RET
// export function SortByClass ( units , class ) ; var un ; begin
77308: LD_INT 0
77310: PPUSH
77311: PPUSH
// if not units or not class then
77312: LD_VAR 0 1
77316: NOT
77317: PUSH
77318: LD_VAR 0 2
77322: NOT
77323: OR
77324: IFFALSE 77328
// exit ;
77326: GO 77423
// result := [ ] ;
77328: LD_ADDR_VAR 0 3
77332: PUSH
77333: EMPTY
77334: ST_TO_ADDR
// for un in units do
77335: LD_ADDR_VAR 0 4
77339: PUSH
77340: LD_VAR 0 1
77344: PUSH
77345: FOR_IN
77346: IFFALSE 77421
// if GetClass ( un ) = class then
77348: LD_VAR 0 4
77352: PPUSH
77353: CALL_OW 257
77357: PUSH
77358: LD_VAR 0 2
77362: EQUAL
77363: IFFALSE 77390
// result := Insert ( result , 1 , un ) else
77365: LD_ADDR_VAR 0 3
77369: PUSH
77370: LD_VAR 0 3
77374: PPUSH
77375: LD_INT 1
77377: PPUSH
77378: LD_VAR 0 4
77382: PPUSH
77383: CALL_OW 2
77387: ST_TO_ADDR
77388: GO 77419
// result := Replace ( result , result + 1 , un ) ;
77390: LD_ADDR_VAR 0 3
77394: PUSH
77395: LD_VAR 0 3
77399: PPUSH
77400: LD_VAR 0 3
77404: PUSH
77405: LD_INT 1
77407: PLUS
77408: PPUSH
77409: LD_VAR 0 4
77413: PPUSH
77414: CALL_OW 1
77418: ST_TO_ADDR
77419: GO 77345
77421: POP
77422: POP
// end ;
77423: LD_VAR 0 3
77427: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77428: LD_INT 0
77430: PPUSH
77431: PPUSH
77432: PPUSH
77433: PPUSH
77434: PPUSH
77435: PPUSH
77436: PPUSH
// result := [ ] ;
77437: LD_ADDR_VAR 0 4
77441: PUSH
77442: EMPTY
77443: ST_TO_ADDR
// if x - r < 0 then
77444: LD_VAR 0 1
77448: PUSH
77449: LD_VAR 0 3
77453: MINUS
77454: PUSH
77455: LD_INT 0
77457: LESS
77458: IFFALSE 77470
// min_x := 0 else
77460: LD_ADDR_VAR 0 8
77464: PUSH
77465: LD_INT 0
77467: ST_TO_ADDR
77468: GO 77486
// min_x := x - r ;
77470: LD_ADDR_VAR 0 8
77474: PUSH
77475: LD_VAR 0 1
77479: PUSH
77480: LD_VAR 0 3
77484: MINUS
77485: ST_TO_ADDR
// if y - r < 0 then
77486: LD_VAR 0 2
77490: PUSH
77491: LD_VAR 0 3
77495: MINUS
77496: PUSH
77497: LD_INT 0
77499: LESS
77500: IFFALSE 77512
// min_y := 0 else
77502: LD_ADDR_VAR 0 7
77506: PUSH
77507: LD_INT 0
77509: ST_TO_ADDR
77510: GO 77528
// min_y := y - r ;
77512: LD_ADDR_VAR 0 7
77516: PUSH
77517: LD_VAR 0 2
77521: PUSH
77522: LD_VAR 0 3
77526: MINUS
77527: ST_TO_ADDR
// max_x := x + r ;
77528: LD_ADDR_VAR 0 9
77532: PUSH
77533: LD_VAR 0 1
77537: PUSH
77538: LD_VAR 0 3
77542: PLUS
77543: ST_TO_ADDR
// max_y := y + r ;
77544: LD_ADDR_VAR 0 10
77548: PUSH
77549: LD_VAR 0 2
77553: PUSH
77554: LD_VAR 0 3
77558: PLUS
77559: ST_TO_ADDR
// for _x = min_x to max_x do
77560: LD_ADDR_VAR 0 5
77564: PUSH
77565: DOUBLE
77566: LD_VAR 0 8
77570: DEC
77571: ST_TO_ADDR
77572: LD_VAR 0 9
77576: PUSH
77577: FOR_TO
77578: IFFALSE 77679
// for _y = min_y to max_y do
77580: LD_ADDR_VAR 0 6
77584: PUSH
77585: DOUBLE
77586: LD_VAR 0 7
77590: DEC
77591: ST_TO_ADDR
77592: LD_VAR 0 10
77596: PUSH
77597: FOR_TO
77598: IFFALSE 77675
// begin if not ValidHex ( _x , _y ) then
77600: LD_VAR 0 5
77604: PPUSH
77605: LD_VAR 0 6
77609: PPUSH
77610: CALL_OW 488
77614: NOT
77615: IFFALSE 77619
// continue ;
77617: GO 77597
// if GetResourceTypeXY ( _x , _y ) then
77619: LD_VAR 0 5
77623: PPUSH
77624: LD_VAR 0 6
77628: PPUSH
77629: CALL_OW 283
77633: IFFALSE 77673
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77635: LD_ADDR_VAR 0 4
77639: PUSH
77640: LD_VAR 0 4
77644: PPUSH
77645: LD_VAR 0 4
77649: PUSH
77650: LD_INT 1
77652: PLUS
77653: PPUSH
77654: LD_VAR 0 5
77658: PUSH
77659: LD_VAR 0 6
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: PPUSH
77668: CALL_OW 1
77672: ST_TO_ADDR
// end ;
77673: GO 77597
77675: POP
77676: POP
77677: GO 77577
77679: POP
77680: POP
// end ;
77681: LD_VAR 0 4
77685: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77686: LD_INT 0
77688: PPUSH
77689: PPUSH
77690: PPUSH
77691: PPUSH
77692: PPUSH
77693: PPUSH
77694: PPUSH
77695: PPUSH
// if not units then
77696: LD_VAR 0 1
77700: NOT
77701: IFFALSE 77705
// exit ;
77703: GO 78229
// result := UnitFilter ( units , [ f_ok ] ) ;
77705: LD_ADDR_VAR 0 3
77709: PUSH
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_INT 50
77717: PUSH
77718: EMPTY
77719: LIST
77720: PPUSH
77721: CALL_OW 72
77725: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77726: LD_ADDR_VAR 0 8
77730: PUSH
77731: LD_VAR 0 1
77735: PUSH
77736: LD_INT 1
77738: ARRAY
77739: PPUSH
77740: CALL_OW 255
77744: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77745: LD_ADDR_VAR 0 10
77749: PUSH
77750: LD_INT 29
77752: PUSH
77753: LD_INT 91
77755: PUSH
77756: LD_INT 49
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: LIST
77763: ST_TO_ADDR
// if not result then
77764: LD_VAR 0 3
77768: NOT
77769: IFFALSE 77773
// exit ;
77771: GO 78229
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77773: LD_ADDR_VAR 0 5
77777: PUSH
77778: LD_INT 81
77780: PUSH
77781: LD_VAR 0 8
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PPUSH
77790: CALL_OW 69
77794: ST_TO_ADDR
// for i in result do
77795: LD_ADDR_VAR 0 4
77799: PUSH
77800: LD_VAR 0 3
77804: PUSH
77805: FOR_IN
77806: IFFALSE 78227
// begin tag := GetTag ( i ) + 1 ;
77808: LD_ADDR_VAR 0 9
77812: PUSH
77813: LD_VAR 0 4
77817: PPUSH
77818: CALL_OW 110
77822: PUSH
77823: LD_INT 1
77825: PLUS
77826: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77827: LD_ADDR_VAR 0 7
77831: PUSH
77832: LD_VAR 0 4
77836: PPUSH
77837: CALL_OW 250
77841: PPUSH
77842: LD_VAR 0 4
77846: PPUSH
77847: CALL_OW 251
77851: PPUSH
77852: LD_INT 6
77854: PPUSH
77855: CALL 77428 0 3
77859: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77860: LD_VAR 0 4
77864: PPUSH
77865: CALL_OW 247
77869: PUSH
77870: LD_INT 2
77872: EQUAL
77873: PUSH
77874: LD_VAR 0 7
77878: AND
77879: PUSH
77880: LD_VAR 0 4
77884: PPUSH
77885: CALL_OW 264
77889: PUSH
77890: LD_VAR 0 10
77894: IN
77895: NOT
77896: AND
77897: IFFALSE 77936
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77899: LD_VAR 0 4
77903: PPUSH
77904: LD_VAR 0 7
77908: PUSH
77909: LD_INT 1
77911: ARRAY
77912: PUSH
77913: LD_INT 1
77915: ARRAY
77916: PPUSH
77917: LD_VAR 0 7
77921: PUSH
77922: LD_INT 1
77924: ARRAY
77925: PUSH
77926: LD_INT 2
77928: ARRAY
77929: PPUSH
77930: CALL_OW 116
77934: GO 78225
// if path > tag then
77936: LD_VAR 0 2
77940: PUSH
77941: LD_VAR 0 9
77945: GREATER
77946: IFFALSE 78154
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77948: LD_ADDR_VAR 0 6
77952: PUSH
77953: LD_VAR 0 5
77957: PPUSH
77958: LD_INT 91
77960: PUSH
77961: LD_VAR 0 4
77965: PUSH
77966: LD_INT 8
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: LIST
77973: PPUSH
77974: CALL_OW 72
77978: ST_TO_ADDR
// if nearEnemy then
77979: LD_VAR 0 6
77983: IFFALSE 78052
// begin if GetWeapon ( i ) = ru_time_lapser then
77985: LD_VAR 0 4
77989: PPUSH
77990: CALL_OW 264
77994: PUSH
77995: LD_INT 49
77997: EQUAL
77998: IFFALSE 78026
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78000: LD_VAR 0 4
78004: PPUSH
78005: LD_VAR 0 6
78009: PPUSH
78010: LD_VAR 0 4
78014: PPUSH
78015: CALL_OW 74
78019: PPUSH
78020: CALL_OW 112
78024: GO 78050
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78026: LD_VAR 0 4
78030: PPUSH
78031: LD_VAR 0 6
78035: PPUSH
78036: LD_VAR 0 4
78040: PPUSH
78041: CALL_OW 74
78045: PPUSH
78046: CALL_OW 115
// end else
78050: GO 78152
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78052: LD_VAR 0 4
78056: PPUSH
78057: LD_VAR 0 2
78061: PUSH
78062: LD_VAR 0 9
78066: ARRAY
78067: PUSH
78068: LD_INT 1
78070: ARRAY
78071: PPUSH
78072: LD_VAR 0 2
78076: PUSH
78077: LD_VAR 0 9
78081: ARRAY
78082: PUSH
78083: LD_INT 2
78085: ARRAY
78086: PPUSH
78087: CALL_OW 297
78091: PUSH
78092: LD_INT 6
78094: GREATER
78095: IFFALSE 78138
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78097: LD_VAR 0 4
78101: PPUSH
78102: LD_VAR 0 2
78106: PUSH
78107: LD_VAR 0 9
78111: ARRAY
78112: PUSH
78113: LD_INT 1
78115: ARRAY
78116: PPUSH
78117: LD_VAR 0 2
78121: PUSH
78122: LD_VAR 0 9
78126: ARRAY
78127: PUSH
78128: LD_INT 2
78130: ARRAY
78131: PPUSH
78132: CALL_OW 114
78136: GO 78152
// SetTag ( i , tag ) ;
78138: LD_VAR 0 4
78142: PPUSH
78143: LD_VAR 0 9
78147: PPUSH
78148: CALL_OW 109
// end else
78152: GO 78225
// if enemy then
78154: LD_VAR 0 5
78158: IFFALSE 78225
// begin if GetWeapon ( i ) = ru_time_lapser then
78160: LD_VAR 0 4
78164: PPUSH
78165: CALL_OW 264
78169: PUSH
78170: LD_INT 49
78172: EQUAL
78173: IFFALSE 78201
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78175: LD_VAR 0 4
78179: PPUSH
78180: LD_VAR 0 5
78184: PPUSH
78185: LD_VAR 0 4
78189: PPUSH
78190: CALL_OW 74
78194: PPUSH
78195: CALL_OW 112
78199: GO 78225
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78201: LD_VAR 0 4
78205: PPUSH
78206: LD_VAR 0 5
78210: PPUSH
78211: LD_VAR 0 4
78215: PPUSH
78216: CALL_OW 74
78220: PPUSH
78221: CALL_OW 115
// end ; end ;
78225: GO 77805
78227: POP
78228: POP
// end ;
78229: LD_VAR 0 3
78233: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78234: LD_INT 0
78236: PPUSH
78237: PPUSH
78238: PPUSH
// if not unit or IsInUnit ( unit ) then
78239: LD_VAR 0 1
78243: NOT
78244: PUSH
78245: LD_VAR 0 1
78249: PPUSH
78250: CALL_OW 310
78254: OR
78255: IFFALSE 78259
// exit ;
78257: GO 78350
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78259: LD_ADDR_VAR 0 4
78263: PUSH
78264: LD_VAR 0 1
78268: PPUSH
78269: CALL_OW 250
78273: PPUSH
78274: LD_VAR 0 2
78278: PPUSH
78279: LD_INT 1
78281: PPUSH
78282: CALL_OW 272
78286: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78287: LD_ADDR_VAR 0 5
78291: PUSH
78292: LD_VAR 0 1
78296: PPUSH
78297: CALL_OW 251
78301: PPUSH
78302: LD_VAR 0 2
78306: PPUSH
78307: LD_INT 1
78309: PPUSH
78310: CALL_OW 273
78314: ST_TO_ADDR
// if ValidHex ( x , y ) then
78315: LD_VAR 0 4
78319: PPUSH
78320: LD_VAR 0 5
78324: PPUSH
78325: CALL_OW 488
78329: IFFALSE 78350
// ComTurnXY ( unit , x , y ) ;
78331: LD_VAR 0 1
78335: PPUSH
78336: LD_VAR 0 4
78340: PPUSH
78341: LD_VAR 0 5
78345: PPUSH
78346: CALL_OW 118
// end ;
78350: LD_VAR 0 3
78354: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78355: LD_INT 0
78357: PPUSH
78358: PPUSH
// result := false ;
78359: LD_ADDR_VAR 0 3
78363: PUSH
78364: LD_INT 0
78366: ST_TO_ADDR
// if not units then
78367: LD_VAR 0 2
78371: NOT
78372: IFFALSE 78376
// exit ;
78374: GO 78421
// for i in units do
78376: LD_ADDR_VAR 0 4
78380: PUSH
78381: LD_VAR 0 2
78385: PUSH
78386: FOR_IN
78387: IFFALSE 78419
// if See ( side , i ) then
78389: LD_VAR 0 1
78393: PPUSH
78394: LD_VAR 0 4
78398: PPUSH
78399: CALL_OW 292
78403: IFFALSE 78417
// begin result := true ;
78405: LD_ADDR_VAR 0 3
78409: PUSH
78410: LD_INT 1
78412: ST_TO_ADDR
// exit ;
78413: POP
78414: POP
78415: GO 78421
// end ;
78417: GO 78386
78419: POP
78420: POP
// end ;
78421: LD_VAR 0 3
78425: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78426: LD_INT 0
78428: PPUSH
78429: PPUSH
78430: PPUSH
78431: PPUSH
// if not unit or not points then
78432: LD_VAR 0 1
78436: NOT
78437: PUSH
78438: LD_VAR 0 2
78442: NOT
78443: OR
78444: IFFALSE 78448
// exit ;
78446: GO 78538
// dist := 99999 ;
78448: LD_ADDR_VAR 0 5
78452: PUSH
78453: LD_INT 99999
78455: ST_TO_ADDR
// for i in points do
78456: LD_ADDR_VAR 0 4
78460: PUSH
78461: LD_VAR 0 2
78465: PUSH
78466: FOR_IN
78467: IFFALSE 78536
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78469: LD_ADDR_VAR 0 6
78473: PUSH
78474: LD_VAR 0 1
78478: PPUSH
78479: LD_VAR 0 4
78483: PUSH
78484: LD_INT 1
78486: ARRAY
78487: PPUSH
78488: LD_VAR 0 4
78492: PUSH
78493: LD_INT 2
78495: ARRAY
78496: PPUSH
78497: CALL_OW 297
78501: ST_TO_ADDR
// if tmpDist < dist then
78502: LD_VAR 0 6
78506: PUSH
78507: LD_VAR 0 5
78511: LESS
78512: IFFALSE 78534
// begin result := i ;
78514: LD_ADDR_VAR 0 3
78518: PUSH
78519: LD_VAR 0 4
78523: ST_TO_ADDR
// dist := tmpDist ;
78524: LD_ADDR_VAR 0 5
78528: PUSH
78529: LD_VAR 0 6
78533: ST_TO_ADDR
// end ; end ;
78534: GO 78466
78536: POP
78537: POP
// end ;
78538: LD_VAR 0 3
78542: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78543: LD_INT 0
78545: PPUSH
// uc_side := side ;
78546: LD_ADDR_OWVAR 20
78550: PUSH
78551: LD_VAR 0 1
78555: ST_TO_ADDR
// uc_nation := 3 ;
78556: LD_ADDR_OWVAR 21
78560: PUSH
78561: LD_INT 3
78563: ST_TO_ADDR
// vc_chassis := 25 ;
78564: LD_ADDR_OWVAR 37
78568: PUSH
78569: LD_INT 25
78571: ST_TO_ADDR
// vc_engine := engine_siberite ;
78572: LD_ADDR_OWVAR 39
78576: PUSH
78577: LD_INT 3
78579: ST_TO_ADDR
// vc_control := control_computer ;
78580: LD_ADDR_OWVAR 38
78584: PUSH
78585: LD_INT 3
78587: ST_TO_ADDR
// vc_weapon := 59 ;
78588: LD_ADDR_OWVAR 40
78592: PUSH
78593: LD_INT 59
78595: ST_TO_ADDR
// result := CreateVehicle ;
78596: LD_ADDR_VAR 0 5
78600: PUSH
78601: CALL_OW 45
78605: ST_TO_ADDR
// SetDir ( result , d ) ;
78606: LD_VAR 0 5
78610: PPUSH
78611: LD_VAR 0 4
78615: PPUSH
78616: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78620: LD_VAR 0 5
78624: PPUSH
78625: LD_VAR 0 2
78629: PPUSH
78630: LD_VAR 0 3
78634: PPUSH
78635: LD_INT 0
78637: PPUSH
78638: CALL_OW 48
// end ;
78642: LD_VAR 0 5
78646: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78647: LD_INT 0
78649: PPUSH
78650: PPUSH
78651: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78652: LD_ADDR_VAR 0 2
78656: PUSH
78657: LD_INT 0
78659: PUSH
78660: LD_INT 0
78662: PUSH
78663: LD_INT 0
78665: PUSH
78666: LD_INT 0
78668: PUSH
78669: EMPTY
78670: LIST
78671: LIST
78672: LIST
78673: LIST
78674: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78675: LD_VAR 0 1
78679: NOT
78680: PUSH
78681: LD_VAR 0 1
78685: PPUSH
78686: CALL_OW 264
78690: PUSH
78691: LD_INT 12
78693: PUSH
78694: LD_INT 51
78696: PUSH
78697: LD_INT 32
78699: PUSH
78700: LD_INT 89
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: LIST
78707: LIST
78708: IN
78709: NOT
78710: OR
78711: IFFALSE 78715
// exit ;
78713: GO 78813
// for i := 1 to 3 do
78715: LD_ADDR_VAR 0 3
78719: PUSH
78720: DOUBLE
78721: LD_INT 1
78723: DEC
78724: ST_TO_ADDR
78725: LD_INT 3
78727: PUSH
78728: FOR_TO
78729: IFFALSE 78811
// begin tmp := GetCargo ( cargo , i ) ;
78731: LD_ADDR_VAR 0 4
78735: PUSH
78736: LD_VAR 0 1
78740: PPUSH
78741: LD_VAR 0 3
78745: PPUSH
78746: CALL_OW 289
78750: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78751: LD_ADDR_VAR 0 2
78755: PUSH
78756: LD_VAR 0 2
78760: PPUSH
78761: LD_VAR 0 3
78765: PPUSH
78766: LD_VAR 0 4
78770: PPUSH
78771: CALL_OW 1
78775: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78776: LD_ADDR_VAR 0 2
78780: PUSH
78781: LD_VAR 0 2
78785: PPUSH
78786: LD_INT 4
78788: PPUSH
78789: LD_VAR 0 2
78793: PUSH
78794: LD_INT 4
78796: ARRAY
78797: PUSH
78798: LD_VAR 0 4
78802: PLUS
78803: PPUSH
78804: CALL_OW 1
78808: ST_TO_ADDR
// end ;
78809: GO 78728
78811: POP
78812: POP
// end ;
78813: LD_VAR 0 2
78817: RET
// export function Length ( array ) ; begin
78818: LD_INT 0
78820: PPUSH
// result := array + 0 ;
78821: LD_ADDR_VAR 0 2
78825: PUSH
78826: LD_VAR 0 1
78830: PUSH
78831: LD_INT 0
78833: PLUS
78834: ST_TO_ADDR
// end ;
78835: LD_VAR 0 2
78839: RET
// export function PrepareArray ( array ) ; begin
78840: LD_INT 0
78842: PPUSH
// result := array diff 0 ;
78843: LD_ADDR_VAR 0 2
78847: PUSH
78848: LD_VAR 0 1
78852: PUSH
78853: LD_INT 0
78855: DIFF
78856: ST_TO_ADDR
// if not result [ 1 ] then
78857: LD_VAR 0 2
78861: PUSH
78862: LD_INT 1
78864: ARRAY
78865: NOT
78866: IFFALSE 78886
// result := Delete ( result , 1 ) ;
78868: LD_ADDR_VAR 0 2
78872: PUSH
78873: LD_VAR 0 2
78877: PPUSH
78878: LD_INT 1
78880: PPUSH
78881: CALL_OW 3
78885: ST_TO_ADDR
// end ;
78886: LD_VAR 0 2
78890: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78891: LD_INT 0
78893: PPUSH
78894: PPUSH
78895: PPUSH
78896: PPUSH
// sibRocketRange := 25 ;
78897: LD_ADDR_VAR 0 6
78901: PUSH
78902: LD_INT 25
78904: ST_TO_ADDR
// result := false ;
78905: LD_ADDR_VAR 0 4
78909: PUSH
78910: LD_INT 0
78912: ST_TO_ADDR
// for i := 0 to 5 do
78913: LD_ADDR_VAR 0 5
78917: PUSH
78918: DOUBLE
78919: LD_INT 0
78921: DEC
78922: ST_TO_ADDR
78923: LD_INT 5
78925: PUSH
78926: FOR_TO
78927: IFFALSE 78994
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78929: LD_VAR 0 1
78933: PPUSH
78934: LD_VAR 0 5
78938: PPUSH
78939: LD_VAR 0 6
78943: PPUSH
78944: CALL_OW 272
78948: PPUSH
78949: LD_VAR 0 2
78953: PPUSH
78954: LD_VAR 0 5
78958: PPUSH
78959: LD_VAR 0 6
78963: PPUSH
78964: CALL_OW 273
78968: PPUSH
78969: LD_VAR 0 3
78973: PPUSH
78974: CALL_OW 309
78978: IFFALSE 78992
// begin result := true ;
78980: LD_ADDR_VAR 0 4
78984: PUSH
78985: LD_INT 1
78987: ST_TO_ADDR
// exit ;
78988: POP
78989: POP
78990: GO 78996
// end ;
78992: GO 78926
78994: POP
78995: POP
// end ; end_of_file
78996: LD_VAR 0 4
79000: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79001: LD_VAR 0 1
79005: PPUSH
79006: LD_VAR 0 2
79010: PPUSH
79011: LD_VAR 0 3
79015: PPUSH
79016: LD_VAR 0 4
79020: PPUSH
79021: LD_VAR 0 5
79025: PPUSH
79026: LD_VAR 0 6
79030: PPUSH
79031: CALL 17583 0 6
// end ;
79035: PPOPN 6
79037: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79038: LD_INT 0
79040: PPUSH
// begin if not units then
79041: LD_VAR 0 1
79045: NOT
79046: IFFALSE 79050
// exit ;
79048: GO 79050
// end ;
79050: PPOPN 7
79052: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79053: CALL 17554 0 0
// end ;
79057: PPOPN 1
79059: END
