// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37922 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37922 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37922 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37922 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37922 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37922 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37922 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37922 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37922 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37922 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37922 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37922 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37922 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37922 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37922 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37922 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75612 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9371: LD_EXP 3
9375: IFFALSE 10817
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// begin DialogueOn ;
9386: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9390: LD_EXP 25
9394: PPUSH
9395: LD_STRING DH-base-1
9397: PPUSH
9398: CALL_OW 88
// if Markov then
9402: LD_EXP 32
9406: IFFALSE 9458
// begin Say ( Markov , DMar-base-2 ) ;
9408: LD_EXP 32
9412: PPUSH
9413: LD_STRING DMar-base-2
9415: PPUSH
9416: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9420: LD_EXP 32
9424: PPUSH
9425: LD_STRING DMar-base-3
9427: PPUSH
9428: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9432: LD_EXP 25
9436: PPUSH
9437: LD_STRING DH-base-4
9439: PPUSH
9440: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9444: LD_EXP 32
9448: PPUSH
9449: LD_STRING DMar-base-5
9451: PPUSH
9452: CALL_OW 88
// end else
9456: GO 9535
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9458: LD_EXP 37
9462: PPUSH
9463: LD_INT 26
9465: PUSH
9466: LD_INT 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 72
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PPUSH
9482: LD_STRING DArm-base-a-2
9484: PPUSH
9485: CALL_OW 88
9489: NOT
9490: IFFALSE 9523
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9492: LD_EXP 37
9496: PPUSH
9497: LD_INT 26
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PPUSH
9507: CALL_OW 72
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: LD_STRING DArf-base-a-2
9518: PPUSH
9519: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9523: LD_EXP 25
9527: PPUSH
9528: LD_STRING DH-base-a-3
9530: PPUSH
9531: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9535: LD_EXP 35
9539: PPUSH
9540: LD_STRING DA-base-6
9542: PPUSH
9543: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9547: LD_EXP 35
9551: PPUSH
9552: LD_STRING DA-base-7
9554: PPUSH
9555: CALL_OW 88
// DialogueOff ;
9559: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9563: LD_STRING Flamethrower
9565: PPUSH
9566: CALL_OW 337
// wait ( 2 2$00 ) ;
9570: LD_INT 4200
9572: PPUSH
9573: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9577: LD_EXP 34
9581: PUSH
9582: LD_EXP 27
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: LD_INT 203
9593: PPUSH
9594: LD_INT 37
9596: PPUSH
9597: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9601: LD_INT 22
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 92
9613: PUSH
9614: LD_INT 203
9616: PUSH
9617: LD_INT 37
9619: PUSH
9620: LD_INT 10
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PPUSH
9633: CALL_OW 69
9637: NOT
9638: IFFALSE 9678
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9640: LD_EXP 34
9644: PUSH
9645: LD_EXP 27
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: LD_EXP 25
9658: PPUSH
9659: CALL_OW 250
9663: PPUSH
9664: LD_EXP 25
9668: PPUSH
9669: CALL_OW 251
9673: PPUSH
9674: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9685: LD_INT 2
9687: PPUSH
9688: LD_EXP 34
9692: PPUSH
9693: CALL_OW 292
9697: PUSH
9698: LD_EXP 34
9702: PPUSH
9703: LD_EXP 25
9707: PPUSH
9708: CALL_OW 296
9712: PUSH
9713: LD_INT 8
9715: LESS
9716: PUSH
9717: LD_EXP 34
9721: PPUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 21
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 69
9750: PPUSH
9751: LD_EXP 34
9755: PPUSH
9756: CALL_OW 74
9760: PPUSH
9761: CALL_OW 296
9765: PUSH
9766: LD_INT 7
9768: LESS
9769: OR
9770: AND
9771: PUSH
9772: LD_EXP 34
9776: PPUSH
9777: LD_INT 10
9779: PPUSH
9780: CALL_OW 308
9784: NOT
9785: AND
9786: IFFALSE 9678
// InGameOn ;
9788: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9792: LD_EXP 34
9796: PPUSH
9797: CALL_OW 87
// if IsInUnit ( Heike ) then
9801: LD_EXP 25
9805: PPUSH
9806: CALL_OW 310
9810: IFFALSE 9821
// ComExitBuilding ( Heike ) ;
9812: LD_EXP 25
9816: PPUSH
9817: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9821: LD_EXP 34
9825: PUSH
9826: LD_EXP 27
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 34
9853: PPUSH
9854: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9858: LD_INT 22
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 91
9870: PUSH
9871: LD_EXP 34
9875: PUSH
9876: LD_INT 10
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 3
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: IFFALSE 9929
// begin Say ( Kurt , DKs-scout-1 ) ;
9905: LD_EXP 34
9909: PPUSH
9910: LD_STRING DKs-scout-1
9912: PPUSH
9913: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9917: LD_EXP 25
9921: PPUSH
9922: LD_STRING DH-scout-2
9924: PPUSH
9925: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9929: LD_EXP 25
9933: PPUSH
9934: CALL_OW 85
// if IsInUnit ( Heike ) then
9938: LD_EXP 25
9942: PPUSH
9943: CALL_OW 310
9947: IFFALSE 9958
// ComExit ( Heike ) ;
9949: LD_EXP 25
9953: PPUSH
9954: CALL 75612 0 1
// repeat wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9965: LD_EXP 25
9969: PPUSH
9970: LD_EXP 34
9974: PPUSH
9975: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9979: LD_EXP 25
9983: PPUSH
9984: LD_EXP 34
9988: PPUSH
9989: CALL_OW 296
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 9958
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9999: LD_EXP 34
10003: PUSH
10004: LD_EXP 27
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_EXP 25
10017: PPUSH
10018: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10022: LD_EXP 34
10026: PPUSH
10027: LD_STRING DKs-scout-3
10029: PPUSH
10030: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10034: LD_EXP 30
10038: PUSH
10039: LD_EXP 30
10043: PPUSH
10044: LD_EXP 34
10048: PPUSH
10049: CALL_OW 296
10053: PUSH
10054: LD_INT 15
10056: LESS
10057: AND
10058: IFFALSE 10281
// begin p := 1 ;
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10068: LD_EXP 30
10072: PPUSH
10073: CALL_OW 310
10077: IFFALSE 10088
// ComExit ( Kaia ) ;
10079: LD_EXP 30
10083: PPUSH
10084: CALL 75612 0 1
// wait ( 0 0$1 ) ;
10088: LD_INT 35
10090: PPUSH
10091: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10095: LD_EXP 30
10099: PPUSH
10100: LD_EXP 34
10104: PPUSH
10105: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10109: LD_INT 35
10111: PPUSH
10112: CALL_OW 67
// p := Inc ( p ) ;
10116: LD_ADDR_VAR 0 4
10120: PUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL 76575 0 1
10130: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10131: LD_EXP 30
10135: PPUSH
10136: LD_EXP 34
10140: PPUSH
10141: CALL_OW 296
10145: PUSH
10146: LD_INT 6
10148: LESS
10149: PUSH
10150: LD_VAR 0 4
10154: PUSH
10155: LD_INT 12
10157: GREATER
10158: OR
10159: IFFALSE 10109
// ComTurnUnit ( Kaia , Kurt ) ;
10161: LD_EXP 30
10165: PPUSH
10166: LD_EXP 34
10170: PPUSH
10171: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10175: LD_EXP 30
10179: PPUSH
10180: LD_STRING DK-scout-4
10182: PPUSH
10183: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10187: LD_EXP 34
10191: PPUSH
10192: LD_EXP 30
10196: PPUSH
10197: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10201: LD_EXP 34
10205: PPUSH
10206: LD_STRING DKs-scout-5
10208: PPUSH
10209: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10213: LD_EXP 30
10217: PPUSH
10218: LD_STRING DK-scout-6
10220: PPUSH
10221: CALL_OW 88
// if Mike then
10225: LD_EXP 27
10229: IFFALSE 10281
// begin Say ( Mike , DM-scout-7 ) ;
10231: LD_EXP 27
10235: PPUSH
10236: LD_STRING DM-scout-7
10238: PPUSH
10239: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10243: LD_EXP 30
10247: PPUSH
10248: LD_EXP 27
10252: PPUSH
10253: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10257: LD_EXP 30
10261: PPUSH
10262: LD_STRING DK-scout-8
10264: PPUSH
10265: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10269: LD_EXP 27
10273: PPUSH
10274: LD_STRING DM-scout-9
10276: PPUSH
10277: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10281: LD_INT 184
10283: PPUSH
10284: LD_INT 100
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 12
10292: NEG
10293: PPUSH
10294: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10298: LD_INT 184
10300: PPUSH
10301: LD_INT 100
10303: PPUSH
10304: LD_INT 2
10306: PPUSH
10307: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10311: LD_INT 184
10313: PPUSH
10314: LD_INT 100
10316: PPUSH
10317: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10321: LD_EXP 34
10325: PPUSH
10326: LD_STRING DKs-scout-10
10328: PPUSH
10329: CALL_OW 88
// wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10340: LD_INT 144
10342: PPUSH
10343: LD_INT 65
10345: PPUSH
10346: LD_INT 2
10348: PPUSH
10349: LD_INT 12
10351: NEG
10352: PPUSH
10353: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10357: LD_INT 144
10359: PPUSH
10360: LD_INT 65
10362: PPUSH
10363: LD_INT 2
10365: PPUSH
10366: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10370: LD_INT 144
10372: PPUSH
10373: LD_INT 65
10375: PPUSH
10376: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10380: LD_EXP 34
10384: PPUSH
10385: LD_STRING DKs-scout-11
10387: PPUSH
10388: CALL_OW 88
// wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10399: LD_EXP 34
10403: PPUSH
10404: CALL_OW 87
// if Mike and not Givi then
10408: LD_EXP 27
10412: PUSH
10413: LD_EXP 26
10417: NOT
10418: AND
10419: IFFALSE 10445
// begin Say ( Mike , DM-scout-a-1 ) ;
10421: LD_EXP 27
10425: PPUSH
10426: LD_STRING DM-scout-a-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10433: LD_EXP 25
10437: PPUSH
10438: LD_STRING DH-scout-a-2
10440: PPUSH
10441: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10445: LD_EXP 34
10449: PUSH
10450: LD_EXP 27
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: LD_INT 2
10461: PPUSH
10462: CALL_OW 235
// InGameOff ;
10466: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10470: LD_STRING Hill
10472: PPUSH
10473: CALL_OW 337
// Hint ( BunkerHill ) ;
10477: LD_STRING BunkerHill
10479: PPUSH
10480: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10484: LD_INT 20
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 424
// allowToPatrol := true ;
10494: LD_ADDR_EXP 12
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10502: LD_INT 3150
10504: PPUSH
10505: CALL_OW 67
// InitHc ;
10509: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: DOUBLE
10519: LD_INT 1
10521: DEC
10522: ST_TO_ADDR
10523: LD_INT 3
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: PUSH
10547: FOR_TO
10548: IFFALSE 10815
// begin uc_side := 2 ;
10550: LD_ADDR_OWVAR 20
10554: PUSH
10555: LD_INT 2
10557: ST_TO_ADDR
// uc_nation := 2 ;
10558: LD_ADDR_OWVAR 21
10562: PUSH
10563: LD_INT 2
10565: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10566: LD_INT 0
10568: PPUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 3
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 3
10590: MOD
10591: PUSH
10592: LD_INT 1
10594: PLUS
10595: ARRAY
10596: PPUSH
10597: LD_INT 3
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 2
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_OWVAR 67
10619: ARRAY
10620: PPUSH
10621: CALL_OW 380
// un := CreateHuman ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: CALL_OW 44
10634: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10635: LD_ADDR_EXP 37
10639: PUSH
10640: LD_EXP 37
10644: PUSH
10645: LD_VAR 0 2
10649: UNION
10650: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10651: LD_INT 2
10653: PPUSH
10654: LD_INT 2
10656: PPUSH
10657: LD_INT 13
10659: PPUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_VAR 0 1
10674: PUSH
10675: LD_INT 2
10677: MOD
10678: PUSH
10679: LD_INT 1
10681: PLUS
10682: ARRAY
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 27
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 27
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 23
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: LD_OWVAR 67
10713: PUSH
10714: LD_INT 0
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 12
10724: PLUS
10725: ARRAY
10726: PPUSH
10727: LD_INT 77
10729: PPUSH
10730: CALL 370 0 7
// veh := CreateVehicle ;
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: CALL_OW 45
10743: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 2
10751: PPUSH
10752: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 178
10763: PPUSH
10764: LD_INT 2
10766: PPUSH
10767: LD_INT 2
10769: PPUSH
10770: LD_INT 0
10772: PPUSH
10773: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10777: LD_VAR 0 2
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 183
10798: PPUSH
10799: LD_INT 11
10801: PPUSH
10802: CALL_OW 111
// wait ( 0 0$2 ) ;
10806: LD_INT 70
10808: PPUSH
10809: CALL_OW 67
// end ;
10813: GO 10547
10815: POP
10816: POP
// end ;
10817: PPOPN 4
10819: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10820: LD_EXP 4
10824: PUSH
10825: LD_EXP 35
10829: PPUSH
10830: CALL_OW 302
10834: AND
10835: IFFALSE 10884
10837: GO 10839
10839: DISABLE
// begin DialogueOn ;
10840: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10844: LD_EXP 35
10848: PPUSH
10849: LD_STRING DA-lab-1
10851: PPUSH
10852: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10856: LD_EXP 35
10860: PPUSH
10861: LD_STRING DA-lab-2
10863: PPUSH
10864: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DH-lab-3
10875: PPUSH
10876: CALL_OW 88
// DialogueOff ;
10880: CALL_OW 7
// end ;
10884: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10885: LD_INT 17
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: CALL_OW 321
10895: PUSH
10896: LD_INT 2
10898: EQUAL
10899: IFFALSE 11031
10901: GO 10903
10903: DISABLE
10904: LD_INT 0
10906: PPUSH
// begin DialogueOn ;
10907: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10911: LD_EXP 35
10915: PPUSH
10916: LD_STRING DA-Cam-1
10918: PPUSH
10919: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10923: LD_EXP 35
10927: PPUSH
10928: LD_STRING DA-Cam-2
10930: PPUSH
10931: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10935: LD_EXP 35
10939: PPUSH
10940: LD_STRING DA-Cam-3
10942: PPUSH
10943: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10947: LD_EXP 25
10951: PPUSH
10952: LD_STRING DH-Cam-4
10954: PPUSH
10955: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10959: LD_EXP 30
10963: PPUSH
10964: LD_STRING DK-Cam-5
10966: PPUSH
10967: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10971: LD_EXP 30
10975: PPUSH
10976: LD_STRING DK-Cam-6
10978: PPUSH
10979: CALL_OW 88
// DialogueOff ;
10983: CALL_OW 7
// Query ( Camera ) ;
10987: LD_STRING Camera
10989: PPUSH
10990: CALL_OW 97
// hiddenCameraAllowed := true ;
10994: LD_ADDR_EXP 5
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// for i in camAreas do
11002: LD_ADDR_VAR 0 1
11006: PUSH
11007: LD_EXP 8
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11029
// SetAreaMapShow ( i , 1 ) ;
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 424
11027: GO 11012
11029: POP
11030: POP
// end ;
11031: PPOPN 1
11033: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11034: LD_EXP 8
11038: NOT
11039: PUSH
11040: LD_EXP 5
11044: AND
11045: IFFALSE 11143
11047: GO 11049
11049: DISABLE
11050: LD_INT 0
11052: PPUSH
// begin stop_talking := true ;
11053: LD_ADDR_OWVAR 56
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 23
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: FOR_IN
11107: IFFALSE 11126
// AddExperience ( i , 2 , 450 ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_INT 2
11116: PPUSH
11117: LD_INT 450
11119: PPUSH
11120: CALL_OW 492
11124: GO 11106
11126: POP
11127: POP
// stop_talking := false ;
11128: LD_ADDR_OWVAR 56
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11136: LD_STRING ACH_CAMERA
11138: PPUSH
11139: CALL_OW 543
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11146: LD_EXP 9
11150: PUSH
11151: LD_EXP 11
11155: NOT
11156: AND
11157: IFFALSE 11216
11159: GO 11161
11161: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11162: LD_EXP 9
11166: PPUSH
11167: CALL_OW 250
11171: PPUSH
11172: LD_EXP 9
11176: PPUSH
11177: CALL_OW 251
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: LD_INT 6
11187: NEG
11188: PPUSH
11189: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11193: LD_EXP 9
11197: PPUSH
11198: CALL_OW 87
// wait ( 0 0$1 ) ;
11202: LD_INT 35
11204: PPUSH
11205: CALL_OW 67
// YouLost ( Spotted ) ;
11209: LD_STRING Spotted
11211: PPUSH
11212: CALL_OW 104
// end ;
11216: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11217: LD_INT 3
11219: PUSH
11220: LD_INT 6
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_EXP 47
11234: PPUSH
11235: CALL 1034 0 3
11239: IFFALSE 11272
11241: GO 11243
11243: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11244: LD_ADDR_EXP 9
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: LD_INT 6
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: LD_INT 2
11261: PPUSH
11262: LD_EXP 47
11266: PPUSH
11267: CALL 1034 0 3
11271: ST_TO_ADDR
11272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11273: LD_INT 22
11275: PUSH
11276: LD_INT 6
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 30
11285: PUSH
11286: LD_INT 32
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 1000
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 69
11319: IFFALSE 11380
11321: GO 11323
11323: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11324: LD_ADDR_EXP 9
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 6
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 32
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 24
11354: PUSH
11355: LD_INT 1000
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: ST_TO_ADDR
11380: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11381: LD_EXP 9
11385: PUSH
11386: LD_INT 21
11388: PPUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 3
11401: PUSH
11402: LD_INT 24
11404: PUSH
11405: LD_INT 1000
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 70
11424: AND
11425: IFFALSE 11664
11427: GO 11429
11429: DISABLE
11430: LD_INT 0
11432: PPUSH
11433: PPUSH
11434: PPUSH
11435: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11436: LD_ADDR_VAR 0 4
11440: PUSH
11441: LD_EXP 42
11445: PUSH
11446: LD_EXP 44
11450: PUSH
11451: LD_EXP 45
11455: UNION
11456: PPUSH
11457: LD_INT 3
11459: PUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 72
11478: UNION
11479: ST_TO_ADDR
// for i in noncombat do
11480: LD_ADDR_VAR 0 1
11484: PUSH
11485: LD_VAR 0 4
11489: PUSH
11490: FOR_IN
11491: IFFALSE 11587
// begin if IsInUnit ( i ) then
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 310
11502: IFFALSE 11513
// ComExitBuilding ( i ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11513: LD_VAR 0 1
11517: PPUSH
11518: LD_INT 114
11520: PPUSH
11521: LD_INT 97
11523: PPUSH
11524: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11528: LD_VAR 0 1
11532: PPUSH
11533: LD_INT 99
11535: PPUSH
11536: LD_INT 128
11538: PPUSH
11539: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_INT 91
11550: PPUSH
11551: LD_INT 145
11553: PPUSH
11554: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11558: LD_VAR 0 1
11562: PPUSH
11563: LD_INT 82
11565: PPUSH
11566: LD_INT 153
11568: PPUSH
11569: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11573: LD_VAR 0 1
11577: PPUSH
11578: LD_INT 16
11580: PPUSH
11581: CALL_OW 173
// end ;
11585: GO 11490
11587: POP
11588: POP
// if not allowHeikeAttack then
11589: LD_EXP 11
11593: NOT
11594: IFFALSE 11598
// exit ;
11596: GO 11664
// wait ( 0 0$05 ) ;
11598: LD_INT 175
11600: PPUSH
11601: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11605: LD_EXP 40
11609: PPUSH
11610: LD_STRING D9a-Kur-1
11612: PPUSH
11613: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11617: LD_EXP 43
11621: PPUSH
11622: LD_STRING D9a-Bur-1
11624: PPUSH
11625: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11629: LD_EXP 40
11633: PPUSH
11634: LD_STRING D9a-Kur-2
11636: PPUSH
11637: CALL_OW 94
// omicronFall := true ;
11641: LD_ADDR_EXP 13
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11649: LD_INT 105
11651: PPUSH
11652: CALL_OW 67
// retreatFromOmicron := true ;
11656: LD_ADDR_EXP 20
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// end ;
11664: PPOPN 4
11666: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11667: LD_INT 16
11669: PPUSH
11670: LD_INT 3
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 70
11705: IFFALSE 11788
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
// begin enable ;
11713: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11714: LD_ADDR_VAR 0 1
11718: PUSH
11719: LD_INT 16
11721: PPUSH
11722: LD_INT 3
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 23
11741: PUSH
11742: LD_INT 3
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 70
11757: PUSH
11758: FOR_IN
11759: IFFALSE 11786
// begin escapeCounter := escapeCounter + 1 ;
11761: LD_ADDR_EXP 19
11765: PUSH
11766: LD_EXP 19
11770: PUSH
11771: LD_INT 1
11773: PLUS
11774: ST_TO_ADDR
// RemoveUnit ( i ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 64
// end ;
11784: GO 11758
11786: POP
11787: POP
// end ;
11788: PPOPN 1
11790: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11791: LD_OWVAR 1
11795: PUSH
11796: LD_INT 13650
11798: PUSH
11799: LD_INT 0
11801: PPUSH
11802: LD_INT 3150
11804: PPUSH
11805: CALL_OW 12
11809: PLUS
11810: GREATEREQUAL
11811: IFFALSE 11820
11813: GO 11815
11815: DISABLE
// SmallAmericanReinforcements ;
11816: CALL 7093 0 0
11820: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11821: LD_OWVAR 1
11825: PUSH
11826: LD_INT 31500
11828: PUSH
11829: LD_INT 29400
11831: PUSH
11832: LD_INT 27300
11834: PUSH
11835: LD_INT 25200
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_OWVAR 67
11848: ARRAY
11849: GREATEREQUAL
11850: IFFALSE 11915
11852: GO 11854
11854: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11855: LD_EXP 48
11859: PPUSH
11860: LD_INT 21
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 72
11874: PPUSH
11875: LD_INT 62
11877: PPUSH
11878: LD_INT 22
11880: PPUSH
11881: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11885: LD_EXP 49
11889: PPUSH
11890: LD_INT 69
11892: PPUSH
11893: LD_INT 27
11895: PPUSH
11896: CALL_OW 111
// wait ( 1 1$00 ) ;
11900: LD_INT 2100
11902: PPUSH
11903: CALL_OW 67
// startAttackOnOmicron := true ;
11907: LD_ADDR_EXP 6
11911: PUSH
11912: LD_INT 1
11914: ST_TO_ADDR
// end ;
11915: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11916: LD_EXP 22
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: IFFALSE 13974
11926: GO 11928
11928: DISABLE
11929: LD_INT 0
11931: PPUSH
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11938: LD_INT 5
11940: PPUSH
11941: LD_INT 2
11943: PPUSH
11944: CALL_OW 343
// PrepareOmarForces ;
11948: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11952: LD_INT 105
11954: PPUSH
11955: CALL_OW 67
// allowHeikeAttack := true ;
11959: LD_ADDR_EXP 11
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// activeGrishkoAI := false ;
11967: LD_ADDR_EXP 10
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11975: LD_INT 20
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 424
// if not hillBase then
11985: LD_EXP 15
11989: NOT
11990: IFFALSE 11999
// ChangeMissionObjectives ( HillDone ) ;
11992: LD_STRING HillDone
11994: PPUSH
11995: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11999: LD_EXP 33
12003: PPUSH
12004: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: LD_INT 22
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 21
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: PUSH
12042: FOR_IN
12043: IFFALSE 12067
// if HasTask ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 314
12054: IFFALSE 12065
// ComHold ( i ) ;
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 140
12065: GO 12042
12067: POP
12068: POP
// DialogueOn ;
12069: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12073: LD_EXP 33
12077: PPUSH
12078: LD_STRING DO-assault-1
12080: PPUSH
12081: CALL_OW 94
// DialogueOff ;
12085: CALL_OW 7
// game_speed := 4 ;
12089: LD_ADDR_OWVAR 65
12093: PUSH
12094: LD_INT 4
12096: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_EXP 46
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 72
12124: PUSH
12125: FOR_IN
12126: IFFALSE 12145
// ComMoveXY ( i , 226 , 114 ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_INT 226
12135: PPUSH
12136: LD_INT 114
12138: PPUSH
12139: CALL_OW 111
12143: GO 12125
12145: POP
12146: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12147: LD_EXP 41
12151: PPUSH
12152: LD_INT 22
12154: PUSH
12155: LD_INT 6
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 4
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 69
12180: PPUSH
12181: LD_EXP 41
12185: PPUSH
12186: CALL_OW 74
12190: PPUSH
12191: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12195: LD_STRING Attack
12197: PPUSH
12198: CALL_OW 337
// music_class := music_combat ;
12202: LD_ADDR_OWVAR 72
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// music_nat := 4 ;
12210: LD_ADDR_OWVAR 71
12214: PUSH
12215: LD_INT 4
12217: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12218: LD_INT 5
12220: PPUSH
12221: LD_EXP 41
12225: PPUSH
12226: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12230: LD_INT 6
12232: PPUSH
12233: LD_EXP 38
12237: PPUSH
12238: LD_INT 25
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 72
12252: PUSH
12253: LD_INT 4
12255: ARRAY
12256: PPUSH
12257: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12261: LD_ADDR_VAR 0 1
12265: PUSH
12266: LD_EXP 38
12270: PPUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: PUSH
12293: FOR_IN
12294: IFFALSE 12313
// ComAgressiveMove ( i , 221 , 110 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_INT 221
12303: PPUSH
12304: LD_INT 110
12306: PPUSH
12307: CALL_OW 114
12311: GO 12293
12313: POP
12314: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12315: LD_EXP 38
12319: PPUSH
12320: LD_INT 25
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 72
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 124
12340: PPUSH
12341: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12345: LD_EXP 38
12349: PPUSH
12350: LD_INT 25
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PUSH
12365: LD_INT 4
12367: ARRAY
12368: PPUSH
12369: LD_INT 214
12371: PPUSH
12372: LD_INT 114
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 132
// if IsOk ( Grishko ) then
12382: LD_EXP 41
12386: PPUSH
12387: CALL_OW 302
12391: IFFALSE 12417
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12393: LD_EXP 41
12397: PPUSH
12398: LD_STRING D9-Gri-1
12400: PPUSH
12401: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12405: LD_EXP 40
12409: PPUSH
12410: LD_STRING D9-Kur-1
12412: PPUSH
12413: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12417: LD_INT 35
12419: PPUSH
12420: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12424: LD_EXP 33
12428: PPUSH
12429: LD_INT 233
12431: PPUSH
12432: LD_INT 130
12434: PPUSH
12435: CALL_OW 114
// if IsOk ( Grishko ) then
12439: LD_EXP 41
12443: PPUSH
12444: CALL_OW 302
12448: IFFALSE 12474
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12450: LD_EXP 41
12454: PPUSH
12455: LD_STRING D9-Gri-2
12457: PPUSH
12458: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12462: LD_EXP 40
12466: PPUSH
12467: LD_STRING D9-Kur-2
12469: PPUSH
12470: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12474: LD_EXP 41
12478: PPUSH
12479: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12483: LD_EXP 41
12487: PPUSH
12488: LD_INT 211
12490: PPUSH
12491: LD_INT 104
12493: PPUSH
12494: CALL_OW 171
// AddComHold ( Grishko ) ;
12498: LD_EXP 41
12502: PPUSH
12503: CALL_OW 200
// repeat wait ( 3 ) ;
12507: LD_INT 3
12509: PPUSH
12510: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12514: LD_EXP 41
12518: PPUSH
12519: CALL_OW 310
12523: NOT
12524: IFFALSE 12507
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12526: LD_EXP 38
12530: PPUSH
12531: LD_INT 34
12533: PUSH
12534: LD_INT 26
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: PPUSH
12546: LD_EXP 41
12550: PPUSH
12551: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12555: LD_EXP 38
12559: PPUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 26
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 72
12574: PPUSH
12575: LD_INT 215
12577: PPUSH
12578: LD_INT 106
12580: PPUSH
12581: CALL_OW 174
// repeat wait ( 3 ) ;
12585: LD_INT 3
12587: PPUSH
12588: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12592: LD_EXP 41
12596: PPUSH
12597: CALL_OW 256
12601: PUSH
12602: LD_INT 1000
12604: LESS
12605: IFFALSE 12585
// NormalAttack ( 5 , Grishko ) ;
12607: LD_INT 5
12609: PPUSH
12610: LD_EXP 41
12614: PPUSH
12615: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12619: LD_INT 6
12621: PPUSH
12622: LD_EXP 38
12626: PPUSH
12627: LD_INT 25
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 72
12641: PUSH
12642: LD_INT 4
12644: ARRAY
12645: PPUSH
12646: CALL_OW 472
// if IsOk ( Grishko ) then
12650: LD_EXP 41
12654: PPUSH
12655: CALL_OW 302
12659: IFFALSE 12685
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12661: LD_EXP 41
12665: PPUSH
12666: LD_STRING D9-Gri-3
12668: PPUSH
12669: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12673: LD_EXP 40
12677: PPUSH
12678: LD_STRING D9-Kur-3
12680: PPUSH
12681: CALL_OW 94
// end ; music_class := music_auto ;
12685: LD_ADDR_OWVAR 72
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// music_nat := music_auto ;
12693: LD_ADDR_OWVAR 71
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// for i in omarSquad do
12701: LD_ADDR_VAR 0 1
12705: PUSH
12706: LD_EXP 38
12710: PUSH
12711: FOR_IN
12712: IFFALSE 12854
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 247
12723: PUSH
12724: LD_INT 2
12726: EQUAL
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: CALL_OW 256
12737: PUSH
12738: LD_INT 1000
12740: LESS
12741: AND
12742: IFFALSE 12808
// begin driver := IsDrivenBy ( i ) ;
12744: LD_ADDR_VAR 0 2
12748: PUSH
12749: LD_VAR 0 1
12753: PPUSH
12754: CALL_OW 311
12758: ST_TO_ADDR
// veh := i ;
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_VAR 0 1
12768: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12769: LD_VAR 0 2
12773: PPUSH
12774: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12792: LD_VAR 0 2
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: CALL_OW 180
// end else
12806: GO 12852
// if GetLives ( i ) < 500 then
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 256
12817: PUSH
12818: LD_INT 500
12820: LESS
12821: IFFALSE 12852
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12823: LD_EXP 38
12827: PPUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: PPUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 188
// end ; end ;
12852: GO 12711
12854: POP
12855: POP
// repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12863: LD_EXP 38
12867: PPUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 24
12873: PUSH
12874: LD_INT 1000
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: NOT
12904: PUSH
12905: LD_EXP 38
12909: PPUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 24
12915: PUSH
12916: LD_INT 250
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: NOT
12932: AND
12933: IFFALSE 12856
// wait ( 0 0$2 ) ;
12935: LD_INT 70
12937: PPUSH
12938: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12942: LD_ADDR_VAR 0 5
12946: PUSH
12947: LD_EXP 38
12951: PPUSH
12952: LD_INT 58
12954: PUSH
12955: EMPTY
12956: LIST
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 72
12976: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12977: LD_ADDR_VAR 0 6
12981: PUSH
12982: LD_EXP 38
12986: PPUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: LD_INT 55
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: ST_TO_ADDR
// for i := 1 to tmp do
13019: LD_ADDR_VAR 0 1
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 5
13033: PUSH
13034: FOR_TO
13035: IFFALSE 13065
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13037: LD_VAR 0 6
13041: PUSH
13042: LD_VAR 0 1
13046: ARRAY
13047: PPUSH
13048: LD_VAR 0 5
13052: PUSH
13053: LD_VAR 0 1
13057: ARRAY
13058: PPUSH
13059: CALL_OW 120
13063: GO 13034
13065: POP
13066: POP
// wait ( 0 0$5 ) ;
13067: LD_INT 175
13069: PPUSH
13070: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13074: LD_EXP 38
13078: PPUSH
13079: LD_INT 199
13081: PPUSH
13082: LD_INT 141
13084: PPUSH
13085: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13089: LD_EXP 33
13093: PPUSH
13094: LD_INT 190
13096: PPUSH
13097: LD_INT 143
13099: PPUSH
13100: CALL_OW 114
// AddComHold ( Omar ) ;
13104: LD_EXP 33
13108: PPUSH
13109: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13113: LD_EXP 38
13117: PPUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 72
13150: PPUSH
13151: LD_INT 161
13153: PPUSH
13154: LD_INT 130
13156: PPUSH
13157: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PPUSH
13181: LD_INT 163
13183: PPUSH
13184: LD_INT 122
13186: PPUSH
13187: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13191: LD_EXP 38
13195: PPUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: PUSH
13211: LD_INT 4
13213: ARRAY
13214: PPUSH
13215: LD_INT 165
13217: PPUSH
13218: LD_INT 118
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13228: LD_EXP 38
13232: PPUSH
13233: LD_INT 25
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PPUSH
13243: CALL_OW 72
13247: PUSH
13248: LD_INT 4
13250: ARRAY
13251: PPUSH
13252: LD_INT 159
13254: PPUSH
13255: LD_INT 116
13257: PPUSH
13258: LD_INT 0
13260: PPUSH
13261: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13265: LD_EXP 38
13269: PPUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 72
13284: PPUSH
13285: LD_INT 169
13287: PPUSH
13288: LD_INT 114
13290: PPUSH
13291: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13295: LD_INT 35
13297: PPUSH
13298: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13302: LD_ADDR_VAR 0 5
13306: PUSH
13307: LD_EXP 38
13311: PPUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 72
13326: ST_TO_ADDR
// for i in tmp do
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_VAR 0 5
13336: PUSH
13337: FOR_IN
13338: IFFALSE 13435
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 256
13349: PUSH
13350: LD_INT 600
13352: LESS
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 161
13361: PPUSH
13362: LD_INT 130
13364: PPUSH
13365: CALL_OW 297
13369: PUSH
13370: LD_INT 6
13372: GREATER
13373: AND
13374: IFFALSE 13391
// ComMoveXY ( i , 161 , 130 ) ;
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 161
13383: PPUSH
13384: LD_INT 130
13386: PPUSH
13387: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 256
13400: PUSH
13401: LD_INT 1000
13403: EQUAL
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 314
13414: NOT
13415: AND
13416: IFFALSE 13433
// ComAgressiveMove ( i , 160 , 109 ) ;
13418: LD_VAR 0 1
13422: PPUSH
13423: LD_INT 160
13425: PPUSH
13426: LD_INT 109
13428: PPUSH
13429: CALL_OW 114
// end ;
13433: GO 13337
13435: POP
13436: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13437: LD_ADDR_VAR 0 5
13441: PUSH
13442: LD_EXP 38
13446: PPUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
// for i in tmp do
13462: LD_ADDR_VAR 0 1
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: FOR_IN
13473: IFFALSE 13739
// begin tmp2 := IsDrivenBy ( i ) ;
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 311
13489: ST_TO_ADDR
// if not tmp2 then
13490: LD_VAR 0 6
13494: NOT
13495: IFFALSE 13499
// continue ;
13497: GO 13472
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13499: LD_VAR 0 1
13503: PPUSH
13504: CALL_OW 256
13508: PUSH
13509: LD_INT 600
13511: GREATEREQUAL
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 110
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: AND
13527: IFFALSE 13541
// SetTag ( i , 0 ) ;
13529: LD_VAR 0 1
13533: PPUSH
13534: LD_INT 0
13536: PPUSH
13537: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 256
13550: PUSH
13551: LD_INT 600
13553: GREATEREQUAL
13554: PUSH
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 110
13564: NOT
13565: AND
13566: IFFALSE 13592
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13568: LD_VAR 0 1
13572: PPUSH
13573: LD_VAR 0 7
13577: PPUSH
13578: LD_VAR 0 1
13582: PPUSH
13583: CALL_OW 74
13587: PPUSH
13588: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 256
13601: PUSH
13602: LD_INT 600
13604: LESS
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 110
13615: NOT
13616: AND
13617: IFFALSE 13646
// begin SetTag ( i , 1 ) ;
13619: LD_VAR 0 1
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_INT 202
13638: PPUSH
13639: LD_INT 150
13641: PPUSH
13642: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 110
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: PUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: LD_INT 202
13667: PPUSH
13668: LD_INT 150
13670: PPUSH
13671: CALL_OW 297
13675: PUSH
13676: LD_INT 6
13678: LESS
13679: AND
13680: PUSH
13681: LD_VAR 0 6
13685: AND
13686: IFFALSE 13737
// begin ComExitVehicle ( tmp2 ) ;
13688: LD_VAR 0 6
13692: PPUSH
13693: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13697: LD_VAR 0 6
13701: PPUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13711: LD_VAR 0 6
13715: PPUSH
13716: LD_INT 700
13718: PPUSH
13719: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13723: LD_VAR 0 6
13727: PPUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 180
// end ; end ;
13737: GO 13472
13739: POP
13740: POP
// until kirovDestroyed ;
13741: LD_EXP 16
13745: IFFALSE 13295
// repeat wait ( 0 0$1 ) ;
13747: LD_INT 35
13749: PPUSH
13750: CALL_OW 67
// for i in omarSquad union Omar do
13754: LD_ADDR_VAR 0 1
13758: PUSH
13759: LD_EXP 38
13763: PUSH
13764: LD_EXP 33
13768: UNION
13769: PUSH
13770: FOR_IN
13771: IFFALSE 13941
// if IsInArea ( i , southRoadArea ) then
13773: LD_VAR 0 1
13777: PPUSH
13778: LD_INT 15
13780: PPUSH
13781: CALL_OW 308
13785: IFFALSE 13798
// RemoveUnit ( i ) else
13787: LD_VAR 0 1
13791: PPUSH
13792: CALL_OW 64
13796: GO 13939
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13798: LD_VAR 0 1
13802: PPUSH
13803: CALL_OW 257
13807: PUSH
13808: LD_INT 3
13810: EQUAL
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 310
13821: NOT
13822: AND
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 24
13836: PUSH
13837: LD_INT 251
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 58
13856: PUSH
13857: EMPTY
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: AND
13871: IFFALSE 13924
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13873: LD_VAR 0 1
13877: PPUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 5
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 58
13900: PUSH
13901: EMPTY
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: PPUSH
13918: CALL_OW 120
13922: GO 13939
// ComMoveXY ( i , 208 , 162 ) ;
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 208
13931: PPUSH
13932: LD_INT 162
13934: PPUSH
13935: CALL_OW 111
// end ;
13939: GO 13770
13941: POP
13942: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13943: LD_INT 22
13945: PUSH
13946: LD_INT 5
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 21
13955: PUSH
13956: LD_INT 1
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: NOT
13972: IFFALSE 13747
// end ;
13974: PPOPN 7
13976: END
// every 0 0$1 trigger IsDead ( kirov ) do
13977: LD_INT 71
13979: PPUSH
13980: CALL_OW 301
13984: IFFALSE 14001
13986: GO 13988
13988: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kirov
13996: PPUSH
13997: CALL_OW 88
14001: END
// every 0 0$1 trigger See ( 2 , beria ) do
14002: LD_INT 2
14004: PPUSH
14005: LD_INT 106
14007: PPUSH
14008: CALL_OW 292
14012: IFFALSE 14029
14014: GO 14016
14016: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14017: LD_EXP 25
14021: PPUSH
14022: LD_STRING DH-1-Beria
14024: PPUSH
14025: CALL_OW 88
14029: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14030: LD_INT 2
14032: PPUSH
14033: LD_INT 112
14035: PPUSH
14036: CALL_OW 292
14040: IFFALSE 14307
14042: GO 14044
14044: DISABLE
// begin DialogueOn ;
14045: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14049: LD_INT 112
14051: PPUSH
14052: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14056: LD_EXP 25
14060: PPUSH
14061: LD_STRING DH-1-Kagan
14063: PPUSH
14064: CALL_OW 88
// if Kamil then
14068: LD_EXP 29
14072: IFFALSE 14110
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14074: LD_EXP 29
14078: PPUSH
14079: LD_STRING DKam-Kagan-2
14081: PPUSH
14082: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DG-Kagan-3
14093: PPUSH
14094: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DG-Kagan-4
14105: PPUSH
14106: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14110: LD_STRING KaganBase
14112: PPUSH
14113: CALL_OW 97
14117: PUSH
14118: LD_INT 1
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14221
14126: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14127: LD_EXP 25
14131: PPUSH
14132: LD_STRING DH-Kagan-5
14134: PPUSH
14135: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14139: LD_EXP 25
14143: PPUSH
14144: LD_STRING DH-Kagan-6
14146: PPUSH
14147: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14151: LD_EXP 36
14155: PPUSH
14156: LD_STRING DShar-Kagan-7
14158: PPUSH
14159: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14163: LD_EXP 25
14167: PPUSH
14168: LD_STRING DH-Kagan-8
14170: PPUSH
14171: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14175: LD_EXP 25
14179: PPUSH
14180: LD_STRING DH-Kagan-9
14182: PPUSH
14183: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14187: LD_EXP 36
14191: PPUSH
14192: LD_STRING DShar-Kagan-10
14194: PPUSH
14195: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14199: LD_EXP 25
14203: PPUSH
14204: LD_STRING DH-Kagan-11
14206: PPUSH
14207: CALL_OW 88
// kaganCaptured := true ;
14211: LD_ADDR_EXP 24
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// end ; 2 :
14219: GO 14303
14221: LD_INT 2
14223: DOUBLE
14224: EQUAL
14225: IFTRUE 14229
14227: GO 14302
14229: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14230: LD_INT 22
14232: PUSH
14233: LD_INT 8
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: PUSH
14245: LD_EXP 35
14249: AND
14250: IFFALSE 14264
// Say ( Heike , DH-Kagan-a-5 ) ;
14252: LD_EXP 25
14256: PPUSH
14257: LD_STRING DH-Kagan-a-5
14259: PPUSH
14260: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14264: LD_EXP 25
14268: PPUSH
14269: LD_STRING DH-Kagan-a-6
14271: PPUSH
14272: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Kagan-a-7
14283: PPUSH
14284: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14288: LD_EXP 26
14292: PPUSH
14293: LD_STRING DG-Kagan-a-8
14295: PPUSH
14296: CALL_OW 88
// end ; end ;
14300: GO 14303
14302: POP
// DialogueOff ;
14303: CALL_OW 7
// end ;
14307: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14308: LD_EXP 18
14312: PUSH
14313: LD_INT 112
14315: PPUSH
14316: CALL_OW 255
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: OR
14325: IFFALSE 14337
14327: GO 14329
14329: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14330: LD_STRING KaganDone
14332: PPUSH
14333: CALL_OW 337
14337: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14338: LD_EXP 6
14342: PUSH
14343: LD_EXP 48
14347: PPUSH
14348: LD_INT 95
14350: PUSH
14351: LD_INT 19
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 72
14362: AND
14363: IFFALSE 14440
14365: GO 14367
14367: DISABLE
// begin DialogueOn ;
14368: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14372: LD_INT 63
14374: PPUSH
14375: LD_INT 32
14377: PPUSH
14378: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14382: LD_INT 63
14384: PPUSH
14385: LD_INT 32
14387: PPUSH
14388: LD_INT 2
14390: PPUSH
14391: LD_INT 12
14393: NEG
14394: PPUSH
14395: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14399: LD_EXP 25
14403: PPUSH
14404: LD_STRING DH-Omicron-1
14406: PPUSH
14407: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14411: LD_EXP 27
14415: PPUSH
14416: LD_STRING DM-Omicron-2
14418: PPUSH
14419: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14423: LD_INT 63
14425: PPUSH
14426: LD_INT 32
14428: PPUSH
14429: LD_INT 2
14431: PPUSH
14432: CALL_OW 331
// DialogueOff ;
14436: CALL_OW 7
// end ;
14440: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14441: LD_INT 2
14443: PPUSH
14444: LD_EXP 50
14448: PPUSH
14449: CALL_OW 292
14453: PUSH
14454: LD_EXP 50
14458: PPUSH
14459: CALL_OW 255
14463: PUSH
14464: LD_INT 2
14466: EQUAL
14467: OR
14468: PUSH
14469: LD_INT 106
14471: PPUSH
14472: CALL_OW 255
14476: PUSH
14477: LD_INT 2
14479: EQUAL
14480: OR
14481: PUSH
14482: LD_EXP 50
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_EXP 25
14497: PPUSH
14498: CALL_OW 302
14502: AND
14503: PUSH
14504: LD_EXP 35
14508: PPUSH
14509: CALL_OW 302
14513: AND
14514: IFFALSE 15253
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
// begin DialogueOn ;
14526: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14530: LD_INT 111
14532: PPUSH
14533: LD_INT 90
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 6
14541: NEG
14542: PPUSH
14543: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14547: LD_INT 111
14549: PPUSH
14550: LD_INT 90
14552: PPUSH
14553: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14557: LD_EXP 35
14561: PPUSH
14562: LD_STRING DA-Cap-1
14564: PPUSH
14565: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14569: LD_EXP 25
14573: PPUSH
14574: LD_STRING DH-Cap-2
14576: PPUSH
14577: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14581: LD_INT 111
14583: PPUSH
14584: LD_INT 90
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 331
// DialogueOff ;
14594: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14598: LD_INT 35
14600: PPUSH
14601: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14605: LD_EXP 17
14609: PUSH
14610: LD_INT 106
14612: PPUSH
14613: CALL_OW 255
14617: PUSH
14618: LD_INT 2
14620: EQUAL
14621: OR
14622: PUSH
14623: LD_EXP 50
14627: PPUSH
14628: CALL_OW 255
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: OR
14637: PUSH
14638: LD_EXP 50
14642: PPUSH
14643: CALL_OW 302
14647: AND
14648: PUSH
14649: LD_EXP 35
14653: PPUSH
14654: CALL_OW 302
14658: AND
14659: PUSH
14660: LD_INT 2
14662: PPUSH
14663: CALL_OW 463
14667: NOT
14668: AND
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 3
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 92
14692: PUSH
14693: LD_INT 110
14695: PUSH
14696: LD_INT 95
14698: PUSH
14699: LD_INT 12
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: NOT
14718: AND
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 30
14732: PUSH
14733: LD_INT 5
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 92
14742: PUSH
14743: LD_INT 110
14745: PUSH
14746: LD_INT 95
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: NOT
14768: AND
14769: IFFALSE 14598
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14771: LD_ADDR_VAR 0 2
14775: PUSH
14776: LD_EXP 37
14780: PUSH
14781: LD_EXP 28
14785: PUSH
14786: LD_EXP 29
14790: PUSH
14791: LD_EXP 31
14795: PUSH
14796: LD_EXP 30
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: UNION
14807: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_VAR 0 2
14817: PPUSH
14818: LD_INT 50
14820: PUSH
14821: EMPTY
14822: LIST
14823: PPUSH
14824: CALL_OW 72
14828: ST_TO_ADDR
// if tmp < 2 then
14829: LD_VAR 0 2
14833: PUSH
14834: LD_INT 2
14836: LESS
14837: IFFALSE 14849
// q := 2 else
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_INT 2
14846: ST_TO_ADDR
14847: GO 14862
// q := Query ( LabCap ) ;
14849: LD_ADDR_VAR 0 4
14853: PUSH
14854: LD_STRING LabCap
14856: PPUSH
14857: CALL_OW 97
14861: ST_TO_ADDR
// case q of 1 :
14862: LD_VAR 0 4
14866: PUSH
14867: LD_INT 1
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 15217
14875: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14876: LD_INT 2
14878: PPUSH
14879: LD_EXP 50
14883: PPUSH
14884: CALL_OW 471
// labCaptured := true ;
14888: LD_ADDR_EXP 21
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14896: LD_EXP 25
14900: PPUSH
14901: LD_STRING DH-Cap-a-1
14903: PPUSH
14904: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14908: LD_EXP 35
14912: PPUSH
14913: LD_STRING DA-Cap-a-2
14915: PPUSH
14916: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: LD_EXP 35
14929: PUSH
14930: LD_INT -3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT -2
14939: PUSH
14940: LD_INT -4
14942: PUSH
14943: LD_EXP 25
14947: PUSH
14948: LD_EXP 26
14952: PUSH
14953: LD_EXP 34
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: ADD
14971: PUSH
14972: LD_INT -3
14974: PUSH
14975: EMPTY
14976: LIST
14977: ADD
14978: PUSH
14979: LD_VAR 0 2
14983: ADD
14984: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_STRING Select two characters to go with Aviradze
14992: PPUSH
14993: LD_INT 2
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: LD_VAR 0 5
15003: PPUSH
15004: EMPTY
15005: PPUSH
15006: CALL_OW 42
15010: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15011: LD_EXP 50
15015: PPUSH
15016: LD_INT 8
15018: PPUSH
15019: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15023: LD_EXP 35
15027: PPUSH
15028: LD_INT 8
15030: PPUSH
15031: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15035: LD_ADDR_EXP 39
15039: PUSH
15040: LD_EXP 35
15044: PUSH
15045: EMPTY
15046: LIST
15047: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15048: LD_EXP 35
15052: PPUSH
15053: CALL_OW 310
15057: IFFALSE 15068
// ComExit ( Aviradze ) ;
15059: LD_EXP 35
15063: PPUSH
15064: CALL 75612 0 1
// wait ( 3 ) ;
15068: LD_INT 3
15070: PPUSH
15071: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15075: LD_EXP 35
15079: PPUSH
15080: LD_EXP 50
15084: PPUSH
15085: CALL_OW 120
// for i := 1 to 2 do
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: DOUBLE
15095: LD_INT 1
15097: DEC
15098: ST_TO_ADDR
15099: LD_INT 2
15101: PUSH
15102: FOR_TO
15103: IFFALSE 15206
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15105: LD_ADDR_EXP 39
15109: PUSH
15110: LD_EXP 39
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_VAR 0 1
15124: ARRAY
15125: UNION
15126: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15127: LD_VAR 0 3
15131: PUSH
15132: LD_VAR 0 1
15136: ARRAY
15137: PPUSH
15138: LD_INT 8
15140: PPUSH
15141: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15177
// ComExit ( tmp2 [ i ] ) ;
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: CALL 75612 0 1
// wait ( 3 ) ;
15177: LD_INT 3
15179: PPUSH
15180: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15184: LD_VAR 0 3
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_EXP 50
15199: PPUSH
15200: CALL_OW 120
// end ;
15204: GO 15102
15206: POP
15207: POP
// SetAchievement ( ACH_LAB ) ;
15208: LD_STRING ACH_LAB
15210: PPUSH
15211: CALL_OW 543
// end ; 2 :
15215: GO 15253
15217: LD_INT 2
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15252
15225: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15226: LD_EXP 25
15230: PPUSH
15231: LD_STRING DH-Cap-b-1
15233: PPUSH
15234: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15238: LD_EXP 35
15242: PPUSH
15243: LD_STRING DA-Cap-b-2
15245: PPUSH
15246: CALL_OW 88
// end ; end ;
15250: GO 15253
15252: POP
// end ;
15253: PPOPN 5
15255: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15256: LD_INT 10
15258: PPUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 31
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 70
15287: PUSH
15288: LD_INT 2
15290: GREATEREQUAL
15291: IFFALSE 15303
15293: GO 15295
15295: DISABLE
// SetAchievement ( ACH_KING ) ;
15296: LD_STRING ACH_KING
15298: PPUSH
15299: CALL_OW 543
15303: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15304: LD_EXP 11
15308: NOT
15309: PUSH
15310: LD_INT 10
15312: PPUSH
15313: LD_INT 22
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 70
15359: AND
15360: IFFALSE 15380
15362: GO 15364
15364: DISABLE
// begin hillBase := true ;
15365: LD_ADDR_EXP 15
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15373: LD_STRING HillDone
15375: PPUSH
15376: CALL_OW 337
// end ;
15380: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15381: LD_EXP 30
15385: PUSH
15386: LD_EXP 30
15390: PPUSH
15391: CALL_OW 256
15395: PUSH
15396: LD_INT 3
15398: LESS
15399: AND
15400: IFFALSE 15446
15402: GO 15404
15404: DISABLE
// begin DialogueOn ;
15405: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15409: LD_EXP 30
15413: PPUSH
15414: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15418: LD_EXP 30
15422: PPUSH
15423: LD_STRING DK-Kkilled-1
15425: PPUSH
15426: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15430: LD_EXP 25
15434: PPUSH
15435: LD_STRING DH-Kkilled-2
15437: PPUSH
15438: CALL_OW 88
// DialogueOff ;
15442: CALL_OW 7
// end ;
15446: END
// every 0 0$1 trigger kaiaKilledByRussian do
15447: LD_EXP 23
15451: IFFALSE 15468
15453: GO 15455
15455: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15456: LD_EXP 25
15460: PPUSH
15461: LD_STRING DH-Kkilled-3
15463: PPUSH
15464: CALL_OW 88
15468: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15469: LD_EXP 16
15473: PUSH
15474: LD_INT 106
15476: PPUSH
15477: CALL_OW 255
15481: PUSH
15482: LD_INT 2
15484: EQUAL
15485: PUSH
15486: LD_EXP 17
15490: OR
15491: AND
15492: PUSH
15493: LD_EXP 18
15497: PUSH
15498: LD_EXP 24
15502: PUSH
15503: LD_INT 112
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: LD_INT 2
15513: EQUAL
15514: AND
15515: OR
15516: AND
15517: IFFALSE 16757
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15529: LD_STRING GoToWest
15531: PPUSH
15532: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15536: LD_INT 17
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15546: LD_INT 35
15548: PPUSH
15549: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_INT 17
15560: PPUSH
15561: LD_INT 22
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 21
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: LD_INT 58
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 70
15624: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 55
15645: PUSH
15646: EMPTY
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: LD_INT 21
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 3
15678: PUSH
15679: LD_INT 58
15681: PUSH
15682: EMPTY
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15708: LD_VAR 0 2
15712: PUSH
15713: LD_INT 0
15715: PLUS
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_INT 0
15724: PLUS
15725: EQUAL
15726: IFFALSE 15546
// SaveCharacters ( Heike , 04_1_Heike ) ;
15728: LD_EXP 25
15732: PPUSH
15733: LD_STRING 04_1_Heike
15735: PPUSH
15736: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15740: LD_EXP 35
15744: PUSH
15745: LD_EXP 35
15749: PUSH
15750: LD_EXP 39
15754: IN
15755: NOT
15756: AND
15757: IFFALSE 15773
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15759: LD_EXP 35
15763: PPUSH
15764: LD_STRING 04_1_Aviradze
15766: PPUSH
15767: CALL_OW 38
15771: GO 15791
// if Aviradze then
15773: LD_EXP 35
15777: IFFALSE 15791
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15779: LD_EXP 35
15783: PPUSH
15784: LD_STRING 04_1_Aviradze_L
15786: PPUSH
15787: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15791: LD_EXP 28
15795: PUSH
15796: LD_EXP 28
15800: PUSH
15801: LD_EXP 39
15805: IN
15806: NOT
15807: AND
15808: IFFALSE 15824
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15810: LD_EXP 28
15814: PPUSH
15815: LD_STRING 04_1_Ibrahim
15817: PPUSH
15818: CALL_OW 38
15822: GO 15842
// if Ibrahim then
15824: LD_EXP 28
15828: IFFALSE 15842
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15830: LD_EXP 28
15834: PPUSH
15835: LD_STRING 04_1_Ibrahim_L
15837: PPUSH
15838: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15842: LD_EXP 29
15846: PUSH
15847: LD_EXP 29
15851: PUSH
15852: LD_EXP 39
15856: IN
15857: NOT
15858: AND
15859: IFFALSE 15875
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15861: LD_EXP 29
15865: PPUSH
15866: LD_STRING 04_1_Kamil
15868: PPUSH
15869: CALL_OW 38
15873: GO 15893
// if Kamil then
15875: LD_EXP 29
15879: IFFALSE 15893
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15881: LD_EXP 29
15885: PPUSH
15886: LD_STRING 04_1_Kamil_L
15888: PPUSH
15889: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15893: LD_EXP 31
15897: PUSH
15898: LD_EXP 31
15902: PUSH
15903: LD_EXP 39
15907: IN
15908: NOT
15909: AND
15910: IFFALSE 15926
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15912: LD_EXP 31
15916: PPUSH
15917: LD_STRING 04_1_Sophia
15919: PPUSH
15920: CALL_OW 38
15924: GO 15944
// if Sophia then
15926: LD_EXP 31
15930: IFFALSE 15944
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15932: LD_EXP 31
15936: PPUSH
15937: LD_STRING 04_1_Sophia_L
15939: PPUSH
15940: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15944: LD_EXP 30
15948: PUSH
15949: LD_EXP 30
15953: PUSH
15954: LD_EXP 39
15958: IN
15959: NOT
15960: AND
15961: IFFALSE 15977
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15963: LD_EXP 30
15967: PPUSH
15968: LD_STRING 04_1_Kaia
15970: PPUSH
15971: CALL_OW 38
15975: GO 15995
// if Kaia then
15977: LD_EXP 30
15981: IFFALSE 15995
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15983: LD_EXP 30
15987: PPUSH
15988: LD_STRING 04_1_Kaia_L
15990: PPUSH
15991: CALL_OW 38
// if Givi then
15995: LD_EXP 26
15999: IFFALSE 16013
// SaveCharacters ( Givi , 04_1_Givi ) ;
16001: LD_EXP 26
16005: PPUSH
16006: LD_STRING 04_1_Givi
16008: PPUSH
16009: CALL_OW 38
// if Mike then
16013: LD_EXP 27
16017: IFFALSE 16031
// SaveCharacters ( Mike , 04_1_Mike ) ;
16019: LD_EXP 27
16023: PPUSH
16024: LD_STRING 04_1_Mike
16026: PPUSH
16027: CALL_OW 38
// if Markov then
16031: LD_EXP 32
16035: IFFALSE 16049
// SaveCharacters ( Markov , 04_1_Markov ) ;
16037: LD_EXP 32
16041: PPUSH
16042: LD_STRING 04_1_Markov
16044: PPUSH
16045: CALL_OW 38
// if Kurt then
16049: LD_EXP 34
16053: IFFALSE 16074
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16055: LD_EXP 34
16059: PPUSH
16060: LD_STRING 04_1_Kurt
16062: PPUSH
16063: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16067: LD_STRING enableBioCharacter(BIO_KURT)
16069: PPUSH
16070: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16074: LD_EXP 37
16078: PUSH
16079: LD_EXP 39
16083: DIFF
16084: IFFALSE 16104
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16086: LD_EXP 37
16090: PUSH
16091: LD_EXP 39
16095: DIFF
16096: PPUSH
16097: LD_STRING 04_1_others
16099: PPUSH
16100: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16104: LD_EXP 39
16108: PUSH
16109: LD_EXP 37
16113: AND
16114: IFFALSE 16199
// begin tmp := [ ] ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// for i in heikeSecondSquad do
16123: LD_ADDR_VAR 0 1
16127: PUSH
16128: LD_EXP 37
16132: PUSH
16133: FOR_IN
16134: IFFALSE 16179
// if i in aviradzeSquad then
16136: LD_VAR 0 1
16140: PUSH
16141: LD_EXP 39
16145: IN
16146: IFFALSE 16177
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 1
16165: PLUS
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 1
16176: ST_TO_ADDR
16177: GO 16133
16179: POP
16180: POP
// if tmp then
16181: LD_VAR 0 2
16185: IFFALSE 16199
// SaveCharacters ( tmp , 04_1_others_L ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_STRING 04_1_others_L
16194: PPUSH
16195: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 23
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: ST_TO_ADDR
// if tmp then
16233: LD_VAR 0 2
16237: IFFALSE 16251
// SaveCharacters ( tmp , 04_1_apes ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_STRING 04_1_apes
16246: PPUSH
16247: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_INT 17
16258: PPUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 70
16273: ST_TO_ADDR
// if tmp then
16274: LD_VAR 0 2
16278: IFFALSE 16622
// begin tmp2 := [ ] ;
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: EMPTY
16286: ST_TO_ADDR
// for i in tmp do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: LD_VAR 0 2
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16608
// begin driver := IsDrivenBy ( i ) ;
16300: LD_ADDR_VAR 0 5
16304: PUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL_OW 311
16314: ST_TO_ADDR
// if not driver then
16315: LD_VAR 0 5
16319: NOT
16320: IFFALSE 16324
// continue ;
16322: GO 16297
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 264
16333: PUSH
16334: LD_INT 32
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 51
16342: PUSH
16343: LD_INT 89
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: IN
16352: IFFALSE 16500
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16354: LD_ADDR_VAR 0 4
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 289
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: LD_INT 2
16379: PPUSH
16380: CALL_OW 289
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16389: LD_ADDR_VAR 0 3
16393: PUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_VAR 0 3
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 265
16417: PUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 262
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 263
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 264
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 248
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 256
16467: PUSH
16468: LD_VAR 0 4
16472: PUSH
16473: LD_VAR 0 5
16477: PPUSH
16478: CALL_OW 257
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 1
16497: ST_TO_ADDR
// end else
16498: GO 16606
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 1
16517: PLUS
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 265
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 262
16538: PUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 263
16548: PUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 264
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 248
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 256
16578: PUSH
16579: EMPTY
16580: PUSH
16581: LD_VAR 0 5
16585: PPUSH
16586: CALL_OW 257
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PPUSH
16601: CALL_OW 1
16605: ST_TO_ADDR
// end ;
16606: GO 16297
16608: POP
16609: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_STRING 04_1_Vehicles
16617: PPUSH
16618: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16622: LD_EXP 21
16626: PPUSH
16627: LD_STRING 04_1_RuLabCaptured
16629: PPUSH
16630: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING 04_1_EscapeCounter
16641: PPUSH
16642: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16646: LD_EXP 15
16650: PPUSH
16651: LD_STRING 04_1_BaseHill
16653: PPUSH
16654: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16658: LD_OWVAR 1
16662: PPUSH
16663: LD_STRING 04_1_Time
16665: PPUSH
16666: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16670: LD_EXP 14
16674: PPUSH
16675: LD_STRING 04_1_DeadCounter
16677: PPUSH
16678: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16682: LD_EXP 24
16686: PUSH
16687: LD_INT 112
16689: PPUSH
16690: CALL_OW 255
16694: MUL
16695: PUSH
16696: LD_INT 2
16698: EQUAL
16699: PPUSH
16700: LD_STRING 04_1_KaganCaptured
16702: PPUSH
16703: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16707: LD_INT 22
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 34
16719: PUSH
16720: LD_INT 26
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 69
16735: PUSH
16736: LD_INT 0
16738: PLUS
16739: PPUSH
16740: LD_STRING 04_1_Flamethrower
16742: PPUSH
16743: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16747: LD_INT 1
16749: PPUSH
16750: LD_STRING __x1\04_cont2
16752: PPUSH
16753: CALL_OW 340
// end ; end_of_file
16757: PPOPN 5
16759: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 266
16769: PUSH
16770: LD_INT 0
16772: EQUAL
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 255
16783: PUSH
16784: LD_INT 2
16786: EQUAL
16787: AND
16788: IFFALSE 16798
// baseConstructed := true ;
16790: LD_ADDR_EXP 3
16794: PUSH
16795: LD_INT 1
16797: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 266
16807: PUSH
16808: LD_INT 6
16810: EQUAL
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 255
16821: PUSH
16822: LD_INT 2
16824: EQUAL
16825: AND
16826: IFFALSE 16836
// labConstructed := true ;
16828: LD_ADDR_EXP 4
16832: PUSH
16833: LD_INT 1
16835: ST_TO_ADDR
// end ;
16836: PPOPN 1
16838: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL 33633 0 1
// if un = Heike then
16848: LD_VAR 0 1
16852: PUSH
16853: LD_EXP 25
16857: EQUAL
16858: IFFALSE 16867
// YouLost ( Heike ) ;
16860: LD_STRING Heike
16862: PPUSH
16863: CALL_OW 104
// if un = Omar then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_EXP 33
16876: EQUAL
16877: IFFALSE 16886
// YouLost ( Omar ) ;
16879: LD_STRING Omar
16881: PPUSH
16882: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16886: LD_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 23
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 21
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: IN
16931: IFFALSE 16947
// loseCounter := loseCounter + 1 ;
16933: LD_ADDR_EXP 14
16937: PUSH
16938: LD_EXP 14
16942: PUSH
16943: LD_INT 1
16945: PLUS
16946: ST_TO_ADDR
// if un = omikron then
16947: LD_VAR 0 1
16951: PUSH
16952: LD_INT 64
16954: EQUAL
16955: IFFALSE 16965
// omicronFall := true ;
16957: LD_ADDR_EXP 13
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// if un = kirov then
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 71
16972: EQUAL
16973: IFFALSE 16990
// begin ChangeMissionObjectives ( KirovDone ) ;
16975: LD_STRING KirovDone
16977: PPUSH
16978: CALL_OW 337
// kirovDestroyed := true ;
16982: LD_ADDR_EXP 16
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// end ; if un = beria then
16990: LD_VAR 0 1
16994: PUSH
16995: LD_INT 106
16997: EQUAL
16998: IFFALSE 17015
// begin ChangeMissionObjectives ( BeriaDone ) ;
17000: LD_STRING BeriaDone
17002: PPUSH
17003: CALL_OW 337
// beriaDestroyed := true ;
17007: LD_ADDR_EXP 17
17011: PUSH
17012: LD_INT 1
17014: ST_TO_ADDR
// end ; if un = kagan then
17015: LD_VAR 0 1
17019: PUSH
17020: LD_INT 112
17022: EQUAL
17023: IFFALSE 17033
// kaganDestroyed := true ;
17025: LD_ADDR_EXP 18
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// if un in russianPatrol then
17033: LD_VAR 0 1
17037: PUSH
17038: LD_EXP 47
17042: IN
17043: IFFALSE 17061
// russianPatrol := russianPatrol diff un ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_EXP 47
17054: PUSH
17055: LD_VAR 0 1
17059: DIFF
17060: ST_TO_ADDR
// if un in russianOmicronAttackers then
17061: LD_VAR 0 1
17065: PUSH
17066: LD_EXP 48
17070: IN
17071: IFFALSE 17089
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17073: LD_ADDR_EXP 48
17077: PUSH
17078: LD_EXP 48
17082: PUSH
17083: LD_VAR 0 1
17087: DIFF
17088: ST_TO_ADDR
// end ;
17089: PPOPN 1
17091: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
17096: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17097: LD_VAR 0 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 4
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_INT 6
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 30
17143: PUSH
17144: LD_INT 32
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 69
17159: IN
17160: IFFALSE 17333
// begin sol := UnitsInside ( un ) ;
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 313
17176: ST_TO_ADDR
// if not sol then
17177: LD_VAR 0 3
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17333
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17186: LD_ADDR_VAR 0 4
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 255
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 4
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 30
17223: PUSH
17224: LD_INT 5
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not nearestBarracks then
17245: LD_VAR 0 4
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17333
// for i in nearestBarracks do
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_VAR 0 4
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17300
// if UnitsInside ( i ) = 6 then
17267: LD_VAR 0 2
17271: PPUSH
17272: CALL_OW 313
17276: PUSH
17277: LD_INT 6
17279: EQUAL
17280: IFFALSE 17298
// nearestBarracks := nearestBarracks diff i ;
17282: LD_ADDR_VAR 0 4
17286: PUSH
17287: LD_VAR 0 4
17291: PUSH
17292: LD_VAR 0 2
17296: DIFF
17297: ST_TO_ADDR
17298: GO 17264
17300: POP
17301: POP
// if not nearestBarracks then
17302: LD_VAR 0 4
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17333
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PPUSH
17320: LD_VAR 0 4
17324: PUSH
17325: LD_INT 1
17327: ARRAY
17328: PPUSH
17329: CALL_OW 120
// end ; end ;
17333: PPOPN 4
17335: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17336: LD_INT 0
17338: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17339: LD_EXP 8
17343: NOT
17344: PUSH
17345: LD_EXP 5
17349: NOT
17350: OR
17351: IFFALSE 17355
// exit ;
17353: GO 17423
// for i in camAreas do
17355: LD_ADDR_VAR 0 5
17359: PUSH
17360: LD_EXP 8
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17421
// if InArea ( x , y , i ) then
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: LD_VAR 0 5
17382: PPUSH
17383: CALL_OW 309
17387: IFFALSE 17419
// begin SetAreaMapShow ( i , 0 ) ;
17389: LD_VAR 0 5
17393: PPUSH
17394: LD_INT 0
17396: PPUSH
17397: CALL_OW 424
// camAreas := camAreas diff i ;
17401: LD_ADDR_EXP 8
17405: PUSH
17406: LD_EXP 8
17410: PUSH
17411: LD_VAR 0 5
17415: DIFF
17416: ST_TO_ADDR
// break ;
17417: GO 17421
// end ;
17419: GO 17365
17421: POP
17422: POP
// end ;
17423: PPOPN 5
17425: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 2
17433: EQUAL
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 5
17442: PUSH
17443: LD_INT 8
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: IN
17450: AND
17451: IFFALSE 17460
// YouLost ( Ally ) ;
17453: LD_STRING Ally
17455: PPUSH
17456: CALL_OW 104
// end ;
17460: PPOPN 2
17462: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17463: LD_VAR 0 1
17467: PUSH
17468: LD_EXP 30
17472: EQUAL
17473: PUSH
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 6
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: IN
17489: AND
17490: IFFALSE 17521
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17492: LD_ADDR_EXP 23
17496: PUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 250
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 251
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// end ;
17521: PPOPN 3
17523: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: CALL 33753 0 2
// end ; end_of_file
17538: PPOPN 2
17540: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17541: LD_EXP 11
17545: NOT
17546: PUSH
17547: LD_INT 12
17549: PPUSH
17550: LD_INT 1
17552: PPUSH
17553: CALL_OW 287
17557: PUSH
17558: LD_INT 20
17560: PUSH
17561: LD_INT 16
17563: PUSH
17564: LD_INT 12
17566: PUSH
17567: LD_INT 10
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_OWVAR 67
17580: ARRAY
17581: LESS
17582: AND
17583: IFFALSE 17610
17585: GO 17587
17587: DISABLE
// begin enable ;
17588: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17589: LD_INT 1
17591: PPUSH
17592: LD_INT 5
17594: PPUSH
17595: CALL_OW 12
17599: PPUSH
17600: LD_INT 12
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 55
// end ; end_of_file
17610: END
// every 0 0$1 trigger omarCountdown do
17611: LD_EXP 22
17615: IFFALSE 17667
17617: GO 17619
17619: DISABLE
// begin enable ;
17620: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17621: LD_ADDR_OWVAR 47
17625: PUSH
17626: LD_STRING #X104-1
17628: PUSH
17629: LD_EXP 22
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17638: LD_ADDR_EXP 22
17642: PUSH
17643: LD_EXP 22
17647: PUSH
17648: LD_INT 35
17650: MINUS
17651: ST_TO_ADDR
// if not omarCountdown then
17652: LD_EXP 22
17656: NOT
17657: IFFALSE 17667
// display_strings :=  ;
17659: LD_ADDR_OWVAR 47
17663: PUSH
17664: LD_STRING 
17666: ST_TO_ADDR
// end ; end_of_file
17667: END
// export globalGameSaveCounter ; every 0 0$1 do
17668: GO 17670
17670: DISABLE
// begin enable ;
17671: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17672: LD_STRING updateTimer(
17674: PUSH
17675: LD_OWVAR 1
17679: STR
17680: PUSH
17681: LD_STRING );
17683: STR
17684: PPUSH
17685: CALL_OW 559
// end ;
17689: END
// every 0 0$1 do
17690: GO 17692
17692: DISABLE
// begin globalGameSaveCounter := 0 ;
17693: LD_ADDR_EXP 52
17697: PUSH
17698: LD_INT 0
17700: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17701: LD_STRING setGameSaveCounter(0)
17703: PPUSH
17704: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17708: LD_STRING initStreamRollete();
17710: PPUSH
17711: CALL_OW 559
// InitStreamMode ;
17715: CALL 19041 0 0
// DefineStreamItems ( false ) ;
17719: LD_INT 0
17721: PPUSH
17722: CALL 19505 0 1
// end ;
17726: END
// export function SOS_MapStart ( ) ; begin
17727: LD_INT 0
17729: PPUSH
// if streamModeActive then
17730: LD_EXP 53
17734: IFFALSE 17743
// DefineStreamItems ( true ) ;
17736: LD_INT 1
17738: PPUSH
17739: CALL 19505 0 1
// UpdateLuaVariables ( ) ;
17743: CALL 17760 0 0
// UpdateFactoryWaypoints ( ) ;
17747: CALL 32374 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17751: CALL 32631 0 0
// end ;
17755: LD_VAR 0 1
17759: RET
// function UpdateLuaVariables ( ) ; begin
17760: LD_INT 0
17762: PPUSH
// if globalGameSaveCounter then
17763: LD_EXP 52
17767: IFFALSE 17801
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17769: LD_ADDR_EXP 52
17773: PUSH
17774: LD_EXP 52
17778: PPUSH
17779: CALL 76575 0 1
17783: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17784: LD_STRING setGameSaveCounter(
17786: PUSH
17787: LD_EXP 52
17791: STR
17792: PUSH
17793: LD_STRING )
17795: STR
17796: PPUSH
17797: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17801: LD_STRING setGameDifficulty(
17803: PUSH
17804: LD_OWVAR 67
17808: STR
17809: PUSH
17810: LD_STRING )
17812: STR
17813: PPUSH
17814: CALL_OW 559
// end ;
17818: LD_VAR 0 1
17822: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17823: LD_INT 0
17825: PPUSH
// if p2 = stream_mode then
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 100
17833: EQUAL
17834: IFFALSE 18837
// begin if not StreamModeActive then
17836: LD_EXP 53
17840: NOT
17841: IFFALSE 17851
// StreamModeActive := true ;
17843: LD_ADDR_EXP 53
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// if p3 = 0 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 0
17858: EQUAL
17859: IFFALSE 17865
// InitStreamMode ;
17861: CALL 19041 0 0
// if p3 = 1 then
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17883
// sRocket := true ;
17875: LD_ADDR_EXP 58
17879: PUSH
17880: LD_INT 1
17882: ST_TO_ADDR
// if p3 = 2 then
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 2
17890: EQUAL
17891: IFFALSE 17901
// sSpeed := true ;
17893: LD_ADDR_EXP 57
17897: PUSH
17898: LD_INT 1
17900: ST_TO_ADDR
// if p3 = 3 then
17901: LD_VAR 0 3
17905: PUSH
17906: LD_INT 3
17908: EQUAL
17909: IFFALSE 17919
// sEngine := true ;
17911: LD_ADDR_EXP 59
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 4 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 4
17926: EQUAL
17927: IFFALSE 17937
// sSpec := true ;
17929: LD_ADDR_EXP 56
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// if p3 = 5 then
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 5
17944: EQUAL
17945: IFFALSE 17955
// sLevel := true ;
17947: LD_ADDR_EXP 60
17951: PUSH
17952: LD_INT 1
17954: ST_TO_ADDR
// if p3 = 6 then
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 6
17962: EQUAL
17963: IFFALSE 17973
// sArmoury := true ;
17965: LD_ADDR_EXP 61
17969: PUSH
17970: LD_INT 1
17972: ST_TO_ADDR
// if p3 = 7 then
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 7
17980: EQUAL
17981: IFFALSE 17991
// sRadar := true ;
17983: LD_ADDR_EXP 62
17987: PUSH
17988: LD_INT 1
17990: ST_TO_ADDR
// if p3 = 8 then
17991: LD_VAR 0 3
17995: PUSH
17996: LD_INT 8
17998: EQUAL
17999: IFFALSE 18009
// sBunker := true ;
18001: LD_ADDR_EXP 63
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// if p3 = 9 then
18009: LD_VAR 0 3
18013: PUSH
18014: LD_INT 9
18016: EQUAL
18017: IFFALSE 18027
// sHack := true ;
18019: LD_ADDR_EXP 64
18023: PUSH
18024: LD_INT 1
18026: ST_TO_ADDR
// if p3 = 10 then
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 10
18034: EQUAL
18035: IFFALSE 18045
// sFire := true ;
18037: LD_ADDR_EXP 65
18041: PUSH
18042: LD_INT 1
18044: ST_TO_ADDR
// if p3 = 11 then
18045: LD_VAR 0 3
18049: PUSH
18050: LD_INT 11
18052: EQUAL
18053: IFFALSE 18063
// sRefresh := true ;
18055: LD_ADDR_EXP 66
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// if p3 = 12 then
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 12
18070: EQUAL
18071: IFFALSE 18081
// sExp := true ;
18073: LD_ADDR_EXP 67
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// if p3 = 13 then
18081: LD_VAR 0 3
18085: PUSH
18086: LD_INT 13
18088: EQUAL
18089: IFFALSE 18099
// sDepot := true ;
18091: LD_ADDR_EXP 68
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// if p3 = 14 then
18099: LD_VAR 0 3
18103: PUSH
18104: LD_INT 14
18106: EQUAL
18107: IFFALSE 18117
// sFlag := true ;
18109: LD_ADDR_EXP 69
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// if p3 = 15 then
18117: LD_VAR 0 3
18121: PUSH
18122: LD_INT 15
18124: EQUAL
18125: IFFALSE 18135
// sKamikadze := true ;
18127: LD_ADDR_EXP 77
18131: PUSH
18132: LD_INT 1
18134: ST_TO_ADDR
// if p3 = 16 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 16
18142: EQUAL
18143: IFFALSE 18153
// sTroll := true ;
18145: LD_ADDR_EXP 78
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// if p3 = 17 then
18153: LD_VAR 0 3
18157: PUSH
18158: LD_INT 17
18160: EQUAL
18161: IFFALSE 18171
// sSlow := true ;
18163: LD_ADDR_EXP 79
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// if p3 = 18 then
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 18
18178: EQUAL
18179: IFFALSE 18189
// sLack := true ;
18181: LD_ADDR_EXP 80
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// if p3 = 19 then
18189: LD_VAR 0 3
18193: PUSH
18194: LD_INT 19
18196: EQUAL
18197: IFFALSE 18207
// sTank := true ;
18199: LD_ADDR_EXP 82
18203: PUSH
18204: LD_INT 1
18206: ST_TO_ADDR
// if p3 = 20 then
18207: LD_VAR 0 3
18211: PUSH
18212: LD_INT 20
18214: EQUAL
18215: IFFALSE 18225
// sRemote := true ;
18217: LD_ADDR_EXP 83
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if p3 = 21 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 21
18232: EQUAL
18233: IFFALSE 18243
// sPowell := true ;
18235: LD_ADDR_EXP 84
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// if p3 = 22 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 22
18250: EQUAL
18251: IFFALSE 18261
// sTeleport := true ;
18253: LD_ADDR_EXP 87
18257: PUSH
18258: LD_INT 1
18260: ST_TO_ADDR
// if p3 = 23 then
18261: LD_VAR 0 3
18265: PUSH
18266: LD_INT 23
18268: EQUAL
18269: IFFALSE 18279
// sOilTower := true ;
18271: LD_ADDR_EXP 89
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// if p3 = 24 then
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 24
18286: EQUAL
18287: IFFALSE 18297
// sShovel := true ;
18289: LD_ADDR_EXP 90
18293: PUSH
18294: LD_INT 1
18296: ST_TO_ADDR
// if p3 = 25 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 25
18304: EQUAL
18305: IFFALSE 18315
// sSheik := true ;
18307: LD_ADDR_EXP 91
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// if p3 = 26 then
18315: LD_VAR 0 3
18319: PUSH
18320: LD_INT 26
18322: EQUAL
18323: IFFALSE 18333
// sEarthquake := true ;
18325: LD_ADDR_EXP 93
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// if p3 = 27 then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 27
18340: EQUAL
18341: IFFALSE 18351
// sAI := true ;
18343: LD_ADDR_EXP 94
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// if p3 = 28 then
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 28
18358: EQUAL
18359: IFFALSE 18369
// sCargo := true ;
18361: LD_ADDR_EXP 97
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if p3 = 29 then
18369: LD_VAR 0 3
18373: PUSH
18374: LD_INT 29
18376: EQUAL
18377: IFFALSE 18387
// sDLaser := true ;
18379: LD_ADDR_EXP 98
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if p3 = 30 then
18387: LD_VAR 0 3
18391: PUSH
18392: LD_INT 30
18394: EQUAL
18395: IFFALSE 18405
// sExchange := true ;
18397: LD_ADDR_EXP 99
18401: PUSH
18402: LD_INT 1
18404: ST_TO_ADDR
// if p3 = 31 then
18405: LD_VAR 0 3
18409: PUSH
18410: LD_INT 31
18412: EQUAL
18413: IFFALSE 18423
// sFac := true ;
18415: LD_ADDR_EXP 100
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// if p3 = 32 then
18423: LD_VAR 0 3
18427: PUSH
18428: LD_INT 32
18430: EQUAL
18431: IFFALSE 18441
// sPower := true ;
18433: LD_ADDR_EXP 101
18437: PUSH
18438: LD_INT 1
18440: ST_TO_ADDR
// if p3 = 33 then
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 33
18448: EQUAL
18449: IFFALSE 18459
// sRandom := true ;
18451: LD_ADDR_EXP 102
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// if p3 = 34 then
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 34
18466: EQUAL
18467: IFFALSE 18477
// sShield := true ;
18469: LD_ADDR_EXP 103
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// if p3 = 35 then
18477: LD_VAR 0 3
18481: PUSH
18482: LD_INT 35
18484: EQUAL
18485: IFFALSE 18495
// sTime := true ;
18487: LD_ADDR_EXP 104
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// if p3 = 36 then
18495: LD_VAR 0 3
18499: PUSH
18500: LD_INT 36
18502: EQUAL
18503: IFFALSE 18513
// sTools := true ;
18505: LD_ADDR_EXP 105
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// if p3 = 101 then
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 101
18520: EQUAL
18521: IFFALSE 18531
// sSold := true ;
18523: LD_ADDR_EXP 70
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// if p3 = 102 then
18531: LD_VAR 0 3
18535: PUSH
18536: LD_INT 102
18538: EQUAL
18539: IFFALSE 18549
// sDiff := true ;
18541: LD_ADDR_EXP 71
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
// if p3 = 103 then
18549: LD_VAR 0 3
18553: PUSH
18554: LD_INT 103
18556: EQUAL
18557: IFFALSE 18567
// sFog := true ;
18559: LD_ADDR_EXP 74
18563: PUSH
18564: LD_INT 1
18566: ST_TO_ADDR
// if p3 = 104 then
18567: LD_VAR 0 3
18571: PUSH
18572: LD_INT 104
18574: EQUAL
18575: IFFALSE 18585
// sReset := true ;
18577: LD_ADDR_EXP 75
18581: PUSH
18582: LD_INT 1
18584: ST_TO_ADDR
// if p3 = 105 then
18585: LD_VAR 0 3
18589: PUSH
18590: LD_INT 105
18592: EQUAL
18593: IFFALSE 18603
// sSun := true ;
18595: LD_ADDR_EXP 76
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// if p3 = 106 then
18603: LD_VAR 0 3
18607: PUSH
18608: LD_INT 106
18610: EQUAL
18611: IFFALSE 18621
// sTiger := true ;
18613: LD_ADDR_EXP 72
18617: PUSH
18618: LD_INT 1
18620: ST_TO_ADDR
// if p3 = 107 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 107
18628: EQUAL
18629: IFFALSE 18639
// sBomb := true ;
18631: LD_ADDR_EXP 73
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 108 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 108
18646: EQUAL
18647: IFFALSE 18657
// sWound := true ;
18649: LD_ADDR_EXP 81
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 109 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 109
18664: EQUAL
18665: IFFALSE 18675
// sBetray := true ;
18667: LD_ADDR_EXP 85
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 110 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 110
18682: EQUAL
18683: IFFALSE 18693
// sContamin := true ;
18685: LD_ADDR_EXP 86
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 111 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 111
18700: EQUAL
18701: IFFALSE 18711
// sOil := true ;
18703: LD_ADDR_EXP 88
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 112 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 112
18718: EQUAL
18719: IFFALSE 18729
// sStu := true ;
18721: LD_ADDR_EXP 92
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 113 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 113
18736: EQUAL
18737: IFFALSE 18747
// sBazooka := true ;
18739: LD_ADDR_EXP 95
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 114 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 114
18754: EQUAL
18755: IFFALSE 18765
// sMortar := true ;
18757: LD_ADDR_EXP 96
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 115 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 115
18772: EQUAL
18773: IFFALSE 18783
// sRanger := true ;
18775: LD_ADDR_EXP 106
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 116 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 116
18790: EQUAL
18791: IFFALSE 18801
// sComputer := true ;
18793: LD_ADDR_EXP 107
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 117 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 117
18808: EQUAL
18809: IFFALSE 18819
// s30 := true ;
18811: LD_ADDR_EXP 108
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 118 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 118
18826: EQUAL
18827: IFFALSE 18837
// s60 := true ;
18829: LD_ADDR_EXP 109
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// end ; if p2 = hack_mode then
18837: LD_VAR 0 2
18841: PUSH
18842: LD_INT 101
18844: EQUAL
18845: IFFALSE 18973
// begin case p3 of 1 :
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 1
18854: DOUBLE
18855: EQUAL
18856: IFTRUE 18860
18858: GO 18867
18860: POP
// hHackUnlimitedResources ; 2 :
18861: CALL 31120 0 0
18865: GO 18973
18867: LD_INT 2
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18882
18875: POP
// hHackSetLevel10 ; 3 :
18876: CALL 31253 0 0
18880: GO 18973
18882: LD_INT 3
18884: DOUBLE
18885: EQUAL
18886: IFTRUE 18890
18888: GO 18897
18890: POP
// hHackSetLevel10YourUnits ; 4 :
18891: CALL 31338 0 0
18895: GO 18973
18897: LD_INT 4
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18912
18905: POP
// hHackInvincible ; 5 :
18906: CALL 31786 0 0
18910: GO 18973
18912: LD_INT 5
18914: DOUBLE
18915: EQUAL
18916: IFTRUE 18920
18918: GO 18927
18920: POP
// hHackInvisible ; 6 :
18921: CALL 31897 0 0
18925: GO 18973
18927: LD_INT 6
18929: DOUBLE
18930: EQUAL
18931: IFTRUE 18935
18933: GO 18942
18935: POP
// hHackChangeYourSide ; 7 :
18936: CALL 31954 0 0
18940: GO 18973
18942: LD_INT 7
18944: DOUBLE
18945: EQUAL
18946: IFTRUE 18950
18948: GO 18957
18950: POP
// hHackChangeUnitSide ; 8 :
18951: CALL 31996 0 0
18955: GO 18973
18957: LD_INT 8
18959: DOUBLE
18960: EQUAL
18961: IFTRUE 18965
18963: GO 18972
18965: POP
// hHackFog ; end ;
18966: CALL 32097 0 0
18970: GO 18973
18972: POP
// end ; if p2 = game_save_mode then
18973: LD_VAR 0 2
18977: PUSH
18978: LD_INT 102
18980: EQUAL
18981: IFFALSE 19036
// begin if p3 = 1 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 1
18990: EQUAL
18991: IFFALSE 19003
// globalGameSaveCounter := p4 ;
18993: LD_ADDR_EXP 52
18997: PUSH
18998: LD_VAR 0 4
19002: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19003: LD_VAR 0 3
19007: PUSH
19008: LD_INT 2
19010: EQUAL
19011: PUSH
19012: LD_EXP 52
19016: AND
19017: IFFALSE 19036
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19019: LD_STRING setGameSaveCounter(
19021: PUSH
19022: LD_EXP 52
19026: STR
19027: PUSH
19028: LD_STRING )
19030: STR
19031: PPUSH
19032: CALL_OW 559
// end ; end ;
19036: LD_VAR 0 7
19040: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19041: LD_INT 0
19043: PPUSH
// streamModeActive := false ;
19044: LD_ADDR_EXP 53
19048: PUSH
19049: LD_INT 0
19051: ST_TO_ADDR
// normalCounter := 36 ;
19052: LD_ADDR_EXP 54
19056: PUSH
19057: LD_INT 36
19059: ST_TO_ADDR
// hardcoreCounter := 18 ;
19060: LD_ADDR_EXP 55
19064: PUSH
19065: LD_INT 18
19067: ST_TO_ADDR
// sRocket := false ;
19068: LD_ADDR_EXP 58
19072: PUSH
19073: LD_INT 0
19075: ST_TO_ADDR
// sSpeed := false ;
19076: LD_ADDR_EXP 57
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// sEngine := false ;
19084: LD_ADDR_EXP 59
19088: PUSH
19089: LD_INT 0
19091: ST_TO_ADDR
// sSpec := false ;
19092: LD_ADDR_EXP 56
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// sLevel := false ;
19100: LD_ADDR_EXP 60
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// sArmoury := false ;
19108: LD_ADDR_EXP 61
19112: PUSH
19113: LD_INT 0
19115: ST_TO_ADDR
// sRadar := false ;
19116: LD_ADDR_EXP 62
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// sBunker := false ;
19124: LD_ADDR_EXP 63
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// sHack := false ;
19132: LD_ADDR_EXP 64
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// sFire := false ;
19140: LD_ADDR_EXP 65
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// sRefresh := false ;
19148: LD_ADDR_EXP 66
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// sExp := false ;
19156: LD_ADDR_EXP 67
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// sDepot := false ;
19164: LD_ADDR_EXP 68
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// sFlag := false ;
19172: LD_ADDR_EXP 69
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// sKamikadze := false ;
19180: LD_ADDR_EXP 77
19184: PUSH
19185: LD_INT 0
19187: ST_TO_ADDR
// sTroll := false ;
19188: LD_ADDR_EXP 78
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// sSlow := false ;
19196: LD_ADDR_EXP 79
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
// sLack := false ;
19204: LD_ADDR_EXP 80
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// sTank := false ;
19212: LD_ADDR_EXP 82
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// sRemote := false ;
19220: LD_ADDR_EXP 83
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// sPowell := false ;
19228: LD_ADDR_EXP 84
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// sTeleport := false ;
19236: LD_ADDR_EXP 87
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// sOilTower := false ;
19244: LD_ADDR_EXP 89
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// sShovel := false ;
19252: LD_ADDR_EXP 90
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// sSheik := false ;
19260: LD_ADDR_EXP 91
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// sEarthquake := false ;
19268: LD_ADDR_EXP 93
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// sAI := false ;
19276: LD_ADDR_EXP 94
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// sCargo := false ;
19284: LD_ADDR_EXP 97
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// sDLaser := false ;
19292: LD_ADDR_EXP 98
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// sExchange := false ;
19300: LD_ADDR_EXP 99
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// sFac := false ;
19308: LD_ADDR_EXP 100
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// sPower := false ;
19316: LD_ADDR_EXP 101
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// sRandom := false ;
19324: LD_ADDR_EXP 102
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// sShield := false ;
19332: LD_ADDR_EXP 103
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// sTime := false ;
19340: LD_ADDR_EXP 104
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// sTools := false ;
19348: LD_ADDR_EXP 105
19352: PUSH
19353: LD_INT 0
19355: ST_TO_ADDR
// sSold := false ;
19356: LD_ADDR_EXP 70
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// sDiff := false ;
19364: LD_ADDR_EXP 71
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// sFog := false ;
19372: LD_ADDR_EXP 74
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// sReset := false ;
19380: LD_ADDR_EXP 75
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
// sSun := false ;
19388: LD_ADDR_EXP 76
19392: PUSH
19393: LD_INT 0
19395: ST_TO_ADDR
// sTiger := false ;
19396: LD_ADDR_EXP 72
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// sBomb := false ;
19404: LD_ADDR_EXP 73
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// sWound := false ;
19412: LD_ADDR_EXP 81
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
// sBetray := false ;
19420: LD_ADDR_EXP 85
19424: PUSH
19425: LD_INT 0
19427: ST_TO_ADDR
// sContamin := false ;
19428: LD_ADDR_EXP 86
19432: PUSH
19433: LD_INT 0
19435: ST_TO_ADDR
// sOil := false ;
19436: LD_ADDR_EXP 88
19440: PUSH
19441: LD_INT 0
19443: ST_TO_ADDR
// sStu := false ;
19444: LD_ADDR_EXP 92
19448: PUSH
19449: LD_INT 0
19451: ST_TO_ADDR
// sBazooka := false ;
19452: LD_ADDR_EXP 95
19456: PUSH
19457: LD_INT 0
19459: ST_TO_ADDR
// sMortar := false ;
19460: LD_ADDR_EXP 96
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// sRanger := false ;
19468: LD_ADDR_EXP 106
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
// sComputer := false ;
19476: LD_ADDR_EXP 107
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
// s30 := false ;
19484: LD_ADDR_EXP 108
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// s60 := false ;
19492: LD_ADDR_EXP 109
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// end ;
19500: LD_VAR 0 1
19504: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
19511: PPUSH
19512: PPUSH
19513: PPUSH
// result := [ ] ;
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: EMPTY
19520: ST_TO_ADDR
// if campaign_id = 1 then
19521: LD_OWVAR 69
19525: PUSH
19526: LD_INT 1
19528: EQUAL
19529: IFFALSE 22695
// begin case mission_number of 1 :
19531: LD_OWVAR 70
19535: PUSH
19536: LD_INT 1
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19620
19544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 4
19555: PUSH
19556: LD_INT 11
19558: PUSH
19559: LD_INT 12
19561: PUSH
19562: LD_INT 15
19564: PUSH
19565: LD_INT 16
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 26
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 101
19590: PUSH
19591: LD_INT 102
19593: PUSH
19594: LD_INT 106
19596: PUSH
19597: LD_INT 116
19599: PUSH
19600: LD_INT 117
19602: PUSH
19603: LD_INT 118
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: ST_TO_ADDR
19618: GO 22693
19620: LD_INT 2
19622: DOUBLE
19623: EQUAL
19624: IFTRUE 19628
19626: GO 19712
19628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 4
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 12
19645: PUSH
19646: LD_INT 15
19648: PUSH
19649: LD_INT 16
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_INT 23
19657: PUSH
19658: LD_INT 26
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 101
19674: PUSH
19675: LD_INT 102
19677: PUSH
19678: LD_INT 105
19680: PUSH
19681: LD_INT 106
19683: PUSH
19684: LD_INT 108
19686: PUSH
19687: LD_INT 116
19689: PUSH
19690: LD_INT 117
19692: PUSH
19693: LD_INT 118
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 22693
19712: LD_INT 3
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19808
19720: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 11
19737: PUSH
19738: LD_INT 12
19740: PUSH
19741: LD_INT 15
19743: PUSH
19744: LD_INT 16
19746: PUSH
19747: LD_INT 22
19749: PUSH
19750: LD_INT 26
19752: PUSH
19753: LD_INT 36
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 101
19770: PUSH
19771: LD_INT 102
19773: PUSH
19774: LD_INT 105
19776: PUSH
19777: LD_INT 106
19779: PUSH
19780: LD_INT 108
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: ST_TO_ADDR
19806: GO 22693
19808: LD_INT 4
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19912
19816: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 4
19827: PUSH
19828: LD_INT 5
19830: PUSH
19831: LD_INT 8
19833: PUSH
19834: LD_INT 11
19836: PUSH
19837: LD_INT 12
19839: PUSH
19840: LD_INT 15
19842: PUSH
19843: LD_INT 16
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_INT 23
19851: PUSH
19852: LD_INT 26
19854: PUSH
19855: LD_INT 36
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 105
19880: PUSH
19881: LD_INT 106
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 116
19889: PUSH
19890: LD_INT 117
19892: PUSH
19893: LD_INT 118
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: ST_TO_ADDR
19910: GO 22693
19912: LD_INT 5
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 20032
19920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 4
19931: PUSH
19932: LD_INT 5
19934: PUSH
19935: LD_INT 6
19937: PUSH
19938: LD_INT 8
19940: PUSH
19941: LD_INT 11
19943: PUSH
19944: LD_INT 12
19946: PUSH
19947: LD_INT 15
19949: PUSH
19950: LD_INT 16
19952: PUSH
19953: LD_INT 22
19955: PUSH
19956: LD_INT 23
19958: PUSH
19959: LD_INT 25
19961: PUSH
19962: LD_INT 26
19964: PUSH
19965: LD_INT 36
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 101
19986: PUSH
19987: LD_INT 102
19989: PUSH
19990: LD_INT 105
19992: PUSH
19993: LD_INT 106
19995: PUSH
19996: LD_INT 108
19998: PUSH
19999: LD_INT 109
20001: PUSH
20002: LD_INT 112
20004: PUSH
20005: LD_INT 116
20007: PUSH
20008: LD_INT 117
20010: PUSH
20011: LD_INT 118
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: ST_TO_ADDR
20030: GO 22693
20032: LD_INT 6
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20172
20040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20041: LD_ADDR_VAR 0 2
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 4
20051: PUSH
20052: LD_INT 5
20054: PUSH
20055: LD_INT 6
20057: PUSH
20058: LD_INT 8
20060: PUSH
20061: LD_INT 11
20063: PUSH
20064: LD_INT 12
20066: PUSH
20067: LD_INT 15
20069: PUSH
20070: LD_INT 16
20072: PUSH
20073: LD_INT 20
20075: PUSH
20076: LD_INT 21
20078: PUSH
20079: LD_INT 22
20081: PUSH
20082: LD_INT 23
20084: PUSH
20085: LD_INT 25
20087: PUSH
20088: LD_INT 26
20090: PUSH
20091: LD_INT 30
20093: PUSH
20094: LD_INT 31
20096: PUSH
20097: LD_INT 32
20099: PUSH
20100: LD_INT 36
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 101
20126: PUSH
20127: LD_INT 102
20129: PUSH
20130: LD_INT 105
20132: PUSH
20133: LD_INT 106
20135: PUSH
20136: LD_INT 108
20138: PUSH
20139: LD_INT 109
20141: PUSH
20142: LD_INT 112
20144: PUSH
20145: LD_INT 116
20147: PUSH
20148: LD_INT 117
20150: PUSH
20151: LD_INT 118
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: ST_TO_ADDR
20170: GO 22693
20172: LD_INT 7
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20292
20180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: LD_INT 4
20191: PUSH
20192: LD_INT 5
20194: PUSH
20195: LD_INT 7
20197: PUSH
20198: LD_INT 11
20200: PUSH
20201: LD_INT 12
20203: PUSH
20204: LD_INT 15
20206: PUSH
20207: LD_INT 16
20209: PUSH
20210: LD_INT 20
20212: PUSH
20213: LD_INT 21
20215: PUSH
20216: LD_INT 22
20218: PUSH
20219: LD_INT 23
20221: PUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 26
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 101
20246: PUSH
20247: LD_INT 102
20249: PUSH
20250: LD_INT 103
20252: PUSH
20253: LD_INT 105
20255: PUSH
20256: LD_INT 106
20258: PUSH
20259: LD_INT 108
20261: PUSH
20262: LD_INT 112
20264: PUSH
20265: LD_INT 116
20267: PUSH
20268: LD_INT 117
20270: PUSH
20271: LD_INT 118
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: ST_TO_ADDR
20290: GO 22693
20292: LD_INT 8
20294: DOUBLE
20295: EQUAL
20296: IFTRUE 20300
20298: GO 20440
20300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20301: LD_ADDR_VAR 0 2
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 4
20311: PUSH
20312: LD_INT 5
20314: PUSH
20315: LD_INT 6
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 8
20323: PUSH
20324: LD_INT 11
20326: PUSH
20327: LD_INT 12
20329: PUSH
20330: LD_INT 15
20332: PUSH
20333: LD_INT 16
20335: PUSH
20336: LD_INT 20
20338: PUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 22
20344: PUSH
20345: LD_INT 23
20347: PUSH
20348: LD_INT 25
20350: PUSH
20351: LD_INT 26
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 31
20359: PUSH
20360: LD_INT 32
20362: PUSH
20363: LD_INT 36
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 101
20390: PUSH
20391: LD_INT 102
20393: PUSH
20394: LD_INT 103
20396: PUSH
20397: LD_INT 105
20399: PUSH
20400: LD_INT 106
20402: PUSH
20403: LD_INT 108
20405: PUSH
20406: LD_INT 109
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 116
20414: PUSH
20415: LD_INT 117
20417: PUSH
20418: LD_INT 118
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: ST_TO_ADDR
20438: GO 22693
20440: LD_INT 9
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20596
20448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_INT 2
20456: PUSH
20457: LD_INT 4
20459: PUSH
20460: LD_INT 5
20462: PUSH
20463: LD_INT 6
20465: PUSH
20466: LD_INT 7
20468: PUSH
20469: LD_INT 8
20471: PUSH
20472: LD_INT 11
20474: PUSH
20475: LD_INT 12
20477: PUSH
20478: LD_INT 15
20480: PUSH
20481: LD_INT 16
20483: PUSH
20484: LD_INT 20
20486: PUSH
20487: LD_INT 21
20489: PUSH
20490: LD_INT 22
20492: PUSH
20493: LD_INT 23
20495: PUSH
20496: LD_INT 25
20498: PUSH
20499: LD_INT 26
20501: PUSH
20502: LD_INT 28
20504: PUSH
20505: LD_INT 30
20507: PUSH
20508: LD_INT 31
20510: PUSH
20511: LD_INT 32
20513: PUSH
20514: LD_INT 36
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 101
20542: PUSH
20543: LD_INT 102
20545: PUSH
20546: LD_INT 103
20548: PUSH
20549: LD_INT 105
20551: PUSH
20552: LD_INT 106
20554: PUSH
20555: LD_INT 108
20557: PUSH
20558: LD_INT 109
20560: PUSH
20561: LD_INT 112
20563: PUSH
20564: LD_INT 114
20566: PUSH
20567: LD_INT 116
20569: PUSH
20570: LD_INT 117
20572: PUSH
20573: LD_INT 118
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 22693
20596: LD_INT 10
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20800
20604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20605: LD_ADDR_VAR 0 2
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 6
20621: PUSH
20622: LD_INT 7
20624: PUSH
20625: LD_INT 8
20627: PUSH
20628: LD_INT 9
20630: PUSH
20631: LD_INT 10
20633: PUSH
20634: LD_INT 11
20636: PUSH
20637: LD_INT 12
20639: PUSH
20640: LD_INT 13
20642: PUSH
20643: LD_INT 14
20645: PUSH
20646: LD_INT 15
20648: PUSH
20649: LD_INT 16
20651: PUSH
20652: LD_INT 17
20654: PUSH
20655: LD_INT 18
20657: PUSH
20658: LD_INT 19
20660: PUSH
20661: LD_INT 20
20663: PUSH
20664: LD_INT 21
20666: PUSH
20667: LD_INT 22
20669: PUSH
20670: LD_INT 23
20672: PUSH
20673: LD_INT 24
20675: PUSH
20676: LD_INT 25
20678: PUSH
20679: LD_INT 26
20681: PUSH
20682: LD_INT 28
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 31
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 36
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 101
20730: PUSH
20731: LD_INT 102
20733: PUSH
20734: LD_INT 103
20736: PUSH
20737: LD_INT 104
20739: PUSH
20740: LD_INT 105
20742: PUSH
20743: LD_INT 106
20745: PUSH
20746: LD_INT 107
20748: PUSH
20749: LD_INT 108
20751: PUSH
20752: LD_INT 109
20754: PUSH
20755: LD_INT 110
20757: PUSH
20758: LD_INT 111
20760: PUSH
20761: LD_INT 112
20763: PUSH
20764: LD_INT 114
20766: PUSH
20767: LD_INT 116
20769: PUSH
20770: LD_INT 117
20772: PUSH
20773: LD_INT 118
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: ST_TO_ADDR
20798: GO 22693
20800: LD_INT 11
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 21012
20808: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 3
20819: PUSH
20820: LD_INT 4
20822: PUSH
20823: LD_INT 5
20825: PUSH
20826: LD_INT 6
20828: PUSH
20829: LD_INT 7
20831: PUSH
20832: LD_INT 8
20834: PUSH
20835: LD_INT 9
20837: PUSH
20838: LD_INT 10
20840: PUSH
20841: LD_INT 11
20843: PUSH
20844: LD_INT 12
20846: PUSH
20847: LD_INT 13
20849: PUSH
20850: LD_INT 14
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 17
20861: PUSH
20862: LD_INT 18
20864: PUSH
20865: LD_INT 19
20867: PUSH
20868: LD_INT 20
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_INT 23
20879: PUSH
20880: LD_INT 24
20882: PUSH
20883: LD_INT 25
20885: PUSH
20886: LD_INT 26
20888: PUSH
20889: LD_INT 28
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 31
20897: PUSH
20898: LD_INT 32
20900: PUSH
20901: LD_INT 34
20903: PUSH
20904: LD_INT 36
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 101
20942: PUSH
20943: LD_INT 102
20945: PUSH
20946: LD_INT 103
20948: PUSH
20949: LD_INT 104
20951: PUSH
20952: LD_INT 105
20954: PUSH
20955: LD_INT 106
20957: PUSH
20958: LD_INT 107
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 109
20966: PUSH
20967: LD_INT 110
20969: PUSH
20970: LD_INT 111
20972: PUSH
20973: LD_INT 112
20975: PUSH
20976: LD_INT 114
20978: PUSH
20979: LD_INT 116
20981: PUSH
20982: LD_INT 117
20984: PUSH
20985: LD_INT 118
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: ST_TO_ADDR
21010: GO 22693
21012: LD_INT 12
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21240
21020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 3
21034: PUSH
21035: LD_INT 4
21037: PUSH
21038: LD_INT 5
21040: PUSH
21041: LD_INT 6
21043: PUSH
21044: LD_INT 7
21046: PUSH
21047: LD_INT 8
21049: PUSH
21050: LD_INT 9
21052: PUSH
21053: LD_INT 10
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 13
21064: PUSH
21065: LD_INT 14
21067: PUSH
21068: LD_INT 15
21070: PUSH
21071: LD_INT 16
21073: PUSH
21074: LD_INT 17
21076: PUSH
21077: LD_INT 18
21079: PUSH
21080: LD_INT 19
21082: PUSH
21083: LD_INT 20
21085: PUSH
21086: LD_INT 21
21088: PUSH
21089: LD_INT 22
21091: PUSH
21092: LD_INT 23
21094: PUSH
21095: LD_INT 24
21097: PUSH
21098: LD_INT 25
21100: PUSH
21101: LD_INT 26
21103: PUSH
21104: LD_INT 27
21106: PUSH
21107: LD_INT 28
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: LD_INT 31
21115: PUSH
21116: LD_INT 32
21118: PUSH
21119: LD_INT 33
21121: PUSH
21122: LD_INT 34
21124: PUSH
21125: LD_INT 36
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 101
21166: PUSH
21167: LD_INT 102
21169: PUSH
21170: LD_INT 103
21172: PUSH
21173: LD_INT 104
21175: PUSH
21176: LD_INT 105
21178: PUSH
21179: LD_INT 106
21181: PUSH
21182: LD_INT 107
21184: PUSH
21185: LD_INT 108
21187: PUSH
21188: LD_INT 109
21190: PUSH
21191: LD_INT 110
21193: PUSH
21194: LD_INT 111
21196: PUSH
21197: LD_INT 112
21199: PUSH
21200: LD_INT 113
21202: PUSH
21203: LD_INT 114
21205: PUSH
21206: LD_INT 116
21208: PUSH
21209: LD_INT 117
21211: PUSH
21212: LD_INT 118
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: ST_TO_ADDR
21238: GO 22693
21240: LD_INT 13
21242: DOUBLE
21243: EQUAL
21244: IFTRUE 21248
21246: GO 21456
21248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: LD_INT 8
21271: PUSH
21272: LD_INT 9
21274: PUSH
21275: LD_INT 10
21277: PUSH
21278: LD_INT 11
21280: PUSH
21281: LD_INT 12
21283: PUSH
21284: LD_INT 14
21286: PUSH
21287: LD_INT 15
21289: PUSH
21290: LD_INT 16
21292: PUSH
21293: LD_INT 17
21295: PUSH
21296: LD_INT 18
21298: PUSH
21299: LD_INT 19
21301: PUSH
21302: LD_INT 20
21304: PUSH
21305: LD_INT 21
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 24
21316: PUSH
21317: LD_INT 25
21319: PUSH
21320: LD_INT 26
21322: PUSH
21323: LD_INT 27
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 31
21334: PUSH
21335: LD_INT 32
21337: PUSH
21338: LD_INT 33
21340: PUSH
21341: LD_INT 34
21343: PUSH
21344: LD_INT 36
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 101
21382: PUSH
21383: LD_INT 102
21385: PUSH
21386: LD_INT 103
21388: PUSH
21389: LD_INT 104
21391: PUSH
21392: LD_INT 105
21394: PUSH
21395: LD_INT 106
21397: PUSH
21398: LD_INT 107
21400: PUSH
21401: LD_INT 108
21403: PUSH
21404: LD_INT 109
21406: PUSH
21407: LD_INT 110
21409: PUSH
21410: LD_INT 111
21412: PUSH
21413: LD_INT 112
21415: PUSH
21416: LD_INT 113
21418: PUSH
21419: LD_INT 114
21421: PUSH
21422: LD_INT 116
21424: PUSH
21425: LD_INT 117
21427: PUSH
21428: LD_INT 118
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: ST_TO_ADDR
21454: GO 22693
21456: LD_INT 14
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21688
21464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21465: LD_ADDR_VAR 0 2
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: LD_INT 3
21478: PUSH
21479: LD_INT 4
21481: PUSH
21482: LD_INT 5
21484: PUSH
21485: LD_INT 6
21487: PUSH
21488: LD_INT 7
21490: PUSH
21491: LD_INT 8
21493: PUSH
21494: LD_INT 9
21496: PUSH
21497: LD_INT 10
21499: PUSH
21500: LD_INT 11
21502: PUSH
21503: LD_INT 12
21505: PUSH
21506: LD_INT 13
21508: PUSH
21509: LD_INT 14
21511: PUSH
21512: LD_INT 15
21514: PUSH
21515: LD_INT 16
21517: PUSH
21518: LD_INT 17
21520: PUSH
21521: LD_INT 18
21523: PUSH
21524: LD_INT 19
21526: PUSH
21527: LD_INT 20
21529: PUSH
21530: LD_INT 21
21532: PUSH
21533: LD_INT 22
21535: PUSH
21536: LD_INT 23
21538: PUSH
21539: LD_INT 24
21541: PUSH
21542: LD_INT 25
21544: PUSH
21545: LD_INT 26
21547: PUSH
21548: LD_INT 27
21550: PUSH
21551: LD_INT 28
21553: PUSH
21554: LD_INT 29
21556: PUSH
21557: LD_INT 30
21559: PUSH
21560: LD_INT 31
21562: PUSH
21563: LD_INT 32
21565: PUSH
21566: LD_INT 33
21568: PUSH
21569: LD_INT 34
21571: PUSH
21572: LD_INT 36
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 101
21614: PUSH
21615: LD_INT 102
21617: PUSH
21618: LD_INT 103
21620: PUSH
21621: LD_INT 104
21623: PUSH
21624: LD_INT 105
21626: PUSH
21627: LD_INT 106
21629: PUSH
21630: LD_INT 107
21632: PUSH
21633: LD_INT 108
21635: PUSH
21636: LD_INT 109
21638: PUSH
21639: LD_INT 110
21641: PUSH
21642: LD_INT 111
21644: PUSH
21645: LD_INT 112
21647: PUSH
21648: LD_INT 113
21650: PUSH
21651: LD_INT 114
21653: PUSH
21654: LD_INT 116
21656: PUSH
21657: LD_INT 117
21659: PUSH
21660: LD_INT 118
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: ST_TO_ADDR
21686: GO 22693
21688: LD_INT 15
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21920
21696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: LD_INT 3
21710: PUSH
21711: LD_INT 4
21713: PUSH
21714: LD_INT 5
21716: PUSH
21717: LD_INT 6
21719: PUSH
21720: LD_INT 7
21722: PUSH
21723: LD_INT 8
21725: PUSH
21726: LD_INT 9
21728: PUSH
21729: LD_INT 10
21731: PUSH
21732: LD_INT 11
21734: PUSH
21735: LD_INT 12
21737: PUSH
21738: LD_INT 13
21740: PUSH
21741: LD_INT 14
21743: PUSH
21744: LD_INT 15
21746: PUSH
21747: LD_INT 16
21749: PUSH
21750: LD_INT 17
21752: PUSH
21753: LD_INT 18
21755: PUSH
21756: LD_INT 19
21758: PUSH
21759: LD_INT 20
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 23
21770: PUSH
21771: LD_INT 24
21773: PUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 26
21779: PUSH
21780: LD_INT 27
21782: PUSH
21783: LD_INT 28
21785: PUSH
21786: LD_INT 29
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: LD_INT 31
21794: PUSH
21795: LD_INT 32
21797: PUSH
21798: LD_INT 33
21800: PUSH
21801: LD_INT 34
21803: PUSH
21804: LD_INT 36
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 101
21846: PUSH
21847: LD_INT 102
21849: PUSH
21850: LD_INT 103
21852: PUSH
21853: LD_INT 104
21855: PUSH
21856: LD_INT 105
21858: PUSH
21859: LD_INT 106
21861: PUSH
21862: LD_INT 107
21864: PUSH
21865: LD_INT 108
21867: PUSH
21868: LD_INT 109
21870: PUSH
21871: LD_INT 110
21873: PUSH
21874: LD_INT 111
21876: PUSH
21877: LD_INT 112
21879: PUSH
21880: LD_INT 113
21882: PUSH
21883: LD_INT 114
21885: PUSH
21886: LD_INT 116
21888: PUSH
21889: LD_INT 117
21891: PUSH
21892: LD_INT 118
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: ST_TO_ADDR
21918: GO 22693
21920: LD_INT 16
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 22064
21928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21929: LD_ADDR_VAR 0 2
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: LD_INT 4
21939: PUSH
21940: LD_INT 5
21942: PUSH
21943: LD_INT 7
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 12
21951: PUSH
21952: LD_INT 15
21954: PUSH
21955: LD_INT 16
21957: PUSH
21958: LD_INT 20
21960: PUSH
21961: LD_INT 21
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_INT 23
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 31
21981: PUSH
21982: LD_INT 32
21984: PUSH
21985: LD_INT 33
21987: PUSH
21988: LD_INT 34
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 101
22014: PUSH
22015: LD_INT 102
22017: PUSH
22018: LD_INT 103
22020: PUSH
22021: LD_INT 106
22023: PUSH
22024: LD_INT 108
22026: PUSH
22027: LD_INT 112
22029: PUSH
22030: LD_INT 113
22032: PUSH
22033: LD_INT 114
22035: PUSH
22036: LD_INT 116
22038: PUSH
22039: LD_INT 117
22041: PUSH
22042: LD_INT 118
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: ST_TO_ADDR
22062: GO 22693
22064: LD_INT 17
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22296
22072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 6
22095: PUSH
22096: LD_INT 7
22098: PUSH
22099: LD_INT 8
22101: PUSH
22102: LD_INT 9
22104: PUSH
22105: LD_INT 10
22107: PUSH
22108: LD_INT 11
22110: PUSH
22111: LD_INT 12
22113: PUSH
22114: LD_INT 13
22116: PUSH
22117: LD_INT 14
22119: PUSH
22120: LD_INT 15
22122: PUSH
22123: LD_INT 16
22125: PUSH
22126: LD_INT 17
22128: PUSH
22129: LD_INT 18
22131: PUSH
22132: LD_INT 19
22134: PUSH
22135: LD_INT 20
22137: PUSH
22138: LD_INT 21
22140: PUSH
22141: LD_INT 22
22143: PUSH
22144: LD_INT 23
22146: PUSH
22147: LD_INT 24
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 26
22155: PUSH
22156: LD_INT 27
22158: PUSH
22159: LD_INT 28
22161: PUSH
22162: LD_INT 29
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 31
22170: PUSH
22171: LD_INT 32
22173: PUSH
22174: LD_INT 33
22176: PUSH
22177: LD_INT 34
22179: PUSH
22180: LD_INT 36
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 101
22222: PUSH
22223: LD_INT 102
22225: PUSH
22226: LD_INT 103
22228: PUSH
22229: LD_INT 104
22231: PUSH
22232: LD_INT 105
22234: PUSH
22235: LD_INT 106
22237: PUSH
22238: LD_INT 107
22240: PUSH
22241: LD_INT 108
22243: PUSH
22244: LD_INT 109
22246: PUSH
22247: LD_INT 110
22249: PUSH
22250: LD_INT 111
22252: PUSH
22253: LD_INT 112
22255: PUSH
22256: LD_INT 113
22258: PUSH
22259: LD_INT 114
22261: PUSH
22262: LD_INT 116
22264: PUSH
22265: LD_INT 117
22267: PUSH
22268: LD_INT 118
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: ST_TO_ADDR
22294: GO 22693
22296: LD_INT 18
22298: DOUBLE
22299: EQUAL
22300: IFTRUE 22304
22302: GO 22452
22304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22305: LD_ADDR_VAR 0 2
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 4
22315: PUSH
22316: LD_INT 5
22318: PUSH
22319: LD_INT 7
22321: PUSH
22322: LD_INT 11
22324: PUSH
22325: LD_INT 12
22327: PUSH
22328: LD_INT 15
22330: PUSH
22331: LD_INT 16
22333: PUSH
22334: LD_INT 20
22336: PUSH
22337: LD_INT 21
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 23
22345: PUSH
22346: LD_INT 25
22348: PUSH
22349: LD_INT 26
22351: PUSH
22352: LD_INT 30
22354: PUSH
22355: LD_INT 31
22357: PUSH
22358: LD_INT 32
22360: PUSH
22361: LD_INT 33
22363: PUSH
22364: LD_INT 34
22366: PUSH
22367: LD_INT 35
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 101
22398: PUSH
22399: LD_INT 102
22401: PUSH
22402: LD_INT 103
22404: PUSH
22405: LD_INT 106
22407: PUSH
22408: LD_INT 108
22410: PUSH
22411: LD_INT 112
22413: PUSH
22414: LD_INT 113
22416: PUSH
22417: LD_INT 114
22419: PUSH
22420: LD_INT 115
22422: PUSH
22423: LD_INT 116
22425: PUSH
22426: LD_INT 117
22428: PUSH
22429: LD_INT 118
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: ST_TO_ADDR
22450: GO 22693
22452: LD_INT 19
22454: DOUBLE
22455: EQUAL
22456: IFTRUE 22460
22458: GO 22692
22460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 3
22474: PUSH
22475: LD_INT 4
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 9
22492: PUSH
22493: LD_INT 10
22495: PUSH
22496: LD_INT 11
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: LD_INT 13
22504: PUSH
22505: LD_INT 14
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 17
22516: PUSH
22517: LD_INT 18
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 24
22537: PUSH
22538: LD_INT 25
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: LD_INT 27
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 29
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 31
22558: PUSH
22559: LD_INT 32
22561: PUSH
22562: LD_INT 33
22564: PUSH
22565: LD_INT 34
22567: PUSH
22568: LD_INT 35
22570: PUSH
22571: LD_INT 36
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 101
22614: PUSH
22615: LD_INT 102
22617: PUSH
22618: LD_INT 103
22620: PUSH
22621: LD_INT 104
22623: PUSH
22624: LD_INT 105
22626: PUSH
22627: LD_INT 106
22629: PUSH
22630: LD_INT 107
22632: PUSH
22633: LD_INT 108
22635: PUSH
22636: LD_INT 109
22638: PUSH
22639: LD_INT 110
22641: PUSH
22642: LD_INT 111
22644: PUSH
22645: LD_INT 112
22647: PUSH
22648: LD_INT 113
22650: PUSH
22651: LD_INT 114
22653: PUSH
22654: LD_INT 115
22656: PUSH
22657: LD_INT 116
22659: PUSH
22660: LD_INT 117
22662: PUSH
22663: LD_INT 118
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 22693
22692: POP
// end else
22693: GO 22924
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 6
22717: PUSH
22718: LD_INT 7
22720: PUSH
22721: LD_INT 8
22723: PUSH
22724: LD_INT 9
22726: PUSH
22727: LD_INT 10
22729: PUSH
22730: LD_INT 11
22732: PUSH
22733: LD_INT 12
22735: PUSH
22736: LD_INT 13
22738: PUSH
22739: LD_INT 14
22741: PUSH
22742: LD_INT 15
22744: PUSH
22745: LD_INT 16
22747: PUSH
22748: LD_INT 17
22750: PUSH
22751: LD_INT 18
22753: PUSH
22754: LD_INT 19
22756: PUSH
22757: LD_INT 20
22759: PUSH
22760: LD_INT 21
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_INT 23
22768: PUSH
22769: LD_INT 24
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 26
22777: PUSH
22778: LD_INT 27
22780: PUSH
22781: LD_INT 28
22783: PUSH
22784: LD_INT 29
22786: PUSH
22787: LD_INT 30
22789: PUSH
22790: LD_INT 31
22792: PUSH
22793: LD_INT 32
22795: PUSH
22796: LD_INT 33
22798: PUSH
22799: LD_INT 34
22801: PUSH
22802: LD_INT 35
22804: PUSH
22805: LD_INT 36
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 101
22848: PUSH
22849: LD_INT 102
22851: PUSH
22852: LD_INT 103
22854: PUSH
22855: LD_INT 104
22857: PUSH
22858: LD_INT 105
22860: PUSH
22861: LD_INT 106
22863: PUSH
22864: LD_INT 107
22866: PUSH
22867: LD_INT 108
22869: PUSH
22870: LD_INT 109
22872: PUSH
22873: LD_INT 110
22875: PUSH
22876: LD_INT 111
22878: PUSH
22879: LD_INT 112
22881: PUSH
22882: LD_INT 113
22884: PUSH
22885: LD_INT 114
22887: PUSH
22888: LD_INT 115
22890: PUSH
22891: LD_INT 116
22893: PUSH
22894: LD_INT 117
22896: PUSH
22897: LD_INT 118
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: ST_TO_ADDR
// if result then
22924: LD_VAR 0 2
22928: IFFALSE 23714
// begin normal :=  ;
22930: LD_ADDR_VAR 0 5
22934: PUSH
22935: LD_STRING 
22937: ST_TO_ADDR
// hardcore :=  ;
22938: LD_ADDR_VAR 0 6
22942: PUSH
22943: LD_STRING 
22945: ST_TO_ADDR
// active :=  ;
22946: LD_ADDR_VAR 0 7
22950: PUSH
22951: LD_STRING 
22953: ST_TO_ADDR
// for i = 1 to normalCounter do
22954: LD_ADDR_VAR 0 8
22958: PUSH
22959: DOUBLE
22960: LD_INT 1
22962: DEC
22963: ST_TO_ADDR
22964: LD_EXP 54
22968: PUSH
22969: FOR_TO
22970: IFFALSE 23071
// begin tmp := 0 ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_STRING 0
22979: ST_TO_ADDR
// if result [ 1 ] then
22980: LD_VAR 0 2
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: IFFALSE 23053
// if result [ 1 ] [ 1 ] = i then
22990: LD_VAR 0 2
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PUSH
23003: LD_VAR 0 8
23007: EQUAL
23008: IFFALSE 23053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_VAR 0 2
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: LD_INT 1
23034: PPUSH
23035: CALL_OW 3
23039: PPUSH
23040: CALL_OW 1
23044: ST_TO_ADDR
// tmp := 1 ;
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_STRING 1
23052: ST_TO_ADDR
// end ; normal := normal & tmp ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_VAR 0 5
23062: PUSH
23063: LD_VAR 0 3
23067: STR
23068: ST_TO_ADDR
// end ;
23069: GO 22969
23071: POP
23072: POP
// for i = 1 to hardcoreCounter do
23073: LD_ADDR_VAR 0 8
23077: PUSH
23078: DOUBLE
23079: LD_INT 1
23081: DEC
23082: ST_TO_ADDR
23083: LD_EXP 55
23087: PUSH
23088: FOR_TO
23089: IFFALSE 23194
// begin tmp := 0 ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_STRING 0
23098: ST_TO_ADDR
// if result [ 2 ] then
23099: LD_VAR 0 2
23103: PUSH
23104: LD_INT 2
23106: ARRAY
23107: IFFALSE 23176
// if result [ 2 ] [ 1 ] = 100 + i then
23109: LD_VAR 0 2
23113: PUSH
23114: LD_INT 2
23116: ARRAY
23117: PUSH
23118: LD_INT 1
23120: ARRAY
23121: PUSH
23122: LD_INT 100
23124: PUSH
23125: LD_VAR 0 8
23129: PLUS
23130: EQUAL
23131: IFFALSE 23176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: LD_INT 2
23145: PPUSH
23146: LD_VAR 0 2
23150: PUSH
23151: LD_INT 2
23153: ARRAY
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 3
23162: PPUSH
23163: CALL_OW 1
23167: ST_TO_ADDR
// tmp := 1 ;
23168: LD_ADDR_VAR 0 3
23172: PUSH
23173: LD_STRING 1
23175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23176: LD_ADDR_VAR 0 6
23180: PUSH
23181: LD_VAR 0 6
23185: PUSH
23186: LD_VAR 0 3
23190: STR
23191: ST_TO_ADDR
// end ;
23192: GO 23088
23194: POP
23195: POP
// if isGameLoad then
23196: LD_VAR 0 1
23200: IFFALSE 23675
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23202: LD_ADDR_VAR 0 4
23206: PUSH
23207: LD_EXP 58
23211: PUSH
23212: LD_EXP 57
23216: PUSH
23217: LD_EXP 59
23221: PUSH
23222: LD_EXP 56
23226: PUSH
23227: LD_EXP 60
23231: PUSH
23232: LD_EXP 61
23236: PUSH
23237: LD_EXP 62
23241: PUSH
23242: LD_EXP 63
23246: PUSH
23247: LD_EXP 64
23251: PUSH
23252: LD_EXP 65
23256: PUSH
23257: LD_EXP 66
23261: PUSH
23262: LD_EXP 67
23266: PUSH
23267: LD_EXP 68
23271: PUSH
23272: LD_EXP 69
23276: PUSH
23277: LD_EXP 77
23281: PUSH
23282: LD_EXP 78
23286: PUSH
23287: LD_EXP 79
23291: PUSH
23292: LD_EXP 80
23296: PUSH
23297: LD_EXP 82
23301: PUSH
23302: LD_EXP 83
23306: PUSH
23307: LD_EXP 84
23311: PUSH
23312: LD_EXP 87
23316: PUSH
23317: LD_EXP 89
23321: PUSH
23322: LD_EXP 90
23326: PUSH
23327: LD_EXP 91
23331: PUSH
23332: LD_EXP 93
23336: PUSH
23337: LD_EXP 94
23341: PUSH
23342: LD_EXP 97
23346: PUSH
23347: LD_EXP 98
23351: PUSH
23352: LD_EXP 99
23356: PUSH
23357: LD_EXP 100
23361: PUSH
23362: LD_EXP 101
23366: PUSH
23367: LD_EXP 102
23371: PUSH
23372: LD_EXP 103
23376: PUSH
23377: LD_EXP 104
23381: PUSH
23382: LD_EXP 105
23386: PUSH
23387: LD_EXP 70
23391: PUSH
23392: LD_EXP 71
23396: PUSH
23397: LD_EXP 74
23401: PUSH
23402: LD_EXP 75
23406: PUSH
23407: LD_EXP 76
23411: PUSH
23412: LD_EXP 72
23416: PUSH
23417: LD_EXP 73
23421: PUSH
23422: LD_EXP 81
23426: PUSH
23427: LD_EXP 85
23431: PUSH
23432: LD_EXP 86
23436: PUSH
23437: LD_EXP 88
23441: PUSH
23442: LD_EXP 92
23446: PUSH
23447: LD_EXP 95
23451: PUSH
23452: LD_EXP 96
23456: PUSH
23457: LD_EXP 106
23461: PUSH
23462: LD_EXP 107
23466: PUSH
23467: LD_EXP 108
23471: PUSH
23472: LD_EXP 109
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: ST_TO_ADDR
// tmp :=  ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_STRING 
23540: ST_TO_ADDR
// for i = 1 to normalCounter do
23541: LD_ADDR_VAR 0 8
23545: PUSH
23546: DOUBLE
23547: LD_INT 1
23549: DEC
23550: ST_TO_ADDR
23551: LD_EXP 54
23555: PUSH
23556: FOR_TO
23557: IFFALSE 23593
// begin if flags [ i ] then
23559: LD_VAR 0 4
23563: PUSH
23564: LD_VAR 0 8
23568: ARRAY
23569: IFFALSE 23591
// tmp := tmp & i & ; ;
23571: LD_ADDR_VAR 0 3
23575: PUSH
23576: LD_VAR 0 3
23580: PUSH
23581: LD_VAR 0 8
23585: STR
23586: PUSH
23587: LD_STRING ;
23589: STR
23590: ST_TO_ADDR
// end ;
23591: GO 23556
23593: POP
23594: POP
// for i = 1 to hardcoreCounter do
23595: LD_ADDR_VAR 0 8
23599: PUSH
23600: DOUBLE
23601: LD_INT 1
23603: DEC
23604: ST_TO_ADDR
23605: LD_EXP 55
23609: PUSH
23610: FOR_TO
23611: IFFALSE 23657
// begin if flags [ normalCounter + i ] then
23613: LD_VAR 0 4
23617: PUSH
23618: LD_EXP 54
23622: PUSH
23623: LD_VAR 0 8
23627: PLUS
23628: ARRAY
23629: IFFALSE 23655
// tmp := tmp & ( 100 + i ) & ; ;
23631: LD_ADDR_VAR 0 3
23635: PUSH
23636: LD_VAR 0 3
23640: PUSH
23641: LD_INT 100
23643: PUSH
23644: LD_VAR 0 8
23648: PLUS
23649: STR
23650: PUSH
23651: LD_STRING ;
23653: STR
23654: ST_TO_ADDR
// end ;
23655: GO 23610
23657: POP
23658: POP
// if tmp then
23659: LD_VAR 0 3
23663: IFFALSE 23675
// active := tmp ;
23665: LD_ADDR_VAR 0 7
23669: PUSH
23670: LD_VAR 0 3
23674: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23675: LD_STRING getStreamItemsFromMission("
23677: PUSH
23678: LD_VAR 0 5
23682: STR
23683: PUSH
23684: LD_STRING ","
23686: STR
23687: PUSH
23688: LD_VAR 0 6
23692: STR
23693: PUSH
23694: LD_STRING ","
23696: STR
23697: PUSH
23698: LD_VAR 0 7
23702: STR
23703: PUSH
23704: LD_STRING ")
23706: STR
23707: PPUSH
23708: CALL_OW 559
// end else
23712: GO 23721
// ToLua ( getStreamItemsFromMission("","","") ) ;
23714: LD_STRING getStreamItemsFromMission("","","")
23716: PPUSH
23717: CALL_OW 559
// end ;
23721: LD_VAR 0 2
23725: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23726: LD_EXP 53
23730: PUSH
23731: LD_EXP 58
23735: AND
23736: IFFALSE 23860
23738: GO 23740
23740: DISABLE
23741: LD_INT 0
23743: PPUSH
23744: PPUSH
// begin enable ;
23745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23746: LD_ADDR_VAR 0 2
23750: PUSH
23751: LD_INT 22
23753: PUSH
23754: LD_OWVAR 2
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 34
23768: PUSH
23769: LD_INT 7
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 34
23778: PUSH
23779: LD_INT 45
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 34
23788: PUSH
23789: LD_INT 28
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 34
23798: PUSH
23799: LD_INT 47
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: ST_TO_ADDR
// if not tmp then
23822: LD_VAR 0 2
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23860
// for i in tmp do
23831: LD_ADDR_VAR 0 1
23835: PUSH
23836: LD_VAR 0 2
23840: PUSH
23841: FOR_IN
23842: IFFALSE 23858
// begin SetLives ( i , 0 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 0
23851: PPUSH
23852: CALL_OW 234
// end ;
23856: GO 23841
23858: POP
23859: POP
// end ;
23860: PPOPN 2
23862: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23863: LD_EXP 53
23867: PUSH
23868: LD_EXP 59
23872: AND
23873: IFFALSE 23957
23875: GO 23877
23877: DISABLE
23878: LD_INT 0
23880: PPUSH
23881: PPUSH
// begin enable ;
23882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23883: LD_ADDR_VAR 0 2
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_OWVAR 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: ST_TO_ADDR
// if not tmp then
23919: LD_VAR 0 2
23923: NOT
23924: IFFALSE 23928
// exit ;
23926: GO 23957
// for i in tmp do
23928: LD_ADDR_VAR 0 1
23932: PUSH
23933: LD_VAR 0 2
23937: PUSH
23938: FOR_IN
23939: IFFALSE 23955
// begin SetLives ( i , 0 ) ;
23941: LD_VAR 0 1
23945: PPUSH
23946: LD_INT 0
23948: PPUSH
23949: CALL_OW 234
// end ;
23953: GO 23938
23955: POP
23956: POP
// end ;
23957: PPOPN 2
23959: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23960: LD_EXP 53
23964: PUSH
23965: LD_EXP 56
23969: AND
23970: IFFALSE 24063
23972: GO 23974
23974: DISABLE
23975: LD_INT 0
23977: PPUSH
// begin enable ;
23978: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23979: LD_ADDR_VAR 0 1
23983: PUSH
23984: LD_INT 22
23986: PUSH
23987: LD_OWVAR 2
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 25
24001: PUSH
24002: LD_INT 5
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 25
24011: PUSH
24012: LD_INT 9
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 25
24021: PUSH
24022: LD_INT 8
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 69
24043: PUSH
24044: FOR_IN
24045: IFFALSE 24061
// begin SetClass ( i , 1 ) ;
24047: LD_VAR 0 1
24051: PPUSH
24052: LD_INT 1
24054: PPUSH
24055: CALL_OW 336
// end ;
24059: GO 24044
24061: POP
24062: POP
// end ;
24063: PPOPN 1
24065: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24066: LD_EXP 53
24070: PUSH
24071: LD_EXP 57
24075: AND
24076: PUSH
24077: LD_OWVAR 65
24081: PUSH
24082: LD_INT 7
24084: LESS
24085: AND
24086: IFFALSE 24100
24088: GO 24090
24090: DISABLE
// begin enable ;
24091: ENABLE
// game_speed := 7 ;
24092: LD_ADDR_OWVAR 65
24096: PUSH
24097: LD_INT 7
24099: ST_TO_ADDR
// end ;
24100: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24101: LD_EXP 53
24105: PUSH
24106: LD_EXP 60
24110: AND
24111: IFFALSE 24313
24113: GO 24115
24115: DISABLE
24116: LD_INT 0
24118: PPUSH
24119: PPUSH
24120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 81
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 21
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 3
24161: NOT
24162: IFFALSE 24166
// exit ;
24164: GO 24313
// if tmp > 5 then
24166: LD_VAR 0 3
24170: PUSH
24171: LD_INT 5
24173: GREATER
24174: IFFALSE 24186
// k := 5 else
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_INT 5
24183: ST_TO_ADDR
24184: GO 24196
// k := tmp ;
24186: LD_ADDR_VAR 0 2
24190: PUSH
24191: LD_VAR 0 3
24195: ST_TO_ADDR
// for i := 1 to k do
24196: LD_ADDR_VAR 0 1
24200: PUSH
24201: DOUBLE
24202: LD_INT 1
24204: DEC
24205: ST_TO_ADDR
24206: LD_VAR 0 2
24210: PUSH
24211: FOR_TO
24212: IFFALSE 24311
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 1
24223: ARRAY
24224: PPUSH
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 4
24232: MOD
24233: PUSH
24234: LD_INT 1
24236: PLUS
24237: PPUSH
24238: CALL_OW 259
24242: PUSH
24243: LD_INT 10
24245: LESS
24246: IFFALSE 24309
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24248: LD_VAR 0 3
24252: PUSH
24253: LD_VAR 0 1
24257: ARRAY
24258: PPUSH
24259: LD_VAR 0 1
24263: PUSH
24264: LD_INT 4
24266: MOD
24267: PUSH
24268: LD_INT 1
24270: PLUS
24271: PPUSH
24272: LD_VAR 0 3
24276: PUSH
24277: LD_VAR 0 1
24281: ARRAY
24282: PPUSH
24283: LD_VAR 0 1
24287: PUSH
24288: LD_INT 4
24290: MOD
24291: PUSH
24292: LD_INT 1
24294: PLUS
24295: PPUSH
24296: CALL_OW 259
24300: PUSH
24301: LD_INT 1
24303: PLUS
24304: PPUSH
24305: CALL_OW 237
24309: GO 24211
24311: POP
24312: POP
// end ;
24313: PPOPN 3
24315: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24316: LD_EXP 53
24320: PUSH
24321: LD_EXP 61
24325: AND
24326: IFFALSE 24346
24328: GO 24330
24330: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24331: LD_INT 4
24333: PPUSH
24334: LD_OWVAR 2
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: CALL_OW 324
24346: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24347: LD_EXP 53
24351: PUSH
24352: LD_EXP 90
24356: AND
24357: IFFALSE 24377
24359: GO 24361
24361: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24362: LD_INT 19
24364: PPUSH
24365: LD_OWVAR 2
24369: PPUSH
24370: LD_INT 0
24372: PPUSH
24373: CALL_OW 324
24377: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24378: LD_EXP 53
24382: PUSH
24383: LD_EXP 62
24387: AND
24388: IFFALSE 24490
24390: GO 24392
24392: DISABLE
24393: LD_INT 0
24395: PPUSH
24396: PPUSH
// begin enable ;
24397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24398: LD_ADDR_VAR 0 2
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_OWVAR 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 34
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 34
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PPUSH
24447: CALL_OW 69
24451: ST_TO_ADDR
// if not tmp then
24452: LD_VAR 0 2
24456: NOT
24457: IFFALSE 24461
// exit ;
24459: GO 24490
// for i in tmp do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_VAR 0 2
24470: PUSH
24471: FOR_IN
24472: IFFALSE 24488
// begin SetLives ( i , 0 ) ;
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_INT 0
24481: PPUSH
24482: CALL_OW 234
// end ;
24486: GO 24471
24488: POP
24489: POP
// end ;
24490: PPOPN 2
24492: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24493: LD_EXP 53
24497: PUSH
24498: LD_EXP 63
24502: AND
24503: IFFALSE 24523
24505: GO 24507
24507: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24508: LD_INT 32
24510: PPUSH
24511: LD_OWVAR 2
24515: PPUSH
24516: LD_INT 0
24518: PPUSH
24519: CALL_OW 324
24523: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24524: LD_EXP 53
24528: PUSH
24529: LD_EXP 64
24533: AND
24534: IFFALSE 24715
24536: GO 24538
24538: DISABLE
24539: LD_INT 0
24541: PPUSH
24542: PPUSH
24543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 22
24551: PUSH
24552: LD_OWVAR 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 33
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 69
24579: ST_TO_ADDR
// if not tmp then
24580: LD_VAR 0 2
24584: NOT
24585: IFFALSE 24589
// exit ;
24587: GO 24715
// side := 0 ;
24589: LD_ADDR_VAR 0 3
24593: PUSH
24594: LD_INT 0
24596: ST_TO_ADDR
// for i := 1 to 8 do
24597: LD_ADDR_VAR 0 1
24601: PUSH
24602: DOUBLE
24603: LD_INT 1
24605: DEC
24606: ST_TO_ADDR
24607: LD_INT 8
24609: PUSH
24610: FOR_TO
24611: IFFALSE 24659
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24613: LD_OWVAR 2
24617: PUSH
24618: LD_VAR 0 1
24622: NONEQUAL
24623: PUSH
24624: LD_OWVAR 2
24628: PPUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 81
24638: PUSH
24639: LD_INT 2
24641: EQUAL
24642: AND
24643: IFFALSE 24657
// begin side := i ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_VAR 0 1
24654: ST_TO_ADDR
// break ;
24655: GO 24659
// end ;
24657: GO 24610
24659: POP
24660: POP
// if not side then
24661: LD_VAR 0 3
24665: NOT
24666: IFFALSE 24670
// exit ;
24668: GO 24715
// for i := 1 to tmp do
24670: LD_ADDR_VAR 0 1
24674: PUSH
24675: DOUBLE
24676: LD_INT 1
24678: DEC
24679: ST_TO_ADDR
24680: LD_VAR 0 2
24684: PUSH
24685: FOR_TO
24686: IFFALSE 24713
// if Prob ( 60 ) then
24688: LD_INT 60
24690: PPUSH
24691: CALL_OW 13
24695: IFFALSE 24711
// SetSide ( i , side ) ;
24697: LD_VAR 0 1
24701: PPUSH
24702: LD_VAR 0 3
24706: PPUSH
24707: CALL_OW 235
24711: GO 24685
24713: POP
24714: POP
// end ;
24715: PPOPN 3
24717: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24718: LD_EXP 53
24722: PUSH
24723: LD_EXP 66
24727: AND
24728: IFFALSE 24847
24730: GO 24732
24732: DISABLE
24733: LD_INT 0
24735: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24736: LD_ADDR_VAR 0 1
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_OWVAR 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 21
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: LD_INT 23
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: PUSH
24790: FOR_IN
24791: IFFALSE 24845
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 257
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 2
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: LD_INT 4
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: IN
24821: IFFALSE 24843
// SetClass ( un , rand ( 1 , 4 ) ) ;
24823: LD_VAR 0 1
24827: PPUSH
24828: LD_INT 1
24830: PPUSH
24831: LD_INT 4
24833: PPUSH
24834: CALL_OW 12
24838: PPUSH
24839: CALL_OW 336
24843: GO 24790
24845: POP
24846: POP
// end ;
24847: PPOPN 1
24849: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24850: LD_EXP 53
24854: PUSH
24855: LD_EXP 65
24859: AND
24860: IFFALSE 24939
24862: GO 24864
24864: DISABLE
24865: LD_INT 0
24867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_OWVAR 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 21
24887: PUSH
24888: LD_INT 3
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: ST_TO_ADDR
// if not tmp then
24904: LD_VAR 0 1
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 24939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24913: LD_VAR 0 1
24917: PUSH
24918: LD_INT 1
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL_OW 12
24930: ARRAY
24931: PPUSH
24932: LD_INT 100
24934: PPUSH
24935: CALL_OW 234
// end ;
24939: PPOPN 1
24941: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24942: LD_EXP 53
24946: PUSH
24947: LD_EXP 67
24951: AND
24952: IFFALSE 25050
24954: GO 24956
24956: DISABLE
24957: LD_INT 0
24959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24960: LD_ADDR_VAR 0 1
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 21
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 1
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25050
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25005: LD_VAR 0 1
25009: PUSH
25010: LD_INT 1
25012: PPUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 12
25022: ARRAY
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_INT 4
25029: PPUSH
25030: CALL_OW 12
25034: PPUSH
25035: LD_INT 3000
25037: PPUSH
25038: LD_INT 9000
25040: PPUSH
25041: CALL_OW 12
25045: PPUSH
25046: CALL_OW 492
// end ;
25050: PPOPN 1
25052: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25053: LD_EXP 53
25057: PUSH
25058: LD_EXP 68
25062: AND
25063: IFFALSE 25083
25065: GO 25067
25067: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25068: LD_INT 1
25070: PPUSH
25071: LD_OWVAR 2
25075: PPUSH
25076: LD_INT 0
25078: PPUSH
25079: CALL_OW 324
25083: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25084: LD_EXP 53
25088: PUSH
25089: LD_EXP 69
25093: AND
25094: IFFALSE 25177
25096: GO 25098
25098: DISABLE
25099: LD_INT 0
25101: PPUSH
25102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25103: LD_ADDR_VAR 0 2
25107: PUSH
25108: LD_INT 22
25110: PUSH
25111: LD_OWVAR 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 21
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PPUSH
25134: CALL_OW 69
25138: ST_TO_ADDR
// if not tmp then
25139: LD_VAR 0 2
25143: NOT
25144: IFFALSE 25148
// exit ;
25146: GO 25177
// for i in tmp do
25148: LD_ADDR_VAR 0 1
25152: PUSH
25153: LD_VAR 0 2
25157: PUSH
25158: FOR_IN
25159: IFFALSE 25175
// SetBLevel ( i , 10 ) ;
25161: LD_VAR 0 1
25165: PPUSH
25166: LD_INT 10
25168: PPUSH
25169: CALL_OW 241
25173: GO 25158
25175: POP
25176: POP
// end ;
25177: PPOPN 2
25179: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25180: LD_EXP 53
25184: PUSH
25185: LD_EXP 70
25189: AND
25190: IFFALSE 25301
25192: GO 25194
25194: DISABLE
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
25199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_OWVAR 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 25
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 3
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25301
// un := tmp [ rand ( 1 , tmp ) ] ;
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_VAR 0 3
25254: PUSH
25255: LD_INT 1
25257: PPUSH
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 12
25267: ARRAY
25268: ST_TO_ADDR
// if Crawls ( un ) then
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 318
25278: IFFALSE 25289
// ComWalk ( un ) ;
25280: LD_VAR 0 2
25284: PPUSH
25285: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 5
25296: PPUSH
25297: CALL_OW 336
// end ;
25301: PPOPN 3
25303: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25304: LD_EXP 53
25308: PUSH
25309: LD_EXP 71
25313: AND
25314: PUSH
25315: LD_OWVAR 67
25319: PUSH
25320: LD_INT 4
25322: LESS
25323: AND
25324: IFFALSE 25343
25326: GO 25328
25328: DISABLE
// begin Difficulty := Difficulty + 1 ;
25329: LD_ADDR_OWVAR 67
25333: PUSH
25334: LD_OWVAR 67
25338: PUSH
25339: LD_INT 1
25341: PLUS
25342: ST_TO_ADDR
// end ;
25343: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25344: LD_EXP 53
25348: PUSH
25349: LD_EXP 72
25353: AND
25354: IFFALSE 25457
25356: GO 25358
25358: DISABLE
25359: LD_INT 0
25361: PPUSH
// begin for i := 1 to 5 do
25362: LD_ADDR_VAR 0 1
25366: PUSH
25367: DOUBLE
25368: LD_INT 1
25370: DEC
25371: ST_TO_ADDR
25372: LD_INT 5
25374: PUSH
25375: FOR_TO
25376: IFFALSE 25455
// begin uc_nation := nation_nature ;
25378: LD_ADDR_OWVAR 21
25382: PUSH
25383: LD_INT 0
25385: ST_TO_ADDR
// uc_side := 0 ;
25386: LD_ADDR_OWVAR 20
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25394: LD_ADDR_OWVAR 29
25398: PUSH
25399: LD_INT 12
25401: PUSH
25402: LD_INT 12
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: ST_TO_ADDR
// hc_agressivity := 20 ;
25409: LD_ADDR_OWVAR 35
25413: PUSH
25414: LD_INT 20
25416: ST_TO_ADDR
// hc_class := class_tiger ;
25417: LD_ADDR_OWVAR 28
25421: PUSH
25422: LD_INT 14
25424: ST_TO_ADDR
// hc_gallery :=  ;
25425: LD_ADDR_OWVAR 33
25429: PUSH
25430: LD_STRING 
25432: ST_TO_ADDR
// hc_name :=  ;
25433: LD_ADDR_OWVAR 26
25437: PUSH
25438: LD_STRING 
25440: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25441: CALL_OW 44
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 51
// end ;
25453: GO 25375
25455: POP
25456: POP
// end ;
25457: PPOPN 1
25459: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25460: LD_EXP 53
25464: PUSH
25465: LD_EXP 73
25469: AND
25470: IFFALSE 25479
25472: GO 25474
25474: DISABLE
// StreamSibBomb ;
25475: CALL 25480 0 0
25479: END
// export function StreamSibBomb ; var i , x , y ; begin
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// result := false ;
25486: LD_ADDR_VAR 0 1
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
// for i := 1 to 16 do
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: DOUBLE
25500: LD_INT 1
25502: DEC
25503: ST_TO_ADDR
25504: LD_INT 16
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25707
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25510: LD_ADDR_VAR 0 3
25514: PUSH
25515: LD_INT 10
25517: PUSH
25518: LD_INT 20
25520: PUSH
25521: LD_INT 30
25523: PUSH
25524: LD_INT 40
25526: PUSH
25527: LD_INT 50
25529: PUSH
25530: LD_INT 60
25532: PUSH
25533: LD_INT 70
25535: PUSH
25536: LD_INT 80
25538: PUSH
25539: LD_INT 90
25541: PUSH
25542: LD_INT 100
25544: PUSH
25545: LD_INT 110
25547: PUSH
25548: LD_INT 120
25550: PUSH
25551: LD_INT 130
25553: PUSH
25554: LD_INT 140
25556: PUSH
25557: LD_INT 150
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PPUSH
25580: LD_INT 15
25582: PPUSH
25583: CALL_OW 12
25587: ARRAY
25588: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25589: LD_ADDR_VAR 0 4
25593: PUSH
25594: LD_INT 10
25596: PUSH
25597: LD_INT 20
25599: PUSH
25600: LD_INT 30
25602: PUSH
25603: LD_INT 40
25605: PUSH
25606: LD_INT 50
25608: PUSH
25609: LD_INT 60
25611: PUSH
25612: LD_INT 70
25614: PUSH
25615: LD_INT 80
25617: PUSH
25618: LD_INT 90
25620: PUSH
25621: LD_INT 100
25623: PUSH
25624: LD_INT 110
25626: PUSH
25627: LD_INT 120
25629: PUSH
25630: LD_INT 130
25632: PUSH
25633: LD_INT 140
25635: PUSH
25636: LD_INT 150
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PPUSH
25659: LD_INT 15
25661: PPUSH
25662: CALL_OW 12
25666: ARRAY
25667: ST_TO_ADDR
// if ValidHex ( x , y ) then
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: CALL_OW 488
25682: IFFALSE 25705
// begin result := [ x , y ] ;
25684: LD_ADDR_VAR 0 1
25688: PUSH
25689: LD_VAR 0 3
25693: PUSH
25694: LD_VAR 0 4
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: ST_TO_ADDR
// break ;
25703: GO 25707
// end ; end ;
25705: GO 25507
25707: POP
25708: POP
// if result then
25709: LD_VAR 0 1
25713: IFFALSE 25773
// begin ToLua ( playSibBomb() ) ;
25715: LD_STRING playSibBomb()
25717: PPUSH
25718: CALL_OW 559
// wait ( 0 0$14 ) ;
25722: LD_INT 490
25724: PPUSH
25725: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25729: LD_VAR 0 1
25733: PUSH
25734: LD_INT 1
25736: ARRAY
25737: PPUSH
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 2
25745: ARRAY
25746: PPUSH
25747: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25751: LD_VAR 0 1
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: LD_VAR 0 1
25764: PUSH
25765: LD_INT 2
25767: ARRAY
25768: PPUSH
25769: CALL_OW 429
// end ; end ;
25773: LD_VAR 0 1
25777: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25778: LD_EXP 53
25782: PUSH
25783: LD_EXP 75
25787: AND
25788: IFFALSE 25800
25790: GO 25792
25792: DISABLE
// YouLost (  ) ;
25793: LD_STRING 
25795: PPUSH
25796: CALL_OW 104
25800: END
// every 0 0$1 trigger StreamModeActive and sFog do
25801: LD_EXP 53
25805: PUSH
25806: LD_EXP 74
25810: AND
25811: IFFALSE 25825
25813: GO 25815
25815: DISABLE
// FogOff ( your_side ) ;
25816: LD_OWVAR 2
25820: PPUSH
25821: CALL_OW 344
25825: END
// every 0 0$1 trigger StreamModeActive and sSun do
25826: LD_EXP 53
25830: PUSH
25831: LD_EXP 76
25835: AND
25836: IFFALSE 25864
25838: GO 25840
25840: DISABLE
// begin solar_recharge_percent := 0 ;
25841: LD_ADDR_OWVAR 79
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25849: LD_INT 10500
25851: PPUSH
25852: CALL_OW 67
// solar_recharge_percent := 100 ;
25856: LD_ADDR_OWVAR 79
25860: PUSH
25861: LD_INT 100
25863: ST_TO_ADDR
// end ;
25864: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25865: LD_EXP 53
25869: PUSH
25870: LD_EXP 77
25874: AND
25875: IFFALSE 26114
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
25884: PPUSH
// begin tmp := [ ] ;
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: EMPTY
25891: ST_TO_ADDR
// for i := 1 to 6 do
25892: LD_ADDR_VAR 0 1
25896: PUSH
25897: DOUBLE
25898: LD_INT 1
25900: DEC
25901: ST_TO_ADDR
25902: LD_INT 6
25904: PUSH
25905: FOR_TO
25906: IFFALSE 26011
// begin uc_nation := nation_nature ;
25908: LD_ADDR_OWVAR 21
25912: PUSH
25913: LD_INT 0
25915: ST_TO_ADDR
// uc_side := 0 ;
25916: LD_ADDR_OWVAR 20
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25924: LD_ADDR_OWVAR 29
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: ST_TO_ADDR
// hc_agressivity := 20 ;
25939: LD_ADDR_OWVAR 35
25943: PUSH
25944: LD_INT 20
25946: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25947: LD_ADDR_OWVAR 28
25951: PUSH
25952: LD_INT 17
25954: ST_TO_ADDR
// hc_gallery :=  ;
25955: LD_ADDR_OWVAR 33
25959: PUSH
25960: LD_STRING 
25962: ST_TO_ADDR
// hc_name :=  ;
25963: LD_ADDR_OWVAR 26
25967: PUSH
25968: LD_STRING 
25970: ST_TO_ADDR
// un := CreateHuman ;
25971: LD_ADDR_VAR 0 2
25975: PUSH
25976: CALL_OW 44
25980: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25981: LD_VAR 0 2
25985: PPUSH
25986: LD_INT 1
25988: PPUSH
25989: CALL_OW 51
// tmp := tmp ^ un ;
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_VAR 0 2
26007: ADD
26008: ST_TO_ADDR
// end ;
26009: GO 25905
26011: POP
26012: POP
// repeat wait ( 0 0$1 ) ;
26013: LD_INT 35
26015: PPUSH
26016: CALL_OW 67
// for un in tmp do
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26105
// begin if IsDead ( un ) then
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 301
26042: IFFALSE 26062
// begin tmp := tmp diff un ;
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_VAR 0 3
26053: PUSH
26054: LD_VAR 0 2
26058: DIFF
26059: ST_TO_ADDR
// continue ;
26060: GO 26030
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26062: LD_VAR 0 2
26066: PPUSH
26067: LD_INT 3
26069: PUSH
26070: LD_INT 22
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: CALL_OW 74
26098: PPUSH
26099: CALL_OW 115
// end ;
26103: GO 26030
26105: POP
26106: POP
// until not tmp ;
26107: LD_VAR 0 3
26111: NOT
26112: IFFALSE 26013
// end ;
26114: PPOPN 3
26116: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26117: LD_EXP 53
26121: PUSH
26122: LD_EXP 78
26126: AND
26127: IFFALSE 26181
26129: GO 26131
26131: DISABLE
// begin ToLua ( displayTroll(); ) ;
26132: LD_STRING displayTroll();
26134: PPUSH
26135: CALL_OW 559
// wait ( 3 3$00 ) ;
26139: LD_INT 6300
26141: PPUSH
26142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26146: LD_STRING hideTroll();
26148: PPUSH
26149: CALL_OW 559
// wait ( 1 1$00 ) ;
26153: LD_INT 2100
26155: PPUSH
26156: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26160: LD_STRING displayTroll();
26162: PPUSH
26163: CALL_OW 559
// wait ( 1 1$00 ) ;
26167: LD_INT 2100
26169: PPUSH
26170: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26174: LD_STRING hideTroll();
26176: PPUSH
26177: CALL_OW 559
// end ;
26181: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26182: LD_EXP 53
26186: PUSH
26187: LD_EXP 79
26191: AND
26192: IFFALSE 26255
26194: GO 26196
26196: DISABLE
26197: LD_INT 0
26199: PPUSH
// begin p := 0 ;
26200: LD_ADDR_VAR 0 1
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
// repeat game_speed := 1 ;
26208: LD_ADDR_OWVAR 65
26212: PUSH
26213: LD_INT 1
26215: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26216: LD_INT 35
26218: PPUSH
26219: CALL_OW 67
// p := p + 1 ;
26223: LD_ADDR_VAR 0 1
26227: PUSH
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 1
26235: PLUS
26236: ST_TO_ADDR
// until p >= 60 ;
26237: LD_VAR 0 1
26241: PUSH
26242: LD_INT 60
26244: GREATEREQUAL
26245: IFFALSE 26208
// game_speed := 4 ;
26247: LD_ADDR_OWVAR 65
26251: PUSH
26252: LD_INT 4
26254: ST_TO_ADDR
// end ;
26255: PPOPN 1
26257: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26258: LD_EXP 53
26262: PUSH
26263: LD_EXP 80
26267: AND
26268: IFFALSE 26414
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26277: LD_ADDR_VAR 0 1
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: LD_INT 30
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PPUSH
26326: CALL_OW 69
26330: ST_TO_ADDR
// if not depot then
26331: LD_VAR 0 1
26335: NOT
26336: IFFALSE 26340
// exit ;
26338: GO 26414
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 1
26352: PPUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 12
26362: ARRAY
26363: PPUSH
26364: CALL_OW 274
26368: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26369: LD_VAR 0 2
26373: PPUSH
26374: LD_INT 1
26376: PPUSH
26377: LD_INT 0
26379: PPUSH
26380: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26384: LD_VAR 0 2
26388: PPUSH
26389: LD_INT 2
26391: PPUSH
26392: LD_INT 0
26394: PPUSH
26395: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26399: LD_VAR 0 2
26403: PPUSH
26404: LD_INT 3
26406: PPUSH
26407: LD_INT 0
26409: PPUSH
26410: CALL_OW 277
// end ;
26414: PPOPN 2
26416: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26417: LD_EXP 53
26421: PUSH
26422: LD_EXP 81
26426: AND
26427: IFFALSE 26524
26429: GO 26431
26431: DISABLE
26432: LD_INT 0
26434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_INT 22
26442: PUSH
26443: LD_OWVAR 2
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 21
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: LD_INT 23
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: ST_TO_ADDR
// if not tmp then
26489: LD_VAR 0 1
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 26524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26498: LD_VAR 0 1
26502: PUSH
26503: LD_INT 1
26505: PPUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 12
26515: ARRAY
26516: PPUSH
26517: LD_INT 200
26519: PPUSH
26520: CALL_OW 234
// end ;
26524: PPOPN 1
26526: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26527: LD_EXP 53
26531: PUSH
26532: LD_EXP 82
26536: AND
26537: IFFALSE 26616
26539: GO 26541
26541: DISABLE
26542: LD_INT 0
26544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26545: LD_ADDR_VAR 0 1
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_OWVAR 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 21
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PPUSH
26576: CALL_OW 69
26580: ST_TO_ADDR
// if not tmp then
26581: LD_VAR 0 1
26585: NOT
26586: IFFALSE 26590
// exit ;
26588: GO 26616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26590: LD_VAR 0 1
26594: PUSH
26595: LD_INT 1
26597: PPUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 12
26607: ARRAY
26608: PPUSH
26609: LD_INT 60
26611: PPUSH
26612: CALL_OW 234
// end ;
26616: PPOPN 1
26618: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26619: LD_EXP 53
26623: PUSH
26624: LD_EXP 83
26628: AND
26629: IFFALSE 26728
26631: GO 26633
26633: DISABLE
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
// begin enable ;
26638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26639: LD_ADDR_VAR 0 1
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_OWVAR 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 61
26658: PUSH
26659: EMPTY
26660: LIST
26661: PUSH
26662: LD_INT 33
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: LIST
26676: PPUSH
26677: CALL_OW 69
26681: ST_TO_ADDR
// if not tmp then
26682: LD_VAR 0 1
26686: NOT
26687: IFFALSE 26691
// exit ;
26689: GO 26728
// for i in tmp do
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_VAR 0 1
26700: PUSH
26701: FOR_IN
26702: IFFALSE 26726
// if IsControledBy ( i ) then
26704: LD_VAR 0 2
26708: PPUSH
26709: CALL_OW 312
26713: IFFALSE 26724
// ComUnlink ( i ) ;
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL_OW 136
26724: GO 26701
26726: POP
26727: POP
// end ;
26728: PPOPN 2
26730: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26731: LD_EXP 53
26735: PUSH
26736: LD_EXP 84
26740: AND
26741: IFFALSE 26881
26743: GO 26745
26745: DISABLE
26746: LD_INT 0
26748: PPUSH
26749: PPUSH
// begin ToLua ( displayPowell(); ) ;
26750: LD_STRING displayPowell();
26752: PPUSH
26753: CALL_OW 559
// uc_side := 0 ;
26757: LD_ADDR_OWVAR 20
26761: PUSH
26762: LD_INT 0
26764: ST_TO_ADDR
// uc_nation := 2 ;
26765: LD_ADDR_OWVAR 21
26769: PUSH
26770: LD_INT 2
26772: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26773: LD_ADDR_OWVAR 37
26777: PUSH
26778: LD_INT 14
26780: ST_TO_ADDR
// vc_engine := engine_siberite ;
26781: LD_ADDR_OWVAR 39
26785: PUSH
26786: LD_INT 3
26788: ST_TO_ADDR
// vc_control := control_apeman ;
26789: LD_ADDR_OWVAR 38
26793: PUSH
26794: LD_INT 5
26796: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26797: LD_ADDR_OWVAR 40
26801: PUSH
26802: LD_INT 29
26804: ST_TO_ADDR
// un := CreateVehicle ;
26805: LD_ADDR_VAR 0 2
26809: PUSH
26810: CALL_OW 45
26814: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 1
26822: PPUSH
26823: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26827: LD_INT 35
26829: PPUSH
26830: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_INT 22
26841: PUSH
26842: LD_OWVAR 2
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 74
26865: PPUSH
26866: CALL_OW 115
// until IsDead ( un ) ;
26870: LD_VAR 0 2
26874: PPUSH
26875: CALL_OW 301
26879: IFFALSE 26827
// end ;
26881: PPOPN 2
26883: END
// every 0 0$1 trigger StreamModeActive and sStu do
26884: LD_EXP 53
26888: PUSH
26889: LD_EXP 92
26893: AND
26894: IFFALSE 26910
26896: GO 26898
26898: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26899: LD_STRING displayStucuk();
26901: PPUSH
26902: CALL_OW 559
// ResetFog ;
26906: CALL_OW 335
// end ;
26910: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26911: LD_EXP 53
26915: PUSH
26916: LD_EXP 85
26920: AND
26921: IFFALSE 27062
26923: GO 26925
26925: DISABLE
26926: LD_INT 0
26928: PPUSH
26929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_INT 22
26937: PUSH
26938: LD_OWVAR 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 21
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PPUSH
26961: CALL_OW 69
26965: ST_TO_ADDR
// if not tmp then
26966: LD_VAR 0 2
26970: NOT
26971: IFFALSE 26975
// exit ;
26973: GO 27062
// un := tmp [ rand ( 1 , tmp ) ] ;
26975: LD_ADDR_VAR 0 1
26979: PUSH
26980: LD_VAR 0 2
26984: PUSH
26985: LD_INT 1
26987: PPUSH
26988: LD_VAR 0 2
26992: PPUSH
26993: CALL_OW 12
26997: ARRAY
26998: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_INT 0
27006: PPUSH
27007: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_OWVAR 3
27020: PUSH
27021: LD_VAR 0 1
27025: DIFF
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 74
27036: PPUSH
27037: CALL_OW 115
// wait ( 0 0$20 ) ;
27041: LD_INT 700
27043: PPUSH
27044: CALL_OW 67
// SetSide ( un , your_side ) ;
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_OWVAR 2
27057: PPUSH
27058: CALL_OW 235
// end ;
27062: PPOPN 2
27064: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27065: LD_EXP 53
27069: PUSH
27070: LD_EXP 86
27074: AND
27075: IFFALSE 27181
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27083: LD_ADDR_VAR 0 1
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_OWVAR 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: LD_INT 30
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 30
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 69
27136: ST_TO_ADDR
// if not depot then
27137: LD_VAR 0 1
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27181
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27146: LD_VAR 0 1
27150: PUSH
27151: LD_INT 1
27153: ARRAY
27154: PPUSH
27155: CALL_OW 250
27159: PPUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 1
27167: ARRAY
27168: PPUSH
27169: CALL_OW 251
27173: PPUSH
27174: LD_INT 70
27176: PPUSH
27177: CALL_OW 495
// end ;
27181: PPOPN 1
27183: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27184: LD_EXP 53
27188: PUSH
27189: LD_EXP 87
27193: AND
27194: IFFALSE 27405
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27206: LD_ADDR_VAR 0 5
27210: PUSH
27211: LD_INT 22
27213: PUSH
27214: LD_OWVAR 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 21
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 69
27241: ST_TO_ADDR
// if not tmp then
27242: LD_VAR 0 5
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 27405
// for i in tmp do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_VAR 0 5
27260: PUSH
27261: FOR_IN
27262: IFFALSE 27403
// begin d := rand ( 0 , 5 ) ;
27264: LD_ADDR_VAR 0 4
27268: PUSH
27269: LD_INT 0
27271: PPUSH
27272: LD_INT 5
27274: PPUSH
27275: CALL_OW 12
27279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 250
27294: PPUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: LD_INT 3
27302: PPUSH
27303: LD_INT 12
27305: PPUSH
27306: CALL_OW 12
27310: PPUSH
27311: CALL_OW 272
27315: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 251
27330: PPUSH
27331: LD_VAR 0 4
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: LD_INT 12
27341: PPUSH
27342: CALL_OW 12
27346: PPUSH
27347: CALL_OW 273
27351: ST_TO_ADDR
// if ValidHex ( x , y ) then
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: CALL_OW 488
27366: IFFALSE 27401
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: LD_INT 3
27385: PPUSH
27386: LD_INT 6
27388: PPUSH
27389: CALL_OW 12
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: CALL_OW 483
// end ;
27401: GO 27261
27403: POP
27404: POP
// end ;
27405: PPOPN 5
27407: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27408: LD_EXP 53
27412: PUSH
27413: LD_EXP 88
27417: AND
27418: IFFALSE 27512
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 32
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: ST_TO_ADDR
// if not tmp then
27474: LD_VAR 0 2
27478: NOT
27479: IFFALSE 27483
// exit ;
27481: GO 27512
// for i in tmp do
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_VAR 0 2
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27510
// SetFuel ( i , 0 ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_INT 0
27503: PPUSH
27504: CALL_OW 240
27508: GO 27493
27510: POP
27511: POP
// end ;
27512: PPOPN 2
27514: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27515: LD_EXP 53
27519: PUSH
27520: LD_EXP 89
27524: AND
27525: IFFALSE 27591
27527: GO 27529
27529: DISABLE
27530: LD_INT 0
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27533: LD_ADDR_VAR 0 1
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_INT 29
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PPUSH
27564: CALL_OW 69
27568: ST_TO_ADDR
// if not tmp then
27569: LD_VAR 0 1
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 27591
// DestroyUnit ( tmp [ 1 ] ) ;
27578: LD_VAR 0 1
27582: PUSH
27583: LD_INT 1
27585: ARRAY
27586: PPUSH
27587: CALL_OW 65
// end ;
27591: PPOPN 1
27593: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27594: LD_EXP 53
27598: PUSH
27599: LD_EXP 91
27603: AND
27604: IFFALSE 27733
27606: GO 27608
27608: DISABLE
27609: LD_INT 0
27611: PPUSH
// begin uc_side := 0 ;
27612: LD_ADDR_OWVAR 20
27616: PUSH
27617: LD_INT 0
27619: ST_TO_ADDR
// uc_nation := nation_arabian ;
27620: LD_ADDR_OWVAR 21
27624: PUSH
27625: LD_INT 2
27627: ST_TO_ADDR
// hc_gallery :=  ;
27628: LD_ADDR_OWVAR 33
27632: PUSH
27633: LD_STRING 
27635: ST_TO_ADDR
// hc_name :=  ;
27636: LD_ADDR_OWVAR 26
27640: PUSH
27641: LD_STRING 
27643: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27644: LD_INT 1
27646: PPUSH
27647: LD_INT 11
27649: PPUSH
27650: LD_INT 10
27652: PPUSH
27653: CALL_OW 380
// un := CreateHuman ;
27657: LD_ADDR_VAR 0 1
27661: PUSH
27662: CALL_OW 44
27666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: LD_INT 1
27674: PPUSH
27675: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27679: LD_INT 35
27681: PPUSH
27682: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27686: LD_VAR 0 1
27690: PPUSH
27691: LD_INT 22
27693: PUSH
27694: LD_OWVAR 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL_OW 69
27707: PPUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 74
27717: PPUSH
27718: CALL_OW 115
// until IsDead ( un ) ;
27722: LD_VAR 0 1
27726: PPUSH
27727: CALL_OW 301
27731: IFFALSE 27679
// end ;
27733: PPOPN 1
27735: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27736: LD_EXP 53
27740: PUSH
27741: LD_EXP 93
27745: AND
27746: IFFALSE 27758
27748: GO 27750
27750: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27751: LD_STRING earthquake(getX(game), 0, 32)
27753: PPUSH
27754: CALL_OW 559
27758: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27759: LD_EXP 53
27763: PUSH
27764: LD_EXP 94
27768: AND
27769: IFFALSE 27860
27771: GO 27773
27773: DISABLE
27774: LD_INT 0
27776: PPUSH
// begin enable ;
27777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27778: LD_ADDR_VAR 0 1
27782: PUSH
27783: LD_INT 22
27785: PUSH
27786: LD_OWVAR 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 21
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 33
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: ST_TO_ADDR
// if not tmp then
27825: LD_VAR 0 1
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27834: LD_VAR 0 1
27838: PUSH
27839: LD_INT 1
27841: PPUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 12
27851: ARRAY
27852: PPUSH
27853: LD_INT 1
27855: PPUSH
27856: CALL_OW 234
// end ;
27860: PPOPN 1
27862: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27863: LD_EXP 53
27867: PUSH
27868: LD_EXP 95
27872: AND
27873: IFFALSE 28014
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
27882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 22
27890: PUSH
27891: LD_OWVAR 2
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 25
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if not tmp then
27919: LD_VAR 0 3
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28014
// un := tmp [ rand ( 1 , tmp ) ] ;
27928: LD_ADDR_VAR 0 2
27932: PUSH
27933: LD_VAR 0 3
27937: PUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_VAR 0 3
27945: PPUSH
27946: CALL_OW 12
27950: ARRAY
27951: ST_TO_ADDR
// if Crawls ( un ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 318
27961: IFFALSE 27972
// ComWalk ( un ) ;
27963: LD_VAR 0 2
27967: PPUSH
27968: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_INT 9
27979: PPUSH
27980: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27984: LD_INT 28
27986: PPUSH
27987: LD_OWVAR 2
27991: PPUSH
27992: LD_INT 2
27994: PPUSH
27995: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27999: LD_INT 29
28001: PPUSH
28002: LD_OWVAR 2
28006: PPUSH
28007: LD_INT 2
28009: PPUSH
28010: CALL_OW 322
// end ;
28014: PPOPN 3
28016: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28017: LD_EXP 53
28021: PUSH
28022: LD_EXP 96
28026: AND
28027: IFFALSE 28138
28029: GO 28031
28031: DISABLE
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
28036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: ST_TO_ADDR
// if not tmp then
28073: LD_VAR 0 3
28077: NOT
28078: IFFALSE 28082
// exit ;
28080: GO 28138
// un := tmp [ rand ( 1 , tmp ) ] ;
28082: LD_ADDR_VAR 0 2
28086: PUSH
28087: LD_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_VAR 0 3
28099: PPUSH
28100: CALL_OW 12
28104: ARRAY
28105: ST_TO_ADDR
// if Crawls ( un ) then
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 318
28115: IFFALSE 28126
// ComWalk ( un ) ;
28117: LD_VAR 0 2
28121: PPUSH
28122: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28126: LD_VAR 0 2
28130: PPUSH
28131: LD_INT 8
28133: PPUSH
28134: CALL_OW 336
// end ;
28138: PPOPN 3
28140: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28141: LD_EXP 53
28145: PUSH
28146: LD_EXP 97
28150: AND
28151: IFFALSE 28295
28153: GO 28155
28155: DISABLE
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28160: LD_ADDR_VAR 0 2
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 34
28192: PUSH
28193: LD_INT 12
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 34
28202: PUSH
28203: LD_INT 51
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 34
28212: PUSH
28213: LD_INT 32
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 69
28235: ST_TO_ADDR
// if not tmp then
28236: LD_VAR 0 2
28240: NOT
28241: IFFALSE 28245
// exit ;
28243: GO 28295
// for i in tmp do
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: LD_VAR 0 2
28254: PUSH
28255: FOR_IN
28256: IFFALSE 28293
// if GetCargo ( i , mat_artifact ) = 0 then
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_INT 4
28265: PPUSH
28266: CALL_OW 289
28270: PUSH
28271: LD_INT 0
28273: EQUAL
28274: IFFALSE 28291
// SetCargo ( i , mat_siberit , 100 ) ;
28276: LD_VAR 0 1
28280: PPUSH
28281: LD_INT 3
28283: PPUSH
28284: LD_INT 100
28286: PPUSH
28287: CALL_OW 290
28291: GO 28255
28293: POP
28294: POP
// end ;
28295: PPOPN 2
28297: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28298: LD_EXP 53
28302: PUSH
28303: LD_EXP 98
28307: AND
28308: IFFALSE 28491
28310: GO 28312
28312: DISABLE
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28317: LD_ADDR_VAR 0 2
28321: PUSH
28322: LD_INT 22
28324: PUSH
28325: LD_OWVAR 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 69
28338: ST_TO_ADDR
// if not tmp then
28339: LD_VAR 0 2
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28491
// for i := 1 to 2 do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: DOUBLE
28354: LD_INT 1
28356: DEC
28357: ST_TO_ADDR
28358: LD_INT 2
28360: PUSH
28361: FOR_TO
28362: IFFALSE 28489
// begin uc_side := your_side ;
28364: LD_ADDR_OWVAR 20
28368: PUSH
28369: LD_OWVAR 2
28373: ST_TO_ADDR
// uc_nation := nation_american ;
28374: LD_ADDR_OWVAR 21
28378: PUSH
28379: LD_INT 1
28381: ST_TO_ADDR
// vc_chassis := us_morphling ;
28382: LD_ADDR_OWVAR 37
28386: PUSH
28387: LD_INT 5
28389: ST_TO_ADDR
// vc_engine := engine_siberite ;
28390: LD_ADDR_OWVAR 39
28394: PUSH
28395: LD_INT 3
28397: ST_TO_ADDR
// vc_control := control_computer ;
28398: LD_ADDR_OWVAR 38
28402: PUSH
28403: LD_INT 3
28405: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28406: LD_ADDR_OWVAR 40
28410: PUSH
28411: LD_INT 10
28413: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28414: LD_VAR 0 2
28418: PUSH
28419: LD_INT 1
28421: ARRAY
28422: PPUSH
28423: CALL_OW 310
28427: NOT
28428: IFFALSE 28475
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28430: CALL_OW 45
28434: PPUSH
28435: LD_VAR 0 2
28439: PUSH
28440: LD_INT 1
28442: ARRAY
28443: PPUSH
28444: CALL_OW 250
28448: PPUSH
28449: LD_VAR 0 2
28453: PUSH
28454: LD_INT 1
28456: ARRAY
28457: PPUSH
28458: CALL_OW 251
28462: PPUSH
28463: LD_INT 12
28465: PPUSH
28466: LD_INT 1
28468: PPUSH
28469: CALL_OW 50
28473: GO 28487
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28475: CALL_OW 45
28479: PPUSH
28480: LD_INT 1
28482: PPUSH
28483: CALL_OW 51
// end ;
28487: GO 28361
28489: POP
28490: POP
// end ;
28491: PPOPN 2
28493: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28494: LD_EXP 53
28498: PUSH
28499: LD_EXP 99
28503: AND
28504: IFFALSE 28726
28506: GO 28508
28508: DISABLE
28509: LD_INT 0
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28517: LD_ADDR_VAR 0 6
28521: PUSH
28522: LD_INT 22
28524: PUSH
28525: LD_OWVAR 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 21
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: LD_INT 23
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: PPUSH
28566: CALL_OW 69
28570: ST_TO_ADDR
// if not tmp then
28571: LD_VAR 0 6
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28726
// s1 := rand ( 1 , 4 ) ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: LD_INT 1
28587: PPUSH
28588: LD_INT 4
28590: PPUSH
28591: CALL_OW 12
28595: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28596: LD_ADDR_VAR 0 4
28600: PUSH
28601: LD_VAR 0 6
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: LD_VAR 0 2
28614: PPUSH
28615: CALL_OW 259
28619: ST_TO_ADDR
// if s1 = 1 then
28620: LD_VAR 0 2
28624: PUSH
28625: LD_INT 1
28627: EQUAL
28628: IFFALSE 28648
// s2 := rand ( 2 , 4 ) else
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_INT 2
28637: PPUSH
28638: LD_INT 4
28640: PPUSH
28641: CALL_OW 12
28645: ST_TO_ADDR
28646: GO 28656
// s2 := 1 ;
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 1
28655: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_VAR 0 6
28665: PUSH
28666: LD_INT 1
28668: ARRAY
28669: PPUSH
28670: LD_VAR 0 3
28674: PPUSH
28675: CALL_OW 259
28679: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28680: LD_VAR 0 6
28684: PUSH
28685: LD_INT 1
28687: ARRAY
28688: PPUSH
28689: LD_VAR 0 2
28693: PPUSH
28694: LD_VAR 0 5
28698: PPUSH
28699: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28703: LD_VAR 0 6
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: LD_VAR 0 3
28716: PPUSH
28717: LD_VAR 0 4
28721: PPUSH
28722: CALL_OW 237
// end ;
28726: PPOPN 6
28728: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28729: LD_EXP 53
28733: PUSH
28734: LD_EXP 100
28738: AND
28739: IFFALSE 28818
28741: GO 28743
28743: DISABLE
28744: LD_INT 0
28746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28747: LD_ADDR_VAR 0 1
28751: PUSH
28752: LD_INT 22
28754: PUSH
28755: LD_OWVAR 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 30
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: ST_TO_ADDR
// if not tmp then
28783: LD_VAR 0 1
28787: NOT
28788: IFFALSE 28792
// exit ;
28790: GO 28818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28792: LD_VAR 0 1
28796: PUSH
28797: LD_INT 1
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 12
28809: ARRAY
28810: PPUSH
28811: LD_INT 1
28813: PPUSH
28814: CALL_OW 234
// end ;
28818: PPOPN 1
28820: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28821: LD_EXP 53
28825: PUSH
28826: LD_EXP 101
28830: AND
28831: IFFALSE 28943
28833: GO 28835
28835: DISABLE
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_OWVAR 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 30
28862: PUSH
28863: LD_INT 27
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 30
28872: PUSH
28873: LD_INT 26
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 30
28882: PUSH
28883: LD_INT 28
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 2
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28943
// for i in tmp do
28914: LD_ADDR_VAR 0 1
28918: PUSH
28919: LD_VAR 0 2
28923: PUSH
28924: FOR_IN
28925: IFFALSE 28941
// SetLives ( i , 1 ) ;
28927: LD_VAR 0 1
28931: PPUSH
28932: LD_INT 1
28934: PPUSH
28935: CALL_OW 234
28939: GO 28924
28941: POP
28942: POP
// end ;
28943: PPOPN 2
28945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28946: LD_EXP 53
28950: PUSH
28951: LD_EXP 102
28955: AND
28956: IFFALSE 29243
28958: GO 28960
28960: DISABLE
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
28965: PPUSH
// begin i := rand ( 1 , 7 ) ;
28966: LD_ADDR_VAR 0 1
28970: PUSH
28971: LD_INT 1
28973: PPUSH
28974: LD_INT 7
28976: PPUSH
28977: CALL_OW 12
28981: ST_TO_ADDR
// case i of 1 :
28982: LD_VAR 0 1
28986: PUSH
28987: LD_INT 1
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29005
28995: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28996: LD_STRING earthquake(getX(game), 0, 32)
28998: PPUSH
28999: CALL_OW 559
29003: GO 29243
29005: LD_INT 2
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29027
29013: POP
// begin ToLua ( displayStucuk(); ) ;
29014: LD_STRING displayStucuk();
29016: PPUSH
29017: CALL_OW 559
// ResetFog ;
29021: CALL_OW 335
// end ; 3 :
29025: GO 29243
29027: LD_INT 3
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29139
29035: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29036: LD_ADDR_VAR 0 2
29040: PUSH
29041: LD_INT 22
29043: PUSH
29044: LD_OWVAR 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 25
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PPUSH
29067: CALL_OW 69
29071: ST_TO_ADDR
// if not tmp then
29072: LD_VAR 0 2
29076: NOT
29077: IFFALSE 29081
// exit ;
29079: GO 29243
// un := tmp [ rand ( 1 , tmp ) ] ;
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: LD_INT 1
29093: PPUSH
29094: LD_VAR 0 2
29098: PPUSH
29099: CALL_OW 12
29103: ARRAY
29104: ST_TO_ADDR
// if Crawls ( un ) then
29105: LD_VAR 0 3
29109: PPUSH
29110: CALL_OW 318
29114: IFFALSE 29125
// ComWalk ( un ) ;
29116: LD_VAR 0 3
29120: PPUSH
29121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29125: LD_VAR 0 3
29129: PPUSH
29130: LD_INT 8
29132: PPUSH
29133: CALL_OW 336
// end ; 4 :
29137: GO 29243
29139: LD_INT 4
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29221
29147: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29148: LD_ADDR_VAR 0 2
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 30
29167: PUSH
29168: LD_INT 29
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 69
29183: ST_TO_ADDR
// if not tmp then
29184: LD_VAR 0 2
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 29243
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29193: LD_VAR 0 2
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: PPUSH
29202: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29206: LD_VAR 0 2
29210: PUSH
29211: LD_INT 1
29213: ARRAY
29214: PPUSH
29215: CALL_OW 65
// end ; 5 .. 7 :
29219: GO 29243
29221: LD_INT 5
29223: DOUBLE
29224: GREATEREQUAL
29225: IFFALSE 29233
29227: LD_INT 7
29229: DOUBLE
29230: LESSEQUAL
29231: IFTRUE 29235
29233: GO 29242
29235: POP
// StreamSibBomb ; end ;
29236: CALL 25480 0 0
29240: GO 29243
29242: POP
// end ;
29243: PPOPN 3
29245: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29246: LD_EXP 53
29250: PUSH
29251: LD_EXP 103
29255: AND
29256: IFFALSE 29412
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
29265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29266: LD_ADDR_VAR 0 2
29270: PUSH
29271: LD_INT 81
29273: PUSH
29274: LD_OWVAR 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: LD_INT 21
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PPUSH
29315: CALL_OW 69
29319: ST_TO_ADDR
// if not tmp then
29320: LD_VAR 0 2
29324: NOT
29325: IFFALSE 29329
// exit ;
29327: GO 29412
// p := 0 ;
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 0
29336: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29337: LD_INT 35
29339: PPUSH
29340: CALL_OW 67
// p := p + 1 ;
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_VAR 0 3
29353: PUSH
29354: LD_INT 1
29356: PLUS
29357: ST_TO_ADDR
// for i in tmp do
29358: LD_ADDR_VAR 0 1
29362: PUSH
29363: LD_VAR 0 2
29367: PUSH
29368: FOR_IN
29369: IFFALSE 29400
// if GetLives ( i ) < 1000 then
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 256
29380: PUSH
29381: LD_INT 1000
29383: LESS
29384: IFFALSE 29398
// SetLives ( i , 1000 ) ;
29386: LD_VAR 0 1
29390: PPUSH
29391: LD_INT 1000
29393: PPUSH
29394: CALL_OW 234
29398: GO 29368
29400: POP
29401: POP
// until p > 20 ;
29402: LD_VAR 0 3
29406: PUSH
29407: LD_INT 20
29409: GREATER
29410: IFFALSE 29337
// end ;
29412: PPOPN 3
29414: END
// every 0 0$1 trigger StreamModeActive and sTime do
29415: LD_EXP 53
29419: PUSH
29420: LD_EXP 104
29424: AND
29425: IFFALSE 29460
29427: GO 29429
29429: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29430: LD_INT 28
29432: PPUSH
29433: LD_OWVAR 2
29437: PPUSH
29438: LD_INT 2
29440: PPUSH
29441: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29445: LD_INT 30
29447: PPUSH
29448: LD_OWVAR 2
29452: PPUSH
29453: LD_INT 2
29455: PPUSH
29456: CALL_OW 322
// end ;
29460: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29461: LD_EXP 53
29465: PUSH
29466: LD_EXP 105
29470: AND
29471: IFFALSE 29592
29473: GO 29475
29475: DISABLE
29476: LD_INT 0
29478: PPUSH
29479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29480: LD_ADDR_VAR 0 2
29484: PUSH
29485: LD_INT 22
29487: PUSH
29488: LD_OWVAR 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 21
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 23
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: PPUSH
29529: CALL_OW 69
29533: ST_TO_ADDR
// if not tmp then
29534: LD_VAR 0 2
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29592
// for i in tmp do
29543: LD_ADDR_VAR 0 1
29547: PUSH
29548: LD_VAR 0 2
29552: PUSH
29553: FOR_IN
29554: IFFALSE 29590
// begin if Crawls ( i ) then
29556: LD_VAR 0 1
29560: PPUSH
29561: CALL_OW 318
29565: IFFALSE 29576
// ComWalk ( i ) ;
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 138
// SetClass ( i , 2 ) ;
29576: LD_VAR 0 1
29580: PPUSH
29581: LD_INT 2
29583: PPUSH
29584: CALL_OW 336
// end ;
29588: GO 29553
29590: POP
29591: POP
// end ;
29592: PPOPN 2
29594: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29595: LD_EXP 53
29599: PUSH
29600: LD_EXP 106
29604: AND
29605: IFFALSE 29893
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
29614: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29615: LD_OWVAR 2
29619: PPUSH
29620: LD_INT 9
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29633: LD_INT 9
29635: PPUSH
29636: LD_OWVAR 2
29640: PPUSH
29641: CALL_OW 343
// uc_side := 9 ;
29645: LD_ADDR_OWVAR 20
29649: PUSH
29650: LD_INT 9
29652: ST_TO_ADDR
// uc_nation := 2 ;
29653: LD_ADDR_OWVAR 21
29657: PUSH
29658: LD_INT 2
29660: ST_TO_ADDR
// hc_name := Dark Warrior ;
29661: LD_ADDR_OWVAR 26
29665: PUSH
29666: LD_STRING Dark Warrior
29668: ST_TO_ADDR
// hc_gallery :=  ;
29669: LD_ADDR_OWVAR 33
29673: PUSH
29674: LD_STRING 
29676: ST_TO_ADDR
// hc_noskilllimit := true ;
29677: LD_ADDR_OWVAR 76
29681: PUSH
29682: LD_INT 1
29684: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29685: LD_ADDR_OWVAR 31
29689: PUSH
29690: LD_INT 30
29692: PUSH
29693: LD_INT 30
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 30
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// un := CreateHuman ;
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: CALL_OW 44
29717: ST_TO_ADDR
// hc_noskilllimit := false ;
29718: LD_ADDR_OWVAR 76
29722: PUSH
29723: LD_INT 0
29725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29726: LD_VAR 0 3
29730: PPUSH
29731: LD_INT 1
29733: PPUSH
29734: CALL_OW 51
// ToLua ( playRanger() ) ;
29738: LD_STRING playRanger()
29740: PPUSH
29741: CALL_OW 559
// p := 0 ;
29745: LD_ADDR_VAR 0 2
29749: PUSH
29750: LD_INT 0
29752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29753: LD_INT 35
29755: PPUSH
29756: CALL_OW 67
// p := p + 1 ;
29760: LD_ADDR_VAR 0 2
29764: PUSH
29765: LD_VAR 0 2
29769: PUSH
29770: LD_INT 1
29772: PLUS
29773: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29774: LD_VAR 0 3
29778: PPUSH
29779: CALL_OW 256
29783: PUSH
29784: LD_INT 1000
29786: LESS
29787: IFFALSE 29801
// SetLives ( un , 1000 ) ;
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_INT 1000
29796: PPUSH
29797: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29801: LD_VAR 0 3
29805: PPUSH
29806: LD_INT 81
29808: PUSH
29809: LD_OWVAR 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 91
29820: PUSH
29821: LD_VAR 0 3
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: PPUSH
29843: LD_VAR 0 3
29847: PPUSH
29848: CALL_OW 74
29852: PPUSH
29853: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29857: LD_VAR 0 2
29861: PUSH
29862: LD_INT 80
29864: GREATER
29865: PUSH
29866: LD_VAR 0 3
29870: PPUSH
29871: CALL_OW 301
29875: OR
29876: IFFALSE 29753
// if un then
29878: LD_VAR 0 3
29882: IFFALSE 29893
// RemoveUnit ( un ) ;
29884: LD_VAR 0 3
29888: PPUSH
29889: CALL_OW 64
// end ;
29893: PPOPN 3
29895: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29896: LD_EXP 107
29900: IFFALSE 30016
29902: GO 29904
29904: DISABLE
29905: LD_INT 0
29907: PPUSH
29908: PPUSH
29909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_INT 81
29917: PUSH
29918: LD_OWVAR 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 21
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PPUSH
29941: CALL_OW 69
29945: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29946: LD_STRING playComputer()
29948: PPUSH
29949: CALL_OW 559
// if not tmp then
29953: LD_VAR 0 2
29957: NOT
29958: IFFALSE 29962
// exit ;
29960: GO 30016
// for i in tmp do
29962: LD_ADDR_VAR 0 1
29966: PUSH
29967: LD_VAR 0 2
29971: PUSH
29972: FOR_IN
29973: IFFALSE 30014
// for j := 1 to 4 do
29975: LD_ADDR_VAR 0 3
29979: PUSH
29980: DOUBLE
29981: LD_INT 1
29983: DEC
29984: ST_TO_ADDR
29985: LD_INT 4
29987: PUSH
29988: FOR_TO
29989: IFFALSE 30010
// SetSkill ( i , j , 10 ) ;
29991: LD_VAR 0 1
29995: PPUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: LD_INT 10
30003: PPUSH
30004: CALL_OW 237
30008: GO 29988
30010: POP
30011: POP
30012: GO 29972
30014: POP
30015: POP
// end ;
30016: PPOPN 3
30018: END
// every 0 0$1 trigger s30 do var i , tmp ;
30019: LD_EXP 108
30023: IFFALSE 30092
30025: GO 30027
30027: DISABLE
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30032: LD_ADDR_VAR 0 2
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_OWVAR 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 69
30053: ST_TO_ADDR
// if not tmp then
30054: LD_VAR 0 2
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30092
// for i in tmp do
30063: LD_ADDR_VAR 0 1
30067: PUSH
30068: LD_VAR 0 2
30072: PUSH
30073: FOR_IN
30074: IFFALSE 30090
// SetLives ( i , 300 ) ;
30076: LD_VAR 0 1
30080: PPUSH
30081: LD_INT 300
30083: PPUSH
30084: CALL_OW 234
30088: GO 30073
30090: POP
30091: POP
// end ;
30092: PPOPN 2
30094: END
// every 0 0$1 trigger s60 do var i , tmp ;
30095: LD_EXP 109
30099: IFFALSE 30168
30101: GO 30103
30103: DISABLE
30104: LD_INT 0
30106: PPUSH
30107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30108: LD_ADDR_VAR 0 2
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_OWVAR 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 69
30129: ST_TO_ADDR
// if not tmp then
30130: LD_VAR 0 2
30134: NOT
30135: IFFALSE 30139
// exit ;
30137: GO 30168
// for i in tmp do
30139: LD_ADDR_VAR 0 1
30143: PUSH
30144: LD_VAR 0 2
30148: PUSH
30149: FOR_IN
30150: IFFALSE 30166
// SetLives ( i , 600 ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_INT 600
30159: PPUSH
30160: CALL_OW 234
30164: GO 30149
30166: POP
30167: POP
// end ;
30168: PPOPN 2
30170: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30171: LD_INT 0
30173: PPUSH
// case cmd of 301 :
30174: LD_VAR 0 1
30178: PUSH
30179: LD_INT 301
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30219
30187: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30188: LD_VAR 0 6
30192: PPUSH
30193: LD_VAR 0 7
30197: PPUSH
30198: LD_VAR 0 8
30202: PPUSH
30203: LD_VAR 0 4
30207: PPUSH
30208: LD_VAR 0 5
30212: PPUSH
30213: CALL 31428 0 5
30217: GO 30340
30219: LD_INT 302
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30264
30227: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30228: LD_VAR 0 6
30232: PPUSH
30233: LD_VAR 0 7
30237: PPUSH
30238: LD_VAR 0 8
30242: PPUSH
30243: LD_VAR 0 9
30247: PPUSH
30248: LD_VAR 0 4
30252: PPUSH
30253: LD_VAR 0 5
30257: PPUSH
30258: CALL 31519 0 6
30262: GO 30340
30264: LD_INT 303
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30309
30272: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30273: LD_VAR 0 6
30277: PPUSH
30278: LD_VAR 0 7
30282: PPUSH
30283: LD_VAR 0 8
30287: PPUSH
30288: LD_VAR 0 9
30292: PPUSH
30293: LD_VAR 0 4
30297: PPUSH
30298: LD_VAR 0 5
30302: PPUSH
30303: CALL 30345 0 6
30307: GO 30340
30309: LD_INT 304
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30339
30317: POP
// hHackTeleport ( unit , x , y ) ; end ;
30318: LD_VAR 0 2
30322: PPUSH
30323: LD_VAR 0 4
30327: PPUSH
30328: LD_VAR 0 5
30332: PPUSH
30333: CALL 32112 0 3
30337: GO 30340
30339: POP
// end ;
30340: LD_VAR 0 12
30344: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30345: LD_INT 0
30347: PPUSH
30348: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: LESS
30357: PUSH
30358: LD_VAR 0 1
30362: PUSH
30363: LD_INT 3
30365: GREATER
30366: OR
30367: PUSH
30368: LD_VAR 0 5
30372: PPUSH
30373: LD_VAR 0 6
30377: PPUSH
30378: CALL_OW 428
30382: OR
30383: IFFALSE 30387
// exit ;
30385: GO 31115
// uc_side := your_side ;
30387: LD_ADDR_OWVAR 20
30391: PUSH
30392: LD_OWVAR 2
30396: ST_TO_ADDR
// uc_nation := nation ;
30397: LD_ADDR_OWVAR 21
30401: PUSH
30402: LD_VAR 0 1
30406: ST_TO_ADDR
// bc_level = 1 ;
30407: LD_ADDR_OWVAR 43
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// case btype of 1 :
30415: LD_VAR 0 2
30419: PUSH
30420: LD_INT 1
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_depot ; 2 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 0
30436: ST_TO_ADDR
30437: GO 31059
30439: LD_INT 2
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_warehouse ; 3 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 1
30455: ST_TO_ADDR
30456: GO 31059
30458: LD_INT 3
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_lab ; 4 .. 9 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 6
30474: ST_TO_ADDR
30475: GO 31059
30477: LD_INT 4
30479: DOUBLE
30480: GREATEREQUAL
30481: IFFALSE 30489
30483: LD_INT 9
30485: DOUBLE
30486: LESSEQUAL
30487: IFTRUE 30491
30489: GO 30551
30491: POP
// begin bc_type := b_lab_half ;
30492: LD_ADDR_OWVAR 42
30496: PUSH
30497: LD_INT 7
30499: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30500: LD_ADDR_OWVAR 44
30504: PUSH
30505: LD_INT 10
30507: PUSH
30508: LD_INT 11
30510: PUSH
30511: LD_INT 12
30513: PUSH
30514: LD_INT 15
30516: PUSH
30517: LD_INT 14
30519: PUSH
30520: LD_INT 13
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: PUSH
30531: LD_VAR 0 2
30535: PUSH
30536: LD_INT 3
30538: MINUS
30539: ARRAY
30540: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30541: LD_ADDR_OWVAR 45
30545: PUSH
30546: LD_INT 9
30548: ST_TO_ADDR
// end ; 10 .. 13 :
30549: GO 31059
30551: LD_INT 10
30553: DOUBLE
30554: GREATEREQUAL
30555: IFFALSE 30563
30557: LD_INT 13
30559: DOUBLE
30560: LESSEQUAL
30561: IFTRUE 30565
30563: GO 30642
30565: POP
// begin bc_type := b_lab_full ;
30566: LD_ADDR_OWVAR 42
30570: PUSH
30571: LD_INT 8
30573: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30574: LD_ADDR_OWVAR 44
30578: PUSH
30579: LD_INT 10
30581: PUSH
30582: LD_INT 12
30584: PUSH
30585: LD_INT 14
30587: PUSH
30588: LD_INT 13
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: LD_VAR 0 2
30601: PUSH
30602: LD_INT 9
30604: MINUS
30605: ARRAY
30606: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30607: LD_ADDR_OWVAR 45
30611: PUSH
30612: LD_INT 11
30614: PUSH
30615: LD_INT 15
30617: PUSH
30618: LD_INT 12
30620: PUSH
30621: LD_INT 15
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: PUSH
30630: LD_VAR 0 2
30634: PUSH
30635: LD_INT 9
30637: MINUS
30638: ARRAY
30639: ST_TO_ADDR
// end ; 14 :
30640: GO 31059
30642: LD_INT 14
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30661
30650: POP
// bc_type := b_workshop ; 15 :
30651: LD_ADDR_OWVAR 42
30655: PUSH
30656: LD_INT 2
30658: ST_TO_ADDR
30659: GO 31059
30661: LD_INT 15
30663: DOUBLE
30664: EQUAL
30665: IFTRUE 30669
30667: GO 30680
30669: POP
// bc_type := b_factory ; 16 :
30670: LD_ADDR_OWVAR 42
30674: PUSH
30675: LD_INT 3
30677: ST_TO_ADDR
30678: GO 31059
30680: LD_INT 16
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30699
30688: POP
// bc_type := b_ext_gun ; 17 :
30689: LD_ADDR_OWVAR 42
30693: PUSH
30694: LD_INT 17
30696: ST_TO_ADDR
30697: GO 31059
30699: LD_INT 17
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30735
30707: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30708: LD_ADDR_OWVAR 42
30712: PUSH
30713: LD_INT 19
30715: PUSH
30716: LD_INT 23
30718: PUSH
30719: LD_INT 19
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: PUSH
30727: LD_VAR 0 1
30731: ARRAY
30732: ST_TO_ADDR
30733: GO 31059
30735: LD_INT 18
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30754
30743: POP
// bc_type := b_ext_radar ; 19 :
30744: LD_ADDR_OWVAR 42
30748: PUSH
30749: LD_INT 20
30751: ST_TO_ADDR
30752: GO 31059
30754: LD_INT 19
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30773
30762: POP
// bc_type := b_ext_radio ; 20 :
30763: LD_ADDR_OWVAR 42
30767: PUSH
30768: LD_INT 22
30770: ST_TO_ADDR
30771: GO 31059
30773: LD_INT 20
30775: DOUBLE
30776: EQUAL
30777: IFTRUE 30781
30779: GO 30792
30781: POP
// bc_type := b_ext_siberium ; 21 :
30782: LD_ADDR_OWVAR 42
30786: PUSH
30787: LD_INT 21
30789: ST_TO_ADDR
30790: GO 31059
30792: LD_INT 21
30794: DOUBLE
30795: EQUAL
30796: IFTRUE 30800
30798: GO 30811
30800: POP
// bc_type := b_ext_computer ; 22 :
30801: LD_ADDR_OWVAR 42
30805: PUSH
30806: LD_INT 24
30808: ST_TO_ADDR
30809: GO 31059
30811: LD_INT 22
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30830
30819: POP
// bc_type := b_ext_track ; 23 :
30820: LD_ADDR_OWVAR 42
30824: PUSH
30825: LD_INT 16
30827: ST_TO_ADDR
30828: GO 31059
30830: LD_INT 23
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30849
30838: POP
// bc_type := b_ext_laser ; 24 :
30839: LD_ADDR_OWVAR 42
30843: PUSH
30844: LD_INT 25
30846: ST_TO_ADDR
30847: GO 31059
30849: LD_INT 24
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30868
30857: POP
// bc_type := b_control_tower ; 25 :
30858: LD_ADDR_OWVAR 42
30862: PUSH
30863: LD_INT 36
30865: ST_TO_ADDR
30866: GO 31059
30868: LD_INT 25
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 30887
30876: POP
// bc_type := b_breastwork ; 26 :
30877: LD_ADDR_OWVAR 42
30881: PUSH
30882: LD_INT 31
30884: ST_TO_ADDR
30885: GO 31059
30887: LD_INT 26
30889: DOUBLE
30890: EQUAL
30891: IFTRUE 30895
30893: GO 30906
30895: POP
// bc_type := b_bunker ; 27 :
30896: LD_ADDR_OWVAR 42
30900: PUSH
30901: LD_INT 32
30903: ST_TO_ADDR
30904: GO 31059
30906: LD_INT 27
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30914
30912: GO 30925
30914: POP
// bc_type := b_turret ; 28 :
30915: LD_ADDR_OWVAR 42
30919: PUSH
30920: LD_INT 33
30922: ST_TO_ADDR
30923: GO 31059
30925: LD_INT 28
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 30944
30933: POP
// bc_type := b_armoury ; 29 :
30934: LD_ADDR_OWVAR 42
30938: PUSH
30939: LD_INT 4
30941: ST_TO_ADDR
30942: GO 31059
30944: LD_INT 29
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30963
30952: POP
// bc_type := b_barracks ; 30 :
30953: LD_ADDR_OWVAR 42
30957: PUSH
30958: LD_INT 5
30960: ST_TO_ADDR
30961: GO 31059
30963: LD_INT 30
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 30982
30971: POP
// bc_type := b_solar_power ; 31 :
30972: LD_ADDR_OWVAR 42
30976: PUSH
30977: LD_INT 27
30979: ST_TO_ADDR
30980: GO 31059
30982: LD_INT 31
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31001
30990: POP
// bc_type := b_oil_power ; 32 :
30991: LD_ADDR_OWVAR 42
30995: PUSH
30996: LD_INT 26
30998: ST_TO_ADDR
30999: GO 31059
31001: LD_INT 32
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31020
31009: POP
// bc_type := b_siberite_power ; 33 :
31010: LD_ADDR_OWVAR 42
31014: PUSH
31015: LD_INT 28
31017: ST_TO_ADDR
31018: GO 31059
31020: LD_INT 33
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31039
31028: POP
// bc_type := b_oil_mine ; 34 :
31029: LD_ADDR_OWVAR 42
31033: PUSH
31034: LD_INT 29
31036: ST_TO_ADDR
31037: GO 31059
31039: LD_INT 34
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31047
31045: GO 31058
31047: POP
// bc_type := b_siberite_mine ; end ;
31048: LD_ADDR_OWVAR 42
31052: PUSH
31053: LD_INT 30
31055: ST_TO_ADDR
31056: GO 31059
31058: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31059: LD_ADDR_VAR 0 8
31063: PUSH
31064: LD_VAR 0 5
31068: PPUSH
31069: LD_VAR 0 6
31073: PPUSH
31074: LD_VAR 0 3
31078: PPUSH
31079: CALL_OW 47
31083: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31084: LD_OWVAR 42
31088: PUSH
31089: LD_INT 32
31091: PUSH
31092: LD_INT 33
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: IN
31099: IFFALSE 31115
// PlaceWeaponTurret ( b , weapon ) ;
31101: LD_VAR 0 8
31105: PPUSH
31106: LD_VAR 0 4
31110: PPUSH
31111: CALL_OW 431
// end ;
31115: LD_VAR 0 7
31119: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_INT 22
31133: PUSH
31134: LD_OWVAR 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 30
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 30
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PPUSH
31175: CALL_OW 69
31179: ST_TO_ADDR
// if not tmp then
31180: LD_VAR 0 4
31184: NOT
31185: IFFALSE 31189
// exit ;
31187: GO 31248
// for i in tmp do
31189: LD_ADDR_VAR 0 2
31193: PUSH
31194: LD_VAR 0 4
31198: PUSH
31199: FOR_IN
31200: IFFALSE 31246
// for j = 1 to 3 do
31202: LD_ADDR_VAR 0 3
31206: PUSH
31207: DOUBLE
31208: LD_INT 1
31210: DEC
31211: ST_TO_ADDR
31212: LD_INT 3
31214: PUSH
31215: FOR_TO
31216: IFFALSE 31242
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31218: LD_VAR 0 2
31222: PPUSH
31223: CALL_OW 274
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: LD_INT 99999
31235: PPUSH
31236: CALL_OW 277
31240: GO 31215
31242: POP
31243: POP
31244: GO 31199
31246: POP
31247: POP
// end ;
31248: LD_VAR 0 1
31252: RET
// export function hHackSetLevel10 ; var i , j ; begin
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
31257: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31258: LD_ADDR_VAR 0 2
31262: PUSH
31263: LD_INT 21
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: PUSH
31278: FOR_IN
31279: IFFALSE 31331
// if IsSelected ( i ) then
31281: LD_VAR 0 2
31285: PPUSH
31286: CALL_OW 306
31290: IFFALSE 31329
// begin for j := 1 to 4 do
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: DOUBLE
31298: LD_INT 1
31300: DEC
31301: ST_TO_ADDR
31302: LD_INT 4
31304: PUSH
31305: FOR_TO
31306: IFFALSE 31327
// SetSkill ( i , j , 10 ) ;
31308: LD_VAR 0 2
31312: PPUSH
31313: LD_VAR 0 3
31317: PPUSH
31318: LD_INT 10
31320: PPUSH
31321: CALL_OW 237
31325: GO 31305
31327: POP
31328: POP
// end ;
31329: GO 31278
31331: POP
31332: POP
// end ;
31333: LD_VAR 0 1
31337: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_OWVAR 2
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 21
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL_OW 69
31378: PUSH
31379: FOR_IN
31380: IFFALSE 31421
// begin for j := 1 to 4 do
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: DOUBLE
31388: LD_INT 1
31390: DEC
31391: ST_TO_ADDR
31392: LD_INT 4
31394: PUSH
31395: FOR_TO
31396: IFFALSE 31417
// SetSkill ( i , j , 10 ) ;
31398: LD_VAR 0 2
31402: PPUSH
31403: LD_VAR 0 3
31407: PPUSH
31408: LD_INT 10
31410: PPUSH
31411: CALL_OW 237
31415: GO 31395
31417: POP
31418: POP
// end ;
31419: GO 31379
31421: POP
31422: POP
// end ;
31423: LD_VAR 0 1
31427: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31428: LD_INT 0
31430: PPUSH
// uc_side := your_side ;
31431: LD_ADDR_OWVAR 20
31435: PUSH
31436: LD_OWVAR 2
31440: ST_TO_ADDR
// uc_nation := nation ;
31441: LD_ADDR_OWVAR 21
31445: PUSH
31446: LD_VAR 0 1
31450: ST_TO_ADDR
// InitHc ;
31451: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31455: LD_INT 0
31457: PPUSH
31458: LD_VAR 0 2
31462: PPUSH
31463: LD_VAR 0 3
31467: PPUSH
31468: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31472: LD_VAR 0 4
31476: PPUSH
31477: LD_VAR 0 5
31481: PPUSH
31482: CALL_OW 428
31486: PUSH
31487: LD_INT 0
31489: EQUAL
31490: IFFALSE 31514
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31492: CALL_OW 44
31496: PPUSH
31497: LD_VAR 0 4
31501: PPUSH
31502: LD_VAR 0 5
31506: PPUSH
31507: LD_INT 1
31509: PPUSH
31510: CALL_OW 48
// end ;
31514: LD_VAR 0 6
31518: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
// uc_side := your_side ;
31523: LD_ADDR_OWVAR 20
31527: PUSH
31528: LD_OWVAR 2
31532: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31533: LD_VAR 0 1
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 4
31549: PUSH
31550: LD_INT 5
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: IN
31560: IFFALSE 31572
// uc_nation := nation_american else
31562: LD_ADDR_OWVAR 21
31566: PUSH
31567: LD_INT 1
31569: ST_TO_ADDR
31570: GO 31615
// if chassis in [ 11 , 12 , 13 , 14 ] then
31572: LD_VAR 0 1
31576: PUSH
31577: LD_INT 11
31579: PUSH
31580: LD_INT 12
31582: PUSH
31583: LD_INT 13
31585: PUSH
31586: LD_INT 14
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: IN
31595: IFFALSE 31607
// uc_nation := nation_arabian else
31597: LD_ADDR_OWVAR 21
31601: PUSH
31602: LD_INT 2
31604: ST_TO_ADDR
31605: GO 31615
// uc_nation := nation_russian ;
31607: LD_ADDR_OWVAR 21
31611: PUSH
31612: LD_INT 3
31614: ST_TO_ADDR
// vc_chassis := chassis ;
31615: LD_ADDR_OWVAR 37
31619: PUSH
31620: LD_VAR 0 1
31624: ST_TO_ADDR
// vc_engine := engine ;
31625: LD_ADDR_OWVAR 39
31629: PUSH
31630: LD_VAR 0 2
31634: ST_TO_ADDR
// vc_control := control ;
31635: LD_ADDR_OWVAR 38
31639: PUSH
31640: LD_VAR 0 3
31644: ST_TO_ADDR
// vc_weapon := weapon ;
31645: LD_ADDR_OWVAR 40
31649: PUSH
31650: LD_VAR 0 4
31654: ST_TO_ADDR
// un := CreateVehicle ;
31655: LD_ADDR_VAR 0 8
31659: PUSH
31660: CALL_OW 45
31664: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31665: LD_VAR 0 8
31669: PPUSH
31670: LD_INT 0
31672: PPUSH
31673: LD_INT 5
31675: PPUSH
31676: CALL_OW 12
31680: PPUSH
31681: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31685: LD_VAR 0 8
31689: PPUSH
31690: LD_VAR 0 5
31694: PPUSH
31695: LD_VAR 0 6
31699: PPUSH
31700: LD_INT 1
31702: PPUSH
31703: CALL_OW 48
// end ;
31707: LD_VAR 0 7
31711: RET
// export hInvincible ; every 1 do
31712: GO 31714
31714: DISABLE
// hInvincible := [ ] ;
31715: LD_ADDR_EXP 110
31719: PUSH
31720: EMPTY
31721: ST_TO_ADDR
31722: END
// every 10 do var i ;
31723: GO 31725
31725: DISABLE
31726: LD_INT 0
31728: PPUSH
// begin enable ;
31729: ENABLE
// if not hInvincible then
31730: LD_EXP 110
31734: NOT
31735: IFFALSE 31739
// exit ;
31737: GO 31783
// for i in hInvincible do
31739: LD_ADDR_VAR 0 1
31743: PUSH
31744: LD_EXP 110
31748: PUSH
31749: FOR_IN
31750: IFFALSE 31781
// if GetLives ( i ) < 1000 then
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 256
31761: PUSH
31762: LD_INT 1000
31764: LESS
31765: IFFALSE 31779
// SetLives ( i , 1000 ) ;
31767: LD_VAR 0 1
31771: PPUSH
31772: LD_INT 1000
31774: PPUSH
31775: CALL_OW 234
31779: GO 31749
31781: POP
31782: POP
// end ;
31783: PPOPN 1
31785: END
// export function hHackInvincible ; var i ; begin
31786: LD_INT 0
31788: PPUSH
31789: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: LD_INT 21
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 21
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: PPUSH
31823: CALL_OW 69
31827: PUSH
31828: FOR_IN
31829: IFFALSE 31890
// if IsSelected ( i ) then
31831: LD_VAR 0 2
31835: PPUSH
31836: CALL_OW 306
31840: IFFALSE 31888
// begin if i in hInvincible then
31842: LD_VAR 0 2
31846: PUSH
31847: LD_EXP 110
31851: IN
31852: IFFALSE 31872
// hInvincible := hInvincible diff i else
31854: LD_ADDR_EXP 110
31858: PUSH
31859: LD_EXP 110
31863: PUSH
31864: LD_VAR 0 2
31868: DIFF
31869: ST_TO_ADDR
31870: GO 31888
// hInvincible := hInvincible union i ;
31872: LD_ADDR_EXP 110
31876: PUSH
31877: LD_EXP 110
31881: PUSH
31882: LD_VAR 0 2
31886: UNION
31887: ST_TO_ADDR
// end ;
31888: GO 31828
31890: POP
31891: POP
// end ;
31892: LD_VAR 0 1
31896: RET
// export function hHackInvisible ; var i , j ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
31901: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31902: LD_ADDR_VAR 0 2
31906: PUSH
31907: LD_INT 21
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PPUSH
31917: CALL_OW 69
31921: PUSH
31922: FOR_IN
31923: IFFALSE 31947
// if IsSelected ( i ) then
31925: LD_VAR 0 2
31929: PPUSH
31930: CALL_OW 306
31934: IFFALSE 31945
// ComForceInvisible ( i ) ;
31936: LD_VAR 0 2
31940: PPUSH
31941: CALL_OW 496
31945: GO 31922
31947: POP
31948: POP
// end ;
31949: LD_VAR 0 1
31953: RET
// export function hHackChangeYourSide ; begin
31954: LD_INT 0
31956: PPUSH
// if your_side = 8 then
31957: LD_OWVAR 2
31961: PUSH
31962: LD_INT 8
31964: EQUAL
31965: IFFALSE 31977
// your_side := 0 else
31967: LD_ADDR_OWVAR 2
31971: PUSH
31972: LD_INT 0
31974: ST_TO_ADDR
31975: GO 31991
// your_side := your_side + 1 ;
31977: LD_ADDR_OWVAR 2
31981: PUSH
31982: LD_OWVAR 2
31986: PUSH
31987: LD_INT 1
31989: PLUS
31990: ST_TO_ADDR
// end ;
31991: LD_VAR 0 1
31995: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31996: LD_INT 0
31998: PPUSH
31999: PPUSH
32000: PPUSH
// for i in all_units do
32001: LD_ADDR_VAR 0 2
32005: PUSH
32006: LD_OWVAR 3
32010: PUSH
32011: FOR_IN
32012: IFFALSE 32090
// if IsSelected ( i ) then
32014: LD_VAR 0 2
32018: PPUSH
32019: CALL_OW 306
32023: IFFALSE 32088
// begin j := GetSide ( i ) ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 2
32034: PPUSH
32035: CALL_OW 255
32039: ST_TO_ADDR
// if j = 8 then
32040: LD_VAR 0 3
32044: PUSH
32045: LD_INT 8
32047: EQUAL
32048: IFFALSE 32060
// j := 0 else
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_INT 0
32057: ST_TO_ADDR
32058: GO 32074
// j := j + 1 ;
32060: LD_ADDR_VAR 0 3
32064: PUSH
32065: LD_VAR 0 3
32069: PUSH
32070: LD_INT 1
32072: PLUS
32073: ST_TO_ADDR
// SetSide ( i , j ) ;
32074: LD_VAR 0 2
32078: PPUSH
32079: LD_VAR 0 3
32083: PPUSH
32084: CALL_OW 235
// end ;
32088: GO 32011
32090: POP
32091: POP
// end ;
32092: LD_VAR 0 1
32096: RET
// export function hHackFog ; begin
32097: LD_INT 0
32099: PPUSH
// FogOff ( true ) ;
32100: LD_INT 1
32102: PPUSH
32103: CALL_OW 344
// end ;
32107: LD_VAR 0 1
32111: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32112: LD_INT 0
32114: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32115: LD_VAR 0 1
32119: PPUSH
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_VAR 0 3
32129: PPUSH
32130: LD_INT 1
32132: PPUSH
32133: LD_INT 1
32135: PPUSH
32136: CALL_OW 483
// CenterOnXY ( x , y ) ;
32140: LD_VAR 0 2
32144: PPUSH
32145: LD_VAR 0 3
32149: PPUSH
32150: CALL_OW 84
// end ;
32154: LD_VAR 0 4
32158: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32159: LD_INT 0
32161: PPUSH
32162: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32163: LD_VAR 0 1
32167: NOT
32168: PUSH
32169: LD_VAR 0 2
32173: PPUSH
32174: LD_VAR 0 3
32178: PPUSH
32179: CALL_OW 488
32183: NOT
32184: OR
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 266
32195: PUSH
32196: LD_INT 3
32198: NONEQUAL
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 247
32209: PUSH
32210: LD_INT 1
32212: EQUAL
32213: NOT
32214: AND
32215: OR
32216: IFFALSE 32220
// exit ;
32218: GO 32369
// if GetType ( factory ) = unit_human then
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 247
32229: PUSH
32230: LD_INT 1
32232: EQUAL
32233: IFFALSE 32250
// factory := IsInUnit ( factory ) ;
32235: LD_ADDR_VAR 0 1
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 310
32249: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32250: LD_VAR 0 1
32254: PPUSH
32255: CALL_OW 266
32259: PUSH
32260: LD_INT 3
32262: NONEQUAL
32263: IFFALSE 32267
// exit ;
32265: GO 32369
// if HexInfo ( x , y ) = factory then
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: CALL_OW 428
32281: PUSH
32282: LD_VAR 0 1
32286: EQUAL
32287: IFFALSE 32314
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32289: LD_ADDR_EXP 111
32293: PUSH
32294: LD_EXP 111
32298: PPUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: LD_INT 0
32306: PPUSH
32307: CALL_OW 1
32311: ST_TO_ADDR
32312: GO 32365
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32314: LD_ADDR_EXP 111
32318: PUSH
32319: LD_EXP 111
32323: PPUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 255
32338: PUSH
32339: LD_VAR 0 1
32343: PUSH
32344: LD_VAR 0 2
32348: PUSH
32349: LD_VAR 0 3
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: PPUSH
32360: CALL_OW 1
32364: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32365: CALL 32374 0 0
// end ;
32369: LD_VAR 0 4
32373: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32374: LD_INT 0
32376: PPUSH
32377: PPUSH
32378: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32379: LD_STRING resetFactoryWaypoint();
32381: PPUSH
32382: CALL_OW 559
// if factoryWaypoints then
32386: LD_EXP 111
32390: IFFALSE 32516
// begin list := PrepareArray ( factoryWaypoints ) ;
32392: LD_ADDR_VAR 0 3
32396: PUSH
32397: LD_EXP 111
32401: PPUSH
32402: CALL 78972 0 1
32406: ST_TO_ADDR
// for i := 1 to list do
32407: LD_ADDR_VAR 0 2
32411: PUSH
32412: DOUBLE
32413: LD_INT 1
32415: DEC
32416: ST_TO_ADDR
32417: LD_VAR 0 3
32421: PUSH
32422: FOR_TO
32423: IFFALSE 32514
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32425: LD_STRING setFactoryWaypointXY(
32427: PUSH
32428: LD_VAR 0 3
32432: PUSH
32433: LD_VAR 0 2
32437: ARRAY
32438: PUSH
32439: LD_INT 1
32441: ARRAY
32442: STR
32443: PUSH
32444: LD_STRING ,
32446: STR
32447: PUSH
32448: LD_VAR 0 3
32452: PUSH
32453: LD_VAR 0 2
32457: ARRAY
32458: PUSH
32459: LD_INT 2
32461: ARRAY
32462: STR
32463: PUSH
32464: LD_STRING ,
32466: STR
32467: PUSH
32468: LD_VAR 0 3
32472: PUSH
32473: LD_VAR 0 2
32477: ARRAY
32478: PUSH
32479: LD_INT 3
32481: ARRAY
32482: STR
32483: PUSH
32484: LD_STRING ,
32486: STR
32487: PUSH
32488: LD_VAR 0 3
32492: PUSH
32493: LD_VAR 0 2
32497: ARRAY
32498: PUSH
32499: LD_INT 4
32501: ARRAY
32502: STR
32503: PUSH
32504: LD_STRING )
32506: STR
32507: PPUSH
32508: CALL_OW 559
32512: GO 32422
32514: POP
32515: POP
// end ; end ;
32516: LD_VAR 0 1
32520: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32521: LD_INT 0
32523: PPUSH
// if HexInfo ( x , y ) = warehouse then
32524: LD_VAR 0 2
32528: PPUSH
32529: LD_VAR 0 3
32533: PPUSH
32534: CALL_OW 428
32538: PUSH
32539: LD_VAR 0 1
32543: EQUAL
32544: IFFALSE 32571
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32546: LD_ADDR_EXP 112
32550: PUSH
32551: LD_EXP 112
32555: PPUSH
32556: LD_VAR 0 1
32560: PPUSH
32561: LD_INT 0
32563: PPUSH
32564: CALL_OW 1
32568: ST_TO_ADDR
32569: GO 32622
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32571: LD_ADDR_EXP 112
32575: PUSH
32576: LD_EXP 112
32580: PPUSH
32581: LD_VAR 0 1
32585: PPUSH
32586: LD_VAR 0 1
32590: PPUSH
32591: CALL_OW 255
32595: PUSH
32596: LD_VAR 0 1
32600: PUSH
32601: LD_VAR 0 2
32605: PUSH
32606: LD_VAR 0 3
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: PPUSH
32617: CALL_OW 1
32621: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32622: CALL 32631 0 0
// end ;
32626: LD_VAR 0 4
32630: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32631: LD_INT 0
32633: PPUSH
32634: PPUSH
32635: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32636: LD_STRING resetWarehouseGatheringPoints();
32638: PPUSH
32639: CALL_OW 559
// if warehouseGatheringPoints then
32643: LD_EXP 112
32647: IFFALSE 32773
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_EXP 112
32658: PPUSH
32659: CALL 78972 0 1
32663: ST_TO_ADDR
// for i := 1 to list do
32664: LD_ADDR_VAR 0 2
32668: PUSH
32669: DOUBLE
32670: LD_INT 1
32672: DEC
32673: ST_TO_ADDR
32674: LD_VAR 0 3
32678: PUSH
32679: FOR_TO
32680: IFFALSE 32771
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32682: LD_STRING setWarehouseGatheringPointXY(
32684: PUSH
32685: LD_VAR 0 3
32689: PUSH
32690: LD_VAR 0 2
32694: ARRAY
32695: PUSH
32696: LD_INT 1
32698: ARRAY
32699: STR
32700: PUSH
32701: LD_STRING ,
32703: STR
32704: PUSH
32705: LD_VAR 0 3
32709: PUSH
32710: LD_VAR 0 2
32714: ARRAY
32715: PUSH
32716: LD_INT 2
32718: ARRAY
32719: STR
32720: PUSH
32721: LD_STRING ,
32723: STR
32724: PUSH
32725: LD_VAR 0 3
32729: PUSH
32730: LD_VAR 0 2
32734: ARRAY
32735: PUSH
32736: LD_INT 3
32738: ARRAY
32739: STR
32740: PUSH
32741: LD_STRING ,
32743: STR
32744: PUSH
32745: LD_VAR 0 3
32749: PUSH
32750: LD_VAR 0 2
32754: ARRAY
32755: PUSH
32756: LD_INT 4
32758: ARRAY
32759: STR
32760: PUSH
32761: LD_STRING )
32763: STR
32764: PPUSH
32765: CALL_OW 559
32769: GO 32679
32771: POP
32772: POP
// end ; end ;
32773: LD_VAR 0 1
32777: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32778: LD_EXP 112
32782: IFFALSE 33467
32784: GO 32786
32786: DISABLE
32787: LD_INT 0
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
// begin enable ;
32798: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32799: LD_ADDR_VAR 0 3
32803: PUSH
32804: LD_EXP 112
32808: PPUSH
32809: CALL 78972 0 1
32813: ST_TO_ADDR
// if not list then
32814: LD_VAR 0 3
32818: NOT
32819: IFFALSE 32823
// exit ;
32821: GO 33467
// for i := 1 to list do
32823: LD_ADDR_VAR 0 1
32827: PUSH
32828: DOUBLE
32829: LD_INT 1
32831: DEC
32832: ST_TO_ADDR
32833: LD_VAR 0 3
32837: PUSH
32838: FOR_TO
32839: IFFALSE 33465
// begin depot := list [ i ] [ 2 ] ;
32841: LD_ADDR_VAR 0 8
32845: PUSH
32846: LD_VAR 0 3
32850: PUSH
32851: LD_VAR 0 1
32855: ARRAY
32856: PUSH
32857: LD_INT 2
32859: ARRAY
32860: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32861: LD_ADDR_VAR 0 5
32865: PUSH
32866: LD_VAR 0 3
32870: PUSH
32871: LD_VAR 0 1
32875: ARRAY
32876: PUSH
32877: LD_INT 1
32879: ARRAY
32880: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32881: LD_VAR 0 8
32885: PPUSH
32886: CALL_OW 301
32890: PUSH
32891: LD_VAR 0 5
32895: PUSH
32896: LD_VAR 0 8
32900: PPUSH
32901: CALL_OW 255
32905: NONEQUAL
32906: OR
32907: IFFALSE 32936
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32909: LD_ADDR_EXP 112
32913: PUSH
32914: LD_EXP 112
32918: PPUSH
32919: LD_VAR 0 8
32923: PPUSH
32924: LD_INT 0
32926: PPUSH
32927: CALL_OW 1
32931: ST_TO_ADDR
// exit ;
32932: POP
32933: POP
32934: GO 33467
// end ; x := list [ i ] [ 3 ] ;
32936: LD_ADDR_VAR 0 6
32940: PUSH
32941: LD_VAR 0 3
32945: PUSH
32946: LD_VAR 0 1
32950: ARRAY
32951: PUSH
32952: LD_INT 3
32954: ARRAY
32955: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32956: LD_ADDR_VAR 0 7
32960: PUSH
32961: LD_VAR 0 3
32965: PUSH
32966: LD_VAR 0 1
32970: ARRAY
32971: PUSH
32972: LD_INT 4
32974: ARRAY
32975: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32976: LD_ADDR_VAR 0 9
32980: PUSH
32981: LD_VAR 0 6
32985: PPUSH
32986: LD_VAR 0 7
32990: PPUSH
32991: LD_INT 16
32993: PPUSH
32994: CALL 77560 0 3
32998: ST_TO_ADDR
// if not cratesNearbyPoint then
32999: LD_VAR 0 9
33003: NOT
33004: IFFALSE 33010
// exit ;
33006: POP
33007: POP
33008: GO 33467
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33010: LD_ADDR_VAR 0 4
33014: PUSH
33015: LD_INT 22
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 60
33032: PUSH
33033: EMPTY
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 91
33042: PUSH
33043: LD_VAR 0 8
33047: PUSH
33048: LD_INT 6
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 25
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 25
33071: PUSH
33072: LD_INT 16
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: PUSH
33095: LD_VAR 0 8
33099: PPUSH
33100: CALL_OW 313
33104: PPUSH
33105: LD_INT 3
33107: PUSH
33108: LD_INT 60
33110: PUSH
33111: EMPTY
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 25
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 25
33133: PUSH
33134: LD_INT 16
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PPUSH
33150: CALL_OW 72
33154: UNION
33155: ST_TO_ADDR
// if tmp then
33156: LD_VAR 0 4
33160: IFFALSE 33240
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33162: LD_ADDR_VAR 0 4
33166: PUSH
33167: LD_VAR 0 4
33171: PPUSH
33172: LD_INT 3
33174: PPUSH
33175: CALL 75529 0 2
33179: ST_TO_ADDR
// for j in tmp do
33180: LD_ADDR_VAR 0 2
33184: PUSH
33185: LD_VAR 0 4
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33234
// begin if IsInUnit ( j ) then
33193: LD_VAR 0 2
33197: PPUSH
33198: CALL_OW 310
33202: IFFALSE 33213
// ComExit ( j ) ;
33204: LD_VAR 0 2
33208: PPUSH
33209: CALL 75612 0 1
// AddComCollect ( j , x , y ) ;
33213: LD_VAR 0 2
33217: PPUSH
33218: LD_VAR 0 6
33222: PPUSH
33223: LD_VAR 0 7
33227: PPUSH
33228: CALL_OW 177
// end ;
33232: GO 33190
33234: POP
33235: POP
// exit ;
33236: POP
33237: POP
33238: GO 33467
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33240: LD_ADDR_VAR 0 4
33244: PUSH
33245: LD_INT 22
33247: PUSH
33248: LD_VAR 0 5
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 91
33259: PUSH
33260: LD_VAR 0 8
33264: PUSH
33265: LD_INT 8
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 34
33278: PUSH
33279: LD_INT 12
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 34
33288: PUSH
33289: LD_INT 51
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 34
33298: PUSH
33299: LD_INT 32
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 34
33308: PUSH
33309: LD_INT 89
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: PPUSH
33328: CALL_OW 69
33332: ST_TO_ADDR
// if tmp then
33333: LD_VAR 0 4
33337: IFFALSE 33463
// begin for j in tmp do
33339: LD_ADDR_VAR 0 2
33343: PUSH
33344: LD_VAR 0 4
33348: PUSH
33349: FOR_IN
33350: IFFALSE 33461
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33352: LD_VAR 0 2
33356: PPUSH
33357: CALL_OW 262
33361: PUSH
33362: LD_INT 3
33364: EQUAL
33365: PUSH
33366: LD_VAR 0 2
33370: PPUSH
33371: CALL_OW 261
33375: PUSH
33376: LD_INT 20
33378: GREATER
33379: OR
33380: PUSH
33381: LD_VAR 0 2
33385: PPUSH
33386: CALL_OW 314
33390: NOT
33391: AND
33392: PUSH
33393: LD_VAR 0 2
33397: PPUSH
33398: CALL_OW 263
33402: PUSH
33403: LD_INT 1
33405: NONEQUAL
33406: PUSH
33407: LD_VAR 0 2
33411: PPUSH
33412: CALL_OW 311
33416: OR
33417: AND
33418: IFFALSE 33459
// begin ComCollect ( j , x , y ) ;
33420: LD_VAR 0 2
33424: PPUSH
33425: LD_VAR 0 6
33429: PPUSH
33430: LD_VAR 0 7
33434: PPUSH
33435: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33439: LD_VAR 0 2
33443: PPUSH
33444: LD_VAR 0 8
33448: PPUSH
33449: CALL_OW 172
// exit ;
33453: POP
33454: POP
33455: POP
33456: POP
33457: GO 33467
// end ;
33459: GO 33349
33461: POP
33462: POP
// end ; end ;
33463: GO 32838
33465: POP
33466: POP
// end ; end_of_file
33467: PPOPN 9
33469: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33470: LD_VAR 0 1
33474: PUSH
33475: LD_INT 200
33477: DOUBLE
33478: GREATEREQUAL
33479: IFFALSE 33487
33481: LD_INT 299
33483: DOUBLE
33484: LESSEQUAL
33485: IFTRUE 33489
33487: GO 33521
33489: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33490: LD_VAR 0 1
33494: PPUSH
33495: LD_VAR 0 2
33499: PPUSH
33500: LD_VAR 0 3
33504: PPUSH
33505: LD_VAR 0 4
33509: PPUSH
33510: LD_VAR 0 5
33514: PPUSH
33515: CALL 34009 0 5
33519: GO 33598
33521: LD_INT 300
33523: DOUBLE
33524: GREATEREQUAL
33525: IFFALSE 33533
33527: LD_INT 399
33529: DOUBLE
33530: LESSEQUAL
33531: IFTRUE 33535
33533: GO 33597
33535: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: LD_VAR 0 3
33550: PPUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_VAR 0 5
33560: PPUSH
33561: LD_VAR 0 6
33565: PPUSH
33566: LD_VAR 0 7
33570: PPUSH
33571: LD_VAR 0 8
33575: PPUSH
33576: LD_VAR 0 9
33580: PPUSH
33581: LD_VAR 0 10
33585: PPUSH
33586: LD_VAR 0 11
33590: PPUSH
33591: CALL 30171 0 11
33595: GO 33598
33597: POP
// end ;
33598: PPOPN 11
33600: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33601: LD_VAR 0 1
33605: PPUSH
33606: LD_VAR 0 2
33610: PPUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: LD_VAR 0 4
33620: PPUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: CALL 33745 0 5
// end ; end_of_file
33630: PPOPN 5
33632: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33633: LD_INT 0
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 264
33648: PUSH
33649: LD_INT 91
33651: EQUAL
33652: IFFALSE 33724
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33654: LD_INT 68
33656: PPUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 255
33666: PPUSH
33667: CALL_OW 321
33671: PUSH
33672: LD_INT 2
33674: EQUAL
33675: IFFALSE 33687
// eff := 70 else
33677: LD_ADDR_VAR 0 4
33681: PUSH
33682: LD_INT 70
33684: ST_TO_ADDR
33685: GO 33695
// eff := 30 ;
33687: LD_ADDR_VAR 0 4
33691: PUSH
33692: LD_INT 30
33694: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 250
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 251
33714: PPUSH
33715: LD_VAR 0 4
33719: PPUSH
33720: CALL_OW 495
// end ; end ;
33724: LD_VAR 0 2
33728: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33729: LD_INT 0
33731: PPUSH
// end ;
33732: LD_VAR 0 4
33736: RET
// export function SOS_Command ( cmd ) ; begin
33737: LD_INT 0
33739: PPUSH
// end ;
33740: LD_VAR 0 2
33744: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33745: LD_INT 0
33747: PPUSH
// end ;
33748: LD_VAR 0 6
33752: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33753: LD_INT 0
33755: PPUSH
33756: PPUSH
// if not vehicle or not factory then
33757: LD_VAR 0 1
33761: NOT
33762: PUSH
33763: LD_VAR 0 2
33767: NOT
33768: OR
33769: IFFALSE 33773
// exit ;
33771: GO 34004
// if factoryWaypoints >= factory then
33773: LD_EXP 111
33777: PUSH
33778: LD_VAR 0 2
33782: GREATEREQUAL
33783: IFFALSE 34004
// if factoryWaypoints [ factory ] then
33785: LD_EXP 111
33789: PUSH
33790: LD_VAR 0 2
33794: ARRAY
33795: IFFALSE 34004
// begin if GetControl ( vehicle ) = control_manual then
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL_OW 263
33806: PUSH
33807: LD_INT 1
33809: EQUAL
33810: IFFALSE 33891
// begin driver := IsDrivenBy ( vehicle ) ;
33812: LD_ADDR_VAR 0 4
33816: PUSH
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 311
33826: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33827: LD_VAR 0 4
33831: PPUSH
33832: LD_EXP 111
33836: PUSH
33837: LD_VAR 0 2
33841: ARRAY
33842: PUSH
33843: LD_INT 3
33845: ARRAY
33846: PPUSH
33847: LD_EXP 111
33851: PUSH
33852: LD_VAR 0 2
33856: ARRAY
33857: PUSH
33858: LD_INT 4
33860: ARRAY
33861: PPUSH
33862: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33866: LD_VAR 0 4
33870: PPUSH
33871: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_VAR 0 2
33884: PPUSH
33885: CALL_OW 180
// end else
33889: GO 34004
// if GetControl ( vehicle ) = control_remote then
33891: LD_VAR 0 1
33895: PPUSH
33896: CALL_OW 263
33900: PUSH
33901: LD_INT 2
33903: EQUAL
33904: IFFALSE 33965
// begin wait ( 0 0$2 ) ;
33906: LD_INT 70
33908: PPUSH
33909: CALL_OW 67
// if Connect ( vehicle ) then
33913: LD_VAR 0 1
33917: PPUSH
33918: CALL 45853 0 1
33922: IFFALSE 33963
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33924: LD_VAR 0 1
33928: PPUSH
33929: LD_EXP 111
33933: PUSH
33934: LD_VAR 0 2
33938: ARRAY
33939: PUSH
33940: LD_INT 3
33942: ARRAY
33943: PPUSH
33944: LD_EXP 111
33948: PUSH
33949: LD_VAR 0 2
33953: ARRAY
33954: PUSH
33955: LD_INT 4
33957: ARRAY
33958: PPUSH
33959: CALL_OW 171
// end else
33963: GO 34004
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33965: LD_VAR 0 1
33969: PPUSH
33970: LD_EXP 111
33974: PUSH
33975: LD_VAR 0 2
33979: ARRAY
33980: PUSH
33981: LD_INT 3
33983: ARRAY
33984: PPUSH
33985: LD_EXP 111
33989: PUSH
33990: LD_VAR 0 2
33994: ARRAY
33995: PUSH
33996: LD_INT 4
33998: ARRAY
33999: PPUSH
34000: CALL_OW 171
// end ; end ;
34004: LD_VAR 0 3
34008: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34009: LD_INT 0
34011: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34012: LD_VAR 0 1
34016: PUSH
34017: LD_INT 250
34019: EQUAL
34020: PUSH
34021: LD_VAR 0 2
34025: PPUSH
34026: CALL_OW 264
34030: PUSH
34031: LD_INT 81
34033: EQUAL
34034: AND
34035: IFFALSE 34056
// MinerPlaceMine ( unit , x , y ) ;
34037: LD_VAR 0 2
34041: PPUSH
34042: LD_VAR 0 4
34046: PPUSH
34047: LD_VAR 0 5
34051: PPUSH
34052: CALL 36441 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34056: LD_VAR 0 1
34060: PUSH
34061: LD_INT 251
34063: EQUAL
34064: PUSH
34065: LD_VAR 0 2
34069: PPUSH
34070: CALL_OW 264
34074: PUSH
34075: LD_INT 81
34077: EQUAL
34078: AND
34079: IFFALSE 34100
// MinerDetonateMine ( unit , x , y ) ;
34081: LD_VAR 0 2
34085: PPUSH
34086: LD_VAR 0 4
34090: PPUSH
34091: LD_VAR 0 5
34095: PPUSH
34096: CALL 36716 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34100: LD_VAR 0 1
34104: PUSH
34105: LD_INT 252
34107: EQUAL
34108: PUSH
34109: LD_VAR 0 2
34113: PPUSH
34114: CALL_OW 264
34118: PUSH
34119: LD_INT 81
34121: EQUAL
34122: AND
34123: IFFALSE 34144
// MinerCreateMinefield ( unit , x , y ) ;
34125: LD_VAR 0 2
34129: PPUSH
34130: LD_VAR 0 4
34134: PPUSH
34135: LD_VAR 0 5
34139: PPUSH
34140: CALL 37133 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34144: LD_VAR 0 1
34148: PUSH
34149: LD_INT 253
34151: EQUAL
34152: PUSH
34153: LD_VAR 0 2
34157: PPUSH
34158: CALL_OW 257
34162: PUSH
34163: LD_INT 5
34165: EQUAL
34166: AND
34167: IFFALSE 34188
// ComBinocular ( unit , x , y ) ;
34169: LD_VAR 0 2
34173: PPUSH
34174: LD_VAR 0 4
34178: PPUSH
34179: LD_VAR 0 5
34183: PPUSH
34184: CALL 37502 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34188: LD_VAR 0 1
34192: PUSH
34193: LD_INT 254
34195: EQUAL
34196: PUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: CALL_OW 264
34206: PUSH
34207: LD_INT 99
34209: EQUAL
34210: AND
34211: PUSH
34212: LD_VAR 0 3
34216: PPUSH
34217: CALL_OW 263
34221: PUSH
34222: LD_INT 3
34224: EQUAL
34225: AND
34226: IFFALSE 34242
// HackDestroyVehicle ( unit , selectedUnit ) ;
34228: LD_VAR 0 2
34232: PPUSH
34233: LD_VAR 0 3
34237: PPUSH
34238: CALL 35805 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34242: LD_VAR 0 1
34246: PUSH
34247: LD_INT 255
34249: EQUAL
34250: PUSH
34251: LD_VAR 0 2
34255: PPUSH
34256: CALL_OW 264
34260: PUSH
34261: LD_INT 14
34263: PUSH
34264: LD_INT 53
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: IN
34271: AND
34272: PUSH
34273: LD_VAR 0 4
34277: PPUSH
34278: LD_VAR 0 5
34282: PPUSH
34283: CALL_OW 488
34287: AND
34288: IFFALSE 34312
// CutTreeXYR ( unit , x , y , 12 ) ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 4
34299: PPUSH
34300: LD_VAR 0 5
34304: PPUSH
34305: LD_INT 12
34307: PPUSH
34308: CALL 34375 0 4
// if cmd = 256 then
34312: LD_VAR 0 1
34316: PUSH
34317: LD_INT 256
34319: EQUAL
34320: IFFALSE 34341
// SetFactoryWaypoint ( unit , x , y ) ;
34322: LD_VAR 0 2
34326: PPUSH
34327: LD_VAR 0 4
34331: PPUSH
34332: LD_VAR 0 5
34336: PPUSH
34337: CALL 32159 0 3
// if cmd = 257 then
34341: LD_VAR 0 1
34345: PUSH
34346: LD_INT 257
34348: EQUAL
34349: IFFALSE 34370
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34351: LD_VAR 0 2
34355: PPUSH
34356: LD_VAR 0 4
34360: PPUSH
34361: LD_VAR 0 5
34365: PPUSH
34366: CALL 32521 0 3
// end ;
34370: LD_VAR 0 6
34374: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
34382: PPUSH
34383: PPUSH
34384: PPUSH
34385: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34386: LD_VAR 0 1
34390: NOT
34391: PUSH
34392: LD_VAR 0 2
34396: PPUSH
34397: LD_VAR 0 3
34401: PPUSH
34402: CALL_OW 488
34406: NOT
34407: OR
34408: PUSH
34409: LD_VAR 0 4
34413: NOT
34414: OR
34415: IFFALSE 34419
// exit ;
34417: GO 34759
// list := [ ] ;
34419: LD_ADDR_VAR 0 13
34423: PUSH
34424: EMPTY
34425: ST_TO_ADDR
// if x - r < 0 then
34426: LD_VAR 0 2
34430: PUSH
34431: LD_VAR 0 4
34435: MINUS
34436: PUSH
34437: LD_INT 0
34439: LESS
34440: IFFALSE 34452
// min_x := 0 else
34442: LD_ADDR_VAR 0 7
34446: PUSH
34447: LD_INT 0
34449: ST_TO_ADDR
34450: GO 34468
// min_x := x - r ;
34452: LD_ADDR_VAR 0 7
34456: PUSH
34457: LD_VAR 0 2
34461: PUSH
34462: LD_VAR 0 4
34466: MINUS
34467: ST_TO_ADDR
// if y - r < 0 then
34468: LD_VAR 0 3
34472: PUSH
34473: LD_VAR 0 4
34477: MINUS
34478: PUSH
34479: LD_INT 0
34481: LESS
34482: IFFALSE 34494
// min_y := 0 else
34484: LD_ADDR_VAR 0 8
34488: PUSH
34489: LD_INT 0
34491: ST_TO_ADDR
34492: GO 34510
// min_y := y - r ;
34494: LD_ADDR_VAR 0 8
34498: PUSH
34499: LD_VAR 0 3
34503: PUSH
34504: LD_VAR 0 4
34508: MINUS
34509: ST_TO_ADDR
// max_x := x + r ;
34510: LD_ADDR_VAR 0 9
34514: PUSH
34515: LD_VAR 0 2
34519: PUSH
34520: LD_VAR 0 4
34524: PLUS
34525: ST_TO_ADDR
// max_y := y + r ;
34526: LD_ADDR_VAR 0 10
34530: PUSH
34531: LD_VAR 0 3
34535: PUSH
34536: LD_VAR 0 4
34540: PLUS
34541: ST_TO_ADDR
// for _x = min_x to max_x do
34542: LD_ADDR_VAR 0 11
34546: PUSH
34547: DOUBLE
34548: LD_VAR 0 7
34552: DEC
34553: ST_TO_ADDR
34554: LD_VAR 0 9
34558: PUSH
34559: FOR_TO
34560: IFFALSE 34677
// for _y = min_y to max_y do
34562: LD_ADDR_VAR 0 12
34566: PUSH
34567: DOUBLE
34568: LD_VAR 0 8
34572: DEC
34573: ST_TO_ADDR
34574: LD_VAR 0 10
34578: PUSH
34579: FOR_TO
34580: IFFALSE 34673
// begin if not ValidHex ( _x , _y ) then
34582: LD_VAR 0 11
34586: PPUSH
34587: LD_VAR 0 12
34591: PPUSH
34592: CALL_OW 488
34596: NOT
34597: IFFALSE 34601
// continue ;
34599: GO 34579
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34601: LD_VAR 0 11
34605: PPUSH
34606: LD_VAR 0 12
34610: PPUSH
34611: CALL_OW 351
34615: PUSH
34616: LD_VAR 0 11
34620: PPUSH
34621: LD_VAR 0 12
34625: PPUSH
34626: CALL_OW 554
34630: AND
34631: IFFALSE 34671
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34633: LD_ADDR_VAR 0 13
34637: PUSH
34638: LD_VAR 0 13
34642: PPUSH
34643: LD_VAR 0 13
34647: PUSH
34648: LD_INT 1
34650: PLUS
34651: PPUSH
34652: LD_VAR 0 11
34656: PUSH
34657: LD_VAR 0 12
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PPUSH
34666: CALL_OW 2
34670: ST_TO_ADDR
// end ;
34671: GO 34579
34673: POP
34674: POP
34675: GO 34559
34677: POP
34678: POP
// if not list then
34679: LD_VAR 0 13
34683: NOT
34684: IFFALSE 34688
// exit ;
34686: GO 34759
// for i in list do
34688: LD_ADDR_VAR 0 6
34692: PUSH
34693: LD_VAR 0 13
34697: PUSH
34698: FOR_IN
34699: IFFALSE 34757
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34701: LD_VAR 0 1
34705: PPUSH
34706: LD_STRING M
34708: PUSH
34709: LD_VAR 0 6
34713: PUSH
34714: LD_INT 1
34716: ARRAY
34717: PUSH
34718: LD_VAR 0 6
34722: PUSH
34723: LD_INT 2
34725: ARRAY
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: PPUSH
34751: CALL_OW 447
34755: GO 34698
34757: POP
34758: POP
// end ;
34759: LD_VAR 0 5
34763: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34764: LD_EXP 114
34768: NOT
34769: IFFALSE 34819
34771: GO 34773
34773: DISABLE
// begin initHack := true ;
34774: LD_ADDR_EXP 114
34778: PUSH
34779: LD_INT 1
34781: ST_TO_ADDR
// hackTanks := [ ] ;
34782: LD_ADDR_EXP 115
34786: PUSH
34787: EMPTY
34788: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34789: LD_ADDR_EXP 116
34793: PUSH
34794: EMPTY
34795: ST_TO_ADDR
// hackLimit := 3 ;
34796: LD_ADDR_EXP 117
34800: PUSH
34801: LD_INT 3
34803: ST_TO_ADDR
// hackDist := 12 ;
34804: LD_ADDR_EXP 118
34808: PUSH
34809: LD_INT 12
34811: ST_TO_ADDR
// hackCounter := [ ] ;
34812: LD_ADDR_EXP 119
34816: PUSH
34817: EMPTY
34818: ST_TO_ADDR
// end ;
34819: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34820: LD_EXP 114
34824: PUSH
34825: LD_INT 34
34827: PUSH
34828: LD_INT 99
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PPUSH
34835: CALL_OW 69
34839: AND
34840: IFFALSE 35093
34842: GO 34844
34844: DISABLE
34845: LD_INT 0
34847: PPUSH
34848: PPUSH
// begin enable ;
34849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34850: LD_ADDR_VAR 0 1
34854: PUSH
34855: LD_INT 34
34857: PUSH
34858: LD_INT 99
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 69
34869: PUSH
34870: FOR_IN
34871: IFFALSE 35091
// begin if not i in hackTanks then
34873: LD_VAR 0 1
34877: PUSH
34878: LD_EXP 115
34882: IN
34883: NOT
34884: IFFALSE 34967
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34886: LD_ADDR_EXP 115
34890: PUSH
34891: LD_EXP 115
34895: PPUSH
34896: LD_EXP 115
34900: PUSH
34901: LD_INT 1
34903: PLUS
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 1
34914: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34915: LD_ADDR_EXP 116
34919: PUSH
34920: LD_EXP 116
34924: PPUSH
34925: LD_EXP 116
34929: PUSH
34930: LD_INT 1
34932: PLUS
34933: PPUSH
34934: EMPTY
34935: PPUSH
34936: CALL_OW 1
34940: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34941: LD_ADDR_EXP 119
34945: PUSH
34946: LD_EXP 119
34950: PPUSH
34951: LD_EXP 119
34955: PUSH
34956: LD_INT 1
34958: PLUS
34959: PPUSH
34960: EMPTY
34961: PPUSH
34962: CALL_OW 1
34966: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 302
34976: NOT
34977: IFFALSE 34990
// begin HackUnlinkAll ( i ) ;
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL 35096 0 1
// continue ;
34988: GO 34870
// end ; HackCheckCapturedStatus ( i ) ;
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL 35539 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34999: LD_ADDR_VAR 0 2
35003: PUSH
35004: LD_INT 81
35006: PUSH
35007: LD_VAR 0 1
35011: PPUSH
35012: CALL_OW 255
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 33
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 91
35033: PUSH
35034: LD_VAR 0 1
35038: PUSH
35039: LD_EXP 118
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 50
35051: PUSH
35052: EMPTY
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: PPUSH
35061: CALL_OW 69
35065: ST_TO_ADDR
// if not tmp then
35066: LD_VAR 0 2
35070: NOT
35071: IFFALSE 35075
// continue ;
35073: GO 34870
// HackLink ( i , tmp ) ;
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 2
35084: PPUSH
35085: CALL 35232 0 2
// end ;
35089: GO 34870
35091: POP
35092: POP
// end ;
35093: PPOPN 2
35095: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
35100: PPUSH
// if not hack in hackTanks then
35101: LD_VAR 0 1
35105: PUSH
35106: LD_EXP 115
35110: IN
35111: NOT
35112: IFFALSE 35116
// exit ;
35114: GO 35227
// index := GetElementIndex ( hackTanks , hack ) ;
35116: LD_ADDR_VAR 0 4
35120: PUSH
35121: LD_EXP 115
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL 42669 0 2
35135: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35136: LD_EXP 116
35140: PUSH
35141: LD_VAR 0 4
35145: ARRAY
35146: IFFALSE 35227
// begin for i in hackTanksCaptured [ index ] do
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_EXP 116
35157: PUSH
35158: LD_VAR 0 4
35162: ARRAY
35163: PUSH
35164: FOR_IN
35165: IFFALSE 35191
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35167: LD_VAR 0 3
35171: PUSH
35172: LD_INT 1
35174: ARRAY
35175: PPUSH
35176: LD_VAR 0 3
35180: PUSH
35181: LD_INT 2
35183: ARRAY
35184: PPUSH
35185: CALL_OW 235
35189: GO 35164
35191: POP
35192: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35193: LD_ADDR_EXP 116
35197: PUSH
35198: LD_EXP 116
35202: PPUSH
35203: LD_VAR 0 4
35207: PPUSH
35208: EMPTY
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35215: LD_VAR 0 1
35219: PPUSH
35220: LD_INT 0
35222: PPUSH
35223: CALL_OW 505
// end ; end ;
35227: LD_VAR 0 2
35231: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35232: LD_INT 0
35234: PPUSH
35235: PPUSH
35236: PPUSH
// if not hack in hackTanks or not vehicles then
35237: LD_VAR 0 1
35241: PUSH
35242: LD_EXP 115
35246: IN
35247: NOT
35248: PUSH
35249: LD_VAR 0 2
35253: NOT
35254: OR
35255: IFFALSE 35259
// exit ;
35257: GO 35534
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35259: LD_ADDR_VAR 0 2
35263: PUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: LD_INT 1
35276: PPUSH
35277: LD_INT 1
35279: PPUSH
35280: CALL 43319 0 4
35284: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35285: LD_ADDR_VAR 0 5
35289: PUSH
35290: LD_EXP 115
35294: PPUSH
35295: LD_VAR 0 1
35299: PPUSH
35300: CALL 42669 0 2
35304: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35305: LD_EXP 116
35309: PUSH
35310: LD_VAR 0 5
35314: ARRAY
35315: PUSH
35316: LD_EXP 117
35320: LESS
35321: IFFALSE 35510
// begin for i := 1 to vehicles do
35323: LD_ADDR_VAR 0 4
35327: PUSH
35328: DOUBLE
35329: LD_INT 1
35331: DEC
35332: ST_TO_ADDR
35333: LD_VAR 0 2
35337: PUSH
35338: FOR_TO
35339: IFFALSE 35508
// begin if hackTanksCaptured [ index ] = hackLimit then
35341: LD_EXP 116
35345: PUSH
35346: LD_VAR 0 5
35350: ARRAY
35351: PUSH
35352: LD_EXP 117
35356: EQUAL
35357: IFFALSE 35361
// break ;
35359: GO 35508
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35361: LD_ADDR_EXP 119
35365: PUSH
35366: LD_EXP 119
35370: PPUSH
35371: LD_VAR 0 5
35375: PPUSH
35376: LD_EXP 119
35380: PUSH
35381: LD_VAR 0 5
35385: ARRAY
35386: PUSH
35387: LD_INT 1
35389: PLUS
35390: PPUSH
35391: CALL_OW 1
35395: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35396: LD_ADDR_EXP 116
35400: PUSH
35401: LD_EXP 116
35405: PPUSH
35406: LD_VAR 0 5
35410: PUSH
35411: LD_EXP 116
35415: PUSH
35416: LD_VAR 0 5
35420: ARRAY
35421: PUSH
35422: LD_INT 1
35424: PLUS
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PPUSH
35430: LD_VAR 0 2
35434: PUSH
35435: LD_VAR 0 4
35439: ARRAY
35440: PUSH
35441: LD_VAR 0 2
35445: PUSH
35446: LD_VAR 0 4
35450: ARRAY
35451: PPUSH
35452: CALL_OW 255
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PPUSH
35461: CALL 42884 0 3
35465: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35466: LD_VAR 0 2
35470: PUSH
35471: LD_VAR 0 4
35475: ARRAY
35476: PPUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 255
35486: PPUSH
35487: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35491: LD_VAR 0 2
35495: PUSH
35496: LD_VAR 0 4
35500: ARRAY
35501: PPUSH
35502: CALL_OW 141
// end ;
35506: GO 35338
35508: POP
35509: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35510: LD_VAR 0 1
35514: PPUSH
35515: LD_EXP 116
35519: PUSH
35520: LD_VAR 0 5
35524: ARRAY
35525: PUSH
35526: LD_INT 0
35528: PLUS
35529: PPUSH
35530: CALL_OW 505
// end ;
35534: LD_VAR 0 3
35538: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
// if not hack in hackTanks then
35545: LD_VAR 0 1
35549: PUSH
35550: LD_EXP 115
35554: IN
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 35800
// index := GetElementIndex ( hackTanks , hack ) ;
35560: LD_ADDR_VAR 0 4
35564: PUSH
35565: LD_EXP 115
35569: PPUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL 42669 0 2
35579: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35580: LD_ADDR_VAR 0 3
35584: PUSH
35585: DOUBLE
35586: LD_EXP 116
35590: PUSH
35591: LD_VAR 0 4
35595: ARRAY
35596: INC
35597: ST_TO_ADDR
35598: LD_INT 1
35600: PUSH
35601: FOR_DOWNTO
35602: IFFALSE 35774
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35604: LD_ADDR_VAR 0 5
35608: PUSH
35609: LD_EXP 116
35613: PUSH
35614: LD_VAR 0 4
35618: ARRAY
35619: PUSH
35620: LD_VAR 0 3
35624: ARRAY
35625: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35626: LD_VAR 0 5
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: PPUSH
35635: CALL_OW 302
35639: NOT
35640: PUSH
35641: LD_VAR 0 5
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PPUSH
35650: CALL_OW 255
35654: PUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 255
35664: NONEQUAL
35665: OR
35666: IFFALSE 35772
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35668: LD_VAR 0 5
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: PPUSH
35677: CALL_OW 305
35681: PUSH
35682: LD_VAR 0 5
35686: PUSH
35687: LD_INT 1
35689: ARRAY
35690: PPUSH
35691: CALL_OW 255
35695: PUSH
35696: LD_VAR 0 1
35700: PPUSH
35701: CALL_OW 255
35705: EQUAL
35706: AND
35707: IFFALSE 35731
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35709: LD_VAR 0 5
35713: PUSH
35714: LD_INT 1
35716: ARRAY
35717: PPUSH
35718: LD_VAR 0 5
35722: PUSH
35723: LD_INT 2
35725: ARRAY
35726: PPUSH
35727: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35731: LD_ADDR_EXP 116
35735: PUSH
35736: LD_EXP 116
35740: PPUSH
35741: LD_VAR 0 4
35745: PPUSH
35746: LD_EXP 116
35750: PUSH
35751: LD_VAR 0 4
35755: ARRAY
35756: PPUSH
35757: LD_VAR 0 3
35761: PPUSH
35762: CALL_OW 3
35766: PPUSH
35767: CALL_OW 1
35771: ST_TO_ADDR
// end ; end ;
35772: GO 35601
35774: POP
35775: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35776: LD_VAR 0 1
35780: PPUSH
35781: LD_EXP 116
35785: PUSH
35786: LD_VAR 0 4
35790: ARRAY
35791: PUSH
35792: LD_INT 0
35794: PLUS
35795: PPUSH
35796: CALL_OW 505
// end ;
35800: LD_VAR 0 2
35804: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35805: LD_INT 0
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
// if not hack in hackTanks then
35811: LD_VAR 0 1
35815: PUSH
35816: LD_EXP 115
35820: IN
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 35911
// index := GetElementIndex ( hackTanks , hack ) ;
35826: LD_ADDR_VAR 0 5
35830: PUSH
35831: LD_EXP 115
35835: PPUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL 42669 0 2
35845: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35846: LD_ADDR_VAR 0 4
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_EXP 116
35860: PUSH
35861: LD_VAR 0 5
35865: ARRAY
35866: PUSH
35867: FOR_TO
35868: IFFALSE 35909
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35870: LD_EXP 116
35874: PUSH
35875: LD_VAR 0 5
35879: ARRAY
35880: PUSH
35881: LD_VAR 0 4
35885: ARRAY
35886: PUSH
35887: LD_INT 1
35889: ARRAY
35890: PUSH
35891: LD_VAR 0 2
35895: EQUAL
35896: IFFALSE 35907
// KillUnit ( vehicle ) ;
35898: LD_VAR 0 2
35902: PPUSH
35903: CALL_OW 66
35907: GO 35867
35909: POP
35910: POP
// end ;
35911: LD_VAR 0 3
35915: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35916: LD_EXP 120
35920: NOT
35921: IFFALSE 35956
35923: GO 35925
35925: DISABLE
// begin initMiner := true ;
35926: LD_ADDR_EXP 120
35930: PUSH
35931: LD_INT 1
35933: ST_TO_ADDR
// minersList := [ ] ;
35934: LD_ADDR_EXP 121
35938: PUSH
35939: EMPTY
35940: ST_TO_ADDR
// minerMinesList := [ ] ;
35941: LD_ADDR_EXP 122
35945: PUSH
35946: EMPTY
35947: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35948: LD_ADDR_EXP 123
35952: PUSH
35953: LD_INT 5
35955: ST_TO_ADDR
// end ;
35956: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35957: LD_EXP 120
35961: PUSH
35962: LD_INT 34
35964: PUSH
35965: LD_INT 81
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 69
35976: AND
35977: IFFALSE 36438
35979: GO 35981
35981: DISABLE
35982: LD_INT 0
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
// begin enable ;
35988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35989: LD_ADDR_VAR 0 1
35993: PUSH
35994: LD_INT 34
35996: PUSH
35997: LD_INT 81
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PPUSH
36004: CALL_OW 69
36008: PUSH
36009: FOR_IN
36010: IFFALSE 36082
// begin if not i in minersList then
36012: LD_VAR 0 1
36016: PUSH
36017: LD_EXP 121
36021: IN
36022: NOT
36023: IFFALSE 36080
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36025: LD_ADDR_EXP 121
36029: PUSH
36030: LD_EXP 121
36034: PPUSH
36035: LD_EXP 121
36039: PUSH
36040: LD_INT 1
36042: PLUS
36043: PPUSH
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 1
36053: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36054: LD_ADDR_EXP 122
36058: PUSH
36059: LD_EXP 122
36063: PPUSH
36064: LD_EXP 122
36068: PUSH
36069: LD_INT 1
36071: PLUS
36072: PPUSH
36073: EMPTY
36074: PPUSH
36075: CALL_OW 1
36079: ST_TO_ADDR
// end end ;
36080: GO 36009
36082: POP
36083: POP
// for i := minerMinesList downto 1 do
36084: LD_ADDR_VAR 0 1
36088: PUSH
36089: DOUBLE
36090: LD_EXP 122
36094: INC
36095: ST_TO_ADDR
36096: LD_INT 1
36098: PUSH
36099: FOR_DOWNTO
36100: IFFALSE 36436
// begin if IsLive ( minersList [ i ] ) then
36102: LD_EXP 121
36106: PUSH
36107: LD_VAR 0 1
36111: ARRAY
36112: PPUSH
36113: CALL_OW 300
36117: IFFALSE 36145
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36119: LD_EXP 121
36123: PUSH
36124: LD_VAR 0 1
36128: ARRAY
36129: PPUSH
36130: LD_EXP 122
36134: PUSH
36135: LD_VAR 0 1
36139: ARRAY
36140: PPUSH
36141: CALL_OW 505
// if not minerMinesList [ i ] then
36145: LD_EXP 122
36149: PUSH
36150: LD_VAR 0 1
36154: ARRAY
36155: NOT
36156: IFFALSE 36160
// continue ;
36158: GO 36099
// for j := minerMinesList [ i ] downto 1 do
36160: LD_ADDR_VAR 0 2
36164: PUSH
36165: DOUBLE
36166: LD_EXP 122
36170: PUSH
36171: LD_VAR 0 1
36175: ARRAY
36176: INC
36177: ST_TO_ADDR
36178: LD_INT 1
36180: PUSH
36181: FOR_DOWNTO
36182: IFFALSE 36432
// begin side := GetSide ( minersList [ i ] ) ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_EXP 121
36193: PUSH
36194: LD_VAR 0 1
36198: ARRAY
36199: PPUSH
36200: CALL_OW 255
36204: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36205: LD_ADDR_VAR 0 4
36209: PUSH
36210: LD_EXP 122
36214: PUSH
36215: LD_VAR 0 1
36219: ARRAY
36220: PUSH
36221: LD_VAR 0 2
36225: ARRAY
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PPUSH
36231: LD_EXP 122
36235: PUSH
36236: LD_VAR 0 1
36240: ARRAY
36241: PUSH
36242: LD_VAR 0 2
36246: ARRAY
36247: PUSH
36248: LD_INT 2
36250: ARRAY
36251: PPUSH
36252: CALL_OW 428
36256: ST_TO_ADDR
// if not tmp then
36257: LD_VAR 0 4
36261: NOT
36262: IFFALSE 36266
// continue ;
36264: GO 36181
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36266: LD_VAR 0 4
36270: PUSH
36271: LD_INT 81
36273: PUSH
36274: LD_VAR 0 3
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PPUSH
36283: CALL_OW 69
36287: IN
36288: PUSH
36289: LD_EXP 122
36293: PUSH
36294: LD_VAR 0 1
36298: ARRAY
36299: PUSH
36300: LD_VAR 0 2
36304: ARRAY
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: PPUSH
36310: LD_EXP 122
36314: PUSH
36315: LD_VAR 0 1
36319: ARRAY
36320: PUSH
36321: LD_VAR 0 2
36325: ARRAY
36326: PUSH
36327: LD_INT 2
36329: ARRAY
36330: PPUSH
36331: CALL_OW 458
36335: AND
36336: IFFALSE 36430
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36338: LD_EXP 122
36342: PUSH
36343: LD_VAR 0 1
36347: ARRAY
36348: PUSH
36349: LD_VAR 0 2
36353: ARRAY
36354: PUSH
36355: LD_INT 1
36357: ARRAY
36358: PPUSH
36359: LD_EXP 122
36363: PUSH
36364: LD_VAR 0 1
36368: ARRAY
36369: PUSH
36370: LD_VAR 0 2
36374: ARRAY
36375: PUSH
36376: LD_INT 2
36378: ARRAY
36379: PPUSH
36380: LD_VAR 0 3
36384: PPUSH
36385: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36389: LD_ADDR_EXP 122
36393: PUSH
36394: LD_EXP 122
36398: PPUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: LD_EXP 122
36408: PUSH
36409: LD_VAR 0 1
36413: ARRAY
36414: PPUSH
36415: LD_VAR 0 2
36419: PPUSH
36420: CALL_OW 3
36424: PPUSH
36425: CALL_OW 1
36429: ST_TO_ADDR
// end ; end ;
36430: GO 36181
36432: POP
36433: POP
// end ;
36434: GO 36099
36436: POP
36437: POP
// end ;
36438: PPOPN 4
36440: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36441: LD_INT 0
36443: PPUSH
36444: PPUSH
// result := false ;
36445: LD_ADDR_VAR 0 4
36449: PUSH
36450: LD_INT 0
36452: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 264
36462: PUSH
36463: LD_INT 81
36465: EQUAL
36466: NOT
36467: IFFALSE 36471
// exit ;
36469: GO 36711
// index := GetElementIndex ( minersList , unit ) ;
36471: LD_ADDR_VAR 0 5
36475: PUSH
36476: LD_EXP 121
36480: PPUSH
36481: LD_VAR 0 1
36485: PPUSH
36486: CALL 42669 0 2
36490: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36491: LD_EXP 122
36495: PUSH
36496: LD_VAR 0 5
36500: ARRAY
36501: PUSH
36502: LD_EXP 123
36506: GREATEREQUAL
36507: IFFALSE 36511
// exit ;
36509: GO 36711
// ComMoveXY ( unit , x , y ) ;
36511: LD_VAR 0 1
36515: PPUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: LD_VAR 0 3
36525: PPUSH
36526: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36530: LD_INT 35
36532: PPUSH
36533: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36537: LD_VAR 0 1
36541: PPUSH
36542: LD_VAR 0 2
36546: PPUSH
36547: LD_VAR 0 3
36551: PPUSH
36552: CALL 74024 0 3
36556: NOT
36557: PUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 314
36567: AND
36568: IFFALSE 36572
// exit ;
36570: GO 36711
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 3
36581: PPUSH
36582: CALL_OW 428
36586: PUSH
36587: LD_VAR 0 1
36591: EQUAL
36592: PUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 314
36602: NOT
36603: AND
36604: IFFALSE 36530
// PlaySoundXY ( x , y , PlantMine ) ;
36606: LD_VAR 0 2
36610: PPUSH
36611: LD_VAR 0 3
36615: PPUSH
36616: LD_STRING PlantMine
36618: PPUSH
36619: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36623: LD_VAR 0 2
36627: PPUSH
36628: LD_VAR 0 3
36632: PPUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 255
36642: PPUSH
36643: LD_INT 0
36645: PPUSH
36646: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36650: LD_ADDR_EXP 122
36654: PUSH
36655: LD_EXP 122
36659: PPUSH
36660: LD_VAR 0 5
36664: PUSH
36665: LD_EXP 122
36669: PUSH
36670: LD_VAR 0 5
36674: ARRAY
36675: PUSH
36676: LD_INT 1
36678: PLUS
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PPUSH
36684: LD_VAR 0 2
36688: PUSH
36689: LD_VAR 0 3
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PPUSH
36698: CALL 42884 0 3
36702: ST_TO_ADDR
// result := true ;
36703: LD_ADDR_VAR 0 4
36707: PUSH
36708: LD_INT 1
36710: ST_TO_ADDR
// end ;
36711: LD_VAR 0 4
36715: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36716: LD_INT 0
36718: PPUSH
36719: PPUSH
36720: PPUSH
// if not unit in minersList then
36721: LD_VAR 0 1
36725: PUSH
36726: LD_EXP 121
36730: IN
36731: NOT
36732: IFFALSE 36736
// exit ;
36734: GO 37128
// index := GetElementIndex ( minersList , unit ) ;
36736: LD_ADDR_VAR 0 6
36740: PUSH
36741: LD_EXP 121
36745: PPUSH
36746: LD_VAR 0 1
36750: PPUSH
36751: CALL 42669 0 2
36755: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36756: LD_ADDR_VAR 0 5
36760: PUSH
36761: DOUBLE
36762: LD_EXP 122
36766: PUSH
36767: LD_VAR 0 6
36771: ARRAY
36772: INC
36773: ST_TO_ADDR
36774: LD_INT 1
36776: PUSH
36777: FOR_DOWNTO
36778: IFFALSE 36939
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36780: LD_EXP 122
36784: PUSH
36785: LD_VAR 0 6
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PUSH
36801: LD_VAR 0 2
36805: EQUAL
36806: PUSH
36807: LD_EXP 122
36811: PUSH
36812: LD_VAR 0 6
36816: ARRAY
36817: PUSH
36818: LD_VAR 0 5
36822: ARRAY
36823: PUSH
36824: LD_INT 2
36826: ARRAY
36827: PUSH
36828: LD_VAR 0 3
36832: EQUAL
36833: AND
36834: IFFALSE 36937
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36836: LD_EXP 122
36840: PUSH
36841: LD_VAR 0 6
36845: ARRAY
36846: PUSH
36847: LD_VAR 0 5
36851: ARRAY
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: LD_EXP 122
36861: PUSH
36862: LD_VAR 0 6
36866: ARRAY
36867: PUSH
36868: LD_VAR 0 5
36872: ARRAY
36873: PUSH
36874: LD_INT 2
36876: ARRAY
36877: PPUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 255
36887: PPUSH
36888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36892: LD_ADDR_EXP 122
36896: PUSH
36897: LD_EXP 122
36901: PPUSH
36902: LD_VAR 0 6
36906: PPUSH
36907: LD_EXP 122
36911: PUSH
36912: LD_VAR 0 6
36916: ARRAY
36917: PPUSH
36918: LD_VAR 0 5
36922: PPUSH
36923: CALL_OW 3
36927: PPUSH
36928: CALL_OW 1
36932: ST_TO_ADDR
// exit ;
36933: POP
36934: POP
36935: GO 37128
// end ; end ;
36937: GO 36777
36939: POP
36940: POP
// for i := minerMinesList [ index ] downto 1 do
36941: LD_ADDR_VAR 0 5
36945: PUSH
36946: DOUBLE
36947: LD_EXP 122
36951: PUSH
36952: LD_VAR 0 6
36956: ARRAY
36957: INC
36958: ST_TO_ADDR
36959: LD_INT 1
36961: PUSH
36962: FOR_DOWNTO
36963: IFFALSE 37126
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36965: LD_EXP 122
36969: PUSH
36970: LD_VAR 0 6
36974: ARRAY
36975: PUSH
36976: LD_VAR 0 5
36980: ARRAY
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: PPUSH
36986: LD_EXP 122
36990: PUSH
36991: LD_VAR 0 6
36995: ARRAY
36996: PUSH
36997: LD_VAR 0 5
37001: ARRAY
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PPUSH
37007: LD_VAR 0 2
37011: PPUSH
37012: LD_VAR 0 3
37016: PPUSH
37017: CALL_OW 298
37021: PUSH
37022: LD_INT 6
37024: LESS
37025: IFFALSE 37124
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37027: LD_EXP 122
37031: PUSH
37032: LD_VAR 0 6
37036: ARRAY
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PPUSH
37048: LD_EXP 122
37052: PUSH
37053: LD_VAR 0 6
37057: ARRAY
37058: PUSH
37059: LD_VAR 0 5
37063: ARRAY
37064: PUSH
37065: LD_INT 2
37067: ARRAY
37068: PPUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 255
37078: PPUSH
37079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37083: LD_ADDR_EXP 122
37087: PUSH
37088: LD_EXP 122
37092: PPUSH
37093: LD_VAR 0 6
37097: PPUSH
37098: LD_EXP 122
37102: PUSH
37103: LD_VAR 0 6
37107: ARRAY
37108: PPUSH
37109: LD_VAR 0 5
37113: PPUSH
37114: CALL_OW 3
37118: PPUSH
37119: CALL_OW 1
37123: ST_TO_ADDR
// end ; end ;
37124: GO 36962
37126: POP
37127: POP
// end ;
37128: LD_VAR 0 4
37132: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37133: LD_INT 0
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 264
37153: PUSH
37154: LD_INT 81
37156: EQUAL
37157: NOT
37158: PUSH
37159: LD_VAR 0 1
37163: PUSH
37164: LD_EXP 121
37168: IN
37169: NOT
37170: OR
37171: IFFALSE 37175
// exit ;
37173: GO 37497
// index := GetElementIndex ( minersList , unit ) ;
37175: LD_ADDR_VAR 0 6
37179: PUSH
37180: LD_EXP 121
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL 42669 0 2
37194: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37195: LD_ADDR_VAR 0 8
37199: PUSH
37200: LD_EXP 123
37204: PUSH
37205: LD_EXP 122
37209: PUSH
37210: LD_VAR 0 6
37214: ARRAY
37215: MINUS
37216: ST_TO_ADDR
// if not minesFreeAmount then
37217: LD_VAR 0 8
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37497
// tmp := [ ] ;
37226: LD_ADDR_VAR 0 7
37230: PUSH
37231: EMPTY
37232: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37233: LD_ADDR_VAR 0 5
37237: PUSH
37238: DOUBLE
37239: LD_INT 1
37241: DEC
37242: ST_TO_ADDR
37243: LD_VAR 0 8
37247: PUSH
37248: FOR_TO
37249: IFFALSE 37444
// begin _d := rand ( 0 , 5 ) ;
37251: LD_ADDR_VAR 0 11
37255: PUSH
37256: LD_INT 0
37258: PPUSH
37259: LD_INT 5
37261: PPUSH
37262: CALL_OW 12
37266: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37267: LD_ADDR_VAR 0 12
37271: PUSH
37272: LD_INT 2
37274: PPUSH
37275: LD_INT 6
37277: PPUSH
37278: CALL_OW 12
37282: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_VAR 0 2
37292: PPUSH
37293: LD_VAR 0 11
37297: PPUSH
37298: LD_VAR 0 12
37302: PPUSH
37303: CALL_OW 272
37307: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37308: LD_ADDR_VAR 0 10
37312: PUSH
37313: LD_VAR 0 3
37317: PPUSH
37318: LD_VAR 0 11
37322: PPUSH
37323: LD_VAR 0 12
37327: PPUSH
37328: CALL_OW 273
37332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37333: LD_VAR 0 9
37337: PPUSH
37338: LD_VAR 0 10
37342: PPUSH
37343: CALL_OW 488
37347: PUSH
37348: LD_VAR 0 9
37352: PUSH
37353: LD_VAR 0 10
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_VAR 0 7
37366: IN
37367: NOT
37368: AND
37369: PUSH
37370: LD_VAR 0 9
37374: PPUSH
37375: LD_VAR 0 10
37379: PPUSH
37380: CALL_OW 458
37384: NOT
37385: AND
37386: IFFALSE 37428
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37388: LD_ADDR_VAR 0 7
37392: PUSH
37393: LD_VAR 0 7
37397: PPUSH
37398: LD_VAR 0 7
37402: PUSH
37403: LD_INT 1
37405: PLUS
37406: PPUSH
37407: LD_VAR 0 9
37411: PUSH
37412: LD_VAR 0 10
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 1
37425: ST_TO_ADDR
37426: GO 37442
// i := i - 1 ;
37428: LD_ADDR_VAR 0 5
37432: PUSH
37433: LD_VAR 0 5
37437: PUSH
37438: LD_INT 1
37440: MINUS
37441: ST_TO_ADDR
// end ;
37442: GO 37248
37444: POP
37445: POP
// for i in tmp do
37446: LD_ADDR_VAR 0 5
37450: PUSH
37451: LD_VAR 0 7
37455: PUSH
37456: FOR_IN
37457: IFFALSE 37495
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37459: LD_VAR 0 1
37463: PPUSH
37464: LD_VAR 0 5
37468: PUSH
37469: LD_INT 1
37471: ARRAY
37472: PPUSH
37473: LD_VAR 0 5
37477: PUSH
37478: LD_INT 2
37480: ARRAY
37481: PPUSH
37482: CALL 36441 0 3
37486: NOT
37487: IFFALSE 37493
// exit ;
37489: POP
37490: POP
37491: GO 37497
37493: GO 37456
37495: POP
37496: POP
// end ;
37497: LD_VAR 0 4
37501: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37502: LD_INT 0
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
// if not GetClass ( unit ) = class_sniper then
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 257
37520: PUSH
37521: LD_INT 5
37523: EQUAL
37524: NOT
37525: IFFALSE 37529
// exit ;
37527: GO 37917
// dist := 8 ;
37529: LD_ADDR_VAR 0 5
37533: PUSH
37534: LD_INT 8
37536: ST_TO_ADDR
// viewRange := 12 ;
37537: LD_ADDR_VAR 0 7
37541: PUSH
37542: LD_INT 12
37544: ST_TO_ADDR
// side := GetSide ( unit ) ;
37545: LD_ADDR_VAR 0 6
37549: PUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 255
37559: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37560: LD_INT 61
37562: PPUSH
37563: LD_VAR 0 6
37567: PPUSH
37568: CALL_OW 321
37572: PUSH
37573: LD_INT 2
37575: EQUAL
37576: IFFALSE 37586
// viewRange := 16 ;
37578: LD_ADDR_VAR 0 7
37582: PUSH
37583: LD_INT 16
37585: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37586: LD_VAR 0 1
37590: PPUSH
37591: LD_VAR 0 2
37595: PPUSH
37596: LD_VAR 0 3
37600: PPUSH
37601: CALL_OW 297
37605: PUSH
37606: LD_VAR 0 5
37610: GREATER
37611: IFFALSE 37690
// begin ComMoveXY ( unit , x , y ) ;
37613: LD_VAR 0 1
37617: PPUSH
37618: LD_VAR 0 2
37622: PPUSH
37623: LD_VAR 0 3
37627: PPUSH
37628: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37632: LD_INT 35
37634: PPUSH
37635: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37639: LD_VAR 0 1
37643: PPUSH
37644: LD_VAR 0 2
37648: PPUSH
37649: LD_VAR 0 3
37653: PPUSH
37654: CALL 74024 0 3
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37917
// until GetDistUnitXY ( unit , x , y ) < dist ;
37663: LD_VAR 0 1
37667: PPUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: LD_VAR 0 3
37677: PPUSH
37678: CALL_OW 297
37682: PUSH
37683: LD_VAR 0 5
37687: LESS
37688: IFFALSE 37632
// end ; ComTurnXY ( unit , x , y ) ;
37690: LD_VAR 0 1
37694: PPUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: LD_VAR 0 3
37704: PPUSH
37705: CALL_OW 118
// wait ( 5 ) ;
37709: LD_INT 5
37711: PPUSH
37712: CALL_OW 67
// _d := GetDir ( unit ) ;
37716: LD_ADDR_VAR 0 10
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 254
37730: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37731: LD_ADDR_VAR 0 8
37735: PUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 250
37745: PPUSH
37746: LD_VAR 0 10
37750: PPUSH
37751: LD_VAR 0 5
37755: PPUSH
37756: CALL_OW 272
37760: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 251
37775: PPUSH
37776: LD_VAR 0 10
37780: PPUSH
37781: LD_VAR 0 5
37785: PPUSH
37786: CALL_OW 273
37790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37791: LD_VAR 0 8
37795: PPUSH
37796: LD_VAR 0 9
37800: PPUSH
37801: CALL_OW 488
37805: NOT
37806: IFFALSE 37810
// exit ;
37808: GO 37917
// ComAnimCustom ( unit , 1 ) ;
37810: LD_VAR 0 1
37814: PPUSH
37815: LD_INT 1
37817: PPUSH
37818: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37822: LD_VAR 0 8
37826: PPUSH
37827: LD_VAR 0 9
37831: PPUSH
37832: LD_VAR 0 6
37836: PPUSH
37837: LD_VAR 0 7
37841: PPUSH
37842: CALL_OW 330
// repeat wait ( 1 ) ;
37846: LD_INT 1
37848: PPUSH
37849: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 316
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 314
37872: OR
37873: PUSH
37874: LD_VAR 0 1
37878: PPUSH
37879: CALL_OW 302
37883: NOT
37884: OR
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL_OW 301
37895: OR
37896: IFFALSE 37846
// RemoveSeeing ( _x , _y , side ) ;
37898: LD_VAR 0 8
37902: PPUSH
37903: LD_VAR 0 9
37907: PPUSH
37908: LD_VAR 0 6
37912: PPUSH
37913: CALL_OW 331
// end ; end_of_file
37917: LD_VAR 0 4
37921: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37922: LD_INT 0
37924: PPUSH
37925: PPUSH
// if exist_mode then
37926: LD_VAR 0 2
37930: IFFALSE 37955
// unit := CreateCharacter ( prefix & ident ) else
37932: LD_ADDR_VAR 0 5
37936: PUSH
37937: LD_VAR 0 3
37941: PUSH
37942: LD_VAR 0 1
37946: STR
37947: PPUSH
37948: CALL_OW 34
37952: ST_TO_ADDR
37953: GO 37970
// unit := NewCharacter ( ident ) ;
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: LD_VAR 0 1
37964: PPUSH
37965: CALL_OW 25
37969: ST_TO_ADDR
// result := unit ;
37970: LD_ADDR_VAR 0 4
37974: PUSH
37975: LD_VAR 0 5
37979: ST_TO_ADDR
// end ;
37980: LD_VAR 0 4
37984: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37985: LD_INT 0
37987: PPUSH
37988: PPUSH
// if not side or not nation then
37989: LD_VAR 0 1
37993: NOT
37994: PUSH
37995: LD_VAR 0 2
37999: NOT
38000: OR
38001: IFFALSE 38005
// exit ;
38003: GO 38773
// case nation of nation_american :
38005: LD_VAR 0 2
38009: PUSH
38010: LD_INT 1
38012: DOUBLE
38013: EQUAL
38014: IFTRUE 38018
38016: GO 38232
38018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38019: LD_ADDR_VAR 0 4
38023: PUSH
38024: LD_INT 35
38026: PUSH
38027: LD_INT 45
38029: PUSH
38030: LD_INT 46
38032: PUSH
38033: LD_INT 47
38035: PUSH
38036: LD_INT 82
38038: PUSH
38039: LD_INT 83
38041: PUSH
38042: LD_INT 84
38044: PUSH
38045: LD_INT 85
38047: PUSH
38048: LD_INT 86
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 6
38059: PUSH
38060: LD_INT 15
38062: PUSH
38063: LD_INT 16
38065: PUSH
38066: LD_INT 7
38068: PUSH
38069: LD_INT 12
38071: PUSH
38072: LD_INT 13
38074: PUSH
38075: LD_INT 10
38077: PUSH
38078: LD_INT 14
38080: PUSH
38081: LD_INT 20
38083: PUSH
38084: LD_INT 21
38086: PUSH
38087: LD_INT 22
38089: PUSH
38090: LD_INT 25
38092: PUSH
38093: LD_INT 32
38095: PUSH
38096: LD_INT 27
38098: PUSH
38099: LD_INT 36
38101: PUSH
38102: LD_INT 69
38104: PUSH
38105: LD_INT 39
38107: PUSH
38108: LD_INT 34
38110: PUSH
38111: LD_INT 40
38113: PUSH
38114: LD_INT 48
38116: PUSH
38117: LD_INT 49
38119: PUSH
38120: LD_INT 50
38122: PUSH
38123: LD_INT 51
38125: PUSH
38126: LD_INT 52
38128: PUSH
38129: LD_INT 53
38131: PUSH
38132: LD_INT 54
38134: PUSH
38135: LD_INT 55
38137: PUSH
38138: LD_INT 56
38140: PUSH
38141: LD_INT 57
38143: PUSH
38144: LD_INT 58
38146: PUSH
38147: LD_INT 59
38149: PUSH
38150: LD_INT 60
38152: PUSH
38153: LD_INT 61
38155: PUSH
38156: LD_INT 62
38158: PUSH
38159: LD_INT 80
38161: PUSH
38162: LD_INT 82
38164: PUSH
38165: LD_INT 83
38167: PUSH
38168: LD_INT 84
38170: PUSH
38171: LD_INT 85
38173: PUSH
38174: LD_INT 86
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
38230: GO 38697
38232: LD_INT 2
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38466
38240: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: LD_INT 35
38248: PUSH
38249: LD_INT 45
38251: PUSH
38252: LD_INT 46
38254: PUSH
38255: LD_INT 47
38257: PUSH
38258: LD_INT 82
38260: PUSH
38261: LD_INT 83
38263: PUSH
38264: LD_INT 84
38266: PUSH
38267: LD_INT 85
38269: PUSH
38270: LD_INT 87
38272: PUSH
38273: LD_INT 70
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 11
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: LD_INT 4
38287: PUSH
38288: LD_INT 5
38290: PUSH
38291: LD_INT 6
38293: PUSH
38294: LD_INT 15
38296: PUSH
38297: LD_INT 18
38299: PUSH
38300: LD_INT 7
38302: PUSH
38303: LD_INT 17
38305: PUSH
38306: LD_INT 8
38308: PUSH
38309: LD_INT 20
38311: PUSH
38312: LD_INT 21
38314: PUSH
38315: LD_INT 22
38317: PUSH
38318: LD_INT 72
38320: PUSH
38321: LD_INT 26
38323: PUSH
38324: LD_INT 69
38326: PUSH
38327: LD_INT 39
38329: PUSH
38330: LD_INT 40
38332: PUSH
38333: LD_INT 41
38335: PUSH
38336: LD_INT 42
38338: PUSH
38339: LD_INT 43
38341: PUSH
38342: LD_INT 48
38344: PUSH
38345: LD_INT 49
38347: PUSH
38348: LD_INT 50
38350: PUSH
38351: LD_INT 51
38353: PUSH
38354: LD_INT 52
38356: PUSH
38357: LD_INT 53
38359: PUSH
38360: LD_INT 54
38362: PUSH
38363: LD_INT 55
38365: PUSH
38366: LD_INT 56
38368: PUSH
38369: LD_INT 60
38371: PUSH
38372: LD_INT 61
38374: PUSH
38375: LD_INT 62
38377: PUSH
38378: LD_INT 66
38380: PUSH
38381: LD_INT 67
38383: PUSH
38384: LD_INT 68
38386: PUSH
38387: LD_INT 81
38389: PUSH
38390: LD_INT 82
38392: PUSH
38393: LD_INT 83
38395: PUSH
38396: LD_INT 84
38398: PUSH
38399: LD_INT 85
38401: PUSH
38402: LD_INT 87
38404: PUSH
38405: LD_INT 88
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
38464: GO 38697
38466: LD_INT 3
38468: DOUBLE
38469: EQUAL
38470: IFTRUE 38474
38472: GO 38696
38474: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38475: LD_ADDR_VAR 0 4
38479: PUSH
38480: LD_INT 46
38482: PUSH
38483: LD_INT 47
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 82
38494: PUSH
38495: LD_INT 83
38497: PUSH
38498: LD_INT 84
38500: PUSH
38501: LD_INT 85
38503: PUSH
38504: LD_INT 86
38506: PUSH
38507: LD_INT 11
38509: PUSH
38510: LD_INT 9
38512: PUSH
38513: LD_INT 20
38515: PUSH
38516: LD_INT 19
38518: PUSH
38519: LD_INT 21
38521: PUSH
38522: LD_INT 24
38524: PUSH
38525: LD_INT 22
38527: PUSH
38528: LD_INT 25
38530: PUSH
38531: LD_INT 28
38533: PUSH
38534: LD_INT 29
38536: PUSH
38537: LD_INT 30
38539: PUSH
38540: LD_INT 31
38542: PUSH
38543: LD_INT 37
38545: PUSH
38546: LD_INT 38
38548: PUSH
38549: LD_INT 32
38551: PUSH
38552: LD_INT 27
38554: PUSH
38555: LD_INT 33
38557: PUSH
38558: LD_INT 69
38560: PUSH
38561: LD_INT 39
38563: PUSH
38564: LD_INT 34
38566: PUSH
38567: LD_INT 40
38569: PUSH
38570: LD_INT 71
38572: PUSH
38573: LD_INT 23
38575: PUSH
38576: LD_INT 44
38578: PUSH
38579: LD_INT 48
38581: PUSH
38582: LD_INT 49
38584: PUSH
38585: LD_INT 50
38587: PUSH
38588: LD_INT 51
38590: PUSH
38591: LD_INT 52
38593: PUSH
38594: LD_INT 53
38596: PUSH
38597: LD_INT 54
38599: PUSH
38600: LD_INT 55
38602: PUSH
38603: LD_INT 56
38605: PUSH
38606: LD_INT 57
38608: PUSH
38609: LD_INT 58
38611: PUSH
38612: LD_INT 59
38614: PUSH
38615: LD_INT 63
38617: PUSH
38618: LD_INT 64
38620: PUSH
38621: LD_INT 65
38623: PUSH
38624: LD_INT 82
38626: PUSH
38627: LD_INT 83
38629: PUSH
38630: LD_INT 84
38632: PUSH
38633: LD_INT 85
38635: PUSH
38636: LD_INT 86
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
38694: GO 38697
38696: POP
// if state > - 1 and state < 3 then
38697: LD_VAR 0 3
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: GREATER
38706: PUSH
38707: LD_VAR 0 3
38711: PUSH
38712: LD_INT 3
38714: LESS
38715: AND
38716: IFFALSE 38773
// for i in result do
38718: LD_ADDR_VAR 0 5
38722: PUSH
38723: LD_VAR 0 4
38727: PUSH
38728: FOR_IN
38729: IFFALSE 38771
// if GetTech ( i , side ) <> state then
38731: LD_VAR 0 5
38735: PPUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 321
38745: PUSH
38746: LD_VAR 0 3
38750: NONEQUAL
38751: IFFALSE 38769
// result := result diff i ;
38753: LD_ADDR_VAR 0 4
38757: PUSH
38758: LD_VAR 0 4
38762: PUSH
38763: LD_VAR 0 5
38767: DIFF
38768: ST_TO_ADDR
38769: GO 38728
38771: POP
38772: POP
// end ;
38773: LD_VAR 0 4
38777: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38778: LD_INT 0
38780: PPUSH
38781: PPUSH
38782: PPUSH
// result := true ;
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: LD_INT 1
38790: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38791: LD_ADDR_VAR 0 5
38795: PUSH
38796: LD_VAR 0 2
38800: PPUSH
38801: CALL_OW 480
38805: ST_TO_ADDR
// if not tmp then
38806: LD_VAR 0 5
38810: NOT
38811: IFFALSE 38815
// exit ;
38813: GO 38864
// for i in tmp do
38815: LD_ADDR_VAR 0 4
38819: PUSH
38820: LD_VAR 0 5
38824: PUSH
38825: FOR_IN
38826: IFFALSE 38862
// if GetTech ( i , side ) <> state_researched then
38828: LD_VAR 0 4
38832: PPUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL_OW 321
38842: PUSH
38843: LD_INT 2
38845: NONEQUAL
38846: IFFALSE 38860
// begin result := false ;
38848: LD_ADDR_VAR 0 3
38852: PUSH
38853: LD_INT 0
38855: ST_TO_ADDR
// exit ;
38856: POP
38857: POP
38858: GO 38864
// end ;
38860: GO 38825
38862: POP
38863: POP
// end ;
38864: LD_VAR 0 3
38868: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38869: LD_INT 0
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38884: LD_VAR 0 1
38888: NOT
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 257
38899: PUSH
38900: LD_INT 9
38902: NONEQUAL
38903: OR
38904: IFFALSE 38908
// exit ;
38906: GO 39481
// side := GetSide ( unit ) ;
38908: LD_ADDR_VAR 0 9
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 255
38922: ST_TO_ADDR
// tech_space := tech_spacanom ;
38923: LD_ADDR_VAR 0 12
38927: PUSH
38928: LD_INT 29
38930: ST_TO_ADDR
// tech_time := tech_taurad ;
38931: LD_ADDR_VAR 0 13
38935: PUSH
38936: LD_INT 28
38938: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38939: LD_ADDR_VAR 0 11
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 310
38953: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38954: LD_VAR 0 11
38958: PPUSH
38959: CALL_OW 247
38963: PUSH
38964: LD_INT 2
38966: EQUAL
38967: IFFALSE 38971
// exit ;
38969: GO 39481
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38971: LD_ADDR_VAR 0 8
38975: PUSH
38976: LD_INT 81
38978: PUSH
38979: LD_VAR 0 9
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 21
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PPUSH
39009: CALL_OW 69
39013: ST_TO_ADDR
// if not tmp then
39014: LD_VAR 0 8
39018: NOT
39019: IFFALSE 39023
// exit ;
39021: GO 39481
// if in_unit then
39023: LD_VAR 0 11
39027: IFFALSE 39051
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39029: LD_ADDR_VAR 0 10
39033: PUSH
39034: LD_VAR 0 8
39038: PPUSH
39039: LD_VAR 0 11
39043: PPUSH
39044: CALL_OW 74
39048: ST_TO_ADDR
39049: GO 39071
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39051: LD_ADDR_VAR 0 10
39055: PUSH
39056: LD_VAR 0 8
39060: PPUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 74
39070: ST_TO_ADDR
// if not enemy then
39071: LD_VAR 0 10
39075: NOT
39076: IFFALSE 39080
// exit ;
39078: GO 39481
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39080: LD_VAR 0 11
39084: PUSH
39085: LD_VAR 0 11
39089: PPUSH
39090: LD_VAR 0 10
39094: PPUSH
39095: CALL_OW 296
39099: PUSH
39100: LD_INT 13
39102: GREATER
39103: AND
39104: PUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: LD_VAR 0 10
39114: PPUSH
39115: CALL_OW 296
39119: PUSH
39120: LD_INT 12
39122: GREATER
39123: OR
39124: IFFALSE 39128
// exit ;
39126: GO 39481
// missile := [ 1 ] ;
39128: LD_ADDR_VAR 0 14
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39139: LD_VAR 0 9
39143: PPUSH
39144: LD_VAR 0 12
39148: PPUSH
39149: CALL_OW 325
39153: IFFALSE 39182
// missile := Replace ( missile , missile + 1 , 2 ) ;
39155: LD_ADDR_VAR 0 14
39159: PUSH
39160: LD_VAR 0 14
39164: PPUSH
39165: LD_VAR 0 14
39169: PUSH
39170: LD_INT 1
39172: PLUS
39173: PPUSH
39174: LD_INT 2
39176: PPUSH
39177: CALL_OW 1
39181: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39182: LD_VAR 0 9
39186: PPUSH
39187: LD_VAR 0 13
39191: PPUSH
39192: CALL_OW 325
39196: PUSH
39197: LD_VAR 0 10
39201: PPUSH
39202: CALL_OW 255
39206: PPUSH
39207: LD_VAR 0 13
39211: PPUSH
39212: CALL_OW 325
39216: NOT
39217: AND
39218: IFFALSE 39247
// missile := Replace ( missile , missile + 1 , 3 ) ;
39220: LD_ADDR_VAR 0 14
39224: PUSH
39225: LD_VAR 0 14
39229: PPUSH
39230: LD_VAR 0 14
39234: PUSH
39235: LD_INT 1
39237: PLUS
39238: PPUSH
39239: LD_INT 3
39241: PPUSH
39242: CALL_OW 1
39246: ST_TO_ADDR
// if missile < 2 then
39247: LD_VAR 0 14
39251: PUSH
39252: LD_INT 2
39254: LESS
39255: IFFALSE 39259
// exit ;
39257: GO 39481
// x := GetX ( enemy ) ;
39259: LD_ADDR_VAR 0 4
39263: PUSH
39264: LD_VAR 0 10
39268: PPUSH
39269: CALL_OW 250
39273: ST_TO_ADDR
// y := GetY ( enemy ) ;
39274: LD_ADDR_VAR 0 5
39278: PUSH
39279: LD_VAR 0 10
39283: PPUSH
39284: CALL_OW 251
39288: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39289: LD_ADDR_VAR 0 6
39293: PUSH
39294: LD_VAR 0 4
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PPUSH
39303: LD_INT 1
39305: PPUSH
39306: CALL_OW 12
39310: PLUS
39311: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39312: LD_ADDR_VAR 0 7
39316: PUSH
39317: LD_VAR 0 5
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PPUSH
39326: LD_INT 1
39328: PPUSH
39329: CALL_OW 12
39333: PLUS
39334: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39335: LD_VAR 0 6
39339: PPUSH
39340: LD_VAR 0 7
39344: PPUSH
39345: CALL_OW 488
39349: NOT
39350: IFFALSE 39372
// begin _x := x ;
39352: LD_ADDR_VAR 0 6
39356: PUSH
39357: LD_VAR 0 4
39361: ST_TO_ADDR
// _y := y ;
39362: LD_ADDR_VAR 0 7
39366: PUSH
39367: LD_VAR 0 5
39371: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39372: LD_ADDR_VAR 0 3
39376: PUSH
39377: LD_INT 1
39379: PPUSH
39380: LD_VAR 0 14
39384: PPUSH
39385: CALL_OW 12
39389: ST_TO_ADDR
// case i of 1 :
39390: LD_VAR 0 3
39394: PUSH
39395: LD_INT 1
39397: DOUBLE
39398: EQUAL
39399: IFTRUE 39403
39401: GO 39420
39403: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39404: LD_VAR 0 1
39408: PPUSH
39409: LD_VAR 0 10
39413: PPUSH
39414: CALL_OW 115
39418: GO 39481
39420: LD_INT 2
39422: DOUBLE
39423: EQUAL
39424: IFTRUE 39428
39426: GO 39450
39428: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39429: LD_VAR 0 1
39433: PPUSH
39434: LD_VAR 0 6
39438: PPUSH
39439: LD_VAR 0 7
39443: PPUSH
39444: CALL_OW 153
39448: GO 39481
39450: LD_INT 3
39452: DOUBLE
39453: EQUAL
39454: IFTRUE 39458
39456: GO 39480
39458: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39459: LD_VAR 0 1
39463: PPUSH
39464: LD_VAR 0 6
39468: PPUSH
39469: LD_VAR 0 7
39473: PPUSH
39474: CALL_OW 154
39478: GO 39481
39480: POP
// end ;
39481: LD_VAR 0 2
39485: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
// if not unit or not building then
39494: LD_VAR 0 1
39498: NOT
39499: PUSH
39500: LD_VAR 0 2
39504: NOT
39505: OR
39506: IFFALSE 39510
// exit ;
39508: GO 39668
// x := GetX ( building ) ;
39510: LD_ADDR_VAR 0 5
39514: PUSH
39515: LD_VAR 0 2
39519: PPUSH
39520: CALL_OW 250
39524: ST_TO_ADDR
// y := GetY ( building ) ;
39525: LD_ADDR_VAR 0 6
39529: PUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: CALL_OW 251
39539: ST_TO_ADDR
// for i = 0 to 5 do
39540: LD_ADDR_VAR 0 4
39544: PUSH
39545: DOUBLE
39546: LD_INT 0
39548: DEC
39549: ST_TO_ADDR
39550: LD_INT 5
39552: PUSH
39553: FOR_TO
39554: IFFALSE 39666
// begin _x := ShiftX ( x , i , 3 ) ;
39556: LD_ADDR_VAR 0 7
39560: PUSH
39561: LD_VAR 0 5
39565: PPUSH
39566: LD_VAR 0 4
39570: PPUSH
39571: LD_INT 3
39573: PPUSH
39574: CALL_OW 272
39578: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39579: LD_ADDR_VAR 0 8
39583: PUSH
39584: LD_VAR 0 6
39588: PPUSH
39589: LD_VAR 0 4
39593: PPUSH
39594: LD_INT 3
39596: PPUSH
39597: CALL_OW 273
39601: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39602: LD_VAR 0 7
39606: PPUSH
39607: LD_VAR 0 8
39611: PPUSH
39612: CALL_OW 488
39616: NOT
39617: IFFALSE 39621
// continue ;
39619: GO 39553
// if HexInfo ( _x , _y ) = 0 then
39621: LD_VAR 0 7
39625: PPUSH
39626: LD_VAR 0 8
39630: PPUSH
39631: CALL_OW 428
39635: PUSH
39636: LD_INT 0
39638: EQUAL
39639: IFFALSE 39664
// begin ComMoveXY ( unit , _x , _y ) ;
39641: LD_VAR 0 1
39645: PPUSH
39646: LD_VAR 0 7
39650: PPUSH
39651: LD_VAR 0 8
39655: PPUSH
39656: CALL_OW 111
// exit ;
39660: POP
39661: POP
39662: GO 39668
// end ; end ;
39664: GO 39553
39666: POP
39667: POP
// end ;
39668: LD_VAR 0 3
39672: RET
// export function ScanBase ( side , base_area ) ; begin
39673: LD_INT 0
39675: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39676: LD_ADDR_VAR 0 3
39680: PUSH
39681: LD_VAR 0 2
39685: PPUSH
39686: LD_INT 81
39688: PUSH
39689: LD_VAR 0 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PPUSH
39698: CALL_OW 70
39702: ST_TO_ADDR
// end ;
39703: LD_VAR 0 3
39707: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39708: LD_INT 0
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
// result := false ;
39714: LD_ADDR_VAR 0 2
39718: PUSH
39719: LD_INT 0
39721: ST_TO_ADDR
// side := GetSide ( unit ) ;
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 255
39736: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39737: LD_ADDR_VAR 0 4
39741: PUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 248
39751: ST_TO_ADDR
// case nat of 1 :
39752: LD_VAR 0 4
39756: PUSH
39757: LD_INT 1
39759: DOUBLE
39760: EQUAL
39761: IFTRUE 39765
39763: GO 39776
39765: POP
// tech := tech_lassight ; 2 :
39766: LD_ADDR_VAR 0 5
39770: PUSH
39771: LD_INT 12
39773: ST_TO_ADDR
39774: GO 39815
39776: LD_INT 2
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39795
39784: POP
// tech := tech_mortar ; 3 :
39785: LD_ADDR_VAR 0 5
39789: PUSH
39790: LD_INT 41
39792: ST_TO_ADDR
39793: GO 39815
39795: LD_INT 3
39797: DOUBLE
39798: EQUAL
39799: IFTRUE 39803
39801: GO 39814
39803: POP
// tech := tech_bazooka ; end ;
39804: LD_ADDR_VAR 0 5
39808: PUSH
39809: LD_INT 44
39811: ST_TO_ADDR
39812: GO 39815
39814: POP
// if Researched ( side , tech ) then
39815: LD_VAR 0 3
39819: PPUSH
39820: LD_VAR 0 5
39824: PPUSH
39825: CALL_OW 325
39829: IFFALSE 39856
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39831: LD_ADDR_VAR 0 2
39835: PUSH
39836: LD_INT 5
39838: PUSH
39839: LD_INT 8
39841: PUSH
39842: LD_INT 9
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: PUSH
39850: LD_VAR 0 4
39854: ARRAY
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 2
39860: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
// if not mines then
39866: LD_VAR 0 2
39870: NOT
39871: IFFALSE 39875
// exit ;
39873: GO 40019
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39875: LD_ADDR_VAR 0 5
39879: PUSH
39880: LD_INT 81
39882: PUSH
39883: LD_VAR 0 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: LD_INT 21
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PPUSH
39913: CALL_OW 69
39917: ST_TO_ADDR
// for i in mines do
39918: LD_ADDR_VAR 0 4
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: FOR_IN
39929: IFFALSE 40017
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39931: LD_VAR 0 4
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PPUSH
39940: LD_VAR 0 4
39944: PUSH
39945: LD_INT 2
39947: ARRAY
39948: PPUSH
39949: CALL_OW 458
39953: NOT
39954: IFFALSE 39958
// continue ;
39956: GO 39928
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39958: LD_VAR 0 4
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 4
39971: PUSH
39972: LD_INT 2
39974: ARRAY
39975: PPUSH
39976: CALL_OW 428
39980: PUSH
39981: LD_VAR 0 5
39985: IN
39986: IFFALSE 40015
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39988: LD_VAR 0 4
39992: PUSH
39993: LD_INT 1
39995: ARRAY
39996: PPUSH
39997: LD_VAR 0 4
40001: PUSH
40002: LD_INT 2
40004: ARRAY
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 456
// end ;
40015: GO 39928
40017: POP
40018: POP
// end ;
40019: LD_VAR 0 3
40023: RET
// export function Count ( array ) ; begin
40024: LD_INT 0
40026: PPUSH
// result := array + 0 ;
40027: LD_ADDR_VAR 0 2
40031: PUSH
40032: LD_VAR 0 1
40036: PUSH
40037: LD_INT 0
40039: PLUS
40040: ST_TO_ADDR
// end ;
40041: LD_VAR 0 2
40045: RET
// export function IsEmpty ( building ) ; begin
40046: LD_INT 0
40048: PPUSH
// if not building then
40049: LD_VAR 0 1
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40101
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40058: LD_ADDR_VAR 0 2
40062: PUSH
40063: LD_VAR 0 1
40067: PUSH
40068: LD_INT 22
40070: PUSH
40071: LD_VAR 0 1
40075: PPUSH
40076: CALL_OW 255
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 58
40087: PUSH
40088: EMPTY
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PPUSH
40095: CALL_OW 69
40099: IN
40100: ST_TO_ADDR
// end ;
40101: LD_VAR 0 2
40105: RET
// export function IsNotFull ( building ) ; var places ; begin
40106: LD_INT 0
40108: PPUSH
40109: PPUSH
// if not building then
40110: LD_VAR 0 1
40114: NOT
40115: IFFALSE 40119
// exit ;
40117: GO 40147
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40119: LD_ADDR_VAR 0 2
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: LD_INT 3
40131: PUSH
40132: LD_INT 62
40134: PUSH
40135: EMPTY
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PPUSH
40142: CALL_OW 72
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 2
40151: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
// tmp := [ ] ;
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: EMPTY
40164: ST_TO_ADDR
// list := [ ] ;
40165: LD_ADDR_VAR 0 5
40169: PUSH
40170: EMPTY
40171: ST_TO_ADDR
// for i = 16 to 25 do
40172: LD_ADDR_VAR 0 4
40176: PUSH
40177: DOUBLE
40178: LD_INT 16
40180: DEC
40181: ST_TO_ADDR
40182: LD_INT 25
40184: PUSH
40185: FOR_TO
40186: IFFALSE 40259
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40188: LD_ADDR_VAR 0 3
40192: PUSH
40193: LD_VAR 0 3
40197: PUSH
40198: LD_INT 22
40200: PUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 255
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 91
40217: PUSH
40218: LD_VAR 0 1
40222: PUSH
40223: LD_INT 6
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 30
40233: PUSH
40234: LD_VAR 0 4
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: PPUSH
40251: CALL_OW 69
40255: ADD
40256: ST_TO_ADDR
40257: GO 40185
40259: POP
40260: POP
// for i = 1 to tmp do
40261: LD_ADDR_VAR 0 4
40265: PUSH
40266: DOUBLE
40267: LD_INT 1
40269: DEC
40270: ST_TO_ADDR
40271: LD_VAR 0 3
40275: PUSH
40276: FOR_TO
40277: IFFALSE 40365
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40279: LD_ADDR_VAR 0 5
40283: PUSH
40284: LD_VAR 0 5
40288: PUSH
40289: LD_VAR 0 3
40293: PUSH
40294: LD_VAR 0 4
40298: ARRAY
40299: PPUSH
40300: CALL_OW 266
40304: PUSH
40305: LD_VAR 0 3
40309: PUSH
40310: LD_VAR 0 4
40314: ARRAY
40315: PPUSH
40316: CALL_OW 250
40320: PUSH
40321: LD_VAR 0 3
40325: PUSH
40326: LD_VAR 0 4
40330: ARRAY
40331: PPUSH
40332: CALL_OW 251
40336: PUSH
40337: LD_VAR 0 3
40341: PUSH
40342: LD_VAR 0 4
40346: ARRAY
40347: PPUSH
40348: CALL_OW 254
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: ADD
40362: ST_TO_ADDR
40363: GO 40276
40365: POP
40366: POP
// result := list ;
40367: LD_ADDR_VAR 0 2
40371: PUSH
40372: LD_VAR 0 5
40376: ST_TO_ADDR
// end ;
40377: LD_VAR 0 2
40381: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40382: LD_INT 0
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
// if not factory then
40391: LD_VAR 0 1
40395: NOT
40396: IFFALSE 40400
// exit ;
40398: GO 40993
// if control = control_apeman then
40400: LD_VAR 0 4
40404: PUSH
40405: LD_INT 5
40407: EQUAL
40408: IFFALSE 40517
// begin tmp := UnitsInside ( factory ) ;
40410: LD_ADDR_VAR 0 8
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 313
40424: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40425: LD_VAR 0 8
40429: PPUSH
40430: LD_INT 25
40432: PUSH
40433: LD_INT 12
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PPUSH
40440: CALL_OW 72
40444: NOT
40445: IFFALSE 40455
// control := control_manual ;
40447: LD_ADDR_VAR 0 4
40451: PUSH
40452: LD_INT 1
40454: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40455: LD_ADDR_VAR 0 8
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL 40152 0 1
40469: ST_TO_ADDR
// if tmp then
40470: LD_VAR 0 8
40474: IFFALSE 40517
// begin for i in tmp do
40476: LD_ADDR_VAR 0 7
40480: PUSH
40481: LD_VAR 0 8
40485: PUSH
40486: FOR_IN
40487: IFFALSE 40515
// if i [ 1 ] = b_ext_radio then
40489: LD_VAR 0 7
40493: PUSH
40494: LD_INT 1
40496: ARRAY
40497: PUSH
40498: LD_INT 22
40500: EQUAL
40501: IFFALSE 40513
// begin control := control_remote ;
40503: LD_ADDR_VAR 0 4
40507: PUSH
40508: LD_INT 2
40510: ST_TO_ADDR
// break ;
40511: GO 40515
// end ;
40513: GO 40486
40515: POP
40516: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_VAR 0 2
40526: PPUSH
40527: LD_VAR 0 3
40531: PPUSH
40532: LD_VAR 0 4
40536: PPUSH
40537: LD_VAR 0 5
40541: PPUSH
40542: CALL_OW 448
40546: IFFALSE 40581
// begin result := [ chassis , engine , control , weapon ] ;
40548: LD_ADDR_VAR 0 6
40552: PUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_VAR 0 3
40562: PUSH
40563: LD_VAR 0 4
40567: PUSH
40568: LD_VAR 0 5
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: ST_TO_ADDR
// exit ;
40579: GO 40993
// end ; _chassis := AvailableChassisList ( factory ) ;
40581: LD_ADDR_VAR 0 9
40585: PUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: CALL_OW 475
40595: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40596: LD_ADDR_VAR 0 11
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 476
40610: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40611: LD_ADDR_VAR 0 12
40615: PUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 477
40625: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40626: LD_ADDR_VAR 0 10
40630: PUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: CALL_OW 478
40640: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40641: LD_VAR 0 9
40645: NOT
40646: PUSH
40647: LD_VAR 0 11
40651: NOT
40652: OR
40653: PUSH
40654: LD_VAR 0 12
40658: NOT
40659: OR
40660: PUSH
40661: LD_VAR 0 10
40665: NOT
40666: OR
40667: IFFALSE 40702
// begin result := [ chassis , engine , control , weapon ] ;
40669: LD_ADDR_VAR 0 6
40673: PUSH
40674: LD_VAR 0 2
40678: PUSH
40679: LD_VAR 0 3
40683: PUSH
40684: LD_VAR 0 4
40688: PUSH
40689: LD_VAR 0 5
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// exit ;
40700: GO 40993
// end ; if not chassis in _chassis then
40702: LD_VAR 0 2
40706: PUSH
40707: LD_VAR 0 9
40711: IN
40712: NOT
40713: IFFALSE 40739
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40715: LD_ADDR_VAR 0 2
40719: PUSH
40720: LD_VAR 0 9
40724: PUSH
40725: LD_INT 1
40727: PPUSH
40728: LD_VAR 0 9
40732: PPUSH
40733: CALL_OW 12
40737: ARRAY
40738: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40739: LD_VAR 0 2
40743: PPUSH
40744: LD_VAR 0 3
40748: PPUSH
40749: CALL 40998 0 2
40753: NOT
40754: IFFALSE 40813
// repeat engine := _engine [ 1 ] ;
40756: LD_ADDR_VAR 0 3
40760: PUSH
40761: LD_VAR 0 11
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40770: LD_ADDR_VAR 0 11
40774: PUSH
40775: LD_VAR 0 11
40779: PPUSH
40780: LD_INT 1
40782: PPUSH
40783: CALL_OW 3
40787: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: CALL 40998 0 2
40802: PUSH
40803: LD_VAR 0 11
40807: PUSH
40808: EMPTY
40809: EQUAL
40810: OR
40811: IFFALSE 40756
// if not control in _control then
40813: LD_VAR 0 4
40817: PUSH
40818: LD_VAR 0 12
40822: IN
40823: NOT
40824: IFFALSE 40850
// control := _control [ rand ( 1 , _control ) ] ;
40826: LD_ADDR_VAR 0 4
40830: PUSH
40831: LD_VAR 0 12
40835: PUSH
40836: LD_INT 1
40838: PPUSH
40839: LD_VAR 0 12
40843: PPUSH
40844: CALL_OW 12
40848: ARRAY
40849: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40850: LD_VAR 0 2
40854: PPUSH
40855: LD_VAR 0 5
40859: PPUSH
40860: CALL 41218 0 2
40864: NOT
40865: IFFALSE 40924
// repeat weapon := _weapon [ 1 ] ;
40867: LD_ADDR_VAR 0 5
40871: PUSH
40872: LD_VAR 0 10
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40881: LD_ADDR_VAR 0 10
40885: PUSH
40886: LD_VAR 0 10
40890: PPUSH
40891: LD_INT 1
40893: PPUSH
40894: CALL_OW 3
40898: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40899: LD_VAR 0 2
40903: PPUSH
40904: LD_VAR 0 5
40908: PPUSH
40909: CALL 41218 0 2
40913: PUSH
40914: LD_VAR 0 10
40918: PUSH
40919: EMPTY
40920: EQUAL
40921: OR
40922: IFFALSE 40867
// result := [ ] ;
40924: LD_ADDR_VAR 0 6
40928: PUSH
40929: EMPTY
40930: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40931: LD_VAR 0 1
40935: PPUSH
40936: LD_VAR 0 2
40940: PPUSH
40941: LD_VAR 0 3
40945: PPUSH
40946: LD_VAR 0 4
40950: PPUSH
40951: LD_VAR 0 5
40955: PPUSH
40956: CALL_OW 448
40960: IFFALSE 40993
// result := [ chassis , engine , control , weapon ] ;
40962: LD_ADDR_VAR 0 6
40966: PUSH
40967: LD_VAR 0 2
40971: PUSH
40972: LD_VAR 0 3
40976: PUSH
40977: LD_VAR 0 4
40981: PUSH
40982: LD_VAR 0 5
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: ST_TO_ADDR
// end ;
40993: LD_VAR 0 6
40997: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40998: LD_INT 0
41000: PPUSH
// if not chassis or not engine then
41001: LD_VAR 0 1
41005: NOT
41006: PUSH
41007: LD_VAR 0 2
41011: NOT
41012: OR
41013: IFFALSE 41017
// exit ;
41015: GO 41213
// case engine of engine_solar :
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 2
41024: DOUBLE
41025: EQUAL
41026: IFTRUE 41030
41028: GO 41068
41030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41031: LD_ADDR_VAR 0 3
41035: PUSH
41036: LD_INT 11
41038: PUSH
41039: LD_INT 12
41041: PUSH
41042: LD_INT 13
41044: PUSH
41045: LD_INT 14
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: ST_TO_ADDR
41066: GO 41197
41068: LD_INT 1
41070: DOUBLE
41071: EQUAL
41072: IFTRUE 41076
41074: GO 41138
41076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 11
41084: PUSH
41085: LD_INT 12
41087: PUSH
41088: LD_INT 13
41090: PUSH
41091: LD_INT 14
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: LD_INT 4
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: LD_INT 21
41111: PUSH
41112: LD_INT 23
41114: PUSH
41115: LD_INT 22
41117: PUSH
41118: LD_INT 24
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
41136: GO 41197
41138: LD_INT 3
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41196
41146: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 13
41154: PUSH
41155: LD_INT 14
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 3
41163: PUSH
41164: LD_INT 4
41166: PUSH
41167: LD_INT 5
41169: PUSH
41170: LD_INT 21
41172: PUSH
41173: LD_INT 22
41175: PUSH
41176: LD_INT 23
41178: PUSH
41179: LD_INT 24
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: ST_TO_ADDR
41194: GO 41197
41196: POP
// result := ( chassis in result ) ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_VAR 0 1
41206: PUSH
41207: LD_VAR 0 3
41211: IN
41212: ST_TO_ADDR
// end ;
41213: LD_VAR 0 3
41217: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41218: LD_INT 0
41220: PPUSH
// if not chassis or not weapon then
41221: LD_VAR 0 1
41225: NOT
41226: PUSH
41227: LD_VAR 0 2
41231: NOT
41232: OR
41233: IFFALSE 41237
// exit ;
41235: GO 42297
// case weapon of us_machine_gun :
41237: LD_VAR 0 2
41241: PUSH
41242: LD_INT 2
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41280
41250: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 3
41264: PUSH
41265: LD_INT 4
41267: PUSH
41268: LD_INT 5
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: ST_TO_ADDR
41278: GO 42281
41280: LD_INT 3
41282: DOUBLE
41283: EQUAL
41284: IFTRUE 41288
41286: GO 41318
41288: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41289: LD_ADDR_VAR 0 3
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: LD_INT 4
41305: PUSH
41306: LD_INT 5
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: ST_TO_ADDR
41316: GO 42281
41318: LD_INT 11
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41326
41324: GO 41356
41326: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41327: LD_ADDR_VAR 0 3
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: LD_INT 5
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
41354: GO 42281
41356: LD_INT 4
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41390
41364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: LD_INT 4
41378: PUSH
41379: LD_INT 5
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: ST_TO_ADDR
41388: GO 42281
41390: LD_INT 5
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41424
41398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: ST_TO_ADDR
41422: GO 42281
41424: LD_INT 9
41426: DOUBLE
41427: EQUAL
41428: IFTRUE 41432
41430: GO 41458
41432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41433: LD_ADDR_VAR 0 3
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 4
41446: PUSH
41447: LD_INT 5
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: ST_TO_ADDR
41456: GO 42281
41458: LD_INT 7
41460: DOUBLE
41461: EQUAL
41462: IFTRUE 41466
41464: GO 41492
41466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41467: LD_ADDR_VAR 0 3
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 4
41480: PUSH
41481: LD_INT 5
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: ST_TO_ADDR
41490: GO 42281
41492: LD_INT 12
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41500
41498: GO 41526
41500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: LD_INT 4
41514: PUSH
41515: LD_INT 5
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
41524: GO 42281
41526: LD_INT 13
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41534
41532: GO 41560
41534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 4
41548: PUSH
41549: LD_INT 5
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
41558: GO 42281
41560: LD_INT 14
41562: DOUBLE
41563: EQUAL
41564: IFTRUE 41568
41566: GO 41586
41568: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41569: LD_ADDR_VAR 0 3
41573: PUSH
41574: LD_INT 4
41576: PUSH
41577: LD_INT 5
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: ST_TO_ADDR
41584: GO 42281
41586: LD_INT 6
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41612
41594: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 5
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: ST_TO_ADDR
41610: GO 42281
41612: LD_INT 10
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41620
41618: GO 41638
41620: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_INT 4
41628: PUSH
41629: LD_INT 5
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: ST_TO_ADDR
41636: GO 42281
41638: LD_INT 22
41640: DOUBLE
41641: EQUAL
41642: IFTRUE 41646
41644: GO 41672
41646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41647: LD_ADDR_VAR 0 3
41651: PUSH
41652: LD_INT 11
41654: PUSH
41655: LD_INT 12
41657: PUSH
41658: LD_INT 13
41660: PUSH
41661: LD_INT 14
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
41670: GO 42281
41672: LD_INT 23
41674: DOUBLE
41675: EQUAL
41676: IFTRUE 41680
41678: GO 41706
41680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: LD_INT 11
41688: PUSH
41689: LD_INT 12
41691: PUSH
41692: LD_INT 13
41694: PUSH
41695: LD_INT 14
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
41704: GO 42281
41706: LD_INT 24
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41740
41714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_INT 11
41722: PUSH
41723: LD_INT 12
41725: PUSH
41726: LD_INT 13
41728: PUSH
41729: LD_INT 14
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: ST_TO_ADDR
41738: GO 42281
41740: LD_INT 30
41742: DOUBLE
41743: EQUAL
41744: IFTRUE 41748
41746: GO 41774
41748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41749: LD_ADDR_VAR 0 3
41753: PUSH
41754: LD_INT 11
41756: PUSH
41757: LD_INT 12
41759: PUSH
41760: LD_INT 13
41762: PUSH
41763: LD_INT 14
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: ST_TO_ADDR
41772: GO 42281
41774: LD_INT 25
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41782
41780: GO 41800
41782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41783: LD_ADDR_VAR 0 3
41787: PUSH
41788: LD_INT 13
41790: PUSH
41791: LD_INT 14
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: ST_TO_ADDR
41798: GO 42281
41800: LD_INT 27
41802: DOUBLE
41803: EQUAL
41804: IFTRUE 41808
41806: GO 41826
41808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41809: LD_ADDR_VAR 0 3
41813: PUSH
41814: LD_INT 13
41816: PUSH
41817: LD_INT 14
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: ST_TO_ADDR
41824: GO 42281
41826: LD_INT 92
41828: DOUBLE
41829: EQUAL
41830: IFTRUE 41834
41832: GO 41860
41834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41835: LD_ADDR_VAR 0 3
41839: PUSH
41840: LD_INT 11
41842: PUSH
41843: LD_INT 12
41845: PUSH
41846: LD_INT 13
41848: PUSH
41849: LD_INT 14
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
41858: GO 42281
41860: LD_INT 28
41862: DOUBLE
41863: EQUAL
41864: IFTRUE 41868
41866: GO 41886
41868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_INT 13
41876: PUSH
41877: LD_INT 14
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: ST_TO_ADDR
41884: GO 42281
41886: LD_INT 29
41888: DOUBLE
41889: EQUAL
41890: IFTRUE 41894
41892: GO 41912
41894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41895: LD_ADDR_VAR 0 3
41899: PUSH
41900: LD_INT 13
41902: PUSH
41903: LD_INT 14
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: ST_TO_ADDR
41910: GO 42281
41912: LD_INT 31
41914: DOUBLE
41915: EQUAL
41916: IFTRUE 41920
41918: GO 41938
41920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: LD_INT 13
41928: PUSH
41929: LD_INT 14
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: ST_TO_ADDR
41936: GO 42281
41938: LD_INT 26
41940: DOUBLE
41941: EQUAL
41942: IFTRUE 41946
41944: GO 41964
41946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41947: LD_ADDR_VAR 0 3
41951: PUSH
41952: LD_INT 13
41954: PUSH
41955: LD_INT 14
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: ST_TO_ADDR
41962: GO 42281
41964: LD_INT 42
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 41998
41972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41973: LD_ADDR_VAR 0 3
41977: PUSH
41978: LD_INT 21
41980: PUSH
41981: LD_INT 22
41983: PUSH
41984: LD_INT 23
41986: PUSH
41987: LD_INT 24
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: ST_TO_ADDR
41996: GO 42281
41998: LD_INT 43
42000: DOUBLE
42001: EQUAL
42002: IFTRUE 42006
42004: GO 42032
42006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42007: LD_ADDR_VAR 0 3
42011: PUSH
42012: LD_INT 21
42014: PUSH
42015: LD_INT 22
42017: PUSH
42018: LD_INT 23
42020: PUSH
42021: LD_INT 24
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
42030: GO 42281
42032: LD_INT 44
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42066
42040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42041: LD_ADDR_VAR 0 3
42045: PUSH
42046: LD_INT 21
42048: PUSH
42049: LD_INT 22
42051: PUSH
42052: LD_INT 23
42054: PUSH
42055: LD_INT 24
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
42064: GO 42281
42066: LD_INT 45
42068: DOUBLE
42069: EQUAL
42070: IFTRUE 42074
42072: GO 42100
42074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42075: LD_ADDR_VAR 0 3
42079: PUSH
42080: LD_INT 21
42082: PUSH
42083: LD_INT 22
42085: PUSH
42086: LD_INT 23
42088: PUSH
42089: LD_INT 24
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
42098: GO 42281
42100: LD_INT 49
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42108
42106: GO 42134
42108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_INT 21
42116: PUSH
42117: LD_INT 22
42119: PUSH
42120: LD_INT 23
42122: PUSH
42123: LD_INT 24
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
42132: GO 42281
42134: LD_INT 51
42136: DOUBLE
42137: EQUAL
42138: IFTRUE 42142
42140: GO 42168
42142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42143: LD_ADDR_VAR 0 3
42147: PUSH
42148: LD_INT 21
42150: PUSH
42151: LD_INT 22
42153: PUSH
42154: LD_INT 23
42156: PUSH
42157: LD_INT 24
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
42166: GO 42281
42168: LD_INT 52
42170: DOUBLE
42171: EQUAL
42172: IFTRUE 42176
42174: GO 42202
42176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 21
42184: PUSH
42185: LD_INT 22
42187: PUSH
42188: LD_INT 23
42190: PUSH
42191: LD_INT 24
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
42200: GO 42281
42202: LD_INT 53
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42210
42208: GO 42228
42210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_INT 23
42218: PUSH
42219: LD_INT 24
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: ST_TO_ADDR
42226: GO 42281
42228: LD_INT 46
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 42254
42236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_INT 23
42244: PUSH
42245: LD_INT 24
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: ST_TO_ADDR
42252: GO 42281
42254: LD_INT 47
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42262
42260: GO 42280
42262: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 23
42270: PUSH
42271: LD_INT 24
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: ST_TO_ADDR
42278: GO 42281
42280: POP
// result := ( chassis in result ) ;
42281: LD_ADDR_VAR 0 3
42285: PUSH
42286: LD_VAR 0 1
42290: PUSH
42291: LD_VAR 0 3
42295: IN
42296: ST_TO_ADDR
// end ;
42297: LD_VAR 0 3
42301: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
// result := array ;
42311: LD_ADDR_VAR 0 5
42315: PUSH
42316: LD_VAR 0 1
42320: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42321: LD_VAR 0 1
42325: NOT
42326: PUSH
42327: LD_VAR 0 2
42331: NOT
42332: OR
42333: PUSH
42334: LD_VAR 0 3
42338: NOT
42339: OR
42340: PUSH
42341: LD_VAR 0 2
42345: PUSH
42346: LD_VAR 0 1
42350: GREATER
42351: OR
42352: PUSH
42353: LD_VAR 0 3
42357: PUSH
42358: LD_VAR 0 1
42362: GREATER
42363: OR
42364: IFFALSE 42368
// exit ;
42366: GO 42664
// if direction then
42368: LD_VAR 0 4
42372: IFFALSE 42436
// begin d := 1 ;
42374: LD_ADDR_VAR 0 9
42378: PUSH
42379: LD_INT 1
42381: ST_TO_ADDR
// if i_from > i_to then
42382: LD_VAR 0 2
42386: PUSH
42387: LD_VAR 0 3
42391: GREATER
42392: IFFALSE 42418
// length := ( array - i_from ) + i_to else
42394: LD_ADDR_VAR 0 11
42398: PUSH
42399: LD_VAR 0 1
42403: PUSH
42404: LD_VAR 0 2
42408: MINUS
42409: PUSH
42410: LD_VAR 0 3
42414: PLUS
42415: ST_TO_ADDR
42416: GO 42434
// length := i_to - i_from ;
42418: LD_ADDR_VAR 0 11
42422: PUSH
42423: LD_VAR 0 3
42427: PUSH
42428: LD_VAR 0 2
42432: MINUS
42433: ST_TO_ADDR
// end else
42434: GO 42497
// begin d := - 1 ;
42436: LD_ADDR_VAR 0 9
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: ST_TO_ADDR
// if i_from > i_to then
42445: LD_VAR 0 2
42449: PUSH
42450: LD_VAR 0 3
42454: GREATER
42455: IFFALSE 42475
// length := i_from - i_to else
42457: LD_ADDR_VAR 0 11
42461: PUSH
42462: LD_VAR 0 2
42466: PUSH
42467: LD_VAR 0 3
42471: MINUS
42472: ST_TO_ADDR
42473: GO 42497
// length := ( array - i_to ) + i_from ;
42475: LD_ADDR_VAR 0 11
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: LD_VAR 0 3
42489: MINUS
42490: PUSH
42491: LD_VAR 0 2
42495: PLUS
42496: ST_TO_ADDR
// end ; if not length then
42497: LD_VAR 0 11
42501: NOT
42502: IFFALSE 42506
// exit ;
42504: GO 42664
// tmp := array ;
42506: LD_ADDR_VAR 0 10
42510: PUSH
42511: LD_VAR 0 1
42515: ST_TO_ADDR
// for i = 1 to length do
42516: LD_ADDR_VAR 0 6
42520: PUSH
42521: DOUBLE
42522: LD_INT 1
42524: DEC
42525: ST_TO_ADDR
42526: LD_VAR 0 11
42530: PUSH
42531: FOR_TO
42532: IFFALSE 42652
// begin for j = 1 to array do
42534: LD_ADDR_VAR 0 7
42538: PUSH
42539: DOUBLE
42540: LD_INT 1
42542: DEC
42543: ST_TO_ADDR
42544: LD_VAR 0 1
42548: PUSH
42549: FOR_TO
42550: IFFALSE 42638
// begin k := j + d ;
42552: LD_ADDR_VAR 0 8
42556: PUSH
42557: LD_VAR 0 7
42561: PUSH
42562: LD_VAR 0 9
42566: PLUS
42567: ST_TO_ADDR
// if k > array then
42568: LD_VAR 0 8
42572: PUSH
42573: LD_VAR 0 1
42577: GREATER
42578: IFFALSE 42588
// k := 1 ;
42580: LD_ADDR_VAR 0 8
42584: PUSH
42585: LD_INT 1
42587: ST_TO_ADDR
// if not k then
42588: LD_VAR 0 8
42592: NOT
42593: IFFALSE 42605
// k := array ;
42595: LD_ADDR_VAR 0 8
42599: PUSH
42600: LD_VAR 0 1
42604: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42605: LD_ADDR_VAR 0 10
42609: PUSH
42610: LD_VAR 0 10
42614: PPUSH
42615: LD_VAR 0 8
42619: PPUSH
42620: LD_VAR 0 1
42624: PUSH
42625: LD_VAR 0 7
42629: ARRAY
42630: PPUSH
42631: CALL_OW 1
42635: ST_TO_ADDR
// end ;
42636: GO 42549
42638: POP
42639: POP
// array := tmp ;
42640: LD_ADDR_VAR 0 1
42644: PUSH
42645: LD_VAR 0 10
42649: ST_TO_ADDR
// end ;
42650: GO 42531
42652: POP
42653: POP
// result := array ;
42654: LD_ADDR_VAR 0 5
42658: PUSH
42659: LD_VAR 0 1
42663: ST_TO_ADDR
// end ;
42664: LD_VAR 0 5
42668: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42669: LD_INT 0
42671: PPUSH
42672: PPUSH
// result := 0 ;
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_INT 0
42680: ST_TO_ADDR
// if not array or not value in array then
42681: LD_VAR 0 1
42685: NOT
42686: PUSH
42687: LD_VAR 0 2
42691: PUSH
42692: LD_VAR 0 1
42696: IN
42697: NOT
42698: OR
42699: IFFALSE 42703
// exit ;
42701: GO 42757
// for i = 1 to array do
42703: LD_ADDR_VAR 0 4
42707: PUSH
42708: DOUBLE
42709: LD_INT 1
42711: DEC
42712: ST_TO_ADDR
42713: LD_VAR 0 1
42717: PUSH
42718: FOR_TO
42719: IFFALSE 42755
// if value = array [ i ] then
42721: LD_VAR 0 2
42725: PUSH
42726: LD_VAR 0 1
42730: PUSH
42731: LD_VAR 0 4
42735: ARRAY
42736: EQUAL
42737: IFFALSE 42753
// begin result := i ;
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 4
42748: ST_TO_ADDR
// exit ;
42749: POP
42750: POP
42751: GO 42757
// end ;
42753: GO 42718
42755: POP
42756: POP
// end ;
42757: LD_VAR 0 3
42761: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42762: LD_INT 0
42764: PPUSH
// vc_chassis := chassis ;
42765: LD_ADDR_OWVAR 37
42769: PUSH
42770: LD_VAR 0 1
42774: ST_TO_ADDR
// vc_engine := engine ;
42775: LD_ADDR_OWVAR 39
42779: PUSH
42780: LD_VAR 0 2
42784: ST_TO_ADDR
// vc_control := control ;
42785: LD_ADDR_OWVAR 38
42789: PUSH
42790: LD_VAR 0 3
42794: ST_TO_ADDR
// vc_weapon := weapon ;
42795: LD_ADDR_OWVAR 40
42799: PUSH
42800: LD_VAR 0 4
42804: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42805: LD_ADDR_OWVAR 41
42809: PUSH
42810: LD_VAR 0 5
42814: ST_TO_ADDR
// end ;
42815: LD_VAR 0 6
42819: RET
// export function WantPlant ( unit ) ; var task ; begin
42820: LD_INT 0
42822: PPUSH
42823: PPUSH
// result := false ;
42824: LD_ADDR_VAR 0 2
42828: PUSH
42829: LD_INT 0
42831: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42832: LD_ADDR_VAR 0 3
42836: PUSH
42837: LD_VAR 0 1
42841: PPUSH
42842: CALL_OW 437
42846: ST_TO_ADDR
// if task then
42847: LD_VAR 0 3
42851: IFFALSE 42879
// if task [ 1 ] [ 1 ] = p then
42853: LD_VAR 0 3
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: PUSH
42862: LD_INT 1
42864: ARRAY
42865: PUSH
42866: LD_STRING p
42868: EQUAL
42869: IFFALSE 42879
// result := true ;
42871: LD_ADDR_VAR 0 2
42875: PUSH
42876: LD_INT 1
42878: ST_TO_ADDR
// end ;
42879: LD_VAR 0 2
42883: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42884: LD_INT 0
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
// if pos < 1 then
42890: LD_VAR 0 2
42894: PUSH
42895: LD_INT 1
42897: LESS
42898: IFFALSE 42902
// exit ;
42900: GO 43205
// if pos = 1 then
42902: LD_VAR 0 2
42906: PUSH
42907: LD_INT 1
42909: EQUAL
42910: IFFALSE 42943
// result := Replace ( arr , pos [ 1 ] , value ) else
42912: LD_ADDR_VAR 0 4
42916: PUSH
42917: LD_VAR 0 1
42921: PPUSH
42922: LD_VAR 0 2
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: PPUSH
42931: LD_VAR 0 3
42935: PPUSH
42936: CALL_OW 1
42940: ST_TO_ADDR
42941: GO 43205
// begin tmp := arr ;
42943: LD_ADDR_VAR 0 6
42947: PUSH
42948: LD_VAR 0 1
42952: ST_TO_ADDR
// s_arr := [ tmp ] ;
42953: LD_ADDR_VAR 0 7
42957: PUSH
42958: LD_VAR 0 6
42962: PUSH
42963: EMPTY
42964: LIST
42965: ST_TO_ADDR
// for i = 1 to pos - 1 do
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: DOUBLE
42972: LD_INT 1
42974: DEC
42975: ST_TO_ADDR
42976: LD_VAR 0 2
42980: PUSH
42981: LD_INT 1
42983: MINUS
42984: PUSH
42985: FOR_TO
42986: IFFALSE 43031
// begin tmp := tmp [ pos [ i ] ] ;
42988: LD_ADDR_VAR 0 6
42992: PUSH
42993: LD_VAR 0 6
42997: PUSH
42998: LD_VAR 0 2
43002: PUSH
43003: LD_VAR 0 5
43007: ARRAY
43008: ARRAY
43009: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43010: LD_ADDR_VAR 0 7
43014: PUSH
43015: LD_VAR 0 7
43019: PUSH
43020: LD_VAR 0 6
43024: PUSH
43025: EMPTY
43026: LIST
43027: ADD
43028: ST_TO_ADDR
// end ;
43029: GO 42985
43031: POP
43032: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43033: LD_ADDR_VAR 0 6
43037: PUSH
43038: LD_VAR 0 6
43042: PPUSH
43043: LD_VAR 0 2
43047: PUSH
43048: LD_VAR 0 2
43052: ARRAY
43053: PPUSH
43054: LD_VAR 0 3
43058: PPUSH
43059: CALL_OW 1
43063: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43064: LD_ADDR_VAR 0 7
43068: PUSH
43069: LD_VAR 0 7
43073: PPUSH
43074: LD_VAR 0 7
43078: PPUSH
43079: LD_VAR 0 6
43083: PPUSH
43084: CALL_OW 1
43088: ST_TO_ADDR
// for i = s_arr downto 2 do
43089: LD_ADDR_VAR 0 5
43093: PUSH
43094: DOUBLE
43095: LD_VAR 0 7
43099: INC
43100: ST_TO_ADDR
43101: LD_INT 2
43103: PUSH
43104: FOR_DOWNTO
43105: IFFALSE 43189
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43107: LD_ADDR_VAR 0 6
43111: PUSH
43112: LD_VAR 0 7
43116: PUSH
43117: LD_VAR 0 5
43121: PUSH
43122: LD_INT 1
43124: MINUS
43125: ARRAY
43126: PPUSH
43127: LD_VAR 0 2
43131: PUSH
43132: LD_VAR 0 5
43136: PUSH
43137: LD_INT 1
43139: MINUS
43140: ARRAY
43141: PPUSH
43142: LD_VAR 0 7
43146: PUSH
43147: LD_VAR 0 5
43151: ARRAY
43152: PPUSH
43153: CALL_OW 1
43157: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43158: LD_ADDR_VAR 0 7
43162: PUSH
43163: LD_VAR 0 7
43167: PPUSH
43168: LD_VAR 0 5
43172: PUSH
43173: LD_INT 1
43175: MINUS
43176: PPUSH
43177: LD_VAR 0 6
43181: PPUSH
43182: CALL_OW 1
43186: ST_TO_ADDR
// end ;
43187: GO 43104
43189: POP
43190: POP
// result := s_arr [ 1 ] ;
43191: LD_ADDR_VAR 0 4
43195: PUSH
43196: LD_VAR 0 7
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: ST_TO_ADDR
// end ; end ;
43205: LD_VAR 0 4
43209: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43210: LD_INT 0
43212: PPUSH
43213: PPUSH
// if not list then
43214: LD_VAR 0 1
43218: NOT
43219: IFFALSE 43223
// exit ;
43221: GO 43314
// i := list [ pos1 ] ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: LD_VAR 0 1
43232: PUSH
43233: LD_VAR 0 2
43237: ARRAY
43238: ST_TO_ADDR
// if not i then
43239: LD_VAR 0 5
43243: NOT
43244: IFFALSE 43248
// exit ;
43246: GO 43314
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43248: LD_ADDR_VAR 0 1
43252: PUSH
43253: LD_VAR 0 1
43257: PPUSH
43258: LD_VAR 0 2
43262: PPUSH
43263: LD_VAR 0 1
43267: PUSH
43268: LD_VAR 0 3
43272: ARRAY
43273: PPUSH
43274: CALL_OW 1
43278: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43279: LD_ADDR_VAR 0 1
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: LD_VAR 0 3
43293: PPUSH
43294: LD_VAR 0 5
43298: PPUSH
43299: CALL_OW 1
43303: ST_TO_ADDR
// result := list ;
43304: LD_ADDR_VAR 0 4
43308: PUSH
43309: LD_VAR 0 1
43313: ST_TO_ADDR
// end ;
43314: LD_VAR 0 4
43318: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43319: LD_INT 0
43321: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: CALL_OW 250
43336: PPUSH
43337: LD_VAR 0 1
43341: PPUSH
43342: CALL_OW 251
43346: PPUSH
43347: LD_VAR 0 2
43351: PPUSH
43352: LD_VAR 0 3
43356: PPUSH
43357: LD_VAR 0 4
43361: PPUSH
43362: CALL 43372 0 5
43366: ST_TO_ADDR
// end ;
43367: LD_VAR 0 5
43371: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43372: LD_INT 0
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
// if not list then
43378: LD_VAR 0 3
43382: NOT
43383: IFFALSE 43387
// exit ;
43385: GO 43775
// result := [ ] ;
43387: LD_ADDR_VAR 0 6
43391: PUSH
43392: EMPTY
43393: ST_TO_ADDR
// for i in list do
43394: LD_ADDR_VAR 0 7
43398: PUSH
43399: LD_VAR 0 3
43403: PUSH
43404: FOR_IN
43405: IFFALSE 43607
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43407: LD_ADDR_VAR 0 9
43411: PUSH
43412: LD_VAR 0 7
43416: PPUSH
43417: LD_VAR 0 1
43421: PPUSH
43422: LD_VAR 0 2
43426: PPUSH
43427: CALL_OW 297
43431: ST_TO_ADDR
// if not result then
43432: LD_VAR 0 6
43436: NOT
43437: IFFALSE 43463
// result := [ [ i , tmp ] ] else
43439: LD_ADDR_VAR 0 6
43443: PUSH
43444: LD_VAR 0 7
43448: PUSH
43449: LD_VAR 0 9
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: ST_TO_ADDR
43461: GO 43605
// begin if result [ result ] [ 2 ] < tmp then
43463: LD_VAR 0 6
43467: PUSH
43468: LD_VAR 0 6
43472: ARRAY
43473: PUSH
43474: LD_INT 2
43476: ARRAY
43477: PUSH
43478: LD_VAR 0 9
43482: LESS
43483: IFFALSE 43525
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43485: LD_ADDR_VAR 0 6
43489: PUSH
43490: LD_VAR 0 6
43494: PPUSH
43495: LD_VAR 0 6
43499: PUSH
43500: LD_INT 1
43502: PLUS
43503: PPUSH
43504: LD_VAR 0 7
43508: PUSH
43509: LD_VAR 0 9
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PPUSH
43518: CALL_OW 2
43522: ST_TO_ADDR
43523: GO 43605
// for j = 1 to result do
43525: LD_ADDR_VAR 0 8
43529: PUSH
43530: DOUBLE
43531: LD_INT 1
43533: DEC
43534: ST_TO_ADDR
43535: LD_VAR 0 6
43539: PUSH
43540: FOR_TO
43541: IFFALSE 43603
// begin if tmp < result [ j ] [ 2 ] then
43543: LD_VAR 0 9
43547: PUSH
43548: LD_VAR 0 6
43552: PUSH
43553: LD_VAR 0 8
43557: ARRAY
43558: PUSH
43559: LD_INT 2
43561: ARRAY
43562: LESS
43563: IFFALSE 43601
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43565: LD_ADDR_VAR 0 6
43569: PUSH
43570: LD_VAR 0 6
43574: PPUSH
43575: LD_VAR 0 8
43579: PPUSH
43580: LD_VAR 0 7
43584: PUSH
43585: LD_VAR 0 9
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PPUSH
43594: CALL_OW 2
43598: ST_TO_ADDR
// break ;
43599: GO 43603
// end ; end ;
43601: GO 43540
43603: POP
43604: POP
// end ; end ;
43605: GO 43404
43607: POP
43608: POP
// if result and not asc then
43609: LD_VAR 0 6
43613: PUSH
43614: LD_VAR 0 4
43618: NOT
43619: AND
43620: IFFALSE 43695
// begin tmp := result ;
43622: LD_ADDR_VAR 0 9
43626: PUSH
43627: LD_VAR 0 6
43631: ST_TO_ADDR
// for i = tmp downto 1 do
43632: LD_ADDR_VAR 0 7
43636: PUSH
43637: DOUBLE
43638: LD_VAR 0 9
43642: INC
43643: ST_TO_ADDR
43644: LD_INT 1
43646: PUSH
43647: FOR_DOWNTO
43648: IFFALSE 43693
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43650: LD_ADDR_VAR 0 6
43654: PUSH
43655: LD_VAR 0 6
43659: PPUSH
43660: LD_VAR 0 9
43664: PUSH
43665: LD_VAR 0 7
43669: MINUS
43670: PUSH
43671: LD_INT 1
43673: PLUS
43674: PPUSH
43675: LD_VAR 0 9
43679: PUSH
43680: LD_VAR 0 7
43684: ARRAY
43685: PPUSH
43686: CALL_OW 1
43690: ST_TO_ADDR
43691: GO 43647
43693: POP
43694: POP
// end ; tmp := [ ] ;
43695: LD_ADDR_VAR 0 9
43699: PUSH
43700: EMPTY
43701: ST_TO_ADDR
// if mode then
43702: LD_VAR 0 5
43706: IFFALSE 43775
// begin for i = 1 to result do
43708: LD_ADDR_VAR 0 7
43712: PUSH
43713: DOUBLE
43714: LD_INT 1
43716: DEC
43717: ST_TO_ADDR
43718: LD_VAR 0 6
43722: PUSH
43723: FOR_TO
43724: IFFALSE 43763
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43726: LD_ADDR_VAR 0 9
43730: PUSH
43731: LD_VAR 0 9
43735: PPUSH
43736: LD_VAR 0 7
43740: PPUSH
43741: LD_VAR 0 6
43745: PUSH
43746: LD_VAR 0 7
43750: ARRAY
43751: PUSH
43752: LD_INT 1
43754: ARRAY
43755: PPUSH
43756: CALL_OW 1
43760: ST_TO_ADDR
43761: GO 43723
43763: POP
43764: POP
// result := tmp ;
43765: LD_ADDR_VAR 0 6
43769: PUSH
43770: LD_VAR 0 9
43774: ST_TO_ADDR
// end ; end ;
43775: LD_VAR 0 6
43779: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43780: LD_INT 0
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43788: LD_ADDR_VAR 0 5
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: ST_TO_ADDR
// if not x or not y then
43810: LD_VAR 0 2
43814: NOT
43815: PUSH
43816: LD_VAR 0 3
43820: NOT
43821: OR
43822: IFFALSE 43826
// exit ;
43824: GO 45476
// if not range then
43826: LD_VAR 0 4
43830: NOT
43831: IFFALSE 43841
// range := 10 ;
43833: LD_ADDR_VAR 0 4
43837: PUSH
43838: LD_INT 10
43840: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43841: LD_ADDR_VAR 0 8
43845: PUSH
43846: LD_INT 81
43848: PUSH
43849: LD_VAR 0 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 92
43860: PUSH
43861: LD_VAR 0 2
43865: PUSH
43866: LD_VAR 0 3
43870: PUSH
43871: LD_VAR 0 4
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 21
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: PPUSH
43904: CALL_OW 69
43908: ST_TO_ADDR
// if not tmp then
43909: LD_VAR 0 8
43913: NOT
43914: IFFALSE 43918
// exit ;
43916: GO 45476
// for i in tmp do
43918: LD_ADDR_VAR 0 6
43922: PUSH
43923: LD_VAR 0 8
43927: PUSH
43928: FOR_IN
43929: IFFALSE 45451
// begin points := [ 0 , 0 , 0 ] ;
43931: LD_ADDR_VAR 0 9
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// bpoints := 1 ;
43950: LD_ADDR_VAR 0 10
43954: PUSH
43955: LD_INT 1
43957: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43958: LD_VAR 0 6
43962: PPUSH
43963: CALL_OW 247
43967: PUSH
43968: LD_INT 1
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43976
43974: GO 44554
43976: POP
// begin if GetClass ( i ) = 1 then
43977: LD_VAR 0 6
43981: PPUSH
43982: CALL_OW 257
43986: PUSH
43987: LD_INT 1
43989: EQUAL
43990: IFFALSE 44011
// points := [ 10 , 5 , 3 ] ;
43992: LD_ADDR_VAR 0 9
43996: PUSH
43997: LD_INT 10
43999: PUSH
44000: LD_INT 5
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44011: LD_VAR 0 6
44015: PPUSH
44016: CALL_OW 257
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 4
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: IN
44035: IFFALSE 44056
// points := [ 3 , 2 , 1 ] ;
44037: LD_ADDR_VAR 0 9
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44056: LD_VAR 0 6
44060: PPUSH
44061: CALL_OW 257
44065: PUSH
44066: LD_INT 5
44068: EQUAL
44069: IFFALSE 44090
// points := [ 130 , 5 , 2 ] ;
44071: LD_ADDR_VAR 0 9
44075: PUSH
44076: LD_INT 130
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44090: LD_VAR 0 6
44094: PPUSH
44095: CALL_OW 257
44099: PUSH
44100: LD_INT 8
44102: EQUAL
44103: IFFALSE 44124
// points := [ 35 , 35 , 30 ] ;
44105: LD_ADDR_VAR 0 9
44109: PUSH
44110: LD_INT 35
44112: PUSH
44113: LD_INT 35
44115: PUSH
44116: LD_INT 30
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44124: LD_VAR 0 6
44128: PPUSH
44129: CALL_OW 257
44133: PUSH
44134: LD_INT 9
44136: EQUAL
44137: IFFALSE 44158
// points := [ 20 , 55 , 40 ] ;
44139: LD_ADDR_VAR 0 9
44143: PUSH
44144: LD_INT 20
44146: PUSH
44147: LD_INT 55
44149: PUSH
44150: LD_INT 40
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44158: LD_VAR 0 6
44162: PPUSH
44163: CALL_OW 257
44167: PUSH
44168: LD_INT 12
44170: PUSH
44171: LD_INT 16
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: IN
44178: IFFALSE 44199
// points := [ 5 , 3 , 2 ] ;
44180: LD_ADDR_VAR 0 9
44184: PUSH
44185: LD_INT 5
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44199: LD_VAR 0 6
44203: PPUSH
44204: CALL_OW 257
44208: PUSH
44209: LD_INT 17
44211: EQUAL
44212: IFFALSE 44233
// points := [ 100 , 50 , 75 ] ;
44214: LD_ADDR_VAR 0 9
44218: PUSH
44219: LD_INT 100
44221: PUSH
44222: LD_INT 50
44224: PUSH
44225: LD_INT 75
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44233: LD_VAR 0 6
44237: PPUSH
44238: CALL_OW 257
44242: PUSH
44243: LD_INT 15
44245: EQUAL
44246: IFFALSE 44267
// points := [ 10 , 5 , 3 ] ;
44248: LD_ADDR_VAR 0 9
44252: PUSH
44253: LD_INT 10
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44267: LD_VAR 0 6
44271: PPUSH
44272: CALL_OW 257
44276: PUSH
44277: LD_INT 14
44279: EQUAL
44280: IFFALSE 44301
// points := [ 10 , 0 , 0 ] ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_INT 10
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44301: LD_VAR 0 6
44305: PPUSH
44306: CALL_OW 257
44310: PUSH
44311: LD_INT 11
44313: EQUAL
44314: IFFALSE 44335
// points := [ 30 , 10 , 5 ] ;
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_INT 30
44323: PUSH
44324: LD_INT 10
44326: PUSH
44327: LD_INT 5
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44335: LD_VAR 0 1
44339: PPUSH
44340: LD_INT 5
44342: PPUSH
44343: CALL_OW 321
44347: PUSH
44348: LD_INT 2
44350: EQUAL
44351: IFFALSE 44368
// bpoints := bpoints * 1.8 ;
44353: LD_ADDR_VAR 0 10
44357: PUSH
44358: LD_VAR 0 10
44362: PUSH
44363: LD_REAL  1.80000000000000E+0000
44366: MUL
44367: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44368: LD_VAR 0 6
44372: PPUSH
44373: CALL_OW 257
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: LD_INT 4
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: IN
44396: PUSH
44397: LD_VAR 0 1
44401: PPUSH
44402: LD_INT 51
44404: PPUSH
44405: CALL_OW 321
44409: PUSH
44410: LD_INT 2
44412: EQUAL
44413: AND
44414: IFFALSE 44431
// bpoints := bpoints * 1.2 ;
44416: LD_ADDR_VAR 0 10
44420: PUSH
44421: LD_VAR 0 10
44425: PUSH
44426: LD_REAL  1.20000000000000E+0000
44429: MUL
44430: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44431: LD_VAR 0 6
44435: PPUSH
44436: CALL_OW 257
44440: PUSH
44441: LD_INT 5
44443: PUSH
44444: LD_INT 7
44446: PUSH
44447: LD_INT 9
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: IN
44455: PUSH
44456: LD_VAR 0 1
44460: PPUSH
44461: LD_INT 52
44463: PPUSH
44464: CALL_OW 321
44468: PUSH
44469: LD_INT 2
44471: EQUAL
44472: AND
44473: IFFALSE 44490
// bpoints := bpoints * 1.5 ;
44475: LD_ADDR_VAR 0 10
44479: PUSH
44480: LD_VAR 0 10
44484: PUSH
44485: LD_REAL  1.50000000000000E+0000
44488: MUL
44489: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_INT 66
44497: PPUSH
44498: CALL_OW 321
44502: PUSH
44503: LD_INT 2
44505: EQUAL
44506: IFFALSE 44523
// bpoints := bpoints * 1.1 ;
44508: LD_ADDR_VAR 0 10
44512: PUSH
44513: LD_VAR 0 10
44517: PUSH
44518: LD_REAL  1.10000000000000E+0000
44521: MUL
44522: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44523: LD_ADDR_VAR 0 10
44527: PUSH
44528: LD_VAR 0 10
44532: PUSH
44533: LD_VAR 0 6
44537: PPUSH
44538: LD_INT 1
44540: PPUSH
44541: CALL_OW 259
44545: PUSH
44546: LD_REAL  1.15000000000000E+0000
44549: MUL
44550: MUL
44551: ST_TO_ADDR
// end ; unit_vehicle :
44552: GO 45380
44554: LD_INT 2
44556: DOUBLE
44557: EQUAL
44558: IFTRUE 44562
44560: GO 45368
44562: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44563: LD_VAR 0 6
44567: PPUSH
44568: CALL_OW 264
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 42
44578: PUSH
44579: LD_INT 24
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: IN
44587: IFFALSE 44608
// points := [ 25 , 5 , 3 ] ;
44589: LD_ADDR_VAR 0 9
44593: PUSH
44594: LD_INT 25
44596: PUSH
44597: LD_INT 5
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 264
44617: PUSH
44618: LD_INT 4
44620: PUSH
44621: LD_INT 43
44623: PUSH
44624: LD_INT 25
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: IN
44632: IFFALSE 44653
// points := [ 40 , 15 , 5 ] ;
44634: LD_ADDR_VAR 0 9
44638: PUSH
44639: LD_INT 40
44641: PUSH
44642: LD_INT 15
44644: PUSH
44645: LD_INT 5
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44653: LD_VAR 0 6
44657: PPUSH
44658: CALL_OW 264
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 23
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: IN
44673: IFFALSE 44694
// points := [ 7 , 25 , 8 ] ;
44675: LD_ADDR_VAR 0 9
44679: PUSH
44680: LD_INT 7
44682: PUSH
44683: LD_INT 25
44685: PUSH
44686: LD_INT 8
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44694: LD_VAR 0 6
44698: PPUSH
44699: CALL_OW 264
44703: PUSH
44704: LD_INT 5
44706: PUSH
44707: LD_INT 27
44709: PUSH
44710: LD_INT 44
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: IN
44718: IFFALSE 44739
// points := [ 14 , 50 , 16 ] ;
44720: LD_ADDR_VAR 0 9
44724: PUSH
44725: LD_INT 14
44727: PUSH
44728: LD_INT 50
44730: PUSH
44731: LD_INT 16
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44739: LD_VAR 0 6
44743: PPUSH
44744: CALL_OW 264
44748: PUSH
44749: LD_INT 6
44751: PUSH
44752: LD_INT 46
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: IN
44759: IFFALSE 44780
// points := [ 32 , 120 , 70 ] ;
44761: LD_ADDR_VAR 0 9
44765: PUSH
44766: LD_INT 32
44768: PUSH
44769: LD_INT 120
44771: PUSH
44772: LD_INT 70
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44780: LD_VAR 0 6
44784: PPUSH
44785: CALL_OW 264
44789: PUSH
44790: LD_INT 7
44792: PUSH
44793: LD_INT 28
44795: PUSH
44796: LD_INT 45
44798: PUSH
44799: LD_INT 92
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: IN
44808: IFFALSE 44829
// points := [ 35 , 20 , 45 ] ;
44810: LD_ADDR_VAR 0 9
44814: PUSH
44815: LD_INT 35
44817: PUSH
44818: LD_INT 20
44820: PUSH
44821: LD_INT 45
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44829: LD_VAR 0 6
44833: PPUSH
44834: CALL_OW 264
44838: PUSH
44839: LD_INT 47
44841: PUSH
44842: EMPTY
44843: LIST
44844: IN
44845: IFFALSE 44866
// points := [ 67 , 45 , 75 ] ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 67
44854: PUSH
44855: LD_INT 45
44857: PUSH
44858: LD_INT 75
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44866: LD_VAR 0 6
44870: PPUSH
44871: CALL_OW 264
44875: PUSH
44876: LD_INT 26
44878: PUSH
44879: EMPTY
44880: LIST
44881: IN
44882: IFFALSE 44903
// points := [ 120 , 30 , 80 ] ;
44884: LD_ADDR_VAR 0 9
44888: PUSH
44889: LD_INT 120
44891: PUSH
44892: LD_INT 30
44894: PUSH
44895: LD_INT 80
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 264
44912: PUSH
44913: LD_INT 22
44915: PUSH
44916: EMPTY
44917: LIST
44918: IN
44919: IFFALSE 44940
// points := [ 40 , 1 , 1 ] ;
44921: LD_ADDR_VAR 0 9
44925: PUSH
44926: LD_INT 40
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44940: LD_VAR 0 6
44944: PPUSH
44945: CALL_OW 264
44949: PUSH
44950: LD_INT 29
44952: PUSH
44953: EMPTY
44954: LIST
44955: IN
44956: IFFALSE 44977
// points := [ 70 , 200 , 400 ] ;
44958: LD_ADDR_VAR 0 9
44962: PUSH
44963: LD_INT 70
44965: PUSH
44966: LD_INT 200
44968: PUSH
44969: LD_INT 400
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44977: LD_VAR 0 6
44981: PPUSH
44982: CALL_OW 264
44986: PUSH
44987: LD_INT 14
44989: PUSH
44990: LD_INT 53
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: IN
44997: IFFALSE 45018
// points := [ 40 , 10 , 20 ] ;
44999: LD_ADDR_VAR 0 9
45003: PUSH
45004: LD_INT 40
45006: PUSH
45007: LD_INT 10
45009: PUSH
45010: LD_INT 20
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45018: LD_VAR 0 6
45022: PPUSH
45023: CALL_OW 264
45027: PUSH
45028: LD_INT 9
45030: PUSH
45031: EMPTY
45032: LIST
45033: IN
45034: IFFALSE 45055
// points := [ 5 , 70 , 20 ] ;
45036: LD_ADDR_VAR 0 9
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 70
45046: PUSH
45047: LD_INT 20
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45055: LD_VAR 0 6
45059: PPUSH
45060: CALL_OW 264
45064: PUSH
45065: LD_INT 10
45067: PUSH
45068: EMPTY
45069: LIST
45070: IN
45071: IFFALSE 45092
// points := [ 35 , 110 , 70 ] ;
45073: LD_ADDR_VAR 0 9
45077: PUSH
45078: LD_INT 35
45080: PUSH
45081: LD_INT 110
45083: PUSH
45084: LD_INT 70
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45092: LD_VAR 0 6
45096: PPUSH
45097: CALL_OW 265
45101: PUSH
45102: LD_INT 25
45104: EQUAL
45105: IFFALSE 45126
// points := [ 80 , 65 , 100 ] ;
45107: LD_ADDR_VAR 0 9
45111: PUSH
45112: LD_INT 80
45114: PUSH
45115: LD_INT 65
45117: PUSH
45118: LD_INT 100
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45126: LD_VAR 0 6
45130: PPUSH
45131: CALL_OW 263
45135: PUSH
45136: LD_INT 1
45138: EQUAL
45139: IFFALSE 45174
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45141: LD_ADDR_VAR 0 10
45145: PUSH
45146: LD_VAR 0 10
45150: PUSH
45151: LD_VAR 0 6
45155: PPUSH
45156: CALL_OW 311
45160: PPUSH
45161: LD_INT 3
45163: PPUSH
45164: CALL_OW 259
45168: PUSH
45169: LD_INT 4
45171: MUL
45172: MUL
45173: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45174: LD_VAR 0 6
45178: PPUSH
45179: CALL_OW 263
45183: PUSH
45184: LD_INT 2
45186: EQUAL
45187: IFFALSE 45238
// begin j := IsControledBy ( i ) ;
45189: LD_ADDR_VAR 0 7
45193: PUSH
45194: LD_VAR 0 6
45198: PPUSH
45199: CALL_OW 312
45203: ST_TO_ADDR
// if j then
45204: LD_VAR 0 7
45208: IFFALSE 45238
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45210: LD_ADDR_VAR 0 10
45214: PUSH
45215: LD_VAR 0 10
45219: PUSH
45220: LD_VAR 0 7
45224: PPUSH
45225: LD_INT 3
45227: PPUSH
45228: CALL_OW 259
45232: PUSH
45233: LD_INT 3
45235: MUL
45236: MUL
45237: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45238: LD_VAR 0 6
45242: PPUSH
45243: CALL_OW 264
45247: PUSH
45248: LD_INT 5
45250: PUSH
45251: LD_INT 6
45253: PUSH
45254: LD_INT 46
45256: PUSH
45257: LD_INT 44
45259: PUSH
45260: LD_INT 47
45262: PUSH
45263: LD_INT 45
45265: PUSH
45266: LD_INT 28
45268: PUSH
45269: LD_INT 7
45271: PUSH
45272: LD_INT 27
45274: PUSH
45275: LD_INT 29
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: IN
45290: PUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_INT 52
45298: PPUSH
45299: CALL_OW 321
45303: PUSH
45304: LD_INT 2
45306: EQUAL
45307: AND
45308: IFFALSE 45325
// bpoints := bpoints * 1.2 ;
45310: LD_ADDR_VAR 0 10
45314: PUSH
45315: LD_VAR 0 10
45319: PUSH
45320: LD_REAL  1.20000000000000E+0000
45323: MUL
45324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45325: LD_VAR 0 6
45329: PPUSH
45330: CALL_OW 264
45334: PUSH
45335: LD_INT 6
45337: PUSH
45338: LD_INT 46
45340: PUSH
45341: LD_INT 47
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: IN
45349: IFFALSE 45366
// bpoints := bpoints * 1.2 ;
45351: LD_ADDR_VAR 0 10
45355: PUSH
45356: LD_VAR 0 10
45360: PUSH
45361: LD_REAL  1.20000000000000E+0000
45364: MUL
45365: ST_TO_ADDR
// end ; unit_building :
45366: GO 45380
45368: LD_INT 3
45370: DOUBLE
45371: EQUAL
45372: IFTRUE 45376
45374: GO 45379
45376: POP
// ; end ;
45377: GO 45380
45379: POP
// for j = 1 to 3 do
45380: LD_ADDR_VAR 0 7
45384: PUSH
45385: DOUBLE
45386: LD_INT 1
45388: DEC
45389: ST_TO_ADDR
45390: LD_INT 3
45392: PUSH
45393: FOR_TO
45394: IFFALSE 45447
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_VAR 0 5
45405: PPUSH
45406: LD_VAR 0 7
45410: PPUSH
45411: LD_VAR 0 5
45415: PUSH
45416: LD_VAR 0 7
45420: ARRAY
45421: PUSH
45422: LD_VAR 0 9
45426: PUSH
45427: LD_VAR 0 7
45431: ARRAY
45432: PUSH
45433: LD_VAR 0 10
45437: MUL
45438: PLUS
45439: PPUSH
45440: CALL_OW 1
45444: ST_TO_ADDR
45445: GO 45393
45447: POP
45448: POP
// end ;
45449: GO 43928
45451: POP
45452: POP
// result := Replace ( result , 4 , tmp ) ;
45453: LD_ADDR_VAR 0 5
45457: PUSH
45458: LD_VAR 0 5
45462: PPUSH
45463: LD_INT 4
45465: PPUSH
45466: LD_VAR 0 8
45470: PPUSH
45471: CALL_OW 1
45475: ST_TO_ADDR
// end ;
45476: LD_VAR 0 5
45480: RET
// export function DangerAtRange ( unit , range ) ; begin
45481: LD_INT 0
45483: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45484: LD_ADDR_VAR 0 3
45488: PUSH
45489: LD_VAR 0 1
45493: PPUSH
45494: CALL_OW 255
45498: PPUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 250
45508: PPUSH
45509: LD_VAR 0 1
45513: PPUSH
45514: CALL_OW 251
45518: PPUSH
45519: LD_VAR 0 2
45523: PPUSH
45524: CALL 43780 0 4
45528: ST_TO_ADDR
// end ;
45529: LD_VAR 0 3
45533: RET
// export function DangerInArea ( side , area ) ; begin
45534: LD_INT 0
45536: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45537: LD_ADDR_VAR 0 3
45541: PUSH
45542: LD_VAR 0 2
45546: PPUSH
45547: LD_INT 81
45549: PUSH
45550: LD_VAR 0 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PPUSH
45559: CALL_OW 70
45563: ST_TO_ADDR
// end ;
45564: LD_VAR 0 3
45568: RET
// export function IsExtension ( b ) ; begin
45569: LD_INT 0
45571: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45572: LD_ADDR_VAR 0 2
45576: PUSH
45577: LD_VAR 0 1
45581: PUSH
45582: LD_INT 23
45584: PUSH
45585: LD_INT 20
45587: PUSH
45588: LD_INT 22
45590: PUSH
45591: LD_INT 17
45593: PUSH
45594: LD_INT 24
45596: PUSH
45597: LD_INT 21
45599: PUSH
45600: LD_INT 19
45602: PUSH
45603: LD_INT 16
45605: PUSH
45606: LD_INT 25
45608: PUSH
45609: LD_INT 18
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: IN
45624: ST_TO_ADDR
// end ;
45625: LD_VAR 0 2
45629: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45630: LD_INT 0
45632: PPUSH
45633: PPUSH
45634: PPUSH
// result := [ ] ;
45635: LD_ADDR_VAR 0 4
45639: PUSH
45640: EMPTY
45641: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45642: LD_ADDR_VAR 0 5
45646: PUSH
45647: LD_VAR 0 2
45651: PPUSH
45652: LD_INT 21
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PPUSH
45662: CALL_OW 70
45666: ST_TO_ADDR
// if not tmp then
45667: LD_VAR 0 5
45671: NOT
45672: IFFALSE 45676
// exit ;
45674: GO 45740
// if checkLink then
45676: LD_VAR 0 3
45680: IFFALSE 45730
// begin for i in tmp do
45682: LD_ADDR_VAR 0 6
45686: PUSH
45687: LD_VAR 0 5
45691: PUSH
45692: FOR_IN
45693: IFFALSE 45728
// if GetBase ( i ) <> base then
45695: LD_VAR 0 6
45699: PPUSH
45700: CALL_OW 274
45704: PUSH
45705: LD_VAR 0 1
45709: NONEQUAL
45710: IFFALSE 45726
// ComLinkToBase ( base , i ) ;
45712: LD_VAR 0 1
45716: PPUSH
45717: LD_VAR 0 6
45721: PPUSH
45722: CALL_OW 169
45726: GO 45692
45728: POP
45729: POP
// end ; result := tmp ;
45730: LD_ADDR_VAR 0 4
45734: PUSH
45735: LD_VAR 0 5
45739: ST_TO_ADDR
// end ;
45740: LD_VAR 0 4
45744: RET
// export function ComComplete ( units , b ) ; var i ; begin
45745: LD_INT 0
45747: PPUSH
45748: PPUSH
// if not units then
45749: LD_VAR 0 1
45753: NOT
45754: IFFALSE 45758
// exit ;
45756: GO 45848
// for i in units do
45758: LD_ADDR_VAR 0 4
45762: PUSH
45763: LD_VAR 0 1
45767: PUSH
45768: FOR_IN
45769: IFFALSE 45846
// if BuildingStatus ( b ) = bs_build then
45771: LD_VAR 0 2
45775: PPUSH
45776: CALL_OW 461
45780: PUSH
45781: LD_INT 1
45783: EQUAL
45784: IFFALSE 45844
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45786: LD_VAR 0 4
45790: PPUSH
45791: LD_STRING h
45793: PUSH
45794: LD_VAR 0 2
45798: PPUSH
45799: CALL_OW 250
45803: PUSH
45804: LD_VAR 0 2
45808: PPUSH
45809: CALL_OW 251
45813: PUSH
45814: LD_VAR 0 2
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: PUSH
45837: EMPTY
45838: LIST
45839: PPUSH
45840: CALL_OW 446
45844: GO 45768
45846: POP
45847: POP
// end ;
45848: LD_VAR 0 3
45852: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45853: LD_INT 0
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45861: LD_VAR 0 1
45865: NOT
45866: PUSH
45867: LD_VAR 0 1
45871: PPUSH
45872: CALL_OW 263
45876: PUSH
45877: LD_INT 2
45879: NONEQUAL
45880: OR
45881: IFFALSE 45885
// exit ;
45883: GO 46201
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45885: LD_ADDR_VAR 0 6
45889: PUSH
45890: LD_INT 22
45892: PUSH
45893: LD_VAR 0 1
45897: PPUSH
45898: CALL_OW 255
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: LD_INT 30
45912: PUSH
45913: LD_INT 36
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 34
45922: PUSH
45923: LD_INT 31
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PPUSH
45939: CALL_OW 69
45943: ST_TO_ADDR
// if not tmp then
45944: LD_VAR 0 6
45948: NOT
45949: IFFALSE 45953
// exit ;
45951: GO 46201
// result := [ ] ;
45953: LD_ADDR_VAR 0 2
45957: PUSH
45958: EMPTY
45959: ST_TO_ADDR
// for i in tmp do
45960: LD_ADDR_VAR 0 3
45964: PUSH
45965: LD_VAR 0 6
45969: PUSH
45970: FOR_IN
45971: IFFALSE 46042
// begin t := UnitsInside ( i ) ;
45973: LD_ADDR_VAR 0 4
45977: PUSH
45978: LD_VAR 0 3
45982: PPUSH
45983: CALL_OW 313
45987: ST_TO_ADDR
// if t then
45988: LD_VAR 0 4
45992: IFFALSE 46040
// for j in t do
45994: LD_ADDR_VAR 0 7
45998: PUSH
45999: LD_VAR 0 4
46003: PUSH
46004: FOR_IN
46005: IFFALSE 46038
// result := Replace ( result , result + 1 , j ) ;
46007: LD_ADDR_VAR 0 2
46011: PUSH
46012: LD_VAR 0 2
46016: PPUSH
46017: LD_VAR 0 2
46021: PUSH
46022: LD_INT 1
46024: PLUS
46025: PPUSH
46026: LD_VAR 0 7
46030: PPUSH
46031: CALL_OW 1
46035: ST_TO_ADDR
46036: GO 46004
46038: POP
46039: POP
// end ;
46040: GO 45970
46042: POP
46043: POP
// if not result then
46044: LD_VAR 0 2
46048: NOT
46049: IFFALSE 46053
// exit ;
46051: GO 46201
// mech := result [ 1 ] ;
46053: LD_ADDR_VAR 0 5
46057: PUSH
46058: LD_VAR 0 2
46062: PUSH
46063: LD_INT 1
46065: ARRAY
46066: ST_TO_ADDR
// if result > 1 then
46067: LD_VAR 0 2
46071: PUSH
46072: LD_INT 1
46074: GREATER
46075: IFFALSE 46187
// begin for i = 2 to result do
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: DOUBLE
46083: LD_INT 2
46085: DEC
46086: ST_TO_ADDR
46087: LD_VAR 0 2
46091: PUSH
46092: FOR_TO
46093: IFFALSE 46185
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46095: LD_ADDR_VAR 0 4
46099: PUSH
46100: LD_VAR 0 2
46104: PUSH
46105: LD_VAR 0 3
46109: ARRAY
46110: PPUSH
46111: LD_INT 3
46113: PPUSH
46114: CALL_OW 259
46118: PUSH
46119: LD_VAR 0 2
46123: PUSH
46124: LD_VAR 0 3
46128: ARRAY
46129: PPUSH
46130: CALL_OW 432
46134: MINUS
46135: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46136: LD_VAR 0 4
46140: PUSH
46141: LD_VAR 0 5
46145: PPUSH
46146: LD_INT 3
46148: PPUSH
46149: CALL_OW 259
46153: PUSH
46154: LD_VAR 0 5
46158: PPUSH
46159: CALL_OW 432
46163: MINUS
46164: GREATEREQUAL
46165: IFFALSE 46183
// mech := result [ i ] ;
46167: LD_ADDR_VAR 0 5
46171: PUSH
46172: LD_VAR 0 2
46176: PUSH
46177: LD_VAR 0 3
46181: ARRAY
46182: ST_TO_ADDR
// end ;
46183: GO 46092
46185: POP
46186: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46187: LD_VAR 0 1
46191: PPUSH
46192: LD_VAR 0 5
46196: PPUSH
46197: CALL_OW 135
// end ;
46201: LD_VAR 0 2
46205: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46206: LD_INT 0
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
// result := [ ] ;
46221: LD_ADDR_VAR 0 7
46225: PUSH
46226: EMPTY
46227: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46228: LD_VAR 0 1
46232: PPUSH
46233: CALL_OW 266
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: IN
46248: NOT
46249: IFFALSE 46253
// exit ;
46251: GO 47887
// if name then
46253: LD_VAR 0 3
46257: IFFALSE 46273
// SetBName ( base_dep , name ) ;
46259: LD_VAR 0 1
46263: PPUSH
46264: LD_VAR 0 3
46268: PPUSH
46269: CALL_OW 500
// base := GetBase ( base_dep ) ;
46273: LD_ADDR_VAR 0 15
46277: PUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: CALL_OW 274
46287: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46288: LD_ADDR_VAR 0 16
46292: PUSH
46293: LD_VAR 0 1
46297: PPUSH
46298: CALL_OW 255
46302: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46303: LD_ADDR_VAR 0 17
46307: PUSH
46308: LD_VAR 0 1
46312: PPUSH
46313: CALL_OW 248
46317: ST_TO_ADDR
// if sources then
46318: LD_VAR 0 5
46322: IFFALSE 46369
// for i = 1 to 3 do
46324: LD_ADDR_VAR 0 8
46328: PUSH
46329: DOUBLE
46330: LD_INT 1
46332: DEC
46333: ST_TO_ADDR
46334: LD_INT 3
46336: PUSH
46337: FOR_TO
46338: IFFALSE 46367
// AddResourceType ( base , i , sources [ i ] ) ;
46340: LD_VAR 0 15
46344: PPUSH
46345: LD_VAR 0 8
46349: PPUSH
46350: LD_VAR 0 5
46354: PUSH
46355: LD_VAR 0 8
46359: ARRAY
46360: PPUSH
46361: CALL_OW 276
46365: GO 46337
46367: POP
46368: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46369: LD_ADDR_VAR 0 18
46373: PUSH
46374: LD_VAR 0 15
46378: PPUSH
46379: LD_VAR 0 2
46383: PPUSH
46384: LD_INT 1
46386: PPUSH
46387: CALL 45630 0 3
46391: ST_TO_ADDR
// InitHc ;
46392: CALL_OW 19
// InitUc ;
46396: CALL_OW 18
// uc_side := side ;
46400: LD_ADDR_OWVAR 20
46404: PUSH
46405: LD_VAR 0 16
46409: ST_TO_ADDR
// uc_nation := nation ;
46410: LD_ADDR_OWVAR 21
46414: PUSH
46415: LD_VAR 0 17
46419: ST_TO_ADDR
// if buildings then
46420: LD_VAR 0 18
46424: IFFALSE 47746
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46426: LD_ADDR_VAR 0 19
46430: PUSH
46431: LD_VAR 0 18
46435: PPUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 30
46441: PUSH
46442: LD_INT 29
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 30
46451: PUSH
46452: LD_INT 30
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: PPUSH
46464: CALL_OW 72
46468: ST_TO_ADDR
// if tmp then
46469: LD_VAR 0 19
46473: IFFALSE 46521
// for i in tmp do
46475: LD_ADDR_VAR 0 8
46479: PUSH
46480: LD_VAR 0 19
46484: PUSH
46485: FOR_IN
46486: IFFALSE 46519
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46488: LD_VAR 0 8
46492: PPUSH
46493: CALL_OW 250
46497: PPUSH
46498: LD_VAR 0 8
46502: PPUSH
46503: CALL_OW 251
46507: PPUSH
46508: LD_VAR 0 16
46512: PPUSH
46513: CALL_OW 441
46517: GO 46485
46519: POP
46520: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46521: LD_VAR 0 18
46525: PPUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 30
46531: PUSH
46532: LD_INT 32
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 30
46541: PUSH
46542: LD_INT 33
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: PPUSH
46554: CALL_OW 72
46558: IFFALSE 46646
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46560: LD_ADDR_VAR 0 8
46564: PUSH
46565: LD_VAR 0 18
46569: PPUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 30
46575: PUSH
46576: LD_INT 32
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 30
46585: PUSH
46586: LD_INT 33
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: PPUSH
46598: CALL_OW 72
46602: PUSH
46603: FOR_IN
46604: IFFALSE 46644
// begin if not GetBWeapon ( i ) then
46606: LD_VAR 0 8
46610: PPUSH
46611: CALL_OW 269
46615: NOT
46616: IFFALSE 46642
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46618: LD_VAR 0 8
46622: PPUSH
46623: LD_VAR 0 8
46627: PPUSH
46628: LD_VAR 0 2
46632: PPUSH
46633: CALL 47892 0 2
46637: PPUSH
46638: CALL_OW 431
// end ;
46642: GO 46603
46644: POP
46645: POP
// end ; for i = 1 to personel do
46646: LD_ADDR_VAR 0 8
46650: PUSH
46651: DOUBLE
46652: LD_INT 1
46654: DEC
46655: ST_TO_ADDR
46656: LD_VAR 0 6
46660: PUSH
46661: FOR_TO
46662: IFFALSE 47726
// begin if i > 4 then
46664: LD_VAR 0 8
46668: PUSH
46669: LD_INT 4
46671: GREATER
46672: IFFALSE 46676
// break ;
46674: GO 47726
// case i of 1 :
46676: LD_VAR 0 8
46680: PUSH
46681: LD_INT 1
46683: DOUBLE
46684: EQUAL
46685: IFTRUE 46689
46687: GO 46769
46689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46690: LD_ADDR_VAR 0 12
46694: PUSH
46695: LD_VAR 0 18
46699: PPUSH
46700: LD_INT 22
46702: PUSH
46703: LD_VAR 0 16
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 58
46714: PUSH
46715: EMPTY
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 30
46723: PUSH
46724: LD_INT 32
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 30
46733: PUSH
46734: LD_INT 4
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 30
46743: PUSH
46744: LD_INT 5
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: PPUSH
46762: CALL_OW 72
46766: ST_TO_ADDR
46767: GO 46991
46769: LD_INT 2
46771: DOUBLE
46772: EQUAL
46773: IFTRUE 46777
46775: GO 46839
46777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46778: LD_ADDR_VAR 0 12
46782: PUSH
46783: LD_VAR 0 18
46787: PPUSH
46788: LD_INT 22
46790: PUSH
46791: LD_VAR 0 16
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 30
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 30
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PPUSH
46832: CALL_OW 72
46836: ST_TO_ADDR
46837: GO 46991
46839: LD_INT 3
46841: DOUBLE
46842: EQUAL
46843: IFTRUE 46847
46845: GO 46909
46847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46848: LD_ADDR_VAR 0 12
46852: PUSH
46853: LD_VAR 0 18
46857: PPUSH
46858: LD_INT 22
46860: PUSH
46861: LD_VAR 0 16
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 30
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 30
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PPUSH
46902: CALL_OW 72
46906: ST_TO_ADDR
46907: GO 46991
46909: LD_INT 4
46911: DOUBLE
46912: EQUAL
46913: IFTRUE 46917
46915: GO 46990
46917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46918: LD_ADDR_VAR 0 12
46922: PUSH
46923: LD_VAR 0 18
46927: PPUSH
46928: LD_INT 22
46930: PUSH
46931: LD_VAR 0 16
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 30
46945: PUSH
46946: LD_INT 6
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 30
46955: PUSH
46956: LD_INT 7
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 30
46965: PUSH
46966: LD_INT 8
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PPUSH
46983: CALL_OW 72
46987: ST_TO_ADDR
46988: GO 46991
46990: POP
// if i = 1 then
46991: LD_VAR 0 8
46995: PUSH
46996: LD_INT 1
46998: EQUAL
46999: IFFALSE 47110
// begin tmp := [ ] ;
47001: LD_ADDR_VAR 0 19
47005: PUSH
47006: EMPTY
47007: ST_TO_ADDR
// for j in f do
47008: LD_ADDR_VAR 0 9
47012: PUSH
47013: LD_VAR 0 12
47017: PUSH
47018: FOR_IN
47019: IFFALSE 47092
// if GetBType ( j ) = b_bunker then
47021: LD_VAR 0 9
47025: PPUSH
47026: CALL_OW 266
47030: PUSH
47031: LD_INT 32
47033: EQUAL
47034: IFFALSE 47061
// tmp := Insert ( tmp , 1 , j ) else
47036: LD_ADDR_VAR 0 19
47040: PUSH
47041: LD_VAR 0 19
47045: PPUSH
47046: LD_INT 1
47048: PPUSH
47049: LD_VAR 0 9
47053: PPUSH
47054: CALL_OW 2
47058: ST_TO_ADDR
47059: GO 47090
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47061: LD_ADDR_VAR 0 19
47065: PUSH
47066: LD_VAR 0 19
47070: PPUSH
47071: LD_VAR 0 19
47075: PUSH
47076: LD_INT 1
47078: PLUS
47079: PPUSH
47080: LD_VAR 0 9
47084: PPUSH
47085: CALL_OW 2
47089: ST_TO_ADDR
47090: GO 47018
47092: POP
47093: POP
// if tmp then
47094: LD_VAR 0 19
47098: IFFALSE 47110
// f := tmp ;
47100: LD_ADDR_VAR 0 12
47104: PUSH
47105: LD_VAR 0 19
47109: ST_TO_ADDR
// end ; x := personel [ i ] ;
47110: LD_ADDR_VAR 0 13
47114: PUSH
47115: LD_VAR 0 6
47119: PUSH
47120: LD_VAR 0 8
47124: ARRAY
47125: ST_TO_ADDR
// if x = - 1 then
47126: LD_VAR 0 13
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: EQUAL
47135: IFFALSE 47344
// begin for j in f do
47137: LD_ADDR_VAR 0 9
47141: PUSH
47142: LD_VAR 0 12
47146: PUSH
47147: FOR_IN
47148: IFFALSE 47340
// repeat InitHc ;
47150: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47154: LD_VAR 0 9
47158: PPUSH
47159: CALL_OW 266
47163: PUSH
47164: LD_INT 5
47166: EQUAL
47167: IFFALSE 47237
// begin if UnitsInside ( j ) < 3 then
47169: LD_VAR 0 9
47173: PPUSH
47174: CALL_OW 313
47178: PUSH
47179: LD_INT 3
47181: LESS
47182: IFFALSE 47218
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47184: LD_INT 0
47186: PPUSH
47187: LD_INT 5
47189: PUSH
47190: LD_INT 8
47192: PUSH
47193: LD_INT 9
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: PUSH
47201: LD_VAR 0 17
47205: ARRAY
47206: PPUSH
47207: LD_VAR 0 4
47211: PPUSH
47212: CALL_OW 380
47216: GO 47235
// PrepareHuman ( false , i , skill ) ;
47218: LD_INT 0
47220: PPUSH
47221: LD_VAR 0 8
47225: PPUSH
47226: LD_VAR 0 4
47230: PPUSH
47231: CALL_OW 380
// end else
47235: GO 47254
// PrepareHuman ( false , i , skill ) ;
47237: LD_INT 0
47239: PPUSH
47240: LD_VAR 0 8
47244: PPUSH
47245: LD_VAR 0 4
47249: PPUSH
47250: CALL_OW 380
// un := CreateHuman ;
47254: LD_ADDR_VAR 0 14
47258: PUSH
47259: CALL_OW 44
47263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47264: LD_ADDR_VAR 0 7
47268: PUSH
47269: LD_VAR 0 7
47273: PPUSH
47274: LD_INT 1
47276: PPUSH
47277: LD_VAR 0 14
47281: PPUSH
47282: CALL_OW 2
47286: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47287: LD_VAR 0 14
47291: PPUSH
47292: LD_VAR 0 9
47296: PPUSH
47297: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47301: LD_VAR 0 9
47305: PPUSH
47306: CALL_OW 313
47310: PUSH
47311: LD_INT 6
47313: EQUAL
47314: PUSH
47315: LD_VAR 0 9
47319: PPUSH
47320: CALL_OW 266
47324: PUSH
47325: LD_INT 32
47327: PUSH
47328: LD_INT 31
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: IN
47335: OR
47336: IFFALSE 47150
47338: GO 47147
47340: POP
47341: POP
// end else
47342: GO 47724
// for j = 1 to x do
47344: LD_ADDR_VAR 0 9
47348: PUSH
47349: DOUBLE
47350: LD_INT 1
47352: DEC
47353: ST_TO_ADDR
47354: LD_VAR 0 13
47358: PUSH
47359: FOR_TO
47360: IFFALSE 47722
// begin InitHc ;
47362: CALL_OW 19
// if not f then
47366: LD_VAR 0 12
47370: NOT
47371: IFFALSE 47460
// begin PrepareHuman ( false , i , skill ) ;
47373: LD_INT 0
47375: PPUSH
47376: LD_VAR 0 8
47380: PPUSH
47381: LD_VAR 0 4
47385: PPUSH
47386: CALL_OW 380
// un := CreateHuman ;
47390: LD_ADDR_VAR 0 14
47394: PUSH
47395: CALL_OW 44
47399: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47400: LD_ADDR_VAR 0 7
47404: PUSH
47405: LD_VAR 0 7
47409: PPUSH
47410: LD_INT 1
47412: PPUSH
47413: LD_VAR 0 14
47417: PPUSH
47418: CALL_OW 2
47422: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47423: LD_VAR 0 14
47427: PPUSH
47428: LD_VAR 0 1
47432: PPUSH
47433: CALL_OW 250
47437: PPUSH
47438: LD_VAR 0 1
47442: PPUSH
47443: CALL_OW 251
47447: PPUSH
47448: LD_INT 10
47450: PPUSH
47451: LD_INT 0
47453: PPUSH
47454: CALL_OW 50
// continue ;
47458: GO 47359
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47460: LD_VAR 0 12
47464: PUSH
47465: LD_INT 1
47467: ARRAY
47468: PPUSH
47469: CALL_OW 313
47473: PUSH
47474: LD_VAR 0 12
47478: PUSH
47479: LD_INT 1
47481: ARRAY
47482: PPUSH
47483: CALL_OW 266
47487: PUSH
47488: LD_INT 32
47490: PUSH
47491: LD_INT 31
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: IN
47498: AND
47499: PUSH
47500: LD_VAR 0 12
47504: PUSH
47505: LD_INT 1
47507: ARRAY
47508: PPUSH
47509: CALL_OW 313
47513: PUSH
47514: LD_INT 6
47516: EQUAL
47517: OR
47518: IFFALSE 47538
// f := Delete ( f , 1 ) ;
47520: LD_ADDR_VAR 0 12
47524: PUSH
47525: LD_VAR 0 12
47529: PPUSH
47530: LD_INT 1
47532: PPUSH
47533: CALL_OW 3
47537: ST_TO_ADDR
// if not f then
47538: LD_VAR 0 12
47542: NOT
47543: IFFALSE 47561
// begin x := x + 2 ;
47545: LD_ADDR_VAR 0 13
47549: PUSH
47550: LD_VAR 0 13
47554: PUSH
47555: LD_INT 2
47557: PLUS
47558: ST_TO_ADDR
// continue ;
47559: GO 47359
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47561: LD_VAR 0 12
47565: PUSH
47566: LD_INT 1
47568: ARRAY
47569: PPUSH
47570: CALL_OW 266
47574: PUSH
47575: LD_INT 5
47577: EQUAL
47578: IFFALSE 47652
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47580: LD_VAR 0 12
47584: PUSH
47585: LD_INT 1
47587: ARRAY
47588: PPUSH
47589: CALL_OW 313
47593: PUSH
47594: LD_INT 3
47596: LESS
47597: IFFALSE 47633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47599: LD_INT 0
47601: PPUSH
47602: LD_INT 5
47604: PUSH
47605: LD_INT 8
47607: PUSH
47608: LD_INT 9
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: PUSH
47616: LD_VAR 0 17
47620: ARRAY
47621: PPUSH
47622: LD_VAR 0 4
47626: PPUSH
47627: CALL_OW 380
47631: GO 47650
// PrepareHuman ( false , i , skill ) ;
47633: LD_INT 0
47635: PPUSH
47636: LD_VAR 0 8
47640: PPUSH
47641: LD_VAR 0 4
47645: PPUSH
47646: CALL_OW 380
// end else
47650: GO 47669
// PrepareHuman ( false , i , skill ) ;
47652: LD_INT 0
47654: PPUSH
47655: LD_VAR 0 8
47659: PPUSH
47660: LD_VAR 0 4
47664: PPUSH
47665: CALL_OW 380
// un := CreateHuman ;
47669: LD_ADDR_VAR 0 14
47673: PUSH
47674: CALL_OW 44
47678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47679: LD_ADDR_VAR 0 7
47683: PUSH
47684: LD_VAR 0 7
47688: PPUSH
47689: LD_INT 1
47691: PPUSH
47692: LD_VAR 0 14
47696: PPUSH
47697: CALL_OW 2
47701: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47702: LD_VAR 0 14
47706: PPUSH
47707: LD_VAR 0 12
47711: PUSH
47712: LD_INT 1
47714: ARRAY
47715: PPUSH
47716: CALL_OW 52
// end ;
47720: GO 47359
47722: POP
47723: POP
// end ;
47724: GO 46661
47726: POP
47727: POP
// result := result ^ buildings ;
47728: LD_ADDR_VAR 0 7
47732: PUSH
47733: LD_VAR 0 7
47737: PUSH
47738: LD_VAR 0 18
47742: ADD
47743: ST_TO_ADDR
// end else
47744: GO 47887
// begin for i = 1 to personel do
47746: LD_ADDR_VAR 0 8
47750: PUSH
47751: DOUBLE
47752: LD_INT 1
47754: DEC
47755: ST_TO_ADDR
47756: LD_VAR 0 6
47760: PUSH
47761: FOR_TO
47762: IFFALSE 47885
// begin if i > 4 then
47764: LD_VAR 0 8
47768: PUSH
47769: LD_INT 4
47771: GREATER
47772: IFFALSE 47776
// break ;
47774: GO 47885
// x := personel [ i ] ;
47776: LD_ADDR_VAR 0 13
47780: PUSH
47781: LD_VAR 0 6
47785: PUSH
47786: LD_VAR 0 8
47790: ARRAY
47791: ST_TO_ADDR
// if x = - 1 then
47792: LD_VAR 0 13
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: EQUAL
47801: IFFALSE 47805
// continue ;
47803: GO 47761
// PrepareHuman ( false , i , skill ) ;
47805: LD_INT 0
47807: PPUSH
47808: LD_VAR 0 8
47812: PPUSH
47813: LD_VAR 0 4
47817: PPUSH
47818: CALL_OW 380
// un := CreateHuman ;
47822: LD_ADDR_VAR 0 14
47826: PUSH
47827: CALL_OW 44
47831: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47832: LD_VAR 0 14
47836: PPUSH
47837: LD_VAR 0 1
47841: PPUSH
47842: CALL_OW 250
47846: PPUSH
47847: LD_VAR 0 1
47851: PPUSH
47852: CALL_OW 251
47856: PPUSH
47857: LD_INT 10
47859: PPUSH
47860: LD_INT 0
47862: PPUSH
47863: CALL_OW 50
// result := result ^ un ;
47867: LD_ADDR_VAR 0 7
47871: PUSH
47872: LD_VAR 0 7
47876: PUSH
47877: LD_VAR 0 14
47881: ADD
47882: ST_TO_ADDR
// end ;
47883: GO 47761
47885: POP
47886: POP
// end ; end ;
47887: LD_VAR 0 7
47891: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47892: LD_INT 0
47894: PPUSH
47895: PPUSH
47896: PPUSH
47897: PPUSH
47898: PPUSH
47899: PPUSH
47900: PPUSH
47901: PPUSH
47902: PPUSH
47903: PPUSH
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
// result := false ;
47910: LD_ADDR_VAR 0 3
47914: PUSH
47915: LD_INT 0
47917: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47918: LD_VAR 0 1
47922: NOT
47923: PUSH
47924: LD_VAR 0 1
47928: PPUSH
47929: CALL_OW 266
47933: PUSH
47934: LD_INT 32
47936: PUSH
47937: LD_INT 33
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: IN
47944: NOT
47945: OR
47946: IFFALSE 47950
// exit ;
47948: GO 49059
// nat := GetNation ( tower ) ;
47950: LD_ADDR_VAR 0 12
47954: PUSH
47955: LD_VAR 0 1
47959: PPUSH
47960: CALL_OW 248
47964: ST_TO_ADDR
// side := GetSide ( tower ) ;
47965: LD_ADDR_VAR 0 16
47969: PUSH
47970: LD_VAR 0 1
47974: PPUSH
47975: CALL_OW 255
47979: ST_TO_ADDR
// x := GetX ( tower ) ;
47980: LD_ADDR_VAR 0 10
47984: PUSH
47985: LD_VAR 0 1
47989: PPUSH
47990: CALL_OW 250
47994: ST_TO_ADDR
// y := GetY ( tower ) ;
47995: LD_ADDR_VAR 0 11
47999: PUSH
48000: LD_VAR 0 1
48004: PPUSH
48005: CALL_OW 251
48009: ST_TO_ADDR
// if not x or not y then
48010: LD_VAR 0 10
48014: NOT
48015: PUSH
48016: LD_VAR 0 11
48020: NOT
48021: OR
48022: IFFALSE 48026
// exit ;
48024: GO 49059
// weapon := 0 ;
48026: LD_ADDR_VAR 0 18
48030: PUSH
48031: LD_INT 0
48033: ST_TO_ADDR
// fac_list := [ ] ;
48034: LD_ADDR_VAR 0 17
48038: PUSH
48039: EMPTY
48040: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48041: LD_ADDR_VAR 0 6
48045: PUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: CALL_OW 274
48055: PPUSH
48056: LD_VAR 0 2
48060: PPUSH
48061: LD_INT 0
48063: PPUSH
48064: CALL 45630 0 3
48068: PPUSH
48069: LD_INT 30
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PPUSH
48079: CALL_OW 72
48083: ST_TO_ADDR
// if not factories then
48084: LD_VAR 0 6
48088: NOT
48089: IFFALSE 48093
// exit ;
48091: GO 49059
// for i in factories do
48093: LD_ADDR_VAR 0 8
48097: PUSH
48098: LD_VAR 0 6
48102: PUSH
48103: FOR_IN
48104: IFFALSE 48129
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48106: LD_ADDR_VAR 0 17
48110: PUSH
48111: LD_VAR 0 17
48115: PUSH
48116: LD_VAR 0 8
48120: PPUSH
48121: CALL_OW 478
48125: UNION
48126: ST_TO_ADDR
48127: GO 48103
48129: POP
48130: POP
// if not fac_list then
48131: LD_VAR 0 17
48135: NOT
48136: IFFALSE 48140
// exit ;
48138: GO 49059
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48140: LD_ADDR_VAR 0 5
48144: PUSH
48145: LD_INT 4
48147: PUSH
48148: LD_INT 5
48150: PUSH
48151: LD_INT 9
48153: PUSH
48154: LD_INT 10
48156: PUSH
48157: LD_INT 6
48159: PUSH
48160: LD_INT 7
48162: PUSH
48163: LD_INT 11
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 27
48177: PUSH
48178: LD_INT 28
48180: PUSH
48181: LD_INT 26
48183: PUSH
48184: LD_INT 30
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 43
48195: PUSH
48196: LD_INT 44
48198: PUSH
48199: LD_INT 46
48201: PUSH
48202: LD_INT 45
48204: PUSH
48205: LD_INT 47
48207: PUSH
48208: LD_INT 49
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: LIST
48223: PUSH
48224: LD_VAR 0 12
48228: ARRAY
48229: ST_TO_ADDR
// list := list isect fac_list ;
48230: LD_ADDR_VAR 0 5
48234: PUSH
48235: LD_VAR 0 5
48239: PUSH
48240: LD_VAR 0 17
48244: ISECT
48245: ST_TO_ADDR
// if not list then
48246: LD_VAR 0 5
48250: NOT
48251: IFFALSE 48255
// exit ;
48253: GO 49059
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48255: LD_VAR 0 12
48259: PUSH
48260: LD_INT 3
48262: EQUAL
48263: PUSH
48264: LD_INT 49
48266: PUSH
48267: LD_VAR 0 5
48271: IN
48272: AND
48273: PUSH
48274: LD_INT 31
48276: PPUSH
48277: LD_VAR 0 16
48281: PPUSH
48282: CALL_OW 321
48286: PUSH
48287: LD_INT 2
48289: EQUAL
48290: AND
48291: IFFALSE 48351
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48293: LD_INT 22
48295: PUSH
48296: LD_VAR 0 16
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 35
48307: PUSH
48308: LD_INT 49
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 91
48317: PUSH
48318: LD_VAR 0 1
48322: PUSH
48323: LD_INT 10
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: PPUSH
48336: CALL_OW 69
48340: NOT
48341: IFFALSE 48351
// weapon := ru_time_lapser ;
48343: LD_ADDR_VAR 0 18
48347: PUSH
48348: LD_INT 49
48350: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48351: LD_VAR 0 12
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: IN
48366: PUSH
48367: LD_INT 11
48369: PUSH
48370: LD_VAR 0 5
48374: IN
48375: PUSH
48376: LD_INT 30
48378: PUSH
48379: LD_VAR 0 5
48383: IN
48384: OR
48385: AND
48386: PUSH
48387: LD_INT 6
48389: PPUSH
48390: LD_VAR 0 16
48394: PPUSH
48395: CALL_OW 321
48399: PUSH
48400: LD_INT 2
48402: EQUAL
48403: AND
48404: IFFALSE 48569
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48406: LD_INT 22
48408: PUSH
48409: LD_VAR 0 16
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 35
48423: PUSH
48424: LD_INT 11
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 35
48433: PUSH
48434: LD_INT 30
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 91
48448: PUSH
48449: LD_VAR 0 1
48453: PUSH
48454: LD_INT 18
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: PPUSH
48467: CALL_OW 69
48471: NOT
48472: PUSH
48473: LD_INT 22
48475: PUSH
48476: LD_VAR 0 16
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: LD_INT 30
48490: PUSH
48491: LD_INT 32
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 30
48500: PUSH
48501: LD_INT 33
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 91
48515: PUSH
48516: LD_VAR 0 1
48520: PUSH
48521: LD_INT 12
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: PPUSH
48537: CALL_OW 69
48541: PUSH
48542: LD_INT 2
48544: GREATER
48545: AND
48546: IFFALSE 48569
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48548: LD_ADDR_VAR 0 18
48552: PUSH
48553: LD_INT 11
48555: PUSH
48556: LD_INT 30
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_VAR 0 12
48567: ARRAY
48568: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48569: LD_VAR 0 18
48573: NOT
48574: PUSH
48575: LD_INT 40
48577: PPUSH
48578: LD_VAR 0 16
48582: PPUSH
48583: CALL_OW 321
48587: PUSH
48588: LD_INT 2
48590: EQUAL
48591: AND
48592: PUSH
48593: LD_INT 7
48595: PUSH
48596: LD_VAR 0 5
48600: IN
48601: PUSH
48602: LD_INT 28
48604: PUSH
48605: LD_VAR 0 5
48609: IN
48610: OR
48611: PUSH
48612: LD_INT 45
48614: PUSH
48615: LD_VAR 0 5
48619: IN
48620: OR
48621: AND
48622: IFFALSE 48876
// begin hex := GetHexInfo ( x , y ) ;
48624: LD_ADDR_VAR 0 4
48628: PUSH
48629: LD_VAR 0 10
48633: PPUSH
48634: LD_VAR 0 11
48638: PPUSH
48639: CALL_OW 546
48643: ST_TO_ADDR
// if hex [ 1 ] then
48644: LD_VAR 0 4
48648: PUSH
48649: LD_INT 1
48651: ARRAY
48652: IFFALSE 48656
// exit ;
48654: GO 49059
// height := hex [ 2 ] ;
48656: LD_ADDR_VAR 0 15
48660: PUSH
48661: LD_VAR 0 4
48665: PUSH
48666: LD_INT 2
48668: ARRAY
48669: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48670: LD_ADDR_VAR 0 14
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: LD_INT 5
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: ST_TO_ADDR
// for i in tmp do
48693: LD_ADDR_VAR 0 8
48697: PUSH
48698: LD_VAR 0 14
48702: PUSH
48703: FOR_IN
48704: IFFALSE 48874
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48706: LD_ADDR_VAR 0 9
48710: PUSH
48711: LD_VAR 0 10
48715: PPUSH
48716: LD_VAR 0 8
48720: PPUSH
48721: LD_INT 5
48723: PPUSH
48724: CALL_OW 272
48728: PUSH
48729: LD_VAR 0 11
48733: PPUSH
48734: LD_VAR 0 8
48738: PPUSH
48739: LD_INT 5
48741: PPUSH
48742: CALL_OW 273
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48751: LD_VAR 0 9
48755: PUSH
48756: LD_INT 1
48758: ARRAY
48759: PPUSH
48760: LD_VAR 0 9
48764: PUSH
48765: LD_INT 2
48767: ARRAY
48768: PPUSH
48769: CALL_OW 488
48773: IFFALSE 48872
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48775: LD_ADDR_VAR 0 4
48779: PUSH
48780: LD_VAR 0 9
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: PPUSH
48789: LD_VAR 0 9
48793: PUSH
48794: LD_INT 2
48796: ARRAY
48797: PPUSH
48798: CALL_OW 546
48802: ST_TO_ADDR
// if hex [ 1 ] then
48803: LD_VAR 0 4
48807: PUSH
48808: LD_INT 1
48810: ARRAY
48811: IFFALSE 48815
// continue ;
48813: GO 48703
// h := hex [ 2 ] ;
48815: LD_ADDR_VAR 0 13
48819: PUSH
48820: LD_VAR 0 4
48824: PUSH
48825: LD_INT 2
48827: ARRAY
48828: ST_TO_ADDR
// if h + 7 < height then
48829: LD_VAR 0 13
48833: PUSH
48834: LD_INT 7
48836: PLUS
48837: PUSH
48838: LD_VAR 0 15
48842: LESS
48843: IFFALSE 48872
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48845: LD_ADDR_VAR 0 18
48849: PUSH
48850: LD_INT 7
48852: PUSH
48853: LD_INT 28
48855: PUSH
48856: LD_INT 45
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: PUSH
48864: LD_VAR 0 12
48868: ARRAY
48869: ST_TO_ADDR
// break ;
48870: GO 48874
// end ; end ; end ;
48872: GO 48703
48874: POP
48875: POP
// end ; if not weapon then
48876: LD_VAR 0 18
48880: NOT
48881: IFFALSE 48941
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48883: LD_ADDR_VAR 0 5
48887: PUSH
48888: LD_VAR 0 5
48892: PUSH
48893: LD_INT 11
48895: PUSH
48896: LD_INT 30
48898: PUSH
48899: LD_INT 49
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: DIFF
48907: ST_TO_ADDR
// if not list then
48908: LD_VAR 0 5
48912: NOT
48913: IFFALSE 48917
// exit ;
48915: GO 49059
// weapon := list [ rand ( 1 , list ) ] ;
48917: LD_ADDR_VAR 0 18
48921: PUSH
48922: LD_VAR 0 5
48926: PUSH
48927: LD_INT 1
48929: PPUSH
48930: LD_VAR 0 5
48934: PPUSH
48935: CALL_OW 12
48939: ARRAY
48940: ST_TO_ADDR
// end ; if weapon then
48941: LD_VAR 0 18
48945: IFFALSE 49059
// begin tmp := CostOfWeapon ( weapon ) ;
48947: LD_ADDR_VAR 0 14
48951: PUSH
48952: LD_VAR 0 18
48956: PPUSH
48957: CALL_OW 451
48961: ST_TO_ADDR
// j := GetBase ( tower ) ;
48962: LD_ADDR_VAR 0 9
48966: PUSH
48967: LD_VAR 0 1
48971: PPUSH
48972: CALL_OW 274
48976: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48977: LD_VAR 0 9
48981: PPUSH
48982: LD_INT 1
48984: PPUSH
48985: CALL_OW 275
48989: PUSH
48990: LD_VAR 0 14
48994: PUSH
48995: LD_INT 1
48997: ARRAY
48998: GREATEREQUAL
48999: PUSH
49000: LD_VAR 0 9
49004: PPUSH
49005: LD_INT 2
49007: PPUSH
49008: CALL_OW 275
49012: PUSH
49013: LD_VAR 0 14
49017: PUSH
49018: LD_INT 2
49020: ARRAY
49021: GREATEREQUAL
49022: AND
49023: PUSH
49024: LD_VAR 0 9
49028: PPUSH
49029: LD_INT 3
49031: PPUSH
49032: CALL_OW 275
49036: PUSH
49037: LD_VAR 0 14
49041: PUSH
49042: LD_INT 3
49044: ARRAY
49045: GREATEREQUAL
49046: AND
49047: IFFALSE 49059
// result := weapon ;
49049: LD_ADDR_VAR 0 3
49053: PUSH
49054: LD_VAR 0 18
49058: ST_TO_ADDR
// end ; end ;
49059: LD_VAR 0 3
49063: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49064: LD_INT 0
49066: PPUSH
49067: PPUSH
// result := true ;
49068: LD_ADDR_VAR 0 3
49072: PUSH
49073: LD_INT 1
49075: ST_TO_ADDR
// if array1 = array2 then
49076: LD_VAR 0 1
49080: PUSH
49081: LD_VAR 0 2
49085: EQUAL
49086: IFFALSE 49146
// begin for i = 1 to array1 do
49088: LD_ADDR_VAR 0 4
49092: PUSH
49093: DOUBLE
49094: LD_INT 1
49096: DEC
49097: ST_TO_ADDR
49098: LD_VAR 0 1
49102: PUSH
49103: FOR_TO
49104: IFFALSE 49142
// if array1 [ i ] <> array2 [ i ] then
49106: LD_VAR 0 1
49110: PUSH
49111: LD_VAR 0 4
49115: ARRAY
49116: PUSH
49117: LD_VAR 0 2
49121: PUSH
49122: LD_VAR 0 4
49126: ARRAY
49127: NONEQUAL
49128: IFFALSE 49140
// begin result := false ;
49130: LD_ADDR_VAR 0 3
49134: PUSH
49135: LD_INT 0
49137: ST_TO_ADDR
// break ;
49138: GO 49142
// end ;
49140: GO 49103
49142: POP
49143: POP
// end else
49144: GO 49154
// result := false ;
49146: LD_ADDR_VAR 0 3
49150: PUSH
49151: LD_INT 0
49153: ST_TO_ADDR
// end ;
49154: LD_VAR 0 3
49158: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49159: LD_INT 0
49161: PPUSH
49162: PPUSH
// if not array1 or not array2 then
49163: LD_VAR 0 1
49167: NOT
49168: PUSH
49169: LD_VAR 0 2
49173: NOT
49174: OR
49175: IFFALSE 49179
// exit ;
49177: GO 49243
// result := true ;
49179: LD_ADDR_VAR 0 3
49183: PUSH
49184: LD_INT 1
49186: ST_TO_ADDR
// for i = 1 to array1 do
49187: LD_ADDR_VAR 0 4
49191: PUSH
49192: DOUBLE
49193: LD_INT 1
49195: DEC
49196: ST_TO_ADDR
49197: LD_VAR 0 1
49201: PUSH
49202: FOR_TO
49203: IFFALSE 49241
// if array1 [ i ] <> array2 [ i ] then
49205: LD_VAR 0 1
49209: PUSH
49210: LD_VAR 0 4
49214: ARRAY
49215: PUSH
49216: LD_VAR 0 2
49220: PUSH
49221: LD_VAR 0 4
49225: ARRAY
49226: NONEQUAL
49227: IFFALSE 49239
// begin result := false ;
49229: LD_ADDR_VAR 0 3
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// break ;
49237: GO 49241
// end ;
49239: GO 49202
49241: POP
49242: POP
// end ;
49243: LD_VAR 0 3
49247: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49248: LD_INT 0
49250: PPUSH
49251: PPUSH
49252: PPUSH
// pom := GetBase ( fac ) ;
49253: LD_ADDR_VAR 0 5
49257: PUSH
49258: LD_VAR 0 1
49262: PPUSH
49263: CALL_OW 274
49267: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49268: LD_ADDR_VAR 0 4
49272: PUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PPUSH
49282: LD_VAR 0 2
49286: PUSH
49287: LD_INT 2
49289: ARRAY
49290: PPUSH
49291: LD_VAR 0 2
49295: PUSH
49296: LD_INT 3
49298: ARRAY
49299: PPUSH
49300: LD_VAR 0 2
49304: PUSH
49305: LD_INT 4
49307: ARRAY
49308: PPUSH
49309: CALL_OW 449
49313: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49314: LD_ADDR_VAR 0 3
49318: PUSH
49319: LD_VAR 0 5
49323: PPUSH
49324: LD_INT 1
49326: PPUSH
49327: CALL_OW 275
49331: PUSH
49332: LD_VAR 0 4
49336: PUSH
49337: LD_INT 1
49339: ARRAY
49340: GREATEREQUAL
49341: PUSH
49342: LD_VAR 0 5
49346: PPUSH
49347: LD_INT 2
49349: PPUSH
49350: CALL_OW 275
49354: PUSH
49355: LD_VAR 0 4
49359: PUSH
49360: LD_INT 2
49362: ARRAY
49363: GREATEREQUAL
49364: AND
49365: PUSH
49366: LD_VAR 0 5
49370: PPUSH
49371: LD_INT 3
49373: PPUSH
49374: CALL_OW 275
49378: PUSH
49379: LD_VAR 0 4
49383: PUSH
49384: LD_INT 3
49386: ARRAY
49387: GREATEREQUAL
49388: AND
49389: ST_TO_ADDR
// end ;
49390: LD_VAR 0 3
49394: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49395: LD_INT 0
49397: PPUSH
49398: PPUSH
49399: PPUSH
49400: PPUSH
// pom := GetBase ( building ) ;
49401: LD_ADDR_VAR 0 3
49405: PUSH
49406: LD_VAR 0 1
49410: PPUSH
49411: CALL_OW 274
49415: ST_TO_ADDR
// if not pom then
49416: LD_VAR 0 3
49420: NOT
49421: IFFALSE 49425
// exit ;
49423: GO 49595
// btype := GetBType ( building ) ;
49425: LD_ADDR_VAR 0 5
49429: PUSH
49430: LD_VAR 0 1
49434: PPUSH
49435: CALL_OW 266
49439: ST_TO_ADDR
// if btype = b_armoury then
49440: LD_VAR 0 5
49444: PUSH
49445: LD_INT 4
49447: EQUAL
49448: IFFALSE 49458
// btype := b_barracks ;
49450: LD_ADDR_VAR 0 5
49454: PUSH
49455: LD_INT 5
49457: ST_TO_ADDR
// if btype = b_depot then
49458: LD_VAR 0 5
49462: PUSH
49463: LD_INT 0
49465: EQUAL
49466: IFFALSE 49476
// btype := b_warehouse ;
49468: LD_ADDR_VAR 0 5
49472: PUSH
49473: LD_INT 1
49475: ST_TO_ADDR
// if btype = b_workshop then
49476: LD_VAR 0 5
49480: PUSH
49481: LD_INT 2
49483: EQUAL
49484: IFFALSE 49494
// btype := b_factory ;
49486: LD_ADDR_VAR 0 5
49490: PUSH
49491: LD_INT 3
49493: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49494: LD_ADDR_VAR 0 4
49498: PUSH
49499: LD_VAR 0 5
49503: PPUSH
49504: LD_VAR 0 1
49508: PPUSH
49509: CALL_OW 248
49513: PPUSH
49514: CALL_OW 450
49518: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49519: LD_ADDR_VAR 0 2
49523: PUSH
49524: LD_VAR 0 3
49528: PPUSH
49529: LD_INT 1
49531: PPUSH
49532: CALL_OW 275
49536: PUSH
49537: LD_VAR 0 4
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: GREATEREQUAL
49546: PUSH
49547: LD_VAR 0 3
49551: PPUSH
49552: LD_INT 2
49554: PPUSH
49555: CALL_OW 275
49559: PUSH
49560: LD_VAR 0 4
49564: PUSH
49565: LD_INT 2
49567: ARRAY
49568: GREATEREQUAL
49569: AND
49570: PUSH
49571: LD_VAR 0 3
49575: PPUSH
49576: LD_INT 3
49578: PPUSH
49579: CALL_OW 275
49583: PUSH
49584: LD_VAR 0 4
49588: PUSH
49589: LD_INT 3
49591: ARRAY
49592: GREATEREQUAL
49593: AND
49594: ST_TO_ADDR
// end ;
49595: LD_VAR 0 2
49599: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49600: LD_INT 0
49602: PPUSH
49603: PPUSH
49604: PPUSH
// pom := GetBase ( building ) ;
49605: LD_ADDR_VAR 0 4
49609: PUSH
49610: LD_VAR 0 1
49614: PPUSH
49615: CALL_OW 274
49619: ST_TO_ADDR
// if not pom then
49620: LD_VAR 0 4
49624: NOT
49625: IFFALSE 49629
// exit ;
49627: GO 49730
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49629: LD_ADDR_VAR 0 5
49633: PUSH
49634: LD_VAR 0 2
49638: PPUSH
49639: LD_VAR 0 1
49643: PPUSH
49644: CALL_OW 248
49648: PPUSH
49649: CALL_OW 450
49653: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49654: LD_ADDR_VAR 0 3
49658: PUSH
49659: LD_VAR 0 4
49663: PPUSH
49664: LD_INT 1
49666: PPUSH
49667: CALL_OW 275
49671: PUSH
49672: LD_VAR 0 5
49676: PUSH
49677: LD_INT 1
49679: ARRAY
49680: GREATEREQUAL
49681: PUSH
49682: LD_VAR 0 4
49686: PPUSH
49687: LD_INT 2
49689: PPUSH
49690: CALL_OW 275
49694: PUSH
49695: LD_VAR 0 5
49699: PUSH
49700: LD_INT 2
49702: ARRAY
49703: GREATEREQUAL
49704: AND
49705: PUSH
49706: LD_VAR 0 4
49710: PPUSH
49711: LD_INT 3
49713: PPUSH
49714: CALL_OW 275
49718: PUSH
49719: LD_VAR 0 5
49723: PUSH
49724: LD_INT 3
49726: ARRAY
49727: GREATEREQUAL
49728: AND
49729: ST_TO_ADDR
// end ;
49730: LD_VAR 0 3
49734: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49735: LD_INT 0
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
49742: PPUSH
49743: PPUSH
49744: PPUSH
49745: PPUSH
49746: PPUSH
49747: PPUSH
// result := false ;
49748: LD_ADDR_VAR 0 8
49752: PUSH
49753: LD_INT 0
49755: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49756: LD_VAR 0 5
49760: NOT
49761: PUSH
49762: LD_VAR 0 1
49766: NOT
49767: OR
49768: PUSH
49769: LD_VAR 0 2
49773: NOT
49774: OR
49775: PUSH
49776: LD_VAR 0 3
49780: NOT
49781: OR
49782: IFFALSE 49786
// exit ;
49784: GO 50600
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49786: LD_ADDR_VAR 0 14
49790: PUSH
49791: LD_VAR 0 1
49795: PPUSH
49796: LD_VAR 0 2
49800: PPUSH
49801: LD_VAR 0 3
49805: PPUSH
49806: LD_VAR 0 4
49810: PPUSH
49811: LD_VAR 0 5
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PPUSH
49820: CALL_OW 248
49824: PPUSH
49825: LD_INT 0
49827: PPUSH
49828: CALL 51833 0 6
49832: ST_TO_ADDR
// if not hexes then
49833: LD_VAR 0 14
49837: NOT
49838: IFFALSE 49842
// exit ;
49840: GO 50600
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49842: LD_ADDR_VAR 0 17
49846: PUSH
49847: LD_VAR 0 5
49851: PPUSH
49852: LD_INT 22
49854: PUSH
49855: LD_VAR 0 13
49859: PPUSH
49860: CALL_OW 255
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 30
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 30
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PPUSH
49901: CALL_OW 72
49905: ST_TO_ADDR
// for i = 1 to hexes do
49906: LD_ADDR_VAR 0 9
49910: PUSH
49911: DOUBLE
49912: LD_INT 1
49914: DEC
49915: ST_TO_ADDR
49916: LD_VAR 0 14
49920: PUSH
49921: FOR_TO
49922: IFFALSE 50598
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49924: LD_ADDR_VAR 0 13
49928: PUSH
49929: LD_VAR 0 14
49933: PUSH
49934: LD_VAR 0 9
49938: ARRAY
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: LD_VAR 0 14
49948: PUSH
49949: LD_VAR 0 9
49953: ARRAY
49954: PUSH
49955: LD_INT 2
49957: ARRAY
49958: PPUSH
49959: CALL_OW 428
49963: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49964: LD_VAR 0 14
49968: PUSH
49969: LD_VAR 0 9
49973: ARRAY
49974: PUSH
49975: LD_INT 1
49977: ARRAY
49978: PPUSH
49979: LD_VAR 0 14
49983: PUSH
49984: LD_VAR 0 9
49988: ARRAY
49989: PUSH
49990: LD_INT 2
49992: ARRAY
49993: PPUSH
49994: CALL_OW 351
49998: PUSH
49999: LD_VAR 0 14
50003: PUSH
50004: LD_VAR 0 9
50008: ARRAY
50009: PUSH
50010: LD_INT 1
50012: ARRAY
50013: PPUSH
50014: LD_VAR 0 14
50018: PUSH
50019: LD_VAR 0 9
50023: ARRAY
50024: PUSH
50025: LD_INT 2
50027: ARRAY
50028: PPUSH
50029: CALL_OW 488
50033: NOT
50034: OR
50035: PUSH
50036: LD_VAR 0 13
50040: PPUSH
50041: CALL_OW 247
50045: PUSH
50046: LD_INT 3
50048: EQUAL
50049: OR
50050: IFFALSE 50056
// exit ;
50052: POP
50053: POP
50054: GO 50600
// if not tmp then
50056: LD_VAR 0 13
50060: NOT
50061: IFFALSE 50065
// continue ;
50063: GO 49921
// result := true ;
50065: LD_ADDR_VAR 0 8
50069: PUSH
50070: LD_INT 1
50072: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50073: LD_VAR 0 6
50077: PUSH
50078: LD_VAR 0 13
50082: PPUSH
50083: CALL_OW 247
50087: PUSH
50088: LD_INT 2
50090: EQUAL
50091: AND
50092: PUSH
50093: LD_VAR 0 13
50097: PPUSH
50098: CALL_OW 263
50102: PUSH
50103: LD_INT 1
50105: EQUAL
50106: AND
50107: IFFALSE 50271
// begin if IsDrivenBy ( tmp ) then
50109: LD_VAR 0 13
50113: PPUSH
50114: CALL_OW 311
50118: IFFALSE 50122
// continue ;
50120: GO 49921
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50122: LD_VAR 0 6
50126: PPUSH
50127: LD_INT 3
50129: PUSH
50130: LD_INT 60
50132: PUSH
50133: EMPTY
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 55
50145: PUSH
50146: EMPTY
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PPUSH
50157: CALL_OW 72
50161: IFFALSE 50269
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50163: LD_ADDR_VAR 0 18
50167: PUSH
50168: LD_VAR 0 6
50172: PPUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 60
50178: PUSH
50179: EMPTY
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: LD_INT 55
50191: PUSH
50192: EMPTY
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PPUSH
50203: CALL_OW 72
50207: PUSH
50208: LD_INT 1
50210: ARRAY
50211: ST_TO_ADDR
// if IsInUnit ( driver ) then
50212: LD_VAR 0 18
50216: PPUSH
50217: CALL_OW 310
50221: IFFALSE 50232
// ComExit ( driver ) ;
50223: LD_VAR 0 18
50227: PPUSH
50228: CALL 75612 0 1
// AddComEnterUnit ( driver , tmp ) ;
50232: LD_VAR 0 18
50236: PPUSH
50237: LD_VAR 0 13
50241: PPUSH
50242: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50246: LD_VAR 0 18
50250: PPUSH
50251: LD_VAR 0 7
50255: PPUSH
50256: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50260: LD_VAR 0 18
50264: PPUSH
50265: CALL_OW 181
// end ; continue ;
50269: GO 49921
// end ; if not cleaners or not tmp in cleaners then
50271: LD_VAR 0 6
50275: NOT
50276: PUSH
50277: LD_VAR 0 13
50281: PUSH
50282: LD_VAR 0 6
50286: IN
50287: NOT
50288: OR
50289: IFFALSE 50596
// begin if dep then
50291: LD_VAR 0 17
50295: IFFALSE 50431
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50297: LD_ADDR_VAR 0 16
50301: PUSH
50302: LD_VAR 0 17
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: PPUSH
50311: CALL_OW 250
50315: PPUSH
50316: LD_VAR 0 17
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: PPUSH
50325: CALL_OW 254
50329: PPUSH
50330: LD_INT 5
50332: PPUSH
50333: CALL_OW 272
50337: PUSH
50338: LD_VAR 0 17
50342: PUSH
50343: LD_INT 1
50345: ARRAY
50346: PPUSH
50347: CALL_OW 251
50351: PPUSH
50352: LD_VAR 0 17
50356: PUSH
50357: LD_INT 1
50359: ARRAY
50360: PPUSH
50361: CALL_OW 254
50365: PPUSH
50366: LD_INT 5
50368: PPUSH
50369: CALL_OW 273
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50378: LD_VAR 0 16
50382: PUSH
50383: LD_INT 1
50385: ARRAY
50386: PPUSH
50387: LD_VAR 0 16
50391: PUSH
50392: LD_INT 2
50394: ARRAY
50395: PPUSH
50396: CALL_OW 488
50400: IFFALSE 50431
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50402: LD_VAR 0 13
50406: PPUSH
50407: LD_VAR 0 16
50411: PUSH
50412: LD_INT 1
50414: ARRAY
50415: PPUSH
50416: LD_VAR 0 16
50420: PUSH
50421: LD_INT 2
50423: ARRAY
50424: PPUSH
50425: CALL_OW 111
// continue ;
50429: GO 49921
// end ; end ; r := GetDir ( tmp ) ;
50431: LD_ADDR_VAR 0 15
50435: PUSH
50436: LD_VAR 0 13
50440: PPUSH
50441: CALL_OW 254
50445: ST_TO_ADDR
// if r = 5 then
50446: LD_VAR 0 15
50450: PUSH
50451: LD_INT 5
50453: EQUAL
50454: IFFALSE 50464
// r := 0 ;
50456: LD_ADDR_VAR 0 15
50460: PUSH
50461: LD_INT 0
50463: ST_TO_ADDR
// for j = r to 5 do
50464: LD_ADDR_VAR 0 10
50468: PUSH
50469: DOUBLE
50470: LD_VAR 0 15
50474: DEC
50475: ST_TO_ADDR
50476: LD_INT 5
50478: PUSH
50479: FOR_TO
50480: IFFALSE 50594
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50482: LD_ADDR_VAR 0 11
50486: PUSH
50487: LD_VAR 0 13
50491: PPUSH
50492: CALL_OW 250
50496: PPUSH
50497: LD_VAR 0 10
50501: PPUSH
50502: LD_INT 2
50504: PPUSH
50505: CALL_OW 272
50509: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50510: LD_ADDR_VAR 0 12
50514: PUSH
50515: LD_VAR 0 13
50519: PPUSH
50520: CALL_OW 251
50524: PPUSH
50525: LD_VAR 0 10
50529: PPUSH
50530: LD_INT 2
50532: PPUSH
50533: CALL_OW 273
50537: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50538: LD_VAR 0 11
50542: PPUSH
50543: LD_VAR 0 12
50547: PPUSH
50548: CALL_OW 488
50552: PUSH
50553: LD_VAR 0 11
50557: PPUSH
50558: LD_VAR 0 12
50562: PPUSH
50563: CALL_OW 428
50567: NOT
50568: AND
50569: IFFALSE 50592
// begin ComMoveXY ( tmp , _x , _y ) ;
50571: LD_VAR 0 13
50575: PPUSH
50576: LD_VAR 0 11
50580: PPUSH
50581: LD_VAR 0 12
50585: PPUSH
50586: CALL_OW 111
// break ;
50590: GO 50594
// end ; end ;
50592: GO 50479
50594: POP
50595: POP
// end ; end ;
50596: GO 49921
50598: POP
50599: POP
// end ;
50600: LD_VAR 0 8
50604: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50605: LD_INT 0
50607: PPUSH
// result := true ;
50608: LD_ADDR_VAR 0 3
50612: PUSH
50613: LD_INT 1
50615: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50616: LD_VAR 0 2
50620: PUSH
50621: LD_INT 24
50623: DOUBLE
50624: EQUAL
50625: IFTRUE 50635
50627: LD_INT 33
50629: DOUBLE
50630: EQUAL
50631: IFTRUE 50635
50633: GO 50660
50635: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50636: LD_ADDR_VAR 0 3
50640: PUSH
50641: LD_INT 32
50643: PPUSH
50644: LD_VAR 0 1
50648: PPUSH
50649: CALL_OW 321
50653: PUSH
50654: LD_INT 2
50656: EQUAL
50657: ST_TO_ADDR
50658: GO 50976
50660: LD_INT 20
50662: DOUBLE
50663: EQUAL
50664: IFTRUE 50668
50666: GO 50693
50668: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50669: LD_ADDR_VAR 0 3
50673: PUSH
50674: LD_INT 6
50676: PPUSH
50677: LD_VAR 0 1
50681: PPUSH
50682: CALL_OW 321
50686: PUSH
50687: LD_INT 2
50689: EQUAL
50690: ST_TO_ADDR
50691: GO 50976
50693: LD_INT 22
50695: DOUBLE
50696: EQUAL
50697: IFTRUE 50707
50699: LD_INT 36
50701: DOUBLE
50702: EQUAL
50703: IFTRUE 50707
50705: GO 50732
50707: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50708: LD_ADDR_VAR 0 3
50712: PUSH
50713: LD_INT 15
50715: PPUSH
50716: LD_VAR 0 1
50720: PPUSH
50721: CALL_OW 321
50725: PUSH
50726: LD_INT 2
50728: EQUAL
50729: ST_TO_ADDR
50730: GO 50976
50732: LD_INT 30
50734: DOUBLE
50735: EQUAL
50736: IFTRUE 50740
50738: GO 50765
50740: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50741: LD_ADDR_VAR 0 3
50745: PUSH
50746: LD_INT 20
50748: PPUSH
50749: LD_VAR 0 1
50753: PPUSH
50754: CALL_OW 321
50758: PUSH
50759: LD_INT 2
50761: EQUAL
50762: ST_TO_ADDR
50763: GO 50976
50765: LD_INT 28
50767: DOUBLE
50768: EQUAL
50769: IFTRUE 50779
50771: LD_INT 21
50773: DOUBLE
50774: EQUAL
50775: IFTRUE 50779
50777: GO 50804
50779: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50780: LD_ADDR_VAR 0 3
50784: PUSH
50785: LD_INT 21
50787: PPUSH
50788: LD_VAR 0 1
50792: PPUSH
50793: CALL_OW 321
50797: PUSH
50798: LD_INT 2
50800: EQUAL
50801: ST_TO_ADDR
50802: GO 50976
50804: LD_INT 16
50806: DOUBLE
50807: EQUAL
50808: IFTRUE 50812
50810: GO 50837
50812: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50813: LD_ADDR_VAR 0 3
50817: PUSH
50818: LD_INT 84
50820: PPUSH
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 321
50830: PUSH
50831: LD_INT 2
50833: EQUAL
50834: ST_TO_ADDR
50835: GO 50976
50837: LD_INT 19
50839: DOUBLE
50840: EQUAL
50841: IFTRUE 50851
50843: LD_INT 23
50845: DOUBLE
50846: EQUAL
50847: IFTRUE 50851
50849: GO 50876
50851: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50852: LD_ADDR_VAR 0 3
50856: PUSH
50857: LD_INT 83
50859: PPUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: CALL_OW 321
50869: PUSH
50870: LD_INT 2
50872: EQUAL
50873: ST_TO_ADDR
50874: GO 50976
50876: LD_INT 17
50878: DOUBLE
50879: EQUAL
50880: IFTRUE 50884
50882: GO 50909
50884: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50885: LD_ADDR_VAR 0 3
50889: PUSH
50890: LD_INT 39
50892: PPUSH
50893: LD_VAR 0 1
50897: PPUSH
50898: CALL_OW 321
50902: PUSH
50903: LD_INT 2
50905: EQUAL
50906: ST_TO_ADDR
50907: GO 50976
50909: LD_INT 18
50911: DOUBLE
50912: EQUAL
50913: IFTRUE 50917
50915: GO 50942
50917: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50918: LD_ADDR_VAR 0 3
50922: PUSH
50923: LD_INT 40
50925: PPUSH
50926: LD_VAR 0 1
50930: PPUSH
50931: CALL_OW 321
50935: PUSH
50936: LD_INT 2
50938: EQUAL
50939: ST_TO_ADDR
50940: GO 50976
50942: LD_INT 27
50944: DOUBLE
50945: EQUAL
50946: IFTRUE 50950
50948: GO 50975
50950: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50951: LD_ADDR_VAR 0 3
50955: PUSH
50956: LD_INT 35
50958: PPUSH
50959: LD_VAR 0 1
50963: PPUSH
50964: CALL_OW 321
50968: PUSH
50969: LD_INT 2
50971: EQUAL
50972: ST_TO_ADDR
50973: GO 50976
50975: POP
// end ;
50976: LD_VAR 0 3
50980: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50981: LD_INT 0
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
50989: PPUSH
50990: PPUSH
50991: PPUSH
50992: PPUSH
50993: PPUSH
// result := false ;
50994: LD_ADDR_VAR 0 6
50998: PUSH
50999: LD_INT 0
51001: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51002: LD_VAR 0 1
51006: NOT
51007: PUSH
51008: LD_VAR 0 1
51012: PPUSH
51013: CALL_OW 266
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: IN
51028: NOT
51029: OR
51030: PUSH
51031: LD_VAR 0 2
51035: NOT
51036: OR
51037: PUSH
51038: LD_VAR 0 5
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: LD_INT 5
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: IN
51069: NOT
51070: OR
51071: PUSH
51072: LD_VAR 0 3
51076: PPUSH
51077: LD_VAR 0 4
51081: PPUSH
51082: CALL_OW 488
51086: NOT
51087: OR
51088: IFFALSE 51092
// exit ;
51090: GO 51828
// side := GetSide ( depot ) ;
51092: LD_ADDR_VAR 0 9
51096: PUSH
51097: LD_VAR 0 1
51101: PPUSH
51102: CALL_OW 255
51106: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51107: LD_VAR 0 9
51111: PPUSH
51112: LD_VAR 0 2
51116: PPUSH
51117: CALL 50605 0 2
51121: NOT
51122: IFFALSE 51126
// exit ;
51124: GO 51828
// pom := GetBase ( depot ) ;
51126: LD_ADDR_VAR 0 10
51130: PUSH
51131: LD_VAR 0 1
51135: PPUSH
51136: CALL_OW 274
51140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51141: LD_ADDR_VAR 0 11
51145: PUSH
51146: LD_VAR 0 2
51150: PPUSH
51151: LD_VAR 0 1
51155: PPUSH
51156: CALL_OW 248
51160: PPUSH
51161: CALL_OW 450
51165: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51166: LD_VAR 0 10
51170: PPUSH
51171: LD_INT 1
51173: PPUSH
51174: CALL_OW 275
51178: PUSH
51179: LD_VAR 0 11
51183: PUSH
51184: LD_INT 1
51186: ARRAY
51187: GREATEREQUAL
51188: PUSH
51189: LD_VAR 0 10
51193: PPUSH
51194: LD_INT 2
51196: PPUSH
51197: CALL_OW 275
51201: PUSH
51202: LD_VAR 0 11
51206: PUSH
51207: LD_INT 2
51209: ARRAY
51210: GREATEREQUAL
51211: AND
51212: PUSH
51213: LD_VAR 0 10
51217: PPUSH
51218: LD_INT 3
51220: PPUSH
51221: CALL_OW 275
51225: PUSH
51226: LD_VAR 0 11
51230: PUSH
51231: LD_INT 3
51233: ARRAY
51234: GREATEREQUAL
51235: AND
51236: NOT
51237: IFFALSE 51241
// exit ;
51239: GO 51828
// if GetBType ( depot ) = b_depot then
51241: LD_VAR 0 1
51245: PPUSH
51246: CALL_OW 266
51250: PUSH
51251: LD_INT 0
51253: EQUAL
51254: IFFALSE 51266
// dist := 28 else
51256: LD_ADDR_VAR 0 14
51260: PUSH
51261: LD_INT 28
51263: ST_TO_ADDR
51264: GO 51274
// dist := 36 ;
51266: LD_ADDR_VAR 0 14
51270: PUSH
51271: LD_INT 36
51273: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51274: LD_VAR 0 1
51278: PPUSH
51279: LD_VAR 0 3
51283: PPUSH
51284: LD_VAR 0 4
51288: PPUSH
51289: CALL_OW 297
51293: PUSH
51294: LD_VAR 0 14
51298: GREATER
51299: IFFALSE 51303
// exit ;
51301: GO 51828
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51303: LD_ADDR_VAR 0 12
51307: PUSH
51308: LD_VAR 0 2
51312: PPUSH
51313: LD_VAR 0 3
51317: PPUSH
51318: LD_VAR 0 4
51322: PPUSH
51323: LD_VAR 0 5
51327: PPUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: CALL_OW 248
51337: PPUSH
51338: LD_INT 0
51340: PPUSH
51341: CALL 51833 0 6
51345: ST_TO_ADDR
// if not hexes then
51346: LD_VAR 0 12
51350: NOT
51351: IFFALSE 51355
// exit ;
51353: GO 51828
// hex := GetHexInfo ( x , y ) ;
51355: LD_ADDR_VAR 0 15
51359: PUSH
51360: LD_VAR 0 3
51364: PPUSH
51365: LD_VAR 0 4
51369: PPUSH
51370: CALL_OW 546
51374: ST_TO_ADDR
// if hex [ 1 ] then
51375: LD_VAR 0 15
51379: PUSH
51380: LD_INT 1
51382: ARRAY
51383: IFFALSE 51387
// exit ;
51385: GO 51828
// height := hex [ 2 ] ;
51387: LD_ADDR_VAR 0 13
51391: PUSH
51392: LD_VAR 0 15
51396: PUSH
51397: LD_INT 2
51399: ARRAY
51400: ST_TO_ADDR
// for i = 1 to hexes do
51401: LD_ADDR_VAR 0 7
51405: PUSH
51406: DOUBLE
51407: LD_INT 1
51409: DEC
51410: ST_TO_ADDR
51411: LD_VAR 0 12
51415: PUSH
51416: FOR_TO
51417: IFFALSE 51747
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51419: LD_VAR 0 12
51423: PUSH
51424: LD_VAR 0 7
51428: ARRAY
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: PPUSH
51434: LD_VAR 0 12
51438: PUSH
51439: LD_VAR 0 7
51443: ARRAY
51444: PUSH
51445: LD_INT 2
51447: ARRAY
51448: PPUSH
51449: CALL_OW 488
51453: NOT
51454: PUSH
51455: LD_VAR 0 12
51459: PUSH
51460: LD_VAR 0 7
51464: ARRAY
51465: PUSH
51466: LD_INT 1
51468: ARRAY
51469: PPUSH
51470: LD_VAR 0 12
51474: PUSH
51475: LD_VAR 0 7
51479: ARRAY
51480: PUSH
51481: LD_INT 2
51483: ARRAY
51484: PPUSH
51485: CALL_OW 428
51489: PUSH
51490: LD_INT 0
51492: GREATER
51493: OR
51494: PUSH
51495: LD_VAR 0 12
51499: PUSH
51500: LD_VAR 0 7
51504: ARRAY
51505: PUSH
51506: LD_INT 1
51508: ARRAY
51509: PPUSH
51510: LD_VAR 0 12
51514: PUSH
51515: LD_VAR 0 7
51519: ARRAY
51520: PUSH
51521: LD_INT 2
51523: ARRAY
51524: PPUSH
51525: CALL_OW 351
51529: OR
51530: IFFALSE 51536
// exit ;
51532: POP
51533: POP
51534: GO 51828
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51536: LD_ADDR_VAR 0 8
51540: PUSH
51541: LD_VAR 0 12
51545: PUSH
51546: LD_VAR 0 7
51550: ARRAY
51551: PUSH
51552: LD_INT 1
51554: ARRAY
51555: PPUSH
51556: LD_VAR 0 12
51560: PUSH
51561: LD_VAR 0 7
51565: ARRAY
51566: PUSH
51567: LD_INT 2
51569: ARRAY
51570: PPUSH
51571: CALL_OW 546
51575: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51576: LD_VAR 0 8
51580: PUSH
51581: LD_INT 1
51583: ARRAY
51584: PUSH
51585: LD_VAR 0 8
51589: PUSH
51590: LD_INT 2
51592: ARRAY
51593: PUSH
51594: LD_VAR 0 13
51598: PUSH
51599: LD_INT 2
51601: PLUS
51602: GREATER
51603: OR
51604: PUSH
51605: LD_VAR 0 8
51609: PUSH
51610: LD_INT 2
51612: ARRAY
51613: PUSH
51614: LD_VAR 0 13
51618: PUSH
51619: LD_INT 2
51621: MINUS
51622: LESS
51623: OR
51624: PUSH
51625: LD_VAR 0 8
51629: PUSH
51630: LD_INT 3
51632: ARRAY
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 8
51639: PUSH
51640: LD_INT 9
51642: PUSH
51643: LD_INT 10
51645: PUSH
51646: LD_INT 11
51648: PUSH
51649: LD_INT 12
51651: PUSH
51652: LD_INT 13
51654: PUSH
51655: LD_INT 16
51657: PUSH
51658: LD_INT 17
51660: PUSH
51661: LD_INT 18
51663: PUSH
51664: LD_INT 19
51666: PUSH
51667: LD_INT 20
51669: PUSH
51670: LD_INT 21
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: IN
51688: NOT
51689: OR
51690: PUSH
51691: LD_VAR 0 8
51695: PUSH
51696: LD_INT 5
51698: ARRAY
51699: NOT
51700: OR
51701: PUSH
51702: LD_VAR 0 8
51706: PUSH
51707: LD_INT 6
51709: ARRAY
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 7
51719: PUSH
51720: LD_INT 9
51722: PUSH
51723: LD_INT 10
51725: PUSH
51726: LD_INT 11
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: IN
51737: NOT
51738: OR
51739: IFFALSE 51745
// exit ;
51741: POP
51742: POP
51743: GO 51828
// end ;
51745: GO 51416
51747: POP
51748: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51749: LD_VAR 0 9
51753: PPUSH
51754: LD_VAR 0 3
51758: PPUSH
51759: LD_VAR 0 4
51763: PPUSH
51764: LD_INT 20
51766: PPUSH
51767: CALL 43780 0 4
51771: PUSH
51772: LD_INT 4
51774: ARRAY
51775: IFFALSE 51779
// exit ;
51777: GO 51828
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51779: LD_VAR 0 2
51783: PUSH
51784: LD_INT 29
51786: PUSH
51787: LD_INT 30
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: IN
51794: PUSH
51795: LD_VAR 0 3
51799: PPUSH
51800: LD_VAR 0 4
51804: PPUSH
51805: LD_VAR 0 9
51809: PPUSH
51810: CALL_OW 440
51814: NOT
51815: AND
51816: IFFALSE 51820
// exit ;
51818: GO 51828
// result := true ;
51820: LD_ADDR_VAR 0 6
51824: PUSH
51825: LD_INT 1
51827: ST_TO_ADDR
// end ;
51828: LD_VAR 0 6
51832: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51833: LD_INT 0
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
51858: PPUSH
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
51888: PPUSH
51889: PPUSH
51890: PPUSH
51891: PPUSH
51892: PPUSH
// result = [ ] ;
51893: LD_ADDR_VAR 0 7
51897: PUSH
51898: EMPTY
51899: ST_TO_ADDR
// temp_list = [ ] ;
51900: LD_ADDR_VAR 0 9
51904: PUSH
51905: EMPTY
51906: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51907: LD_VAR 0 4
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: LD_INT 4
51926: PUSH
51927: LD_INT 5
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: IN
51938: NOT
51939: PUSH
51940: LD_VAR 0 1
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: IN
51955: PUSH
51956: LD_VAR 0 5
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: IN
51975: NOT
51976: AND
51977: OR
51978: IFFALSE 51982
// exit ;
51980: GO 70373
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51982: LD_VAR 0 1
51986: PUSH
51987: LD_INT 6
51989: PUSH
51990: LD_INT 7
51992: PUSH
51993: LD_INT 8
51995: PUSH
51996: LD_INT 13
51998: PUSH
51999: LD_INT 12
52001: PUSH
52002: LD_INT 15
52004: PUSH
52005: LD_INT 11
52007: PUSH
52008: LD_INT 14
52010: PUSH
52011: LD_INT 10
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: IN
52025: IFFALSE 52035
// btype = b_lab ;
52027: LD_ADDR_VAR 0 1
52031: PUSH
52032: LD_INT 6
52034: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52035: LD_VAR 0 6
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: IN
52054: NOT
52055: PUSH
52056: LD_VAR 0 1
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 6
52075: PUSH
52076: LD_INT 36
52078: PUSH
52079: LD_INT 4
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: LD_INT 31
52087: PUSH
52088: LD_INT 32
52090: PUSH
52091: LD_INT 33
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: IN
52107: NOT
52108: PUSH
52109: LD_VAR 0 6
52113: PUSH
52114: LD_INT 1
52116: EQUAL
52117: AND
52118: OR
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: IN
52135: NOT
52136: PUSH
52137: LD_VAR 0 6
52141: PUSH
52142: LD_INT 2
52144: EQUAL
52145: AND
52146: OR
52147: IFFALSE 52157
// mode = 0 ;
52149: LD_ADDR_VAR 0 6
52153: PUSH
52154: LD_INT 0
52156: ST_TO_ADDR
// case mode of 0 :
52157: LD_VAR 0 6
52161: PUSH
52162: LD_INT 0
52164: DOUBLE
52165: EQUAL
52166: IFTRUE 52170
52168: GO 63623
52170: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52171: LD_ADDR_VAR 0 11
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52364: LD_ADDR_VAR 0 12
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: NEG
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52560: LD_ADDR_VAR 0 13
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52759: LD_ADDR_VAR 0 14
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 3
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52955: LD_ADDR_VAR 0 15
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53148: LD_ADDR_VAR 0 16
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53341: LD_ADDR_VAR 0 17
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53571: LD_ADDR_VAR 0 18
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53801: LD_ADDR_VAR 0 19
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54031: LD_ADDR_VAR 0 20
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54261: LD_ADDR_VAR 0 21
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54491: LD_ADDR_VAR 0 22
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54721: LD_ADDR_VAR 0 23
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55001: LD_ADDR_VAR 0 24
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55277: LD_ADDR_VAR 0 25
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55551: LD_ADDR_VAR 0 26
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55827: LD_ADDR_VAR 0 27
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56107: LD_ADDR_VAR 0 28
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56389: LD_ADDR_VAR 0 29
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 3
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56668: LD_ADDR_VAR 0 30
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56946: LD_ADDR_VAR 0 31
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 3
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57224: LD_ADDR_VAR 0 32
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57502: LD_ADDR_VAR 0 33
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57781: LD_ADDR_VAR 0 34
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58061: LD_ADDR_VAR 0 35
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58173: LD_ADDR_VAR 0 36
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58285: LD_ADDR_VAR 0 37
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58397: LD_ADDR_VAR 0 38
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58509: LD_ADDR_VAR 0 39
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58621: LD_ADDR_VAR 0 40
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58733: LD_ADDR_VAR 0 41
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 3
59042: NEG
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59083: LD_ADDR_VAR 0 42
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 3
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 3
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59433: LD_ADDR_VAR 0 43
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59781: LD_ADDR_VAR 0 44
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60131: LD_ADDR_VAR 0 45
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 3
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: LD_INT 3
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 3
60428: NEG
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60481: LD_ADDR_VAR 0 46
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60829: LD_ADDR_VAR 0 47
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60980: LD_ADDR_VAR 0 48
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61127: LD_ADDR_VAR 0 49
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 2
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61271: LD_ADDR_VAR 0 50
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61415: LD_ADDR_VAR 0 51
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61562: LD_ADDR_VAR 0 52
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61713: LD_ADDR_VAR 0 53
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: NEG
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61943: LD_ADDR_VAR 0 54
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62173: LD_ADDR_VAR 0 55
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 2
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: NEG
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: NEG
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62403: LD_ADDR_VAR 0 56
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 2
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62633: LD_ADDR_VAR 0 57
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62863: LD_ADDR_VAR 0 58
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 2
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63093: LD_ADDR_VAR 0 59
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63181: LD_ADDR_VAR 0 60
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63269: LD_ADDR_VAR 0 61
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63357: LD_ADDR_VAR 0 62
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63445: LD_ADDR_VAR 0 63
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63533: LD_ADDR_VAR 0 64
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// end ; 1 :
63621: GO 69518
63623: LD_INT 1
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63631
63629: GO 66254
63631: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63632: LD_ADDR_VAR 0 11
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 3
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63676: LD_ADDR_VAR 0 12
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63717: LD_ADDR_VAR 0 13
63721: PUSH
63722: LD_INT 3
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 3
63734: PUSH
63735: LD_INT 3
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 3
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63757: LD_ADDR_VAR 0 14
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63798: LD_ADDR_VAR 0 15
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63842: LD_ADDR_VAR 0 16
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 3
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: LD_INT 3
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63888: LD_ADDR_VAR 0 17
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63932: LD_ADDR_VAR 0 18
63936: PUSH
63937: LD_INT 2
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 3
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63973: LD_ADDR_VAR 0 19
63977: PUSH
63978: LD_INT 3
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 3
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 2
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64013: LD_ADDR_VAR 0 20
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 3
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64054: LD_ADDR_VAR 0 21
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: NEG
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64098: LD_ADDR_VAR 0 22
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: LD_INT 3
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 3
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 3
64129: NEG
64130: PUSH
64131: LD_INT 3
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64144: LD_ADDR_VAR 0 23
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 3
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 4
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: LIST
64187: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64188: LD_ADDR_VAR 0 24
64192: PUSH
64193: LD_INT 3
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 4
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64229: LD_ADDR_VAR 0 25
64233: PUSH
64234: LD_INT 3
64236: PUSH
64237: LD_INT 3
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 4
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: LD_INT 4
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64269: LD_ADDR_VAR 0 26
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 3
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: LD_INT 4
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 3
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64310: LD_ADDR_VAR 0 27
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 4
64339: NEG
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64354: LD_ADDR_VAR 0 28
64358: PUSH
64359: LD_INT 3
64361: NEG
64362: PUSH
64363: LD_INT 3
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 3
64373: NEG
64374: PUSH
64375: LD_INT 4
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 4
64385: NEG
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64400: LD_ADDR_VAR 0 29
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 3
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 4
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 4
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 5
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 5
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: LD_INT 4
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: LD_INT 6
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: LD_INT 6
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: LD_INT 5
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64555: LD_ADDR_VAR 0 30
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 4
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 4
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 4
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 5
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 5
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 6
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 6
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64698: LD_ADDR_VAR 0 31
64702: PUSH
64703: LD_INT 3
64705: PUSH
64706: LD_INT 2
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 3
64715: PUSH
64716: LD_INT 3
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 3
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 4
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 4
64745: PUSH
64746: LD_INT 4
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: LD_INT 4
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 5
64765: PUSH
64766: LD_INT 4
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 5
64775: PUSH
64776: LD_INT 5
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: LD_INT 5
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 6
64795: PUSH
64796: LD_INT 5
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 6
64805: PUSH
64806: LD_INT 6
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 5
64815: PUSH
64816: LD_INT 6
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64837: LD_ADDR_VAR 0 32
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: LD_INT 4
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: LD_INT 4
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 5
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: LD_INT 5
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: LD_INT 4
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: LD_INT 6
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 6
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64980: LD_ADDR_VAR 0 33
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 3
64998: NEG
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 3
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 4
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 4
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 4
65055: NEG
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 5
65066: NEG
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 5
65077: NEG
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 5
65089: NEG
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 6
65100: NEG
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 6
65111: NEG
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65135: LD_ADDR_VAR 0 34
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 3
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 3
65154: NEG
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 3
65166: NEG
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: LD_INT 4
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: LD_INT 3
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 4
65202: NEG
65203: PUSH
65204: LD_INT 4
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 4
65214: NEG
65215: PUSH
65216: LD_INT 5
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 5
65226: NEG
65227: PUSH
65228: LD_INT 4
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 5
65238: NEG
65239: PUSH
65240: LD_INT 5
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 5
65250: NEG
65251: PUSH
65252: LD_INT 6
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 6
65262: NEG
65263: PUSH
65264: LD_INT 5
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 6
65274: NEG
65275: PUSH
65276: LD_INT 6
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65298: LD_ADDR_VAR 0 41
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65342: LD_ADDR_VAR 0 42
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65383: LD_ADDR_VAR 0 43
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 3
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65423: LD_ADDR_VAR 0 44
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: LD_INT 3
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: LD_INT 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65464: LD_ADDR_VAR 0 45
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65508: LD_ADDR_VAR 0 46
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: NEG
65528: PUSH
65529: LD_INT 3
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 3
65539: NEG
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65554: LD_ADDR_VAR 0 47
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65587: LD_ADDR_VAR 0 48
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: LD_INT 2
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65618: LD_ADDR_VAR 0 49
65622: PUSH
65623: LD_INT 3
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65647: LD_ADDR_VAR 0 50
65651: PUSH
65652: LD_INT 2
65654: PUSH
65655: LD_INT 3
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 3
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65676: LD_ADDR_VAR 0 51
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65707: LD_ADDR_VAR 0 52
65711: PUSH
65712: LD_INT 3
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 3
65726: NEG
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65740: LD_ADDR_VAR 0 53
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65784: LD_ADDR_VAR 0 54
65788: PUSH
65789: LD_INT 2
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65825: LD_ADDR_VAR 0 55
65829: PUSH
65830: LD_INT 3
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 3
65842: PUSH
65843: LD_INT 3
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: LD_INT 3
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65865: LD_ADDR_VAR 0 56
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: LD_INT 3
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65906: LD_ADDR_VAR 0 57
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: NEG
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65950: LD_ADDR_VAR 0 58
65954: PUSH
65955: LD_INT 2
65957: NEG
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: NEG
65970: PUSH
65971: LD_INT 2
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 3
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65996: LD_ADDR_VAR 0 59
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66040: LD_ADDR_VAR 0 60
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66081: LD_ADDR_VAR 0 61
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66121: LD_ADDR_VAR 0 62
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 1
66148: NEG
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66162: LD_ADDR_VAR 0 63
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: NEG
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66206: LD_ADDR_VAR 0 64
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: LD_INT 2
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: LD_INT 2
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: ST_TO_ADDR
// end ; 2 :
66252: GO 69518
66254: LD_INT 2
66256: DOUBLE
66257: EQUAL
66258: IFTRUE 66262
66260: GO 69517
66262: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66263: LD_ADDR_VAR 0 29
66267: PUSH
66268: LD_INT 4
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 4
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 5
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 5
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 4
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 3
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: LD_INT 2
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 5
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 3
66363: PUSH
66364: LD_INT 3
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 3
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 4
66383: PUSH
66384: LD_INT 3
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 4
66393: PUSH
66394: LD_INT 4
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 4
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: PUSH
66434: LD_INT 2
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: LD_INT 4
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 4
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 3
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: LD_INT 4
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: LD_INT 5
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 5
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 4
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: LD_INT 5
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 2
66535: NEG
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 3
66546: NEG
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 3
66557: NEG
66558: PUSH
66559: LD_INT 1
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 4
66602: NEG
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 4
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 4
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: LD_INT 2
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 4
66648: NEG
66649: PUSH
66650: LD_INT 4
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 4
66660: NEG
66661: PUSH
66662: LD_INT 5
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 3
66672: NEG
66673: PUSH
66674: LD_INT 4
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 3
66684: NEG
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: NEG
66697: PUSH
66698: LD_INT 3
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 5
66708: NEG
66709: PUSH
66710: LD_INT 4
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 5
66720: NEG
66721: PUSH
66722: LD_INT 5
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 3
66732: NEG
66733: PUSH
66734: LD_INT 5
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 5
66744: NEG
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66801: LD_ADDR_VAR 0 30
66805: PUSH
66806: LD_INT 4
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 4
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 5
66828: PUSH
66829: LD_INT 4
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 5
66838: PUSH
66839: LD_INT 5
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: LD_INT 5
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 3
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 5
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: LD_INT 4
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 2
66980: NEG
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 4
66991: NEG
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 4
67002: NEG
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: NEG
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 3
67025: NEG
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 4
67036: NEG
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 5
67047: NEG
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 5
67058: NEG
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 5
67070: NEG
67071: PUSH
67072: LD_INT 2
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 3
67082: NEG
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 3
67093: NEG
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: LD_INT 4
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 2
67117: NEG
67118: PUSH
67119: LD_INT 3
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: LD_INT 2
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 3
67141: NEG
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: NEG
67154: PUSH
67155: LD_INT 3
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: NEG
67166: PUSH
67167: LD_INT 4
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: LD_INT 4
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 4
67189: NEG
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: LD_INT 4
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 5
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 3
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: LD_INT 4
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 1
67268: NEG
67269: PUSH
67270: LD_INT 5
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: LD_INT 3
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: LD_INT 5
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67348: LD_ADDR_VAR 0 31
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 4
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_INT 3
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: LD_INT 5
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 5
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 1
67405: NEG
67406: PUSH
67407: LD_INT 4
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 2
67427: PUSH
67428: LD_INT 5
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 2
67437: NEG
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 3
67448: NEG
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 3
67459: NEG
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: LD_INT 1
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 3
67493: NEG
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 4
67504: NEG
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 4
67515: NEG
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 4
67527: NEG
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 4
67550: NEG
67551: PUSH
67552: LD_INT 4
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 4
67562: NEG
67563: PUSH
67564: LD_INT 5
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: LD_INT 4
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: NEG
67599: PUSH
67600: LD_INT 3
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 5
67610: NEG
67611: PUSH
67612: LD_INT 4
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 5
67622: NEG
67623: PUSH
67624: LD_INT 5
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: LD_INT 5
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 5
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 4
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: LD_INT 3
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: LD_INT 3
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: LD_INT 4
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 2
67748: NEG
67749: PUSH
67750: LD_INT 4
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 4
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 4
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 5
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 5
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 3
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 5
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67898: LD_ADDR_VAR 0 32
67902: PUSH
67903: LD_INT 4
67905: NEG
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 4
67916: NEG
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: NEG
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: NEG
67940: PUSH
67941: LD_INT 1
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 4
67950: NEG
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 5
67961: NEG
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 5
67972: NEG
67973: PUSH
67974: LD_INT 1
67976: NEG
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 5
67984: NEG
67985: PUSH
67986: LD_INT 2
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 3
67996: NEG
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: NEG
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 3
68019: NEG
68020: PUSH
68021: LD_INT 4
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: LD_INT 3
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: LD_INT 2
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: LD_INT 2
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 4
68067: NEG
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: NEG
68080: PUSH
68081: LD_INT 4
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 2
68091: NEG
68092: PUSH
68093: LD_INT 4
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 4
68103: NEG
68104: PUSH
68105: LD_INT 2
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: LD_INT 4
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: LD_INT 5
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: LD_INT 4
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 3
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 3
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: LD_INT 4
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 1
68182: NEG
68183: PUSH
68184: LD_INT 5
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 2
68194: PUSH
68195: LD_INT 3
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: LD_INT 5
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 3
68227: PUSH
68228: LD_INT 1
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 4
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 4
68248: PUSH
68249: LD_INT 1
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: PUSH
68259: LD_INT 1
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 2
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 2
68289: PUSH
68290: LD_INT 2
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 4
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 4
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 4
68320: PUSH
68321: LD_INT 3
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 5
68330: PUSH
68331: LD_INT 4
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 5
68340: PUSH
68341: LD_INT 5
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 4
68350: PUSH
68351: LD_INT 5
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 3
68360: PUSH
68361: LD_INT 4
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: LD_INT 3
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 5
68380: PUSH
68381: LD_INT 3
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: LD_INT 5
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68445: LD_ADDR_VAR 0 33
68449: PUSH
68450: LD_INT 4
68452: NEG
68453: PUSH
68454: LD_INT 4
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 4
68464: NEG
68465: PUSH
68466: LD_INT 5
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 3
68476: NEG
68477: PUSH
68478: LD_INT 4
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 3
68488: NEG
68489: PUSH
68490: LD_INT 3
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 4
68500: NEG
68501: PUSH
68502: LD_INT 3
68504: NEG
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 5
68512: NEG
68513: PUSH
68514: LD_INT 4
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 5
68524: NEG
68525: PUSH
68526: LD_INT 5
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 3
68536: NEG
68537: PUSH
68538: LD_INT 5
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 5
68548: NEG
68549: PUSH
68550: LD_INT 3
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: LD_INT 3
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 4
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: LD_INT 3
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: LD_INT 2
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: LD_INT 3
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: NEG
68628: PUSH
68629: LD_INT 4
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 2
68639: PUSH
68640: LD_INT 2
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: NEG
68651: PUSH
68652: LD_INT 4
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 4
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 4
68672: PUSH
68673: LD_INT 1
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 5
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 5
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 4
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 3
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: LD_INT 1
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: LD_INT 2
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 5
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 3
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 4
68775: PUSH
68776: LD_INT 3
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 4
68785: PUSH
68786: LD_INT 4
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: LD_INT 4
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 2
68805: PUSH
68806: LD_INT 3
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 2
68815: PUSH
68816: LD_INT 2
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 4
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 2
68835: PUSH
68836: LD_INT 4
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: LD_INT 4
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 3
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 4
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 5
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 5
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 4
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 1
68906: NEG
68907: PUSH
68908: LD_INT 3
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: LD_INT 5
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 2
68927: NEG
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68983: LD_ADDR_VAR 0 34
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: LD_INT 4
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 0
69001: PUSH
69002: LD_INT 5
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: LD_INT 3
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: LD_INT 3
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: LD_INT 4
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 1
69057: NEG
69058: PUSH
69059: LD_INT 5
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: LD_INT 3
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: LD_INT 5
69084: NEG
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 4
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 4
69123: PUSH
69124: LD_INT 1
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 2
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 2
69164: PUSH
69165: LD_INT 2
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 4
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: LD_INT 4
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 5
69205: PUSH
69206: LD_INT 4
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 5
69215: PUSH
69216: LD_INT 5
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 4
69225: PUSH
69226: LD_INT 5
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 3
69235: PUSH
69236: LD_INT 4
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: LD_INT 3
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 5
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 3
69265: PUSH
69266: LD_INT 5
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 3
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: LD_INT 2
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: PUSH
69296: LD_INT 3
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: LD_INT 4
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: LD_INT 3
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 1
69336: NEG
69337: PUSH
69338: LD_INT 2
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 2
69347: PUSH
69348: LD_INT 4
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 2
69357: NEG
69358: PUSH
69359: LD_INT 2
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 4
69368: NEG
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 4
69379: NEG
69380: PUSH
69381: LD_INT 1
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 3
69391: NEG
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 3
69402: NEG
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 4
69413: NEG
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 5
69424: NEG
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 5
69435: NEG
69436: PUSH
69437: LD_INT 1
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 5
69447: NEG
69448: PUSH
69449: LD_INT 2
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 3
69459: NEG
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: ST_TO_ADDR
// end ; end ;
69515: GO 69518
69517: POP
// case btype of b_depot , b_warehouse :
69518: LD_VAR 0 1
69522: PUSH
69523: LD_INT 0
69525: DOUBLE
69526: EQUAL
69527: IFTRUE 69537
69529: LD_INT 1
69531: DOUBLE
69532: EQUAL
69533: IFTRUE 69537
69535: GO 69738
69537: POP
// case nation of nation_american :
69538: LD_VAR 0 5
69542: PUSH
69543: LD_INT 1
69545: DOUBLE
69546: EQUAL
69547: IFTRUE 69551
69549: GO 69607
69551: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69552: LD_ADDR_VAR 0 9
69556: PUSH
69557: LD_VAR 0 11
69561: PUSH
69562: LD_VAR 0 12
69566: PUSH
69567: LD_VAR 0 13
69571: PUSH
69572: LD_VAR 0 14
69576: PUSH
69577: LD_VAR 0 15
69581: PUSH
69582: LD_VAR 0 16
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: LD_VAR 0 4
69599: PUSH
69600: LD_INT 1
69602: PLUS
69603: ARRAY
69604: ST_TO_ADDR
69605: GO 69736
69607: LD_INT 2
69609: DOUBLE
69610: EQUAL
69611: IFTRUE 69615
69613: GO 69671
69615: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69616: LD_ADDR_VAR 0 9
69620: PUSH
69621: LD_VAR 0 17
69625: PUSH
69626: LD_VAR 0 18
69630: PUSH
69631: LD_VAR 0 19
69635: PUSH
69636: LD_VAR 0 20
69640: PUSH
69641: LD_VAR 0 21
69645: PUSH
69646: LD_VAR 0 22
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: PUSH
69659: LD_VAR 0 4
69663: PUSH
69664: LD_INT 1
69666: PLUS
69667: ARRAY
69668: ST_TO_ADDR
69669: GO 69736
69671: LD_INT 3
69673: DOUBLE
69674: EQUAL
69675: IFTRUE 69679
69677: GO 69735
69679: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69680: LD_ADDR_VAR 0 9
69684: PUSH
69685: LD_VAR 0 23
69689: PUSH
69690: LD_VAR 0 24
69694: PUSH
69695: LD_VAR 0 25
69699: PUSH
69700: LD_VAR 0 26
69704: PUSH
69705: LD_VAR 0 27
69709: PUSH
69710: LD_VAR 0 28
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: PUSH
69723: LD_VAR 0 4
69727: PUSH
69728: LD_INT 1
69730: PLUS
69731: ARRAY
69732: ST_TO_ADDR
69733: GO 69736
69735: POP
69736: GO 70291
69738: LD_INT 2
69740: DOUBLE
69741: EQUAL
69742: IFTRUE 69752
69744: LD_INT 3
69746: DOUBLE
69747: EQUAL
69748: IFTRUE 69752
69750: GO 69808
69752: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69753: LD_ADDR_VAR 0 9
69757: PUSH
69758: LD_VAR 0 29
69762: PUSH
69763: LD_VAR 0 30
69767: PUSH
69768: LD_VAR 0 31
69772: PUSH
69773: LD_VAR 0 32
69777: PUSH
69778: LD_VAR 0 33
69782: PUSH
69783: LD_VAR 0 34
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: PUSH
69796: LD_VAR 0 4
69800: PUSH
69801: LD_INT 1
69803: PLUS
69804: ARRAY
69805: ST_TO_ADDR
69806: GO 70291
69808: LD_INT 16
69810: DOUBLE
69811: EQUAL
69812: IFTRUE 69870
69814: LD_INT 17
69816: DOUBLE
69817: EQUAL
69818: IFTRUE 69870
69820: LD_INT 18
69822: DOUBLE
69823: EQUAL
69824: IFTRUE 69870
69826: LD_INT 19
69828: DOUBLE
69829: EQUAL
69830: IFTRUE 69870
69832: LD_INT 22
69834: DOUBLE
69835: EQUAL
69836: IFTRUE 69870
69838: LD_INT 20
69840: DOUBLE
69841: EQUAL
69842: IFTRUE 69870
69844: LD_INT 21
69846: DOUBLE
69847: EQUAL
69848: IFTRUE 69870
69850: LD_INT 23
69852: DOUBLE
69853: EQUAL
69854: IFTRUE 69870
69856: LD_INT 24
69858: DOUBLE
69859: EQUAL
69860: IFTRUE 69870
69862: LD_INT 25
69864: DOUBLE
69865: EQUAL
69866: IFTRUE 69870
69868: GO 69926
69870: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69871: LD_ADDR_VAR 0 9
69875: PUSH
69876: LD_VAR 0 35
69880: PUSH
69881: LD_VAR 0 36
69885: PUSH
69886: LD_VAR 0 37
69890: PUSH
69891: LD_VAR 0 38
69895: PUSH
69896: LD_VAR 0 39
69900: PUSH
69901: LD_VAR 0 40
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: PUSH
69914: LD_VAR 0 4
69918: PUSH
69919: LD_INT 1
69921: PLUS
69922: ARRAY
69923: ST_TO_ADDR
69924: GO 70291
69926: LD_INT 6
69928: DOUBLE
69929: EQUAL
69930: IFTRUE 69982
69932: LD_INT 7
69934: DOUBLE
69935: EQUAL
69936: IFTRUE 69982
69938: LD_INT 8
69940: DOUBLE
69941: EQUAL
69942: IFTRUE 69982
69944: LD_INT 13
69946: DOUBLE
69947: EQUAL
69948: IFTRUE 69982
69950: LD_INT 12
69952: DOUBLE
69953: EQUAL
69954: IFTRUE 69982
69956: LD_INT 15
69958: DOUBLE
69959: EQUAL
69960: IFTRUE 69982
69962: LD_INT 11
69964: DOUBLE
69965: EQUAL
69966: IFTRUE 69982
69968: LD_INT 14
69970: DOUBLE
69971: EQUAL
69972: IFTRUE 69982
69974: LD_INT 10
69976: DOUBLE
69977: EQUAL
69978: IFTRUE 69982
69980: GO 70038
69982: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69983: LD_ADDR_VAR 0 9
69987: PUSH
69988: LD_VAR 0 41
69992: PUSH
69993: LD_VAR 0 42
69997: PUSH
69998: LD_VAR 0 43
70002: PUSH
70003: LD_VAR 0 44
70007: PUSH
70008: LD_VAR 0 45
70012: PUSH
70013: LD_VAR 0 46
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: PUSH
70026: LD_VAR 0 4
70030: PUSH
70031: LD_INT 1
70033: PLUS
70034: ARRAY
70035: ST_TO_ADDR
70036: GO 70291
70038: LD_INT 36
70040: DOUBLE
70041: EQUAL
70042: IFTRUE 70046
70044: GO 70102
70046: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70047: LD_ADDR_VAR 0 9
70051: PUSH
70052: LD_VAR 0 47
70056: PUSH
70057: LD_VAR 0 48
70061: PUSH
70062: LD_VAR 0 49
70066: PUSH
70067: LD_VAR 0 50
70071: PUSH
70072: LD_VAR 0 51
70076: PUSH
70077: LD_VAR 0 52
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: PUSH
70090: LD_VAR 0 4
70094: PUSH
70095: LD_INT 1
70097: PLUS
70098: ARRAY
70099: ST_TO_ADDR
70100: GO 70291
70102: LD_INT 4
70104: DOUBLE
70105: EQUAL
70106: IFTRUE 70128
70108: LD_INT 5
70110: DOUBLE
70111: EQUAL
70112: IFTRUE 70128
70114: LD_INT 34
70116: DOUBLE
70117: EQUAL
70118: IFTRUE 70128
70120: LD_INT 37
70122: DOUBLE
70123: EQUAL
70124: IFTRUE 70128
70126: GO 70184
70128: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70129: LD_ADDR_VAR 0 9
70133: PUSH
70134: LD_VAR 0 53
70138: PUSH
70139: LD_VAR 0 54
70143: PUSH
70144: LD_VAR 0 55
70148: PUSH
70149: LD_VAR 0 56
70153: PUSH
70154: LD_VAR 0 57
70158: PUSH
70159: LD_VAR 0 58
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: PUSH
70172: LD_VAR 0 4
70176: PUSH
70177: LD_INT 1
70179: PLUS
70180: ARRAY
70181: ST_TO_ADDR
70182: GO 70291
70184: LD_INT 31
70186: DOUBLE
70187: EQUAL
70188: IFTRUE 70234
70190: LD_INT 32
70192: DOUBLE
70193: EQUAL
70194: IFTRUE 70234
70196: LD_INT 33
70198: DOUBLE
70199: EQUAL
70200: IFTRUE 70234
70202: LD_INT 27
70204: DOUBLE
70205: EQUAL
70206: IFTRUE 70234
70208: LD_INT 26
70210: DOUBLE
70211: EQUAL
70212: IFTRUE 70234
70214: LD_INT 28
70216: DOUBLE
70217: EQUAL
70218: IFTRUE 70234
70220: LD_INT 29
70222: DOUBLE
70223: EQUAL
70224: IFTRUE 70234
70226: LD_INT 30
70228: DOUBLE
70229: EQUAL
70230: IFTRUE 70234
70232: GO 70290
70234: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70235: LD_ADDR_VAR 0 9
70239: PUSH
70240: LD_VAR 0 59
70244: PUSH
70245: LD_VAR 0 60
70249: PUSH
70250: LD_VAR 0 61
70254: PUSH
70255: LD_VAR 0 62
70259: PUSH
70260: LD_VAR 0 63
70264: PUSH
70265: LD_VAR 0 64
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: PUSH
70278: LD_VAR 0 4
70282: PUSH
70283: LD_INT 1
70285: PLUS
70286: ARRAY
70287: ST_TO_ADDR
70288: GO 70291
70290: POP
// temp_list2 = [ ] ;
70291: LD_ADDR_VAR 0 10
70295: PUSH
70296: EMPTY
70297: ST_TO_ADDR
// for i in temp_list do
70298: LD_ADDR_VAR 0 8
70302: PUSH
70303: LD_VAR 0 9
70307: PUSH
70308: FOR_IN
70309: IFFALSE 70361
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70311: LD_ADDR_VAR 0 10
70315: PUSH
70316: LD_VAR 0 10
70320: PUSH
70321: LD_VAR 0 8
70325: PUSH
70326: LD_INT 1
70328: ARRAY
70329: PUSH
70330: LD_VAR 0 2
70334: PLUS
70335: PUSH
70336: LD_VAR 0 8
70340: PUSH
70341: LD_INT 2
70343: ARRAY
70344: PUSH
70345: LD_VAR 0 3
70349: PLUS
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: EMPTY
70356: LIST
70357: ADD
70358: ST_TO_ADDR
70359: GO 70308
70361: POP
70362: POP
// result = temp_list2 ;
70363: LD_ADDR_VAR 0 7
70367: PUSH
70368: LD_VAR 0 10
70372: ST_TO_ADDR
// end ;
70373: LD_VAR 0 7
70377: RET
// export function EnemyInRange ( unit , dist ) ; begin
70378: LD_INT 0
70380: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70381: LD_ADDR_VAR 0 3
70385: PUSH
70386: LD_VAR 0 1
70390: PPUSH
70391: CALL_OW 255
70395: PPUSH
70396: LD_VAR 0 1
70400: PPUSH
70401: CALL_OW 250
70405: PPUSH
70406: LD_VAR 0 1
70410: PPUSH
70411: CALL_OW 251
70415: PPUSH
70416: LD_VAR 0 2
70420: PPUSH
70421: CALL 43780 0 4
70425: PUSH
70426: LD_INT 4
70428: ARRAY
70429: ST_TO_ADDR
// end ;
70430: LD_VAR 0 3
70434: RET
// export function PlayerSeeMe ( unit ) ; begin
70435: LD_INT 0
70437: PPUSH
// result := See ( your_side , unit ) ;
70438: LD_ADDR_VAR 0 2
70442: PUSH
70443: LD_OWVAR 2
70447: PPUSH
70448: LD_VAR 0 1
70452: PPUSH
70453: CALL_OW 292
70457: ST_TO_ADDR
// end ;
70458: LD_VAR 0 2
70462: RET
// export function ReverseDir ( unit ) ; begin
70463: LD_INT 0
70465: PPUSH
// if not unit then
70466: LD_VAR 0 1
70470: NOT
70471: IFFALSE 70475
// exit ;
70473: GO 70498
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70475: LD_ADDR_VAR 0 2
70479: PUSH
70480: LD_VAR 0 1
70484: PPUSH
70485: CALL_OW 254
70489: PUSH
70490: LD_INT 3
70492: PLUS
70493: PUSH
70494: LD_INT 6
70496: MOD
70497: ST_TO_ADDR
// end ;
70498: LD_VAR 0 2
70502: RET
// export function ReverseArray ( array ) ; var i ; begin
70503: LD_INT 0
70505: PPUSH
70506: PPUSH
// if not array then
70507: LD_VAR 0 1
70511: NOT
70512: IFFALSE 70516
// exit ;
70514: GO 70571
// result := [ ] ;
70516: LD_ADDR_VAR 0 2
70520: PUSH
70521: EMPTY
70522: ST_TO_ADDR
// for i := array downto 1 do
70523: LD_ADDR_VAR 0 3
70527: PUSH
70528: DOUBLE
70529: LD_VAR 0 1
70533: INC
70534: ST_TO_ADDR
70535: LD_INT 1
70537: PUSH
70538: FOR_DOWNTO
70539: IFFALSE 70569
// result := Join ( result , array [ i ] ) ;
70541: LD_ADDR_VAR 0 2
70545: PUSH
70546: LD_VAR 0 2
70550: PPUSH
70551: LD_VAR 0 1
70555: PUSH
70556: LD_VAR 0 3
70560: ARRAY
70561: PPUSH
70562: CALL 75214 0 2
70566: ST_TO_ADDR
70567: GO 70538
70569: POP
70570: POP
// end ;
70571: LD_VAR 0 2
70575: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70576: LD_INT 0
70578: PPUSH
70579: PPUSH
70580: PPUSH
70581: PPUSH
70582: PPUSH
70583: PPUSH
// if not unit or not hexes then
70584: LD_VAR 0 1
70588: NOT
70589: PUSH
70590: LD_VAR 0 2
70594: NOT
70595: OR
70596: IFFALSE 70600
// exit ;
70598: GO 70723
// dist := 9999 ;
70600: LD_ADDR_VAR 0 5
70604: PUSH
70605: LD_INT 9999
70607: ST_TO_ADDR
// for i = 1 to hexes do
70608: LD_ADDR_VAR 0 4
70612: PUSH
70613: DOUBLE
70614: LD_INT 1
70616: DEC
70617: ST_TO_ADDR
70618: LD_VAR 0 2
70622: PUSH
70623: FOR_TO
70624: IFFALSE 70711
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70626: LD_ADDR_VAR 0 6
70630: PUSH
70631: LD_VAR 0 1
70635: PPUSH
70636: LD_VAR 0 2
70640: PUSH
70641: LD_VAR 0 4
70645: ARRAY
70646: PUSH
70647: LD_INT 1
70649: ARRAY
70650: PPUSH
70651: LD_VAR 0 2
70655: PUSH
70656: LD_VAR 0 4
70660: ARRAY
70661: PUSH
70662: LD_INT 2
70664: ARRAY
70665: PPUSH
70666: CALL_OW 297
70670: ST_TO_ADDR
// if tdist < dist then
70671: LD_VAR 0 6
70675: PUSH
70676: LD_VAR 0 5
70680: LESS
70681: IFFALSE 70709
// begin hex := hexes [ i ] ;
70683: LD_ADDR_VAR 0 8
70687: PUSH
70688: LD_VAR 0 2
70692: PUSH
70693: LD_VAR 0 4
70697: ARRAY
70698: ST_TO_ADDR
// dist := tdist ;
70699: LD_ADDR_VAR 0 5
70703: PUSH
70704: LD_VAR 0 6
70708: ST_TO_ADDR
// end ; end ;
70709: GO 70623
70711: POP
70712: POP
// result := hex ;
70713: LD_ADDR_VAR 0 3
70717: PUSH
70718: LD_VAR 0 8
70722: ST_TO_ADDR
// end ;
70723: LD_VAR 0 3
70727: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70728: LD_INT 0
70730: PPUSH
70731: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70732: LD_VAR 0 1
70736: NOT
70737: PUSH
70738: LD_VAR 0 1
70742: PUSH
70743: LD_INT 21
70745: PUSH
70746: LD_INT 2
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 23
70755: PUSH
70756: LD_INT 2
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PPUSH
70767: CALL_OW 69
70771: IN
70772: NOT
70773: OR
70774: IFFALSE 70778
// exit ;
70776: GO 70825
// for i = 1 to 3 do
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: DOUBLE
70784: LD_INT 1
70786: DEC
70787: ST_TO_ADDR
70788: LD_INT 3
70790: PUSH
70791: FOR_TO
70792: IFFALSE 70823
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 250
70803: PPUSH
70804: LD_VAR 0 1
70808: PPUSH
70809: CALL_OW 251
70813: PPUSH
70814: LD_INT 1
70816: PPUSH
70817: CALL_OW 453
70821: GO 70791
70823: POP
70824: POP
// end ;
70825: LD_VAR 0 2
70829: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70830: LD_INT 0
70832: PPUSH
70833: PPUSH
70834: PPUSH
70835: PPUSH
70836: PPUSH
70837: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70838: LD_VAR 0 1
70842: NOT
70843: PUSH
70844: LD_VAR 0 2
70848: NOT
70849: OR
70850: PUSH
70851: LD_VAR 0 1
70855: PPUSH
70856: CALL_OW 314
70860: OR
70861: IFFALSE 70865
// exit ;
70863: GO 71332
// if GetLives ( i ) < 250 then
70865: LD_VAR 0 4
70869: PPUSH
70870: CALL_OW 256
70874: PUSH
70875: LD_INT 250
70877: LESS
70878: IFFALSE 70891
// begin ComAutodestruct ( i ) ;
70880: LD_VAR 0 4
70884: PPUSH
70885: CALL 70728 0 1
// exit ;
70889: GO 71332
// end ; x := GetX ( enemy_unit ) ;
70891: LD_ADDR_VAR 0 7
70895: PUSH
70896: LD_VAR 0 2
70900: PPUSH
70901: CALL_OW 250
70905: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70906: LD_ADDR_VAR 0 8
70910: PUSH
70911: LD_VAR 0 2
70915: PPUSH
70916: CALL_OW 251
70920: ST_TO_ADDR
// if not x or not y then
70921: LD_VAR 0 7
70925: NOT
70926: PUSH
70927: LD_VAR 0 8
70931: NOT
70932: OR
70933: IFFALSE 70937
// exit ;
70935: GO 71332
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70937: LD_ADDR_VAR 0 6
70941: PUSH
70942: LD_VAR 0 7
70946: PPUSH
70947: LD_INT 0
70949: PPUSH
70950: LD_INT 4
70952: PPUSH
70953: CALL_OW 272
70957: PUSH
70958: LD_VAR 0 8
70962: PPUSH
70963: LD_INT 0
70965: PPUSH
70966: LD_INT 4
70968: PPUSH
70969: CALL_OW 273
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_VAR 0 7
70982: PPUSH
70983: LD_INT 1
70985: PPUSH
70986: LD_INT 4
70988: PPUSH
70989: CALL_OW 272
70993: PUSH
70994: LD_VAR 0 8
70998: PPUSH
70999: LD_INT 1
71001: PPUSH
71002: LD_INT 4
71004: PPUSH
71005: CALL_OW 273
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_VAR 0 7
71018: PPUSH
71019: LD_INT 2
71021: PPUSH
71022: LD_INT 4
71024: PPUSH
71025: CALL_OW 272
71029: PUSH
71030: LD_VAR 0 8
71034: PPUSH
71035: LD_INT 2
71037: PPUSH
71038: LD_INT 4
71040: PPUSH
71041: CALL_OW 273
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_VAR 0 7
71054: PPUSH
71055: LD_INT 3
71057: PPUSH
71058: LD_INT 4
71060: PPUSH
71061: CALL_OW 272
71065: PUSH
71066: LD_VAR 0 8
71070: PPUSH
71071: LD_INT 3
71073: PPUSH
71074: LD_INT 4
71076: PPUSH
71077: CALL_OW 273
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_VAR 0 7
71090: PPUSH
71091: LD_INT 4
71093: PPUSH
71094: LD_INT 4
71096: PPUSH
71097: CALL_OW 272
71101: PUSH
71102: LD_VAR 0 8
71106: PPUSH
71107: LD_INT 4
71109: PPUSH
71110: LD_INT 4
71112: PPUSH
71113: CALL_OW 273
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_VAR 0 7
71126: PPUSH
71127: LD_INT 5
71129: PPUSH
71130: LD_INT 4
71132: PPUSH
71133: CALL_OW 272
71137: PUSH
71138: LD_VAR 0 8
71142: PPUSH
71143: LD_INT 5
71145: PPUSH
71146: LD_INT 4
71148: PPUSH
71149: CALL_OW 273
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: ST_TO_ADDR
// for i = tmp downto 1 do
71166: LD_ADDR_VAR 0 4
71170: PUSH
71171: DOUBLE
71172: LD_VAR 0 6
71176: INC
71177: ST_TO_ADDR
71178: LD_INT 1
71180: PUSH
71181: FOR_DOWNTO
71182: IFFALSE 71283
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71184: LD_VAR 0 6
71188: PUSH
71189: LD_VAR 0 4
71193: ARRAY
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PPUSH
71199: LD_VAR 0 6
71203: PUSH
71204: LD_VAR 0 4
71208: ARRAY
71209: PUSH
71210: LD_INT 2
71212: ARRAY
71213: PPUSH
71214: CALL_OW 488
71218: NOT
71219: PUSH
71220: LD_VAR 0 6
71224: PUSH
71225: LD_VAR 0 4
71229: ARRAY
71230: PUSH
71231: LD_INT 1
71233: ARRAY
71234: PPUSH
71235: LD_VAR 0 6
71239: PUSH
71240: LD_VAR 0 4
71244: ARRAY
71245: PUSH
71246: LD_INT 2
71248: ARRAY
71249: PPUSH
71250: CALL_OW 428
71254: PUSH
71255: LD_INT 0
71257: NONEQUAL
71258: OR
71259: IFFALSE 71281
// tmp := Delete ( tmp , i ) ;
71261: LD_ADDR_VAR 0 6
71265: PUSH
71266: LD_VAR 0 6
71270: PPUSH
71271: LD_VAR 0 4
71275: PPUSH
71276: CALL_OW 3
71280: ST_TO_ADDR
71281: GO 71181
71283: POP
71284: POP
// j := GetClosestHex ( unit , tmp ) ;
71285: LD_ADDR_VAR 0 5
71289: PUSH
71290: LD_VAR 0 1
71294: PPUSH
71295: LD_VAR 0 6
71299: PPUSH
71300: CALL 70576 0 2
71304: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71305: LD_VAR 0 1
71309: PPUSH
71310: LD_VAR 0 5
71314: PUSH
71315: LD_INT 1
71317: ARRAY
71318: PPUSH
71319: LD_VAR 0 5
71323: PUSH
71324: LD_INT 2
71326: ARRAY
71327: PPUSH
71328: CALL_OW 111
// end ;
71332: LD_VAR 0 3
71336: RET
// export function PrepareApemanSoldier ( ) ; begin
71337: LD_INT 0
71339: PPUSH
// uc_nation := 0 ;
71340: LD_ADDR_OWVAR 21
71344: PUSH
71345: LD_INT 0
71347: ST_TO_ADDR
// hc_sex := sex_male ;
71348: LD_ADDR_OWVAR 27
71352: PUSH
71353: LD_INT 1
71355: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71356: LD_ADDR_OWVAR 28
71360: PUSH
71361: LD_INT 15
71363: ST_TO_ADDR
// hc_gallery :=  ;
71364: LD_ADDR_OWVAR 33
71368: PUSH
71369: LD_STRING 
71371: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71372: LD_ADDR_OWVAR 31
71376: PUSH
71377: LD_INT 0
71379: PPUSH
71380: LD_INT 3
71382: PPUSH
71383: CALL_OW 12
71387: PUSH
71388: LD_INT 0
71390: PPUSH
71391: LD_INT 3
71393: PPUSH
71394: CALL_OW 12
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: ST_TO_ADDR
// end ;
71411: LD_VAR 0 1
71415: RET
// export function PrepareApemanEngineer ( ) ; begin
71416: LD_INT 0
71418: PPUSH
// uc_nation := 0 ;
71419: LD_ADDR_OWVAR 21
71423: PUSH
71424: LD_INT 0
71426: ST_TO_ADDR
// hc_sex := sex_male ;
71427: LD_ADDR_OWVAR 27
71431: PUSH
71432: LD_INT 1
71434: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71435: LD_ADDR_OWVAR 28
71439: PUSH
71440: LD_INT 16
71442: ST_TO_ADDR
// hc_gallery :=  ;
71443: LD_ADDR_OWVAR 33
71447: PUSH
71448: LD_STRING 
71450: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71451: LD_ADDR_OWVAR 31
71455: PUSH
71456: LD_INT 0
71458: PPUSH
71459: LD_INT 3
71461: PPUSH
71462: CALL_OW 12
71466: PUSH
71467: LD_INT 0
71469: PPUSH
71470: LD_INT 3
71472: PPUSH
71473: CALL_OW 12
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: ST_TO_ADDR
// end ;
71490: LD_VAR 0 1
71494: RET
// export function PrepareApeman ( agressivity ) ; begin
71495: LD_INT 0
71497: PPUSH
// uc_side := 0 ;
71498: LD_ADDR_OWVAR 20
71502: PUSH
71503: LD_INT 0
71505: ST_TO_ADDR
// uc_nation := 0 ;
71506: LD_ADDR_OWVAR 21
71510: PUSH
71511: LD_INT 0
71513: ST_TO_ADDR
// hc_sex := sex_male ;
71514: LD_ADDR_OWVAR 27
71518: PUSH
71519: LD_INT 1
71521: ST_TO_ADDR
// hc_class := class_apeman ;
71522: LD_ADDR_OWVAR 28
71526: PUSH
71527: LD_INT 12
71529: ST_TO_ADDR
// hc_gallery :=  ;
71530: LD_ADDR_OWVAR 33
71534: PUSH
71535: LD_STRING 
71537: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71538: LD_ADDR_OWVAR 35
71542: PUSH
71543: LD_VAR 0 1
71547: NEG
71548: PPUSH
71549: LD_VAR 0 1
71553: PPUSH
71554: CALL_OW 12
71558: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71559: LD_ADDR_OWVAR 31
71563: PUSH
71564: LD_INT 0
71566: PPUSH
71567: LD_INT 3
71569: PPUSH
71570: CALL_OW 12
71574: PUSH
71575: LD_INT 0
71577: PPUSH
71578: LD_INT 3
71580: PPUSH
71581: CALL_OW 12
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: ST_TO_ADDR
// end ;
71598: LD_VAR 0 2
71602: RET
// export function PrepareTiger ( agressivity ) ; begin
71603: LD_INT 0
71605: PPUSH
// uc_side := 0 ;
71606: LD_ADDR_OWVAR 20
71610: PUSH
71611: LD_INT 0
71613: ST_TO_ADDR
// uc_nation := 0 ;
71614: LD_ADDR_OWVAR 21
71618: PUSH
71619: LD_INT 0
71621: ST_TO_ADDR
// hc_class := class_tiger ;
71622: LD_ADDR_OWVAR 28
71626: PUSH
71627: LD_INT 14
71629: ST_TO_ADDR
// hc_gallery :=  ;
71630: LD_ADDR_OWVAR 33
71634: PUSH
71635: LD_STRING 
71637: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71638: LD_ADDR_OWVAR 35
71642: PUSH
71643: LD_VAR 0 1
71647: NEG
71648: PPUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: CALL_OW 12
71658: ST_TO_ADDR
// end ;
71659: LD_VAR 0 2
71663: RET
// export function PrepareEnchidna ( ) ; begin
71664: LD_INT 0
71666: PPUSH
// uc_side := 0 ;
71667: LD_ADDR_OWVAR 20
71671: PUSH
71672: LD_INT 0
71674: ST_TO_ADDR
// uc_nation := 0 ;
71675: LD_ADDR_OWVAR 21
71679: PUSH
71680: LD_INT 0
71682: ST_TO_ADDR
// hc_class := class_baggie ;
71683: LD_ADDR_OWVAR 28
71687: PUSH
71688: LD_INT 13
71690: ST_TO_ADDR
// hc_gallery :=  ;
71691: LD_ADDR_OWVAR 33
71695: PUSH
71696: LD_STRING 
71698: ST_TO_ADDR
// end ;
71699: LD_VAR 0 1
71703: RET
// export function PrepareFrog ( ) ; begin
71704: LD_INT 0
71706: PPUSH
// uc_side := 0 ;
71707: LD_ADDR_OWVAR 20
71711: PUSH
71712: LD_INT 0
71714: ST_TO_ADDR
// uc_nation := 0 ;
71715: LD_ADDR_OWVAR 21
71719: PUSH
71720: LD_INT 0
71722: ST_TO_ADDR
// hc_class := class_frog ;
71723: LD_ADDR_OWVAR 28
71727: PUSH
71728: LD_INT 19
71730: ST_TO_ADDR
// hc_gallery :=  ;
71731: LD_ADDR_OWVAR 33
71735: PUSH
71736: LD_STRING 
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 1
71743: RET
// export function PrepareFish ( ) ; begin
71744: LD_INT 0
71746: PPUSH
// uc_side := 0 ;
71747: LD_ADDR_OWVAR 20
71751: PUSH
71752: LD_INT 0
71754: ST_TO_ADDR
// uc_nation := 0 ;
71755: LD_ADDR_OWVAR 21
71759: PUSH
71760: LD_INT 0
71762: ST_TO_ADDR
// hc_class := class_fish ;
71763: LD_ADDR_OWVAR 28
71767: PUSH
71768: LD_INT 20
71770: ST_TO_ADDR
// hc_gallery :=  ;
71771: LD_ADDR_OWVAR 33
71775: PUSH
71776: LD_STRING 
71778: ST_TO_ADDR
// end ;
71779: LD_VAR 0 1
71783: RET
// export function PrepareBird ( ) ; begin
71784: LD_INT 0
71786: PPUSH
// uc_side := 0 ;
71787: LD_ADDR_OWVAR 20
71791: PUSH
71792: LD_INT 0
71794: ST_TO_ADDR
// uc_nation := 0 ;
71795: LD_ADDR_OWVAR 21
71799: PUSH
71800: LD_INT 0
71802: ST_TO_ADDR
// hc_class := class_phororhacos ;
71803: LD_ADDR_OWVAR 28
71807: PUSH
71808: LD_INT 18
71810: ST_TO_ADDR
// hc_gallery :=  ;
71811: LD_ADDR_OWVAR 33
71815: PUSH
71816: LD_STRING 
71818: ST_TO_ADDR
// end ;
71819: LD_VAR 0 1
71823: RET
// export function PrepareHorse ( ) ; begin
71824: LD_INT 0
71826: PPUSH
// uc_side := 0 ;
71827: LD_ADDR_OWVAR 20
71831: PUSH
71832: LD_INT 0
71834: ST_TO_ADDR
// uc_nation := 0 ;
71835: LD_ADDR_OWVAR 21
71839: PUSH
71840: LD_INT 0
71842: ST_TO_ADDR
// hc_class := class_horse ;
71843: LD_ADDR_OWVAR 28
71847: PUSH
71848: LD_INT 21
71850: ST_TO_ADDR
// hc_gallery :=  ;
71851: LD_ADDR_OWVAR 33
71855: PUSH
71856: LD_STRING 
71858: ST_TO_ADDR
// end ;
71859: LD_VAR 0 1
71863: RET
// export function PrepareMastodont ( ) ; begin
71864: LD_INT 0
71866: PPUSH
// uc_side := 0 ;
71867: LD_ADDR_OWVAR 20
71871: PUSH
71872: LD_INT 0
71874: ST_TO_ADDR
// uc_nation := 0 ;
71875: LD_ADDR_OWVAR 21
71879: PUSH
71880: LD_INT 0
71882: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71883: LD_ADDR_OWVAR 37
71887: PUSH
71888: LD_INT 31
71890: ST_TO_ADDR
// vc_control := control_rider ;
71891: LD_ADDR_OWVAR 38
71895: PUSH
71896: LD_INT 4
71898: ST_TO_ADDR
// end ;
71899: LD_VAR 0 1
71903: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71904: LD_INT 0
71906: PPUSH
71907: PPUSH
71908: PPUSH
// uc_side = 0 ;
71909: LD_ADDR_OWVAR 20
71913: PUSH
71914: LD_INT 0
71916: ST_TO_ADDR
// uc_nation = 0 ;
71917: LD_ADDR_OWVAR 21
71921: PUSH
71922: LD_INT 0
71924: ST_TO_ADDR
// InitHc_All ( ) ;
71925: CALL_OW 584
// InitVc ;
71929: CALL_OW 20
// if mastodonts then
71933: LD_VAR 0 6
71937: IFFALSE 72004
// for i = 1 to mastodonts do
71939: LD_ADDR_VAR 0 11
71943: PUSH
71944: DOUBLE
71945: LD_INT 1
71947: DEC
71948: ST_TO_ADDR
71949: LD_VAR 0 6
71953: PUSH
71954: FOR_TO
71955: IFFALSE 72002
// begin vc_chassis := 31 ;
71957: LD_ADDR_OWVAR 37
71961: PUSH
71962: LD_INT 31
71964: ST_TO_ADDR
// vc_control := control_rider ;
71965: LD_ADDR_OWVAR 38
71969: PUSH
71970: LD_INT 4
71972: ST_TO_ADDR
// animal := CreateVehicle ;
71973: LD_ADDR_VAR 0 12
71977: PUSH
71978: CALL_OW 45
71982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71983: LD_VAR 0 12
71987: PPUSH
71988: LD_VAR 0 8
71992: PPUSH
71993: LD_INT 0
71995: PPUSH
71996: CALL 74132 0 3
// end ;
72000: GO 71954
72002: POP
72003: POP
// if horses then
72004: LD_VAR 0 5
72008: IFFALSE 72075
// for i = 1 to horses do
72010: LD_ADDR_VAR 0 11
72014: PUSH
72015: DOUBLE
72016: LD_INT 1
72018: DEC
72019: ST_TO_ADDR
72020: LD_VAR 0 5
72024: PUSH
72025: FOR_TO
72026: IFFALSE 72073
// begin hc_class := 21 ;
72028: LD_ADDR_OWVAR 28
72032: PUSH
72033: LD_INT 21
72035: ST_TO_ADDR
// hc_gallery :=  ;
72036: LD_ADDR_OWVAR 33
72040: PUSH
72041: LD_STRING 
72043: ST_TO_ADDR
// animal := CreateHuman ;
72044: LD_ADDR_VAR 0 12
72048: PUSH
72049: CALL_OW 44
72053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72054: LD_VAR 0 12
72058: PPUSH
72059: LD_VAR 0 8
72063: PPUSH
72064: LD_INT 0
72066: PPUSH
72067: CALL 74132 0 3
// end ;
72071: GO 72025
72073: POP
72074: POP
// if birds then
72075: LD_VAR 0 1
72079: IFFALSE 72146
// for i = 1 to birds do
72081: LD_ADDR_VAR 0 11
72085: PUSH
72086: DOUBLE
72087: LD_INT 1
72089: DEC
72090: ST_TO_ADDR
72091: LD_VAR 0 1
72095: PUSH
72096: FOR_TO
72097: IFFALSE 72144
// begin hc_class = 18 ;
72099: LD_ADDR_OWVAR 28
72103: PUSH
72104: LD_INT 18
72106: ST_TO_ADDR
// hc_gallery =  ;
72107: LD_ADDR_OWVAR 33
72111: PUSH
72112: LD_STRING 
72114: ST_TO_ADDR
// animal := CreateHuman ;
72115: LD_ADDR_VAR 0 12
72119: PUSH
72120: CALL_OW 44
72124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72125: LD_VAR 0 12
72129: PPUSH
72130: LD_VAR 0 8
72134: PPUSH
72135: LD_INT 0
72137: PPUSH
72138: CALL 74132 0 3
// end ;
72142: GO 72096
72144: POP
72145: POP
// if tigers then
72146: LD_VAR 0 2
72150: IFFALSE 72234
// for i = 1 to tigers do
72152: LD_ADDR_VAR 0 11
72156: PUSH
72157: DOUBLE
72158: LD_INT 1
72160: DEC
72161: ST_TO_ADDR
72162: LD_VAR 0 2
72166: PUSH
72167: FOR_TO
72168: IFFALSE 72232
// begin hc_class = class_tiger ;
72170: LD_ADDR_OWVAR 28
72174: PUSH
72175: LD_INT 14
72177: ST_TO_ADDR
// hc_gallery =  ;
72178: LD_ADDR_OWVAR 33
72182: PUSH
72183: LD_STRING 
72185: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72186: LD_ADDR_OWVAR 35
72190: PUSH
72191: LD_INT 7
72193: NEG
72194: PPUSH
72195: LD_INT 7
72197: PPUSH
72198: CALL_OW 12
72202: ST_TO_ADDR
// animal := CreateHuman ;
72203: LD_ADDR_VAR 0 12
72207: PUSH
72208: CALL_OW 44
72212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72213: LD_VAR 0 12
72217: PPUSH
72218: LD_VAR 0 8
72222: PPUSH
72223: LD_INT 0
72225: PPUSH
72226: CALL 74132 0 3
// end ;
72230: GO 72167
72232: POP
72233: POP
// if apemans then
72234: LD_VAR 0 3
72238: IFFALSE 72361
// for i = 1 to apemans do
72240: LD_ADDR_VAR 0 11
72244: PUSH
72245: DOUBLE
72246: LD_INT 1
72248: DEC
72249: ST_TO_ADDR
72250: LD_VAR 0 3
72254: PUSH
72255: FOR_TO
72256: IFFALSE 72359
// begin hc_class = class_apeman ;
72258: LD_ADDR_OWVAR 28
72262: PUSH
72263: LD_INT 12
72265: ST_TO_ADDR
// hc_gallery =  ;
72266: LD_ADDR_OWVAR 33
72270: PUSH
72271: LD_STRING 
72273: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72274: LD_ADDR_OWVAR 35
72278: PUSH
72279: LD_INT 2
72281: NEG
72282: PPUSH
72283: LD_INT 2
72285: PPUSH
72286: CALL_OW 12
72290: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72291: LD_ADDR_OWVAR 31
72295: PUSH
72296: LD_INT 1
72298: PPUSH
72299: LD_INT 3
72301: PPUSH
72302: CALL_OW 12
72306: PUSH
72307: LD_INT 1
72309: PPUSH
72310: LD_INT 3
72312: PPUSH
72313: CALL_OW 12
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: ST_TO_ADDR
// animal := CreateHuman ;
72330: LD_ADDR_VAR 0 12
72334: PUSH
72335: CALL_OW 44
72339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72340: LD_VAR 0 12
72344: PPUSH
72345: LD_VAR 0 8
72349: PPUSH
72350: LD_INT 0
72352: PPUSH
72353: CALL 74132 0 3
// end ;
72357: GO 72255
72359: POP
72360: POP
// if enchidnas then
72361: LD_VAR 0 4
72365: IFFALSE 72432
// for i = 1 to enchidnas do
72367: LD_ADDR_VAR 0 11
72371: PUSH
72372: DOUBLE
72373: LD_INT 1
72375: DEC
72376: ST_TO_ADDR
72377: LD_VAR 0 4
72381: PUSH
72382: FOR_TO
72383: IFFALSE 72430
// begin hc_class = 13 ;
72385: LD_ADDR_OWVAR 28
72389: PUSH
72390: LD_INT 13
72392: ST_TO_ADDR
// hc_gallery =  ;
72393: LD_ADDR_OWVAR 33
72397: PUSH
72398: LD_STRING 
72400: ST_TO_ADDR
// animal := CreateHuman ;
72401: LD_ADDR_VAR 0 12
72405: PUSH
72406: CALL_OW 44
72410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72411: LD_VAR 0 12
72415: PPUSH
72416: LD_VAR 0 8
72420: PPUSH
72421: LD_INT 0
72423: PPUSH
72424: CALL 74132 0 3
// end ;
72428: GO 72382
72430: POP
72431: POP
// if fishes then
72432: LD_VAR 0 7
72436: IFFALSE 72503
// for i = 1 to fishes do
72438: LD_ADDR_VAR 0 11
72442: PUSH
72443: DOUBLE
72444: LD_INT 1
72446: DEC
72447: ST_TO_ADDR
72448: LD_VAR 0 7
72452: PUSH
72453: FOR_TO
72454: IFFALSE 72501
// begin hc_class = 20 ;
72456: LD_ADDR_OWVAR 28
72460: PUSH
72461: LD_INT 20
72463: ST_TO_ADDR
// hc_gallery =  ;
72464: LD_ADDR_OWVAR 33
72468: PUSH
72469: LD_STRING 
72471: ST_TO_ADDR
// animal := CreateHuman ;
72472: LD_ADDR_VAR 0 12
72476: PUSH
72477: CALL_OW 44
72481: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72482: LD_VAR 0 12
72486: PPUSH
72487: LD_VAR 0 9
72491: PPUSH
72492: LD_INT 0
72494: PPUSH
72495: CALL 74132 0 3
// end ;
72499: GO 72453
72501: POP
72502: POP
// end ;
72503: LD_VAR 0 10
72507: RET
// export function WantHeal ( sci , unit ) ; begin
72508: LD_INT 0
72510: PPUSH
// if GetTaskList ( sci ) > 0 then
72511: LD_VAR 0 1
72515: PPUSH
72516: CALL_OW 437
72520: PUSH
72521: LD_INT 0
72523: GREATER
72524: IFFALSE 72594
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72526: LD_VAR 0 1
72530: PPUSH
72531: CALL_OW 437
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: PUSH
72540: LD_INT 1
72542: ARRAY
72543: PUSH
72544: LD_STRING l
72546: EQUAL
72547: PUSH
72548: LD_VAR 0 1
72552: PPUSH
72553: CALL_OW 437
72557: PUSH
72558: LD_INT 1
72560: ARRAY
72561: PUSH
72562: LD_INT 4
72564: ARRAY
72565: PUSH
72566: LD_VAR 0 2
72570: EQUAL
72571: AND
72572: IFFALSE 72584
// result := true else
72574: LD_ADDR_VAR 0 3
72578: PUSH
72579: LD_INT 1
72581: ST_TO_ADDR
72582: GO 72592
// result := false ;
72584: LD_ADDR_VAR 0 3
72588: PUSH
72589: LD_INT 0
72591: ST_TO_ADDR
// end else
72592: GO 72602
// result := false ;
72594: LD_ADDR_VAR 0 3
72598: PUSH
72599: LD_INT 0
72601: ST_TO_ADDR
// end ;
72602: LD_VAR 0 3
72606: RET
// export function HealTarget ( sci ) ; begin
72607: LD_INT 0
72609: PPUSH
// if not sci then
72610: LD_VAR 0 1
72614: NOT
72615: IFFALSE 72619
// exit ;
72617: GO 72684
// result := 0 ;
72619: LD_ADDR_VAR 0 2
72623: PUSH
72624: LD_INT 0
72626: ST_TO_ADDR
// if GetTaskList ( sci ) then
72627: LD_VAR 0 1
72631: PPUSH
72632: CALL_OW 437
72636: IFFALSE 72684
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72638: LD_VAR 0 1
72642: PPUSH
72643: CALL_OW 437
72647: PUSH
72648: LD_INT 1
72650: ARRAY
72651: PUSH
72652: LD_INT 1
72654: ARRAY
72655: PUSH
72656: LD_STRING l
72658: EQUAL
72659: IFFALSE 72684
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72661: LD_ADDR_VAR 0 2
72665: PUSH
72666: LD_VAR 0 1
72670: PPUSH
72671: CALL_OW 437
72675: PUSH
72676: LD_INT 1
72678: ARRAY
72679: PUSH
72680: LD_INT 4
72682: ARRAY
72683: ST_TO_ADDR
// end ;
72684: LD_VAR 0 2
72688: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72689: LD_INT 0
72691: PPUSH
72692: PPUSH
72693: PPUSH
72694: PPUSH
// if not base_units then
72695: LD_VAR 0 1
72699: NOT
72700: IFFALSE 72704
// exit ;
72702: GO 72791
// result := false ;
72704: LD_ADDR_VAR 0 2
72708: PUSH
72709: LD_INT 0
72711: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72712: LD_ADDR_VAR 0 5
72716: PUSH
72717: LD_VAR 0 1
72721: PPUSH
72722: LD_INT 21
72724: PUSH
72725: LD_INT 3
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PPUSH
72732: CALL_OW 72
72736: ST_TO_ADDR
// if not tmp then
72737: LD_VAR 0 5
72741: NOT
72742: IFFALSE 72746
// exit ;
72744: GO 72791
// for i in tmp do
72746: LD_ADDR_VAR 0 3
72750: PUSH
72751: LD_VAR 0 5
72755: PUSH
72756: FOR_IN
72757: IFFALSE 72789
// begin result := EnemyInRange ( i , 22 ) ;
72759: LD_ADDR_VAR 0 2
72763: PUSH
72764: LD_VAR 0 3
72768: PPUSH
72769: LD_INT 22
72771: PPUSH
72772: CALL 70378 0 2
72776: ST_TO_ADDR
// if result then
72777: LD_VAR 0 2
72781: IFFALSE 72787
// exit ;
72783: POP
72784: POP
72785: GO 72791
// end ;
72787: GO 72756
72789: POP
72790: POP
// end ;
72791: LD_VAR 0 2
72795: RET
// export function FilterByTag ( units , tag ) ; begin
72796: LD_INT 0
72798: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72799: LD_ADDR_VAR 0 3
72803: PUSH
72804: LD_VAR 0 1
72808: PPUSH
72809: LD_INT 120
72811: PUSH
72812: LD_VAR 0 2
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PPUSH
72821: CALL_OW 72
72825: ST_TO_ADDR
// end ;
72826: LD_VAR 0 3
72830: RET
// export function IsDriver ( un ) ; begin
72831: LD_INT 0
72833: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72834: LD_ADDR_VAR 0 2
72838: PUSH
72839: LD_VAR 0 1
72843: PUSH
72844: LD_INT 55
72846: PUSH
72847: EMPTY
72848: LIST
72849: PPUSH
72850: CALL_OW 69
72854: IN
72855: ST_TO_ADDR
// end ;
72856: LD_VAR 0 2
72860: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72861: LD_INT 0
72863: PPUSH
72864: PPUSH
// list := [ ] ;
72865: LD_ADDR_VAR 0 5
72869: PUSH
72870: EMPTY
72871: ST_TO_ADDR
// case d of 0 :
72872: LD_VAR 0 3
72876: PUSH
72877: LD_INT 0
72879: DOUBLE
72880: EQUAL
72881: IFTRUE 72885
72883: GO 73018
72885: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72886: LD_ADDR_VAR 0 5
72890: PUSH
72891: LD_VAR 0 1
72895: PUSH
72896: LD_INT 4
72898: MINUS
72899: PUSH
72900: LD_VAR 0 2
72904: PUSH
72905: LD_INT 4
72907: MINUS
72908: PUSH
72909: LD_INT 2
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: LIST
72916: PUSH
72917: LD_VAR 0 1
72921: PUSH
72922: LD_INT 3
72924: MINUS
72925: PUSH
72926: LD_VAR 0 2
72930: PUSH
72931: LD_INT 1
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: LIST
72938: PUSH
72939: LD_VAR 0 1
72943: PUSH
72944: LD_INT 4
72946: PLUS
72947: PUSH
72948: LD_VAR 0 2
72952: PUSH
72953: LD_INT 4
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: LIST
72960: PUSH
72961: LD_VAR 0 1
72965: PUSH
72966: LD_INT 3
72968: PLUS
72969: PUSH
72970: LD_VAR 0 2
72974: PUSH
72975: LD_INT 3
72977: PLUS
72978: PUSH
72979: LD_INT 5
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: PUSH
72987: LD_VAR 0 1
72991: PUSH
72992: LD_VAR 0 2
72996: PUSH
72997: LD_INT 4
72999: PLUS
73000: PUSH
73001: LD_INT 0
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: LIST
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: ST_TO_ADDR
// end ; 1 :
73016: GO 73716
73018: LD_INT 1
73020: DOUBLE
73021: EQUAL
73022: IFTRUE 73026
73024: GO 73159
73026: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: LD_VAR 0 1
73036: PUSH
73037: LD_VAR 0 2
73041: PUSH
73042: LD_INT 4
73044: MINUS
73045: PUSH
73046: LD_INT 3
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: LIST
73053: PUSH
73054: LD_VAR 0 1
73058: PUSH
73059: LD_INT 3
73061: MINUS
73062: PUSH
73063: LD_VAR 0 2
73067: PUSH
73068: LD_INT 3
73070: MINUS
73071: PUSH
73072: LD_INT 2
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: LIST
73079: PUSH
73080: LD_VAR 0 1
73084: PUSH
73085: LD_INT 4
73087: MINUS
73088: PUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_INT 1
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: LIST
73101: PUSH
73102: LD_VAR 0 1
73106: PUSH
73107: LD_VAR 0 2
73111: PUSH
73112: LD_INT 3
73114: PLUS
73115: PUSH
73116: LD_INT 0
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: LD_INT 4
73131: PLUS
73132: PUSH
73133: LD_VAR 0 2
73137: PUSH
73138: LD_INT 4
73140: PLUS
73141: PUSH
73142: LD_INT 5
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: LIST
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: ST_TO_ADDR
// end ; 2 :
73157: GO 73716
73159: LD_INT 2
73161: DOUBLE
73162: EQUAL
73163: IFTRUE 73167
73165: GO 73296
73167: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73168: LD_ADDR_VAR 0 5
73172: PUSH
73173: LD_VAR 0 1
73177: PUSH
73178: LD_VAR 0 2
73182: PUSH
73183: LD_INT 3
73185: MINUS
73186: PUSH
73187: LD_INT 3
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: LIST
73194: PUSH
73195: LD_VAR 0 1
73199: PUSH
73200: LD_INT 4
73202: PLUS
73203: PUSH
73204: LD_VAR 0 2
73208: PUSH
73209: LD_INT 4
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: LIST
73216: PUSH
73217: LD_VAR 0 1
73221: PUSH
73222: LD_VAR 0 2
73226: PUSH
73227: LD_INT 4
73229: PLUS
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: LIST
73238: PUSH
73239: LD_VAR 0 1
73243: PUSH
73244: LD_INT 3
73246: MINUS
73247: PUSH
73248: LD_VAR 0 2
73252: PUSH
73253: LD_INT 1
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: LIST
73260: PUSH
73261: LD_VAR 0 1
73265: PUSH
73266: LD_INT 4
73268: MINUS
73269: PUSH
73270: LD_VAR 0 2
73274: PUSH
73275: LD_INT 4
73277: MINUS
73278: PUSH
73279: LD_INT 2
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: LIST
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: ST_TO_ADDR
// end ; 3 :
73294: GO 73716
73296: LD_INT 3
73298: DOUBLE
73299: EQUAL
73300: IFTRUE 73304
73302: GO 73437
73304: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73305: LD_ADDR_VAR 0 5
73309: PUSH
73310: LD_VAR 0 1
73314: PUSH
73315: LD_INT 3
73317: PLUS
73318: PUSH
73319: LD_VAR 0 2
73323: PUSH
73324: LD_INT 4
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: LIST
73331: PUSH
73332: LD_VAR 0 1
73336: PUSH
73337: LD_INT 4
73339: PLUS
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_INT 4
73348: PLUS
73349: PUSH
73350: LD_INT 5
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: LIST
73357: PUSH
73358: LD_VAR 0 1
73362: PUSH
73363: LD_INT 4
73365: MINUS
73366: PUSH
73367: LD_VAR 0 2
73371: PUSH
73372: LD_INT 1
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: LIST
73379: PUSH
73380: LD_VAR 0 1
73384: PUSH
73385: LD_VAR 0 2
73389: PUSH
73390: LD_INT 4
73392: MINUS
73393: PUSH
73394: LD_INT 3
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: LIST
73401: PUSH
73402: LD_VAR 0 1
73406: PUSH
73407: LD_INT 3
73409: MINUS
73410: PUSH
73411: LD_VAR 0 2
73415: PUSH
73416: LD_INT 3
73418: MINUS
73419: PUSH
73420: LD_INT 2
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: LIST
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: ST_TO_ADDR
// end ; 4 :
73435: GO 73716
73437: LD_INT 4
73439: DOUBLE
73440: EQUAL
73441: IFTRUE 73445
73443: GO 73578
73445: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73446: LD_ADDR_VAR 0 5
73450: PUSH
73451: LD_VAR 0 1
73455: PUSH
73456: LD_VAR 0 2
73460: PUSH
73461: LD_INT 4
73463: PLUS
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: LIST
73472: PUSH
73473: LD_VAR 0 1
73477: PUSH
73478: LD_INT 3
73480: PLUS
73481: PUSH
73482: LD_VAR 0 2
73486: PUSH
73487: LD_INT 3
73489: PLUS
73490: PUSH
73491: LD_INT 5
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: PUSH
73499: LD_VAR 0 1
73503: PUSH
73504: LD_INT 4
73506: PLUS
73507: PUSH
73508: LD_VAR 0 2
73512: PUSH
73513: LD_INT 4
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: PUSH
73521: LD_VAR 0 1
73525: PUSH
73526: LD_VAR 0 2
73530: PUSH
73531: LD_INT 3
73533: MINUS
73534: PUSH
73535: LD_INT 3
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: LIST
73542: PUSH
73543: LD_VAR 0 1
73547: PUSH
73548: LD_INT 4
73550: MINUS
73551: PUSH
73552: LD_VAR 0 2
73556: PUSH
73557: LD_INT 4
73559: MINUS
73560: PUSH
73561: LD_INT 2
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: LIST
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: ST_TO_ADDR
// end ; 5 :
73576: GO 73716
73578: LD_INT 5
73580: DOUBLE
73581: EQUAL
73582: IFTRUE 73586
73584: GO 73715
73586: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73587: LD_ADDR_VAR 0 5
73591: PUSH
73592: LD_VAR 0 1
73596: PUSH
73597: LD_INT 4
73599: MINUS
73600: PUSH
73601: LD_VAR 0 2
73605: PUSH
73606: LD_INT 1
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: LIST
73613: PUSH
73614: LD_VAR 0 1
73618: PUSH
73619: LD_VAR 0 2
73623: PUSH
73624: LD_INT 4
73626: MINUS
73627: PUSH
73628: LD_INT 3
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: LIST
73635: PUSH
73636: LD_VAR 0 1
73640: PUSH
73641: LD_INT 4
73643: PLUS
73644: PUSH
73645: LD_VAR 0 2
73649: PUSH
73650: LD_INT 4
73652: PLUS
73653: PUSH
73654: LD_INT 5
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: LD_VAR 0 1
73666: PUSH
73667: LD_INT 3
73669: PLUS
73670: PUSH
73671: LD_VAR 0 2
73675: PUSH
73676: LD_INT 4
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: LIST
73683: PUSH
73684: LD_VAR 0 1
73688: PUSH
73689: LD_VAR 0 2
73693: PUSH
73694: LD_INT 3
73696: PLUS
73697: PUSH
73698: LD_INT 0
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: LIST
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: ST_TO_ADDR
// end ; end ;
73713: GO 73716
73715: POP
// result := list ;
73716: LD_ADDR_VAR 0 4
73720: PUSH
73721: LD_VAR 0 5
73725: ST_TO_ADDR
// end ;
73726: LD_VAR 0 4
73730: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73731: LD_INT 0
73733: PPUSH
73734: PPUSH
73735: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73736: LD_VAR 0 1
73740: NOT
73741: PUSH
73742: LD_VAR 0 2
73746: PUSH
73747: LD_INT 1
73749: PUSH
73750: LD_INT 2
73752: PUSH
73753: LD_INT 3
73755: PUSH
73756: LD_INT 4
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: IN
73765: NOT
73766: OR
73767: IFFALSE 73771
// exit ;
73769: GO 73854
// tmp := [ ] ;
73771: LD_ADDR_VAR 0 5
73775: PUSH
73776: EMPTY
73777: ST_TO_ADDR
// for i in units do
73778: LD_ADDR_VAR 0 4
73782: PUSH
73783: LD_VAR 0 1
73787: PUSH
73788: FOR_IN
73789: IFFALSE 73823
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73791: LD_ADDR_VAR 0 5
73795: PUSH
73796: LD_VAR 0 5
73800: PPUSH
73801: LD_VAR 0 4
73805: PPUSH
73806: LD_VAR 0 2
73810: PPUSH
73811: CALL_OW 259
73815: PPUSH
73816: CALL 75214 0 2
73820: ST_TO_ADDR
73821: GO 73788
73823: POP
73824: POP
// if not tmp then
73825: LD_VAR 0 5
73829: NOT
73830: IFFALSE 73834
// exit ;
73832: GO 73854
// result := SortListByListDesc ( units , tmp ) ;
73834: LD_ADDR_VAR 0 3
73838: PUSH
73839: LD_VAR 0 1
73843: PPUSH
73844: LD_VAR 0 5
73848: PPUSH
73849: CALL_OW 77
73853: ST_TO_ADDR
// end ;
73854: LD_VAR 0 3
73858: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73859: LD_INT 0
73861: PPUSH
73862: PPUSH
73863: PPUSH
// result := false ;
73864: LD_ADDR_VAR 0 3
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
// if not building then
73872: LD_VAR 0 2
73876: NOT
73877: IFFALSE 73881
// exit ;
73879: GO 74019
// x := GetX ( building ) ;
73881: LD_ADDR_VAR 0 4
73885: PUSH
73886: LD_VAR 0 2
73890: PPUSH
73891: CALL_OW 250
73895: ST_TO_ADDR
// y := GetY ( building ) ;
73896: LD_ADDR_VAR 0 5
73900: PUSH
73901: LD_VAR 0 2
73905: PPUSH
73906: CALL_OW 251
73910: ST_TO_ADDR
// if not x or not y then
73911: LD_VAR 0 4
73915: NOT
73916: PUSH
73917: LD_VAR 0 5
73921: NOT
73922: OR
73923: IFFALSE 73927
// exit ;
73925: GO 74019
// if GetTaskList ( unit ) then
73927: LD_VAR 0 1
73931: PPUSH
73932: CALL_OW 437
73936: IFFALSE 74019
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73938: LD_STRING e
73940: PUSH
73941: LD_VAR 0 1
73945: PPUSH
73946: CALL_OW 437
73950: PUSH
73951: LD_INT 1
73953: ARRAY
73954: PUSH
73955: LD_INT 1
73957: ARRAY
73958: EQUAL
73959: PUSH
73960: LD_VAR 0 4
73964: PUSH
73965: LD_VAR 0 1
73969: PPUSH
73970: CALL_OW 437
73974: PUSH
73975: LD_INT 1
73977: ARRAY
73978: PUSH
73979: LD_INT 2
73981: ARRAY
73982: EQUAL
73983: AND
73984: PUSH
73985: LD_VAR 0 5
73989: PUSH
73990: LD_VAR 0 1
73994: PPUSH
73995: CALL_OW 437
73999: PUSH
74000: LD_INT 1
74002: ARRAY
74003: PUSH
74004: LD_INT 3
74006: ARRAY
74007: EQUAL
74008: AND
74009: IFFALSE 74019
// result := true end ;
74011: LD_ADDR_VAR 0 3
74015: PUSH
74016: LD_INT 1
74018: ST_TO_ADDR
// end ;
74019: LD_VAR 0 3
74023: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74024: LD_INT 0
74026: PPUSH
// result := false ;
74027: LD_ADDR_VAR 0 4
74031: PUSH
74032: LD_INT 0
74034: ST_TO_ADDR
// if GetTaskList ( unit ) then
74035: LD_VAR 0 1
74039: PPUSH
74040: CALL_OW 437
74044: IFFALSE 74127
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74046: LD_STRING M
74048: PUSH
74049: LD_VAR 0 1
74053: PPUSH
74054: CALL_OW 437
74058: PUSH
74059: LD_INT 1
74061: ARRAY
74062: PUSH
74063: LD_INT 1
74065: ARRAY
74066: EQUAL
74067: PUSH
74068: LD_VAR 0 2
74072: PUSH
74073: LD_VAR 0 1
74077: PPUSH
74078: CALL_OW 437
74082: PUSH
74083: LD_INT 1
74085: ARRAY
74086: PUSH
74087: LD_INT 2
74089: ARRAY
74090: EQUAL
74091: AND
74092: PUSH
74093: LD_VAR 0 3
74097: PUSH
74098: LD_VAR 0 1
74102: PPUSH
74103: CALL_OW 437
74107: PUSH
74108: LD_INT 1
74110: ARRAY
74111: PUSH
74112: LD_INT 3
74114: ARRAY
74115: EQUAL
74116: AND
74117: IFFALSE 74127
// result := true ;
74119: LD_ADDR_VAR 0 4
74123: PUSH
74124: LD_INT 1
74126: ST_TO_ADDR
// end ; end ;
74127: LD_VAR 0 4
74131: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74132: LD_INT 0
74134: PPUSH
74135: PPUSH
74136: PPUSH
74137: PPUSH
// if not unit or not area then
74138: LD_VAR 0 1
74142: NOT
74143: PUSH
74144: LD_VAR 0 2
74148: NOT
74149: OR
74150: IFFALSE 74154
// exit ;
74152: GO 74317
// tmp := AreaToList ( area , i ) ;
74154: LD_ADDR_VAR 0 6
74158: PUSH
74159: LD_VAR 0 2
74163: PPUSH
74164: LD_VAR 0 5
74168: PPUSH
74169: CALL_OW 517
74173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74174: LD_ADDR_VAR 0 5
74178: PUSH
74179: DOUBLE
74180: LD_INT 1
74182: DEC
74183: ST_TO_ADDR
74184: LD_VAR 0 6
74188: PUSH
74189: LD_INT 1
74191: ARRAY
74192: PUSH
74193: FOR_TO
74194: IFFALSE 74315
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74196: LD_ADDR_VAR 0 7
74200: PUSH
74201: LD_VAR 0 6
74205: PUSH
74206: LD_INT 1
74208: ARRAY
74209: PUSH
74210: LD_VAR 0 5
74214: ARRAY
74215: PUSH
74216: LD_VAR 0 6
74220: PUSH
74221: LD_INT 2
74223: ARRAY
74224: PUSH
74225: LD_VAR 0 5
74229: ARRAY
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
74235: LD_INT 92
74237: PUSH
74238: LD_VAR 0 7
74242: PUSH
74243: LD_INT 1
74245: ARRAY
74246: PUSH
74247: LD_VAR 0 7
74251: PUSH
74252: LD_INT 2
74254: ARRAY
74255: PUSH
74256: LD_INT 3
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: PPUSH
74265: CALL_OW 69
74269: PUSH
74270: LD_INT 0
74272: EQUAL
74273: IFFALSE 74313
// begin PlaceUnitArea ( unit , area , mode ) ;
74275: LD_VAR 0 1
74279: PPUSH
74280: LD_VAR 0 2
74284: PPUSH
74285: LD_VAR 0 3
74289: PPUSH
74290: CALL_OW 49
// result := IsPlaced ( unit ) ;
74294: LD_ADDR_VAR 0 4
74298: PUSH
74299: LD_VAR 0 1
74303: PPUSH
74304: CALL_OW 305
74308: ST_TO_ADDR
// exit ;
74309: POP
74310: POP
74311: GO 74317
// end ; end ;
74313: GO 74193
74315: POP
74316: POP
// end ;
74317: LD_VAR 0 4
74321: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74322: LD_INT 0
74324: PPUSH
74325: PPUSH
74326: PPUSH
// if not side or side > 8 then
74327: LD_VAR 0 1
74331: NOT
74332: PUSH
74333: LD_VAR 0 1
74337: PUSH
74338: LD_INT 8
74340: GREATER
74341: OR
74342: IFFALSE 74346
// exit ;
74344: GO 74533
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74346: LD_ADDR_VAR 0 4
74350: PUSH
74351: LD_INT 22
74353: PUSH
74354: LD_VAR 0 1
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 21
74365: PUSH
74366: LD_INT 3
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PPUSH
74377: CALL_OW 69
74381: ST_TO_ADDR
// if not tmp then
74382: LD_VAR 0 4
74386: NOT
74387: IFFALSE 74391
// exit ;
74389: GO 74533
// enable_addtolog := true ;
74391: LD_ADDR_OWVAR 81
74395: PUSH
74396: LD_INT 1
74398: ST_TO_ADDR
// AddToLog ( [ ) ;
74399: LD_STRING [
74401: PPUSH
74402: CALL_OW 561
// for i in tmp do
74406: LD_ADDR_VAR 0 3
74410: PUSH
74411: LD_VAR 0 4
74415: PUSH
74416: FOR_IN
74417: IFFALSE 74524
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74419: LD_STRING [
74421: PUSH
74422: LD_VAR 0 3
74426: PPUSH
74427: CALL_OW 266
74431: STR
74432: PUSH
74433: LD_STRING , 
74435: STR
74436: PUSH
74437: LD_VAR 0 3
74441: PPUSH
74442: CALL_OW 250
74446: STR
74447: PUSH
74448: LD_STRING , 
74450: STR
74451: PUSH
74452: LD_VAR 0 3
74456: PPUSH
74457: CALL_OW 251
74461: STR
74462: PUSH
74463: LD_STRING , 
74465: STR
74466: PUSH
74467: LD_VAR 0 3
74471: PPUSH
74472: CALL_OW 254
74476: STR
74477: PUSH
74478: LD_STRING , 
74480: STR
74481: PUSH
74482: LD_VAR 0 3
74486: PPUSH
74487: LD_INT 1
74489: PPUSH
74490: CALL_OW 268
74494: STR
74495: PUSH
74496: LD_STRING , 
74498: STR
74499: PUSH
74500: LD_VAR 0 3
74504: PPUSH
74505: LD_INT 2
74507: PPUSH
74508: CALL_OW 268
74512: STR
74513: PUSH
74514: LD_STRING ],
74516: STR
74517: PPUSH
74518: CALL_OW 561
// end ;
74522: GO 74416
74524: POP
74525: POP
// AddToLog ( ]; ) ;
74526: LD_STRING ];
74528: PPUSH
74529: CALL_OW 561
// end ;
74533: LD_VAR 0 2
74537: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74538: LD_INT 0
74540: PPUSH
74541: PPUSH
74542: PPUSH
74543: PPUSH
74544: PPUSH
// if not area or not rate or not max then
74545: LD_VAR 0 1
74549: NOT
74550: PUSH
74551: LD_VAR 0 2
74555: NOT
74556: OR
74557: PUSH
74558: LD_VAR 0 4
74562: NOT
74563: OR
74564: IFFALSE 74568
// exit ;
74566: GO 74757
// while 1 do
74568: LD_INT 1
74570: IFFALSE 74757
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74572: LD_ADDR_VAR 0 9
74576: PUSH
74577: LD_VAR 0 1
74581: PPUSH
74582: LD_INT 1
74584: PPUSH
74585: CALL_OW 287
74589: PUSH
74590: LD_INT 10
74592: MUL
74593: ST_TO_ADDR
// r := rate / 10 ;
74594: LD_ADDR_VAR 0 7
74598: PUSH
74599: LD_VAR 0 2
74603: PUSH
74604: LD_INT 10
74606: DIVREAL
74607: ST_TO_ADDR
// time := 1 1$00 ;
74608: LD_ADDR_VAR 0 8
74612: PUSH
74613: LD_INT 2100
74615: ST_TO_ADDR
// if amount < min then
74616: LD_VAR 0 9
74620: PUSH
74621: LD_VAR 0 3
74625: LESS
74626: IFFALSE 74644
// r := r * 2 else
74628: LD_ADDR_VAR 0 7
74632: PUSH
74633: LD_VAR 0 7
74637: PUSH
74638: LD_INT 2
74640: MUL
74641: ST_TO_ADDR
74642: GO 74670
// if amount > max then
74644: LD_VAR 0 9
74648: PUSH
74649: LD_VAR 0 4
74653: GREATER
74654: IFFALSE 74670
// r := r / 2 ;
74656: LD_ADDR_VAR 0 7
74660: PUSH
74661: LD_VAR 0 7
74665: PUSH
74666: LD_INT 2
74668: DIVREAL
74669: ST_TO_ADDR
// time := time / r ;
74670: LD_ADDR_VAR 0 8
74674: PUSH
74675: LD_VAR 0 8
74679: PUSH
74680: LD_VAR 0 7
74684: DIVREAL
74685: ST_TO_ADDR
// if time < 0 then
74686: LD_VAR 0 8
74690: PUSH
74691: LD_INT 0
74693: LESS
74694: IFFALSE 74711
// time := time * - 1 ;
74696: LD_ADDR_VAR 0 8
74700: PUSH
74701: LD_VAR 0 8
74705: PUSH
74706: LD_INT 1
74708: NEG
74709: MUL
74710: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74711: LD_VAR 0 8
74715: PUSH
74716: LD_INT 35
74718: PPUSH
74719: LD_INT 875
74721: PPUSH
74722: CALL_OW 12
74726: PLUS
74727: PPUSH
74728: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74732: LD_INT 1
74734: PPUSH
74735: LD_INT 5
74737: PPUSH
74738: CALL_OW 12
74742: PPUSH
74743: LD_VAR 0 1
74747: PPUSH
74748: LD_INT 1
74750: PPUSH
74751: CALL_OW 55
// end ;
74755: GO 74568
// end ;
74757: LD_VAR 0 5
74761: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74762: LD_INT 0
74764: PPUSH
74765: PPUSH
74766: PPUSH
74767: PPUSH
74768: PPUSH
74769: PPUSH
74770: PPUSH
74771: PPUSH
// if not turrets or not factories then
74772: LD_VAR 0 1
74776: NOT
74777: PUSH
74778: LD_VAR 0 2
74782: NOT
74783: OR
74784: IFFALSE 74788
// exit ;
74786: GO 75095
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74788: LD_ADDR_VAR 0 10
74792: PUSH
74793: LD_INT 5
74795: PUSH
74796: LD_INT 6
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 2
74805: PUSH
74806: LD_INT 4
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PUSH
74813: LD_INT 3
74815: PUSH
74816: LD_INT 5
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 24
74830: PUSH
74831: LD_INT 25
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 23
74840: PUSH
74841: LD_INT 27
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 42
74854: PUSH
74855: LD_INT 43
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: PUSH
74862: LD_INT 44
74864: PUSH
74865: LD_INT 46
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 45
74874: PUSH
74875: LD_INT 47
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: ST_TO_ADDR
// result := [ ] ;
74892: LD_ADDR_VAR 0 3
74896: PUSH
74897: EMPTY
74898: ST_TO_ADDR
// for i in turrets do
74899: LD_ADDR_VAR 0 4
74903: PUSH
74904: LD_VAR 0 1
74908: PUSH
74909: FOR_IN
74910: IFFALSE 75093
// begin nat := GetNation ( i ) ;
74912: LD_ADDR_VAR 0 7
74916: PUSH
74917: LD_VAR 0 4
74921: PPUSH
74922: CALL_OW 248
74926: ST_TO_ADDR
// weapon := 0 ;
74927: LD_ADDR_VAR 0 8
74931: PUSH
74932: LD_INT 0
74934: ST_TO_ADDR
// if not nat then
74935: LD_VAR 0 7
74939: NOT
74940: IFFALSE 74944
// continue ;
74942: GO 74909
// for j in list [ nat ] do
74944: LD_ADDR_VAR 0 5
74948: PUSH
74949: LD_VAR 0 10
74953: PUSH
74954: LD_VAR 0 7
74958: ARRAY
74959: PUSH
74960: FOR_IN
74961: IFFALSE 75002
// if GetBWeapon ( i ) = j [ 1 ] then
74963: LD_VAR 0 4
74967: PPUSH
74968: CALL_OW 269
74972: PUSH
74973: LD_VAR 0 5
74977: PUSH
74978: LD_INT 1
74980: ARRAY
74981: EQUAL
74982: IFFALSE 75000
// begin weapon := j [ 2 ] ;
74984: LD_ADDR_VAR 0 8
74988: PUSH
74989: LD_VAR 0 5
74993: PUSH
74994: LD_INT 2
74996: ARRAY
74997: ST_TO_ADDR
// break ;
74998: GO 75002
// end ;
75000: GO 74960
75002: POP
75003: POP
// if not weapon then
75004: LD_VAR 0 8
75008: NOT
75009: IFFALSE 75013
// continue ;
75011: GO 74909
// for k in factories do
75013: LD_ADDR_VAR 0 6
75017: PUSH
75018: LD_VAR 0 2
75022: PUSH
75023: FOR_IN
75024: IFFALSE 75089
// begin weapons := AvailableWeaponList ( k ) ;
75026: LD_ADDR_VAR 0 9
75030: PUSH
75031: LD_VAR 0 6
75035: PPUSH
75036: CALL_OW 478
75040: ST_TO_ADDR
// if not weapons then
75041: LD_VAR 0 9
75045: NOT
75046: IFFALSE 75050
// continue ;
75048: GO 75023
// if weapon in weapons then
75050: LD_VAR 0 8
75054: PUSH
75055: LD_VAR 0 9
75059: IN
75060: IFFALSE 75087
// begin result := [ i , weapon ] ;
75062: LD_ADDR_VAR 0 3
75066: PUSH
75067: LD_VAR 0 4
75071: PUSH
75072: LD_VAR 0 8
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: ST_TO_ADDR
// exit ;
75081: POP
75082: POP
75083: POP
75084: POP
75085: GO 75095
// end ; end ;
75087: GO 75023
75089: POP
75090: POP
// end ;
75091: GO 74909
75093: POP
75094: POP
// end ;
75095: LD_VAR 0 3
75099: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75100: LD_INT 0
75102: PPUSH
// if not side or side > 8 then
75103: LD_VAR 0 3
75107: NOT
75108: PUSH
75109: LD_VAR 0 3
75113: PUSH
75114: LD_INT 8
75116: GREATER
75117: OR
75118: IFFALSE 75122
// exit ;
75120: GO 75181
// if not range then
75122: LD_VAR 0 4
75126: NOT
75127: IFFALSE 75138
// range := - 12 ;
75129: LD_ADDR_VAR 0 4
75133: PUSH
75134: LD_INT 12
75136: NEG
75137: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75138: LD_VAR 0 1
75142: PPUSH
75143: LD_VAR 0 2
75147: PPUSH
75148: LD_VAR 0 3
75152: PPUSH
75153: LD_VAR 0 4
75157: PPUSH
75158: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75162: LD_VAR 0 1
75166: PPUSH
75167: LD_VAR 0 2
75171: PPUSH
75172: LD_VAR 0 3
75176: PPUSH
75177: CALL_OW 331
// end ;
75181: LD_VAR 0 5
75185: RET
// export function Video ( mode ) ; begin
75186: LD_INT 0
75188: PPUSH
// ingame_video = mode ;
75189: LD_ADDR_OWVAR 52
75193: PUSH
75194: LD_VAR 0 1
75198: ST_TO_ADDR
// interface_hidden = mode ;
75199: LD_ADDR_OWVAR 54
75203: PUSH
75204: LD_VAR 0 1
75208: ST_TO_ADDR
// end ;
75209: LD_VAR 0 2
75213: RET
// export function Join ( array , element ) ; begin
75214: LD_INT 0
75216: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75217: LD_ADDR_VAR 0 3
75221: PUSH
75222: LD_VAR 0 1
75226: PPUSH
75227: LD_VAR 0 1
75231: PUSH
75232: LD_INT 1
75234: PLUS
75235: PPUSH
75236: LD_VAR 0 2
75240: PPUSH
75241: CALL_OW 1
75245: ST_TO_ADDR
// end ;
75246: LD_VAR 0 3
75250: RET
// export function JoinUnion ( array , element ) ; begin
75251: LD_INT 0
75253: PPUSH
// result := array union element ;
75254: LD_ADDR_VAR 0 3
75258: PUSH
75259: LD_VAR 0 1
75263: PUSH
75264: LD_VAR 0 2
75268: UNION
75269: ST_TO_ADDR
// end ;
75270: LD_VAR 0 3
75274: RET
// export function GetBehemoths ( side ) ; begin
75275: LD_INT 0
75277: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75278: LD_ADDR_VAR 0 2
75282: PUSH
75283: LD_INT 22
75285: PUSH
75286: LD_VAR 0 1
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 31
75297: PUSH
75298: LD_INT 25
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PPUSH
75309: CALL_OW 69
75313: ST_TO_ADDR
// end ;
75314: LD_VAR 0 2
75318: RET
// export function Shuffle ( array ) ; var i , index ; begin
75319: LD_INT 0
75321: PPUSH
75322: PPUSH
75323: PPUSH
// result := [ ] ;
75324: LD_ADDR_VAR 0 2
75328: PUSH
75329: EMPTY
75330: ST_TO_ADDR
// if not array then
75331: LD_VAR 0 1
75335: NOT
75336: IFFALSE 75340
// exit ;
75338: GO 75439
// Randomize ;
75340: CALL_OW 10
// for i = array downto 1 do
75344: LD_ADDR_VAR 0 3
75348: PUSH
75349: DOUBLE
75350: LD_VAR 0 1
75354: INC
75355: ST_TO_ADDR
75356: LD_INT 1
75358: PUSH
75359: FOR_DOWNTO
75360: IFFALSE 75437
// begin index := rand ( 1 , array ) ;
75362: LD_ADDR_VAR 0 4
75366: PUSH
75367: LD_INT 1
75369: PPUSH
75370: LD_VAR 0 1
75374: PPUSH
75375: CALL_OW 12
75379: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75380: LD_ADDR_VAR 0 2
75384: PUSH
75385: LD_VAR 0 2
75389: PPUSH
75390: LD_VAR 0 2
75394: PUSH
75395: LD_INT 1
75397: PLUS
75398: PPUSH
75399: LD_VAR 0 1
75403: PUSH
75404: LD_VAR 0 4
75408: ARRAY
75409: PPUSH
75410: CALL_OW 2
75414: ST_TO_ADDR
// array := Delete ( array , index ) ;
75415: LD_ADDR_VAR 0 1
75419: PUSH
75420: LD_VAR 0 1
75424: PPUSH
75425: LD_VAR 0 4
75429: PPUSH
75430: CALL_OW 3
75434: ST_TO_ADDR
// end ;
75435: GO 75359
75437: POP
75438: POP
// end ;
75439: LD_VAR 0 2
75443: RET
// export function GetBaseMaterials ( base ) ; begin
75444: LD_INT 0
75446: PPUSH
// result := [ 0 , 0 , 0 ] ;
75447: LD_ADDR_VAR 0 2
75451: PUSH
75452: LD_INT 0
75454: PUSH
75455: LD_INT 0
75457: PUSH
75458: LD_INT 0
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: LIST
75465: ST_TO_ADDR
// if not base then
75466: LD_VAR 0 1
75470: NOT
75471: IFFALSE 75475
// exit ;
75473: GO 75524
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75475: LD_ADDR_VAR 0 2
75479: PUSH
75480: LD_VAR 0 1
75484: PPUSH
75485: LD_INT 1
75487: PPUSH
75488: CALL_OW 275
75492: PUSH
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_INT 2
75500: PPUSH
75501: CALL_OW 275
75505: PUSH
75506: LD_VAR 0 1
75510: PPUSH
75511: LD_INT 3
75513: PPUSH
75514: CALL_OW 275
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: ST_TO_ADDR
// end ;
75524: LD_VAR 0 2
75528: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75529: LD_INT 0
75531: PPUSH
75532: PPUSH
// result := array ;
75533: LD_ADDR_VAR 0 3
75537: PUSH
75538: LD_VAR 0 1
75542: ST_TO_ADDR
// if size >= result then
75543: LD_VAR 0 2
75547: PUSH
75548: LD_VAR 0 3
75552: GREATEREQUAL
75553: IFFALSE 75557
// exit ;
75555: GO 75607
// if size then
75557: LD_VAR 0 2
75561: IFFALSE 75607
// for i := array downto size do
75563: LD_ADDR_VAR 0 4
75567: PUSH
75568: DOUBLE
75569: LD_VAR 0 1
75573: INC
75574: ST_TO_ADDR
75575: LD_VAR 0 2
75579: PUSH
75580: FOR_DOWNTO
75581: IFFALSE 75605
// result := Delete ( result , result ) ;
75583: LD_ADDR_VAR 0 3
75587: PUSH
75588: LD_VAR 0 3
75592: PPUSH
75593: LD_VAR 0 3
75597: PPUSH
75598: CALL_OW 3
75602: ST_TO_ADDR
75603: GO 75580
75605: POP
75606: POP
// end ;
75607: LD_VAR 0 3
75611: RET
// export function ComExit ( unit ) ; var tmp ; begin
75612: LD_INT 0
75614: PPUSH
75615: PPUSH
// if not IsInUnit ( unit ) then
75616: LD_VAR 0 1
75620: PPUSH
75621: CALL_OW 310
75625: NOT
75626: IFFALSE 75630
// exit ;
75628: GO 75690
// tmp := IsInUnit ( unit ) ;
75630: LD_ADDR_VAR 0 3
75634: PUSH
75635: LD_VAR 0 1
75639: PPUSH
75640: CALL_OW 310
75644: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75645: LD_VAR 0 3
75649: PPUSH
75650: CALL_OW 247
75654: PUSH
75655: LD_INT 2
75657: EQUAL
75658: IFFALSE 75671
// ComExitVehicle ( unit ) else
75660: LD_VAR 0 1
75664: PPUSH
75665: CALL_OW 121
75669: GO 75680
// ComExitBuilding ( unit ) ;
75671: LD_VAR 0 1
75675: PPUSH
75676: CALL_OW 122
// result := tmp ;
75680: LD_ADDR_VAR 0 2
75684: PUSH
75685: LD_VAR 0 3
75689: ST_TO_ADDR
// end ;
75690: LD_VAR 0 2
75694: RET
// export function ComExitAll ( units ) ; var i ; begin
75695: LD_INT 0
75697: PPUSH
75698: PPUSH
// if not units then
75699: LD_VAR 0 1
75703: NOT
75704: IFFALSE 75708
// exit ;
75706: GO 75734
// for i in units do
75708: LD_ADDR_VAR 0 3
75712: PUSH
75713: LD_VAR 0 1
75717: PUSH
75718: FOR_IN
75719: IFFALSE 75732
// ComExit ( i ) ;
75721: LD_VAR 0 3
75725: PPUSH
75726: CALL 75612 0 1
75730: GO 75718
75732: POP
75733: POP
// end ;
75734: LD_VAR 0 2
75738: RET
// export function ResetHc ; begin
75739: LD_INT 0
75741: PPUSH
// InitHc ;
75742: CALL_OW 19
// hc_importance := 0 ;
75746: LD_ADDR_OWVAR 32
75750: PUSH
75751: LD_INT 0
75753: ST_TO_ADDR
// end ;
75754: LD_VAR 0 1
75758: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75759: LD_INT 0
75761: PPUSH
75762: PPUSH
75763: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75764: LD_ADDR_VAR 0 6
75768: PUSH
75769: LD_VAR 0 1
75773: PUSH
75774: LD_VAR 0 3
75778: PLUS
75779: PUSH
75780: LD_INT 2
75782: DIV
75783: ST_TO_ADDR
// if _x < 0 then
75784: LD_VAR 0 6
75788: PUSH
75789: LD_INT 0
75791: LESS
75792: IFFALSE 75809
// _x := _x * - 1 ;
75794: LD_ADDR_VAR 0 6
75798: PUSH
75799: LD_VAR 0 6
75803: PUSH
75804: LD_INT 1
75806: NEG
75807: MUL
75808: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75809: LD_ADDR_VAR 0 7
75813: PUSH
75814: LD_VAR 0 2
75818: PUSH
75819: LD_VAR 0 4
75823: PLUS
75824: PUSH
75825: LD_INT 2
75827: DIV
75828: ST_TO_ADDR
// if _y < 0 then
75829: LD_VAR 0 7
75833: PUSH
75834: LD_INT 0
75836: LESS
75837: IFFALSE 75854
// _y := _y * - 1 ;
75839: LD_ADDR_VAR 0 7
75843: PUSH
75844: LD_VAR 0 7
75848: PUSH
75849: LD_INT 1
75851: NEG
75852: MUL
75853: ST_TO_ADDR
// result := [ _x , _y ] ;
75854: LD_ADDR_VAR 0 5
75858: PUSH
75859: LD_VAR 0 6
75863: PUSH
75864: LD_VAR 0 7
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: ST_TO_ADDR
// end ;
75873: LD_VAR 0 5
75877: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75878: LD_INT 0
75880: PPUSH
75881: PPUSH
75882: PPUSH
75883: PPUSH
// task := GetTaskList ( unit ) ;
75884: LD_ADDR_VAR 0 7
75888: PUSH
75889: LD_VAR 0 1
75893: PPUSH
75894: CALL_OW 437
75898: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75899: LD_VAR 0 7
75903: NOT
75904: PUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: LD_VAR 0 2
75914: PPUSH
75915: CALL_OW 308
75919: NOT
75920: AND
75921: IFFALSE 75925
// exit ;
75923: GO 76043
// if IsInArea ( unit , area ) then
75925: LD_VAR 0 1
75929: PPUSH
75930: LD_VAR 0 2
75934: PPUSH
75935: CALL_OW 308
75939: IFFALSE 75957
// begin ComMoveToArea ( unit , goAway ) ;
75941: LD_VAR 0 1
75945: PPUSH
75946: LD_VAR 0 3
75950: PPUSH
75951: CALL_OW 113
// exit ;
75955: GO 76043
// end ; if task [ 1 ] [ 1 ] <> M then
75957: LD_VAR 0 7
75961: PUSH
75962: LD_INT 1
75964: ARRAY
75965: PUSH
75966: LD_INT 1
75968: ARRAY
75969: PUSH
75970: LD_STRING M
75972: NONEQUAL
75973: IFFALSE 75977
// exit ;
75975: GO 76043
// x := task [ 1 ] [ 2 ] ;
75977: LD_ADDR_VAR 0 5
75981: PUSH
75982: LD_VAR 0 7
75986: PUSH
75987: LD_INT 1
75989: ARRAY
75990: PUSH
75991: LD_INT 2
75993: ARRAY
75994: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75995: LD_ADDR_VAR 0 6
75999: PUSH
76000: LD_VAR 0 7
76004: PUSH
76005: LD_INT 1
76007: ARRAY
76008: PUSH
76009: LD_INT 3
76011: ARRAY
76012: ST_TO_ADDR
// if InArea ( x , y , area ) then
76013: LD_VAR 0 5
76017: PPUSH
76018: LD_VAR 0 6
76022: PPUSH
76023: LD_VAR 0 2
76027: PPUSH
76028: CALL_OW 309
76032: IFFALSE 76043
// ComStop ( unit ) ;
76034: LD_VAR 0 1
76038: PPUSH
76039: CALL_OW 141
// end ;
76043: LD_VAR 0 4
76047: RET
// export function Abs ( value ) ; begin
76048: LD_INT 0
76050: PPUSH
// result := value ;
76051: LD_ADDR_VAR 0 2
76055: PUSH
76056: LD_VAR 0 1
76060: ST_TO_ADDR
// if value < 0 then
76061: LD_VAR 0 1
76065: PUSH
76066: LD_INT 0
76068: LESS
76069: IFFALSE 76086
// result := value * - 1 ;
76071: LD_ADDR_VAR 0 2
76075: PUSH
76076: LD_VAR 0 1
76080: PUSH
76081: LD_INT 1
76083: NEG
76084: MUL
76085: ST_TO_ADDR
// end ;
76086: LD_VAR 0 2
76090: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76091: LD_INT 0
76093: PPUSH
76094: PPUSH
76095: PPUSH
76096: PPUSH
76097: PPUSH
76098: PPUSH
76099: PPUSH
76100: PPUSH
// if not unit or not building then
76101: LD_VAR 0 1
76105: NOT
76106: PUSH
76107: LD_VAR 0 2
76111: NOT
76112: OR
76113: IFFALSE 76117
// exit ;
76115: GO 76343
// x := GetX ( building ) ;
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_VAR 0 2
76126: PPUSH
76127: CALL_OW 250
76131: ST_TO_ADDR
// y := GetY ( building ) ;
76132: LD_ADDR_VAR 0 6
76136: PUSH
76137: LD_VAR 0 2
76141: PPUSH
76142: CALL_OW 251
76146: ST_TO_ADDR
// d := GetDir ( building ) ;
76147: LD_ADDR_VAR 0 8
76151: PUSH
76152: LD_VAR 0 2
76156: PPUSH
76157: CALL_OW 254
76161: ST_TO_ADDR
// r := 4 ;
76162: LD_ADDR_VAR 0 9
76166: PUSH
76167: LD_INT 4
76169: ST_TO_ADDR
// for i := 1 to 5 do
76170: LD_ADDR_VAR 0 10
76174: PUSH
76175: DOUBLE
76176: LD_INT 1
76178: DEC
76179: ST_TO_ADDR
76180: LD_INT 5
76182: PUSH
76183: FOR_TO
76184: IFFALSE 76341
// begin _x := ShiftX ( x , d , r + i ) ;
76186: LD_ADDR_VAR 0 5
76190: PUSH
76191: LD_VAR 0 4
76195: PPUSH
76196: LD_VAR 0 8
76200: PPUSH
76201: LD_VAR 0 9
76205: PUSH
76206: LD_VAR 0 10
76210: PLUS
76211: PPUSH
76212: CALL_OW 272
76216: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76217: LD_ADDR_VAR 0 7
76221: PUSH
76222: LD_VAR 0 6
76226: PPUSH
76227: LD_VAR 0 8
76231: PPUSH
76232: LD_VAR 0 9
76236: PUSH
76237: LD_VAR 0 10
76241: PLUS
76242: PPUSH
76243: CALL_OW 273
76247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76248: LD_VAR 0 5
76252: PPUSH
76253: LD_VAR 0 7
76257: PPUSH
76258: CALL_OW 488
76262: PUSH
76263: LD_VAR 0 5
76267: PPUSH
76268: LD_VAR 0 7
76272: PPUSH
76273: CALL_OW 428
76277: PPUSH
76278: CALL_OW 247
76282: PUSH
76283: LD_INT 3
76285: PUSH
76286: LD_INT 2
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: IN
76293: NOT
76294: AND
76295: IFFALSE 76339
// begin ComMoveXY ( unit , _x , _y ) ;
76297: LD_VAR 0 1
76301: PPUSH
76302: LD_VAR 0 5
76306: PPUSH
76307: LD_VAR 0 7
76311: PPUSH
76312: CALL_OW 111
// result := [ _x , _y ] ;
76316: LD_ADDR_VAR 0 3
76320: PUSH
76321: LD_VAR 0 5
76325: PUSH
76326: LD_VAR 0 7
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: ST_TO_ADDR
// exit ;
76335: POP
76336: POP
76337: GO 76343
// end ; end ;
76339: GO 76183
76341: POP
76342: POP
// end ;
76343: LD_VAR 0 3
76347: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76348: LD_INT 0
76350: PPUSH
76351: PPUSH
76352: PPUSH
// result := 0 ;
76353: LD_ADDR_VAR 0 3
76357: PUSH
76358: LD_INT 0
76360: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76361: LD_VAR 0 1
76365: PUSH
76366: LD_INT 0
76368: LESS
76369: PUSH
76370: LD_VAR 0 1
76374: PUSH
76375: LD_INT 8
76377: GREATER
76378: OR
76379: PUSH
76380: LD_VAR 0 2
76384: PUSH
76385: LD_INT 0
76387: LESS
76388: OR
76389: PUSH
76390: LD_VAR 0 2
76394: PUSH
76395: LD_INT 8
76397: GREATER
76398: OR
76399: IFFALSE 76403
// exit ;
76401: GO 76478
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76403: LD_ADDR_VAR 0 4
76407: PUSH
76408: LD_INT 22
76410: PUSH
76411: LD_VAR 0 2
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PPUSH
76420: CALL_OW 69
76424: PUSH
76425: FOR_IN
76426: IFFALSE 76476
// begin un := UnitShoot ( i ) ;
76428: LD_ADDR_VAR 0 5
76432: PUSH
76433: LD_VAR 0 4
76437: PPUSH
76438: CALL_OW 504
76442: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76443: LD_VAR 0 5
76447: PPUSH
76448: CALL_OW 255
76452: PUSH
76453: LD_VAR 0 1
76457: EQUAL
76458: IFFALSE 76474
// begin result := un ;
76460: LD_ADDR_VAR 0 3
76464: PUSH
76465: LD_VAR 0 5
76469: ST_TO_ADDR
// exit ;
76470: POP
76471: POP
76472: GO 76478
// end ; end ;
76474: GO 76425
76476: POP
76477: POP
// end ;
76478: LD_VAR 0 3
76482: RET
// export function GetCargoBay ( units ) ; begin
76483: LD_INT 0
76485: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76486: LD_ADDR_VAR 0 2
76490: PUSH
76491: LD_VAR 0 1
76495: PPUSH
76496: LD_INT 2
76498: PUSH
76499: LD_INT 34
76501: PUSH
76502: LD_INT 12
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 34
76511: PUSH
76512: LD_INT 51
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 34
76521: PUSH
76522: LD_INT 32
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 34
76531: PUSH
76532: LD_INT 89
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: PPUSH
76546: CALL_OW 72
76550: ST_TO_ADDR
// end ;
76551: LD_VAR 0 2
76555: RET
// export function Negate ( value ) ; begin
76556: LD_INT 0
76558: PPUSH
// result := not value ;
76559: LD_ADDR_VAR 0 2
76563: PUSH
76564: LD_VAR 0 1
76568: NOT
76569: ST_TO_ADDR
// end ;
76570: LD_VAR 0 2
76574: RET
// export function Inc ( value ) ; begin
76575: LD_INT 0
76577: PPUSH
// result := value + 1 ;
76578: LD_ADDR_VAR 0 2
76582: PUSH
76583: LD_VAR 0 1
76587: PUSH
76588: LD_INT 1
76590: PLUS
76591: ST_TO_ADDR
// end ;
76592: LD_VAR 0 2
76596: RET
// export function Dec ( value ) ; begin
76597: LD_INT 0
76599: PPUSH
// result := value - 1 ;
76600: LD_ADDR_VAR 0 2
76604: PUSH
76605: LD_VAR 0 1
76609: PUSH
76610: LD_INT 1
76612: MINUS
76613: ST_TO_ADDR
// end ;
76614: LD_VAR 0 2
76618: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76619: LD_INT 0
76621: PPUSH
76622: PPUSH
76623: PPUSH
76624: PPUSH
76625: PPUSH
76626: PPUSH
76627: PPUSH
76628: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76629: LD_VAR 0 1
76633: PPUSH
76634: LD_VAR 0 2
76638: PPUSH
76639: CALL_OW 488
76643: NOT
76644: PUSH
76645: LD_VAR 0 3
76649: PPUSH
76650: LD_VAR 0 4
76654: PPUSH
76655: CALL_OW 488
76659: NOT
76660: OR
76661: IFFALSE 76674
// begin result := - 1 ;
76663: LD_ADDR_VAR 0 5
76667: PUSH
76668: LD_INT 1
76670: NEG
76671: ST_TO_ADDR
// exit ;
76672: GO 76909
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76674: LD_ADDR_VAR 0 12
76678: PUSH
76679: LD_VAR 0 1
76683: PPUSH
76684: LD_VAR 0 2
76688: PPUSH
76689: LD_VAR 0 3
76693: PPUSH
76694: LD_VAR 0 4
76698: PPUSH
76699: CALL 75759 0 4
76703: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76704: LD_ADDR_VAR 0 11
76708: PUSH
76709: LD_VAR 0 1
76713: PPUSH
76714: LD_VAR 0 2
76718: PPUSH
76719: LD_VAR 0 12
76723: PUSH
76724: LD_INT 1
76726: ARRAY
76727: PPUSH
76728: LD_VAR 0 12
76732: PUSH
76733: LD_INT 2
76735: ARRAY
76736: PPUSH
76737: CALL_OW 298
76741: ST_TO_ADDR
// distance := 9999 ;
76742: LD_ADDR_VAR 0 10
76746: PUSH
76747: LD_INT 9999
76749: ST_TO_ADDR
// for i := 0 to 5 do
76750: LD_ADDR_VAR 0 6
76754: PUSH
76755: DOUBLE
76756: LD_INT 0
76758: DEC
76759: ST_TO_ADDR
76760: LD_INT 5
76762: PUSH
76763: FOR_TO
76764: IFFALSE 76907
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76766: LD_ADDR_VAR 0 7
76770: PUSH
76771: LD_VAR 0 1
76775: PPUSH
76776: LD_VAR 0 6
76780: PPUSH
76781: LD_VAR 0 11
76785: PPUSH
76786: CALL_OW 272
76790: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76791: LD_ADDR_VAR 0 8
76795: PUSH
76796: LD_VAR 0 2
76800: PPUSH
76801: LD_VAR 0 6
76805: PPUSH
76806: LD_VAR 0 11
76810: PPUSH
76811: CALL_OW 273
76815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76816: LD_VAR 0 7
76820: PPUSH
76821: LD_VAR 0 8
76825: PPUSH
76826: CALL_OW 488
76830: NOT
76831: IFFALSE 76835
// continue ;
76833: GO 76763
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76835: LD_ADDR_VAR 0 9
76839: PUSH
76840: LD_VAR 0 12
76844: PUSH
76845: LD_INT 1
76847: ARRAY
76848: PPUSH
76849: LD_VAR 0 12
76853: PUSH
76854: LD_INT 2
76856: ARRAY
76857: PPUSH
76858: LD_VAR 0 7
76862: PPUSH
76863: LD_VAR 0 8
76867: PPUSH
76868: CALL_OW 298
76872: ST_TO_ADDR
// if tmp < distance then
76873: LD_VAR 0 9
76877: PUSH
76878: LD_VAR 0 10
76882: LESS
76883: IFFALSE 76905
// begin result := i ;
76885: LD_ADDR_VAR 0 5
76889: PUSH
76890: LD_VAR 0 6
76894: ST_TO_ADDR
// distance := tmp ;
76895: LD_ADDR_VAR 0 10
76899: PUSH
76900: LD_VAR 0 9
76904: ST_TO_ADDR
// end ; end ;
76905: GO 76763
76907: POP
76908: POP
// end ;
76909: LD_VAR 0 5
76913: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76914: LD_INT 0
76916: PPUSH
76917: PPUSH
// if not driver or not IsInUnit ( driver ) then
76918: LD_VAR 0 1
76922: NOT
76923: PUSH
76924: LD_VAR 0 1
76928: PPUSH
76929: CALL_OW 310
76933: NOT
76934: OR
76935: IFFALSE 76939
// exit ;
76937: GO 77029
// vehicle := IsInUnit ( driver ) ;
76939: LD_ADDR_VAR 0 3
76943: PUSH
76944: LD_VAR 0 1
76948: PPUSH
76949: CALL_OW 310
76953: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76954: LD_VAR 0 1
76958: PPUSH
76959: LD_STRING \
76961: PUSH
76962: LD_INT 0
76964: PUSH
76965: LD_INT 0
76967: PUSH
76968: LD_INT 0
76970: PUSH
76971: LD_INT 0
76973: PUSH
76974: LD_INT 0
76976: PUSH
76977: LD_INT 0
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: PUSH
76989: LD_STRING E
76991: PUSH
76992: LD_INT 0
76994: PUSH
76995: LD_INT 0
76997: PUSH
76998: LD_VAR 0 3
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: LD_INT 0
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: PUSH
77021: EMPTY
77022: LIST
77023: LIST
77024: PPUSH
77025: CALL_OW 446
// end ;
77029: LD_VAR 0 2
77033: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77034: LD_INT 0
77036: PPUSH
77037: PPUSH
// if not driver or not IsInUnit ( driver ) then
77038: LD_VAR 0 1
77042: NOT
77043: PUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: CALL_OW 310
77053: NOT
77054: OR
77055: IFFALSE 77059
// exit ;
77057: GO 77149
// vehicle := IsInUnit ( driver ) ;
77059: LD_ADDR_VAR 0 3
77063: PUSH
77064: LD_VAR 0 1
77068: PPUSH
77069: CALL_OW 310
77073: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77074: LD_VAR 0 1
77078: PPUSH
77079: LD_STRING \
77081: PUSH
77082: LD_INT 0
77084: PUSH
77085: LD_INT 0
77087: PUSH
77088: LD_INT 0
77090: PUSH
77091: LD_INT 0
77093: PUSH
77094: LD_INT 0
77096: PUSH
77097: LD_INT 0
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: PUSH
77109: LD_STRING E
77111: PUSH
77112: LD_INT 0
77114: PUSH
77115: LD_INT 0
77117: PUSH
77118: LD_VAR 0 3
77122: PUSH
77123: LD_INT 0
77125: PUSH
77126: LD_INT 0
77128: PUSH
77129: LD_INT 0
77131: PUSH
77132: EMPTY
77133: LIST
77134: LIST
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: LIST
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PPUSH
77145: CALL_OW 447
// end ;
77149: LD_VAR 0 2
77153: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77154: LD_INT 0
77156: PPUSH
77157: PPUSH
77158: PPUSH
// tmp := [ ] ;
77159: LD_ADDR_VAR 0 5
77163: PUSH
77164: EMPTY
77165: ST_TO_ADDR
// for i in units do
77166: LD_ADDR_VAR 0 4
77170: PUSH
77171: LD_VAR 0 1
77175: PUSH
77176: FOR_IN
77177: IFFALSE 77215
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77179: LD_ADDR_VAR 0 5
77183: PUSH
77184: LD_VAR 0 5
77188: PPUSH
77189: LD_VAR 0 5
77193: PUSH
77194: LD_INT 1
77196: PLUS
77197: PPUSH
77198: LD_VAR 0 4
77202: PPUSH
77203: CALL_OW 256
77207: PPUSH
77208: CALL_OW 2
77212: ST_TO_ADDR
77213: GO 77176
77215: POP
77216: POP
// if not tmp then
77217: LD_VAR 0 5
77221: NOT
77222: IFFALSE 77226
// exit ;
77224: GO 77274
// if asc then
77226: LD_VAR 0 2
77230: IFFALSE 77254
// result := SortListByListAsc ( units , tmp ) else
77232: LD_ADDR_VAR 0 3
77236: PUSH
77237: LD_VAR 0 1
77241: PPUSH
77242: LD_VAR 0 5
77246: PPUSH
77247: CALL_OW 76
77251: ST_TO_ADDR
77252: GO 77274
// result := SortListByListDesc ( units , tmp ) ;
77254: LD_ADDR_VAR 0 3
77258: PUSH
77259: LD_VAR 0 1
77263: PPUSH
77264: LD_VAR 0 5
77268: PPUSH
77269: CALL_OW 77
77273: ST_TO_ADDR
// end ;
77274: LD_VAR 0 3
77278: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77279: LD_INT 0
77281: PPUSH
77282: PPUSH
// task := GetTaskList ( mech ) ;
77283: LD_ADDR_VAR 0 4
77287: PUSH
77288: LD_VAR 0 1
77292: PPUSH
77293: CALL_OW 437
77297: ST_TO_ADDR
// if not task then
77298: LD_VAR 0 4
77302: NOT
77303: IFFALSE 77307
// exit ;
77305: GO 77349
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77307: LD_ADDR_VAR 0 3
77311: PUSH
77312: LD_VAR 0 4
77316: PUSH
77317: LD_INT 1
77319: ARRAY
77320: PUSH
77321: LD_INT 1
77323: ARRAY
77324: PUSH
77325: LD_STRING r
77327: EQUAL
77328: PUSH
77329: LD_VAR 0 4
77333: PUSH
77334: LD_INT 1
77336: ARRAY
77337: PUSH
77338: LD_INT 4
77340: ARRAY
77341: PUSH
77342: LD_VAR 0 2
77346: EQUAL
77347: AND
77348: ST_TO_ADDR
// end ;
77349: LD_VAR 0 3
77353: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77354: LD_INT 0
77356: PPUSH
// SetDir ( unit , d ) ;
77357: LD_VAR 0 1
77361: PPUSH
77362: LD_VAR 0 4
77366: PPUSH
77367: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77371: LD_VAR 0 1
77375: PPUSH
77376: LD_VAR 0 2
77380: PPUSH
77381: LD_VAR 0 3
77385: PPUSH
77386: LD_VAR 0 5
77390: PPUSH
77391: CALL_OW 48
// end ;
77395: LD_VAR 0 6
77399: RET
// export function ToNaturalNumber ( number ) ; begin
77400: LD_INT 0
77402: PPUSH
// result := number div 1 ;
77403: LD_ADDR_VAR 0 2
77407: PUSH
77408: LD_VAR 0 1
77412: PUSH
77413: LD_INT 1
77415: DIV
77416: ST_TO_ADDR
// if number < 0 then
77417: LD_VAR 0 1
77421: PUSH
77422: LD_INT 0
77424: LESS
77425: IFFALSE 77435
// result := 0 ;
77427: LD_ADDR_VAR 0 2
77431: PUSH
77432: LD_INT 0
77434: ST_TO_ADDR
// end ;
77435: LD_VAR 0 2
77439: RET
// export function SortByClass ( units , class ) ; var un ; begin
77440: LD_INT 0
77442: PPUSH
77443: PPUSH
// if not units or not class then
77444: LD_VAR 0 1
77448: NOT
77449: PUSH
77450: LD_VAR 0 2
77454: NOT
77455: OR
77456: IFFALSE 77460
// exit ;
77458: GO 77555
// result := [ ] ;
77460: LD_ADDR_VAR 0 3
77464: PUSH
77465: EMPTY
77466: ST_TO_ADDR
// for un in units do
77467: LD_ADDR_VAR 0 4
77471: PUSH
77472: LD_VAR 0 1
77476: PUSH
77477: FOR_IN
77478: IFFALSE 77553
// if GetClass ( un ) = class then
77480: LD_VAR 0 4
77484: PPUSH
77485: CALL_OW 257
77489: PUSH
77490: LD_VAR 0 2
77494: EQUAL
77495: IFFALSE 77522
// result := Insert ( result , 1 , un ) else
77497: LD_ADDR_VAR 0 3
77501: PUSH
77502: LD_VAR 0 3
77506: PPUSH
77507: LD_INT 1
77509: PPUSH
77510: LD_VAR 0 4
77514: PPUSH
77515: CALL_OW 2
77519: ST_TO_ADDR
77520: GO 77551
// result := Replace ( result , result + 1 , un ) ;
77522: LD_ADDR_VAR 0 3
77526: PUSH
77527: LD_VAR 0 3
77531: PPUSH
77532: LD_VAR 0 3
77536: PUSH
77537: LD_INT 1
77539: PLUS
77540: PPUSH
77541: LD_VAR 0 4
77545: PPUSH
77546: CALL_OW 1
77550: ST_TO_ADDR
77551: GO 77477
77553: POP
77554: POP
// end ;
77555: LD_VAR 0 3
77559: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77560: LD_INT 0
77562: PPUSH
77563: PPUSH
77564: PPUSH
77565: PPUSH
77566: PPUSH
77567: PPUSH
77568: PPUSH
// result := [ ] ;
77569: LD_ADDR_VAR 0 4
77573: PUSH
77574: EMPTY
77575: ST_TO_ADDR
// if x - r < 0 then
77576: LD_VAR 0 1
77580: PUSH
77581: LD_VAR 0 3
77585: MINUS
77586: PUSH
77587: LD_INT 0
77589: LESS
77590: IFFALSE 77602
// min_x := 0 else
77592: LD_ADDR_VAR 0 8
77596: PUSH
77597: LD_INT 0
77599: ST_TO_ADDR
77600: GO 77618
// min_x := x - r ;
77602: LD_ADDR_VAR 0 8
77606: PUSH
77607: LD_VAR 0 1
77611: PUSH
77612: LD_VAR 0 3
77616: MINUS
77617: ST_TO_ADDR
// if y - r < 0 then
77618: LD_VAR 0 2
77622: PUSH
77623: LD_VAR 0 3
77627: MINUS
77628: PUSH
77629: LD_INT 0
77631: LESS
77632: IFFALSE 77644
// min_y := 0 else
77634: LD_ADDR_VAR 0 7
77638: PUSH
77639: LD_INT 0
77641: ST_TO_ADDR
77642: GO 77660
// min_y := y - r ;
77644: LD_ADDR_VAR 0 7
77648: PUSH
77649: LD_VAR 0 2
77653: PUSH
77654: LD_VAR 0 3
77658: MINUS
77659: ST_TO_ADDR
// max_x := x + r ;
77660: LD_ADDR_VAR 0 9
77664: PUSH
77665: LD_VAR 0 1
77669: PUSH
77670: LD_VAR 0 3
77674: PLUS
77675: ST_TO_ADDR
// max_y := y + r ;
77676: LD_ADDR_VAR 0 10
77680: PUSH
77681: LD_VAR 0 2
77685: PUSH
77686: LD_VAR 0 3
77690: PLUS
77691: ST_TO_ADDR
// for _x = min_x to max_x do
77692: LD_ADDR_VAR 0 5
77696: PUSH
77697: DOUBLE
77698: LD_VAR 0 8
77702: DEC
77703: ST_TO_ADDR
77704: LD_VAR 0 9
77708: PUSH
77709: FOR_TO
77710: IFFALSE 77811
// for _y = min_y to max_y do
77712: LD_ADDR_VAR 0 6
77716: PUSH
77717: DOUBLE
77718: LD_VAR 0 7
77722: DEC
77723: ST_TO_ADDR
77724: LD_VAR 0 10
77728: PUSH
77729: FOR_TO
77730: IFFALSE 77807
// begin if not ValidHex ( _x , _y ) then
77732: LD_VAR 0 5
77736: PPUSH
77737: LD_VAR 0 6
77741: PPUSH
77742: CALL_OW 488
77746: NOT
77747: IFFALSE 77751
// continue ;
77749: GO 77729
// if GetResourceTypeXY ( _x , _y ) then
77751: LD_VAR 0 5
77755: PPUSH
77756: LD_VAR 0 6
77760: PPUSH
77761: CALL_OW 283
77765: IFFALSE 77805
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77767: LD_ADDR_VAR 0 4
77771: PUSH
77772: LD_VAR 0 4
77776: PPUSH
77777: LD_VAR 0 4
77781: PUSH
77782: LD_INT 1
77784: PLUS
77785: PPUSH
77786: LD_VAR 0 5
77790: PUSH
77791: LD_VAR 0 6
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: PPUSH
77800: CALL_OW 1
77804: ST_TO_ADDR
// end ;
77805: GO 77729
77807: POP
77808: POP
77809: GO 77709
77811: POP
77812: POP
// end ;
77813: LD_VAR 0 4
77817: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77818: LD_INT 0
77820: PPUSH
77821: PPUSH
77822: PPUSH
77823: PPUSH
77824: PPUSH
77825: PPUSH
77826: PPUSH
77827: PPUSH
// if not units then
77828: LD_VAR 0 1
77832: NOT
77833: IFFALSE 77837
// exit ;
77835: GO 78361
// result := UnitFilter ( units , [ f_ok ] ) ;
77837: LD_ADDR_VAR 0 3
77841: PUSH
77842: LD_VAR 0 1
77846: PPUSH
77847: LD_INT 50
77849: PUSH
77850: EMPTY
77851: LIST
77852: PPUSH
77853: CALL_OW 72
77857: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77858: LD_ADDR_VAR 0 8
77862: PUSH
77863: LD_VAR 0 1
77867: PUSH
77868: LD_INT 1
77870: ARRAY
77871: PPUSH
77872: CALL_OW 255
77876: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77877: LD_ADDR_VAR 0 10
77881: PUSH
77882: LD_INT 29
77884: PUSH
77885: LD_INT 91
77887: PUSH
77888: LD_INT 49
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: LIST
77895: ST_TO_ADDR
// if not result then
77896: LD_VAR 0 3
77900: NOT
77901: IFFALSE 77905
// exit ;
77903: GO 78361
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77905: LD_ADDR_VAR 0 5
77909: PUSH
77910: LD_INT 81
77912: PUSH
77913: LD_VAR 0 8
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: PPUSH
77922: CALL_OW 69
77926: ST_TO_ADDR
// for i in result do
77927: LD_ADDR_VAR 0 4
77931: PUSH
77932: LD_VAR 0 3
77936: PUSH
77937: FOR_IN
77938: IFFALSE 78359
// begin tag := GetTag ( i ) + 1 ;
77940: LD_ADDR_VAR 0 9
77944: PUSH
77945: LD_VAR 0 4
77949: PPUSH
77950: CALL_OW 110
77954: PUSH
77955: LD_INT 1
77957: PLUS
77958: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77959: LD_ADDR_VAR 0 7
77963: PUSH
77964: LD_VAR 0 4
77968: PPUSH
77969: CALL_OW 250
77973: PPUSH
77974: LD_VAR 0 4
77978: PPUSH
77979: CALL_OW 251
77983: PPUSH
77984: LD_INT 6
77986: PPUSH
77987: CALL 77560 0 3
77991: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77992: LD_VAR 0 4
77996: PPUSH
77997: CALL_OW 247
78001: PUSH
78002: LD_INT 2
78004: EQUAL
78005: PUSH
78006: LD_VAR 0 7
78010: AND
78011: PUSH
78012: LD_VAR 0 4
78016: PPUSH
78017: CALL_OW 264
78021: PUSH
78022: LD_VAR 0 10
78026: IN
78027: NOT
78028: AND
78029: IFFALSE 78068
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78031: LD_VAR 0 4
78035: PPUSH
78036: LD_VAR 0 7
78040: PUSH
78041: LD_INT 1
78043: ARRAY
78044: PUSH
78045: LD_INT 1
78047: ARRAY
78048: PPUSH
78049: LD_VAR 0 7
78053: PUSH
78054: LD_INT 1
78056: ARRAY
78057: PUSH
78058: LD_INT 2
78060: ARRAY
78061: PPUSH
78062: CALL_OW 116
78066: GO 78357
// if path > tag then
78068: LD_VAR 0 2
78072: PUSH
78073: LD_VAR 0 9
78077: GREATER
78078: IFFALSE 78286
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78080: LD_ADDR_VAR 0 6
78084: PUSH
78085: LD_VAR 0 5
78089: PPUSH
78090: LD_INT 91
78092: PUSH
78093: LD_VAR 0 4
78097: PUSH
78098: LD_INT 8
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: LIST
78105: PPUSH
78106: CALL_OW 72
78110: ST_TO_ADDR
// if nearEnemy then
78111: LD_VAR 0 6
78115: IFFALSE 78184
// begin if GetWeapon ( i ) = ru_time_lapser then
78117: LD_VAR 0 4
78121: PPUSH
78122: CALL_OW 264
78126: PUSH
78127: LD_INT 49
78129: EQUAL
78130: IFFALSE 78158
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78132: LD_VAR 0 4
78136: PPUSH
78137: LD_VAR 0 6
78141: PPUSH
78142: LD_VAR 0 4
78146: PPUSH
78147: CALL_OW 74
78151: PPUSH
78152: CALL_OW 112
78156: GO 78182
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78158: LD_VAR 0 4
78162: PPUSH
78163: LD_VAR 0 6
78167: PPUSH
78168: LD_VAR 0 4
78172: PPUSH
78173: CALL_OW 74
78177: PPUSH
78178: CALL_OW 115
// end else
78182: GO 78284
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78184: LD_VAR 0 4
78188: PPUSH
78189: LD_VAR 0 2
78193: PUSH
78194: LD_VAR 0 9
78198: ARRAY
78199: PUSH
78200: LD_INT 1
78202: ARRAY
78203: PPUSH
78204: LD_VAR 0 2
78208: PUSH
78209: LD_VAR 0 9
78213: ARRAY
78214: PUSH
78215: LD_INT 2
78217: ARRAY
78218: PPUSH
78219: CALL_OW 297
78223: PUSH
78224: LD_INT 6
78226: GREATER
78227: IFFALSE 78270
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78229: LD_VAR 0 4
78233: PPUSH
78234: LD_VAR 0 2
78238: PUSH
78239: LD_VAR 0 9
78243: ARRAY
78244: PUSH
78245: LD_INT 1
78247: ARRAY
78248: PPUSH
78249: LD_VAR 0 2
78253: PUSH
78254: LD_VAR 0 9
78258: ARRAY
78259: PUSH
78260: LD_INT 2
78262: ARRAY
78263: PPUSH
78264: CALL_OW 114
78268: GO 78284
// SetTag ( i , tag ) ;
78270: LD_VAR 0 4
78274: PPUSH
78275: LD_VAR 0 9
78279: PPUSH
78280: CALL_OW 109
// end else
78284: GO 78357
// if enemy then
78286: LD_VAR 0 5
78290: IFFALSE 78357
// begin if GetWeapon ( i ) = ru_time_lapser then
78292: LD_VAR 0 4
78296: PPUSH
78297: CALL_OW 264
78301: PUSH
78302: LD_INT 49
78304: EQUAL
78305: IFFALSE 78333
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78307: LD_VAR 0 4
78311: PPUSH
78312: LD_VAR 0 5
78316: PPUSH
78317: LD_VAR 0 4
78321: PPUSH
78322: CALL_OW 74
78326: PPUSH
78327: CALL_OW 112
78331: GO 78357
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78333: LD_VAR 0 4
78337: PPUSH
78338: LD_VAR 0 5
78342: PPUSH
78343: LD_VAR 0 4
78347: PPUSH
78348: CALL_OW 74
78352: PPUSH
78353: CALL_OW 115
// end ; end ;
78357: GO 77937
78359: POP
78360: POP
// end ;
78361: LD_VAR 0 3
78365: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78366: LD_INT 0
78368: PPUSH
78369: PPUSH
78370: PPUSH
// if not unit or IsInUnit ( unit ) then
78371: LD_VAR 0 1
78375: NOT
78376: PUSH
78377: LD_VAR 0 1
78381: PPUSH
78382: CALL_OW 310
78386: OR
78387: IFFALSE 78391
// exit ;
78389: GO 78482
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78391: LD_ADDR_VAR 0 4
78395: PUSH
78396: LD_VAR 0 1
78400: PPUSH
78401: CALL_OW 250
78405: PPUSH
78406: LD_VAR 0 2
78410: PPUSH
78411: LD_INT 1
78413: PPUSH
78414: CALL_OW 272
78418: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78419: LD_ADDR_VAR 0 5
78423: PUSH
78424: LD_VAR 0 1
78428: PPUSH
78429: CALL_OW 251
78433: PPUSH
78434: LD_VAR 0 2
78438: PPUSH
78439: LD_INT 1
78441: PPUSH
78442: CALL_OW 273
78446: ST_TO_ADDR
// if ValidHex ( x , y ) then
78447: LD_VAR 0 4
78451: PPUSH
78452: LD_VAR 0 5
78456: PPUSH
78457: CALL_OW 488
78461: IFFALSE 78482
// ComTurnXY ( unit , x , y ) ;
78463: LD_VAR 0 1
78467: PPUSH
78468: LD_VAR 0 4
78472: PPUSH
78473: LD_VAR 0 5
78477: PPUSH
78478: CALL_OW 118
// end ;
78482: LD_VAR 0 3
78486: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78487: LD_INT 0
78489: PPUSH
78490: PPUSH
// result := false ;
78491: LD_ADDR_VAR 0 3
78495: PUSH
78496: LD_INT 0
78498: ST_TO_ADDR
// if not units then
78499: LD_VAR 0 2
78503: NOT
78504: IFFALSE 78508
// exit ;
78506: GO 78553
// for i in units do
78508: LD_ADDR_VAR 0 4
78512: PUSH
78513: LD_VAR 0 2
78517: PUSH
78518: FOR_IN
78519: IFFALSE 78551
// if See ( side , i ) then
78521: LD_VAR 0 1
78525: PPUSH
78526: LD_VAR 0 4
78530: PPUSH
78531: CALL_OW 292
78535: IFFALSE 78549
// begin result := true ;
78537: LD_ADDR_VAR 0 3
78541: PUSH
78542: LD_INT 1
78544: ST_TO_ADDR
// exit ;
78545: POP
78546: POP
78547: GO 78553
// end ;
78549: GO 78518
78551: POP
78552: POP
// end ;
78553: LD_VAR 0 3
78557: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78558: LD_INT 0
78560: PPUSH
78561: PPUSH
78562: PPUSH
78563: PPUSH
// if not unit or not points then
78564: LD_VAR 0 1
78568: NOT
78569: PUSH
78570: LD_VAR 0 2
78574: NOT
78575: OR
78576: IFFALSE 78580
// exit ;
78578: GO 78670
// dist := 99999 ;
78580: LD_ADDR_VAR 0 5
78584: PUSH
78585: LD_INT 99999
78587: ST_TO_ADDR
// for i in points do
78588: LD_ADDR_VAR 0 4
78592: PUSH
78593: LD_VAR 0 2
78597: PUSH
78598: FOR_IN
78599: IFFALSE 78668
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78601: LD_ADDR_VAR 0 6
78605: PUSH
78606: LD_VAR 0 1
78610: PPUSH
78611: LD_VAR 0 4
78615: PUSH
78616: LD_INT 1
78618: ARRAY
78619: PPUSH
78620: LD_VAR 0 4
78624: PUSH
78625: LD_INT 2
78627: ARRAY
78628: PPUSH
78629: CALL_OW 297
78633: ST_TO_ADDR
// if tmpDist < dist then
78634: LD_VAR 0 6
78638: PUSH
78639: LD_VAR 0 5
78643: LESS
78644: IFFALSE 78666
// begin result := i ;
78646: LD_ADDR_VAR 0 3
78650: PUSH
78651: LD_VAR 0 4
78655: ST_TO_ADDR
// dist := tmpDist ;
78656: LD_ADDR_VAR 0 5
78660: PUSH
78661: LD_VAR 0 6
78665: ST_TO_ADDR
// end ; end ;
78666: GO 78598
78668: POP
78669: POP
// end ;
78670: LD_VAR 0 3
78674: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78675: LD_INT 0
78677: PPUSH
// uc_side := side ;
78678: LD_ADDR_OWVAR 20
78682: PUSH
78683: LD_VAR 0 1
78687: ST_TO_ADDR
// uc_nation := 3 ;
78688: LD_ADDR_OWVAR 21
78692: PUSH
78693: LD_INT 3
78695: ST_TO_ADDR
// vc_chassis := 25 ;
78696: LD_ADDR_OWVAR 37
78700: PUSH
78701: LD_INT 25
78703: ST_TO_ADDR
// vc_engine := engine_siberite ;
78704: LD_ADDR_OWVAR 39
78708: PUSH
78709: LD_INT 3
78711: ST_TO_ADDR
// vc_control := control_computer ;
78712: LD_ADDR_OWVAR 38
78716: PUSH
78717: LD_INT 3
78719: ST_TO_ADDR
// vc_weapon := 59 ;
78720: LD_ADDR_OWVAR 40
78724: PUSH
78725: LD_INT 59
78727: ST_TO_ADDR
// result := CreateVehicle ;
78728: LD_ADDR_VAR 0 5
78732: PUSH
78733: CALL_OW 45
78737: ST_TO_ADDR
// SetDir ( result , d ) ;
78738: LD_VAR 0 5
78742: PPUSH
78743: LD_VAR 0 4
78747: PPUSH
78748: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78752: LD_VAR 0 5
78756: PPUSH
78757: LD_VAR 0 2
78761: PPUSH
78762: LD_VAR 0 3
78766: PPUSH
78767: LD_INT 0
78769: PPUSH
78770: CALL_OW 48
// end ;
78774: LD_VAR 0 5
78778: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78779: LD_INT 0
78781: PPUSH
78782: PPUSH
78783: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78784: LD_ADDR_VAR 0 2
78788: PUSH
78789: LD_INT 0
78791: PUSH
78792: LD_INT 0
78794: PUSH
78795: LD_INT 0
78797: PUSH
78798: LD_INT 0
78800: PUSH
78801: EMPTY
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78807: LD_VAR 0 1
78811: NOT
78812: PUSH
78813: LD_VAR 0 1
78817: PPUSH
78818: CALL_OW 264
78822: PUSH
78823: LD_INT 12
78825: PUSH
78826: LD_INT 51
78828: PUSH
78829: LD_INT 32
78831: PUSH
78832: LD_INT 89
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: LIST
78839: LIST
78840: IN
78841: NOT
78842: OR
78843: IFFALSE 78847
// exit ;
78845: GO 78945
// for i := 1 to 3 do
78847: LD_ADDR_VAR 0 3
78851: PUSH
78852: DOUBLE
78853: LD_INT 1
78855: DEC
78856: ST_TO_ADDR
78857: LD_INT 3
78859: PUSH
78860: FOR_TO
78861: IFFALSE 78943
// begin tmp := GetCargo ( cargo , i ) ;
78863: LD_ADDR_VAR 0 4
78867: PUSH
78868: LD_VAR 0 1
78872: PPUSH
78873: LD_VAR 0 3
78877: PPUSH
78878: CALL_OW 289
78882: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78883: LD_ADDR_VAR 0 2
78887: PUSH
78888: LD_VAR 0 2
78892: PPUSH
78893: LD_VAR 0 3
78897: PPUSH
78898: LD_VAR 0 4
78902: PPUSH
78903: CALL_OW 1
78907: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78908: LD_ADDR_VAR 0 2
78912: PUSH
78913: LD_VAR 0 2
78917: PPUSH
78918: LD_INT 4
78920: PPUSH
78921: LD_VAR 0 2
78925: PUSH
78926: LD_INT 4
78928: ARRAY
78929: PUSH
78930: LD_VAR 0 4
78934: PLUS
78935: PPUSH
78936: CALL_OW 1
78940: ST_TO_ADDR
// end ;
78941: GO 78860
78943: POP
78944: POP
// end ;
78945: LD_VAR 0 2
78949: RET
// export function Length ( array ) ; begin
78950: LD_INT 0
78952: PPUSH
// result := array + 0 ;
78953: LD_ADDR_VAR 0 2
78957: PUSH
78958: LD_VAR 0 1
78962: PUSH
78963: LD_INT 0
78965: PLUS
78966: ST_TO_ADDR
// end ;
78967: LD_VAR 0 2
78971: RET
// export function PrepareArray ( array ) ; begin
78972: LD_INT 0
78974: PPUSH
// result := array diff 0 ;
78975: LD_ADDR_VAR 0 2
78979: PUSH
78980: LD_VAR 0 1
78984: PUSH
78985: LD_INT 0
78987: DIFF
78988: ST_TO_ADDR
// if not result [ 1 ] then
78989: LD_VAR 0 2
78993: PUSH
78994: LD_INT 1
78996: ARRAY
78997: NOT
78998: IFFALSE 79018
// result := Delete ( result , 1 ) ;
79000: LD_ADDR_VAR 0 2
79004: PUSH
79005: LD_VAR 0 2
79009: PPUSH
79010: LD_INT 1
79012: PPUSH
79013: CALL_OW 3
79017: ST_TO_ADDR
// end ;
79018: LD_VAR 0 2
79022: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79023: LD_INT 0
79025: PPUSH
79026: PPUSH
79027: PPUSH
79028: PPUSH
// sibRocketRange := 25 ;
79029: LD_ADDR_VAR 0 6
79033: PUSH
79034: LD_INT 25
79036: ST_TO_ADDR
// result := false ;
79037: LD_ADDR_VAR 0 4
79041: PUSH
79042: LD_INT 0
79044: ST_TO_ADDR
// for i := 0 to 5 do
79045: LD_ADDR_VAR 0 5
79049: PUSH
79050: DOUBLE
79051: LD_INT 0
79053: DEC
79054: ST_TO_ADDR
79055: LD_INT 5
79057: PUSH
79058: FOR_TO
79059: IFFALSE 79126
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79061: LD_VAR 0 1
79065: PPUSH
79066: LD_VAR 0 5
79070: PPUSH
79071: LD_VAR 0 6
79075: PPUSH
79076: CALL_OW 272
79080: PPUSH
79081: LD_VAR 0 2
79085: PPUSH
79086: LD_VAR 0 5
79090: PPUSH
79091: LD_VAR 0 6
79095: PPUSH
79096: CALL_OW 273
79100: PPUSH
79101: LD_VAR 0 3
79105: PPUSH
79106: CALL_OW 309
79110: IFFALSE 79124
// begin result := true ;
79112: LD_ADDR_VAR 0 4
79116: PUSH
79117: LD_INT 1
79119: ST_TO_ADDR
// exit ;
79120: POP
79121: POP
79122: GO 79128
// end ;
79124: GO 79058
79126: POP
79127: POP
// end ;
79128: LD_VAR 0 4
79132: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79133: LD_INT 0
79135: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79136: LD_VAR 0 1
79140: PPUSH
79141: LD_VAR 0 2
79145: PPUSH
79146: LD_INT 0
79148: PPUSH
79149: LD_INT 0
79151: PPUSH
79152: LD_INT 1
79154: PPUSH
79155: LD_INT 0
79157: PPUSH
79158: CALL_OW 587
// end ;
79162: LD_VAR 0 3
79166: RET
// export function CenterOnNow ( unit ) ; begin
79167: LD_INT 0
79169: PPUSH
// result := IsInUnit ( unit ) ;
79170: LD_ADDR_VAR 0 2
79174: PUSH
79175: LD_VAR 0 1
79179: PPUSH
79180: CALL_OW 310
79184: ST_TO_ADDR
// if not result then
79185: LD_VAR 0 2
79189: NOT
79190: IFFALSE 79202
// result := unit ;
79192: LD_ADDR_VAR 0 2
79196: PUSH
79197: LD_VAR 0 1
79201: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79202: LD_VAR 0 1
79206: PPUSH
79207: CALL_OW 87
// end ;
79211: LD_VAR 0 2
79215: RET
// export function ComMoveHex ( unit , hex ) ; begin
79216: LD_INT 0
79218: PPUSH
// if not hex then
79219: LD_VAR 0 2
79223: NOT
79224: IFFALSE 79228
// exit ;
79226: GO 79281
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79228: LD_VAR 0 2
79232: PUSH
79233: LD_INT 1
79235: ARRAY
79236: PPUSH
79237: LD_VAR 0 2
79241: PUSH
79242: LD_INT 2
79244: ARRAY
79245: PPUSH
79246: CALL_OW 428
79250: IFFALSE 79254
// exit ;
79252: GO 79281
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79254: LD_VAR 0 1
79258: PPUSH
79259: LD_VAR 0 2
79263: PUSH
79264: LD_INT 1
79266: ARRAY
79267: PPUSH
79268: LD_VAR 0 2
79272: PUSH
79273: LD_INT 2
79275: ARRAY
79276: PPUSH
79277: CALL_OW 111
// end ; end_of_file
79281: LD_VAR 0 3
79285: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79286: LD_VAR 0 1
79290: PPUSH
79291: LD_VAR 0 2
79295: PPUSH
79296: LD_VAR 0 3
79300: PPUSH
79301: LD_VAR 0 4
79305: PPUSH
79306: LD_VAR 0 5
79310: PPUSH
79311: LD_VAR 0 6
79315: PPUSH
79316: CALL 17823 0 6
// end ;
79320: PPOPN 6
79322: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79323: LD_INT 0
79325: PPUSH
// begin if not units then
79326: LD_VAR 0 1
79330: NOT
79331: IFFALSE 79335
// exit ;
79333: GO 79335
// end ;
79335: PPOPN 7
79337: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79338: CALL 17727 0 0
// end ;
79342: PPOPN 1
79344: END
