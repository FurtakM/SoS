// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37318 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37318 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37318 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37318 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37318 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37318 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37318 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37318 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37318 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37318 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37318 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37318 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37318 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37318 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37318 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37318 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 75117 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10305
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 75117 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// Hint ( BunkerHill ) ;
9965: LD_STRING BunkerHill
9967: PPUSH
9968: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
9972: LD_INT 20
9974: PPUSH
9975: LD_INT 1
9977: PPUSH
9978: CALL_OW 424
// allowToPatrol := true ;
9982: LD_ADDR_EXP 12
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9990: LD_INT 3150
9992: PPUSH
9993: CALL_OW 67
// InitHc ;
9997: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10001: LD_ADDR_VAR 0 1
10005: PUSH
10006: DOUBLE
10007: LD_INT 1
10009: DEC
10010: ST_TO_ADDR
10011: LD_INT 3
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: LD_INT 2
10019: PUSH
10020: LD_INT 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: PUSH
10029: LD_OWVAR 67
10033: ARRAY
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10303
// begin uc_side := 2 ;
10038: LD_ADDR_OWVAR 20
10042: PUSH
10043: LD_INT 2
10045: ST_TO_ADDR
// uc_nation := 2 ;
10046: LD_ADDR_OWVAR 21
10050: PUSH
10051: LD_INT 2
10053: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10054: LD_INT 0
10056: PPUSH
10057: LD_INT 1
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 1
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_VAR 0 1
10075: PUSH
10076: LD_INT 3
10078: MOD
10079: PUSH
10080: LD_INT 1
10082: PLUS
10083: ARRAY
10084: PPUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 2
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: LD_OWVAR 67
10107: ARRAY
10108: PPUSH
10109: CALL_OW 380
// un := CreateHuman ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: CALL_OW 44
10122: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10123: LD_ADDR_EXP 37
10127: PUSH
10128: LD_EXP 37
10132: PUSH
10133: LD_VAR 0 2
10137: UNION
10138: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10139: LD_INT 2
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: LD_INT 13
10147: PPUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_VAR 0 1
10162: PUSH
10163: LD_INT 2
10165: MOD
10166: PUSH
10167: LD_INT 1
10169: PLUS
10170: ARRAY
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: LD_INT 27
10177: PUSH
10178: LD_INT 25
10180: PUSH
10181: LD_INT 27
10183: PUSH
10184: LD_INT 23
10186: PUSH
10187: LD_INT 23
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: PUSH
10202: LD_INT 0
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 12
10212: PLUS
10213: ARRAY
10214: PPUSH
10215: LD_INT 77
10217: PPUSH
10218: CALL 370 0 7
// veh := CreateVehicle ;
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: CALL_OW 45
10231: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 2
10239: PPUSH
10240: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10244: LD_VAR 0 3
10248: PPUSH
10249: LD_INT 178
10251: PPUSH
10252: LD_INT 2
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: LD_INT 0
10260: PPUSH
10261: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_INT 183
10286: PPUSH
10287: LD_INT 11
10289: PPUSH
10290: CALL_OW 111
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// end ;
10301: GO 10035
10303: POP
10304: POP
// end ;
10305: PPOPN 3
10307: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10308: LD_EXP 4
10312: PUSH
10313: LD_EXP 35
10317: PPUSH
10318: CALL_OW 302
10322: AND
10323: IFFALSE 10372
10325: GO 10327
10327: DISABLE
// begin DialogueOn ;
10328: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10332: LD_EXP 35
10336: PPUSH
10337: LD_STRING DA-lab-1
10339: PPUSH
10340: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10344: LD_EXP 35
10348: PPUSH
10349: LD_STRING DA-lab-2
10351: PPUSH
10352: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_STRING DH-lab-3
10363: PPUSH
10364: CALL_OW 88
// DialogueOff ;
10368: CALL_OW 7
// end ;
10372: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10373: LD_INT 17
10375: PPUSH
10376: LD_INT 2
10378: PPUSH
10379: CALL_OW 321
10383: PUSH
10384: LD_INT 2
10386: EQUAL
10387: IFFALSE 10519
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin DialogueOn ;
10395: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10399: LD_EXP 35
10403: PPUSH
10404: LD_STRING DA-Cam-1
10406: PPUSH
10407: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10411: LD_EXP 35
10415: PPUSH
10416: LD_STRING DA-Cam-2
10418: PPUSH
10419: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10423: LD_EXP 35
10427: PPUSH
10428: LD_STRING DA-Cam-3
10430: PPUSH
10431: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10435: LD_EXP 25
10439: PPUSH
10440: LD_STRING DH-Cam-4
10442: PPUSH
10443: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10447: LD_EXP 30
10451: PPUSH
10452: LD_STRING DK-Cam-5
10454: PPUSH
10455: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10459: LD_EXP 30
10463: PPUSH
10464: LD_STRING DK-Cam-6
10466: PPUSH
10467: CALL_OW 88
// DialogueOff ;
10471: CALL_OW 7
// Query ( Camera ) ;
10475: LD_STRING Camera
10477: PPUSH
10478: CALL_OW 97
// hiddenCameraAllowed := true ;
10482: LD_ADDR_EXP 5
10486: PUSH
10487: LD_INT 1
10489: ST_TO_ADDR
// for i in camAreas do
10490: LD_ADDR_VAR 0 1
10494: PUSH
10495: LD_EXP 8
10499: PUSH
10500: FOR_IN
10501: IFFALSE 10517
// SetAreaMapShow ( i , 1 ) ;
10503: LD_VAR 0 1
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 424
10515: GO 10500
10517: POP
10518: POP
// end ;
10519: PPOPN 1
10521: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10522: LD_EXP 8
10526: NOT
10527: PUSH
10528: LD_EXP 5
10532: AND
10533: IFFALSE 10631
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
// begin stop_talking := true ;
10541: LD_ADDR_OWVAR 56
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10549: LD_ADDR_VAR 0 1
10553: PUSH
10554: LD_INT 22
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 21
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 23
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: FOR_IN
10595: IFFALSE 10614
// AddExperience ( i , 2 , 450 ) ;
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_INT 2
10604: PPUSH
10605: LD_INT 450
10607: PPUSH
10608: CALL_OW 492
10612: GO 10594
10614: POP
10615: POP
// stop_talking := false ;
10616: LD_ADDR_OWVAR 56
10620: PUSH
10621: LD_INT 0
10623: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10624: LD_STRING ACH_CAMERA
10626: PPUSH
10627: CALL_OW 543
// end ;
10631: PPOPN 1
10633: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10634: LD_EXP 9
10638: PUSH
10639: LD_EXP 11
10643: NOT
10644: AND
10645: IFFALSE 10704
10647: GO 10649
10649: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10650: LD_EXP 9
10654: PPUSH
10655: CALL_OW 250
10659: PPUSH
10660: LD_EXP 9
10664: PPUSH
10665: CALL_OW 251
10669: PPUSH
10670: LD_INT 2
10672: PPUSH
10673: LD_INT 6
10675: NEG
10676: PPUSH
10677: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10681: LD_EXP 9
10685: PPUSH
10686: CALL_OW 87
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// YouLost ( Spotted ) ;
10697: LD_STRING Spotted
10699: PPUSH
10700: CALL_OW 104
// end ;
10704: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10705: LD_INT 3
10707: PUSH
10708: LD_INT 6
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: LD_EXP 47
10722: PPUSH
10723: CALL 1034 0 3
10727: IFFALSE 10760
10729: GO 10731
10731: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10732: LD_ADDR_EXP 9
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 6
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: LD_EXP 47
10754: PPUSH
10755: CALL 1034 0 3
10759: ST_TO_ADDR
10760: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10761: LD_INT 22
10763: PUSH
10764: LD_INT 6
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 30
10773: PUSH
10774: LD_INT 32
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: LD_INT 24
10786: PUSH
10787: LD_INT 1000
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: IFFALSE 10868
10809: GO 10811
10811: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10812: LD_ADDR_EXP 9
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 6
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 30
10829: PUSH
10830: LD_INT 32
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 24
10842: PUSH
10843: LD_INT 1000
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 69
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: ST_TO_ADDR
10868: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
10869: LD_EXP 9
10873: PUSH
10874: LD_INT 21
10876: PPUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 3
10889: PUSH
10890: LD_INT 24
10892: PUSH
10893: LD_INT 1000
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PPUSH
10908: CALL_OW 70
10912: AND
10913: IFFALSE 11152
10915: GO 10917
10917: DISABLE
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10924: LD_ADDR_VAR 0 4
10928: PUSH
10929: LD_EXP 42
10933: PUSH
10934: LD_EXP 44
10938: PUSH
10939: LD_EXP 45
10943: UNION
10944: PPUSH
10945: LD_INT 3
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 72
10966: UNION
10967: ST_TO_ADDR
// for i in noncombat do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_VAR 0 4
10977: PUSH
10978: FOR_IN
10979: IFFALSE 11075
// begin if IsInUnit ( i ) then
10981: LD_VAR 0 1
10985: PPUSH
10986: CALL_OW 310
10990: IFFALSE 11001
// ComExitBuilding ( i ) ;
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11001: LD_VAR 0 1
11005: PPUSH
11006: LD_INT 114
11008: PPUSH
11009: LD_INT 97
11011: PPUSH
11012: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_INT 99
11023: PPUSH
11024: LD_INT 128
11026: PPUSH
11027: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11031: LD_VAR 0 1
11035: PPUSH
11036: LD_INT 91
11038: PPUSH
11039: LD_INT 145
11041: PPUSH
11042: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_INT 82
11053: PPUSH
11054: LD_INT 153
11056: PPUSH
11057: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 16
11068: PPUSH
11069: CALL_OW 173
// end ;
11073: GO 10978
11075: POP
11076: POP
// if not allowHeikeAttack then
11077: LD_EXP 11
11081: NOT
11082: IFFALSE 11086
// exit ;
11084: GO 11152
// wait ( 0 0$05 ) ;
11086: LD_INT 175
11088: PPUSH
11089: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11093: LD_EXP 40
11097: PPUSH
11098: LD_STRING D9a-Kur-1
11100: PPUSH
11101: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11105: LD_EXP 43
11109: PPUSH
11110: LD_STRING D9a-Bur-1
11112: PPUSH
11113: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11117: LD_EXP 40
11121: PPUSH
11122: LD_STRING D9a-Kur-2
11124: PPUSH
11125: CALL_OW 94
// omicronFall := true ;
11129: LD_ADDR_EXP 13
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11137: LD_INT 105
11139: PPUSH
11140: CALL_OW 67
// retreatFromOmicron := true ;
11144: LD_ADDR_EXP 20
11148: PUSH
11149: LD_INT 1
11151: ST_TO_ADDR
// end ;
11152: PPOPN 4
11154: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11155: LD_INT 16
11157: PPUSH
11158: LD_INT 3
11160: PUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 70
11193: IFFALSE 11276
11195: GO 11197
11197: DISABLE
11198: LD_INT 0
11200: PPUSH
// begin enable ;
11201: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11202: LD_ADDR_VAR 0 1
11206: PUSH
11207: LD_INT 16
11209: PPUSH
11210: LD_INT 3
11212: PUSH
11213: LD_INT 22
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 23
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 70
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11274
// begin escapeCounter := escapeCounter + 1 ;
11249: LD_ADDR_EXP 19
11253: PUSH
11254: LD_EXP 19
11258: PUSH
11259: LD_INT 1
11261: PLUS
11262: ST_TO_ADDR
// RemoveUnit ( i ) ;
11263: LD_VAR 0 1
11267: PPUSH
11268: CALL_OW 64
// end ;
11272: GO 11246
11274: POP
11275: POP
// end ;
11276: PPOPN 1
11278: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11279: LD_OWVAR 1
11283: PUSH
11284: LD_INT 13650
11286: PUSH
11287: LD_INT 0
11289: PPUSH
11290: LD_INT 3150
11292: PPUSH
11293: CALL_OW 12
11297: PLUS
11298: GREATEREQUAL
11299: IFFALSE 11308
11301: GO 11303
11303: DISABLE
// SmallAmericanReinforcements ;
11304: CALL 6615 0 0
11308: END
// every 0 0$1 trigger tick >= 9 9$15 do
11309: LD_OWVAR 1
11313: PUSH
11314: LD_INT 19425
11316: GREATEREQUAL
11317: IFFALSE 11382
11319: GO 11321
11321: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11322: LD_EXP 48
11326: PPUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 72
11341: PPUSH
11342: LD_INT 62
11344: PPUSH
11345: LD_INT 22
11347: PPUSH
11348: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11352: LD_EXP 49
11356: PPUSH
11357: LD_INT 69
11359: PPUSH
11360: LD_INT 27
11362: PPUSH
11363: CALL_OW 111
// wait ( 1 1$00 ) ;
11367: LD_INT 2100
11369: PPUSH
11370: CALL_OW 67
// startAttackOnOmicron := true ;
11374: LD_ADDR_EXP 6
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// end ;
11382: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11383: LD_EXP 22
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 13408
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11405: LD_INT 5
11407: PPUSH
11408: LD_INT 2
11410: PPUSH
11411: CALL_OW 343
// PrepareOmarForces ;
11415: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11419: LD_INT 105
11421: PPUSH
11422: CALL_OW 67
// allowHeikeAttack := true ;
11426: LD_ADDR_EXP 11
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// activeGrishkoAI := false ;
11434: LD_ADDR_EXP 10
11438: PUSH
11439: LD_INT 0
11441: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11442: LD_INT 20
11444: PPUSH
11445: LD_INT 0
11447: PPUSH
11448: CALL_OW 424
// if not hillBase then
11452: LD_EXP 15
11456: NOT
11457: IFFALSE 11466
// ChangeMissionObjectives ( HillDone ) ;
11459: LD_STRING HillDone
11461: PPUSH
11462: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11466: LD_EXP 33
11470: PPUSH
11471: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_INT 22
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 21
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: PUSH
11509: FOR_IN
11510: IFFALSE 11534
// if HasTask ( i ) then
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 314
11521: IFFALSE 11532
// ComHold ( i ) ;
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 140
11532: GO 11509
11534: POP
11535: POP
// DialogueOn ;
11536: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11540: LD_EXP 33
11544: PPUSH
11545: LD_STRING DO-assault-1
11547: PPUSH
11548: CALL_OW 94
// DialogueOff ;
11552: CALL_OW 7
// game_speed := 4 ;
11556: LD_ADDR_OWVAR 65
11560: PUSH
11561: LD_INT 4
11563: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: LD_EXP 46
11573: PPUSH
11574: LD_INT 3
11576: PUSH
11577: LD_INT 54
11579: PUSH
11580: EMPTY
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11612
// ComMoveXY ( i , 226 , 114 ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_INT 226
11602: PPUSH
11603: LD_INT 114
11605: PPUSH
11606: CALL_OW 111
11610: GO 11592
11612: POP
11613: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11614: LD_EXP 41
11618: PPUSH
11619: LD_INT 22
11621: PUSH
11622: LD_INT 6
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: LD_INT 4
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PPUSH
11648: LD_EXP 41
11652: PPUSH
11653: CALL_OW 74
11657: PPUSH
11658: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11662: LD_STRING Attack
11664: PPUSH
11665: CALL_OW 337
// music_class := music_combat ;
11669: LD_ADDR_OWVAR 72
11673: PUSH
11674: LD_INT 1
11676: ST_TO_ADDR
// music_nat := 4 ;
11677: LD_ADDR_OWVAR 71
11681: PUSH
11682: LD_INT 4
11684: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11685: LD_INT 5
11687: PPUSH
11688: LD_EXP 41
11692: PPUSH
11693: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11697: LD_INT 6
11699: PPUSH
11700: LD_EXP 38
11704: PPUSH
11705: LD_INT 25
11707: PUSH
11708: LD_INT 1
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PPUSH
11715: CALL_OW 72
11719: PUSH
11720: LD_INT 4
11722: ARRAY
11723: PPUSH
11724: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11728: LD_ADDR_VAR 0 1
11732: PUSH
11733: LD_EXP 38
11737: PPUSH
11738: LD_INT 3
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 72
11759: PUSH
11760: FOR_IN
11761: IFFALSE 11780
// ComAgressiveMove ( i , 221 , 110 ) ;
11763: LD_VAR 0 1
11767: PPUSH
11768: LD_INT 221
11770: PPUSH
11771: LD_INT 110
11773: PPUSH
11774: CALL_OW 114
11778: GO 11760
11780: POP
11781: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11782: LD_EXP 38
11786: PPUSH
11787: LD_INT 25
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 72
11801: PPUSH
11802: LD_INT 214
11804: PPUSH
11805: LD_INT 124
11807: PPUSH
11808: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11812: LD_EXP 38
11816: PPUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 72
11831: PUSH
11832: LD_INT 4
11834: ARRAY
11835: PPUSH
11836: LD_INT 214
11838: PPUSH
11839: LD_INT 114
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11849: LD_EXP 41
11853: PPUSH
11854: LD_STRING D9-Gri-1
11856: PPUSH
11857: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11861: LD_EXP 40
11865: PPUSH
11866: LD_STRING D9-Kur-1
11868: PPUSH
11869: CALL_OW 94
// wait ( 0 0$1 ) ;
11873: LD_INT 35
11875: PPUSH
11876: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11880: LD_EXP 33
11884: PPUSH
11885: LD_INT 233
11887: PPUSH
11888: LD_INT 130
11890: PPUSH
11891: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11895: LD_EXP 41
11899: PPUSH
11900: LD_STRING D9-Gri-2
11902: PPUSH
11903: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11907: LD_EXP 40
11911: PPUSH
11912: LD_STRING D9-Kur-2
11914: PPUSH
11915: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11919: LD_EXP 41
11923: PPUSH
11924: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11928: LD_EXP 41
11932: PPUSH
11933: LD_INT 211
11935: PPUSH
11936: LD_INT 104
11938: PPUSH
11939: CALL_OW 171
// AddComHold ( Grishko ) ;
11943: LD_EXP 41
11947: PPUSH
11948: CALL_OW 200
// repeat wait ( 3 ) ;
11952: LD_INT 3
11954: PPUSH
11955: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11959: LD_EXP 41
11963: PPUSH
11964: CALL_OW 310
11968: NOT
11969: IFFALSE 11952
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11971: LD_EXP 38
11975: PPUSH
11976: LD_INT 34
11978: PUSH
11979: LD_INT 26
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 72
11990: PPUSH
11991: LD_EXP 41
11995: PPUSH
11996: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12000: LD_EXP 38
12004: PPUSH
12005: LD_INT 34
12007: PUSH
12008: LD_INT 26
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PPUSH
12020: LD_INT 215
12022: PPUSH
12023: LD_INT 106
12025: PPUSH
12026: CALL_OW 174
// repeat wait ( 3 ) ;
12030: LD_INT 3
12032: PPUSH
12033: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12037: LD_EXP 41
12041: PPUSH
12042: CALL_OW 256
12046: PUSH
12047: LD_INT 1000
12049: LESS
12050: IFFALSE 12030
// NormalAttack ( 5 , Grishko ) ;
12052: LD_INT 5
12054: PPUSH
12055: LD_EXP 41
12059: PPUSH
12060: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12064: LD_INT 6
12066: PPUSH
12067: LD_EXP 38
12071: PPUSH
12072: LD_INT 25
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: PUSH
12087: LD_INT 4
12089: ARRAY
12090: PPUSH
12091: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12095: LD_EXP 41
12099: PPUSH
12100: LD_STRING D9-Gri-3
12102: PPUSH
12103: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12107: LD_EXP 40
12111: PPUSH
12112: LD_STRING D9-Kur-3
12114: PPUSH
12115: CALL_OW 94
// music_class := music_auto ;
12119: LD_ADDR_OWVAR 72
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// music_nat := music_auto ;
12127: LD_ADDR_OWVAR 71
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// for i in omarSquad do
12135: LD_ADDR_VAR 0 1
12139: PUSH
12140: LD_EXP 38
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12288
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12148: LD_VAR 0 1
12152: PPUSH
12153: CALL_OW 247
12157: PUSH
12158: LD_INT 2
12160: EQUAL
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 256
12171: PUSH
12172: LD_INT 1000
12174: LESS
12175: AND
12176: IFFALSE 12242
// begin driver := IsDrivenBy ( i ) ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 311
12192: ST_TO_ADDR
// veh := i ;
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: LD_VAR 0 1
12202: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12212: LD_VAR 0 2
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12226: LD_VAR 0 2
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: CALL_OW 180
// end else
12240: GO 12286
// if GetLives ( i ) < 500 then
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 500
12254: LESS
12255: IFFALSE 12286
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12257: LD_EXP 38
12261: PPUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 72
12276: PPUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 188
// end ; end ;
12286: GO 12145
12288: POP
12289: POP
// repeat wait ( 0 0$1 ) ;
12290: LD_INT 35
12292: PPUSH
12293: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12297: LD_EXP 38
12301: PPUSH
12302: LD_INT 3
12304: PUSH
12305: LD_INT 24
12307: PUSH
12308: LD_INT 1000
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 21
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 72
12337: NOT
12338: PUSH
12339: LD_EXP 38
12343: PPUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 24
12349: PUSH
12350: LD_INT 250
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: NOT
12366: AND
12367: IFFALSE 12290
// wait ( 0 0$2 ) ;
12369: LD_INT 70
12371: PPUSH
12372: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12376: LD_ADDR_VAR 0 5
12380: PUSH
12381: LD_EXP 38
12385: PPUSH
12386: LD_INT 58
12388: PUSH
12389: EMPTY
12390: LIST
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 72
12410: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12411: LD_ADDR_VAR 0 6
12415: PUSH
12416: LD_EXP 38
12420: PPUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: LD_INT 55
12436: PUSH
12437: EMPTY
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: ST_TO_ADDR
// for i := 1 to tmp do
12453: LD_ADDR_VAR 0 1
12457: PUSH
12458: DOUBLE
12459: LD_INT 1
12461: DEC
12462: ST_TO_ADDR
12463: LD_VAR 0 5
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12499
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12471: LD_VAR 0 6
12475: PUSH
12476: LD_VAR 0 1
12480: ARRAY
12481: PPUSH
12482: LD_VAR 0 5
12486: PUSH
12487: LD_VAR 0 1
12491: ARRAY
12492: PPUSH
12493: CALL_OW 120
12497: GO 12468
12499: POP
12500: POP
// wait ( 0 0$5 ) ;
12501: LD_INT 175
12503: PPUSH
12504: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12508: LD_EXP 38
12512: PPUSH
12513: LD_INT 199
12515: PPUSH
12516: LD_INT 141
12518: PPUSH
12519: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12523: LD_EXP 33
12527: PPUSH
12528: LD_INT 190
12530: PPUSH
12531: LD_INT 143
12533: PPUSH
12534: CALL_OW 114
// AddComHold ( Omar ) ;
12538: LD_EXP 33
12542: PPUSH
12543: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12547: LD_EXP 38
12551: PPUSH
12552: LD_INT 2
12554: PUSH
12555: LD_INT 25
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 25
12567: PUSH
12568: LD_INT 4
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 72
12584: PPUSH
12585: LD_INT 161
12587: PPUSH
12588: LD_INT 130
12590: PPUSH
12591: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12595: LD_EXP 38
12599: PPUSH
12600: LD_INT 25
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 72
12614: PPUSH
12615: LD_INT 163
12617: PPUSH
12618: LD_INT 122
12620: PPUSH
12621: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12625: LD_EXP 38
12629: PPUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: PUSH
12645: LD_INT 4
12647: ARRAY
12648: PPUSH
12649: LD_INT 165
12651: PPUSH
12652: LD_INT 118
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12662: LD_EXP 38
12666: PPUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 1
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 72
12681: PUSH
12682: LD_INT 4
12684: ARRAY
12685: PPUSH
12686: LD_INT 159
12688: PPUSH
12689: LD_INT 116
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12699: LD_EXP 38
12703: PPUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 72
12718: PPUSH
12719: LD_INT 169
12721: PPUSH
12722: LD_INT 114
12724: PPUSH
12725: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12729: LD_INT 35
12731: PPUSH
12732: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12736: LD_ADDR_VAR 0 5
12740: PUSH
12741: LD_EXP 38
12745: PPUSH
12746: LD_INT 25
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: ST_TO_ADDR
// for i in tmp do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_VAR 0 5
12770: PUSH
12771: FOR_IN
12772: IFFALSE 12869
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 256
12783: PUSH
12784: LD_INT 600
12786: LESS
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_INT 161
12795: PPUSH
12796: LD_INT 130
12798: PPUSH
12799: CALL_OW 297
12803: PUSH
12804: LD_INT 6
12806: GREATER
12807: AND
12808: IFFALSE 12825
// ComMoveXY ( i , 161 , 130 ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_INT 161
12817: PPUSH
12818: LD_INT 130
12820: PPUSH
12821: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 256
12834: PUSH
12835: LD_INT 1000
12837: EQUAL
12838: PUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 314
12848: NOT
12849: AND
12850: IFFALSE 12867
// ComAgressiveMove ( i , 160 , 109 ) ;
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 160
12859: PPUSH
12860: LD_INT 109
12862: PPUSH
12863: CALL_OW 114
// end ;
12867: GO 12771
12869: POP
12870: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12871: LD_ADDR_VAR 0 5
12875: PUSH
12876: LD_EXP 38
12880: PPUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 72
12895: ST_TO_ADDR
// for i in tmp do
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_VAR 0 5
12905: PUSH
12906: FOR_IN
12907: IFFALSE 13173
// begin tmp2 := IsDrivenBy ( i ) ;
12909: LD_ADDR_VAR 0 6
12913: PUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 311
12923: ST_TO_ADDR
// if not tmp2 then
12924: LD_VAR 0 6
12928: NOT
12929: IFFALSE 12933
// continue ;
12931: GO 12906
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 600
12945: GREATEREQUAL
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 110
12956: PUSH
12957: LD_INT 1
12959: EQUAL
12960: AND
12961: IFFALSE 12975
// SetTag ( i , 0 ) ;
12963: LD_VAR 0 1
12967: PPUSH
12968: LD_INT 0
12970: PPUSH
12971: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 256
12984: PUSH
12985: LD_INT 600
12987: GREATEREQUAL
12988: PUSH
12989: LD_VAR 0 1
12993: PPUSH
12994: CALL_OW 110
12998: NOT
12999: AND
13000: IFFALSE 13026
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13002: LD_VAR 0 1
13006: PPUSH
13007: LD_VAR 0 7
13011: PPUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 74
13021: PPUSH
13022: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 256
13035: PUSH
13036: LD_INT 600
13038: LESS
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 110
13049: NOT
13050: AND
13051: IFFALSE 13080
// begin SetTag ( i , 1 ) ;
13053: LD_VAR 0 1
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_INT 202
13072: PPUSH
13073: LD_INT 150
13075: PPUSH
13076: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 110
13089: PUSH
13090: LD_INT 1
13092: EQUAL
13093: PUSH
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 202
13101: PPUSH
13102: LD_INT 150
13104: PPUSH
13105: CALL_OW 297
13109: PUSH
13110: LD_INT 6
13112: LESS
13113: AND
13114: PUSH
13115: LD_VAR 0 6
13119: AND
13120: IFFALSE 13171
// begin ComExitVehicle ( tmp2 ) ;
13122: LD_VAR 0 6
13126: PPUSH
13127: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13131: LD_VAR 0 6
13135: PPUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13145: LD_VAR 0 6
13149: PPUSH
13150: LD_INT 700
13152: PPUSH
13153: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13157: LD_VAR 0 6
13161: PPUSH
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 180
// end ; end ;
13171: GO 12906
13173: POP
13174: POP
// until kirovDestroyed ;
13175: LD_EXP 16
13179: IFFALSE 12729
// repeat wait ( 0 0$1 ) ;
13181: LD_INT 35
13183: PPUSH
13184: CALL_OW 67
// for i in omarSquad union Omar do
13188: LD_ADDR_VAR 0 1
13192: PUSH
13193: LD_EXP 38
13197: PUSH
13198: LD_EXP 33
13202: UNION
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13375
// if IsInArea ( i , southRoadArea ) then
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 15
13214: PPUSH
13215: CALL_OW 308
13219: IFFALSE 13232
// RemoveUnit ( i ) else
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 64
13230: GO 13373
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13232: LD_VAR 0 1
13236: PPUSH
13237: CALL_OW 257
13241: PUSH
13242: LD_INT 3
13244: EQUAL
13245: PUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 310
13255: NOT
13256: AND
13257: PUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 251
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 21
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 58
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PPUSH
13300: CALL_OW 69
13304: AND
13305: IFFALSE 13358
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13307: LD_VAR 0 1
13311: PPUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 5
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 21
13324: PUSH
13325: LD_INT 2
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 58
13334: PUSH
13335: EMPTY
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: PUSH
13348: LD_INT 1
13350: ARRAY
13351: PPUSH
13352: CALL_OW 120
13356: GO 13373
// ComMoveXY ( i , 208 , 162 ) ;
13358: LD_VAR 0 1
13362: PPUSH
13363: LD_INT 208
13365: PPUSH
13366: LD_INT 162
13368: PPUSH
13369: CALL_OW 111
// end ;
13373: GO 13204
13375: POP
13376: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13377: LD_INT 22
13379: PUSH
13380: LD_INT 5
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PPUSH
13401: CALL_OW 69
13405: NOT
13406: IFFALSE 13181
// end ;
13408: PPOPN 7
13410: END
// every 0 0$1 trigger IsDead ( kirov ) do
13411: LD_INT 71
13413: PPUSH
13414: CALL_OW 301
13418: IFFALSE 13435
13420: GO 13422
13422: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13423: LD_EXP 25
13427: PPUSH
13428: LD_STRING DH-1-Kirov
13430: PPUSH
13431: CALL_OW 88
13435: END
// every 0 0$1 trigger See ( 2 , beria ) do
13436: LD_INT 2
13438: PPUSH
13439: LD_INT 106
13441: PPUSH
13442: CALL_OW 292
13446: IFFALSE 13463
13448: GO 13450
13450: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13451: LD_EXP 25
13455: PPUSH
13456: LD_STRING DH-1-Beria
13458: PPUSH
13459: CALL_OW 88
13463: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13464: LD_INT 2
13466: PPUSH
13467: LD_INT 112
13469: PPUSH
13470: CALL_OW 292
13474: IFFALSE 13741
13476: GO 13478
13478: DISABLE
// begin DialogueOn ;
13479: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13483: LD_INT 112
13485: PPUSH
13486: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13490: LD_EXP 25
13494: PPUSH
13495: LD_STRING DH-1-Kagan
13497: PPUSH
13498: CALL_OW 88
// if Kamil then
13502: LD_EXP 29
13506: IFFALSE 13544
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13508: LD_EXP 29
13512: PPUSH
13513: LD_STRING DKam-Kagan-2
13515: PPUSH
13516: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13520: LD_EXP 26
13524: PPUSH
13525: LD_STRING DG-Kagan-3
13527: PPUSH
13528: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13532: LD_EXP 26
13536: PPUSH
13537: LD_STRING DG-Kagan-4
13539: PPUSH
13540: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13544: LD_STRING KaganBase
13546: PPUSH
13547: CALL_OW 97
13551: PUSH
13552: LD_INT 1
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13655
13560: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13561: LD_EXP 25
13565: PPUSH
13566: LD_STRING DH-Kagan-5
13568: PPUSH
13569: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13573: LD_EXP 25
13577: PPUSH
13578: LD_STRING DH-Kagan-6
13580: PPUSH
13581: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13585: LD_EXP 36
13589: PPUSH
13590: LD_STRING DShar-Kagan-7
13592: PPUSH
13593: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13597: LD_EXP 25
13601: PPUSH
13602: LD_STRING DH-Kagan-8
13604: PPUSH
13605: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13609: LD_EXP 25
13613: PPUSH
13614: LD_STRING DH-Kagan-9
13616: PPUSH
13617: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13621: LD_EXP 36
13625: PPUSH
13626: LD_STRING DShar-Kagan-10
13628: PPUSH
13629: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13633: LD_EXP 25
13637: PPUSH
13638: LD_STRING DH-Kagan-11
13640: PPUSH
13641: CALL_OW 88
// kaganCaptured := true ;
13645: LD_ADDR_EXP 24
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end ; 2 :
13653: GO 13737
13655: LD_INT 2
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13736
13663: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13664: LD_INT 22
13666: PUSH
13667: LD_INT 8
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PUSH
13679: LD_EXP 35
13683: AND
13684: IFFALSE 13698
// Say ( Heike , DH-Kagan-a-5 ) ;
13686: LD_EXP 25
13690: PPUSH
13691: LD_STRING DH-Kagan-a-5
13693: PPUSH
13694: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13698: LD_EXP 25
13702: PPUSH
13703: LD_STRING DH-Kagan-a-6
13705: PPUSH
13706: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13710: LD_EXP 25
13714: PPUSH
13715: LD_STRING DH-Kagan-a-7
13717: PPUSH
13718: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13722: LD_EXP 26
13726: PPUSH
13727: LD_STRING DG-Kagan-a-8
13729: PPUSH
13730: CALL_OW 88
// end ; end ;
13734: GO 13737
13736: POP
// DialogueOff ;
13737: CALL_OW 7
// end ;
13741: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13742: LD_EXP 18
13746: PUSH
13747: LD_INT 112
13749: PPUSH
13750: CALL_OW 255
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: OR
13759: IFFALSE 13771
13761: GO 13763
13763: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13764: LD_STRING KaganDone
13766: PPUSH
13767: CALL_OW 337
13771: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13772: LD_EXP 6
13776: PUSH
13777: LD_EXP 48
13781: PPUSH
13782: LD_INT 95
13784: PUSH
13785: LD_INT 19
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: AND
13797: IFFALSE 13874
13799: GO 13801
13801: DISABLE
// begin DialogueOn ;
13802: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13806: LD_INT 63
13808: PPUSH
13809: LD_INT 32
13811: PPUSH
13812: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13816: LD_INT 63
13818: PPUSH
13819: LD_INT 32
13821: PPUSH
13822: LD_INT 2
13824: PPUSH
13825: LD_INT 12
13827: NEG
13828: PPUSH
13829: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13833: LD_EXP 25
13837: PPUSH
13838: LD_STRING DH-Omicron-1
13840: PPUSH
13841: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13845: LD_EXP 27
13849: PPUSH
13850: LD_STRING DM-Omicron-2
13852: PPUSH
13853: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13857: LD_INT 63
13859: PPUSH
13860: LD_INT 32
13862: PPUSH
13863: LD_INT 2
13865: PPUSH
13866: CALL_OW 331
// DialogueOff ;
13870: CALL_OW 7
// end ;
13874: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13875: LD_INT 2
13877: PPUSH
13878: LD_EXP 50
13882: PPUSH
13883: CALL_OW 292
13887: PUSH
13888: LD_EXP 50
13892: PPUSH
13893: CALL_OW 255
13897: PUSH
13898: LD_INT 2
13900: EQUAL
13901: OR
13902: PUSH
13903: LD_INT 106
13905: PPUSH
13906: CALL_OW 255
13910: PUSH
13911: LD_INT 2
13913: EQUAL
13914: OR
13915: PUSH
13916: LD_EXP 50
13920: PPUSH
13921: CALL_OW 302
13925: AND
13926: PUSH
13927: LD_EXP 25
13931: PPUSH
13932: CALL_OW 302
13936: AND
13937: PUSH
13938: LD_EXP 35
13942: PPUSH
13943: CALL_OW 302
13947: AND
13948: IFFALSE 14669
13950: GO 13952
13952: DISABLE
13953: LD_INT 0
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
// begin DialogueOn ;
13960: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13964: LD_INT 111
13966: PPUSH
13967: LD_INT 90
13969: PPUSH
13970: LD_INT 2
13972: PPUSH
13973: LD_INT 6
13975: NEG
13976: PPUSH
13977: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13981: LD_INT 111
13983: PPUSH
13984: LD_INT 90
13986: PPUSH
13987: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13991: LD_EXP 35
13995: PPUSH
13996: LD_STRING DA-Cap-1
13998: PPUSH
13999: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14003: LD_EXP 25
14007: PPUSH
14008: LD_STRING DH-Cap-2
14010: PPUSH
14011: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14015: LD_INT 111
14017: PPUSH
14018: LD_INT 90
14020: PPUSH
14021: LD_INT 2
14023: PPUSH
14024: CALL_OW 331
// DialogueOff ;
14028: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14032: LD_INT 35
14034: PPUSH
14035: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14039: LD_EXP 17
14043: PUSH
14044: LD_INT 106
14046: PPUSH
14047: CALL_OW 255
14051: PUSH
14052: LD_INT 2
14054: EQUAL
14055: OR
14056: PUSH
14057: LD_EXP 50
14061: PPUSH
14062: CALL_OW 255
14066: PUSH
14067: LD_INT 2
14069: EQUAL
14070: OR
14071: PUSH
14072: LD_EXP 50
14076: PPUSH
14077: CALL_OW 302
14081: AND
14082: PUSH
14083: LD_EXP 35
14087: PPUSH
14088: CALL_OW 302
14092: AND
14093: PUSH
14094: LD_INT 2
14096: PPUSH
14097: CALL_OW 463
14101: NOT
14102: AND
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_INT 3
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 92
14126: PUSH
14127: LD_INT 110
14129: PUSH
14130: LD_INT 95
14132: PUSH
14133: LD_INT 12
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: NOT
14152: AND
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 5
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 92
14176: PUSH
14177: LD_INT 110
14179: PUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 12
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PPUSH
14197: CALL_OW 69
14201: NOT
14202: AND
14203: IFFALSE 14032
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14205: LD_ADDR_VAR 0 2
14209: PUSH
14210: LD_EXP 37
14214: PUSH
14215: LD_EXP 28
14219: PUSH
14220: LD_EXP 29
14224: PUSH
14225: LD_EXP 31
14229: PUSH
14230: LD_EXP 30
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: UNION
14241: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_VAR 0 2
14251: PPUSH
14252: LD_INT 50
14254: PUSH
14255: EMPTY
14256: LIST
14257: PPUSH
14258: CALL_OW 72
14262: ST_TO_ADDR
// if tmp < 2 then
14263: LD_VAR 0 2
14267: PUSH
14268: LD_INT 2
14270: LESS
14271: IFFALSE 14283
// q := 2 else
14273: LD_ADDR_VAR 0 4
14277: PUSH
14278: LD_INT 2
14280: ST_TO_ADDR
14281: GO 14296
// q := Query ( LabCap ) ;
14283: LD_ADDR_VAR 0 4
14287: PUSH
14288: LD_STRING LabCap
14290: PPUSH
14291: CALL_OW 97
14295: ST_TO_ADDR
// case q of 1 :
14296: LD_VAR 0 4
14300: PUSH
14301: LD_INT 1
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14633
14309: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14310: LD_INT 2
14312: PPUSH
14313: LD_EXP 50
14317: PPUSH
14318: CALL_OW 471
// labCaptured := true ;
14322: LD_ADDR_EXP 21
14326: PUSH
14327: LD_INT 1
14329: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14330: LD_EXP 25
14334: PPUSH
14335: LD_STRING DH-Cap-a-1
14337: PPUSH
14338: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14342: LD_EXP 35
14346: PPUSH
14347: LD_STRING DA-Cap-a-2
14349: PPUSH
14350: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14354: LD_ADDR_VAR 0 5
14358: PUSH
14359: LD_EXP 35
14363: PUSH
14364: LD_INT -3
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT -2
14373: PUSH
14374: LD_INT -4
14376: PUSH
14377: LD_EXP 25
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: ADD
14387: PUSH
14388: LD_INT -3
14390: PUSH
14391: EMPTY
14392: LIST
14393: ADD
14394: PUSH
14395: LD_VAR 0 2
14399: ADD
14400: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14401: LD_ADDR_VAR 0 3
14405: PUSH
14406: LD_STRING Select two characters to go with Aviradze
14408: PPUSH
14409: LD_INT 2
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_VAR 0 5
14419: PPUSH
14420: EMPTY
14421: PPUSH
14422: CALL_OW 42
14426: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14427: LD_EXP 50
14431: PPUSH
14432: LD_INT 8
14434: PPUSH
14435: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14439: LD_EXP 35
14443: PPUSH
14444: LD_INT 8
14446: PPUSH
14447: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14451: LD_ADDR_EXP 39
14455: PUSH
14456: LD_EXP 35
14460: PUSH
14461: EMPTY
14462: LIST
14463: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14464: LD_EXP 35
14468: PPUSH
14469: CALL_OW 310
14473: IFFALSE 14484
// ComExit ( Aviradze ) ;
14475: LD_EXP 35
14479: PPUSH
14480: CALL 75117 0 1
// wait ( 3 ) ;
14484: LD_INT 3
14486: PPUSH
14487: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14491: LD_EXP 35
14495: PPUSH
14496: LD_EXP 50
14500: PPUSH
14501: CALL_OW 120
// for i := 1 to 2 do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_INT 2
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14622
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14521: LD_ADDR_EXP 39
14525: PUSH
14526: LD_EXP 39
14530: PUSH
14531: LD_VAR 0 3
14535: PUSH
14536: LD_VAR 0 1
14540: ARRAY
14541: UNION
14542: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14543: LD_VAR 0 3
14547: PUSH
14548: LD_VAR 0 1
14552: ARRAY
14553: PPUSH
14554: LD_INT 8
14556: PPUSH
14557: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14561: LD_VAR 0 3
14565: PUSH
14566: LD_VAR 0 1
14570: ARRAY
14571: PPUSH
14572: CALL_OW 310
14576: IFFALSE 14593
// ComExit ( tmp2 [ i ] ) ;
14578: LD_VAR 0 3
14582: PUSH
14583: LD_VAR 0 1
14587: ARRAY
14588: PPUSH
14589: CALL 75117 0 1
// wait ( 3 ) ;
14593: LD_INT 3
14595: PPUSH
14596: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14600: LD_VAR 0 3
14604: PUSH
14605: LD_VAR 0 1
14609: ARRAY
14610: PPUSH
14611: LD_EXP 50
14615: PPUSH
14616: CALL_OW 120
// end ;
14620: GO 14518
14622: POP
14623: POP
// SetAchievement ( ACH_LAB ) ;
14624: LD_STRING ACH_LAB
14626: PPUSH
14627: CALL_OW 543
// end ; 2 :
14631: GO 14669
14633: LD_INT 2
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14668
14641: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14642: LD_EXP 25
14646: PPUSH
14647: LD_STRING DH-Cap-b-1
14649: PPUSH
14650: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14654: LD_EXP 35
14658: PPUSH
14659: LD_STRING DA-Cap-b-2
14661: PPUSH
14662: CALL_OW 88
// end ; end ;
14666: GO 14669
14668: POP
// end ;
14669: PPOPN 5
14671: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 30
14687: PUSH
14688: LD_INT 31
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 70
14703: PUSH
14704: LD_INT 2
14706: GREATEREQUAL
14707: IFFALSE 14719
14709: GO 14711
14711: DISABLE
// SetAchievement ( ACH_KING ) ;
14712: LD_STRING ACH_KING
14714: PPUSH
14715: CALL_OW 543
14719: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14720: LD_EXP 11
14724: NOT
14725: PUSH
14726: LD_INT 10
14728: PPUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 30
14744: PUSH
14745: LD_INT 31
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 30
14754: PUSH
14755: LD_INT 4
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 70
14775: AND
14776: IFFALSE 14796
14778: GO 14780
14780: DISABLE
// begin hillBase := true ;
14781: LD_ADDR_EXP 15
14785: PUSH
14786: LD_INT 1
14788: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14789: LD_STRING HillDone
14791: PPUSH
14792: CALL_OW 337
// end ;
14796: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14797: LD_EXP 30
14801: PUSH
14802: LD_EXP 30
14806: PPUSH
14807: CALL_OW 256
14811: PUSH
14812: LD_INT 3
14814: LESS
14815: AND
14816: IFFALSE 14862
14818: GO 14820
14820: DISABLE
// begin DialogueOn ;
14821: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14825: LD_EXP 30
14829: PPUSH
14830: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14834: LD_EXP 30
14838: PPUSH
14839: LD_STRING DK-Kkilled-1
14841: PPUSH
14842: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14846: LD_EXP 25
14850: PPUSH
14851: LD_STRING DH-Kkilled-2
14853: PPUSH
14854: CALL_OW 88
// DialogueOff ;
14858: CALL_OW 7
// end ;
14862: END
// every 0 0$1 trigger kaiaKilledByRussian do
14863: LD_EXP 23
14867: IFFALSE 14884
14869: GO 14871
14871: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14872: LD_EXP 25
14876: PPUSH
14877: LD_STRING DH-Kkilled-3
14879: PPUSH
14880: CALL_OW 88
14884: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14885: LD_EXP 16
14889: PUSH
14890: LD_INT 106
14892: PPUSH
14893: CALL_OW 255
14897: PUSH
14898: LD_INT 2
14900: EQUAL
14901: PUSH
14902: LD_EXP 17
14906: OR
14907: AND
14908: PUSH
14909: LD_EXP 18
14913: PUSH
14914: LD_EXP 24
14918: PUSH
14919: LD_INT 112
14921: PPUSH
14922: CALL_OW 255
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: AND
14931: OR
14932: AND
14933: IFFALSE 16122
14935: GO 14937
14937: DISABLE
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14944: LD_STRING GoToWest
14946: PPUSH
14947: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14951: LD_INT 17
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14961: LD_INT 35
14963: PPUSH
14964: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_INT 17
14975: PPUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: LD_INT 58
15014: PUSH
15015: EMPTY
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 70
15039: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 3
15057: PUSH
15058: LD_INT 55
15060: PUSH
15061: EMPTY
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: LD_INT 21
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 58
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 0
15130: PLUS
15131: PUSH
15132: LD_VAR 0 3
15136: PUSH
15137: LD_INT 0
15139: PLUS
15140: EQUAL
15141: IFFALSE 14961
// SaveCharacters ( Heike , 04_1_Heike ) ;
15143: LD_EXP 25
15147: PPUSH
15148: LD_STRING 04_1_Heike
15150: PPUSH
15151: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15155: LD_EXP 35
15159: PUSH
15160: LD_EXP 35
15164: PUSH
15165: LD_EXP 39
15169: IN
15170: NOT
15171: AND
15172: IFFALSE 15188
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15174: LD_EXP 35
15178: PPUSH
15179: LD_STRING 04_1_Aviradze
15181: PPUSH
15182: CALL_OW 38
15186: GO 15206
// if Aviradze then
15188: LD_EXP 35
15192: IFFALSE 15206
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15194: LD_EXP 35
15198: PPUSH
15199: LD_STRING 04_1_Aviradze_L
15201: PPUSH
15202: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15206: LD_EXP 28
15210: PUSH
15211: LD_EXP 28
15215: PUSH
15216: LD_EXP 39
15220: IN
15221: NOT
15222: AND
15223: IFFALSE 15239
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15225: LD_EXP 28
15229: PPUSH
15230: LD_STRING 04_1_Ibrahim
15232: PPUSH
15233: CALL_OW 38
15237: GO 15257
// if Ibrahim then
15239: LD_EXP 28
15243: IFFALSE 15257
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15245: LD_EXP 28
15249: PPUSH
15250: LD_STRING 04_1_Ibrahim_L
15252: PPUSH
15253: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15257: LD_EXP 29
15261: PUSH
15262: LD_EXP 29
15266: PUSH
15267: LD_EXP 39
15271: IN
15272: NOT
15273: AND
15274: IFFALSE 15290
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15276: LD_EXP 29
15280: PPUSH
15281: LD_STRING 04_1_Kamil
15283: PPUSH
15284: CALL_OW 38
15288: GO 15308
// if Kamil then
15290: LD_EXP 29
15294: IFFALSE 15308
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15296: LD_EXP 29
15300: PPUSH
15301: LD_STRING 04_1_Kamil_L
15303: PPUSH
15304: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15308: LD_EXP 31
15312: PUSH
15313: LD_EXP 31
15317: PUSH
15318: LD_EXP 39
15322: IN
15323: NOT
15324: AND
15325: IFFALSE 15341
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15327: LD_EXP 31
15331: PPUSH
15332: LD_STRING 04_1_Sophia
15334: PPUSH
15335: CALL_OW 38
15339: GO 15359
// if Sophia then
15341: LD_EXP 31
15345: IFFALSE 15359
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15347: LD_EXP 31
15351: PPUSH
15352: LD_STRING 04_1_Sophia_L
15354: PPUSH
15355: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15359: LD_EXP 30
15363: PUSH
15364: LD_EXP 30
15368: PUSH
15369: LD_EXP 39
15373: IN
15374: NOT
15375: AND
15376: IFFALSE 15392
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15378: LD_EXP 30
15382: PPUSH
15383: LD_STRING 04_1_Kaia
15385: PPUSH
15386: CALL_OW 38
15390: GO 15410
// if Kaia then
15392: LD_EXP 30
15396: IFFALSE 15410
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15398: LD_EXP 30
15402: PPUSH
15403: LD_STRING 04_1_Kaia_L
15405: PPUSH
15406: CALL_OW 38
// if Givi then
15410: LD_EXP 26
15414: IFFALSE 15428
// SaveCharacters ( Givi , 04_1_Givi ) ;
15416: LD_EXP 26
15420: PPUSH
15421: LD_STRING 04_1_Givi
15423: PPUSH
15424: CALL_OW 38
// if Mike then
15428: LD_EXP 27
15432: IFFALSE 15446
// SaveCharacters ( Mike , 04_1_Mike ) ;
15434: LD_EXP 27
15438: PPUSH
15439: LD_STRING 04_1_Mike
15441: PPUSH
15442: CALL_OW 38
// if Markov then
15446: LD_EXP 32
15450: IFFALSE 15464
// SaveCharacters ( Markov , 04_1_Markov ) ;
15452: LD_EXP 32
15456: PPUSH
15457: LD_STRING 04_1_Markov
15459: PPUSH
15460: CALL_OW 38
// if Kurt then
15464: LD_EXP 34
15468: IFFALSE 15489
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15470: LD_EXP 34
15474: PPUSH
15475: LD_STRING 04_1_Kurt
15477: PPUSH
15478: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15482: LD_STRING enableBioCharacter(BIO_KURT)
15484: PPUSH
15485: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15489: LD_EXP 37
15493: PUSH
15494: LD_EXP 39
15498: DIFF
15499: IFFALSE 15519
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15501: LD_EXP 37
15505: PUSH
15506: LD_EXP 39
15510: DIFF
15511: PPUSH
15512: LD_STRING 04_1_others
15514: PPUSH
15515: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15519: LD_EXP 39
15523: PUSH
15524: LD_EXP 37
15528: AND
15529: IFFALSE 15614
// begin tmp := [ ] ;
15531: LD_ADDR_VAR 0 2
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// for i in heikeSecondSquad do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: LD_EXP 37
15547: PUSH
15548: FOR_IN
15549: IFFALSE 15594
// if i in aviradzeSquad then
15551: LD_VAR 0 1
15555: PUSH
15556: LD_EXP 39
15560: IN
15561: IFFALSE 15592
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: LD_VAR 0 2
15572: PPUSH
15573: LD_VAR 0 2
15577: PUSH
15578: LD_INT 1
15580: PLUS
15581: PPUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 1
15591: ST_TO_ADDR
15592: GO 15548
15594: POP
15595: POP
// if tmp then
15596: LD_VAR 0 2
15600: IFFALSE 15614
// SaveCharacters ( tmp , 04_1_others_L ) ;
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_STRING 04_1_others_L
15609: PPUSH
15610: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: LD_INT 22
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 23
15631: PUSH
15632: LD_INT 0
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PPUSH
15643: CALL_OW 69
15647: ST_TO_ADDR
// if tmp then
15648: LD_VAR 0 2
15652: IFFALSE 15666
// SaveCharacters ( tmp , 04_1_apes ) ;
15654: LD_VAR 0 2
15658: PPUSH
15659: LD_STRING 04_1_apes
15661: PPUSH
15662: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_INT 17
15673: PPUSH
15674: LD_INT 21
15676: PUSH
15677: LD_INT 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 70
15688: ST_TO_ADDR
// if tmp then
15689: LD_VAR 0 2
15693: IFFALSE 15987
// begin tmp2 := [ ] ;
15695: LD_ADDR_VAR 0 3
15699: PUSH
15700: EMPTY
15701: ST_TO_ADDR
// for i in tmp do
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_VAR 0 2
15711: PUSH
15712: FOR_IN
15713: IFFALSE 15973
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 264
15724: PUSH
15725: LD_INT 32
15727: PUSH
15728: LD_INT 12
15730: PUSH
15731: LD_INT 51
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: IN
15739: IFFALSE 15876
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 289
15758: PUSH
15759: LD_VAR 0 1
15763: PPUSH
15764: LD_INT 2
15766: PPUSH
15767: CALL_OW 289
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 1
15793: PLUS
15794: PPUSH
15795: LD_VAR 0 1
15799: PPUSH
15800: CALL_OW 265
15804: PUSH
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 262
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 263
15824: PUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 264
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 248
15844: PUSH
15845: LD_VAR 0 1
15849: PPUSH
15850: CALL_OW 256
15854: PUSH
15855: LD_VAR 0 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 1
15873: ST_TO_ADDR
// end else
15874: GO 15971
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15876: LD_ADDR_VAR 0 3
15880: PUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 1
15893: PLUS
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 265
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 262
15914: PUSH
15915: LD_VAR 0 1
15919: PPUSH
15920: CALL_OW 263
15924: PUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 264
15934: PUSH
15935: LD_VAR 0 1
15939: PPUSH
15940: CALL_OW 248
15944: PUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 256
15954: PUSH
15955: EMPTY
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PPUSH
15966: CALL_OW 1
15970: ST_TO_ADDR
15971: GO 15712
15973: POP
15974: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_STRING 04_1_Vehicles
15982: PPUSH
15983: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15987: LD_EXP 21
15991: PPUSH
15992: LD_STRING 04_1_RuLabCaptured
15994: PPUSH
15995: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15999: LD_EXP 19
16003: PPUSH
16004: LD_STRING 04_1_EscapeCounter
16006: PPUSH
16007: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16011: LD_EXP 15
16015: PPUSH
16016: LD_STRING 04_1_BaseHill
16018: PPUSH
16019: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16023: LD_OWVAR 1
16027: PPUSH
16028: LD_STRING 04_1_Time
16030: PPUSH
16031: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16035: LD_EXP 14
16039: PPUSH
16040: LD_STRING 04_1_DeadCounter
16042: PPUSH
16043: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16047: LD_EXP 24
16051: PUSH
16052: LD_INT 112
16054: PPUSH
16055: CALL_OW 255
16059: MUL
16060: PUSH
16061: LD_INT 2
16063: EQUAL
16064: PPUSH
16065: LD_STRING 04_1_KaganCaptured
16067: PPUSH
16068: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16072: LD_INT 22
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 26
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: PUSH
16101: LD_INT 0
16103: PLUS
16104: PPUSH
16105: LD_STRING 04_1_Flamethrower
16107: PPUSH
16108: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16112: LD_INT 1
16114: PPUSH
16115: LD_STRING __x1\04_cont2
16117: PPUSH
16118: CALL_OW 340
// end ; end_of_file
16122: PPOPN 4
16124: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 266
16134: PUSH
16135: LD_INT 0
16137: EQUAL
16138: PUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 255
16148: PUSH
16149: LD_INT 2
16151: EQUAL
16152: AND
16153: IFFALSE 16163
// baseConstructed := true ;
16155: LD_ADDR_EXP 3
16159: PUSH
16160: LD_INT 1
16162: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 266
16172: PUSH
16173: LD_INT 6
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 255
16186: PUSH
16187: LD_INT 2
16189: EQUAL
16190: AND
16191: IFFALSE 16201
// labConstructed := true ;
16193: LD_ADDR_EXP 4
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// end ;
16201: PPOPN 1
16203: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL 32847 0 1
// if un = Heike then
16213: LD_VAR 0 1
16217: PUSH
16218: LD_EXP 25
16222: EQUAL
16223: IFFALSE 16232
// YouLost ( Heike ) ;
16225: LD_STRING Heike
16227: PPUSH
16228: CALL_OW 104
// if un = Omar then
16232: LD_VAR 0 1
16236: PUSH
16237: LD_EXP 33
16241: EQUAL
16242: IFFALSE 16251
// YouLost ( Omar ) ;
16244: LD_STRING Omar
16246: PPUSH
16247: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_INT 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 23
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: IN
16296: IFFALSE 16312
// loseCounter := loseCounter + 1 ;
16298: LD_ADDR_EXP 14
16302: PUSH
16303: LD_EXP 14
16307: PUSH
16308: LD_INT 1
16310: PLUS
16311: ST_TO_ADDR
// if un = omikron then
16312: LD_VAR 0 1
16316: PUSH
16317: LD_INT 64
16319: EQUAL
16320: IFFALSE 16330
// omicronFall := true ;
16322: LD_ADDR_EXP 13
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// if un = kirov then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 71
16337: EQUAL
16338: IFFALSE 16355
// begin ChangeMissionObjectives ( KirovDone ) ;
16340: LD_STRING KirovDone
16342: PPUSH
16343: CALL_OW 337
// kirovDestroyed := true ;
16347: LD_ADDR_EXP 16
16351: PUSH
16352: LD_INT 1
16354: ST_TO_ADDR
// end ; if un = beria then
16355: LD_VAR 0 1
16359: PUSH
16360: LD_INT 106
16362: EQUAL
16363: IFFALSE 16380
// begin ChangeMissionObjectives ( BeriaDone ) ;
16365: LD_STRING BeriaDone
16367: PPUSH
16368: CALL_OW 337
// beriaDestroyed := true ;
16372: LD_ADDR_EXP 17
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// end ; if un = kagan then
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 112
16387: EQUAL
16388: IFFALSE 16398
// kaganDestroyed := true ;
16390: LD_ADDR_EXP 18
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if un in russianPatrol then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_EXP 47
16407: IN
16408: IFFALSE 16426
// russianPatrol := russianPatrol diff un ;
16410: LD_ADDR_EXP 47
16414: PUSH
16415: LD_EXP 47
16419: PUSH
16420: LD_VAR 0 1
16424: DIFF
16425: ST_TO_ADDR
// if un in russianOmicronAttackers then
16426: LD_VAR 0 1
16430: PUSH
16431: LD_EXP 48
16435: IN
16436: IFFALSE 16454
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16438: LD_ADDR_EXP 48
16442: PUSH
16443: LD_EXP 48
16447: PUSH
16448: LD_VAR 0 1
16452: DIFF
16453: ST_TO_ADDR
// end ;
16454: PPOPN 1
16456: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16457: LD_INT 0
16459: PPUSH
16460: PPUSH
16461: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_INT 3
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_INT 4
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_INT 6
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 30
16508: PUSH
16509: LD_INT 32
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: IN
16525: IFFALSE 16698
// begin sol := UnitsInside ( un ) ;
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 313
16541: ST_TO_ADDR
// if not sol then
16542: LD_VAR 0 3
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16698
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16551: LD_ADDR_VAR 0 4
16555: PUSH
16556: LD_INT 22
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 255
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 4
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: ST_TO_ADDR
// if not nearestBarracks then
16610: LD_VAR 0 4
16614: NOT
16615: IFFALSE 16619
// exit ;
16617: GO 16698
// for i in nearestBarracks do
16619: LD_ADDR_VAR 0 2
16623: PUSH
16624: LD_VAR 0 4
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16665
// if UnitsInside ( i ) = 6 then
16632: LD_VAR 0 2
16636: PPUSH
16637: CALL_OW 313
16641: PUSH
16642: LD_INT 6
16644: EQUAL
16645: IFFALSE 16663
// nearestBarracks := nearestBarracks diff i ;
16647: LD_ADDR_VAR 0 4
16651: PUSH
16652: LD_VAR 0 4
16656: PUSH
16657: LD_VAR 0 2
16661: DIFF
16662: ST_TO_ADDR
16663: GO 16629
16665: POP
16666: POP
// if not nearestBarracks then
16667: LD_VAR 0 4
16671: NOT
16672: IFFALSE 16676
// exit ;
16674: GO 16698
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PPUSH
16694: CALL_OW 120
// end ; end ;
16698: PPOPN 4
16700: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16701: LD_INT 0
16703: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16704: LD_EXP 8
16708: NOT
16709: PUSH
16710: LD_EXP 5
16714: NOT
16715: OR
16716: IFFALSE 16720
// exit ;
16718: GO 16788
// for i in camAreas do
16720: LD_ADDR_VAR 0 5
16724: PUSH
16725: LD_EXP 8
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16786
// if InArea ( x , y , i ) then
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_VAR 0 4
16742: PPUSH
16743: LD_VAR 0 5
16747: PPUSH
16748: CALL_OW 309
16752: IFFALSE 16784
// begin SetAreaMapShow ( i , 0 ) ;
16754: LD_VAR 0 5
16758: PPUSH
16759: LD_INT 0
16761: PPUSH
16762: CALL_OW 424
// camAreas := camAreas diff i ;
16766: LD_ADDR_EXP 8
16770: PUSH
16771: LD_EXP 8
16775: PUSH
16776: LD_VAR 0 5
16780: DIFF
16781: ST_TO_ADDR
// break ;
16782: GO 16786
// end ;
16784: GO 16730
16786: POP
16787: POP
// end ;
16788: PPOPN 5
16790: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16791: LD_VAR 0 1
16795: PUSH
16796: LD_INT 2
16798: EQUAL
16799: PUSH
16800: LD_VAR 0 2
16804: PUSH
16805: LD_INT 5
16807: PUSH
16808: LD_INT 8
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: IN
16815: AND
16816: IFFALSE 16825
// YouLost ( Ally ) ;
16818: LD_STRING Ally
16820: PPUSH
16821: CALL_OW 104
// end ;
16825: PPOPN 2
16827: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_EXP 30
16837: EQUAL
16838: PUSH
16839: LD_VAR 0 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 6
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: IN
16854: AND
16855: IFFALSE 16886
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16857: LD_ADDR_EXP 23
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 250
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 251
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: ST_TO_ADDR
// end ;
16886: PPOPN 3
16888: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16889: LD_VAR 0 1
16893: PPUSH
16894: LD_VAR 0 2
16898: PPUSH
16899: CALL 32969 0 2
// end ; end_of_file
16903: PPOPN 2
16905: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16906: LD_EXP 11
16910: NOT
16911: PUSH
16912: LD_INT 12
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 287
16922: PUSH
16923: LD_INT 20
16925: PUSH
16926: LD_INT 16
16928: PUSH
16929: LD_INT 12
16931: PUSH
16932: LD_INT 10
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_OWVAR 67
16945: ARRAY
16946: LESS
16947: AND
16948: IFFALSE 16975
16950: GO 16952
16952: DISABLE
// begin enable ;
16953: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16954: LD_INT 1
16956: PPUSH
16957: LD_INT 5
16959: PPUSH
16960: CALL_OW 12
16964: PPUSH
16965: LD_INT 12
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 55
// end ; end_of_file
16975: END
// every 0 0$1 trigger omarCountdown do
16976: LD_EXP 22
16980: IFFALSE 17032
16982: GO 16984
16984: DISABLE
// begin enable ;
16985: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16986: LD_ADDR_OWVAR 47
16990: PUSH
16991: LD_STRING #X104-1
16993: PUSH
16994: LD_EXP 22
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17003: LD_ADDR_EXP 22
17007: PUSH
17008: LD_EXP 22
17012: PUSH
17013: LD_INT 35
17015: MINUS
17016: ST_TO_ADDR
// if not omarCountdown then
17017: LD_EXP 22
17021: NOT
17022: IFFALSE 17032
// display_strings :=  ;
17024: LD_ADDR_OWVAR 47
17028: PUSH
17029: LD_STRING 
17031: ST_TO_ADDR
// end ; end_of_file
17032: END
// every 0 0$1 do
17033: GO 17035
17035: DISABLE
// begin enable ;
17036: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17037: LD_STRING updateTimer(
17039: PUSH
17040: LD_OWVAR 1
17044: STR
17045: PUSH
17046: LD_STRING );
17048: STR
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: END
// export function SOS_MapStart ( ) ; begin
17055: LD_INT 0
17057: PPUSH
// if streamModeActive then
17058: LD_EXP 52
17062: IFFALSE 17071
// DefineStreamItems ( true ) ;
17064: LD_INT 1
17066: PPUSH
17067: CALL 18725 0 1
// UpdateFactoryWaypoints ( ) ;
17071: CALL 31586 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17075: CALL 31843 0 0
// end ;
17079: LD_VAR 0 1
17083: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17084: LD_INT 0
17086: PPUSH
// if p2 = 100 then
17087: LD_VAR 0 2
17091: PUSH
17092: LD_INT 100
17094: EQUAL
17095: IFFALSE 18098
// begin if not StreamModeActive then
17097: LD_EXP 52
17101: NOT
17102: IFFALSE 17112
// StreamModeActive := true ;
17104: LD_ADDR_EXP 52
17108: PUSH
17109: LD_INT 1
17111: ST_TO_ADDR
// if p3 = 0 then
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 0
17119: EQUAL
17120: IFFALSE 17126
// InitStreamMode ;
17122: CALL 18261 0 0
// if p3 = 1 then
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 1
17133: EQUAL
17134: IFFALSE 17144
// sRocket := true ;
17136: LD_ADDR_EXP 57
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// if p3 = 2 then
17144: LD_VAR 0 3
17148: PUSH
17149: LD_INT 2
17151: EQUAL
17152: IFFALSE 17162
// sSpeed := true ;
17154: LD_ADDR_EXP 56
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// if p3 = 3 then
17162: LD_VAR 0 3
17166: PUSH
17167: LD_INT 3
17169: EQUAL
17170: IFFALSE 17180
// sEngine := true ;
17172: LD_ADDR_EXP 58
17176: PUSH
17177: LD_INT 1
17179: ST_TO_ADDR
// if p3 = 4 then
17180: LD_VAR 0 3
17184: PUSH
17185: LD_INT 4
17187: EQUAL
17188: IFFALSE 17198
// sSpec := true ;
17190: LD_ADDR_EXP 55
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// if p3 = 5 then
17198: LD_VAR 0 3
17202: PUSH
17203: LD_INT 5
17205: EQUAL
17206: IFFALSE 17216
// sLevel := true ;
17208: LD_ADDR_EXP 59
17212: PUSH
17213: LD_INT 1
17215: ST_TO_ADDR
// if p3 = 6 then
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 6
17223: EQUAL
17224: IFFALSE 17234
// sArmoury := true ;
17226: LD_ADDR_EXP 60
17230: PUSH
17231: LD_INT 1
17233: ST_TO_ADDR
// if p3 = 7 then
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 7
17241: EQUAL
17242: IFFALSE 17252
// sRadar := true ;
17244: LD_ADDR_EXP 61
17248: PUSH
17249: LD_INT 1
17251: ST_TO_ADDR
// if p3 = 8 then
17252: LD_VAR 0 3
17256: PUSH
17257: LD_INT 8
17259: EQUAL
17260: IFFALSE 17270
// sBunker := true ;
17262: LD_ADDR_EXP 62
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// if p3 = 9 then
17270: LD_VAR 0 3
17274: PUSH
17275: LD_INT 9
17277: EQUAL
17278: IFFALSE 17288
// sHack := true ;
17280: LD_ADDR_EXP 63
17284: PUSH
17285: LD_INT 1
17287: ST_TO_ADDR
// if p3 = 10 then
17288: LD_VAR 0 3
17292: PUSH
17293: LD_INT 10
17295: EQUAL
17296: IFFALSE 17306
// sFire := true ;
17298: LD_ADDR_EXP 64
17302: PUSH
17303: LD_INT 1
17305: ST_TO_ADDR
// if p3 = 11 then
17306: LD_VAR 0 3
17310: PUSH
17311: LD_INT 11
17313: EQUAL
17314: IFFALSE 17324
// sRefresh := true ;
17316: LD_ADDR_EXP 65
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// if p3 = 12 then
17324: LD_VAR 0 3
17328: PUSH
17329: LD_INT 12
17331: EQUAL
17332: IFFALSE 17342
// sExp := true ;
17334: LD_ADDR_EXP 66
17338: PUSH
17339: LD_INT 1
17341: ST_TO_ADDR
// if p3 = 13 then
17342: LD_VAR 0 3
17346: PUSH
17347: LD_INT 13
17349: EQUAL
17350: IFFALSE 17360
// sDepot := true ;
17352: LD_ADDR_EXP 67
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
// if p3 = 14 then
17360: LD_VAR 0 3
17364: PUSH
17365: LD_INT 14
17367: EQUAL
17368: IFFALSE 17378
// sFlag := true ;
17370: LD_ADDR_EXP 68
17374: PUSH
17375: LD_INT 1
17377: ST_TO_ADDR
// if p3 = 15 then
17378: LD_VAR 0 3
17382: PUSH
17383: LD_INT 15
17385: EQUAL
17386: IFFALSE 17396
// sKamikadze := true ;
17388: LD_ADDR_EXP 76
17392: PUSH
17393: LD_INT 1
17395: ST_TO_ADDR
// if p3 = 16 then
17396: LD_VAR 0 3
17400: PUSH
17401: LD_INT 16
17403: EQUAL
17404: IFFALSE 17414
// sTroll := true ;
17406: LD_ADDR_EXP 77
17410: PUSH
17411: LD_INT 1
17413: ST_TO_ADDR
// if p3 = 17 then
17414: LD_VAR 0 3
17418: PUSH
17419: LD_INT 17
17421: EQUAL
17422: IFFALSE 17432
// sSlow := true ;
17424: LD_ADDR_EXP 78
17428: PUSH
17429: LD_INT 1
17431: ST_TO_ADDR
// if p3 = 18 then
17432: LD_VAR 0 3
17436: PUSH
17437: LD_INT 18
17439: EQUAL
17440: IFFALSE 17450
// sLack := true ;
17442: LD_ADDR_EXP 79
17446: PUSH
17447: LD_INT 1
17449: ST_TO_ADDR
// if p3 = 19 then
17450: LD_VAR 0 3
17454: PUSH
17455: LD_INT 19
17457: EQUAL
17458: IFFALSE 17468
// sTank := true ;
17460: LD_ADDR_EXP 81
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// if p3 = 20 then
17468: LD_VAR 0 3
17472: PUSH
17473: LD_INT 20
17475: EQUAL
17476: IFFALSE 17486
// sRemote := true ;
17478: LD_ADDR_EXP 82
17482: PUSH
17483: LD_INT 1
17485: ST_TO_ADDR
// if p3 = 21 then
17486: LD_VAR 0 3
17490: PUSH
17491: LD_INT 21
17493: EQUAL
17494: IFFALSE 17504
// sPowell := true ;
17496: LD_ADDR_EXP 83
17500: PUSH
17501: LD_INT 1
17503: ST_TO_ADDR
// if p3 = 22 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 22
17511: EQUAL
17512: IFFALSE 17522
// sTeleport := true ;
17514: LD_ADDR_EXP 86
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// if p3 = 23 then
17522: LD_VAR 0 3
17526: PUSH
17527: LD_INT 23
17529: EQUAL
17530: IFFALSE 17540
// sOilTower := true ;
17532: LD_ADDR_EXP 88
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// if p3 = 24 then
17540: LD_VAR 0 3
17544: PUSH
17545: LD_INT 24
17547: EQUAL
17548: IFFALSE 17558
// sShovel := true ;
17550: LD_ADDR_EXP 89
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// if p3 = 25 then
17558: LD_VAR 0 3
17562: PUSH
17563: LD_INT 25
17565: EQUAL
17566: IFFALSE 17576
// sSheik := true ;
17568: LD_ADDR_EXP 90
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
// if p3 = 26 then
17576: LD_VAR 0 3
17580: PUSH
17581: LD_INT 26
17583: EQUAL
17584: IFFALSE 17594
// sEarthquake := true ;
17586: LD_ADDR_EXP 92
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// if p3 = 27 then
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 27
17601: EQUAL
17602: IFFALSE 17612
// sAI := true ;
17604: LD_ADDR_EXP 93
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// if p3 = 28 then
17612: LD_VAR 0 3
17616: PUSH
17617: LD_INT 28
17619: EQUAL
17620: IFFALSE 17630
// sCargo := true ;
17622: LD_ADDR_EXP 96
17626: PUSH
17627: LD_INT 1
17629: ST_TO_ADDR
// if p3 = 29 then
17630: LD_VAR 0 3
17634: PUSH
17635: LD_INT 29
17637: EQUAL
17638: IFFALSE 17648
// sDLaser := true ;
17640: LD_ADDR_EXP 97
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// if p3 = 30 then
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 30
17655: EQUAL
17656: IFFALSE 17666
// sExchange := true ;
17658: LD_ADDR_EXP 98
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// if p3 = 31 then
17666: LD_VAR 0 3
17670: PUSH
17671: LD_INT 31
17673: EQUAL
17674: IFFALSE 17684
// sFac := true ;
17676: LD_ADDR_EXP 99
17680: PUSH
17681: LD_INT 1
17683: ST_TO_ADDR
// if p3 = 32 then
17684: LD_VAR 0 3
17688: PUSH
17689: LD_INT 32
17691: EQUAL
17692: IFFALSE 17702
// sPower := true ;
17694: LD_ADDR_EXP 100
17698: PUSH
17699: LD_INT 1
17701: ST_TO_ADDR
// if p3 = 33 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 33
17709: EQUAL
17710: IFFALSE 17720
// sRandom := true ;
17712: LD_ADDR_EXP 101
17716: PUSH
17717: LD_INT 1
17719: ST_TO_ADDR
// if p3 = 34 then
17720: LD_VAR 0 3
17724: PUSH
17725: LD_INT 34
17727: EQUAL
17728: IFFALSE 17738
// sShield := true ;
17730: LD_ADDR_EXP 102
17734: PUSH
17735: LD_INT 1
17737: ST_TO_ADDR
// if p3 = 35 then
17738: LD_VAR 0 3
17742: PUSH
17743: LD_INT 35
17745: EQUAL
17746: IFFALSE 17756
// sTime := true ;
17748: LD_ADDR_EXP 103
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
// if p3 = 36 then
17756: LD_VAR 0 3
17760: PUSH
17761: LD_INT 36
17763: EQUAL
17764: IFFALSE 17774
// sTools := true ;
17766: LD_ADDR_EXP 104
17770: PUSH
17771: LD_INT 1
17773: ST_TO_ADDR
// if p3 = 101 then
17774: LD_VAR 0 3
17778: PUSH
17779: LD_INT 101
17781: EQUAL
17782: IFFALSE 17792
// sSold := true ;
17784: LD_ADDR_EXP 69
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// if p3 = 102 then
17792: LD_VAR 0 3
17796: PUSH
17797: LD_INT 102
17799: EQUAL
17800: IFFALSE 17810
// sDiff := true ;
17802: LD_ADDR_EXP 70
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// if p3 = 103 then
17810: LD_VAR 0 3
17814: PUSH
17815: LD_INT 103
17817: EQUAL
17818: IFFALSE 17828
// sFog := true ;
17820: LD_ADDR_EXP 73
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// if p3 = 104 then
17828: LD_VAR 0 3
17832: PUSH
17833: LD_INT 104
17835: EQUAL
17836: IFFALSE 17846
// sReset := true ;
17838: LD_ADDR_EXP 74
17842: PUSH
17843: LD_INT 1
17845: ST_TO_ADDR
// if p3 = 105 then
17846: LD_VAR 0 3
17850: PUSH
17851: LD_INT 105
17853: EQUAL
17854: IFFALSE 17864
// sSun := true ;
17856: LD_ADDR_EXP 75
17860: PUSH
17861: LD_INT 1
17863: ST_TO_ADDR
// if p3 = 106 then
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 106
17871: EQUAL
17872: IFFALSE 17882
// sTiger := true ;
17874: LD_ADDR_EXP 71
17878: PUSH
17879: LD_INT 1
17881: ST_TO_ADDR
// if p3 = 107 then
17882: LD_VAR 0 3
17886: PUSH
17887: LD_INT 107
17889: EQUAL
17890: IFFALSE 17900
// sBomb := true ;
17892: LD_ADDR_EXP 72
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// if p3 = 108 then
17900: LD_VAR 0 3
17904: PUSH
17905: LD_INT 108
17907: EQUAL
17908: IFFALSE 17918
// sWound := true ;
17910: LD_ADDR_EXP 80
17914: PUSH
17915: LD_INT 1
17917: ST_TO_ADDR
// if p3 = 109 then
17918: LD_VAR 0 3
17922: PUSH
17923: LD_INT 109
17925: EQUAL
17926: IFFALSE 17936
// sBetray := true ;
17928: LD_ADDR_EXP 84
17932: PUSH
17933: LD_INT 1
17935: ST_TO_ADDR
// if p3 = 110 then
17936: LD_VAR 0 3
17940: PUSH
17941: LD_INT 110
17943: EQUAL
17944: IFFALSE 17954
// sContamin := true ;
17946: LD_ADDR_EXP 85
17950: PUSH
17951: LD_INT 1
17953: ST_TO_ADDR
// if p3 = 111 then
17954: LD_VAR 0 3
17958: PUSH
17959: LD_INT 111
17961: EQUAL
17962: IFFALSE 17972
// sOil := true ;
17964: LD_ADDR_EXP 87
17968: PUSH
17969: LD_INT 1
17971: ST_TO_ADDR
// if p3 = 112 then
17972: LD_VAR 0 3
17976: PUSH
17977: LD_INT 112
17979: EQUAL
17980: IFFALSE 17990
// sStu := true ;
17982: LD_ADDR_EXP 91
17986: PUSH
17987: LD_INT 1
17989: ST_TO_ADDR
// if p3 = 113 then
17990: LD_VAR 0 3
17994: PUSH
17995: LD_INT 113
17997: EQUAL
17998: IFFALSE 18008
// sBazooka := true ;
18000: LD_ADDR_EXP 94
18004: PUSH
18005: LD_INT 1
18007: ST_TO_ADDR
// if p3 = 114 then
18008: LD_VAR 0 3
18012: PUSH
18013: LD_INT 114
18015: EQUAL
18016: IFFALSE 18026
// sMortar := true ;
18018: LD_ADDR_EXP 95
18022: PUSH
18023: LD_INT 1
18025: ST_TO_ADDR
// if p3 = 115 then
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 115
18033: EQUAL
18034: IFFALSE 18044
// sRanger := true ;
18036: LD_ADDR_EXP 105
18040: PUSH
18041: LD_INT 1
18043: ST_TO_ADDR
// if p3 = 116 then
18044: LD_VAR 0 3
18048: PUSH
18049: LD_INT 116
18051: EQUAL
18052: IFFALSE 18062
// sComputer := true ;
18054: LD_ADDR_EXP 106
18058: PUSH
18059: LD_INT 1
18061: ST_TO_ADDR
// if p3 = 117 then
18062: LD_VAR 0 3
18066: PUSH
18067: LD_INT 117
18069: EQUAL
18070: IFFALSE 18080
// s30 := true ;
18072: LD_ADDR_EXP 107
18076: PUSH
18077: LD_INT 1
18079: ST_TO_ADDR
// if p3 = 118 then
18080: LD_VAR 0 3
18084: PUSH
18085: LD_INT 118
18087: EQUAL
18088: IFFALSE 18098
// s60 := true ;
18090: LD_ADDR_EXP 108
18094: PUSH
18095: LD_INT 1
18097: ST_TO_ADDR
// end ; if p2 = 101 then
18098: LD_VAR 0 2
18102: PUSH
18103: LD_INT 101
18105: EQUAL
18106: IFFALSE 18234
// begin case p3 of 1 :
18108: LD_VAR 0 3
18112: PUSH
18113: LD_INT 1
18115: DOUBLE
18116: EQUAL
18117: IFTRUE 18121
18119: GO 18128
18121: POP
// hHackUnlimitedResources ; 2 :
18122: CALL 30332 0 0
18126: GO 18234
18128: LD_INT 2
18130: DOUBLE
18131: EQUAL
18132: IFTRUE 18136
18134: GO 18143
18136: POP
// hHackSetLevel10 ; 3 :
18137: CALL 30465 0 0
18141: GO 18234
18143: LD_INT 3
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18158
18151: POP
// hHackSetLevel10YourUnits ; 4 :
18152: CALL 30550 0 0
18156: GO 18234
18158: LD_INT 4
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18173
18166: POP
// hHackInvincible ; 5 :
18167: CALL 30998 0 0
18171: GO 18234
18173: LD_INT 5
18175: DOUBLE
18176: EQUAL
18177: IFTRUE 18181
18179: GO 18188
18181: POP
// hHackInvisible ; 6 :
18182: CALL 31109 0 0
18186: GO 18234
18188: LD_INT 6
18190: DOUBLE
18191: EQUAL
18192: IFTRUE 18196
18194: GO 18203
18196: POP
// hHackChangeYourSide ; 7 :
18197: CALL 31166 0 0
18201: GO 18234
18203: LD_INT 7
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18218
18211: POP
// hHackChangeUnitSide ; 8 :
18212: CALL 31208 0 0
18216: GO 18234
18218: LD_INT 8
18220: DOUBLE
18221: EQUAL
18222: IFTRUE 18226
18224: GO 18233
18226: POP
// hHackFog ; end ;
18227: CALL 31309 0 0
18231: GO 18234
18233: POP
// end ; end ;
18234: LD_VAR 0 7
18238: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18239: GO 18241
18241: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18242: LD_STRING initStreamRollete();
18244: PPUSH
18245: CALL_OW 559
// InitStreamMode ;
18249: CALL 18261 0 0
// DefineStreamItems ( false ) ;
18253: LD_INT 0
18255: PPUSH
18256: CALL 18725 0 1
// end ;
18260: END
// function InitStreamMode ; begin
18261: LD_INT 0
18263: PPUSH
// streamModeActive := false ;
18264: LD_ADDR_EXP 52
18268: PUSH
18269: LD_INT 0
18271: ST_TO_ADDR
// normalCounter := 36 ;
18272: LD_ADDR_EXP 53
18276: PUSH
18277: LD_INT 36
18279: ST_TO_ADDR
// hardcoreCounter := 18 ;
18280: LD_ADDR_EXP 54
18284: PUSH
18285: LD_INT 18
18287: ST_TO_ADDR
// sRocket := false ;
18288: LD_ADDR_EXP 57
18292: PUSH
18293: LD_INT 0
18295: ST_TO_ADDR
// sSpeed := false ;
18296: LD_ADDR_EXP 56
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// sEngine := false ;
18304: LD_ADDR_EXP 58
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// sSpec := false ;
18312: LD_ADDR_EXP 55
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// sLevel := false ;
18320: LD_ADDR_EXP 59
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// sArmoury := false ;
18328: LD_ADDR_EXP 60
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// sRadar := false ;
18336: LD_ADDR_EXP 61
18340: PUSH
18341: LD_INT 0
18343: ST_TO_ADDR
// sBunker := false ;
18344: LD_ADDR_EXP 62
18348: PUSH
18349: LD_INT 0
18351: ST_TO_ADDR
// sHack := false ;
18352: LD_ADDR_EXP 63
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sFire := false ;
18360: LD_ADDR_EXP 64
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sRefresh := false ;
18368: LD_ADDR_EXP 65
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sExp := false ;
18376: LD_ADDR_EXP 66
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sDepot := false ;
18384: LD_ADDR_EXP 67
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sFlag := false ;
18392: LD_ADDR_EXP 68
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sKamikadze := false ;
18400: LD_ADDR_EXP 76
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sTroll := false ;
18408: LD_ADDR_EXP 77
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sSlow := false ;
18416: LD_ADDR_EXP 78
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sLack := false ;
18424: LD_ADDR_EXP 79
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sTank := false ;
18432: LD_ADDR_EXP 81
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sRemote := false ;
18440: LD_ADDR_EXP 82
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// sPowell := false ;
18448: LD_ADDR_EXP 83
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// sTeleport := false ;
18456: LD_ADDR_EXP 86
18460: PUSH
18461: LD_INT 0
18463: ST_TO_ADDR
// sOilTower := false ;
18464: LD_ADDR_EXP 88
18468: PUSH
18469: LD_INT 0
18471: ST_TO_ADDR
// sShovel := false ;
18472: LD_ADDR_EXP 89
18476: PUSH
18477: LD_INT 0
18479: ST_TO_ADDR
// sSheik := false ;
18480: LD_ADDR_EXP 90
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// sEarthquake := false ;
18488: LD_ADDR_EXP 92
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// sAI := false ;
18496: LD_ADDR_EXP 93
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// sCargo := false ;
18504: LD_ADDR_EXP 96
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sDLaser := false ;
18512: LD_ADDR_EXP 97
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// sExchange := false ;
18520: LD_ADDR_EXP 98
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
// sFac := false ;
18528: LD_ADDR_EXP 99
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// sPower := false ;
18536: LD_ADDR_EXP 100
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// sRandom := false ;
18544: LD_ADDR_EXP 101
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// sShield := false ;
18552: LD_ADDR_EXP 102
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// sTime := false ;
18560: LD_ADDR_EXP 103
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// sTools := false ;
18568: LD_ADDR_EXP 104
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// sSold := false ;
18576: LD_ADDR_EXP 69
18580: PUSH
18581: LD_INT 0
18583: ST_TO_ADDR
// sDiff := false ;
18584: LD_ADDR_EXP 70
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// sFog := false ;
18592: LD_ADDR_EXP 73
18596: PUSH
18597: LD_INT 0
18599: ST_TO_ADDR
// sReset := false ;
18600: LD_ADDR_EXP 74
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
// sSun := false ;
18608: LD_ADDR_EXP 75
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// sTiger := false ;
18616: LD_ADDR_EXP 71
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// sBomb := false ;
18624: LD_ADDR_EXP 72
18628: PUSH
18629: LD_INT 0
18631: ST_TO_ADDR
// sWound := false ;
18632: LD_ADDR_EXP 80
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
// sBetray := false ;
18640: LD_ADDR_EXP 84
18644: PUSH
18645: LD_INT 0
18647: ST_TO_ADDR
// sContamin := false ;
18648: LD_ADDR_EXP 85
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// sOil := false ;
18656: LD_ADDR_EXP 87
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// sStu := false ;
18664: LD_ADDR_EXP 91
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// sBazooka := false ;
18672: LD_ADDR_EXP 94
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// sMortar := false ;
18680: LD_ADDR_EXP 95
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// sRanger := false ;
18688: LD_ADDR_EXP 105
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// sComputer := false ;
18696: LD_ADDR_EXP 106
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// s30 := false ;
18704: LD_ADDR_EXP 107
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// s60 := false ;
18712: LD_ADDR_EXP 108
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// end ;
18720: LD_VAR 0 1
18724: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18725: LD_INT 0
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
18731: PPUSH
18732: PPUSH
18733: PPUSH
// result := [ ] ;
18734: LD_ADDR_VAR 0 2
18738: PUSH
18739: EMPTY
18740: ST_TO_ADDR
// if campaign_id = 1 then
18741: LD_OWVAR 69
18745: PUSH
18746: LD_INT 1
18748: EQUAL
18749: IFFALSE 21915
// begin case mission_number of 1 :
18751: LD_OWVAR 70
18755: PUSH
18756: LD_INT 1
18758: DOUBLE
18759: EQUAL
18760: IFTRUE 18764
18762: GO 18840
18764: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 4
18775: PUSH
18776: LD_INT 11
18778: PUSH
18779: LD_INT 12
18781: PUSH
18782: LD_INT 15
18784: PUSH
18785: LD_INT 16
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_INT 23
18793: PUSH
18794: LD_INT 26
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 101
18810: PUSH
18811: LD_INT 102
18813: PUSH
18814: LD_INT 106
18816: PUSH
18817: LD_INT 116
18819: PUSH
18820: LD_INT 117
18822: PUSH
18823: LD_INT 118
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: ST_TO_ADDR
18838: GO 21913
18840: LD_INT 2
18842: DOUBLE
18843: EQUAL
18844: IFTRUE 18848
18846: GO 18932
18848: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: LD_INT 4
18859: PUSH
18860: LD_INT 11
18862: PUSH
18863: LD_INT 12
18865: PUSH
18866: LD_INT 15
18868: PUSH
18869: LD_INT 16
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_INT 23
18877: PUSH
18878: LD_INT 26
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 101
18894: PUSH
18895: LD_INT 102
18897: PUSH
18898: LD_INT 105
18900: PUSH
18901: LD_INT 106
18903: PUSH
18904: LD_INT 108
18906: PUSH
18907: LD_INT 116
18909: PUSH
18910: LD_INT 117
18912: PUSH
18913: LD_INT 118
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: ST_TO_ADDR
18930: GO 21913
18932: LD_INT 3
18934: DOUBLE
18935: EQUAL
18936: IFTRUE 18940
18938: GO 19028
18940: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18941: LD_ADDR_VAR 0 2
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: LD_INT 4
18951: PUSH
18952: LD_INT 5
18954: PUSH
18955: LD_INT 11
18957: PUSH
18958: LD_INT 12
18960: PUSH
18961: LD_INT 15
18963: PUSH
18964: LD_INT 16
18966: PUSH
18967: LD_INT 22
18969: PUSH
18970: LD_INT 26
18972: PUSH
18973: LD_INT 36
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 101
18990: PUSH
18991: LD_INT 102
18993: PUSH
18994: LD_INT 105
18996: PUSH
18997: LD_INT 106
18999: PUSH
19000: LD_INT 108
19002: PUSH
19003: LD_INT 116
19005: PUSH
19006: LD_INT 117
19008: PUSH
19009: LD_INT 118
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 21913
19028: LD_INT 4
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19132
19036: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_INT 2
19044: PUSH
19045: LD_INT 4
19047: PUSH
19048: LD_INT 5
19050: PUSH
19051: LD_INT 8
19053: PUSH
19054: LD_INT 11
19056: PUSH
19057: LD_INT 12
19059: PUSH
19060: LD_INT 15
19062: PUSH
19063: LD_INT 16
19065: PUSH
19066: LD_INT 22
19068: PUSH
19069: LD_INT 23
19071: PUSH
19072: LD_INT 26
19074: PUSH
19075: LD_INT 36
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 101
19094: PUSH
19095: LD_INT 102
19097: PUSH
19098: LD_INT 105
19100: PUSH
19101: LD_INT 106
19103: PUSH
19104: LD_INT 108
19106: PUSH
19107: LD_INT 116
19109: PUSH
19110: LD_INT 117
19112: PUSH
19113: LD_INT 118
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: ST_TO_ADDR
19130: GO 21913
19132: LD_INT 5
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19252
19140: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: LD_INT 4
19151: PUSH
19152: LD_INT 5
19154: PUSH
19155: LD_INT 6
19157: PUSH
19158: LD_INT 8
19160: PUSH
19161: LD_INT 11
19163: PUSH
19164: LD_INT 12
19166: PUSH
19167: LD_INT 15
19169: PUSH
19170: LD_INT 16
19172: PUSH
19173: LD_INT 22
19175: PUSH
19176: LD_INT 23
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 36
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 101
19206: PUSH
19207: LD_INT 102
19209: PUSH
19210: LD_INT 105
19212: PUSH
19213: LD_INT 106
19215: PUSH
19216: LD_INT 108
19218: PUSH
19219: LD_INT 109
19221: PUSH
19222: LD_INT 112
19224: PUSH
19225: LD_INT 116
19227: PUSH
19228: LD_INT 117
19230: PUSH
19231: LD_INT 118
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 21913
19252: LD_INT 6
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19392
19260: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 4
19271: PUSH
19272: LD_INT 5
19274: PUSH
19275: LD_INT 6
19277: PUSH
19278: LD_INT 8
19280: PUSH
19281: LD_INT 11
19283: PUSH
19284: LD_INT 12
19286: PUSH
19287: LD_INT 15
19289: PUSH
19290: LD_INT 16
19292: PUSH
19293: LD_INT 20
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 30
19313: PUSH
19314: LD_INT 31
19316: PUSH
19317: LD_INT 32
19319: PUSH
19320: LD_INT 36
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 101
19346: PUSH
19347: LD_INT 102
19349: PUSH
19350: LD_INT 105
19352: PUSH
19353: LD_INT 106
19355: PUSH
19356: LD_INT 108
19358: PUSH
19359: LD_INT 109
19361: PUSH
19362: LD_INT 112
19364: PUSH
19365: LD_INT 116
19367: PUSH
19368: LD_INT 117
19370: PUSH
19371: LD_INT 118
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 21913
19392: LD_INT 7
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19512
19400: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19401: LD_ADDR_VAR 0 2
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 4
19411: PUSH
19412: LD_INT 5
19414: PUSH
19415: LD_INT 7
19417: PUSH
19418: LD_INT 11
19420: PUSH
19421: LD_INT 12
19423: PUSH
19424: LD_INT 15
19426: PUSH
19427: LD_INT 16
19429: PUSH
19430: LD_INT 20
19432: PUSH
19433: LD_INT 21
19435: PUSH
19436: LD_INT 22
19438: PUSH
19439: LD_INT 23
19441: PUSH
19442: LD_INT 25
19444: PUSH
19445: LD_INT 26
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 101
19466: PUSH
19467: LD_INT 102
19469: PUSH
19470: LD_INT 103
19472: PUSH
19473: LD_INT 105
19475: PUSH
19476: LD_INT 106
19478: PUSH
19479: LD_INT 108
19481: PUSH
19482: LD_INT 112
19484: PUSH
19485: LD_INT 116
19487: PUSH
19488: LD_INT 117
19490: PUSH
19491: LD_INT 118
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: ST_TO_ADDR
19510: GO 21913
19512: LD_INT 8
19514: DOUBLE
19515: EQUAL
19516: IFTRUE 19520
19518: GO 19660
19520: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19521: LD_ADDR_VAR 0 2
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: LD_INT 5
19534: PUSH
19535: LD_INT 6
19537: PUSH
19538: LD_INT 7
19540: PUSH
19541: LD_INT 8
19543: PUSH
19544: LD_INT 11
19546: PUSH
19547: LD_INT 12
19549: PUSH
19550: LD_INT 15
19552: PUSH
19553: LD_INT 16
19555: PUSH
19556: LD_INT 20
19558: PUSH
19559: LD_INT 21
19561: PUSH
19562: LD_INT 22
19564: PUSH
19565: LD_INT 23
19567: PUSH
19568: LD_INT 25
19570: PUSH
19571: LD_INT 26
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_INT 31
19579: PUSH
19580: LD_INT 32
19582: PUSH
19583: LD_INT 36
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 101
19610: PUSH
19611: LD_INT 102
19613: PUSH
19614: LD_INT 103
19616: PUSH
19617: LD_INT 105
19619: PUSH
19620: LD_INT 106
19622: PUSH
19623: LD_INT 108
19625: PUSH
19626: LD_INT 109
19628: PUSH
19629: LD_INT 112
19631: PUSH
19632: LD_INT 116
19634: PUSH
19635: LD_INT 117
19637: PUSH
19638: LD_INT 118
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: ST_TO_ADDR
19658: GO 21913
19660: LD_INT 9
19662: DOUBLE
19663: EQUAL
19664: IFTRUE 19668
19666: GO 19816
19668: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19669: LD_ADDR_VAR 0 2
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 4
19679: PUSH
19680: LD_INT 5
19682: PUSH
19683: LD_INT 6
19685: PUSH
19686: LD_INT 7
19688: PUSH
19689: LD_INT 8
19691: PUSH
19692: LD_INT 11
19694: PUSH
19695: LD_INT 12
19697: PUSH
19698: LD_INT 15
19700: PUSH
19701: LD_INT 16
19703: PUSH
19704: LD_INT 20
19706: PUSH
19707: LD_INT 21
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_INT 23
19715: PUSH
19716: LD_INT 25
19718: PUSH
19719: LD_INT 26
19721: PUSH
19722: LD_INT 28
19724: PUSH
19725: LD_INT 30
19727: PUSH
19728: LD_INT 31
19730: PUSH
19731: LD_INT 32
19733: PUSH
19734: LD_INT 36
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 101
19762: PUSH
19763: LD_INT 102
19765: PUSH
19766: LD_INT 103
19768: PUSH
19769: LD_INT 105
19771: PUSH
19772: LD_INT 106
19774: PUSH
19775: LD_INT 108
19777: PUSH
19778: LD_INT 109
19780: PUSH
19781: LD_INT 112
19783: PUSH
19784: LD_INT 114
19786: PUSH
19787: LD_INT 116
19789: PUSH
19790: LD_INT 117
19792: PUSH
19793: LD_INT 118
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 21913
19816: LD_INT 10
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 20020
19824: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 4
19835: PUSH
19836: LD_INT 5
19838: PUSH
19839: LD_INT 6
19841: PUSH
19842: LD_INT 7
19844: PUSH
19845: LD_INT 8
19847: PUSH
19848: LD_INT 9
19850: PUSH
19851: LD_INT 10
19853: PUSH
19854: LD_INT 11
19856: PUSH
19857: LD_INT 12
19859: PUSH
19860: LD_INT 13
19862: PUSH
19863: LD_INT 14
19865: PUSH
19866: LD_INT 15
19868: PUSH
19869: LD_INT 16
19871: PUSH
19872: LD_INT 17
19874: PUSH
19875: LD_INT 18
19877: PUSH
19878: LD_INT 19
19880: PUSH
19881: LD_INT 20
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 22
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 24
19895: PUSH
19896: LD_INT 25
19898: PUSH
19899: LD_INT 26
19901: PUSH
19902: LD_INT 28
19904: PUSH
19905: LD_INT 30
19907: PUSH
19908: LD_INT 31
19910: PUSH
19911: LD_INT 32
19913: PUSH
19914: LD_INT 36
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 101
19950: PUSH
19951: LD_INT 102
19953: PUSH
19954: LD_INT 103
19956: PUSH
19957: LD_INT 104
19959: PUSH
19960: LD_INT 105
19962: PUSH
19963: LD_INT 106
19965: PUSH
19966: LD_INT 107
19968: PUSH
19969: LD_INT 108
19971: PUSH
19972: LD_INT 109
19974: PUSH
19975: LD_INT 110
19977: PUSH
19978: LD_INT 111
19980: PUSH
19981: LD_INT 112
19983: PUSH
19984: LD_INT 114
19986: PUSH
19987: LD_INT 116
19989: PUSH
19990: LD_INT 117
19992: PUSH
19993: LD_INT 118
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: ST_TO_ADDR
20018: GO 21913
20020: LD_INT 11
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20232
20028: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: LD_INT 3
20039: PUSH
20040: LD_INT 4
20042: PUSH
20043: LD_INT 5
20045: PUSH
20046: LD_INT 6
20048: PUSH
20049: LD_INT 7
20051: PUSH
20052: LD_INT 8
20054: PUSH
20055: LD_INT 9
20057: PUSH
20058: LD_INT 10
20060: PUSH
20061: LD_INT 11
20063: PUSH
20064: LD_INT 12
20066: PUSH
20067: LD_INT 13
20069: PUSH
20070: LD_INT 14
20072: PUSH
20073: LD_INT 15
20075: PUSH
20076: LD_INT 16
20078: PUSH
20079: LD_INT 17
20081: PUSH
20082: LD_INT 18
20084: PUSH
20085: LD_INT 19
20087: PUSH
20088: LD_INT 20
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 22
20096: PUSH
20097: LD_INT 23
20099: PUSH
20100: LD_INT 24
20102: PUSH
20103: LD_INT 25
20105: PUSH
20106: LD_INT 26
20108: PUSH
20109: LD_INT 28
20111: PUSH
20112: LD_INT 30
20114: PUSH
20115: LD_INT 31
20117: PUSH
20118: LD_INT 32
20120: PUSH
20121: LD_INT 34
20123: PUSH
20124: LD_INT 36
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 101
20162: PUSH
20163: LD_INT 102
20165: PUSH
20166: LD_INT 103
20168: PUSH
20169: LD_INT 104
20171: PUSH
20172: LD_INT 105
20174: PUSH
20175: LD_INT 106
20177: PUSH
20178: LD_INT 107
20180: PUSH
20181: LD_INT 108
20183: PUSH
20184: LD_INT 109
20186: PUSH
20187: LD_INT 110
20189: PUSH
20190: LD_INT 111
20192: PUSH
20193: LD_INT 112
20195: PUSH
20196: LD_INT 114
20198: PUSH
20199: LD_INT 116
20201: PUSH
20202: LD_INT 117
20204: PUSH
20205: LD_INT 118
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: ST_TO_ADDR
20230: GO 21913
20232: LD_INT 12
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20460
20240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 3
20254: PUSH
20255: LD_INT 4
20257: PUSH
20258: LD_INT 5
20260: PUSH
20261: LD_INT 6
20263: PUSH
20264: LD_INT 7
20266: PUSH
20267: LD_INT 8
20269: PUSH
20270: LD_INT 9
20272: PUSH
20273: LD_INT 10
20275: PUSH
20276: LD_INT 11
20278: PUSH
20279: LD_INT 12
20281: PUSH
20282: LD_INT 13
20284: PUSH
20285: LD_INT 14
20287: PUSH
20288: LD_INT 15
20290: PUSH
20291: LD_INT 16
20293: PUSH
20294: LD_INT 17
20296: PUSH
20297: LD_INT 18
20299: PUSH
20300: LD_INT 19
20302: PUSH
20303: LD_INT 20
20305: PUSH
20306: LD_INT 21
20308: PUSH
20309: LD_INT 22
20311: PUSH
20312: LD_INT 23
20314: PUSH
20315: LD_INT 24
20317: PUSH
20318: LD_INT 25
20320: PUSH
20321: LD_INT 26
20323: PUSH
20324: LD_INT 27
20326: PUSH
20327: LD_INT 28
20329: PUSH
20330: LD_INT 30
20332: PUSH
20333: LD_INT 31
20335: PUSH
20336: LD_INT 32
20338: PUSH
20339: LD_INT 33
20341: PUSH
20342: LD_INT 34
20344: PUSH
20345: LD_INT 36
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 101
20386: PUSH
20387: LD_INT 102
20389: PUSH
20390: LD_INT 103
20392: PUSH
20393: LD_INT 104
20395: PUSH
20396: LD_INT 105
20398: PUSH
20399: LD_INT 106
20401: PUSH
20402: LD_INT 107
20404: PUSH
20405: LD_INT 108
20407: PUSH
20408: LD_INT 109
20410: PUSH
20411: LD_INT 110
20413: PUSH
20414: LD_INT 111
20416: PUSH
20417: LD_INT 112
20419: PUSH
20420: LD_INT 113
20422: PUSH
20423: LD_INT 114
20425: PUSH
20426: LD_INT 116
20428: PUSH
20429: LD_INT 117
20431: PUSH
20432: LD_INT 118
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 21913
20460: LD_INT 13
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20676
20468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: LD_INT 8
20491: PUSH
20492: LD_INT 9
20494: PUSH
20495: LD_INT 10
20497: PUSH
20498: LD_INT 11
20500: PUSH
20501: LD_INT 12
20503: PUSH
20504: LD_INT 14
20506: PUSH
20507: LD_INT 15
20509: PUSH
20510: LD_INT 16
20512: PUSH
20513: LD_INT 17
20515: PUSH
20516: LD_INT 18
20518: PUSH
20519: LD_INT 19
20521: PUSH
20522: LD_INT 20
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 24
20536: PUSH
20537: LD_INT 25
20539: PUSH
20540: LD_INT 26
20542: PUSH
20543: LD_INT 27
20545: PUSH
20546: LD_INT 28
20548: PUSH
20549: LD_INT 30
20551: PUSH
20552: LD_INT 31
20554: PUSH
20555: LD_INT 32
20557: PUSH
20558: LD_INT 33
20560: PUSH
20561: LD_INT 34
20563: PUSH
20564: LD_INT 36
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 101
20602: PUSH
20603: LD_INT 102
20605: PUSH
20606: LD_INT 103
20608: PUSH
20609: LD_INT 104
20611: PUSH
20612: LD_INT 105
20614: PUSH
20615: LD_INT 106
20617: PUSH
20618: LD_INT 107
20620: PUSH
20621: LD_INT 108
20623: PUSH
20624: LD_INT 109
20626: PUSH
20627: LD_INT 110
20629: PUSH
20630: LD_INT 111
20632: PUSH
20633: LD_INT 112
20635: PUSH
20636: LD_INT 113
20638: PUSH
20639: LD_INT 114
20641: PUSH
20642: LD_INT 116
20644: PUSH
20645: LD_INT 117
20647: PUSH
20648: LD_INT 118
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: ST_TO_ADDR
20674: GO 21913
20676: LD_INT 14
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20908
20684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 3
20698: PUSH
20699: LD_INT 4
20701: PUSH
20702: LD_INT 5
20704: PUSH
20705: LD_INT 6
20707: PUSH
20708: LD_INT 7
20710: PUSH
20711: LD_INT 8
20713: PUSH
20714: LD_INT 9
20716: PUSH
20717: LD_INT 10
20719: PUSH
20720: LD_INT 11
20722: PUSH
20723: LD_INT 12
20725: PUSH
20726: LD_INT 13
20728: PUSH
20729: LD_INT 14
20731: PUSH
20732: LD_INT 15
20734: PUSH
20735: LD_INT 16
20737: PUSH
20738: LD_INT 17
20740: PUSH
20741: LD_INT 18
20743: PUSH
20744: LD_INT 19
20746: PUSH
20747: LD_INT 20
20749: PUSH
20750: LD_INT 21
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_INT 23
20758: PUSH
20759: LD_INT 24
20761: PUSH
20762: LD_INT 25
20764: PUSH
20765: LD_INT 26
20767: PUSH
20768: LD_INT 27
20770: PUSH
20771: LD_INT 28
20773: PUSH
20774: LD_INT 29
20776: PUSH
20777: LD_INT 30
20779: PUSH
20780: LD_INT 31
20782: PUSH
20783: LD_INT 32
20785: PUSH
20786: LD_INT 33
20788: PUSH
20789: LD_INT 34
20791: PUSH
20792: LD_INT 36
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 101
20834: PUSH
20835: LD_INT 102
20837: PUSH
20838: LD_INT 103
20840: PUSH
20841: LD_INT 104
20843: PUSH
20844: LD_INT 105
20846: PUSH
20847: LD_INT 106
20849: PUSH
20850: LD_INT 107
20852: PUSH
20853: LD_INT 108
20855: PUSH
20856: LD_INT 109
20858: PUSH
20859: LD_INT 110
20861: PUSH
20862: LD_INT 111
20864: PUSH
20865: LD_INT 112
20867: PUSH
20868: LD_INT 113
20870: PUSH
20871: LD_INT 114
20873: PUSH
20874: LD_INT 116
20876: PUSH
20877: LD_INT 117
20879: PUSH
20880: LD_INT 118
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: ST_TO_ADDR
20906: GO 21913
20908: LD_INT 15
20910: DOUBLE
20911: EQUAL
20912: IFTRUE 20916
20914: GO 21140
20916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20917: LD_ADDR_VAR 0 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: LD_INT 3
20930: PUSH
20931: LD_INT 4
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: LD_INT 6
20939: PUSH
20940: LD_INT 7
20942: PUSH
20943: LD_INT 8
20945: PUSH
20946: LD_INT 9
20948: PUSH
20949: LD_INT 10
20951: PUSH
20952: LD_INT 11
20954: PUSH
20955: LD_INT 12
20957: PUSH
20958: LD_INT 13
20960: PUSH
20961: LD_INT 14
20963: PUSH
20964: LD_INT 15
20966: PUSH
20967: LD_INT 16
20969: PUSH
20970: LD_INT 17
20972: PUSH
20973: LD_INT 18
20975: PUSH
20976: LD_INT 19
20978: PUSH
20979: LD_INT 20
20981: PUSH
20982: LD_INT 21
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_INT 23
20990: PUSH
20991: LD_INT 24
20993: PUSH
20994: LD_INT 25
20996: PUSH
20997: LD_INT 26
20999: PUSH
21000: LD_INT 27
21002: PUSH
21003: LD_INT 28
21005: PUSH
21006: LD_INT 29
21008: PUSH
21009: LD_INT 30
21011: PUSH
21012: LD_INT 31
21014: PUSH
21015: LD_INT 32
21017: PUSH
21018: LD_INT 33
21020: PUSH
21021: LD_INT 34
21023: PUSH
21024: LD_INT 36
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 101
21066: PUSH
21067: LD_INT 102
21069: PUSH
21070: LD_INT 103
21072: PUSH
21073: LD_INT 104
21075: PUSH
21076: LD_INT 105
21078: PUSH
21079: LD_INT 106
21081: PUSH
21082: LD_INT 107
21084: PUSH
21085: LD_INT 108
21087: PUSH
21088: LD_INT 109
21090: PUSH
21091: LD_INT 110
21093: PUSH
21094: LD_INT 111
21096: PUSH
21097: LD_INT 112
21099: PUSH
21100: LD_INT 113
21102: PUSH
21103: LD_INT 114
21105: PUSH
21106: LD_INT 116
21108: PUSH
21109: LD_INT 117
21111: PUSH
21112: LD_INT 118
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: ST_TO_ADDR
21138: GO 21913
21140: LD_INT 16
21142: DOUBLE
21143: EQUAL
21144: IFTRUE 21148
21146: GO 21284
21148: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21149: LD_ADDR_VAR 0 2
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: LD_INT 4
21159: PUSH
21160: LD_INT 5
21162: PUSH
21163: LD_INT 7
21165: PUSH
21166: LD_INT 11
21168: PUSH
21169: LD_INT 12
21171: PUSH
21172: LD_INT 15
21174: PUSH
21175: LD_INT 16
21177: PUSH
21178: LD_INT 20
21180: PUSH
21181: LD_INT 21
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_INT 23
21189: PUSH
21190: LD_INT 25
21192: PUSH
21193: LD_INT 26
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 31
21201: PUSH
21202: LD_INT 32
21204: PUSH
21205: LD_INT 33
21207: PUSH
21208: LD_INT 34
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 101
21234: PUSH
21235: LD_INT 102
21237: PUSH
21238: LD_INT 103
21240: PUSH
21241: LD_INT 106
21243: PUSH
21244: LD_INT 108
21246: PUSH
21247: LD_INT 112
21249: PUSH
21250: LD_INT 113
21252: PUSH
21253: LD_INT 114
21255: PUSH
21256: LD_INT 116
21258: PUSH
21259: LD_INT 117
21261: PUSH
21262: LD_INT 118
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: ST_TO_ADDR
21282: GO 21913
21284: LD_INT 17
21286: DOUBLE
21287: EQUAL
21288: IFTRUE 21292
21290: GO 21516
21292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21293: LD_ADDR_VAR 0 2
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: LD_INT 3
21306: PUSH
21307: LD_INT 4
21309: PUSH
21310: LD_INT 5
21312: PUSH
21313: LD_INT 6
21315: PUSH
21316: LD_INT 7
21318: PUSH
21319: LD_INT 8
21321: PUSH
21322: LD_INT 9
21324: PUSH
21325: LD_INT 10
21327: PUSH
21328: LD_INT 11
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 13
21336: PUSH
21337: LD_INT 14
21339: PUSH
21340: LD_INT 15
21342: PUSH
21343: LD_INT 16
21345: PUSH
21346: LD_INT 17
21348: PUSH
21349: LD_INT 18
21351: PUSH
21352: LD_INT 19
21354: PUSH
21355: LD_INT 20
21357: PUSH
21358: LD_INT 21
21360: PUSH
21361: LD_INT 22
21363: PUSH
21364: LD_INT 23
21366: PUSH
21367: LD_INT 24
21369: PUSH
21370: LD_INT 25
21372: PUSH
21373: LD_INT 26
21375: PUSH
21376: LD_INT 27
21378: PUSH
21379: LD_INT 28
21381: PUSH
21382: LD_INT 29
21384: PUSH
21385: LD_INT 30
21387: PUSH
21388: LD_INT 31
21390: PUSH
21391: LD_INT 32
21393: PUSH
21394: LD_INT 33
21396: PUSH
21397: LD_INT 34
21399: PUSH
21400: LD_INT 36
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 101
21442: PUSH
21443: LD_INT 102
21445: PUSH
21446: LD_INT 103
21448: PUSH
21449: LD_INT 104
21451: PUSH
21452: LD_INT 105
21454: PUSH
21455: LD_INT 106
21457: PUSH
21458: LD_INT 107
21460: PUSH
21461: LD_INT 108
21463: PUSH
21464: LD_INT 109
21466: PUSH
21467: LD_INT 110
21469: PUSH
21470: LD_INT 111
21472: PUSH
21473: LD_INT 112
21475: PUSH
21476: LD_INT 113
21478: PUSH
21479: LD_INT 114
21481: PUSH
21482: LD_INT 116
21484: PUSH
21485: LD_INT 117
21487: PUSH
21488: LD_INT 118
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: ST_TO_ADDR
21514: GO 21913
21516: LD_INT 18
21518: DOUBLE
21519: EQUAL
21520: IFTRUE 21524
21522: GO 21672
21524: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21525: LD_ADDR_VAR 0 2
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 4
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: LD_INT 7
21541: PUSH
21542: LD_INT 11
21544: PUSH
21545: LD_INT 12
21547: PUSH
21548: LD_INT 15
21550: PUSH
21551: LD_INT 16
21553: PUSH
21554: LD_INT 20
21556: PUSH
21557: LD_INT 21
21559: PUSH
21560: LD_INT 22
21562: PUSH
21563: LD_INT 23
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 26
21571: PUSH
21572: LD_INT 30
21574: PUSH
21575: LD_INT 31
21577: PUSH
21578: LD_INT 32
21580: PUSH
21581: LD_INT 33
21583: PUSH
21584: LD_INT 34
21586: PUSH
21587: LD_INT 35
21589: PUSH
21590: LD_INT 36
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 101
21618: PUSH
21619: LD_INT 102
21621: PUSH
21622: LD_INT 103
21624: PUSH
21625: LD_INT 106
21627: PUSH
21628: LD_INT 108
21630: PUSH
21631: LD_INT 112
21633: PUSH
21634: LD_INT 113
21636: PUSH
21637: LD_INT 114
21639: PUSH
21640: LD_INT 115
21642: PUSH
21643: LD_INT 116
21645: PUSH
21646: LD_INT 117
21648: PUSH
21649: LD_INT 118
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 21913
21672: LD_INT 19
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21912
21680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21681: LD_ADDR_VAR 0 2
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: LD_INT 4
21697: PUSH
21698: LD_INT 5
21700: PUSH
21701: LD_INT 6
21703: PUSH
21704: LD_INT 7
21706: PUSH
21707: LD_INT 8
21709: PUSH
21710: LD_INT 9
21712: PUSH
21713: LD_INT 10
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 13
21724: PUSH
21725: LD_INT 14
21727: PUSH
21728: LD_INT 15
21730: PUSH
21731: LD_INT 16
21733: PUSH
21734: LD_INT 17
21736: PUSH
21737: LD_INT 18
21739: PUSH
21740: LD_INT 19
21742: PUSH
21743: LD_INT 20
21745: PUSH
21746: LD_INT 21
21748: PUSH
21749: LD_INT 22
21751: PUSH
21752: LD_INT 23
21754: PUSH
21755: LD_INT 24
21757: PUSH
21758: LD_INT 25
21760: PUSH
21761: LD_INT 26
21763: PUSH
21764: LD_INT 27
21766: PUSH
21767: LD_INT 28
21769: PUSH
21770: LD_INT 29
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 31
21778: PUSH
21779: LD_INT 32
21781: PUSH
21782: LD_INT 33
21784: PUSH
21785: LD_INT 34
21787: PUSH
21788: LD_INT 35
21790: PUSH
21791: LD_INT 36
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 101
21834: PUSH
21835: LD_INT 102
21837: PUSH
21838: LD_INT 103
21840: PUSH
21841: LD_INT 104
21843: PUSH
21844: LD_INT 105
21846: PUSH
21847: LD_INT 106
21849: PUSH
21850: LD_INT 107
21852: PUSH
21853: LD_INT 108
21855: PUSH
21856: LD_INT 109
21858: PUSH
21859: LD_INT 110
21861: PUSH
21862: LD_INT 111
21864: PUSH
21865: LD_INT 112
21867: PUSH
21868: LD_INT 113
21870: PUSH
21871: LD_INT 114
21873: PUSH
21874: LD_INT 115
21876: PUSH
21877: LD_INT 116
21879: PUSH
21880: LD_INT 117
21882: PUSH
21883: LD_INT 118
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: ST_TO_ADDR
21910: GO 21913
21912: POP
// end else
21913: GO 22144
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: LD_INT 3
21928: PUSH
21929: LD_INT 4
21931: PUSH
21932: LD_INT 5
21934: PUSH
21935: LD_INT 6
21937: PUSH
21938: LD_INT 7
21940: PUSH
21941: LD_INT 8
21943: PUSH
21944: LD_INT 9
21946: PUSH
21947: LD_INT 10
21949: PUSH
21950: LD_INT 11
21952: PUSH
21953: LD_INT 12
21955: PUSH
21956: LD_INT 13
21958: PUSH
21959: LD_INT 14
21961: PUSH
21962: LD_INT 15
21964: PUSH
21965: LD_INT 16
21967: PUSH
21968: LD_INT 17
21970: PUSH
21971: LD_INT 18
21973: PUSH
21974: LD_INT 19
21976: PUSH
21977: LD_INT 20
21979: PUSH
21980: LD_INT 21
21982: PUSH
21983: LD_INT 22
21985: PUSH
21986: LD_INT 23
21988: PUSH
21989: LD_INT 24
21991: PUSH
21992: LD_INT 25
21994: PUSH
21995: LD_INT 26
21997: PUSH
21998: LD_INT 27
22000: PUSH
22001: LD_INT 28
22003: PUSH
22004: LD_INT 29
22006: PUSH
22007: LD_INT 30
22009: PUSH
22010: LD_INT 31
22012: PUSH
22013: LD_INT 32
22015: PUSH
22016: LD_INT 33
22018: PUSH
22019: LD_INT 34
22021: PUSH
22022: LD_INT 35
22024: PUSH
22025: LD_INT 36
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 101
22068: PUSH
22069: LD_INT 102
22071: PUSH
22072: LD_INT 103
22074: PUSH
22075: LD_INT 104
22077: PUSH
22078: LD_INT 105
22080: PUSH
22081: LD_INT 106
22083: PUSH
22084: LD_INT 107
22086: PUSH
22087: LD_INT 108
22089: PUSH
22090: LD_INT 109
22092: PUSH
22093: LD_INT 110
22095: PUSH
22096: LD_INT 111
22098: PUSH
22099: LD_INT 112
22101: PUSH
22102: LD_INT 113
22104: PUSH
22105: LD_INT 114
22107: PUSH
22108: LD_INT 115
22110: PUSH
22111: LD_INT 116
22113: PUSH
22114: LD_INT 117
22116: PUSH
22117: LD_INT 118
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: ST_TO_ADDR
// if result then
22144: LD_VAR 0 2
22148: IFFALSE 22934
// begin normal :=  ;
22150: LD_ADDR_VAR 0 5
22154: PUSH
22155: LD_STRING 
22157: ST_TO_ADDR
// hardcore :=  ;
22158: LD_ADDR_VAR 0 6
22162: PUSH
22163: LD_STRING 
22165: ST_TO_ADDR
// active :=  ;
22166: LD_ADDR_VAR 0 7
22170: PUSH
22171: LD_STRING 
22173: ST_TO_ADDR
// for i = 1 to normalCounter do
22174: LD_ADDR_VAR 0 8
22178: PUSH
22179: DOUBLE
22180: LD_INT 1
22182: DEC
22183: ST_TO_ADDR
22184: LD_EXP 53
22188: PUSH
22189: FOR_TO
22190: IFFALSE 22291
// begin tmp := 0 ;
22192: LD_ADDR_VAR 0 3
22196: PUSH
22197: LD_STRING 0
22199: ST_TO_ADDR
// if result [ 1 ] then
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: IFFALSE 22273
// if result [ 1 ] [ 1 ] = i then
22210: LD_VAR 0 2
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: PUSH
22219: LD_INT 1
22221: ARRAY
22222: PUSH
22223: LD_VAR 0 8
22227: EQUAL
22228: IFFALSE 22273
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22230: LD_ADDR_VAR 0 2
22234: PUSH
22235: LD_VAR 0 2
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: LD_VAR 0 2
22247: PUSH
22248: LD_INT 1
22250: ARRAY
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 3
22259: PPUSH
22260: CALL_OW 1
22264: ST_TO_ADDR
// tmp := 1 ;
22265: LD_ADDR_VAR 0 3
22269: PUSH
22270: LD_STRING 1
22272: ST_TO_ADDR
// end ; normal := normal & tmp ;
22273: LD_ADDR_VAR 0 5
22277: PUSH
22278: LD_VAR 0 5
22282: PUSH
22283: LD_VAR 0 3
22287: STR
22288: ST_TO_ADDR
// end ;
22289: GO 22189
22291: POP
22292: POP
// for i = 1 to hardcoreCounter do
22293: LD_ADDR_VAR 0 8
22297: PUSH
22298: DOUBLE
22299: LD_INT 1
22301: DEC
22302: ST_TO_ADDR
22303: LD_EXP 54
22307: PUSH
22308: FOR_TO
22309: IFFALSE 22414
// begin tmp := 0 ;
22311: LD_ADDR_VAR 0 3
22315: PUSH
22316: LD_STRING 0
22318: ST_TO_ADDR
// if result [ 2 ] then
22319: LD_VAR 0 2
22323: PUSH
22324: LD_INT 2
22326: ARRAY
22327: IFFALSE 22396
// if result [ 2 ] [ 1 ] = 100 + i then
22329: LD_VAR 0 2
22333: PUSH
22334: LD_INT 2
22336: ARRAY
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: PUSH
22342: LD_INT 100
22344: PUSH
22345: LD_VAR 0 8
22349: PLUS
22350: EQUAL
22351: IFFALSE 22396
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_VAR 0 2
22362: PPUSH
22363: LD_INT 2
22365: PPUSH
22366: LD_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: CALL_OW 3
22382: PPUSH
22383: CALL_OW 1
22387: ST_TO_ADDR
// tmp := 1 ;
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_STRING 1
22395: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22396: LD_ADDR_VAR 0 6
22400: PUSH
22401: LD_VAR 0 6
22405: PUSH
22406: LD_VAR 0 3
22410: STR
22411: ST_TO_ADDR
// end ;
22412: GO 22308
22414: POP
22415: POP
// if isGameLoad then
22416: LD_VAR 0 1
22420: IFFALSE 22895
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22422: LD_ADDR_VAR 0 4
22426: PUSH
22427: LD_EXP 57
22431: PUSH
22432: LD_EXP 56
22436: PUSH
22437: LD_EXP 58
22441: PUSH
22442: LD_EXP 55
22446: PUSH
22447: LD_EXP 59
22451: PUSH
22452: LD_EXP 60
22456: PUSH
22457: LD_EXP 61
22461: PUSH
22462: LD_EXP 62
22466: PUSH
22467: LD_EXP 63
22471: PUSH
22472: LD_EXP 64
22476: PUSH
22477: LD_EXP 65
22481: PUSH
22482: LD_EXP 66
22486: PUSH
22487: LD_EXP 67
22491: PUSH
22492: LD_EXP 68
22496: PUSH
22497: LD_EXP 76
22501: PUSH
22502: LD_EXP 77
22506: PUSH
22507: LD_EXP 78
22511: PUSH
22512: LD_EXP 79
22516: PUSH
22517: LD_EXP 81
22521: PUSH
22522: LD_EXP 82
22526: PUSH
22527: LD_EXP 83
22531: PUSH
22532: LD_EXP 86
22536: PUSH
22537: LD_EXP 88
22541: PUSH
22542: LD_EXP 89
22546: PUSH
22547: LD_EXP 90
22551: PUSH
22552: LD_EXP 92
22556: PUSH
22557: LD_EXP 93
22561: PUSH
22562: LD_EXP 96
22566: PUSH
22567: LD_EXP 97
22571: PUSH
22572: LD_EXP 98
22576: PUSH
22577: LD_EXP 99
22581: PUSH
22582: LD_EXP 100
22586: PUSH
22587: LD_EXP 101
22591: PUSH
22592: LD_EXP 102
22596: PUSH
22597: LD_EXP 103
22601: PUSH
22602: LD_EXP 104
22606: PUSH
22607: LD_EXP 69
22611: PUSH
22612: LD_EXP 70
22616: PUSH
22617: LD_EXP 73
22621: PUSH
22622: LD_EXP 74
22626: PUSH
22627: LD_EXP 75
22631: PUSH
22632: LD_EXP 71
22636: PUSH
22637: LD_EXP 72
22641: PUSH
22642: LD_EXP 80
22646: PUSH
22647: LD_EXP 84
22651: PUSH
22652: LD_EXP 85
22656: PUSH
22657: LD_EXP 87
22661: PUSH
22662: LD_EXP 91
22666: PUSH
22667: LD_EXP 94
22671: PUSH
22672: LD_EXP 95
22676: PUSH
22677: LD_EXP 105
22681: PUSH
22682: LD_EXP 106
22686: PUSH
22687: LD_EXP 107
22691: PUSH
22692: LD_EXP 108
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: ST_TO_ADDR
// tmp :=  ;
22753: LD_ADDR_VAR 0 3
22757: PUSH
22758: LD_STRING 
22760: ST_TO_ADDR
// for i = 1 to normalCounter do
22761: LD_ADDR_VAR 0 8
22765: PUSH
22766: DOUBLE
22767: LD_INT 1
22769: DEC
22770: ST_TO_ADDR
22771: LD_EXP 53
22775: PUSH
22776: FOR_TO
22777: IFFALSE 22813
// begin if flags [ i ] then
22779: LD_VAR 0 4
22783: PUSH
22784: LD_VAR 0 8
22788: ARRAY
22789: IFFALSE 22811
// tmp := tmp & i & ; ;
22791: LD_ADDR_VAR 0 3
22795: PUSH
22796: LD_VAR 0 3
22800: PUSH
22801: LD_VAR 0 8
22805: STR
22806: PUSH
22807: LD_STRING ;
22809: STR
22810: ST_TO_ADDR
// end ;
22811: GO 22776
22813: POP
22814: POP
// for i = 1 to hardcoreCounter do
22815: LD_ADDR_VAR 0 8
22819: PUSH
22820: DOUBLE
22821: LD_INT 1
22823: DEC
22824: ST_TO_ADDR
22825: LD_EXP 54
22829: PUSH
22830: FOR_TO
22831: IFFALSE 22877
// begin if flags [ normalCounter + i ] then
22833: LD_VAR 0 4
22837: PUSH
22838: LD_EXP 53
22842: PUSH
22843: LD_VAR 0 8
22847: PLUS
22848: ARRAY
22849: IFFALSE 22875
// tmp := tmp & ( 100 + i ) & ; ;
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: LD_VAR 0 3
22860: PUSH
22861: LD_INT 100
22863: PUSH
22864: LD_VAR 0 8
22868: PLUS
22869: STR
22870: PUSH
22871: LD_STRING ;
22873: STR
22874: ST_TO_ADDR
// end ;
22875: GO 22830
22877: POP
22878: POP
// if tmp then
22879: LD_VAR 0 3
22883: IFFALSE 22895
// active := tmp ;
22885: LD_ADDR_VAR 0 7
22889: PUSH
22890: LD_VAR 0 3
22894: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22895: LD_STRING getStreamItemsFromMission("
22897: PUSH
22898: LD_VAR 0 5
22902: STR
22903: PUSH
22904: LD_STRING ","
22906: STR
22907: PUSH
22908: LD_VAR 0 6
22912: STR
22913: PUSH
22914: LD_STRING ","
22916: STR
22917: PUSH
22918: LD_VAR 0 7
22922: STR
22923: PUSH
22924: LD_STRING ")
22926: STR
22927: PPUSH
22928: CALL_OW 559
// end else
22932: GO 22941
// ToLua ( getStreamItemsFromMission("","","") ) ;
22934: LD_STRING getStreamItemsFromMission("","","")
22936: PPUSH
22937: CALL_OW 559
// end ;
22941: LD_VAR 0 2
22945: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22946: LD_EXP 52
22950: PUSH
22951: LD_EXP 57
22955: AND
22956: IFFALSE 23080
22958: GO 22960
22960: DISABLE
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
// begin enable ;
22965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22966: LD_ADDR_VAR 0 2
22970: PUSH
22971: LD_INT 22
22973: PUSH
22974: LD_OWVAR 2
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: LD_INT 34
22988: PUSH
22989: LD_INT 7
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 34
22998: PUSH
22999: LD_INT 45
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 34
23008: PUSH
23009: LD_INT 28
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 34
23018: PUSH
23019: LD_INT 47
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 69
23041: ST_TO_ADDR
// if not tmp then
23042: LD_VAR 0 2
23046: NOT
23047: IFFALSE 23051
// exit ;
23049: GO 23080
// for i in tmp do
23051: LD_ADDR_VAR 0 1
23055: PUSH
23056: LD_VAR 0 2
23060: PUSH
23061: FOR_IN
23062: IFFALSE 23078
// begin SetLives ( i , 0 ) ;
23064: LD_VAR 0 1
23068: PPUSH
23069: LD_INT 0
23071: PPUSH
23072: CALL_OW 234
// end ;
23076: GO 23061
23078: POP
23079: POP
// end ;
23080: PPOPN 2
23082: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23083: LD_EXP 52
23087: PUSH
23088: LD_EXP 58
23092: AND
23093: IFFALSE 23177
23095: GO 23097
23097: DISABLE
23098: LD_INT 0
23100: PPUSH
23101: PPUSH
// begin enable ;
23102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23103: LD_ADDR_VAR 0 2
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 32
23122: PUSH
23123: LD_INT 3
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PPUSH
23134: CALL_OW 69
23138: ST_TO_ADDR
// if not tmp then
23139: LD_VAR 0 2
23143: NOT
23144: IFFALSE 23148
// exit ;
23146: GO 23177
// for i in tmp do
23148: LD_ADDR_VAR 0 1
23152: PUSH
23153: LD_VAR 0 2
23157: PUSH
23158: FOR_IN
23159: IFFALSE 23175
// begin SetLives ( i , 0 ) ;
23161: LD_VAR 0 1
23165: PPUSH
23166: LD_INT 0
23168: PPUSH
23169: CALL_OW 234
// end ;
23173: GO 23158
23175: POP
23176: POP
// end ;
23177: PPOPN 2
23179: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23180: LD_EXP 52
23184: PUSH
23185: LD_EXP 55
23189: AND
23190: IFFALSE 23283
23192: GO 23194
23194: DISABLE
23195: LD_INT 0
23197: PPUSH
// begin enable ;
23198: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23199: LD_ADDR_VAR 0 1
23203: PUSH
23204: LD_INT 22
23206: PUSH
23207: LD_OWVAR 2
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 5
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 25
23231: PUSH
23232: LD_INT 9
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 25
23241: PUSH
23242: LD_INT 8
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PPUSH
23259: CALL_OW 69
23263: PUSH
23264: FOR_IN
23265: IFFALSE 23281
// begin SetClass ( i , 1 ) ;
23267: LD_VAR 0 1
23271: PPUSH
23272: LD_INT 1
23274: PPUSH
23275: CALL_OW 336
// end ;
23279: GO 23264
23281: POP
23282: POP
// end ;
23283: PPOPN 1
23285: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23286: LD_EXP 52
23290: PUSH
23291: LD_EXP 56
23295: AND
23296: PUSH
23297: LD_OWVAR 65
23301: PUSH
23302: LD_INT 7
23304: LESS
23305: AND
23306: IFFALSE 23320
23308: GO 23310
23310: DISABLE
// begin enable ;
23311: ENABLE
// game_speed := 7 ;
23312: LD_ADDR_OWVAR 65
23316: PUSH
23317: LD_INT 7
23319: ST_TO_ADDR
// end ;
23320: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23321: LD_EXP 52
23325: PUSH
23326: LD_EXP 59
23330: AND
23331: IFFALSE 23533
23333: GO 23335
23335: DISABLE
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
23340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23341: LD_ADDR_VAR 0 3
23345: PUSH
23346: LD_INT 81
23348: PUSH
23349: LD_OWVAR 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PPUSH
23372: CALL_OW 69
23376: ST_TO_ADDR
// if not tmp then
23377: LD_VAR 0 3
23381: NOT
23382: IFFALSE 23386
// exit ;
23384: GO 23533
// if tmp > 5 then
23386: LD_VAR 0 3
23390: PUSH
23391: LD_INT 5
23393: GREATER
23394: IFFALSE 23406
// k := 5 else
23396: LD_ADDR_VAR 0 2
23400: PUSH
23401: LD_INT 5
23403: ST_TO_ADDR
23404: GO 23416
// k := tmp ;
23406: LD_ADDR_VAR 0 2
23410: PUSH
23411: LD_VAR 0 3
23415: ST_TO_ADDR
// for i := 1 to k do
23416: LD_ADDR_VAR 0 1
23420: PUSH
23421: DOUBLE
23422: LD_INT 1
23424: DEC
23425: ST_TO_ADDR
23426: LD_VAR 0 2
23430: PUSH
23431: FOR_TO
23432: IFFALSE 23531
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23434: LD_VAR 0 3
23438: PUSH
23439: LD_VAR 0 1
23443: ARRAY
23444: PPUSH
23445: LD_VAR 0 1
23449: PUSH
23450: LD_INT 4
23452: MOD
23453: PUSH
23454: LD_INT 1
23456: PLUS
23457: PPUSH
23458: CALL_OW 259
23462: PUSH
23463: LD_INT 10
23465: LESS
23466: IFFALSE 23529
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23468: LD_VAR 0 3
23472: PUSH
23473: LD_VAR 0 1
23477: ARRAY
23478: PPUSH
23479: LD_VAR 0 1
23483: PUSH
23484: LD_INT 4
23486: MOD
23487: PUSH
23488: LD_INT 1
23490: PLUS
23491: PPUSH
23492: LD_VAR 0 3
23496: PUSH
23497: LD_VAR 0 1
23501: ARRAY
23502: PPUSH
23503: LD_VAR 0 1
23507: PUSH
23508: LD_INT 4
23510: MOD
23511: PUSH
23512: LD_INT 1
23514: PLUS
23515: PPUSH
23516: CALL_OW 259
23520: PUSH
23521: LD_INT 1
23523: PLUS
23524: PPUSH
23525: CALL_OW 237
23529: GO 23431
23531: POP
23532: POP
// end ;
23533: PPOPN 3
23535: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23536: LD_EXP 52
23540: PUSH
23541: LD_EXP 60
23545: AND
23546: IFFALSE 23566
23548: GO 23550
23550: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23551: LD_INT 4
23553: PPUSH
23554: LD_OWVAR 2
23558: PPUSH
23559: LD_INT 0
23561: PPUSH
23562: CALL_OW 324
23566: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23567: LD_EXP 52
23571: PUSH
23572: LD_EXP 89
23576: AND
23577: IFFALSE 23597
23579: GO 23581
23581: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23582: LD_INT 19
23584: PPUSH
23585: LD_OWVAR 2
23589: PPUSH
23590: LD_INT 0
23592: PPUSH
23593: CALL_OW 324
23597: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23598: LD_EXP 52
23602: PUSH
23603: LD_EXP 61
23607: AND
23608: IFFALSE 23710
23610: GO 23612
23612: DISABLE
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
// begin enable ;
23617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23618: LD_ADDR_VAR 0 2
23622: PUSH
23623: LD_INT 22
23625: PUSH
23626: LD_OWVAR 2
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: LD_INT 34
23640: PUSH
23641: LD_INT 11
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 34
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PPUSH
23667: CALL_OW 69
23671: ST_TO_ADDR
// if not tmp then
23672: LD_VAR 0 2
23676: NOT
23677: IFFALSE 23681
// exit ;
23679: GO 23710
// for i in tmp do
23681: LD_ADDR_VAR 0 1
23685: PUSH
23686: LD_VAR 0 2
23690: PUSH
23691: FOR_IN
23692: IFFALSE 23708
// begin SetLives ( i , 0 ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_INT 0
23701: PPUSH
23702: CALL_OW 234
// end ;
23706: GO 23691
23708: POP
23709: POP
// end ;
23710: PPOPN 2
23712: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23713: LD_EXP 52
23717: PUSH
23718: LD_EXP 62
23722: AND
23723: IFFALSE 23743
23725: GO 23727
23727: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23728: LD_INT 32
23730: PPUSH
23731: LD_OWVAR 2
23735: PPUSH
23736: LD_INT 0
23738: PPUSH
23739: CALL_OW 324
23743: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23744: LD_EXP 52
23748: PUSH
23749: LD_EXP 63
23753: AND
23754: IFFALSE 23935
23756: GO 23758
23758: DISABLE
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
23763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_INT 22
23771: PUSH
23772: LD_OWVAR 2
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 33
23783: PUSH
23784: LD_INT 3
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 69
23799: ST_TO_ADDR
// if not tmp then
23800: LD_VAR 0 2
23804: NOT
23805: IFFALSE 23809
// exit ;
23807: GO 23935
// side := 0 ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 0
23816: ST_TO_ADDR
// for i := 1 to 8 do
23817: LD_ADDR_VAR 0 1
23821: PUSH
23822: DOUBLE
23823: LD_INT 1
23825: DEC
23826: ST_TO_ADDR
23827: LD_INT 8
23829: PUSH
23830: FOR_TO
23831: IFFALSE 23879
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23833: LD_OWVAR 2
23837: PUSH
23838: LD_VAR 0 1
23842: NONEQUAL
23843: PUSH
23844: LD_OWVAR 2
23848: PPUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: CALL_OW 81
23858: PUSH
23859: LD_INT 2
23861: EQUAL
23862: AND
23863: IFFALSE 23877
// begin side := i ;
23865: LD_ADDR_VAR 0 3
23869: PUSH
23870: LD_VAR 0 1
23874: ST_TO_ADDR
// break ;
23875: GO 23879
// end ;
23877: GO 23830
23879: POP
23880: POP
// if not side then
23881: LD_VAR 0 3
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 23935
// for i := 1 to tmp do
23890: LD_ADDR_VAR 0 1
23894: PUSH
23895: DOUBLE
23896: LD_INT 1
23898: DEC
23899: ST_TO_ADDR
23900: LD_VAR 0 2
23904: PUSH
23905: FOR_TO
23906: IFFALSE 23933
// if Prob ( 60 ) then
23908: LD_INT 60
23910: PPUSH
23911: CALL_OW 13
23915: IFFALSE 23931
// SetSide ( i , side ) ;
23917: LD_VAR 0 1
23921: PPUSH
23922: LD_VAR 0 3
23926: PPUSH
23927: CALL_OW 235
23931: GO 23905
23933: POP
23934: POP
// end ;
23935: PPOPN 3
23937: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23938: LD_EXP 52
23942: PUSH
23943: LD_EXP 65
23947: AND
23948: IFFALSE 24067
23950: GO 23952
23952: DISABLE
23953: LD_INT 0
23955: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23956: LD_ADDR_VAR 0 1
23960: PUSH
23961: LD_INT 22
23963: PUSH
23964: LD_OWVAR 2
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 21
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: LD_INT 23
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: PPUSH
24005: CALL_OW 69
24009: PUSH
24010: FOR_IN
24011: IFFALSE 24065
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 257
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: LD_INT 4
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: IN
24041: IFFALSE 24063
// SetClass ( un , rand ( 1 , 4 ) ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: LD_INT 4
24053: PPUSH
24054: CALL_OW 12
24058: PPUSH
24059: CALL_OW 336
24063: GO 24010
24065: POP
24066: POP
// end ;
24067: PPOPN 1
24069: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24070: LD_EXP 52
24074: PUSH
24075: LD_EXP 64
24079: AND
24080: IFFALSE 24159
24082: GO 24084
24084: DISABLE
24085: LD_INT 0
24087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24088: LD_ADDR_VAR 0 1
24092: PUSH
24093: LD_INT 22
24095: PUSH
24096: LD_OWVAR 2
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 21
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PPUSH
24119: CALL_OW 69
24123: ST_TO_ADDR
// if not tmp then
24124: LD_VAR 0 1
24128: NOT
24129: IFFALSE 24133
// exit ;
24131: GO 24159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24133: LD_VAR 0 1
24137: PUSH
24138: LD_INT 1
24140: PPUSH
24141: LD_VAR 0 1
24145: PPUSH
24146: CALL_OW 12
24150: ARRAY
24151: PPUSH
24152: LD_INT 100
24154: PPUSH
24155: CALL_OW 234
// end ;
24159: PPOPN 1
24161: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24162: LD_EXP 52
24166: PUSH
24167: LD_EXP 66
24171: AND
24172: IFFALSE 24270
24174: GO 24176
24176: DISABLE
24177: LD_INT 0
24179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24180: LD_ADDR_VAR 0 1
24184: PUSH
24185: LD_INT 22
24187: PUSH
24188: LD_OWVAR 2
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 21
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 69
24215: ST_TO_ADDR
// if not tmp then
24216: LD_VAR 0 1
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24270
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 1
24232: PPUSH
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 12
24242: ARRAY
24243: PPUSH
24244: LD_INT 1
24246: PPUSH
24247: LD_INT 4
24249: PPUSH
24250: CALL_OW 12
24254: PPUSH
24255: LD_INT 3000
24257: PPUSH
24258: LD_INT 9000
24260: PPUSH
24261: CALL_OW 12
24265: PPUSH
24266: CALL_OW 492
// end ;
24270: PPOPN 1
24272: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24273: LD_EXP 52
24277: PUSH
24278: LD_EXP 67
24282: AND
24283: IFFALSE 24303
24285: GO 24287
24287: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24288: LD_INT 1
24290: PPUSH
24291: LD_OWVAR 2
24295: PPUSH
24296: LD_INT 0
24298: PPUSH
24299: CALL_OW 324
24303: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24304: LD_EXP 52
24308: PUSH
24309: LD_EXP 68
24313: AND
24314: IFFALSE 24397
24316: GO 24318
24318: DISABLE
24319: LD_INT 0
24321: PPUSH
24322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24323: LD_ADDR_VAR 0 2
24327: PUSH
24328: LD_INT 22
24330: PUSH
24331: LD_OWVAR 2
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 21
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PPUSH
24354: CALL_OW 69
24358: ST_TO_ADDR
// if not tmp then
24359: LD_VAR 0 2
24363: NOT
24364: IFFALSE 24368
// exit ;
24366: GO 24397
// for i in tmp do
24368: LD_ADDR_VAR 0 1
24372: PUSH
24373: LD_VAR 0 2
24377: PUSH
24378: FOR_IN
24379: IFFALSE 24395
// SetBLevel ( i , 10 ) ;
24381: LD_VAR 0 1
24385: PPUSH
24386: LD_INT 10
24388: PPUSH
24389: CALL_OW 241
24393: GO 24378
24395: POP
24396: POP
// end ;
24397: PPOPN 2
24399: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24400: LD_EXP 52
24404: PUSH
24405: LD_EXP 69
24409: AND
24410: IFFALSE 24521
24412: GO 24414
24414: DISABLE
24415: LD_INT 0
24417: PPUSH
24418: PPUSH
24419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24420: LD_ADDR_VAR 0 3
24424: PUSH
24425: LD_INT 22
24427: PUSH
24428: LD_OWVAR 2
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 25
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PPUSH
24451: CALL_OW 69
24455: ST_TO_ADDR
// if not tmp then
24456: LD_VAR 0 3
24460: NOT
24461: IFFALSE 24465
// exit ;
24463: GO 24521
// un := tmp [ rand ( 1 , tmp ) ] ;
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: LD_VAR 0 3
24474: PUSH
24475: LD_INT 1
24477: PPUSH
24478: LD_VAR 0 3
24482: PPUSH
24483: CALL_OW 12
24487: ARRAY
24488: ST_TO_ADDR
// if Crawls ( un ) then
24489: LD_VAR 0 2
24493: PPUSH
24494: CALL_OW 318
24498: IFFALSE 24509
// ComWalk ( un ) ;
24500: LD_VAR 0 2
24504: PPUSH
24505: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_INT 5
24516: PPUSH
24517: CALL_OW 336
// end ;
24521: PPOPN 3
24523: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24524: LD_EXP 52
24528: PUSH
24529: LD_EXP 70
24533: AND
24534: PUSH
24535: LD_OWVAR 67
24539: PUSH
24540: LD_INT 4
24542: LESS
24543: AND
24544: IFFALSE 24563
24546: GO 24548
24548: DISABLE
// begin Difficulty := Difficulty + 1 ;
24549: LD_ADDR_OWVAR 67
24553: PUSH
24554: LD_OWVAR 67
24558: PUSH
24559: LD_INT 1
24561: PLUS
24562: ST_TO_ADDR
// end ;
24563: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24564: LD_EXP 52
24568: PUSH
24569: LD_EXP 71
24573: AND
24574: IFFALSE 24677
24576: GO 24578
24578: DISABLE
24579: LD_INT 0
24581: PPUSH
// begin for i := 1 to 5 do
24582: LD_ADDR_VAR 0 1
24586: PUSH
24587: DOUBLE
24588: LD_INT 1
24590: DEC
24591: ST_TO_ADDR
24592: LD_INT 5
24594: PUSH
24595: FOR_TO
24596: IFFALSE 24675
// begin uc_nation := nation_nature ;
24598: LD_ADDR_OWVAR 21
24602: PUSH
24603: LD_INT 0
24605: ST_TO_ADDR
// uc_side := 0 ;
24606: LD_ADDR_OWVAR 20
24610: PUSH
24611: LD_INT 0
24613: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24614: LD_ADDR_OWVAR 29
24618: PUSH
24619: LD_INT 12
24621: PUSH
24622: LD_INT 12
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: ST_TO_ADDR
// hc_agressivity := 20 ;
24629: LD_ADDR_OWVAR 35
24633: PUSH
24634: LD_INT 20
24636: ST_TO_ADDR
// hc_class := class_tiger ;
24637: LD_ADDR_OWVAR 28
24641: PUSH
24642: LD_INT 14
24644: ST_TO_ADDR
// hc_gallery :=  ;
24645: LD_ADDR_OWVAR 33
24649: PUSH
24650: LD_STRING 
24652: ST_TO_ADDR
// hc_name :=  ;
24653: LD_ADDR_OWVAR 26
24657: PUSH
24658: LD_STRING 
24660: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24661: CALL_OW 44
24665: PPUSH
24666: LD_INT 0
24668: PPUSH
24669: CALL_OW 51
// end ;
24673: GO 24595
24675: POP
24676: POP
// end ;
24677: PPOPN 1
24679: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24680: LD_EXP 52
24684: PUSH
24685: LD_EXP 72
24689: AND
24690: IFFALSE 24699
24692: GO 24694
24694: DISABLE
// StreamSibBomb ;
24695: CALL 24700 0 0
24699: END
// export function StreamSibBomb ; var i , x , y ; begin
24700: LD_INT 0
24702: PPUSH
24703: PPUSH
24704: PPUSH
24705: PPUSH
// result := false ;
24706: LD_ADDR_VAR 0 1
24710: PUSH
24711: LD_INT 0
24713: ST_TO_ADDR
// for i := 1 to 16 do
24714: LD_ADDR_VAR 0 2
24718: PUSH
24719: DOUBLE
24720: LD_INT 1
24722: DEC
24723: ST_TO_ADDR
24724: LD_INT 16
24726: PUSH
24727: FOR_TO
24728: IFFALSE 24927
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 10
24737: PUSH
24738: LD_INT 20
24740: PUSH
24741: LD_INT 30
24743: PUSH
24744: LD_INT 40
24746: PUSH
24747: LD_INT 50
24749: PUSH
24750: LD_INT 60
24752: PUSH
24753: LD_INT 70
24755: PUSH
24756: LD_INT 80
24758: PUSH
24759: LD_INT 90
24761: PUSH
24762: LD_INT 100
24764: PUSH
24765: LD_INT 110
24767: PUSH
24768: LD_INT 120
24770: PUSH
24771: LD_INT 130
24773: PUSH
24774: LD_INT 140
24776: PUSH
24777: LD_INT 150
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PPUSH
24800: LD_INT 15
24802: PPUSH
24803: CALL_OW 12
24807: ARRAY
24808: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24809: LD_ADDR_VAR 0 4
24813: PUSH
24814: LD_INT 10
24816: PUSH
24817: LD_INT 20
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 40
24825: PUSH
24826: LD_INT 50
24828: PUSH
24829: LD_INT 60
24831: PUSH
24832: LD_INT 70
24834: PUSH
24835: LD_INT 80
24837: PUSH
24838: LD_INT 90
24840: PUSH
24841: LD_INT 100
24843: PUSH
24844: LD_INT 110
24846: PUSH
24847: LD_INT 120
24849: PUSH
24850: LD_INT 130
24852: PUSH
24853: LD_INT 140
24855: PUSH
24856: LD_INT 150
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PPUSH
24879: LD_INT 15
24881: PPUSH
24882: CALL_OW 12
24886: ARRAY
24887: ST_TO_ADDR
// if ValidHex ( x , y ) then
24888: LD_VAR 0 3
24892: PPUSH
24893: LD_VAR 0 4
24897: PPUSH
24898: CALL_OW 488
24902: IFFALSE 24925
// begin result := [ x , y ] ;
24904: LD_ADDR_VAR 0 1
24908: PUSH
24909: LD_VAR 0 3
24913: PUSH
24914: LD_VAR 0 4
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: ST_TO_ADDR
// break ;
24923: GO 24927
// end ; end ;
24925: GO 24727
24927: POP
24928: POP
// if result then
24929: LD_VAR 0 1
24933: IFFALSE 24993
// begin ToLua ( playSibBomb() ) ;
24935: LD_STRING playSibBomb()
24937: PPUSH
24938: CALL_OW 559
// wait ( 0 0$14 ) ;
24942: LD_INT 490
24944: PPUSH
24945: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24949: LD_VAR 0 1
24953: PUSH
24954: LD_INT 1
24956: ARRAY
24957: PPUSH
24958: LD_VAR 0 1
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: PPUSH
24967: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24971: LD_VAR 0 1
24975: PUSH
24976: LD_INT 1
24978: ARRAY
24979: PPUSH
24980: LD_VAR 0 1
24984: PUSH
24985: LD_INT 2
24987: ARRAY
24988: PPUSH
24989: CALL_OW 429
// end ; end ;
24993: LD_VAR 0 1
24997: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24998: LD_EXP 52
25002: PUSH
25003: LD_EXP 74
25007: AND
25008: IFFALSE 25020
25010: GO 25012
25012: DISABLE
// YouLost (  ) ;
25013: LD_STRING 
25015: PPUSH
25016: CALL_OW 104
25020: END
// every 0 0$1 trigger StreamModeActive and sFog do
25021: LD_EXP 52
25025: PUSH
25026: LD_EXP 73
25030: AND
25031: IFFALSE 25045
25033: GO 25035
25035: DISABLE
// FogOff ( your_side ) ;
25036: LD_OWVAR 2
25040: PPUSH
25041: CALL_OW 344
25045: END
// every 0 0$1 trigger StreamModeActive and sSun do
25046: LD_EXP 52
25050: PUSH
25051: LD_EXP 75
25055: AND
25056: IFFALSE 25084
25058: GO 25060
25060: DISABLE
// begin solar_recharge_percent := 0 ;
25061: LD_ADDR_OWVAR 79
25065: PUSH
25066: LD_INT 0
25068: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25069: LD_INT 10500
25071: PPUSH
25072: CALL_OW 67
// solar_recharge_percent := 100 ;
25076: LD_ADDR_OWVAR 79
25080: PUSH
25081: LD_INT 100
25083: ST_TO_ADDR
// end ;
25084: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25085: LD_EXP 52
25089: PUSH
25090: LD_EXP 76
25094: AND
25095: IFFALSE 25334
25097: GO 25099
25099: DISABLE
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
25104: PPUSH
// begin tmp := [ ] ;
25105: LD_ADDR_VAR 0 3
25109: PUSH
25110: EMPTY
25111: ST_TO_ADDR
// for i := 1 to 6 do
25112: LD_ADDR_VAR 0 1
25116: PUSH
25117: DOUBLE
25118: LD_INT 1
25120: DEC
25121: ST_TO_ADDR
25122: LD_INT 6
25124: PUSH
25125: FOR_TO
25126: IFFALSE 25231
// begin uc_nation := nation_nature ;
25128: LD_ADDR_OWVAR 21
25132: PUSH
25133: LD_INT 0
25135: ST_TO_ADDR
// uc_side := 0 ;
25136: LD_ADDR_OWVAR 20
25140: PUSH
25141: LD_INT 0
25143: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25144: LD_ADDR_OWVAR 29
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 12
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// hc_agressivity := 20 ;
25159: LD_ADDR_OWVAR 35
25163: PUSH
25164: LD_INT 20
25166: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25167: LD_ADDR_OWVAR 28
25171: PUSH
25172: LD_INT 17
25174: ST_TO_ADDR
// hc_gallery :=  ;
25175: LD_ADDR_OWVAR 33
25179: PUSH
25180: LD_STRING 
25182: ST_TO_ADDR
// hc_name :=  ;
25183: LD_ADDR_OWVAR 26
25187: PUSH
25188: LD_STRING 
25190: ST_TO_ADDR
// un := CreateHuman ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: CALL_OW 44
25200: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25201: LD_VAR 0 2
25205: PPUSH
25206: LD_INT 1
25208: PPUSH
25209: CALL_OW 51
// tmp := tmp ^ un ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_VAR 0 3
25222: PUSH
25223: LD_VAR 0 2
25227: ADD
25228: ST_TO_ADDR
// end ;
25229: GO 25125
25231: POP
25232: POP
// repeat wait ( 0 0$1 ) ;
25233: LD_INT 35
25235: PPUSH
25236: CALL_OW 67
// for un in tmp do
25240: LD_ADDR_VAR 0 2
25244: PUSH
25245: LD_VAR 0 3
25249: PUSH
25250: FOR_IN
25251: IFFALSE 25325
// begin if IsDead ( un ) then
25253: LD_VAR 0 2
25257: PPUSH
25258: CALL_OW 301
25262: IFFALSE 25282
// begin tmp := tmp diff un ;
25264: LD_ADDR_VAR 0 3
25268: PUSH
25269: LD_VAR 0 3
25273: PUSH
25274: LD_VAR 0 2
25278: DIFF
25279: ST_TO_ADDR
// continue ;
25280: GO 25250
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25282: LD_VAR 0 2
25286: PPUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PPUSH
25304: CALL_OW 69
25308: PPUSH
25309: LD_VAR 0 2
25313: PPUSH
25314: CALL_OW 74
25318: PPUSH
25319: CALL_OW 115
// end ;
25323: GO 25250
25325: POP
25326: POP
// until not tmp ;
25327: LD_VAR 0 3
25331: NOT
25332: IFFALSE 25233
// end ;
25334: PPOPN 3
25336: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25337: LD_EXP 52
25341: PUSH
25342: LD_EXP 77
25346: AND
25347: IFFALSE 25401
25349: GO 25351
25351: DISABLE
// begin ToLua ( displayTroll(); ) ;
25352: LD_STRING displayTroll();
25354: PPUSH
25355: CALL_OW 559
// wait ( 3 3$00 ) ;
25359: LD_INT 6300
25361: PPUSH
25362: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25366: LD_STRING hideTroll();
25368: PPUSH
25369: CALL_OW 559
// wait ( 1 1$00 ) ;
25373: LD_INT 2100
25375: PPUSH
25376: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25380: LD_STRING displayTroll();
25382: PPUSH
25383: CALL_OW 559
// wait ( 1 1$00 ) ;
25387: LD_INT 2100
25389: PPUSH
25390: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25394: LD_STRING hideTroll();
25396: PPUSH
25397: CALL_OW 559
// end ;
25401: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25402: LD_EXP 52
25406: PUSH
25407: LD_EXP 78
25411: AND
25412: IFFALSE 25475
25414: GO 25416
25416: DISABLE
25417: LD_INT 0
25419: PPUSH
// begin p := 0 ;
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: LD_INT 0
25427: ST_TO_ADDR
// repeat game_speed := 1 ;
25428: LD_ADDR_OWVAR 65
25432: PUSH
25433: LD_INT 1
25435: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25436: LD_INT 35
25438: PPUSH
25439: CALL_OW 67
// p := p + 1 ;
25443: LD_ADDR_VAR 0 1
25447: PUSH
25448: LD_VAR 0 1
25452: PUSH
25453: LD_INT 1
25455: PLUS
25456: ST_TO_ADDR
// until p >= 60 ;
25457: LD_VAR 0 1
25461: PUSH
25462: LD_INT 60
25464: GREATEREQUAL
25465: IFFALSE 25428
// game_speed := 4 ;
25467: LD_ADDR_OWVAR 65
25471: PUSH
25472: LD_INT 4
25474: ST_TO_ADDR
// end ;
25475: PPOPN 1
25477: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25478: LD_EXP 52
25482: PUSH
25483: LD_EXP 79
25487: AND
25488: IFFALSE 25634
25490: GO 25492
25492: DISABLE
25493: LD_INT 0
25495: PPUSH
25496: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25497: LD_ADDR_VAR 0 1
25501: PUSH
25502: LD_INT 22
25504: PUSH
25505: LD_OWVAR 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 30
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 30
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 69
25550: ST_TO_ADDR
// if not depot then
25551: LD_VAR 0 1
25555: NOT
25556: IFFALSE 25560
// exit ;
25558: GO 25634
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25560: LD_ADDR_VAR 0 2
25564: PUSH
25565: LD_VAR 0 1
25569: PUSH
25570: LD_INT 1
25572: PPUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 12
25582: ARRAY
25583: PPUSH
25584: CALL_OW 274
25588: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25589: LD_VAR 0 2
25593: PPUSH
25594: LD_INT 1
25596: PPUSH
25597: LD_INT 0
25599: PPUSH
25600: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25604: LD_VAR 0 2
25608: PPUSH
25609: LD_INT 2
25611: PPUSH
25612: LD_INT 0
25614: PPUSH
25615: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25619: LD_VAR 0 2
25623: PPUSH
25624: LD_INT 3
25626: PPUSH
25627: LD_INT 0
25629: PPUSH
25630: CALL_OW 277
// end ;
25634: PPOPN 2
25636: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25637: LD_EXP 52
25641: PUSH
25642: LD_EXP 80
25646: AND
25647: IFFALSE 25744
25649: GO 25651
25651: DISABLE
25652: LD_INT 0
25654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 21
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: LD_INT 23
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: PPUSH
25704: CALL_OW 69
25708: ST_TO_ADDR
// if not tmp then
25709: LD_VAR 0 1
25713: NOT
25714: IFFALSE 25718
// exit ;
25716: GO 25744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25718: LD_VAR 0 1
25722: PUSH
25723: LD_INT 1
25725: PPUSH
25726: LD_VAR 0 1
25730: PPUSH
25731: CALL_OW 12
25735: ARRAY
25736: PPUSH
25737: LD_INT 200
25739: PPUSH
25740: CALL_OW 234
// end ;
25744: PPOPN 1
25746: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25747: LD_EXP 52
25751: PUSH
25752: LD_EXP 81
25756: AND
25757: IFFALSE 25836
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25765: LD_ADDR_VAR 0 1
25769: PUSH
25770: LD_INT 22
25772: PUSH
25773: LD_OWVAR 2
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 21
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: ST_TO_ADDR
// if not tmp then
25801: LD_VAR 0 1
25805: NOT
25806: IFFALSE 25810
// exit ;
25808: GO 25836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25810: LD_VAR 0 1
25814: PUSH
25815: LD_INT 1
25817: PPUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 12
25827: ARRAY
25828: PPUSH
25829: LD_INT 60
25831: PPUSH
25832: CALL_OW 234
// end ;
25836: PPOPN 1
25838: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25839: LD_EXP 52
25843: PUSH
25844: LD_EXP 82
25848: AND
25849: IFFALSE 25948
25851: GO 25853
25853: DISABLE
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
// begin enable ;
25858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25859: LD_ADDR_VAR 0 1
25863: PUSH
25864: LD_INT 22
25866: PUSH
25867: LD_OWVAR 2
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 61
25878: PUSH
25879: EMPTY
25880: LIST
25881: PUSH
25882: LD_INT 33
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: PPUSH
25897: CALL_OW 69
25901: ST_TO_ADDR
// if not tmp then
25902: LD_VAR 0 1
25906: NOT
25907: IFFALSE 25911
// exit ;
25909: GO 25948
// for i in tmp do
25911: LD_ADDR_VAR 0 2
25915: PUSH
25916: LD_VAR 0 1
25920: PUSH
25921: FOR_IN
25922: IFFALSE 25946
// if IsControledBy ( i ) then
25924: LD_VAR 0 2
25928: PPUSH
25929: CALL_OW 312
25933: IFFALSE 25944
// ComUnlink ( i ) ;
25935: LD_VAR 0 2
25939: PPUSH
25940: CALL_OW 136
25944: GO 25921
25946: POP
25947: POP
// end ;
25948: PPOPN 2
25950: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25951: LD_EXP 52
25955: PUSH
25956: LD_EXP 83
25960: AND
25961: IFFALSE 26101
25963: GO 25965
25965: DISABLE
25966: LD_INT 0
25968: PPUSH
25969: PPUSH
// begin ToLua ( displayPowell(); ) ;
25970: LD_STRING displayPowell();
25972: PPUSH
25973: CALL_OW 559
// uc_side := 0 ;
25977: LD_ADDR_OWVAR 20
25981: PUSH
25982: LD_INT 0
25984: ST_TO_ADDR
// uc_nation := 2 ;
25985: LD_ADDR_OWVAR 21
25989: PUSH
25990: LD_INT 2
25992: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25993: LD_ADDR_OWVAR 37
25997: PUSH
25998: LD_INT 14
26000: ST_TO_ADDR
// vc_engine := engine_siberite ;
26001: LD_ADDR_OWVAR 39
26005: PUSH
26006: LD_INT 3
26008: ST_TO_ADDR
// vc_control := control_apeman ;
26009: LD_ADDR_OWVAR 38
26013: PUSH
26014: LD_INT 5
26016: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26017: LD_ADDR_OWVAR 40
26021: PUSH
26022: LD_INT 29
26024: ST_TO_ADDR
// un := CreateVehicle ;
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: CALL_OW 45
26034: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26035: LD_VAR 0 2
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26047: LD_INT 35
26049: PPUSH
26050: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26054: LD_VAR 0 2
26058: PPUSH
26059: LD_INT 22
26061: PUSH
26062: LD_OWVAR 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: PPUSH
26076: LD_VAR 0 2
26080: PPUSH
26081: CALL_OW 74
26085: PPUSH
26086: CALL_OW 115
// until IsDead ( un ) ;
26090: LD_VAR 0 2
26094: PPUSH
26095: CALL_OW 301
26099: IFFALSE 26047
// end ;
26101: PPOPN 2
26103: END
// every 0 0$1 trigger StreamModeActive and sStu do
26104: LD_EXP 52
26108: PUSH
26109: LD_EXP 91
26113: AND
26114: IFFALSE 26130
26116: GO 26118
26118: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26119: LD_STRING displayStucuk();
26121: PPUSH
26122: CALL_OW 559
// ResetFog ;
26126: CALL_OW 335
// end ;
26130: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26131: LD_EXP 52
26135: PUSH
26136: LD_EXP 84
26140: AND
26141: IFFALSE 26282
26143: GO 26145
26145: DISABLE
26146: LD_INT 0
26148: PPUSH
26149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: LD_INT 22
26157: PUSH
26158: LD_OWVAR 2
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 21
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL_OW 69
26185: ST_TO_ADDR
// if not tmp then
26186: LD_VAR 0 2
26190: NOT
26191: IFFALSE 26195
// exit ;
26193: GO 26282
// un := tmp [ rand ( 1 , tmp ) ] ;
26195: LD_ADDR_VAR 0 1
26199: PUSH
26200: LD_VAR 0 2
26204: PUSH
26205: LD_INT 1
26207: PPUSH
26208: LD_VAR 0 2
26212: PPUSH
26213: CALL_OW 12
26217: ARRAY
26218: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26219: LD_VAR 0 1
26223: PPUSH
26224: LD_INT 0
26226: PPUSH
26227: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26231: LD_VAR 0 1
26235: PPUSH
26236: LD_OWVAR 3
26240: PUSH
26241: LD_VAR 0 1
26245: DIFF
26246: PPUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 74
26256: PPUSH
26257: CALL_OW 115
// wait ( 0 0$20 ) ;
26261: LD_INT 700
26263: PPUSH
26264: CALL_OW 67
// SetSide ( un , your_side ) ;
26268: LD_VAR 0 1
26272: PPUSH
26273: LD_OWVAR 2
26277: PPUSH
26278: CALL_OW 235
// end ;
26282: PPOPN 2
26284: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26285: LD_EXP 52
26289: PUSH
26290: LD_EXP 85
26294: AND
26295: IFFALSE 26401
26297: GO 26299
26299: DISABLE
26300: LD_INT 0
26302: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26303: LD_ADDR_VAR 0 1
26307: PUSH
26308: LD_INT 22
26310: PUSH
26311: LD_OWVAR 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 30
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PPUSH
26352: CALL_OW 69
26356: ST_TO_ADDR
// if not depot then
26357: LD_VAR 0 1
26361: NOT
26362: IFFALSE 26366
// exit ;
26364: GO 26401
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26366: LD_VAR 0 1
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PPUSH
26375: CALL_OW 250
26379: PPUSH
26380: LD_VAR 0 1
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: PPUSH
26389: CALL_OW 251
26393: PPUSH
26394: LD_INT 70
26396: PPUSH
26397: CALL_OW 495
// end ;
26401: PPOPN 1
26403: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26404: LD_EXP 52
26408: PUSH
26409: LD_EXP 86
26413: AND
26414: IFFALSE 26625
26416: GO 26418
26418: DISABLE
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26426: LD_ADDR_VAR 0 5
26430: PUSH
26431: LD_INT 22
26433: PUSH
26434: LD_OWVAR 2
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 21
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PPUSH
26457: CALL_OW 69
26461: ST_TO_ADDR
// if not tmp then
26462: LD_VAR 0 5
26466: NOT
26467: IFFALSE 26471
// exit ;
26469: GO 26625
// for i in tmp do
26471: LD_ADDR_VAR 0 1
26475: PUSH
26476: LD_VAR 0 5
26480: PUSH
26481: FOR_IN
26482: IFFALSE 26623
// begin d := rand ( 0 , 5 ) ;
26484: LD_ADDR_VAR 0 4
26488: PUSH
26489: LD_INT 0
26491: PPUSH
26492: LD_INT 5
26494: PPUSH
26495: CALL_OW 12
26499: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 250
26514: PPUSH
26515: LD_VAR 0 4
26519: PPUSH
26520: LD_INT 3
26522: PPUSH
26523: LD_INT 12
26525: PPUSH
26526: CALL_OW 12
26530: PPUSH
26531: CALL_OW 272
26535: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_VAR 0 1
26545: PPUSH
26546: CALL_OW 251
26550: PPUSH
26551: LD_VAR 0 4
26555: PPUSH
26556: LD_INT 3
26558: PPUSH
26559: LD_INT 12
26561: PPUSH
26562: CALL_OW 12
26566: PPUSH
26567: CALL_OW 273
26571: ST_TO_ADDR
// if ValidHex ( x , y ) then
26572: LD_VAR 0 2
26576: PPUSH
26577: LD_VAR 0 3
26581: PPUSH
26582: CALL_OW 488
26586: IFFALSE 26621
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26588: LD_VAR 0 1
26592: PPUSH
26593: LD_VAR 0 2
26597: PPUSH
26598: LD_VAR 0 3
26602: PPUSH
26603: LD_INT 3
26605: PPUSH
26606: LD_INT 6
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: LD_INT 1
26616: PPUSH
26617: CALL_OW 483
// end ;
26621: GO 26481
26623: POP
26624: POP
// end ;
26625: PPOPN 5
26627: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26628: LD_EXP 52
26632: PUSH
26633: LD_EXP 87
26637: AND
26638: IFFALSE 26732
26640: GO 26642
26642: DISABLE
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26647: LD_ADDR_VAR 0 2
26651: PUSH
26652: LD_INT 22
26654: PUSH
26655: LD_OWVAR 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 32
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 21
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 69
26693: ST_TO_ADDR
// if not tmp then
26694: LD_VAR 0 2
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26732
// for i in tmp do
26703: LD_ADDR_VAR 0 1
26707: PUSH
26708: LD_VAR 0 2
26712: PUSH
26713: FOR_IN
26714: IFFALSE 26730
// SetFuel ( i , 0 ) ;
26716: LD_VAR 0 1
26720: PPUSH
26721: LD_INT 0
26723: PPUSH
26724: CALL_OW 240
26728: GO 26713
26730: POP
26731: POP
// end ;
26732: PPOPN 2
26734: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26735: LD_EXP 52
26739: PUSH
26740: LD_EXP 88
26744: AND
26745: IFFALSE 26811
26747: GO 26749
26749: DISABLE
26750: LD_INT 0
26752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26753: LD_ADDR_VAR 0 1
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 30
26772: PUSH
26773: LD_INT 29
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 69
26788: ST_TO_ADDR
// if not tmp then
26789: LD_VAR 0 1
26793: NOT
26794: IFFALSE 26798
// exit ;
26796: GO 26811
// DestroyUnit ( tmp [ 1 ] ) ;
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: PPUSH
26807: CALL_OW 65
// end ;
26811: PPOPN 1
26813: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26814: LD_EXP 52
26818: PUSH
26819: LD_EXP 90
26823: AND
26824: IFFALSE 26953
26826: GO 26828
26828: DISABLE
26829: LD_INT 0
26831: PPUSH
// begin uc_side := 0 ;
26832: LD_ADDR_OWVAR 20
26836: PUSH
26837: LD_INT 0
26839: ST_TO_ADDR
// uc_nation := nation_arabian ;
26840: LD_ADDR_OWVAR 21
26844: PUSH
26845: LD_INT 2
26847: ST_TO_ADDR
// hc_gallery :=  ;
26848: LD_ADDR_OWVAR 33
26852: PUSH
26853: LD_STRING 
26855: ST_TO_ADDR
// hc_name :=  ;
26856: LD_ADDR_OWVAR 26
26860: PUSH
26861: LD_STRING 
26863: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26864: LD_INT 1
26866: PPUSH
26867: LD_INT 11
26869: PPUSH
26870: LD_INT 10
26872: PPUSH
26873: CALL_OW 380
// un := CreateHuman ;
26877: LD_ADDR_VAR 0 1
26881: PUSH
26882: CALL_OW 44
26886: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26887: LD_VAR 0 1
26891: PPUSH
26892: LD_INT 1
26894: PPUSH
26895: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26899: LD_INT 35
26901: PPUSH
26902: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_INT 22
26913: PUSH
26914: LD_OWVAR 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PPUSH
26923: CALL_OW 69
26927: PPUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: CALL_OW 74
26937: PPUSH
26938: CALL_OW 115
// until IsDead ( un ) ;
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 301
26951: IFFALSE 26899
// end ;
26953: PPOPN 1
26955: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26956: LD_EXP 52
26960: PUSH
26961: LD_EXP 92
26965: AND
26966: IFFALSE 26978
26968: GO 26970
26970: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26971: LD_STRING earthquake(getX(game), 0, 32)
26973: PPUSH
26974: CALL_OW 559
26978: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26979: LD_EXP 52
26983: PUSH
26984: LD_EXP 93
26988: AND
26989: IFFALSE 27080
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
// begin enable ;
26997: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26998: LD_ADDR_VAR 0 1
27002: PUSH
27003: LD_INT 22
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 21
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 33
27027: PUSH
27028: LD_INT 3
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: PPUSH
27040: CALL_OW 69
27044: ST_TO_ADDR
// if not tmp then
27045: LD_VAR 0 1
27049: NOT
27050: IFFALSE 27054
// exit ;
27052: GO 27080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27054: LD_VAR 0 1
27058: PUSH
27059: LD_INT 1
27061: PPUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: CALL_OW 12
27071: ARRAY
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL_OW 234
// end ;
27080: PPOPN 1
27082: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27083: LD_EXP 52
27087: PUSH
27088: LD_EXP 94
27092: AND
27093: IFFALSE 27234
27095: GO 27097
27097: DISABLE
27098: LD_INT 0
27100: PPUSH
27101: PPUSH
27102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27103: LD_ADDR_VAR 0 3
27107: PUSH
27108: LD_INT 22
27110: PUSH
27111: LD_OWVAR 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 25
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PPUSH
27134: CALL_OW 69
27138: ST_TO_ADDR
// if not tmp then
27139: LD_VAR 0 3
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27234
// un := tmp [ rand ( 1 , tmp ) ] ;
27148: LD_ADDR_VAR 0 2
27152: PUSH
27153: LD_VAR 0 3
27157: PUSH
27158: LD_INT 1
27160: PPUSH
27161: LD_VAR 0 3
27165: PPUSH
27166: CALL_OW 12
27170: ARRAY
27171: ST_TO_ADDR
// if Crawls ( un ) then
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 318
27181: IFFALSE 27192
// ComWalk ( un ) ;
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_INT 9
27199: PPUSH
27200: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27204: LD_INT 28
27206: PPUSH
27207: LD_OWVAR 2
27211: PPUSH
27212: LD_INT 2
27214: PPUSH
27215: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27219: LD_INT 29
27221: PPUSH
27222: LD_OWVAR 2
27226: PPUSH
27227: LD_INT 2
27229: PPUSH
27230: CALL_OW 322
// end ;
27234: PPOPN 3
27236: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27237: LD_EXP 52
27241: PUSH
27242: LD_EXP 95
27246: AND
27247: IFFALSE 27358
27249: GO 27251
27251: DISABLE
27252: LD_INT 0
27254: PPUSH
27255: PPUSH
27256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 25
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// if not tmp then
27293: LD_VAR 0 3
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27358
// un := tmp [ rand ( 1 , tmp ) ] ;
27302: LD_ADDR_VAR 0 2
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: LD_INT 1
27314: PPUSH
27315: LD_VAR 0 3
27319: PPUSH
27320: CALL_OW 12
27324: ARRAY
27325: ST_TO_ADDR
// if Crawls ( un ) then
27326: LD_VAR 0 2
27330: PPUSH
27331: CALL_OW 318
27335: IFFALSE 27346
// ComWalk ( un ) ;
27337: LD_VAR 0 2
27341: PPUSH
27342: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27346: LD_VAR 0 2
27350: PPUSH
27351: LD_INT 8
27353: PPUSH
27354: CALL_OW 336
// end ;
27358: PPOPN 3
27360: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27361: LD_EXP 52
27365: PUSH
27366: LD_EXP 96
27370: AND
27371: IFFALSE 27515
27373: GO 27375
27375: DISABLE
27376: LD_INT 0
27378: PPUSH
27379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27380: LD_ADDR_VAR 0 2
27384: PUSH
27385: LD_INT 22
27387: PUSH
27388: LD_OWVAR 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 21
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 34
27412: PUSH
27413: LD_INT 12
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 34
27422: PUSH
27423: LD_INT 51
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 34
27432: PUSH
27433: LD_INT 32
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: ST_TO_ADDR
// if not tmp then
27456: LD_VAR 0 2
27460: NOT
27461: IFFALSE 27465
// exit ;
27463: GO 27515
// for i in tmp do
27465: LD_ADDR_VAR 0 1
27469: PUSH
27470: LD_VAR 0 2
27474: PUSH
27475: FOR_IN
27476: IFFALSE 27513
// if GetCargo ( i , mat_artifact ) = 0 then
27478: LD_VAR 0 1
27482: PPUSH
27483: LD_INT 4
27485: PPUSH
27486: CALL_OW 289
27490: PUSH
27491: LD_INT 0
27493: EQUAL
27494: IFFALSE 27511
// SetCargo ( i , mat_siberit , 100 ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_INT 3
27503: PPUSH
27504: LD_INT 100
27506: PPUSH
27507: CALL_OW 290
27511: GO 27475
27513: POP
27514: POP
// end ;
27515: PPOPN 2
27517: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27518: LD_EXP 52
27522: PUSH
27523: LD_EXP 97
27527: AND
27528: IFFALSE 27711
27530: GO 27532
27532: DISABLE
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27537: LD_ADDR_VAR 0 2
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_OWVAR 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PPUSH
27554: CALL_OW 69
27558: ST_TO_ADDR
// if not tmp then
27559: LD_VAR 0 2
27563: NOT
27564: IFFALSE 27568
// exit ;
27566: GO 27711
// for i := 1 to 2 do
27568: LD_ADDR_VAR 0 1
27572: PUSH
27573: DOUBLE
27574: LD_INT 1
27576: DEC
27577: ST_TO_ADDR
27578: LD_INT 2
27580: PUSH
27581: FOR_TO
27582: IFFALSE 27709
// begin uc_side := your_side ;
27584: LD_ADDR_OWVAR 20
27588: PUSH
27589: LD_OWVAR 2
27593: ST_TO_ADDR
// uc_nation := nation_american ;
27594: LD_ADDR_OWVAR 21
27598: PUSH
27599: LD_INT 1
27601: ST_TO_ADDR
// vc_chassis := us_morphling ;
27602: LD_ADDR_OWVAR 37
27606: PUSH
27607: LD_INT 5
27609: ST_TO_ADDR
// vc_engine := engine_siberite ;
27610: LD_ADDR_OWVAR 39
27614: PUSH
27615: LD_INT 3
27617: ST_TO_ADDR
// vc_control := control_computer ;
27618: LD_ADDR_OWVAR 38
27622: PUSH
27623: LD_INT 3
27625: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27626: LD_ADDR_OWVAR 40
27630: PUSH
27631: LD_INT 10
27633: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27634: LD_VAR 0 2
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PPUSH
27643: CALL_OW 310
27647: NOT
27648: IFFALSE 27695
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27650: CALL_OW 45
27654: PPUSH
27655: LD_VAR 0 2
27659: PUSH
27660: LD_INT 1
27662: ARRAY
27663: PPUSH
27664: CALL_OW 250
27668: PPUSH
27669: LD_VAR 0 2
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: PPUSH
27678: CALL_OW 251
27682: PPUSH
27683: LD_INT 12
27685: PPUSH
27686: LD_INT 1
27688: PPUSH
27689: CALL_OW 50
27693: GO 27707
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27695: CALL_OW 45
27699: PPUSH
27700: LD_INT 1
27702: PPUSH
27703: CALL_OW 51
// end ;
27707: GO 27581
27709: POP
27710: POP
// end ;
27711: PPOPN 2
27713: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27714: LD_EXP 52
27718: PUSH
27719: LD_EXP 98
27723: AND
27724: IFFALSE 27946
27726: GO 27728
27728: DISABLE
27729: LD_INT 0
27731: PPUSH
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27737: LD_ADDR_VAR 0 6
27741: PUSH
27742: LD_INT 22
27744: PUSH
27745: LD_OWVAR 2
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 21
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: LD_INT 23
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: PPUSH
27786: CALL_OW 69
27790: ST_TO_ADDR
// if not tmp then
27791: LD_VAR 0 6
27795: NOT
27796: IFFALSE 27800
// exit ;
27798: GO 27946
// s1 := rand ( 1 , 4 ) ;
27800: LD_ADDR_VAR 0 2
27804: PUSH
27805: LD_INT 1
27807: PPUSH
27808: LD_INT 4
27810: PPUSH
27811: CALL_OW 12
27815: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27816: LD_ADDR_VAR 0 4
27820: PUSH
27821: LD_VAR 0 6
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: LD_VAR 0 2
27834: PPUSH
27835: CALL_OW 259
27839: ST_TO_ADDR
// if s1 = 1 then
27840: LD_VAR 0 2
27844: PUSH
27845: LD_INT 1
27847: EQUAL
27848: IFFALSE 27868
// s2 := rand ( 2 , 4 ) else
27850: LD_ADDR_VAR 0 3
27854: PUSH
27855: LD_INT 2
27857: PPUSH
27858: LD_INT 4
27860: PPUSH
27861: CALL_OW 12
27865: ST_TO_ADDR
27866: GO 27876
// s2 := 1 ;
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27876: LD_ADDR_VAR 0 5
27880: PUSH
27881: LD_VAR 0 6
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: CALL_OW 259
27899: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27900: LD_VAR 0 6
27904: PUSH
27905: LD_INT 1
27907: ARRAY
27908: PPUSH
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_VAR 0 5
27918: PPUSH
27919: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27923: LD_VAR 0 6
27927: PUSH
27928: LD_INT 1
27930: ARRAY
27931: PPUSH
27932: LD_VAR 0 3
27936: PPUSH
27937: LD_VAR 0 4
27941: PPUSH
27942: CALL_OW 237
// end ;
27946: PPOPN 6
27948: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27949: LD_EXP 52
27953: PUSH
27954: LD_EXP 99
27958: AND
27959: IFFALSE 28038
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27967: LD_ADDR_VAR 0 1
27971: PUSH
27972: LD_INT 22
27974: PUSH
27975: LD_OWVAR 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 30
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 69
28002: ST_TO_ADDR
// if not tmp then
28003: LD_VAR 0 1
28007: NOT
28008: IFFALSE 28012
// exit ;
28010: GO 28038
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28012: LD_VAR 0 1
28016: PUSH
28017: LD_INT 1
28019: PPUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 12
28029: ARRAY
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 234
// end ;
28038: PPOPN 1
28040: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28041: LD_EXP 52
28045: PUSH
28046: LD_EXP 100
28050: AND
28051: IFFALSE 28163
28053: GO 28055
28055: DISABLE
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28060: LD_ADDR_VAR 0 2
28064: PUSH
28065: LD_INT 22
28067: PUSH
28068: LD_OWVAR 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 30
28082: PUSH
28083: LD_INT 27
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 30
28092: PUSH
28093: LD_INT 26
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 30
28102: PUSH
28103: LD_INT 28
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PPUSH
28120: CALL_OW 69
28124: ST_TO_ADDR
// if not tmp then
28125: LD_VAR 0 2
28129: NOT
28130: IFFALSE 28134
// exit ;
28132: GO 28163
// for i in tmp do
28134: LD_ADDR_VAR 0 1
28138: PUSH
28139: LD_VAR 0 2
28143: PUSH
28144: FOR_IN
28145: IFFALSE 28161
// SetLives ( i , 1 ) ;
28147: LD_VAR 0 1
28151: PPUSH
28152: LD_INT 1
28154: PPUSH
28155: CALL_OW 234
28159: GO 28144
28161: POP
28162: POP
// end ;
28163: PPOPN 2
28165: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28166: LD_EXP 52
28170: PUSH
28171: LD_EXP 101
28175: AND
28176: IFFALSE 28463
28178: GO 28180
28180: DISABLE
28181: LD_INT 0
28183: PPUSH
28184: PPUSH
28185: PPUSH
// begin i := rand ( 1 , 7 ) ;
28186: LD_ADDR_VAR 0 1
28190: PUSH
28191: LD_INT 1
28193: PPUSH
28194: LD_INT 7
28196: PPUSH
28197: CALL_OW 12
28201: ST_TO_ADDR
// case i of 1 :
28202: LD_VAR 0 1
28206: PUSH
28207: LD_INT 1
28209: DOUBLE
28210: EQUAL
28211: IFTRUE 28215
28213: GO 28225
28215: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28216: LD_STRING earthquake(getX(game), 0, 32)
28218: PPUSH
28219: CALL_OW 559
28223: GO 28463
28225: LD_INT 2
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28247
28233: POP
// begin ToLua ( displayStucuk(); ) ;
28234: LD_STRING displayStucuk();
28236: PPUSH
28237: CALL_OW 559
// ResetFog ;
28241: CALL_OW 335
// end ; 3 :
28245: GO 28463
28247: LD_INT 3
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28359
28255: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28256: LD_ADDR_VAR 0 2
28260: PUSH
28261: LD_INT 22
28263: PUSH
28264: LD_OWVAR 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 25
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PPUSH
28287: CALL_OW 69
28291: ST_TO_ADDR
// if not tmp then
28292: LD_VAR 0 2
28296: NOT
28297: IFFALSE 28301
// exit ;
28299: GO 28463
// un := tmp [ rand ( 1 , tmp ) ] ;
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_VAR 0 2
28310: PUSH
28311: LD_INT 1
28313: PPUSH
28314: LD_VAR 0 2
28318: PPUSH
28319: CALL_OW 12
28323: ARRAY
28324: ST_TO_ADDR
// if Crawls ( un ) then
28325: LD_VAR 0 3
28329: PPUSH
28330: CALL_OW 318
28334: IFFALSE 28345
// ComWalk ( un ) ;
28336: LD_VAR 0 3
28340: PPUSH
28341: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28345: LD_VAR 0 3
28349: PPUSH
28350: LD_INT 8
28352: PPUSH
28353: CALL_OW 336
// end ; 4 :
28357: GO 28463
28359: LD_INT 4
28361: DOUBLE
28362: EQUAL
28363: IFTRUE 28367
28365: GO 28441
28367: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_INT 22
28375: PUSH
28376: LD_OWVAR 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 30
28387: PUSH
28388: LD_INT 29
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PPUSH
28399: CALL_OW 69
28403: ST_TO_ADDR
// if not tmp then
28404: LD_VAR 0 2
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 28463
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28413: LD_VAR 0 2
28417: PUSH
28418: LD_INT 1
28420: ARRAY
28421: PPUSH
28422: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28426: LD_VAR 0 2
28430: PUSH
28431: LD_INT 1
28433: ARRAY
28434: PPUSH
28435: CALL_OW 65
// end ; 5 .. 7 :
28439: GO 28463
28441: LD_INT 5
28443: DOUBLE
28444: GREATEREQUAL
28445: IFFALSE 28453
28447: LD_INT 7
28449: DOUBLE
28450: LESSEQUAL
28451: IFTRUE 28455
28453: GO 28462
28455: POP
// StreamSibBomb ; end ;
28456: CALL 24700 0 0
28460: GO 28463
28462: POP
// end ;
28463: PPOPN 3
28465: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28466: LD_EXP 52
28470: PUSH
28471: LD_EXP 102
28475: AND
28476: IFFALSE 28632
28478: GO 28480
28480: DISABLE
28481: LD_INT 0
28483: PPUSH
28484: PPUSH
28485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_INT 81
28493: PUSH
28494: LD_OWVAR 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 21
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 21
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: ST_TO_ADDR
// if not tmp then
28540: LD_VAR 0 2
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28632
// p := 0 ;
28549: LD_ADDR_VAR 0 3
28553: PUSH
28554: LD_INT 0
28556: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28557: LD_INT 35
28559: PPUSH
28560: CALL_OW 67
// p := p + 1 ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_VAR 0 3
28573: PUSH
28574: LD_INT 1
28576: PLUS
28577: ST_TO_ADDR
// for i in tmp do
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_VAR 0 2
28587: PUSH
28588: FOR_IN
28589: IFFALSE 28620
// if GetLives ( i ) < 1000 then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 256
28600: PUSH
28601: LD_INT 1000
28603: LESS
28604: IFFALSE 28618
// SetLives ( i , 1000 ) ;
28606: LD_VAR 0 1
28610: PPUSH
28611: LD_INT 1000
28613: PPUSH
28614: CALL_OW 234
28618: GO 28588
28620: POP
28621: POP
// until p > 20 ;
28622: LD_VAR 0 3
28626: PUSH
28627: LD_INT 20
28629: GREATER
28630: IFFALSE 28557
// end ;
28632: PPOPN 3
28634: END
// every 0 0$1 trigger StreamModeActive and sTime do
28635: LD_EXP 52
28639: PUSH
28640: LD_EXP 103
28644: AND
28645: IFFALSE 28680
28647: GO 28649
28649: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28650: LD_INT 28
28652: PPUSH
28653: LD_OWVAR 2
28657: PPUSH
28658: LD_INT 2
28660: PPUSH
28661: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28665: LD_INT 30
28667: PPUSH
28668: LD_OWVAR 2
28672: PPUSH
28673: LD_INT 2
28675: PPUSH
28676: CALL_OW 322
// end ;
28680: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28681: LD_EXP 52
28685: PUSH
28686: LD_EXP 104
28690: AND
28691: IFFALSE 28812
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
28699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28700: LD_ADDR_VAR 0 2
28704: PUSH
28705: LD_INT 22
28707: PUSH
28708: LD_OWVAR 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 21
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 3
28729: PUSH
28730: LD_INT 23
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: PPUSH
28749: CALL_OW 69
28753: ST_TO_ADDR
// if not tmp then
28754: LD_VAR 0 2
28758: NOT
28759: IFFALSE 28763
// exit ;
28761: GO 28812
// for i in tmp do
28763: LD_ADDR_VAR 0 1
28767: PUSH
28768: LD_VAR 0 2
28772: PUSH
28773: FOR_IN
28774: IFFALSE 28810
// begin if Crawls ( i ) then
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 318
28785: IFFALSE 28796
// ComWalk ( i ) ;
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL_OW 138
// SetClass ( i , 2 ) ;
28796: LD_VAR 0 1
28800: PPUSH
28801: LD_INT 2
28803: PPUSH
28804: CALL_OW 336
// end ;
28808: GO 28773
28810: POP
28811: POP
// end ;
28812: PPOPN 2
28814: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28815: LD_EXP 52
28819: PUSH
28820: LD_EXP 105
28824: AND
28825: IFFALSE 29113
28827: GO 28829
28829: DISABLE
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28835: LD_OWVAR 2
28839: PPUSH
28840: LD_INT 9
28842: PPUSH
28843: LD_INT 1
28845: PPUSH
28846: LD_INT 1
28848: PPUSH
28849: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28853: LD_INT 9
28855: PPUSH
28856: LD_OWVAR 2
28860: PPUSH
28861: CALL_OW 343
// uc_side := 9 ;
28865: LD_ADDR_OWVAR 20
28869: PUSH
28870: LD_INT 9
28872: ST_TO_ADDR
// uc_nation := 2 ;
28873: LD_ADDR_OWVAR 21
28877: PUSH
28878: LD_INT 2
28880: ST_TO_ADDR
// hc_name := Dark Warrior ;
28881: LD_ADDR_OWVAR 26
28885: PUSH
28886: LD_STRING Dark Warrior
28888: ST_TO_ADDR
// hc_gallery :=  ;
28889: LD_ADDR_OWVAR 33
28893: PUSH
28894: LD_STRING 
28896: ST_TO_ADDR
// hc_noskilllimit := true ;
28897: LD_ADDR_OWVAR 76
28901: PUSH
28902: LD_INT 1
28904: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28905: LD_ADDR_OWVAR 31
28909: PUSH
28910: LD_INT 30
28912: PUSH
28913: LD_INT 30
28915: PUSH
28916: LD_INT 30
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: ST_TO_ADDR
// un := CreateHuman ;
28928: LD_ADDR_VAR 0 3
28932: PUSH
28933: CALL_OW 44
28937: ST_TO_ADDR
// hc_noskilllimit := false ;
28938: LD_ADDR_OWVAR 76
28942: PUSH
28943: LD_INT 0
28945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28946: LD_VAR 0 3
28950: PPUSH
28951: LD_INT 1
28953: PPUSH
28954: CALL_OW 51
// ToLua ( playRanger() ) ;
28958: LD_STRING playRanger()
28960: PPUSH
28961: CALL_OW 559
// p := 0 ;
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 0
28972: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28973: LD_INT 35
28975: PPUSH
28976: CALL_OW 67
// p := p + 1 ;
28980: LD_ADDR_VAR 0 2
28984: PUSH
28985: LD_VAR 0 2
28989: PUSH
28990: LD_INT 1
28992: PLUS
28993: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 256
29003: PUSH
29004: LD_INT 1000
29006: LESS
29007: IFFALSE 29021
// SetLives ( un , 1000 ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: LD_INT 1000
29016: PPUSH
29017: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29021: LD_VAR 0 3
29025: PPUSH
29026: LD_INT 81
29028: PUSH
29029: LD_OWVAR 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 91
29040: PUSH
29041: LD_VAR 0 3
29045: PUSH
29046: LD_INT 30
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PPUSH
29058: CALL_OW 69
29062: PPUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 74
29072: PPUSH
29073: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29077: LD_VAR 0 2
29081: PUSH
29082: LD_INT 80
29084: GREATER
29085: PUSH
29086: LD_VAR 0 3
29090: PPUSH
29091: CALL_OW 301
29095: OR
29096: IFFALSE 28973
// if un then
29098: LD_VAR 0 3
29102: IFFALSE 29113
// RemoveUnit ( un ) ;
29104: LD_VAR 0 3
29108: PPUSH
29109: CALL_OW 64
// end ;
29113: PPOPN 3
29115: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29116: LD_EXP 106
29120: IFFALSE 29236
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
29128: PPUSH
29129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29130: LD_ADDR_VAR 0 2
29134: PUSH
29135: LD_INT 81
29137: PUSH
29138: LD_OWVAR 2
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 21
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PPUSH
29161: CALL_OW 69
29165: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29166: LD_STRING playComputer()
29168: PPUSH
29169: CALL_OW 559
// if not tmp then
29173: LD_VAR 0 2
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29236
// for i in tmp do
29182: LD_ADDR_VAR 0 1
29186: PUSH
29187: LD_VAR 0 2
29191: PUSH
29192: FOR_IN
29193: IFFALSE 29234
// for j := 1 to 4 do
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: DOUBLE
29201: LD_INT 1
29203: DEC
29204: ST_TO_ADDR
29205: LD_INT 4
29207: PUSH
29208: FOR_TO
29209: IFFALSE 29230
// SetSkill ( i , j , 10 ) ;
29211: LD_VAR 0 1
29215: PPUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: LD_INT 10
29223: PPUSH
29224: CALL_OW 237
29228: GO 29208
29230: POP
29231: POP
29232: GO 29192
29234: POP
29235: POP
// end ;
29236: PPOPN 3
29238: END
// every 0 0$1 trigger s30 do var i , tmp ;
29239: LD_EXP 107
29243: IFFALSE 29312
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29252: LD_ADDR_VAR 0 2
29256: PUSH
29257: LD_INT 22
29259: PUSH
29260: LD_OWVAR 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL_OW 69
29273: ST_TO_ADDR
// if not tmp then
29274: LD_VAR 0 2
29278: NOT
29279: IFFALSE 29283
// exit ;
29281: GO 29312
// for i in tmp do
29283: LD_ADDR_VAR 0 1
29287: PUSH
29288: LD_VAR 0 2
29292: PUSH
29293: FOR_IN
29294: IFFALSE 29310
// SetLives ( i , 300 ) ;
29296: LD_VAR 0 1
29300: PPUSH
29301: LD_INT 300
29303: PPUSH
29304: CALL_OW 234
29308: GO 29293
29310: POP
29311: POP
// end ;
29312: PPOPN 2
29314: END
// every 0 0$1 trigger s60 do var i , tmp ;
29315: LD_EXP 108
29319: IFFALSE 29388
29321: GO 29323
29323: DISABLE
29324: LD_INT 0
29326: PPUSH
29327: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29328: LD_ADDR_VAR 0 2
29332: PUSH
29333: LD_INT 22
29335: PUSH
29336: LD_OWVAR 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 69
29349: ST_TO_ADDR
// if not tmp then
29350: LD_VAR 0 2
29354: NOT
29355: IFFALSE 29359
// exit ;
29357: GO 29388
// for i in tmp do
29359: LD_ADDR_VAR 0 1
29363: PUSH
29364: LD_VAR 0 2
29368: PUSH
29369: FOR_IN
29370: IFFALSE 29386
// SetLives ( i , 600 ) ;
29372: LD_VAR 0 1
29376: PPUSH
29377: LD_INT 600
29379: PPUSH
29380: CALL_OW 234
29384: GO 29369
29386: POP
29387: POP
// end ;
29388: PPOPN 2
29390: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29391: LD_INT 0
29393: PPUSH
// case cmd of 301 :
29394: LD_VAR 0 1
29398: PUSH
29399: LD_INT 301
29401: DOUBLE
29402: EQUAL
29403: IFTRUE 29407
29405: GO 29439
29407: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29408: LD_VAR 0 6
29412: PPUSH
29413: LD_VAR 0 7
29417: PPUSH
29418: LD_VAR 0 8
29422: PPUSH
29423: LD_VAR 0 4
29427: PPUSH
29428: LD_VAR 0 5
29432: PPUSH
29433: CALL 30640 0 5
29437: GO 29560
29439: LD_INT 302
29441: DOUBLE
29442: EQUAL
29443: IFTRUE 29447
29445: GO 29484
29447: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29448: LD_VAR 0 6
29452: PPUSH
29453: LD_VAR 0 7
29457: PPUSH
29458: LD_VAR 0 8
29462: PPUSH
29463: LD_VAR 0 9
29467: PPUSH
29468: LD_VAR 0 4
29472: PPUSH
29473: LD_VAR 0 5
29477: PPUSH
29478: CALL 30731 0 6
29482: GO 29560
29484: LD_INT 303
29486: DOUBLE
29487: EQUAL
29488: IFTRUE 29492
29490: GO 29529
29492: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29493: LD_VAR 0 6
29497: PPUSH
29498: LD_VAR 0 7
29502: PPUSH
29503: LD_VAR 0 8
29507: PPUSH
29508: LD_VAR 0 9
29512: PPUSH
29513: LD_VAR 0 4
29517: PPUSH
29518: LD_VAR 0 5
29522: PPUSH
29523: CALL 29565 0 6
29527: GO 29560
29529: LD_INT 304
29531: DOUBLE
29532: EQUAL
29533: IFTRUE 29537
29535: GO 29559
29537: POP
// hHackTeleport ( unit , x , y ) ; end ;
29538: LD_VAR 0 2
29542: PPUSH
29543: LD_VAR 0 4
29547: PPUSH
29548: LD_VAR 0 5
29552: PPUSH
29553: CALL 31324 0 3
29557: GO 29560
29559: POP
// end ;
29560: LD_VAR 0 12
29564: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29569: LD_VAR 0 1
29573: PUSH
29574: LD_INT 1
29576: LESS
29577: PUSH
29578: LD_VAR 0 1
29582: PUSH
29583: LD_INT 3
29585: GREATER
29586: OR
29587: PUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: LD_VAR 0 6
29597: PPUSH
29598: CALL_OW 428
29602: OR
29603: IFFALSE 29607
// exit ;
29605: GO 30327
// uc_side := your_side ;
29607: LD_ADDR_OWVAR 20
29611: PUSH
29612: LD_OWVAR 2
29616: ST_TO_ADDR
// uc_nation := nation ;
29617: LD_ADDR_OWVAR 21
29621: PUSH
29622: LD_VAR 0 1
29626: ST_TO_ADDR
// bc_level = 1 ;
29627: LD_ADDR_OWVAR 43
29631: PUSH
29632: LD_INT 1
29634: ST_TO_ADDR
// case btype of 1 :
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 1
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29648
29646: GO 29659
29648: POP
// bc_type := b_depot ; 2 :
29649: LD_ADDR_OWVAR 42
29653: PUSH
29654: LD_INT 0
29656: ST_TO_ADDR
29657: GO 30271
29659: LD_INT 2
29661: DOUBLE
29662: EQUAL
29663: IFTRUE 29667
29665: GO 29678
29667: POP
// bc_type := b_warehouse ; 3 :
29668: LD_ADDR_OWVAR 42
29672: PUSH
29673: LD_INT 1
29675: ST_TO_ADDR
29676: GO 30271
29678: LD_INT 3
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29697
29686: POP
// bc_type := b_lab ; 4 .. 9 :
29687: LD_ADDR_OWVAR 42
29691: PUSH
29692: LD_INT 6
29694: ST_TO_ADDR
29695: GO 30271
29697: LD_INT 4
29699: DOUBLE
29700: GREATEREQUAL
29701: IFFALSE 29709
29703: LD_INT 9
29705: DOUBLE
29706: LESSEQUAL
29707: IFTRUE 29711
29709: GO 29763
29711: POP
// begin bc_type := b_lab_half ;
29712: LD_ADDR_OWVAR 42
29716: PUSH
29717: LD_INT 7
29719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29720: LD_ADDR_OWVAR 44
29724: PUSH
29725: LD_INT 10
29727: PUSH
29728: LD_INT 11
29730: PUSH
29731: LD_INT 12
29733: PUSH
29734: LD_INT 15
29736: PUSH
29737: LD_INT 14
29739: PUSH
29740: LD_INT 13
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: PUSH
29751: LD_VAR 0 2
29755: PUSH
29756: LD_INT 3
29758: MINUS
29759: ARRAY
29760: ST_TO_ADDR
// end ; 10 .. 13 :
29761: GO 30271
29763: LD_INT 10
29765: DOUBLE
29766: GREATEREQUAL
29767: IFFALSE 29775
29769: LD_INT 13
29771: DOUBLE
29772: LESSEQUAL
29773: IFTRUE 29777
29775: GO 29854
29777: POP
// begin bc_type := b_lab_full ;
29778: LD_ADDR_OWVAR 42
29782: PUSH
29783: LD_INT 8
29785: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29786: LD_ADDR_OWVAR 44
29790: PUSH
29791: LD_INT 10
29793: PUSH
29794: LD_INT 12
29796: PUSH
29797: LD_INT 14
29799: PUSH
29800: LD_INT 13
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: PUSH
29809: LD_VAR 0 2
29813: PUSH
29814: LD_INT 9
29816: MINUS
29817: ARRAY
29818: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29819: LD_ADDR_OWVAR 45
29823: PUSH
29824: LD_INT 11
29826: PUSH
29827: LD_INT 15
29829: PUSH
29830: LD_INT 12
29832: PUSH
29833: LD_INT 15
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: LD_VAR 0 2
29846: PUSH
29847: LD_INT 9
29849: MINUS
29850: ARRAY
29851: ST_TO_ADDR
// end ; 14 :
29852: GO 30271
29854: LD_INT 14
29856: DOUBLE
29857: EQUAL
29858: IFTRUE 29862
29860: GO 29873
29862: POP
// bc_type := b_workshop ; 15 :
29863: LD_ADDR_OWVAR 42
29867: PUSH
29868: LD_INT 2
29870: ST_TO_ADDR
29871: GO 30271
29873: LD_INT 15
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 29892
29881: POP
// bc_type := b_factory ; 16 :
29882: LD_ADDR_OWVAR 42
29886: PUSH
29887: LD_INT 3
29889: ST_TO_ADDR
29890: GO 30271
29892: LD_INT 16
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29911
29900: POP
// bc_type := b_ext_gun ; 17 :
29901: LD_ADDR_OWVAR 42
29905: PUSH
29906: LD_INT 17
29908: ST_TO_ADDR
29909: GO 30271
29911: LD_INT 17
29913: DOUBLE
29914: EQUAL
29915: IFTRUE 29919
29917: GO 29947
29919: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29920: LD_ADDR_OWVAR 42
29924: PUSH
29925: LD_INT 19
29927: PUSH
29928: LD_INT 23
29930: PUSH
29931: LD_INT 19
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: PUSH
29939: LD_VAR 0 1
29943: ARRAY
29944: ST_TO_ADDR
29945: GO 30271
29947: LD_INT 18
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29955
29953: GO 29966
29955: POP
// bc_type := b_ext_radar ; 19 :
29956: LD_ADDR_OWVAR 42
29960: PUSH
29961: LD_INT 20
29963: ST_TO_ADDR
29964: GO 30271
29966: LD_INT 19
29968: DOUBLE
29969: EQUAL
29970: IFTRUE 29974
29972: GO 29985
29974: POP
// bc_type := b_ext_radio ; 20 :
29975: LD_ADDR_OWVAR 42
29979: PUSH
29980: LD_INT 22
29982: ST_TO_ADDR
29983: GO 30271
29985: LD_INT 20
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30004
29993: POP
// bc_type := b_ext_siberium ; 21 :
29994: LD_ADDR_OWVAR 42
29998: PUSH
29999: LD_INT 21
30001: ST_TO_ADDR
30002: GO 30271
30004: LD_INT 21
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30023
30012: POP
// bc_type := b_ext_computer ; 22 :
30013: LD_ADDR_OWVAR 42
30017: PUSH
30018: LD_INT 24
30020: ST_TO_ADDR
30021: GO 30271
30023: LD_INT 22
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30031
30029: GO 30042
30031: POP
// bc_type := b_ext_track ; 23 :
30032: LD_ADDR_OWVAR 42
30036: PUSH
30037: LD_INT 16
30039: ST_TO_ADDR
30040: GO 30271
30042: LD_INT 23
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30061
30050: POP
// bc_type := b_ext_laser ; 24 :
30051: LD_ADDR_OWVAR 42
30055: PUSH
30056: LD_INT 25
30058: ST_TO_ADDR
30059: GO 30271
30061: LD_INT 24
30063: DOUBLE
30064: EQUAL
30065: IFTRUE 30069
30067: GO 30080
30069: POP
// bc_type := b_control_tower ; 25 :
30070: LD_ADDR_OWVAR 42
30074: PUSH
30075: LD_INT 36
30077: ST_TO_ADDR
30078: GO 30271
30080: LD_INT 25
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30088
30086: GO 30099
30088: POP
// bc_type := b_breastwork ; 26 :
30089: LD_ADDR_OWVAR 42
30093: PUSH
30094: LD_INT 31
30096: ST_TO_ADDR
30097: GO 30271
30099: LD_INT 26
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30118
30107: POP
// bc_type := b_bunker ; 27 :
30108: LD_ADDR_OWVAR 42
30112: PUSH
30113: LD_INT 32
30115: ST_TO_ADDR
30116: GO 30271
30118: LD_INT 27
30120: DOUBLE
30121: EQUAL
30122: IFTRUE 30126
30124: GO 30137
30126: POP
// bc_type := b_turret ; 28 :
30127: LD_ADDR_OWVAR 42
30131: PUSH
30132: LD_INT 33
30134: ST_TO_ADDR
30135: GO 30271
30137: LD_INT 28
30139: DOUBLE
30140: EQUAL
30141: IFTRUE 30145
30143: GO 30156
30145: POP
// bc_type := b_armoury ; 29 :
30146: LD_ADDR_OWVAR 42
30150: PUSH
30151: LD_INT 4
30153: ST_TO_ADDR
30154: GO 30271
30156: LD_INT 29
30158: DOUBLE
30159: EQUAL
30160: IFTRUE 30164
30162: GO 30175
30164: POP
// bc_type := b_barracks ; 30 :
30165: LD_ADDR_OWVAR 42
30169: PUSH
30170: LD_INT 5
30172: ST_TO_ADDR
30173: GO 30271
30175: LD_INT 30
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30194
30183: POP
// bc_type := b_solar_power ; 31 :
30184: LD_ADDR_OWVAR 42
30188: PUSH
30189: LD_INT 27
30191: ST_TO_ADDR
30192: GO 30271
30194: LD_INT 31
30196: DOUBLE
30197: EQUAL
30198: IFTRUE 30202
30200: GO 30213
30202: POP
// bc_type := b_oil_power ; 32 :
30203: LD_ADDR_OWVAR 42
30207: PUSH
30208: LD_INT 26
30210: ST_TO_ADDR
30211: GO 30271
30213: LD_INT 32
30215: DOUBLE
30216: EQUAL
30217: IFTRUE 30221
30219: GO 30232
30221: POP
// bc_type := b_siberite_power ; 33 :
30222: LD_ADDR_OWVAR 42
30226: PUSH
30227: LD_INT 28
30229: ST_TO_ADDR
30230: GO 30271
30232: LD_INT 33
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// bc_type := b_oil_mine ; 34 :
30241: LD_ADDR_OWVAR 42
30245: PUSH
30246: LD_INT 29
30248: ST_TO_ADDR
30249: GO 30271
30251: LD_INT 34
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30270
30259: POP
// bc_type := b_siberite_mine ; end ;
30260: LD_ADDR_OWVAR 42
30264: PUSH
30265: LD_INT 30
30267: ST_TO_ADDR
30268: GO 30271
30270: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30271: LD_ADDR_VAR 0 8
30275: PUSH
30276: LD_VAR 0 5
30280: PPUSH
30281: LD_VAR 0 6
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 47
30295: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30296: LD_OWVAR 42
30300: PUSH
30301: LD_INT 32
30303: PUSH
30304: LD_INT 33
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: IN
30311: IFFALSE 30327
// PlaceWeaponTurret ( b , weapon ) ;
30313: LD_VAR 0 8
30317: PPUSH
30318: LD_VAR 0 4
30322: PPUSH
30323: CALL_OW 431
// end ;
30327: LD_VAR 0 7
30331: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30332: LD_INT 0
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30338: LD_ADDR_VAR 0 4
30342: PUSH
30343: LD_INT 22
30345: PUSH
30346: LD_OWVAR 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 69
30391: ST_TO_ADDR
// if not tmp then
30392: LD_VAR 0 4
30396: NOT
30397: IFFALSE 30401
// exit ;
30399: GO 30460
// for i in tmp do
30401: LD_ADDR_VAR 0 2
30405: PUSH
30406: LD_VAR 0 4
30410: PUSH
30411: FOR_IN
30412: IFFALSE 30458
// for j = 1 to 3 do
30414: LD_ADDR_VAR 0 3
30418: PUSH
30419: DOUBLE
30420: LD_INT 1
30422: DEC
30423: ST_TO_ADDR
30424: LD_INT 3
30426: PUSH
30427: FOR_TO
30428: IFFALSE 30454
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 274
30439: PPUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: LD_INT 99999
30447: PPUSH
30448: CALL_OW 277
30452: GO 30427
30454: POP
30455: POP
30456: GO 30411
30458: POP
30459: POP
// end ;
30460: LD_VAR 0 1
30464: RET
// export function hHackSetLevel10 ; var i , j ; begin
30465: LD_INT 0
30467: PPUSH
30468: PPUSH
30469: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30470: LD_ADDR_VAR 0 2
30474: PUSH
30475: LD_INT 21
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PPUSH
30485: CALL_OW 69
30489: PUSH
30490: FOR_IN
30491: IFFALSE 30543
// if IsSelected ( i ) then
30493: LD_VAR 0 2
30497: PPUSH
30498: CALL_OW 306
30502: IFFALSE 30541
// begin for j := 1 to 4 do
30504: LD_ADDR_VAR 0 3
30508: PUSH
30509: DOUBLE
30510: LD_INT 1
30512: DEC
30513: ST_TO_ADDR
30514: LD_INT 4
30516: PUSH
30517: FOR_TO
30518: IFFALSE 30539
// SetSkill ( i , j , 10 ) ;
30520: LD_VAR 0 2
30524: PPUSH
30525: LD_VAR 0 3
30529: PPUSH
30530: LD_INT 10
30532: PPUSH
30533: CALL_OW 237
30537: GO 30517
30539: POP
30540: POP
// end ;
30541: GO 30490
30543: POP
30544: POP
// end ;
30545: LD_VAR 0 1
30549: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30550: LD_INT 0
30552: PPUSH
30553: PPUSH
30554: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30555: LD_ADDR_VAR 0 2
30559: PUSH
30560: LD_INT 22
30562: PUSH
30563: LD_OWVAR 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 21
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: PUSH
30591: FOR_IN
30592: IFFALSE 30633
// begin for j := 1 to 4 do
30594: LD_ADDR_VAR 0 3
30598: PUSH
30599: DOUBLE
30600: LD_INT 1
30602: DEC
30603: ST_TO_ADDR
30604: LD_INT 4
30606: PUSH
30607: FOR_TO
30608: IFFALSE 30629
// SetSkill ( i , j , 10 ) ;
30610: LD_VAR 0 2
30614: PPUSH
30615: LD_VAR 0 3
30619: PPUSH
30620: LD_INT 10
30622: PPUSH
30623: CALL_OW 237
30627: GO 30607
30629: POP
30630: POP
// end ;
30631: GO 30591
30633: POP
30634: POP
// end ;
30635: LD_VAR 0 1
30639: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30640: LD_INT 0
30642: PPUSH
// uc_side := your_side ;
30643: LD_ADDR_OWVAR 20
30647: PUSH
30648: LD_OWVAR 2
30652: ST_TO_ADDR
// uc_nation := nation ;
30653: LD_ADDR_OWVAR 21
30657: PUSH
30658: LD_VAR 0 1
30662: ST_TO_ADDR
// InitHc ;
30663: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30667: LD_INT 0
30669: PPUSH
30670: LD_VAR 0 2
30674: PPUSH
30675: LD_VAR 0 3
30679: PPUSH
30680: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30684: LD_VAR 0 4
30688: PPUSH
30689: LD_VAR 0 5
30693: PPUSH
30694: CALL_OW 428
30698: PUSH
30699: LD_INT 0
30701: EQUAL
30702: IFFALSE 30726
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30704: CALL_OW 44
30708: PPUSH
30709: LD_VAR 0 4
30713: PPUSH
30714: LD_VAR 0 5
30718: PPUSH
30719: LD_INT 1
30721: PPUSH
30722: CALL_OW 48
// end ;
30726: LD_VAR 0 6
30730: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30731: LD_INT 0
30733: PPUSH
30734: PPUSH
// uc_side := your_side ;
30735: LD_ADDR_OWVAR 20
30739: PUSH
30740: LD_OWVAR 2
30744: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30745: LD_VAR 0 1
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: IN
30772: IFFALSE 30784
// uc_nation := nation_american else
30774: LD_ADDR_OWVAR 21
30778: PUSH
30779: LD_INT 1
30781: ST_TO_ADDR
30782: GO 30827
// if chassis in [ 11 , 12 , 13 , 14 ] then
30784: LD_VAR 0 1
30788: PUSH
30789: LD_INT 11
30791: PUSH
30792: LD_INT 12
30794: PUSH
30795: LD_INT 13
30797: PUSH
30798: LD_INT 14
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: IN
30807: IFFALSE 30819
// uc_nation := nation_arabian else
30809: LD_ADDR_OWVAR 21
30813: PUSH
30814: LD_INT 2
30816: ST_TO_ADDR
30817: GO 30827
// uc_nation := nation_russian ;
30819: LD_ADDR_OWVAR 21
30823: PUSH
30824: LD_INT 3
30826: ST_TO_ADDR
// vc_chassis := chassis ;
30827: LD_ADDR_OWVAR 37
30831: PUSH
30832: LD_VAR 0 1
30836: ST_TO_ADDR
// vc_engine := engine ;
30837: LD_ADDR_OWVAR 39
30841: PUSH
30842: LD_VAR 0 2
30846: ST_TO_ADDR
// vc_control := control ;
30847: LD_ADDR_OWVAR 38
30851: PUSH
30852: LD_VAR 0 3
30856: ST_TO_ADDR
// vc_weapon := weapon ;
30857: LD_ADDR_OWVAR 40
30861: PUSH
30862: LD_VAR 0 4
30866: ST_TO_ADDR
// un := CreateVehicle ;
30867: LD_ADDR_VAR 0 8
30871: PUSH
30872: CALL_OW 45
30876: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30877: LD_VAR 0 8
30881: PPUSH
30882: LD_INT 0
30884: PPUSH
30885: LD_INT 5
30887: PPUSH
30888: CALL_OW 12
30892: PPUSH
30893: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30897: LD_VAR 0 8
30901: PPUSH
30902: LD_VAR 0 5
30906: PPUSH
30907: LD_VAR 0 6
30911: PPUSH
30912: LD_INT 1
30914: PPUSH
30915: CALL_OW 48
// end ;
30919: LD_VAR 0 7
30923: RET
// export hInvincible ; every 1 do
30924: GO 30926
30926: DISABLE
// hInvincible := [ ] ;
30927: LD_ADDR_EXP 109
30931: PUSH
30932: EMPTY
30933: ST_TO_ADDR
30934: END
// every 10 do var i ;
30935: GO 30937
30937: DISABLE
30938: LD_INT 0
30940: PPUSH
// begin enable ;
30941: ENABLE
// if not hInvincible then
30942: LD_EXP 109
30946: NOT
30947: IFFALSE 30951
// exit ;
30949: GO 30995
// for i in hInvincible do
30951: LD_ADDR_VAR 0 1
30955: PUSH
30956: LD_EXP 109
30960: PUSH
30961: FOR_IN
30962: IFFALSE 30993
// if GetLives ( i ) < 1000 then
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 256
30973: PUSH
30974: LD_INT 1000
30976: LESS
30977: IFFALSE 30991
// SetLives ( i , 1000 ) ;
30979: LD_VAR 0 1
30983: PPUSH
30984: LD_INT 1000
30986: PPUSH
30987: CALL_OW 234
30991: GO 30961
30993: POP
30994: POP
// end ;
30995: PPOPN 1
30997: END
// export function hHackInvincible ; var i ; begin
30998: LD_INT 0
31000: PPUSH
31001: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31002: LD_ADDR_VAR 0 2
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 21
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 21
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 69
31039: PUSH
31040: FOR_IN
31041: IFFALSE 31102
// if IsSelected ( i ) then
31043: LD_VAR 0 2
31047: PPUSH
31048: CALL_OW 306
31052: IFFALSE 31100
// begin if i in hInvincible then
31054: LD_VAR 0 2
31058: PUSH
31059: LD_EXP 109
31063: IN
31064: IFFALSE 31084
// hInvincible := hInvincible diff i else
31066: LD_ADDR_EXP 109
31070: PUSH
31071: LD_EXP 109
31075: PUSH
31076: LD_VAR 0 2
31080: DIFF
31081: ST_TO_ADDR
31082: GO 31100
// hInvincible := hInvincible union i ;
31084: LD_ADDR_EXP 109
31088: PUSH
31089: LD_EXP 109
31093: PUSH
31094: LD_VAR 0 2
31098: UNION
31099: ST_TO_ADDR
// end ;
31100: GO 31040
31102: POP
31103: POP
// end ;
31104: LD_VAR 0 1
31108: RET
// export function hHackInvisible ; var i , j ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
31113: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31114: LD_ADDR_VAR 0 2
31118: PUSH
31119: LD_INT 21
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL_OW 69
31133: PUSH
31134: FOR_IN
31135: IFFALSE 31159
// if IsSelected ( i ) then
31137: LD_VAR 0 2
31141: PPUSH
31142: CALL_OW 306
31146: IFFALSE 31157
// ComForceInvisible ( i ) ;
31148: LD_VAR 0 2
31152: PPUSH
31153: CALL_OW 496
31157: GO 31134
31159: POP
31160: POP
// end ;
31161: LD_VAR 0 1
31165: RET
// export function hHackChangeYourSide ; begin
31166: LD_INT 0
31168: PPUSH
// if your_side = 8 then
31169: LD_OWVAR 2
31173: PUSH
31174: LD_INT 8
31176: EQUAL
31177: IFFALSE 31189
// your_side := 0 else
31179: LD_ADDR_OWVAR 2
31183: PUSH
31184: LD_INT 0
31186: ST_TO_ADDR
31187: GO 31203
// your_side := your_side + 1 ;
31189: LD_ADDR_OWVAR 2
31193: PUSH
31194: LD_OWVAR 2
31198: PUSH
31199: LD_INT 1
31201: PLUS
31202: ST_TO_ADDR
// end ;
31203: LD_VAR 0 1
31207: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31208: LD_INT 0
31210: PPUSH
31211: PPUSH
31212: PPUSH
// for i in all_units do
31213: LD_ADDR_VAR 0 2
31217: PUSH
31218: LD_OWVAR 3
31222: PUSH
31223: FOR_IN
31224: IFFALSE 31302
// if IsSelected ( i ) then
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 306
31235: IFFALSE 31300
// begin j := GetSide ( i ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: CALL_OW 255
31251: ST_TO_ADDR
// if j = 8 then
31252: LD_VAR 0 3
31256: PUSH
31257: LD_INT 8
31259: EQUAL
31260: IFFALSE 31272
// j := 0 else
31262: LD_ADDR_VAR 0 3
31266: PUSH
31267: LD_INT 0
31269: ST_TO_ADDR
31270: GO 31286
// j := j + 1 ;
31272: LD_ADDR_VAR 0 3
31276: PUSH
31277: LD_VAR 0 3
31281: PUSH
31282: LD_INT 1
31284: PLUS
31285: ST_TO_ADDR
// SetSide ( i , j ) ;
31286: LD_VAR 0 2
31290: PPUSH
31291: LD_VAR 0 3
31295: PPUSH
31296: CALL_OW 235
// end ;
31300: GO 31223
31302: POP
31303: POP
// end ;
31304: LD_VAR 0 1
31308: RET
// export function hHackFog ; begin
31309: LD_INT 0
31311: PPUSH
// FogOff ( true ) ;
31312: LD_INT 1
31314: PPUSH
31315: CALL_OW 344
// end ;
31319: LD_VAR 0 1
31323: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31324: LD_INT 0
31326: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31327: LD_VAR 0 1
31331: PPUSH
31332: LD_VAR 0 2
31336: PPUSH
31337: LD_VAR 0 3
31341: PPUSH
31342: LD_INT 1
31344: PPUSH
31345: LD_INT 1
31347: PPUSH
31348: CALL_OW 483
// CenterOnXY ( x , y ) ;
31352: LD_VAR 0 2
31356: PPUSH
31357: LD_VAR 0 3
31361: PPUSH
31362: CALL_OW 84
// end ;
31366: LD_VAR 0 4
31370: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31371: LD_INT 0
31373: PPUSH
31374: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31375: LD_VAR 0 1
31379: NOT
31380: PUSH
31381: LD_VAR 0 2
31385: PPUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: CALL_OW 488
31395: NOT
31396: OR
31397: PUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 266
31407: PUSH
31408: LD_INT 3
31410: NONEQUAL
31411: PUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL_OW 247
31421: PUSH
31422: LD_INT 1
31424: EQUAL
31425: NOT
31426: AND
31427: OR
31428: IFFALSE 31432
// exit ;
31430: GO 31581
// if GetType ( factory ) = unit_human then
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 247
31441: PUSH
31442: LD_INT 1
31444: EQUAL
31445: IFFALSE 31462
// factory := IsInUnit ( factory ) ;
31447: LD_ADDR_VAR 0 1
31451: PUSH
31452: LD_VAR 0 1
31456: PPUSH
31457: CALL_OW 310
31461: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 266
31471: PUSH
31472: LD_INT 3
31474: NONEQUAL
31475: IFFALSE 31479
// exit ;
31477: GO 31581
// if HexInfo ( x , y ) = factory then
31479: LD_VAR 0 2
31483: PPUSH
31484: LD_VAR 0 3
31488: PPUSH
31489: CALL_OW 428
31493: PUSH
31494: LD_VAR 0 1
31498: EQUAL
31499: IFFALSE 31526
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31501: LD_ADDR_EXP 110
31505: PUSH
31506: LD_EXP 110
31510: PPUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_INT 0
31518: PPUSH
31519: CALL_OW 1
31523: ST_TO_ADDR
31524: GO 31577
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31526: LD_ADDR_EXP 110
31530: PUSH
31531: LD_EXP 110
31535: PPUSH
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 255
31550: PUSH
31551: LD_VAR 0 1
31555: PUSH
31556: LD_VAR 0 2
31560: PUSH
31561: LD_VAR 0 3
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: PPUSH
31572: CALL_OW 1
31576: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31577: CALL 31586 0 0
// end ;
31581: LD_VAR 0 4
31585: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
31590: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31591: LD_STRING resetFactoryWaypoint();
31593: PPUSH
31594: CALL_OW 559
// if factoryWaypoints then
31598: LD_EXP 110
31602: IFFALSE 31728
// begin list := PrepareArray ( factoryWaypoints ) ;
31604: LD_ADDR_VAR 0 3
31608: PUSH
31609: LD_EXP 110
31613: PPUSH
31614: CALL 78483 0 1
31618: ST_TO_ADDR
// for i := 1 to list do
31619: LD_ADDR_VAR 0 2
31623: PUSH
31624: DOUBLE
31625: LD_INT 1
31627: DEC
31628: ST_TO_ADDR
31629: LD_VAR 0 3
31633: PUSH
31634: FOR_TO
31635: IFFALSE 31726
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31637: LD_STRING setFactoryWaypointXY(
31639: PUSH
31640: LD_VAR 0 3
31644: PUSH
31645: LD_VAR 0 2
31649: ARRAY
31650: PUSH
31651: LD_INT 1
31653: ARRAY
31654: STR
31655: PUSH
31656: LD_STRING ,
31658: STR
31659: PUSH
31660: LD_VAR 0 3
31664: PUSH
31665: LD_VAR 0 2
31669: ARRAY
31670: PUSH
31671: LD_INT 2
31673: ARRAY
31674: STR
31675: PUSH
31676: LD_STRING ,
31678: STR
31679: PUSH
31680: LD_VAR 0 3
31684: PUSH
31685: LD_VAR 0 2
31689: ARRAY
31690: PUSH
31691: LD_INT 3
31693: ARRAY
31694: STR
31695: PUSH
31696: LD_STRING ,
31698: STR
31699: PUSH
31700: LD_VAR 0 3
31704: PUSH
31705: LD_VAR 0 2
31709: ARRAY
31710: PUSH
31711: LD_INT 4
31713: ARRAY
31714: STR
31715: PUSH
31716: LD_STRING )
31718: STR
31719: PPUSH
31720: CALL_OW 559
31724: GO 31634
31726: POP
31727: POP
// end ; end ;
31728: LD_VAR 0 1
31732: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31733: LD_INT 0
31735: PPUSH
// if HexInfo ( x , y ) = warehouse then
31736: LD_VAR 0 2
31740: PPUSH
31741: LD_VAR 0 3
31745: PPUSH
31746: CALL_OW 428
31750: PUSH
31751: LD_VAR 0 1
31755: EQUAL
31756: IFFALSE 31783
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31758: LD_ADDR_EXP 111
31762: PUSH
31763: LD_EXP 111
31767: PPUSH
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 0
31775: PPUSH
31776: CALL_OW 1
31780: ST_TO_ADDR
31781: GO 31834
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31783: LD_ADDR_EXP 111
31787: PUSH
31788: LD_EXP 111
31792: PPUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: LD_VAR 0 1
31802: PPUSH
31803: CALL_OW 255
31807: PUSH
31808: LD_VAR 0 1
31812: PUSH
31813: LD_VAR 0 2
31817: PUSH
31818: LD_VAR 0 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 1
31833: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31834: CALL 31843 0 0
// end ;
31838: LD_VAR 0 4
31842: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31843: LD_INT 0
31845: PPUSH
31846: PPUSH
31847: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31848: LD_STRING resetWarehouseGatheringPoints();
31850: PPUSH
31851: CALL_OW 559
// if warehouseGatheringPoints then
31855: LD_EXP 111
31859: IFFALSE 31985
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31861: LD_ADDR_VAR 0 3
31865: PUSH
31866: LD_EXP 111
31870: PPUSH
31871: CALL 78483 0 1
31875: ST_TO_ADDR
// for i := 1 to list do
31876: LD_ADDR_VAR 0 2
31880: PUSH
31881: DOUBLE
31882: LD_INT 1
31884: DEC
31885: ST_TO_ADDR
31886: LD_VAR 0 3
31890: PUSH
31891: FOR_TO
31892: IFFALSE 31983
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31894: LD_STRING setWarehouseGatheringPointXY(
31896: PUSH
31897: LD_VAR 0 3
31901: PUSH
31902: LD_VAR 0 2
31906: ARRAY
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: STR
31912: PUSH
31913: LD_STRING ,
31915: STR
31916: PUSH
31917: LD_VAR 0 3
31921: PUSH
31922: LD_VAR 0 2
31926: ARRAY
31927: PUSH
31928: LD_INT 2
31930: ARRAY
31931: STR
31932: PUSH
31933: LD_STRING ,
31935: STR
31936: PUSH
31937: LD_VAR 0 3
31941: PUSH
31942: LD_VAR 0 2
31946: ARRAY
31947: PUSH
31948: LD_INT 3
31950: ARRAY
31951: STR
31952: PUSH
31953: LD_STRING ,
31955: STR
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 2
31966: ARRAY
31967: PUSH
31968: LD_INT 4
31970: ARRAY
31971: STR
31972: PUSH
31973: LD_STRING )
31975: STR
31976: PPUSH
31977: CALL_OW 559
31981: GO 31891
31983: POP
31984: POP
// end ; end ;
31985: LD_VAR 0 1
31989: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31990: LD_EXP 111
31994: IFFALSE 32681
31996: GO 31998
31998: DISABLE
31999: LD_INT 0
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
// begin enable ;
32010: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32011: LD_ADDR_VAR 0 3
32015: PUSH
32016: LD_EXP 111
32020: PPUSH
32021: CALL 78483 0 1
32025: ST_TO_ADDR
// if not list then
32026: LD_VAR 0 3
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32681
// for i := 1 to list do
32035: LD_ADDR_VAR 0 1
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_VAR 0 3
32049: PUSH
32050: FOR_TO
32051: IFFALSE 32679
// begin depot := list [ i ] [ 2 ] ;
32053: LD_ADDR_VAR 0 8
32057: PUSH
32058: LD_VAR 0 3
32062: PUSH
32063: LD_VAR 0 1
32067: ARRAY
32068: PUSH
32069: LD_INT 2
32071: ARRAY
32072: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32073: LD_ADDR_VAR 0 5
32077: PUSH
32078: LD_VAR 0 3
32082: PUSH
32083: LD_VAR 0 1
32087: ARRAY
32088: PUSH
32089: LD_INT 1
32091: ARRAY
32092: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32093: LD_VAR 0 8
32097: PPUSH
32098: CALL_OW 301
32102: PUSH
32103: LD_VAR 0 5
32107: PUSH
32108: LD_VAR 0 8
32112: PPUSH
32113: CALL_OW 255
32117: NONEQUAL
32118: OR
32119: IFFALSE 32148
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32121: LD_ADDR_EXP 111
32125: PUSH
32126: LD_EXP 111
32130: PPUSH
32131: LD_VAR 0 8
32135: PPUSH
32136: LD_INT 0
32138: PPUSH
32139: CALL_OW 1
32143: ST_TO_ADDR
// exit ;
32144: POP
32145: POP
32146: GO 32681
// end ; x := list [ i ] [ 3 ] ;
32148: LD_ADDR_VAR 0 6
32152: PUSH
32153: LD_VAR 0 3
32157: PUSH
32158: LD_VAR 0 1
32162: ARRAY
32163: PUSH
32164: LD_INT 3
32166: ARRAY
32167: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32168: LD_ADDR_VAR 0 7
32172: PUSH
32173: LD_VAR 0 3
32177: PUSH
32178: LD_VAR 0 1
32182: ARRAY
32183: PUSH
32184: LD_INT 4
32186: ARRAY
32187: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32188: LD_ADDR_VAR 0 9
32192: PUSH
32193: LD_VAR 0 6
32197: PPUSH
32198: LD_VAR 0 7
32202: PPUSH
32203: LD_INT 16
32205: PPUSH
32206: CALL 77067 0 3
32210: ST_TO_ADDR
// if not cratesNearbyPoint then
32211: LD_VAR 0 9
32215: NOT
32216: IFFALSE 32222
// exit ;
32218: POP
32219: POP
32220: GO 32681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32222: LD_ADDR_VAR 0 4
32226: PUSH
32227: LD_INT 22
32229: PUSH
32230: LD_VAR 0 5
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 60
32244: PUSH
32245: EMPTY
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 91
32254: PUSH
32255: LD_VAR 0 8
32259: PUSH
32260: LD_INT 6
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 25
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 25
32283: PUSH
32284: LD_INT 16
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: PPUSH
32302: CALL_OW 69
32306: PUSH
32307: LD_VAR 0 8
32311: PPUSH
32312: CALL_OW 313
32316: PPUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 60
32322: PUSH
32323: EMPTY
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 25
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 25
32345: PUSH
32346: LD_INT 16
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 72
32366: UNION
32367: ST_TO_ADDR
// if tmp then
32368: LD_VAR 0 4
32372: IFFALSE 32452
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32374: LD_ADDR_VAR 0 4
32378: PUSH
32379: LD_VAR 0 4
32383: PPUSH
32384: LD_INT 3
32386: PPUSH
32387: CALL 75034 0 2
32391: ST_TO_ADDR
// for j in tmp do
32392: LD_ADDR_VAR 0 2
32396: PUSH
32397: LD_VAR 0 4
32401: PUSH
32402: FOR_IN
32403: IFFALSE 32446
// begin if IsInUnit ( j ) then
32405: LD_VAR 0 2
32409: PPUSH
32410: CALL_OW 310
32414: IFFALSE 32425
// ComExit ( j ) ;
32416: LD_VAR 0 2
32420: PPUSH
32421: CALL 75117 0 1
// AddComCollect ( j , x , y ) ;
32425: LD_VAR 0 2
32429: PPUSH
32430: LD_VAR 0 6
32434: PPUSH
32435: LD_VAR 0 7
32439: PPUSH
32440: CALL_OW 177
// end ;
32444: GO 32402
32446: POP
32447: POP
// exit ;
32448: POP
32449: POP
32450: GO 32681
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32452: LD_ADDR_VAR 0 4
32456: PUSH
32457: LD_INT 22
32459: PUSH
32460: LD_VAR 0 5
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 91
32471: PUSH
32472: LD_VAR 0 8
32476: PUSH
32477: LD_INT 8
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 34
32490: PUSH
32491: LD_INT 12
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 34
32500: PUSH
32501: LD_INT 51
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 34
32510: PUSH
32511: LD_INT 32
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 34
32520: PUSH
32521: LD_EXP 124
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: PPUSH
32542: CALL_OW 69
32546: ST_TO_ADDR
// if tmp then
32547: LD_VAR 0 4
32551: IFFALSE 32677
// begin for j in tmp do
32553: LD_ADDR_VAR 0 2
32557: PUSH
32558: LD_VAR 0 4
32562: PUSH
32563: FOR_IN
32564: IFFALSE 32675
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32566: LD_VAR 0 2
32570: PPUSH
32571: CALL_OW 262
32575: PUSH
32576: LD_INT 3
32578: EQUAL
32579: PUSH
32580: LD_VAR 0 2
32584: PPUSH
32585: CALL_OW 261
32589: PUSH
32590: LD_INT 20
32592: GREATER
32593: OR
32594: PUSH
32595: LD_VAR 0 2
32599: PPUSH
32600: CALL_OW 314
32604: NOT
32605: AND
32606: PUSH
32607: LD_VAR 0 2
32611: PPUSH
32612: CALL_OW 263
32616: PUSH
32617: LD_INT 1
32619: NONEQUAL
32620: PUSH
32621: LD_VAR 0 2
32625: PPUSH
32626: CALL_OW 311
32630: OR
32631: AND
32632: IFFALSE 32673
// begin ComCollect ( j , x , y ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 6
32643: PPUSH
32644: LD_VAR 0 7
32648: PPUSH
32649: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32653: LD_VAR 0 2
32657: PPUSH
32658: LD_VAR 0 8
32662: PPUSH
32663: CALL_OW 172
// exit ;
32667: POP
32668: POP
32669: POP
32670: POP
32671: GO 32681
// end ;
32673: GO 32563
32675: POP
32676: POP
// end ; end ;
32677: GO 32050
32679: POP
32680: POP
// end ; end_of_file
32681: PPOPN 9
32683: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32684: LD_VAR 0 1
32688: PUSH
32689: LD_INT 200
32691: DOUBLE
32692: GREATEREQUAL
32693: IFFALSE 32701
32695: LD_INT 299
32697: DOUBLE
32698: LESSEQUAL
32699: IFTRUE 32703
32701: GO 32735
32703: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32704: LD_VAR 0 1
32708: PPUSH
32709: LD_VAR 0 2
32713: PPUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL 33225 0 5
32733: GO 32812
32735: LD_INT 300
32737: DOUBLE
32738: GREATEREQUAL
32739: IFFALSE 32747
32741: LD_INT 399
32743: DOUBLE
32744: LESSEQUAL
32745: IFTRUE 32749
32747: GO 32811
32749: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32750: LD_VAR 0 1
32754: PPUSH
32755: LD_VAR 0 2
32759: PPUSH
32760: LD_VAR 0 3
32764: PPUSH
32765: LD_VAR 0 4
32769: PPUSH
32770: LD_VAR 0 5
32774: PPUSH
32775: LD_VAR 0 6
32779: PPUSH
32780: LD_VAR 0 7
32784: PPUSH
32785: LD_VAR 0 8
32789: PPUSH
32790: LD_VAR 0 9
32794: PPUSH
32795: LD_VAR 0 10
32799: PPUSH
32800: LD_VAR 0 11
32804: PPUSH
32805: CALL 29391 0 11
32809: GO 32812
32811: POP
// end ;
32812: PPOPN 11
32814: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32815: LD_VAR 0 1
32819: PPUSH
32820: LD_VAR 0 2
32824: PPUSH
32825: LD_VAR 0 3
32829: PPUSH
32830: LD_VAR 0 4
32834: PPUSH
32835: LD_VAR 0 5
32839: PPUSH
32840: CALL 32961 0 5
// end ; end_of_file
32844: PPOPN 5
32846: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32847: LD_INT 0
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 264
32862: PUSH
32863: LD_EXP 127
32867: EQUAL
32868: IFFALSE 32940
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32870: LD_INT 68
32872: PPUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 255
32882: PPUSH
32883: CALL_OW 321
32887: PUSH
32888: LD_INT 2
32890: EQUAL
32891: IFFALSE 32903
// eff := 70 else
32893: LD_ADDR_VAR 0 4
32897: PUSH
32898: LD_INT 70
32900: ST_TO_ADDR
32901: GO 32911
// eff := 30 ;
32903: LD_ADDR_VAR 0 4
32907: PUSH
32908: LD_INT 30
32910: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 250
32920: PPUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 251
32930: PPUSH
32931: LD_VAR 0 4
32935: PPUSH
32936: CALL_OW 495
// end ; end ;
32940: LD_VAR 0 2
32944: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32945: LD_INT 0
32947: PPUSH
// end ;
32948: LD_VAR 0 4
32952: RET
// export function SOS_Command ( cmd ) ; begin
32953: LD_INT 0
32955: PPUSH
// end ;
32956: LD_VAR 0 2
32960: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32961: LD_INT 0
32963: PPUSH
// end ;
32964: LD_VAR 0 6
32968: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32969: LD_INT 0
32971: PPUSH
32972: PPUSH
// if not vehicle or not factory then
32973: LD_VAR 0 1
32977: NOT
32978: PUSH
32979: LD_VAR 0 2
32983: NOT
32984: OR
32985: IFFALSE 32989
// exit ;
32987: GO 33220
// if factoryWaypoints >= factory then
32989: LD_EXP 110
32993: PUSH
32994: LD_VAR 0 2
32998: GREATEREQUAL
32999: IFFALSE 33220
// if factoryWaypoints [ factory ] then
33001: LD_EXP 110
33005: PUSH
33006: LD_VAR 0 2
33010: ARRAY
33011: IFFALSE 33220
// begin if GetControl ( vehicle ) = control_manual then
33013: LD_VAR 0 1
33017: PPUSH
33018: CALL_OW 263
33022: PUSH
33023: LD_INT 1
33025: EQUAL
33026: IFFALSE 33107
// begin driver := IsDrivenBy ( vehicle ) ;
33028: LD_ADDR_VAR 0 4
33032: PUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 311
33042: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33043: LD_VAR 0 4
33047: PPUSH
33048: LD_EXP 110
33052: PUSH
33053: LD_VAR 0 2
33057: ARRAY
33058: PUSH
33059: LD_INT 3
33061: ARRAY
33062: PPUSH
33063: LD_EXP 110
33067: PUSH
33068: LD_VAR 0 2
33072: ARRAY
33073: PUSH
33074: LD_INT 4
33076: ARRAY
33077: PPUSH
33078: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33082: LD_VAR 0 4
33086: PPUSH
33087: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33091: LD_VAR 0 4
33095: PPUSH
33096: LD_VAR 0 2
33100: PPUSH
33101: CALL_OW 180
// end else
33105: GO 33220
// if GetControl ( vehicle ) = control_remote then
33107: LD_VAR 0 1
33111: PPUSH
33112: CALL_OW 263
33116: PUSH
33117: LD_INT 2
33119: EQUAL
33120: IFFALSE 33181
// begin wait ( 0 0$2 ) ;
33122: LD_INT 70
33124: PPUSH
33125: CALL_OW 67
// if Connect ( vehicle ) then
33129: LD_VAR 0 1
33133: PPUSH
33134: CALL 45428 0 1
33138: IFFALSE 33179
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33140: LD_VAR 0 1
33144: PPUSH
33145: LD_EXP 110
33149: PUSH
33150: LD_VAR 0 2
33154: ARRAY
33155: PUSH
33156: LD_INT 3
33158: ARRAY
33159: PPUSH
33160: LD_EXP 110
33164: PUSH
33165: LD_VAR 0 2
33169: ARRAY
33170: PUSH
33171: LD_INT 4
33173: ARRAY
33174: PPUSH
33175: CALL_OW 171
// end else
33179: GO 33220
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33181: LD_VAR 0 1
33185: PPUSH
33186: LD_EXP 110
33190: PUSH
33191: LD_VAR 0 2
33195: ARRAY
33196: PUSH
33197: LD_INT 3
33199: ARRAY
33200: PPUSH
33201: LD_EXP 110
33205: PUSH
33206: LD_VAR 0 2
33210: ARRAY
33211: PUSH
33212: LD_INT 4
33214: ARRAY
33215: PPUSH
33216: CALL_OW 171
// end ; end ;
33220: LD_VAR 0 3
33224: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33225: LD_INT 0
33227: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33228: LD_VAR 0 1
33232: PUSH
33233: LD_INT 250
33235: EQUAL
33236: PUSH
33237: LD_VAR 0 2
33241: PPUSH
33242: CALL_OW 264
33246: PUSH
33247: LD_EXP 130
33251: EQUAL
33252: AND
33253: IFFALSE 33274
// MinerPlaceMine ( unit , x , y ) ;
33255: LD_VAR 0 2
33259: PPUSH
33260: LD_VAR 0 4
33264: PPUSH
33265: LD_VAR 0 5
33269: PPUSH
33270: CALL 35673 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33274: LD_VAR 0 1
33278: PUSH
33279: LD_INT 251
33281: EQUAL
33282: PUSH
33283: LD_VAR 0 2
33287: PPUSH
33288: CALL_OW 264
33292: PUSH
33293: LD_EXP 130
33297: EQUAL
33298: AND
33299: IFFALSE 33320
// MinerDetonateMine ( unit , x , y ) ;
33301: LD_VAR 0 2
33305: PPUSH
33306: LD_VAR 0 4
33310: PPUSH
33311: LD_VAR 0 5
33315: PPUSH
33316: CALL 35950 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33320: LD_VAR 0 1
33324: PUSH
33325: LD_INT 252
33327: EQUAL
33328: PUSH
33329: LD_VAR 0 2
33333: PPUSH
33334: CALL_OW 264
33338: PUSH
33339: LD_EXP 130
33343: EQUAL
33344: AND
33345: IFFALSE 33366
// MinerCreateMinefield ( unit , x , y ) ;
33347: LD_VAR 0 2
33351: PPUSH
33352: LD_VAR 0 4
33356: PPUSH
33357: LD_VAR 0 5
33361: PPUSH
33362: CALL 36367 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33366: LD_VAR 0 1
33370: PUSH
33371: LD_INT 253
33373: EQUAL
33374: PUSH
33375: LD_VAR 0 2
33379: PPUSH
33380: CALL_OW 257
33384: PUSH
33385: LD_INT 5
33387: EQUAL
33388: AND
33389: IFFALSE 33410
// ComBinocular ( unit , x , y ) ;
33391: LD_VAR 0 2
33395: PPUSH
33396: LD_VAR 0 4
33400: PPUSH
33401: LD_VAR 0 5
33405: PPUSH
33406: CALL 36738 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33410: LD_VAR 0 1
33414: PUSH
33415: LD_INT 254
33417: EQUAL
33418: PUSH
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL_OW 264
33428: PUSH
33429: LD_EXP 125
33433: EQUAL
33434: AND
33435: PUSH
33436: LD_VAR 0 3
33440: PPUSH
33441: CALL_OW 263
33445: PUSH
33446: LD_INT 3
33448: EQUAL
33449: AND
33450: IFFALSE 33466
// HackDestroyVehicle ( unit , selectedUnit ) ;
33452: LD_VAR 0 2
33456: PPUSH
33457: LD_VAR 0 3
33461: PPUSH
33462: CALL 35033 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33466: LD_VAR 0 1
33470: PUSH
33471: LD_INT 255
33473: EQUAL
33474: PUSH
33475: LD_VAR 0 2
33479: PPUSH
33480: CALL_OW 264
33484: PUSH
33485: LD_INT 14
33487: PUSH
33488: LD_INT 53
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: IN
33495: AND
33496: PUSH
33497: LD_VAR 0 4
33501: PPUSH
33502: LD_VAR 0 5
33506: PPUSH
33507: CALL_OW 488
33511: AND
33512: IFFALSE 33536
// CutTreeXYR ( unit , x , y , 12 ) ;
33514: LD_VAR 0 2
33518: PPUSH
33519: LD_VAR 0 4
33523: PPUSH
33524: LD_VAR 0 5
33528: PPUSH
33529: LD_INT 12
33531: PPUSH
33532: CALL 33599 0 4
// if cmd = 256 then
33536: LD_VAR 0 1
33540: PUSH
33541: LD_INT 256
33543: EQUAL
33544: IFFALSE 33565
// SetFactoryWaypoint ( unit , x , y ) ;
33546: LD_VAR 0 2
33550: PPUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_VAR 0 5
33560: PPUSH
33561: CALL 31371 0 3
// if cmd = 257 then
33565: LD_VAR 0 1
33569: PUSH
33570: LD_INT 257
33572: EQUAL
33573: IFFALSE 33594
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33575: LD_VAR 0 2
33579: PPUSH
33580: LD_VAR 0 4
33584: PPUSH
33585: LD_VAR 0 5
33589: PPUSH
33590: CALL 31733 0 3
// end ;
33594: LD_VAR 0 6
33598: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33599: LD_INT 0
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33610: LD_VAR 0 1
33614: NOT
33615: PUSH
33616: LD_VAR 0 2
33620: PPUSH
33621: LD_VAR 0 3
33625: PPUSH
33626: CALL_OW 488
33630: NOT
33631: OR
33632: PUSH
33633: LD_VAR 0 4
33637: NOT
33638: OR
33639: IFFALSE 33643
// exit ;
33641: GO 33983
// list := [ ] ;
33643: LD_ADDR_VAR 0 13
33647: PUSH
33648: EMPTY
33649: ST_TO_ADDR
// if x - r < 0 then
33650: LD_VAR 0 2
33654: PUSH
33655: LD_VAR 0 4
33659: MINUS
33660: PUSH
33661: LD_INT 0
33663: LESS
33664: IFFALSE 33676
// min_x := 0 else
33666: LD_ADDR_VAR 0 7
33670: PUSH
33671: LD_INT 0
33673: ST_TO_ADDR
33674: GO 33692
// min_x := x - r ;
33676: LD_ADDR_VAR 0 7
33680: PUSH
33681: LD_VAR 0 2
33685: PUSH
33686: LD_VAR 0 4
33690: MINUS
33691: ST_TO_ADDR
// if y - r < 0 then
33692: LD_VAR 0 3
33696: PUSH
33697: LD_VAR 0 4
33701: MINUS
33702: PUSH
33703: LD_INT 0
33705: LESS
33706: IFFALSE 33718
// min_y := 0 else
33708: LD_ADDR_VAR 0 8
33712: PUSH
33713: LD_INT 0
33715: ST_TO_ADDR
33716: GO 33734
// min_y := y - r ;
33718: LD_ADDR_VAR 0 8
33722: PUSH
33723: LD_VAR 0 3
33727: PUSH
33728: LD_VAR 0 4
33732: MINUS
33733: ST_TO_ADDR
// max_x := x + r ;
33734: LD_ADDR_VAR 0 9
33738: PUSH
33739: LD_VAR 0 2
33743: PUSH
33744: LD_VAR 0 4
33748: PLUS
33749: ST_TO_ADDR
// max_y := y + r ;
33750: LD_ADDR_VAR 0 10
33754: PUSH
33755: LD_VAR 0 3
33759: PUSH
33760: LD_VAR 0 4
33764: PLUS
33765: ST_TO_ADDR
// for _x = min_x to max_x do
33766: LD_ADDR_VAR 0 11
33770: PUSH
33771: DOUBLE
33772: LD_VAR 0 7
33776: DEC
33777: ST_TO_ADDR
33778: LD_VAR 0 9
33782: PUSH
33783: FOR_TO
33784: IFFALSE 33901
// for _y = min_y to max_y do
33786: LD_ADDR_VAR 0 12
33790: PUSH
33791: DOUBLE
33792: LD_VAR 0 8
33796: DEC
33797: ST_TO_ADDR
33798: LD_VAR 0 10
33802: PUSH
33803: FOR_TO
33804: IFFALSE 33897
// begin if not ValidHex ( _x , _y ) then
33806: LD_VAR 0 11
33810: PPUSH
33811: LD_VAR 0 12
33815: PPUSH
33816: CALL_OW 488
33820: NOT
33821: IFFALSE 33825
// continue ;
33823: GO 33803
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33825: LD_VAR 0 11
33829: PPUSH
33830: LD_VAR 0 12
33834: PPUSH
33835: CALL_OW 351
33839: PUSH
33840: LD_VAR 0 11
33844: PPUSH
33845: LD_VAR 0 12
33849: PPUSH
33850: CALL_OW 554
33854: AND
33855: IFFALSE 33895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33857: LD_ADDR_VAR 0 13
33861: PUSH
33862: LD_VAR 0 13
33866: PPUSH
33867: LD_VAR 0 13
33871: PUSH
33872: LD_INT 1
33874: PLUS
33875: PPUSH
33876: LD_VAR 0 11
33880: PUSH
33881: LD_VAR 0 12
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PPUSH
33890: CALL_OW 2
33894: ST_TO_ADDR
// end ;
33895: GO 33803
33897: POP
33898: POP
33899: GO 33783
33901: POP
33902: POP
// if not list then
33903: LD_VAR 0 13
33907: NOT
33908: IFFALSE 33912
// exit ;
33910: GO 33983
// for i in list do
33912: LD_ADDR_VAR 0 6
33916: PUSH
33917: LD_VAR 0 13
33921: PUSH
33922: FOR_IN
33923: IFFALSE 33981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33925: LD_VAR 0 1
33929: PPUSH
33930: LD_STRING M
33932: PUSH
33933: LD_VAR 0 6
33937: PUSH
33938: LD_INT 1
33940: ARRAY
33941: PUSH
33942: LD_VAR 0 6
33946: PUSH
33947: LD_INT 2
33949: ARRAY
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: PPUSH
33975: CALL_OW 447
33979: GO 33922
33981: POP
33982: POP
// end ;
33983: LD_VAR 0 5
33987: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33988: LD_EXP 113
33992: NOT
33993: IFFALSE 34043
33995: GO 33997
33997: DISABLE
// begin initHack := true ;
33998: LD_ADDR_EXP 113
34002: PUSH
34003: LD_INT 1
34005: ST_TO_ADDR
// hackTanks := [ ] ;
34006: LD_ADDR_EXP 114
34010: PUSH
34011: EMPTY
34012: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34013: LD_ADDR_EXP 115
34017: PUSH
34018: EMPTY
34019: ST_TO_ADDR
// hackLimit := 3 ;
34020: LD_ADDR_EXP 116
34024: PUSH
34025: LD_INT 3
34027: ST_TO_ADDR
// hackDist := 12 ;
34028: LD_ADDR_EXP 117
34032: PUSH
34033: LD_INT 12
34035: ST_TO_ADDR
// hackCounter := [ ] ;
34036: LD_ADDR_EXP 118
34040: PUSH
34041: EMPTY
34042: ST_TO_ADDR
// end ;
34043: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34044: LD_EXP 113
34048: PUSH
34049: LD_INT 34
34051: PUSH
34052: LD_EXP 125
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PPUSH
34061: CALL_OW 69
34065: AND
34066: IFFALSE 34321
34068: GO 34070
34070: DISABLE
34071: LD_INT 0
34073: PPUSH
34074: PPUSH
// begin enable ;
34075: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34076: LD_ADDR_VAR 0 1
34080: PUSH
34081: LD_INT 34
34083: PUSH
34084: LD_EXP 125
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PPUSH
34093: CALL_OW 69
34097: PUSH
34098: FOR_IN
34099: IFFALSE 34319
// begin if not i in hackTanks then
34101: LD_VAR 0 1
34105: PUSH
34106: LD_EXP 114
34110: IN
34111: NOT
34112: IFFALSE 34195
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34114: LD_ADDR_EXP 114
34118: PUSH
34119: LD_EXP 114
34123: PPUSH
34124: LD_EXP 114
34128: PUSH
34129: LD_INT 1
34131: PLUS
34132: PPUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: CALL_OW 1
34142: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34143: LD_ADDR_EXP 115
34147: PUSH
34148: LD_EXP 115
34152: PPUSH
34153: LD_EXP 115
34157: PUSH
34158: LD_INT 1
34160: PLUS
34161: PPUSH
34162: EMPTY
34163: PPUSH
34164: CALL_OW 1
34168: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34169: LD_ADDR_EXP 118
34173: PUSH
34174: LD_EXP 118
34178: PPUSH
34179: LD_EXP 118
34183: PUSH
34184: LD_INT 1
34186: PLUS
34187: PPUSH
34188: EMPTY
34189: PPUSH
34190: CALL_OW 1
34194: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 302
34204: NOT
34205: IFFALSE 34218
// begin HackUnlinkAll ( i ) ;
34207: LD_VAR 0 1
34211: PPUSH
34212: CALL 34324 0 1
// continue ;
34216: GO 34098
// end ; HackCheckCapturedStatus ( i ) ;
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL 34767 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34227: LD_ADDR_VAR 0 2
34231: PUSH
34232: LD_INT 81
34234: PUSH
34235: LD_VAR 0 1
34239: PPUSH
34240: CALL_OW 255
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 33
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 91
34261: PUSH
34262: LD_VAR 0 1
34266: PUSH
34267: LD_EXP 117
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 50
34279: PUSH
34280: EMPTY
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: PPUSH
34289: CALL_OW 69
34293: ST_TO_ADDR
// if not tmp then
34294: LD_VAR 0 2
34298: NOT
34299: IFFALSE 34303
// continue ;
34301: GO 34098
// HackLink ( i , tmp ) ;
34303: LD_VAR 0 1
34307: PPUSH
34308: LD_VAR 0 2
34312: PPUSH
34313: CALL 34460 0 2
// end ;
34317: GO 34098
34319: POP
34320: POP
// end ;
34321: PPOPN 2
34323: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
// if not hack in hackTanks then
34329: LD_VAR 0 1
34333: PUSH
34334: LD_EXP 114
34338: IN
34339: NOT
34340: IFFALSE 34344
// exit ;
34342: GO 34455
// index := GetElementIndex ( hackTanks , hack ) ;
34344: LD_ADDR_VAR 0 4
34348: PUSH
34349: LD_EXP 114
34353: PPUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: CALL 42242 0 2
34363: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34364: LD_EXP 115
34368: PUSH
34369: LD_VAR 0 4
34373: ARRAY
34374: IFFALSE 34455
// begin for i in hackTanksCaptured [ index ] do
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: LD_EXP 115
34385: PUSH
34386: LD_VAR 0 4
34390: ARRAY
34391: PUSH
34392: FOR_IN
34393: IFFALSE 34419
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 1
34402: ARRAY
34403: PPUSH
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 2
34411: ARRAY
34412: PPUSH
34413: CALL_OW 235
34417: GO 34392
34419: POP
34420: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34421: LD_ADDR_EXP 115
34425: PUSH
34426: LD_EXP 115
34430: PPUSH
34431: LD_VAR 0 4
34435: PPUSH
34436: EMPTY
34437: PPUSH
34438: CALL_OW 1
34442: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34443: LD_VAR 0 1
34447: PPUSH
34448: LD_INT 0
34450: PPUSH
34451: CALL_OW 505
// end ; end ;
34455: LD_VAR 0 2
34459: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34460: LD_INT 0
34462: PPUSH
34463: PPUSH
34464: PPUSH
// if not hack in hackTanks or not vehicles then
34465: LD_VAR 0 1
34469: PUSH
34470: LD_EXP 114
34474: IN
34475: NOT
34476: PUSH
34477: LD_VAR 0 2
34481: NOT
34482: OR
34483: IFFALSE 34487
// exit ;
34485: GO 34762
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34487: LD_ADDR_VAR 0 2
34491: PUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: LD_INT 1
34504: PPUSH
34505: LD_INT 1
34507: PPUSH
34508: CALL 42892 0 4
34512: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34513: LD_ADDR_VAR 0 5
34517: PUSH
34518: LD_EXP 114
34522: PPUSH
34523: LD_VAR 0 1
34527: PPUSH
34528: CALL 42242 0 2
34532: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34533: LD_EXP 115
34537: PUSH
34538: LD_VAR 0 5
34542: ARRAY
34543: PUSH
34544: LD_EXP 116
34548: LESS
34549: IFFALSE 34738
// begin for i := 1 to vehicles do
34551: LD_ADDR_VAR 0 4
34555: PUSH
34556: DOUBLE
34557: LD_INT 1
34559: DEC
34560: ST_TO_ADDR
34561: LD_VAR 0 2
34565: PUSH
34566: FOR_TO
34567: IFFALSE 34736
// begin if hackTanksCaptured [ index ] = hackLimit then
34569: LD_EXP 115
34573: PUSH
34574: LD_VAR 0 5
34578: ARRAY
34579: PUSH
34580: LD_EXP 116
34584: EQUAL
34585: IFFALSE 34589
// break ;
34587: GO 34736
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34589: LD_ADDR_EXP 118
34593: PUSH
34594: LD_EXP 118
34598: PPUSH
34599: LD_VAR 0 5
34603: PPUSH
34604: LD_EXP 118
34608: PUSH
34609: LD_VAR 0 5
34613: ARRAY
34614: PUSH
34615: LD_INT 1
34617: PLUS
34618: PPUSH
34619: CALL_OW 1
34623: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34624: LD_ADDR_EXP 115
34628: PUSH
34629: LD_EXP 115
34633: PPUSH
34634: LD_VAR 0 5
34638: PUSH
34639: LD_EXP 115
34643: PUSH
34644: LD_VAR 0 5
34648: ARRAY
34649: PUSH
34650: LD_INT 1
34652: PLUS
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: LD_VAR 0 2
34662: PUSH
34663: LD_VAR 0 4
34667: ARRAY
34668: PUSH
34669: LD_VAR 0 2
34673: PUSH
34674: LD_VAR 0 4
34678: ARRAY
34679: PPUSH
34680: CALL_OW 255
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PPUSH
34689: CALL 42457 0 3
34693: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34694: LD_VAR 0 2
34698: PUSH
34699: LD_VAR 0 4
34703: ARRAY
34704: PPUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 255
34714: PPUSH
34715: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 4
34728: ARRAY
34729: PPUSH
34730: CALL_OW 141
// end ;
34734: GO 34566
34736: POP
34737: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_EXP 115
34747: PUSH
34748: LD_VAR 0 5
34752: ARRAY
34753: PUSH
34754: LD_INT 0
34756: PLUS
34757: PPUSH
34758: CALL_OW 505
// end ;
34762: LD_VAR 0 3
34766: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34767: LD_INT 0
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
// if not hack in hackTanks then
34773: LD_VAR 0 1
34777: PUSH
34778: LD_EXP 114
34782: IN
34783: NOT
34784: IFFALSE 34788
// exit ;
34786: GO 35028
// index := GetElementIndex ( hackTanks , hack ) ;
34788: LD_ADDR_VAR 0 4
34792: PUSH
34793: LD_EXP 114
34797: PPUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL 42242 0 2
34807: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34808: LD_ADDR_VAR 0 3
34812: PUSH
34813: DOUBLE
34814: LD_EXP 115
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: INC
34825: ST_TO_ADDR
34826: LD_INT 1
34828: PUSH
34829: FOR_DOWNTO
34830: IFFALSE 35002
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34832: LD_ADDR_VAR 0 5
34836: PUSH
34837: LD_EXP 115
34841: PUSH
34842: LD_VAR 0 4
34846: ARRAY
34847: PUSH
34848: LD_VAR 0 3
34852: ARRAY
34853: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34854: LD_VAR 0 5
34858: PUSH
34859: LD_INT 1
34861: ARRAY
34862: PPUSH
34863: CALL_OW 302
34867: NOT
34868: PUSH
34869: LD_VAR 0 5
34873: PUSH
34874: LD_INT 1
34876: ARRAY
34877: PPUSH
34878: CALL_OW 255
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 255
34892: NONEQUAL
34893: OR
34894: IFFALSE 35000
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34896: LD_VAR 0 5
34900: PUSH
34901: LD_INT 1
34903: ARRAY
34904: PPUSH
34905: CALL_OW 305
34909: PUSH
34910: LD_VAR 0 5
34914: PUSH
34915: LD_INT 1
34917: ARRAY
34918: PPUSH
34919: CALL_OW 255
34923: PUSH
34924: LD_VAR 0 1
34928: PPUSH
34929: CALL_OW 255
34933: EQUAL
34934: AND
34935: IFFALSE 34959
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34937: LD_VAR 0 5
34941: PUSH
34942: LD_INT 1
34944: ARRAY
34945: PPUSH
34946: LD_VAR 0 5
34950: PUSH
34951: LD_INT 2
34953: ARRAY
34954: PPUSH
34955: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34959: LD_ADDR_EXP 115
34963: PUSH
34964: LD_EXP 115
34968: PPUSH
34969: LD_VAR 0 4
34973: PPUSH
34974: LD_EXP 115
34978: PUSH
34979: LD_VAR 0 4
34983: ARRAY
34984: PPUSH
34985: LD_VAR 0 3
34989: PPUSH
34990: CALL_OW 3
34994: PPUSH
34995: CALL_OW 1
34999: ST_TO_ADDR
// end ; end ;
35000: GO 34829
35002: POP
35003: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35004: LD_VAR 0 1
35008: PPUSH
35009: LD_EXP 115
35013: PUSH
35014: LD_VAR 0 4
35018: ARRAY
35019: PUSH
35020: LD_INT 0
35022: PLUS
35023: PPUSH
35024: CALL_OW 505
// end ;
35028: LD_VAR 0 2
35032: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35033: LD_INT 0
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
// if not hack in hackTanks then
35039: LD_VAR 0 1
35043: PUSH
35044: LD_EXP 114
35048: IN
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 35139
// index := GetElementIndex ( hackTanks , hack ) ;
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_EXP 114
35063: PPUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL 42242 0 2
35073: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35074: LD_ADDR_VAR 0 4
35078: PUSH
35079: DOUBLE
35080: LD_INT 1
35082: DEC
35083: ST_TO_ADDR
35084: LD_EXP 115
35088: PUSH
35089: LD_VAR 0 5
35093: ARRAY
35094: PUSH
35095: FOR_TO
35096: IFFALSE 35137
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35098: LD_EXP 115
35102: PUSH
35103: LD_VAR 0 5
35107: ARRAY
35108: PUSH
35109: LD_VAR 0 4
35113: ARRAY
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: PUSH
35119: LD_VAR 0 2
35123: EQUAL
35124: IFFALSE 35135
// KillUnit ( vehicle ) ;
35126: LD_VAR 0 2
35130: PPUSH
35131: CALL_OW 66
35135: GO 35095
35137: POP
35138: POP
// end ;
35139: LD_VAR 0 3
35143: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35144: LD_EXP 119
35148: NOT
35149: IFFALSE 35184
35151: GO 35153
35153: DISABLE
// begin initMiner := true ;
35154: LD_ADDR_EXP 119
35158: PUSH
35159: LD_INT 1
35161: ST_TO_ADDR
// minersList := [ ] ;
35162: LD_ADDR_EXP 120
35166: PUSH
35167: EMPTY
35168: ST_TO_ADDR
// minerMinesList := [ ] ;
35169: LD_ADDR_EXP 121
35173: PUSH
35174: EMPTY
35175: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35176: LD_ADDR_EXP 122
35180: PUSH
35181: LD_INT 5
35183: ST_TO_ADDR
// end ;
35184: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35185: LD_EXP 119
35189: PUSH
35190: LD_INT 34
35192: PUSH
35193: LD_EXP 130
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PPUSH
35202: CALL_OW 69
35206: AND
35207: IFFALSE 35670
35209: GO 35211
35211: DISABLE
35212: LD_INT 0
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
// begin enable ;
35218: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35219: LD_ADDR_VAR 0 1
35223: PUSH
35224: LD_INT 34
35226: PUSH
35227: LD_EXP 130
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PPUSH
35236: CALL_OW 69
35240: PUSH
35241: FOR_IN
35242: IFFALSE 35314
// begin if not i in minersList then
35244: LD_VAR 0 1
35248: PUSH
35249: LD_EXP 120
35253: IN
35254: NOT
35255: IFFALSE 35312
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35257: LD_ADDR_EXP 120
35261: PUSH
35262: LD_EXP 120
35266: PPUSH
35267: LD_EXP 120
35271: PUSH
35272: LD_INT 1
35274: PLUS
35275: PPUSH
35276: LD_VAR 0 1
35280: PPUSH
35281: CALL_OW 1
35285: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35286: LD_ADDR_EXP 121
35290: PUSH
35291: LD_EXP 121
35295: PPUSH
35296: LD_EXP 121
35300: PUSH
35301: LD_INT 1
35303: PLUS
35304: PPUSH
35305: EMPTY
35306: PPUSH
35307: CALL_OW 1
35311: ST_TO_ADDR
// end end ;
35312: GO 35241
35314: POP
35315: POP
// for i := minerMinesList downto 1 do
35316: LD_ADDR_VAR 0 1
35320: PUSH
35321: DOUBLE
35322: LD_EXP 121
35326: INC
35327: ST_TO_ADDR
35328: LD_INT 1
35330: PUSH
35331: FOR_DOWNTO
35332: IFFALSE 35668
// begin if IsLive ( minersList [ i ] ) then
35334: LD_EXP 120
35338: PUSH
35339: LD_VAR 0 1
35343: ARRAY
35344: PPUSH
35345: CALL_OW 300
35349: IFFALSE 35377
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35351: LD_EXP 120
35355: PUSH
35356: LD_VAR 0 1
35360: ARRAY
35361: PPUSH
35362: LD_EXP 121
35366: PUSH
35367: LD_VAR 0 1
35371: ARRAY
35372: PPUSH
35373: CALL_OW 505
// if not minerMinesList [ i ] then
35377: LD_EXP 121
35381: PUSH
35382: LD_VAR 0 1
35386: ARRAY
35387: NOT
35388: IFFALSE 35392
// continue ;
35390: GO 35331
// for j := minerMinesList [ i ] downto 1 do
35392: LD_ADDR_VAR 0 2
35396: PUSH
35397: DOUBLE
35398: LD_EXP 121
35402: PUSH
35403: LD_VAR 0 1
35407: ARRAY
35408: INC
35409: ST_TO_ADDR
35410: LD_INT 1
35412: PUSH
35413: FOR_DOWNTO
35414: IFFALSE 35664
// begin side := GetSide ( minersList [ i ] ) ;
35416: LD_ADDR_VAR 0 3
35420: PUSH
35421: LD_EXP 120
35425: PUSH
35426: LD_VAR 0 1
35430: ARRAY
35431: PPUSH
35432: CALL_OW 255
35436: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35437: LD_ADDR_VAR 0 4
35441: PUSH
35442: LD_EXP 121
35446: PUSH
35447: LD_VAR 0 1
35451: ARRAY
35452: PUSH
35453: LD_VAR 0 2
35457: ARRAY
35458: PUSH
35459: LD_INT 1
35461: ARRAY
35462: PPUSH
35463: LD_EXP 121
35467: PUSH
35468: LD_VAR 0 1
35472: ARRAY
35473: PUSH
35474: LD_VAR 0 2
35478: ARRAY
35479: PUSH
35480: LD_INT 2
35482: ARRAY
35483: PPUSH
35484: CALL_OW 428
35488: ST_TO_ADDR
// if not tmp then
35489: LD_VAR 0 4
35493: NOT
35494: IFFALSE 35498
// continue ;
35496: GO 35413
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35498: LD_VAR 0 4
35502: PUSH
35503: LD_INT 81
35505: PUSH
35506: LD_VAR 0 3
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PPUSH
35515: CALL_OW 69
35519: IN
35520: PUSH
35521: LD_EXP 121
35525: PUSH
35526: LD_VAR 0 1
35530: ARRAY
35531: PUSH
35532: LD_VAR 0 2
35536: ARRAY
35537: PUSH
35538: LD_INT 1
35540: ARRAY
35541: PPUSH
35542: LD_EXP 121
35546: PUSH
35547: LD_VAR 0 1
35551: ARRAY
35552: PUSH
35553: LD_VAR 0 2
35557: ARRAY
35558: PUSH
35559: LD_INT 2
35561: ARRAY
35562: PPUSH
35563: CALL_OW 458
35567: AND
35568: IFFALSE 35662
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35570: LD_EXP 121
35574: PUSH
35575: LD_VAR 0 1
35579: ARRAY
35580: PUSH
35581: LD_VAR 0 2
35585: ARRAY
35586: PUSH
35587: LD_INT 1
35589: ARRAY
35590: PPUSH
35591: LD_EXP 121
35595: PUSH
35596: LD_VAR 0 1
35600: ARRAY
35601: PUSH
35602: LD_VAR 0 2
35606: ARRAY
35607: PUSH
35608: LD_INT 2
35610: ARRAY
35611: PPUSH
35612: LD_VAR 0 3
35616: PPUSH
35617: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35621: LD_ADDR_EXP 121
35625: PUSH
35626: LD_EXP 121
35630: PPUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: LD_EXP 121
35640: PUSH
35641: LD_VAR 0 1
35645: ARRAY
35646: PPUSH
35647: LD_VAR 0 2
35651: PPUSH
35652: CALL_OW 3
35656: PPUSH
35657: CALL_OW 1
35661: ST_TO_ADDR
// end ; end ;
35662: GO 35413
35664: POP
35665: POP
// end ;
35666: GO 35331
35668: POP
35669: POP
// end ;
35670: PPOPN 4
35672: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35673: LD_INT 0
35675: PPUSH
35676: PPUSH
// result := false ;
35677: LD_ADDR_VAR 0 4
35681: PUSH
35682: LD_INT 0
35684: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL_OW 264
35694: PUSH
35695: LD_EXP 130
35699: EQUAL
35700: NOT
35701: IFFALSE 35705
// exit ;
35703: GO 35945
// index := GetElementIndex ( minersList , unit ) ;
35705: LD_ADDR_VAR 0 5
35709: PUSH
35710: LD_EXP 120
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL 42242 0 2
35724: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35725: LD_EXP 121
35729: PUSH
35730: LD_VAR 0 5
35734: ARRAY
35735: PUSH
35736: LD_EXP 122
35740: GREATEREQUAL
35741: IFFALSE 35745
// exit ;
35743: GO 35945
// ComMoveXY ( unit , x , y ) ;
35745: LD_VAR 0 1
35749: PPUSH
35750: LD_VAR 0 2
35754: PPUSH
35755: LD_VAR 0 3
35759: PPUSH
35760: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35764: LD_INT 35
35766: PPUSH
35767: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35771: LD_VAR 0 1
35775: PPUSH
35776: LD_VAR 0 2
35780: PPUSH
35781: LD_VAR 0 3
35785: PPUSH
35786: CALL 73528 0 3
35790: NOT
35791: PUSH
35792: LD_VAR 0 1
35796: PPUSH
35797: CALL_OW 314
35801: AND
35802: IFFALSE 35806
// exit ;
35804: GO 35945
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35806: LD_VAR 0 2
35810: PPUSH
35811: LD_VAR 0 3
35815: PPUSH
35816: CALL_OW 428
35820: PUSH
35821: LD_VAR 0 1
35825: EQUAL
35826: PUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 314
35836: NOT
35837: AND
35838: IFFALSE 35764
// PlaySoundXY ( x , y , PlantMine ) ;
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_VAR 0 3
35849: PPUSH
35850: LD_STRING PlantMine
35852: PPUSH
35853: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35857: LD_VAR 0 2
35861: PPUSH
35862: LD_VAR 0 3
35866: PPUSH
35867: LD_VAR 0 1
35871: PPUSH
35872: CALL_OW 255
35876: PPUSH
35877: LD_INT 0
35879: PPUSH
35880: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35884: LD_ADDR_EXP 121
35888: PUSH
35889: LD_EXP 121
35893: PPUSH
35894: LD_VAR 0 5
35898: PUSH
35899: LD_EXP 121
35903: PUSH
35904: LD_VAR 0 5
35908: ARRAY
35909: PUSH
35910: LD_INT 1
35912: PLUS
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PPUSH
35918: LD_VAR 0 2
35922: PUSH
35923: LD_VAR 0 3
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PPUSH
35932: CALL 42457 0 3
35936: ST_TO_ADDR
// result := true ;
35937: LD_ADDR_VAR 0 4
35941: PUSH
35942: LD_INT 1
35944: ST_TO_ADDR
// end ;
35945: LD_VAR 0 4
35949: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35950: LD_INT 0
35952: PPUSH
35953: PPUSH
35954: PPUSH
// if not unit in minersList then
35955: LD_VAR 0 1
35959: PUSH
35960: LD_EXP 120
35964: IN
35965: NOT
35966: IFFALSE 35970
// exit ;
35968: GO 36362
// index := GetElementIndex ( minersList , unit ) ;
35970: LD_ADDR_VAR 0 6
35974: PUSH
35975: LD_EXP 120
35979: PPUSH
35980: LD_VAR 0 1
35984: PPUSH
35985: CALL 42242 0 2
35989: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35990: LD_ADDR_VAR 0 5
35994: PUSH
35995: DOUBLE
35996: LD_EXP 121
36000: PUSH
36001: LD_VAR 0 6
36005: ARRAY
36006: INC
36007: ST_TO_ADDR
36008: LD_INT 1
36010: PUSH
36011: FOR_DOWNTO
36012: IFFALSE 36173
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36014: LD_EXP 121
36018: PUSH
36019: LD_VAR 0 6
36023: ARRAY
36024: PUSH
36025: LD_VAR 0 5
36029: ARRAY
36030: PUSH
36031: LD_INT 1
36033: ARRAY
36034: PUSH
36035: LD_VAR 0 2
36039: EQUAL
36040: PUSH
36041: LD_EXP 121
36045: PUSH
36046: LD_VAR 0 6
36050: ARRAY
36051: PUSH
36052: LD_VAR 0 5
36056: ARRAY
36057: PUSH
36058: LD_INT 2
36060: ARRAY
36061: PUSH
36062: LD_VAR 0 3
36066: EQUAL
36067: AND
36068: IFFALSE 36171
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36070: LD_EXP 121
36074: PUSH
36075: LD_VAR 0 6
36079: ARRAY
36080: PUSH
36081: LD_VAR 0 5
36085: ARRAY
36086: PUSH
36087: LD_INT 1
36089: ARRAY
36090: PPUSH
36091: LD_EXP 121
36095: PUSH
36096: LD_VAR 0 6
36100: ARRAY
36101: PUSH
36102: LD_VAR 0 5
36106: ARRAY
36107: PUSH
36108: LD_INT 2
36110: ARRAY
36111: PPUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 255
36121: PPUSH
36122: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36126: LD_ADDR_EXP 121
36130: PUSH
36131: LD_EXP 121
36135: PPUSH
36136: LD_VAR 0 6
36140: PPUSH
36141: LD_EXP 121
36145: PUSH
36146: LD_VAR 0 6
36150: ARRAY
36151: PPUSH
36152: LD_VAR 0 5
36156: PPUSH
36157: CALL_OW 3
36161: PPUSH
36162: CALL_OW 1
36166: ST_TO_ADDR
// exit ;
36167: POP
36168: POP
36169: GO 36362
// end ; end ;
36171: GO 36011
36173: POP
36174: POP
// for i := minerMinesList [ index ] downto 1 do
36175: LD_ADDR_VAR 0 5
36179: PUSH
36180: DOUBLE
36181: LD_EXP 121
36185: PUSH
36186: LD_VAR 0 6
36190: ARRAY
36191: INC
36192: ST_TO_ADDR
36193: LD_INT 1
36195: PUSH
36196: FOR_DOWNTO
36197: IFFALSE 36360
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36199: LD_EXP 121
36203: PUSH
36204: LD_VAR 0 6
36208: ARRAY
36209: PUSH
36210: LD_VAR 0 5
36214: ARRAY
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: PPUSH
36220: LD_EXP 121
36224: PUSH
36225: LD_VAR 0 6
36229: ARRAY
36230: PUSH
36231: LD_VAR 0 5
36235: ARRAY
36236: PUSH
36237: LD_INT 2
36239: ARRAY
36240: PPUSH
36241: LD_VAR 0 2
36245: PPUSH
36246: LD_VAR 0 3
36250: PPUSH
36251: CALL_OW 298
36255: PUSH
36256: LD_INT 6
36258: LESS
36259: IFFALSE 36358
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36261: LD_EXP 121
36265: PUSH
36266: LD_VAR 0 6
36270: ARRAY
36271: PUSH
36272: LD_VAR 0 5
36276: ARRAY
36277: PUSH
36278: LD_INT 1
36280: ARRAY
36281: PPUSH
36282: LD_EXP 121
36286: PUSH
36287: LD_VAR 0 6
36291: ARRAY
36292: PUSH
36293: LD_VAR 0 5
36297: ARRAY
36298: PUSH
36299: LD_INT 2
36301: ARRAY
36302: PPUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: CALL_OW 255
36312: PPUSH
36313: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36317: LD_ADDR_EXP 121
36321: PUSH
36322: LD_EXP 121
36326: PPUSH
36327: LD_VAR 0 6
36331: PPUSH
36332: LD_EXP 121
36336: PUSH
36337: LD_VAR 0 6
36341: ARRAY
36342: PPUSH
36343: LD_VAR 0 5
36347: PPUSH
36348: CALL_OW 3
36352: PPUSH
36353: CALL_OW 1
36357: ST_TO_ADDR
// end ; end ;
36358: GO 36196
36360: POP
36361: POP
// end ;
36362: LD_VAR 0 4
36366: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36367: LD_INT 0
36369: PPUSH
36370: PPUSH
36371: PPUSH
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
36376: PPUSH
36377: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36378: LD_VAR 0 1
36382: PPUSH
36383: CALL_OW 264
36387: PUSH
36388: LD_EXP 130
36392: EQUAL
36393: NOT
36394: PUSH
36395: LD_VAR 0 1
36399: PUSH
36400: LD_EXP 120
36404: IN
36405: NOT
36406: OR
36407: IFFALSE 36411
// exit ;
36409: GO 36733
// index := GetElementIndex ( minersList , unit ) ;
36411: LD_ADDR_VAR 0 6
36415: PUSH
36416: LD_EXP 120
36420: PPUSH
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL 42242 0 2
36430: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36431: LD_ADDR_VAR 0 8
36435: PUSH
36436: LD_EXP 122
36440: PUSH
36441: LD_EXP 121
36445: PUSH
36446: LD_VAR 0 6
36450: ARRAY
36451: MINUS
36452: ST_TO_ADDR
// if not minesFreeAmount then
36453: LD_VAR 0 8
36457: NOT
36458: IFFALSE 36462
// exit ;
36460: GO 36733
// tmp := [ ] ;
36462: LD_ADDR_VAR 0 7
36466: PUSH
36467: EMPTY
36468: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36469: LD_ADDR_VAR 0 5
36473: PUSH
36474: DOUBLE
36475: LD_INT 1
36477: DEC
36478: ST_TO_ADDR
36479: LD_VAR 0 8
36483: PUSH
36484: FOR_TO
36485: IFFALSE 36680
// begin _d := rand ( 0 , 5 ) ;
36487: LD_ADDR_VAR 0 11
36491: PUSH
36492: LD_INT 0
36494: PPUSH
36495: LD_INT 5
36497: PPUSH
36498: CALL_OW 12
36502: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36503: LD_ADDR_VAR 0 12
36507: PUSH
36508: LD_INT 2
36510: PPUSH
36511: LD_INT 6
36513: PPUSH
36514: CALL_OW 12
36518: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36519: LD_ADDR_VAR 0 9
36523: PUSH
36524: LD_VAR 0 2
36528: PPUSH
36529: LD_VAR 0 11
36533: PPUSH
36534: LD_VAR 0 12
36538: PPUSH
36539: CALL_OW 272
36543: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36544: LD_ADDR_VAR 0 10
36548: PUSH
36549: LD_VAR 0 3
36553: PPUSH
36554: LD_VAR 0 11
36558: PPUSH
36559: LD_VAR 0 12
36563: PPUSH
36564: CALL_OW 273
36568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36569: LD_VAR 0 9
36573: PPUSH
36574: LD_VAR 0 10
36578: PPUSH
36579: CALL_OW 488
36583: PUSH
36584: LD_VAR 0 9
36588: PUSH
36589: LD_VAR 0 10
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_VAR 0 7
36602: IN
36603: NOT
36604: AND
36605: PUSH
36606: LD_VAR 0 9
36610: PPUSH
36611: LD_VAR 0 10
36615: PPUSH
36616: CALL_OW 458
36620: NOT
36621: AND
36622: IFFALSE 36664
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36624: LD_ADDR_VAR 0 7
36628: PUSH
36629: LD_VAR 0 7
36633: PPUSH
36634: LD_VAR 0 7
36638: PUSH
36639: LD_INT 1
36641: PLUS
36642: PPUSH
36643: LD_VAR 0 9
36647: PUSH
36648: LD_VAR 0 10
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PPUSH
36657: CALL_OW 1
36661: ST_TO_ADDR
36662: GO 36678
// i := i - 1 ;
36664: LD_ADDR_VAR 0 5
36668: PUSH
36669: LD_VAR 0 5
36673: PUSH
36674: LD_INT 1
36676: MINUS
36677: ST_TO_ADDR
// end ;
36678: GO 36484
36680: POP
36681: POP
// for i in tmp do
36682: LD_ADDR_VAR 0 5
36686: PUSH
36687: LD_VAR 0 7
36691: PUSH
36692: FOR_IN
36693: IFFALSE 36731
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36695: LD_VAR 0 1
36699: PPUSH
36700: LD_VAR 0 5
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PPUSH
36709: LD_VAR 0 5
36713: PUSH
36714: LD_INT 2
36716: ARRAY
36717: PPUSH
36718: CALL 35673 0 3
36722: NOT
36723: IFFALSE 36729
// exit ;
36725: POP
36726: POP
36727: GO 36733
36729: GO 36692
36731: POP
36732: POP
// end ;
36733: LD_VAR 0 4
36737: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36738: LD_INT 0
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
// if not GetClass ( unit ) = class_sniper then
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 257
36756: PUSH
36757: LD_INT 5
36759: EQUAL
36760: NOT
36761: IFFALSE 36765
// exit ;
36763: GO 37153
// dist := 8 ;
36765: LD_ADDR_VAR 0 5
36769: PUSH
36770: LD_INT 8
36772: ST_TO_ADDR
// viewRange := 12 ;
36773: LD_ADDR_VAR 0 7
36777: PUSH
36778: LD_INT 12
36780: ST_TO_ADDR
// side := GetSide ( unit ) ;
36781: LD_ADDR_VAR 0 6
36785: PUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 255
36795: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36796: LD_INT 61
36798: PPUSH
36799: LD_VAR 0 6
36803: PPUSH
36804: CALL_OW 321
36808: PUSH
36809: LD_INT 2
36811: EQUAL
36812: IFFALSE 36822
// viewRange := 16 ;
36814: LD_ADDR_VAR 0 7
36818: PUSH
36819: LD_INT 16
36821: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36822: LD_VAR 0 1
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: LD_VAR 0 3
36836: PPUSH
36837: CALL_OW 297
36841: PUSH
36842: LD_VAR 0 5
36846: GREATER
36847: IFFALSE 36926
// begin ComMoveXY ( unit , x , y ) ;
36849: LD_VAR 0 1
36853: PPUSH
36854: LD_VAR 0 2
36858: PPUSH
36859: LD_VAR 0 3
36863: PPUSH
36864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36868: LD_INT 35
36870: PPUSH
36871: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36875: LD_VAR 0 1
36879: PPUSH
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_VAR 0 3
36889: PPUSH
36890: CALL 73528 0 3
36894: NOT
36895: IFFALSE 36899
// exit ;
36897: GO 37153
// until GetDistUnitXY ( unit , x , y ) < dist ;
36899: LD_VAR 0 1
36903: PPUSH
36904: LD_VAR 0 2
36908: PPUSH
36909: LD_VAR 0 3
36913: PPUSH
36914: CALL_OW 297
36918: PUSH
36919: LD_VAR 0 5
36923: LESS
36924: IFFALSE 36868
// end ; ComTurnXY ( unit , x , y ) ;
36926: LD_VAR 0 1
36930: PPUSH
36931: LD_VAR 0 2
36935: PPUSH
36936: LD_VAR 0 3
36940: PPUSH
36941: CALL_OW 118
// wait ( 5 ) ;
36945: LD_INT 5
36947: PPUSH
36948: CALL_OW 67
// _d := GetDir ( unit ) ;
36952: LD_ADDR_VAR 0 10
36956: PUSH
36957: LD_VAR 0 1
36961: PPUSH
36962: CALL_OW 254
36966: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36967: LD_ADDR_VAR 0 8
36971: PUSH
36972: LD_VAR 0 1
36976: PPUSH
36977: CALL_OW 250
36981: PPUSH
36982: LD_VAR 0 10
36986: PPUSH
36987: LD_VAR 0 5
36991: PPUSH
36992: CALL_OW 272
36996: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36997: LD_ADDR_VAR 0 9
37001: PUSH
37002: LD_VAR 0 1
37006: PPUSH
37007: CALL_OW 251
37011: PPUSH
37012: LD_VAR 0 10
37016: PPUSH
37017: LD_VAR 0 5
37021: PPUSH
37022: CALL_OW 273
37026: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37027: LD_VAR 0 8
37031: PPUSH
37032: LD_VAR 0 9
37036: PPUSH
37037: CALL_OW 488
37041: NOT
37042: IFFALSE 37046
// exit ;
37044: GO 37153
// ComAnimCustom ( unit , 1 ) ;
37046: LD_VAR 0 1
37050: PPUSH
37051: LD_INT 1
37053: PPUSH
37054: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37058: LD_VAR 0 8
37062: PPUSH
37063: LD_VAR 0 9
37067: PPUSH
37068: LD_VAR 0 6
37072: PPUSH
37073: LD_VAR 0 7
37077: PPUSH
37078: CALL_OW 330
// repeat wait ( 1 ) ;
37082: LD_INT 1
37084: PPUSH
37085: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 316
37098: PUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 314
37108: OR
37109: PUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 302
37119: NOT
37120: OR
37121: PUSH
37122: LD_VAR 0 1
37126: PPUSH
37127: CALL_OW 301
37131: OR
37132: IFFALSE 37082
// RemoveSeeing ( _x , _y , side ) ;
37134: LD_VAR 0 8
37138: PPUSH
37139: LD_VAR 0 9
37143: PPUSH
37144: LD_VAR 0 6
37148: PPUSH
37149: CALL_OW 331
// end ; end_of_file
37153: LD_VAR 0 4
37157: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
37158: LD_INT 0
37160: PPUSH
// ar_miner := 81 ;
37161: LD_ADDR_EXP 130
37165: PUSH
37166: LD_INT 81
37168: ST_TO_ADDR
// ar_crane := 88 ;
37169: LD_ADDR_EXP 129
37173: PUSH
37174: LD_INT 88
37176: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
37177: LD_ADDR_EXP 124
37181: PUSH
37182: LD_INT 89
37184: ST_TO_ADDR
// us_hack := 99 ;
37185: LD_ADDR_EXP 125
37189: PUSH
37190: LD_INT 99
37192: ST_TO_ADDR
// us_artillery := 97 ;
37193: LD_ADDR_EXP 126
37197: PUSH
37198: LD_INT 97
37200: ST_TO_ADDR
// ar_bio_bomb := 91 ;
37201: LD_ADDR_EXP 127
37205: PUSH
37206: LD_INT 91
37208: ST_TO_ADDR
// ar_mortar := 92 ;
37209: LD_ADDR_EXP 128
37213: PUSH
37214: LD_INT 92
37216: ST_TO_ADDR
// ru_flamethrower := 93 ;
37217: LD_ADDR_EXP 131
37221: PUSH
37222: LD_INT 93
37224: ST_TO_ADDR
// ru_radar := 98 ;
37225: LD_ADDR_EXP 123
37229: PUSH
37230: LD_INT 98
37232: ST_TO_ADDR
// tech_Artillery := 80 ;
37233: LD_ADDR_EXP 132
37237: PUSH
37238: LD_INT 80
37240: ST_TO_ADDR
// tech_RadMat := 81 ;
37241: LD_ADDR_EXP 133
37245: PUSH
37246: LD_INT 81
37248: ST_TO_ADDR
// tech_BasicTools := 82 ;
37249: LD_ADDR_EXP 134
37253: PUSH
37254: LD_INT 82
37256: ST_TO_ADDR
// tech_Cargo := 83 ;
37257: LD_ADDR_EXP 135
37261: PUSH
37262: LD_INT 83
37264: ST_TO_ADDR
// tech_Track := 84 ;
37265: LD_ADDR_EXP 136
37269: PUSH
37270: LD_INT 84
37272: ST_TO_ADDR
// tech_Crane := 85 ;
37273: LD_ADDR_EXP 137
37277: PUSH
37278: LD_INT 85
37280: ST_TO_ADDR
// tech_Bulldozer := 86 ;
37281: LD_ADDR_EXP 138
37285: PUSH
37286: LD_INT 86
37288: ST_TO_ADDR
// tech_Hovercraft := 87 ;
37289: LD_ADDR_EXP 139
37293: PUSH
37294: LD_INT 87
37296: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
37297: LD_ADDR_EXP 140
37301: PUSH
37302: LD_INT 88
37304: ST_TO_ADDR
// end ;
37305: LD_VAR 0 1
37309: RET
// every 1 do
37310: GO 37312
37312: DISABLE
// InitGlobalVariables ; end_of_file
37313: CALL 37158 0 0
37317: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37318: LD_INT 0
37320: PPUSH
37321: PPUSH
// if exist_mode then
37322: LD_VAR 0 2
37326: IFFALSE 37351
// unit := CreateCharacter ( prefix & ident ) else
37328: LD_ADDR_VAR 0 5
37332: PUSH
37333: LD_VAR 0 3
37337: PUSH
37338: LD_VAR 0 1
37342: STR
37343: PPUSH
37344: CALL_OW 34
37348: ST_TO_ADDR
37349: GO 37366
// unit := NewCharacter ( ident ) ;
37351: LD_ADDR_VAR 0 5
37355: PUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 25
37365: ST_TO_ADDR
// result := unit ;
37366: LD_ADDR_VAR 0 4
37370: PUSH
37371: LD_VAR 0 5
37375: ST_TO_ADDR
// end ;
37376: LD_VAR 0 4
37380: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
// if not side or not nation then
37385: LD_VAR 0 1
37389: NOT
37390: PUSH
37391: LD_VAR 0 2
37395: NOT
37396: OR
37397: IFFALSE 37401
// exit ;
37399: GO 38169
// case nation of nation_american :
37401: LD_VAR 0 2
37405: PUSH
37406: LD_INT 1
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37414
37412: GO 37628
37414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37415: LD_ADDR_VAR 0 4
37419: PUSH
37420: LD_INT 35
37422: PUSH
37423: LD_INT 45
37425: PUSH
37426: LD_INT 46
37428: PUSH
37429: LD_INT 47
37431: PUSH
37432: LD_INT 82
37434: PUSH
37435: LD_INT 83
37437: PUSH
37438: LD_INT 84
37440: PUSH
37441: LD_INT 85
37443: PUSH
37444: LD_INT 86
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 6
37455: PUSH
37456: LD_INT 15
37458: PUSH
37459: LD_INT 16
37461: PUSH
37462: LD_INT 7
37464: PUSH
37465: LD_INT 12
37467: PUSH
37468: LD_INT 13
37470: PUSH
37471: LD_INT 10
37473: PUSH
37474: LD_INT 14
37476: PUSH
37477: LD_INT 20
37479: PUSH
37480: LD_INT 21
37482: PUSH
37483: LD_INT 22
37485: PUSH
37486: LD_INT 25
37488: PUSH
37489: LD_INT 32
37491: PUSH
37492: LD_INT 27
37494: PUSH
37495: LD_INT 36
37497: PUSH
37498: LD_INT 69
37500: PUSH
37501: LD_INT 39
37503: PUSH
37504: LD_INT 34
37506: PUSH
37507: LD_INT 40
37509: PUSH
37510: LD_INT 48
37512: PUSH
37513: LD_INT 49
37515: PUSH
37516: LD_INT 50
37518: PUSH
37519: LD_INT 51
37521: PUSH
37522: LD_INT 52
37524: PUSH
37525: LD_INT 53
37527: PUSH
37528: LD_INT 54
37530: PUSH
37531: LD_INT 55
37533: PUSH
37534: LD_INT 56
37536: PUSH
37537: LD_INT 57
37539: PUSH
37540: LD_INT 58
37542: PUSH
37543: LD_INT 59
37545: PUSH
37546: LD_INT 60
37548: PUSH
37549: LD_INT 61
37551: PUSH
37552: LD_INT 62
37554: PUSH
37555: LD_INT 80
37557: PUSH
37558: LD_INT 82
37560: PUSH
37561: LD_INT 83
37563: PUSH
37564: LD_INT 84
37566: PUSH
37567: LD_INT 85
37569: PUSH
37570: LD_INT 86
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
37626: GO 38093
37628: LD_INT 2
37630: DOUBLE
37631: EQUAL
37632: IFTRUE 37636
37634: GO 37862
37636: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37637: LD_ADDR_VAR 0 4
37641: PUSH
37642: LD_INT 35
37644: PUSH
37645: LD_INT 45
37647: PUSH
37648: LD_INT 46
37650: PUSH
37651: LD_INT 47
37653: PUSH
37654: LD_INT 82
37656: PUSH
37657: LD_INT 83
37659: PUSH
37660: LD_INT 84
37662: PUSH
37663: LD_INT 85
37665: PUSH
37666: LD_INT 87
37668: PUSH
37669: LD_INT 70
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 11
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 4
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: LD_INT 6
37689: PUSH
37690: LD_INT 15
37692: PUSH
37693: LD_INT 18
37695: PUSH
37696: LD_INT 7
37698: PUSH
37699: LD_INT 17
37701: PUSH
37702: LD_INT 8
37704: PUSH
37705: LD_INT 20
37707: PUSH
37708: LD_INT 21
37710: PUSH
37711: LD_INT 22
37713: PUSH
37714: LD_INT 72
37716: PUSH
37717: LD_INT 26
37719: PUSH
37720: LD_INT 69
37722: PUSH
37723: LD_INT 39
37725: PUSH
37726: LD_INT 40
37728: PUSH
37729: LD_INT 41
37731: PUSH
37732: LD_INT 42
37734: PUSH
37735: LD_INT 43
37737: PUSH
37738: LD_INT 48
37740: PUSH
37741: LD_INT 49
37743: PUSH
37744: LD_INT 50
37746: PUSH
37747: LD_INT 51
37749: PUSH
37750: LD_INT 52
37752: PUSH
37753: LD_INT 53
37755: PUSH
37756: LD_INT 54
37758: PUSH
37759: LD_INT 55
37761: PUSH
37762: LD_INT 56
37764: PUSH
37765: LD_INT 60
37767: PUSH
37768: LD_INT 61
37770: PUSH
37771: LD_INT 62
37773: PUSH
37774: LD_INT 66
37776: PUSH
37777: LD_INT 67
37779: PUSH
37780: LD_INT 68
37782: PUSH
37783: LD_INT 81
37785: PUSH
37786: LD_INT 82
37788: PUSH
37789: LD_INT 83
37791: PUSH
37792: LD_INT 84
37794: PUSH
37795: LD_INT 85
37797: PUSH
37798: LD_INT 87
37800: PUSH
37801: LD_INT 88
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: ST_TO_ADDR
37860: GO 38093
37862: LD_INT 3
37864: DOUBLE
37865: EQUAL
37866: IFTRUE 37870
37868: GO 38092
37870: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37871: LD_ADDR_VAR 0 4
37875: PUSH
37876: LD_INT 46
37878: PUSH
37879: LD_INT 47
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 82
37890: PUSH
37891: LD_INT 83
37893: PUSH
37894: LD_INT 84
37896: PUSH
37897: LD_INT 85
37899: PUSH
37900: LD_INT 86
37902: PUSH
37903: LD_INT 11
37905: PUSH
37906: LD_INT 9
37908: PUSH
37909: LD_INT 20
37911: PUSH
37912: LD_INT 19
37914: PUSH
37915: LD_INT 21
37917: PUSH
37918: LD_INT 24
37920: PUSH
37921: LD_INT 22
37923: PUSH
37924: LD_INT 25
37926: PUSH
37927: LD_INT 28
37929: PUSH
37930: LD_INT 29
37932: PUSH
37933: LD_INT 30
37935: PUSH
37936: LD_INT 31
37938: PUSH
37939: LD_INT 37
37941: PUSH
37942: LD_INT 38
37944: PUSH
37945: LD_INT 32
37947: PUSH
37948: LD_INT 27
37950: PUSH
37951: LD_INT 33
37953: PUSH
37954: LD_INT 69
37956: PUSH
37957: LD_INT 39
37959: PUSH
37960: LD_INT 34
37962: PUSH
37963: LD_INT 40
37965: PUSH
37966: LD_INT 71
37968: PUSH
37969: LD_INT 23
37971: PUSH
37972: LD_INT 44
37974: PUSH
37975: LD_INT 48
37977: PUSH
37978: LD_INT 49
37980: PUSH
37981: LD_INT 50
37983: PUSH
37984: LD_INT 51
37986: PUSH
37987: LD_INT 52
37989: PUSH
37990: LD_INT 53
37992: PUSH
37993: LD_INT 54
37995: PUSH
37996: LD_INT 55
37998: PUSH
37999: LD_INT 56
38001: PUSH
38002: LD_INT 57
38004: PUSH
38005: LD_INT 58
38007: PUSH
38008: LD_INT 59
38010: PUSH
38011: LD_INT 63
38013: PUSH
38014: LD_INT 64
38016: PUSH
38017: LD_INT 65
38019: PUSH
38020: LD_INT 82
38022: PUSH
38023: LD_INT 83
38025: PUSH
38026: LD_INT 84
38028: PUSH
38029: LD_INT 85
38031: PUSH
38032: LD_INT 86
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: ST_TO_ADDR
38090: GO 38093
38092: POP
// if state > - 1 and state < 3 then
38093: LD_VAR 0 3
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: GREATER
38102: PUSH
38103: LD_VAR 0 3
38107: PUSH
38108: LD_INT 3
38110: LESS
38111: AND
38112: IFFALSE 38169
// for i in result do
38114: LD_ADDR_VAR 0 5
38118: PUSH
38119: LD_VAR 0 4
38123: PUSH
38124: FOR_IN
38125: IFFALSE 38167
// if GetTech ( i , side ) <> state then
38127: LD_VAR 0 5
38131: PPUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 321
38141: PUSH
38142: LD_VAR 0 3
38146: NONEQUAL
38147: IFFALSE 38165
// result := result diff i ;
38149: LD_ADDR_VAR 0 4
38153: PUSH
38154: LD_VAR 0 4
38158: PUSH
38159: LD_VAR 0 5
38163: DIFF
38164: ST_TO_ADDR
38165: GO 38124
38167: POP
38168: POP
// end ;
38169: LD_VAR 0 4
38173: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38174: LD_INT 0
38176: PPUSH
38177: PPUSH
38178: PPUSH
// result := true ;
38179: LD_ADDR_VAR 0 3
38183: PUSH
38184: LD_INT 1
38186: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38187: LD_ADDR_VAR 0 5
38191: PUSH
38192: LD_VAR 0 2
38196: PPUSH
38197: CALL_OW 480
38201: ST_TO_ADDR
// if not tmp then
38202: LD_VAR 0 5
38206: NOT
38207: IFFALSE 38211
// exit ;
38209: GO 38260
// for i in tmp do
38211: LD_ADDR_VAR 0 4
38215: PUSH
38216: LD_VAR 0 5
38220: PUSH
38221: FOR_IN
38222: IFFALSE 38258
// if GetTech ( i , side ) <> state_researched then
38224: LD_VAR 0 4
38228: PPUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 321
38238: PUSH
38239: LD_INT 2
38241: NONEQUAL
38242: IFFALSE 38256
// begin result := false ;
38244: LD_ADDR_VAR 0 3
38248: PUSH
38249: LD_INT 0
38251: ST_TO_ADDR
// exit ;
38252: POP
38253: POP
38254: GO 38260
// end ;
38256: GO 38221
38258: POP
38259: POP
// end ;
38260: LD_VAR 0 3
38264: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38265: LD_INT 0
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
38279: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38280: LD_VAR 0 1
38284: NOT
38285: PUSH
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL_OW 257
38295: PUSH
38296: LD_INT 9
38298: NONEQUAL
38299: OR
38300: IFFALSE 38304
// exit ;
38302: GO 38877
// side := GetSide ( unit ) ;
38304: LD_ADDR_VAR 0 9
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 255
38318: ST_TO_ADDR
// tech_space := tech_spacanom ;
38319: LD_ADDR_VAR 0 12
38323: PUSH
38324: LD_INT 29
38326: ST_TO_ADDR
// tech_time := tech_taurad ;
38327: LD_ADDR_VAR 0 13
38331: PUSH
38332: LD_INT 28
38334: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38335: LD_ADDR_VAR 0 11
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 310
38349: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38350: LD_VAR 0 11
38354: PPUSH
38355: CALL_OW 247
38359: PUSH
38360: LD_INT 2
38362: EQUAL
38363: IFFALSE 38367
// exit ;
38365: GO 38877
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38367: LD_ADDR_VAR 0 8
38371: PUSH
38372: LD_INT 81
38374: PUSH
38375: LD_VAR 0 9
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: LD_INT 21
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PPUSH
38405: CALL_OW 69
38409: ST_TO_ADDR
// if not tmp then
38410: LD_VAR 0 8
38414: NOT
38415: IFFALSE 38419
// exit ;
38417: GO 38877
// if in_unit then
38419: LD_VAR 0 11
38423: IFFALSE 38447
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38425: LD_ADDR_VAR 0 10
38429: PUSH
38430: LD_VAR 0 8
38434: PPUSH
38435: LD_VAR 0 11
38439: PPUSH
38440: CALL_OW 74
38444: ST_TO_ADDR
38445: GO 38467
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38447: LD_ADDR_VAR 0 10
38451: PUSH
38452: LD_VAR 0 8
38456: PPUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 74
38466: ST_TO_ADDR
// if not enemy then
38467: LD_VAR 0 10
38471: NOT
38472: IFFALSE 38476
// exit ;
38474: GO 38877
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38476: LD_VAR 0 11
38480: PUSH
38481: LD_VAR 0 11
38485: PPUSH
38486: LD_VAR 0 10
38490: PPUSH
38491: CALL_OW 296
38495: PUSH
38496: LD_INT 13
38498: GREATER
38499: AND
38500: PUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: LD_VAR 0 10
38510: PPUSH
38511: CALL_OW 296
38515: PUSH
38516: LD_INT 12
38518: GREATER
38519: OR
38520: IFFALSE 38524
// exit ;
38522: GO 38877
// missile := [ 1 ] ;
38524: LD_ADDR_VAR 0 14
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38535: LD_VAR 0 9
38539: PPUSH
38540: LD_VAR 0 12
38544: PPUSH
38545: CALL_OW 325
38549: IFFALSE 38578
// missile := Replace ( missile , missile + 1 , 2 ) ;
38551: LD_ADDR_VAR 0 14
38555: PUSH
38556: LD_VAR 0 14
38560: PPUSH
38561: LD_VAR 0 14
38565: PUSH
38566: LD_INT 1
38568: PLUS
38569: PPUSH
38570: LD_INT 2
38572: PPUSH
38573: CALL_OW 1
38577: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38578: LD_VAR 0 9
38582: PPUSH
38583: LD_VAR 0 13
38587: PPUSH
38588: CALL_OW 325
38592: PUSH
38593: LD_VAR 0 10
38597: PPUSH
38598: CALL_OW 255
38602: PPUSH
38603: LD_VAR 0 13
38607: PPUSH
38608: CALL_OW 325
38612: NOT
38613: AND
38614: IFFALSE 38643
// missile := Replace ( missile , missile + 1 , 3 ) ;
38616: LD_ADDR_VAR 0 14
38620: PUSH
38621: LD_VAR 0 14
38625: PPUSH
38626: LD_VAR 0 14
38630: PUSH
38631: LD_INT 1
38633: PLUS
38634: PPUSH
38635: LD_INT 3
38637: PPUSH
38638: CALL_OW 1
38642: ST_TO_ADDR
// if missile < 2 then
38643: LD_VAR 0 14
38647: PUSH
38648: LD_INT 2
38650: LESS
38651: IFFALSE 38655
// exit ;
38653: GO 38877
// x := GetX ( enemy ) ;
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: LD_VAR 0 10
38664: PPUSH
38665: CALL_OW 250
38669: ST_TO_ADDR
// y := GetY ( enemy ) ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_VAR 0 10
38679: PPUSH
38680: CALL_OW 251
38684: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38685: LD_ADDR_VAR 0 6
38689: PUSH
38690: LD_VAR 0 4
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PPUSH
38699: LD_INT 1
38701: PPUSH
38702: CALL_OW 12
38706: PLUS
38707: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38708: LD_ADDR_VAR 0 7
38712: PUSH
38713: LD_VAR 0 5
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PPUSH
38722: LD_INT 1
38724: PPUSH
38725: CALL_OW 12
38729: PLUS
38730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38731: LD_VAR 0 6
38735: PPUSH
38736: LD_VAR 0 7
38740: PPUSH
38741: CALL_OW 488
38745: NOT
38746: IFFALSE 38768
// begin _x := x ;
38748: LD_ADDR_VAR 0 6
38752: PUSH
38753: LD_VAR 0 4
38757: ST_TO_ADDR
// _y := y ;
38758: LD_ADDR_VAR 0 7
38762: PUSH
38763: LD_VAR 0 5
38767: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_INT 1
38775: PPUSH
38776: LD_VAR 0 14
38780: PPUSH
38781: CALL_OW 12
38785: ST_TO_ADDR
// case i of 1 :
38786: LD_VAR 0 3
38790: PUSH
38791: LD_INT 1
38793: DOUBLE
38794: EQUAL
38795: IFTRUE 38799
38797: GO 38816
38799: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38800: LD_VAR 0 1
38804: PPUSH
38805: LD_VAR 0 10
38809: PPUSH
38810: CALL_OW 115
38814: GO 38877
38816: LD_INT 2
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38846
38824: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38825: LD_VAR 0 1
38829: PPUSH
38830: LD_VAR 0 6
38834: PPUSH
38835: LD_VAR 0 7
38839: PPUSH
38840: CALL_OW 153
38844: GO 38877
38846: LD_INT 3
38848: DOUBLE
38849: EQUAL
38850: IFTRUE 38854
38852: GO 38876
38854: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38855: LD_VAR 0 1
38859: PPUSH
38860: LD_VAR 0 6
38864: PPUSH
38865: LD_VAR 0 7
38869: PPUSH
38870: CALL_OW 154
38874: GO 38877
38876: POP
// end ;
38877: LD_VAR 0 2
38881: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38882: LD_INT 0
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
// if not unit or not building then
38890: LD_VAR 0 1
38894: NOT
38895: PUSH
38896: LD_VAR 0 2
38900: NOT
38901: OR
38902: IFFALSE 38906
// exit ;
38904: GO 39064
// x := GetX ( building ) ;
38906: LD_ADDR_VAR 0 5
38910: PUSH
38911: LD_VAR 0 2
38915: PPUSH
38916: CALL_OW 250
38920: ST_TO_ADDR
// y := GetY ( building ) ;
38921: LD_ADDR_VAR 0 6
38925: PUSH
38926: LD_VAR 0 2
38930: PPUSH
38931: CALL_OW 251
38935: ST_TO_ADDR
// for i = 0 to 5 do
38936: LD_ADDR_VAR 0 4
38940: PUSH
38941: DOUBLE
38942: LD_INT 0
38944: DEC
38945: ST_TO_ADDR
38946: LD_INT 5
38948: PUSH
38949: FOR_TO
38950: IFFALSE 39062
// begin _x := ShiftX ( x , i , 3 ) ;
38952: LD_ADDR_VAR 0 7
38956: PUSH
38957: LD_VAR 0 5
38961: PPUSH
38962: LD_VAR 0 4
38966: PPUSH
38967: LD_INT 3
38969: PPUSH
38970: CALL_OW 272
38974: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38975: LD_ADDR_VAR 0 8
38979: PUSH
38980: LD_VAR 0 6
38984: PPUSH
38985: LD_VAR 0 4
38989: PPUSH
38990: LD_INT 3
38992: PPUSH
38993: CALL_OW 273
38997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38998: LD_VAR 0 7
39002: PPUSH
39003: LD_VAR 0 8
39007: PPUSH
39008: CALL_OW 488
39012: NOT
39013: IFFALSE 39017
// continue ;
39015: GO 38949
// if HexInfo ( _x , _y ) = 0 then
39017: LD_VAR 0 7
39021: PPUSH
39022: LD_VAR 0 8
39026: PPUSH
39027: CALL_OW 428
39031: PUSH
39032: LD_INT 0
39034: EQUAL
39035: IFFALSE 39060
// begin ComMoveXY ( unit , _x , _y ) ;
39037: LD_VAR 0 1
39041: PPUSH
39042: LD_VAR 0 7
39046: PPUSH
39047: LD_VAR 0 8
39051: PPUSH
39052: CALL_OW 111
// exit ;
39056: POP
39057: POP
39058: GO 39064
// end ; end ;
39060: GO 38949
39062: POP
39063: POP
// end ;
39064: LD_VAR 0 3
39068: RET
// export function ScanBase ( side , base_area ) ; begin
39069: LD_INT 0
39071: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39072: LD_ADDR_VAR 0 3
39076: PUSH
39077: LD_VAR 0 2
39081: PPUSH
39082: LD_INT 81
39084: PUSH
39085: LD_VAR 0 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PPUSH
39094: CALL_OW 70
39098: ST_TO_ADDR
// end ;
39099: LD_VAR 0 3
39103: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39104: LD_INT 0
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
// result := false ;
39110: LD_ADDR_VAR 0 2
39114: PUSH
39115: LD_INT 0
39117: ST_TO_ADDR
// side := GetSide ( unit ) ;
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_VAR 0 1
39127: PPUSH
39128: CALL_OW 255
39132: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39133: LD_ADDR_VAR 0 4
39137: PUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 248
39147: ST_TO_ADDR
// case nat of 1 :
39148: LD_VAR 0 4
39152: PUSH
39153: LD_INT 1
39155: DOUBLE
39156: EQUAL
39157: IFTRUE 39161
39159: GO 39172
39161: POP
// tech := tech_lassight ; 2 :
39162: LD_ADDR_VAR 0 5
39166: PUSH
39167: LD_INT 12
39169: ST_TO_ADDR
39170: GO 39211
39172: LD_INT 2
39174: DOUBLE
39175: EQUAL
39176: IFTRUE 39180
39178: GO 39191
39180: POP
// tech := tech_mortar ; 3 :
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_INT 41
39188: ST_TO_ADDR
39189: GO 39211
39191: LD_INT 3
39193: DOUBLE
39194: EQUAL
39195: IFTRUE 39199
39197: GO 39210
39199: POP
// tech := tech_bazooka ; end ;
39200: LD_ADDR_VAR 0 5
39204: PUSH
39205: LD_INT 44
39207: ST_TO_ADDR
39208: GO 39211
39210: POP
// if Researched ( side , tech ) then
39211: LD_VAR 0 3
39215: PPUSH
39216: LD_VAR 0 5
39220: PPUSH
39221: CALL_OW 325
39225: IFFALSE 39252
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39227: LD_ADDR_VAR 0 2
39231: PUSH
39232: LD_INT 5
39234: PUSH
39235: LD_INT 8
39237: PUSH
39238: LD_INT 9
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: PUSH
39246: LD_VAR 0 4
39250: ARRAY
39251: ST_TO_ADDR
// end ;
39252: LD_VAR 0 2
39256: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39257: LD_INT 0
39259: PPUSH
39260: PPUSH
39261: PPUSH
// if not mines then
39262: LD_VAR 0 2
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: LD_INT 81
39278: PUSH
39279: LD_VAR 0 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: LD_INT 21
39293: PUSH
39294: LD_INT 3
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PPUSH
39309: CALL_OW 69
39313: ST_TO_ADDR
// for i in mines do
39314: LD_ADDR_VAR 0 4
39318: PUSH
39319: LD_VAR 0 2
39323: PUSH
39324: FOR_IN
39325: IFFALSE 39413
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39327: LD_VAR 0 4
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PPUSH
39336: LD_VAR 0 4
39340: PUSH
39341: LD_INT 2
39343: ARRAY
39344: PPUSH
39345: CALL_OW 458
39349: NOT
39350: IFFALSE 39354
// continue ;
39352: GO 39324
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39354: LD_VAR 0 4
39358: PUSH
39359: LD_INT 1
39361: ARRAY
39362: PPUSH
39363: LD_VAR 0 4
39367: PUSH
39368: LD_INT 2
39370: ARRAY
39371: PPUSH
39372: CALL_OW 428
39376: PUSH
39377: LD_VAR 0 5
39381: IN
39382: IFFALSE 39411
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39384: LD_VAR 0 4
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_VAR 0 4
39397: PUSH
39398: LD_INT 2
39400: ARRAY
39401: PPUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 456
// end ;
39411: GO 39324
39413: POP
39414: POP
// end ;
39415: LD_VAR 0 3
39419: RET
// export function Count ( array ) ; var i ; begin
39420: LD_INT 0
39422: PPUSH
39423: PPUSH
// result := 0 ;
39424: LD_ADDR_VAR 0 2
39428: PUSH
39429: LD_INT 0
39431: ST_TO_ADDR
// for i in array do
39432: LD_ADDR_VAR 0 3
39436: PUSH
39437: LD_VAR 0 1
39441: PUSH
39442: FOR_IN
39443: IFFALSE 39467
// if i then
39445: LD_VAR 0 3
39449: IFFALSE 39465
// result := result + 1 ;
39451: LD_ADDR_VAR 0 2
39455: PUSH
39456: LD_VAR 0 2
39460: PUSH
39461: LD_INT 1
39463: PLUS
39464: ST_TO_ADDR
39465: GO 39442
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 2
39473: RET
// export function IsEmpty ( building ) ; begin
39474: LD_INT 0
39476: PPUSH
// if not building then
39477: LD_VAR 0 1
39481: NOT
39482: IFFALSE 39486
// exit ;
39484: GO 39529
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39486: LD_ADDR_VAR 0 2
39490: PUSH
39491: LD_VAR 0 1
39495: PUSH
39496: LD_INT 22
39498: PUSH
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 255
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 58
39515: PUSH
39516: EMPTY
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PPUSH
39523: CALL_OW 69
39527: IN
39528: ST_TO_ADDR
// end ;
39529: LD_VAR 0 2
39533: RET
// export function IsNotFull ( building ) ; var places ; begin
39534: LD_INT 0
39536: PPUSH
39537: PPUSH
// if not building then
39538: LD_VAR 0 1
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 39718
// result := false ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: LD_INT 0
39554: ST_TO_ADDR
// places := 0 ;
39555: LD_ADDR_VAR 0 3
39559: PUSH
39560: LD_INT 0
39562: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 266
39572: PUSH
39573: LD_INT 0
39575: DOUBLE
39576: EQUAL
39577: IFTRUE 39635
39579: LD_INT 1
39581: DOUBLE
39582: EQUAL
39583: IFTRUE 39635
39585: LD_INT 6
39587: DOUBLE
39588: EQUAL
39589: IFTRUE 39635
39591: LD_INT 7
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39635
39597: LD_INT 8
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39635
39603: LD_INT 4
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39635
39609: LD_INT 5
39611: DOUBLE
39612: EQUAL
39613: IFTRUE 39635
39615: LD_INT 2
39617: DOUBLE
39618: EQUAL
39619: IFTRUE 39635
39621: LD_INT 3
39623: DOUBLE
39624: EQUAL
39625: IFTRUE 39635
39627: LD_INT 35
39629: DOUBLE
39630: EQUAL
39631: IFTRUE 39635
39633: GO 39646
39635: POP
// places := 6 ; b_bunker , b_breastwork :
39636: LD_ADDR_VAR 0 3
39640: PUSH
39641: LD_INT 6
39643: ST_TO_ADDR
39644: GO 39691
39646: LD_INT 32
39648: DOUBLE
39649: EQUAL
39650: IFTRUE 39660
39652: LD_INT 31
39654: DOUBLE
39655: EQUAL
39656: IFTRUE 39660
39658: GO 39671
39660: POP
// places := 1 ; b_control_tower :
39661: LD_ADDR_VAR 0 3
39665: PUSH
39666: LD_INT 1
39668: ST_TO_ADDR
39669: GO 39691
39671: LD_INT 36
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 39690
39679: POP
// places := 3 ; end ;
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 3
39687: ST_TO_ADDR
39688: GO 39691
39690: POP
// if places then
39691: LD_VAR 0 3
39695: IFFALSE 39718
// result := UnitsInside ( building ) < places ;
39697: LD_ADDR_VAR 0 2
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 313
39711: PUSH
39712: LD_VAR 0 3
39716: LESS
39717: ST_TO_ADDR
// end ;
39718: LD_VAR 0 2
39722: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39723: LD_INT 0
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
// tmp := [ ] ;
39729: LD_ADDR_VAR 0 3
39733: PUSH
39734: EMPTY
39735: ST_TO_ADDR
// list := [ ] ;
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: EMPTY
39742: ST_TO_ADDR
// for i = 16 to 25 do
39743: LD_ADDR_VAR 0 4
39747: PUSH
39748: DOUBLE
39749: LD_INT 16
39751: DEC
39752: ST_TO_ADDR
39753: LD_INT 25
39755: PUSH
39756: FOR_TO
39757: IFFALSE 39830
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39759: LD_ADDR_VAR 0 3
39763: PUSH
39764: LD_VAR 0 3
39768: PUSH
39769: LD_INT 22
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 255
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 91
39788: PUSH
39789: LD_VAR 0 1
39793: PUSH
39794: LD_INT 6
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 30
39804: PUSH
39805: LD_VAR 0 4
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: PUSH
39819: EMPTY
39820: LIST
39821: PPUSH
39822: CALL_OW 69
39826: ADD
39827: ST_TO_ADDR
39828: GO 39756
39830: POP
39831: POP
// for i = 1 to tmp do
39832: LD_ADDR_VAR 0 4
39836: PUSH
39837: DOUBLE
39838: LD_INT 1
39840: DEC
39841: ST_TO_ADDR
39842: LD_VAR 0 3
39846: PUSH
39847: FOR_TO
39848: IFFALSE 39936
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39850: LD_ADDR_VAR 0 5
39854: PUSH
39855: LD_VAR 0 5
39859: PUSH
39860: LD_VAR 0 3
39864: PUSH
39865: LD_VAR 0 4
39869: ARRAY
39870: PPUSH
39871: CALL_OW 266
39875: PUSH
39876: LD_VAR 0 3
39880: PUSH
39881: LD_VAR 0 4
39885: ARRAY
39886: PPUSH
39887: CALL_OW 250
39891: PUSH
39892: LD_VAR 0 3
39896: PUSH
39897: LD_VAR 0 4
39901: ARRAY
39902: PPUSH
39903: CALL_OW 251
39907: PUSH
39908: LD_VAR 0 3
39912: PUSH
39913: LD_VAR 0 4
39917: ARRAY
39918: PPUSH
39919: CALL_OW 254
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: ADD
39933: ST_TO_ADDR
39934: GO 39847
39936: POP
39937: POP
// result := list ;
39938: LD_ADDR_VAR 0 2
39942: PUSH
39943: LD_VAR 0 5
39947: ST_TO_ADDR
// end ;
39948: LD_VAR 0 2
39952: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
// if not factory then
39962: LD_VAR 0 1
39966: NOT
39967: IFFALSE 39971
// exit ;
39969: GO 40564
// if control = control_apeman then
39971: LD_VAR 0 4
39975: PUSH
39976: LD_INT 5
39978: EQUAL
39979: IFFALSE 40088
// begin tmp := UnitsInside ( factory ) ;
39981: LD_ADDR_VAR 0 8
39985: PUSH
39986: LD_VAR 0 1
39990: PPUSH
39991: CALL_OW 313
39995: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39996: LD_VAR 0 8
40000: PPUSH
40001: LD_INT 25
40003: PUSH
40004: LD_INT 12
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PPUSH
40011: CALL_OW 72
40015: NOT
40016: IFFALSE 40026
// control := control_manual ;
40018: LD_ADDR_VAR 0 4
40022: PUSH
40023: LD_INT 1
40025: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40026: LD_ADDR_VAR 0 8
40030: PUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL 39723 0 1
40040: ST_TO_ADDR
// if tmp then
40041: LD_VAR 0 8
40045: IFFALSE 40088
// begin for i in tmp do
40047: LD_ADDR_VAR 0 7
40051: PUSH
40052: LD_VAR 0 8
40056: PUSH
40057: FOR_IN
40058: IFFALSE 40086
// if i [ 1 ] = b_ext_radio then
40060: LD_VAR 0 7
40064: PUSH
40065: LD_INT 1
40067: ARRAY
40068: PUSH
40069: LD_INT 22
40071: EQUAL
40072: IFFALSE 40084
// begin control := control_remote ;
40074: LD_ADDR_VAR 0 4
40078: PUSH
40079: LD_INT 2
40081: ST_TO_ADDR
// break ;
40082: GO 40086
// end ;
40084: GO 40057
40086: POP
40087: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40088: LD_VAR 0 1
40092: PPUSH
40093: LD_VAR 0 2
40097: PPUSH
40098: LD_VAR 0 3
40102: PPUSH
40103: LD_VAR 0 4
40107: PPUSH
40108: LD_VAR 0 5
40112: PPUSH
40113: CALL_OW 448
40117: IFFALSE 40152
// begin result := [ chassis , engine , control , weapon ] ;
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_VAR 0 2
40128: PUSH
40129: LD_VAR 0 3
40133: PUSH
40134: LD_VAR 0 4
40138: PUSH
40139: LD_VAR 0 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
// exit ;
40150: GO 40564
// end ; _chassis := AvailableChassisList ( factory ) ;
40152: LD_ADDR_VAR 0 9
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 475
40166: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40167: LD_ADDR_VAR 0 11
40171: PUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 476
40181: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40182: LD_ADDR_VAR 0 12
40186: PUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 477
40196: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40197: LD_ADDR_VAR 0 10
40201: PUSH
40202: LD_VAR 0 1
40206: PPUSH
40207: CALL_OW 478
40211: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40212: LD_VAR 0 9
40216: NOT
40217: PUSH
40218: LD_VAR 0 11
40222: NOT
40223: OR
40224: PUSH
40225: LD_VAR 0 12
40229: NOT
40230: OR
40231: PUSH
40232: LD_VAR 0 10
40236: NOT
40237: OR
40238: IFFALSE 40273
// begin result := [ chassis , engine , control , weapon ] ;
40240: LD_ADDR_VAR 0 6
40244: PUSH
40245: LD_VAR 0 2
40249: PUSH
40250: LD_VAR 0 3
40254: PUSH
40255: LD_VAR 0 4
40259: PUSH
40260: LD_VAR 0 5
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: ST_TO_ADDR
// exit ;
40271: GO 40564
// end ; if not chassis in _chassis then
40273: LD_VAR 0 2
40277: PUSH
40278: LD_VAR 0 9
40282: IN
40283: NOT
40284: IFFALSE 40310
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40286: LD_ADDR_VAR 0 2
40290: PUSH
40291: LD_VAR 0 9
40295: PUSH
40296: LD_INT 1
40298: PPUSH
40299: LD_VAR 0 9
40303: PPUSH
40304: CALL_OW 12
40308: ARRAY
40309: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40310: LD_VAR 0 2
40314: PPUSH
40315: LD_VAR 0 3
40319: PPUSH
40320: CALL 40569 0 2
40324: NOT
40325: IFFALSE 40384
// repeat engine := _engine [ 1 ] ;
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_VAR 0 11
40336: PUSH
40337: LD_INT 1
40339: ARRAY
40340: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40341: LD_ADDR_VAR 0 11
40345: PUSH
40346: LD_VAR 0 11
40350: PPUSH
40351: LD_INT 1
40353: PPUSH
40354: CALL_OW 3
40358: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40359: LD_VAR 0 2
40363: PPUSH
40364: LD_VAR 0 3
40368: PPUSH
40369: CALL 40569 0 2
40373: PUSH
40374: LD_VAR 0 11
40378: PUSH
40379: EMPTY
40380: EQUAL
40381: OR
40382: IFFALSE 40327
// if not control in _control then
40384: LD_VAR 0 4
40388: PUSH
40389: LD_VAR 0 12
40393: IN
40394: NOT
40395: IFFALSE 40421
// control := _control [ rand ( 1 , _control ) ] ;
40397: LD_ADDR_VAR 0 4
40401: PUSH
40402: LD_VAR 0 12
40406: PUSH
40407: LD_INT 1
40409: PPUSH
40410: LD_VAR 0 12
40414: PPUSH
40415: CALL_OW 12
40419: ARRAY
40420: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40421: LD_VAR 0 2
40425: PPUSH
40426: LD_VAR 0 5
40430: PPUSH
40431: CALL 40789 0 2
40435: NOT
40436: IFFALSE 40495
// repeat weapon := _weapon [ 1 ] ;
40438: LD_ADDR_VAR 0 5
40442: PUSH
40443: LD_VAR 0 10
40447: PUSH
40448: LD_INT 1
40450: ARRAY
40451: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40452: LD_ADDR_VAR 0 10
40456: PUSH
40457: LD_VAR 0 10
40461: PPUSH
40462: LD_INT 1
40464: PPUSH
40465: CALL_OW 3
40469: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40470: LD_VAR 0 2
40474: PPUSH
40475: LD_VAR 0 5
40479: PPUSH
40480: CALL 40789 0 2
40484: PUSH
40485: LD_VAR 0 10
40489: PUSH
40490: EMPTY
40491: EQUAL
40492: OR
40493: IFFALSE 40438
// result := [ ] ;
40495: LD_ADDR_VAR 0 6
40499: PUSH
40500: EMPTY
40501: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_VAR 0 2
40511: PPUSH
40512: LD_VAR 0 3
40516: PPUSH
40517: LD_VAR 0 4
40521: PPUSH
40522: LD_VAR 0 5
40526: PPUSH
40527: CALL_OW 448
40531: IFFALSE 40564
// result := [ chassis , engine , control , weapon ] ;
40533: LD_ADDR_VAR 0 6
40537: PUSH
40538: LD_VAR 0 2
40542: PUSH
40543: LD_VAR 0 3
40547: PUSH
40548: LD_VAR 0 4
40552: PUSH
40553: LD_VAR 0 5
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: ST_TO_ADDR
// end ;
40564: LD_VAR 0 6
40568: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40569: LD_INT 0
40571: PPUSH
// if not chassis or not engine then
40572: LD_VAR 0 1
40576: NOT
40577: PUSH
40578: LD_VAR 0 2
40582: NOT
40583: OR
40584: IFFALSE 40588
// exit ;
40586: GO 40784
// case engine of engine_solar :
40588: LD_VAR 0 2
40592: PUSH
40593: LD_INT 2
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40639
40601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 11
40609: PUSH
40610: LD_INT 12
40612: PUSH
40613: LD_INT 13
40615: PUSH
40616: LD_INT 14
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 3
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: ST_TO_ADDR
40637: GO 40768
40639: LD_INT 1
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40647
40645: GO 40709
40647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40648: LD_ADDR_VAR 0 3
40652: PUSH
40653: LD_INT 11
40655: PUSH
40656: LD_INT 12
40658: PUSH
40659: LD_INT 13
40661: PUSH
40662: LD_INT 14
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 4
40676: PUSH
40677: LD_INT 5
40679: PUSH
40680: LD_INT 21
40682: PUSH
40683: LD_INT 23
40685: PUSH
40686: LD_INT 22
40688: PUSH
40689: LD_INT 24
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
40707: GO 40768
40709: LD_INT 3
40711: DOUBLE
40712: EQUAL
40713: IFTRUE 40717
40715: GO 40767
40717: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40718: LD_ADDR_VAR 0 3
40722: PUSH
40723: LD_INT 13
40725: PUSH
40726: LD_INT 14
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 3
40734: PUSH
40735: LD_INT 4
40737: PUSH
40738: LD_INT 5
40740: PUSH
40741: LD_INT 21
40743: PUSH
40744: LD_INT 22
40746: PUSH
40747: LD_INT 23
40749: PUSH
40750: LD_INT 24
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: ST_TO_ADDR
40765: GO 40768
40767: POP
// result := ( chassis in result ) ;
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_VAR 0 1
40777: PUSH
40778: LD_VAR 0 3
40782: IN
40783: ST_TO_ADDR
// end ;
40784: LD_VAR 0 3
40788: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40789: LD_INT 0
40791: PPUSH
// if not chassis or not weapon then
40792: LD_VAR 0 1
40796: NOT
40797: PUSH
40798: LD_VAR 0 2
40802: NOT
40803: OR
40804: IFFALSE 40808
// exit ;
40806: GO 41870
// case weapon of us_machine_gun :
40808: LD_VAR 0 2
40812: PUSH
40813: LD_INT 2
40815: DOUBLE
40816: EQUAL
40817: IFTRUE 40821
40819: GO 40851
40821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40822: LD_ADDR_VAR 0 3
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: LD_INT 4
40838: PUSH
40839: LD_INT 5
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
40849: GO 41854
40851: LD_INT 3
40853: DOUBLE
40854: EQUAL
40855: IFTRUE 40859
40857: GO 40889
40859: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: LD_INT 3
40873: PUSH
40874: LD_INT 4
40876: PUSH
40877: LD_INT 5
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: ST_TO_ADDR
40887: GO 41854
40889: LD_INT 11
40891: DOUBLE
40892: EQUAL
40893: IFTRUE 40897
40895: GO 40927
40897: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: LD_INT 5
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: ST_TO_ADDR
40925: GO 41854
40927: LD_INT 4
40929: DOUBLE
40930: EQUAL
40931: IFTRUE 40935
40933: GO 40961
40935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: LD_INT 4
40949: PUSH
40950: LD_INT 5
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: ST_TO_ADDR
40959: GO 41854
40961: LD_INT 5
40963: DOUBLE
40964: EQUAL
40965: IFTRUE 40969
40967: GO 40995
40969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40970: LD_ADDR_VAR 0 3
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: LD_INT 4
40983: PUSH
40984: LD_INT 5
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: ST_TO_ADDR
40993: GO 41854
40995: LD_INT 9
40997: DOUBLE
40998: EQUAL
40999: IFTRUE 41003
41001: GO 41029
41003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41004: LD_ADDR_VAR 0 3
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 4
41017: PUSH
41018: LD_INT 5
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
41027: GO 41854
41029: LD_INT 7
41031: DOUBLE
41032: EQUAL
41033: IFTRUE 41037
41035: GO 41063
41037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41038: LD_ADDR_VAR 0 3
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: LD_INT 4
41051: PUSH
41052: LD_INT 5
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: ST_TO_ADDR
41061: GO 41854
41063: LD_INT 12
41065: DOUBLE
41066: EQUAL
41067: IFTRUE 41071
41069: GO 41097
41071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: LD_INT 3
41082: PUSH
41083: LD_INT 4
41085: PUSH
41086: LD_INT 5
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: ST_TO_ADDR
41095: GO 41854
41097: LD_INT 13
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41131
41105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: LD_INT 4
41119: PUSH
41120: LD_INT 5
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: ST_TO_ADDR
41129: GO 41854
41131: LD_INT 14
41133: DOUBLE
41134: EQUAL
41135: IFTRUE 41139
41137: GO 41157
41139: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41140: LD_ADDR_VAR 0 3
41144: PUSH
41145: LD_INT 4
41147: PUSH
41148: LD_INT 5
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: ST_TO_ADDR
41155: GO 41854
41157: LD_INT 6
41159: DOUBLE
41160: EQUAL
41161: IFTRUE 41165
41163: GO 41183
41165: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41166: LD_ADDR_VAR 0 3
41170: PUSH
41171: LD_INT 4
41173: PUSH
41174: LD_INT 5
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: ST_TO_ADDR
41181: GO 41854
41183: LD_INT 10
41185: DOUBLE
41186: EQUAL
41187: IFTRUE 41191
41189: GO 41209
41191: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_INT 4
41199: PUSH
41200: LD_INT 5
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: ST_TO_ADDR
41207: GO 41854
41209: LD_INT 22
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41217
41215: GO 41243
41217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41218: LD_ADDR_VAR 0 3
41222: PUSH
41223: LD_INT 11
41225: PUSH
41226: LD_INT 12
41228: PUSH
41229: LD_INT 13
41231: PUSH
41232: LD_INT 14
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: ST_TO_ADDR
41241: GO 41854
41243: LD_INT 23
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41251
41249: GO 41277
41251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41252: LD_ADDR_VAR 0 3
41256: PUSH
41257: LD_INT 11
41259: PUSH
41260: LD_INT 12
41262: PUSH
41263: LD_INT 13
41265: PUSH
41266: LD_INT 14
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
41275: GO 41854
41277: LD_INT 24
41279: DOUBLE
41280: EQUAL
41281: IFTRUE 41285
41283: GO 41311
41285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41286: LD_ADDR_VAR 0 3
41290: PUSH
41291: LD_INT 11
41293: PUSH
41294: LD_INT 12
41296: PUSH
41297: LD_INT 13
41299: PUSH
41300: LD_INT 14
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: ST_TO_ADDR
41309: GO 41854
41311: LD_INT 30
41313: DOUBLE
41314: EQUAL
41315: IFTRUE 41319
41317: GO 41345
41319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_INT 11
41327: PUSH
41328: LD_INT 12
41330: PUSH
41331: LD_INT 13
41333: PUSH
41334: LD_INT 14
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: ST_TO_ADDR
41343: GO 41854
41345: LD_INT 25
41347: DOUBLE
41348: EQUAL
41349: IFTRUE 41353
41351: GO 41371
41353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41354: LD_ADDR_VAR 0 3
41358: PUSH
41359: LD_INT 13
41361: PUSH
41362: LD_INT 14
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: ST_TO_ADDR
41369: GO 41854
41371: LD_INT 27
41373: DOUBLE
41374: EQUAL
41375: IFTRUE 41379
41377: GO 41397
41379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_INT 13
41387: PUSH
41388: LD_INT 14
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: ST_TO_ADDR
41395: GO 41854
41397: LD_EXP 128
41401: DOUBLE
41402: EQUAL
41403: IFTRUE 41407
41405: GO 41433
41407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41408: LD_ADDR_VAR 0 3
41412: PUSH
41413: LD_INT 11
41415: PUSH
41416: LD_INT 12
41418: PUSH
41419: LD_INT 13
41421: PUSH
41422: LD_INT 14
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
41431: GO 41854
41433: LD_INT 28
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41459
41441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_INT 13
41449: PUSH
41450: LD_INT 14
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: ST_TO_ADDR
41457: GO 41854
41459: LD_INT 29
41461: DOUBLE
41462: EQUAL
41463: IFTRUE 41467
41465: GO 41485
41467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41468: LD_ADDR_VAR 0 3
41472: PUSH
41473: LD_INT 13
41475: PUSH
41476: LD_INT 14
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: ST_TO_ADDR
41483: GO 41854
41485: LD_INT 31
41487: DOUBLE
41488: EQUAL
41489: IFTRUE 41493
41491: GO 41511
41493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41494: LD_ADDR_VAR 0 3
41498: PUSH
41499: LD_INT 13
41501: PUSH
41502: LD_INT 14
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: ST_TO_ADDR
41509: GO 41854
41511: LD_INT 26
41513: DOUBLE
41514: EQUAL
41515: IFTRUE 41519
41517: GO 41537
41519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_INT 13
41527: PUSH
41528: LD_INT 14
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: ST_TO_ADDR
41535: GO 41854
41537: LD_INT 42
41539: DOUBLE
41540: EQUAL
41541: IFTRUE 41545
41543: GO 41571
41545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: LD_INT 21
41553: PUSH
41554: LD_INT 22
41556: PUSH
41557: LD_INT 23
41559: PUSH
41560: LD_INT 24
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: ST_TO_ADDR
41569: GO 41854
41571: LD_INT 43
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41579
41577: GO 41605
41579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_INT 21
41587: PUSH
41588: LD_INT 22
41590: PUSH
41591: LD_INT 23
41593: PUSH
41594: LD_INT 24
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
41603: GO 41854
41605: LD_INT 44
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41613
41611: GO 41639
41613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41614: LD_ADDR_VAR 0 3
41618: PUSH
41619: LD_INT 21
41621: PUSH
41622: LD_INT 22
41624: PUSH
41625: LD_INT 23
41627: PUSH
41628: LD_INT 24
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: ST_TO_ADDR
41637: GO 41854
41639: LD_INT 45
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41673
41647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_INT 21
41655: PUSH
41656: LD_INT 22
41658: PUSH
41659: LD_INT 23
41661: PUSH
41662: LD_INT 24
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: ST_TO_ADDR
41671: GO 41854
41673: LD_INT 49
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41707
41681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_INT 21
41689: PUSH
41690: LD_INT 22
41692: PUSH
41693: LD_INT 23
41695: PUSH
41696: LD_INT 24
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
41705: GO 41854
41707: LD_INT 51
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41715
41713: GO 41741
41715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 21
41723: PUSH
41724: LD_INT 22
41726: PUSH
41727: LD_INT 23
41729: PUSH
41730: LD_INT 24
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
41739: GO 41854
41741: LD_INT 52
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41775
41749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_INT 21
41757: PUSH
41758: LD_INT 22
41760: PUSH
41761: LD_INT 23
41763: PUSH
41764: LD_INT 24
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
41773: GO 41854
41775: LD_INT 53
41777: DOUBLE
41778: EQUAL
41779: IFTRUE 41783
41781: GO 41801
41783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_INT 23
41791: PUSH
41792: LD_INT 24
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: ST_TO_ADDR
41799: GO 41854
41801: LD_INT 46
41803: DOUBLE
41804: EQUAL
41805: IFTRUE 41809
41807: GO 41827
41809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_INT 23
41817: PUSH
41818: LD_INT 24
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: ST_TO_ADDR
41825: GO 41854
41827: LD_INT 47
41829: DOUBLE
41830: EQUAL
41831: IFTRUE 41835
41833: GO 41853
41835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41836: LD_ADDR_VAR 0 3
41840: PUSH
41841: LD_INT 23
41843: PUSH
41844: LD_INT 24
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: ST_TO_ADDR
41851: GO 41854
41853: POP
// result := ( chassis in result ) ;
41854: LD_ADDR_VAR 0 3
41858: PUSH
41859: LD_VAR 0 1
41863: PUSH
41864: LD_VAR 0 3
41868: IN
41869: ST_TO_ADDR
// end ;
41870: LD_VAR 0 3
41874: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41875: LD_INT 0
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
// result := array ;
41884: LD_ADDR_VAR 0 5
41888: PUSH
41889: LD_VAR 0 1
41893: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41894: LD_VAR 0 1
41898: NOT
41899: PUSH
41900: LD_VAR 0 2
41904: NOT
41905: OR
41906: PUSH
41907: LD_VAR 0 3
41911: NOT
41912: OR
41913: PUSH
41914: LD_VAR 0 2
41918: PUSH
41919: LD_VAR 0 1
41923: GREATER
41924: OR
41925: PUSH
41926: LD_VAR 0 3
41930: PUSH
41931: LD_VAR 0 1
41935: GREATER
41936: OR
41937: IFFALSE 41941
// exit ;
41939: GO 42237
// if direction then
41941: LD_VAR 0 4
41945: IFFALSE 42009
// begin d := 1 ;
41947: LD_ADDR_VAR 0 9
41951: PUSH
41952: LD_INT 1
41954: ST_TO_ADDR
// if i_from > i_to then
41955: LD_VAR 0 2
41959: PUSH
41960: LD_VAR 0 3
41964: GREATER
41965: IFFALSE 41991
// length := ( array - i_from ) + i_to else
41967: LD_ADDR_VAR 0 11
41971: PUSH
41972: LD_VAR 0 1
41976: PUSH
41977: LD_VAR 0 2
41981: MINUS
41982: PUSH
41983: LD_VAR 0 3
41987: PLUS
41988: ST_TO_ADDR
41989: GO 42007
// length := i_to - i_from ;
41991: LD_ADDR_VAR 0 11
41995: PUSH
41996: LD_VAR 0 3
42000: PUSH
42001: LD_VAR 0 2
42005: MINUS
42006: ST_TO_ADDR
// end else
42007: GO 42070
// begin d := - 1 ;
42009: LD_ADDR_VAR 0 9
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: ST_TO_ADDR
// if i_from > i_to then
42018: LD_VAR 0 2
42022: PUSH
42023: LD_VAR 0 3
42027: GREATER
42028: IFFALSE 42048
// length := i_from - i_to else
42030: LD_ADDR_VAR 0 11
42034: PUSH
42035: LD_VAR 0 2
42039: PUSH
42040: LD_VAR 0 3
42044: MINUS
42045: ST_TO_ADDR
42046: GO 42070
// length := ( array - i_to ) + i_from ;
42048: LD_ADDR_VAR 0 11
42052: PUSH
42053: LD_VAR 0 1
42057: PUSH
42058: LD_VAR 0 3
42062: MINUS
42063: PUSH
42064: LD_VAR 0 2
42068: PLUS
42069: ST_TO_ADDR
// end ; if not length then
42070: LD_VAR 0 11
42074: NOT
42075: IFFALSE 42079
// exit ;
42077: GO 42237
// tmp := array ;
42079: LD_ADDR_VAR 0 10
42083: PUSH
42084: LD_VAR 0 1
42088: ST_TO_ADDR
// for i = 1 to length do
42089: LD_ADDR_VAR 0 6
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_VAR 0 11
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42225
// begin for j = 1 to array do
42107: LD_ADDR_VAR 0 7
42111: PUSH
42112: DOUBLE
42113: LD_INT 1
42115: DEC
42116: ST_TO_ADDR
42117: LD_VAR 0 1
42121: PUSH
42122: FOR_TO
42123: IFFALSE 42211
// begin k := j + d ;
42125: LD_ADDR_VAR 0 8
42129: PUSH
42130: LD_VAR 0 7
42134: PUSH
42135: LD_VAR 0 9
42139: PLUS
42140: ST_TO_ADDR
// if k > array then
42141: LD_VAR 0 8
42145: PUSH
42146: LD_VAR 0 1
42150: GREATER
42151: IFFALSE 42161
// k := 1 ;
42153: LD_ADDR_VAR 0 8
42157: PUSH
42158: LD_INT 1
42160: ST_TO_ADDR
// if not k then
42161: LD_VAR 0 8
42165: NOT
42166: IFFALSE 42178
// k := array ;
42168: LD_ADDR_VAR 0 8
42172: PUSH
42173: LD_VAR 0 1
42177: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42178: LD_ADDR_VAR 0 10
42182: PUSH
42183: LD_VAR 0 10
42187: PPUSH
42188: LD_VAR 0 8
42192: PPUSH
42193: LD_VAR 0 1
42197: PUSH
42198: LD_VAR 0 7
42202: ARRAY
42203: PPUSH
42204: CALL_OW 1
42208: ST_TO_ADDR
// end ;
42209: GO 42122
42211: POP
42212: POP
// array := tmp ;
42213: LD_ADDR_VAR 0 1
42217: PUSH
42218: LD_VAR 0 10
42222: ST_TO_ADDR
// end ;
42223: GO 42104
42225: POP
42226: POP
// result := array ;
42227: LD_ADDR_VAR 0 5
42231: PUSH
42232: LD_VAR 0 1
42236: ST_TO_ADDR
// end ;
42237: LD_VAR 0 5
42241: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42242: LD_INT 0
42244: PPUSH
42245: PPUSH
// result := 0 ;
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 0
42253: ST_TO_ADDR
// if not array or not value in array then
42254: LD_VAR 0 1
42258: NOT
42259: PUSH
42260: LD_VAR 0 2
42264: PUSH
42265: LD_VAR 0 1
42269: IN
42270: NOT
42271: OR
42272: IFFALSE 42276
// exit ;
42274: GO 42330
// for i = 1 to array do
42276: LD_ADDR_VAR 0 4
42280: PUSH
42281: DOUBLE
42282: LD_INT 1
42284: DEC
42285: ST_TO_ADDR
42286: LD_VAR 0 1
42290: PUSH
42291: FOR_TO
42292: IFFALSE 42328
// if value = array [ i ] then
42294: LD_VAR 0 2
42298: PUSH
42299: LD_VAR 0 1
42303: PUSH
42304: LD_VAR 0 4
42308: ARRAY
42309: EQUAL
42310: IFFALSE 42326
// begin result := i ;
42312: LD_ADDR_VAR 0 3
42316: PUSH
42317: LD_VAR 0 4
42321: ST_TO_ADDR
// exit ;
42322: POP
42323: POP
42324: GO 42330
// end ;
42326: GO 42291
42328: POP
42329: POP
// end ;
42330: LD_VAR 0 3
42334: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42335: LD_INT 0
42337: PPUSH
// vc_chassis := chassis ;
42338: LD_ADDR_OWVAR 37
42342: PUSH
42343: LD_VAR 0 1
42347: ST_TO_ADDR
// vc_engine := engine ;
42348: LD_ADDR_OWVAR 39
42352: PUSH
42353: LD_VAR 0 2
42357: ST_TO_ADDR
// vc_control := control ;
42358: LD_ADDR_OWVAR 38
42362: PUSH
42363: LD_VAR 0 3
42367: ST_TO_ADDR
// vc_weapon := weapon ;
42368: LD_ADDR_OWVAR 40
42372: PUSH
42373: LD_VAR 0 4
42377: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42378: LD_ADDR_OWVAR 41
42382: PUSH
42383: LD_VAR 0 5
42387: ST_TO_ADDR
// end ;
42388: LD_VAR 0 6
42392: RET
// export function WantPlant ( unit ) ; var task ; begin
42393: LD_INT 0
42395: PPUSH
42396: PPUSH
// result := false ;
42397: LD_ADDR_VAR 0 2
42401: PUSH
42402: LD_INT 0
42404: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42405: LD_ADDR_VAR 0 3
42409: PUSH
42410: LD_VAR 0 1
42414: PPUSH
42415: CALL_OW 437
42419: ST_TO_ADDR
// if task then
42420: LD_VAR 0 3
42424: IFFALSE 42452
// if task [ 1 ] [ 1 ] = p then
42426: LD_VAR 0 3
42430: PUSH
42431: LD_INT 1
42433: ARRAY
42434: PUSH
42435: LD_INT 1
42437: ARRAY
42438: PUSH
42439: LD_STRING p
42441: EQUAL
42442: IFFALSE 42452
// result := true ;
42444: LD_ADDR_VAR 0 2
42448: PUSH
42449: LD_INT 1
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 2
42456: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42457: LD_INT 0
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
// if pos < 1 then
42463: LD_VAR 0 2
42467: PUSH
42468: LD_INT 1
42470: LESS
42471: IFFALSE 42475
// exit ;
42473: GO 42778
// if pos = 1 then
42475: LD_VAR 0 2
42479: PUSH
42480: LD_INT 1
42482: EQUAL
42483: IFFALSE 42516
// result := Replace ( arr , pos [ 1 ] , value ) else
42485: LD_ADDR_VAR 0 4
42489: PUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: LD_VAR 0 2
42499: PUSH
42500: LD_INT 1
42502: ARRAY
42503: PPUSH
42504: LD_VAR 0 3
42508: PPUSH
42509: CALL_OW 1
42513: ST_TO_ADDR
42514: GO 42778
// begin tmp := arr ;
42516: LD_ADDR_VAR 0 6
42520: PUSH
42521: LD_VAR 0 1
42525: ST_TO_ADDR
// s_arr := [ tmp ] ;
42526: LD_ADDR_VAR 0 7
42530: PUSH
42531: LD_VAR 0 6
42535: PUSH
42536: EMPTY
42537: LIST
42538: ST_TO_ADDR
// for i = 1 to pos - 1 do
42539: LD_ADDR_VAR 0 5
42543: PUSH
42544: DOUBLE
42545: LD_INT 1
42547: DEC
42548: ST_TO_ADDR
42549: LD_VAR 0 2
42553: PUSH
42554: LD_INT 1
42556: MINUS
42557: PUSH
42558: FOR_TO
42559: IFFALSE 42604
// begin tmp := tmp [ pos [ i ] ] ;
42561: LD_ADDR_VAR 0 6
42565: PUSH
42566: LD_VAR 0 6
42570: PUSH
42571: LD_VAR 0 2
42575: PUSH
42576: LD_VAR 0 5
42580: ARRAY
42581: ARRAY
42582: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42583: LD_ADDR_VAR 0 7
42587: PUSH
42588: LD_VAR 0 7
42592: PUSH
42593: LD_VAR 0 6
42597: PUSH
42598: EMPTY
42599: LIST
42600: ADD
42601: ST_TO_ADDR
// end ;
42602: GO 42558
42604: POP
42605: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42606: LD_ADDR_VAR 0 6
42610: PUSH
42611: LD_VAR 0 6
42615: PPUSH
42616: LD_VAR 0 2
42620: PUSH
42621: LD_VAR 0 2
42625: ARRAY
42626: PPUSH
42627: LD_VAR 0 3
42631: PPUSH
42632: CALL_OW 1
42636: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42637: LD_ADDR_VAR 0 7
42641: PUSH
42642: LD_VAR 0 7
42646: PPUSH
42647: LD_VAR 0 7
42651: PPUSH
42652: LD_VAR 0 6
42656: PPUSH
42657: CALL_OW 1
42661: ST_TO_ADDR
// for i = s_arr downto 2 do
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: DOUBLE
42668: LD_VAR 0 7
42672: INC
42673: ST_TO_ADDR
42674: LD_INT 2
42676: PUSH
42677: FOR_DOWNTO
42678: IFFALSE 42762
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42680: LD_ADDR_VAR 0 6
42684: PUSH
42685: LD_VAR 0 7
42689: PUSH
42690: LD_VAR 0 5
42694: PUSH
42695: LD_INT 1
42697: MINUS
42698: ARRAY
42699: PPUSH
42700: LD_VAR 0 2
42704: PUSH
42705: LD_VAR 0 5
42709: PUSH
42710: LD_INT 1
42712: MINUS
42713: ARRAY
42714: PPUSH
42715: LD_VAR 0 7
42719: PUSH
42720: LD_VAR 0 5
42724: ARRAY
42725: PPUSH
42726: CALL_OW 1
42730: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42731: LD_ADDR_VAR 0 7
42735: PUSH
42736: LD_VAR 0 7
42740: PPUSH
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 1
42748: MINUS
42749: PPUSH
42750: LD_VAR 0 6
42754: PPUSH
42755: CALL_OW 1
42759: ST_TO_ADDR
// end ;
42760: GO 42677
42762: POP
42763: POP
// result := s_arr [ 1 ] ;
42764: LD_ADDR_VAR 0 4
42768: PUSH
42769: LD_VAR 0 7
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: ST_TO_ADDR
// end ; end ;
42778: LD_VAR 0 4
42782: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42783: LD_INT 0
42785: PPUSH
42786: PPUSH
// if not list then
42787: LD_VAR 0 1
42791: NOT
42792: IFFALSE 42796
// exit ;
42794: GO 42887
// i := list [ pos1 ] ;
42796: LD_ADDR_VAR 0 5
42800: PUSH
42801: LD_VAR 0 1
42805: PUSH
42806: LD_VAR 0 2
42810: ARRAY
42811: ST_TO_ADDR
// if not i then
42812: LD_VAR 0 5
42816: NOT
42817: IFFALSE 42821
// exit ;
42819: GO 42887
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42821: LD_ADDR_VAR 0 1
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: LD_VAR 0 2
42835: PPUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_VAR 0 3
42845: ARRAY
42846: PPUSH
42847: CALL_OW 1
42851: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42852: LD_ADDR_VAR 0 1
42856: PUSH
42857: LD_VAR 0 1
42861: PPUSH
42862: LD_VAR 0 3
42866: PPUSH
42867: LD_VAR 0 5
42871: PPUSH
42872: CALL_OW 1
42876: ST_TO_ADDR
// result := list ;
42877: LD_ADDR_VAR 0 4
42881: PUSH
42882: LD_VAR 0 1
42886: ST_TO_ADDR
// end ;
42887: LD_VAR 0 4
42891: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42892: LD_INT 0
42894: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42895: LD_ADDR_VAR 0 5
42899: PUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: CALL_OW 250
42909: PPUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 251
42919: PPUSH
42920: LD_VAR 0 2
42924: PPUSH
42925: LD_VAR 0 3
42929: PPUSH
42930: LD_VAR 0 4
42934: PPUSH
42935: CALL 42945 0 5
42939: ST_TO_ADDR
// end ;
42940: LD_VAR 0 5
42944: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42945: LD_INT 0
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
// if not list then
42951: LD_VAR 0 3
42955: NOT
42956: IFFALSE 42960
// exit ;
42958: GO 43348
// result := [ ] ;
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: EMPTY
42966: ST_TO_ADDR
// for i in list do
42967: LD_ADDR_VAR 0 7
42971: PUSH
42972: LD_VAR 0 3
42976: PUSH
42977: FOR_IN
42978: IFFALSE 43180
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42980: LD_ADDR_VAR 0 9
42984: PUSH
42985: LD_VAR 0 7
42989: PPUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: LD_VAR 0 2
42999: PPUSH
43000: CALL_OW 297
43004: ST_TO_ADDR
// if not result then
43005: LD_VAR 0 6
43009: NOT
43010: IFFALSE 43036
// result := [ [ i , tmp ] ] else
43012: LD_ADDR_VAR 0 6
43016: PUSH
43017: LD_VAR 0 7
43021: PUSH
43022: LD_VAR 0 9
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: ST_TO_ADDR
43034: GO 43178
// begin if result [ result ] [ 2 ] < tmp then
43036: LD_VAR 0 6
43040: PUSH
43041: LD_VAR 0 6
43045: ARRAY
43046: PUSH
43047: LD_INT 2
43049: ARRAY
43050: PUSH
43051: LD_VAR 0 9
43055: LESS
43056: IFFALSE 43098
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43058: LD_ADDR_VAR 0 6
43062: PUSH
43063: LD_VAR 0 6
43067: PPUSH
43068: LD_VAR 0 6
43072: PUSH
43073: LD_INT 1
43075: PLUS
43076: PPUSH
43077: LD_VAR 0 7
43081: PUSH
43082: LD_VAR 0 9
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PPUSH
43091: CALL_OW 2
43095: ST_TO_ADDR
43096: GO 43178
// for j = 1 to result do
43098: LD_ADDR_VAR 0 8
43102: PUSH
43103: DOUBLE
43104: LD_INT 1
43106: DEC
43107: ST_TO_ADDR
43108: LD_VAR 0 6
43112: PUSH
43113: FOR_TO
43114: IFFALSE 43176
// begin if tmp < result [ j ] [ 2 ] then
43116: LD_VAR 0 9
43120: PUSH
43121: LD_VAR 0 6
43125: PUSH
43126: LD_VAR 0 8
43130: ARRAY
43131: PUSH
43132: LD_INT 2
43134: ARRAY
43135: LESS
43136: IFFALSE 43174
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43138: LD_ADDR_VAR 0 6
43142: PUSH
43143: LD_VAR 0 6
43147: PPUSH
43148: LD_VAR 0 8
43152: PPUSH
43153: LD_VAR 0 7
43157: PUSH
43158: LD_VAR 0 9
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PPUSH
43167: CALL_OW 2
43171: ST_TO_ADDR
// break ;
43172: GO 43176
// end ; end ;
43174: GO 43113
43176: POP
43177: POP
// end ; end ;
43178: GO 42977
43180: POP
43181: POP
// if result and not asc then
43182: LD_VAR 0 6
43186: PUSH
43187: LD_VAR 0 4
43191: NOT
43192: AND
43193: IFFALSE 43268
// begin tmp := result ;
43195: LD_ADDR_VAR 0 9
43199: PUSH
43200: LD_VAR 0 6
43204: ST_TO_ADDR
// for i = tmp downto 1 do
43205: LD_ADDR_VAR 0 7
43209: PUSH
43210: DOUBLE
43211: LD_VAR 0 9
43215: INC
43216: ST_TO_ADDR
43217: LD_INT 1
43219: PUSH
43220: FOR_DOWNTO
43221: IFFALSE 43266
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43223: LD_ADDR_VAR 0 6
43227: PUSH
43228: LD_VAR 0 6
43232: PPUSH
43233: LD_VAR 0 9
43237: PUSH
43238: LD_VAR 0 7
43242: MINUS
43243: PUSH
43244: LD_INT 1
43246: PLUS
43247: PPUSH
43248: LD_VAR 0 9
43252: PUSH
43253: LD_VAR 0 7
43257: ARRAY
43258: PPUSH
43259: CALL_OW 1
43263: ST_TO_ADDR
43264: GO 43220
43266: POP
43267: POP
// end ; tmp := [ ] ;
43268: LD_ADDR_VAR 0 9
43272: PUSH
43273: EMPTY
43274: ST_TO_ADDR
// if mode then
43275: LD_VAR 0 5
43279: IFFALSE 43348
// begin for i = 1 to result do
43281: LD_ADDR_VAR 0 7
43285: PUSH
43286: DOUBLE
43287: LD_INT 1
43289: DEC
43290: ST_TO_ADDR
43291: LD_VAR 0 6
43295: PUSH
43296: FOR_TO
43297: IFFALSE 43336
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43299: LD_ADDR_VAR 0 9
43303: PUSH
43304: LD_VAR 0 9
43308: PPUSH
43309: LD_VAR 0 7
43313: PPUSH
43314: LD_VAR 0 6
43318: PUSH
43319: LD_VAR 0 7
43323: ARRAY
43324: PUSH
43325: LD_INT 1
43327: ARRAY
43328: PPUSH
43329: CALL_OW 1
43333: ST_TO_ADDR
43334: GO 43296
43336: POP
43337: POP
// result := tmp ;
43338: LD_ADDR_VAR 0 6
43342: PUSH
43343: LD_VAR 0 9
43347: ST_TO_ADDR
// end ; end ;
43348: LD_VAR 0 6
43352: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43353: LD_INT 0
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43361: LD_ADDR_VAR 0 5
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
// if not x or not y then
43383: LD_VAR 0 2
43387: NOT
43388: PUSH
43389: LD_VAR 0 3
43393: NOT
43394: OR
43395: IFFALSE 43399
// exit ;
43397: GO 45051
// if not range then
43399: LD_VAR 0 4
43403: NOT
43404: IFFALSE 43414
// range := 10 ;
43406: LD_ADDR_VAR 0 4
43410: PUSH
43411: LD_INT 10
43413: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43414: LD_ADDR_VAR 0 8
43418: PUSH
43419: LD_INT 81
43421: PUSH
43422: LD_VAR 0 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 92
43433: PUSH
43434: LD_VAR 0 2
43438: PUSH
43439: LD_VAR 0 3
43443: PUSH
43444: LD_VAR 0 4
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 3
43457: PUSH
43458: LD_INT 21
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: PPUSH
43477: CALL_OW 69
43481: ST_TO_ADDR
// if not tmp then
43482: LD_VAR 0 8
43486: NOT
43487: IFFALSE 43491
// exit ;
43489: GO 45051
// for i in tmp do
43491: LD_ADDR_VAR 0 6
43495: PUSH
43496: LD_VAR 0 8
43500: PUSH
43501: FOR_IN
43502: IFFALSE 45026
// begin points := [ 0 , 0 , 0 ] ;
43504: LD_ADDR_VAR 0 9
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// bpoints := 1 ;
43523: LD_ADDR_VAR 0 10
43527: PUSH
43528: LD_INT 1
43530: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43531: LD_VAR 0 6
43535: PPUSH
43536: CALL_OW 247
43540: PUSH
43541: LD_INT 1
43543: DOUBLE
43544: EQUAL
43545: IFTRUE 43549
43547: GO 44127
43549: POP
// begin if GetClass ( i ) = 1 then
43550: LD_VAR 0 6
43554: PPUSH
43555: CALL_OW 257
43559: PUSH
43560: LD_INT 1
43562: EQUAL
43563: IFFALSE 43584
// points := [ 10 , 5 , 3 ] ;
43565: LD_ADDR_VAR 0 9
43569: PUSH
43570: LD_INT 10
43572: PUSH
43573: LD_INT 5
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43584: LD_VAR 0 6
43588: PPUSH
43589: CALL_OW 257
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 4
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: IN
43608: IFFALSE 43629
// points := [ 3 , 2 , 1 ] ;
43610: LD_ADDR_VAR 0 9
43614: PUSH
43615: LD_INT 3
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43629: LD_VAR 0 6
43633: PPUSH
43634: CALL_OW 257
43638: PUSH
43639: LD_INT 5
43641: EQUAL
43642: IFFALSE 43663
// points := [ 130 , 5 , 2 ] ;
43644: LD_ADDR_VAR 0 9
43648: PUSH
43649: LD_INT 130
43651: PUSH
43652: LD_INT 5
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43663: LD_VAR 0 6
43667: PPUSH
43668: CALL_OW 257
43672: PUSH
43673: LD_INT 8
43675: EQUAL
43676: IFFALSE 43697
// points := [ 35 , 35 , 30 ] ;
43678: LD_ADDR_VAR 0 9
43682: PUSH
43683: LD_INT 35
43685: PUSH
43686: LD_INT 35
43688: PUSH
43689: LD_INT 30
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43697: LD_VAR 0 6
43701: PPUSH
43702: CALL_OW 257
43706: PUSH
43707: LD_INT 9
43709: EQUAL
43710: IFFALSE 43731
// points := [ 20 , 55 , 40 ] ;
43712: LD_ADDR_VAR 0 9
43716: PUSH
43717: LD_INT 20
43719: PUSH
43720: LD_INT 55
43722: PUSH
43723: LD_INT 40
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43731: LD_VAR 0 6
43735: PPUSH
43736: CALL_OW 257
43740: PUSH
43741: LD_INT 12
43743: PUSH
43744: LD_INT 16
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: IN
43751: IFFALSE 43772
// points := [ 5 , 3 , 2 ] ;
43753: LD_ADDR_VAR 0 9
43757: PUSH
43758: LD_INT 5
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43772: LD_VAR 0 6
43776: PPUSH
43777: CALL_OW 257
43781: PUSH
43782: LD_INT 17
43784: EQUAL
43785: IFFALSE 43806
// points := [ 100 , 50 , 75 ] ;
43787: LD_ADDR_VAR 0 9
43791: PUSH
43792: LD_INT 100
43794: PUSH
43795: LD_INT 50
43797: PUSH
43798: LD_INT 75
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43806: LD_VAR 0 6
43810: PPUSH
43811: CALL_OW 257
43815: PUSH
43816: LD_INT 15
43818: EQUAL
43819: IFFALSE 43840
// points := [ 10 , 5 , 3 ] ;
43821: LD_ADDR_VAR 0 9
43825: PUSH
43826: LD_INT 10
43828: PUSH
43829: LD_INT 5
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43840: LD_VAR 0 6
43844: PPUSH
43845: CALL_OW 257
43849: PUSH
43850: LD_INT 14
43852: EQUAL
43853: IFFALSE 43874
// points := [ 10 , 0 , 0 ] ;
43855: LD_ADDR_VAR 0 9
43859: PUSH
43860: LD_INT 10
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43874: LD_VAR 0 6
43878: PPUSH
43879: CALL_OW 257
43883: PUSH
43884: LD_INT 11
43886: EQUAL
43887: IFFALSE 43908
// points := [ 30 , 10 , 5 ] ;
43889: LD_ADDR_VAR 0 9
43893: PUSH
43894: LD_INT 30
43896: PUSH
43897: LD_INT 10
43899: PUSH
43900: LD_INT 5
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43908: LD_VAR 0 1
43912: PPUSH
43913: LD_INT 5
43915: PPUSH
43916: CALL_OW 321
43920: PUSH
43921: LD_INT 2
43923: EQUAL
43924: IFFALSE 43941
// bpoints := bpoints * 1.8 ;
43926: LD_ADDR_VAR 0 10
43930: PUSH
43931: LD_VAR 0 10
43935: PUSH
43936: LD_REAL  1.80000000000000E+0000
43939: MUL
43940: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43941: LD_VAR 0 6
43945: PPUSH
43946: CALL_OW 257
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 4
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: IN
43969: PUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: LD_INT 51
43977: PPUSH
43978: CALL_OW 321
43982: PUSH
43983: LD_INT 2
43985: EQUAL
43986: AND
43987: IFFALSE 44004
// bpoints := bpoints * 1.2 ;
43989: LD_ADDR_VAR 0 10
43993: PUSH
43994: LD_VAR 0 10
43998: PUSH
43999: LD_REAL  1.20000000000000E+0000
44002: MUL
44003: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44004: LD_VAR 0 6
44008: PPUSH
44009: CALL_OW 257
44013: PUSH
44014: LD_INT 5
44016: PUSH
44017: LD_INT 7
44019: PUSH
44020: LD_INT 9
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: IN
44028: PUSH
44029: LD_VAR 0 1
44033: PPUSH
44034: LD_INT 52
44036: PPUSH
44037: CALL_OW 321
44041: PUSH
44042: LD_INT 2
44044: EQUAL
44045: AND
44046: IFFALSE 44063
// bpoints := bpoints * 1.5 ;
44048: LD_ADDR_VAR 0 10
44052: PUSH
44053: LD_VAR 0 10
44057: PUSH
44058: LD_REAL  1.50000000000000E+0000
44061: MUL
44062: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44063: LD_VAR 0 1
44067: PPUSH
44068: LD_INT 66
44070: PPUSH
44071: CALL_OW 321
44075: PUSH
44076: LD_INT 2
44078: EQUAL
44079: IFFALSE 44096
// bpoints := bpoints * 1.1 ;
44081: LD_ADDR_VAR 0 10
44085: PUSH
44086: LD_VAR 0 10
44090: PUSH
44091: LD_REAL  1.10000000000000E+0000
44094: MUL
44095: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44096: LD_ADDR_VAR 0 10
44100: PUSH
44101: LD_VAR 0 10
44105: PUSH
44106: LD_VAR 0 6
44110: PPUSH
44111: LD_INT 1
44113: PPUSH
44114: CALL_OW 259
44118: PUSH
44119: LD_REAL  1.15000000000000E+0000
44122: MUL
44123: MUL
44124: ST_TO_ADDR
// end ; unit_vehicle :
44125: GO 44955
44127: LD_INT 2
44129: DOUBLE
44130: EQUAL
44131: IFTRUE 44135
44133: GO 44943
44135: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44136: LD_VAR 0 6
44140: PPUSH
44141: CALL_OW 264
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 42
44151: PUSH
44152: LD_INT 24
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: IN
44160: IFFALSE 44181
// points := [ 25 , 5 , 3 ] ;
44162: LD_ADDR_VAR 0 9
44166: PUSH
44167: LD_INT 25
44169: PUSH
44170: LD_INT 5
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44181: LD_VAR 0 6
44185: PPUSH
44186: CALL_OW 264
44190: PUSH
44191: LD_INT 4
44193: PUSH
44194: LD_INT 43
44196: PUSH
44197: LD_INT 25
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: IN
44205: IFFALSE 44226
// points := [ 40 , 15 , 5 ] ;
44207: LD_ADDR_VAR 0 9
44211: PUSH
44212: LD_INT 40
44214: PUSH
44215: LD_INT 15
44217: PUSH
44218: LD_INT 5
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44226: LD_VAR 0 6
44230: PPUSH
44231: CALL_OW 264
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 23
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: IN
44246: IFFALSE 44267
// points := [ 7 , 25 , 8 ] ;
44248: LD_ADDR_VAR 0 9
44252: PUSH
44253: LD_INT 7
44255: PUSH
44256: LD_INT 25
44258: PUSH
44259: LD_INT 8
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44267: LD_VAR 0 6
44271: PPUSH
44272: CALL_OW 264
44276: PUSH
44277: LD_INT 5
44279: PUSH
44280: LD_INT 27
44282: PUSH
44283: LD_INT 44
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: IN
44291: IFFALSE 44312
// points := [ 14 , 50 , 16 ] ;
44293: LD_ADDR_VAR 0 9
44297: PUSH
44298: LD_INT 14
44300: PUSH
44301: LD_INT 50
44303: PUSH
44304: LD_INT 16
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44312: LD_VAR 0 6
44316: PPUSH
44317: CALL_OW 264
44321: PUSH
44322: LD_INT 6
44324: PUSH
44325: LD_INT 46
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: IN
44332: IFFALSE 44353
// points := [ 32 , 120 , 70 ] ;
44334: LD_ADDR_VAR 0 9
44338: PUSH
44339: LD_INT 32
44341: PUSH
44342: LD_INT 120
44344: PUSH
44345: LD_INT 70
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44353: LD_VAR 0 6
44357: PPUSH
44358: CALL_OW 264
44362: PUSH
44363: LD_INT 7
44365: PUSH
44366: LD_INT 28
44368: PUSH
44369: LD_INT 45
44371: PUSH
44372: LD_EXP 128
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: IN
44383: IFFALSE 44404
// points := [ 35 , 20 , 45 ] ;
44385: LD_ADDR_VAR 0 9
44389: PUSH
44390: LD_INT 35
44392: PUSH
44393: LD_INT 20
44395: PUSH
44396: LD_INT 45
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44404: LD_VAR 0 6
44408: PPUSH
44409: CALL_OW 264
44413: PUSH
44414: LD_INT 47
44416: PUSH
44417: EMPTY
44418: LIST
44419: IN
44420: IFFALSE 44441
// points := [ 67 , 45 , 75 ] ;
44422: LD_ADDR_VAR 0 9
44426: PUSH
44427: LD_INT 67
44429: PUSH
44430: LD_INT 45
44432: PUSH
44433: LD_INT 75
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44441: LD_VAR 0 6
44445: PPUSH
44446: CALL_OW 264
44450: PUSH
44451: LD_INT 26
44453: PUSH
44454: EMPTY
44455: LIST
44456: IN
44457: IFFALSE 44478
// points := [ 120 , 30 , 80 ] ;
44459: LD_ADDR_VAR 0 9
44463: PUSH
44464: LD_INT 120
44466: PUSH
44467: LD_INT 30
44469: PUSH
44470: LD_INT 80
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44478: LD_VAR 0 6
44482: PPUSH
44483: CALL_OW 264
44487: PUSH
44488: LD_INT 22
44490: PUSH
44491: EMPTY
44492: LIST
44493: IN
44494: IFFALSE 44515
// points := [ 40 , 1 , 1 ] ;
44496: LD_ADDR_VAR 0 9
44500: PUSH
44501: LD_INT 40
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44515: LD_VAR 0 6
44519: PPUSH
44520: CALL_OW 264
44524: PUSH
44525: LD_INT 29
44527: PUSH
44528: EMPTY
44529: LIST
44530: IN
44531: IFFALSE 44552
// points := [ 70 , 200 , 400 ] ;
44533: LD_ADDR_VAR 0 9
44537: PUSH
44538: LD_INT 70
44540: PUSH
44541: LD_INT 200
44543: PUSH
44544: LD_INT 400
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44552: LD_VAR 0 6
44556: PPUSH
44557: CALL_OW 264
44561: PUSH
44562: LD_INT 14
44564: PUSH
44565: LD_INT 53
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: IN
44572: IFFALSE 44593
// points := [ 40 , 10 , 20 ] ;
44574: LD_ADDR_VAR 0 9
44578: PUSH
44579: LD_INT 40
44581: PUSH
44582: LD_INT 10
44584: PUSH
44585: LD_INT 20
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44593: LD_VAR 0 6
44597: PPUSH
44598: CALL_OW 264
44602: PUSH
44603: LD_INT 9
44605: PUSH
44606: EMPTY
44607: LIST
44608: IN
44609: IFFALSE 44630
// points := [ 5 , 70 , 20 ] ;
44611: LD_ADDR_VAR 0 9
44615: PUSH
44616: LD_INT 5
44618: PUSH
44619: LD_INT 70
44621: PUSH
44622: LD_INT 20
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44630: LD_VAR 0 6
44634: PPUSH
44635: CALL_OW 264
44639: PUSH
44640: LD_INT 10
44642: PUSH
44643: EMPTY
44644: LIST
44645: IN
44646: IFFALSE 44667
// points := [ 35 , 110 , 70 ] ;
44648: LD_ADDR_VAR 0 9
44652: PUSH
44653: LD_INT 35
44655: PUSH
44656: LD_INT 110
44658: PUSH
44659: LD_INT 70
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44667: LD_VAR 0 6
44671: PPUSH
44672: CALL_OW 265
44676: PUSH
44677: LD_INT 25
44679: EQUAL
44680: IFFALSE 44701
// points := [ 80 , 65 , 100 ] ;
44682: LD_ADDR_VAR 0 9
44686: PUSH
44687: LD_INT 80
44689: PUSH
44690: LD_INT 65
44692: PUSH
44693: LD_INT 100
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44701: LD_VAR 0 6
44705: PPUSH
44706: CALL_OW 263
44710: PUSH
44711: LD_INT 1
44713: EQUAL
44714: IFFALSE 44749
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44716: LD_ADDR_VAR 0 10
44720: PUSH
44721: LD_VAR 0 10
44725: PUSH
44726: LD_VAR 0 6
44730: PPUSH
44731: CALL_OW 311
44735: PPUSH
44736: LD_INT 3
44738: PPUSH
44739: CALL_OW 259
44743: PUSH
44744: LD_INT 4
44746: MUL
44747: MUL
44748: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44749: LD_VAR 0 6
44753: PPUSH
44754: CALL_OW 263
44758: PUSH
44759: LD_INT 2
44761: EQUAL
44762: IFFALSE 44813
// begin j := IsControledBy ( i ) ;
44764: LD_ADDR_VAR 0 7
44768: PUSH
44769: LD_VAR 0 6
44773: PPUSH
44774: CALL_OW 312
44778: ST_TO_ADDR
// if j then
44779: LD_VAR 0 7
44783: IFFALSE 44813
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44785: LD_ADDR_VAR 0 10
44789: PUSH
44790: LD_VAR 0 10
44794: PUSH
44795: LD_VAR 0 7
44799: PPUSH
44800: LD_INT 3
44802: PPUSH
44803: CALL_OW 259
44807: PUSH
44808: LD_INT 3
44810: MUL
44811: MUL
44812: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44813: LD_VAR 0 6
44817: PPUSH
44818: CALL_OW 264
44822: PUSH
44823: LD_INT 5
44825: PUSH
44826: LD_INT 6
44828: PUSH
44829: LD_INT 46
44831: PUSH
44832: LD_INT 44
44834: PUSH
44835: LD_INT 47
44837: PUSH
44838: LD_INT 45
44840: PUSH
44841: LD_INT 28
44843: PUSH
44844: LD_INT 7
44846: PUSH
44847: LD_INT 27
44849: PUSH
44850: LD_INT 29
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: IN
44865: PUSH
44866: LD_VAR 0 1
44870: PPUSH
44871: LD_INT 52
44873: PPUSH
44874: CALL_OW 321
44878: PUSH
44879: LD_INT 2
44881: EQUAL
44882: AND
44883: IFFALSE 44900
// bpoints := bpoints * 1.2 ;
44885: LD_ADDR_VAR 0 10
44889: PUSH
44890: LD_VAR 0 10
44894: PUSH
44895: LD_REAL  1.20000000000000E+0000
44898: MUL
44899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44900: LD_VAR 0 6
44904: PPUSH
44905: CALL_OW 264
44909: PUSH
44910: LD_INT 6
44912: PUSH
44913: LD_INT 46
44915: PUSH
44916: LD_INT 47
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: IN
44924: IFFALSE 44941
// bpoints := bpoints * 1.2 ;
44926: LD_ADDR_VAR 0 10
44930: PUSH
44931: LD_VAR 0 10
44935: PUSH
44936: LD_REAL  1.20000000000000E+0000
44939: MUL
44940: ST_TO_ADDR
// end ; unit_building :
44941: GO 44955
44943: LD_INT 3
44945: DOUBLE
44946: EQUAL
44947: IFTRUE 44951
44949: GO 44954
44951: POP
// ; end ;
44952: GO 44955
44954: POP
// for j = 1 to 3 do
44955: LD_ADDR_VAR 0 7
44959: PUSH
44960: DOUBLE
44961: LD_INT 1
44963: DEC
44964: ST_TO_ADDR
44965: LD_INT 3
44967: PUSH
44968: FOR_TO
44969: IFFALSE 45022
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44971: LD_ADDR_VAR 0 5
44975: PUSH
44976: LD_VAR 0 5
44980: PPUSH
44981: LD_VAR 0 7
44985: PPUSH
44986: LD_VAR 0 5
44990: PUSH
44991: LD_VAR 0 7
44995: ARRAY
44996: PUSH
44997: LD_VAR 0 9
45001: PUSH
45002: LD_VAR 0 7
45006: ARRAY
45007: PUSH
45008: LD_VAR 0 10
45012: MUL
45013: PLUS
45014: PPUSH
45015: CALL_OW 1
45019: ST_TO_ADDR
45020: GO 44968
45022: POP
45023: POP
// end ;
45024: GO 43501
45026: POP
45027: POP
// result := Replace ( result , 4 , tmp ) ;
45028: LD_ADDR_VAR 0 5
45032: PUSH
45033: LD_VAR 0 5
45037: PPUSH
45038: LD_INT 4
45040: PPUSH
45041: LD_VAR 0 8
45045: PPUSH
45046: CALL_OW 1
45050: ST_TO_ADDR
// end ;
45051: LD_VAR 0 5
45055: RET
// export function DangerAtRange ( unit , range ) ; begin
45056: LD_INT 0
45058: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45059: LD_ADDR_VAR 0 3
45063: PUSH
45064: LD_VAR 0 1
45068: PPUSH
45069: CALL_OW 255
45073: PPUSH
45074: LD_VAR 0 1
45078: PPUSH
45079: CALL_OW 250
45083: PPUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 251
45093: PPUSH
45094: LD_VAR 0 2
45098: PPUSH
45099: CALL 43353 0 4
45103: ST_TO_ADDR
// end ;
45104: LD_VAR 0 3
45108: RET
// export function DangerInArea ( side , area ) ; begin
45109: LD_INT 0
45111: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45112: LD_ADDR_VAR 0 3
45116: PUSH
45117: LD_VAR 0 2
45121: PPUSH
45122: LD_INT 81
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PPUSH
45134: CALL_OW 70
45138: ST_TO_ADDR
// end ;
45139: LD_VAR 0 3
45143: RET
// export function IsExtension ( b ) ; begin
45144: LD_INT 0
45146: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45147: LD_ADDR_VAR 0 2
45151: PUSH
45152: LD_VAR 0 1
45156: PUSH
45157: LD_INT 23
45159: PUSH
45160: LD_INT 20
45162: PUSH
45163: LD_INT 22
45165: PUSH
45166: LD_INT 17
45168: PUSH
45169: LD_INT 24
45171: PUSH
45172: LD_INT 21
45174: PUSH
45175: LD_INT 19
45177: PUSH
45178: LD_INT 16
45180: PUSH
45181: LD_INT 25
45183: PUSH
45184: LD_INT 18
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: IN
45199: ST_TO_ADDR
// end ;
45200: LD_VAR 0 2
45204: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45205: LD_INT 0
45207: PPUSH
45208: PPUSH
45209: PPUSH
// result := [ ] ;
45210: LD_ADDR_VAR 0 4
45214: PUSH
45215: EMPTY
45216: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45217: LD_ADDR_VAR 0 5
45221: PUSH
45222: LD_VAR 0 2
45226: PPUSH
45227: LD_INT 21
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PPUSH
45237: CALL_OW 70
45241: ST_TO_ADDR
// if not tmp then
45242: LD_VAR 0 5
45246: NOT
45247: IFFALSE 45251
// exit ;
45249: GO 45315
// if checkLink then
45251: LD_VAR 0 3
45255: IFFALSE 45305
// begin for i in tmp do
45257: LD_ADDR_VAR 0 6
45261: PUSH
45262: LD_VAR 0 5
45266: PUSH
45267: FOR_IN
45268: IFFALSE 45303
// if GetBase ( i ) <> base then
45270: LD_VAR 0 6
45274: PPUSH
45275: CALL_OW 274
45279: PUSH
45280: LD_VAR 0 1
45284: NONEQUAL
45285: IFFALSE 45301
// ComLinkToBase ( base , i ) ;
45287: LD_VAR 0 1
45291: PPUSH
45292: LD_VAR 0 6
45296: PPUSH
45297: CALL_OW 169
45301: GO 45267
45303: POP
45304: POP
// end ; result := tmp ;
45305: LD_ADDR_VAR 0 4
45309: PUSH
45310: LD_VAR 0 5
45314: ST_TO_ADDR
// end ;
45315: LD_VAR 0 4
45319: RET
// export function ComComplete ( units , b ) ; var i ; begin
45320: LD_INT 0
45322: PPUSH
45323: PPUSH
// if not units then
45324: LD_VAR 0 1
45328: NOT
45329: IFFALSE 45333
// exit ;
45331: GO 45423
// for i in units do
45333: LD_ADDR_VAR 0 4
45337: PUSH
45338: LD_VAR 0 1
45342: PUSH
45343: FOR_IN
45344: IFFALSE 45421
// if BuildingStatus ( b ) = bs_build then
45346: LD_VAR 0 2
45350: PPUSH
45351: CALL_OW 461
45355: PUSH
45356: LD_INT 1
45358: EQUAL
45359: IFFALSE 45419
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45361: LD_VAR 0 4
45365: PPUSH
45366: LD_STRING h
45368: PUSH
45369: LD_VAR 0 2
45373: PPUSH
45374: CALL_OW 250
45378: PUSH
45379: LD_VAR 0 2
45383: PPUSH
45384: CALL_OW 251
45388: PUSH
45389: LD_VAR 0 2
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: PUSH
45412: EMPTY
45413: LIST
45414: PPUSH
45415: CALL_OW 446
45419: GO 45343
45421: POP
45422: POP
// end ;
45423: LD_VAR 0 3
45427: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45428: LD_INT 0
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45436: LD_VAR 0 1
45440: NOT
45441: PUSH
45442: LD_VAR 0 1
45446: PPUSH
45447: CALL_OW 263
45451: PUSH
45452: LD_INT 2
45454: NONEQUAL
45455: OR
45456: IFFALSE 45460
// exit ;
45458: GO 45776
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45460: LD_ADDR_VAR 0 6
45464: PUSH
45465: LD_INT 22
45467: PUSH
45468: LD_VAR 0 1
45472: PPUSH
45473: CALL_OW 255
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 30
45487: PUSH
45488: LD_INT 36
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 34
45497: PUSH
45498: LD_INT 31
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PPUSH
45514: CALL_OW 69
45518: ST_TO_ADDR
// if not tmp then
45519: LD_VAR 0 6
45523: NOT
45524: IFFALSE 45528
// exit ;
45526: GO 45776
// result := [ ] ;
45528: LD_ADDR_VAR 0 2
45532: PUSH
45533: EMPTY
45534: ST_TO_ADDR
// for i in tmp do
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_VAR 0 6
45544: PUSH
45545: FOR_IN
45546: IFFALSE 45617
// begin t := UnitsInside ( i ) ;
45548: LD_ADDR_VAR 0 4
45552: PUSH
45553: LD_VAR 0 3
45557: PPUSH
45558: CALL_OW 313
45562: ST_TO_ADDR
// if t then
45563: LD_VAR 0 4
45567: IFFALSE 45615
// for j in t do
45569: LD_ADDR_VAR 0 7
45573: PUSH
45574: LD_VAR 0 4
45578: PUSH
45579: FOR_IN
45580: IFFALSE 45613
// result := Replace ( result , result + 1 , j ) ;
45582: LD_ADDR_VAR 0 2
45586: PUSH
45587: LD_VAR 0 2
45591: PPUSH
45592: LD_VAR 0 2
45596: PUSH
45597: LD_INT 1
45599: PLUS
45600: PPUSH
45601: LD_VAR 0 7
45605: PPUSH
45606: CALL_OW 1
45610: ST_TO_ADDR
45611: GO 45579
45613: POP
45614: POP
// end ;
45615: GO 45545
45617: POP
45618: POP
// if not result then
45619: LD_VAR 0 2
45623: NOT
45624: IFFALSE 45628
// exit ;
45626: GO 45776
// mech := result [ 1 ] ;
45628: LD_ADDR_VAR 0 5
45632: PUSH
45633: LD_VAR 0 2
45637: PUSH
45638: LD_INT 1
45640: ARRAY
45641: ST_TO_ADDR
// if result > 1 then
45642: LD_VAR 0 2
45646: PUSH
45647: LD_INT 1
45649: GREATER
45650: IFFALSE 45762
// begin for i = 2 to result do
45652: LD_ADDR_VAR 0 3
45656: PUSH
45657: DOUBLE
45658: LD_INT 2
45660: DEC
45661: ST_TO_ADDR
45662: LD_VAR 0 2
45666: PUSH
45667: FOR_TO
45668: IFFALSE 45760
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45670: LD_ADDR_VAR 0 4
45674: PUSH
45675: LD_VAR 0 2
45679: PUSH
45680: LD_VAR 0 3
45684: ARRAY
45685: PPUSH
45686: LD_INT 3
45688: PPUSH
45689: CALL_OW 259
45693: PUSH
45694: LD_VAR 0 2
45698: PUSH
45699: LD_VAR 0 3
45703: ARRAY
45704: PPUSH
45705: CALL_OW 432
45709: MINUS
45710: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45711: LD_VAR 0 4
45715: PUSH
45716: LD_VAR 0 5
45720: PPUSH
45721: LD_INT 3
45723: PPUSH
45724: CALL_OW 259
45728: PUSH
45729: LD_VAR 0 5
45733: PPUSH
45734: CALL_OW 432
45738: MINUS
45739: GREATEREQUAL
45740: IFFALSE 45758
// mech := result [ i ] ;
45742: LD_ADDR_VAR 0 5
45746: PUSH
45747: LD_VAR 0 2
45751: PUSH
45752: LD_VAR 0 3
45756: ARRAY
45757: ST_TO_ADDR
// end ;
45758: GO 45667
45760: POP
45761: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45762: LD_VAR 0 1
45766: PPUSH
45767: LD_VAR 0 5
45771: PPUSH
45772: CALL_OW 135
// end ;
45776: LD_VAR 0 2
45780: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45781: LD_INT 0
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
// result := [ ] ;
45796: LD_ADDR_VAR 0 7
45800: PUSH
45801: EMPTY
45802: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 266
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: IN
45823: NOT
45824: IFFALSE 45828
// exit ;
45826: GO 47462
// if name then
45828: LD_VAR 0 3
45832: IFFALSE 45848
// SetBName ( base_dep , name ) ;
45834: LD_VAR 0 1
45838: PPUSH
45839: LD_VAR 0 3
45843: PPUSH
45844: CALL_OW 500
// base := GetBase ( base_dep ) ;
45848: LD_ADDR_VAR 0 15
45852: PUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: CALL_OW 274
45862: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45863: LD_ADDR_VAR 0 16
45867: PUSH
45868: LD_VAR 0 1
45872: PPUSH
45873: CALL_OW 255
45877: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45878: LD_ADDR_VAR 0 17
45882: PUSH
45883: LD_VAR 0 1
45887: PPUSH
45888: CALL_OW 248
45892: ST_TO_ADDR
// if sources then
45893: LD_VAR 0 5
45897: IFFALSE 45944
// for i = 1 to 3 do
45899: LD_ADDR_VAR 0 8
45903: PUSH
45904: DOUBLE
45905: LD_INT 1
45907: DEC
45908: ST_TO_ADDR
45909: LD_INT 3
45911: PUSH
45912: FOR_TO
45913: IFFALSE 45942
// AddResourceType ( base , i , sources [ i ] ) ;
45915: LD_VAR 0 15
45919: PPUSH
45920: LD_VAR 0 8
45924: PPUSH
45925: LD_VAR 0 5
45929: PUSH
45930: LD_VAR 0 8
45934: ARRAY
45935: PPUSH
45936: CALL_OW 276
45940: GO 45912
45942: POP
45943: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45944: LD_ADDR_VAR 0 18
45948: PUSH
45949: LD_VAR 0 15
45953: PPUSH
45954: LD_VAR 0 2
45958: PPUSH
45959: LD_INT 1
45961: PPUSH
45962: CALL 45205 0 3
45966: ST_TO_ADDR
// InitHc ;
45967: CALL_OW 19
// InitUc ;
45971: CALL_OW 18
// uc_side := side ;
45975: LD_ADDR_OWVAR 20
45979: PUSH
45980: LD_VAR 0 16
45984: ST_TO_ADDR
// uc_nation := nation ;
45985: LD_ADDR_OWVAR 21
45989: PUSH
45990: LD_VAR 0 17
45994: ST_TO_ADDR
// if buildings then
45995: LD_VAR 0 18
45999: IFFALSE 47321
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46001: LD_ADDR_VAR 0 19
46005: PUSH
46006: LD_VAR 0 18
46010: PPUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 30
46016: PUSH
46017: LD_INT 29
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 30
46026: PUSH
46027: LD_INT 30
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: PPUSH
46039: CALL_OW 72
46043: ST_TO_ADDR
// if tmp then
46044: LD_VAR 0 19
46048: IFFALSE 46096
// for i in tmp do
46050: LD_ADDR_VAR 0 8
46054: PUSH
46055: LD_VAR 0 19
46059: PUSH
46060: FOR_IN
46061: IFFALSE 46094
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46063: LD_VAR 0 8
46067: PPUSH
46068: CALL_OW 250
46072: PPUSH
46073: LD_VAR 0 8
46077: PPUSH
46078: CALL_OW 251
46082: PPUSH
46083: LD_VAR 0 16
46087: PPUSH
46088: CALL_OW 441
46092: GO 46060
46094: POP
46095: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46096: LD_VAR 0 18
46100: PPUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 30
46106: PUSH
46107: LD_INT 32
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 30
46116: PUSH
46117: LD_INT 33
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: PPUSH
46129: CALL_OW 72
46133: IFFALSE 46221
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46135: LD_ADDR_VAR 0 8
46139: PUSH
46140: LD_VAR 0 18
46144: PPUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 30
46150: PUSH
46151: LD_INT 32
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 30
46160: PUSH
46161: LD_INT 33
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: PPUSH
46173: CALL_OW 72
46177: PUSH
46178: FOR_IN
46179: IFFALSE 46219
// begin if not GetBWeapon ( i ) then
46181: LD_VAR 0 8
46185: PPUSH
46186: CALL_OW 269
46190: NOT
46191: IFFALSE 46217
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46193: LD_VAR 0 8
46197: PPUSH
46198: LD_VAR 0 8
46202: PPUSH
46203: LD_VAR 0 2
46207: PPUSH
46208: CALL 47467 0 2
46212: PPUSH
46213: CALL_OW 431
// end ;
46217: GO 46178
46219: POP
46220: POP
// end ; for i = 1 to personel do
46221: LD_ADDR_VAR 0 8
46225: PUSH
46226: DOUBLE
46227: LD_INT 1
46229: DEC
46230: ST_TO_ADDR
46231: LD_VAR 0 6
46235: PUSH
46236: FOR_TO
46237: IFFALSE 47301
// begin if i > 4 then
46239: LD_VAR 0 8
46243: PUSH
46244: LD_INT 4
46246: GREATER
46247: IFFALSE 46251
// break ;
46249: GO 47301
// case i of 1 :
46251: LD_VAR 0 8
46255: PUSH
46256: LD_INT 1
46258: DOUBLE
46259: EQUAL
46260: IFTRUE 46264
46262: GO 46344
46264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46265: LD_ADDR_VAR 0 12
46269: PUSH
46270: LD_VAR 0 18
46274: PPUSH
46275: LD_INT 22
46277: PUSH
46278: LD_VAR 0 16
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 58
46289: PUSH
46290: EMPTY
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 30
46298: PUSH
46299: LD_INT 32
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 30
46308: PUSH
46309: LD_INT 4
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 30
46318: PUSH
46319: LD_INT 5
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: PPUSH
46337: CALL_OW 72
46341: ST_TO_ADDR
46342: GO 46566
46344: LD_INT 2
46346: DOUBLE
46347: EQUAL
46348: IFTRUE 46352
46350: GO 46414
46352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46353: LD_ADDR_VAR 0 12
46357: PUSH
46358: LD_VAR 0 18
46362: PPUSH
46363: LD_INT 22
46365: PUSH
46366: LD_VAR 0 16
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 30
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 30
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PPUSH
46407: CALL_OW 72
46411: ST_TO_ADDR
46412: GO 46566
46414: LD_INT 3
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 46484
46422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46423: LD_ADDR_VAR 0 12
46427: PUSH
46428: LD_VAR 0 18
46432: PPUSH
46433: LD_INT 22
46435: PUSH
46436: LD_VAR 0 16
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 30
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 30
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PPUSH
46477: CALL_OW 72
46481: ST_TO_ADDR
46482: GO 46566
46484: LD_INT 4
46486: DOUBLE
46487: EQUAL
46488: IFTRUE 46492
46490: GO 46565
46492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46493: LD_ADDR_VAR 0 12
46497: PUSH
46498: LD_VAR 0 18
46502: PPUSH
46503: LD_INT 22
46505: PUSH
46506: LD_VAR 0 16
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 30
46520: PUSH
46521: LD_INT 6
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: LD_INT 7
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 30
46540: PUSH
46541: LD_INT 8
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PPUSH
46558: CALL_OW 72
46562: ST_TO_ADDR
46563: GO 46566
46565: POP
// if i = 1 then
46566: LD_VAR 0 8
46570: PUSH
46571: LD_INT 1
46573: EQUAL
46574: IFFALSE 46685
// begin tmp := [ ] ;
46576: LD_ADDR_VAR 0 19
46580: PUSH
46581: EMPTY
46582: ST_TO_ADDR
// for j in f do
46583: LD_ADDR_VAR 0 9
46587: PUSH
46588: LD_VAR 0 12
46592: PUSH
46593: FOR_IN
46594: IFFALSE 46667
// if GetBType ( j ) = b_bunker then
46596: LD_VAR 0 9
46600: PPUSH
46601: CALL_OW 266
46605: PUSH
46606: LD_INT 32
46608: EQUAL
46609: IFFALSE 46636
// tmp := Insert ( tmp , 1 , j ) else
46611: LD_ADDR_VAR 0 19
46615: PUSH
46616: LD_VAR 0 19
46620: PPUSH
46621: LD_INT 1
46623: PPUSH
46624: LD_VAR 0 9
46628: PPUSH
46629: CALL_OW 2
46633: ST_TO_ADDR
46634: GO 46665
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46636: LD_ADDR_VAR 0 19
46640: PUSH
46641: LD_VAR 0 19
46645: PPUSH
46646: LD_VAR 0 19
46650: PUSH
46651: LD_INT 1
46653: PLUS
46654: PPUSH
46655: LD_VAR 0 9
46659: PPUSH
46660: CALL_OW 2
46664: ST_TO_ADDR
46665: GO 46593
46667: POP
46668: POP
// if tmp then
46669: LD_VAR 0 19
46673: IFFALSE 46685
// f := tmp ;
46675: LD_ADDR_VAR 0 12
46679: PUSH
46680: LD_VAR 0 19
46684: ST_TO_ADDR
// end ; x := personel [ i ] ;
46685: LD_ADDR_VAR 0 13
46689: PUSH
46690: LD_VAR 0 6
46694: PUSH
46695: LD_VAR 0 8
46699: ARRAY
46700: ST_TO_ADDR
// if x = - 1 then
46701: LD_VAR 0 13
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: EQUAL
46710: IFFALSE 46919
// begin for j in f do
46712: LD_ADDR_VAR 0 9
46716: PUSH
46717: LD_VAR 0 12
46721: PUSH
46722: FOR_IN
46723: IFFALSE 46915
// repeat InitHc ;
46725: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46729: LD_VAR 0 9
46733: PPUSH
46734: CALL_OW 266
46738: PUSH
46739: LD_INT 5
46741: EQUAL
46742: IFFALSE 46812
// begin if UnitsInside ( j ) < 3 then
46744: LD_VAR 0 9
46748: PPUSH
46749: CALL_OW 313
46753: PUSH
46754: LD_INT 3
46756: LESS
46757: IFFALSE 46793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46759: LD_INT 0
46761: PPUSH
46762: LD_INT 5
46764: PUSH
46765: LD_INT 8
46767: PUSH
46768: LD_INT 9
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: PUSH
46776: LD_VAR 0 17
46780: ARRAY
46781: PPUSH
46782: LD_VAR 0 4
46786: PPUSH
46787: CALL_OW 380
46791: GO 46810
// PrepareHuman ( false , i , skill ) ;
46793: LD_INT 0
46795: PPUSH
46796: LD_VAR 0 8
46800: PPUSH
46801: LD_VAR 0 4
46805: PPUSH
46806: CALL_OW 380
// end else
46810: GO 46829
// PrepareHuman ( false , i , skill ) ;
46812: LD_INT 0
46814: PPUSH
46815: LD_VAR 0 8
46819: PPUSH
46820: LD_VAR 0 4
46824: PPUSH
46825: CALL_OW 380
// un := CreateHuman ;
46829: LD_ADDR_VAR 0 14
46833: PUSH
46834: CALL_OW 44
46838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46839: LD_ADDR_VAR 0 7
46843: PUSH
46844: LD_VAR 0 7
46848: PPUSH
46849: LD_INT 1
46851: PPUSH
46852: LD_VAR 0 14
46856: PPUSH
46857: CALL_OW 2
46861: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46862: LD_VAR 0 14
46866: PPUSH
46867: LD_VAR 0 9
46871: PPUSH
46872: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46876: LD_VAR 0 9
46880: PPUSH
46881: CALL_OW 313
46885: PUSH
46886: LD_INT 6
46888: EQUAL
46889: PUSH
46890: LD_VAR 0 9
46894: PPUSH
46895: CALL_OW 266
46899: PUSH
46900: LD_INT 32
46902: PUSH
46903: LD_INT 31
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: IN
46910: OR
46911: IFFALSE 46725
46913: GO 46722
46915: POP
46916: POP
// end else
46917: GO 47299
// for j = 1 to x do
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: DOUBLE
46925: LD_INT 1
46927: DEC
46928: ST_TO_ADDR
46929: LD_VAR 0 13
46933: PUSH
46934: FOR_TO
46935: IFFALSE 47297
// begin InitHc ;
46937: CALL_OW 19
// if not f then
46941: LD_VAR 0 12
46945: NOT
46946: IFFALSE 47035
// begin PrepareHuman ( false , i , skill ) ;
46948: LD_INT 0
46950: PPUSH
46951: LD_VAR 0 8
46955: PPUSH
46956: LD_VAR 0 4
46960: PPUSH
46961: CALL_OW 380
// un := CreateHuman ;
46965: LD_ADDR_VAR 0 14
46969: PUSH
46970: CALL_OW 44
46974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46975: LD_ADDR_VAR 0 7
46979: PUSH
46980: LD_VAR 0 7
46984: PPUSH
46985: LD_INT 1
46987: PPUSH
46988: LD_VAR 0 14
46992: PPUSH
46993: CALL_OW 2
46997: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46998: LD_VAR 0 14
47002: PPUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: CALL_OW 250
47012: PPUSH
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 251
47022: PPUSH
47023: LD_INT 10
47025: PPUSH
47026: LD_INT 0
47028: PPUSH
47029: CALL_OW 50
// continue ;
47033: GO 46934
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47035: LD_VAR 0 12
47039: PUSH
47040: LD_INT 1
47042: ARRAY
47043: PPUSH
47044: CALL_OW 313
47048: PUSH
47049: LD_VAR 0 12
47053: PUSH
47054: LD_INT 1
47056: ARRAY
47057: PPUSH
47058: CALL_OW 266
47062: PUSH
47063: LD_INT 32
47065: PUSH
47066: LD_INT 31
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: IN
47073: AND
47074: PUSH
47075: LD_VAR 0 12
47079: PUSH
47080: LD_INT 1
47082: ARRAY
47083: PPUSH
47084: CALL_OW 313
47088: PUSH
47089: LD_INT 6
47091: EQUAL
47092: OR
47093: IFFALSE 47113
// f := Delete ( f , 1 ) ;
47095: LD_ADDR_VAR 0 12
47099: PUSH
47100: LD_VAR 0 12
47104: PPUSH
47105: LD_INT 1
47107: PPUSH
47108: CALL_OW 3
47112: ST_TO_ADDR
// if not f then
47113: LD_VAR 0 12
47117: NOT
47118: IFFALSE 47136
// begin x := x + 2 ;
47120: LD_ADDR_VAR 0 13
47124: PUSH
47125: LD_VAR 0 13
47129: PUSH
47130: LD_INT 2
47132: PLUS
47133: ST_TO_ADDR
// continue ;
47134: GO 46934
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47136: LD_VAR 0 12
47140: PUSH
47141: LD_INT 1
47143: ARRAY
47144: PPUSH
47145: CALL_OW 266
47149: PUSH
47150: LD_INT 5
47152: EQUAL
47153: IFFALSE 47227
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47155: LD_VAR 0 12
47159: PUSH
47160: LD_INT 1
47162: ARRAY
47163: PPUSH
47164: CALL_OW 313
47168: PUSH
47169: LD_INT 3
47171: LESS
47172: IFFALSE 47208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47174: LD_INT 0
47176: PPUSH
47177: LD_INT 5
47179: PUSH
47180: LD_INT 8
47182: PUSH
47183: LD_INT 9
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: LD_VAR 0 17
47195: ARRAY
47196: PPUSH
47197: LD_VAR 0 4
47201: PPUSH
47202: CALL_OW 380
47206: GO 47225
// PrepareHuman ( false , i , skill ) ;
47208: LD_INT 0
47210: PPUSH
47211: LD_VAR 0 8
47215: PPUSH
47216: LD_VAR 0 4
47220: PPUSH
47221: CALL_OW 380
// end else
47225: GO 47244
// PrepareHuman ( false , i , skill ) ;
47227: LD_INT 0
47229: PPUSH
47230: LD_VAR 0 8
47234: PPUSH
47235: LD_VAR 0 4
47239: PPUSH
47240: CALL_OW 380
// un := CreateHuman ;
47244: LD_ADDR_VAR 0 14
47248: PUSH
47249: CALL_OW 44
47253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47254: LD_ADDR_VAR 0 7
47258: PUSH
47259: LD_VAR 0 7
47263: PPUSH
47264: LD_INT 1
47266: PPUSH
47267: LD_VAR 0 14
47271: PPUSH
47272: CALL_OW 2
47276: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47277: LD_VAR 0 14
47281: PPUSH
47282: LD_VAR 0 12
47286: PUSH
47287: LD_INT 1
47289: ARRAY
47290: PPUSH
47291: CALL_OW 52
// end ;
47295: GO 46934
47297: POP
47298: POP
// end ;
47299: GO 46236
47301: POP
47302: POP
// result := result ^ buildings ;
47303: LD_ADDR_VAR 0 7
47307: PUSH
47308: LD_VAR 0 7
47312: PUSH
47313: LD_VAR 0 18
47317: ADD
47318: ST_TO_ADDR
// end else
47319: GO 47462
// begin for i = 1 to personel do
47321: LD_ADDR_VAR 0 8
47325: PUSH
47326: DOUBLE
47327: LD_INT 1
47329: DEC
47330: ST_TO_ADDR
47331: LD_VAR 0 6
47335: PUSH
47336: FOR_TO
47337: IFFALSE 47460
// begin if i > 4 then
47339: LD_VAR 0 8
47343: PUSH
47344: LD_INT 4
47346: GREATER
47347: IFFALSE 47351
// break ;
47349: GO 47460
// x := personel [ i ] ;
47351: LD_ADDR_VAR 0 13
47355: PUSH
47356: LD_VAR 0 6
47360: PUSH
47361: LD_VAR 0 8
47365: ARRAY
47366: ST_TO_ADDR
// if x = - 1 then
47367: LD_VAR 0 13
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: EQUAL
47376: IFFALSE 47380
// continue ;
47378: GO 47336
// PrepareHuman ( false , i , skill ) ;
47380: LD_INT 0
47382: PPUSH
47383: LD_VAR 0 8
47387: PPUSH
47388: LD_VAR 0 4
47392: PPUSH
47393: CALL_OW 380
// un := CreateHuman ;
47397: LD_ADDR_VAR 0 14
47401: PUSH
47402: CALL_OW 44
47406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47407: LD_VAR 0 14
47411: PPUSH
47412: LD_VAR 0 1
47416: PPUSH
47417: CALL_OW 250
47421: PPUSH
47422: LD_VAR 0 1
47426: PPUSH
47427: CALL_OW 251
47431: PPUSH
47432: LD_INT 10
47434: PPUSH
47435: LD_INT 0
47437: PPUSH
47438: CALL_OW 50
// result := result ^ un ;
47442: LD_ADDR_VAR 0 7
47446: PUSH
47447: LD_VAR 0 7
47451: PUSH
47452: LD_VAR 0 14
47456: ADD
47457: ST_TO_ADDR
// end ;
47458: GO 47336
47460: POP
47461: POP
// end ; end ;
47462: LD_VAR 0 7
47466: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47467: LD_INT 0
47469: PPUSH
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
47474: PPUSH
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
47481: PPUSH
47482: PPUSH
47483: PPUSH
47484: PPUSH
// result := false ;
47485: LD_ADDR_VAR 0 3
47489: PUSH
47490: LD_INT 0
47492: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47493: LD_VAR 0 1
47497: NOT
47498: PUSH
47499: LD_VAR 0 1
47503: PPUSH
47504: CALL_OW 266
47508: PUSH
47509: LD_INT 32
47511: PUSH
47512: LD_INT 33
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: IN
47519: NOT
47520: OR
47521: IFFALSE 47525
// exit ;
47523: GO 48634
// nat := GetNation ( tower ) ;
47525: LD_ADDR_VAR 0 12
47529: PUSH
47530: LD_VAR 0 1
47534: PPUSH
47535: CALL_OW 248
47539: ST_TO_ADDR
// side := GetSide ( tower ) ;
47540: LD_ADDR_VAR 0 16
47544: PUSH
47545: LD_VAR 0 1
47549: PPUSH
47550: CALL_OW 255
47554: ST_TO_ADDR
// x := GetX ( tower ) ;
47555: LD_ADDR_VAR 0 10
47559: PUSH
47560: LD_VAR 0 1
47564: PPUSH
47565: CALL_OW 250
47569: ST_TO_ADDR
// y := GetY ( tower ) ;
47570: LD_ADDR_VAR 0 11
47574: PUSH
47575: LD_VAR 0 1
47579: PPUSH
47580: CALL_OW 251
47584: ST_TO_ADDR
// if not x or not y then
47585: LD_VAR 0 10
47589: NOT
47590: PUSH
47591: LD_VAR 0 11
47595: NOT
47596: OR
47597: IFFALSE 47601
// exit ;
47599: GO 48634
// weapon := 0 ;
47601: LD_ADDR_VAR 0 18
47605: PUSH
47606: LD_INT 0
47608: ST_TO_ADDR
// fac_list := [ ] ;
47609: LD_ADDR_VAR 0 17
47613: PUSH
47614: EMPTY
47615: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47616: LD_ADDR_VAR 0 6
47620: PUSH
47621: LD_VAR 0 1
47625: PPUSH
47626: CALL_OW 274
47630: PPUSH
47631: LD_VAR 0 2
47635: PPUSH
47636: LD_INT 0
47638: PPUSH
47639: CALL 45205 0 3
47643: PPUSH
47644: LD_INT 30
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PPUSH
47654: CALL_OW 72
47658: ST_TO_ADDR
// if not factories then
47659: LD_VAR 0 6
47663: NOT
47664: IFFALSE 47668
// exit ;
47666: GO 48634
// for i in factories do
47668: LD_ADDR_VAR 0 8
47672: PUSH
47673: LD_VAR 0 6
47677: PUSH
47678: FOR_IN
47679: IFFALSE 47704
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47681: LD_ADDR_VAR 0 17
47685: PUSH
47686: LD_VAR 0 17
47690: PUSH
47691: LD_VAR 0 8
47695: PPUSH
47696: CALL_OW 478
47700: UNION
47701: ST_TO_ADDR
47702: GO 47678
47704: POP
47705: POP
// if not fac_list then
47706: LD_VAR 0 17
47710: NOT
47711: IFFALSE 47715
// exit ;
47713: GO 48634
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47715: LD_ADDR_VAR 0 5
47719: PUSH
47720: LD_INT 4
47722: PUSH
47723: LD_INT 5
47725: PUSH
47726: LD_INT 9
47728: PUSH
47729: LD_INT 10
47731: PUSH
47732: LD_INT 6
47734: PUSH
47735: LD_INT 7
47737: PUSH
47738: LD_INT 11
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 27
47752: PUSH
47753: LD_INT 28
47755: PUSH
47756: LD_INT 26
47758: PUSH
47759: LD_INT 30
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 43
47770: PUSH
47771: LD_INT 44
47773: PUSH
47774: LD_INT 46
47776: PUSH
47777: LD_INT 45
47779: PUSH
47780: LD_INT 47
47782: PUSH
47783: LD_INT 49
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: PUSH
47799: LD_VAR 0 12
47803: ARRAY
47804: ST_TO_ADDR
// list := list isect fac_list ;
47805: LD_ADDR_VAR 0 5
47809: PUSH
47810: LD_VAR 0 5
47814: PUSH
47815: LD_VAR 0 17
47819: ISECT
47820: ST_TO_ADDR
// if not list then
47821: LD_VAR 0 5
47825: NOT
47826: IFFALSE 47830
// exit ;
47828: GO 48634
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47830: LD_VAR 0 12
47834: PUSH
47835: LD_INT 3
47837: EQUAL
47838: PUSH
47839: LD_INT 49
47841: PUSH
47842: LD_VAR 0 5
47846: IN
47847: AND
47848: PUSH
47849: LD_INT 31
47851: PPUSH
47852: LD_VAR 0 16
47856: PPUSH
47857: CALL_OW 321
47861: PUSH
47862: LD_INT 2
47864: EQUAL
47865: AND
47866: IFFALSE 47926
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47868: LD_INT 22
47870: PUSH
47871: LD_VAR 0 16
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 35
47882: PUSH
47883: LD_INT 49
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 91
47892: PUSH
47893: LD_VAR 0 1
47897: PUSH
47898: LD_INT 10
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: PPUSH
47911: CALL_OW 69
47915: NOT
47916: IFFALSE 47926
// weapon := ru_time_lapser ;
47918: LD_ADDR_VAR 0 18
47922: PUSH
47923: LD_INT 49
47925: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47926: LD_VAR 0 12
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: IN
47941: PUSH
47942: LD_INT 11
47944: PUSH
47945: LD_VAR 0 5
47949: IN
47950: PUSH
47951: LD_INT 30
47953: PUSH
47954: LD_VAR 0 5
47958: IN
47959: OR
47960: AND
47961: PUSH
47962: LD_INT 6
47964: PPUSH
47965: LD_VAR 0 16
47969: PPUSH
47970: CALL_OW 321
47974: PUSH
47975: LD_INT 2
47977: EQUAL
47978: AND
47979: IFFALSE 48144
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47981: LD_INT 22
47983: PUSH
47984: LD_VAR 0 16
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 35
47998: PUSH
47999: LD_INT 11
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 35
48008: PUSH
48009: LD_INT 30
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 91
48023: PUSH
48024: LD_VAR 0 1
48028: PUSH
48029: LD_INT 18
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: PPUSH
48042: CALL_OW 69
48046: NOT
48047: PUSH
48048: LD_INT 22
48050: PUSH
48051: LD_VAR 0 16
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 30
48065: PUSH
48066: LD_INT 32
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 30
48075: PUSH
48076: LD_INT 33
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 91
48090: PUSH
48091: LD_VAR 0 1
48095: PUSH
48096: LD_INT 12
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: PPUSH
48112: CALL_OW 69
48116: PUSH
48117: LD_INT 2
48119: GREATER
48120: AND
48121: IFFALSE 48144
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48123: LD_ADDR_VAR 0 18
48127: PUSH
48128: LD_INT 11
48130: PUSH
48131: LD_INT 30
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_VAR 0 12
48142: ARRAY
48143: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48144: LD_VAR 0 18
48148: NOT
48149: PUSH
48150: LD_INT 40
48152: PPUSH
48153: LD_VAR 0 16
48157: PPUSH
48158: CALL_OW 321
48162: PUSH
48163: LD_INT 2
48165: EQUAL
48166: AND
48167: PUSH
48168: LD_INT 7
48170: PUSH
48171: LD_VAR 0 5
48175: IN
48176: PUSH
48177: LD_INT 28
48179: PUSH
48180: LD_VAR 0 5
48184: IN
48185: OR
48186: PUSH
48187: LD_INT 45
48189: PUSH
48190: LD_VAR 0 5
48194: IN
48195: OR
48196: AND
48197: IFFALSE 48451
// begin hex := GetHexInfo ( x , y ) ;
48199: LD_ADDR_VAR 0 4
48203: PUSH
48204: LD_VAR 0 10
48208: PPUSH
48209: LD_VAR 0 11
48213: PPUSH
48214: CALL_OW 546
48218: ST_TO_ADDR
// if hex [ 1 ] then
48219: LD_VAR 0 4
48223: PUSH
48224: LD_INT 1
48226: ARRAY
48227: IFFALSE 48231
// exit ;
48229: GO 48634
// height := hex [ 2 ] ;
48231: LD_ADDR_VAR 0 15
48235: PUSH
48236: LD_VAR 0 4
48240: PUSH
48241: LD_INT 2
48243: ARRAY
48244: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48245: LD_ADDR_VAR 0 14
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 5
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: ST_TO_ADDR
// for i in tmp do
48268: LD_ADDR_VAR 0 8
48272: PUSH
48273: LD_VAR 0 14
48277: PUSH
48278: FOR_IN
48279: IFFALSE 48449
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48281: LD_ADDR_VAR 0 9
48285: PUSH
48286: LD_VAR 0 10
48290: PPUSH
48291: LD_VAR 0 8
48295: PPUSH
48296: LD_INT 5
48298: PPUSH
48299: CALL_OW 272
48303: PUSH
48304: LD_VAR 0 11
48308: PPUSH
48309: LD_VAR 0 8
48313: PPUSH
48314: LD_INT 5
48316: PPUSH
48317: CALL_OW 273
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48326: LD_VAR 0 9
48330: PUSH
48331: LD_INT 1
48333: ARRAY
48334: PPUSH
48335: LD_VAR 0 9
48339: PUSH
48340: LD_INT 2
48342: ARRAY
48343: PPUSH
48344: CALL_OW 488
48348: IFFALSE 48447
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48350: LD_ADDR_VAR 0 4
48354: PUSH
48355: LD_VAR 0 9
48359: PUSH
48360: LD_INT 1
48362: ARRAY
48363: PPUSH
48364: LD_VAR 0 9
48368: PUSH
48369: LD_INT 2
48371: ARRAY
48372: PPUSH
48373: CALL_OW 546
48377: ST_TO_ADDR
// if hex [ 1 ] then
48378: LD_VAR 0 4
48382: PUSH
48383: LD_INT 1
48385: ARRAY
48386: IFFALSE 48390
// continue ;
48388: GO 48278
// h := hex [ 2 ] ;
48390: LD_ADDR_VAR 0 13
48394: PUSH
48395: LD_VAR 0 4
48399: PUSH
48400: LD_INT 2
48402: ARRAY
48403: ST_TO_ADDR
// if h + 7 < height then
48404: LD_VAR 0 13
48408: PUSH
48409: LD_INT 7
48411: PLUS
48412: PUSH
48413: LD_VAR 0 15
48417: LESS
48418: IFFALSE 48447
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48420: LD_ADDR_VAR 0 18
48424: PUSH
48425: LD_INT 7
48427: PUSH
48428: LD_INT 28
48430: PUSH
48431: LD_INT 45
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: PUSH
48439: LD_VAR 0 12
48443: ARRAY
48444: ST_TO_ADDR
// break ;
48445: GO 48449
// end ; end ; end ;
48447: GO 48278
48449: POP
48450: POP
// end ; if not weapon then
48451: LD_VAR 0 18
48455: NOT
48456: IFFALSE 48516
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48458: LD_ADDR_VAR 0 5
48462: PUSH
48463: LD_VAR 0 5
48467: PUSH
48468: LD_INT 11
48470: PUSH
48471: LD_INT 30
48473: PUSH
48474: LD_INT 49
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: DIFF
48482: ST_TO_ADDR
// if not list then
48483: LD_VAR 0 5
48487: NOT
48488: IFFALSE 48492
// exit ;
48490: GO 48634
// weapon := list [ rand ( 1 , list ) ] ;
48492: LD_ADDR_VAR 0 18
48496: PUSH
48497: LD_VAR 0 5
48501: PUSH
48502: LD_INT 1
48504: PPUSH
48505: LD_VAR 0 5
48509: PPUSH
48510: CALL_OW 12
48514: ARRAY
48515: ST_TO_ADDR
// end ; if weapon then
48516: LD_VAR 0 18
48520: IFFALSE 48634
// begin tmp := CostOfWeapon ( weapon ) ;
48522: LD_ADDR_VAR 0 14
48526: PUSH
48527: LD_VAR 0 18
48531: PPUSH
48532: CALL_OW 451
48536: ST_TO_ADDR
// j := GetBase ( tower ) ;
48537: LD_ADDR_VAR 0 9
48541: PUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: CALL_OW 274
48551: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48552: LD_VAR 0 9
48556: PPUSH
48557: LD_INT 1
48559: PPUSH
48560: CALL_OW 275
48564: PUSH
48565: LD_VAR 0 14
48569: PUSH
48570: LD_INT 1
48572: ARRAY
48573: GREATEREQUAL
48574: PUSH
48575: LD_VAR 0 9
48579: PPUSH
48580: LD_INT 2
48582: PPUSH
48583: CALL_OW 275
48587: PUSH
48588: LD_VAR 0 14
48592: PUSH
48593: LD_INT 2
48595: ARRAY
48596: GREATEREQUAL
48597: AND
48598: PUSH
48599: LD_VAR 0 9
48603: PPUSH
48604: LD_INT 3
48606: PPUSH
48607: CALL_OW 275
48611: PUSH
48612: LD_VAR 0 14
48616: PUSH
48617: LD_INT 3
48619: ARRAY
48620: GREATEREQUAL
48621: AND
48622: IFFALSE 48634
// result := weapon ;
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: LD_VAR 0 18
48633: ST_TO_ADDR
// end ; end ;
48634: LD_VAR 0 3
48638: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48639: LD_INT 0
48641: PPUSH
48642: PPUSH
// result := true ;
48643: LD_ADDR_VAR 0 3
48647: PUSH
48648: LD_INT 1
48650: ST_TO_ADDR
// if array1 = array2 then
48651: LD_VAR 0 1
48655: PUSH
48656: LD_VAR 0 2
48660: EQUAL
48661: IFFALSE 48721
// begin for i = 1 to array1 do
48663: LD_ADDR_VAR 0 4
48667: PUSH
48668: DOUBLE
48669: LD_INT 1
48671: DEC
48672: ST_TO_ADDR
48673: LD_VAR 0 1
48677: PUSH
48678: FOR_TO
48679: IFFALSE 48717
// if array1 [ i ] <> array2 [ i ] then
48681: LD_VAR 0 1
48685: PUSH
48686: LD_VAR 0 4
48690: ARRAY
48691: PUSH
48692: LD_VAR 0 2
48696: PUSH
48697: LD_VAR 0 4
48701: ARRAY
48702: NONEQUAL
48703: IFFALSE 48715
// begin result := false ;
48705: LD_ADDR_VAR 0 3
48709: PUSH
48710: LD_INT 0
48712: ST_TO_ADDR
// break ;
48713: GO 48717
// end ;
48715: GO 48678
48717: POP
48718: POP
// end else
48719: GO 48729
// result := false ;
48721: LD_ADDR_VAR 0 3
48725: PUSH
48726: LD_INT 0
48728: ST_TO_ADDR
// end ;
48729: LD_VAR 0 3
48733: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48734: LD_INT 0
48736: PPUSH
48737: PPUSH
// if not array1 or not array2 then
48738: LD_VAR 0 1
48742: NOT
48743: PUSH
48744: LD_VAR 0 2
48748: NOT
48749: OR
48750: IFFALSE 48754
// exit ;
48752: GO 48818
// result := true ;
48754: LD_ADDR_VAR 0 3
48758: PUSH
48759: LD_INT 1
48761: ST_TO_ADDR
// for i = 1 to array1 do
48762: LD_ADDR_VAR 0 4
48766: PUSH
48767: DOUBLE
48768: LD_INT 1
48770: DEC
48771: ST_TO_ADDR
48772: LD_VAR 0 1
48776: PUSH
48777: FOR_TO
48778: IFFALSE 48816
// if array1 [ i ] <> array2 [ i ] then
48780: LD_VAR 0 1
48784: PUSH
48785: LD_VAR 0 4
48789: ARRAY
48790: PUSH
48791: LD_VAR 0 2
48795: PUSH
48796: LD_VAR 0 4
48800: ARRAY
48801: NONEQUAL
48802: IFFALSE 48814
// begin result := false ;
48804: LD_ADDR_VAR 0 3
48808: PUSH
48809: LD_INT 0
48811: ST_TO_ADDR
// break ;
48812: GO 48816
// end ;
48814: GO 48777
48816: POP
48817: POP
// end ;
48818: LD_VAR 0 3
48822: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48823: LD_INT 0
48825: PPUSH
48826: PPUSH
48827: PPUSH
// pom := GetBase ( fac ) ;
48828: LD_ADDR_VAR 0 5
48832: PUSH
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 274
48842: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48843: LD_ADDR_VAR 0 4
48847: PUSH
48848: LD_VAR 0 2
48852: PUSH
48853: LD_INT 1
48855: ARRAY
48856: PPUSH
48857: LD_VAR 0 2
48861: PUSH
48862: LD_INT 2
48864: ARRAY
48865: PPUSH
48866: LD_VAR 0 2
48870: PUSH
48871: LD_INT 3
48873: ARRAY
48874: PPUSH
48875: LD_VAR 0 2
48879: PUSH
48880: LD_INT 4
48882: ARRAY
48883: PPUSH
48884: CALL_OW 449
48888: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48889: LD_ADDR_VAR 0 3
48893: PUSH
48894: LD_VAR 0 5
48898: PPUSH
48899: LD_INT 1
48901: PPUSH
48902: CALL_OW 275
48906: PUSH
48907: LD_VAR 0 4
48911: PUSH
48912: LD_INT 1
48914: ARRAY
48915: GREATEREQUAL
48916: PUSH
48917: LD_VAR 0 5
48921: PPUSH
48922: LD_INT 2
48924: PPUSH
48925: CALL_OW 275
48929: PUSH
48930: LD_VAR 0 4
48934: PUSH
48935: LD_INT 2
48937: ARRAY
48938: GREATEREQUAL
48939: AND
48940: PUSH
48941: LD_VAR 0 5
48945: PPUSH
48946: LD_INT 3
48948: PPUSH
48949: CALL_OW 275
48953: PUSH
48954: LD_VAR 0 4
48958: PUSH
48959: LD_INT 3
48961: ARRAY
48962: GREATEREQUAL
48963: AND
48964: ST_TO_ADDR
// end ;
48965: LD_VAR 0 3
48969: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48970: LD_INT 0
48972: PPUSH
48973: PPUSH
48974: PPUSH
48975: PPUSH
// pom := GetBase ( building ) ;
48976: LD_ADDR_VAR 0 3
48980: PUSH
48981: LD_VAR 0 1
48985: PPUSH
48986: CALL_OW 274
48990: ST_TO_ADDR
// if not pom then
48991: LD_VAR 0 3
48995: NOT
48996: IFFALSE 49000
// exit ;
48998: GO 49170
// btype := GetBType ( building ) ;
49000: LD_ADDR_VAR 0 5
49004: PUSH
49005: LD_VAR 0 1
49009: PPUSH
49010: CALL_OW 266
49014: ST_TO_ADDR
// if btype = b_armoury then
49015: LD_VAR 0 5
49019: PUSH
49020: LD_INT 4
49022: EQUAL
49023: IFFALSE 49033
// btype := b_barracks ;
49025: LD_ADDR_VAR 0 5
49029: PUSH
49030: LD_INT 5
49032: ST_TO_ADDR
// if btype = b_depot then
49033: LD_VAR 0 5
49037: PUSH
49038: LD_INT 0
49040: EQUAL
49041: IFFALSE 49051
// btype := b_warehouse ;
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_INT 1
49050: ST_TO_ADDR
// if btype = b_workshop then
49051: LD_VAR 0 5
49055: PUSH
49056: LD_INT 2
49058: EQUAL
49059: IFFALSE 49069
// btype := b_factory ;
49061: LD_ADDR_VAR 0 5
49065: PUSH
49066: LD_INT 3
49068: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49069: LD_ADDR_VAR 0 4
49073: PUSH
49074: LD_VAR 0 5
49078: PPUSH
49079: LD_VAR 0 1
49083: PPUSH
49084: CALL_OW 248
49088: PPUSH
49089: CALL_OW 450
49093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49094: LD_ADDR_VAR 0 2
49098: PUSH
49099: LD_VAR 0 3
49103: PPUSH
49104: LD_INT 1
49106: PPUSH
49107: CALL_OW 275
49111: PUSH
49112: LD_VAR 0 4
49116: PUSH
49117: LD_INT 1
49119: ARRAY
49120: GREATEREQUAL
49121: PUSH
49122: LD_VAR 0 3
49126: PPUSH
49127: LD_INT 2
49129: PPUSH
49130: CALL_OW 275
49134: PUSH
49135: LD_VAR 0 4
49139: PUSH
49140: LD_INT 2
49142: ARRAY
49143: GREATEREQUAL
49144: AND
49145: PUSH
49146: LD_VAR 0 3
49150: PPUSH
49151: LD_INT 3
49153: PPUSH
49154: CALL_OW 275
49158: PUSH
49159: LD_VAR 0 4
49163: PUSH
49164: LD_INT 3
49166: ARRAY
49167: GREATEREQUAL
49168: AND
49169: ST_TO_ADDR
// end ;
49170: LD_VAR 0 2
49174: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49175: LD_INT 0
49177: PPUSH
49178: PPUSH
49179: PPUSH
// pom := GetBase ( building ) ;
49180: LD_ADDR_VAR 0 4
49184: PUSH
49185: LD_VAR 0 1
49189: PPUSH
49190: CALL_OW 274
49194: ST_TO_ADDR
// if not pom then
49195: LD_VAR 0 4
49199: NOT
49200: IFFALSE 49204
// exit ;
49202: GO 49305
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49204: LD_ADDR_VAR 0 5
49208: PUSH
49209: LD_VAR 0 2
49213: PPUSH
49214: LD_VAR 0 1
49218: PPUSH
49219: CALL_OW 248
49223: PPUSH
49224: CALL_OW 450
49228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49229: LD_ADDR_VAR 0 3
49233: PUSH
49234: LD_VAR 0 4
49238: PPUSH
49239: LD_INT 1
49241: PPUSH
49242: CALL_OW 275
49246: PUSH
49247: LD_VAR 0 5
49251: PUSH
49252: LD_INT 1
49254: ARRAY
49255: GREATEREQUAL
49256: PUSH
49257: LD_VAR 0 4
49261: PPUSH
49262: LD_INT 2
49264: PPUSH
49265: CALL_OW 275
49269: PUSH
49270: LD_VAR 0 5
49274: PUSH
49275: LD_INT 2
49277: ARRAY
49278: GREATEREQUAL
49279: AND
49280: PUSH
49281: LD_VAR 0 4
49285: PPUSH
49286: LD_INT 3
49288: PPUSH
49289: CALL_OW 275
49293: PUSH
49294: LD_VAR 0 5
49298: PUSH
49299: LD_INT 3
49301: ARRAY
49302: GREATEREQUAL
49303: AND
49304: ST_TO_ADDR
// end ;
49305: LD_VAR 0 3
49309: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49310: LD_INT 0
49312: PPUSH
49313: PPUSH
49314: PPUSH
49315: PPUSH
49316: PPUSH
49317: PPUSH
49318: PPUSH
49319: PPUSH
49320: PPUSH
49321: PPUSH
49322: PPUSH
// result := false ;
49323: LD_ADDR_VAR 0 8
49327: PUSH
49328: LD_INT 0
49330: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49331: LD_VAR 0 5
49335: NOT
49336: PUSH
49337: LD_VAR 0 1
49341: NOT
49342: OR
49343: PUSH
49344: LD_VAR 0 2
49348: NOT
49349: OR
49350: PUSH
49351: LD_VAR 0 3
49355: NOT
49356: OR
49357: IFFALSE 49361
// exit ;
49359: GO 50175
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49361: LD_ADDR_VAR 0 14
49365: PUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: LD_VAR 0 2
49375: PPUSH
49376: LD_VAR 0 3
49380: PPUSH
49381: LD_VAR 0 4
49385: PPUSH
49386: LD_VAR 0 5
49390: PUSH
49391: LD_INT 1
49393: ARRAY
49394: PPUSH
49395: CALL_OW 248
49399: PPUSH
49400: LD_INT 0
49402: PPUSH
49403: CALL 51412 0 6
49407: ST_TO_ADDR
// if not hexes then
49408: LD_VAR 0 14
49412: NOT
49413: IFFALSE 49417
// exit ;
49415: GO 50175
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49417: LD_ADDR_VAR 0 17
49421: PUSH
49422: LD_VAR 0 5
49426: PPUSH
49427: LD_INT 22
49429: PUSH
49430: LD_VAR 0 13
49434: PPUSH
49435: CALL_OW 255
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 30
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 30
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PPUSH
49476: CALL_OW 72
49480: ST_TO_ADDR
// for i = 1 to hexes do
49481: LD_ADDR_VAR 0 9
49485: PUSH
49486: DOUBLE
49487: LD_INT 1
49489: DEC
49490: ST_TO_ADDR
49491: LD_VAR 0 14
49495: PUSH
49496: FOR_TO
49497: IFFALSE 50173
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49499: LD_ADDR_VAR 0 13
49503: PUSH
49504: LD_VAR 0 14
49508: PUSH
49509: LD_VAR 0 9
49513: ARRAY
49514: PUSH
49515: LD_INT 1
49517: ARRAY
49518: PPUSH
49519: LD_VAR 0 14
49523: PUSH
49524: LD_VAR 0 9
49528: ARRAY
49529: PUSH
49530: LD_INT 2
49532: ARRAY
49533: PPUSH
49534: CALL_OW 428
49538: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49539: LD_VAR 0 14
49543: PUSH
49544: LD_VAR 0 9
49548: ARRAY
49549: PUSH
49550: LD_INT 1
49552: ARRAY
49553: PPUSH
49554: LD_VAR 0 14
49558: PUSH
49559: LD_VAR 0 9
49563: ARRAY
49564: PUSH
49565: LD_INT 2
49567: ARRAY
49568: PPUSH
49569: CALL_OW 351
49573: PUSH
49574: LD_VAR 0 14
49578: PUSH
49579: LD_VAR 0 9
49583: ARRAY
49584: PUSH
49585: LD_INT 1
49587: ARRAY
49588: PPUSH
49589: LD_VAR 0 14
49593: PUSH
49594: LD_VAR 0 9
49598: ARRAY
49599: PUSH
49600: LD_INT 2
49602: ARRAY
49603: PPUSH
49604: CALL_OW 488
49608: NOT
49609: OR
49610: PUSH
49611: LD_VAR 0 13
49615: PPUSH
49616: CALL_OW 247
49620: PUSH
49621: LD_INT 3
49623: EQUAL
49624: OR
49625: IFFALSE 49631
// exit ;
49627: POP
49628: POP
49629: GO 50175
// if not tmp then
49631: LD_VAR 0 13
49635: NOT
49636: IFFALSE 49640
// continue ;
49638: GO 49496
// result := true ;
49640: LD_ADDR_VAR 0 8
49644: PUSH
49645: LD_INT 1
49647: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49648: LD_VAR 0 6
49652: PUSH
49653: LD_VAR 0 13
49657: PPUSH
49658: CALL_OW 247
49662: PUSH
49663: LD_INT 2
49665: EQUAL
49666: AND
49667: PUSH
49668: LD_VAR 0 13
49672: PPUSH
49673: CALL_OW 263
49677: PUSH
49678: LD_INT 1
49680: EQUAL
49681: AND
49682: IFFALSE 49846
// begin if IsDrivenBy ( tmp ) then
49684: LD_VAR 0 13
49688: PPUSH
49689: CALL_OW 311
49693: IFFALSE 49697
// continue ;
49695: GO 49496
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49697: LD_VAR 0 6
49701: PPUSH
49702: LD_INT 3
49704: PUSH
49705: LD_INT 60
49707: PUSH
49708: EMPTY
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: LD_INT 55
49720: PUSH
49721: EMPTY
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PPUSH
49732: CALL_OW 72
49736: IFFALSE 49844
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49738: LD_ADDR_VAR 0 18
49742: PUSH
49743: LD_VAR 0 6
49747: PPUSH
49748: LD_INT 3
49750: PUSH
49751: LD_INT 60
49753: PUSH
49754: EMPTY
49755: LIST
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 55
49766: PUSH
49767: EMPTY
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PPUSH
49778: CALL_OW 72
49782: PUSH
49783: LD_INT 1
49785: ARRAY
49786: ST_TO_ADDR
// if IsInUnit ( driver ) then
49787: LD_VAR 0 18
49791: PPUSH
49792: CALL_OW 310
49796: IFFALSE 49807
// ComExit ( driver ) ;
49798: LD_VAR 0 18
49802: PPUSH
49803: CALL 75117 0 1
// AddComEnterUnit ( driver , tmp ) ;
49807: LD_VAR 0 18
49811: PPUSH
49812: LD_VAR 0 13
49816: PPUSH
49817: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49821: LD_VAR 0 18
49825: PPUSH
49826: LD_VAR 0 7
49830: PPUSH
49831: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49835: LD_VAR 0 18
49839: PPUSH
49840: CALL_OW 181
// end ; continue ;
49844: GO 49496
// end ; if not cleaners or not tmp in cleaners then
49846: LD_VAR 0 6
49850: NOT
49851: PUSH
49852: LD_VAR 0 13
49856: PUSH
49857: LD_VAR 0 6
49861: IN
49862: NOT
49863: OR
49864: IFFALSE 50171
// begin if dep then
49866: LD_VAR 0 17
49870: IFFALSE 50006
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49872: LD_ADDR_VAR 0 16
49876: PUSH
49877: LD_VAR 0 17
49881: PUSH
49882: LD_INT 1
49884: ARRAY
49885: PPUSH
49886: CALL_OW 250
49890: PPUSH
49891: LD_VAR 0 17
49895: PUSH
49896: LD_INT 1
49898: ARRAY
49899: PPUSH
49900: CALL_OW 254
49904: PPUSH
49905: LD_INT 5
49907: PPUSH
49908: CALL_OW 272
49912: PUSH
49913: LD_VAR 0 17
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: PPUSH
49922: CALL_OW 251
49926: PPUSH
49927: LD_VAR 0 17
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: PPUSH
49936: CALL_OW 254
49940: PPUSH
49941: LD_INT 5
49943: PPUSH
49944: CALL_OW 273
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49953: LD_VAR 0 16
49957: PUSH
49958: LD_INT 1
49960: ARRAY
49961: PPUSH
49962: LD_VAR 0 16
49966: PUSH
49967: LD_INT 2
49969: ARRAY
49970: PPUSH
49971: CALL_OW 488
49975: IFFALSE 50006
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49977: LD_VAR 0 13
49981: PPUSH
49982: LD_VAR 0 16
49986: PUSH
49987: LD_INT 1
49989: ARRAY
49990: PPUSH
49991: LD_VAR 0 16
49995: PUSH
49996: LD_INT 2
49998: ARRAY
49999: PPUSH
50000: CALL_OW 111
// continue ;
50004: GO 49496
// end ; end ; r := GetDir ( tmp ) ;
50006: LD_ADDR_VAR 0 15
50010: PUSH
50011: LD_VAR 0 13
50015: PPUSH
50016: CALL_OW 254
50020: ST_TO_ADDR
// if r = 5 then
50021: LD_VAR 0 15
50025: PUSH
50026: LD_INT 5
50028: EQUAL
50029: IFFALSE 50039
// r := 0 ;
50031: LD_ADDR_VAR 0 15
50035: PUSH
50036: LD_INT 0
50038: ST_TO_ADDR
// for j = r to 5 do
50039: LD_ADDR_VAR 0 10
50043: PUSH
50044: DOUBLE
50045: LD_VAR 0 15
50049: DEC
50050: ST_TO_ADDR
50051: LD_INT 5
50053: PUSH
50054: FOR_TO
50055: IFFALSE 50169
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50057: LD_ADDR_VAR 0 11
50061: PUSH
50062: LD_VAR 0 13
50066: PPUSH
50067: CALL_OW 250
50071: PPUSH
50072: LD_VAR 0 10
50076: PPUSH
50077: LD_INT 2
50079: PPUSH
50080: CALL_OW 272
50084: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50085: LD_ADDR_VAR 0 12
50089: PUSH
50090: LD_VAR 0 13
50094: PPUSH
50095: CALL_OW 251
50099: PPUSH
50100: LD_VAR 0 10
50104: PPUSH
50105: LD_INT 2
50107: PPUSH
50108: CALL_OW 273
50112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50113: LD_VAR 0 11
50117: PPUSH
50118: LD_VAR 0 12
50122: PPUSH
50123: CALL_OW 488
50127: PUSH
50128: LD_VAR 0 11
50132: PPUSH
50133: LD_VAR 0 12
50137: PPUSH
50138: CALL_OW 428
50142: NOT
50143: AND
50144: IFFALSE 50167
// begin ComMoveXY ( tmp , _x , _y ) ;
50146: LD_VAR 0 13
50150: PPUSH
50151: LD_VAR 0 11
50155: PPUSH
50156: LD_VAR 0 12
50160: PPUSH
50161: CALL_OW 111
// break ;
50165: GO 50169
// end ; end ;
50167: GO 50054
50169: POP
50170: POP
// end ; end ;
50171: GO 49496
50173: POP
50174: POP
// end ;
50175: LD_VAR 0 8
50179: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50180: LD_INT 0
50182: PPUSH
// result := true ;
50183: LD_ADDR_VAR 0 3
50187: PUSH
50188: LD_INT 1
50190: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50191: LD_VAR 0 2
50195: PUSH
50196: LD_INT 24
50198: DOUBLE
50199: EQUAL
50200: IFTRUE 50210
50202: LD_INT 33
50204: DOUBLE
50205: EQUAL
50206: IFTRUE 50210
50208: GO 50235
50210: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50211: LD_ADDR_VAR 0 3
50215: PUSH
50216: LD_INT 32
50218: PPUSH
50219: LD_VAR 0 1
50223: PPUSH
50224: CALL_OW 321
50228: PUSH
50229: LD_INT 2
50231: EQUAL
50232: ST_TO_ADDR
50233: GO 50555
50235: LD_INT 20
50237: DOUBLE
50238: EQUAL
50239: IFTRUE 50243
50241: GO 50268
50243: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50244: LD_ADDR_VAR 0 3
50248: PUSH
50249: LD_INT 6
50251: PPUSH
50252: LD_VAR 0 1
50256: PPUSH
50257: CALL_OW 321
50261: PUSH
50262: LD_INT 2
50264: EQUAL
50265: ST_TO_ADDR
50266: GO 50555
50268: LD_INT 22
50270: DOUBLE
50271: EQUAL
50272: IFTRUE 50282
50274: LD_INT 36
50276: DOUBLE
50277: EQUAL
50278: IFTRUE 50282
50280: GO 50307
50282: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50283: LD_ADDR_VAR 0 3
50287: PUSH
50288: LD_INT 15
50290: PPUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: CALL_OW 321
50300: PUSH
50301: LD_INT 2
50303: EQUAL
50304: ST_TO_ADDR
50305: GO 50555
50307: LD_INT 30
50309: DOUBLE
50310: EQUAL
50311: IFTRUE 50315
50313: GO 50340
50315: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50316: LD_ADDR_VAR 0 3
50320: PUSH
50321: LD_INT 20
50323: PPUSH
50324: LD_VAR 0 1
50328: PPUSH
50329: CALL_OW 321
50333: PUSH
50334: LD_INT 2
50336: EQUAL
50337: ST_TO_ADDR
50338: GO 50555
50340: LD_INT 28
50342: DOUBLE
50343: EQUAL
50344: IFTRUE 50354
50346: LD_INT 21
50348: DOUBLE
50349: EQUAL
50350: IFTRUE 50354
50352: GO 50379
50354: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50355: LD_ADDR_VAR 0 3
50359: PUSH
50360: LD_INT 21
50362: PPUSH
50363: LD_VAR 0 1
50367: PPUSH
50368: CALL_OW 321
50372: PUSH
50373: LD_INT 2
50375: EQUAL
50376: ST_TO_ADDR
50377: GO 50555
50379: LD_INT 16
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50414
50387: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50388: LD_ADDR_VAR 0 3
50392: PUSH
50393: LD_EXP 136
50397: PPUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: CALL_OW 321
50407: PUSH
50408: LD_INT 2
50410: EQUAL
50411: ST_TO_ADDR
50412: GO 50555
50414: LD_INT 19
50416: DOUBLE
50417: EQUAL
50418: IFTRUE 50428
50420: LD_INT 23
50422: DOUBLE
50423: EQUAL
50424: IFTRUE 50428
50426: GO 50455
50428: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50429: LD_ADDR_VAR 0 3
50433: PUSH
50434: LD_EXP 135
50438: PPUSH
50439: LD_VAR 0 1
50443: PPUSH
50444: CALL_OW 321
50448: PUSH
50449: LD_INT 2
50451: EQUAL
50452: ST_TO_ADDR
50453: GO 50555
50455: LD_INT 17
50457: DOUBLE
50458: EQUAL
50459: IFTRUE 50463
50461: GO 50488
50463: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50464: LD_ADDR_VAR 0 3
50468: PUSH
50469: LD_INT 39
50471: PPUSH
50472: LD_VAR 0 1
50476: PPUSH
50477: CALL_OW 321
50481: PUSH
50482: LD_INT 2
50484: EQUAL
50485: ST_TO_ADDR
50486: GO 50555
50488: LD_INT 18
50490: DOUBLE
50491: EQUAL
50492: IFTRUE 50496
50494: GO 50521
50496: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50497: LD_ADDR_VAR 0 3
50501: PUSH
50502: LD_INT 40
50504: PPUSH
50505: LD_VAR 0 1
50509: PPUSH
50510: CALL_OW 321
50514: PUSH
50515: LD_INT 2
50517: EQUAL
50518: ST_TO_ADDR
50519: GO 50555
50521: LD_INT 27
50523: DOUBLE
50524: EQUAL
50525: IFTRUE 50529
50527: GO 50554
50529: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50530: LD_ADDR_VAR 0 3
50534: PUSH
50535: LD_INT 35
50537: PPUSH
50538: LD_VAR 0 1
50542: PPUSH
50543: CALL_OW 321
50547: PUSH
50548: LD_INT 2
50550: EQUAL
50551: ST_TO_ADDR
50552: GO 50555
50554: POP
// end ;
50555: LD_VAR 0 3
50559: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50560: LD_INT 0
50562: PPUSH
50563: PPUSH
50564: PPUSH
50565: PPUSH
50566: PPUSH
50567: PPUSH
50568: PPUSH
50569: PPUSH
50570: PPUSH
50571: PPUSH
50572: PPUSH
// result := false ;
50573: LD_ADDR_VAR 0 6
50577: PUSH
50578: LD_INT 0
50580: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50581: LD_VAR 0 1
50585: NOT
50586: PUSH
50587: LD_VAR 0 1
50591: PPUSH
50592: CALL_OW 266
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: IN
50607: NOT
50608: OR
50609: PUSH
50610: LD_VAR 0 2
50614: NOT
50615: OR
50616: PUSH
50617: LD_VAR 0 5
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 3
50633: PUSH
50634: LD_INT 4
50636: PUSH
50637: LD_INT 5
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: IN
50648: NOT
50649: OR
50650: PUSH
50651: LD_VAR 0 3
50655: PPUSH
50656: LD_VAR 0 4
50660: PPUSH
50661: CALL_OW 488
50665: NOT
50666: OR
50667: IFFALSE 50671
// exit ;
50669: GO 51407
// side := GetSide ( depot ) ;
50671: LD_ADDR_VAR 0 9
50675: PUSH
50676: LD_VAR 0 1
50680: PPUSH
50681: CALL_OW 255
50685: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50686: LD_VAR 0 9
50690: PPUSH
50691: LD_VAR 0 2
50695: PPUSH
50696: CALL 50180 0 2
50700: NOT
50701: IFFALSE 50705
// exit ;
50703: GO 51407
// pom := GetBase ( depot ) ;
50705: LD_ADDR_VAR 0 10
50709: PUSH
50710: LD_VAR 0 1
50714: PPUSH
50715: CALL_OW 274
50719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50720: LD_ADDR_VAR 0 11
50724: PUSH
50725: LD_VAR 0 2
50729: PPUSH
50730: LD_VAR 0 1
50734: PPUSH
50735: CALL_OW 248
50739: PPUSH
50740: CALL_OW 450
50744: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50745: LD_VAR 0 10
50749: PPUSH
50750: LD_INT 1
50752: PPUSH
50753: CALL_OW 275
50757: PUSH
50758: LD_VAR 0 11
50762: PUSH
50763: LD_INT 1
50765: ARRAY
50766: GREATEREQUAL
50767: PUSH
50768: LD_VAR 0 10
50772: PPUSH
50773: LD_INT 2
50775: PPUSH
50776: CALL_OW 275
50780: PUSH
50781: LD_VAR 0 11
50785: PUSH
50786: LD_INT 2
50788: ARRAY
50789: GREATEREQUAL
50790: AND
50791: PUSH
50792: LD_VAR 0 10
50796: PPUSH
50797: LD_INT 3
50799: PPUSH
50800: CALL_OW 275
50804: PUSH
50805: LD_VAR 0 11
50809: PUSH
50810: LD_INT 3
50812: ARRAY
50813: GREATEREQUAL
50814: AND
50815: NOT
50816: IFFALSE 50820
// exit ;
50818: GO 51407
// if GetBType ( depot ) = b_depot then
50820: LD_VAR 0 1
50824: PPUSH
50825: CALL_OW 266
50829: PUSH
50830: LD_INT 0
50832: EQUAL
50833: IFFALSE 50845
// dist := 28 else
50835: LD_ADDR_VAR 0 14
50839: PUSH
50840: LD_INT 28
50842: ST_TO_ADDR
50843: GO 50853
// dist := 36 ;
50845: LD_ADDR_VAR 0 14
50849: PUSH
50850: LD_INT 36
50852: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50853: LD_VAR 0 1
50857: PPUSH
50858: LD_VAR 0 3
50862: PPUSH
50863: LD_VAR 0 4
50867: PPUSH
50868: CALL_OW 297
50872: PUSH
50873: LD_VAR 0 14
50877: GREATER
50878: IFFALSE 50882
// exit ;
50880: GO 51407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50882: LD_ADDR_VAR 0 12
50886: PUSH
50887: LD_VAR 0 2
50891: PPUSH
50892: LD_VAR 0 3
50896: PPUSH
50897: LD_VAR 0 4
50901: PPUSH
50902: LD_VAR 0 5
50906: PPUSH
50907: LD_VAR 0 1
50911: PPUSH
50912: CALL_OW 248
50916: PPUSH
50917: LD_INT 0
50919: PPUSH
50920: CALL 51412 0 6
50924: ST_TO_ADDR
// if not hexes then
50925: LD_VAR 0 12
50929: NOT
50930: IFFALSE 50934
// exit ;
50932: GO 51407
// hex := GetHexInfo ( x , y ) ;
50934: LD_ADDR_VAR 0 15
50938: PUSH
50939: LD_VAR 0 3
50943: PPUSH
50944: LD_VAR 0 4
50948: PPUSH
50949: CALL_OW 546
50953: ST_TO_ADDR
// if hex [ 1 ] then
50954: LD_VAR 0 15
50958: PUSH
50959: LD_INT 1
50961: ARRAY
50962: IFFALSE 50966
// exit ;
50964: GO 51407
// height := hex [ 2 ] ;
50966: LD_ADDR_VAR 0 13
50970: PUSH
50971: LD_VAR 0 15
50975: PUSH
50976: LD_INT 2
50978: ARRAY
50979: ST_TO_ADDR
// for i = 1 to hexes do
50980: LD_ADDR_VAR 0 7
50984: PUSH
50985: DOUBLE
50986: LD_INT 1
50988: DEC
50989: ST_TO_ADDR
50990: LD_VAR 0 12
50994: PUSH
50995: FOR_TO
50996: IFFALSE 51326
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50998: LD_VAR 0 12
51002: PUSH
51003: LD_VAR 0 7
51007: ARRAY
51008: PUSH
51009: LD_INT 1
51011: ARRAY
51012: PPUSH
51013: LD_VAR 0 12
51017: PUSH
51018: LD_VAR 0 7
51022: ARRAY
51023: PUSH
51024: LD_INT 2
51026: ARRAY
51027: PPUSH
51028: CALL_OW 488
51032: NOT
51033: PUSH
51034: LD_VAR 0 12
51038: PUSH
51039: LD_VAR 0 7
51043: ARRAY
51044: PUSH
51045: LD_INT 1
51047: ARRAY
51048: PPUSH
51049: LD_VAR 0 12
51053: PUSH
51054: LD_VAR 0 7
51058: ARRAY
51059: PUSH
51060: LD_INT 2
51062: ARRAY
51063: PPUSH
51064: CALL_OW 428
51068: PUSH
51069: LD_INT 0
51071: GREATER
51072: OR
51073: PUSH
51074: LD_VAR 0 12
51078: PUSH
51079: LD_VAR 0 7
51083: ARRAY
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PPUSH
51089: LD_VAR 0 12
51093: PUSH
51094: LD_VAR 0 7
51098: ARRAY
51099: PUSH
51100: LD_INT 2
51102: ARRAY
51103: PPUSH
51104: CALL_OW 351
51108: OR
51109: IFFALSE 51115
// exit ;
51111: POP
51112: POP
51113: GO 51407
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51115: LD_ADDR_VAR 0 8
51119: PUSH
51120: LD_VAR 0 12
51124: PUSH
51125: LD_VAR 0 7
51129: ARRAY
51130: PUSH
51131: LD_INT 1
51133: ARRAY
51134: PPUSH
51135: LD_VAR 0 12
51139: PUSH
51140: LD_VAR 0 7
51144: ARRAY
51145: PUSH
51146: LD_INT 2
51148: ARRAY
51149: PPUSH
51150: CALL_OW 546
51154: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51155: LD_VAR 0 8
51159: PUSH
51160: LD_INT 1
51162: ARRAY
51163: PUSH
51164: LD_VAR 0 8
51168: PUSH
51169: LD_INT 2
51171: ARRAY
51172: PUSH
51173: LD_VAR 0 13
51177: PUSH
51178: LD_INT 2
51180: PLUS
51181: GREATER
51182: OR
51183: PUSH
51184: LD_VAR 0 8
51188: PUSH
51189: LD_INT 2
51191: ARRAY
51192: PUSH
51193: LD_VAR 0 13
51197: PUSH
51198: LD_INT 2
51200: MINUS
51201: LESS
51202: OR
51203: PUSH
51204: LD_VAR 0 8
51208: PUSH
51209: LD_INT 3
51211: ARRAY
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 8
51218: PUSH
51219: LD_INT 9
51221: PUSH
51222: LD_INT 10
51224: PUSH
51225: LD_INT 11
51227: PUSH
51228: LD_INT 12
51230: PUSH
51231: LD_INT 13
51233: PUSH
51234: LD_INT 16
51236: PUSH
51237: LD_INT 17
51239: PUSH
51240: LD_INT 18
51242: PUSH
51243: LD_INT 19
51245: PUSH
51246: LD_INT 20
51248: PUSH
51249: LD_INT 21
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: IN
51267: NOT
51268: OR
51269: PUSH
51270: LD_VAR 0 8
51274: PUSH
51275: LD_INT 5
51277: ARRAY
51278: NOT
51279: OR
51280: PUSH
51281: LD_VAR 0 8
51285: PUSH
51286: LD_INT 6
51288: ARRAY
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 7
51298: PUSH
51299: LD_INT 9
51301: PUSH
51302: LD_INT 10
51304: PUSH
51305: LD_INT 11
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: IN
51316: NOT
51317: OR
51318: IFFALSE 51324
// exit ;
51320: POP
51321: POP
51322: GO 51407
// end ;
51324: GO 50995
51326: POP
51327: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51328: LD_VAR 0 9
51332: PPUSH
51333: LD_VAR 0 3
51337: PPUSH
51338: LD_VAR 0 4
51342: PPUSH
51343: LD_INT 20
51345: PPUSH
51346: CALL 43353 0 4
51350: PUSH
51351: LD_INT 4
51353: ARRAY
51354: IFFALSE 51358
// exit ;
51356: GO 51407
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51358: LD_VAR 0 2
51362: PUSH
51363: LD_INT 29
51365: PUSH
51366: LD_INT 30
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: IN
51373: PUSH
51374: LD_VAR 0 3
51378: PPUSH
51379: LD_VAR 0 4
51383: PPUSH
51384: LD_VAR 0 9
51388: PPUSH
51389: CALL_OW 440
51393: NOT
51394: AND
51395: IFFALSE 51399
// exit ;
51397: GO 51407
// result := true ;
51399: LD_ADDR_VAR 0 6
51403: PUSH
51404: LD_INT 1
51406: ST_TO_ADDR
// end ;
51407: LD_VAR 0 6
51411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51412: LD_INT 0
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
51429: PPUSH
51430: PPUSH
51431: PPUSH
51432: PPUSH
51433: PPUSH
51434: PPUSH
51435: PPUSH
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
51451: PPUSH
51452: PPUSH
51453: PPUSH
51454: PPUSH
51455: PPUSH
51456: PPUSH
51457: PPUSH
51458: PPUSH
51459: PPUSH
51460: PPUSH
51461: PPUSH
51462: PPUSH
51463: PPUSH
51464: PPUSH
51465: PPUSH
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
// result = [ ] ;
51472: LD_ADDR_VAR 0 7
51476: PUSH
51477: EMPTY
51478: ST_TO_ADDR
// temp_list = [ ] ;
51479: LD_ADDR_VAR 0 9
51483: PUSH
51484: EMPTY
51485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51486: LD_VAR 0 4
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: LD_INT 4
51505: PUSH
51506: LD_INT 5
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: IN
51517: NOT
51518: PUSH
51519: LD_VAR 0 1
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: IN
51534: PUSH
51535: LD_VAR 0 5
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: IN
51554: NOT
51555: AND
51556: OR
51557: IFFALSE 51561
// exit ;
51559: GO 69952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51561: LD_VAR 0 1
51565: PUSH
51566: LD_INT 6
51568: PUSH
51569: LD_INT 7
51571: PUSH
51572: LD_INT 8
51574: PUSH
51575: LD_INT 13
51577: PUSH
51578: LD_INT 12
51580: PUSH
51581: LD_INT 15
51583: PUSH
51584: LD_INT 11
51586: PUSH
51587: LD_INT 14
51589: PUSH
51590: LD_INT 10
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: IN
51604: IFFALSE 51614
// btype = b_lab ;
51606: LD_ADDR_VAR 0 1
51610: PUSH
51611: LD_INT 6
51613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51614: LD_VAR 0 6
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: IN
51633: NOT
51634: PUSH
51635: LD_VAR 0 1
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: LD_INT 6
51654: PUSH
51655: LD_INT 36
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 5
51663: PUSH
51664: LD_INT 31
51666: PUSH
51667: LD_INT 32
51669: PUSH
51670: LD_INT 33
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: IN
51686: NOT
51687: PUSH
51688: LD_VAR 0 6
51692: PUSH
51693: LD_INT 1
51695: EQUAL
51696: AND
51697: OR
51698: PUSH
51699: LD_VAR 0 1
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: IN
51714: NOT
51715: PUSH
51716: LD_VAR 0 6
51720: PUSH
51721: LD_INT 2
51723: EQUAL
51724: AND
51725: OR
51726: IFFALSE 51736
// mode = 0 ;
51728: LD_ADDR_VAR 0 6
51732: PUSH
51733: LD_INT 0
51735: ST_TO_ADDR
// case mode of 0 :
51736: LD_VAR 0 6
51740: PUSH
51741: LD_INT 0
51743: DOUBLE
51744: EQUAL
51745: IFTRUE 51749
51747: GO 63202
51749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51750: LD_ADDR_VAR 0 11
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51943: LD_ADDR_VAR 0 12
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52139: LD_ADDR_VAR 0 13
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52338: LD_ADDR_VAR 0 14
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52534: LD_ADDR_VAR 0 15
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52727: LD_ADDR_VAR 0 16
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52920: LD_ADDR_VAR 0 17
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53150: LD_ADDR_VAR 0 18
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53380: LD_ADDR_VAR 0 19
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53610: LD_ADDR_VAR 0 20
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53840: LD_ADDR_VAR 0 21
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54070: LD_ADDR_VAR 0 22
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54300: LD_ADDR_VAR 0 23
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54580: LD_ADDR_VAR 0 24
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54856: LD_ADDR_VAR 0 25
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 3
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55130: LD_ADDR_VAR 0 26
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55406: LD_ADDR_VAR 0 27
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55686: LD_ADDR_VAR 0 28
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55968: LD_ADDR_VAR 0 29
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56247: LD_ADDR_VAR 0 30
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: LD_INT 3
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 3
56490: NEG
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56525: LD_ADDR_VAR 0 31
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56803: LD_ADDR_VAR 0 32
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57081: LD_ADDR_VAR 0 33
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57360: LD_ADDR_VAR 0 34
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57640: LD_ADDR_VAR 0 35
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57752: LD_ADDR_VAR 0 36
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57864: LD_ADDR_VAR 0 37
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57976: LD_ADDR_VAR 0 38
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58088: LD_ADDR_VAR 0 39
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58200: LD_ADDR_VAR 0 40
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58312: LD_ADDR_VAR 0 41
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58662: LD_ADDR_VAR 0 42
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: LD_INT 3
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 3
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59012: LD_ADDR_VAR 0 43
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59360: LD_ADDR_VAR 0 44
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 3
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59710: LD_ADDR_VAR 0 45
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: LD_INT 3
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 3
60019: NEG
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60060: LD_ADDR_VAR 0 46
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60408: LD_ADDR_VAR 0 47
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60559: LD_ADDR_VAR 0 48
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60706: LD_ADDR_VAR 0 49
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60850: LD_ADDR_VAR 0 50
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60994: LD_ADDR_VAR 0 51
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61141: LD_ADDR_VAR 0 52
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61292: LD_ADDR_VAR 0 53
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61522: LD_ADDR_VAR 0 54
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61752: LD_ADDR_VAR 0 55
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61982: LD_ADDR_VAR 0 56
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 2
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62212: LD_ADDR_VAR 0 57
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 2
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62442: LD_ADDR_VAR 0 58
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62672: LD_ADDR_VAR 0 59
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62760: LD_ADDR_VAR 0 60
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62848: LD_ADDR_VAR 0 61
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62936: LD_ADDR_VAR 0 62
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63024: LD_ADDR_VAR 0 63
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63112: LD_ADDR_VAR 0 64
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: ST_TO_ADDR
// end ; 1 :
63200: GO 69097
63202: LD_INT 1
63204: DOUBLE
63205: EQUAL
63206: IFTRUE 63210
63208: GO 65833
63210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63211: LD_ADDR_VAR 0 11
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63255: LD_ADDR_VAR 0 12
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 3
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63296: LD_ADDR_VAR 0 13
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 3
63313: PUSH
63314: LD_INT 3
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 3
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63336: LD_ADDR_VAR 0 14
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 3
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63377: LD_ADDR_VAR 0 15
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 3
63395: NEG
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63421: LD_ADDR_VAR 0 16
63425: PUSH
63426: LD_INT 2
63428: NEG
63429: PUSH
63430: LD_INT 3
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: LD_INT 3
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: LIST
63466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63467: LD_ADDR_VAR 0 17
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 3
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63511: LD_ADDR_VAR 0 18
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63552: LD_ADDR_VAR 0 19
63556: PUSH
63557: LD_INT 3
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63592: LD_ADDR_VAR 0 20
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63633: LD_ADDR_VAR 0 21
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 3
63651: NEG
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 3
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63677: LD_ADDR_VAR 0 22
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: LD_INT 3
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: LD_INT 3
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63723: LD_ADDR_VAR 0 23
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 3
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 4
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 3
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63767: LD_ADDR_VAR 0 24
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 4
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63808: LD_ADDR_VAR 0 25
63812: PUSH
63813: LD_INT 3
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 4
63825: PUSH
63826: LD_INT 3
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: LD_INT 4
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63848: LD_ADDR_VAR 0 26
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 4
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: LIST
63888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63889: LD_ADDR_VAR 0 27
63893: PUSH
63894: LD_INT 3
63896: NEG
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 3
63907: NEG
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 4
63918: NEG
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63933: LD_ADDR_VAR 0 28
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: LD_INT 4
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 4
63964: NEG
63965: PUSH
63966: LD_INT 3
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63979: LD_ADDR_VAR 0 29
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: LD_INT 3
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: LD_INT 4
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 4
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 5
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 5
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 4
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 6
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 6
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: LD_INT 5
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64134: LD_ADDR_VAR 0 30
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 4
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 4
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 4
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 5
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 5
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 5
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 6
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 6
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64277: LD_ADDR_VAR 0 31
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 4
64314: PUSH
64315: LD_INT 3
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 4
64324: PUSH
64325: LD_INT 4
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: LD_INT 4
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 5
64344: PUSH
64345: LD_INT 4
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 5
64354: PUSH
64355: LD_INT 5
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 4
64364: PUSH
64365: LD_INT 5
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 6
64374: PUSH
64375: LD_INT 5
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 6
64384: PUSH
64385: LD_INT 6
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 5
64394: PUSH
64395: LD_INT 6
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64416: LD_ADDR_VAR 0 32
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 1
64454: PUSH
64455: LD_INT 4
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 4
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: NEG
64475: PUSH
64476: LD_INT 3
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 5
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: LD_INT 5
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: LD_INT 4
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: LD_INT 6
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 6
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 5
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64559: LD_ADDR_VAR 0 33
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 3
64577: NEG
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: NEG
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 4
64611: NEG
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 4
64622: NEG
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 4
64634: NEG
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 5
64645: NEG
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 5
64656: NEG
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 5
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 6
64679: NEG
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 6
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64714: LD_ADDR_VAR 0 34
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 3
64757: NEG
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 4
64769: NEG
64770: PUSH
64771: LD_INT 3
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 4
64781: NEG
64782: PUSH
64783: LD_INT 4
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 4
64793: NEG
64794: PUSH
64795: LD_INT 5
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 5
64805: NEG
64806: PUSH
64807: LD_INT 4
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 5
64817: NEG
64818: PUSH
64819: LD_INT 5
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 5
64829: NEG
64830: PUSH
64831: LD_INT 6
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 6
64841: NEG
64842: PUSH
64843: LD_INT 5
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 6
64853: NEG
64854: PUSH
64855: LD_INT 6
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64877: LD_ADDR_VAR 0 41
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 2
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 3
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64921: LD_ADDR_VAR 0 42
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64962: LD_ADDR_VAR 0 43
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 3
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: LD_INT 3
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65002: LD_ADDR_VAR 0 44
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: LD_INT 2
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65043: LD_ADDR_VAR 0 45
65047: PUSH
65048: LD_INT 2
65050: NEG
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65087: LD_ADDR_VAR 0 46
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65133: LD_ADDR_VAR 0 47
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65166: LD_ADDR_VAR 0 48
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: LD_INT 2
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 2
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65197: LD_ADDR_VAR 0 49
65201: PUSH
65202: LD_INT 3
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65226: LD_ADDR_VAR 0 50
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 3
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65255: LD_ADDR_VAR 0 51
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65286: LD_ADDR_VAR 0 52
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 3
65305: NEG
65306: PUSH
65307: LD_INT 2
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65319: LD_ADDR_VAR 0 53
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 3
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65363: LD_ADDR_VAR 0 54
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 3
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65404: LD_ADDR_VAR 0 55
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65444: LD_ADDR_VAR 0 56
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 3
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: LIST
65484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65485: LD_ADDR_VAR 0 57
65489: PUSH
65490: LD_INT 2
65492: NEG
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65529: LD_ADDR_VAR 0 58
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: LD_INT 3
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: LD_INT 2
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65575: LD_ADDR_VAR 0 59
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 2
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65619: LD_ADDR_VAR 0 60
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65660: LD_ADDR_VAR 0 61
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65700: LD_ADDR_VAR 0 62
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65741: LD_ADDR_VAR 0 63
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: LIST
65784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65785: LD_ADDR_VAR 0 64
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: LD_INT 2
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: ST_TO_ADDR
// end ; 2 :
65831: GO 69097
65833: LD_INT 2
65835: DOUBLE
65836: EQUAL
65837: IFTRUE 65841
65839: GO 69096
65841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65842: LD_ADDR_VAR 0 29
65846: PUSH
65847: LD_INT 4
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 4
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 5
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 5
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 4
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: PUSH
65922: LD_INT 2
65924: NEG
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 5
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 4
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: LD_INT 4
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: LD_INT 4
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 4
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 4
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 4
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: LD_INT 4
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: LD_INT 5
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 5
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: LD_INT 5
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 2
66114: NEG
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 3
66125: NEG
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 3
66136: NEG
66137: PUSH
66138: LD_INT 1
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 2
66159: NEG
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 4
66181: NEG
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 4
66192: NEG
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 4
66204: NEG
66205: PUSH
66206: LD_INT 2
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 4
66227: NEG
66228: PUSH
66229: LD_INT 4
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 4
66239: NEG
66240: PUSH
66241: LD_INT 5
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: LD_INT 4
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 3
66263: NEG
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 4
66275: NEG
66276: PUSH
66277: LD_INT 3
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 5
66287: NEG
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 5
66299: NEG
66300: PUSH
66301: LD_INT 5
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: LD_INT 5
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 5
66323: NEG
66324: PUSH
66325: LD_INT 3
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66380: LD_ADDR_VAR 0 30
66384: PUSH
66385: LD_INT 4
66387: PUSH
66388: LD_INT 4
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 4
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: LD_INT 4
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 5
66417: PUSH
66418: LD_INT 5
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 4
66427: PUSH
66428: LD_INT 5
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: LD_INT 4
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: LD_INT 3
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 5
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: LD_INT 4
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 4
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: NEG
66528: PUSH
66529: LD_INT 3
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 4
66570: NEG
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 4
66581: NEG
66582: PUSH
66583: LD_INT 1
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: NEG
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 3
66604: NEG
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 4
66615: NEG
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 5
66626: NEG
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 5
66637: NEG
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 5
66649: NEG
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 3
66672: NEG
66673: PUSH
66674: LD_INT 3
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 3
66684: NEG
66685: PUSH
66686: LD_INT 4
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: LD_INT 3
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 2
66708: NEG
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 3
66720: NEG
66721: PUSH
66722: LD_INT 2
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: NEG
66733: PUSH
66734: LD_INT 3
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 4
66744: NEG
66745: PUSH
66746: LD_INT 4
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 2
66756: NEG
66757: PUSH
66758: LD_INT 4
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 4
66768: NEG
66769: PUSH
66770: LD_INT 2
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: LD_INT 4
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 5
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: LD_INT 4
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: LD_INT 5
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: LD_INT 3
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 2
66870: NEG
66871: PUSH
66872: LD_INT 5
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66927: LD_ADDR_VAR 0 31
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: LD_INT 4
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 5
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 5
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: LD_INT 4
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 2
67006: PUSH
67007: LD_INT 5
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 2
67016: NEG
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 3
67027: NEG
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: NEG
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 2
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 4
67083: NEG
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 4
67094: NEG
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 4
67106: NEG
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 2
67118: NEG
67119: PUSH
67120: LD_INT 2
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: NEG
67130: PUSH
67131: LD_INT 4
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: LD_INT 5
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: NEG
67154: PUSH
67155: LD_INT 4
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 4
67177: NEG
67178: PUSH
67179: LD_INT 3
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 5
67189: NEG
67190: PUSH
67191: LD_INT 4
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 5
67201: NEG
67202: PUSH
67203: LD_INT 5
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: LD_INT 5
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 5
67225: NEG
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 4
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 2
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: LD_INT 3
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: LD_INT 4
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: LD_INT 2
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: LD_INT 4
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 4
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 5
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 5
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: LD_INT 1
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 3
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 3
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 5
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67477: LD_ADDR_VAR 0 32
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 4
67495: NEG
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 4
67529: NEG
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 5
67540: NEG
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 5
67551: NEG
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 5
67563: NEG
67564: PUSH
67565: LD_INT 2
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 3
67575: NEG
67576: PUSH
67577: LD_INT 2
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: LD_INT 4
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: NEG
67611: PUSH
67612: LD_INT 3
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: NEG
67623: PUSH
67624: LD_INT 2
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: LD_INT 2
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 4
67658: NEG
67659: PUSH
67660: LD_INT 4
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: NEG
67671: PUSH
67672: LD_INT 4
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 4
67682: NEG
67683: PUSH
67684: LD_INT 2
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: LD_INT 4
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 5
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: LD_INT 4
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: LD_INT 3
67730: NEG
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 3
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: LD_INT 4
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: LD_INT 5
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 2
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 2
67784: NEG
67785: PUSH
67786: LD_INT 5
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 4
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 4
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 2
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 4
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 5
67909: PUSH
67910: LD_INT 4
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 5
67919: PUSH
67920: LD_INT 5
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 4
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: LD_INT 4
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 5
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: LD_INT 5
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68024: LD_ADDR_VAR 0 33
68028: PUSH
68029: LD_INT 4
68031: NEG
68032: PUSH
68033: LD_INT 4
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 4
68043: NEG
68044: PUSH
68045: LD_INT 5
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: LD_INT 4
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 3
68067: NEG
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: NEG
68080: PUSH
68081: LD_INT 3
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 5
68091: NEG
68092: PUSH
68093: LD_INT 4
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 5
68103: NEG
68104: PUSH
68105: LD_INT 5
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 3
68115: NEG
68116: PUSH
68117: LD_INT 5
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 5
68127: NEG
68128: PUSH
68129: LD_INT 3
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: LD_INT 4
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: LD_INT 3
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: PUSH
68173: LD_INT 2
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 2
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: LD_INT 3
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: LD_INT 4
68210: NEG
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: LD_INT 2
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 2
68229: NEG
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 4
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 4
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 5
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 5
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 4
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 3
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 3
68313: PUSH
68314: LD_INT 2
68316: NEG
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 5
68324: PUSH
68325: LD_INT 2
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: LD_INT 3
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 4
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: LD_INT 2
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 4
68404: PUSH
68405: LD_INT 2
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: LD_INT 4
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: LD_INT 4
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: LD_INT 5
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: LD_INT 5
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68562: LD_ADDR_VAR 0 34
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: LD_INT 4
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 5
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: LD_INT 4
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: LD_INT 4
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: LD_INT 5
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: LD_INT 3
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 2
68659: NEG
68660: PUSH
68661: LD_INT 5
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 3
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 4
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 4
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 2
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 2
68732: PUSH
68733: LD_INT 1
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: LD_INT 2
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 4
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: LD_INT 4
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: LD_INT 3
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 5
68784: PUSH
68785: LD_INT 4
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 5
68794: PUSH
68795: LD_INT 5
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 4
68804: PUSH
68805: LD_INT 5
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: LD_INT 4
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: LD_INT 3
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 5
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 5
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 1
68884: PUSH
68885: LD_INT 4
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 4
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: LD_INT 3
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: LD_INT 4
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: NEG
68937: PUSH
68938: LD_INT 2
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: NEG
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: NEG
68959: PUSH
68960: LD_INT 1
68962: NEG
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 3
68970: NEG
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 3
68981: NEG
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: NEG
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 5
69003: NEG
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 5
69014: NEG
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 5
69026: NEG
69027: PUSH
69028: LD_INT 2
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: LD_INT 2
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: ST_TO_ADDR
// end ; end ;
69094: GO 69097
69096: POP
// case btype of b_depot , b_warehouse :
69097: LD_VAR 0 1
69101: PUSH
69102: LD_INT 0
69104: DOUBLE
69105: EQUAL
69106: IFTRUE 69116
69108: LD_INT 1
69110: DOUBLE
69111: EQUAL
69112: IFTRUE 69116
69114: GO 69317
69116: POP
// case nation of nation_american :
69117: LD_VAR 0 5
69121: PUSH
69122: LD_INT 1
69124: DOUBLE
69125: EQUAL
69126: IFTRUE 69130
69128: GO 69186
69130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69131: LD_ADDR_VAR 0 9
69135: PUSH
69136: LD_VAR 0 11
69140: PUSH
69141: LD_VAR 0 12
69145: PUSH
69146: LD_VAR 0 13
69150: PUSH
69151: LD_VAR 0 14
69155: PUSH
69156: LD_VAR 0 15
69160: PUSH
69161: LD_VAR 0 16
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: PUSH
69174: LD_VAR 0 4
69178: PUSH
69179: LD_INT 1
69181: PLUS
69182: ARRAY
69183: ST_TO_ADDR
69184: GO 69315
69186: LD_INT 2
69188: DOUBLE
69189: EQUAL
69190: IFTRUE 69194
69192: GO 69250
69194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69195: LD_ADDR_VAR 0 9
69199: PUSH
69200: LD_VAR 0 17
69204: PUSH
69205: LD_VAR 0 18
69209: PUSH
69210: LD_VAR 0 19
69214: PUSH
69215: LD_VAR 0 20
69219: PUSH
69220: LD_VAR 0 21
69224: PUSH
69225: LD_VAR 0 22
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: PUSH
69238: LD_VAR 0 4
69242: PUSH
69243: LD_INT 1
69245: PLUS
69246: ARRAY
69247: ST_TO_ADDR
69248: GO 69315
69250: LD_INT 3
69252: DOUBLE
69253: EQUAL
69254: IFTRUE 69258
69256: GO 69314
69258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69259: LD_ADDR_VAR 0 9
69263: PUSH
69264: LD_VAR 0 23
69268: PUSH
69269: LD_VAR 0 24
69273: PUSH
69274: LD_VAR 0 25
69278: PUSH
69279: LD_VAR 0 26
69283: PUSH
69284: LD_VAR 0 27
69288: PUSH
69289: LD_VAR 0 28
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: PUSH
69302: LD_VAR 0 4
69306: PUSH
69307: LD_INT 1
69309: PLUS
69310: ARRAY
69311: ST_TO_ADDR
69312: GO 69315
69314: POP
69315: GO 69870
69317: LD_INT 2
69319: DOUBLE
69320: EQUAL
69321: IFTRUE 69331
69323: LD_INT 3
69325: DOUBLE
69326: EQUAL
69327: IFTRUE 69331
69329: GO 69387
69331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69332: LD_ADDR_VAR 0 9
69336: PUSH
69337: LD_VAR 0 29
69341: PUSH
69342: LD_VAR 0 30
69346: PUSH
69347: LD_VAR 0 31
69351: PUSH
69352: LD_VAR 0 32
69356: PUSH
69357: LD_VAR 0 33
69361: PUSH
69362: LD_VAR 0 34
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: PUSH
69375: LD_VAR 0 4
69379: PUSH
69380: LD_INT 1
69382: PLUS
69383: ARRAY
69384: ST_TO_ADDR
69385: GO 69870
69387: LD_INT 16
69389: DOUBLE
69390: EQUAL
69391: IFTRUE 69449
69393: LD_INT 17
69395: DOUBLE
69396: EQUAL
69397: IFTRUE 69449
69399: LD_INT 18
69401: DOUBLE
69402: EQUAL
69403: IFTRUE 69449
69405: LD_INT 19
69407: DOUBLE
69408: EQUAL
69409: IFTRUE 69449
69411: LD_INT 22
69413: DOUBLE
69414: EQUAL
69415: IFTRUE 69449
69417: LD_INT 20
69419: DOUBLE
69420: EQUAL
69421: IFTRUE 69449
69423: LD_INT 21
69425: DOUBLE
69426: EQUAL
69427: IFTRUE 69449
69429: LD_INT 23
69431: DOUBLE
69432: EQUAL
69433: IFTRUE 69449
69435: LD_INT 24
69437: DOUBLE
69438: EQUAL
69439: IFTRUE 69449
69441: LD_INT 25
69443: DOUBLE
69444: EQUAL
69445: IFTRUE 69449
69447: GO 69505
69449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69450: LD_ADDR_VAR 0 9
69454: PUSH
69455: LD_VAR 0 35
69459: PUSH
69460: LD_VAR 0 36
69464: PUSH
69465: LD_VAR 0 37
69469: PUSH
69470: LD_VAR 0 38
69474: PUSH
69475: LD_VAR 0 39
69479: PUSH
69480: LD_VAR 0 40
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: PUSH
69493: LD_VAR 0 4
69497: PUSH
69498: LD_INT 1
69500: PLUS
69501: ARRAY
69502: ST_TO_ADDR
69503: GO 69870
69505: LD_INT 6
69507: DOUBLE
69508: EQUAL
69509: IFTRUE 69561
69511: LD_INT 7
69513: DOUBLE
69514: EQUAL
69515: IFTRUE 69561
69517: LD_INT 8
69519: DOUBLE
69520: EQUAL
69521: IFTRUE 69561
69523: LD_INT 13
69525: DOUBLE
69526: EQUAL
69527: IFTRUE 69561
69529: LD_INT 12
69531: DOUBLE
69532: EQUAL
69533: IFTRUE 69561
69535: LD_INT 15
69537: DOUBLE
69538: EQUAL
69539: IFTRUE 69561
69541: LD_INT 11
69543: DOUBLE
69544: EQUAL
69545: IFTRUE 69561
69547: LD_INT 14
69549: DOUBLE
69550: EQUAL
69551: IFTRUE 69561
69553: LD_INT 10
69555: DOUBLE
69556: EQUAL
69557: IFTRUE 69561
69559: GO 69617
69561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69562: LD_ADDR_VAR 0 9
69566: PUSH
69567: LD_VAR 0 41
69571: PUSH
69572: LD_VAR 0 42
69576: PUSH
69577: LD_VAR 0 43
69581: PUSH
69582: LD_VAR 0 44
69586: PUSH
69587: LD_VAR 0 45
69591: PUSH
69592: LD_VAR 0 46
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: PUSH
69605: LD_VAR 0 4
69609: PUSH
69610: LD_INT 1
69612: PLUS
69613: ARRAY
69614: ST_TO_ADDR
69615: GO 69870
69617: LD_INT 36
69619: DOUBLE
69620: EQUAL
69621: IFTRUE 69625
69623: GO 69681
69625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69626: LD_ADDR_VAR 0 9
69630: PUSH
69631: LD_VAR 0 47
69635: PUSH
69636: LD_VAR 0 48
69640: PUSH
69641: LD_VAR 0 49
69645: PUSH
69646: LD_VAR 0 50
69650: PUSH
69651: LD_VAR 0 51
69655: PUSH
69656: LD_VAR 0 52
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: PUSH
69669: LD_VAR 0 4
69673: PUSH
69674: LD_INT 1
69676: PLUS
69677: ARRAY
69678: ST_TO_ADDR
69679: GO 69870
69681: LD_INT 4
69683: DOUBLE
69684: EQUAL
69685: IFTRUE 69707
69687: LD_INT 5
69689: DOUBLE
69690: EQUAL
69691: IFTRUE 69707
69693: LD_INT 34
69695: DOUBLE
69696: EQUAL
69697: IFTRUE 69707
69699: LD_INT 37
69701: DOUBLE
69702: EQUAL
69703: IFTRUE 69707
69705: GO 69763
69707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69708: LD_ADDR_VAR 0 9
69712: PUSH
69713: LD_VAR 0 53
69717: PUSH
69718: LD_VAR 0 54
69722: PUSH
69723: LD_VAR 0 55
69727: PUSH
69728: LD_VAR 0 56
69732: PUSH
69733: LD_VAR 0 57
69737: PUSH
69738: LD_VAR 0 58
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: PUSH
69751: LD_VAR 0 4
69755: PUSH
69756: LD_INT 1
69758: PLUS
69759: ARRAY
69760: ST_TO_ADDR
69761: GO 69870
69763: LD_INT 31
69765: DOUBLE
69766: EQUAL
69767: IFTRUE 69813
69769: LD_INT 32
69771: DOUBLE
69772: EQUAL
69773: IFTRUE 69813
69775: LD_INT 33
69777: DOUBLE
69778: EQUAL
69779: IFTRUE 69813
69781: LD_INT 27
69783: DOUBLE
69784: EQUAL
69785: IFTRUE 69813
69787: LD_INT 26
69789: DOUBLE
69790: EQUAL
69791: IFTRUE 69813
69793: LD_INT 28
69795: DOUBLE
69796: EQUAL
69797: IFTRUE 69813
69799: LD_INT 29
69801: DOUBLE
69802: EQUAL
69803: IFTRUE 69813
69805: LD_INT 30
69807: DOUBLE
69808: EQUAL
69809: IFTRUE 69813
69811: GO 69869
69813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69814: LD_ADDR_VAR 0 9
69818: PUSH
69819: LD_VAR 0 59
69823: PUSH
69824: LD_VAR 0 60
69828: PUSH
69829: LD_VAR 0 61
69833: PUSH
69834: LD_VAR 0 62
69838: PUSH
69839: LD_VAR 0 63
69843: PUSH
69844: LD_VAR 0 64
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: PUSH
69857: LD_VAR 0 4
69861: PUSH
69862: LD_INT 1
69864: PLUS
69865: ARRAY
69866: ST_TO_ADDR
69867: GO 69870
69869: POP
// temp_list2 = [ ] ;
69870: LD_ADDR_VAR 0 10
69874: PUSH
69875: EMPTY
69876: ST_TO_ADDR
// for i in temp_list do
69877: LD_ADDR_VAR 0 8
69881: PUSH
69882: LD_VAR 0 9
69886: PUSH
69887: FOR_IN
69888: IFFALSE 69940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69890: LD_ADDR_VAR 0 10
69894: PUSH
69895: LD_VAR 0 10
69899: PUSH
69900: LD_VAR 0 8
69904: PUSH
69905: LD_INT 1
69907: ARRAY
69908: PUSH
69909: LD_VAR 0 2
69913: PLUS
69914: PUSH
69915: LD_VAR 0 8
69919: PUSH
69920: LD_INT 2
69922: ARRAY
69923: PUSH
69924: LD_VAR 0 3
69928: PLUS
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: EMPTY
69935: LIST
69936: ADD
69937: ST_TO_ADDR
69938: GO 69887
69940: POP
69941: POP
// result = temp_list2 ;
69942: LD_ADDR_VAR 0 7
69946: PUSH
69947: LD_VAR 0 10
69951: ST_TO_ADDR
// end ;
69952: LD_VAR 0 7
69956: RET
// export function EnemyInRange ( unit , dist ) ; begin
69957: LD_INT 0
69959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69960: LD_ADDR_VAR 0 3
69964: PUSH
69965: LD_VAR 0 1
69969: PPUSH
69970: CALL_OW 255
69974: PPUSH
69975: LD_VAR 0 1
69979: PPUSH
69980: CALL_OW 250
69984: PPUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: CALL_OW 251
69994: PPUSH
69995: LD_VAR 0 2
69999: PPUSH
70000: CALL 43353 0 4
70004: PUSH
70005: LD_INT 4
70007: ARRAY
70008: ST_TO_ADDR
// end ;
70009: LD_VAR 0 3
70013: RET
// export function PlayerSeeMe ( unit ) ; begin
70014: LD_INT 0
70016: PPUSH
// result := See ( your_side , unit ) ;
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: LD_OWVAR 2
70026: PPUSH
70027: LD_VAR 0 1
70031: PPUSH
70032: CALL_OW 292
70036: ST_TO_ADDR
// end ;
70037: LD_VAR 0 2
70041: RET
// export function ReverseDir ( unit ) ; begin
70042: LD_INT 0
70044: PPUSH
// if not unit then
70045: LD_VAR 0 1
70049: NOT
70050: IFFALSE 70054
// exit ;
70052: GO 70077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70054: LD_ADDR_VAR 0 2
70058: PUSH
70059: LD_VAR 0 1
70063: PPUSH
70064: CALL_OW 254
70068: PUSH
70069: LD_INT 3
70071: PLUS
70072: PUSH
70073: LD_INT 6
70075: MOD
70076: ST_TO_ADDR
// end ;
70077: LD_VAR 0 2
70081: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70082: LD_INT 0
70084: PPUSH
70085: PPUSH
70086: PPUSH
70087: PPUSH
70088: PPUSH
// if not hexes then
70089: LD_VAR 0 2
70093: NOT
70094: IFFALSE 70098
// exit ;
70096: GO 70246
// dist := 9999 ;
70098: LD_ADDR_VAR 0 5
70102: PUSH
70103: LD_INT 9999
70105: ST_TO_ADDR
// for i = 1 to hexes do
70106: LD_ADDR_VAR 0 4
70110: PUSH
70111: DOUBLE
70112: LD_INT 1
70114: DEC
70115: ST_TO_ADDR
70116: LD_VAR 0 2
70120: PUSH
70121: FOR_TO
70122: IFFALSE 70234
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70124: LD_VAR 0 1
70128: PPUSH
70129: LD_VAR 0 2
70133: PUSH
70134: LD_VAR 0 4
70138: ARRAY
70139: PUSH
70140: LD_INT 1
70142: ARRAY
70143: PPUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_VAR 0 4
70153: ARRAY
70154: PUSH
70155: LD_INT 2
70157: ARRAY
70158: PPUSH
70159: CALL_OW 297
70163: PUSH
70164: LD_VAR 0 5
70168: LESS
70169: IFFALSE 70232
// begin hex := hexes [ i ] ;
70171: LD_ADDR_VAR 0 7
70175: PUSH
70176: LD_VAR 0 2
70180: PUSH
70181: LD_VAR 0 4
70185: ARRAY
70186: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70187: LD_ADDR_VAR 0 5
70191: PUSH
70192: LD_VAR 0 1
70196: PPUSH
70197: LD_VAR 0 2
70201: PUSH
70202: LD_VAR 0 4
70206: ARRAY
70207: PUSH
70208: LD_INT 1
70210: ARRAY
70211: PPUSH
70212: LD_VAR 0 2
70216: PUSH
70217: LD_VAR 0 4
70221: ARRAY
70222: PUSH
70223: LD_INT 2
70225: ARRAY
70226: PPUSH
70227: CALL_OW 297
70231: ST_TO_ADDR
// end ; end ;
70232: GO 70121
70234: POP
70235: POP
// result := hex ;
70236: LD_ADDR_VAR 0 3
70240: PUSH
70241: LD_VAR 0 7
70245: ST_TO_ADDR
// end ;
70246: LD_VAR 0 3
70250: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70251: LD_INT 0
70253: PPUSH
70254: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70255: LD_VAR 0 1
70259: NOT
70260: PUSH
70261: LD_VAR 0 1
70265: PUSH
70266: LD_INT 21
70268: PUSH
70269: LD_INT 2
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 23
70278: PUSH
70279: LD_INT 2
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PPUSH
70290: CALL_OW 69
70294: IN
70295: NOT
70296: OR
70297: IFFALSE 70301
// exit ;
70299: GO 70348
// for i = 1 to 3 do
70301: LD_ADDR_VAR 0 3
70305: PUSH
70306: DOUBLE
70307: LD_INT 1
70309: DEC
70310: ST_TO_ADDR
70311: LD_INT 3
70313: PUSH
70314: FOR_TO
70315: IFFALSE 70346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70317: LD_VAR 0 1
70321: PPUSH
70322: CALL_OW 250
70326: PPUSH
70327: LD_VAR 0 1
70331: PPUSH
70332: CALL_OW 251
70336: PPUSH
70337: LD_INT 1
70339: PPUSH
70340: CALL_OW 453
70344: GO 70314
70346: POP
70347: POP
// end ;
70348: LD_VAR 0 2
70352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70353: LD_INT 0
70355: PPUSH
70356: PPUSH
70357: PPUSH
70358: PPUSH
70359: PPUSH
70360: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70361: LD_VAR 0 1
70365: NOT
70366: PUSH
70367: LD_VAR 0 2
70371: NOT
70372: OR
70373: PUSH
70374: LD_VAR 0 1
70378: PPUSH
70379: CALL_OW 314
70383: OR
70384: IFFALSE 70388
// exit ;
70386: GO 70829
// x := GetX ( enemy_unit ) ;
70388: LD_ADDR_VAR 0 7
70392: PUSH
70393: LD_VAR 0 2
70397: PPUSH
70398: CALL_OW 250
70402: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70403: LD_ADDR_VAR 0 8
70407: PUSH
70408: LD_VAR 0 2
70412: PPUSH
70413: CALL_OW 251
70417: ST_TO_ADDR
// if not x or not y then
70418: LD_VAR 0 7
70422: NOT
70423: PUSH
70424: LD_VAR 0 8
70428: NOT
70429: OR
70430: IFFALSE 70434
// exit ;
70432: GO 70829
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70434: LD_ADDR_VAR 0 6
70438: PUSH
70439: LD_VAR 0 7
70443: PPUSH
70444: LD_INT 0
70446: PPUSH
70447: LD_INT 4
70449: PPUSH
70450: CALL_OW 272
70454: PUSH
70455: LD_VAR 0 8
70459: PPUSH
70460: LD_INT 0
70462: PPUSH
70463: LD_INT 4
70465: PPUSH
70466: CALL_OW 273
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_VAR 0 7
70479: PPUSH
70480: LD_INT 1
70482: PPUSH
70483: LD_INT 4
70485: PPUSH
70486: CALL_OW 272
70490: PUSH
70491: LD_VAR 0 8
70495: PPUSH
70496: LD_INT 1
70498: PPUSH
70499: LD_INT 4
70501: PPUSH
70502: CALL_OW 273
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_VAR 0 7
70515: PPUSH
70516: LD_INT 2
70518: PPUSH
70519: LD_INT 4
70521: PPUSH
70522: CALL_OW 272
70526: PUSH
70527: LD_VAR 0 8
70531: PPUSH
70532: LD_INT 2
70534: PPUSH
70535: LD_INT 4
70537: PPUSH
70538: CALL_OW 273
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_VAR 0 7
70551: PPUSH
70552: LD_INT 3
70554: PPUSH
70555: LD_INT 4
70557: PPUSH
70558: CALL_OW 272
70562: PUSH
70563: LD_VAR 0 8
70567: PPUSH
70568: LD_INT 3
70570: PPUSH
70571: LD_INT 4
70573: PPUSH
70574: CALL_OW 273
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_VAR 0 7
70587: PPUSH
70588: LD_INT 4
70590: PPUSH
70591: LD_INT 4
70593: PPUSH
70594: CALL_OW 272
70598: PUSH
70599: LD_VAR 0 8
70603: PPUSH
70604: LD_INT 4
70606: PPUSH
70607: LD_INT 4
70609: PPUSH
70610: CALL_OW 273
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_VAR 0 7
70623: PPUSH
70624: LD_INT 5
70626: PPUSH
70627: LD_INT 4
70629: PPUSH
70630: CALL_OW 272
70634: PUSH
70635: LD_VAR 0 8
70639: PPUSH
70640: LD_INT 5
70642: PPUSH
70643: LD_INT 4
70645: PPUSH
70646: CALL_OW 273
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// for i = tmp downto 1 do
70663: LD_ADDR_VAR 0 4
70667: PUSH
70668: DOUBLE
70669: LD_VAR 0 6
70673: INC
70674: ST_TO_ADDR
70675: LD_INT 1
70677: PUSH
70678: FOR_DOWNTO
70679: IFFALSE 70780
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70681: LD_VAR 0 6
70685: PUSH
70686: LD_VAR 0 4
70690: ARRAY
70691: PUSH
70692: LD_INT 1
70694: ARRAY
70695: PPUSH
70696: LD_VAR 0 6
70700: PUSH
70701: LD_VAR 0 4
70705: ARRAY
70706: PUSH
70707: LD_INT 2
70709: ARRAY
70710: PPUSH
70711: CALL_OW 488
70715: NOT
70716: PUSH
70717: LD_VAR 0 6
70721: PUSH
70722: LD_VAR 0 4
70726: ARRAY
70727: PUSH
70728: LD_INT 1
70730: ARRAY
70731: PPUSH
70732: LD_VAR 0 6
70736: PUSH
70737: LD_VAR 0 4
70741: ARRAY
70742: PUSH
70743: LD_INT 2
70745: ARRAY
70746: PPUSH
70747: CALL_OW 428
70751: PUSH
70752: LD_INT 0
70754: NONEQUAL
70755: OR
70756: IFFALSE 70778
// tmp := Delete ( tmp , i ) ;
70758: LD_ADDR_VAR 0 6
70762: PUSH
70763: LD_VAR 0 6
70767: PPUSH
70768: LD_VAR 0 4
70772: PPUSH
70773: CALL_OW 3
70777: ST_TO_ADDR
70778: GO 70678
70780: POP
70781: POP
// j := GetClosestHex ( unit , tmp ) ;
70782: LD_ADDR_VAR 0 5
70786: PUSH
70787: LD_VAR 0 1
70791: PPUSH
70792: LD_VAR 0 6
70796: PPUSH
70797: CALL 70082 0 2
70801: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70802: LD_VAR 0 1
70806: PPUSH
70807: LD_VAR 0 5
70811: PUSH
70812: LD_INT 1
70814: ARRAY
70815: PPUSH
70816: LD_VAR 0 5
70820: PUSH
70821: LD_INT 2
70823: ARRAY
70824: PPUSH
70825: CALL_OW 111
// end ;
70829: LD_VAR 0 3
70833: RET
// export function PrepareApemanSoldier ( ) ; begin
70834: LD_INT 0
70836: PPUSH
// uc_nation := 0 ;
70837: LD_ADDR_OWVAR 21
70841: PUSH
70842: LD_INT 0
70844: ST_TO_ADDR
// hc_sex := sex_male ;
70845: LD_ADDR_OWVAR 27
70849: PUSH
70850: LD_INT 1
70852: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70853: LD_ADDR_OWVAR 28
70857: PUSH
70858: LD_INT 15
70860: ST_TO_ADDR
// hc_gallery :=  ;
70861: LD_ADDR_OWVAR 33
70865: PUSH
70866: LD_STRING 
70868: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70869: LD_ADDR_OWVAR 31
70873: PUSH
70874: LD_INT 0
70876: PPUSH
70877: LD_INT 3
70879: PPUSH
70880: CALL_OW 12
70884: PUSH
70885: LD_INT 0
70887: PPUSH
70888: LD_INT 3
70890: PPUSH
70891: CALL_OW 12
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: ST_TO_ADDR
// end ;
70908: LD_VAR 0 1
70912: RET
// export function PrepareApemanEngineer ( ) ; begin
70913: LD_INT 0
70915: PPUSH
// uc_nation := 0 ;
70916: LD_ADDR_OWVAR 21
70920: PUSH
70921: LD_INT 0
70923: ST_TO_ADDR
// hc_sex := sex_male ;
70924: LD_ADDR_OWVAR 27
70928: PUSH
70929: LD_INT 1
70931: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70932: LD_ADDR_OWVAR 28
70936: PUSH
70937: LD_INT 16
70939: ST_TO_ADDR
// hc_gallery :=  ;
70940: LD_ADDR_OWVAR 33
70944: PUSH
70945: LD_STRING 
70947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70948: LD_ADDR_OWVAR 31
70952: PUSH
70953: LD_INT 0
70955: PPUSH
70956: LD_INT 3
70958: PPUSH
70959: CALL_OW 12
70963: PUSH
70964: LD_INT 0
70966: PPUSH
70967: LD_INT 3
70969: PPUSH
70970: CALL_OW 12
70974: PUSH
70975: LD_INT 0
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: ST_TO_ADDR
// end ;
70987: LD_VAR 0 1
70991: RET
// export function PrepareApeman ( agressivity ) ; begin
70992: LD_INT 0
70994: PPUSH
// uc_side := 0 ;
70995: LD_ADDR_OWVAR 20
70999: PUSH
71000: LD_INT 0
71002: ST_TO_ADDR
// uc_nation := 0 ;
71003: LD_ADDR_OWVAR 21
71007: PUSH
71008: LD_INT 0
71010: ST_TO_ADDR
// hc_sex := sex_male ;
71011: LD_ADDR_OWVAR 27
71015: PUSH
71016: LD_INT 1
71018: ST_TO_ADDR
// hc_class := class_apeman ;
71019: LD_ADDR_OWVAR 28
71023: PUSH
71024: LD_INT 12
71026: ST_TO_ADDR
// hc_gallery :=  ;
71027: LD_ADDR_OWVAR 33
71031: PUSH
71032: LD_STRING 
71034: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71035: LD_ADDR_OWVAR 35
71039: PUSH
71040: LD_VAR 0 1
71044: NEG
71045: PPUSH
71046: LD_VAR 0 1
71050: PPUSH
71051: CALL_OW 12
71055: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71056: LD_ADDR_OWVAR 31
71060: PUSH
71061: LD_INT 0
71063: PPUSH
71064: LD_INT 3
71066: PPUSH
71067: CALL_OW 12
71071: PUSH
71072: LD_INT 0
71074: PPUSH
71075: LD_INT 3
71077: PPUSH
71078: CALL_OW 12
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: ST_TO_ADDR
// end ;
71095: LD_VAR 0 2
71099: RET
// export function PrepareTiger ( agressivity ) ; begin
71100: LD_INT 0
71102: PPUSH
// uc_side := 0 ;
71103: LD_ADDR_OWVAR 20
71107: PUSH
71108: LD_INT 0
71110: ST_TO_ADDR
// uc_nation := 0 ;
71111: LD_ADDR_OWVAR 21
71115: PUSH
71116: LD_INT 0
71118: ST_TO_ADDR
// hc_class := class_tiger ;
71119: LD_ADDR_OWVAR 28
71123: PUSH
71124: LD_INT 14
71126: ST_TO_ADDR
// hc_gallery :=  ;
71127: LD_ADDR_OWVAR 33
71131: PUSH
71132: LD_STRING 
71134: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71135: LD_ADDR_OWVAR 35
71139: PUSH
71140: LD_VAR 0 1
71144: NEG
71145: PPUSH
71146: LD_VAR 0 1
71150: PPUSH
71151: CALL_OW 12
71155: ST_TO_ADDR
// end ;
71156: LD_VAR 0 2
71160: RET
// export function PrepareEnchidna ( ) ; begin
71161: LD_INT 0
71163: PPUSH
// uc_side := 0 ;
71164: LD_ADDR_OWVAR 20
71168: PUSH
71169: LD_INT 0
71171: ST_TO_ADDR
// uc_nation := 0 ;
71172: LD_ADDR_OWVAR 21
71176: PUSH
71177: LD_INT 0
71179: ST_TO_ADDR
// hc_class := class_baggie ;
71180: LD_ADDR_OWVAR 28
71184: PUSH
71185: LD_INT 13
71187: ST_TO_ADDR
// hc_gallery :=  ;
71188: LD_ADDR_OWVAR 33
71192: PUSH
71193: LD_STRING 
71195: ST_TO_ADDR
// end ;
71196: LD_VAR 0 1
71200: RET
// export function PrepareFrog ( ) ; begin
71201: LD_INT 0
71203: PPUSH
// uc_side := 0 ;
71204: LD_ADDR_OWVAR 20
71208: PUSH
71209: LD_INT 0
71211: ST_TO_ADDR
// uc_nation := 0 ;
71212: LD_ADDR_OWVAR 21
71216: PUSH
71217: LD_INT 0
71219: ST_TO_ADDR
// hc_class := class_frog ;
71220: LD_ADDR_OWVAR 28
71224: PUSH
71225: LD_INT 19
71227: ST_TO_ADDR
// hc_gallery :=  ;
71228: LD_ADDR_OWVAR 33
71232: PUSH
71233: LD_STRING 
71235: ST_TO_ADDR
// end ;
71236: LD_VAR 0 1
71240: RET
// export function PrepareFish ( ) ; begin
71241: LD_INT 0
71243: PPUSH
// uc_side := 0 ;
71244: LD_ADDR_OWVAR 20
71248: PUSH
71249: LD_INT 0
71251: ST_TO_ADDR
// uc_nation := 0 ;
71252: LD_ADDR_OWVAR 21
71256: PUSH
71257: LD_INT 0
71259: ST_TO_ADDR
// hc_class := class_fish ;
71260: LD_ADDR_OWVAR 28
71264: PUSH
71265: LD_INT 20
71267: ST_TO_ADDR
// hc_gallery :=  ;
71268: LD_ADDR_OWVAR 33
71272: PUSH
71273: LD_STRING 
71275: ST_TO_ADDR
// end ;
71276: LD_VAR 0 1
71280: RET
// export function PrepareBird ( ) ; begin
71281: LD_INT 0
71283: PPUSH
// uc_side := 0 ;
71284: LD_ADDR_OWVAR 20
71288: PUSH
71289: LD_INT 0
71291: ST_TO_ADDR
// uc_nation := 0 ;
71292: LD_ADDR_OWVAR 21
71296: PUSH
71297: LD_INT 0
71299: ST_TO_ADDR
// hc_class := class_phororhacos ;
71300: LD_ADDR_OWVAR 28
71304: PUSH
71305: LD_INT 18
71307: ST_TO_ADDR
// hc_gallery :=  ;
71308: LD_ADDR_OWVAR 33
71312: PUSH
71313: LD_STRING 
71315: ST_TO_ADDR
// end ;
71316: LD_VAR 0 1
71320: RET
// export function PrepareHorse ( ) ; begin
71321: LD_INT 0
71323: PPUSH
// uc_side := 0 ;
71324: LD_ADDR_OWVAR 20
71328: PUSH
71329: LD_INT 0
71331: ST_TO_ADDR
// uc_nation := 0 ;
71332: LD_ADDR_OWVAR 21
71336: PUSH
71337: LD_INT 0
71339: ST_TO_ADDR
// hc_class := class_horse ;
71340: LD_ADDR_OWVAR 28
71344: PUSH
71345: LD_INT 21
71347: ST_TO_ADDR
// hc_gallery :=  ;
71348: LD_ADDR_OWVAR 33
71352: PUSH
71353: LD_STRING 
71355: ST_TO_ADDR
// end ;
71356: LD_VAR 0 1
71360: RET
// export function PrepareMastodont ( ) ; begin
71361: LD_INT 0
71363: PPUSH
// uc_side := 0 ;
71364: LD_ADDR_OWVAR 20
71368: PUSH
71369: LD_INT 0
71371: ST_TO_ADDR
// uc_nation := 0 ;
71372: LD_ADDR_OWVAR 21
71376: PUSH
71377: LD_INT 0
71379: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71380: LD_ADDR_OWVAR 37
71384: PUSH
71385: LD_INT 31
71387: ST_TO_ADDR
// vc_control := control_rider ;
71388: LD_ADDR_OWVAR 38
71392: PUSH
71393: LD_INT 4
71395: ST_TO_ADDR
// end ;
71396: LD_VAR 0 1
71400: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71401: LD_INT 0
71403: PPUSH
71404: PPUSH
71405: PPUSH
// uc_side = 0 ;
71406: LD_ADDR_OWVAR 20
71410: PUSH
71411: LD_INT 0
71413: ST_TO_ADDR
// uc_nation = 0 ;
71414: LD_ADDR_OWVAR 21
71418: PUSH
71419: LD_INT 0
71421: ST_TO_ADDR
// InitHc_All ( ) ;
71422: CALL_OW 584
// InitVc ;
71426: CALL_OW 20
// if mastodonts then
71430: LD_VAR 0 6
71434: IFFALSE 71501
// for i = 1 to mastodonts do
71436: LD_ADDR_VAR 0 11
71440: PUSH
71441: DOUBLE
71442: LD_INT 1
71444: DEC
71445: ST_TO_ADDR
71446: LD_VAR 0 6
71450: PUSH
71451: FOR_TO
71452: IFFALSE 71499
// begin vc_chassis := 31 ;
71454: LD_ADDR_OWVAR 37
71458: PUSH
71459: LD_INT 31
71461: ST_TO_ADDR
// vc_control := control_rider ;
71462: LD_ADDR_OWVAR 38
71466: PUSH
71467: LD_INT 4
71469: ST_TO_ADDR
// animal := CreateVehicle ;
71470: LD_ADDR_VAR 0 12
71474: PUSH
71475: CALL_OW 45
71479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71480: LD_VAR 0 12
71484: PPUSH
71485: LD_VAR 0 8
71489: PPUSH
71490: LD_INT 0
71492: PPUSH
71493: CALL 73636 0 3
// end ;
71497: GO 71451
71499: POP
71500: POP
// if horses then
71501: LD_VAR 0 5
71505: IFFALSE 71572
// for i = 1 to horses do
71507: LD_ADDR_VAR 0 11
71511: PUSH
71512: DOUBLE
71513: LD_INT 1
71515: DEC
71516: ST_TO_ADDR
71517: LD_VAR 0 5
71521: PUSH
71522: FOR_TO
71523: IFFALSE 71570
// begin hc_class := 21 ;
71525: LD_ADDR_OWVAR 28
71529: PUSH
71530: LD_INT 21
71532: ST_TO_ADDR
// hc_gallery :=  ;
71533: LD_ADDR_OWVAR 33
71537: PUSH
71538: LD_STRING 
71540: ST_TO_ADDR
// animal := CreateHuman ;
71541: LD_ADDR_VAR 0 12
71545: PUSH
71546: CALL_OW 44
71550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71551: LD_VAR 0 12
71555: PPUSH
71556: LD_VAR 0 8
71560: PPUSH
71561: LD_INT 0
71563: PPUSH
71564: CALL 73636 0 3
// end ;
71568: GO 71522
71570: POP
71571: POP
// if birds then
71572: LD_VAR 0 1
71576: IFFALSE 71643
// for i = 1 to birds do
71578: LD_ADDR_VAR 0 11
71582: PUSH
71583: DOUBLE
71584: LD_INT 1
71586: DEC
71587: ST_TO_ADDR
71588: LD_VAR 0 1
71592: PUSH
71593: FOR_TO
71594: IFFALSE 71641
// begin hc_class = 18 ;
71596: LD_ADDR_OWVAR 28
71600: PUSH
71601: LD_INT 18
71603: ST_TO_ADDR
// hc_gallery =  ;
71604: LD_ADDR_OWVAR 33
71608: PUSH
71609: LD_STRING 
71611: ST_TO_ADDR
// animal := CreateHuman ;
71612: LD_ADDR_VAR 0 12
71616: PUSH
71617: CALL_OW 44
71621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71622: LD_VAR 0 12
71626: PPUSH
71627: LD_VAR 0 8
71631: PPUSH
71632: LD_INT 0
71634: PPUSH
71635: CALL 73636 0 3
// end ;
71639: GO 71593
71641: POP
71642: POP
// if tigers then
71643: LD_VAR 0 2
71647: IFFALSE 71731
// for i = 1 to tigers do
71649: LD_ADDR_VAR 0 11
71653: PUSH
71654: DOUBLE
71655: LD_INT 1
71657: DEC
71658: ST_TO_ADDR
71659: LD_VAR 0 2
71663: PUSH
71664: FOR_TO
71665: IFFALSE 71729
// begin hc_class = class_tiger ;
71667: LD_ADDR_OWVAR 28
71671: PUSH
71672: LD_INT 14
71674: ST_TO_ADDR
// hc_gallery =  ;
71675: LD_ADDR_OWVAR 33
71679: PUSH
71680: LD_STRING 
71682: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71683: LD_ADDR_OWVAR 35
71687: PUSH
71688: LD_INT 7
71690: NEG
71691: PPUSH
71692: LD_INT 7
71694: PPUSH
71695: CALL_OW 12
71699: ST_TO_ADDR
// animal := CreateHuman ;
71700: LD_ADDR_VAR 0 12
71704: PUSH
71705: CALL_OW 44
71709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71710: LD_VAR 0 12
71714: PPUSH
71715: LD_VAR 0 8
71719: PPUSH
71720: LD_INT 0
71722: PPUSH
71723: CALL 73636 0 3
// end ;
71727: GO 71664
71729: POP
71730: POP
// if apemans then
71731: LD_VAR 0 3
71735: IFFALSE 71858
// for i = 1 to apemans do
71737: LD_ADDR_VAR 0 11
71741: PUSH
71742: DOUBLE
71743: LD_INT 1
71745: DEC
71746: ST_TO_ADDR
71747: LD_VAR 0 3
71751: PUSH
71752: FOR_TO
71753: IFFALSE 71856
// begin hc_class = class_apeman ;
71755: LD_ADDR_OWVAR 28
71759: PUSH
71760: LD_INT 12
71762: ST_TO_ADDR
// hc_gallery =  ;
71763: LD_ADDR_OWVAR 33
71767: PUSH
71768: LD_STRING 
71770: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71771: LD_ADDR_OWVAR 35
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PPUSH
71780: LD_INT 2
71782: PPUSH
71783: CALL_OW 12
71787: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71788: LD_ADDR_OWVAR 31
71792: PUSH
71793: LD_INT 1
71795: PPUSH
71796: LD_INT 3
71798: PPUSH
71799: CALL_OW 12
71803: PUSH
71804: LD_INT 1
71806: PPUSH
71807: LD_INT 3
71809: PPUSH
71810: CALL_OW 12
71814: PUSH
71815: LD_INT 0
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: ST_TO_ADDR
// animal := CreateHuman ;
71827: LD_ADDR_VAR 0 12
71831: PUSH
71832: CALL_OW 44
71836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71837: LD_VAR 0 12
71841: PPUSH
71842: LD_VAR 0 8
71846: PPUSH
71847: LD_INT 0
71849: PPUSH
71850: CALL 73636 0 3
// end ;
71854: GO 71752
71856: POP
71857: POP
// if enchidnas then
71858: LD_VAR 0 4
71862: IFFALSE 71929
// for i = 1 to enchidnas do
71864: LD_ADDR_VAR 0 11
71868: PUSH
71869: DOUBLE
71870: LD_INT 1
71872: DEC
71873: ST_TO_ADDR
71874: LD_VAR 0 4
71878: PUSH
71879: FOR_TO
71880: IFFALSE 71927
// begin hc_class = 13 ;
71882: LD_ADDR_OWVAR 28
71886: PUSH
71887: LD_INT 13
71889: ST_TO_ADDR
// hc_gallery =  ;
71890: LD_ADDR_OWVAR 33
71894: PUSH
71895: LD_STRING 
71897: ST_TO_ADDR
// animal := CreateHuman ;
71898: LD_ADDR_VAR 0 12
71902: PUSH
71903: CALL_OW 44
71907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71908: LD_VAR 0 12
71912: PPUSH
71913: LD_VAR 0 8
71917: PPUSH
71918: LD_INT 0
71920: PPUSH
71921: CALL 73636 0 3
// end ;
71925: GO 71879
71927: POP
71928: POP
// if fishes then
71929: LD_VAR 0 7
71933: IFFALSE 72000
// for i = 1 to fishes do
71935: LD_ADDR_VAR 0 11
71939: PUSH
71940: DOUBLE
71941: LD_INT 1
71943: DEC
71944: ST_TO_ADDR
71945: LD_VAR 0 7
71949: PUSH
71950: FOR_TO
71951: IFFALSE 71998
// begin hc_class = 20 ;
71953: LD_ADDR_OWVAR 28
71957: PUSH
71958: LD_INT 20
71960: ST_TO_ADDR
// hc_gallery =  ;
71961: LD_ADDR_OWVAR 33
71965: PUSH
71966: LD_STRING 
71968: ST_TO_ADDR
// animal := CreateHuman ;
71969: LD_ADDR_VAR 0 12
71973: PUSH
71974: CALL_OW 44
71978: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71979: LD_VAR 0 12
71983: PPUSH
71984: LD_VAR 0 9
71988: PPUSH
71989: LD_INT 0
71991: PPUSH
71992: CALL 73636 0 3
// end ;
71996: GO 71950
71998: POP
71999: POP
// end ;
72000: LD_VAR 0 10
72004: RET
// export function WantHeal ( sci , unit ) ; begin
72005: LD_INT 0
72007: PPUSH
// if GetTaskList ( sci ) > 0 then
72008: LD_VAR 0 1
72012: PPUSH
72013: CALL_OW 437
72017: PUSH
72018: LD_INT 0
72020: GREATER
72021: IFFALSE 72091
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 437
72032: PUSH
72033: LD_INT 1
72035: ARRAY
72036: PUSH
72037: LD_INT 1
72039: ARRAY
72040: PUSH
72041: LD_STRING l
72043: EQUAL
72044: PUSH
72045: LD_VAR 0 1
72049: PPUSH
72050: CALL_OW 437
72054: PUSH
72055: LD_INT 1
72057: ARRAY
72058: PUSH
72059: LD_INT 4
72061: ARRAY
72062: PUSH
72063: LD_VAR 0 2
72067: EQUAL
72068: AND
72069: IFFALSE 72081
// result := true else
72071: LD_ADDR_VAR 0 3
72075: PUSH
72076: LD_INT 1
72078: ST_TO_ADDR
72079: GO 72089
// result := false ;
72081: LD_ADDR_VAR 0 3
72085: PUSH
72086: LD_INT 0
72088: ST_TO_ADDR
// end else
72089: GO 72099
// result := false ;
72091: LD_ADDR_VAR 0 3
72095: PUSH
72096: LD_INT 0
72098: ST_TO_ADDR
// end ;
72099: LD_VAR 0 3
72103: RET
// export function HealTarget ( sci ) ; begin
72104: LD_INT 0
72106: PPUSH
// if not sci then
72107: LD_VAR 0 1
72111: NOT
72112: IFFALSE 72116
// exit ;
72114: GO 72181
// result := 0 ;
72116: LD_ADDR_VAR 0 2
72120: PUSH
72121: LD_INT 0
72123: ST_TO_ADDR
// if GetTaskList ( sci ) then
72124: LD_VAR 0 1
72128: PPUSH
72129: CALL_OW 437
72133: IFFALSE 72181
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72135: LD_VAR 0 1
72139: PPUSH
72140: CALL_OW 437
72144: PUSH
72145: LD_INT 1
72147: ARRAY
72148: PUSH
72149: LD_INT 1
72151: ARRAY
72152: PUSH
72153: LD_STRING l
72155: EQUAL
72156: IFFALSE 72181
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72158: LD_ADDR_VAR 0 2
72162: PUSH
72163: LD_VAR 0 1
72167: PPUSH
72168: CALL_OW 437
72172: PUSH
72173: LD_INT 1
72175: ARRAY
72176: PUSH
72177: LD_INT 4
72179: ARRAY
72180: ST_TO_ADDR
// end ;
72181: LD_VAR 0 2
72185: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72186: LD_INT 0
72188: PPUSH
72189: PPUSH
72190: PPUSH
72191: PPUSH
// if not base_units then
72192: LD_VAR 0 1
72196: NOT
72197: IFFALSE 72201
// exit ;
72199: GO 72288
// result := false ;
72201: LD_ADDR_VAR 0 2
72205: PUSH
72206: LD_INT 0
72208: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72209: LD_ADDR_VAR 0 5
72213: PUSH
72214: LD_VAR 0 1
72218: PPUSH
72219: LD_INT 21
72221: PUSH
72222: LD_INT 3
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PPUSH
72229: CALL_OW 72
72233: ST_TO_ADDR
// if not tmp then
72234: LD_VAR 0 5
72238: NOT
72239: IFFALSE 72243
// exit ;
72241: GO 72288
// for i in tmp do
72243: LD_ADDR_VAR 0 3
72247: PUSH
72248: LD_VAR 0 5
72252: PUSH
72253: FOR_IN
72254: IFFALSE 72286
// begin result := EnemyInRange ( i , 22 ) ;
72256: LD_ADDR_VAR 0 2
72260: PUSH
72261: LD_VAR 0 3
72265: PPUSH
72266: LD_INT 22
72268: PPUSH
72269: CALL 69957 0 2
72273: ST_TO_ADDR
// if result then
72274: LD_VAR 0 2
72278: IFFALSE 72284
// exit ;
72280: POP
72281: POP
72282: GO 72288
// end ;
72284: GO 72253
72286: POP
72287: POP
// end ;
72288: LD_VAR 0 2
72292: RET
// export function FilterByTag ( units , tag ) ; begin
72293: LD_INT 0
72295: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72296: LD_ADDR_VAR 0 3
72300: PUSH
72301: LD_VAR 0 1
72305: PPUSH
72306: LD_INT 120
72308: PUSH
72309: LD_VAR 0 2
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PPUSH
72318: CALL_OW 72
72322: ST_TO_ADDR
// end ;
72323: LD_VAR 0 3
72327: RET
// export function IsDriver ( un ) ; begin
72328: LD_INT 0
72330: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72331: LD_ADDR_VAR 0 2
72335: PUSH
72336: LD_VAR 0 1
72340: PUSH
72341: LD_INT 55
72343: PUSH
72344: EMPTY
72345: LIST
72346: PPUSH
72347: CALL_OW 69
72351: IN
72352: ST_TO_ADDR
// end ;
72353: LD_VAR 0 2
72357: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72358: LD_INT 0
72360: PPUSH
72361: PPUSH
// list := [ ] ;
72362: LD_ADDR_VAR 0 5
72366: PUSH
72367: EMPTY
72368: ST_TO_ADDR
// case d of 0 :
72369: LD_VAR 0 3
72373: PUSH
72374: LD_INT 0
72376: DOUBLE
72377: EQUAL
72378: IFTRUE 72382
72380: GO 72515
72382: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72383: LD_ADDR_VAR 0 5
72387: PUSH
72388: LD_VAR 0 1
72392: PUSH
72393: LD_INT 4
72395: MINUS
72396: PUSH
72397: LD_VAR 0 2
72401: PUSH
72402: LD_INT 4
72404: MINUS
72405: PUSH
72406: LD_INT 2
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: LIST
72413: PUSH
72414: LD_VAR 0 1
72418: PUSH
72419: LD_INT 3
72421: MINUS
72422: PUSH
72423: LD_VAR 0 2
72427: PUSH
72428: LD_INT 1
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: LIST
72435: PUSH
72436: LD_VAR 0 1
72440: PUSH
72441: LD_INT 4
72443: PLUS
72444: PUSH
72445: LD_VAR 0 2
72449: PUSH
72450: LD_INT 4
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: LIST
72457: PUSH
72458: LD_VAR 0 1
72462: PUSH
72463: LD_INT 3
72465: PLUS
72466: PUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_INT 3
72474: PLUS
72475: PUSH
72476: LD_INT 5
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: LIST
72483: PUSH
72484: LD_VAR 0 1
72488: PUSH
72489: LD_VAR 0 2
72493: PUSH
72494: LD_INT 4
72496: PLUS
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: ST_TO_ADDR
// end ; 1 :
72513: GO 73213
72515: LD_INT 1
72517: DOUBLE
72518: EQUAL
72519: IFTRUE 72523
72521: GO 72656
72523: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72524: LD_ADDR_VAR 0 5
72528: PUSH
72529: LD_VAR 0 1
72533: PUSH
72534: LD_VAR 0 2
72538: PUSH
72539: LD_INT 4
72541: MINUS
72542: PUSH
72543: LD_INT 3
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: PUSH
72551: LD_VAR 0 1
72555: PUSH
72556: LD_INT 3
72558: MINUS
72559: PUSH
72560: LD_VAR 0 2
72564: PUSH
72565: LD_INT 3
72567: MINUS
72568: PUSH
72569: LD_INT 2
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: LIST
72576: PUSH
72577: LD_VAR 0 1
72581: PUSH
72582: LD_INT 4
72584: MINUS
72585: PUSH
72586: LD_VAR 0 2
72590: PUSH
72591: LD_INT 1
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: LIST
72598: PUSH
72599: LD_VAR 0 1
72603: PUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_INT 3
72611: PLUS
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: PUSH
72621: LD_VAR 0 1
72625: PUSH
72626: LD_INT 4
72628: PLUS
72629: PUSH
72630: LD_VAR 0 2
72634: PUSH
72635: LD_INT 4
72637: PLUS
72638: PUSH
72639: LD_INT 5
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: ST_TO_ADDR
// end ; 2 :
72654: GO 73213
72656: LD_INT 2
72658: DOUBLE
72659: EQUAL
72660: IFTRUE 72664
72662: GO 72793
72664: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72665: LD_ADDR_VAR 0 5
72669: PUSH
72670: LD_VAR 0 1
72674: PUSH
72675: LD_VAR 0 2
72679: PUSH
72680: LD_INT 3
72682: MINUS
72683: PUSH
72684: LD_INT 3
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: PUSH
72692: LD_VAR 0 1
72696: PUSH
72697: LD_INT 4
72699: PLUS
72700: PUSH
72701: LD_VAR 0 2
72705: PUSH
72706: LD_INT 4
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: LIST
72713: PUSH
72714: LD_VAR 0 1
72718: PUSH
72719: LD_VAR 0 2
72723: PUSH
72724: LD_INT 4
72726: PLUS
72727: PUSH
72728: LD_INT 0
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: LIST
72735: PUSH
72736: LD_VAR 0 1
72740: PUSH
72741: LD_INT 3
72743: MINUS
72744: PUSH
72745: LD_VAR 0 2
72749: PUSH
72750: LD_INT 1
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: LIST
72757: PUSH
72758: LD_VAR 0 1
72762: PUSH
72763: LD_INT 4
72765: MINUS
72766: PUSH
72767: LD_VAR 0 2
72771: PUSH
72772: LD_INT 4
72774: MINUS
72775: PUSH
72776: LD_INT 2
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: ST_TO_ADDR
// end ; 3 :
72791: GO 73213
72793: LD_INT 3
72795: DOUBLE
72796: EQUAL
72797: IFTRUE 72801
72799: GO 72934
72801: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72802: LD_ADDR_VAR 0 5
72806: PUSH
72807: LD_VAR 0 1
72811: PUSH
72812: LD_INT 3
72814: PLUS
72815: PUSH
72816: LD_VAR 0 2
72820: PUSH
72821: LD_INT 4
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: LIST
72828: PUSH
72829: LD_VAR 0 1
72833: PUSH
72834: LD_INT 4
72836: PLUS
72837: PUSH
72838: LD_VAR 0 2
72842: PUSH
72843: LD_INT 4
72845: PLUS
72846: PUSH
72847: LD_INT 5
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: LIST
72854: PUSH
72855: LD_VAR 0 1
72859: PUSH
72860: LD_INT 4
72862: MINUS
72863: PUSH
72864: LD_VAR 0 2
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: LIST
72876: PUSH
72877: LD_VAR 0 1
72881: PUSH
72882: LD_VAR 0 2
72886: PUSH
72887: LD_INT 4
72889: MINUS
72890: PUSH
72891: LD_INT 3
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: LIST
72898: PUSH
72899: LD_VAR 0 1
72903: PUSH
72904: LD_INT 3
72906: MINUS
72907: PUSH
72908: LD_VAR 0 2
72912: PUSH
72913: LD_INT 3
72915: MINUS
72916: PUSH
72917: LD_INT 2
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: LIST
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: ST_TO_ADDR
// end ; 4 :
72932: GO 73213
72934: LD_INT 4
72936: DOUBLE
72937: EQUAL
72938: IFTRUE 72942
72940: GO 73075
72942: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72943: LD_ADDR_VAR 0 5
72947: PUSH
72948: LD_VAR 0 1
72952: PUSH
72953: LD_VAR 0 2
72957: PUSH
72958: LD_INT 4
72960: PLUS
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: LIST
72969: PUSH
72970: LD_VAR 0 1
72974: PUSH
72975: LD_INT 3
72977: PLUS
72978: PUSH
72979: LD_VAR 0 2
72983: PUSH
72984: LD_INT 3
72986: PLUS
72987: PUSH
72988: LD_INT 5
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: LIST
72995: PUSH
72996: LD_VAR 0 1
73000: PUSH
73001: LD_INT 4
73003: PLUS
73004: PUSH
73005: LD_VAR 0 2
73009: PUSH
73010: LD_INT 4
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: LIST
73017: PUSH
73018: LD_VAR 0 1
73022: PUSH
73023: LD_VAR 0 2
73027: PUSH
73028: LD_INT 3
73030: MINUS
73031: PUSH
73032: LD_INT 3
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: LIST
73039: PUSH
73040: LD_VAR 0 1
73044: PUSH
73045: LD_INT 4
73047: MINUS
73048: PUSH
73049: LD_VAR 0 2
73053: PUSH
73054: LD_INT 4
73056: MINUS
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: LIST
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: ST_TO_ADDR
// end ; 5 :
73073: GO 73213
73075: LD_INT 5
73077: DOUBLE
73078: EQUAL
73079: IFTRUE 73083
73081: GO 73212
73083: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73084: LD_ADDR_VAR 0 5
73088: PUSH
73089: LD_VAR 0 1
73093: PUSH
73094: LD_INT 4
73096: MINUS
73097: PUSH
73098: LD_VAR 0 2
73102: PUSH
73103: LD_INT 1
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: LIST
73110: PUSH
73111: LD_VAR 0 1
73115: PUSH
73116: LD_VAR 0 2
73120: PUSH
73121: LD_INT 4
73123: MINUS
73124: PUSH
73125: LD_INT 3
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: LIST
73132: PUSH
73133: LD_VAR 0 1
73137: PUSH
73138: LD_INT 4
73140: PLUS
73141: PUSH
73142: LD_VAR 0 2
73146: PUSH
73147: LD_INT 4
73149: PLUS
73150: PUSH
73151: LD_INT 5
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: LIST
73158: PUSH
73159: LD_VAR 0 1
73163: PUSH
73164: LD_INT 3
73166: PLUS
73167: PUSH
73168: LD_VAR 0 2
73172: PUSH
73173: LD_INT 4
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: LIST
73180: PUSH
73181: LD_VAR 0 1
73185: PUSH
73186: LD_VAR 0 2
73190: PUSH
73191: LD_INT 3
73193: PLUS
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: LIST
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: ST_TO_ADDR
// end ; end ;
73210: GO 73213
73212: POP
// result := list ;
73213: LD_ADDR_VAR 0 4
73217: PUSH
73218: LD_VAR 0 5
73222: ST_TO_ADDR
// end ;
73223: LD_VAR 0 4
73227: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73228: LD_INT 0
73230: PPUSH
73231: PPUSH
73232: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73233: LD_VAR 0 1
73237: NOT
73238: PUSH
73239: LD_VAR 0 2
73243: PUSH
73244: LD_INT 1
73246: PUSH
73247: LD_INT 2
73249: PUSH
73250: LD_INT 3
73252: PUSH
73253: LD_INT 4
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: IN
73262: NOT
73263: OR
73264: IFFALSE 73268
// exit ;
73266: GO 73360
// tmp := [ ] ;
73268: LD_ADDR_VAR 0 5
73272: PUSH
73273: EMPTY
73274: ST_TO_ADDR
// for i in units do
73275: LD_ADDR_VAR 0 4
73279: PUSH
73280: LD_VAR 0 1
73284: PUSH
73285: FOR_IN
73286: IFFALSE 73329
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73288: LD_ADDR_VAR 0 5
73292: PUSH
73293: LD_VAR 0 5
73297: PPUSH
73298: LD_VAR 0 5
73302: PUSH
73303: LD_INT 1
73305: PLUS
73306: PPUSH
73307: LD_VAR 0 4
73311: PPUSH
73312: LD_VAR 0 2
73316: PPUSH
73317: CALL_OW 259
73321: PPUSH
73322: CALL_OW 2
73326: ST_TO_ADDR
73327: GO 73285
73329: POP
73330: POP
// if not tmp then
73331: LD_VAR 0 5
73335: NOT
73336: IFFALSE 73340
// exit ;
73338: GO 73360
// result := SortListByListDesc ( units , tmp ) ;
73340: LD_ADDR_VAR 0 3
73344: PUSH
73345: LD_VAR 0 1
73349: PPUSH
73350: LD_VAR 0 5
73354: PPUSH
73355: CALL_OW 77
73359: ST_TO_ADDR
// end ;
73360: LD_VAR 0 3
73364: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73365: LD_INT 0
73367: PPUSH
73368: PPUSH
73369: PPUSH
// result := false ;
73370: LD_ADDR_VAR 0 3
73374: PUSH
73375: LD_INT 0
73377: ST_TO_ADDR
// x := GetX ( building ) ;
73378: LD_ADDR_VAR 0 4
73382: PUSH
73383: LD_VAR 0 2
73387: PPUSH
73388: CALL_OW 250
73392: ST_TO_ADDR
// y := GetY ( building ) ;
73393: LD_ADDR_VAR 0 5
73397: PUSH
73398: LD_VAR 0 2
73402: PPUSH
73403: CALL_OW 251
73407: ST_TO_ADDR
// if not building or not x or not y then
73408: LD_VAR 0 2
73412: NOT
73413: PUSH
73414: LD_VAR 0 4
73418: NOT
73419: OR
73420: PUSH
73421: LD_VAR 0 5
73425: NOT
73426: OR
73427: IFFALSE 73431
// exit ;
73429: GO 73523
// if GetTaskList ( unit ) then
73431: LD_VAR 0 1
73435: PPUSH
73436: CALL_OW 437
73440: IFFALSE 73523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73442: LD_STRING e
73444: PUSH
73445: LD_VAR 0 1
73449: PPUSH
73450: CALL_OW 437
73454: PUSH
73455: LD_INT 1
73457: ARRAY
73458: PUSH
73459: LD_INT 1
73461: ARRAY
73462: EQUAL
73463: PUSH
73464: LD_VAR 0 4
73468: PUSH
73469: LD_VAR 0 1
73473: PPUSH
73474: CALL_OW 437
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PUSH
73483: LD_INT 2
73485: ARRAY
73486: EQUAL
73487: AND
73488: PUSH
73489: LD_VAR 0 5
73493: PUSH
73494: LD_VAR 0 1
73498: PPUSH
73499: CALL_OW 437
73503: PUSH
73504: LD_INT 1
73506: ARRAY
73507: PUSH
73508: LD_INT 3
73510: ARRAY
73511: EQUAL
73512: AND
73513: IFFALSE 73523
// result := true end ;
73515: LD_ADDR_VAR 0 3
73519: PUSH
73520: LD_INT 1
73522: ST_TO_ADDR
// end ;
73523: LD_VAR 0 3
73527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73528: LD_INT 0
73530: PPUSH
// result := false ;
73531: LD_ADDR_VAR 0 4
73535: PUSH
73536: LD_INT 0
73538: ST_TO_ADDR
// if GetTaskList ( unit ) then
73539: LD_VAR 0 1
73543: PPUSH
73544: CALL_OW 437
73548: IFFALSE 73631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73550: LD_STRING M
73552: PUSH
73553: LD_VAR 0 1
73557: PPUSH
73558: CALL_OW 437
73562: PUSH
73563: LD_INT 1
73565: ARRAY
73566: PUSH
73567: LD_INT 1
73569: ARRAY
73570: EQUAL
73571: PUSH
73572: LD_VAR 0 2
73576: PUSH
73577: LD_VAR 0 1
73581: PPUSH
73582: CALL_OW 437
73586: PUSH
73587: LD_INT 1
73589: ARRAY
73590: PUSH
73591: LD_INT 2
73593: ARRAY
73594: EQUAL
73595: AND
73596: PUSH
73597: LD_VAR 0 3
73601: PUSH
73602: LD_VAR 0 1
73606: PPUSH
73607: CALL_OW 437
73611: PUSH
73612: LD_INT 1
73614: ARRAY
73615: PUSH
73616: LD_INT 3
73618: ARRAY
73619: EQUAL
73620: AND
73621: IFFALSE 73631
// result := true ;
73623: LD_ADDR_VAR 0 4
73627: PUSH
73628: LD_INT 1
73630: ST_TO_ADDR
// end ; end ;
73631: LD_VAR 0 4
73635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73636: LD_INT 0
73638: PPUSH
73639: PPUSH
73640: PPUSH
73641: PPUSH
// if not unit or not area then
73642: LD_VAR 0 1
73646: NOT
73647: PUSH
73648: LD_VAR 0 2
73652: NOT
73653: OR
73654: IFFALSE 73658
// exit ;
73656: GO 73822
// tmp := AreaToList ( area , i ) ;
73658: LD_ADDR_VAR 0 6
73662: PUSH
73663: LD_VAR 0 2
73667: PPUSH
73668: LD_VAR 0 5
73672: PPUSH
73673: CALL_OW 517
73677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73678: LD_ADDR_VAR 0 5
73682: PUSH
73683: DOUBLE
73684: LD_INT 1
73686: DEC
73687: ST_TO_ADDR
73688: LD_VAR 0 6
73692: PUSH
73693: LD_INT 1
73695: ARRAY
73696: PUSH
73697: FOR_TO
73698: IFFALSE 73820
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73700: LD_ADDR_VAR 0 7
73704: PUSH
73705: LD_VAR 0 6
73709: PUSH
73710: LD_INT 1
73712: ARRAY
73713: PUSH
73714: LD_VAR 0 5
73718: ARRAY
73719: PUSH
73720: LD_VAR 0 6
73724: PUSH
73725: LD_INT 2
73727: ARRAY
73728: PUSH
73729: LD_VAR 0 5
73733: ARRAY
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73739: LD_VAR 0 7
73743: PUSH
73744: LD_INT 1
73746: ARRAY
73747: PPUSH
73748: LD_VAR 0 7
73752: PUSH
73753: LD_INT 2
73755: ARRAY
73756: PPUSH
73757: CALL_OW 428
73761: PUSH
73762: LD_INT 0
73764: EQUAL
73765: IFFALSE 73818
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73767: LD_VAR 0 1
73771: PPUSH
73772: LD_VAR 0 7
73776: PUSH
73777: LD_INT 1
73779: ARRAY
73780: PPUSH
73781: LD_VAR 0 7
73785: PUSH
73786: LD_INT 2
73788: ARRAY
73789: PPUSH
73790: LD_VAR 0 3
73794: PPUSH
73795: CALL_OW 48
// result := IsPlaced ( unit ) ;
73799: LD_ADDR_VAR 0 4
73803: PUSH
73804: LD_VAR 0 1
73808: PPUSH
73809: CALL_OW 305
73813: ST_TO_ADDR
// exit ;
73814: POP
73815: POP
73816: GO 73822
// end ; end ;
73818: GO 73697
73820: POP
73821: POP
// end ;
73822: LD_VAR 0 4
73826: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73827: LD_INT 0
73829: PPUSH
73830: PPUSH
73831: PPUSH
// if not side or side > 8 then
73832: LD_VAR 0 1
73836: NOT
73837: PUSH
73838: LD_VAR 0 1
73842: PUSH
73843: LD_INT 8
73845: GREATER
73846: OR
73847: IFFALSE 73851
// exit ;
73849: GO 74038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73851: LD_ADDR_VAR 0 4
73855: PUSH
73856: LD_INT 22
73858: PUSH
73859: LD_VAR 0 1
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 21
73870: PUSH
73871: LD_INT 3
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PPUSH
73882: CALL_OW 69
73886: ST_TO_ADDR
// if not tmp then
73887: LD_VAR 0 4
73891: NOT
73892: IFFALSE 73896
// exit ;
73894: GO 74038
// enable_addtolog := true ;
73896: LD_ADDR_OWVAR 81
73900: PUSH
73901: LD_INT 1
73903: ST_TO_ADDR
// AddToLog ( [ ) ;
73904: LD_STRING [
73906: PPUSH
73907: CALL_OW 561
// for i in tmp do
73911: LD_ADDR_VAR 0 3
73915: PUSH
73916: LD_VAR 0 4
73920: PUSH
73921: FOR_IN
73922: IFFALSE 74029
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73924: LD_STRING [
73926: PUSH
73927: LD_VAR 0 3
73931: PPUSH
73932: CALL_OW 266
73936: STR
73937: PUSH
73938: LD_STRING , 
73940: STR
73941: PUSH
73942: LD_VAR 0 3
73946: PPUSH
73947: CALL_OW 250
73951: STR
73952: PUSH
73953: LD_STRING , 
73955: STR
73956: PUSH
73957: LD_VAR 0 3
73961: PPUSH
73962: CALL_OW 251
73966: STR
73967: PUSH
73968: LD_STRING , 
73970: STR
73971: PUSH
73972: LD_VAR 0 3
73976: PPUSH
73977: CALL_OW 254
73981: STR
73982: PUSH
73983: LD_STRING , 
73985: STR
73986: PUSH
73987: LD_VAR 0 3
73991: PPUSH
73992: LD_INT 1
73994: PPUSH
73995: CALL_OW 268
73999: STR
74000: PUSH
74001: LD_STRING , 
74003: STR
74004: PUSH
74005: LD_VAR 0 3
74009: PPUSH
74010: LD_INT 2
74012: PPUSH
74013: CALL_OW 268
74017: STR
74018: PUSH
74019: LD_STRING ],
74021: STR
74022: PPUSH
74023: CALL_OW 561
// end ;
74027: GO 73921
74029: POP
74030: POP
// AddToLog ( ]; ) ;
74031: LD_STRING ];
74033: PPUSH
74034: CALL_OW 561
// end ;
74038: LD_VAR 0 2
74042: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74043: LD_INT 0
74045: PPUSH
74046: PPUSH
74047: PPUSH
74048: PPUSH
74049: PPUSH
// if not area or not rate or not max then
74050: LD_VAR 0 1
74054: NOT
74055: PUSH
74056: LD_VAR 0 2
74060: NOT
74061: OR
74062: PUSH
74063: LD_VAR 0 4
74067: NOT
74068: OR
74069: IFFALSE 74073
// exit ;
74071: GO 74262
// while 1 do
74073: LD_INT 1
74075: IFFALSE 74262
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74077: LD_ADDR_VAR 0 9
74081: PUSH
74082: LD_VAR 0 1
74086: PPUSH
74087: LD_INT 1
74089: PPUSH
74090: CALL_OW 287
74094: PUSH
74095: LD_INT 10
74097: MUL
74098: ST_TO_ADDR
// r := rate / 10 ;
74099: LD_ADDR_VAR 0 7
74103: PUSH
74104: LD_VAR 0 2
74108: PUSH
74109: LD_INT 10
74111: DIVREAL
74112: ST_TO_ADDR
// time := 1 1$00 ;
74113: LD_ADDR_VAR 0 8
74117: PUSH
74118: LD_INT 2100
74120: ST_TO_ADDR
// if amount < min then
74121: LD_VAR 0 9
74125: PUSH
74126: LD_VAR 0 3
74130: LESS
74131: IFFALSE 74149
// r := r * 2 else
74133: LD_ADDR_VAR 0 7
74137: PUSH
74138: LD_VAR 0 7
74142: PUSH
74143: LD_INT 2
74145: MUL
74146: ST_TO_ADDR
74147: GO 74175
// if amount > max then
74149: LD_VAR 0 9
74153: PUSH
74154: LD_VAR 0 4
74158: GREATER
74159: IFFALSE 74175
// r := r / 2 ;
74161: LD_ADDR_VAR 0 7
74165: PUSH
74166: LD_VAR 0 7
74170: PUSH
74171: LD_INT 2
74173: DIVREAL
74174: ST_TO_ADDR
// time := time / r ;
74175: LD_ADDR_VAR 0 8
74179: PUSH
74180: LD_VAR 0 8
74184: PUSH
74185: LD_VAR 0 7
74189: DIVREAL
74190: ST_TO_ADDR
// if time < 0 then
74191: LD_VAR 0 8
74195: PUSH
74196: LD_INT 0
74198: LESS
74199: IFFALSE 74216
// time := time * - 1 ;
74201: LD_ADDR_VAR 0 8
74205: PUSH
74206: LD_VAR 0 8
74210: PUSH
74211: LD_INT 1
74213: NEG
74214: MUL
74215: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74216: LD_VAR 0 8
74220: PUSH
74221: LD_INT 35
74223: PPUSH
74224: LD_INT 875
74226: PPUSH
74227: CALL_OW 12
74231: PLUS
74232: PPUSH
74233: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74237: LD_INT 1
74239: PPUSH
74240: LD_INT 5
74242: PPUSH
74243: CALL_OW 12
74247: PPUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: LD_INT 1
74255: PPUSH
74256: CALL_OW 55
// end ;
74260: GO 74073
// end ;
74262: LD_VAR 0 5
74266: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74267: LD_INT 0
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
74274: PPUSH
74275: PPUSH
74276: PPUSH
// if not turrets or not factories then
74277: LD_VAR 0 1
74281: NOT
74282: PUSH
74283: LD_VAR 0 2
74287: NOT
74288: OR
74289: IFFALSE 74293
// exit ;
74291: GO 74600
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74293: LD_ADDR_VAR 0 10
74297: PUSH
74298: LD_INT 5
74300: PUSH
74301: LD_INT 6
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 2
74310: PUSH
74311: LD_INT 4
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 3
74320: PUSH
74321: LD_INT 5
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 24
74335: PUSH
74336: LD_INT 25
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 23
74345: PUSH
74346: LD_INT 27
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_INT 42
74359: PUSH
74360: LD_INT 43
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 44
74369: PUSH
74370: LD_INT 46
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 45
74379: PUSH
74380: LD_INT 47
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: LIST
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: ST_TO_ADDR
// result := [ ] ;
74397: LD_ADDR_VAR 0 3
74401: PUSH
74402: EMPTY
74403: ST_TO_ADDR
// for i in turrets do
74404: LD_ADDR_VAR 0 4
74408: PUSH
74409: LD_VAR 0 1
74413: PUSH
74414: FOR_IN
74415: IFFALSE 74598
// begin nat := GetNation ( i ) ;
74417: LD_ADDR_VAR 0 7
74421: PUSH
74422: LD_VAR 0 4
74426: PPUSH
74427: CALL_OW 248
74431: ST_TO_ADDR
// weapon := 0 ;
74432: LD_ADDR_VAR 0 8
74436: PUSH
74437: LD_INT 0
74439: ST_TO_ADDR
// if not nat then
74440: LD_VAR 0 7
74444: NOT
74445: IFFALSE 74449
// continue ;
74447: GO 74414
// for j in list [ nat ] do
74449: LD_ADDR_VAR 0 5
74453: PUSH
74454: LD_VAR 0 10
74458: PUSH
74459: LD_VAR 0 7
74463: ARRAY
74464: PUSH
74465: FOR_IN
74466: IFFALSE 74507
// if GetBWeapon ( i ) = j [ 1 ] then
74468: LD_VAR 0 4
74472: PPUSH
74473: CALL_OW 269
74477: PUSH
74478: LD_VAR 0 5
74482: PUSH
74483: LD_INT 1
74485: ARRAY
74486: EQUAL
74487: IFFALSE 74505
// begin weapon := j [ 2 ] ;
74489: LD_ADDR_VAR 0 8
74493: PUSH
74494: LD_VAR 0 5
74498: PUSH
74499: LD_INT 2
74501: ARRAY
74502: ST_TO_ADDR
// break ;
74503: GO 74507
// end ;
74505: GO 74465
74507: POP
74508: POP
// if not weapon then
74509: LD_VAR 0 8
74513: NOT
74514: IFFALSE 74518
// continue ;
74516: GO 74414
// for k in factories do
74518: LD_ADDR_VAR 0 6
74522: PUSH
74523: LD_VAR 0 2
74527: PUSH
74528: FOR_IN
74529: IFFALSE 74594
// begin weapons := AvailableWeaponList ( k ) ;
74531: LD_ADDR_VAR 0 9
74535: PUSH
74536: LD_VAR 0 6
74540: PPUSH
74541: CALL_OW 478
74545: ST_TO_ADDR
// if not weapons then
74546: LD_VAR 0 9
74550: NOT
74551: IFFALSE 74555
// continue ;
74553: GO 74528
// if weapon in weapons then
74555: LD_VAR 0 8
74559: PUSH
74560: LD_VAR 0 9
74564: IN
74565: IFFALSE 74592
// begin result := [ i , weapon ] ;
74567: LD_ADDR_VAR 0 3
74571: PUSH
74572: LD_VAR 0 4
74576: PUSH
74577: LD_VAR 0 8
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: ST_TO_ADDR
// exit ;
74586: POP
74587: POP
74588: POP
74589: POP
74590: GO 74600
// end ; end ;
74592: GO 74528
74594: POP
74595: POP
// end ;
74596: GO 74414
74598: POP
74599: POP
// end ;
74600: LD_VAR 0 3
74604: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74605: LD_INT 0
74607: PPUSH
// if not side or side > 8 then
74608: LD_VAR 0 3
74612: NOT
74613: PUSH
74614: LD_VAR 0 3
74618: PUSH
74619: LD_INT 8
74621: GREATER
74622: OR
74623: IFFALSE 74627
// exit ;
74625: GO 74686
// if not range then
74627: LD_VAR 0 4
74631: NOT
74632: IFFALSE 74643
// range := - 12 ;
74634: LD_ADDR_VAR 0 4
74638: PUSH
74639: LD_INT 12
74641: NEG
74642: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74643: LD_VAR 0 1
74647: PPUSH
74648: LD_VAR 0 2
74652: PPUSH
74653: LD_VAR 0 3
74657: PPUSH
74658: LD_VAR 0 4
74662: PPUSH
74663: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74667: LD_VAR 0 1
74671: PPUSH
74672: LD_VAR 0 2
74676: PPUSH
74677: LD_VAR 0 3
74681: PPUSH
74682: CALL_OW 331
// end ;
74686: LD_VAR 0 5
74690: RET
// export function Video ( mode ) ; begin
74691: LD_INT 0
74693: PPUSH
// ingame_video = mode ;
74694: LD_ADDR_OWVAR 52
74698: PUSH
74699: LD_VAR 0 1
74703: ST_TO_ADDR
// interface_hidden = mode ;
74704: LD_ADDR_OWVAR 54
74708: PUSH
74709: LD_VAR 0 1
74713: ST_TO_ADDR
// end ;
74714: LD_VAR 0 2
74718: RET
// export function Join ( array , element ) ; begin
74719: LD_INT 0
74721: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74722: LD_ADDR_VAR 0 3
74726: PUSH
74727: LD_VAR 0 1
74731: PPUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_INT 1
74739: PLUS
74740: PPUSH
74741: LD_VAR 0 2
74745: PPUSH
74746: CALL_OW 1
74750: ST_TO_ADDR
// end ;
74751: LD_VAR 0 3
74755: RET
// export function JoinUnion ( array , element ) ; begin
74756: LD_INT 0
74758: PPUSH
// result := array union element ;
74759: LD_ADDR_VAR 0 3
74763: PUSH
74764: LD_VAR 0 1
74768: PUSH
74769: LD_VAR 0 2
74773: UNION
74774: ST_TO_ADDR
// end ;
74775: LD_VAR 0 3
74779: RET
// export function GetBehemoths ( side ) ; begin
74780: LD_INT 0
74782: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74783: LD_ADDR_VAR 0 2
74787: PUSH
74788: LD_INT 22
74790: PUSH
74791: LD_VAR 0 1
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: PUSH
74800: LD_INT 31
74802: PUSH
74803: LD_INT 25
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PPUSH
74814: CALL_OW 69
74818: ST_TO_ADDR
// end ;
74819: LD_VAR 0 2
74823: RET
// export function Shuffle ( array ) ; var i , index ; begin
74824: LD_INT 0
74826: PPUSH
74827: PPUSH
74828: PPUSH
// result := [ ] ;
74829: LD_ADDR_VAR 0 2
74833: PUSH
74834: EMPTY
74835: ST_TO_ADDR
// if not array then
74836: LD_VAR 0 1
74840: NOT
74841: IFFALSE 74845
// exit ;
74843: GO 74944
// Randomize ;
74845: CALL_OW 10
// for i = array downto 1 do
74849: LD_ADDR_VAR 0 3
74853: PUSH
74854: DOUBLE
74855: LD_VAR 0 1
74859: INC
74860: ST_TO_ADDR
74861: LD_INT 1
74863: PUSH
74864: FOR_DOWNTO
74865: IFFALSE 74942
// begin index := rand ( 1 , array ) ;
74867: LD_ADDR_VAR 0 4
74871: PUSH
74872: LD_INT 1
74874: PPUSH
74875: LD_VAR 0 1
74879: PPUSH
74880: CALL_OW 12
74884: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74885: LD_ADDR_VAR 0 2
74889: PUSH
74890: LD_VAR 0 2
74894: PPUSH
74895: LD_VAR 0 2
74899: PUSH
74900: LD_INT 1
74902: PLUS
74903: PPUSH
74904: LD_VAR 0 1
74908: PUSH
74909: LD_VAR 0 4
74913: ARRAY
74914: PPUSH
74915: CALL_OW 2
74919: ST_TO_ADDR
// array := Delete ( array , index ) ;
74920: LD_ADDR_VAR 0 1
74924: PUSH
74925: LD_VAR 0 1
74929: PPUSH
74930: LD_VAR 0 4
74934: PPUSH
74935: CALL_OW 3
74939: ST_TO_ADDR
// end ;
74940: GO 74864
74942: POP
74943: POP
// end ;
74944: LD_VAR 0 2
74948: RET
// export function GetBaseMaterials ( base ) ; begin
74949: LD_INT 0
74951: PPUSH
// result := [ 0 , 0 , 0 ] ;
74952: LD_ADDR_VAR 0 2
74956: PUSH
74957: LD_INT 0
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: LD_INT 0
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: ST_TO_ADDR
// if not base then
74971: LD_VAR 0 1
74975: NOT
74976: IFFALSE 74980
// exit ;
74978: GO 75029
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74980: LD_ADDR_VAR 0 2
74984: PUSH
74985: LD_VAR 0 1
74989: PPUSH
74990: LD_INT 1
74992: PPUSH
74993: CALL_OW 275
74997: PUSH
74998: LD_VAR 0 1
75002: PPUSH
75003: LD_INT 2
75005: PPUSH
75006: CALL_OW 275
75010: PUSH
75011: LD_VAR 0 1
75015: PPUSH
75016: LD_INT 3
75018: PPUSH
75019: CALL_OW 275
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: ST_TO_ADDR
// end ;
75029: LD_VAR 0 2
75033: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75034: LD_INT 0
75036: PPUSH
75037: PPUSH
// result := array ;
75038: LD_ADDR_VAR 0 3
75042: PUSH
75043: LD_VAR 0 1
75047: ST_TO_ADDR
// if size >= result then
75048: LD_VAR 0 2
75052: PUSH
75053: LD_VAR 0 3
75057: GREATEREQUAL
75058: IFFALSE 75062
// exit ;
75060: GO 75112
// if size then
75062: LD_VAR 0 2
75066: IFFALSE 75112
// for i := array downto size do
75068: LD_ADDR_VAR 0 4
75072: PUSH
75073: DOUBLE
75074: LD_VAR 0 1
75078: INC
75079: ST_TO_ADDR
75080: LD_VAR 0 2
75084: PUSH
75085: FOR_DOWNTO
75086: IFFALSE 75110
// result := Delete ( result , result ) ;
75088: LD_ADDR_VAR 0 3
75092: PUSH
75093: LD_VAR 0 3
75097: PPUSH
75098: LD_VAR 0 3
75102: PPUSH
75103: CALL_OW 3
75107: ST_TO_ADDR
75108: GO 75085
75110: POP
75111: POP
// end ;
75112: LD_VAR 0 3
75116: RET
// export function ComExit ( unit ) ; var tmp ; begin
75117: LD_INT 0
75119: PPUSH
75120: PPUSH
// if not IsInUnit ( unit ) then
75121: LD_VAR 0 1
75125: PPUSH
75126: CALL_OW 310
75130: NOT
75131: IFFALSE 75135
// exit ;
75133: GO 75195
// tmp := IsInUnit ( unit ) ;
75135: LD_ADDR_VAR 0 3
75139: PUSH
75140: LD_VAR 0 1
75144: PPUSH
75145: CALL_OW 310
75149: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75150: LD_VAR 0 3
75154: PPUSH
75155: CALL_OW 247
75159: PUSH
75160: LD_INT 2
75162: EQUAL
75163: IFFALSE 75176
// ComExitVehicle ( unit ) else
75165: LD_VAR 0 1
75169: PPUSH
75170: CALL_OW 121
75174: GO 75185
// ComExitBuilding ( unit ) ;
75176: LD_VAR 0 1
75180: PPUSH
75181: CALL_OW 122
// result := tmp ;
75185: LD_ADDR_VAR 0 2
75189: PUSH
75190: LD_VAR 0 3
75194: ST_TO_ADDR
// end ;
75195: LD_VAR 0 2
75199: RET
// export function ComExitAll ( units ) ; var i ; begin
75200: LD_INT 0
75202: PPUSH
75203: PPUSH
// if not units then
75204: LD_VAR 0 1
75208: NOT
75209: IFFALSE 75213
// exit ;
75211: GO 75239
// for i in units do
75213: LD_ADDR_VAR 0 3
75217: PUSH
75218: LD_VAR 0 1
75222: PUSH
75223: FOR_IN
75224: IFFALSE 75237
// ComExit ( i ) ;
75226: LD_VAR 0 3
75230: PPUSH
75231: CALL 75117 0 1
75235: GO 75223
75237: POP
75238: POP
// end ;
75239: LD_VAR 0 2
75243: RET
// export function ResetHc ; begin
75244: LD_INT 0
75246: PPUSH
// InitHc ;
75247: CALL_OW 19
// hc_importance := 0 ;
75251: LD_ADDR_OWVAR 32
75255: PUSH
75256: LD_INT 0
75258: ST_TO_ADDR
// end ;
75259: LD_VAR 0 1
75263: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75264: LD_INT 0
75266: PPUSH
75267: PPUSH
75268: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75269: LD_ADDR_VAR 0 6
75273: PUSH
75274: LD_VAR 0 1
75278: PUSH
75279: LD_VAR 0 3
75283: PLUS
75284: PUSH
75285: LD_INT 2
75287: DIV
75288: ST_TO_ADDR
// if _x < 0 then
75289: LD_VAR 0 6
75293: PUSH
75294: LD_INT 0
75296: LESS
75297: IFFALSE 75314
// _x := _x * - 1 ;
75299: LD_ADDR_VAR 0 6
75303: PUSH
75304: LD_VAR 0 6
75308: PUSH
75309: LD_INT 1
75311: NEG
75312: MUL
75313: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75314: LD_ADDR_VAR 0 7
75318: PUSH
75319: LD_VAR 0 2
75323: PUSH
75324: LD_VAR 0 4
75328: PLUS
75329: PUSH
75330: LD_INT 2
75332: DIV
75333: ST_TO_ADDR
// if _y < 0 then
75334: LD_VAR 0 7
75338: PUSH
75339: LD_INT 0
75341: LESS
75342: IFFALSE 75359
// _y := _y * - 1 ;
75344: LD_ADDR_VAR 0 7
75348: PUSH
75349: LD_VAR 0 7
75353: PUSH
75354: LD_INT 1
75356: NEG
75357: MUL
75358: ST_TO_ADDR
// result := [ _x , _y ] ;
75359: LD_ADDR_VAR 0 5
75363: PUSH
75364: LD_VAR 0 6
75368: PUSH
75369: LD_VAR 0 7
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: ST_TO_ADDR
// end ;
75378: LD_VAR 0 5
75382: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75383: LD_INT 0
75385: PPUSH
75386: PPUSH
75387: PPUSH
75388: PPUSH
// task := GetTaskList ( unit ) ;
75389: LD_ADDR_VAR 0 7
75393: PUSH
75394: LD_VAR 0 1
75398: PPUSH
75399: CALL_OW 437
75403: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75404: LD_VAR 0 7
75408: NOT
75409: PUSH
75410: LD_VAR 0 1
75414: PPUSH
75415: LD_VAR 0 2
75419: PPUSH
75420: CALL_OW 308
75424: NOT
75425: AND
75426: IFFALSE 75430
// exit ;
75428: GO 75548
// if IsInArea ( unit , area ) then
75430: LD_VAR 0 1
75434: PPUSH
75435: LD_VAR 0 2
75439: PPUSH
75440: CALL_OW 308
75444: IFFALSE 75462
// begin ComMoveToArea ( unit , goAway ) ;
75446: LD_VAR 0 1
75450: PPUSH
75451: LD_VAR 0 3
75455: PPUSH
75456: CALL_OW 113
// exit ;
75460: GO 75548
// end ; if task [ 1 ] [ 1 ] <> M then
75462: LD_VAR 0 7
75466: PUSH
75467: LD_INT 1
75469: ARRAY
75470: PUSH
75471: LD_INT 1
75473: ARRAY
75474: PUSH
75475: LD_STRING M
75477: NONEQUAL
75478: IFFALSE 75482
// exit ;
75480: GO 75548
// x := task [ 1 ] [ 2 ] ;
75482: LD_ADDR_VAR 0 5
75486: PUSH
75487: LD_VAR 0 7
75491: PUSH
75492: LD_INT 1
75494: ARRAY
75495: PUSH
75496: LD_INT 2
75498: ARRAY
75499: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75500: LD_ADDR_VAR 0 6
75504: PUSH
75505: LD_VAR 0 7
75509: PUSH
75510: LD_INT 1
75512: ARRAY
75513: PUSH
75514: LD_INT 3
75516: ARRAY
75517: ST_TO_ADDR
// if InArea ( x , y , area ) then
75518: LD_VAR 0 5
75522: PPUSH
75523: LD_VAR 0 6
75527: PPUSH
75528: LD_VAR 0 2
75532: PPUSH
75533: CALL_OW 309
75537: IFFALSE 75548
// ComStop ( unit ) ;
75539: LD_VAR 0 1
75543: PPUSH
75544: CALL_OW 141
// end ;
75548: LD_VAR 0 4
75552: RET
// export function Abs ( value ) ; begin
75553: LD_INT 0
75555: PPUSH
// result := value ;
75556: LD_ADDR_VAR 0 2
75560: PUSH
75561: LD_VAR 0 1
75565: ST_TO_ADDR
// if value < 0 then
75566: LD_VAR 0 1
75570: PUSH
75571: LD_INT 0
75573: LESS
75574: IFFALSE 75591
// result := value * - 1 ;
75576: LD_ADDR_VAR 0 2
75580: PUSH
75581: LD_VAR 0 1
75585: PUSH
75586: LD_INT 1
75588: NEG
75589: MUL
75590: ST_TO_ADDR
// end ;
75591: LD_VAR 0 2
75595: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75596: LD_INT 0
75598: PPUSH
75599: PPUSH
75600: PPUSH
75601: PPUSH
75602: PPUSH
75603: PPUSH
75604: PPUSH
75605: PPUSH
// if not unit or not building then
75606: LD_VAR 0 1
75610: NOT
75611: PUSH
75612: LD_VAR 0 2
75616: NOT
75617: OR
75618: IFFALSE 75622
// exit ;
75620: GO 75848
// x := GetX ( building ) ;
75622: LD_ADDR_VAR 0 4
75626: PUSH
75627: LD_VAR 0 2
75631: PPUSH
75632: CALL_OW 250
75636: ST_TO_ADDR
// y := GetY ( building ) ;
75637: LD_ADDR_VAR 0 6
75641: PUSH
75642: LD_VAR 0 2
75646: PPUSH
75647: CALL_OW 251
75651: ST_TO_ADDR
// d := GetDir ( building ) ;
75652: LD_ADDR_VAR 0 8
75656: PUSH
75657: LD_VAR 0 2
75661: PPUSH
75662: CALL_OW 254
75666: ST_TO_ADDR
// r := 4 ;
75667: LD_ADDR_VAR 0 9
75671: PUSH
75672: LD_INT 4
75674: ST_TO_ADDR
// for i := 1 to 5 do
75675: LD_ADDR_VAR 0 10
75679: PUSH
75680: DOUBLE
75681: LD_INT 1
75683: DEC
75684: ST_TO_ADDR
75685: LD_INT 5
75687: PUSH
75688: FOR_TO
75689: IFFALSE 75846
// begin _x := ShiftX ( x , d , r + i ) ;
75691: LD_ADDR_VAR 0 5
75695: PUSH
75696: LD_VAR 0 4
75700: PPUSH
75701: LD_VAR 0 8
75705: PPUSH
75706: LD_VAR 0 9
75710: PUSH
75711: LD_VAR 0 10
75715: PLUS
75716: PPUSH
75717: CALL_OW 272
75721: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75722: LD_ADDR_VAR 0 7
75726: PUSH
75727: LD_VAR 0 6
75731: PPUSH
75732: LD_VAR 0 8
75736: PPUSH
75737: LD_VAR 0 9
75741: PUSH
75742: LD_VAR 0 10
75746: PLUS
75747: PPUSH
75748: CALL_OW 273
75752: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75753: LD_VAR 0 5
75757: PPUSH
75758: LD_VAR 0 7
75762: PPUSH
75763: CALL_OW 488
75767: PUSH
75768: LD_VAR 0 5
75772: PPUSH
75773: LD_VAR 0 7
75777: PPUSH
75778: CALL_OW 428
75782: PPUSH
75783: CALL_OW 247
75787: PUSH
75788: LD_INT 3
75790: PUSH
75791: LD_INT 2
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: IN
75798: NOT
75799: AND
75800: IFFALSE 75844
// begin ComMoveXY ( unit , _x , _y ) ;
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_VAR 0 5
75811: PPUSH
75812: LD_VAR 0 7
75816: PPUSH
75817: CALL_OW 111
// result := [ _x , _y ] ;
75821: LD_ADDR_VAR 0 3
75825: PUSH
75826: LD_VAR 0 5
75830: PUSH
75831: LD_VAR 0 7
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: ST_TO_ADDR
// exit ;
75840: POP
75841: POP
75842: GO 75848
// end ; end ;
75844: GO 75688
75846: POP
75847: POP
// end ;
75848: LD_VAR 0 3
75852: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75853: LD_INT 0
75855: PPUSH
75856: PPUSH
75857: PPUSH
// result := 0 ;
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: LD_INT 0
75865: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75866: LD_VAR 0 1
75870: PUSH
75871: LD_INT 0
75873: LESS
75874: PUSH
75875: LD_VAR 0 1
75879: PUSH
75880: LD_INT 8
75882: GREATER
75883: OR
75884: PUSH
75885: LD_VAR 0 2
75889: PUSH
75890: LD_INT 0
75892: LESS
75893: OR
75894: PUSH
75895: LD_VAR 0 2
75899: PUSH
75900: LD_INT 8
75902: GREATER
75903: OR
75904: IFFALSE 75908
// exit ;
75906: GO 75983
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75908: LD_ADDR_VAR 0 4
75912: PUSH
75913: LD_INT 22
75915: PUSH
75916: LD_VAR 0 2
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PPUSH
75925: CALL_OW 69
75929: PUSH
75930: FOR_IN
75931: IFFALSE 75981
// begin un := UnitShoot ( i ) ;
75933: LD_ADDR_VAR 0 5
75937: PUSH
75938: LD_VAR 0 4
75942: PPUSH
75943: CALL_OW 504
75947: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75948: LD_VAR 0 5
75952: PPUSH
75953: CALL_OW 255
75957: PUSH
75958: LD_VAR 0 1
75962: EQUAL
75963: IFFALSE 75979
// begin result := un ;
75965: LD_ADDR_VAR 0 3
75969: PUSH
75970: LD_VAR 0 5
75974: ST_TO_ADDR
// exit ;
75975: POP
75976: POP
75977: GO 75983
// end ; end ;
75979: GO 75930
75981: POP
75982: POP
// end ;
75983: LD_VAR 0 3
75987: RET
// export function GetCargoBay ( units ) ; begin
75988: LD_INT 0
75990: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75991: LD_ADDR_VAR 0 2
75995: PUSH
75996: LD_VAR 0 1
76000: PPUSH
76001: LD_INT 2
76003: PUSH
76004: LD_INT 34
76006: PUSH
76007: LD_INT 12
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PUSH
76014: LD_INT 34
76016: PUSH
76017: LD_INT 51
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 34
76026: PUSH
76027: LD_INT 32
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: LD_INT 34
76036: PUSH
76037: LD_EXP 124
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: PPUSH
76053: CALL_OW 72
76057: ST_TO_ADDR
// end ;
76058: LD_VAR 0 2
76062: RET
// export function Negate ( value ) ; begin
76063: LD_INT 0
76065: PPUSH
// result := not value ;
76066: LD_ADDR_VAR 0 2
76070: PUSH
76071: LD_VAR 0 1
76075: NOT
76076: ST_TO_ADDR
// end ;
76077: LD_VAR 0 2
76081: RET
// export function Inc ( value ) ; begin
76082: LD_INT 0
76084: PPUSH
// result := value + 1 ;
76085: LD_ADDR_VAR 0 2
76089: PUSH
76090: LD_VAR 0 1
76094: PUSH
76095: LD_INT 1
76097: PLUS
76098: ST_TO_ADDR
// end ;
76099: LD_VAR 0 2
76103: RET
// export function Dec ( value ) ; begin
76104: LD_INT 0
76106: PPUSH
// result := value - 1 ;
76107: LD_ADDR_VAR 0 2
76111: PUSH
76112: LD_VAR 0 1
76116: PUSH
76117: LD_INT 1
76119: MINUS
76120: ST_TO_ADDR
// end ;
76121: LD_VAR 0 2
76125: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76126: LD_INT 0
76128: PPUSH
76129: PPUSH
76130: PPUSH
76131: PPUSH
76132: PPUSH
76133: PPUSH
76134: PPUSH
76135: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76136: LD_VAR 0 1
76140: PPUSH
76141: LD_VAR 0 2
76145: PPUSH
76146: CALL_OW 488
76150: NOT
76151: PUSH
76152: LD_VAR 0 3
76156: PPUSH
76157: LD_VAR 0 4
76161: PPUSH
76162: CALL_OW 488
76166: NOT
76167: OR
76168: IFFALSE 76181
// begin result := - 1 ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_INT 1
76177: NEG
76178: ST_TO_ADDR
// exit ;
76179: GO 76416
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76181: LD_ADDR_VAR 0 12
76185: PUSH
76186: LD_VAR 0 1
76190: PPUSH
76191: LD_VAR 0 2
76195: PPUSH
76196: LD_VAR 0 3
76200: PPUSH
76201: LD_VAR 0 4
76205: PPUSH
76206: CALL 75264 0 4
76210: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76211: LD_ADDR_VAR 0 11
76215: PUSH
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: LD_VAR 0 12
76230: PUSH
76231: LD_INT 1
76233: ARRAY
76234: PPUSH
76235: LD_VAR 0 12
76239: PUSH
76240: LD_INT 2
76242: ARRAY
76243: PPUSH
76244: CALL_OW 298
76248: ST_TO_ADDR
// distance := 9999 ;
76249: LD_ADDR_VAR 0 10
76253: PUSH
76254: LD_INT 9999
76256: ST_TO_ADDR
// for i := 0 to 5 do
76257: LD_ADDR_VAR 0 6
76261: PUSH
76262: DOUBLE
76263: LD_INT 0
76265: DEC
76266: ST_TO_ADDR
76267: LD_INT 5
76269: PUSH
76270: FOR_TO
76271: IFFALSE 76414
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76273: LD_ADDR_VAR 0 7
76277: PUSH
76278: LD_VAR 0 1
76282: PPUSH
76283: LD_VAR 0 6
76287: PPUSH
76288: LD_VAR 0 11
76292: PPUSH
76293: CALL_OW 272
76297: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76298: LD_ADDR_VAR 0 8
76302: PUSH
76303: LD_VAR 0 2
76307: PPUSH
76308: LD_VAR 0 6
76312: PPUSH
76313: LD_VAR 0 11
76317: PPUSH
76318: CALL_OW 273
76322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76323: LD_VAR 0 7
76327: PPUSH
76328: LD_VAR 0 8
76332: PPUSH
76333: CALL_OW 488
76337: NOT
76338: IFFALSE 76342
// continue ;
76340: GO 76270
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76342: LD_ADDR_VAR 0 9
76346: PUSH
76347: LD_VAR 0 12
76351: PUSH
76352: LD_INT 1
76354: ARRAY
76355: PPUSH
76356: LD_VAR 0 12
76360: PUSH
76361: LD_INT 2
76363: ARRAY
76364: PPUSH
76365: LD_VAR 0 7
76369: PPUSH
76370: LD_VAR 0 8
76374: PPUSH
76375: CALL_OW 298
76379: ST_TO_ADDR
// if tmp < distance then
76380: LD_VAR 0 9
76384: PUSH
76385: LD_VAR 0 10
76389: LESS
76390: IFFALSE 76412
// begin result := i ;
76392: LD_ADDR_VAR 0 5
76396: PUSH
76397: LD_VAR 0 6
76401: ST_TO_ADDR
// distance := tmp ;
76402: LD_ADDR_VAR 0 10
76406: PUSH
76407: LD_VAR 0 9
76411: ST_TO_ADDR
// end ; end ;
76412: GO 76270
76414: POP
76415: POP
// end ;
76416: LD_VAR 0 5
76420: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76421: LD_INT 0
76423: PPUSH
76424: PPUSH
// if not driver or not IsInUnit ( driver ) then
76425: LD_VAR 0 1
76429: NOT
76430: PUSH
76431: LD_VAR 0 1
76435: PPUSH
76436: CALL_OW 310
76440: NOT
76441: OR
76442: IFFALSE 76446
// exit ;
76444: GO 76536
// vehicle := IsInUnit ( driver ) ;
76446: LD_ADDR_VAR 0 3
76450: PUSH
76451: LD_VAR 0 1
76455: PPUSH
76456: CALL_OW 310
76460: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76461: LD_VAR 0 1
76465: PPUSH
76466: LD_STRING \
76468: PUSH
76469: LD_INT 0
76471: PUSH
76472: LD_INT 0
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: LD_INT 0
76480: PUSH
76481: LD_INT 0
76483: PUSH
76484: LD_INT 0
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: PUSH
76496: LD_STRING E
76498: PUSH
76499: LD_INT 0
76501: PUSH
76502: LD_INT 0
76504: PUSH
76505: LD_VAR 0 3
76509: PUSH
76510: LD_INT 0
76512: PUSH
76513: LD_INT 0
76515: PUSH
76516: LD_INT 0
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: PPUSH
76532: CALL_OW 446
// end ;
76536: LD_VAR 0 2
76540: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76541: LD_INT 0
76543: PPUSH
76544: PPUSH
// if not driver or not IsInUnit ( driver ) then
76545: LD_VAR 0 1
76549: NOT
76550: PUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: CALL_OW 310
76560: NOT
76561: OR
76562: IFFALSE 76566
// exit ;
76564: GO 76656
// vehicle := IsInUnit ( driver ) ;
76566: LD_ADDR_VAR 0 3
76570: PUSH
76571: LD_VAR 0 1
76575: PPUSH
76576: CALL_OW 310
76580: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76581: LD_VAR 0 1
76585: PPUSH
76586: LD_STRING \
76588: PUSH
76589: LD_INT 0
76591: PUSH
76592: LD_INT 0
76594: PUSH
76595: LD_INT 0
76597: PUSH
76598: LD_INT 0
76600: PUSH
76601: LD_INT 0
76603: PUSH
76604: LD_INT 0
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: PUSH
76616: LD_STRING E
76618: PUSH
76619: LD_INT 0
76621: PUSH
76622: LD_INT 0
76624: PUSH
76625: LD_VAR 0 3
76629: PUSH
76630: LD_INT 0
76632: PUSH
76633: LD_INT 0
76635: PUSH
76636: LD_INT 0
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PPUSH
76652: CALL_OW 447
// end ;
76656: LD_VAR 0 2
76660: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76661: LD_INT 0
76663: PPUSH
76664: PPUSH
76665: PPUSH
// tmp := [ ] ;
76666: LD_ADDR_VAR 0 5
76670: PUSH
76671: EMPTY
76672: ST_TO_ADDR
// for i in units do
76673: LD_ADDR_VAR 0 4
76677: PUSH
76678: LD_VAR 0 1
76682: PUSH
76683: FOR_IN
76684: IFFALSE 76722
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76686: LD_ADDR_VAR 0 5
76690: PUSH
76691: LD_VAR 0 5
76695: PPUSH
76696: LD_VAR 0 5
76700: PUSH
76701: LD_INT 1
76703: PLUS
76704: PPUSH
76705: LD_VAR 0 4
76709: PPUSH
76710: CALL_OW 256
76714: PPUSH
76715: CALL_OW 2
76719: ST_TO_ADDR
76720: GO 76683
76722: POP
76723: POP
// if not tmp then
76724: LD_VAR 0 5
76728: NOT
76729: IFFALSE 76733
// exit ;
76731: GO 76781
// if asc then
76733: LD_VAR 0 2
76737: IFFALSE 76761
// result := SortListByListAsc ( units , tmp ) else
76739: LD_ADDR_VAR 0 3
76743: PUSH
76744: LD_VAR 0 1
76748: PPUSH
76749: LD_VAR 0 5
76753: PPUSH
76754: CALL_OW 76
76758: ST_TO_ADDR
76759: GO 76781
// result := SortListByListDesc ( units , tmp ) ;
76761: LD_ADDR_VAR 0 3
76765: PUSH
76766: LD_VAR 0 1
76770: PPUSH
76771: LD_VAR 0 5
76775: PPUSH
76776: CALL_OW 77
76780: ST_TO_ADDR
// end ;
76781: LD_VAR 0 3
76785: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76786: LD_INT 0
76788: PPUSH
76789: PPUSH
// task := GetTaskList ( mech ) ;
76790: LD_ADDR_VAR 0 4
76794: PUSH
76795: LD_VAR 0 1
76799: PPUSH
76800: CALL_OW 437
76804: ST_TO_ADDR
// if not task then
76805: LD_VAR 0 4
76809: NOT
76810: IFFALSE 76814
// exit ;
76812: GO 76856
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76814: LD_ADDR_VAR 0 3
76818: PUSH
76819: LD_VAR 0 4
76823: PUSH
76824: LD_INT 1
76826: ARRAY
76827: PUSH
76828: LD_INT 1
76830: ARRAY
76831: PUSH
76832: LD_STRING r
76834: EQUAL
76835: PUSH
76836: LD_VAR 0 4
76840: PUSH
76841: LD_INT 1
76843: ARRAY
76844: PUSH
76845: LD_INT 4
76847: ARRAY
76848: PUSH
76849: LD_VAR 0 2
76853: EQUAL
76854: AND
76855: ST_TO_ADDR
// end ;
76856: LD_VAR 0 3
76860: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76861: LD_INT 0
76863: PPUSH
// SetDir ( unit , d ) ;
76864: LD_VAR 0 1
76868: PPUSH
76869: LD_VAR 0 4
76873: PPUSH
76874: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76878: LD_VAR 0 1
76882: PPUSH
76883: LD_VAR 0 2
76887: PPUSH
76888: LD_VAR 0 3
76892: PPUSH
76893: LD_VAR 0 5
76897: PPUSH
76898: CALL_OW 48
// end ;
76902: LD_VAR 0 6
76906: RET
// export function ToNaturalNumber ( number ) ; begin
76907: LD_INT 0
76909: PPUSH
// result := number div 1 ;
76910: LD_ADDR_VAR 0 2
76914: PUSH
76915: LD_VAR 0 1
76919: PUSH
76920: LD_INT 1
76922: DIV
76923: ST_TO_ADDR
// if number < 0 then
76924: LD_VAR 0 1
76928: PUSH
76929: LD_INT 0
76931: LESS
76932: IFFALSE 76942
// result := 0 ;
76934: LD_ADDR_VAR 0 2
76938: PUSH
76939: LD_INT 0
76941: ST_TO_ADDR
// end ;
76942: LD_VAR 0 2
76946: RET
// export function SortByClass ( units , class ) ; var un ; begin
76947: LD_INT 0
76949: PPUSH
76950: PPUSH
// if not units or not class then
76951: LD_VAR 0 1
76955: NOT
76956: PUSH
76957: LD_VAR 0 2
76961: NOT
76962: OR
76963: IFFALSE 76967
// exit ;
76965: GO 77062
// result := [ ] ;
76967: LD_ADDR_VAR 0 3
76971: PUSH
76972: EMPTY
76973: ST_TO_ADDR
// for un in units do
76974: LD_ADDR_VAR 0 4
76978: PUSH
76979: LD_VAR 0 1
76983: PUSH
76984: FOR_IN
76985: IFFALSE 77060
// if GetClass ( un ) = class then
76987: LD_VAR 0 4
76991: PPUSH
76992: CALL_OW 257
76996: PUSH
76997: LD_VAR 0 2
77001: EQUAL
77002: IFFALSE 77029
// result := Insert ( result , 1 , un ) else
77004: LD_ADDR_VAR 0 3
77008: PUSH
77009: LD_VAR 0 3
77013: PPUSH
77014: LD_INT 1
77016: PPUSH
77017: LD_VAR 0 4
77021: PPUSH
77022: CALL_OW 2
77026: ST_TO_ADDR
77027: GO 77058
// result := Replace ( result , result + 1 , un ) ;
77029: LD_ADDR_VAR 0 3
77033: PUSH
77034: LD_VAR 0 3
77038: PPUSH
77039: LD_VAR 0 3
77043: PUSH
77044: LD_INT 1
77046: PLUS
77047: PPUSH
77048: LD_VAR 0 4
77052: PPUSH
77053: CALL_OW 1
77057: ST_TO_ADDR
77058: GO 76984
77060: POP
77061: POP
// end ;
77062: LD_VAR 0 3
77066: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77067: LD_INT 0
77069: PPUSH
77070: PPUSH
77071: PPUSH
77072: PPUSH
77073: PPUSH
77074: PPUSH
77075: PPUSH
// result := [ ] ;
77076: LD_ADDR_VAR 0 4
77080: PUSH
77081: EMPTY
77082: ST_TO_ADDR
// if x - r < 0 then
77083: LD_VAR 0 1
77087: PUSH
77088: LD_VAR 0 3
77092: MINUS
77093: PUSH
77094: LD_INT 0
77096: LESS
77097: IFFALSE 77109
// min_x := 0 else
77099: LD_ADDR_VAR 0 8
77103: PUSH
77104: LD_INT 0
77106: ST_TO_ADDR
77107: GO 77125
// min_x := x - r ;
77109: LD_ADDR_VAR 0 8
77113: PUSH
77114: LD_VAR 0 1
77118: PUSH
77119: LD_VAR 0 3
77123: MINUS
77124: ST_TO_ADDR
// if y - r < 0 then
77125: LD_VAR 0 2
77129: PUSH
77130: LD_VAR 0 3
77134: MINUS
77135: PUSH
77136: LD_INT 0
77138: LESS
77139: IFFALSE 77151
// min_y := 0 else
77141: LD_ADDR_VAR 0 7
77145: PUSH
77146: LD_INT 0
77148: ST_TO_ADDR
77149: GO 77167
// min_y := y - r ;
77151: LD_ADDR_VAR 0 7
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_VAR 0 3
77165: MINUS
77166: ST_TO_ADDR
// max_x := x + r ;
77167: LD_ADDR_VAR 0 9
77171: PUSH
77172: LD_VAR 0 1
77176: PUSH
77177: LD_VAR 0 3
77181: PLUS
77182: ST_TO_ADDR
// max_y := y + r ;
77183: LD_ADDR_VAR 0 10
77187: PUSH
77188: LD_VAR 0 2
77192: PUSH
77193: LD_VAR 0 3
77197: PLUS
77198: ST_TO_ADDR
// for _x = min_x to max_x do
77199: LD_ADDR_VAR 0 5
77203: PUSH
77204: DOUBLE
77205: LD_VAR 0 8
77209: DEC
77210: ST_TO_ADDR
77211: LD_VAR 0 9
77215: PUSH
77216: FOR_TO
77217: IFFALSE 77318
// for _y = min_y to max_y do
77219: LD_ADDR_VAR 0 6
77223: PUSH
77224: DOUBLE
77225: LD_VAR 0 7
77229: DEC
77230: ST_TO_ADDR
77231: LD_VAR 0 10
77235: PUSH
77236: FOR_TO
77237: IFFALSE 77314
// begin if not ValidHex ( _x , _y ) then
77239: LD_VAR 0 5
77243: PPUSH
77244: LD_VAR 0 6
77248: PPUSH
77249: CALL_OW 488
77253: NOT
77254: IFFALSE 77258
// continue ;
77256: GO 77236
// if GetResourceTypeXY ( _x , _y ) then
77258: LD_VAR 0 5
77262: PPUSH
77263: LD_VAR 0 6
77267: PPUSH
77268: CALL_OW 283
77272: IFFALSE 77312
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77274: LD_ADDR_VAR 0 4
77278: PUSH
77279: LD_VAR 0 4
77283: PPUSH
77284: LD_VAR 0 4
77288: PUSH
77289: LD_INT 1
77291: PLUS
77292: PPUSH
77293: LD_VAR 0 5
77297: PUSH
77298: LD_VAR 0 6
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PPUSH
77307: CALL_OW 1
77311: ST_TO_ADDR
// end ;
77312: GO 77236
77314: POP
77315: POP
77316: GO 77216
77318: POP
77319: POP
// end ;
77320: LD_VAR 0 4
77324: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77325: LD_INT 0
77327: PPUSH
77328: PPUSH
77329: PPUSH
77330: PPUSH
77331: PPUSH
77332: PPUSH
77333: PPUSH
77334: PPUSH
// if not units then
77335: LD_VAR 0 1
77339: NOT
77340: IFFALSE 77344
// exit ;
77342: GO 77870
// result := UnitFilter ( units , [ f_ok ] ) ;
77344: LD_ADDR_VAR 0 3
77348: PUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: LD_INT 50
77356: PUSH
77357: EMPTY
77358: LIST
77359: PPUSH
77360: CALL_OW 72
77364: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77365: LD_ADDR_VAR 0 8
77369: PUSH
77370: LD_VAR 0 1
77374: PUSH
77375: LD_INT 1
77377: ARRAY
77378: PPUSH
77379: CALL_OW 255
77383: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77384: LD_ADDR_VAR 0 10
77388: PUSH
77389: LD_INT 29
77391: PUSH
77392: LD_EXP 127
77396: PUSH
77397: LD_INT 49
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: LIST
77404: ST_TO_ADDR
// if not result then
77405: LD_VAR 0 3
77409: NOT
77410: IFFALSE 77414
// exit ;
77412: GO 77870
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77414: LD_ADDR_VAR 0 5
77418: PUSH
77419: LD_INT 81
77421: PUSH
77422: LD_VAR 0 8
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PPUSH
77431: CALL_OW 69
77435: ST_TO_ADDR
// for i in result do
77436: LD_ADDR_VAR 0 4
77440: PUSH
77441: LD_VAR 0 3
77445: PUSH
77446: FOR_IN
77447: IFFALSE 77868
// begin tag := GetTag ( i ) + 1 ;
77449: LD_ADDR_VAR 0 9
77453: PUSH
77454: LD_VAR 0 4
77458: PPUSH
77459: CALL_OW 110
77463: PUSH
77464: LD_INT 1
77466: PLUS
77467: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77468: LD_ADDR_VAR 0 7
77472: PUSH
77473: LD_VAR 0 4
77477: PPUSH
77478: CALL_OW 250
77482: PPUSH
77483: LD_VAR 0 4
77487: PPUSH
77488: CALL_OW 251
77492: PPUSH
77493: LD_INT 6
77495: PPUSH
77496: CALL 77067 0 3
77500: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77501: LD_VAR 0 4
77505: PPUSH
77506: CALL_OW 247
77510: PUSH
77511: LD_INT 2
77513: EQUAL
77514: PUSH
77515: LD_VAR 0 7
77519: AND
77520: PUSH
77521: LD_VAR 0 4
77525: PPUSH
77526: CALL_OW 264
77530: PUSH
77531: LD_VAR 0 10
77535: IN
77536: NOT
77537: AND
77538: IFFALSE 77577
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77540: LD_VAR 0 4
77544: PPUSH
77545: LD_VAR 0 7
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: PUSH
77554: LD_INT 1
77556: ARRAY
77557: PPUSH
77558: LD_VAR 0 7
77562: PUSH
77563: LD_INT 1
77565: ARRAY
77566: PUSH
77567: LD_INT 2
77569: ARRAY
77570: PPUSH
77571: CALL_OW 116
77575: GO 77866
// if path > tag then
77577: LD_VAR 0 2
77581: PUSH
77582: LD_VAR 0 9
77586: GREATER
77587: IFFALSE 77795
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77589: LD_ADDR_VAR 0 6
77593: PUSH
77594: LD_VAR 0 5
77598: PPUSH
77599: LD_INT 91
77601: PUSH
77602: LD_VAR 0 4
77606: PUSH
77607: LD_INT 8
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: LIST
77614: PPUSH
77615: CALL_OW 72
77619: ST_TO_ADDR
// if nearEnemy then
77620: LD_VAR 0 6
77624: IFFALSE 77693
// begin if GetWeapon ( i ) = ru_time_lapser then
77626: LD_VAR 0 4
77630: PPUSH
77631: CALL_OW 264
77635: PUSH
77636: LD_INT 49
77638: EQUAL
77639: IFFALSE 77667
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77641: LD_VAR 0 4
77645: PPUSH
77646: LD_VAR 0 6
77650: PPUSH
77651: LD_VAR 0 4
77655: PPUSH
77656: CALL_OW 74
77660: PPUSH
77661: CALL_OW 112
77665: GO 77691
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77667: LD_VAR 0 4
77671: PPUSH
77672: LD_VAR 0 6
77676: PPUSH
77677: LD_VAR 0 4
77681: PPUSH
77682: CALL_OW 74
77686: PPUSH
77687: CALL_OW 115
// end else
77691: GO 77793
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77693: LD_VAR 0 4
77697: PPUSH
77698: LD_VAR 0 2
77702: PUSH
77703: LD_VAR 0 9
77707: ARRAY
77708: PUSH
77709: LD_INT 1
77711: ARRAY
77712: PPUSH
77713: LD_VAR 0 2
77717: PUSH
77718: LD_VAR 0 9
77722: ARRAY
77723: PUSH
77724: LD_INT 2
77726: ARRAY
77727: PPUSH
77728: CALL_OW 297
77732: PUSH
77733: LD_INT 6
77735: GREATER
77736: IFFALSE 77779
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77738: LD_VAR 0 4
77742: PPUSH
77743: LD_VAR 0 2
77747: PUSH
77748: LD_VAR 0 9
77752: ARRAY
77753: PUSH
77754: LD_INT 1
77756: ARRAY
77757: PPUSH
77758: LD_VAR 0 2
77762: PUSH
77763: LD_VAR 0 9
77767: ARRAY
77768: PUSH
77769: LD_INT 2
77771: ARRAY
77772: PPUSH
77773: CALL_OW 114
77777: GO 77793
// SetTag ( i , tag ) ;
77779: LD_VAR 0 4
77783: PPUSH
77784: LD_VAR 0 9
77788: PPUSH
77789: CALL_OW 109
// end else
77793: GO 77866
// if enemy then
77795: LD_VAR 0 5
77799: IFFALSE 77866
// begin if GetWeapon ( i ) = ru_time_lapser then
77801: LD_VAR 0 4
77805: PPUSH
77806: CALL_OW 264
77810: PUSH
77811: LD_INT 49
77813: EQUAL
77814: IFFALSE 77842
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77816: LD_VAR 0 4
77820: PPUSH
77821: LD_VAR 0 5
77825: PPUSH
77826: LD_VAR 0 4
77830: PPUSH
77831: CALL_OW 74
77835: PPUSH
77836: CALL_OW 112
77840: GO 77866
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77842: LD_VAR 0 4
77846: PPUSH
77847: LD_VAR 0 5
77851: PPUSH
77852: LD_VAR 0 4
77856: PPUSH
77857: CALL_OW 74
77861: PPUSH
77862: CALL_OW 115
// end ; end ;
77866: GO 77446
77868: POP
77869: POP
// end ;
77870: LD_VAR 0 3
77874: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77875: LD_INT 0
77877: PPUSH
77878: PPUSH
77879: PPUSH
// if not unit or IsInUnit ( unit ) then
77880: LD_VAR 0 1
77884: NOT
77885: PUSH
77886: LD_VAR 0 1
77890: PPUSH
77891: CALL_OW 310
77895: OR
77896: IFFALSE 77900
// exit ;
77898: GO 77991
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77900: LD_ADDR_VAR 0 4
77904: PUSH
77905: LD_VAR 0 1
77909: PPUSH
77910: CALL_OW 250
77914: PPUSH
77915: LD_VAR 0 2
77919: PPUSH
77920: LD_INT 1
77922: PPUSH
77923: CALL_OW 272
77927: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77928: LD_ADDR_VAR 0 5
77932: PUSH
77933: LD_VAR 0 1
77937: PPUSH
77938: CALL_OW 251
77942: PPUSH
77943: LD_VAR 0 2
77947: PPUSH
77948: LD_INT 1
77950: PPUSH
77951: CALL_OW 273
77955: ST_TO_ADDR
// if ValidHex ( x , y ) then
77956: LD_VAR 0 4
77960: PPUSH
77961: LD_VAR 0 5
77965: PPUSH
77966: CALL_OW 488
77970: IFFALSE 77991
// ComTurnXY ( unit , x , y ) ;
77972: LD_VAR 0 1
77976: PPUSH
77977: LD_VAR 0 4
77981: PPUSH
77982: LD_VAR 0 5
77986: PPUSH
77987: CALL_OW 118
// end ;
77991: LD_VAR 0 3
77995: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77996: LD_INT 0
77998: PPUSH
77999: PPUSH
// result := false ;
78000: LD_ADDR_VAR 0 3
78004: PUSH
78005: LD_INT 0
78007: ST_TO_ADDR
// if not units then
78008: LD_VAR 0 2
78012: NOT
78013: IFFALSE 78017
// exit ;
78015: GO 78062
// for i in units do
78017: LD_ADDR_VAR 0 4
78021: PUSH
78022: LD_VAR 0 2
78026: PUSH
78027: FOR_IN
78028: IFFALSE 78060
// if See ( side , i ) then
78030: LD_VAR 0 1
78034: PPUSH
78035: LD_VAR 0 4
78039: PPUSH
78040: CALL_OW 292
78044: IFFALSE 78058
// begin result := true ;
78046: LD_ADDR_VAR 0 3
78050: PUSH
78051: LD_INT 1
78053: ST_TO_ADDR
// exit ;
78054: POP
78055: POP
78056: GO 78062
// end ;
78058: GO 78027
78060: POP
78061: POP
// end ;
78062: LD_VAR 0 3
78066: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78067: LD_INT 0
78069: PPUSH
78070: PPUSH
78071: PPUSH
78072: PPUSH
// if not unit or not points then
78073: LD_VAR 0 1
78077: NOT
78078: PUSH
78079: LD_VAR 0 2
78083: NOT
78084: OR
78085: IFFALSE 78089
// exit ;
78087: GO 78179
// dist := 99999 ;
78089: LD_ADDR_VAR 0 5
78093: PUSH
78094: LD_INT 99999
78096: ST_TO_ADDR
// for i in points do
78097: LD_ADDR_VAR 0 4
78101: PUSH
78102: LD_VAR 0 2
78106: PUSH
78107: FOR_IN
78108: IFFALSE 78177
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78110: LD_ADDR_VAR 0 6
78114: PUSH
78115: LD_VAR 0 1
78119: PPUSH
78120: LD_VAR 0 4
78124: PUSH
78125: LD_INT 1
78127: ARRAY
78128: PPUSH
78129: LD_VAR 0 4
78133: PUSH
78134: LD_INT 2
78136: ARRAY
78137: PPUSH
78138: CALL_OW 297
78142: ST_TO_ADDR
// if tmpDist < dist then
78143: LD_VAR 0 6
78147: PUSH
78148: LD_VAR 0 5
78152: LESS
78153: IFFALSE 78175
// begin result := i ;
78155: LD_ADDR_VAR 0 3
78159: PUSH
78160: LD_VAR 0 4
78164: ST_TO_ADDR
// dist := tmpDist ;
78165: LD_ADDR_VAR 0 5
78169: PUSH
78170: LD_VAR 0 6
78174: ST_TO_ADDR
// end ; end ;
78175: GO 78107
78177: POP
78178: POP
// end ;
78179: LD_VAR 0 3
78183: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78184: LD_INT 0
78186: PPUSH
// uc_side := side ;
78187: LD_ADDR_OWVAR 20
78191: PUSH
78192: LD_VAR 0 1
78196: ST_TO_ADDR
// uc_nation := 3 ;
78197: LD_ADDR_OWVAR 21
78201: PUSH
78202: LD_INT 3
78204: ST_TO_ADDR
// vc_chassis := 25 ;
78205: LD_ADDR_OWVAR 37
78209: PUSH
78210: LD_INT 25
78212: ST_TO_ADDR
// vc_engine := engine_siberite ;
78213: LD_ADDR_OWVAR 39
78217: PUSH
78218: LD_INT 3
78220: ST_TO_ADDR
// vc_control := control_computer ;
78221: LD_ADDR_OWVAR 38
78225: PUSH
78226: LD_INT 3
78228: ST_TO_ADDR
// vc_weapon := 59 ;
78229: LD_ADDR_OWVAR 40
78233: PUSH
78234: LD_INT 59
78236: ST_TO_ADDR
// result := CreateVehicle ;
78237: LD_ADDR_VAR 0 5
78241: PUSH
78242: CALL_OW 45
78246: ST_TO_ADDR
// SetDir ( result , d ) ;
78247: LD_VAR 0 5
78251: PPUSH
78252: LD_VAR 0 4
78256: PPUSH
78257: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78261: LD_VAR 0 5
78265: PPUSH
78266: LD_VAR 0 2
78270: PPUSH
78271: LD_VAR 0 3
78275: PPUSH
78276: LD_INT 0
78278: PPUSH
78279: CALL_OW 48
// end ;
78283: LD_VAR 0 5
78287: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78288: LD_INT 0
78290: PPUSH
78291: PPUSH
78292: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78293: LD_ADDR_VAR 0 2
78297: PUSH
78298: LD_INT 0
78300: PUSH
78301: LD_INT 0
78303: PUSH
78304: LD_INT 0
78306: PUSH
78307: LD_INT 0
78309: PUSH
78310: EMPTY
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78316: LD_VAR 0 1
78320: NOT
78321: PUSH
78322: LD_VAR 0 1
78326: PPUSH
78327: CALL_OW 264
78331: PUSH
78332: LD_INT 12
78334: PUSH
78335: LD_INT 51
78337: PUSH
78338: LD_INT 32
78340: PUSH
78341: LD_EXP 124
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: LIST
78350: LIST
78351: IN
78352: NOT
78353: OR
78354: IFFALSE 78358
// exit ;
78356: GO 78456
// for i := 1 to 3 do
78358: LD_ADDR_VAR 0 3
78362: PUSH
78363: DOUBLE
78364: LD_INT 1
78366: DEC
78367: ST_TO_ADDR
78368: LD_INT 3
78370: PUSH
78371: FOR_TO
78372: IFFALSE 78454
// begin tmp := GetCargo ( cargo , i ) ;
78374: LD_ADDR_VAR 0 4
78378: PUSH
78379: LD_VAR 0 1
78383: PPUSH
78384: LD_VAR 0 3
78388: PPUSH
78389: CALL_OW 289
78393: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78394: LD_ADDR_VAR 0 2
78398: PUSH
78399: LD_VAR 0 2
78403: PPUSH
78404: LD_VAR 0 3
78408: PPUSH
78409: LD_VAR 0 4
78413: PPUSH
78414: CALL_OW 1
78418: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78419: LD_ADDR_VAR 0 2
78423: PUSH
78424: LD_VAR 0 2
78428: PPUSH
78429: LD_INT 4
78431: PPUSH
78432: LD_VAR 0 2
78436: PUSH
78437: LD_INT 4
78439: ARRAY
78440: PUSH
78441: LD_VAR 0 4
78445: PLUS
78446: PPUSH
78447: CALL_OW 1
78451: ST_TO_ADDR
// end ;
78452: GO 78371
78454: POP
78455: POP
// end ;
78456: LD_VAR 0 2
78460: RET
// export function Length ( array ) ; begin
78461: LD_INT 0
78463: PPUSH
// result := array + 0 ;
78464: LD_ADDR_VAR 0 2
78468: PUSH
78469: LD_VAR 0 1
78473: PUSH
78474: LD_INT 0
78476: PLUS
78477: ST_TO_ADDR
// end ;
78478: LD_VAR 0 2
78482: RET
// export function PrepareArray ( array ) ; begin
78483: LD_INT 0
78485: PPUSH
// result := array diff 0 ;
78486: LD_ADDR_VAR 0 2
78490: PUSH
78491: LD_VAR 0 1
78495: PUSH
78496: LD_INT 0
78498: DIFF
78499: ST_TO_ADDR
// if not result [ 1 ] then
78500: LD_VAR 0 2
78504: PUSH
78505: LD_INT 1
78507: ARRAY
78508: NOT
78509: IFFALSE 78529
// result := Delete ( result , 1 ) ;
78511: LD_ADDR_VAR 0 2
78515: PUSH
78516: LD_VAR 0 2
78520: PPUSH
78521: LD_INT 1
78523: PPUSH
78524: CALL_OW 3
78528: ST_TO_ADDR
// end ; end_of_file
78529: LD_VAR 0 2
78533: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78534: LD_VAR 0 1
78538: PPUSH
78539: LD_VAR 0 2
78543: PPUSH
78544: LD_VAR 0 3
78548: PPUSH
78549: LD_VAR 0 4
78553: PPUSH
78554: LD_VAR 0 5
78558: PPUSH
78559: LD_VAR 0 6
78563: PPUSH
78564: CALL 17084 0 6
// end ;
78568: PPOPN 6
78570: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78571: LD_INT 0
78573: PPUSH
// begin if not units then
78574: LD_VAR 0 1
78578: NOT
78579: IFFALSE 78583
// exit ;
78581: GO 78583
// end ;
78583: PPOPN 7
78585: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78586: CALL 17055 0 0
// end ;
78590: PPOPN 1
78592: END
