// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37830 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37830 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37830 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37830 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37830 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37830 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37830 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37830 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37830 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37830 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37830 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37830 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37830 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37830 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37830 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37830 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75696 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9371: LD_EXP 3
9375: IFFALSE 10783
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
// begin DialogueOn ;
9385: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9389: LD_EXP 25
9393: PPUSH
9394: LD_STRING DH-base-1
9396: PPUSH
9397: CALL_OW 88
// if Markov then
9401: LD_EXP 32
9405: IFFALSE 9457
// begin Say ( Markov , DMar-base-2 ) ;
9407: LD_EXP 32
9411: PPUSH
9412: LD_STRING DMar-base-2
9414: PPUSH
9415: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9419: LD_EXP 32
9423: PPUSH
9424: LD_STRING DMar-base-3
9426: PPUSH
9427: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING DH-base-4
9438: PPUSH
9439: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9443: LD_EXP 32
9447: PPUSH
9448: LD_STRING DMar-base-5
9450: PPUSH
9451: CALL_OW 88
// end else
9455: GO 9534
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9457: LD_EXP 37
9461: PPUSH
9462: LD_INT 26
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 72
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PPUSH
9481: LD_STRING DArm-base-a-2
9483: PPUSH
9484: CALL_OW 88
9488: NOT
9489: IFFALSE 9522
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9491: LD_EXP 37
9495: PPUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 72
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_STRING DArf-base-a-2
9517: PPUSH
9518: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9522: LD_EXP 25
9526: PPUSH
9527: LD_STRING DH-base-a-3
9529: PPUSH
9530: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9534: LD_EXP 35
9538: PPUSH
9539: LD_STRING DA-base-6
9541: PPUSH
9542: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9546: LD_EXP 35
9550: PPUSH
9551: LD_STRING DA-base-7
9553: PPUSH
9554: CALL_OW 88
// DialogueOff ;
9558: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9562: LD_STRING Flamethrower
9564: PPUSH
9565: CALL_OW 337
// wait ( 2 2$00 ) ;
9569: LD_INT 4200
9571: PPUSH
9572: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9576: LD_EXP 34
9580: PUSH
9581: LD_EXP 27
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: LD_INT 203
9592: PPUSH
9593: LD_INT 37
9595: PPUSH
9596: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 92
9612: PUSH
9613: LD_INT 203
9615: PUSH
9616: LD_INT 37
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: NOT
9637: IFFALSE 9677
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9639: LD_EXP 34
9643: PUSH
9644: LD_EXP 27
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: LD_EXP 25
9657: PPUSH
9658: CALL_OW 250
9662: PPUSH
9663: LD_EXP 25
9667: PPUSH
9668: CALL_OW 251
9672: PPUSH
9673: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9677: LD_INT 35
9679: PPUSH
9680: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9684: LD_INT 2
9686: PPUSH
9687: LD_EXP 34
9691: PPUSH
9692: CALL_OW 292
9696: PUSH
9697: LD_EXP 34
9701: PPUSH
9702: LD_EXP 25
9706: PPUSH
9707: CALL_OW 296
9711: PUSH
9712: LD_INT 8
9714: LESS
9715: PUSH
9716: LD_EXP 34
9720: PPUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 3
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PPUSH
9750: LD_EXP 34
9754: PPUSH
9755: CALL_OW 74
9759: PPUSH
9760: CALL_OW 296
9764: PUSH
9765: LD_INT 7
9767: LESS
9768: OR
9769: AND
9770: PUSH
9771: LD_EXP 34
9775: PPUSH
9776: LD_INT 10
9778: PPUSH
9779: CALL_OW 308
9783: NOT
9784: AND
9785: IFFALSE 9677
// InGameOn ;
9787: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9791: LD_EXP 34
9795: PPUSH
9796: CALL_OW 87
// if IsInUnit ( Heike ) then
9800: LD_EXP 25
9804: PPUSH
9805: CALL_OW 310
9809: IFFALSE 9820
// ComExitBuilding ( Heike ) ;
9811: LD_EXP 25
9815: PPUSH
9816: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9820: LD_EXP 34
9824: PUSH
9825: LD_EXP 27
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: LD_EXP 25
9838: PPUSH
9839: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9843: LD_EXP 25
9847: PPUSH
9848: LD_EXP 34
9852: PPUSH
9853: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 91
9869: PUSH
9870: LD_EXP 34
9874: PUSH
9875: LD_INT 10
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 21
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: IFFALSE 9928
// begin Say ( Kurt , DKs-scout-1 ) ;
9904: LD_EXP 34
9908: PPUSH
9909: LD_STRING DKs-scout-1
9911: PPUSH
9912: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9916: LD_EXP 25
9920: PPUSH
9921: LD_STRING DH-scout-2
9923: PPUSH
9924: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9928: LD_EXP 25
9932: PPUSH
9933: CALL_OW 85
// if IsInUnit ( Heike ) then
9937: LD_EXP 25
9941: PPUSH
9942: CALL_OW 310
9946: IFFALSE 9957
// ComExit ( Heike ) ;
9948: LD_EXP 25
9952: PPUSH
9953: CALL 75696 0 1
// repeat wait ( 0 0$1 ) ;
9957: LD_INT 35
9959: PPUSH
9960: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9964: LD_EXP 25
9968: PPUSH
9969: LD_EXP 34
9973: PPUSH
9974: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9978: LD_EXP 25
9982: PPUSH
9983: LD_EXP 34
9987: PPUSH
9988: CALL_OW 296
9992: PUSH
9993: LD_INT 6
9995: LESS
9996: IFFALSE 9957
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9998: LD_EXP 34
10002: PUSH
10003: LD_EXP 27
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PPUSH
10012: LD_EXP 25
10016: PPUSH
10017: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10021: LD_EXP 34
10025: PPUSH
10026: LD_STRING DKs-scout-3
10028: PPUSH
10029: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10033: LD_EXP 30
10037: PUSH
10038: LD_EXP 30
10042: PPUSH
10043: LD_EXP 34
10047: PPUSH
10048: CALL_OW 296
10052: PUSH
10053: LD_INT 15
10055: LESS
10056: AND
10057: IFFALSE 10247
// begin if IsInUnit ( Kaia ) then
10059: LD_EXP 30
10063: PPUSH
10064: CALL_OW 310
10068: IFFALSE 10079
// ComExitBuilding ( Kaia ) ;
10070: LD_EXP 30
10074: PPUSH
10075: CALL_OW 122
// wait ( 0 0$1 ) ;
10079: LD_INT 35
10081: PPUSH
10082: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_EXP 34
10095: PPUSH
10096: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10100: LD_INT 35
10102: PPUSH
10103: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10107: LD_EXP 30
10111: PPUSH
10112: LD_EXP 34
10116: PPUSH
10117: CALL_OW 296
10121: PUSH
10122: LD_INT 6
10124: LESS
10125: IFFALSE 10100
// ComTurnUnit ( Kaia , Kurt ) ;
10127: LD_EXP 30
10131: PPUSH
10132: LD_EXP 34
10136: PPUSH
10137: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10141: LD_EXP 30
10145: PPUSH
10146: LD_STRING DK-scout-4
10148: PPUSH
10149: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_EXP 30
10162: PPUSH
10163: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10167: LD_EXP 34
10171: PPUSH
10172: LD_STRING DKs-scout-5
10174: PPUSH
10175: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10179: LD_EXP 30
10183: PPUSH
10184: LD_STRING DK-scout-6
10186: PPUSH
10187: CALL_OW 88
// if Mike then
10191: LD_EXP 27
10195: IFFALSE 10247
// begin Say ( Mike , DM-scout-7 ) ;
10197: LD_EXP 27
10201: PPUSH
10202: LD_STRING DM-scout-7
10204: PPUSH
10205: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10209: LD_EXP 30
10213: PPUSH
10214: LD_EXP 27
10218: PPUSH
10219: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10223: LD_EXP 30
10227: PPUSH
10228: LD_STRING DK-scout-8
10230: PPUSH
10231: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10235: LD_EXP 27
10239: PPUSH
10240: LD_STRING DM-scout-9
10242: PPUSH
10243: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10247: LD_INT 184
10249: PPUSH
10250: LD_INT 100
10252: PPUSH
10253: LD_INT 2
10255: PPUSH
10256: LD_INT 12
10258: NEG
10259: PPUSH
10260: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10264: LD_INT 184
10266: PPUSH
10267: LD_INT 100
10269: PPUSH
10270: LD_INT 2
10272: PPUSH
10273: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10277: LD_INT 184
10279: PPUSH
10280: LD_INT 100
10282: PPUSH
10283: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10287: LD_EXP 34
10291: PPUSH
10292: LD_STRING DKs-scout-10
10294: PPUSH
10295: CALL_OW 88
// wait ( 0 0$1 ) ;
10299: LD_INT 35
10301: PPUSH
10302: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10306: LD_INT 144
10308: PPUSH
10309: LD_INT 65
10311: PPUSH
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 12
10317: NEG
10318: PPUSH
10319: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10323: LD_INT 144
10325: PPUSH
10326: LD_INT 65
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10336: LD_INT 144
10338: PPUSH
10339: LD_INT 65
10341: PPUSH
10342: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10346: LD_EXP 34
10350: PPUSH
10351: LD_STRING DKs-scout-11
10353: PPUSH
10354: CALL_OW 88
// wait ( 0 0$1 ) ;
10358: LD_INT 35
10360: PPUSH
10361: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10365: LD_EXP 34
10369: PPUSH
10370: CALL_OW 87
// if Mike and not Givi then
10374: LD_EXP 27
10378: PUSH
10379: LD_EXP 26
10383: NOT
10384: AND
10385: IFFALSE 10411
// begin Say ( Mike , DM-scout-a-1 ) ;
10387: LD_EXP 27
10391: PPUSH
10392: LD_STRING DM-scout-a-1
10394: PPUSH
10395: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10399: LD_EXP 25
10403: PPUSH
10404: LD_STRING DH-scout-a-2
10406: PPUSH
10407: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10411: LD_EXP 34
10415: PUSH
10416: LD_EXP 27
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 2
10427: PPUSH
10428: CALL_OW 235
// InGameOff ;
10432: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10436: LD_STRING Hill
10438: PPUSH
10439: CALL_OW 337
// Hint ( BunkerHill ) ;
10443: LD_STRING BunkerHill
10445: PPUSH
10446: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10450: LD_INT 20
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 424
// allowToPatrol := true ;
10460: LD_ADDR_EXP 12
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10468: LD_INT 3150
10470: PPUSH
10471: CALL_OW 67
// InitHc ;
10475: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 3
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_OWVAR 67
10511: ARRAY
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10781
// begin uc_side := 2 ;
10516: LD_ADDR_OWVAR 20
10520: PUSH
10521: LD_INT 2
10523: ST_TO_ADDR
// uc_nation := 2 ;
10524: LD_ADDR_OWVAR 21
10528: PUSH
10529: LD_INT 2
10531: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10532: LD_INT 0
10534: PPUSH
10535: LD_INT 1
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_VAR 0 1
10553: PUSH
10554: LD_INT 3
10556: MOD
10557: PUSH
10558: LD_INT 1
10560: PLUS
10561: ARRAY
10562: PPUSH
10563: LD_INT 3
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: LD_OWVAR 67
10585: ARRAY
10586: PPUSH
10587: CALL_OW 380
// un := CreateHuman ;
10591: LD_ADDR_VAR 0 2
10595: PUSH
10596: CALL_OW 44
10600: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10601: LD_ADDR_EXP 37
10605: PUSH
10606: LD_EXP 37
10610: PUSH
10611: LD_VAR 0 2
10615: UNION
10616: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10617: LD_INT 2
10619: PPUSH
10620: LD_INT 2
10622: PPUSH
10623: LD_INT 13
10625: PPUSH
10626: LD_INT 2
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_VAR 0 1
10640: PUSH
10641: LD_INT 2
10643: MOD
10644: PUSH
10645: LD_INT 1
10647: PLUS
10648: ARRAY
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: LD_INT 27
10655: PUSH
10656: LD_INT 25
10658: PUSH
10659: LD_INT 27
10661: PUSH
10662: LD_INT 23
10664: PUSH
10665: LD_INT 23
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_OWVAR 67
10679: PUSH
10680: LD_INT 0
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 12
10690: PLUS
10691: ARRAY
10692: PPUSH
10693: LD_INT 77
10695: PPUSH
10696: CALL 370 0 7
// veh := CreateVehicle ;
10700: LD_ADDR_VAR 0 3
10704: PUSH
10705: CALL_OW 45
10709: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 178
10729: PPUSH
10730: LD_INT 2
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10743: LD_VAR 0 2
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10757: LD_VAR 0 2
10761: PPUSH
10762: LD_INT 183
10764: PPUSH
10765: LD_INT 11
10767: PPUSH
10768: CALL_OW 111
// wait ( 0 0$2 ) ;
10772: LD_INT 70
10774: PPUSH
10775: CALL_OW 67
// end ;
10779: GO 10513
10781: POP
10782: POP
// end ;
10783: PPOPN 3
10785: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10786: LD_EXP 4
10790: PUSH
10791: LD_EXP 35
10795: PPUSH
10796: CALL_OW 302
10800: AND
10801: IFFALSE 10850
10803: GO 10805
10805: DISABLE
// begin DialogueOn ;
10806: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10810: LD_EXP 35
10814: PPUSH
10815: LD_STRING DA-lab-1
10817: PPUSH
10818: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10822: LD_EXP 35
10826: PPUSH
10827: LD_STRING DA-lab-2
10829: PPUSH
10830: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10834: LD_EXP 25
10838: PPUSH
10839: LD_STRING DH-lab-3
10841: PPUSH
10842: CALL_OW 88
// DialogueOff ;
10846: CALL_OW 7
// end ;
10850: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10851: LD_INT 17
10853: PPUSH
10854: LD_INT 2
10856: PPUSH
10857: CALL_OW 321
10861: PUSH
10862: LD_INT 2
10864: EQUAL
10865: IFFALSE 10997
10867: GO 10869
10869: DISABLE
10870: LD_INT 0
10872: PPUSH
// begin DialogueOn ;
10873: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10877: LD_EXP 35
10881: PPUSH
10882: LD_STRING DA-Cam-1
10884: PPUSH
10885: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10889: LD_EXP 35
10893: PPUSH
10894: LD_STRING DA-Cam-2
10896: PPUSH
10897: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10901: LD_EXP 35
10905: PPUSH
10906: LD_STRING DA-Cam-3
10908: PPUSH
10909: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10913: LD_EXP 25
10917: PPUSH
10918: LD_STRING DH-Cam-4
10920: PPUSH
10921: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10925: LD_EXP 30
10929: PPUSH
10930: LD_STRING DK-Cam-5
10932: PPUSH
10933: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10937: LD_EXP 30
10941: PPUSH
10942: LD_STRING DK-Cam-6
10944: PPUSH
10945: CALL_OW 88
// DialogueOff ;
10949: CALL_OW 7
// Query ( Camera ) ;
10953: LD_STRING Camera
10955: PPUSH
10956: CALL_OW 97
// hiddenCameraAllowed := true ;
10960: LD_ADDR_EXP 5
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// for i in camAreas do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_EXP 8
10977: PUSH
10978: FOR_IN
10979: IFFALSE 10995
// SetAreaMapShow ( i , 1 ) ;
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 424
10993: GO 10978
10995: POP
10996: POP
// end ;
10997: PPOPN 1
10999: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11000: LD_EXP 8
11004: NOT
11005: PUSH
11006: LD_EXP 5
11010: AND
11011: IFFALSE 11109
11013: GO 11015
11015: DISABLE
11016: LD_INT 0
11018: PPUSH
// begin stop_talking := true ;
11019: LD_ADDR_OWVAR 56
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11027: LD_ADDR_VAR 0 1
11031: PUSH
11032: LD_INT 22
11034: PUSH
11035: LD_INT 2
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 23
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: PUSH
11072: FOR_IN
11073: IFFALSE 11092
// AddExperience ( i , 2 , 450 ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: LD_INT 2
11082: PPUSH
11083: LD_INT 450
11085: PPUSH
11086: CALL_OW 492
11090: GO 11072
11092: POP
11093: POP
// stop_talking := false ;
11094: LD_ADDR_OWVAR 56
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11102: LD_STRING ACH_CAMERA
11104: PPUSH
11105: CALL_OW 543
// end ;
11109: PPOPN 1
11111: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11112: LD_EXP 9
11116: PUSH
11117: LD_EXP 11
11121: NOT
11122: AND
11123: IFFALSE 11182
11125: GO 11127
11127: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11128: LD_EXP 9
11132: PPUSH
11133: CALL_OW 250
11137: PPUSH
11138: LD_EXP 9
11142: PPUSH
11143: CALL_OW 251
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: LD_INT 6
11153: NEG
11154: PPUSH
11155: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11159: LD_EXP 9
11163: PPUSH
11164: CALL_OW 87
// wait ( 0 0$1 ) ;
11168: LD_INT 35
11170: PPUSH
11171: CALL_OW 67
// YouLost ( Spotted ) ;
11175: LD_STRING Spotted
11177: PPUSH
11178: CALL_OW 104
// end ;
11182: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11183: LD_INT 3
11185: PUSH
11186: LD_INT 6
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: LD_INT 2
11195: PPUSH
11196: LD_EXP 47
11200: PPUSH
11201: CALL 1034 0 3
11205: IFFALSE 11238
11207: GO 11209
11209: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11210: LD_ADDR_EXP 9
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: LD_INT 6
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: LD_INT 2
11227: PPUSH
11228: LD_EXP 47
11232: PPUSH
11233: CALL 1034 0 3
11237: ST_TO_ADDR
11238: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11239: LD_INT 22
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 32
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 3
11261: PUSH
11262: LD_INT 24
11264: PUSH
11265: LD_INT 1000
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PPUSH
11281: CALL_OW 69
11285: IFFALSE 11346
11287: GO 11289
11289: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11290: LD_ADDR_EXP 9
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 6
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 24
11320: PUSH
11321: LD_INT 1000
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 69
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: ST_TO_ADDR
11346: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11347: LD_EXP 9
11351: PUSH
11352: LD_INT 21
11354: PPUSH
11355: LD_INT 21
11357: PUSH
11358: LD_INT 3
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 3
11367: PUSH
11368: LD_INT 24
11370: PUSH
11371: LD_INT 1000
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 70
11390: AND
11391: IFFALSE 11630
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_EXP 42
11411: PUSH
11412: LD_EXP 44
11416: PUSH
11417: LD_EXP 45
11421: UNION
11422: PPUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 72
11444: UNION
11445: ST_TO_ADDR
// for i in noncombat do
11446: LD_ADDR_VAR 0 1
11450: PUSH
11451: LD_VAR 0 4
11455: PUSH
11456: FOR_IN
11457: IFFALSE 11553
// begin if IsInUnit ( i ) then
11459: LD_VAR 0 1
11463: PPUSH
11464: CALL_OW 310
11468: IFFALSE 11479
// ComExitBuilding ( i ) ;
11470: LD_VAR 0 1
11474: PPUSH
11475: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_INT 114
11486: PPUSH
11487: LD_INT 97
11489: PPUSH
11490: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_INT 99
11501: PPUSH
11502: LD_INT 128
11504: PPUSH
11505: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11509: LD_VAR 0 1
11513: PPUSH
11514: LD_INT 91
11516: PPUSH
11517: LD_INT 145
11519: PPUSH
11520: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11524: LD_VAR 0 1
11528: PPUSH
11529: LD_INT 82
11531: PPUSH
11532: LD_INT 153
11534: PPUSH
11535: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_INT 16
11546: PPUSH
11547: CALL_OW 173
// end ;
11551: GO 11456
11553: POP
11554: POP
// if not allowHeikeAttack then
11555: LD_EXP 11
11559: NOT
11560: IFFALSE 11564
// exit ;
11562: GO 11630
// wait ( 0 0$05 ) ;
11564: LD_INT 175
11566: PPUSH
11567: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11571: LD_EXP 40
11575: PPUSH
11576: LD_STRING D9a-Kur-1
11578: PPUSH
11579: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11583: LD_EXP 43
11587: PPUSH
11588: LD_STRING D9a-Bur-1
11590: PPUSH
11591: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11595: LD_EXP 40
11599: PPUSH
11600: LD_STRING D9a-Kur-2
11602: PPUSH
11603: CALL_OW 94
// omicronFall := true ;
11607: LD_ADDR_EXP 13
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11615: LD_INT 105
11617: PPUSH
11618: CALL_OW 67
// retreatFromOmicron := true ;
11622: LD_ADDR_EXP 20
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// end ;
11630: PPOPN 4
11632: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11633: LD_INT 16
11635: PPUSH
11636: LD_INT 3
11638: PUSH
11639: LD_INT 22
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 23
11655: PUSH
11656: LD_INT 3
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 70
11671: IFFALSE 11754
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
// begin enable ;
11679: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11680: LD_ADDR_VAR 0 1
11684: PUSH
11685: LD_INT 16
11687: PPUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 22
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 3
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL_OW 70
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11752
// begin escapeCounter := escapeCounter + 1 ;
11727: LD_ADDR_EXP 19
11731: PUSH
11732: LD_EXP 19
11736: PUSH
11737: LD_INT 1
11739: PLUS
11740: ST_TO_ADDR
// RemoveUnit ( i ) ;
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 64
// end ;
11750: GO 11724
11752: POP
11753: POP
// end ;
11754: PPOPN 1
11756: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11757: LD_OWVAR 1
11761: PUSH
11762: LD_INT 13650
11764: PUSH
11765: LD_INT 0
11767: PPUSH
11768: LD_INT 3150
11770: PPUSH
11771: CALL_OW 12
11775: PLUS
11776: GREATEREQUAL
11777: IFFALSE 11786
11779: GO 11781
11781: DISABLE
// SmallAmericanReinforcements ;
11782: CALL 7093 0 0
11786: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11787: LD_OWVAR 1
11791: PUSH
11792: LD_INT 31500
11794: PUSH
11795: LD_INT 29400
11797: PUSH
11798: LD_INT 27300
11800: PUSH
11801: LD_INT 25200
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: PUSH
11810: LD_OWVAR 67
11814: ARRAY
11815: GREATEREQUAL
11816: IFFALSE 11881
11818: GO 11820
11820: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11821: LD_EXP 48
11825: PPUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PPUSH
11841: LD_INT 62
11843: PPUSH
11844: LD_INT 22
11846: PPUSH
11847: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11851: LD_EXP 49
11855: PPUSH
11856: LD_INT 69
11858: PPUSH
11859: LD_INT 27
11861: PPUSH
11862: CALL_OW 111
// wait ( 1 1$00 ) ;
11866: LD_INT 2100
11868: PPUSH
11869: CALL_OW 67
// startAttackOnOmicron := true ;
11873: LD_ADDR_EXP 6
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// end ;
11881: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11882: LD_EXP 22
11886: PUSH
11887: LD_INT 0
11889: EQUAL
11890: IFFALSE 13907
11892: GO 11894
11894: DISABLE
11895: LD_INT 0
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11904: LD_INT 5
11906: PPUSH
11907: LD_INT 2
11909: PPUSH
11910: CALL_OW 343
// PrepareOmarForces ;
11914: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11918: LD_INT 105
11920: PPUSH
11921: CALL_OW 67
// allowHeikeAttack := true ;
11925: LD_ADDR_EXP 11
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// activeGrishkoAI := false ;
11933: LD_ADDR_EXP 10
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11941: LD_INT 20
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 424
// if not hillBase then
11951: LD_EXP 15
11955: NOT
11956: IFFALSE 11965
// ChangeMissionObjectives ( HillDone ) ;
11958: LD_STRING HillDone
11960: PPUSH
11961: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11965: LD_EXP 33
11969: PPUSH
11970: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12033
// if HasTask ( i ) then
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 314
12020: IFFALSE 12031
// ComHold ( i ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 140
12031: GO 12008
12033: POP
12034: POP
// DialogueOn ;
12035: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12039: LD_EXP 33
12043: PPUSH
12044: LD_STRING DO-assault-1
12046: PPUSH
12047: CALL_OW 94
// DialogueOff ;
12051: CALL_OW 7
// game_speed := 4 ;
12055: LD_ADDR_OWVAR 65
12059: PUSH
12060: LD_INT 4
12062: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12063: LD_ADDR_VAR 0 1
12067: PUSH
12068: LD_EXP 46
12072: PPUSH
12073: LD_INT 3
12075: PUSH
12076: LD_INT 54
12078: PUSH
12079: EMPTY
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PPUSH
12086: CALL_OW 72
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12111
// ComMoveXY ( i , 226 , 114 ) ;
12094: LD_VAR 0 1
12098: PPUSH
12099: LD_INT 226
12101: PPUSH
12102: LD_INT 114
12104: PPUSH
12105: CALL_OW 111
12109: GO 12091
12111: POP
12112: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12113: LD_EXP 41
12117: PPUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 4
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: PPUSH
12147: LD_EXP 41
12151: PPUSH
12152: CALL_OW 74
12156: PPUSH
12157: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12161: LD_STRING Attack
12163: PPUSH
12164: CALL_OW 337
// music_class := music_combat ;
12168: LD_ADDR_OWVAR 72
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// music_nat := 4 ;
12176: LD_ADDR_OWVAR 71
12180: PUSH
12181: LD_INT 4
12183: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12184: LD_INT 5
12186: PPUSH
12187: LD_EXP 41
12191: PPUSH
12192: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12196: LD_INT 6
12198: PPUSH
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: PUSH
12219: LD_INT 4
12221: ARRAY
12222: PPUSH
12223: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12227: LD_ADDR_VAR 0 1
12231: PUSH
12232: LD_EXP 38
12236: PPUSH
12237: LD_INT 3
12239: PUSH
12240: LD_INT 25
12242: PUSH
12243: LD_INT 4
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 72
12258: PUSH
12259: FOR_IN
12260: IFFALSE 12279
// ComAgressiveMove ( i , 221 , 110 ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: LD_INT 221
12269: PPUSH
12270: LD_INT 110
12272: PPUSH
12273: CALL_OW 114
12277: GO 12259
12279: POP
12280: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12281: LD_EXP 38
12285: PPUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 72
12300: PPUSH
12301: LD_INT 214
12303: PPUSH
12304: LD_INT 124
12306: PPUSH
12307: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12311: LD_EXP 38
12315: PPUSH
12316: LD_INT 25
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 72
12330: PUSH
12331: LD_INT 4
12333: ARRAY
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 114
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12348: LD_EXP 41
12352: PPUSH
12353: LD_STRING D9-Gri-1
12355: PPUSH
12356: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12360: LD_EXP 40
12364: PPUSH
12365: LD_STRING D9-Kur-1
12367: PPUSH
12368: CALL_OW 94
// wait ( 0 0$1 ) ;
12372: LD_INT 35
12374: PPUSH
12375: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12379: LD_EXP 33
12383: PPUSH
12384: LD_INT 233
12386: PPUSH
12387: LD_INT 130
12389: PPUSH
12390: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12394: LD_EXP 41
12398: PPUSH
12399: LD_STRING D9-Gri-2
12401: PPUSH
12402: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12406: LD_EXP 40
12410: PPUSH
12411: LD_STRING D9-Kur-2
12413: PPUSH
12414: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12418: LD_EXP 41
12422: PPUSH
12423: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12427: LD_EXP 41
12431: PPUSH
12432: LD_INT 211
12434: PPUSH
12435: LD_INT 104
12437: PPUSH
12438: CALL_OW 171
// AddComHold ( Grishko ) ;
12442: LD_EXP 41
12446: PPUSH
12447: CALL_OW 200
// repeat wait ( 3 ) ;
12451: LD_INT 3
12453: PPUSH
12454: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12458: LD_EXP 41
12462: PPUSH
12463: CALL_OW 310
12467: NOT
12468: IFFALSE 12451
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12470: LD_EXP 38
12474: PPUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 26
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 72
12489: PPUSH
12490: LD_EXP 41
12494: PPUSH
12495: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12499: LD_EXP 38
12503: PPUSH
12504: LD_INT 34
12506: PUSH
12507: LD_INT 26
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 72
12518: PPUSH
12519: LD_INT 215
12521: PPUSH
12522: LD_INT 106
12524: PPUSH
12525: CALL_OW 174
// repeat wait ( 3 ) ;
12529: LD_INT 3
12531: PPUSH
12532: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12536: LD_EXP 41
12540: PPUSH
12541: CALL_OW 256
12545: PUSH
12546: LD_INT 1000
12548: LESS
12549: IFFALSE 12529
// NormalAttack ( 5 , Grishko ) ;
12551: LD_INT 5
12553: PPUSH
12554: LD_EXP 41
12558: PPUSH
12559: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12563: LD_INT 6
12565: PPUSH
12566: LD_EXP 38
12570: PPUSH
12571: LD_INT 25
12573: PUSH
12574: LD_INT 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 72
12585: PUSH
12586: LD_INT 4
12588: ARRAY
12589: PPUSH
12590: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12594: LD_EXP 41
12598: PPUSH
12599: LD_STRING D9-Gri-3
12601: PPUSH
12602: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12606: LD_EXP 40
12610: PPUSH
12611: LD_STRING D9-Kur-3
12613: PPUSH
12614: CALL_OW 94
// music_class := music_auto ;
12618: LD_ADDR_OWVAR 72
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// music_nat := music_auto ;
12626: LD_ADDR_OWVAR 71
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// for i in omarSquad do
12634: LD_ADDR_VAR 0 1
12638: PUSH
12639: LD_EXP 38
12643: PUSH
12644: FOR_IN
12645: IFFALSE 12787
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 247
12656: PUSH
12657: LD_INT 2
12659: EQUAL
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 256
12670: PUSH
12671: LD_INT 1000
12673: LESS
12674: AND
12675: IFFALSE 12741
// begin driver := IsDrivenBy ( i ) ;
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 311
12691: ST_TO_ADDR
// veh := i ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_VAR 0 1
12701: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12702: LD_VAR 0 2
12706: PPUSH
12707: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12711: LD_VAR 0 2
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12725: LD_VAR 0 2
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: CALL_OW 180
// end else
12739: GO 12785
// if GetLives ( i ) < 500 then
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 256
12750: PUSH
12751: LD_INT 500
12753: LESS
12754: IFFALSE 12785
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12756: LD_EXP 38
12760: PPUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 72
12775: PPUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 188
// end ; end ;
12785: GO 12644
12787: POP
12788: POP
// repeat wait ( 0 0$1 ) ;
12789: LD_INT 35
12791: PPUSH
12792: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12796: LD_EXP 38
12800: PPUSH
12801: LD_INT 3
12803: PUSH
12804: LD_INT 24
12806: PUSH
12807: LD_INT 1000
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 21
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 72
12836: NOT
12837: PUSH
12838: LD_EXP 38
12842: PPUSH
12843: LD_INT 3
12845: PUSH
12846: LD_INT 24
12848: PUSH
12849: LD_INT 250
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 72
12864: NOT
12865: AND
12866: IFFALSE 12789
// wait ( 0 0$2 ) ;
12868: LD_INT 70
12870: PPUSH
12871: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12875: LD_ADDR_VAR 0 5
12879: PUSH
12880: LD_EXP 38
12884: PPUSH
12885: LD_INT 58
12887: PUSH
12888: EMPTY
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 72
12909: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12910: LD_ADDR_VAR 0 6
12914: PUSH
12915: LD_EXP 38
12919: PPUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: LD_INT 55
12935: PUSH
12936: EMPTY
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 72
12951: ST_TO_ADDR
// for i := 1 to tmp do
12952: LD_ADDR_VAR 0 1
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 5
12966: PUSH
12967: FOR_TO
12968: IFFALSE 12998
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12970: LD_VAR 0 6
12974: PUSH
12975: LD_VAR 0 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 5
12985: PUSH
12986: LD_VAR 0 1
12990: ARRAY
12991: PPUSH
12992: CALL_OW 120
12996: GO 12967
12998: POP
12999: POP
// wait ( 0 0$5 ) ;
13000: LD_INT 175
13002: PPUSH
13003: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13007: LD_EXP 38
13011: PPUSH
13012: LD_INT 199
13014: PPUSH
13015: LD_INT 141
13017: PPUSH
13018: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13022: LD_EXP 33
13026: PPUSH
13027: LD_INT 190
13029: PPUSH
13030: LD_INT 143
13032: PPUSH
13033: CALL_OW 114
// AddComHold ( Omar ) ;
13037: LD_EXP 33
13041: PPUSH
13042: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13046: LD_EXP 38
13050: PPUSH
13051: LD_INT 2
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 25
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 72
13083: PPUSH
13084: LD_INT 161
13086: PPUSH
13087: LD_INT 130
13089: PPUSH
13090: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13094: LD_EXP 38
13098: PPUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PPUSH
13114: LD_INT 163
13116: PPUSH
13117: LD_INT 122
13119: PPUSH
13120: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13124: LD_EXP 38
13128: PPUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PUSH
13144: LD_INT 4
13146: ARRAY
13147: PPUSH
13148: LD_INT 165
13150: PPUSH
13151: LD_INT 118
13153: PPUSH
13154: LD_INT 0
13156: PPUSH
13157: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PUSH
13181: LD_INT 4
13183: ARRAY
13184: PPUSH
13185: LD_INT 159
13187: PPUSH
13188: LD_INT 116
13190: PPUSH
13191: LD_INT 0
13193: PPUSH
13194: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13198: LD_EXP 38
13202: PPUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 72
13217: PPUSH
13218: LD_INT 169
13220: PPUSH
13221: LD_INT 114
13223: PPUSH
13224: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13228: LD_INT 35
13230: PPUSH
13231: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13235: LD_ADDR_VAR 0 5
13239: PUSH
13240: LD_EXP 38
13244: PPUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 72
13259: ST_TO_ADDR
// for i in tmp do
13260: LD_ADDR_VAR 0 1
13264: PUSH
13265: LD_VAR 0 5
13269: PUSH
13270: FOR_IN
13271: IFFALSE 13368
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 256
13282: PUSH
13283: LD_INT 600
13285: LESS
13286: PUSH
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_INT 161
13294: PPUSH
13295: LD_INT 130
13297: PPUSH
13298: CALL_OW 297
13302: PUSH
13303: LD_INT 6
13305: GREATER
13306: AND
13307: IFFALSE 13324
// ComMoveXY ( i , 161 , 130 ) ;
13309: LD_VAR 0 1
13313: PPUSH
13314: LD_INT 161
13316: PPUSH
13317: LD_INT 130
13319: PPUSH
13320: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 256
13333: PUSH
13334: LD_INT 1000
13336: EQUAL
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 314
13347: NOT
13348: AND
13349: IFFALSE 13366
// ComAgressiveMove ( i , 160 , 109 ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_INT 160
13358: PPUSH
13359: LD_INT 109
13361: PPUSH
13362: CALL_OW 114
// end ;
13366: GO 13270
13368: POP
13369: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13370: LD_ADDR_VAR 0 5
13374: PUSH
13375: LD_EXP 38
13379: PPUSH
13380: LD_INT 21
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 72
13394: ST_TO_ADDR
// for i in tmp do
13395: LD_ADDR_VAR 0 1
13399: PUSH
13400: LD_VAR 0 5
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13672
// begin tmp2 := IsDrivenBy ( i ) ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_VAR 0 1
13417: PPUSH
13418: CALL_OW 311
13422: ST_TO_ADDR
// if not tmp2 then
13423: LD_VAR 0 6
13427: NOT
13428: IFFALSE 13432
// continue ;
13430: GO 13405
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 256
13441: PUSH
13442: LD_INT 600
13444: GREATEREQUAL
13445: PUSH
13446: LD_VAR 0 1
13450: PPUSH
13451: CALL_OW 110
13455: PUSH
13456: LD_INT 1
13458: EQUAL
13459: AND
13460: IFFALSE 13474
// SetTag ( i , 0 ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_INT 0
13469: PPUSH
13470: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 256
13483: PUSH
13484: LD_INT 600
13486: GREATEREQUAL
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 110
13497: NOT
13498: AND
13499: IFFALSE 13525
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_VAR 0 7
13510: PPUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 74
13520: PPUSH
13521: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 256
13534: PUSH
13535: LD_INT 600
13537: LESS
13538: PUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 110
13548: NOT
13549: AND
13550: IFFALSE 13579
// begin SetTag ( i , 1 ) ;
13552: LD_VAR 0 1
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13564: LD_VAR 0 1
13568: PPUSH
13569: LD_INT 202
13571: PPUSH
13572: LD_INT 150
13574: PPUSH
13575: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 110
13588: PUSH
13589: LD_INT 1
13591: EQUAL
13592: PUSH
13593: LD_VAR 0 1
13597: PPUSH
13598: LD_INT 202
13600: PPUSH
13601: LD_INT 150
13603: PPUSH
13604: CALL_OW 297
13608: PUSH
13609: LD_INT 6
13611: LESS
13612: AND
13613: PUSH
13614: LD_VAR 0 6
13618: AND
13619: IFFALSE 13670
// begin ComExitVehicle ( tmp2 ) ;
13621: LD_VAR 0 6
13625: PPUSH
13626: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13630: LD_VAR 0 6
13634: PPUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13644: LD_VAR 0 6
13648: PPUSH
13649: LD_INT 700
13651: PPUSH
13652: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13656: LD_VAR 0 6
13660: PPUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 180
// end ; end ;
13670: GO 13405
13672: POP
13673: POP
// until kirovDestroyed ;
13674: LD_EXP 16
13678: IFFALSE 13228
// repeat wait ( 0 0$1 ) ;
13680: LD_INT 35
13682: PPUSH
13683: CALL_OW 67
// for i in omarSquad union Omar do
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: LD_EXP 38
13696: PUSH
13697: LD_EXP 33
13701: UNION
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13874
// if IsInArea ( i , southRoadArea ) then
13706: LD_VAR 0 1
13710: PPUSH
13711: LD_INT 15
13713: PPUSH
13714: CALL_OW 308
13718: IFFALSE 13731
// RemoveUnit ( i ) else
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 64
13729: GO 13872
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13731: LD_VAR 0 1
13735: PPUSH
13736: CALL_OW 257
13740: PUSH
13741: LD_INT 3
13743: EQUAL
13744: PUSH
13745: LD_VAR 0 1
13749: PPUSH
13750: CALL_OW 310
13754: NOT
13755: AND
13756: PUSH
13757: LD_INT 22
13759: PUSH
13760: LD_INT 5
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 24
13769: PUSH
13770: LD_INT 251
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 58
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: AND
13804: IFFALSE 13857
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 22
13813: PUSH
13814: LD_INT 5
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 21
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 58
13833: PUSH
13834: EMPTY
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: CALL_OW 120
13855: GO 13872
// ComMoveXY ( i , 208 , 162 ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_INT 208
13864: PPUSH
13865: LD_INT 162
13867: PPUSH
13868: CALL_OW 111
// end ;
13872: GO 13703
13874: POP
13875: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13876: LD_INT 22
13878: PUSH
13879: LD_INT 5
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 21
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: NOT
13905: IFFALSE 13680
// end ;
13907: PPOPN 7
13909: END
// every 0 0$1 trigger IsDead ( kirov ) do
13910: LD_INT 71
13912: PPUSH
13913: CALL_OW 301
13917: IFFALSE 13934
13919: GO 13921
13921: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13922: LD_EXP 25
13926: PPUSH
13927: LD_STRING DH-1-Kirov
13929: PPUSH
13930: CALL_OW 88
13934: END
// every 0 0$1 trigger See ( 2 , beria ) do
13935: LD_INT 2
13937: PPUSH
13938: LD_INT 106
13940: PPUSH
13941: CALL_OW 292
13945: IFFALSE 13962
13947: GO 13949
13949: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13950: LD_EXP 25
13954: PPUSH
13955: LD_STRING DH-1-Beria
13957: PPUSH
13958: CALL_OW 88
13962: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13963: LD_INT 2
13965: PPUSH
13966: LD_INT 112
13968: PPUSH
13969: CALL_OW 292
13973: IFFALSE 14240
13975: GO 13977
13977: DISABLE
// begin DialogueOn ;
13978: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13982: LD_INT 112
13984: PPUSH
13985: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kagan
13996: PPUSH
13997: CALL_OW 88
// if Kamil then
14001: LD_EXP 29
14005: IFFALSE 14043
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14007: LD_EXP 29
14011: PPUSH
14012: LD_STRING DKam-Kagan-2
14014: PPUSH
14015: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14019: LD_EXP 26
14023: PPUSH
14024: LD_STRING DG-Kagan-3
14026: PPUSH
14027: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14031: LD_EXP 26
14035: PPUSH
14036: LD_STRING DG-Kagan-4
14038: PPUSH
14039: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14043: LD_STRING KaganBase
14045: PPUSH
14046: CALL_OW 97
14050: PUSH
14051: LD_INT 1
14053: DOUBLE
14054: EQUAL
14055: IFTRUE 14059
14057: GO 14154
14059: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14060: LD_EXP 25
14064: PPUSH
14065: LD_STRING DH-Kagan-5
14067: PPUSH
14068: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14072: LD_EXP 25
14076: PPUSH
14077: LD_STRING DH-Kagan-6
14079: PPUSH
14080: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14084: LD_EXP 36
14088: PPUSH
14089: LD_STRING DShar-Kagan-7
14091: PPUSH
14092: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14096: LD_EXP 25
14100: PPUSH
14101: LD_STRING DH-Kagan-8
14103: PPUSH
14104: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14108: LD_EXP 25
14112: PPUSH
14113: LD_STRING DH-Kagan-9
14115: PPUSH
14116: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14120: LD_EXP 36
14124: PPUSH
14125: LD_STRING DShar-Kagan-10
14127: PPUSH
14128: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14132: LD_EXP 25
14136: PPUSH
14137: LD_STRING DH-Kagan-11
14139: PPUSH
14140: CALL_OW 88
// kaganCaptured := true ;
14144: LD_ADDR_EXP 24
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// end ; 2 :
14152: GO 14236
14154: LD_INT 2
14156: DOUBLE
14157: EQUAL
14158: IFTRUE 14162
14160: GO 14235
14162: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14163: LD_INT 22
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PUSH
14178: LD_EXP 35
14182: AND
14183: IFFALSE 14197
// Say ( Heike , DH-Kagan-a-5 ) ;
14185: LD_EXP 25
14189: PPUSH
14190: LD_STRING DH-Kagan-a-5
14192: PPUSH
14193: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14197: LD_EXP 25
14201: PPUSH
14202: LD_STRING DH-Kagan-a-6
14204: PPUSH
14205: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14209: LD_EXP 25
14213: PPUSH
14214: LD_STRING DH-Kagan-a-7
14216: PPUSH
14217: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14221: LD_EXP 26
14225: PPUSH
14226: LD_STRING DG-Kagan-a-8
14228: PPUSH
14229: CALL_OW 88
// end ; end ;
14233: GO 14236
14235: POP
// DialogueOff ;
14236: CALL_OW 7
// end ;
14240: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14241: LD_EXP 18
14245: PUSH
14246: LD_INT 112
14248: PPUSH
14249: CALL_OW 255
14253: PUSH
14254: LD_INT 2
14256: EQUAL
14257: OR
14258: IFFALSE 14270
14260: GO 14262
14262: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14263: LD_STRING KaganDone
14265: PPUSH
14266: CALL_OW 337
14270: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14271: LD_EXP 6
14275: PUSH
14276: LD_EXP 48
14280: PPUSH
14281: LD_INT 95
14283: PUSH
14284: LD_INT 19
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: AND
14296: IFFALSE 14373
14298: GO 14300
14300: DISABLE
// begin DialogueOn ;
14301: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14305: LD_INT 63
14307: PPUSH
14308: LD_INT 32
14310: PPUSH
14311: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14315: LD_INT 63
14317: PPUSH
14318: LD_INT 32
14320: PPUSH
14321: LD_INT 2
14323: PPUSH
14324: LD_INT 12
14326: NEG
14327: PPUSH
14328: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14332: LD_EXP 25
14336: PPUSH
14337: LD_STRING DH-Omicron-1
14339: PPUSH
14340: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14344: LD_EXP 27
14348: PPUSH
14349: LD_STRING DM-Omicron-2
14351: PPUSH
14352: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14356: LD_INT 63
14358: PPUSH
14359: LD_INT 32
14361: PPUSH
14362: LD_INT 2
14364: PPUSH
14365: CALL_OW 331
// DialogueOff ;
14369: CALL_OW 7
// end ;
14373: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14374: LD_INT 2
14376: PPUSH
14377: LD_EXP 50
14381: PPUSH
14382: CALL_OW 292
14386: PUSH
14387: LD_EXP 50
14391: PPUSH
14392: CALL_OW 255
14396: PUSH
14397: LD_INT 2
14399: EQUAL
14400: OR
14401: PUSH
14402: LD_INT 106
14404: PPUSH
14405: CALL_OW 255
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: OR
14414: PUSH
14415: LD_EXP 50
14419: PPUSH
14420: CALL_OW 302
14424: AND
14425: PUSH
14426: LD_EXP 25
14430: PPUSH
14431: CALL_OW 302
14435: AND
14436: PUSH
14437: LD_EXP 35
14441: PPUSH
14442: CALL_OW 302
14446: AND
14447: IFFALSE 15168
14449: GO 14451
14451: DISABLE
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
// begin DialogueOn ;
14459: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14463: LD_INT 111
14465: PPUSH
14466: LD_INT 90
14468: PPUSH
14469: LD_INT 2
14471: PPUSH
14472: LD_INT 6
14474: NEG
14475: PPUSH
14476: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14480: LD_INT 111
14482: PPUSH
14483: LD_INT 90
14485: PPUSH
14486: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14490: LD_EXP 35
14494: PPUSH
14495: LD_STRING DA-Cap-1
14497: PPUSH
14498: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14502: LD_EXP 25
14506: PPUSH
14507: LD_STRING DH-Cap-2
14509: PPUSH
14510: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14514: LD_INT 111
14516: PPUSH
14517: LD_INT 90
14519: PPUSH
14520: LD_INT 2
14522: PPUSH
14523: CALL_OW 331
// DialogueOff ;
14527: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14531: LD_INT 35
14533: PPUSH
14534: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14538: LD_EXP 17
14542: PUSH
14543: LD_INT 106
14545: PPUSH
14546: CALL_OW 255
14550: PUSH
14551: LD_INT 2
14553: EQUAL
14554: OR
14555: PUSH
14556: LD_EXP 50
14560: PPUSH
14561: CALL_OW 255
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: OR
14570: PUSH
14571: LD_EXP 50
14575: PPUSH
14576: CALL_OW 302
14580: AND
14581: PUSH
14582: LD_EXP 35
14586: PPUSH
14587: CALL_OW 302
14591: AND
14592: PUSH
14593: LD_INT 2
14595: PPUSH
14596: CALL_OW 463
14600: NOT
14601: AND
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 1
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 92
14625: PUSH
14626: LD_INT 110
14628: PUSH
14629: LD_INT 95
14631: PUSH
14632: LD_INT 12
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: NOT
14651: AND
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 30
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 92
14675: PUSH
14676: LD_INT 110
14678: PUSH
14679: LD_INT 95
14681: PUSH
14682: LD_INT 12
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: NOT
14701: AND
14702: IFFALSE 14531
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: LD_EXP 37
14713: PUSH
14714: LD_EXP 28
14718: PUSH
14719: LD_EXP 29
14723: PUSH
14724: LD_EXP 31
14728: PUSH
14729: LD_EXP 30
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: UNION
14740: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14741: LD_ADDR_VAR 0 2
14745: PUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_INT 50
14753: PUSH
14754: EMPTY
14755: LIST
14756: PPUSH
14757: CALL_OW 72
14761: ST_TO_ADDR
// if tmp < 2 then
14762: LD_VAR 0 2
14766: PUSH
14767: LD_INT 2
14769: LESS
14770: IFFALSE 14782
// q := 2 else
14772: LD_ADDR_VAR 0 4
14776: PUSH
14777: LD_INT 2
14779: ST_TO_ADDR
14780: GO 14795
// q := Query ( LabCap ) ;
14782: LD_ADDR_VAR 0 4
14786: PUSH
14787: LD_STRING LabCap
14789: PPUSH
14790: CALL_OW 97
14794: ST_TO_ADDR
// case q of 1 :
14795: LD_VAR 0 4
14799: PUSH
14800: LD_INT 1
14802: DOUBLE
14803: EQUAL
14804: IFTRUE 14808
14806: GO 15132
14808: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14809: LD_INT 2
14811: PPUSH
14812: LD_EXP 50
14816: PPUSH
14817: CALL_OW 471
// labCaptured := true ;
14821: LD_ADDR_EXP 21
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14829: LD_EXP 25
14833: PPUSH
14834: LD_STRING DH-Cap-a-1
14836: PPUSH
14837: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14841: LD_EXP 35
14845: PPUSH
14846: LD_STRING DA-Cap-a-2
14848: PPUSH
14849: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14853: LD_ADDR_VAR 0 5
14857: PUSH
14858: LD_EXP 35
14862: PUSH
14863: LD_INT -3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT -2
14872: PUSH
14873: LD_INT -4
14875: PUSH
14876: LD_EXP 25
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: ADD
14886: PUSH
14887: LD_INT -3
14889: PUSH
14890: EMPTY
14891: LIST
14892: ADD
14893: PUSH
14894: LD_VAR 0 2
14898: ADD
14899: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14900: LD_ADDR_VAR 0 3
14904: PUSH
14905: LD_STRING Select two characters to go with Aviradze
14907: PPUSH
14908: LD_INT 2
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: LD_VAR 0 5
14918: PPUSH
14919: EMPTY
14920: PPUSH
14921: CALL_OW 42
14925: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14926: LD_EXP 50
14930: PPUSH
14931: LD_INT 8
14933: PPUSH
14934: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14938: LD_EXP 35
14942: PPUSH
14943: LD_INT 8
14945: PPUSH
14946: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14950: LD_ADDR_EXP 39
14954: PUSH
14955: LD_EXP 35
14959: PUSH
14960: EMPTY
14961: LIST
14962: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14963: LD_EXP 35
14967: PPUSH
14968: CALL_OW 310
14972: IFFALSE 14983
// ComExit ( Aviradze ) ;
14974: LD_EXP 35
14978: PPUSH
14979: CALL 75696 0 1
// wait ( 3 ) ;
14983: LD_INT 3
14985: PPUSH
14986: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14990: LD_EXP 35
14994: PPUSH
14995: LD_EXP 50
14999: PPUSH
15000: CALL_OW 120
// for i := 1 to 2 do
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: DOUBLE
15010: LD_INT 1
15012: DEC
15013: ST_TO_ADDR
15014: LD_INT 2
15016: PUSH
15017: FOR_TO
15018: IFFALSE 15121
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15020: LD_ADDR_EXP 39
15024: PUSH
15025: LD_EXP 39
15029: PUSH
15030: LD_VAR 0 3
15034: PUSH
15035: LD_VAR 0 1
15039: ARRAY
15040: UNION
15041: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15042: LD_VAR 0 3
15046: PUSH
15047: LD_VAR 0 1
15051: ARRAY
15052: PPUSH
15053: LD_INT 8
15055: PPUSH
15056: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15060: LD_VAR 0 3
15064: PUSH
15065: LD_VAR 0 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 310
15075: IFFALSE 15092
// ComExit ( tmp2 [ i ] ) ;
15077: LD_VAR 0 3
15081: PUSH
15082: LD_VAR 0 1
15086: ARRAY
15087: PPUSH
15088: CALL 75696 0 1
// wait ( 3 ) ;
15092: LD_INT 3
15094: PPUSH
15095: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15099: LD_VAR 0 3
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: PPUSH
15110: LD_EXP 50
15114: PPUSH
15115: CALL_OW 120
// end ;
15119: GO 15017
15121: POP
15122: POP
// SetAchievement ( ACH_LAB ) ;
15123: LD_STRING ACH_LAB
15125: PPUSH
15126: CALL_OW 543
// end ; 2 :
15130: GO 15168
15132: LD_INT 2
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15167
15140: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15141: LD_EXP 25
15145: PPUSH
15146: LD_STRING DH-Cap-b-1
15148: PPUSH
15149: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15153: LD_EXP 35
15157: PPUSH
15158: LD_STRING DA-Cap-b-2
15160: PPUSH
15161: CALL_OW 88
// end ; end ;
15165: GO 15168
15167: POP
// end ;
15168: PPOPN 5
15170: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15171: LD_INT 10
15173: PPUSH
15174: LD_INT 22
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 31
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 70
15202: PUSH
15203: LD_INT 2
15205: GREATEREQUAL
15206: IFFALSE 15218
15208: GO 15210
15210: DISABLE
// SetAchievement ( ACH_KING ) ;
15211: LD_STRING ACH_KING
15213: PPUSH
15214: CALL_OW 543
15218: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15219: LD_EXP 11
15223: NOT
15224: PUSH
15225: LD_INT 10
15227: PPUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 30
15243: PUSH
15244: LD_INT 31
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 4
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 70
15274: AND
15275: IFFALSE 15295
15277: GO 15279
15279: DISABLE
// begin hillBase := true ;
15280: LD_ADDR_EXP 15
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15288: LD_STRING HillDone
15290: PPUSH
15291: CALL_OW 337
// end ;
15295: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15296: LD_EXP 30
15300: PUSH
15301: LD_EXP 30
15305: PPUSH
15306: CALL_OW 256
15310: PUSH
15311: LD_INT 3
15313: LESS
15314: AND
15315: IFFALSE 15361
15317: GO 15319
15319: DISABLE
// begin DialogueOn ;
15320: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15324: LD_EXP 30
15328: PPUSH
15329: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15333: LD_EXP 30
15337: PPUSH
15338: LD_STRING DK-Kkilled-1
15340: PPUSH
15341: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15345: LD_EXP 25
15349: PPUSH
15350: LD_STRING DH-Kkilled-2
15352: PPUSH
15353: CALL_OW 88
// DialogueOff ;
15357: CALL_OW 7
// end ;
15361: END
// every 0 0$1 trigger kaiaKilledByRussian do
15362: LD_EXP 23
15366: IFFALSE 15383
15368: GO 15370
15370: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15371: LD_EXP 25
15375: PPUSH
15376: LD_STRING DH-Kkilled-3
15378: PPUSH
15379: CALL_OW 88
15383: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15384: LD_EXP 16
15388: PUSH
15389: LD_INT 106
15391: PPUSH
15392: CALL_OW 255
15396: PUSH
15397: LD_INT 2
15399: EQUAL
15400: PUSH
15401: LD_EXP 17
15405: OR
15406: AND
15407: PUSH
15408: LD_EXP 18
15412: PUSH
15413: LD_EXP 24
15417: PUSH
15418: LD_INT 112
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 2
15428: EQUAL
15429: AND
15430: OR
15431: AND
15432: IFFALSE 16668
15434: GO 15436
15436: DISABLE
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15444: LD_STRING GoToWest
15446: PPUSH
15447: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15451: LD_INT 17
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15461: LD_INT 35
15463: PPUSH
15464: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15468: LD_ADDR_VAR 0 2
15472: PUSH
15473: LD_INT 17
15475: PPUSH
15476: LD_INT 22
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 2
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 3
15511: PUSH
15512: LD_INT 58
15514: PUSH
15515: EMPTY
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 70
15539: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: LD_INT 22
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: LD_INT 55
15560: PUSH
15561: EMPTY
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: LD_INT 21
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 21
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 3
15593: PUSH
15594: LD_INT 58
15596: PUSH
15597: EMPTY
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15623: LD_VAR 0 2
15627: PUSH
15628: LD_INT 0
15630: PLUS
15631: PUSH
15632: LD_VAR 0 3
15636: PUSH
15637: LD_INT 0
15639: PLUS
15640: EQUAL
15641: IFFALSE 15461
// SaveCharacters ( Heike , 04_1_Heike ) ;
15643: LD_EXP 25
15647: PPUSH
15648: LD_STRING 04_1_Heike
15650: PPUSH
15651: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15655: LD_EXP 35
15659: PUSH
15660: LD_EXP 35
15664: PUSH
15665: LD_EXP 39
15669: IN
15670: NOT
15671: AND
15672: IFFALSE 15688
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15674: LD_EXP 35
15678: PPUSH
15679: LD_STRING 04_1_Aviradze
15681: PPUSH
15682: CALL_OW 38
15686: GO 15706
// if Aviradze then
15688: LD_EXP 35
15692: IFFALSE 15706
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15694: LD_EXP 35
15698: PPUSH
15699: LD_STRING 04_1_Aviradze_L
15701: PPUSH
15702: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15706: LD_EXP 28
15710: PUSH
15711: LD_EXP 28
15715: PUSH
15716: LD_EXP 39
15720: IN
15721: NOT
15722: AND
15723: IFFALSE 15739
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15725: LD_EXP 28
15729: PPUSH
15730: LD_STRING 04_1_Ibrahim
15732: PPUSH
15733: CALL_OW 38
15737: GO 15757
// if Ibrahim then
15739: LD_EXP 28
15743: IFFALSE 15757
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15745: LD_EXP 28
15749: PPUSH
15750: LD_STRING 04_1_Ibrahim_L
15752: PPUSH
15753: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15757: LD_EXP 29
15761: PUSH
15762: LD_EXP 29
15766: PUSH
15767: LD_EXP 39
15771: IN
15772: NOT
15773: AND
15774: IFFALSE 15790
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15776: LD_EXP 29
15780: PPUSH
15781: LD_STRING 04_1_Kamil
15783: PPUSH
15784: CALL_OW 38
15788: GO 15808
// if Kamil then
15790: LD_EXP 29
15794: IFFALSE 15808
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15796: LD_EXP 29
15800: PPUSH
15801: LD_STRING 04_1_Kamil_L
15803: PPUSH
15804: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15808: LD_EXP 31
15812: PUSH
15813: LD_EXP 31
15817: PUSH
15818: LD_EXP 39
15822: IN
15823: NOT
15824: AND
15825: IFFALSE 15841
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15827: LD_EXP 31
15831: PPUSH
15832: LD_STRING 04_1_Sophia
15834: PPUSH
15835: CALL_OW 38
15839: GO 15859
// if Sophia then
15841: LD_EXP 31
15845: IFFALSE 15859
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15847: LD_EXP 31
15851: PPUSH
15852: LD_STRING 04_1_Sophia_L
15854: PPUSH
15855: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15859: LD_EXP 30
15863: PUSH
15864: LD_EXP 30
15868: PUSH
15869: LD_EXP 39
15873: IN
15874: NOT
15875: AND
15876: IFFALSE 15892
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15878: LD_EXP 30
15882: PPUSH
15883: LD_STRING 04_1_Kaia
15885: PPUSH
15886: CALL_OW 38
15890: GO 15910
// if Kaia then
15892: LD_EXP 30
15896: IFFALSE 15910
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15898: LD_EXP 30
15902: PPUSH
15903: LD_STRING 04_1_Kaia_L
15905: PPUSH
15906: CALL_OW 38
// if Givi then
15910: LD_EXP 26
15914: IFFALSE 15928
// SaveCharacters ( Givi , 04_1_Givi ) ;
15916: LD_EXP 26
15920: PPUSH
15921: LD_STRING 04_1_Givi
15923: PPUSH
15924: CALL_OW 38
// if Mike then
15928: LD_EXP 27
15932: IFFALSE 15946
// SaveCharacters ( Mike , 04_1_Mike ) ;
15934: LD_EXP 27
15938: PPUSH
15939: LD_STRING 04_1_Mike
15941: PPUSH
15942: CALL_OW 38
// if Markov then
15946: LD_EXP 32
15950: IFFALSE 15964
// SaveCharacters ( Markov , 04_1_Markov ) ;
15952: LD_EXP 32
15956: PPUSH
15957: LD_STRING 04_1_Markov
15959: PPUSH
15960: CALL_OW 38
// if Kurt then
15964: LD_EXP 34
15968: IFFALSE 15989
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15970: LD_EXP 34
15974: PPUSH
15975: LD_STRING 04_1_Kurt
15977: PPUSH
15978: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15982: LD_STRING enableBioCharacter(BIO_KURT)
15984: PPUSH
15985: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15989: LD_EXP 37
15993: PUSH
15994: LD_EXP 39
15998: DIFF
15999: IFFALSE 16019
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16001: LD_EXP 37
16005: PUSH
16006: LD_EXP 39
16010: DIFF
16011: PPUSH
16012: LD_STRING 04_1_others
16014: PPUSH
16015: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16019: LD_EXP 39
16023: PUSH
16024: LD_EXP 37
16028: AND
16029: IFFALSE 16114
// begin tmp := [ ] ;
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i in heikeSecondSquad do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: LD_EXP 37
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16094
// if i in aviradzeSquad then
16051: LD_VAR 0 1
16055: PUSH
16056: LD_EXP 39
16060: IN
16061: IFFALSE 16092
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_VAR 0 2
16072: PPUSH
16073: LD_VAR 0 2
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL_OW 1
16091: ST_TO_ADDR
16092: GO 16048
16094: POP
16095: POP
// if tmp then
16096: LD_VAR 0 2
16100: IFFALSE 16114
// SaveCharacters ( tmp , 04_1_others_L ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: LD_STRING 04_1_others_L
16109: PPUSH
16110: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16114: LD_ADDR_VAR 0 2
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 23
16131: PUSH
16132: LD_INT 0
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PPUSH
16143: CALL_OW 69
16147: ST_TO_ADDR
// if tmp then
16148: LD_VAR 0 2
16152: IFFALSE 16166
// SaveCharacters ( tmp , 04_1_apes ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_STRING 04_1_apes
16161: PPUSH
16162: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16166: LD_ADDR_VAR 0 2
16170: PUSH
16171: LD_INT 17
16173: PPUSH
16174: LD_INT 21
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 70
16188: ST_TO_ADDR
// if tmp then
16189: LD_VAR 0 2
16193: IFFALSE 16533
// begin tmp2 := [ ] ;
16195: LD_ADDR_VAR 0 3
16199: PUSH
16200: EMPTY
16201: ST_TO_ADDR
// for i in tmp do
16202: LD_ADDR_VAR 0 1
16206: PUSH
16207: LD_VAR 0 2
16211: PUSH
16212: FOR_IN
16213: IFFALSE 16519
// begin driver := IsDrivenBy ( i ) ;
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 311
16229: ST_TO_ADDR
// if not driver then
16230: LD_VAR 0 5
16234: NOT
16235: IFFALSE 16239
// continue ;
16237: GO 16212
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16239: LD_VAR 0 1
16243: PPUSH
16244: CALL_OW 264
16248: PUSH
16249: LD_INT 32
16251: PUSH
16252: LD_INT 12
16254: PUSH
16255: LD_INT 51
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: IN
16263: IFFALSE 16411
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16265: LD_ADDR_VAR 0 4
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: LD_INT 1
16277: PPUSH
16278: CALL_OW 289
16282: PUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: LD_INT 2
16290: PPUSH
16291: CALL_OW 289
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: LD_VAR 0 3
16309: PPUSH
16310: LD_VAR 0 3
16314: PUSH
16315: LD_INT 1
16317: PLUS
16318: PPUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 265
16328: PUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 262
16338: PUSH
16339: LD_VAR 0 1
16343: PPUSH
16344: CALL_OW 263
16348: PUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 264
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL_OW 248
16368: PUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 256
16378: PUSH
16379: LD_VAR 0 4
16383: PUSH
16384: LD_VAR 0 5
16388: PPUSH
16389: CALL_OW 257
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PPUSH
16404: CALL_OW 1
16408: ST_TO_ADDR
// end else
16409: GO 16517
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16411: LD_ADDR_VAR 0 3
16415: PUSH
16416: LD_VAR 0 3
16420: PPUSH
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 1
16428: PLUS
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 265
16439: PUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: CALL_OW 262
16449: PUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 263
16459: PUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 264
16469: PUSH
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 248
16479: PUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 256
16489: PUSH
16490: EMPTY
16491: PUSH
16492: LD_VAR 0 5
16496: PPUSH
16497: CALL_OW 257
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 1
16516: ST_TO_ADDR
// end ;
16517: GO 16212
16519: POP
16520: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16521: LD_VAR 0 3
16525: PPUSH
16526: LD_STRING 04_1_Vehicles
16528: PPUSH
16529: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16533: LD_EXP 21
16537: PPUSH
16538: LD_STRING 04_1_RuLabCaptured
16540: PPUSH
16541: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16545: LD_EXP 19
16549: PPUSH
16550: LD_STRING 04_1_EscapeCounter
16552: PPUSH
16553: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16557: LD_EXP 15
16561: PPUSH
16562: LD_STRING 04_1_BaseHill
16564: PPUSH
16565: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16569: LD_OWVAR 1
16573: PPUSH
16574: LD_STRING 04_1_Time
16576: PPUSH
16577: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16581: LD_EXP 14
16585: PPUSH
16586: LD_STRING 04_1_DeadCounter
16588: PPUSH
16589: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16593: LD_EXP 24
16597: PUSH
16598: LD_INT 112
16600: PPUSH
16601: CALL_OW 255
16605: MUL
16606: PUSH
16607: LD_INT 2
16609: EQUAL
16610: PPUSH
16611: LD_STRING 04_1_KaganCaptured
16613: PPUSH
16614: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16618: LD_INT 22
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 34
16630: PUSH
16631: LD_INT 26
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 69
16646: PUSH
16647: LD_INT 0
16649: PLUS
16650: PPUSH
16651: LD_STRING 04_1_Flamethrower
16653: PPUSH
16654: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16658: LD_INT 1
16660: PPUSH
16661: LD_STRING __x1\04_cont2
16663: PPUSH
16664: CALL_OW 340
// end ; end_of_file
16668: PPOPN 5
16670: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 266
16680: PUSH
16681: LD_INT 0
16683: EQUAL
16684: PUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 255
16694: PUSH
16695: LD_INT 2
16697: EQUAL
16698: AND
16699: IFFALSE 16709
// baseConstructed := true ;
16701: LD_ADDR_EXP 3
16705: PUSH
16706: LD_INT 1
16708: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 266
16718: PUSH
16719: LD_INT 6
16721: EQUAL
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 255
16732: PUSH
16733: LD_INT 2
16735: EQUAL
16736: AND
16737: IFFALSE 16747
// labConstructed := true ;
16739: LD_ADDR_EXP 4
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// end ;
16747: PPOPN 1
16749: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL 33541 0 1
// if un = Heike then
16759: LD_VAR 0 1
16763: PUSH
16764: LD_EXP 25
16768: EQUAL
16769: IFFALSE 16778
// YouLost ( Heike ) ;
16771: LD_STRING Heike
16773: PPUSH
16774: CALL_OW 104
// if un = Omar then
16778: LD_VAR 0 1
16782: PUSH
16783: LD_EXP 33
16787: EQUAL
16788: IFFALSE 16797
// YouLost ( Omar ) ;
16790: LD_STRING Omar
16792: PPUSH
16793: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 23
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 21
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: IN
16842: IFFALSE 16858
// loseCounter := loseCounter + 1 ;
16844: LD_ADDR_EXP 14
16848: PUSH
16849: LD_EXP 14
16853: PUSH
16854: LD_INT 1
16856: PLUS
16857: ST_TO_ADDR
// if un = omikron then
16858: LD_VAR 0 1
16862: PUSH
16863: LD_INT 64
16865: EQUAL
16866: IFFALSE 16876
// omicronFall := true ;
16868: LD_ADDR_EXP 13
16872: PUSH
16873: LD_INT 1
16875: ST_TO_ADDR
// if un = kirov then
16876: LD_VAR 0 1
16880: PUSH
16881: LD_INT 71
16883: EQUAL
16884: IFFALSE 16901
// begin ChangeMissionObjectives ( KirovDone ) ;
16886: LD_STRING KirovDone
16888: PPUSH
16889: CALL_OW 337
// kirovDestroyed := true ;
16893: LD_ADDR_EXP 16
16897: PUSH
16898: LD_INT 1
16900: ST_TO_ADDR
// end ; if un = beria then
16901: LD_VAR 0 1
16905: PUSH
16906: LD_INT 106
16908: EQUAL
16909: IFFALSE 16926
// begin ChangeMissionObjectives ( BeriaDone ) ;
16911: LD_STRING BeriaDone
16913: PPUSH
16914: CALL_OW 337
// beriaDestroyed := true ;
16918: LD_ADDR_EXP 17
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// end ; if un = kagan then
16926: LD_VAR 0 1
16930: PUSH
16931: LD_INT 112
16933: EQUAL
16934: IFFALSE 16944
// kaganDestroyed := true ;
16936: LD_ADDR_EXP 18
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// if un in russianPatrol then
16944: LD_VAR 0 1
16948: PUSH
16949: LD_EXP 47
16953: IN
16954: IFFALSE 16972
// russianPatrol := russianPatrol diff un ;
16956: LD_ADDR_EXP 47
16960: PUSH
16961: LD_EXP 47
16965: PUSH
16966: LD_VAR 0 1
16970: DIFF
16971: ST_TO_ADDR
// if un in russianOmicronAttackers then
16972: LD_VAR 0 1
16976: PUSH
16977: LD_EXP 48
16981: IN
16982: IFFALSE 17000
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16984: LD_ADDR_EXP 48
16988: PUSH
16989: LD_EXP 48
16993: PUSH
16994: LD_VAR 0 1
16998: DIFF
16999: ST_TO_ADDR
// end ;
17000: PPOPN 1
17002: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 22
17028: PUSH
17029: LD_INT 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_INT 6
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 30
17054: PUSH
17055: LD_INT 32
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: IN
17071: IFFALSE 17244
// begin sol := UnitsInside ( un ) ;
17073: LD_ADDR_VAR 0 3
17077: PUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 313
17087: ST_TO_ADDR
// if not sol then
17088: LD_VAR 0 3
17092: NOT
17093: IFFALSE 17097
// exit ;
17095: GO 17244
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 255
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 5
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: ST_TO_ADDR
// if not nearestBarracks then
17156: LD_VAR 0 4
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17244
// for i in nearestBarracks do
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_VAR 0 4
17174: PUSH
17175: FOR_IN
17176: IFFALSE 17211
// if UnitsInside ( i ) = 6 then
17178: LD_VAR 0 2
17182: PPUSH
17183: CALL_OW 313
17187: PUSH
17188: LD_INT 6
17190: EQUAL
17191: IFFALSE 17209
// nearestBarracks := nearestBarracks diff i ;
17193: LD_ADDR_VAR 0 4
17197: PUSH
17198: LD_VAR 0 4
17202: PUSH
17203: LD_VAR 0 2
17207: DIFF
17208: ST_TO_ADDR
17209: GO 17175
17211: POP
17212: POP
// if not nearestBarracks then
17213: LD_VAR 0 4
17217: NOT
17218: IFFALSE 17222
// exit ;
17220: GO 17244
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17222: LD_VAR 0 3
17226: PUSH
17227: LD_INT 1
17229: ARRAY
17230: PPUSH
17231: LD_VAR 0 4
17235: PUSH
17236: LD_INT 1
17238: ARRAY
17239: PPUSH
17240: CALL_OW 120
// end ; end ;
17244: PPOPN 4
17246: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17247: LD_INT 0
17249: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17250: LD_EXP 8
17254: NOT
17255: PUSH
17256: LD_EXP 5
17260: NOT
17261: OR
17262: IFFALSE 17266
// exit ;
17264: GO 17334
// for i in camAreas do
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: LD_EXP 8
17275: PUSH
17276: FOR_IN
17277: IFFALSE 17332
// if InArea ( x , y , i ) then
17279: LD_VAR 0 3
17283: PPUSH
17284: LD_VAR 0 4
17288: PPUSH
17289: LD_VAR 0 5
17293: PPUSH
17294: CALL_OW 309
17298: IFFALSE 17330
// begin SetAreaMapShow ( i , 0 ) ;
17300: LD_VAR 0 5
17304: PPUSH
17305: LD_INT 0
17307: PPUSH
17308: CALL_OW 424
// camAreas := camAreas diff i ;
17312: LD_ADDR_EXP 8
17316: PUSH
17317: LD_EXP 8
17321: PUSH
17322: LD_VAR 0 5
17326: DIFF
17327: ST_TO_ADDR
// break ;
17328: GO 17332
// end ;
17330: GO 17276
17332: POP
17333: POP
// end ;
17334: PPOPN 5
17336: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_INT 2
17344: EQUAL
17345: PUSH
17346: LD_VAR 0 2
17350: PUSH
17351: LD_INT 5
17353: PUSH
17354: LD_INT 8
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: IN
17361: AND
17362: IFFALSE 17371
// YouLost ( Ally ) ;
17364: LD_STRING Ally
17366: PPUSH
17367: CALL_OW 104
// end ;
17371: PPOPN 2
17373: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17374: LD_VAR 0 1
17378: PUSH
17379: LD_EXP 30
17383: EQUAL
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: LD_INT 6
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: IN
17400: AND
17401: IFFALSE 17432
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17403: LD_ADDR_EXP 23
17407: PUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 250
17417: PUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 251
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: ST_TO_ADDR
// end ;
17432: PPOPN 3
17434: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17435: LD_VAR 0 1
17439: PPUSH
17440: LD_VAR 0 2
17444: PPUSH
17445: CALL 33661 0 2
// end ; end_of_file
17449: PPOPN 2
17451: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17452: LD_EXP 11
17456: NOT
17457: PUSH
17458: LD_INT 12
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: CALL_OW 287
17468: PUSH
17469: LD_INT 20
17471: PUSH
17472: LD_INT 16
17474: PUSH
17475: LD_INT 12
17477: PUSH
17478: LD_INT 10
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: LD_OWVAR 67
17491: ARRAY
17492: LESS
17493: AND
17494: IFFALSE 17521
17496: GO 17498
17498: DISABLE
// begin enable ;
17499: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17500: LD_INT 1
17502: PPUSH
17503: LD_INT 5
17505: PPUSH
17506: CALL_OW 12
17510: PPUSH
17511: LD_INT 12
17513: PPUSH
17514: LD_INT 1
17516: PPUSH
17517: CALL_OW 55
// end ; end_of_file
17521: END
// every 0 0$1 trigger omarCountdown do
17522: LD_EXP 22
17526: IFFALSE 17578
17528: GO 17530
17530: DISABLE
// begin enable ;
17531: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17532: LD_ADDR_OWVAR 47
17536: PUSH
17537: LD_STRING #X104-1
17539: PUSH
17540: LD_EXP 22
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17549: LD_ADDR_EXP 22
17553: PUSH
17554: LD_EXP 22
17558: PUSH
17559: LD_INT 35
17561: MINUS
17562: ST_TO_ADDR
// if not omarCountdown then
17563: LD_EXP 22
17567: NOT
17568: IFFALSE 17578
// display_strings :=  ;
17570: LD_ADDR_OWVAR 47
17574: PUSH
17575: LD_STRING 
17577: ST_TO_ADDR
// end ; end_of_file
17578: END
// every 0 0$1 do
17579: GO 17581
17581: DISABLE
// begin enable ;
17582: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17583: LD_STRING updateTimer(
17585: PUSH
17586: LD_OWVAR 1
17590: STR
17591: PUSH
17592: LD_STRING );
17594: STR
17595: PPUSH
17596: CALL_OW 559
// end ;
17600: END
// export function SOS_MapStart ( ) ; begin
17601: LD_INT 0
17603: PPUSH
// if streamModeActive then
17604: LD_EXP 53
17608: IFFALSE 17617
// DefineStreamItems ( true ) ;
17610: LD_INT 1
17612: PPUSH
17613: CALL 19421 0 1
// UpdateLuaVariables ( ) ;
17617: CALL 17634 0 0
// UpdateFactoryWaypoints ( ) ;
17621: CALL 32282 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17625: CALL 32539 0 0
// end ;
17629: LD_VAR 0 1
17633: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
17634: LD_INT 0
17636: PPUSH
// if not globalGameSaveCounter then
17637: LD_EXP 52
17641: NOT
17642: IFFALSE 17653
// ToLua ( setGameSaveCounter(0) ) else
17644: LD_STRING setGameSaveCounter(0)
17646: PPUSH
17647: CALL_OW 559
17651: GO 17685
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17653: LD_ADDR_EXP 52
17657: PUSH
17658: LD_EXP 52
17662: PPUSH
17663: CALL 76659 0 1
17667: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17668: LD_STRING setGameSaveCounter(
17670: PUSH
17671: LD_EXP 52
17675: STR
17676: PUSH
17677: LD_STRING )
17679: STR
17680: PPUSH
17681: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17685: LD_STRING setGameDifficulty(
17687: PUSH
17688: LD_OWVAR 67
17692: STR
17693: PUSH
17694: LD_STRING )
17696: STR
17697: PPUSH
17698: CALL_OW 559
// end ;
17702: LD_VAR 0 1
17706: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17707: LD_INT 0
17709: PPUSH
// if p2 = stream_mode then
17710: LD_VAR 0 2
17714: PUSH
17715: LD_INT 100
17717: EQUAL
17718: IFFALSE 18721
// begin if not StreamModeActive then
17720: LD_EXP 53
17724: NOT
17725: IFFALSE 17735
// StreamModeActive := true ;
17727: LD_ADDR_EXP 53
17731: PUSH
17732: LD_INT 1
17734: ST_TO_ADDR
// if p3 = 0 then
17735: LD_VAR 0 3
17739: PUSH
17740: LD_INT 0
17742: EQUAL
17743: IFFALSE 17749
// InitStreamMode ;
17745: CALL 18957 0 0
// if p3 = 1 then
17749: LD_VAR 0 3
17753: PUSH
17754: LD_INT 1
17756: EQUAL
17757: IFFALSE 17767
// sRocket := true ;
17759: LD_ADDR_EXP 58
17763: PUSH
17764: LD_INT 1
17766: ST_TO_ADDR
// if p3 = 2 then
17767: LD_VAR 0 3
17771: PUSH
17772: LD_INT 2
17774: EQUAL
17775: IFFALSE 17785
// sSpeed := true ;
17777: LD_ADDR_EXP 57
17781: PUSH
17782: LD_INT 1
17784: ST_TO_ADDR
// if p3 = 3 then
17785: LD_VAR 0 3
17789: PUSH
17790: LD_INT 3
17792: EQUAL
17793: IFFALSE 17803
// sEngine := true ;
17795: LD_ADDR_EXP 59
17799: PUSH
17800: LD_INT 1
17802: ST_TO_ADDR
// if p3 = 4 then
17803: LD_VAR 0 3
17807: PUSH
17808: LD_INT 4
17810: EQUAL
17811: IFFALSE 17821
// sSpec := true ;
17813: LD_ADDR_EXP 56
17817: PUSH
17818: LD_INT 1
17820: ST_TO_ADDR
// if p3 = 5 then
17821: LD_VAR 0 3
17825: PUSH
17826: LD_INT 5
17828: EQUAL
17829: IFFALSE 17839
// sLevel := true ;
17831: LD_ADDR_EXP 60
17835: PUSH
17836: LD_INT 1
17838: ST_TO_ADDR
// if p3 = 6 then
17839: LD_VAR 0 3
17843: PUSH
17844: LD_INT 6
17846: EQUAL
17847: IFFALSE 17857
// sArmoury := true ;
17849: LD_ADDR_EXP 61
17853: PUSH
17854: LD_INT 1
17856: ST_TO_ADDR
// if p3 = 7 then
17857: LD_VAR 0 3
17861: PUSH
17862: LD_INT 7
17864: EQUAL
17865: IFFALSE 17875
// sRadar := true ;
17867: LD_ADDR_EXP 62
17871: PUSH
17872: LD_INT 1
17874: ST_TO_ADDR
// if p3 = 8 then
17875: LD_VAR 0 3
17879: PUSH
17880: LD_INT 8
17882: EQUAL
17883: IFFALSE 17893
// sBunker := true ;
17885: LD_ADDR_EXP 63
17889: PUSH
17890: LD_INT 1
17892: ST_TO_ADDR
// if p3 = 9 then
17893: LD_VAR 0 3
17897: PUSH
17898: LD_INT 9
17900: EQUAL
17901: IFFALSE 17911
// sHack := true ;
17903: LD_ADDR_EXP 64
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
// if p3 = 10 then
17911: LD_VAR 0 3
17915: PUSH
17916: LD_INT 10
17918: EQUAL
17919: IFFALSE 17929
// sFire := true ;
17921: LD_ADDR_EXP 65
17925: PUSH
17926: LD_INT 1
17928: ST_TO_ADDR
// if p3 = 11 then
17929: LD_VAR 0 3
17933: PUSH
17934: LD_INT 11
17936: EQUAL
17937: IFFALSE 17947
// sRefresh := true ;
17939: LD_ADDR_EXP 66
17943: PUSH
17944: LD_INT 1
17946: ST_TO_ADDR
// if p3 = 12 then
17947: LD_VAR 0 3
17951: PUSH
17952: LD_INT 12
17954: EQUAL
17955: IFFALSE 17965
// sExp := true ;
17957: LD_ADDR_EXP 67
17961: PUSH
17962: LD_INT 1
17964: ST_TO_ADDR
// if p3 = 13 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_INT 13
17972: EQUAL
17973: IFFALSE 17983
// sDepot := true ;
17975: LD_ADDR_EXP 68
17979: PUSH
17980: LD_INT 1
17982: ST_TO_ADDR
// if p3 = 14 then
17983: LD_VAR 0 3
17987: PUSH
17988: LD_INT 14
17990: EQUAL
17991: IFFALSE 18001
// sFlag := true ;
17993: LD_ADDR_EXP 69
17997: PUSH
17998: LD_INT 1
18000: ST_TO_ADDR
// if p3 = 15 then
18001: LD_VAR 0 3
18005: PUSH
18006: LD_INT 15
18008: EQUAL
18009: IFFALSE 18019
// sKamikadze := true ;
18011: LD_ADDR_EXP 77
18015: PUSH
18016: LD_INT 1
18018: ST_TO_ADDR
// if p3 = 16 then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 16
18026: EQUAL
18027: IFFALSE 18037
// sTroll := true ;
18029: LD_ADDR_EXP 78
18033: PUSH
18034: LD_INT 1
18036: ST_TO_ADDR
// if p3 = 17 then
18037: LD_VAR 0 3
18041: PUSH
18042: LD_INT 17
18044: EQUAL
18045: IFFALSE 18055
// sSlow := true ;
18047: LD_ADDR_EXP 79
18051: PUSH
18052: LD_INT 1
18054: ST_TO_ADDR
// if p3 = 18 then
18055: LD_VAR 0 3
18059: PUSH
18060: LD_INT 18
18062: EQUAL
18063: IFFALSE 18073
// sLack := true ;
18065: LD_ADDR_EXP 80
18069: PUSH
18070: LD_INT 1
18072: ST_TO_ADDR
// if p3 = 19 then
18073: LD_VAR 0 3
18077: PUSH
18078: LD_INT 19
18080: EQUAL
18081: IFFALSE 18091
// sTank := true ;
18083: LD_ADDR_EXP 82
18087: PUSH
18088: LD_INT 1
18090: ST_TO_ADDR
// if p3 = 20 then
18091: LD_VAR 0 3
18095: PUSH
18096: LD_INT 20
18098: EQUAL
18099: IFFALSE 18109
// sRemote := true ;
18101: LD_ADDR_EXP 83
18105: PUSH
18106: LD_INT 1
18108: ST_TO_ADDR
// if p3 = 21 then
18109: LD_VAR 0 3
18113: PUSH
18114: LD_INT 21
18116: EQUAL
18117: IFFALSE 18127
// sPowell := true ;
18119: LD_ADDR_EXP 84
18123: PUSH
18124: LD_INT 1
18126: ST_TO_ADDR
// if p3 = 22 then
18127: LD_VAR 0 3
18131: PUSH
18132: LD_INT 22
18134: EQUAL
18135: IFFALSE 18145
// sTeleport := true ;
18137: LD_ADDR_EXP 87
18141: PUSH
18142: LD_INT 1
18144: ST_TO_ADDR
// if p3 = 23 then
18145: LD_VAR 0 3
18149: PUSH
18150: LD_INT 23
18152: EQUAL
18153: IFFALSE 18163
// sOilTower := true ;
18155: LD_ADDR_EXP 89
18159: PUSH
18160: LD_INT 1
18162: ST_TO_ADDR
// if p3 = 24 then
18163: LD_VAR 0 3
18167: PUSH
18168: LD_INT 24
18170: EQUAL
18171: IFFALSE 18181
// sShovel := true ;
18173: LD_ADDR_EXP 90
18177: PUSH
18178: LD_INT 1
18180: ST_TO_ADDR
// if p3 = 25 then
18181: LD_VAR 0 3
18185: PUSH
18186: LD_INT 25
18188: EQUAL
18189: IFFALSE 18199
// sSheik := true ;
18191: LD_ADDR_EXP 91
18195: PUSH
18196: LD_INT 1
18198: ST_TO_ADDR
// if p3 = 26 then
18199: LD_VAR 0 3
18203: PUSH
18204: LD_INT 26
18206: EQUAL
18207: IFFALSE 18217
// sEarthquake := true ;
18209: LD_ADDR_EXP 93
18213: PUSH
18214: LD_INT 1
18216: ST_TO_ADDR
// if p3 = 27 then
18217: LD_VAR 0 3
18221: PUSH
18222: LD_INT 27
18224: EQUAL
18225: IFFALSE 18235
// sAI := true ;
18227: LD_ADDR_EXP 94
18231: PUSH
18232: LD_INT 1
18234: ST_TO_ADDR
// if p3 = 28 then
18235: LD_VAR 0 3
18239: PUSH
18240: LD_INT 28
18242: EQUAL
18243: IFFALSE 18253
// sCargo := true ;
18245: LD_ADDR_EXP 97
18249: PUSH
18250: LD_INT 1
18252: ST_TO_ADDR
// if p3 = 29 then
18253: LD_VAR 0 3
18257: PUSH
18258: LD_INT 29
18260: EQUAL
18261: IFFALSE 18271
// sDLaser := true ;
18263: LD_ADDR_EXP 98
18267: PUSH
18268: LD_INT 1
18270: ST_TO_ADDR
// if p3 = 30 then
18271: LD_VAR 0 3
18275: PUSH
18276: LD_INT 30
18278: EQUAL
18279: IFFALSE 18289
// sExchange := true ;
18281: LD_ADDR_EXP 99
18285: PUSH
18286: LD_INT 1
18288: ST_TO_ADDR
// if p3 = 31 then
18289: LD_VAR 0 3
18293: PUSH
18294: LD_INT 31
18296: EQUAL
18297: IFFALSE 18307
// sFac := true ;
18299: LD_ADDR_EXP 100
18303: PUSH
18304: LD_INT 1
18306: ST_TO_ADDR
// if p3 = 32 then
18307: LD_VAR 0 3
18311: PUSH
18312: LD_INT 32
18314: EQUAL
18315: IFFALSE 18325
// sPower := true ;
18317: LD_ADDR_EXP 101
18321: PUSH
18322: LD_INT 1
18324: ST_TO_ADDR
// if p3 = 33 then
18325: LD_VAR 0 3
18329: PUSH
18330: LD_INT 33
18332: EQUAL
18333: IFFALSE 18343
// sRandom := true ;
18335: LD_ADDR_EXP 102
18339: PUSH
18340: LD_INT 1
18342: ST_TO_ADDR
// if p3 = 34 then
18343: LD_VAR 0 3
18347: PUSH
18348: LD_INT 34
18350: EQUAL
18351: IFFALSE 18361
// sShield := true ;
18353: LD_ADDR_EXP 103
18357: PUSH
18358: LD_INT 1
18360: ST_TO_ADDR
// if p3 = 35 then
18361: LD_VAR 0 3
18365: PUSH
18366: LD_INT 35
18368: EQUAL
18369: IFFALSE 18379
// sTime := true ;
18371: LD_ADDR_EXP 104
18375: PUSH
18376: LD_INT 1
18378: ST_TO_ADDR
// if p3 = 36 then
18379: LD_VAR 0 3
18383: PUSH
18384: LD_INT 36
18386: EQUAL
18387: IFFALSE 18397
// sTools := true ;
18389: LD_ADDR_EXP 105
18393: PUSH
18394: LD_INT 1
18396: ST_TO_ADDR
// if p3 = 101 then
18397: LD_VAR 0 3
18401: PUSH
18402: LD_INT 101
18404: EQUAL
18405: IFFALSE 18415
// sSold := true ;
18407: LD_ADDR_EXP 70
18411: PUSH
18412: LD_INT 1
18414: ST_TO_ADDR
// if p3 = 102 then
18415: LD_VAR 0 3
18419: PUSH
18420: LD_INT 102
18422: EQUAL
18423: IFFALSE 18433
// sDiff := true ;
18425: LD_ADDR_EXP 71
18429: PUSH
18430: LD_INT 1
18432: ST_TO_ADDR
// if p3 = 103 then
18433: LD_VAR 0 3
18437: PUSH
18438: LD_INT 103
18440: EQUAL
18441: IFFALSE 18451
// sFog := true ;
18443: LD_ADDR_EXP 74
18447: PUSH
18448: LD_INT 1
18450: ST_TO_ADDR
// if p3 = 104 then
18451: LD_VAR 0 3
18455: PUSH
18456: LD_INT 104
18458: EQUAL
18459: IFFALSE 18469
// sReset := true ;
18461: LD_ADDR_EXP 75
18465: PUSH
18466: LD_INT 1
18468: ST_TO_ADDR
// if p3 = 105 then
18469: LD_VAR 0 3
18473: PUSH
18474: LD_INT 105
18476: EQUAL
18477: IFFALSE 18487
// sSun := true ;
18479: LD_ADDR_EXP 76
18483: PUSH
18484: LD_INT 1
18486: ST_TO_ADDR
// if p3 = 106 then
18487: LD_VAR 0 3
18491: PUSH
18492: LD_INT 106
18494: EQUAL
18495: IFFALSE 18505
// sTiger := true ;
18497: LD_ADDR_EXP 72
18501: PUSH
18502: LD_INT 1
18504: ST_TO_ADDR
// if p3 = 107 then
18505: LD_VAR 0 3
18509: PUSH
18510: LD_INT 107
18512: EQUAL
18513: IFFALSE 18523
// sBomb := true ;
18515: LD_ADDR_EXP 73
18519: PUSH
18520: LD_INT 1
18522: ST_TO_ADDR
// if p3 = 108 then
18523: LD_VAR 0 3
18527: PUSH
18528: LD_INT 108
18530: EQUAL
18531: IFFALSE 18541
// sWound := true ;
18533: LD_ADDR_EXP 81
18537: PUSH
18538: LD_INT 1
18540: ST_TO_ADDR
// if p3 = 109 then
18541: LD_VAR 0 3
18545: PUSH
18546: LD_INT 109
18548: EQUAL
18549: IFFALSE 18559
// sBetray := true ;
18551: LD_ADDR_EXP 85
18555: PUSH
18556: LD_INT 1
18558: ST_TO_ADDR
// if p3 = 110 then
18559: LD_VAR 0 3
18563: PUSH
18564: LD_INT 110
18566: EQUAL
18567: IFFALSE 18577
// sContamin := true ;
18569: LD_ADDR_EXP 86
18573: PUSH
18574: LD_INT 1
18576: ST_TO_ADDR
// if p3 = 111 then
18577: LD_VAR 0 3
18581: PUSH
18582: LD_INT 111
18584: EQUAL
18585: IFFALSE 18595
// sOil := true ;
18587: LD_ADDR_EXP 88
18591: PUSH
18592: LD_INT 1
18594: ST_TO_ADDR
// if p3 = 112 then
18595: LD_VAR 0 3
18599: PUSH
18600: LD_INT 112
18602: EQUAL
18603: IFFALSE 18613
// sStu := true ;
18605: LD_ADDR_EXP 92
18609: PUSH
18610: LD_INT 1
18612: ST_TO_ADDR
// if p3 = 113 then
18613: LD_VAR 0 3
18617: PUSH
18618: LD_INT 113
18620: EQUAL
18621: IFFALSE 18631
// sBazooka := true ;
18623: LD_ADDR_EXP 95
18627: PUSH
18628: LD_INT 1
18630: ST_TO_ADDR
// if p3 = 114 then
18631: LD_VAR 0 3
18635: PUSH
18636: LD_INT 114
18638: EQUAL
18639: IFFALSE 18649
// sMortar := true ;
18641: LD_ADDR_EXP 96
18645: PUSH
18646: LD_INT 1
18648: ST_TO_ADDR
// if p3 = 115 then
18649: LD_VAR 0 3
18653: PUSH
18654: LD_INT 115
18656: EQUAL
18657: IFFALSE 18667
// sRanger := true ;
18659: LD_ADDR_EXP 106
18663: PUSH
18664: LD_INT 1
18666: ST_TO_ADDR
// if p3 = 116 then
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 116
18674: EQUAL
18675: IFFALSE 18685
// sComputer := true ;
18677: LD_ADDR_EXP 107
18681: PUSH
18682: LD_INT 1
18684: ST_TO_ADDR
// if p3 = 117 then
18685: LD_VAR 0 3
18689: PUSH
18690: LD_INT 117
18692: EQUAL
18693: IFFALSE 18703
// s30 := true ;
18695: LD_ADDR_EXP 108
18699: PUSH
18700: LD_INT 1
18702: ST_TO_ADDR
// if p3 = 118 then
18703: LD_VAR 0 3
18707: PUSH
18708: LD_INT 118
18710: EQUAL
18711: IFFALSE 18721
// s60 := true ;
18713: LD_ADDR_EXP 109
18717: PUSH
18718: LD_INT 1
18720: ST_TO_ADDR
// end ; if p2 = hack_mode then
18721: LD_VAR 0 2
18725: PUSH
18726: LD_INT 101
18728: EQUAL
18729: IFFALSE 18857
// begin case p3 of 1 :
18731: LD_VAR 0 3
18735: PUSH
18736: LD_INT 1
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18751
18744: POP
// hHackUnlimitedResources ; 2 :
18745: CALL 31028 0 0
18749: GO 18857
18751: LD_INT 2
18753: DOUBLE
18754: EQUAL
18755: IFTRUE 18759
18757: GO 18766
18759: POP
// hHackSetLevel10 ; 3 :
18760: CALL 31161 0 0
18764: GO 18857
18766: LD_INT 3
18768: DOUBLE
18769: EQUAL
18770: IFTRUE 18774
18772: GO 18781
18774: POP
// hHackSetLevel10YourUnits ; 4 :
18775: CALL 31246 0 0
18779: GO 18857
18781: LD_INT 4
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18796
18789: POP
// hHackInvincible ; 5 :
18790: CALL 31694 0 0
18794: GO 18857
18796: LD_INT 5
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18811
18804: POP
// hHackInvisible ; 6 :
18805: CALL 31805 0 0
18809: GO 18857
18811: LD_INT 6
18813: DOUBLE
18814: EQUAL
18815: IFTRUE 18819
18817: GO 18826
18819: POP
// hHackChangeYourSide ; 7 :
18820: CALL 31862 0 0
18824: GO 18857
18826: LD_INT 7
18828: DOUBLE
18829: EQUAL
18830: IFTRUE 18834
18832: GO 18841
18834: POP
// hHackChangeUnitSide ; 8 :
18835: CALL 31904 0 0
18839: GO 18857
18841: LD_INT 8
18843: DOUBLE
18844: EQUAL
18845: IFTRUE 18849
18847: GO 18856
18849: POP
// hHackFog ; end ;
18850: CALL 32005 0 0
18854: GO 18857
18856: POP
// end ; if p2 = game_save_mode then
18857: LD_VAR 0 2
18861: PUSH
18862: LD_INT 102
18864: EQUAL
18865: IFFALSE 18930
// begin if p3 = 1 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 1
18874: EQUAL
18875: IFFALSE 18887
// globalGameSaveCounter := p4 ;
18877: LD_ADDR_EXP 52
18881: PUSH
18882: LD_VAR 0 4
18886: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18887: LD_VAR 0 3
18891: PUSH
18892: LD_INT 2
18894: EQUAL
18895: PUSH
18896: LD_EXP 52
18900: AND
18901: IFFALSE 18920
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18903: LD_STRING setGameSaveCounter(
18905: PUSH
18906: LD_EXP 52
18910: STR
18911: PUSH
18912: LD_STRING )
18914: STR
18915: PPUSH
18916: CALL_OW 559
// display_strings := globalGameSaveCounter ;
18920: LD_ADDR_OWVAR 47
18924: PUSH
18925: LD_EXP 52
18929: ST_TO_ADDR
// end ; end ;
18930: LD_VAR 0 7
18934: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18935: GO 18937
18937: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18938: LD_STRING initStreamRollete();
18940: PPUSH
18941: CALL_OW 559
// InitStreamMode ;
18945: CALL 18957 0 0
// DefineStreamItems ( false ) ;
18949: LD_INT 0
18951: PPUSH
18952: CALL 19421 0 1
// end ;
18956: END
// function InitStreamMode ; begin
18957: LD_INT 0
18959: PPUSH
// streamModeActive := false ;
18960: LD_ADDR_EXP 53
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// normalCounter := 36 ;
18968: LD_ADDR_EXP 54
18972: PUSH
18973: LD_INT 36
18975: ST_TO_ADDR
// hardcoreCounter := 18 ;
18976: LD_ADDR_EXP 55
18980: PUSH
18981: LD_INT 18
18983: ST_TO_ADDR
// sRocket := false ;
18984: LD_ADDR_EXP 58
18988: PUSH
18989: LD_INT 0
18991: ST_TO_ADDR
// sSpeed := false ;
18992: LD_ADDR_EXP 57
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// sEngine := false ;
19000: LD_ADDR_EXP 59
19004: PUSH
19005: LD_INT 0
19007: ST_TO_ADDR
// sSpec := false ;
19008: LD_ADDR_EXP 56
19012: PUSH
19013: LD_INT 0
19015: ST_TO_ADDR
// sLevel := false ;
19016: LD_ADDR_EXP 60
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// sArmoury := false ;
19024: LD_ADDR_EXP 61
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// sRadar := false ;
19032: LD_ADDR_EXP 62
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// sBunker := false ;
19040: LD_ADDR_EXP 63
19044: PUSH
19045: LD_INT 0
19047: ST_TO_ADDR
// sHack := false ;
19048: LD_ADDR_EXP 64
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// sFire := false ;
19056: LD_ADDR_EXP 65
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// sRefresh := false ;
19064: LD_ADDR_EXP 66
19068: PUSH
19069: LD_INT 0
19071: ST_TO_ADDR
// sExp := false ;
19072: LD_ADDR_EXP 67
19076: PUSH
19077: LD_INT 0
19079: ST_TO_ADDR
// sDepot := false ;
19080: LD_ADDR_EXP 68
19084: PUSH
19085: LD_INT 0
19087: ST_TO_ADDR
// sFlag := false ;
19088: LD_ADDR_EXP 69
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// sKamikadze := false ;
19096: LD_ADDR_EXP 77
19100: PUSH
19101: LD_INT 0
19103: ST_TO_ADDR
// sTroll := false ;
19104: LD_ADDR_EXP 78
19108: PUSH
19109: LD_INT 0
19111: ST_TO_ADDR
// sSlow := false ;
19112: LD_ADDR_EXP 79
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// sLack := false ;
19120: LD_ADDR_EXP 80
19124: PUSH
19125: LD_INT 0
19127: ST_TO_ADDR
// sTank := false ;
19128: LD_ADDR_EXP 82
19132: PUSH
19133: LD_INT 0
19135: ST_TO_ADDR
// sRemote := false ;
19136: LD_ADDR_EXP 83
19140: PUSH
19141: LD_INT 0
19143: ST_TO_ADDR
// sPowell := false ;
19144: LD_ADDR_EXP 84
19148: PUSH
19149: LD_INT 0
19151: ST_TO_ADDR
// sTeleport := false ;
19152: LD_ADDR_EXP 87
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// sOilTower := false ;
19160: LD_ADDR_EXP 89
19164: PUSH
19165: LD_INT 0
19167: ST_TO_ADDR
// sShovel := false ;
19168: LD_ADDR_EXP 90
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// sSheik := false ;
19176: LD_ADDR_EXP 91
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// sEarthquake := false ;
19184: LD_ADDR_EXP 93
19188: PUSH
19189: LD_INT 0
19191: ST_TO_ADDR
// sAI := false ;
19192: LD_ADDR_EXP 94
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
// sCargo := false ;
19200: LD_ADDR_EXP 97
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// sDLaser := false ;
19208: LD_ADDR_EXP 98
19212: PUSH
19213: LD_INT 0
19215: ST_TO_ADDR
// sExchange := false ;
19216: LD_ADDR_EXP 99
19220: PUSH
19221: LD_INT 0
19223: ST_TO_ADDR
// sFac := false ;
19224: LD_ADDR_EXP 100
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// sPower := false ;
19232: LD_ADDR_EXP 101
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// sRandom := false ;
19240: LD_ADDR_EXP 102
19244: PUSH
19245: LD_INT 0
19247: ST_TO_ADDR
// sShield := false ;
19248: LD_ADDR_EXP 103
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// sTime := false ;
19256: LD_ADDR_EXP 104
19260: PUSH
19261: LD_INT 0
19263: ST_TO_ADDR
// sTools := false ;
19264: LD_ADDR_EXP 105
19268: PUSH
19269: LD_INT 0
19271: ST_TO_ADDR
// sSold := false ;
19272: LD_ADDR_EXP 70
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// sDiff := false ;
19280: LD_ADDR_EXP 71
19284: PUSH
19285: LD_INT 0
19287: ST_TO_ADDR
// sFog := false ;
19288: LD_ADDR_EXP 74
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
// sReset := false ;
19296: LD_ADDR_EXP 75
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// sSun := false ;
19304: LD_ADDR_EXP 76
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// sTiger := false ;
19312: LD_ADDR_EXP 72
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// sBomb := false ;
19320: LD_ADDR_EXP 73
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// sWound := false ;
19328: LD_ADDR_EXP 81
19332: PUSH
19333: LD_INT 0
19335: ST_TO_ADDR
// sBetray := false ;
19336: LD_ADDR_EXP 85
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// sContamin := false ;
19344: LD_ADDR_EXP 86
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// sOil := false ;
19352: LD_ADDR_EXP 88
19356: PUSH
19357: LD_INT 0
19359: ST_TO_ADDR
// sStu := false ;
19360: LD_ADDR_EXP 92
19364: PUSH
19365: LD_INT 0
19367: ST_TO_ADDR
// sBazooka := false ;
19368: LD_ADDR_EXP 95
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// sMortar := false ;
19376: LD_ADDR_EXP 96
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// sRanger := false ;
19384: LD_ADDR_EXP 106
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// sComputer := false ;
19392: LD_ADDR_EXP 107
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// s30 := false ;
19400: LD_ADDR_EXP 108
19404: PUSH
19405: LD_INT 0
19407: ST_TO_ADDR
// s60 := false ;
19408: LD_ADDR_EXP 109
19412: PUSH
19413: LD_INT 0
19415: ST_TO_ADDR
// end ;
19416: LD_VAR 0 1
19420: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19421: LD_INT 0
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
19427: PPUSH
19428: PPUSH
19429: PPUSH
// result := [ ] ;
19430: LD_ADDR_VAR 0 2
19434: PUSH
19435: EMPTY
19436: ST_TO_ADDR
// if campaign_id = 1 then
19437: LD_OWVAR 69
19441: PUSH
19442: LD_INT 1
19444: EQUAL
19445: IFFALSE 22611
// begin case mission_number of 1 :
19447: LD_OWVAR 70
19451: PUSH
19452: LD_INT 1
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19536
19460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: LD_INT 11
19474: PUSH
19475: LD_INT 12
19477: PUSH
19478: LD_INT 15
19480: PUSH
19481: LD_INT 16
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_INT 23
19489: PUSH
19490: LD_INT 26
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 101
19506: PUSH
19507: LD_INT 102
19509: PUSH
19510: LD_INT 106
19512: PUSH
19513: LD_INT 116
19515: PUSH
19516: LD_INT 117
19518: PUSH
19519: LD_INT 118
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 22609
19536: LD_INT 2
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19628
19544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 4
19555: PUSH
19556: LD_INT 11
19558: PUSH
19559: LD_INT 12
19561: PUSH
19562: LD_INT 15
19564: PUSH
19565: LD_INT 16
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 26
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 101
19590: PUSH
19591: LD_INT 102
19593: PUSH
19594: LD_INT 105
19596: PUSH
19597: LD_INT 106
19599: PUSH
19600: LD_INT 108
19602: PUSH
19603: LD_INT 116
19605: PUSH
19606: LD_INT 117
19608: PUSH
19609: LD_INT 118
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: ST_TO_ADDR
19626: GO 22609
19628: LD_INT 3
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19724
19636: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 4
19647: PUSH
19648: LD_INT 5
19650: PUSH
19651: LD_INT 11
19653: PUSH
19654: LD_INT 12
19656: PUSH
19657: LD_INT 15
19659: PUSH
19660: LD_INT 16
19662: PUSH
19663: LD_INT 22
19665: PUSH
19666: LD_INT 26
19668: PUSH
19669: LD_INT 36
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 101
19686: PUSH
19687: LD_INT 102
19689: PUSH
19690: LD_INT 105
19692: PUSH
19693: LD_INT 106
19695: PUSH
19696: LD_INT 108
19698: PUSH
19699: LD_INT 116
19701: PUSH
19702: LD_INT 117
19704: PUSH
19705: LD_INT 118
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
19722: GO 22609
19724: LD_INT 4
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19828
19732: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 8
19749: PUSH
19750: LD_INT 11
19752: PUSH
19753: LD_INT 12
19755: PUSH
19756: LD_INT 15
19758: PUSH
19759: LD_INT 16
19761: PUSH
19762: LD_INT 22
19764: PUSH
19765: LD_INT 23
19767: PUSH
19768: LD_INT 26
19770: PUSH
19771: LD_INT 36
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 101
19790: PUSH
19791: LD_INT 102
19793: PUSH
19794: LD_INT 105
19796: PUSH
19797: LD_INT 106
19799: PUSH
19800: LD_INT 108
19802: PUSH
19803: LD_INT 116
19805: PUSH
19806: LD_INT 117
19808: PUSH
19809: LD_INT 118
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: ST_TO_ADDR
19826: GO 22609
19828: LD_INT 5
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19948
19836: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 4
19847: PUSH
19848: LD_INT 5
19850: PUSH
19851: LD_INT 6
19853: PUSH
19854: LD_INT 8
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 15
19865: PUSH
19866: LD_INT 16
19868: PUSH
19869: LD_INT 22
19871: PUSH
19872: LD_INT 23
19874: PUSH
19875: LD_INT 25
19877: PUSH
19878: LD_INT 26
19880: PUSH
19881: LD_INT 36
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 101
19902: PUSH
19903: LD_INT 102
19905: PUSH
19906: LD_INT 105
19908: PUSH
19909: LD_INT 106
19911: PUSH
19912: LD_INT 108
19914: PUSH
19915: LD_INT 109
19917: PUSH
19918: LD_INT 112
19920: PUSH
19921: LD_INT 116
19923: PUSH
19924: LD_INT 117
19926: PUSH
19927: LD_INT 118
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: ST_TO_ADDR
19946: GO 22609
19948: LD_INT 6
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 20088
19956: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19957: LD_ADDR_VAR 0 2
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: LD_INT 4
19967: PUSH
19968: LD_INT 5
19970: PUSH
19971: LD_INT 6
19973: PUSH
19974: LD_INT 8
19976: PUSH
19977: LD_INT 11
19979: PUSH
19980: LD_INT 12
19982: PUSH
19983: LD_INT 15
19985: PUSH
19986: LD_INT 16
19988: PUSH
19989: LD_INT 20
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_INT 23
20000: PUSH
20001: LD_INT 25
20003: PUSH
20004: LD_INT 26
20006: PUSH
20007: LD_INT 30
20009: PUSH
20010: LD_INT 31
20012: PUSH
20013: LD_INT 32
20015: PUSH
20016: LD_INT 36
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 101
20042: PUSH
20043: LD_INT 102
20045: PUSH
20046: LD_INT 105
20048: PUSH
20049: LD_INT 106
20051: PUSH
20052: LD_INT 108
20054: PUSH
20055: LD_INT 109
20057: PUSH
20058: LD_INT 112
20060: PUSH
20061: LD_INT 116
20063: PUSH
20064: LD_INT 117
20066: PUSH
20067: LD_INT 118
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: ST_TO_ADDR
20086: GO 22609
20088: LD_INT 7
20090: DOUBLE
20091: EQUAL
20092: IFTRUE 20096
20094: GO 20208
20096: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: LD_INT 4
20107: PUSH
20108: LD_INT 5
20110: PUSH
20111: LD_INT 7
20113: PUSH
20114: LD_INT 11
20116: PUSH
20117: LD_INT 12
20119: PUSH
20120: LD_INT 15
20122: PUSH
20123: LD_INT 16
20125: PUSH
20126: LD_INT 20
20128: PUSH
20129: LD_INT 21
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_INT 23
20137: PUSH
20138: LD_INT 25
20140: PUSH
20141: LD_INT 26
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 101
20162: PUSH
20163: LD_INT 102
20165: PUSH
20166: LD_INT 103
20168: PUSH
20169: LD_INT 105
20171: PUSH
20172: LD_INT 106
20174: PUSH
20175: LD_INT 108
20177: PUSH
20178: LD_INT 112
20180: PUSH
20181: LD_INT 116
20183: PUSH
20184: LD_INT 117
20186: PUSH
20187: LD_INT 118
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: ST_TO_ADDR
20206: GO 22609
20208: LD_INT 8
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20356
20216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20217: LD_ADDR_VAR 0 2
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 4
20227: PUSH
20228: LD_INT 5
20230: PUSH
20231: LD_INT 6
20233: PUSH
20234: LD_INT 7
20236: PUSH
20237: LD_INT 8
20239: PUSH
20240: LD_INT 11
20242: PUSH
20243: LD_INT 12
20245: PUSH
20246: LD_INT 15
20248: PUSH
20249: LD_INT 16
20251: PUSH
20252: LD_INT 20
20254: PUSH
20255: LD_INT 21
20257: PUSH
20258: LD_INT 22
20260: PUSH
20261: LD_INT 23
20263: PUSH
20264: LD_INT 25
20266: PUSH
20267: LD_INT 26
20269: PUSH
20270: LD_INT 30
20272: PUSH
20273: LD_INT 31
20275: PUSH
20276: LD_INT 32
20278: PUSH
20279: LD_INT 36
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 101
20306: PUSH
20307: LD_INT 102
20309: PUSH
20310: LD_INT 103
20312: PUSH
20313: LD_INT 105
20315: PUSH
20316: LD_INT 106
20318: PUSH
20319: LD_INT 108
20321: PUSH
20322: LD_INT 109
20324: PUSH
20325: LD_INT 112
20327: PUSH
20328: LD_INT 116
20330: PUSH
20331: LD_INT 117
20333: PUSH
20334: LD_INT 118
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: ST_TO_ADDR
20354: GO 22609
20356: LD_INT 9
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20512
20364: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20365: LD_ADDR_VAR 0 2
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 4
20375: PUSH
20376: LD_INT 5
20378: PUSH
20379: LD_INT 6
20381: PUSH
20382: LD_INT 7
20384: PUSH
20385: LD_INT 8
20387: PUSH
20388: LD_INT 11
20390: PUSH
20391: LD_INT 12
20393: PUSH
20394: LD_INT 15
20396: PUSH
20397: LD_INT 16
20399: PUSH
20400: LD_INT 20
20402: PUSH
20403: LD_INT 21
20405: PUSH
20406: LD_INT 22
20408: PUSH
20409: LD_INT 23
20411: PUSH
20412: LD_INT 25
20414: PUSH
20415: LD_INT 26
20417: PUSH
20418: LD_INT 28
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 31
20426: PUSH
20427: LD_INT 32
20429: PUSH
20430: LD_INT 36
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 101
20458: PUSH
20459: LD_INT 102
20461: PUSH
20462: LD_INT 103
20464: PUSH
20465: LD_INT 105
20467: PUSH
20468: LD_INT 106
20470: PUSH
20471: LD_INT 108
20473: PUSH
20474: LD_INT 109
20476: PUSH
20477: LD_INT 112
20479: PUSH
20480: LD_INT 114
20482: PUSH
20483: LD_INT 116
20485: PUSH
20486: LD_INT 117
20488: PUSH
20489: LD_INT 118
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: ST_TO_ADDR
20510: GO 22609
20512: LD_INT 10
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20716
20520: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 4
20531: PUSH
20532: LD_INT 5
20534: PUSH
20535: LD_INT 6
20537: PUSH
20538: LD_INT 7
20540: PUSH
20541: LD_INT 8
20543: PUSH
20544: LD_INT 9
20546: PUSH
20547: LD_INT 10
20549: PUSH
20550: LD_INT 11
20552: PUSH
20553: LD_INT 12
20555: PUSH
20556: LD_INT 13
20558: PUSH
20559: LD_INT 14
20561: PUSH
20562: LD_INT 15
20564: PUSH
20565: LD_INT 16
20567: PUSH
20568: LD_INT 17
20570: PUSH
20571: LD_INT 18
20573: PUSH
20574: LD_INT 19
20576: PUSH
20577: LD_INT 20
20579: PUSH
20580: LD_INT 21
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 23
20588: PUSH
20589: LD_INT 24
20591: PUSH
20592: LD_INT 25
20594: PUSH
20595: LD_INT 26
20597: PUSH
20598: LD_INT 28
20600: PUSH
20601: LD_INT 30
20603: PUSH
20604: LD_INT 31
20606: PUSH
20607: LD_INT 32
20609: PUSH
20610: LD_INT 36
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 101
20646: PUSH
20647: LD_INT 102
20649: PUSH
20650: LD_INT 103
20652: PUSH
20653: LD_INT 104
20655: PUSH
20656: LD_INT 105
20658: PUSH
20659: LD_INT 106
20661: PUSH
20662: LD_INT 107
20664: PUSH
20665: LD_INT 108
20667: PUSH
20668: LD_INT 109
20670: PUSH
20671: LD_INT 110
20673: PUSH
20674: LD_INT 111
20676: PUSH
20677: LD_INT 112
20679: PUSH
20680: LD_INT 114
20682: PUSH
20683: LD_INT 116
20685: PUSH
20686: LD_INT 117
20688: PUSH
20689: LD_INT 118
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 22609
20716: LD_INT 11
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20928
20724: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: LD_INT 4
20738: PUSH
20739: LD_INT 5
20741: PUSH
20742: LD_INT 6
20744: PUSH
20745: LD_INT 7
20747: PUSH
20748: LD_INT 8
20750: PUSH
20751: LD_INT 9
20753: PUSH
20754: LD_INT 10
20756: PUSH
20757: LD_INT 11
20759: PUSH
20760: LD_INT 12
20762: PUSH
20763: LD_INT 13
20765: PUSH
20766: LD_INT 14
20768: PUSH
20769: LD_INT 15
20771: PUSH
20772: LD_INT 16
20774: PUSH
20775: LD_INT 17
20777: PUSH
20778: LD_INT 18
20780: PUSH
20781: LD_INT 19
20783: PUSH
20784: LD_INT 20
20786: PUSH
20787: LD_INT 21
20789: PUSH
20790: LD_INT 22
20792: PUSH
20793: LD_INT 23
20795: PUSH
20796: LD_INT 24
20798: PUSH
20799: LD_INT 25
20801: PUSH
20802: LD_INT 26
20804: PUSH
20805: LD_INT 28
20807: PUSH
20808: LD_INT 30
20810: PUSH
20811: LD_INT 31
20813: PUSH
20814: LD_INT 32
20816: PUSH
20817: LD_INT 34
20819: PUSH
20820: LD_INT 36
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 101
20858: PUSH
20859: LD_INT 102
20861: PUSH
20862: LD_INT 103
20864: PUSH
20865: LD_INT 104
20867: PUSH
20868: LD_INT 105
20870: PUSH
20871: LD_INT 106
20873: PUSH
20874: LD_INT 107
20876: PUSH
20877: LD_INT 108
20879: PUSH
20880: LD_INT 109
20882: PUSH
20883: LD_INT 110
20885: PUSH
20886: LD_INT 111
20888: PUSH
20889: LD_INT 112
20891: PUSH
20892: LD_INT 114
20894: PUSH
20895: LD_INT 116
20897: PUSH
20898: LD_INT 117
20900: PUSH
20901: LD_INT 118
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: ST_TO_ADDR
20926: GO 22609
20928: LD_INT 12
20930: DOUBLE
20931: EQUAL
20932: IFTRUE 20936
20934: GO 21156
20936: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 3
20950: PUSH
20951: LD_INT 4
20953: PUSH
20954: LD_INT 5
20956: PUSH
20957: LD_INT 6
20959: PUSH
20960: LD_INT 7
20962: PUSH
20963: LD_INT 8
20965: PUSH
20966: LD_INT 9
20968: PUSH
20969: LD_INT 10
20971: PUSH
20972: LD_INT 11
20974: PUSH
20975: LD_INT 12
20977: PUSH
20978: LD_INT 13
20980: PUSH
20981: LD_INT 14
20983: PUSH
20984: LD_INT 15
20986: PUSH
20987: LD_INT 16
20989: PUSH
20990: LD_INT 17
20992: PUSH
20993: LD_INT 18
20995: PUSH
20996: LD_INT 19
20998: PUSH
20999: LD_INT 20
21001: PUSH
21002: LD_INT 21
21004: PUSH
21005: LD_INT 22
21007: PUSH
21008: LD_INT 23
21010: PUSH
21011: LD_INT 24
21013: PUSH
21014: LD_INT 25
21016: PUSH
21017: LD_INT 26
21019: PUSH
21020: LD_INT 27
21022: PUSH
21023: LD_INT 28
21025: PUSH
21026: LD_INT 30
21028: PUSH
21029: LD_INT 31
21031: PUSH
21032: LD_INT 32
21034: PUSH
21035: LD_INT 33
21037: PUSH
21038: LD_INT 34
21040: PUSH
21041: LD_INT 36
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 101
21082: PUSH
21083: LD_INT 102
21085: PUSH
21086: LD_INT 103
21088: PUSH
21089: LD_INT 104
21091: PUSH
21092: LD_INT 105
21094: PUSH
21095: LD_INT 106
21097: PUSH
21098: LD_INT 107
21100: PUSH
21101: LD_INT 108
21103: PUSH
21104: LD_INT 109
21106: PUSH
21107: LD_INT 110
21109: PUSH
21110: LD_INT 111
21112: PUSH
21113: LD_INT 112
21115: PUSH
21116: LD_INT 113
21118: PUSH
21119: LD_INT 114
21121: PUSH
21122: LD_INT 116
21124: PUSH
21125: LD_INT 117
21127: PUSH
21128: LD_INT 118
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: ST_TO_ADDR
21154: GO 22609
21156: LD_INT 13
21158: DOUBLE
21159: EQUAL
21160: IFTRUE 21164
21162: GO 21372
21164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21165: LD_ADDR_VAR 0 2
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 3
21178: PUSH
21179: LD_INT 4
21181: PUSH
21182: LD_INT 5
21184: PUSH
21185: LD_INT 8
21187: PUSH
21188: LD_INT 9
21190: PUSH
21191: LD_INT 10
21193: PUSH
21194: LD_INT 11
21196: PUSH
21197: LD_INT 12
21199: PUSH
21200: LD_INT 14
21202: PUSH
21203: LD_INT 15
21205: PUSH
21206: LD_INT 16
21208: PUSH
21209: LD_INT 17
21211: PUSH
21212: LD_INT 18
21214: PUSH
21215: LD_INT 19
21217: PUSH
21218: LD_INT 20
21220: PUSH
21221: LD_INT 21
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_INT 23
21229: PUSH
21230: LD_INT 24
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 26
21238: PUSH
21239: LD_INT 27
21241: PUSH
21242: LD_INT 28
21244: PUSH
21245: LD_INT 30
21247: PUSH
21248: LD_INT 31
21250: PUSH
21251: LD_INT 32
21253: PUSH
21254: LD_INT 33
21256: PUSH
21257: LD_INT 34
21259: PUSH
21260: LD_INT 36
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 101
21298: PUSH
21299: LD_INT 102
21301: PUSH
21302: LD_INT 103
21304: PUSH
21305: LD_INT 104
21307: PUSH
21308: LD_INT 105
21310: PUSH
21311: LD_INT 106
21313: PUSH
21314: LD_INT 107
21316: PUSH
21317: LD_INT 108
21319: PUSH
21320: LD_INT 109
21322: PUSH
21323: LD_INT 110
21325: PUSH
21326: LD_INT 111
21328: PUSH
21329: LD_INT 112
21331: PUSH
21332: LD_INT 113
21334: PUSH
21335: LD_INT 114
21337: PUSH
21338: LD_INT 116
21340: PUSH
21341: LD_INT 117
21343: PUSH
21344: LD_INT 118
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: ST_TO_ADDR
21370: GO 22609
21372: LD_INT 14
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21604
21380: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: LD_INT 4
21397: PUSH
21398: LD_INT 5
21400: PUSH
21401: LD_INT 6
21403: PUSH
21404: LD_INT 7
21406: PUSH
21407: LD_INT 8
21409: PUSH
21410: LD_INT 9
21412: PUSH
21413: LD_INT 10
21415: PUSH
21416: LD_INT 11
21418: PUSH
21419: LD_INT 12
21421: PUSH
21422: LD_INT 13
21424: PUSH
21425: LD_INT 14
21427: PUSH
21428: LD_INT 15
21430: PUSH
21431: LD_INT 16
21433: PUSH
21434: LD_INT 17
21436: PUSH
21437: LD_INT 18
21439: PUSH
21440: LD_INT 19
21442: PUSH
21443: LD_INT 20
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 23
21454: PUSH
21455: LD_INT 24
21457: PUSH
21458: LD_INT 25
21460: PUSH
21461: LD_INT 26
21463: PUSH
21464: LD_INT 27
21466: PUSH
21467: LD_INT 28
21469: PUSH
21470: LD_INT 29
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 31
21478: PUSH
21479: LD_INT 32
21481: PUSH
21482: LD_INT 33
21484: PUSH
21485: LD_INT 34
21487: PUSH
21488: LD_INT 36
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 101
21530: PUSH
21531: LD_INT 102
21533: PUSH
21534: LD_INT 103
21536: PUSH
21537: LD_INT 104
21539: PUSH
21540: LD_INT 105
21542: PUSH
21543: LD_INT 106
21545: PUSH
21546: LD_INT 107
21548: PUSH
21549: LD_INT 108
21551: PUSH
21552: LD_INT 109
21554: PUSH
21555: LD_INT 110
21557: PUSH
21558: LD_INT 111
21560: PUSH
21561: LD_INT 112
21563: PUSH
21564: LD_INT 113
21566: PUSH
21567: LD_INT 114
21569: PUSH
21570: LD_INT 116
21572: PUSH
21573: LD_INT 117
21575: PUSH
21576: LD_INT 118
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: ST_TO_ADDR
21602: GO 22609
21604: LD_INT 15
21606: DOUBLE
21607: EQUAL
21608: IFTRUE 21612
21610: GO 21836
21612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21613: LD_ADDR_VAR 0 2
21617: PUSH
21618: LD_INT 1
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 3
21626: PUSH
21627: LD_INT 4
21629: PUSH
21630: LD_INT 5
21632: PUSH
21633: LD_INT 6
21635: PUSH
21636: LD_INT 7
21638: PUSH
21639: LD_INT 8
21641: PUSH
21642: LD_INT 9
21644: PUSH
21645: LD_INT 10
21647: PUSH
21648: LD_INT 11
21650: PUSH
21651: LD_INT 12
21653: PUSH
21654: LD_INT 13
21656: PUSH
21657: LD_INT 14
21659: PUSH
21660: LD_INT 15
21662: PUSH
21663: LD_INT 16
21665: PUSH
21666: LD_INT 17
21668: PUSH
21669: LD_INT 18
21671: PUSH
21672: LD_INT 19
21674: PUSH
21675: LD_INT 20
21677: PUSH
21678: LD_INT 21
21680: PUSH
21681: LD_INT 22
21683: PUSH
21684: LD_INT 23
21686: PUSH
21687: LD_INT 24
21689: PUSH
21690: LD_INT 25
21692: PUSH
21693: LD_INT 26
21695: PUSH
21696: LD_INT 27
21698: PUSH
21699: LD_INT 28
21701: PUSH
21702: LD_INT 29
21704: PUSH
21705: LD_INT 30
21707: PUSH
21708: LD_INT 31
21710: PUSH
21711: LD_INT 32
21713: PUSH
21714: LD_INT 33
21716: PUSH
21717: LD_INT 34
21719: PUSH
21720: LD_INT 36
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 101
21762: PUSH
21763: LD_INT 102
21765: PUSH
21766: LD_INT 103
21768: PUSH
21769: LD_INT 104
21771: PUSH
21772: LD_INT 105
21774: PUSH
21775: LD_INT 106
21777: PUSH
21778: LD_INT 107
21780: PUSH
21781: LD_INT 108
21783: PUSH
21784: LD_INT 109
21786: PUSH
21787: LD_INT 110
21789: PUSH
21790: LD_INT 111
21792: PUSH
21793: LD_INT 112
21795: PUSH
21796: LD_INT 113
21798: PUSH
21799: LD_INT 114
21801: PUSH
21802: LD_INT 116
21804: PUSH
21805: LD_INT 117
21807: PUSH
21808: LD_INT 118
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: ST_TO_ADDR
21834: GO 22609
21836: LD_INT 16
21838: DOUBLE
21839: EQUAL
21840: IFTRUE 21844
21842: GO 21980
21844: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21845: LD_ADDR_VAR 0 2
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 4
21855: PUSH
21856: LD_INT 5
21858: PUSH
21859: LD_INT 7
21861: PUSH
21862: LD_INT 11
21864: PUSH
21865: LD_INT 12
21867: PUSH
21868: LD_INT 15
21870: PUSH
21871: LD_INT 16
21873: PUSH
21874: LD_INT 20
21876: PUSH
21877: LD_INT 21
21879: PUSH
21880: LD_INT 22
21882: PUSH
21883: LD_INT 23
21885: PUSH
21886: LD_INT 25
21888: PUSH
21889: LD_INT 26
21891: PUSH
21892: LD_INT 30
21894: PUSH
21895: LD_INT 31
21897: PUSH
21898: LD_INT 32
21900: PUSH
21901: LD_INT 33
21903: PUSH
21904: LD_INT 34
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 101
21930: PUSH
21931: LD_INT 102
21933: PUSH
21934: LD_INT 103
21936: PUSH
21937: LD_INT 106
21939: PUSH
21940: LD_INT 108
21942: PUSH
21943: LD_INT 112
21945: PUSH
21946: LD_INT 113
21948: PUSH
21949: LD_INT 114
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: ST_TO_ADDR
21978: GO 22609
21980: LD_INT 17
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22212
21988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21989: LD_ADDR_VAR 0 2
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 3
22002: PUSH
22003: LD_INT 4
22005: PUSH
22006: LD_INT 5
22008: PUSH
22009: LD_INT 6
22011: PUSH
22012: LD_INT 7
22014: PUSH
22015: LD_INT 8
22017: PUSH
22018: LD_INT 9
22020: PUSH
22021: LD_INT 10
22023: PUSH
22024: LD_INT 11
22026: PUSH
22027: LD_INT 12
22029: PUSH
22030: LD_INT 13
22032: PUSH
22033: LD_INT 14
22035: PUSH
22036: LD_INT 15
22038: PUSH
22039: LD_INT 16
22041: PUSH
22042: LD_INT 17
22044: PUSH
22045: LD_INT 18
22047: PUSH
22048: LD_INT 19
22050: PUSH
22051: LD_INT 20
22053: PUSH
22054: LD_INT 21
22056: PUSH
22057: LD_INT 22
22059: PUSH
22060: LD_INT 23
22062: PUSH
22063: LD_INT 24
22065: PUSH
22066: LD_INT 25
22068: PUSH
22069: LD_INT 26
22071: PUSH
22072: LD_INT 27
22074: PUSH
22075: LD_INT 28
22077: PUSH
22078: LD_INT 29
22080: PUSH
22081: LD_INT 30
22083: PUSH
22084: LD_INT 31
22086: PUSH
22087: LD_INT 32
22089: PUSH
22090: LD_INT 33
22092: PUSH
22093: LD_INT 34
22095: PUSH
22096: LD_INT 36
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 101
22138: PUSH
22139: LD_INT 102
22141: PUSH
22142: LD_INT 103
22144: PUSH
22145: LD_INT 104
22147: PUSH
22148: LD_INT 105
22150: PUSH
22151: LD_INT 106
22153: PUSH
22154: LD_INT 107
22156: PUSH
22157: LD_INT 108
22159: PUSH
22160: LD_INT 109
22162: PUSH
22163: LD_INT 110
22165: PUSH
22166: LD_INT 111
22168: PUSH
22169: LD_INT 112
22171: PUSH
22172: LD_INT 113
22174: PUSH
22175: LD_INT 114
22177: PUSH
22178: LD_INT 116
22180: PUSH
22181: LD_INT 117
22183: PUSH
22184: LD_INT 118
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 22609
22212: LD_INT 18
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22368
22220: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 7
22237: PUSH
22238: LD_INT 11
22240: PUSH
22241: LD_INT 12
22243: PUSH
22244: LD_INT 15
22246: PUSH
22247: LD_INT 16
22249: PUSH
22250: LD_INT 20
22252: PUSH
22253: LD_INT 21
22255: PUSH
22256: LD_INT 22
22258: PUSH
22259: LD_INT 23
22261: PUSH
22262: LD_INT 25
22264: PUSH
22265: LD_INT 26
22267: PUSH
22268: LD_INT 30
22270: PUSH
22271: LD_INT 31
22273: PUSH
22274: LD_INT 32
22276: PUSH
22277: LD_INT 33
22279: PUSH
22280: LD_INT 34
22282: PUSH
22283: LD_INT 35
22285: PUSH
22286: LD_INT 36
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 101
22314: PUSH
22315: LD_INT 102
22317: PUSH
22318: LD_INT 103
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 108
22326: PUSH
22327: LD_INT 112
22329: PUSH
22330: LD_INT 113
22332: PUSH
22333: LD_INT 114
22335: PUSH
22336: LD_INT 115
22338: PUSH
22339: LD_INT 116
22341: PUSH
22342: LD_INT 117
22344: PUSH
22345: LD_INT 118
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: ST_TO_ADDR
22366: GO 22609
22368: LD_INT 19
22370: DOUBLE
22371: EQUAL
22372: IFTRUE 22376
22374: GO 22608
22376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 4
22393: PUSH
22394: LD_INT 5
22396: PUSH
22397: LD_INT 6
22399: PUSH
22400: LD_INT 7
22402: PUSH
22403: LD_INT 8
22405: PUSH
22406: LD_INT 9
22408: PUSH
22409: LD_INT 10
22411: PUSH
22412: LD_INT 11
22414: PUSH
22415: LD_INT 12
22417: PUSH
22418: LD_INT 13
22420: PUSH
22421: LD_INT 14
22423: PUSH
22424: LD_INT 15
22426: PUSH
22427: LD_INT 16
22429: PUSH
22430: LD_INT 17
22432: PUSH
22433: LD_INT 18
22435: PUSH
22436: LD_INT 19
22438: PUSH
22439: LD_INT 20
22441: PUSH
22442: LD_INT 21
22444: PUSH
22445: LD_INT 22
22447: PUSH
22448: LD_INT 23
22450: PUSH
22451: LD_INT 24
22453: PUSH
22454: LD_INT 25
22456: PUSH
22457: LD_INT 26
22459: PUSH
22460: LD_INT 27
22462: PUSH
22463: LD_INT 28
22465: PUSH
22466: LD_INT 29
22468: PUSH
22469: LD_INT 30
22471: PUSH
22472: LD_INT 31
22474: PUSH
22475: LD_INT 32
22477: PUSH
22478: LD_INT 33
22480: PUSH
22481: LD_INT 34
22483: PUSH
22484: LD_INT 35
22486: PUSH
22487: LD_INT 36
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 101
22530: PUSH
22531: LD_INT 102
22533: PUSH
22534: LD_INT 103
22536: PUSH
22537: LD_INT 104
22539: PUSH
22540: LD_INT 105
22542: PUSH
22543: LD_INT 106
22545: PUSH
22546: LD_INT 107
22548: PUSH
22549: LD_INT 108
22551: PUSH
22552: LD_INT 109
22554: PUSH
22555: LD_INT 110
22557: PUSH
22558: LD_INT 111
22560: PUSH
22561: LD_INT 112
22563: PUSH
22564: LD_INT 113
22566: PUSH
22567: LD_INT 114
22569: PUSH
22570: LD_INT 115
22572: PUSH
22573: LD_INT 116
22575: PUSH
22576: LD_INT 117
22578: PUSH
22579: LD_INT 118
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: ST_TO_ADDR
22606: GO 22609
22608: POP
// end else
22609: GO 22840
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 3
22624: PUSH
22625: LD_INT 4
22627: PUSH
22628: LD_INT 5
22630: PUSH
22631: LD_INT 6
22633: PUSH
22634: LD_INT 7
22636: PUSH
22637: LD_INT 8
22639: PUSH
22640: LD_INT 9
22642: PUSH
22643: LD_INT 10
22645: PUSH
22646: LD_INT 11
22648: PUSH
22649: LD_INT 12
22651: PUSH
22652: LD_INT 13
22654: PUSH
22655: LD_INT 14
22657: PUSH
22658: LD_INT 15
22660: PUSH
22661: LD_INT 16
22663: PUSH
22664: LD_INT 17
22666: PUSH
22667: LD_INT 18
22669: PUSH
22670: LD_INT 19
22672: PUSH
22673: LD_INT 20
22675: PUSH
22676: LD_INT 21
22678: PUSH
22679: LD_INT 22
22681: PUSH
22682: LD_INT 23
22684: PUSH
22685: LD_INT 24
22687: PUSH
22688: LD_INT 25
22690: PUSH
22691: LD_INT 26
22693: PUSH
22694: LD_INT 27
22696: PUSH
22697: LD_INT 28
22699: PUSH
22700: LD_INT 29
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 31
22708: PUSH
22709: LD_INT 32
22711: PUSH
22712: LD_INT 33
22714: PUSH
22715: LD_INT 34
22717: PUSH
22718: LD_INT 35
22720: PUSH
22721: LD_INT 36
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 101
22764: PUSH
22765: LD_INT 102
22767: PUSH
22768: LD_INT 103
22770: PUSH
22771: LD_INT 104
22773: PUSH
22774: LD_INT 105
22776: PUSH
22777: LD_INT 106
22779: PUSH
22780: LD_INT 107
22782: PUSH
22783: LD_INT 108
22785: PUSH
22786: LD_INT 109
22788: PUSH
22789: LD_INT 110
22791: PUSH
22792: LD_INT 111
22794: PUSH
22795: LD_INT 112
22797: PUSH
22798: LD_INT 113
22800: PUSH
22801: LD_INT 114
22803: PUSH
22804: LD_INT 115
22806: PUSH
22807: LD_INT 116
22809: PUSH
22810: LD_INT 117
22812: PUSH
22813: LD_INT 118
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: ST_TO_ADDR
// if result then
22840: LD_VAR 0 2
22844: IFFALSE 23630
// begin normal :=  ;
22846: LD_ADDR_VAR 0 5
22850: PUSH
22851: LD_STRING 
22853: ST_TO_ADDR
// hardcore :=  ;
22854: LD_ADDR_VAR 0 6
22858: PUSH
22859: LD_STRING 
22861: ST_TO_ADDR
// active :=  ;
22862: LD_ADDR_VAR 0 7
22866: PUSH
22867: LD_STRING 
22869: ST_TO_ADDR
// for i = 1 to normalCounter do
22870: LD_ADDR_VAR 0 8
22874: PUSH
22875: DOUBLE
22876: LD_INT 1
22878: DEC
22879: ST_TO_ADDR
22880: LD_EXP 54
22884: PUSH
22885: FOR_TO
22886: IFFALSE 22987
// begin tmp := 0 ;
22888: LD_ADDR_VAR 0 3
22892: PUSH
22893: LD_STRING 0
22895: ST_TO_ADDR
// if result [ 1 ] then
22896: LD_VAR 0 2
22900: PUSH
22901: LD_INT 1
22903: ARRAY
22904: IFFALSE 22969
// if result [ 1 ] [ 1 ] = i then
22906: LD_VAR 0 2
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: PUSH
22919: LD_VAR 0 8
22923: EQUAL
22924: IFFALSE 22969
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22926: LD_ADDR_VAR 0 2
22930: PUSH
22931: LD_VAR 0 2
22935: PPUSH
22936: LD_INT 1
22938: PPUSH
22939: LD_VAR 0 2
22943: PUSH
22944: LD_INT 1
22946: ARRAY
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 3
22955: PPUSH
22956: CALL_OW 1
22960: ST_TO_ADDR
// tmp := 1 ;
22961: LD_ADDR_VAR 0 3
22965: PUSH
22966: LD_STRING 1
22968: ST_TO_ADDR
// end ; normal := normal & tmp ;
22969: LD_ADDR_VAR 0 5
22973: PUSH
22974: LD_VAR 0 5
22978: PUSH
22979: LD_VAR 0 3
22983: STR
22984: ST_TO_ADDR
// end ;
22985: GO 22885
22987: POP
22988: POP
// for i = 1 to hardcoreCounter do
22989: LD_ADDR_VAR 0 8
22993: PUSH
22994: DOUBLE
22995: LD_INT 1
22997: DEC
22998: ST_TO_ADDR
22999: LD_EXP 55
23003: PUSH
23004: FOR_TO
23005: IFFALSE 23110
// begin tmp := 0 ;
23007: LD_ADDR_VAR 0 3
23011: PUSH
23012: LD_STRING 0
23014: ST_TO_ADDR
// if result [ 2 ] then
23015: LD_VAR 0 2
23019: PUSH
23020: LD_INT 2
23022: ARRAY
23023: IFFALSE 23092
// if result [ 2 ] [ 1 ] = 100 + i then
23025: LD_VAR 0 2
23029: PUSH
23030: LD_INT 2
23032: ARRAY
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PUSH
23038: LD_INT 100
23040: PUSH
23041: LD_VAR 0 8
23045: PLUS
23046: EQUAL
23047: IFFALSE 23092
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23049: LD_ADDR_VAR 0 2
23053: PUSH
23054: LD_VAR 0 2
23058: PPUSH
23059: LD_INT 2
23061: PPUSH
23062: LD_VAR 0 2
23066: PUSH
23067: LD_INT 2
23069: ARRAY
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 3
23078: PPUSH
23079: CALL_OW 1
23083: ST_TO_ADDR
// tmp := 1 ;
23084: LD_ADDR_VAR 0 3
23088: PUSH
23089: LD_STRING 1
23091: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23092: LD_ADDR_VAR 0 6
23096: PUSH
23097: LD_VAR 0 6
23101: PUSH
23102: LD_VAR 0 3
23106: STR
23107: ST_TO_ADDR
// end ;
23108: GO 23004
23110: POP
23111: POP
// if isGameLoad then
23112: LD_VAR 0 1
23116: IFFALSE 23591
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23118: LD_ADDR_VAR 0 4
23122: PUSH
23123: LD_EXP 58
23127: PUSH
23128: LD_EXP 57
23132: PUSH
23133: LD_EXP 59
23137: PUSH
23138: LD_EXP 56
23142: PUSH
23143: LD_EXP 60
23147: PUSH
23148: LD_EXP 61
23152: PUSH
23153: LD_EXP 62
23157: PUSH
23158: LD_EXP 63
23162: PUSH
23163: LD_EXP 64
23167: PUSH
23168: LD_EXP 65
23172: PUSH
23173: LD_EXP 66
23177: PUSH
23178: LD_EXP 67
23182: PUSH
23183: LD_EXP 68
23187: PUSH
23188: LD_EXP 69
23192: PUSH
23193: LD_EXP 77
23197: PUSH
23198: LD_EXP 78
23202: PUSH
23203: LD_EXP 79
23207: PUSH
23208: LD_EXP 80
23212: PUSH
23213: LD_EXP 82
23217: PUSH
23218: LD_EXP 83
23222: PUSH
23223: LD_EXP 84
23227: PUSH
23228: LD_EXP 87
23232: PUSH
23233: LD_EXP 89
23237: PUSH
23238: LD_EXP 90
23242: PUSH
23243: LD_EXP 91
23247: PUSH
23248: LD_EXP 93
23252: PUSH
23253: LD_EXP 94
23257: PUSH
23258: LD_EXP 97
23262: PUSH
23263: LD_EXP 98
23267: PUSH
23268: LD_EXP 99
23272: PUSH
23273: LD_EXP 100
23277: PUSH
23278: LD_EXP 101
23282: PUSH
23283: LD_EXP 102
23287: PUSH
23288: LD_EXP 103
23292: PUSH
23293: LD_EXP 104
23297: PUSH
23298: LD_EXP 105
23302: PUSH
23303: LD_EXP 70
23307: PUSH
23308: LD_EXP 71
23312: PUSH
23313: LD_EXP 74
23317: PUSH
23318: LD_EXP 75
23322: PUSH
23323: LD_EXP 76
23327: PUSH
23328: LD_EXP 72
23332: PUSH
23333: LD_EXP 73
23337: PUSH
23338: LD_EXP 81
23342: PUSH
23343: LD_EXP 85
23347: PUSH
23348: LD_EXP 86
23352: PUSH
23353: LD_EXP 88
23357: PUSH
23358: LD_EXP 92
23362: PUSH
23363: LD_EXP 95
23367: PUSH
23368: LD_EXP 96
23372: PUSH
23373: LD_EXP 106
23377: PUSH
23378: LD_EXP 107
23382: PUSH
23383: LD_EXP 108
23387: PUSH
23388: LD_EXP 109
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: ST_TO_ADDR
// tmp :=  ;
23449: LD_ADDR_VAR 0 3
23453: PUSH
23454: LD_STRING 
23456: ST_TO_ADDR
// for i = 1 to normalCounter do
23457: LD_ADDR_VAR 0 8
23461: PUSH
23462: DOUBLE
23463: LD_INT 1
23465: DEC
23466: ST_TO_ADDR
23467: LD_EXP 54
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23509
// begin if flags [ i ] then
23475: LD_VAR 0 4
23479: PUSH
23480: LD_VAR 0 8
23484: ARRAY
23485: IFFALSE 23507
// tmp := tmp & i & ; ;
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: LD_VAR 0 3
23496: PUSH
23497: LD_VAR 0 8
23501: STR
23502: PUSH
23503: LD_STRING ;
23505: STR
23506: ST_TO_ADDR
// end ;
23507: GO 23472
23509: POP
23510: POP
// for i = 1 to hardcoreCounter do
23511: LD_ADDR_VAR 0 8
23515: PUSH
23516: DOUBLE
23517: LD_INT 1
23519: DEC
23520: ST_TO_ADDR
23521: LD_EXP 55
23525: PUSH
23526: FOR_TO
23527: IFFALSE 23573
// begin if flags [ normalCounter + i ] then
23529: LD_VAR 0 4
23533: PUSH
23534: LD_EXP 54
23538: PUSH
23539: LD_VAR 0 8
23543: PLUS
23544: ARRAY
23545: IFFALSE 23571
// tmp := tmp & ( 100 + i ) & ; ;
23547: LD_ADDR_VAR 0 3
23551: PUSH
23552: LD_VAR 0 3
23556: PUSH
23557: LD_INT 100
23559: PUSH
23560: LD_VAR 0 8
23564: PLUS
23565: STR
23566: PUSH
23567: LD_STRING ;
23569: STR
23570: ST_TO_ADDR
// end ;
23571: GO 23526
23573: POP
23574: POP
// if tmp then
23575: LD_VAR 0 3
23579: IFFALSE 23591
// active := tmp ;
23581: LD_ADDR_VAR 0 7
23585: PUSH
23586: LD_VAR 0 3
23590: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23591: LD_STRING getStreamItemsFromMission("
23593: PUSH
23594: LD_VAR 0 5
23598: STR
23599: PUSH
23600: LD_STRING ","
23602: STR
23603: PUSH
23604: LD_VAR 0 6
23608: STR
23609: PUSH
23610: LD_STRING ","
23612: STR
23613: PUSH
23614: LD_VAR 0 7
23618: STR
23619: PUSH
23620: LD_STRING ")
23622: STR
23623: PPUSH
23624: CALL_OW 559
// end else
23628: GO 23637
// ToLua ( getStreamItemsFromMission("","","") ) ;
23630: LD_STRING getStreamItemsFromMission("","","")
23632: PPUSH
23633: CALL_OW 559
// end ;
23637: LD_VAR 0 2
23641: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23642: LD_EXP 53
23646: PUSH
23647: LD_EXP 58
23651: AND
23652: IFFALSE 23776
23654: GO 23656
23656: DISABLE
23657: LD_INT 0
23659: PPUSH
23660: PPUSH
// begin enable ;
23661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23662: LD_ADDR_VAR 0 2
23666: PUSH
23667: LD_INT 22
23669: PUSH
23670: LD_OWVAR 2
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: LD_INT 34
23684: PUSH
23685: LD_INT 7
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 34
23694: PUSH
23695: LD_INT 45
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 34
23704: PUSH
23705: LD_INT 28
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 34
23714: PUSH
23715: LD_INT 47
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 69
23737: ST_TO_ADDR
// if not tmp then
23738: LD_VAR 0 2
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 23776
// for i in tmp do
23747: LD_ADDR_VAR 0 1
23751: PUSH
23752: LD_VAR 0 2
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23774
// begin SetLives ( i , 0 ) ;
23760: LD_VAR 0 1
23764: PPUSH
23765: LD_INT 0
23767: PPUSH
23768: CALL_OW 234
// end ;
23772: GO 23757
23774: POP
23775: POP
// end ;
23776: PPOPN 2
23778: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23779: LD_EXP 53
23783: PUSH
23784: LD_EXP 59
23788: AND
23789: IFFALSE 23873
23791: GO 23793
23793: DISABLE
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
// begin enable ;
23798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23799: LD_ADDR_VAR 0 2
23803: PUSH
23804: LD_INT 22
23806: PUSH
23807: LD_OWVAR 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 32
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PPUSH
23830: CALL_OW 69
23834: ST_TO_ADDR
// if not tmp then
23835: LD_VAR 0 2
23839: NOT
23840: IFFALSE 23844
// exit ;
23842: GO 23873
// for i in tmp do
23844: LD_ADDR_VAR 0 1
23848: PUSH
23849: LD_VAR 0 2
23853: PUSH
23854: FOR_IN
23855: IFFALSE 23871
// begin SetLives ( i , 0 ) ;
23857: LD_VAR 0 1
23861: PPUSH
23862: LD_INT 0
23864: PPUSH
23865: CALL_OW 234
// end ;
23869: GO 23854
23871: POP
23872: POP
// end ;
23873: PPOPN 2
23875: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23876: LD_EXP 53
23880: PUSH
23881: LD_EXP 56
23885: AND
23886: IFFALSE 23979
23888: GO 23890
23890: DISABLE
23891: LD_INT 0
23893: PPUSH
// begin enable ;
23894: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23895: LD_ADDR_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: PUSH
23903: LD_OWVAR 2
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 25
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 25
23927: PUSH
23928: LD_INT 9
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 25
23937: PUSH
23938: LD_INT 8
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PPUSH
23955: CALL_OW 69
23959: PUSH
23960: FOR_IN
23961: IFFALSE 23977
// begin SetClass ( i , 1 ) ;
23963: LD_VAR 0 1
23967: PPUSH
23968: LD_INT 1
23970: PPUSH
23971: CALL_OW 336
// end ;
23975: GO 23960
23977: POP
23978: POP
// end ;
23979: PPOPN 1
23981: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23982: LD_EXP 53
23986: PUSH
23987: LD_EXP 57
23991: AND
23992: PUSH
23993: LD_OWVAR 65
23997: PUSH
23998: LD_INT 7
24000: LESS
24001: AND
24002: IFFALSE 24016
24004: GO 24006
24006: DISABLE
// begin enable ;
24007: ENABLE
// game_speed := 7 ;
24008: LD_ADDR_OWVAR 65
24012: PUSH
24013: LD_INT 7
24015: ST_TO_ADDR
// end ;
24016: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24017: LD_EXP 53
24021: PUSH
24022: LD_EXP 60
24026: AND
24027: IFFALSE 24229
24029: GO 24031
24031: DISABLE
24032: LD_INT 0
24034: PPUSH
24035: PPUSH
24036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24037: LD_ADDR_VAR 0 3
24041: PUSH
24042: LD_INT 81
24044: PUSH
24045: LD_OWVAR 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PPUSH
24068: CALL_OW 69
24072: ST_TO_ADDR
// if not tmp then
24073: LD_VAR 0 3
24077: NOT
24078: IFFALSE 24082
// exit ;
24080: GO 24229
// if tmp > 5 then
24082: LD_VAR 0 3
24086: PUSH
24087: LD_INT 5
24089: GREATER
24090: IFFALSE 24102
// k := 5 else
24092: LD_ADDR_VAR 0 2
24096: PUSH
24097: LD_INT 5
24099: ST_TO_ADDR
24100: GO 24112
// k := tmp ;
24102: LD_ADDR_VAR 0 2
24106: PUSH
24107: LD_VAR 0 3
24111: ST_TO_ADDR
// for i := 1 to k do
24112: LD_ADDR_VAR 0 1
24116: PUSH
24117: DOUBLE
24118: LD_INT 1
24120: DEC
24121: ST_TO_ADDR
24122: LD_VAR 0 2
24126: PUSH
24127: FOR_TO
24128: IFFALSE 24227
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24130: LD_VAR 0 3
24134: PUSH
24135: LD_VAR 0 1
24139: ARRAY
24140: PPUSH
24141: LD_VAR 0 1
24145: PUSH
24146: LD_INT 4
24148: MOD
24149: PUSH
24150: LD_INT 1
24152: PLUS
24153: PPUSH
24154: CALL_OW 259
24158: PUSH
24159: LD_INT 10
24161: LESS
24162: IFFALSE 24225
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24164: LD_VAR 0 3
24168: PUSH
24169: LD_VAR 0 1
24173: ARRAY
24174: PPUSH
24175: LD_VAR 0 1
24179: PUSH
24180: LD_INT 4
24182: MOD
24183: PUSH
24184: LD_INT 1
24186: PLUS
24187: PPUSH
24188: LD_VAR 0 3
24192: PUSH
24193: LD_VAR 0 1
24197: ARRAY
24198: PPUSH
24199: LD_VAR 0 1
24203: PUSH
24204: LD_INT 4
24206: MOD
24207: PUSH
24208: LD_INT 1
24210: PLUS
24211: PPUSH
24212: CALL_OW 259
24216: PUSH
24217: LD_INT 1
24219: PLUS
24220: PPUSH
24221: CALL_OW 237
24225: GO 24127
24227: POP
24228: POP
// end ;
24229: PPOPN 3
24231: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24232: LD_EXP 53
24236: PUSH
24237: LD_EXP 61
24241: AND
24242: IFFALSE 24262
24244: GO 24246
24246: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24247: LD_INT 4
24249: PPUSH
24250: LD_OWVAR 2
24254: PPUSH
24255: LD_INT 0
24257: PPUSH
24258: CALL_OW 324
24262: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24263: LD_EXP 53
24267: PUSH
24268: LD_EXP 90
24272: AND
24273: IFFALSE 24293
24275: GO 24277
24277: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24278: LD_INT 19
24280: PPUSH
24281: LD_OWVAR 2
24285: PPUSH
24286: LD_INT 0
24288: PPUSH
24289: CALL_OW 324
24293: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24294: LD_EXP 53
24298: PUSH
24299: LD_EXP 62
24303: AND
24304: IFFALSE 24406
24306: GO 24308
24308: DISABLE
24309: LD_INT 0
24311: PPUSH
24312: PPUSH
// begin enable ;
24313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24314: LD_ADDR_VAR 0 2
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_OWVAR 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 34
24336: PUSH
24337: LD_INT 11
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 34
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PPUSH
24363: CALL_OW 69
24367: ST_TO_ADDR
// if not tmp then
24368: LD_VAR 0 2
24372: NOT
24373: IFFALSE 24377
// exit ;
24375: GO 24406
// for i in tmp do
24377: LD_ADDR_VAR 0 1
24381: PUSH
24382: LD_VAR 0 2
24386: PUSH
24387: FOR_IN
24388: IFFALSE 24404
// begin SetLives ( i , 0 ) ;
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_INT 0
24397: PPUSH
24398: CALL_OW 234
// end ;
24402: GO 24387
24404: POP
24405: POP
// end ;
24406: PPOPN 2
24408: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24409: LD_EXP 53
24413: PUSH
24414: LD_EXP 63
24418: AND
24419: IFFALSE 24439
24421: GO 24423
24423: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24424: LD_INT 32
24426: PPUSH
24427: LD_OWVAR 2
24431: PPUSH
24432: LD_INT 0
24434: PPUSH
24435: CALL_OW 324
24439: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24440: LD_EXP 53
24444: PUSH
24445: LD_EXP 64
24449: AND
24450: IFFALSE 24631
24452: GO 24454
24454: DISABLE
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
24459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_OWVAR 2
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 33
24479: PUSH
24480: LD_INT 3
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 69
24495: ST_TO_ADDR
// if not tmp then
24496: LD_VAR 0 2
24500: NOT
24501: IFFALSE 24505
// exit ;
24503: GO 24631
// side := 0 ;
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: LD_INT 0
24512: ST_TO_ADDR
// for i := 1 to 8 do
24513: LD_ADDR_VAR 0 1
24517: PUSH
24518: DOUBLE
24519: LD_INT 1
24521: DEC
24522: ST_TO_ADDR
24523: LD_INT 8
24525: PUSH
24526: FOR_TO
24527: IFFALSE 24575
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24529: LD_OWVAR 2
24533: PUSH
24534: LD_VAR 0 1
24538: NONEQUAL
24539: PUSH
24540: LD_OWVAR 2
24544: PPUSH
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL_OW 81
24554: PUSH
24555: LD_INT 2
24557: EQUAL
24558: AND
24559: IFFALSE 24573
// begin side := i ;
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: LD_VAR 0 1
24570: ST_TO_ADDR
// break ;
24571: GO 24575
// end ;
24573: GO 24526
24575: POP
24576: POP
// if not side then
24577: LD_VAR 0 3
24581: NOT
24582: IFFALSE 24586
// exit ;
24584: GO 24631
// for i := 1 to tmp do
24586: LD_ADDR_VAR 0 1
24590: PUSH
24591: DOUBLE
24592: LD_INT 1
24594: DEC
24595: ST_TO_ADDR
24596: LD_VAR 0 2
24600: PUSH
24601: FOR_TO
24602: IFFALSE 24629
// if Prob ( 60 ) then
24604: LD_INT 60
24606: PPUSH
24607: CALL_OW 13
24611: IFFALSE 24627
// SetSide ( i , side ) ;
24613: LD_VAR 0 1
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL_OW 235
24627: GO 24601
24629: POP
24630: POP
// end ;
24631: PPOPN 3
24633: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24634: LD_EXP 53
24638: PUSH
24639: LD_EXP 66
24643: AND
24644: IFFALSE 24763
24646: GO 24648
24648: DISABLE
24649: LD_INT 0
24651: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24652: LD_ADDR_VAR 0 1
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_OWVAR 2
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 21
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 3
24681: PUSH
24682: LD_INT 23
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: PPUSH
24701: CALL_OW 69
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24761
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 257
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 4
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: IN
24737: IFFALSE 24759
// SetClass ( un , rand ( 1 , 4 ) ) ;
24739: LD_VAR 0 1
24743: PPUSH
24744: LD_INT 1
24746: PPUSH
24747: LD_INT 4
24749: PPUSH
24750: CALL_OW 12
24754: PPUSH
24755: CALL_OW 336
24759: GO 24706
24761: POP
24762: POP
// end ;
24763: PPOPN 1
24765: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24766: LD_EXP 53
24770: PUSH
24771: LD_EXP 65
24775: AND
24776: IFFALSE 24855
24778: GO 24780
24780: DISABLE
24781: LD_INT 0
24783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24784: LD_ADDR_VAR 0 1
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_OWVAR 2
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PPUSH
24815: CALL_OW 69
24819: ST_TO_ADDR
// if not tmp then
24820: LD_VAR 0 1
24824: NOT
24825: IFFALSE 24829
// exit ;
24827: GO 24855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24829: LD_VAR 0 1
24833: PUSH
24834: LD_INT 1
24836: PPUSH
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL_OW 12
24846: ARRAY
24847: PPUSH
24848: LD_INT 100
24850: PPUSH
24851: CALL_OW 234
// end ;
24855: PPOPN 1
24857: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24858: LD_EXP 53
24862: PUSH
24863: LD_EXP 67
24867: AND
24868: IFFALSE 24966
24870: GO 24872
24872: DISABLE
24873: LD_INT 0
24875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24876: LD_ADDR_VAR 0 1
24880: PUSH
24881: LD_INT 22
24883: PUSH
24884: LD_OWVAR 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 21
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PPUSH
24907: CALL_OW 69
24911: ST_TO_ADDR
// if not tmp then
24912: LD_VAR 0 1
24916: NOT
24917: IFFALSE 24921
// exit ;
24919: GO 24966
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24921: LD_VAR 0 1
24925: PUSH
24926: LD_INT 1
24928: PPUSH
24929: LD_VAR 0 1
24933: PPUSH
24934: CALL_OW 12
24938: ARRAY
24939: PPUSH
24940: LD_INT 1
24942: PPUSH
24943: LD_INT 4
24945: PPUSH
24946: CALL_OW 12
24950: PPUSH
24951: LD_INT 3000
24953: PPUSH
24954: LD_INT 9000
24956: PPUSH
24957: CALL_OW 12
24961: PPUSH
24962: CALL_OW 492
// end ;
24966: PPOPN 1
24968: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24969: LD_EXP 53
24973: PUSH
24974: LD_EXP 68
24978: AND
24979: IFFALSE 24999
24981: GO 24983
24983: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24984: LD_INT 1
24986: PPUSH
24987: LD_OWVAR 2
24991: PPUSH
24992: LD_INT 0
24994: PPUSH
24995: CALL_OW 324
24999: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25000: LD_EXP 53
25004: PUSH
25005: LD_EXP 69
25009: AND
25010: IFFALSE 25093
25012: GO 25014
25014: DISABLE
25015: LD_INT 0
25017: PPUSH
25018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_INT 22
25026: PUSH
25027: LD_OWVAR 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 21
25038: PUSH
25039: LD_INT 3
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 69
25054: ST_TO_ADDR
// if not tmp then
25055: LD_VAR 0 2
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25093
// for i in tmp do
25064: LD_ADDR_VAR 0 1
25068: PUSH
25069: LD_VAR 0 2
25073: PUSH
25074: FOR_IN
25075: IFFALSE 25091
// SetBLevel ( i , 10 ) ;
25077: LD_VAR 0 1
25081: PPUSH
25082: LD_INT 10
25084: PPUSH
25085: CALL_OW 241
25089: GO 25074
25091: POP
25092: POP
// end ;
25093: PPOPN 2
25095: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25096: LD_EXP 53
25100: PUSH
25101: LD_EXP 70
25105: AND
25106: IFFALSE 25217
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
25115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25116: LD_ADDR_VAR 0 3
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_OWVAR 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 25
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 69
25151: ST_TO_ADDR
// if not tmp then
25152: LD_VAR 0 3
25156: NOT
25157: IFFALSE 25161
// exit ;
25159: GO 25217
// un := tmp [ rand ( 1 , tmp ) ] ;
25161: LD_ADDR_VAR 0 2
25165: PUSH
25166: LD_VAR 0 3
25170: PUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_VAR 0 3
25178: PPUSH
25179: CALL_OW 12
25183: ARRAY
25184: ST_TO_ADDR
// if Crawls ( un ) then
25185: LD_VAR 0 2
25189: PPUSH
25190: CALL_OW 318
25194: IFFALSE 25205
// ComWalk ( un ) ;
25196: LD_VAR 0 2
25200: PPUSH
25201: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25205: LD_VAR 0 2
25209: PPUSH
25210: LD_INT 5
25212: PPUSH
25213: CALL_OW 336
// end ;
25217: PPOPN 3
25219: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25220: LD_EXP 53
25224: PUSH
25225: LD_EXP 71
25229: AND
25230: PUSH
25231: LD_OWVAR 67
25235: PUSH
25236: LD_INT 4
25238: LESS
25239: AND
25240: IFFALSE 25259
25242: GO 25244
25244: DISABLE
// begin Difficulty := Difficulty + 1 ;
25245: LD_ADDR_OWVAR 67
25249: PUSH
25250: LD_OWVAR 67
25254: PUSH
25255: LD_INT 1
25257: PLUS
25258: ST_TO_ADDR
// end ;
25259: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25260: LD_EXP 53
25264: PUSH
25265: LD_EXP 72
25269: AND
25270: IFFALSE 25373
25272: GO 25274
25274: DISABLE
25275: LD_INT 0
25277: PPUSH
// begin for i := 1 to 5 do
25278: LD_ADDR_VAR 0 1
25282: PUSH
25283: DOUBLE
25284: LD_INT 1
25286: DEC
25287: ST_TO_ADDR
25288: LD_INT 5
25290: PUSH
25291: FOR_TO
25292: IFFALSE 25371
// begin uc_nation := nation_nature ;
25294: LD_ADDR_OWVAR 21
25298: PUSH
25299: LD_INT 0
25301: ST_TO_ADDR
// uc_side := 0 ;
25302: LD_ADDR_OWVAR 20
25306: PUSH
25307: LD_INT 0
25309: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25310: LD_ADDR_OWVAR 29
25314: PUSH
25315: LD_INT 12
25317: PUSH
25318: LD_INT 12
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: ST_TO_ADDR
// hc_agressivity := 20 ;
25325: LD_ADDR_OWVAR 35
25329: PUSH
25330: LD_INT 20
25332: ST_TO_ADDR
// hc_class := class_tiger ;
25333: LD_ADDR_OWVAR 28
25337: PUSH
25338: LD_INT 14
25340: ST_TO_ADDR
// hc_gallery :=  ;
25341: LD_ADDR_OWVAR 33
25345: PUSH
25346: LD_STRING 
25348: ST_TO_ADDR
// hc_name :=  ;
25349: LD_ADDR_OWVAR 26
25353: PUSH
25354: LD_STRING 
25356: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25357: CALL_OW 44
25361: PPUSH
25362: LD_INT 0
25364: PPUSH
25365: CALL_OW 51
// end ;
25369: GO 25291
25371: POP
25372: POP
// end ;
25373: PPOPN 1
25375: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25376: LD_EXP 53
25380: PUSH
25381: LD_EXP 73
25385: AND
25386: IFFALSE 25395
25388: GO 25390
25390: DISABLE
// StreamSibBomb ;
25391: CALL 25396 0 0
25395: END
// export function StreamSibBomb ; var i , x , y ; begin
25396: LD_INT 0
25398: PPUSH
25399: PPUSH
25400: PPUSH
25401: PPUSH
// result := false ;
25402: LD_ADDR_VAR 0 1
25406: PUSH
25407: LD_INT 0
25409: ST_TO_ADDR
// for i := 1 to 16 do
25410: LD_ADDR_VAR 0 2
25414: PUSH
25415: DOUBLE
25416: LD_INT 1
25418: DEC
25419: ST_TO_ADDR
25420: LD_INT 16
25422: PUSH
25423: FOR_TO
25424: IFFALSE 25623
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_INT 10
25433: PUSH
25434: LD_INT 20
25436: PUSH
25437: LD_INT 30
25439: PUSH
25440: LD_INT 40
25442: PUSH
25443: LD_INT 50
25445: PUSH
25446: LD_INT 60
25448: PUSH
25449: LD_INT 70
25451: PUSH
25452: LD_INT 80
25454: PUSH
25455: LD_INT 90
25457: PUSH
25458: LD_INT 100
25460: PUSH
25461: LD_INT 110
25463: PUSH
25464: LD_INT 120
25466: PUSH
25467: LD_INT 130
25469: PUSH
25470: LD_INT 140
25472: PUSH
25473: LD_INT 150
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PPUSH
25496: LD_INT 15
25498: PPUSH
25499: CALL_OW 12
25503: ARRAY
25504: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25505: LD_ADDR_VAR 0 4
25509: PUSH
25510: LD_INT 10
25512: PUSH
25513: LD_INT 20
25515: PUSH
25516: LD_INT 30
25518: PUSH
25519: LD_INT 40
25521: PUSH
25522: LD_INT 50
25524: PUSH
25525: LD_INT 60
25527: PUSH
25528: LD_INT 70
25530: PUSH
25531: LD_INT 80
25533: PUSH
25534: LD_INT 90
25536: PUSH
25537: LD_INT 100
25539: PUSH
25540: LD_INT 110
25542: PUSH
25543: LD_INT 120
25545: PUSH
25546: LD_INT 130
25548: PUSH
25549: LD_INT 140
25551: PUSH
25552: LD_INT 150
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PPUSH
25575: LD_INT 15
25577: PPUSH
25578: CALL_OW 12
25582: ARRAY
25583: ST_TO_ADDR
// if ValidHex ( x , y ) then
25584: LD_VAR 0 3
25588: PPUSH
25589: LD_VAR 0 4
25593: PPUSH
25594: CALL_OW 488
25598: IFFALSE 25621
// begin result := [ x , y ] ;
25600: LD_ADDR_VAR 0 1
25604: PUSH
25605: LD_VAR 0 3
25609: PUSH
25610: LD_VAR 0 4
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: ST_TO_ADDR
// break ;
25619: GO 25623
// end ; end ;
25621: GO 25423
25623: POP
25624: POP
// if result then
25625: LD_VAR 0 1
25629: IFFALSE 25689
// begin ToLua ( playSibBomb() ) ;
25631: LD_STRING playSibBomb()
25633: PPUSH
25634: CALL_OW 559
// wait ( 0 0$14 ) ;
25638: LD_INT 490
25640: PPUSH
25641: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25645: LD_VAR 0 1
25649: PUSH
25650: LD_INT 1
25652: ARRAY
25653: PPUSH
25654: LD_VAR 0 1
25658: PUSH
25659: LD_INT 2
25661: ARRAY
25662: PPUSH
25663: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25667: LD_VAR 0 1
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PPUSH
25676: LD_VAR 0 1
25680: PUSH
25681: LD_INT 2
25683: ARRAY
25684: PPUSH
25685: CALL_OW 429
// end ; end ;
25689: LD_VAR 0 1
25693: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25694: LD_EXP 53
25698: PUSH
25699: LD_EXP 75
25703: AND
25704: IFFALSE 25716
25706: GO 25708
25708: DISABLE
// YouLost (  ) ;
25709: LD_STRING 
25711: PPUSH
25712: CALL_OW 104
25716: END
// every 0 0$1 trigger StreamModeActive and sFog do
25717: LD_EXP 53
25721: PUSH
25722: LD_EXP 74
25726: AND
25727: IFFALSE 25741
25729: GO 25731
25731: DISABLE
// FogOff ( your_side ) ;
25732: LD_OWVAR 2
25736: PPUSH
25737: CALL_OW 344
25741: END
// every 0 0$1 trigger StreamModeActive and sSun do
25742: LD_EXP 53
25746: PUSH
25747: LD_EXP 76
25751: AND
25752: IFFALSE 25780
25754: GO 25756
25756: DISABLE
// begin solar_recharge_percent := 0 ;
25757: LD_ADDR_OWVAR 79
25761: PUSH
25762: LD_INT 0
25764: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25765: LD_INT 10500
25767: PPUSH
25768: CALL_OW 67
// solar_recharge_percent := 100 ;
25772: LD_ADDR_OWVAR 79
25776: PUSH
25777: LD_INT 100
25779: ST_TO_ADDR
// end ;
25780: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25781: LD_EXP 53
25785: PUSH
25786: LD_EXP 77
25790: AND
25791: IFFALSE 26030
25793: GO 25795
25795: DISABLE
25796: LD_INT 0
25798: PPUSH
25799: PPUSH
25800: PPUSH
// begin tmp := [ ] ;
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: EMPTY
25807: ST_TO_ADDR
// for i := 1 to 6 do
25808: LD_ADDR_VAR 0 1
25812: PUSH
25813: DOUBLE
25814: LD_INT 1
25816: DEC
25817: ST_TO_ADDR
25818: LD_INT 6
25820: PUSH
25821: FOR_TO
25822: IFFALSE 25927
// begin uc_nation := nation_nature ;
25824: LD_ADDR_OWVAR 21
25828: PUSH
25829: LD_INT 0
25831: ST_TO_ADDR
// uc_side := 0 ;
25832: LD_ADDR_OWVAR 20
25836: PUSH
25837: LD_INT 0
25839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25840: LD_ADDR_OWVAR 29
25844: PUSH
25845: LD_INT 12
25847: PUSH
25848: LD_INT 12
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: ST_TO_ADDR
// hc_agressivity := 20 ;
25855: LD_ADDR_OWVAR 35
25859: PUSH
25860: LD_INT 20
25862: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25863: LD_ADDR_OWVAR 28
25867: PUSH
25868: LD_INT 17
25870: ST_TO_ADDR
// hc_gallery :=  ;
25871: LD_ADDR_OWVAR 33
25875: PUSH
25876: LD_STRING 
25878: ST_TO_ADDR
// hc_name :=  ;
25879: LD_ADDR_OWVAR 26
25883: PUSH
25884: LD_STRING 
25886: ST_TO_ADDR
// un := CreateHuman ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: CALL_OW 44
25896: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25897: LD_VAR 0 2
25901: PPUSH
25902: LD_INT 1
25904: PPUSH
25905: CALL_OW 51
// tmp := tmp ^ un ;
25909: LD_ADDR_VAR 0 3
25913: PUSH
25914: LD_VAR 0 3
25918: PUSH
25919: LD_VAR 0 2
25923: ADD
25924: ST_TO_ADDR
// end ;
25925: GO 25821
25927: POP
25928: POP
// repeat wait ( 0 0$1 ) ;
25929: LD_INT 35
25931: PPUSH
25932: CALL_OW 67
// for un in tmp do
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: LD_VAR 0 3
25945: PUSH
25946: FOR_IN
25947: IFFALSE 26021
// begin if IsDead ( un ) then
25949: LD_VAR 0 2
25953: PPUSH
25954: CALL_OW 301
25958: IFFALSE 25978
// begin tmp := tmp diff un ;
25960: LD_ADDR_VAR 0 3
25964: PUSH
25965: LD_VAR 0 3
25969: PUSH
25970: LD_VAR 0 2
25974: DIFF
25975: ST_TO_ADDR
// continue ;
25976: GO 25946
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25978: LD_VAR 0 2
25982: PPUSH
25983: LD_INT 3
25985: PUSH
25986: LD_INT 22
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PPUSH
26000: CALL_OW 69
26004: PPUSH
26005: LD_VAR 0 2
26009: PPUSH
26010: CALL_OW 74
26014: PPUSH
26015: CALL_OW 115
// end ;
26019: GO 25946
26021: POP
26022: POP
// until not tmp ;
26023: LD_VAR 0 3
26027: NOT
26028: IFFALSE 25929
// end ;
26030: PPOPN 3
26032: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26033: LD_EXP 53
26037: PUSH
26038: LD_EXP 78
26042: AND
26043: IFFALSE 26097
26045: GO 26047
26047: DISABLE
// begin ToLua ( displayTroll(); ) ;
26048: LD_STRING displayTroll();
26050: PPUSH
26051: CALL_OW 559
// wait ( 3 3$00 ) ;
26055: LD_INT 6300
26057: PPUSH
26058: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26062: LD_STRING hideTroll();
26064: PPUSH
26065: CALL_OW 559
// wait ( 1 1$00 ) ;
26069: LD_INT 2100
26071: PPUSH
26072: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26076: LD_STRING displayTroll();
26078: PPUSH
26079: CALL_OW 559
// wait ( 1 1$00 ) ;
26083: LD_INT 2100
26085: PPUSH
26086: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26090: LD_STRING hideTroll();
26092: PPUSH
26093: CALL_OW 559
// end ;
26097: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26098: LD_EXP 53
26102: PUSH
26103: LD_EXP 79
26107: AND
26108: IFFALSE 26171
26110: GO 26112
26112: DISABLE
26113: LD_INT 0
26115: PPUSH
// begin p := 0 ;
26116: LD_ADDR_VAR 0 1
26120: PUSH
26121: LD_INT 0
26123: ST_TO_ADDR
// repeat game_speed := 1 ;
26124: LD_ADDR_OWVAR 65
26128: PUSH
26129: LD_INT 1
26131: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26132: LD_INT 35
26134: PPUSH
26135: CALL_OW 67
// p := p + 1 ;
26139: LD_ADDR_VAR 0 1
26143: PUSH
26144: LD_VAR 0 1
26148: PUSH
26149: LD_INT 1
26151: PLUS
26152: ST_TO_ADDR
// until p >= 60 ;
26153: LD_VAR 0 1
26157: PUSH
26158: LD_INT 60
26160: GREATEREQUAL
26161: IFFALSE 26124
// game_speed := 4 ;
26163: LD_ADDR_OWVAR 65
26167: PUSH
26168: LD_INT 4
26170: ST_TO_ADDR
// end ;
26171: PPOPN 1
26173: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26174: LD_EXP 53
26178: PUSH
26179: LD_EXP 80
26183: AND
26184: IFFALSE 26330
26186: GO 26188
26188: DISABLE
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26193: LD_ADDR_VAR 0 1
26197: PUSH
26198: LD_INT 22
26200: PUSH
26201: LD_OWVAR 2
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: LD_INT 30
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 30
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PPUSH
26242: CALL_OW 69
26246: ST_TO_ADDR
// if not depot then
26247: LD_VAR 0 1
26251: NOT
26252: IFFALSE 26256
// exit ;
26254: GO 26330
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26256: LD_ADDR_VAR 0 2
26260: PUSH
26261: LD_VAR 0 1
26265: PUSH
26266: LD_INT 1
26268: PPUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 12
26278: ARRAY
26279: PPUSH
26280: CALL_OW 274
26284: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_INT 1
26292: PPUSH
26293: LD_INT 0
26295: PPUSH
26296: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26300: LD_VAR 0 2
26304: PPUSH
26305: LD_INT 2
26307: PPUSH
26308: LD_INT 0
26310: PPUSH
26311: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26315: LD_VAR 0 2
26319: PPUSH
26320: LD_INT 3
26322: PPUSH
26323: LD_INT 0
26325: PPUSH
26326: CALL_OW 277
// end ;
26330: PPOPN 2
26332: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26333: LD_EXP 53
26337: PUSH
26338: LD_EXP 81
26342: AND
26343: IFFALSE 26440
26345: GO 26347
26347: DISABLE
26348: LD_INT 0
26350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26351: LD_ADDR_VAR 0 1
26355: PUSH
26356: LD_INT 22
26358: PUSH
26359: LD_OWVAR 2
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 21
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 3
26380: PUSH
26381: LD_INT 23
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: LIST
26399: PPUSH
26400: CALL_OW 69
26404: ST_TO_ADDR
// if not tmp then
26405: LD_VAR 0 1
26409: NOT
26410: IFFALSE 26414
// exit ;
26412: GO 26440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26414: LD_VAR 0 1
26418: PUSH
26419: LD_INT 1
26421: PPUSH
26422: LD_VAR 0 1
26426: PPUSH
26427: CALL_OW 12
26431: ARRAY
26432: PPUSH
26433: LD_INT 200
26435: PPUSH
26436: CALL_OW 234
// end ;
26440: PPOPN 1
26442: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26443: LD_EXP 53
26447: PUSH
26448: LD_EXP 82
26452: AND
26453: IFFALSE 26532
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26461: LD_ADDR_VAR 0 1
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_OWVAR 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 21
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 1
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26506: LD_VAR 0 1
26510: PUSH
26511: LD_INT 1
26513: PPUSH
26514: LD_VAR 0 1
26518: PPUSH
26519: CALL_OW 12
26523: ARRAY
26524: PPUSH
26525: LD_INT 60
26527: PPUSH
26528: CALL_OW 234
// end ;
26532: PPOPN 1
26534: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26535: LD_EXP 53
26539: PUSH
26540: LD_EXP 83
26544: AND
26545: IFFALSE 26644
26547: GO 26549
26549: DISABLE
26550: LD_INT 0
26552: PPUSH
26553: PPUSH
// begin enable ;
26554: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26555: LD_ADDR_VAR 0 1
26559: PUSH
26560: LD_INT 22
26562: PUSH
26563: LD_OWVAR 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 61
26574: PUSH
26575: EMPTY
26576: LIST
26577: PUSH
26578: LD_INT 33
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: PPUSH
26593: CALL_OW 69
26597: ST_TO_ADDR
// if not tmp then
26598: LD_VAR 0 1
26602: NOT
26603: IFFALSE 26607
// exit ;
26605: GO 26644
// for i in tmp do
26607: LD_ADDR_VAR 0 2
26611: PUSH
26612: LD_VAR 0 1
26616: PUSH
26617: FOR_IN
26618: IFFALSE 26642
// if IsControledBy ( i ) then
26620: LD_VAR 0 2
26624: PPUSH
26625: CALL_OW 312
26629: IFFALSE 26640
// ComUnlink ( i ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: CALL_OW 136
26640: GO 26617
26642: POP
26643: POP
// end ;
26644: PPOPN 2
26646: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26647: LD_EXP 53
26651: PUSH
26652: LD_EXP 84
26656: AND
26657: IFFALSE 26797
26659: GO 26661
26661: DISABLE
26662: LD_INT 0
26664: PPUSH
26665: PPUSH
// begin ToLua ( displayPowell(); ) ;
26666: LD_STRING displayPowell();
26668: PPUSH
26669: CALL_OW 559
// uc_side := 0 ;
26673: LD_ADDR_OWVAR 20
26677: PUSH
26678: LD_INT 0
26680: ST_TO_ADDR
// uc_nation := 2 ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_INT 2
26688: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26689: LD_ADDR_OWVAR 37
26693: PUSH
26694: LD_INT 14
26696: ST_TO_ADDR
// vc_engine := engine_siberite ;
26697: LD_ADDR_OWVAR 39
26701: PUSH
26702: LD_INT 3
26704: ST_TO_ADDR
// vc_control := control_apeman ;
26705: LD_ADDR_OWVAR 38
26709: PUSH
26710: LD_INT 5
26712: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26713: LD_ADDR_OWVAR 40
26717: PUSH
26718: LD_INT 29
26720: ST_TO_ADDR
// un := CreateVehicle ;
26721: LD_ADDR_VAR 0 2
26725: PUSH
26726: CALL_OW 45
26730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26731: LD_VAR 0 2
26735: PPUSH
26736: LD_INT 1
26738: PPUSH
26739: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26743: LD_INT 35
26745: PPUSH
26746: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26750: LD_VAR 0 2
26754: PPUSH
26755: LD_INT 22
26757: PUSH
26758: LD_OWVAR 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 69
26771: PPUSH
26772: LD_VAR 0 2
26776: PPUSH
26777: CALL_OW 74
26781: PPUSH
26782: CALL_OW 115
// until IsDead ( un ) ;
26786: LD_VAR 0 2
26790: PPUSH
26791: CALL_OW 301
26795: IFFALSE 26743
// end ;
26797: PPOPN 2
26799: END
// every 0 0$1 trigger StreamModeActive and sStu do
26800: LD_EXP 53
26804: PUSH
26805: LD_EXP 92
26809: AND
26810: IFFALSE 26826
26812: GO 26814
26814: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26815: LD_STRING displayStucuk();
26817: PPUSH
26818: CALL_OW 559
// ResetFog ;
26822: CALL_OW 335
// end ;
26826: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26827: LD_EXP 53
26831: PUSH
26832: LD_EXP 85
26836: AND
26837: IFFALSE 26978
26839: GO 26841
26841: DISABLE
26842: LD_INT 0
26844: PPUSH
26845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26846: LD_ADDR_VAR 0 2
26850: PUSH
26851: LD_INT 22
26853: PUSH
26854: LD_OWVAR 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 21
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: ST_TO_ADDR
// if not tmp then
26882: LD_VAR 0 2
26886: NOT
26887: IFFALSE 26891
// exit ;
26889: GO 26978
// un := tmp [ rand ( 1 , tmp ) ] ;
26891: LD_ADDR_VAR 0 1
26895: PUSH
26896: LD_VAR 0 2
26900: PUSH
26901: LD_INT 1
26903: PPUSH
26904: LD_VAR 0 2
26908: PPUSH
26909: CALL_OW 12
26913: ARRAY
26914: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_INT 0
26922: PPUSH
26923: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26927: LD_VAR 0 1
26931: PPUSH
26932: LD_OWVAR 3
26936: PUSH
26937: LD_VAR 0 1
26941: DIFF
26942: PPUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 74
26952: PPUSH
26953: CALL_OW 115
// wait ( 0 0$20 ) ;
26957: LD_INT 700
26959: PPUSH
26960: CALL_OW 67
// SetSide ( un , your_side ) ;
26964: LD_VAR 0 1
26968: PPUSH
26969: LD_OWVAR 2
26973: PPUSH
26974: CALL_OW 235
// end ;
26978: PPOPN 2
26980: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26981: LD_EXP 53
26985: PUSH
26986: LD_EXP 86
26990: AND
26991: IFFALSE 27097
26993: GO 26995
26995: DISABLE
26996: LD_INT 0
26998: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26999: LD_ADDR_VAR 0 1
27003: PUSH
27004: LD_INT 22
27006: PUSH
27007: LD_OWVAR 2
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 30
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 30
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL_OW 69
27052: ST_TO_ADDR
// if not depot then
27053: LD_VAR 0 1
27057: NOT
27058: IFFALSE 27062
// exit ;
27060: GO 27097
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27062: LD_VAR 0 1
27066: PUSH
27067: LD_INT 1
27069: ARRAY
27070: PPUSH
27071: CALL_OW 250
27075: PPUSH
27076: LD_VAR 0 1
27080: PUSH
27081: LD_INT 1
27083: ARRAY
27084: PPUSH
27085: CALL_OW 251
27089: PPUSH
27090: LD_INT 70
27092: PPUSH
27093: CALL_OW 495
// end ;
27097: PPOPN 1
27099: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27100: LD_EXP 53
27104: PUSH
27105: LD_EXP 87
27109: AND
27110: IFFALSE 27321
27112: GO 27114
27114: DISABLE
27115: LD_INT 0
27117: PPUSH
27118: PPUSH
27119: PPUSH
27120: PPUSH
27121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27122: LD_ADDR_VAR 0 5
27126: PUSH
27127: LD_INT 22
27129: PUSH
27130: LD_OWVAR 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 21
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PPUSH
27153: CALL_OW 69
27157: ST_TO_ADDR
// if not tmp then
27158: LD_VAR 0 5
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27321
// for i in tmp do
27167: LD_ADDR_VAR 0 1
27171: PUSH
27172: LD_VAR 0 5
27176: PUSH
27177: FOR_IN
27178: IFFALSE 27319
// begin d := rand ( 0 , 5 ) ;
27180: LD_ADDR_VAR 0 4
27184: PUSH
27185: LD_INT 0
27187: PPUSH
27188: LD_INT 5
27190: PPUSH
27191: CALL_OW 12
27195: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27196: LD_ADDR_VAR 0 2
27200: PUSH
27201: LD_VAR 0 1
27205: PPUSH
27206: CALL_OW 250
27210: PPUSH
27211: LD_VAR 0 4
27215: PPUSH
27216: LD_INT 3
27218: PPUSH
27219: LD_INT 12
27221: PPUSH
27222: CALL_OW 12
27226: PPUSH
27227: CALL_OW 272
27231: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27232: LD_ADDR_VAR 0 3
27236: PUSH
27237: LD_VAR 0 1
27241: PPUSH
27242: CALL_OW 251
27246: PPUSH
27247: LD_VAR 0 4
27251: PPUSH
27252: LD_INT 3
27254: PPUSH
27255: LD_INT 12
27257: PPUSH
27258: CALL_OW 12
27262: PPUSH
27263: CALL_OW 273
27267: ST_TO_ADDR
// if ValidHex ( x , y ) then
27268: LD_VAR 0 2
27272: PPUSH
27273: LD_VAR 0 3
27277: PPUSH
27278: CALL_OW 488
27282: IFFALSE 27317
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27284: LD_VAR 0 1
27288: PPUSH
27289: LD_VAR 0 2
27293: PPUSH
27294: LD_VAR 0 3
27298: PPUSH
27299: LD_INT 3
27301: PPUSH
27302: LD_INT 6
27304: PPUSH
27305: CALL_OW 12
27309: PPUSH
27310: LD_INT 1
27312: PPUSH
27313: CALL_OW 483
// end ;
27317: GO 27177
27319: POP
27320: POP
// end ;
27321: PPOPN 5
27323: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27324: LD_EXP 53
27328: PUSH
27329: LD_EXP 88
27333: AND
27334: IFFALSE 27428
27336: GO 27338
27338: DISABLE
27339: LD_INT 0
27341: PPUSH
27342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27343: LD_ADDR_VAR 0 2
27347: PUSH
27348: LD_INT 22
27350: PUSH
27351: LD_OWVAR 2
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 32
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 21
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: PPUSH
27385: CALL_OW 69
27389: ST_TO_ADDR
// if not tmp then
27390: LD_VAR 0 2
27394: NOT
27395: IFFALSE 27399
// exit ;
27397: GO 27428
// for i in tmp do
27399: LD_ADDR_VAR 0 1
27403: PUSH
27404: LD_VAR 0 2
27408: PUSH
27409: FOR_IN
27410: IFFALSE 27426
// SetFuel ( i , 0 ) ;
27412: LD_VAR 0 1
27416: PPUSH
27417: LD_INT 0
27419: PPUSH
27420: CALL_OW 240
27424: GO 27409
27426: POP
27427: POP
// end ;
27428: PPOPN 2
27430: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27431: LD_EXP 53
27435: PUSH
27436: LD_EXP 89
27440: AND
27441: IFFALSE 27507
27443: GO 27445
27445: DISABLE
27446: LD_INT 0
27448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_OWVAR 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 30
27468: PUSH
27469: LD_INT 29
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PPUSH
27480: CALL_OW 69
27484: ST_TO_ADDR
// if not tmp then
27485: LD_VAR 0 1
27489: NOT
27490: IFFALSE 27494
// exit ;
27492: GO 27507
// DestroyUnit ( tmp [ 1 ] ) ;
27494: LD_VAR 0 1
27498: PUSH
27499: LD_INT 1
27501: ARRAY
27502: PPUSH
27503: CALL_OW 65
// end ;
27507: PPOPN 1
27509: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27510: LD_EXP 53
27514: PUSH
27515: LD_EXP 91
27519: AND
27520: IFFALSE 27649
27522: GO 27524
27524: DISABLE
27525: LD_INT 0
27527: PPUSH
// begin uc_side := 0 ;
27528: LD_ADDR_OWVAR 20
27532: PUSH
27533: LD_INT 0
27535: ST_TO_ADDR
// uc_nation := nation_arabian ;
27536: LD_ADDR_OWVAR 21
27540: PUSH
27541: LD_INT 2
27543: ST_TO_ADDR
// hc_gallery :=  ;
27544: LD_ADDR_OWVAR 33
27548: PUSH
27549: LD_STRING 
27551: ST_TO_ADDR
// hc_name :=  ;
27552: LD_ADDR_OWVAR 26
27556: PUSH
27557: LD_STRING 
27559: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27560: LD_INT 1
27562: PPUSH
27563: LD_INT 11
27565: PPUSH
27566: LD_INT 10
27568: PPUSH
27569: CALL_OW 380
// un := CreateHuman ;
27573: LD_ADDR_VAR 0 1
27577: PUSH
27578: CALL_OW 44
27582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27583: LD_VAR 0 1
27587: PPUSH
27588: LD_INT 1
27590: PPUSH
27591: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27595: LD_INT 35
27597: PPUSH
27598: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27602: LD_VAR 0 1
27606: PPUSH
27607: LD_INT 22
27609: PUSH
27610: LD_OWVAR 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PPUSH
27619: CALL_OW 69
27623: PPUSH
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 74
27633: PPUSH
27634: CALL_OW 115
// until IsDead ( un ) ;
27638: LD_VAR 0 1
27642: PPUSH
27643: CALL_OW 301
27647: IFFALSE 27595
// end ;
27649: PPOPN 1
27651: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27652: LD_EXP 53
27656: PUSH
27657: LD_EXP 93
27661: AND
27662: IFFALSE 27674
27664: GO 27666
27666: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27667: LD_STRING earthquake(getX(game), 0, 32)
27669: PPUSH
27670: CALL_OW 559
27674: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27675: LD_EXP 53
27679: PUSH
27680: LD_EXP 94
27684: AND
27685: IFFALSE 27776
27687: GO 27689
27689: DISABLE
27690: LD_INT 0
27692: PPUSH
// begin enable ;
27693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27694: LD_ADDR_VAR 0 1
27698: PUSH
27699: LD_INT 22
27701: PUSH
27702: LD_OWVAR 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 21
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 33
27723: PUSH
27724: LD_INT 3
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 69
27740: ST_TO_ADDR
// if not tmp then
27741: LD_VAR 0 1
27745: NOT
27746: IFFALSE 27750
// exit ;
27748: GO 27776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27750: LD_VAR 0 1
27754: PUSH
27755: LD_INT 1
27757: PPUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL_OW 12
27767: ARRAY
27768: PPUSH
27769: LD_INT 1
27771: PPUSH
27772: CALL_OW 234
// end ;
27776: PPOPN 1
27778: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27779: LD_EXP 53
27783: PUSH
27784: LD_EXP 95
27788: AND
27789: IFFALSE 27930
27791: GO 27793
27793: DISABLE
27794: LD_INT 0
27796: PPUSH
27797: PPUSH
27798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27799: LD_ADDR_VAR 0 3
27803: PUSH
27804: LD_INT 22
27806: PUSH
27807: LD_OWVAR 2
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 25
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL_OW 69
27834: ST_TO_ADDR
// if not tmp then
27835: LD_VAR 0 3
27839: NOT
27840: IFFALSE 27844
// exit ;
27842: GO 27930
// un := tmp [ rand ( 1 , tmp ) ] ;
27844: LD_ADDR_VAR 0 2
27848: PUSH
27849: LD_VAR 0 3
27853: PUSH
27854: LD_INT 1
27856: PPUSH
27857: LD_VAR 0 3
27861: PPUSH
27862: CALL_OW 12
27866: ARRAY
27867: ST_TO_ADDR
// if Crawls ( un ) then
27868: LD_VAR 0 2
27872: PPUSH
27873: CALL_OW 318
27877: IFFALSE 27888
// ComWalk ( un ) ;
27879: LD_VAR 0 2
27883: PPUSH
27884: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27888: LD_VAR 0 2
27892: PPUSH
27893: LD_INT 9
27895: PPUSH
27896: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27900: LD_INT 28
27902: PPUSH
27903: LD_OWVAR 2
27907: PPUSH
27908: LD_INT 2
27910: PPUSH
27911: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27915: LD_INT 29
27917: PPUSH
27918: LD_OWVAR 2
27922: PPUSH
27923: LD_INT 2
27925: PPUSH
27926: CALL_OW 322
// end ;
27930: PPOPN 3
27932: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27933: LD_EXP 53
27937: PUSH
27938: LD_EXP 96
27942: AND
27943: IFFALSE 28054
27945: GO 27947
27947: DISABLE
27948: LD_INT 0
27950: PPUSH
27951: PPUSH
27952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27953: LD_ADDR_VAR 0 3
27957: PUSH
27958: LD_INT 22
27960: PUSH
27961: LD_OWVAR 2
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 25
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 69
27988: ST_TO_ADDR
// if not tmp then
27989: LD_VAR 0 3
27993: NOT
27994: IFFALSE 27998
// exit ;
27996: GO 28054
// un := tmp [ rand ( 1 , tmp ) ] ;
27998: LD_ADDR_VAR 0 2
28002: PUSH
28003: LD_VAR 0 3
28007: PUSH
28008: LD_INT 1
28010: PPUSH
28011: LD_VAR 0 3
28015: PPUSH
28016: CALL_OW 12
28020: ARRAY
28021: ST_TO_ADDR
// if Crawls ( un ) then
28022: LD_VAR 0 2
28026: PPUSH
28027: CALL_OW 318
28031: IFFALSE 28042
// ComWalk ( un ) ;
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28042: LD_VAR 0 2
28046: PPUSH
28047: LD_INT 8
28049: PPUSH
28050: CALL_OW 336
// end ;
28054: PPOPN 3
28056: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28057: LD_EXP 53
28061: PUSH
28062: LD_EXP 97
28066: AND
28067: IFFALSE 28211
28069: GO 28071
28071: DISABLE
28072: LD_INT 0
28074: PPUSH
28075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28076: LD_ADDR_VAR 0 2
28080: PUSH
28081: LD_INT 22
28083: PUSH
28084: LD_OWVAR 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 21
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: LD_INT 34
28108: PUSH
28109: LD_INT 12
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 34
28118: PUSH
28119: LD_INT 51
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 34
28128: PUSH
28129: LD_INT 32
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: PPUSH
28147: CALL_OW 69
28151: ST_TO_ADDR
// if not tmp then
28152: LD_VAR 0 2
28156: NOT
28157: IFFALSE 28161
// exit ;
28159: GO 28211
// for i in tmp do
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: LD_VAR 0 2
28170: PUSH
28171: FOR_IN
28172: IFFALSE 28209
// if GetCargo ( i , mat_artifact ) = 0 then
28174: LD_VAR 0 1
28178: PPUSH
28179: LD_INT 4
28181: PPUSH
28182: CALL_OW 289
28186: PUSH
28187: LD_INT 0
28189: EQUAL
28190: IFFALSE 28207
// SetCargo ( i , mat_siberit , 100 ) ;
28192: LD_VAR 0 1
28196: PPUSH
28197: LD_INT 3
28199: PPUSH
28200: LD_INT 100
28202: PPUSH
28203: CALL_OW 290
28207: GO 28171
28209: POP
28210: POP
// end ;
28211: PPOPN 2
28213: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28214: LD_EXP 53
28218: PUSH
28219: LD_EXP 98
28223: AND
28224: IFFALSE 28407
28226: GO 28228
28228: DISABLE
28229: LD_INT 0
28231: PPUSH
28232: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28233: LD_ADDR_VAR 0 2
28237: PUSH
28238: LD_INT 22
28240: PUSH
28241: LD_OWVAR 2
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 69
28254: ST_TO_ADDR
// if not tmp then
28255: LD_VAR 0 2
28259: NOT
28260: IFFALSE 28264
// exit ;
28262: GO 28407
// for i := 1 to 2 do
28264: LD_ADDR_VAR 0 1
28268: PUSH
28269: DOUBLE
28270: LD_INT 1
28272: DEC
28273: ST_TO_ADDR
28274: LD_INT 2
28276: PUSH
28277: FOR_TO
28278: IFFALSE 28405
// begin uc_side := your_side ;
28280: LD_ADDR_OWVAR 20
28284: PUSH
28285: LD_OWVAR 2
28289: ST_TO_ADDR
// uc_nation := nation_american ;
28290: LD_ADDR_OWVAR 21
28294: PUSH
28295: LD_INT 1
28297: ST_TO_ADDR
// vc_chassis := us_morphling ;
28298: LD_ADDR_OWVAR 37
28302: PUSH
28303: LD_INT 5
28305: ST_TO_ADDR
// vc_engine := engine_siberite ;
28306: LD_ADDR_OWVAR 39
28310: PUSH
28311: LD_INT 3
28313: ST_TO_ADDR
// vc_control := control_computer ;
28314: LD_ADDR_OWVAR 38
28318: PUSH
28319: LD_INT 3
28321: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28322: LD_ADDR_OWVAR 40
28326: PUSH
28327: LD_INT 10
28329: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28330: LD_VAR 0 2
28334: PUSH
28335: LD_INT 1
28337: ARRAY
28338: PPUSH
28339: CALL_OW 310
28343: NOT
28344: IFFALSE 28391
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28346: CALL_OW 45
28350: PPUSH
28351: LD_VAR 0 2
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: PPUSH
28360: CALL_OW 250
28364: PPUSH
28365: LD_VAR 0 2
28369: PUSH
28370: LD_INT 1
28372: ARRAY
28373: PPUSH
28374: CALL_OW 251
28378: PPUSH
28379: LD_INT 12
28381: PPUSH
28382: LD_INT 1
28384: PPUSH
28385: CALL_OW 50
28389: GO 28403
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28391: CALL_OW 45
28395: PPUSH
28396: LD_INT 1
28398: PPUSH
28399: CALL_OW 51
// end ;
28403: GO 28277
28405: POP
28406: POP
// end ;
28407: PPOPN 2
28409: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28410: LD_EXP 53
28414: PUSH
28415: LD_EXP 99
28419: AND
28420: IFFALSE 28642
28422: GO 28424
28424: DISABLE
28425: LD_INT 0
28427: PPUSH
28428: PPUSH
28429: PPUSH
28430: PPUSH
28431: PPUSH
28432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28433: LD_ADDR_VAR 0 6
28437: PUSH
28438: LD_INT 22
28440: PUSH
28441: LD_OWVAR 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 21
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 23
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: PPUSH
28482: CALL_OW 69
28486: ST_TO_ADDR
// if not tmp then
28487: LD_VAR 0 6
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28642
// s1 := rand ( 1 , 4 ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 1
28503: PPUSH
28504: LD_INT 4
28506: PPUSH
28507: CALL_OW 12
28511: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28512: LD_ADDR_VAR 0 4
28516: PUSH
28517: LD_VAR 0 6
28521: PUSH
28522: LD_INT 1
28524: ARRAY
28525: PPUSH
28526: LD_VAR 0 2
28530: PPUSH
28531: CALL_OW 259
28535: ST_TO_ADDR
// if s1 = 1 then
28536: LD_VAR 0 2
28540: PUSH
28541: LD_INT 1
28543: EQUAL
28544: IFFALSE 28564
// s2 := rand ( 2 , 4 ) else
28546: LD_ADDR_VAR 0 3
28550: PUSH
28551: LD_INT 2
28553: PPUSH
28554: LD_INT 4
28556: PPUSH
28557: CALL_OW 12
28561: ST_TO_ADDR
28562: GO 28572
// s2 := 1 ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_INT 1
28571: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28572: LD_ADDR_VAR 0 5
28576: PUSH
28577: LD_VAR 0 6
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 3
28590: PPUSH
28591: CALL_OW 259
28595: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28596: LD_VAR 0 6
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: LD_VAR 0 2
28609: PPUSH
28610: LD_VAR 0 5
28614: PPUSH
28615: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28619: LD_VAR 0 6
28623: PUSH
28624: LD_INT 1
28626: ARRAY
28627: PPUSH
28628: LD_VAR 0 3
28632: PPUSH
28633: LD_VAR 0 4
28637: PPUSH
28638: CALL_OW 237
// end ;
28642: PPOPN 6
28644: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28645: LD_EXP 53
28649: PUSH
28650: LD_EXP 100
28654: AND
28655: IFFALSE 28734
28657: GO 28659
28659: DISABLE
28660: LD_INT 0
28662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28663: LD_ADDR_VAR 0 1
28667: PUSH
28668: LD_INT 22
28670: PUSH
28671: LD_OWVAR 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 30
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PPUSH
28694: CALL_OW 69
28698: ST_TO_ADDR
// if not tmp then
28699: LD_VAR 0 1
28703: NOT
28704: IFFALSE 28708
// exit ;
28706: GO 28734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28708: LD_VAR 0 1
28712: PUSH
28713: LD_INT 1
28715: PPUSH
28716: LD_VAR 0 1
28720: PPUSH
28721: CALL_OW 12
28725: ARRAY
28726: PPUSH
28727: LD_INT 1
28729: PPUSH
28730: CALL_OW 234
// end ;
28734: PPOPN 1
28736: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28737: LD_EXP 53
28741: PUSH
28742: LD_EXP 101
28746: AND
28747: IFFALSE 28859
28749: GO 28751
28751: DISABLE
28752: LD_INT 0
28754: PPUSH
28755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28756: LD_ADDR_VAR 0 2
28760: PUSH
28761: LD_INT 22
28763: PUSH
28764: LD_OWVAR 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 30
28778: PUSH
28779: LD_INT 27
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 30
28788: PUSH
28789: LD_INT 26
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 30
28798: PUSH
28799: LD_INT 28
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 69
28820: ST_TO_ADDR
// if not tmp then
28821: LD_VAR 0 2
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28859
// for i in tmp do
28830: LD_ADDR_VAR 0 1
28834: PUSH
28835: LD_VAR 0 2
28839: PUSH
28840: FOR_IN
28841: IFFALSE 28857
// SetLives ( i , 1 ) ;
28843: LD_VAR 0 1
28847: PPUSH
28848: LD_INT 1
28850: PPUSH
28851: CALL_OW 234
28855: GO 28840
28857: POP
28858: POP
// end ;
28859: PPOPN 2
28861: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28862: LD_EXP 53
28866: PUSH
28867: LD_EXP 102
28871: AND
28872: IFFALSE 29159
28874: GO 28876
28876: DISABLE
28877: LD_INT 0
28879: PPUSH
28880: PPUSH
28881: PPUSH
// begin i := rand ( 1 , 7 ) ;
28882: LD_ADDR_VAR 0 1
28886: PUSH
28887: LD_INT 1
28889: PPUSH
28890: LD_INT 7
28892: PPUSH
28893: CALL_OW 12
28897: ST_TO_ADDR
// case i of 1 :
28898: LD_VAR 0 1
28902: PUSH
28903: LD_INT 1
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28921
28911: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28912: LD_STRING earthquake(getX(game), 0, 32)
28914: PPUSH
28915: CALL_OW 559
28919: GO 29159
28921: LD_INT 2
28923: DOUBLE
28924: EQUAL
28925: IFTRUE 28929
28927: GO 28943
28929: POP
// begin ToLua ( displayStucuk(); ) ;
28930: LD_STRING displayStucuk();
28932: PPUSH
28933: CALL_OW 559
// ResetFog ;
28937: CALL_OW 335
// end ; 3 :
28941: GO 29159
28943: LD_INT 3
28945: DOUBLE
28946: EQUAL
28947: IFTRUE 28951
28949: GO 29055
28951: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28952: LD_ADDR_VAR 0 2
28956: PUSH
28957: LD_INT 22
28959: PUSH
28960: LD_OWVAR 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 25
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PPUSH
28983: CALL_OW 69
28987: ST_TO_ADDR
// if not tmp then
28988: LD_VAR 0 2
28992: NOT
28993: IFFALSE 28997
// exit ;
28995: GO 29159
// un := tmp [ rand ( 1 , tmp ) ] ;
28997: LD_ADDR_VAR 0 3
29001: PUSH
29002: LD_VAR 0 2
29006: PUSH
29007: LD_INT 1
29009: PPUSH
29010: LD_VAR 0 2
29014: PPUSH
29015: CALL_OW 12
29019: ARRAY
29020: ST_TO_ADDR
// if Crawls ( un ) then
29021: LD_VAR 0 3
29025: PPUSH
29026: CALL_OW 318
29030: IFFALSE 29041
// ComWalk ( un ) ;
29032: LD_VAR 0 3
29036: PPUSH
29037: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29041: LD_VAR 0 3
29045: PPUSH
29046: LD_INT 8
29048: PPUSH
29049: CALL_OW 336
// end ; 4 :
29053: GO 29159
29055: LD_INT 4
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29063
29061: GO 29137
29063: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: LD_INT 22
29071: PUSH
29072: LD_OWVAR 2
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 30
29083: PUSH
29084: LD_INT 29
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PPUSH
29095: CALL_OW 69
29099: ST_TO_ADDR
// if not tmp then
29100: LD_VAR 0 2
29104: NOT
29105: IFFALSE 29109
// exit ;
29107: GO 29159
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29109: LD_VAR 0 2
29113: PUSH
29114: LD_INT 1
29116: ARRAY
29117: PPUSH
29118: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29122: LD_VAR 0 2
29126: PUSH
29127: LD_INT 1
29129: ARRAY
29130: PPUSH
29131: CALL_OW 65
// end ; 5 .. 7 :
29135: GO 29159
29137: LD_INT 5
29139: DOUBLE
29140: GREATEREQUAL
29141: IFFALSE 29149
29143: LD_INT 7
29145: DOUBLE
29146: LESSEQUAL
29147: IFTRUE 29151
29149: GO 29158
29151: POP
// StreamSibBomb ; end ;
29152: CALL 25396 0 0
29156: GO 29159
29158: POP
// end ;
29159: PPOPN 3
29161: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29162: LD_EXP 53
29166: PUSH
29167: LD_EXP 103
29171: AND
29172: IFFALSE 29328
29174: GO 29176
29176: DISABLE
29177: LD_INT 0
29179: PPUSH
29180: PPUSH
29181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29182: LD_ADDR_VAR 0 2
29186: PUSH
29187: LD_INT 81
29189: PUSH
29190: LD_OWVAR 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 21
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PPUSH
29231: CALL_OW 69
29235: ST_TO_ADDR
// if not tmp then
29236: LD_VAR 0 2
29240: NOT
29241: IFFALSE 29245
// exit ;
29243: GO 29328
// p := 0 ;
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_INT 0
29252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29253: LD_INT 35
29255: PPUSH
29256: CALL_OW 67
// p := p + 1 ;
29260: LD_ADDR_VAR 0 3
29264: PUSH
29265: LD_VAR 0 3
29269: PUSH
29270: LD_INT 1
29272: PLUS
29273: ST_TO_ADDR
// for i in tmp do
29274: LD_ADDR_VAR 0 1
29278: PUSH
29279: LD_VAR 0 2
29283: PUSH
29284: FOR_IN
29285: IFFALSE 29316
// if GetLives ( i ) < 1000 then
29287: LD_VAR 0 1
29291: PPUSH
29292: CALL_OW 256
29296: PUSH
29297: LD_INT 1000
29299: LESS
29300: IFFALSE 29314
// SetLives ( i , 1000 ) ;
29302: LD_VAR 0 1
29306: PPUSH
29307: LD_INT 1000
29309: PPUSH
29310: CALL_OW 234
29314: GO 29284
29316: POP
29317: POP
// until p > 20 ;
29318: LD_VAR 0 3
29322: PUSH
29323: LD_INT 20
29325: GREATER
29326: IFFALSE 29253
// end ;
29328: PPOPN 3
29330: END
// every 0 0$1 trigger StreamModeActive and sTime do
29331: LD_EXP 53
29335: PUSH
29336: LD_EXP 104
29340: AND
29341: IFFALSE 29376
29343: GO 29345
29345: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29346: LD_INT 28
29348: PPUSH
29349: LD_OWVAR 2
29353: PPUSH
29354: LD_INT 2
29356: PPUSH
29357: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29361: LD_INT 30
29363: PPUSH
29364: LD_OWVAR 2
29368: PPUSH
29369: LD_INT 2
29371: PPUSH
29372: CALL_OW 322
// end ;
29376: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29377: LD_EXP 53
29381: PUSH
29382: LD_EXP 105
29386: AND
29387: IFFALSE 29508
29389: GO 29391
29391: DISABLE
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29396: LD_ADDR_VAR 0 2
29400: PUSH
29401: LD_INT 22
29403: PUSH
29404: LD_OWVAR 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 21
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 3
29425: PUSH
29426: LD_INT 23
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: PPUSH
29445: CALL_OW 69
29449: ST_TO_ADDR
// if not tmp then
29450: LD_VAR 0 2
29454: NOT
29455: IFFALSE 29459
// exit ;
29457: GO 29508
// for i in tmp do
29459: LD_ADDR_VAR 0 1
29463: PUSH
29464: LD_VAR 0 2
29468: PUSH
29469: FOR_IN
29470: IFFALSE 29506
// begin if Crawls ( i ) then
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL_OW 318
29481: IFFALSE 29492
// ComWalk ( i ) ;
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 138
// SetClass ( i , 2 ) ;
29492: LD_VAR 0 1
29496: PPUSH
29497: LD_INT 2
29499: PPUSH
29500: CALL_OW 336
// end ;
29504: GO 29469
29506: POP
29507: POP
// end ;
29508: PPOPN 2
29510: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29511: LD_EXP 53
29515: PUSH
29516: LD_EXP 106
29520: AND
29521: IFFALSE 29809
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
29530: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29531: LD_OWVAR 2
29535: PPUSH
29536: LD_INT 9
29538: PPUSH
29539: LD_INT 1
29541: PPUSH
29542: LD_INT 1
29544: PPUSH
29545: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29549: LD_INT 9
29551: PPUSH
29552: LD_OWVAR 2
29556: PPUSH
29557: CALL_OW 343
// uc_side := 9 ;
29561: LD_ADDR_OWVAR 20
29565: PUSH
29566: LD_INT 9
29568: ST_TO_ADDR
// uc_nation := 2 ;
29569: LD_ADDR_OWVAR 21
29573: PUSH
29574: LD_INT 2
29576: ST_TO_ADDR
// hc_name := Dark Warrior ;
29577: LD_ADDR_OWVAR 26
29581: PUSH
29582: LD_STRING Dark Warrior
29584: ST_TO_ADDR
// hc_gallery :=  ;
29585: LD_ADDR_OWVAR 33
29589: PUSH
29590: LD_STRING 
29592: ST_TO_ADDR
// hc_noskilllimit := true ;
29593: LD_ADDR_OWVAR 76
29597: PUSH
29598: LD_INT 1
29600: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29601: LD_ADDR_OWVAR 31
29605: PUSH
29606: LD_INT 30
29608: PUSH
29609: LD_INT 30
29611: PUSH
29612: LD_INT 30
29614: PUSH
29615: LD_INT 30
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// un := CreateHuman ;
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: CALL_OW 44
29633: ST_TO_ADDR
// hc_noskilllimit := false ;
29634: LD_ADDR_OWVAR 76
29638: PUSH
29639: LD_INT 0
29641: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29642: LD_VAR 0 3
29646: PPUSH
29647: LD_INT 1
29649: PPUSH
29650: CALL_OW 51
// ToLua ( playRanger() ) ;
29654: LD_STRING playRanger()
29656: PPUSH
29657: CALL_OW 559
// p := 0 ;
29661: LD_ADDR_VAR 0 2
29665: PUSH
29666: LD_INT 0
29668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29669: LD_INT 35
29671: PPUSH
29672: CALL_OW 67
// p := p + 1 ;
29676: LD_ADDR_VAR 0 2
29680: PUSH
29681: LD_VAR 0 2
29685: PUSH
29686: LD_INT 1
29688: PLUS
29689: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29690: LD_VAR 0 3
29694: PPUSH
29695: CALL_OW 256
29699: PUSH
29700: LD_INT 1000
29702: LESS
29703: IFFALSE 29717
// SetLives ( un , 1000 ) ;
29705: LD_VAR 0 3
29709: PPUSH
29710: LD_INT 1000
29712: PPUSH
29713: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29717: LD_VAR 0 3
29721: PPUSH
29722: LD_INT 81
29724: PUSH
29725: LD_OWVAR 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 91
29736: PUSH
29737: LD_VAR 0 3
29741: PUSH
29742: LD_INT 30
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 69
29758: PPUSH
29759: LD_VAR 0 3
29763: PPUSH
29764: CALL_OW 74
29768: PPUSH
29769: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29773: LD_VAR 0 2
29777: PUSH
29778: LD_INT 80
29780: GREATER
29781: PUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: CALL_OW 301
29791: OR
29792: IFFALSE 29669
// if un then
29794: LD_VAR 0 3
29798: IFFALSE 29809
// RemoveUnit ( un ) ;
29800: LD_VAR 0 3
29804: PPUSH
29805: CALL_OW 64
// end ;
29809: PPOPN 3
29811: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29812: LD_EXP 107
29816: IFFALSE 29932
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
29824: PPUSH
29825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29826: LD_ADDR_VAR 0 2
29830: PUSH
29831: LD_INT 81
29833: PUSH
29834: LD_OWVAR 2
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 21
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PPUSH
29857: CALL_OW 69
29861: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29862: LD_STRING playComputer()
29864: PPUSH
29865: CALL_OW 559
// if not tmp then
29869: LD_VAR 0 2
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 29932
// for i in tmp do
29878: LD_ADDR_VAR 0 1
29882: PUSH
29883: LD_VAR 0 2
29887: PUSH
29888: FOR_IN
29889: IFFALSE 29930
// for j := 1 to 4 do
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: DOUBLE
29897: LD_INT 1
29899: DEC
29900: ST_TO_ADDR
29901: LD_INT 4
29903: PUSH
29904: FOR_TO
29905: IFFALSE 29926
// SetSkill ( i , j , 10 ) ;
29907: LD_VAR 0 1
29911: PPUSH
29912: LD_VAR 0 3
29916: PPUSH
29917: LD_INT 10
29919: PPUSH
29920: CALL_OW 237
29924: GO 29904
29926: POP
29927: POP
29928: GO 29888
29930: POP
29931: POP
// end ;
29932: PPOPN 3
29934: END
// every 0 0$1 trigger s30 do var i , tmp ;
29935: LD_EXP 108
29939: IFFALSE 30008
29941: GO 29943
29943: DISABLE
29944: LD_INT 0
29946: PPUSH
29947: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29948: LD_ADDR_VAR 0 2
29952: PUSH
29953: LD_INT 22
29955: PUSH
29956: LD_OWVAR 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PPUSH
29965: CALL_OW 69
29969: ST_TO_ADDR
// if not tmp then
29970: LD_VAR 0 2
29974: NOT
29975: IFFALSE 29979
// exit ;
29977: GO 30008
// for i in tmp do
29979: LD_ADDR_VAR 0 1
29983: PUSH
29984: LD_VAR 0 2
29988: PUSH
29989: FOR_IN
29990: IFFALSE 30006
// SetLives ( i , 300 ) ;
29992: LD_VAR 0 1
29996: PPUSH
29997: LD_INT 300
29999: PPUSH
30000: CALL_OW 234
30004: GO 29989
30006: POP
30007: POP
// end ;
30008: PPOPN 2
30010: END
// every 0 0$1 trigger s60 do var i , tmp ;
30011: LD_EXP 109
30015: IFFALSE 30084
30017: GO 30019
30019: DISABLE
30020: LD_INT 0
30022: PPUSH
30023: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30024: LD_ADDR_VAR 0 2
30028: PUSH
30029: LD_INT 22
30031: PUSH
30032: LD_OWVAR 2
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PPUSH
30041: CALL_OW 69
30045: ST_TO_ADDR
// if not tmp then
30046: LD_VAR 0 2
30050: NOT
30051: IFFALSE 30055
// exit ;
30053: GO 30084
// for i in tmp do
30055: LD_ADDR_VAR 0 1
30059: PUSH
30060: LD_VAR 0 2
30064: PUSH
30065: FOR_IN
30066: IFFALSE 30082
// SetLives ( i , 600 ) ;
30068: LD_VAR 0 1
30072: PPUSH
30073: LD_INT 600
30075: PPUSH
30076: CALL_OW 234
30080: GO 30065
30082: POP
30083: POP
// end ;
30084: PPOPN 2
30086: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30087: LD_INT 0
30089: PPUSH
// case cmd of 301 :
30090: LD_VAR 0 1
30094: PUSH
30095: LD_INT 301
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30135
30103: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30104: LD_VAR 0 6
30108: PPUSH
30109: LD_VAR 0 7
30113: PPUSH
30114: LD_VAR 0 8
30118: PPUSH
30119: LD_VAR 0 4
30123: PPUSH
30124: LD_VAR 0 5
30128: PPUSH
30129: CALL 31336 0 5
30133: GO 30256
30135: LD_INT 302
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30180
30143: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30144: LD_VAR 0 6
30148: PPUSH
30149: LD_VAR 0 7
30153: PPUSH
30154: LD_VAR 0 8
30158: PPUSH
30159: LD_VAR 0 9
30163: PPUSH
30164: LD_VAR 0 4
30168: PPUSH
30169: LD_VAR 0 5
30173: PPUSH
30174: CALL 31427 0 6
30178: GO 30256
30180: LD_INT 303
30182: DOUBLE
30183: EQUAL
30184: IFTRUE 30188
30186: GO 30225
30188: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30189: LD_VAR 0 6
30193: PPUSH
30194: LD_VAR 0 7
30198: PPUSH
30199: LD_VAR 0 8
30203: PPUSH
30204: LD_VAR 0 9
30208: PPUSH
30209: LD_VAR 0 4
30213: PPUSH
30214: LD_VAR 0 5
30218: PPUSH
30219: CALL 30261 0 6
30223: GO 30256
30225: LD_INT 304
30227: DOUBLE
30228: EQUAL
30229: IFTRUE 30233
30231: GO 30255
30233: POP
// hHackTeleport ( unit , x , y ) ; end ;
30234: LD_VAR 0 2
30238: PPUSH
30239: LD_VAR 0 4
30243: PPUSH
30244: LD_VAR 0 5
30248: PPUSH
30249: CALL 32020 0 3
30253: GO 30256
30255: POP
// end ;
30256: LD_VAR 0 12
30260: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30261: LD_INT 0
30263: PPUSH
30264: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30265: LD_VAR 0 1
30269: PUSH
30270: LD_INT 1
30272: LESS
30273: PUSH
30274: LD_VAR 0 1
30278: PUSH
30279: LD_INT 3
30281: GREATER
30282: OR
30283: PUSH
30284: LD_VAR 0 5
30288: PPUSH
30289: LD_VAR 0 6
30293: PPUSH
30294: CALL_OW 428
30298: OR
30299: IFFALSE 30303
// exit ;
30301: GO 31023
// uc_side := your_side ;
30303: LD_ADDR_OWVAR 20
30307: PUSH
30308: LD_OWVAR 2
30312: ST_TO_ADDR
// uc_nation := nation ;
30313: LD_ADDR_OWVAR 21
30317: PUSH
30318: LD_VAR 0 1
30322: ST_TO_ADDR
// bc_level = 1 ;
30323: LD_ADDR_OWVAR 43
30327: PUSH
30328: LD_INT 1
30330: ST_TO_ADDR
// case btype of 1 :
30331: LD_VAR 0 2
30335: PUSH
30336: LD_INT 1
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30355
30344: POP
// bc_type := b_depot ; 2 :
30345: LD_ADDR_OWVAR 42
30349: PUSH
30350: LD_INT 0
30352: ST_TO_ADDR
30353: GO 30967
30355: LD_INT 2
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30374
30363: POP
// bc_type := b_warehouse ; 3 :
30364: LD_ADDR_OWVAR 42
30368: PUSH
30369: LD_INT 1
30371: ST_TO_ADDR
30372: GO 30967
30374: LD_INT 3
30376: DOUBLE
30377: EQUAL
30378: IFTRUE 30382
30380: GO 30393
30382: POP
// bc_type := b_lab ; 4 .. 9 :
30383: LD_ADDR_OWVAR 42
30387: PUSH
30388: LD_INT 6
30390: ST_TO_ADDR
30391: GO 30967
30393: LD_INT 4
30395: DOUBLE
30396: GREATEREQUAL
30397: IFFALSE 30405
30399: LD_INT 9
30401: DOUBLE
30402: LESSEQUAL
30403: IFTRUE 30407
30405: GO 30459
30407: POP
// begin bc_type := b_lab_half ;
30408: LD_ADDR_OWVAR 42
30412: PUSH
30413: LD_INT 7
30415: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30416: LD_ADDR_OWVAR 44
30420: PUSH
30421: LD_INT 10
30423: PUSH
30424: LD_INT 11
30426: PUSH
30427: LD_INT 12
30429: PUSH
30430: LD_INT 15
30432: PUSH
30433: LD_INT 14
30435: PUSH
30436: LD_INT 13
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: PUSH
30447: LD_VAR 0 2
30451: PUSH
30452: LD_INT 3
30454: MINUS
30455: ARRAY
30456: ST_TO_ADDR
// end ; 10 .. 13 :
30457: GO 30967
30459: LD_INT 10
30461: DOUBLE
30462: GREATEREQUAL
30463: IFFALSE 30471
30465: LD_INT 13
30467: DOUBLE
30468: LESSEQUAL
30469: IFTRUE 30473
30471: GO 30550
30473: POP
// begin bc_type := b_lab_full ;
30474: LD_ADDR_OWVAR 42
30478: PUSH
30479: LD_INT 8
30481: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30482: LD_ADDR_OWVAR 44
30486: PUSH
30487: LD_INT 10
30489: PUSH
30490: LD_INT 12
30492: PUSH
30493: LD_INT 14
30495: PUSH
30496: LD_INT 13
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: PUSH
30505: LD_VAR 0 2
30509: PUSH
30510: LD_INT 9
30512: MINUS
30513: ARRAY
30514: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30515: LD_ADDR_OWVAR 45
30519: PUSH
30520: LD_INT 11
30522: PUSH
30523: LD_INT 15
30525: PUSH
30526: LD_INT 12
30528: PUSH
30529: LD_INT 15
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: PUSH
30538: LD_VAR 0 2
30542: PUSH
30543: LD_INT 9
30545: MINUS
30546: ARRAY
30547: ST_TO_ADDR
// end ; 14 :
30548: GO 30967
30550: LD_INT 14
30552: DOUBLE
30553: EQUAL
30554: IFTRUE 30558
30556: GO 30569
30558: POP
// bc_type := b_workshop ; 15 :
30559: LD_ADDR_OWVAR 42
30563: PUSH
30564: LD_INT 2
30566: ST_TO_ADDR
30567: GO 30967
30569: LD_INT 15
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30588
30577: POP
// bc_type := b_factory ; 16 :
30578: LD_ADDR_OWVAR 42
30582: PUSH
30583: LD_INT 3
30585: ST_TO_ADDR
30586: GO 30967
30588: LD_INT 16
30590: DOUBLE
30591: EQUAL
30592: IFTRUE 30596
30594: GO 30607
30596: POP
// bc_type := b_ext_gun ; 17 :
30597: LD_ADDR_OWVAR 42
30601: PUSH
30602: LD_INT 17
30604: ST_TO_ADDR
30605: GO 30967
30607: LD_INT 17
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30643
30615: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30616: LD_ADDR_OWVAR 42
30620: PUSH
30621: LD_INT 19
30623: PUSH
30624: LD_INT 23
30626: PUSH
30627: LD_INT 19
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: PUSH
30635: LD_VAR 0 1
30639: ARRAY
30640: ST_TO_ADDR
30641: GO 30967
30643: LD_INT 18
30645: DOUBLE
30646: EQUAL
30647: IFTRUE 30651
30649: GO 30662
30651: POP
// bc_type := b_ext_radar ; 19 :
30652: LD_ADDR_OWVAR 42
30656: PUSH
30657: LD_INT 20
30659: ST_TO_ADDR
30660: GO 30967
30662: LD_INT 19
30664: DOUBLE
30665: EQUAL
30666: IFTRUE 30670
30668: GO 30681
30670: POP
// bc_type := b_ext_radio ; 20 :
30671: LD_ADDR_OWVAR 42
30675: PUSH
30676: LD_INT 22
30678: ST_TO_ADDR
30679: GO 30967
30681: LD_INT 20
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30700
30689: POP
// bc_type := b_ext_siberium ; 21 :
30690: LD_ADDR_OWVAR 42
30694: PUSH
30695: LD_INT 21
30697: ST_TO_ADDR
30698: GO 30967
30700: LD_INT 21
30702: DOUBLE
30703: EQUAL
30704: IFTRUE 30708
30706: GO 30719
30708: POP
// bc_type := b_ext_computer ; 22 :
30709: LD_ADDR_OWVAR 42
30713: PUSH
30714: LD_INT 24
30716: ST_TO_ADDR
30717: GO 30967
30719: LD_INT 22
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30738
30727: POP
// bc_type := b_ext_track ; 23 :
30728: LD_ADDR_OWVAR 42
30732: PUSH
30733: LD_INT 16
30735: ST_TO_ADDR
30736: GO 30967
30738: LD_INT 23
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30757
30746: POP
// bc_type := b_ext_laser ; 24 :
30747: LD_ADDR_OWVAR 42
30751: PUSH
30752: LD_INT 25
30754: ST_TO_ADDR
30755: GO 30967
30757: LD_INT 24
30759: DOUBLE
30760: EQUAL
30761: IFTRUE 30765
30763: GO 30776
30765: POP
// bc_type := b_control_tower ; 25 :
30766: LD_ADDR_OWVAR 42
30770: PUSH
30771: LD_INT 36
30773: ST_TO_ADDR
30774: GO 30967
30776: LD_INT 25
30778: DOUBLE
30779: EQUAL
30780: IFTRUE 30784
30782: GO 30795
30784: POP
// bc_type := b_breastwork ; 26 :
30785: LD_ADDR_OWVAR 42
30789: PUSH
30790: LD_INT 31
30792: ST_TO_ADDR
30793: GO 30967
30795: LD_INT 26
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30814
30803: POP
// bc_type := b_bunker ; 27 :
30804: LD_ADDR_OWVAR 42
30808: PUSH
30809: LD_INT 32
30811: ST_TO_ADDR
30812: GO 30967
30814: LD_INT 27
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30833
30822: POP
// bc_type := b_turret ; 28 :
30823: LD_ADDR_OWVAR 42
30827: PUSH
30828: LD_INT 33
30830: ST_TO_ADDR
30831: GO 30967
30833: LD_INT 28
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30841
30839: GO 30852
30841: POP
// bc_type := b_armoury ; 29 :
30842: LD_ADDR_OWVAR 42
30846: PUSH
30847: LD_INT 4
30849: ST_TO_ADDR
30850: GO 30967
30852: LD_INT 29
30854: DOUBLE
30855: EQUAL
30856: IFTRUE 30860
30858: GO 30871
30860: POP
// bc_type := b_barracks ; 30 :
30861: LD_ADDR_OWVAR 42
30865: PUSH
30866: LD_INT 5
30868: ST_TO_ADDR
30869: GO 30967
30871: LD_INT 30
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30879
30877: GO 30890
30879: POP
// bc_type := b_solar_power ; 31 :
30880: LD_ADDR_OWVAR 42
30884: PUSH
30885: LD_INT 27
30887: ST_TO_ADDR
30888: GO 30967
30890: LD_INT 31
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30909
30898: POP
// bc_type := b_oil_power ; 32 :
30899: LD_ADDR_OWVAR 42
30903: PUSH
30904: LD_INT 26
30906: ST_TO_ADDR
30907: GO 30967
30909: LD_INT 32
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30928
30917: POP
// bc_type := b_siberite_power ; 33 :
30918: LD_ADDR_OWVAR 42
30922: PUSH
30923: LD_INT 28
30925: ST_TO_ADDR
30926: GO 30967
30928: LD_INT 33
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30936
30934: GO 30947
30936: POP
// bc_type := b_oil_mine ; 34 :
30937: LD_ADDR_OWVAR 42
30941: PUSH
30942: LD_INT 29
30944: ST_TO_ADDR
30945: GO 30967
30947: LD_INT 34
30949: DOUBLE
30950: EQUAL
30951: IFTRUE 30955
30953: GO 30966
30955: POP
// bc_type := b_siberite_mine ; end ;
30956: LD_ADDR_OWVAR 42
30960: PUSH
30961: LD_INT 30
30963: ST_TO_ADDR
30964: GO 30967
30966: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30967: LD_ADDR_VAR 0 8
30971: PUSH
30972: LD_VAR 0 5
30976: PPUSH
30977: LD_VAR 0 6
30981: PPUSH
30982: LD_VAR 0 3
30986: PPUSH
30987: CALL_OW 47
30991: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30992: LD_OWVAR 42
30996: PUSH
30997: LD_INT 32
30999: PUSH
31000: LD_INT 33
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: IN
31007: IFFALSE 31023
// PlaceWeaponTurret ( b , weapon ) ;
31009: LD_VAR 0 8
31013: PPUSH
31014: LD_VAR 0 4
31018: PPUSH
31019: CALL_OW 431
// end ;
31023: LD_VAR 0 7
31027: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31028: LD_INT 0
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31034: LD_ADDR_VAR 0 4
31038: PUSH
31039: LD_INT 22
31041: PUSH
31042: LD_OWVAR 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 30
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 30
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PPUSH
31083: CALL_OW 69
31087: ST_TO_ADDR
// if not tmp then
31088: LD_VAR 0 4
31092: NOT
31093: IFFALSE 31097
// exit ;
31095: GO 31156
// for i in tmp do
31097: LD_ADDR_VAR 0 2
31101: PUSH
31102: LD_VAR 0 4
31106: PUSH
31107: FOR_IN
31108: IFFALSE 31154
// for j = 1 to 3 do
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: DOUBLE
31116: LD_INT 1
31118: DEC
31119: ST_TO_ADDR
31120: LD_INT 3
31122: PUSH
31123: FOR_TO
31124: IFFALSE 31150
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31126: LD_VAR 0 2
31130: PPUSH
31131: CALL_OW 274
31135: PPUSH
31136: LD_VAR 0 3
31140: PPUSH
31141: LD_INT 99999
31143: PPUSH
31144: CALL_OW 277
31148: GO 31123
31150: POP
31151: POP
31152: GO 31107
31154: POP
31155: POP
// end ;
31156: LD_VAR 0 1
31160: RET
// export function hHackSetLevel10 ; var i , j ; begin
31161: LD_INT 0
31163: PPUSH
31164: PPUSH
31165: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31166: LD_ADDR_VAR 0 2
31170: PUSH
31171: LD_INT 21
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PPUSH
31181: CALL_OW 69
31185: PUSH
31186: FOR_IN
31187: IFFALSE 31239
// if IsSelected ( i ) then
31189: LD_VAR 0 2
31193: PPUSH
31194: CALL_OW 306
31198: IFFALSE 31237
// begin for j := 1 to 4 do
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: DOUBLE
31206: LD_INT 1
31208: DEC
31209: ST_TO_ADDR
31210: LD_INT 4
31212: PUSH
31213: FOR_TO
31214: IFFALSE 31235
// SetSkill ( i , j , 10 ) ;
31216: LD_VAR 0 2
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: LD_INT 10
31228: PPUSH
31229: CALL_OW 237
31233: GO 31213
31235: POP
31236: POP
// end ;
31237: GO 31186
31239: POP
31240: POP
// end ;
31241: LD_VAR 0 1
31245: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 21
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 69
31286: PUSH
31287: FOR_IN
31288: IFFALSE 31329
// begin for j := 1 to 4 do
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: DOUBLE
31296: LD_INT 1
31298: DEC
31299: ST_TO_ADDR
31300: LD_INT 4
31302: PUSH
31303: FOR_TO
31304: IFFALSE 31325
// SetSkill ( i , j , 10 ) ;
31306: LD_VAR 0 2
31310: PPUSH
31311: LD_VAR 0 3
31315: PPUSH
31316: LD_INT 10
31318: PPUSH
31319: CALL_OW 237
31323: GO 31303
31325: POP
31326: POP
// end ;
31327: GO 31287
31329: POP
31330: POP
// end ;
31331: LD_VAR 0 1
31335: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31336: LD_INT 0
31338: PPUSH
// uc_side := your_side ;
31339: LD_ADDR_OWVAR 20
31343: PUSH
31344: LD_OWVAR 2
31348: ST_TO_ADDR
// uc_nation := nation ;
31349: LD_ADDR_OWVAR 21
31353: PUSH
31354: LD_VAR 0 1
31358: ST_TO_ADDR
// InitHc ;
31359: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31363: LD_INT 0
31365: PPUSH
31366: LD_VAR 0 2
31370: PPUSH
31371: LD_VAR 0 3
31375: PPUSH
31376: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31380: LD_VAR 0 4
31384: PPUSH
31385: LD_VAR 0 5
31389: PPUSH
31390: CALL_OW 428
31394: PUSH
31395: LD_INT 0
31397: EQUAL
31398: IFFALSE 31422
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31400: CALL_OW 44
31404: PPUSH
31405: LD_VAR 0 4
31409: PPUSH
31410: LD_VAR 0 5
31414: PPUSH
31415: LD_INT 1
31417: PPUSH
31418: CALL_OW 48
// end ;
31422: LD_VAR 0 6
31426: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31427: LD_INT 0
31429: PPUSH
31430: PPUSH
// uc_side := your_side ;
31431: LD_ADDR_OWVAR 20
31435: PUSH
31436: LD_OWVAR 2
31440: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31441: LD_VAR 0 1
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 4
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: IN
31468: IFFALSE 31480
// uc_nation := nation_american else
31470: LD_ADDR_OWVAR 21
31474: PUSH
31475: LD_INT 1
31477: ST_TO_ADDR
31478: GO 31523
// if chassis in [ 11 , 12 , 13 , 14 ] then
31480: LD_VAR 0 1
31484: PUSH
31485: LD_INT 11
31487: PUSH
31488: LD_INT 12
31490: PUSH
31491: LD_INT 13
31493: PUSH
31494: LD_INT 14
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: IN
31503: IFFALSE 31515
// uc_nation := nation_arabian else
31505: LD_ADDR_OWVAR 21
31509: PUSH
31510: LD_INT 2
31512: ST_TO_ADDR
31513: GO 31523
// uc_nation := nation_russian ;
31515: LD_ADDR_OWVAR 21
31519: PUSH
31520: LD_INT 3
31522: ST_TO_ADDR
// vc_chassis := chassis ;
31523: LD_ADDR_OWVAR 37
31527: PUSH
31528: LD_VAR 0 1
31532: ST_TO_ADDR
// vc_engine := engine ;
31533: LD_ADDR_OWVAR 39
31537: PUSH
31538: LD_VAR 0 2
31542: ST_TO_ADDR
// vc_control := control ;
31543: LD_ADDR_OWVAR 38
31547: PUSH
31548: LD_VAR 0 3
31552: ST_TO_ADDR
// vc_weapon := weapon ;
31553: LD_ADDR_OWVAR 40
31557: PUSH
31558: LD_VAR 0 4
31562: ST_TO_ADDR
// un := CreateVehicle ;
31563: LD_ADDR_VAR 0 8
31567: PUSH
31568: CALL_OW 45
31572: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31573: LD_VAR 0 8
31577: PPUSH
31578: LD_INT 0
31580: PPUSH
31581: LD_INT 5
31583: PPUSH
31584: CALL_OW 12
31588: PPUSH
31589: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31593: LD_VAR 0 8
31597: PPUSH
31598: LD_VAR 0 5
31602: PPUSH
31603: LD_VAR 0 6
31607: PPUSH
31608: LD_INT 1
31610: PPUSH
31611: CALL_OW 48
// end ;
31615: LD_VAR 0 7
31619: RET
// export hInvincible ; every 1 do
31620: GO 31622
31622: DISABLE
// hInvincible := [ ] ;
31623: LD_ADDR_EXP 110
31627: PUSH
31628: EMPTY
31629: ST_TO_ADDR
31630: END
// every 10 do var i ;
31631: GO 31633
31633: DISABLE
31634: LD_INT 0
31636: PPUSH
// begin enable ;
31637: ENABLE
// if not hInvincible then
31638: LD_EXP 110
31642: NOT
31643: IFFALSE 31647
// exit ;
31645: GO 31691
// for i in hInvincible do
31647: LD_ADDR_VAR 0 1
31651: PUSH
31652: LD_EXP 110
31656: PUSH
31657: FOR_IN
31658: IFFALSE 31689
// if GetLives ( i ) < 1000 then
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 256
31669: PUSH
31670: LD_INT 1000
31672: LESS
31673: IFFALSE 31687
// SetLives ( i , 1000 ) ;
31675: LD_VAR 0 1
31679: PPUSH
31680: LD_INT 1000
31682: PPUSH
31683: CALL_OW 234
31687: GO 31657
31689: POP
31690: POP
// end ;
31691: PPOPN 1
31693: END
// export function hHackInvincible ; var i ; begin
31694: LD_INT 0
31696: PPUSH
31697: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31698: LD_ADDR_VAR 0 2
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 21
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 21
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: PPUSH
31731: CALL_OW 69
31735: PUSH
31736: FOR_IN
31737: IFFALSE 31798
// if IsSelected ( i ) then
31739: LD_VAR 0 2
31743: PPUSH
31744: CALL_OW 306
31748: IFFALSE 31796
// begin if i in hInvincible then
31750: LD_VAR 0 2
31754: PUSH
31755: LD_EXP 110
31759: IN
31760: IFFALSE 31780
// hInvincible := hInvincible diff i else
31762: LD_ADDR_EXP 110
31766: PUSH
31767: LD_EXP 110
31771: PUSH
31772: LD_VAR 0 2
31776: DIFF
31777: ST_TO_ADDR
31778: GO 31796
// hInvincible := hInvincible union i ;
31780: LD_ADDR_EXP 110
31784: PUSH
31785: LD_EXP 110
31789: PUSH
31790: LD_VAR 0 2
31794: UNION
31795: ST_TO_ADDR
// end ;
31796: GO 31736
31798: POP
31799: POP
// end ;
31800: LD_VAR 0 1
31804: RET
// export function hHackInvisible ; var i , j ; begin
31805: LD_INT 0
31807: PPUSH
31808: PPUSH
31809: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31810: LD_ADDR_VAR 0 2
31814: PUSH
31815: LD_INT 21
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PPUSH
31825: CALL_OW 69
31829: PUSH
31830: FOR_IN
31831: IFFALSE 31855
// if IsSelected ( i ) then
31833: LD_VAR 0 2
31837: PPUSH
31838: CALL_OW 306
31842: IFFALSE 31853
// ComForceInvisible ( i ) ;
31844: LD_VAR 0 2
31848: PPUSH
31849: CALL_OW 496
31853: GO 31830
31855: POP
31856: POP
// end ;
31857: LD_VAR 0 1
31861: RET
// export function hHackChangeYourSide ; begin
31862: LD_INT 0
31864: PPUSH
// if your_side = 8 then
31865: LD_OWVAR 2
31869: PUSH
31870: LD_INT 8
31872: EQUAL
31873: IFFALSE 31885
// your_side := 0 else
31875: LD_ADDR_OWVAR 2
31879: PUSH
31880: LD_INT 0
31882: ST_TO_ADDR
31883: GO 31899
// your_side := your_side + 1 ;
31885: LD_ADDR_OWVAR 2
31889: PUSH
31890: LD_OWVAR 2
31894: PUSH
31895: LD_INT 1
31897: PLUS
31898: ST_TO_ADDR
// end ;
31899: LD_VAR 0 1
31903: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31904: LD_INT 0
31906: PPUSH
31907: PPUSH
31908: PPUSH
// for i in all_units do
31909: LD_ADDR_VAR 0 2
31913: PUSH
31914: LD_OWVAR 3
31918: PUSH
31919: FOR_IN
31920: IFFALSE 31998
// if IsSelected ( i ) then
31922: LD_VAR 0 2
31926: PPUSH
31927: CALL_OW 306
31931: IFFALSE 31996
// begin j := GetSide ( i ) ;
31933: LD_ADDR_VAR 0 3
31937: PUSH
31938: LD_VAR 0 2
31942: PPUSH
31943: CALL_OW 255
31947: ST_TO_ADDR
// if j = 8 then
31948: LD_VAR 0 3
31952: PUSH
31953: LD_INT 8
31955: EQUAL
31956: IFFALSE 31968
// j := 0 else
31958: LD_ADDR_VAR 0 3
31962: PUSH
31963: LD_INT 0
31965: ST_TO_ADDR
31966: GO 31982
// j := j + 1 ;
31968: LD_ADDR_VAR 0 3
31972: PUSH
31973: LD_VAR 0 3
31977: PUSH
31978: LD_INT 1
31980: PLUS
31981: ST_TO_ADDR
// SetSide ( i , j ) ;
31982: LD_VAR 0 2
31986: PPUSH
31987: LD_VAR 0 3
31991: PPUSH
31992: CALL_OW 235
// end ;
31996: GO 31919
31998: POP
31999: POP
// end ;
32000: LD_VAR 0 1
32004: RET
// export function hHackFog ; begin
32005: LD_INT 0
32007: PPUSH
// FogOff ( true ) ;
32008: LD_INT 1
32010: PPUSH
32011: CALL_OW 344
// end ;
32015: LD_VAR 0 1
32019: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32020: LD_INT 0
32022: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32023: LD_VAR 0 1
32027: PPUSH
32028: LD_VAR 0 2
32032: PPUSH
32033: LD_VAR 0 3
32037: PPUSH
32038: LD_INT 1
32040: PPUSH
32041: LD_INT 1
32043: PPUSH
32044: CALL_OW 483
// CenterOnXY ( x , y ) ;
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: CALL_OW 84
// end ;
32062: LD_VAR 0 4
32066: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32067: LD_INT 0
32069: PPUSH
32070: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32071: LD_VAR 0 1
32075: NOT
32076: PUSH
32077: LD_VAR 0 2
32081: PPUSH
32082: LD_VAR 0 3
32086: PPUSH
32087: CALL_OW 488
32091: NOT
32092: OR
32093: PUSH
32094: LD_VAR 0 1
32098: PPUSH
32099: CALL_OW 266
32103: PUSH
32104: LD_INT 3
32106: NONEQUAL
32107: PUSH
32108: LD_VAR 0 1
32112: PPUSH
32113: CALL_OW 247
32117: PUSH
32118: LD_INT 1
32120: EQUAL
32121: NOT
32122: AND
32123: OR
32124: IFFALSE 32128
// exit ;
32126: GO 32277
// if GetType ( factory ) = unit_human then
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL_OW 247
32137: PUSH
32138: LD_INT 1
32140: EQUAL
32141: IFFALSE 32158
// factory := IsInUnit ( factory ) ;
32143: LD_ADDR_VAR 0 1
32147: PUSH
32148: LD_VAR 0 1
32152: PPUSH
32153: CALL_OW 310
32157: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32158: LD_VAR 0 1
32162: PPUSH
32163: CALL_OW 266
32167: PUSH
32168: LD_INT 3
32170: NONEQUAL
32171: IFFALSE 32175
// exit ;
32173: GO 32277
// if HexInfo ( x , y ) = factory then
32175: LD_VAR 0 2
32179: PPUSH
32180: LD_VAR 0 3
32184: PPUSH
32185: CALL_OW 428
32189: PUSH
32190: LD_VAR 0 1
32194: EQUAL
32195: IFFALSE 32222
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32197: LD_ADDR_EXP 111
32201: PUSH
32202: LD_EXP 111
32206: PPUSH
32207: LD_VAR 0 1
32211: PPUSH
32212: LD_INT 0
32214: PPUSH
32215: CALL_OW 1
32219: ST_TO_ADDR
32220: GO 32273
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32222: LD_ADDR_EXP 111
32226: PUSH
32227: LD_EXP 111
32231: PPUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: LD_VAR 0 1
32241: PPUSH
32242: CALL_OW 255
32246: PUSH
32247: LD_VAR 0 1
32251: PUSH
32252: LD_VAR 0 2
32256: PUSH
32257: LD_VAR 0 3
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: PPUSH
32268: CALL_OW 1
32272: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32273: CALL 32282 0 0
// end ;
32277: LD_VAR 0 4
32281: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32282: LD_INT 0
32284: PPUSH
32285: PPUSH
32286: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32287: LD_STRING resetFactoryWaypoint();
32289: PPUSH
32290: CALL_OW 559
// if factoryWaypoints then
32294: LD_EXP 111
32298: IFFALSE 32424
// begin list := PrepareArray ( factoryWaypoints ) ;
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: LD_EXP 111
32309: PPUSH
32310: CALL 79056 0 1
32314: ST_TO_ADDR
// for i := 1 to list do
32315: LD_ADDR_VAR 0 2
32319: PUSH
32320: DOUBLE
32321: LD_INT 1
32323: DEC
32324: ST_TO_ADDR
32325: LD_VAR 0 3
32329: PUSH
32330: FOR_TO
32331: IFFALSE 32422
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32333: LD_STRING setFactoryWaypointXY(
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_VAR 0 2
32345: ARRAY
32346: PUSH
32347: LD_INT 1
32349: ARRAY
32350: STR
32351: PUSH
32352: LD_STRING ,
32354: STR
32355: PUSH
32356: LD_VAR 0 3
32360: PUSH
32361: LD_VAR 0 2
32365: ARRAY
32366: PUSH
32367: LD_INT 2
32369: ARRAY
32370: STR
32371: PUSH
32372: LD_STRING ,
32374: STR
32375: PUSH
32376: LD_VAR 0 3
32380: PUSH
32381: LD_VAR 0 2
32385: ARRAY
32386: PUSH
32387: LD_INT 3
32389: ARRAY
32390: STR
32391: PUSH
32392: LD_STRING ,
32394: STR
32395: PUSH
32396: LD_VAR 0 3
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: PUSH
32407: LD_INT 4
32409: ARRAY
32410: STR
32411: PUSH
32412: LD_STRING )
32414: STR
32415: PPUSH
32416: CALL_OW 559
32420: GO 32330
32422: POP
32423: POP
// end ; end ;
32424: LD_VAR 0 1
32428: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32429: LD_INT 0
32431: PPUSH
// if HexInfo ( x , y ) = warehouse then
32432: LD_VAR 0 2
32436: PPUSH
32437: LD_VAR 0 3
32441: PPUSH
32442: CALL_OW 428
32446: PUSH
32447: LD_VAR 0 1
32451: EQUAL
32452: IFFALSE 32479
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32454: LD_ADDR_EXP 112
32458: PUSH
32459: LD_EXP 112
32463: PPUSH
32464: LD_VAR 0 1
32468: PPUSH
32469: LD_INT 0
32471: PPUSH
32472: CALL_OW 1
32476: ST_TO_ADDR
32477: GO 32530
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32479: LD_ADDR_EXP 112
32483: PUSH
32484: LD_EXP 112
32488: PPUSH
32489: LD_VAR 0 1
32493: PPUSH
32494: LD_VAR 0 1
32498: PPUSH
32499: CALL_OW 255
32503: PUSH
32504: LD_VAR 0 1
32508: PUSH
32509: LD_VAR 0 2
32513: PUSH
32514: LD_VAR 0 3
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: PPUSH
32525: CALL_OW 1
32529: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32530: CALL 32539 0 0
// end ;
32534: LD_VAR 0 4
32538: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32544: LD_STRING resetWarehouseGatheringPoints();
32546: PPUSH
32547: CALL_OW 559
// if warehouseGatheringPoints then
32551: LD_EXP 112
32555: IFFALSE 32681
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_EXP 112
32566: PPUSH
32567: CALL 79056 0 1
32571: ST_TO_ADDR
// for i := 1 to list do
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: DOUBLE
32578: LD_INT 1
32580: DEC
32581: ST_TO_ADDR
32582: LD_VAR 0 3
32586: PUSH
32587: FOR_TO
32588: IFFALSE 32679
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32590: LD_STRING setWarehouseGatheringPointXY(
32592: PUSH
32593: LD_VAR 0 3
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: STR
32608: PUSH
32609: LD_STRING ,
32611: STR
32612: PUSH
32613: LD_VAR 0 3
32617: PUSH
32618: LD_VAR 0 2
32622: ARRAY
32623: PUSH
32624: LD_INT 2
32626: ARRAY
32627: STR
32628: PUSH
32629: LD_STRING ,
32631: STR
32632: PUSH
32633: LD_VAR 0 3
32637: PUSH
32638: LD_VAR 0 2
32642: ARRAY
32643: PUSH
32644: LD_INT 3
32646: ARRAY
32647: STR
32648: PUSH
32649: LD_STRING ,
32651: STR
32652: PUSH
32653: LD_VAR 0 3
32657: PUSH
32658: LD_VAR 0 2
32662: ARRAY
32663: PUSH
32664: LD_INT 4
32666: ARRAY
32667: STR
32668: PUSH
32669: LD_STRING )
32671: STR
32672: PPUSH
32673: CALL_OW 559
32677: GO 32587
32679: POP
32680: POP
// end ; end ;
32681: LD_VAR 0 1
32685: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32686: LD_EXP 112
32690: IFFALSE 33375
32692: GO 32694
32694: DISABLE
32695: LD_INT 0
32697: PPUSH
32698: PPUSH
32699: PPUSH
32700: PPUSH
32701: PPUSH
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
// begin enable ;
32706: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32707: LD_ADDR_VAR 0 3
32711: PUSH
32712: LD_EXP 112
32716: PPUSH
32717: CALL 79056 0 1
32721: ST_TO_ADDR
// if not list then
32722: LD_VAR 0 3
32726: NOT
32727: IFFALSE 32731
// exit ;
32729: GO 33375
// for i := 1 to list do
32731: LD_ADDR_VAR 0 1
32735: PUSH
32736: DOUBLE
32737: LD_INT 1
32739: DEC
32740: ST_TO_ADDR
32741: LD_VAR 0 3
32745: PUSH
32746: FOR_TO
32747: IFFALSE 33373
// begin depot := list [ i ] [ 2 ] ;
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: LD_VAR 0 3
32758: PUSH
32759: LD_VAR 0 1
32763: ARRAY
32764: PUSH
32765: LD_INT 2
32767: ARRAY
32768: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32769: LD_ADDR_VAR 0 5
32773: PUSH
32774: LD_VAR 0 3
32778: PUSH
32779: LD_VAR 0 1
32783: ARRAY
32784: PUSH
32785: LD_INT 1
32787: ARRAY
32788: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32789: LD_VAR 0 8
32793: PPUSH
32794: CALL_OW 301
32798: PUSH
32799: LD_VAR 0 5
32803: PUSH
32804: LD_VAR 0 8
32808: PPUSH
32809: CALL_OW 255
32813: NONEQUAL
32814: OR
32815: IFFALSE 32844
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32817: LD_ADDR_EXP 112
32821: PUSH
32822: LD_EXP 112
32826: PPUSH
32827: LD_VAR 0 8
32831: PPUSH
32832: LD_INT 0
32834: PPUSH
32835: CALL_OW 1
32839: ST_TO_ADDR
// exit ;
32840: POP
32841: POP
32842: GO 33375
// end ; x := list [ i ] [ 3 ] ;
32844: LD_ADDR_VAR 0 6
32848: PUSH
32849: LD_VAR 0 3
32853: PUSH
32854: LD_VAR 0 1
32858: ARRAY
32859: PUSH
32860: LD_INT 3
32862: ARRAY
32863: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32864: LD_ADDR_VAR 0 7
32868: PUSH
32869: LD_VAR 0 3
32873: PUSH
32874: LD_VAR 0 1
32878: ARRAY
32879: PUSH
32880: LD_INT 4
32882: ARRAY
32883: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32884: LD_ADDR_VAR 0 9
32888: PUSH
32889: LD_VAR 0 6
32893: PPUSH
32894: LD_VAR 0 7
32898: PPUSH
32899: LD_INT 16
32901: PPUSH
32902: CALL 77644 0 3
32906: ST_TO_ADDR
// if not cratesNearbyPoint then
32907: LD_VAR 0 9
32911: NOT
32912: IFFALSE 32918
// exit ;
32914: POP
32915: POP
32916: GO 33375
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32918: LD_ADDR_VAR 0 4
32922: PUSH
32923: LD_INT 22
32925: PUSH
32926: LD_VAR 0 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 3
32937: PUSH
32938: LD_INT 60
32940: PUSH
32941: EMPTY
32942: LIST
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 91
32950: PUSH
32951: LD_VAR 0 8
32955: PUSH
32956: LD_INT 6
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 25
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 25
32979: PUSH
32980: LD_INT 16
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: PPUSH
32998: CALL_OW 69
33002: PUSH
33003: LD_VAR 0 8
33007: PPUSH
33008: CALL_OW 313
33012: PPUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 60
33018: PUSH
33019: EMPTY
33020: LIST
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 25
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 25
33041: PUSH
33042: LD_INT 16
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: LIST
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 72
33062: UNION
33063: ST_TO_ADDR
// if tmp then
33064: LD_VAR 0 4
33068: IFFALSE 33148
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33070: LD_ADDR_VAR 0 4
33074: PUSH
33075: LD_VAR 0 4
33079: PPUSH
33080: LD_INT 3
33082: PPUSH
33083: CALL 75613 0 2
33087: ST_TO_ADDR
// for j in tmp do
33088: LD_ADDR_VAR 0 2
33092: PUSH
33093: LD_VAR 0 4
33097: PUSH
33098: FOR_IN
33099: IFFALSE 33142
// begin if IsInUnit ( j ) then
33101: LD_VAR 0 2
33105: PPUSH
33106: CALL_OW 310
33110: IFFALSE 33121
// ComExit ( j ) ;
33112: LD_VAR 0 2
33116: PPUSH
33117: CALL 75696 0 1
// AddComCollect ( j , x , y ) ;
33121: LD_VAR 0 2
33125: PPUSH
33126: LD_VAR 0 6
33130: PPUSH
33131: LD_VAR 0 7
33135: PPUSH
33136: CALL_OW 177
// end ;
33140: GO 33098
33142: POP
33143: POP
// exit ;
33144: POP
33145: POP
33146: GO 33375
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33148: LD_ADDR_VAR 0 4
33152: PUSH
33153: LD_INT 22
33155: PUSH
33156: LD_VAR 0 5
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 91
33167: PUSH
33168: LD_VAR 0 8
33172: PUSH
33173: LD_INT 8
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: LD_INT 34
33186: PUSH
33187: LD_INT 12
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 34
33196: PUSH
33197: LD_INT 51
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 34
33206: PUSH
33207: LD_INT 32
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 34
33216: PUSH
33217: LD_INT 89
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL_OW 69
33240: ST_TO_ADDR
// if tmp then
33241: LD_VAR 0 4
33245: IFFALSE 33371
// begin for j in tmp do
33247: LD_ADDR_VAR 0 2
33251: PUSH
33252: LD_VAR 0 4
33256: PUSH
33257: FOR_IN
33258: IFFALSE 33369
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33260: LD_VAR 0 2
33264: PPUSH
33265: CALL_OW 262
33269: PUSH
33270: LD_INT 3
33272: EQUAL
33273: PUSH
33274: LD_VAR 0 2
33278: PPUSH
33279: CALL_OW 261
33283: PUSH
33284: LD_INT 20
33286: GREATER
33287: OR
33288: PUSH
33289: LD_VAR 0 2
33293: PPUSH
33294: CALL_OW 314
33298: NOT
33299: AND
33300: PUSH
33301: LD_VAR 0 2
33305: PPUSH
33306: CALL_OW 263
33310: PUSH
33311: LD_INT 1
33313: NONEQUAL
33314: PUSH
33315: LD_VAR 0 2
33319: PPUSH
33320: CALL_OW 311
33324: OR
33325: AND
33326: IFFALSE 33367
// begin ComCollect ( j , x , y ) ;
33328: LD_VAR 0 2
33332: PPUSH
33333: LD_VAR 0 6
33337: PPUSH
33338: LD_VAR 0 7
33342: PPUSH
33343: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33347: LD_VAR 0 2
33351: PPUSH
33352: LD_VAR 0 8
33356: PPUSH
33357: CALL_OW 172
// exit ;
33361: POP
33362: POP
33363: POP
33364: POP
33365: GO 33375
// end ;
33367: GO 33257
33369: POP
33370: POP
// end ; end ;
33371: GO 32746
33373: POP
33374: POP
// end ; end_of_file
33375: PPOPN 9
33377: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33378: LD_VAR 0 1
33382: PUSH
33383: LD_INT 200
33385: DOUBLE
33386: GREATEREQUAL
33387: IFFALSE 33395
33389: LD_INT 299
33391: DOUBLE
33392: LESSEQUAL
33393: IFTRUE 33397
33395: GO 33429
33397: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33398: LD_VAR 0 1
33402: PPUSH
33403: LD_VAR 0 2
33407: PPUSH
33408: LD_VAR 0 3
33412: PPUSH
33413: LD_VAR 0 4
33417: PPUSH
33418: LD_VAR 0 5
33422: PPUSH
33423: CALL 33917 0 5
33427: GO 33506
33429: LD_INT 300
33431: DOUBLE
33432: GREATEREQUAL
33433: IFFALSE 33441
33435: LD_INT 399
33437: DOUBLE
33438: LESSEQUAL
33439: IFTRUE 33443
33441: GO 33505
33443: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33444: LD_VAR 0 1
33448: PPUSH
33449: LD_VAR 0 2
33453: PPUSH
33454: LD_VAR 0 3
33458: PPUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: LD_VAR 0 5
33468: PPUSH
33469: LD_VAR 0 6
33473: PPUSH
33474: LD_VAR 0 7
33478: PPUSH
33479: LD_VAR 0 8
33483: PPUSH
33484: LD_VAR 0 9
33488: PPUSH
33489: LD_VAR 0 10
33493: PPUSH
33494: LD_VAR 0 11
33498: PPUSH
33499: CALL 30087 0 11
33503: GO 33506
33505: POP
// end ;
33506: PPOPN 11
33508: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33509: LD_VAR 0 1
33513: PPUSH
33514: LD_VAR 0 2
33518: PPUSH
33519: LD_VAR 0 3
33523: PPUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: LD_VAR 0 5
33533: PPUSH
33534: CALL 33653 0 5
// end ; end_of_file
33538: PPOPN 5
33540: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33541: LD_INT 0
33543: PPUSH
33544: PPUSH
33545: PPUSH
33546: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33547: LD_VAR 0 1
33551: PPUSH
33552: CALL_OW 264
33556: PUSH
33557: LD_INT 91
33559: EQUAL
33560: IFFALSE 33632
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33562: LD_INT 68
33564: PPUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL_OW 255
33574: PPUSH
33575: CALL_OW 321
33579: PUSH
33580: LD_INT 2
33582: EQUAL
33583: IFFALSE 33595
// eff := 70 else
33585: LD_ADDR_VAR 0 4
33589: PUSH
33590: LD_INT 70
33592: ST_TO_ADDR
33593: GO 33603
// eff := 30 ;
33595: LD_ADDR_VAR 0 4
33599: PUSH
33600: LD_INT 30
33602: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33603: LD_VAR 0 1
33607: PPUSH
33608: CALL_OW 250
33612: PPUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: CALL_OW 251
33622: PPUSH
33623: LD_VAR 0 4
33627: PPUSH
33628: CALL_OW 495
// end ; end ;
33632: LD_VAR 0 2
33636: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33637: LD_INT 0
33639: PPUSH
// end ;
33640: LD_VAR 0 4
33644: RET
// export function SOS_Command ( cmd ) ; begin
33645: LD_INT 0
33647: PPUSH
// end ;
33648: LD_VAR 0 2
33652: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33653: LD_INT 0
33655: PPUSH
// end ;
33656: LD_VAR 0 6
33660: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33661: LD_INT 0
33663: PPUSH
33664: PPUSH
// if not vehicle or not factory then
33665: LD_VAR 0 1
33669: NOT
33670: PUSH
33671: LD_VAR 0 2
33675: NOT
33676: OR
33677: IFFALSE 33681
// exit ;
33679: GO 33912
// if factoryWaypoints >= factory then
33681: LD_EXP 111
33685: PUSH
33686: LD_VAR 0 2
33690: GREATEREQUAL
33691: IFFALSE 33912
// if factoryWaypoints [ factory ] then
33693: LD_EXP 111
33697: PUSH
33698: LD_VAR 0 2
33702: ARRAY
33703: IFFALSE 33912
// begin if GetControl ( vehicle ) = control_manual then
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 263
33714: PUSH
33715: LD_INT 1
33717: EQUAL
33718: IFFALSE 33799
// begin driver := IsDrivenBy ( vehicle ) ;
33720: LD_ADDR_VAR 0 4
33724: PUSH
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 311
33734: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33735: LD_VAR 0 4
33739: PPUSH
33740: LD_EXP 111
33744: PUSH
33745: LD_VAR 0 2
33749: ARRAY
33750: PUSH
33751: LD_INT 3
33753: ARRAY
33754: PPUSH
33755: LD_EXP 111
33759: PUSH
33760: LD_VAR 0 2
33764: ARRAY
33765: PUSH
33766: LD_INT 4
33768: ARRAY
33769: PPUSH
33770: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33774: LD_VAR 0 4
33778: PPUSH
33779: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33783: LD_VAR 0 4
33787: PPUSH
33788: LD_VAR 0 2
33792: PPUSH
33793: CALL_OW 180
// end else
33797: GO 33912
// if GetControl ( vehicle ) = control_remote then
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 263
33808: PUSH
33809: LD_INT 2
33811: EQUAL
33812: IFFALSE 33873
// begin wait ( 0 0$2 ) ;
33814: LD_INT 70
33816: PPUSH
33817: CALL_OW 67
// if Connect ( vehicle ) then
33821: LD_VAR 0 1
33825: PPUSH
33826: CALL 45936 0 1
33830: IFFALSE 33871
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33832: LD_VAR 0 1
33836: PPUSH
33837: LD_EXP 111
33841: PUSH
33842: LD_VAR 0 2
33846: ARRAY
33847: PUSH
33848: LD_INT 3
33850: ARRAY
33851: PPUSH
33852: LD_EXP 111
33856: PUSH
33857: LD_VAR 0 2
33861: ARRAY
33862: PUSH
33863: LD_INT 4
33865: ARRAY
33866: PPUSH
33867: CALL_OW 171
// end else
33871: GO 33912
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33873: LD_VAR 0 1
33877: PPUSH
33878: LD_EXP 111
33882: PUSH
33883: LD_VAR 0 2
33887: ARRAY
33888: PUSH
33889: LD_INT 3
33891: ARRAY
33892: PPUSH
33893: LD_EXP 111
33897: PUSH
33898: LD_VAR 0 2
33902: ARRAY
33903: PUSH
33904: LD_INT 4
33906: ARRAY
33907: PPUSH
33908: CALL_OW 171
// end ; end ;
33912: LD_VAR 0 3
33916: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33917: LD_INT 0
33919: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33920: LD_VAR 0 1
33924: PUSH
33925: LD_INT 250
33927: EQUAL
33928: PUSH
33929: LD_VAR 0 2
33933: PPUSH
33934: CALL_OW 264
33938: PUSH
33939: LD_INT 81
33941: EQUAL
33942: AND
33943: IFFALSE 33964
// MinerPlaceMine ( unit , x , y ) ;
33945: LD_VAR 0 2
33949: PPUSH
33950: LD_VAR 0 4
33954: PPUSH
33955: LD_VAR 0 5
33959: PPUSH
33960: CALL 36349 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33964: LD_VAR 0 1
33968: PUSH
33969: LD_INT 251
33971: EQUAL
33972: PUSH
33973: LD_VAR 0 2
33977: PPUSH
33978: CALL_OW 264
33982: PUSH
33983: LD_INT 81
33985: EQUAL
33986: AND
33987: IFFALSE 34008
// MinerDetonateMine ( unit , x , y ) ;
33989: LD_VAR 0 2
33993: PPUSH
33994: LD_VAR 0 4
33998: PPUSH
33999: LD_VAR 0 5
34003: PPUSH
34004: CALL 36624 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34008: LD_VAR 0 1
34012: PUSH
34013: LD_INT 252
34015: EQUAL
34016: PUSH
34017: LD_VAR 0 2
34021: PPUSH
34022: CALL_OW 264
34026: PUSH
34027: LD_INT 81
34029: EQUAL
34030: AND
34031: IFFALSE 34052
// MinerCreateMinefield ( unit , x , y ) ;
34033: LD_VAR 0 2
34037: PPUSH
34038: LD_VAR 0 4
34042: PPUSH
34043: LD_VAR 0 5
34047: PPUSH
34048: CALL 37041 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34052: LD_VAR 0 1
34056: PUSH
34057: LD_INT 253
34059: EQUAL
34060: PUSH
34061: LD_VAR 0 2
34065: PPUSH
34066: CALL_OW 257
34070: PUSH
34071: LD_INT 5
34073: EQUAL
34074: AND
34075: IFFALSE 34096
// ComBinocular ( unit , x , y ) ;
34077: LD_VAR 0 2
34081: PPUSH
34082: LD_VAR 0 4
34086: PPUSH
34087: LD_VAR 0 5
34091: PPUSH
34092: CALL 37410 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34096: LD_VAR 0 1
34100: PUSH
34101: LD_INT 254
34103: EQUAL
34104: PUSH
34105: LD_VAR 0 2
34109: PPUSH
34110: CALL_OW 264
34114: PUSH
34115: LD_INT 99
34117: EQUAL
34118: AND
34119: PUSH
34120: LD_VAR 0 3
34124: PPUSH
34125: CALL_OW 263
34129: PUSH
34130: LD_INT 3
34132: EQUAL
34133: AND
34134: IFFALSE 34150
// HackDestroyVehicle ( unit , selectedUnit ) ;
34136: LD_VAR 0 2
34140: PPUSH
34141: LD_VAR 0 3
34145: PPUSH
34146: CALL 35713 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34150: LD_VAR 0 1
34154: PUSH
34155: LD_INT 255
34157: EQUAL
34158: PUSH
34159: LD_VAR 0 2
34163: PPUSH
34164: CALL_OW 264
34168: PUSH
34169: LD_INT 14
34171: PUSH
34172: LD_INT 53
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: IN
34179: AND
34180: PUSH
34181: LD_VAR 0 4
34185: PPUSH
34186: LD_VAR 0 5
34190: PPUSH
34191: CALL_OW 488
34195: AND
34196: IFFALSE 34220
// CutTreeXYR ( unit , x , y , 12 ) ;
34198: LD_VAR 0 2
34202: PPUSH
34203: LD_VAR 0 4
34207: PPUSH
34208: LD_VAR 0 5
34212: PPUSH
34213: LD_INT 12
34215: PPUSH
34216: CALL 34283 0 4
// if cmd = 256 then
34220: LD_VAR 0 1
34224: PUSH
34225: LD_INT 256
34227: EQUAL
34228: IFFALSE 34249
// SetFactoryWaypoint ( unit , x , y ) ;
34230: LD_VAR 0 2
34234: PPUSH
34235: LD_VAR 0 4
34239: PPUSH
34240: LD_VAR 0 5
34244: PPUSH
34245: CALL 32067 0 3
// if cmd = 257 then
34249: LD_VAR 0 1
34253: PUSH
34254: LD_INT 257
34256: EQUAL
34257: IFFALSE 34278
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34259: LD_VAR 0 2
34263: PPUSH
34264: LD_VAR 0 4
34268: PPUSH
34269: LD_VAR 0 5
34273: PPUSH
34274: CALL 32429 0 3
// end ;
34278: LD_VAR 0 6
34282: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34283: LD_INT 0
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
34293: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34294: LD_VAR 0 1
34298: NOT
34299: PUSH
34300: LD_VAR 0 2
34304: PPUSH
34305: LD_VAR 0 3
34309: PPUSH
34310: CALL_OW 488
34314: NOT
34315: OR
34316: PUSH
34317: LD_VAR 0 4
34321: NOT
34322: OR
34323: IFFALSE 34327
// exit ;
34325: GO 34667
// list := [ ] ;
34327: LD_ADDR_VAR 0 13
34331: PUSH
34332: EMPTY
34333: ST_TO_ADDR
// if x - r < 0 then
34334: LD_VAR 0 2
34338: PUSH
34339: LD_VAR 0 4
34343: MINUS
34344: PUSH
34345: LD_INT 0
34347: LESS
34348: IFFALSE 34360
// min_x := 0 else
34350: LD_ADDR_VAR 0 7
34354: PUSH
34355: LD_INT 0
34357: ST_TO_ADDR
34358: GO 34376
// min_x := x - r ;
34360: LD_ADDR_VAR 0 7
34364: PUSH
34365: LD_VAR 0 2
34369: PUSH
34370: LD_VAR 0 4
34374: MINUS
34375: ST_TO_ADDR
// if y - r < 0 then
34376: LD_VAR 0 3
34380: PUSH
34381: LD_VAR 0 4
34385: MINUS
34386: PUSH
34387: LD_INT 0
34389: LESS
34390: IFFALSE 34402
// min_y := 0 else
34392: LD_ADDR_VAR 0 8
34396: PUSH
34397: LD_INT 0
34399: ST_TO_ADDR
34400: GO 34418
// min_y := y - r ;
34402: LD_ADDR_VAR 0 8
34406: PUSH
34407: LD_VAR 0 3
34411: PUSH
34412: LD_VAR 0 4
34416: MINUS
34417: ST_TO_ADDR
// max_x := x + r ;
34418: LD_ADDR_VAR 0 9
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_VAR 0 4
34432: PLUS
34433: ST_TO_ADDR
// max_y := y + r ;
34434: LD_ADDR_VAR 0 10
34438: PUSH
34439: LD_VAR 0 3
34443: PUSH
34444: LD_VAR 0 4
34448: PLUS
34449: ST_TO_ADDR
// for _x = min_x to max_x do
34450: LD_ADDR_VAR 0 11
34454: PUSH
34455: DOUBLE
34456: LD_VAR 0 7
34460: DEC
34461: ST_TO_ADDR
34462: LD_VAR 0 9
34466: PUSH
34467: FOR_TO
34468: IFFALSE 34585
// for _y = min_y to max_y do
34470: LD_ADDR_VAR 0 12
34474: PUSH
34475: DOUBLE
34476: LD_VAR 0 8
34480: DEC
34481: ST_TO_ADDR
34482: LD_VAR 0 10
34486: PUSH
34487: FOR_TO
34488: IFFALSE 34581
// begin if not ValidHex ( _x , _y ) then
34490: LD_VAR 0 11
34494: PPUSH
34495: LD_VAR 0 12
34499: PPUSH
34500: CALL_OW 488
34504: NOT
34505: IFFALSE 34509
// continue ;
34507: GO 34487
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34509: LD_VAR 0 11
34513: PPUSH
34514: LD_VAR 0 12
34518: PPUSH
34519: CALL_OW 351
34523: PUSH
34524: LD_VAR 0 11
34528: PPUSH
34529: LD_VAR 0 12
34533: PPUSH
34534: CALL_OW 554
34538: AND
34539: IFFALSE 34579
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34541: LD_ADDR_VAR 0 13
34545: PUSH
34546: LD_VAR 0 13
34550: PPUSH
34551: LD_VAR 0 13
34555: PUSH
34556: LD_INT 1
34558: PLUS
34559: PPUSH
34560: LD_VAR 0 11
34564: PUSH
34565: LD_VAR 0 12
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PPUSH
34574: CALL_OW 2
34578: ST_TO_ADDR
// end ;
34579: GO 34487
34581: POP
34582: POP
34583: GO 34467
34585: POP
34586: POP
// if not list then
34587: LD_VAR 0 13
34591: NOT
34592: IFFALSE 34596
// exit ;
34594: GO 34667
// for i in list do
34596: LD_ADDR_VAR 0 6
34600: PUSH
34601: LD_VAR 0 13
34605: PUSH
34606: FOR_IN
34607: IFFALSE 34665
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34609: LD_VAR 0 1
34613: PPUSH
34614: LD_STRING M
34616: PUSH
34617: LD_VAR 0 6
34621: PUSH
34622: LD_INT 1
34624: ARRAY
34625: PUSH
34626: LD_VAR 0 6
34630: PUSH
34631: LD_INT 2
34633: ARRAY
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: EMPTY
34657: LIST
34658: PPUSH
34659: CALL_OW 447
34663: GO 34606
34665: POP
34666: POP
// end ;
34667: LD_VAR 0 5
34671: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34672: LD_EXP 114
34676: NOT
34677: IFFALSE 34727
34679: GO 34681
34681: DISABLE
// begin initHack := true ;
34682: LD_ADDR_EXP 114
34686: PUSH
34687: LD_INT 1
34689: ST_TO_ADDR
// hackTanks := [ ] ;
34690: LD_ADDR_EXP 115
34694: PUSH
34695: EMPTY
34696: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34697: LD_ADDR_EXP 116
34701: PUSH
34702: EMPTY
34703: ST_TO_ADDR
// hackLimit := 3 ;
34704: LD_ADDR_EXP 117
34708: PUSH
34709: LD_INT 3
34711: ST_TO_ADDR
// hackDist := 12 ;
34712: LD_ADDR_EXP 118
34716: PUSH
34717: LD_INT 12
34719: ST_TO_ADDR
// hackCounter := [ ] ;
34720: LD_ADDR_EXP 119
34724: PUSH
34725: EMPTY
34726: ST_TO_ADDR
// end ;
34727: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34728: LD_EXP 114
34732: PUSH
34733: LD_INT 34
34735: PUSH
34736: LD_INT 99
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PPUSH
34743: CALL_OW 69
34747: AND
34748: IFFALSE 35001
34750: GO 34752
34752: DISABLE
34753: LD_INT 0
34755: PPUSH
34756: PPUSH
// begin enable ;
34757: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34758: LD_ADDR_VAR 0 1
34762: PUSH
34763: LD_INT 34
34765: PUSH
34766: LD_INT 99
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 69
34777: PUSH
34778: FOR_IN
34779: IFFALSE 34999
// begin if not i in hackTanks then
34781: LD_VAR 0 1
34785: PUSH
34786: LD_EXP 115
34790: IN
34791: NOT
34792: IFFALSE 34875
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34794: LD_ADDR_EXP 115
34798: PUSH
34799: LD_EXP 115
34803: PPUSH
34804: LD_EXP 115
34808: PUSH
34809: LD_INT 1
34811: PLUS
34812: PPUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: CALL_OW 1
34822: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34823: LD_ADDR_EXP 116
34827: PUSH
34828: LD_EXP 116
34832: PPUSH
34833: LD_EXP 116
34837: PUSH
34838: LD_INT 1
34840: PLUS
34841: PPUSH
34842: EMPTY
34843: PPUSH
34844: CALL_OW 1
34848: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34849: LD_ADDR_EXP 119
34853: PUSH
34854: LD_EXP 119
34858: PPUSH
34859: LD_EXP 119
34863: PUSH
34864: LD_INT 1
34866: PLUS
34867: PPUSH
34868: EMPTY
34869: PPUSH
34870: CALL_OW 1
34874: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34875: LD_VAR 0 1
34879: PPUSH
34880: CALL_OW 302
34884: NOT
34885: IFFALSE 34898
// begin HackUnlinkAll ( i ) ;
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL 35004 0 1
// continue ;
34896: GO 34778
// end ; HackCheckCapturedStatus ( i ) ;
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL 35447 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34907: LD_ADDR_VAR 0 2
34911: PUSH
34912: LD_INT 81
34914: PUSH
34915: LD_VAR 0 1
34919: PPUSH
34920: CALL_OW 255
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 33
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 91
34941: PUSH
34942: LD_VAR 0 1
34946: PUSH
34947: LD_EXP 118
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 50
34959: PUSH
34960: EMPTY
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: PPUSH
34969: CALL_OW 69
34973: ST_TO_ADDR
// if not tmp then
34974: LD_VAR 0 2
34978: NOT
34979: IFFALSE 34983
// continue ;
34981: GO 34778
// HackLink ( i , tmp ) ;
34983: LD_VAR 0 1
34987: PPUSH
34988: LD_VAR 0 2
34992: PPUSH
34993: CALL 35140 0 2
// end ;
34997: GO 34778
34999: POP
35000: POP
// end ;
35001: PPOPN 2
35003: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35004: LD_INT 0
35006: PPUSH
35007: PPUSH
35008: PPUSH
// if not hack in hackTanks then
35009: LD_VAR 0 1
35013: PUSH
35014: LD_EXP 115
35018: IN
35019: NOT
35020: IFFALSE 35024
// exit ;
35022: GO 35135
// index := GetElementIndex ( hackTanks , hack ) ;
35024: LD_ADDR_VAR 0 4
35028: PUSH
35029: LD_EXP 115
35033: PPUSH
35034: LD_VAR 0 1
35038: PPUSH
35039: CALL 42752 0 2
35043: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35044: LD_EXP 116
35048: PUSH
35049: LD_VAR 0 4
35053: ARRAY
35054: IFFALSE 35135
// begin for i in hackTanksCaptured [ index ] do
35056: LD_ADDR_VAR 0 3
35060: PUSH
35061: LD_EXP 116
35065: PUSH
35066: LD_VAR 0 4
35070: ARRAY
35071: PUSH
35072: FOR_IN
35073: IFFALSE 35099
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35075: LD_VAR 0 3
35079: PUSH
35080: LD_INT 1
35082: ARRAY
35083: PPUSH
35084: LD_VAR 0 3
35088: PUSH
35089: LD_INT 2
35091: ARRAY
35092: PPUSH
35093: CALL_OW 235
35097: GO 35072
35099: POP
35100: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35101: LD_ADDR_EXP 116
35105: PUSH
35106: LD_EXP 116
35110: PPUSH
35111: LD_VAR 0 4
35115: PPUSH
35116: EMPTY
35117: PPUSH
35118: CALL_OW 1
35122: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35123: LD_VAR 0 1
35127: PPUSH
35128: LD_INT 0
35130: PPUSH
35131: CALL_OW 505
// end ; end ;
35135: LD_VAR 0 2
35139: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35140: LD_INT 0
35142: PPUSH
35143: PPUSH
35144: PPUSH
// if not hack in hackTanks or not vehicles then
35145: LD_VAR 0 1
35149: PUSH
35150: LD_EXP 115
35154: IN
35155: NOT
35156: PUSH
35157: LD_VAR 0 2
35161: NOT
35162: OR
35163: IFFALSE 35167
// exit ;
35165: GO 35442
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35167: LD_ADDR_VAR 0 2
35171: PUSH
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_VAR 0 2
35181: PPUSH
35182: LD_INT 1
35184: PPUSH
35185: LD_INT 1
35187: PPUSH
35188: CALL 43402 0 4
35192: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35193: LD_ADDR_VAR 0 5
35197: PUSH
35198: LD_EXP 115
35202: PPUSH
35203: LD_VAR 0 1
35207: PPUSH
35208: CALL 42752 0 2
35212: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35213: LD_EXP 116
35217: PUSH
35218: LD_VAR 0 5
35222: ARRAY
35223: PUSH
35224: LD_EXP 117
35228: LESS
35229: IFFALSE 35418
// begin for i := 1 to vehicles do
35231: LD_ADDR_VAR 0 4
35235: PUSH
35236: DOUBLE
35237: LD_INT 1
35239: DEC
35240: ST_TO_ADDR
35241: LD_VAR 0 2
35245: PUSH
35246: FOR_TO
35247: IFFALSE 35416
// begin if hackTanksCaptured [ index ] = hackLimit then
35249: LD_EXP 116
35253: PUSH
35254: LD_VAR 0 5
35258: ARRAY
35259: PUSH
35260: LD_EXP 117
35264: EQUAL
35265: IFFALSE 35269
// break ;
35267: GO 35416
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35269: LD_ADDR_EXP 119
35273: PUSH
35274: LD_EXP 119
35278: PPUSH
35279: LD_VAR 0 5
35283: PPUSH
35284: LD_EXP 119
35288: PUSH
35289: LD_VAR 0 5
35293: ARRAY
35294: PUSH
35295: LD_INT 1
35297: PLUS
35298: PPUSH
35299: CALL_OW 1
35303: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35304: LD_ADDR_EXP 116
35308: PUSH
35309: LD_EXP 116
35313: PPUSH
35314: LD_VAR 0 5
35318: PUSH
35319: LD_EXP 116
35323: PUSH
35324: LD_VAR 0 5
35328: ARRAY
35329: PUSH
35330: LD_INT 1
35332: PLUS
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PPUSH
35338: LD_VAR 0 2
35342: PUSH
35343: LD_VAR 0 4
35347: ARRAY
35348: PUSH
35349: LD_VAR 0 2
35353: PUSH
35354: LD_VAR 0 4
35358: ARRAY
35359: PPUSH
35360: CALL_OW 255
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PPUSH
35369: CALL 42967 0 3
35373: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35374: LD_VAR 0 2
35378: PUSH
35379: LD_VAR 0 4
35383: ARRAY
35384: PPUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 255
35394: PPUSH
35395: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35399: LD_VAR 0 2
35403: PUSH
35404: LD_VAR 0 4
35408: ARRAY
35409: PPUSH
35410: CALL_OW 141
// end ;
35414: GO 35246
35416: POP
35417: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35418: LD_VAR 0 1
35422: PPUSH
35423: LD_EXP 116
35427: PUSH
35428: LD_VAR 0 5
35432: ARRAY
35433: PUSH
35434: LD_INT 0
35436: PLUS
35437: PPUSH
35438: CALL_OW 505
// end ;
35442: LD_VAR 0 3
35446: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35447: LD_INT 0
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
// if not hack in hackTanks then
35453: LD_VAR 0 1
35457: PUSH
35458: LD_EXP 115
35462: IN
35463: NOT
35464: IFFALSE 35468
// exit ;
35466: GO 35708
// index := GetElementIndex ( hackTanks , hack ) ;
35468: LD_ADDR_VAR 0 4
35472: PUSH
35473: LD_EXP 115
35477: PPUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL 42752 0 2
35487: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: DOUBLE
35494: LD_EXP 116
35498: PUSH
35499: LD_VAR 0 4
35503: ARRAY
35504: INC
35505: ST_TO_ADDR
35506: LD_INT 1
35508: PUSH
35509: FOR_DOWNTO
35510: IFFALSE 35682
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35512: LD_ADDR_VAR 0 5
35516: PUSH
35517: LD_EXP 116
35521: PUSH
35522: LD_VAR 0 4
35526: ARRAY
35527: PUSH
35528: LD_VAR 0 3
35532: ARRAY
35533: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35534: LD_VAR 0 5
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: CALL_OW 302
35547: NOT
35548: PUSH
35549: LD_VAR 0 5
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: PPUSH
35558: CALL_OW 255
35562: PUSH
35563: LD_VAR 0 1
35567: PPUSH
35568: CALL_OW 255
35572: NONEQUAL
35573: OR
35574: IFFALSE 35680
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35576: LD_VAR 0 5
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PPUSH
35585: CALL_OW 305
35589: PUSH
35590: LD_VAR 0 5
35594: PUSH
35595: LD_INT 1
35597: ARRAY
35598: PPUSH
35599: CALL_OW 255
35603: PUSH
35604: LD_VAR 0 1
35608: PPUSH
35609: CALL_OW 255
35613: EQUAL
35614: AND
35615: IFFALSE 35639
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35617: LD_VAR 0 5
35621: PUSH
35622: LD_INT 1
35624: ARRAY
35625: PPUSH
35626: LD_VAR 0 5
35630: PUSH
35631: LD_INT 2
35633: ARRAY
35634: PPUSH
35635: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35639: LD_ADDR_EXP 116
35643: PUSH
35644: LD_EXP 116
35648: PPUSH
35649: LD_VAR 0 4
35653: PPUSH
35654: LD_EXP 116
35658: PUSH
35659: LD_VAR 0 4
35663: ARRAY
35664: PPUSH
35665: LD_VAR 0 3
35669: PPUSH
35670: CALL_OW 3
35674: PPUSH
35675: CALL_OW 1
35679: ST_TO_ADDR
// end ; end ;
35680: GO 35509
35682: POP
35683: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35684: LD_VAR 0 1
35688: PPUSH
35689: LD_EXP 116
35693: PUSH
35694: LD_VAR 0 4
35698: ARRAY
35699: PUSH
35700: LD_INT 0
35702: PLUS
35703: PPUSH
35704: CALL_OW 505
// end ;
35708: LD_VAR 0 2
35712: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35713: LD_INT 0
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
// if not hack in hackTanks then
35719: LD_VAR 0 1
35723: PUSH
35724: LD_EXP 115
35728: IN
35729: NOT
35730: IFFALSE 35734
// exit ;
35732: GO 35819
// index := GetElementIndex ( hackTanks , hack ) ;
35734: LD_ADDR_VAR 0 5
35738: PUSH
35739: LD_EXP 115
35743: PPUSH
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL 42752 0 2
35753: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35754: LD_ADDR_VAR 0 4
35758: PUSH
35759: DOUBLE
35760: LD_INT 1
35762: DEC
35763: ST_TO_ADDR
35764: LD_EXP 116
35768: PUSH
35769: LD_VAR 0 5
35773: ARRAY
35774: PUSH
35775: FOR_TO
35776: IFFALSE 35817
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35778: LD_EXP 116
35782: PUSH
35783: LD_VAR 0 5
35787: ARRAY
35788: PUSH
35789: LD_VAR 0 4
35793: ARRAY
35794: PUSH
35795: LD_INT 1
35797: ARRAY
35798: PUSH
35799: LD_VAR 0 2
35803: EQUAL
35804: IFFALSE 35815
// KillUnit ( vehicle ) ;
35806: LD_VAR 0 2
35810: PPUSH
35811: CALL_OW 66
35815: GO 35775
35817: POP
35818: POP
// end ;
35819: LD_VAR 0 3
35823: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35824: LD_EXP 120
35828: NOT
35829: IFFALSE 35864
35831: GO 35833
35833: DISABLE
// begin initMiner := true ;
35834: LD_ADDR_EXP 120
35838: PUSH
35839: LD_INT 1
35841: ST_TO_ADDR
// minersList := [ ] ;
35842: LD_ADDR_EXP 121
35846: PUSH
35847: EMPTY
35848: ST_TO_ADDR
// minerMinesList := [ ] ;
35849: LD_ADDR_EXP 122
35853: PUSH
35854: EMPTY
35855: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35856: LD_ADDR_EXP 123
35860: PUSH
35861: LD_INT 5
35863: ST_TO_ADDR
// end ;
35864: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35865: LD_EXP 120
35869: PUSH
35870: LD_INT 34
35872: PUSH
35873: LD_INT 81
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PPUSH
35880: CALL_OW 69
35884: AND
35885: IFFALSE 36346
35887: GO 35889
35889: DISABLE
35890: LD_INT 0
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
// begin enable ;
35896: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35897: LD_ADDR_VAR 0 1
35901: PUSH
35902: LD_INT 34
35904: PUSH
35905: LD_INT 81
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PPUSH
35912: CALL_OW 69
35916: PUSH
35917: FOR_IN
35918: IFFALSE 35990
// begin if not i in minersList then
35920: LD_VAR 0 1
35924: PUSH
35925: LD_EXP 121
35929: IN
35930: NOT
35931: IFFALSE 35988
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35933: LD_ADDR_EXP 121
35937: PUSH
35938: LD_EXP 121
35942: PPUSH
35943: LD_EXP 121
35947: PUSH
35948: LD_INT 1
35950: PLUS
35951: PPUSH
35952: LD_VAR 0 1
35956: PPUSH
35957: CALL_OW 1
35961: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35962: LD_ADDR_EXP 122
35966: PUSH
35967: LD_EXP 122
35971: PPUSH
35972: LD_EXP 122
35976: PUSH
35977: LD_INT 1
35979: PLUS
35980: PPUSH
35981: EMPTY
35982: PPUSH
35983: CALL_OW 1
35987: ST_TO_ADDR
// end end ;
35988: GO 35917
35990: POP
35991: POP
// for i := minerMinesList downto 1 do
35992: LD_ADDR_VAR 0 1
35996: PUSH
35997: DOUBLE
35998: LD_EXP 122
36002: INC
36003: ST_TO_ADDR
36004: LD_INT 1
36006: PUSH
36007: FOR_DOWNTO
36008: IFFALSE 36344
// begin if IsLive ( minersList [ i ] ) then
36010: LD_EXP 121
36014: PUSH
36015: LD_VAR 0 1
36019: ARRAY
36020: PPUSH
36021: CALL_OW 300
36025: IFFALSE 36053
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36027: LD_EXP 121
36031: PUSH
36032: LD_VAR 0 1
36036: ARRAY
36037: PPUSH
36038: LD_EXP 122
36042: PUSH
36043: LD_VAR 0 1
36047: ARRAY
36048: PPUSH
36049: CALL_OW 505
// if not minerMinesList [ i ] then
36053: LD_EXP 122
36057: PUSH
36058: LD_VAR 0 1
36062: ARRAY
36063: NOT
36064: IFFALSE 36068
// continue ;
36066: GO 36007
// for j := minerMinesList [ i ] downto 1 do
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: DOUBLE
36074: LD_EXP 122
36078: PUSH
36079: LD_VAR 0 1
36083: ARRAY
36084: INC
36085: ST_TO_ADDR
36086: LD_INT 1
36088: PUSH
36089: FOR_DOWNTO
36090: IFFALSE 36340
// begin side := GetSide ( minersList [ i ] ) ;
36092: LD_ADDR_VAR 0 3
36096: PUSH
36097: LD_EXP 121
36101: PUSH
36102: LD_VAR 0 1
36106: ARRAY
36107: PPUSH
36108: CALL_OW 255
36112: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36113: LD_ADDR_VAR 0 4
36117: PUSH
36118: LD_EXP 122
36122: PUSH
36123: LD_VAR 0 1
36127: ARRAY
36128: PUSH
36129: LD_VAR 0 2
36133: ARRAY
36134: PUSH
36135: LD_INT 1
36137: ARRAY
36138: PPUSH
36139: LD_EXP 122
36143: PUSH
36144: LD_VAR 0 1
36148: ARRAY
36149: PUSH
36150: LD_VAR 0 2
36154: ARRAY
36155: PUSH
36156: LD_INT 2
36158: ARRAY
36159: PPUSH
36160: CALL_OW 428
36164: ST_TO_ADDR
// if not tmp then
36165: LD_VAR 0 4
36169: NOT
36170: IFFALSE 36174
// continue ;
36172: GO 36089
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36174: LD_VAR 0 4
36178: PUSH
36179: LD_INT 81
36181: PUSH
36182: LD_VAR 0 3
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PPUSH
36191: CALL_OW 69
36195: IN
36196: PUSH
36197: LD_EXP 122
36201: PUSH
36202: LD_VAR 0 1
36206: ARRAY
36207: PUSH
36208: LD_VAR 0 2
36212: ARRAY
36213: PUSH
36214: LD_INT 1
36216: ARRAY
36217: PPUSH
36218: LD_EXP 122
36222: PUSH
36223: LD_VAR 0 1
36227: ARRAY
36228: PUSH
36229: LD_VAR 0 2
36233: ARRAY
36234: PUSH
36235: LD_INT 2
36237: ARRAY
36238: PPUSH
36239: CALL_OW 458
36243: AND
36244: IFFALSE 36338
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36246: LD_EXP 122
36250: PUSH
36251: LD_VAR 0 1
36255: ARRAY
36256: PUSH
36257: LD_VAR 0 2
36261: ARRAY
36262: PUSH
36263: LD_INT 1
36265: ARRAY
36266: PPUSH
36267: LD_EXP 122
36271: PUSH
36272: LD_VAR 0 1
36276: ARRAY
36277: PUSH
36278: LD_VAR 0 2
36282: ARRAY
36283: PUSH
36284: LD_INT 2
36286: ARRAY
36287: PPUSH
36288: LD_VAR 0 3
36292: PPUSH
36293: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36297: LD_ADDR_EXP 122
36301: PUSH
36302: LD_EXP 122
36306: PPUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: LD_EXP 122
36316: PUSH
36317: LD_VAR 0 1
36321: ARRAY
36322: PPUSH
36323: LD_VAR 0 2
36327: PPUSH
36328: CALL_OW 3
36332: PPUSH
36333: CALL_OW 1
36337: ST_TO_ADDR
// end ; end ;
36338: GO 36089
36340: POP
36341: POP
// end ;
36342: GO 36007
36344: POP
36345: POP
// end ;
36346: PPOPN 4
36348: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36349: LD_INT 0
36351: PPUSH
36352: PPUSH
// result := false ;
36353: LD_ADDR_VAR 0 4
36357: PUSH
36358: LD_INT 0
36360: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 264
36370: PUSH
36371: LD_INT 81
36373: EQUAL
36374: NOT
36375: IFFALSE 36379
// exit ;
36377: GO 36619
// index := GetElementIndex ( minersList , unit ) ;
36379: LD_ADDR_VAR 0 5
36383: PUSH
36384: LD_EXP 121
36388: PPUSH
36389: LD_VAR 0 1
36393: PPUSH
36394: CALL 42752 0 2
36398: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36399: LD_EXP 122
36403: PUSH
36404: LD_VAR 0 5
36408: ARRAY
36409: PUSH
36410: LD_EXP 123
36414: GREATEREQUAL
36415: IFFALSE 36419
// exit ;
36417: GO 36619
// ComMoveXY ( unit , x , y ) ;
36419: LD_VAR 0 1
36423: PPUSH
36424: LD_VAR 0 2
36428: PPUSH
36429: LD_VAR 0 3
36433: PPUSH
36434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36438: LD_INT 35
36440: PPUSH
36441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36445: LD_VAR 0 1
36449: PPUSH
36450: LD_VAR 0 2
36454: PPUSH
36455: LD_VAR 0 3
36459: PPUSH
36460: CALL 74107 0 3
36464: NOT
36465: PUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 314
36475: AND
36476: IFFALSE 36480
// exit ;
36478: GO 36619
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36480: LD_VAR 0 2
36484: PPUSH
36485: LD_VAR 0 3
36489: PPUSH
36490: CALL_OW 428
36494: PUSH
36495: LD_VAR 0 1
36499: EQUAL
36500: PUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 314
36510: NOT
36511: AND
36512: IFFALSE 36438
// PlaySoundXY ( x , y , PlantMine ) ;
36514: LD_VAR 0 2
36518: PPUSH
36519: LD_VAR 0 3
36523: PPUSH
36524: LD_STRING PlantMine
36526: PPUSH
36527: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36531: LD_VAR 0 2
36535: PPUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 255
36550: PPUSH
36551: LD_INT 0
36553: PPUSH
36554: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36558: LD_ADDR_EXP 122
36562: PUSH
36563: LD_EXP 122
36567: PPUSH
36568: LD_VAR 0 5
36572: PUSH
36573: LD_EXP 122
36577: PUSH
36578: LD_VAR 0 5
36582: ARRAY
36583: PUSH
36584: LD_INT 1
36586: PLUS
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PPUSH
36592: LD_VAR 0 2
36596: PUSH
36597: LD_VAR 0 3
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PPUSH
36606: CALL 42967 0 3
36610: ST_TO_ADDR
// result := true ;
36611: LD_ADDR_VAR 0 4
36615: PUSH
36616: LD_INT 1
36618: ST_TO_ADDR
// end ;
36619: LD_VAR 0 4
36623: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36624: LD_INT 0
36626: PPUSH
36627: PPUSH
36628: PPUSH
// if not unit in minersList then
36629: LD_VAR 0 1
36633: PUSH
36634: LD_EXP 121
36638: IN
36639: NOT
36640: IFFALSE 36644
// exit ;
36642: GO 37036
// index := GetElementIndex ( minersList , unit ) ;
36644: LD_ADDR_VAR 0 6
36648: PUSH
36649: LD_EXP 121
36653: PPUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: CALL 42752 0 2
36663: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36664: LD_ADDR_VAR 0 5
36668: PUSH
36669: DOUBLE
36670: LD_EXP 122
36674: PUSH
36675: LD_VAR 0 6
36679: ARRAY
36680: INC
36681: ST_TO_ADDR
36682: LD_INT 1
36684: PUSH
36685: FOR_DOWNTO
36686: IFFALSE 36847
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36688: LD_EXP 122
36692: PUSH
36693: LD_VAR 0 6
36697: ARRAY
36698: PUSH
36699: LD_VAR 0 5
36703: ARRAY
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PUSH
36709: LD_VAR 0 2
36713: EQUAL
36714: PUSH
36715: LD_EXP 122
36719: PUSH
36720: LD_VAR 0 6
36724: ARRAY
36725: PUSH
36726: LD_VAR 0 5
36730: ARRAY
36731: PUSH
36732: LD_INT 2
36734: ARRAY
36735: PUSH
36736: LD_VAR 0 3
36740: EQUAL
36741: AND
36742: IFFALSE 36845
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36744: LD_EXP 122
36748: PUSH
36749: LD_VAR 0 6
36753: ARRAY
36754: PUSH
36755: LD_VAR 0 5
36759: ARRAY
36760: PUSH
36761: LD_INT 1
36763: ARRAY
36764: PPUSH
36765: LD_EXP 122
36769: PUSH
36770: LD_VAR 0 6
36774: ARRAY
36775: PUSH
36776: LD_VAR 0 5
36780: ARRAY
36781: PUSH
36782: LD_INT 2
36784: ARRAY
36785: PPUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 255
36795: PPUSH
36796: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36800: LD_ADDR_EXP 122
36804: PUSH
36805: LD_EXP 122
36809: PPUSH
36810: LD_VAR 0 6
36814: PPUSH
36815: LD_EXP 122
36819: PUSH
36820: LD_VAR 0 6
36824: ARRAY
36825: PPUSH
36826: LD_VAR 0 5
36830: PPUSH
36831: CALL_OW 3
36835: PPUSH
36836: CALL_OW 1
36840: ST_TO_ADDR
// exit ;
36841: POP
36842: POP
36843: GO 37036
// end ; end ;
36845: GO 36685
36847: POP
36848: POP
// for i := minerMinesList [ index ] downto 1 do
36849: LD_ADDR_VAR 0 5
36853: PUSH
36854: DOUBLE
36855: LD_EXP 122
36859: PUSH
36860: LD_VAR 0 6
36864: ARRAY
36865: INC
36866: ST_TO_ADDR
36867: LD_INT 1
36869: PUSH
36870: FOR_DOWNTO
36871: IFFALSE 37034
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36873: LD_EXP 122
36877: PUSH
36878: LD_VAR 0 6
36882: ARRAY
36883: PUSH
36884: LD_VAR 0 5
36888: ARRAY
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: PPUSH
36894: LD_EXP 122
36898: PUSH
36899: LD_VAR 0 6
36903: ARRAY
36904: PUSH
36905: LD_VAR 0 5
36909: ARRAY
36910: PUSH
36911: LD_INT 2
36913: ARRAY
36914: PPUSH
36915: LD_VAR 0 2
36919: PPUSH
36920: LD_VAR 0 3
36924: PPUSH
36925: CALL_OW 298
36929: PUSH
36930: LD_INT 6
36932: LESS
36933: IFFALSE 37032
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36935: LD_EXP 122
36939: PUSH
36940: LD_VAR 0 6
36944: ARRAY
36945: PUSH
36946: LD_VAR 0 5
36950: ARRAY
36951: PUSH
36952: LD_INT 1
36954: ARRAY
36955: PPUSH
36956: LD_EXP 122
36960: PUSH
36961: LD_VAR 0 6
36965: ARRAY
36966: PUSH
36967: LD_VAR 0 5
36971: ARRAY
36972: PUSH
36973: LD_INT 2
36975: ARRAY
36976: PPUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 255
36986: PPUSH
36987: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36991: LD_ADDR_EXP 122
36995: PUSH
36996: LD_EXP 122
37000: PPUSH
37001: LD_VAR 0 6
37005: PPUSH
37006: LD_EXP 122
37010: PUSH
37011: LD_VAR 0 6
37015: ARRAY
37016: PPUSH
37017: LD_VAR 0 5
37021: PPUSH
37022: CALL_OW 3
37026: PPUSH
37027: CALL_OW 1
37031: ST_TO_ADDR
// end ; end ;
37032: GO 36870
37034: POP
37035: POP
// end ;
37036: LD_VAR 0 4
37040: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37041: LD_INT 0
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
37049: PPUSH
37050: PPUSH
37051: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37052: LD_VAR 0 1
37056: PPUSH
37057: CALL_OW 264
37061: PUSH
37062: LD_INT 81
37064: EQUAL
37065: NOT
37066: PUSH
37067: LD_VAR 0 1
37071: PUSH
37072: LD_EXP 121
37076: IN
37077: NOT
37078: OR
37079: IFFALSE 37083
// exit ;
37081: GO 37405
// index := GetElementIndex ( minersList , unit ) ;
37083: LD_ADDR_VAR 0 6
37087: PUSH
37088: LD_EXP 121
37092: PPUSH
37093: LD_VAR 0 1
37097: PPUSH
37098: CALL 42752 0 2
37102: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37103: LD_ADDR_VAR 0 8
37107: PUSH
37108: LD_EXP 123
37112: PUSH
37113: LD_EXP 122
37117: PUSH
37118: LD_VAR 0 6
37122: ARRAY
37123: MINUS
37124: ST_TO_ADDR
// if not minesFreeAmount then
37125: LD_VAR 0 8
37129: NOT
37130: IFFALSE 37134
// exit ;
37132: GO 37405
// tmp := [ ] ;
37134: LD_ADDR_VAR 0 7
37138: PUSH
37139: EMPTY
37140: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37141: LD_ADDR_VAR 0 5
37145: PUSH
37146: DOUBLE
37147: LD_INT 1
37149: DEC
37150: ST_TO_ADDR
37151: LD_VAR 0 8
37155: PUSH
37156: FOR_TO
37157: IFFALSE 37352
// begin _d := rand ( 0 , 5 ) ;
37159: LD_ADDR_VAR 0 11
37163: PUSH
37164: LD_INT 0
37166: PPUSH
37167: LD_INT 5
37169: PPUSH
37170: CALL_OW 12
37174: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37175: LD_ADDR_VAR 0 12
37179: PUSH
37180: LD_INT 2
37182: PPUSH
37183: LD_INT 6
37185: PPUSH
37186: CALL_OW 12
37190: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37191: LD_ADDR_VAR 0 9
37195: PUSH
37196: LD_VAR 0 2
37200: PPUSH
37201: LD_VAR 0 11
37205: PPUSH
37206: LD_VAR 0 12
37210: PPUSH
37211: CALL_OW 272
37215: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37216: LD_ADDR_VAR 0 10
37220: PUSH
37221: LD_VAR 0 3
37225: PPUSH
37226: LD_VAR 0 11
37230: PPUSH
37231: LD_VAR 0 12
37235: PPUSH
37236: CALL_OW 273
37240: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37241: LD_VAR 0 9
37245: PPUSH
37246: LD_VAR 0 10
37250: PPUSH
37251: CALL_OW 488
37255: PUSH
37256: LD_VAR 0 9
37260: PUSH
37261: LD_VAR 0 10
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_VAR 0 7
37274: IN
37275: NOT
37276: AND
37277: PUSH
37278: LD_VAR 0 9
37282: PPUSH
37283: LD_VAR 0 10
37287: PPUSH
37288: CALL_OW 458
37292: NOT
37293: AND
37294: IFFALSE 37336
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: LD_VAR 0 7
37305: PPUSH
37306: LD_VAR 0 7
37310: PUSH
37311: LD_INT 1
37313: PLUS
37314: PPUSH
37315: LD_VAR 0 9
37319: PUSH
37320: LD_VAR 0 10
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PPUSH
37329: CALL_OW 1
37333: ST_TO_ADDR
37334: GO 37350
// i := i - 1 ;
37336: LD_ADDR_VAR 0 5
37340: PUSH
37341: LD_VAR 0 5
37345: PUSH
37346: LD_INT 1
37348: MINUS
37349: ST_TO_ADDR
// end ;
37350: GO 37156
37352: POP
37353: POP
// for i in tmp do
37354: LD_ADDR_VAR 0 5
37358: PUSH
37359: LD_VAR 0 7
37363: PUSH
37364: FOR_IN
37365: IFFALSE 37403
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37367: LD_VAR 0 1
37371: PPUSH
37372: LD_VAR 0 5
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: PPUSH
37381: LD_VAR 0 5
37385: PUSH
37386: LD_INT 2
37388: ARRAY
37389: PPUSH
37390: CALL 36349 0 3
37394: NOT
37395: IFFALSE 37401
// exit ;
37397: POP
37398: POP
37399: GO 37405
37401: GO 37364
37403: POP
37404: POP
// end ;
37405: LD_VAR 0 4
37409: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37410: LD_INT 0
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
// if not GetClass ( unit ) = class_sniper then
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL_OW 257
37428: PUSH
37429: LD_INT 5
37431: EQUAL
37432: NOT
37433: IFFALSE 37437
// exit ;
37435: GO 37825
// dist := 8 ;
37437: LD_ADDR_VAR 0 5
37441: PUSH
37442: LD_INT 8
37444: ST_TO_ADDR
// viewRange := 12 ;
37445: LD_ADDR_VAR 0 7
37449: PUSH
37450: LD_INT 12
37452: ST_TO_ADDR
// side := GetSide ( unit ) ;
37453: LD_ADDR_VAR 0 6
37457: PUSH
37458: LD_VAR 0 1
37462: PPUSH
37463: CALL_OW 255
37467: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37468: LD_INT 61
37470: PPUSH
37471: LD_VAR 0 6
37475: PPUSH
37476: CALL_OW 321
37480: PUSH
37481: LD_INT 2
37483: EQUAL
37484: IFFALSE 37494
// viewRange := 16 ;
37486: LD_ADDR_VAR 0 7
37490: PUSH
37491: LD_INT 16
37493: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37494: LD_VAR 0 1
37498: PPUSH
37499: LD_VAR 0 2
37503: PPUSH
37504: LD_VAR 0 3
37508: PPUSH
37509: CALL_OW 297
37513: PUSH
37514: LD_VAR 0 5
37518: GREATER
37519: IFFALSE 37598
// begin ComMoveXY ( unit , x , y ) ;
37521: LD_VAR 0 1
37525: PPUSH
37526: LD_VAR 0 2
37530: PPUSH
37531: LD_VAR 0 3
37535: PPUSH
37536: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37540: LD_INT 35
37542: PPUSH
37543: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37547: LD_VAR 0 1
37551: PPUSH
37552: LD_VAR 0 2
37556: PPUSH
37557: LD_VAR 0 3
37561: PPUSH
37562: CALL 74107 0 3
37566: NOT
37567: IFFALSE 37571
// exit ;
37569: GO 37825
// until GetDistUnitXY ( unit , x , y ) < dist ;
37571: LD_VAR 0 1
37575: PPUSH
37576: LD_VAR 0 2
37580: PPUSH
37581: LD_VAR 0 3
37585: PPUSH
37586: CALL_OW 297
37590: PUSH
37591: LD_VAR 0 5
37595: LESS
37596: IFFALSE 37540
// end ; ComTurnXY ( unit , x , y ) ;
37598: LD_VAR 0 1
37602: PPUSH
37603: LD_VAR 0 2
37607: PPUSH
37608: LD_VAR 0 3
37612: PPUSH
37613: CALL_OW 118
// wait ( 5 ) ;
37617: LD_INT 5
37619: PPUSH
37620: CALL_OW 67
// _d := GetDir ( unit ) ;
37624: LD_ADDR_VAR 0 10
37628: PUSH
37629: LD_VAR 0 1
37633: PPUSH
37634: CALL_OW 254
37638: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37639: LD_ADDR_VAR 0 8
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 250
37653: PPUSH
37654: LD_VAR 0 10
37658: PPUSH
37659: LD_VAR 0 5
37663: PPUSH
37664: CALL_OW 272
37668: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37669: LD_ADDR_VAR 0 9
37673: PUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 251
37683: PPUSH
37684: LD_VAR 0 10
37688: PPUSH
37689: LD_VAR 0 5
37693: PPUSH
37694: CALL_OW 273
37698: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37699: LD_VAR 0 8
37703: PPUSH
37704: LD_VAR 0 9
37708: PPUSH
37709: CALL_OW 488
37713: NOT
37714: IFFALSE 37718
// exit ;
37716: GO 37825
// ComAnimCustom ( unit , 1 ) ;
37718: LD_VAR 0 1
37722: PPUSH
37723: LD_INT 1
37725: PPUSH
37726: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37730: LD_VAR 0 8
37734: PPUSH
37735: LD_VAR 0 9
37739: PPUSH
37740: LD_VAR 0 6
37744: PPUSH
37745: LD_VAR 0 7
37749: PPUSH
37750: CALL_OW 330
// repeat wait ( 1 ) ;
37754: LD_INT 1
37756: PPUSH
37757: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37761: LD_VAR 0 1
37765: PPUSH
37766: CALL_OW 316
37770: PUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL_OW 314
37780: OR
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 302
37791: NOT
37792: OR
37793: PUSH
37794: LD_VAR 0 1
37798: PPUSH
37799: CALL_OW 301
37803: OR
37804: IFFALSE 37754
// RemoveSeeing ( _x , _y , side ) ;
37806: LD_VAR 0 8
37810: PPUSH
37811: LD_VAR 0 9
37815: PPUSH
37816: LD_VAR 0 6
37820: PPUSH
37821: CALL_OW 331
// end ; end_of_file
37825: LD_VAR 0 4
37829: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37830: LD_INT 0
37832: PPUSH
37833: PPUSH
// if exist_mode then
37834: LD_VAR 0 2
37838: IFFALSE 37863
// unit := CreateCharacter ( prefix & ident ) else
37840: LD_ADDR_VAR 0 5
37844: PUSH
37845: LD_VAR 0 3
37849: PUSH
37850: LD_VAR 0 1
37854: STR
37855: PPUSH
37856: CALL_OW 34
37860: ST_TO_ADDR
37861: GO 37878
// unit := NewCharacter ( ident ) ;
37863: LD_ADDR_VAR 0 5
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 25
37877: ST_TO_ADDR
// result := unit ;
37878: LD_ADDR_VAR 0 4
37882: PUSH
37883: LD_VAR 0 5
37887: ST_TO_ADDR
// end ;
37888: LD_VAR 0 4
37892: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37893: LD_INT 0
37895: PPUSH
37896: PPUSH
// if not side or not nation then
37897: LD_VAR 0 1
37901: NOT
37902: PUSH
37903: LD_VAR 0 2
37907: NOT
37908: OR
37909: IFFALSE 37913
// exit ;
37911: GO 38681
// case nation of nation_american :
37913: LD_VAR 0 2
37917: PUSH
37918: LD_INT 1
37920: DOUBLE
37921: EQUAL
37922: IFTRUE 37926
37924: GO 38140
37926: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37927: LD_ADDR_VAR 0 4
37931: PUSH
37932: LD_INT 35
37934: PUSH
37935: LD_INT 45
37937: PUSH
37938: LD_INT 46
37940: PUSH
37941: LD_INT 47
37943: PUSH
37944: LD_INT 82
37946: PUSH
37947: LD_INT 83
37949: PUSH
37950: LD_INT 84
37952: PUSH
37953: LD_INT 85
37955: PUSH
37956: LD_INT 86
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 6
37967: PUSH
37968: LD_INT 15
37970: PUSH
37971: LD_INT 16
37973: PUSH
37974: LD_INT 7
37976: PUSH
37977: LD_INT 12
37979: PUSH
37980: LD_INT 13
37982: PUSH
37983: LD_INT 10
37985: PUSH
37986: LD_INT 14
37988: PUSH
37989: LD_INT 20
37991: PUSH
37992: LD_INT 21
37994: PUSH
37995: LD_INT 22
37997: PUSH
37998: LD_INT 25
38000: PUSH
38001: LD_INT 32
38003: PUSH
38004: LD_INT 27
38006: PUSH
38007: LD_INT 36
38009: PUSH
38010: LD_INT 69
38012: PUSH
38013: LD_INT 39
38015: PUSH
38016: LD_INT 34
38018: PUSH
38019: LD_INT 40
38021: PUSH
38022: LD_INT 48
38024: PUSH
38025: LD_INT 49
38027: PUSH
38028: LD_INT 50
38030: PUSH
38031: LD_INT 51
38033: PUSH
38034: LD_INT 52
38036: PUSH
38037: LD_INT 53
38039: PUSH
38040: LD_INT 54
38042: PUSH
38043: LD_INT 55
38045: PUSH
38046: LD_INT 56
38048: PUSH
38049: LD_INT 57
38051: PUSH
38052: LD_INT 58
38054: PUSH
38055: LD_INT 59
38057: PUSH
38058: LD_INT 60
38060: PUSH
38061: LD_INT 61
38063: PUSH
38064: LD_INT 62
38066: PUSH
38067: LD_INT 80
38069: PUSH
38070: LD_INT 82
38072: PUSH
38073: LD_INT 83
38075: PUSH
38076: LD_INT 84
38078: PUSH
38079: LD_INT 85
38081: PUSH
38082: LD_INT 86
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: ST_TO_ADDR
38138: GO 38605
38140: LD_INT 2
38142: DOUBLE
38143: EQUAL
38144: IFTRUE 38148
38146: GO 38374
38148: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38149: LD_ADDR_VAR 0 4
38153: PUSH
38154: LD_INT 35
38156: PUSH
38157: LD_INT 45
38159: PUSH
38160: LD_INT 46
38162: PUSH
38163: LD_INT 47
38165: PUSH
38166: LD_INT 82
38168: PUSH
38169: LD_INT 83
38171: PUSH
38172: LD_INT 84
38174: PUSH
38175: LD_INT 85
38177: PUSH
38178: LD_INT 87
38180: PUSH
38181: LD_INT 70
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 11
38189: PUSH
38190: LD_INT 3
38192: PUSH
38193: LD_INT 4
38195: PUSH
38196: LD_INT 5
38198: PUSH
38199: LD_INT 6
38201: PUSH
38202: LD_INT 15
38204: PUSH
38205: LD_INT 18
38207: PUSH
38208: LD_INT 7
38210: PUSH
38211: LD_INT 17
38213: PUSH
38214: LD_INT 8
38216: PUSH
38217: LD_INT 20
38219: PUSH
38220: LD_INT 21
38222: PUSH
38223: LD_INT 22
38225: PUSH
38226: LD_INT 72
38228: PUSH
38229: LD_INT 26
38231: PUSH
38232: LD_INT 69
38234: PUSH
38235: LD_INT 39
38237: PUSH
38238: LD_INT 40
38240: PUSH
38241: LD_INT 41
38243: PUSH
38244: LD_INT 42
38246: PUSH
38247: LD_INT 43
38249: PUSH
38250: LD_INT 48
38252: PUSH
38253: LD_INT 49
38255: PUSH
38256: LD_INT 50
38258: PUSH
38259: LD_INT 51
38261: PUSH
38262: LD_INT 52
38264: PUSH
38265: LD_INT 53
38267: PUSH
38268: LD_INT 54
38270: PUSH
38271: LD_INT 55
38273: PUSH
38274: LD_INT 56
38276: PUSH
38277: LD_INT 60
38279: PUSH
38280: LD_INT 61
38282: PUSH
38283: LD_INT 62
38285: PUSH
38286: LD_INT 66
38288: PUSH
38289: LD_INT 67
38291: PUSH
38292: LD_INT 68
38294: PUSH
38295: LD_INT 81
38297: PUSH
38298: LD_INT 82
38300: PUSH
38301: LD_INT 83
38303: PUSH
38304: LD_INT 84
38306: PUSH
38307: LD_INT 85
38309: PUSH
38310: LD_INT 87
38312: PUSH
38313: LD_INT 88
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: ST_TO_ADDR
38372: GO 38605
38374: LD_INT 3
38376: DOUBLE
38377: EQUAL
38378: IFTRUE 38382
38380: GO 38604
38382: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38383: LD_ADDR_VAR 0 4
38387: PUSH
38388: LD_INT 46
38390: PUSH
38391: LD_INT 47
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: LD_INT 82
38402: PUSH
38403: LD_INT 83
38405: PUSH
38406: LD_INT 84
38408: PUSH
38409: LD_INT 85
38411: PUSH
38412: LD_INT 86
38414: PUSH
38415: LD_INT 11
38417: PUSH
38418: LD_INT 9
38420: PUSH
38421: LD_INT 20
38423: PUSH
38424: LD_INT 19
38426: PUSH
38427: LD_INT 21
38429: PUSH
38430: LD_INT 24
38432: PUSH
38433: LD_INT 22
38435: PUSH
38436: LD_INT 25
38438: PUSH
38439: LD_INT 28
38441: PUSH
38442: LD_INT 29
38444: PUSH
38445: LD_INT 30
38447: PUSH
38448: LD_INT 31
38450: PUSH
38451: LD_INT 37
38453: PUSH
38454: LD_INT 38
38456: PUSH
38457: LD_INT 32
38459: PUSH
38460: LD_INT 27
38462: PUSH
38463: LD_INT 33
38465: PUSH
38466: LD_INT 69
38468: PUSH
38469: LD_INT 39
38471: PUSH
38472: LD_INT 34
38474: PUSH
38475: LD_INT 40
38477: PUSH
38478: LD_INT 71
38480: PUSH
38481: LD_INT 23
38483: PUSH
38484: LD_INT 44
38486: PUSH
38487: LD_INT 48
38489: PUSH
38490: LD_INT 49
38492: PUSH
38493: LD_INT 50
38495: PUSH
38496: LD_INT 51
38498: PUSH
38499: LD_INT 52
38501: PUSH
38502: LD_INT 53
38504: PUSH
38505: LD_INT 54
38507: PUSH
38508: LD_INT 55
38510: PUSH
38511: LD_INT 56
38513: PUSH
38514: LD_INT 57
38516: PUSH
38517: LD_INT 58
38519: PUSH
38520: LD_INT 59
38522: PUSH
38523: LD_INT 63
38525: PUSH
38526: LD_INT 64
38528: PUSH
38529: LD_INT 65
38531: PUSH
38532: LD_INT 82
38534: PUSH
38535: LD_INT 83
38537: PUSH
38538: LD_INT 84
38540: PUSH
38541: LD_INT 85
38543: PUSH
38544: LD_INT 86
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
38602: GO 38605
38604: POP
// if state > - 1 and state < 3 then
38605: LD_VAR 0 3
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: GREATER
38614: PUSH
38615: LD_VAR 0 3
38619: PUSH
38620: LD_INT 3
38622: LESS
38623: AND
38624: IFFALSE 38681
// for i in result do
38626: LD_ADDR_VAR 0 5
38630: PUSH
38631: LD_VAR 0 4
38635: PUSH
38636: FOR_IN
38637: IFFALSE 38679
// if GetTech ( i , side ) <> state then
38639: LD_VAR 0 5
38643: PPUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 321
38653: PUSH
38654: LD_VAR 0 3
38658: NONEQUAL
38659: IFFALSE 38677
// result := result diff i ;
38661: LD_ADDR_VAR 0 4
38665: PUSH
38666: LD_VAR 0 4
38670: PUSH
38671: LD_VAR 0 5
38675: DIFF
38676: ST_TO_ADDR
38677: GO 38636
38679: POP
38680: POP
// end ;
38681: LD_VAR 0 4
38685: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38686: LD_INT 0
38688: PPUSH
38689: PPUSH
38690: PPUSH
// result := true ;
38691: LD_ADDR_VAR 0 3
38695: PUSH
38696: LD_INT 1
38698: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38699: LD_ADDR_VAR 0 5
38703: PUSH
38704: LD_VAR 0 2
38708: PPUSH
38709: CALL_OW 480
38713: ST_TO_ADDR
// if not tmp then
38714: LD_VAR 0 5
38718: NOT
38719: IFFALSE 38723
// exit ;
38721: GO 38772
// for i in tmp do
38723: LD_ADDR_VAR 0 4
38727: PUSH
38728: LD_VAR 0 5
38732: PUSH
38733: FOR_IN
38734: IFFALSE 38770
// if GetTech ( i , side ) <> state_researched then
38736: LD_VAR 0 4
38740: PPUSH
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 321
38750: PUSH
38751: LD_INT 2
38753: NONEQUAL
38754: IFFALSE 38768
// begin result := false ;
38756: LD_ADDR_VAR 0 3
38760: PUSH
38761: LD_INT 0
38763: ST_TO_ADDR
// exit ;
38764: POP
38765: POP
38766: GO 38772
// end ;
38768: GO 38733
38770: POP
38771: POP
// end ;
38772: LD_VAR 0 3
38776: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38777: LD_INT 0
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38792: LD_VAR 0 1
38796: NOT
38797: PUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 257
38807: PUSH
38808: LD_INT 9
38810: NONEQUAL
38811: OR
38812: IFFALSE 38816
// exit ;
38814: GO 39389
// side := GetSide ( unit ) ;
38816: LD_ADDR_VAR 0 9
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 255
38830: ST_TO_ADDR
// tech_space := tech_spacanom ;
38831: LD_ADDR_VAR 0 12
38835: PUSH
38836: LD_INT 29
38838: ST_TO_ADDR
// tech_time := tech_taurad ;
38839: LD_ADDR_VAR 0 13
38843: PUSH
38844: LD_INT 28
38846: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38847: LD_ADDR_VAR 0 11
38851: PUSH
38852: LD_VAR 0 1
38856: PPUSH
38857: CALL_OW 310
38861: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38862: LD_VAR 0 11
38866: PPUSH
38867: CALL_OW 247
38871: PUSH
38872: LD_INT 2
38874: EQUAL
38875: IFFALSE 38879
// exit ;
38877: GO 39389
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38879: LD_ADDR_VAR 0 8
38883: PUSH
38884: LD_INT 81
38886: PUSH
38887: LD_VAR 0 9
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: LD_INT 21
38901: PUSH
38902: LD_INT 3
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PPUSH
38917: CALL_OW 69
38921: ST_TO_ADDR
// if not tmp then
38922: LD_VAR 0 8
38926: NOT
38927: IFFALSE 38931
// exit ;
38929: GO 39389
// if in_unit then
38931: LD_VAR 0 11
38935: IFFALSE 38959
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38937: LD_ADDR_VAR 0 10
38941: PUSH
38942: LD_VAR 0 8
38946: PPUSH
38947: LD_VAR 0 11
38951: PPUSH
38952: CALL_OW 74
38956: ST_TO_ADDR
38957: GO 38979
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38959: LD_ADDR_VAR 0 10
38963: PUSH
38964: LD_VAR 0 8
38968: PPUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 74
38978: ST_TO_ADDR
// if not enemy then
38979: LD_VAR 0 10
38983: NOT
38984: IFFALSE 38988
// exit ;
38986: GO 39389
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38988: LD_VAR 0 11
38992: PUSH
38993: LD_VAR 0 11
38997: PPUSH
38998: LD_VAR 0 10
39002: PPUSH
39003: CALL_OW 296
39007: PUSH
39008: LD_INT 13
39010: GREATER
39011: AND
39012: PUSH
39013: LD_VAR 0 1
39017: PPUSH
39018: LD_VAR 0 10
39022: PPUSH
39023: CALL_OW 296
39027: PUSH
39028: LD_INT 12
39030: GREATER
39031: OR
39032: IFFALSE 39036
// exit ;
39034: GO 39389
// missile := [ 1 ] ;
39036: LD_ADDR_VAR 0 14
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39047: LD_VAR 0 9
39051: PPUSH
39052: LD_VAR 0 12
39056: PPUSH
39057: CALL_OW 325
39061: IFFALSE 39090
// missile := Replace ( missile , missile + 1 , 2 ) ;
39063: LD_ADDR_VAR 0 14
39067: PUSH
39068: LD_VAR 0 14
39072: PPUSH
39073: LD_VAR 0 14
39077: PUSH
39078: LD_INT 1
39080: PLUS
39081: PPUSH
39082: LD_INT 2
39084: PPUSH
39085: CALL_OW 1
39089: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39090: LD_VAR 0 9
39094: PPUSH
39095: LD_VAR 0 13
39099: PPUSH
39100: CALL_OW 325
39104: PUSH
39105: LD_VAR 0 10
39109: PPUSH
39110: CALL_OW 255
39114: PPUSH
39115: LD_VAR 0 13
39119: PPUSH
39120: CALL_OW 325
39124: NOT
39125: AND
39126: IFFALSE 39155
// missile := Replace ( missile , missile + 1 , 3 ) ;
39128: LD_ADDR_VAR 0 14
39132: PUSH
39133: LD_VAR 0 14
39137: PPUSH
39138: LD_VAR 0 14
39142: PUSH
39143: LD_INT 1
39145: PLUS
39146: PPUSH
39147: LD_INT 3
39149: PPUSH
39150: CALL_OW 1
39154: ST_TO_ADDR
// if missile < 2 then
39155: LD_VAR 0 14
39159: PUSH
39160: LD_INT 2
39162: LESS
39163: IFFALSE 39167
// exit ;
39165: GO 39389
// x := GetX ( enemy ) ;
39167: LD_ADDR_VAR 0 4
39171: PUSH
39172: LD_VAR 0 10
39176: PPUSH
39177: CALL_OW 250
39181: ST_TO_ADDR
// y := GetY ( enemy ) ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: LD_VAR 0 10
39191: PPUSH
39192: CALL_OW 251
39196: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39197: LD_ADDR_VAR 0 6
39201: PUSH
39202: LD_VAR 0 4
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PPUSH
39211: LD_INT 1
39213: PPUSH
39214: CALL_OW 12
39218: PLUS
39219: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39220: LD_ADDR_VAR 0 7
39224: PUSH
39225: LD_VAR 0 5
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PPUSH
39234: LD_INT 1
39236: PPUSH
39237: CALL_OW 12
39241: PLUS
39242: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39243: LD_VAR 0 6
39247: PPUSH
39248: LD_VAR 0 7
39252: PPUSH
39253: CALL_OW 488
39257: NOT
39258: IFFALSE 39280
// begin _x := x ;
39260: LD_ADDR_VAR 0 6
39264: PUSH
39265: LD_VAR 0 4
39269: ST_TO_ADDR
// _y := y ;
39270: LD_ADDR_VAR 0 7
39274: PUSH
39275: LD_VAR 0 5
39279: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39280: LD_ADDR_VAR 0 3
39284: PUSH
39285: LD_INT 1
39287: PPUSH
39288: LD_VAR 0 14
39292: PPUSH
39293: CALL_OW 12
39297: ST_TO_ADDR
// case i of 1 :
39298: LD_VAR 0 3
39302: PUSH
39303: LD_INT 1
39305: DOUBLE
39306: EQUAL
39307: IFTRUE 39311
39309: GO 39328
39311: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39312: LD_VAR 0 1
39316: PPUSH
39317: LD_VAR 0 10
39321: PPUSH
39322: CALL_OW 115
39326: GO 39389
39328: LD_INT 2
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39358
39336: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39337: LD_VAR 0 1
39341: PPUSH
39342: LD_VAR 0 6
39346: PPUSH
39347: LD_VAR 0 7
39351: PPUSH
39352: CALL_OW 153
39356: GO 39389
39358: LD_INT 3
39360: DOUBLE
39361: EQUAL
39362: IFTRUE 39366
39364: GO 39388
39366: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39367: LD_VAR 0 1
39371: PPUSH
39372: LD_VAR 0 6
39376: PPUSH
39377: LD_VAR 0 7
39381: PPUSH
39382: CALL_OW 154
39386: GO 39389
39388: POP
// end ;
39389: LD_VAR 0 2
39393: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39394: LD_INT 0
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
// if not unit or not building then
39402: LD_VAR 0 1
39406: NOT
39407: PUSH
39408: LD_VAR 0 2
39412: NOT
39413: OR
39414: IFFALSE 39418
// exit ;
39416: GO 39576
// x := GetX ( building ) ;
39418: LD_ADDR_VAR 0 5
39422: PUSH
39423: LD_VAR 0 2
39427: PPUSH
39428: CALL_OW 250
39432: ST_TO_ADDR
// y := GetY ( building ) ;
39433: LD_ADDR_VAR 0 6
39437: PUSH
39438: LD_VAR 0 2
39442: PPUSH
39443: CALL_OW 251
39447: ST_TO_ADDR
// for i = 0 to 5 do
39448: LD_ADDR_VAR 0 4
39452: PUSH
39453: DOUBLE
39454: LD_INT 0
39456: DEC
39457: ST_TO_ADDR
39458: LD_INT 5
39460: PUSH
39461: FOR_TO
39462: IFFALSE 39574
// begin _x := ShiftX ( x , i , 3 ) ;
39464: LD_ADDR_VAR 0 7
39468: PUSH
39469: LD_VAR 0 5
39473: PPUSH
39474: LD_VAR 0 4
39478: PPUSH
39479: LD_INT 3
39481: PPUSH
39482: CALL_OW 272
39486: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39487: LD_ADDR_VAR 0 8
39491: PUSH
39492: LD_VAR 0 6
39496: PPUSH
39497: LD_VAR 0 4
39501: PPUSH
39502: LD_INT 3
39504: PPUSH
39505: CALL_OW 273
39509: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39510: LD_VAR 0 7
39514: PPUSH
39515: LD_VAR 0 8
39519: PPUSH
39520: CALL_OW 488
39524: NOT
39525: IFFALSE 39529
// continue ;
39527: GO 39461
// if HexInfo ( _x , _y ) = 0 then
39529: LD_VAR 0 7
39533: PPUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: CALL_OW 428
39543: PUSH
39544: LD_INT 0
39546: EQUAL
39547: IFFALSE 39572
// begin ComMoveXY ( unit , _x , _y ) ;
39549: LD_VAR 0 1
39553: PPUSH
39554: LD_VAR 0 7
39558: PPUSH
39559: LD_VAR 0 8
39563: PPUSH
39564: CALL_OW 111
// exit ;
39568: POP
39569: POP
39570: GO 39576
// end ; end ;
39572: GO 39461
39574: POP
39575: POP
// end ;
39576: LD_VAR 0 3
39580: RET
// export function ScanBase ( side , base_area ) ; begin
39581: LD_INT 0
39583: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39584: LD_ADDR_VAR 0 3
39588: PUSH
39589: LD_VAR 0 2
39593: PPUSH
39594: LD_INT 81
39596: PUSH
39597: LD_VAR 0 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL_OW 70
39610: ST_TO_ADDR
// end ;
39611: LD_VAR 0 3
39615: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
// result := false ;
39622: LD_ADDR_VAR 0 2
39626: PUSH
39627: LD_INT 0
39629: ST_TO_ADDR
// side := GetSide ( unit ) ;
39630: LD_ADDR_VAR 0 3
39634: PUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 255
39644: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39645: LD_ADDR_VAR 0 4
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 248
39659: ST_TO_ADDR
// case nat of 1 :
39660: LD_VAR 0 4
39664: PUSH
39665: LD_INT 1
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 39684
39673: POP
// tech := tech_lassight ; 2 :
39674: LD_ADDR_VAR 0 5
39678: PUSH
39679: LD_INT 12
39681: ST_TO_ADDR
39682: GO 39723
39684: LD_INT 2
39686: DOUBLE
39687: EQUAL
39688: IFTRUE 39692
39690: GO 39703
39692: POP
// tech := tech_mortar ; 3 :
39693: LD_ADDR_VAR 0 5
39697: PUSH
39698: LD_INT 41
39700: ST_TO_ADDR
39701: GO 39723
39703: LD_INT 3
39705: DOUBLE
39706: EQUAL
39707: IFTRUE 39711
39709: GO 39722
39711: POP
// tech := tech_bazooka ; end ;
39712: LD_ADDR_VAR 0 5
39716: PUSH
39717: LD_INT 44
39719: ST_TO_ADDR
39720: GO 39723
39722: POP
// if Researched ( side , tech ) then
39723: LD_VAR 0 3
39727: PPUSH
39728: LD_VAR 0 5
39732: PPUSH
39733: CALL_OW 325
39737: IFFALSE 39764
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39739: LD_ADDR_VAR 0 2
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: LD_INT 8
39749: PUSH
39750: LD_INT 9
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: PUSH
39758: LD_VAR 0 4
39762: ARRAY
39763: ST_TO_ADDR
// end ;
39764: LD_VAR 0 2
39768: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39769: LD_INT 0
39771: PPUSH
39772: PPUSH
39773: PPUSH
// if not mines then
39774: LD_VAR 0 2
39778: NOT
39779: IFFALSE 39783
// exit ;
39781: GO 39927
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39783: LD_ADDR_VAR 0 5
39787: PUSH
39788: LD_INT 81
39790: PUSH
39791: LD_VAR 0 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: LD_INT 21
39805: PUSH
39806: LD_INT 3
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PPUSH
39821: CALL_OW 69
39825: ST_TO_ADDR
// for i in mines do
39826: LD_ADDR_VAR 0 4
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: FOR_IN
39837: IFFALSE 39925
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39839: LD_VAR 0 4
39843: PUSH
39844: LD_INT 1
39846: ARRAY
39847: PPUSH
39848: LD_VAR 0 4
39852: PUSH
39853: LD_INT 2
39855: ARRAY
39856: PPUSH
39857: CALL_OW 458
39861: NOT
39862: IFFALSE 39866
// continue ;
39864: GO 39836
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39866: LD_VAR 0 4
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: PPUSH
39875: LD_VAR 0 4
39879: PUSH
39880: LD_INT 2
39882: ARRAY
39883: PPUSH
39884: CALL_OW 428
39888: PUSH
39889: LD_VAR 0 5
39893: IN
39894: IFFALSE 39923
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39896: LD_VAR 0 4
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PPUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_INT 2
39912: ARRAY
39913: PPUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 456
// end ;
39923: GO 39836
39925: POP
39926: POP
// end ;
39927: LD_VAR 0 3
39931: RET
// export function Count ( array ) ; var i ; begin
39932: LD_INT 0
39934: PPUSH
39935: PPUSH
// result := 0 ;
39936: LD_ADDR_VAR 0 2
39940: PUSH
39941: LD_INT 0
39943: ST_TO_ADDR
// for i in array do
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_VAR 0 1
39953: PUSH
39954: FOR_IN
39955: IFFALSE 39979
// if i then
39957: LD_VAR 0 3
39961: IFFALSE 39977
// result := result + 1 ;
39963: LD_ADDR_VAR 0 2
39967: PUSH
39968: LD_VAR 0 2
39972: PUSH
39973: LD_INT 1
39975: PLUS
39976: ST_TO_ADDR
39977: GO 39954
39979: POP
39980: POP
// end ;
39981: LD_VAR 0 2
39985: RET
// export function IsEmpty ( building ) ; begin
39986: LD_INT 0
39988: PPUSH
// if not building then
39989: LD_VAR 0 1
39993: NOT
39994: IFFALSE 39998
// exit ;
39996: GO 40041
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39998: LD_ADDR_VAR 0 2
40002: PUSH
40003: LD_VAR 0 1
40007: PUSH
40008: LD_INT 22
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: CALL_OW 255
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 58
40027: PUSH
40028: EMPTY
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PPUSH
40035: CALL_OW 69
40039: IN
40040: ST_TO_ADDR
// end ;
40041: LD_VAR 0 2
40045: RET
// export function IsNotFull ( building ) ; var places ; begin
40046: LD_INT 0
40048: PPUSH
40049: PPUSH
// if not building then
40050: LD_VAR 0 1
40054: NOT
40055: IFFALSE 40059
// exit ;
40057: GO 40230
// result := false ;
40059: LD_ADDR_VAR 0 2
40063: PUSH
40064: LD_INT 0
40066: ST_TO_ADDR
// places := 0 ;
40067: LD_ADDR_VAR 0 3
40071: PUSH
40072: LD_INT 0
40074: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL_OW 266
40084: PUSH
40085: LD_INT 0
40087: DOUBLE
40088: EQUAL
40089: IFTRUE 40147
40091: LD_INT 1
40093: DOUBLE
40094: EQUAL
40095: IFTRUE 40147
40097: LD_INT 6
40099: DOUBLE
40100: EQUAL
40101: IFTRUE 40147
40103: LD_INT 7
40105: DOUBLE
40106: EQUAL
40107: IFTRUE 40147
40109: LD_INT 8
40111: DOUBLE
40112: EQUAL
40113: IFTRUE 40147
40115: LD_INT 4
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40147
40121: LD_INT 5
40123: DOUBLE
40124: EQUAL
40125: IFTRUE 40147
40127: LD_INT 2
40129: DOUBLE
40130: EQUAL
40131: IFTRUE 40147
40133: LD_INT 3
40135: DOUBLE
40136: EQUAL
40137: IFTRUE 40147
40139: LD_INT 35
40141: DOUBLE
40142: EQUAL
40143: IFTRUE 40147
40145: GO 40158
40147: POP
// places := 6 ; b_bunker , b_breastwork :
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_INT 6
40155: ST_TO_ADDR
40156: GO 40203
40158: LD_INT 32
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40172
40164: LD_INT 31
40166: DOUBLE
40167: EQUAL
40168: IFTRUE 40172
40170: GO 40183
40172: POP
// places := 1 ; b_control_tower :
40173: LD_ADDR_VAR 0 3
40177: PUSH
40178: LD_INT 1
40180: ST_TO_ADDR
40181: GO 40203
40183: LD_INT 36
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40202
40191: POP
// places := 3 ; end ;
40192: LD_ADDR_VAR 0 3
40196: PUSH
40197: LD_INT 3
40199: ST_TO_ADDR
40200: GO 40203
40202: POP
// if places then
40203: LD_VAR 0 3
40207: IFFALSE 40230
// result := UnitsInside ( building ) < places ;
40209: LD_ADDR_VAR 0 2
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 313
40223: PUSH
40224: LD_VAR 0 3
40228: LESS
40229: ST_TO_ADDR
// end ;
40230: LD_VAR 0 2
40234: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40235: LD_INT 0
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
// tmp := [ ] ;
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: EMPTY
40247: ST_TO_ADDR
// list := [ ] ;
40248: LD_ADDR_VAR 0 5
40252: PUSH
40253: EMPTY
40254: ST_TO_ADDR
// for i = 16 to 25 do
40255: LD_ADDR_VAR 0 4
40259: PUSH
40260: DOUBLE
40261: LD_INT 16
40263: DEC
40264: ST_TO_ADDR
40265: LD_INT 25
40267: PUSH
40268: FOR_TO
40269: IFFALSE 40342
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40271: LD_ADDR_VAR 0 3
40275: PUSH
40276: LD_VAR 0 3
40280: PUSH
40281: LD_INT 22
40283: PUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 255
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 91
40300: PUSH
40301: LD_VAR 0 1
40305: PUSH
40306: LD_INT 6
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 30
40316: PUSH
40317: LD_VAR 0 4
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: PUSH
40331: EMPTY
40332: LIST
40333: PPUSH
40334: CALL_OW 69
40338: ADD
40339: ST_TO_ADDR
40340: GO 40268
40342: POP
40343: POP
// for i = 1 to tmp do
40344: LD_ADDR_VAR 0 4
40348: PUSH
40349: DOUBLE
40350: LD_INT 1
40352: DEC
40353: ST_TO_ADDR
40354: LD_VAR 0 3
40358: PUSH
40359: FOR_TO
40360: IFFALSE 40448
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40362: LD_ADDR_VAR 0 5
40366: PUSH
40367: LD_VAR 0 5
40371: PUSH
40372: LD_VAR 0 3
40376: PUSH
40377: LD_VAR 0 4
40381: ARRAY
40382: PPUSH
40383: CALL_OW 266
40387: PUSH
40388: LD_VAR 0 3
40392: PUSH
40393: LD_VAR 0 4
40397: ARRAY
40398: PPUSH
40399: CALL_OW 250
40403: PUSH
40404: LD_VAR 0 3
40408: PUSH
40409: LD_VAR 0 4
40413: ARRAY
40414: PPUSH
40415: CALL_OW 251
40419: PUSH
40420: LD_VAR 0 3
40424: PUSH
40425: LD_VAR 0 4
40429: ARRAY
40430: PPUSH
40431: CALL_OW 254
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: ADD
40445: ST_TO_ADDR
40446: GO 40359
40448: POP
40449: POP
// result := list ;
40450: LD_ADDR_VAR 0 2
40454: PUSH
40455: LD_VAR 0 5
40459: ST_TO_ADDR
// end ;
40460: LD_VAR 0 2
40464: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40465: LD_INT 0
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
// if not factory then
40474: LD_VAR 0 1
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 41076
// if control = control_apeman then
40483: LD_VAR 0 4
40487: PUSH
40488: LD_INT 5
40490: EQUAL
40491: IFFALSE 40600
// begin tmp := UnitsInside ( factory ) ;
40493: LD_ADDR_VAR 0 8
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 313
40507: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40508: LD_VAR 0 8
40512: PPUSH
40513: LD_INT 25
40515: PUSH
40516: LD_INT 12
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PPUSH
40523: CALL_OW 72
40527: NOT
40528: IFFALSE 40538
// control := control_manual ;
40530: LD_ADDR_VAR 0 4
40534: PUSH
40535: LD_INT 1
40537: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40538: LD_ADDR_VAR 0 8
40542: PUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: CALL 40235 0 1
40552: ST_TO_ADDR
// if tmp then
40553: LD_VAR 0 8
40557: IFFALSE 40600
// begin for i in tmp do
40559: LD_ADDR_VAR 0 7
40563: PUSH
40564: LD_VAR 0 8
40568: PUSH
40569: FOR_IN
40570: IFFALSE 40598
// if i [ 1 ] = b_ext_radio then
40572: LD_VAR 0 7
40576: PUSH
40577: LD_INT 1
40579: ARRAY
40580: PUSH
40581: LD_INT 22
40583: EQUAL
40584: IFFALSE 40596
// begin control := control_remote ;
40586: LD_ADDR_VAR 0 4
40590: PUSH
40591: LD_INT 2
40593: ST_TO_ADDR
// break ;
40594: GO 40598
// end ;
40596: GO 40569
40598: POP
40599: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40600: LD_VAR 0 1
40604: PPUSH
40605: LD_VAR 0 2
40609: PPUSH
40610: LD_VAR 0 3
40614: PPUSH
40615: LD_VAR 0 4
40619: PPUSH
40620: LD_VAR 0 5
40624: PPUSH
40625: CALL_OW 448
40629: IFFALSE 40664
// begin result := [ chassis , engine , control , weapon ] ;
40631: LD_ADDR_VAR 0 6
40635: PUSH
40636: LD_VAR 0 2
40640: PUSH
40641: LD_VAR 0 3
40645: PUSH
40646: LD_VAR 0 4
40650: PUSH
40651: LD_VAR 0 5
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: ST_TO_ADDR
// exit ;
40662: GO 41076
// end ; _chassis := AvailableChassisList ( factory ) ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 475
40678: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40679: LD_ADDR_VAR 0 11
40683: PUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 476
40693: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40694: LD_ADDR_VAR 0 12
40698: PUSH
40699: LD_VAR 0 1
40703: PPUSH
40704: CALL_OW 477
40708: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40709: LD_ADDR_VAR 0 10
40713: PUSH
40714: LD_VAR 0 1
40718: PPUSH
40719: CALL_OW 478
40723: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40724: LD_VAR 0 9
40728: NOT
40729: PUSH
40730: LD_VAR 0 11
40734: NOT
40735: OR
40736: PUSH
40737: LD_VAR 0 12
40741: NOT
40742: OR
40743: PUSH
40744: LD_VAR 0 10
40748: NOT
40749: OR
40750: IFFALSE 40785
// begin result := [ chassis , engine , control , weapon ] ;
40752: LD_ADDR_VAR 0 6
40756: PUSH
40757: LD_VAR 0 2
40761: PUSH
40762: LD_VAR 0 3
40766: PUSH
40767: LD_VAR 0 4
40771: PUSH
40772: LD_VAR 0 5
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: ST_TO_ADDR
// exit ;
40783: GO 41076
// end ; if not chassis in _chassis then
40785: LD_VAR 0 2
40789: PUSH
40790: LD_VAR 0 9
40794: IN
40795: NOT
40796: IFFALSE 40822
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40798: LD_ADDR_VAR 0 2
40802: PUSH
40803: LD_VAR 0 9
40807: PUSH
40808: LD_INT 1
40810: PPUSH
40811: LD_VAR 0 9
40815: PPUSH
40816: CALL_OW 12
40820: ARRAY
40821: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40822: LD_VAR 0 2
40826: PPUSH
40827: LD_VAR 0 3
40831: PPUSH
40832: CALL 41081 0 2
40836: NOT
40837: IFFALSE 40896
// repeat engine := _engine [ 1 ] ;
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_VAR 0 11
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40853: LD_ADDR_VAR 0 11
40857: PUSH
40858: LD_VAR 0 11
40862: PPUSH
40863: LD_INT 1
40865: PPUSH
40866: CALL_OW 3
40870: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40871: LD_VAR 0 2
40875: PPUSH
40876: LD_VAR 0 3
40880: PPUSH
40881: CALL 41081 0 2
40885: PUSH
40886: LD_VAR 0 11
40890: PUSH
40891: EMPTY
40892: EQUAL
40893: OR
40894: IFFALSE 40839
// if not control in _control then
40896: LD_VAR 0 4
40900: PUSH
40901: LD_VAR 0 12
40905: IN
40906: NOT
40907: IFFALSE 40933
// control := _control [ rand ( 1 , _control ) ] ;
40909: LD_ADDR_VAR 0 4
40913: PUSH
40914: LD_VAR 0 12
40918: PUSH
40919: LD_INT 1
40921: PPUSH
40922: LD_VAR 0 12
40926: PPUSH
40927: CALL_OW 12
40931: ARRAY
40932: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40933: LD_VAR 0 2
40937: PPUSH
40938: LD_VAR 0 5
40942: PPUSH
40943: CALL 41301 0 2
40947: NOT
40948: IFFALSE 41007
// repeat weapon := _weapon [ 1 ] ;
40950: LD_ADDR_VAR 0 5
40954: PUSH
40955: LD_VAR 0 10
40959: PUSH
40960: LD_INT 1
40962: ARRAY
40963: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40964: LD_ADDR_VAR 0 10
40968: PUSH
40969: LD_VAR 0 10
40973: PPUSH
40974: LD_INT 1
40976: PPUSH
40977: CALL_OW 3
40981: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40982: LD_VAR 0 2
40986: PPUSH
40987: LD_VAR 0 5
40991: PPUSH
40992: CALL 41301 0 2
40996: PUSH
40997: LD_VAR 0 10
41001: PUSH
41002: EMPTY
41003: EQUAL
41004: OR
41005: IFFALSE 40950
// result := [ ] ;
41007: LD_ADDR_VAR 0 6
41011: PUSH
41012: EMPTY
41013: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41014: LD_VAR 0 1
41018: PPUSH
41019: LD_VAR 0 2
41023: PPUSH
41024: LD_VAR 0 3
41028: PPUSH
41029: LD_VAR 0 4
41033: PPUSH
41034: LD_VAR 0 5
41038: PPUSH
41039: CALL_OW 448
41043: IFFALSE 41076
// result := [ chassis , engine , control , weapon ] ;
41045: LD_ADDR_VAR 0 6
41049: PUSH
41050: LD_VAR 0 2
41054: PUSH
41055: LD_VAR 0 3
41059: PUSH
41060: LD_VAR 0 4
41064: PUSH
41065: LD_VAR 0 5
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: ST_TO_ADDR
// end ;
41076: LD_VAR 0 6
41080: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41081: LD_INT 0
41083: PPUSH
// if not chassis or not engine then
41084: LD_VAR 0 1
41088: NOT
41089: PUSH
41090: LD_VAR 0 2
41094: NOT
41095: OR
41096: IFFALSE 41100
// exit ;
41098: GO 41296
// case engine of engine_solar :
41100: LD_VAR 0 2
41104: PUSH
41105: LD_INT 2
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41113
41111: GO 41151
41113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: LD_INT 11
41121: PUSH
41122: LD_INT 12
41124: PUSH
41125: LD_INT 13
41127: PUSH
41128: LD_INT 14
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: ST_TO_ADDR
41149: GO 41280
41151: LD_INT 1
41153: DOUBLE
41154: EQUAL
41155: IFTRUE 41159
41157: GO 41221
41159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41160: LD_ADDR_VAR 0 3
41164: PUSH
41165: LD_INT 11
41167: PUSH
41168: LD_INT 12
41170: PUSH
41171: LD_INT 13
41173: PUSH
41174: LD_INT 14
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 3
41185: PUSH
41186: LD_INT 4
41188: PUSH
41189: LD_INT 5
41191: PUSH
41192: LD_INT 21
41194: PUSH
41195: LD_INT 23
41197: PUSH
41198: LD_INT 22
41200: PUSH
41201: LD_INT 24
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
41219: GO 41280
41221: LD_INT 3
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41279
41229: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_INT 13
41237: PUSH
41238: LD_INT 14
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: LD_INT 3
41246: PUSH
41247: LD_INT 4
41249: PUSH
41250: LD_INT 5
41252: PUSH
41253: LD_INT 21
41255: PUSH
41256: LD_INT 22
41258: PUSH
41259: LD_INT 23
41261: PUSH
41262: LD_INT 24
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: ST_TO_ADDR
41277: GO 41280
41279: POP
// result := ( chassis in result ) ;
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_VAR 0 1
41289: PUSH
41290: LD_VAR 0 3
41294: IN
41295: ST_TO_ADDR
// end ;
41296: LD_VAR 0 3
41300: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41301: LD_INT 0
41303: PPUSH
// if not chassis or not weapon then
41304: LD_VAR 0 1
41308: NOT
41309: PUSH
41310: LD_VAR 0 2
41314: NOT
41315: OR
41316: IFFALSE 41320
// exit ;
41318: GO 42380
// case weapon of us_machine_gun :
41320: LD_VAR 0 2
41324: PUSH
41325: LD_INT 2
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 41363
41333: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41334: LD_ADDR_VAR 0 3
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: LD_INT 4
41350: PUSH
41351: LD_INT 5
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: ST_TO_ADDR
41361: GO 42364
41363: LD_INT 3
41365: DOUBLE
41366: EQUAL
41367: IFTRUE 41371
41369: GO 41401
41371: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41372: LD_ADDR_VAR 0 3
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 3
41385: PUSH
41386: LD_INT 4
41388: PUSH
41389: LD_INT 5
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
41399: GO 42364
41401: LD_INT 11
41403: DOUBLE
41404: EQUAL
41405: IFTRUE 41409
41407: GO 41439
41409: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41410: LD_ADDR_VAR 0 3
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 4
41426: PUSH
41427: LD_INT 5
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: ST_TO_ADDR
41437: GO 42364
41439: LD_INT 4
41441: DOUBLE
41442: EQUAL
41443: IFTRUE 41447
41445: GO 41473
41447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41448: LD_ADDR_VAR 0 3
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 4
41461: PUSH
41462: LD_INT 5
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
41471: GO 42364
41473: LD_INT 5
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41481
41479: GO 41507
41481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41482: LD_ADDR_VAR 0 3
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: LD_INT 4
41495: PUSH
41496: LD_INT 5
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: ST_TO_ADDR
41505: GO 42364
41507: LD_INT 9
41509: DOUBLE
41510: EQUAL
41511: IFTRUE 41515
41513: GO 41541
41515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41516: LD_ADDR_VAR 0 3
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: LD_INT 4
41529: PUSH
41530: LD_INT 5
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: ST_TO_ADDR
41539: GO 42364
41541: LD_INT 7
41543: DOUBLE
41544: EQUAL
41545: IFTRUE 41549
41547: GO 41575
41549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 3
41560: PUSH
41561: LD_INT 4
41563: PUSH
41564: LD_INT 5
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
41573: GO 42364
41575: LD_INT 12
41577: DOUBLE
41578: EQUAL
41579: IFTRUE 41583
41581: GO 41609
41583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41584: LD_ADDR_VAR 0 3
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 3
41594: PUSH
41595: LD_INT 4
41597: PUSH
41598: LD_INT 5
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: ST_TO_ADDR
41607: GO 42364
41609: LD_INT 13
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 41643
41617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 4
41631: PUSH
41632: LD_INT 5
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: ST_TO_ADDR
41641: GO 42364
41643: LD_INT 14
41645: DOUBLE
41646: EQUAL
41647: IFTRUE 41651
41649: GO 41669
41651: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41652: LD_ADDR_VAR 0 3
41656: PUSH
41657: LD_INT 4
41659: PUSH
41660: LD_INT 5
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: ST_TO_ADDR
41667: GO 42364
41669: LD_INT 6
41671: DOUBLE
41672: EQUAL
41673: IFTRUE 41677
41675: GO 41695
41677: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41678: LD_ADDR_VAR 0 3
41682: PUSH
41683: LD_INT 4
41685: PUSH
41686: LD_INT 5
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: ST_TO_ADDR
41693: GO 42364
41695: LD_INT 10
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41703
41701: GO 41721
41703: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41704: LD_ADDR_VAR 0 3
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: ST_TO_ADDR
41719: GO 42364
41721: LD_INT 22
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41729
41727: GO 41755
41729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_INT 11
41737: PUSH
41738: LD_INT 12
41740: PUSH
41741: LD_INT 13
41743: PUSH
41744: LD_INT 14
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
41753: GO 42364
41755: LD_INT 23
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41789
41763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_INT 11
41771: PUSH
41772: LD_INT 12
41774: PUSH
41775: LD_INT 13
41777: PUSH
41778: LD_INT 14
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
41787: GO 42364
41789: LD_INT 24
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41797
41795: GO 41823
41797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_INT 11
41805: PUSH
41806: LD_INT 12
41808: PUSH
41809: LD_INT 13
41811: PUSH
41812: LD_INT 14
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
41821: GO 42364
41823: LD_INT 30
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41831
41829: GO 41857
41831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_INT 11
41839: PUSH
41840: LD_INT 12
41842: PUSH
41843: LD_INT 13
41845: PUSH
41846: LD_INT 14
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
41855: GO 42364
41857: LD_INT 25
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41883
41865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 13
41873: PUSH
41874: LD_INT 14
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: ST_TO_ADDR
41881: GO 42364
41883: LD_INT 27
41885: DOUBLE
41886: EQUAL
41887: IFTRUE 41891
41889: GO 41909
41891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41892: LD_ADDR_VAR 0 3
41896: PUSH
41897: LD_INT 13
41899: PUSH
41900: LD_INT 14
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: ST_TO_ADDR
41907: GO 42364
41909: LD_INT 92
41911: DOUBLE
41912: EQUAL
41913: IFTRUE 41917
41915: GO 41943
41917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41918: LD_ADDR_VAR 0 3
41922: PUSH
41923: LD_INT 11
41925: PUSH
41926: LD_INT 12
41928: PUSH
41929: LD_INT 13
41931: PUSH
41932: LD_INT 14
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: ST_TO_ADDR
41941: GO 42364
41943: LD_INT 28
41945: DOUBLE
41946: EQUAL
41947: IFTRUE 41951
41949: GO 41969
41951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41952: LD_ADDR_VAR 0 3
41956: PUSH
41957: LD_INT 13
41959: PUSH
41960: LD_INT 14
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: ST_TO_ADDR
41967: GO 42364
41969: LD_INT 29
41971: DOUBLE
41972: EQUAL
41973: IFTRUE 41977
41975: GO 41995
41977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 13
41985: PUSH
41986: LD_INT 14
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: ST_TO_ADDR
41993: GO 42364
41995: LD_INT 31
41997: DOUBLE
41998: EQUAL
41999: IFTRUE 42003
42001: GO 42021
42003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42004: LD_ADDR_VAR 0 3
42008: PUSH
42009: LD_INT 13
42011: PUSH
42012: LD_INT 14
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: ST_TO_ADDR
42019: GO 42364
42021: LD_INT 26
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42029
42027: GO 42047
42029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42030: LD_ADDR_VAR 0 3
42034: PUSH
42035: LD_INT 13
42037: PUSH
42038: LD_INT 14
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: ST_TO_ADDR
42045: GO 42364
42047: LD_INT 42
42049: DOUBLE
42050: EQUAL
42051: IFTRUE 42055
42053: GO 42081
42055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42056: LD_ADDR_VAR 0 3
42060: PUSH
42061: LD_INT 21
42063: PUSH
42064: LD_INT 22
42066: PUSH
42067: LD_INT 23
42069: PUSH
42070: LD_INT 24
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
42079: GO 42364
42081: LD_INT 43
42083: DOUBLE
42084: EQUAL
42085: IFTRUE 42089
42087: GO 42115
42089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_INT 21
42097: PUSH
42098: LD_INT 22
42100: PUSH
42101: LD_INT 23
42103: PUSH
42104: LD_INT 24
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: ST_TO_ADDR
42113: GO 42364
42115: LD_INT 44
42117: DOUBLE
42118: EQUAL
42119: IFTRUE 42123
42121: GO 42149
42123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_INT 21
42131: PUSH
42132: LD_INT 22
42134: PUSH
42135: LD_INT 23
42137: PUSH
42138: LD_INT 24
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: ST_TO_ADDR
42147: GO 42364
42149: LD_INT 45
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42183
42157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_INT 21
42165: PUSH
42166: LD_INT 22
42168: PUSH
42169: LD_INT 23
42171: PUSH
42172: LD_INT 24
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
42181: GO 42364
42183: LD_INT 49
42185: DOUBLE
42186: EQUAL
42187: IFTRUE 42191
42189: GO 42217
42191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42192: LD_ADDR_VAR 0 3
42196: PUSH
42197: LD_INT 21
42199: PUSH
42200: LD_INT 22
42202: PUSH
42203: LD_INT 23
42205: PUSH
42206: LD_INT 24
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
42215: GO 42364
42217: LD_INT 51
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42225
42223: GO 42251
42225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: LD_INT 21
42233: PUSH
42234: LD_INT 22
42236: PUSH
42237: LD_INT 23
42239: PUSH
42240: LD_INT 24
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: ST_TO_ADDR
42249: GO 42364
42251: LD_INT 52
42253: DOUBLE
42254: EQUAL
42255: IFTRUE 42259
42257: GO 42285
42259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42260: LD_ADDR_VAR 0 3
42264: PUSH
42265: LD_INT 21
42267: PUSH
42268: LD_INT 22
42270: PUSH
42271: LD_INT 23
42273: PUSH
42274: LD_INT 24
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
42283: GO 42364
42285: LD_INT 53
42287: DOUBLE
42288: EQUAL
42289: IFTRUE 42293
42291: GO 42311
42293: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_INT 23
42301: PUSH
42302: LD_INT 24
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: ST_TO_ADDR
42309: GO 42364
42311: LD_INT 46
42313: DOUBLE
42314: EQUAL
42315: IFTRUE 42319
42317: GO 42337
42319: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: LD_INT 23
42327: PUSH
42328: LD_INT 24
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: ST_TO_ADDR
42335: GO 42364
42337: LD_INT 47
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42363
42345: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_INT 23
42353: PUSH
42354: LD_INT 24
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: ST_TO_ADDR
42361: GO 42364
42363: POP
// result := ( chassis in result ) ;
42364: LD_ADDR_VAR 0 3
42368: PUSH
42369: LD_VAR 0 1
42373: PUSH
42374: LD_VAR 0 3
42378: IN
42379: ST_TO_ADDR
// end ;
42380: LD_VAR 0 3
42384: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42385: LD_INT 0
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
// result := array ;
42394: LD_ADDR_VAR 0 5
42398: PUSH
42399: LD_VAR 0 1
42403: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42404: LD_VAR 0 1
42408: NOT
42409: PUSH
42410: LD_VAR 0 2
42414: NOT
42415: OR
42416: PUSH
42417: LD_VAR 0 3
42421: NOT
42422: OR
42423: PUSH
42424: LD_VAR 0 2
42428: PUSH
42429: LD_VAR 0 1
42433: GREATER
42434: OR
42435: PUSH
42436: LD_VAR 0 3
42440: PUSH
42441: LD_VAR 0 1
42445: GREATER
42446: OR
42447: IFFALSE 42451
// exit ;
42449: GO 42747
// if direction then
42451: LD_VAR 0 4
42455: IFFALSE 42519
// begin d := 1 ;
42457: LD_ADDR_VAR 0 9
42461: PUSH
42462: LD_INT 1
42464: ST_TO_ADDR
// if i_from > i_to then
42465: LD_VAR 0 2
42469: PUSH
42470: LD_VAR 0 3
42474: GREATER
42475: IFFALSE 42501
// length := ( array - i_from ) + i_to else
42477: LD_ADDR_VAR 0 11
42481: PUSH
42482: LD_VAR 0 1
42486: PUSH
42487: LD_VAR 0 2
42491: MINUS
42492: PUSH
42493: LD_VAR 0 3
42497: PLUS
42498: ST_TO_ADDR
42499: GO 42517
// length := i_to - i_from ;
42501: LD_ADDR_VAR 0 11
42505: PUSH
42506: LD_VAR 0 3
42510: PUSH
42511: LD_VAR 0 2
42515: MINUS
42516: ST_TO_ADDR
// end else
42517: GO 42580
// begin d := - 1 ;
42519: LD_ADDR_VAR 0 9
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: ST_TO_ADDR
// if i_from > i_to then
42528: LD_VAR 0 2
42532: PUSH
42533: LD_VAR 0 3
42537: GREATER
42538: IFFALSE 42558
// length := i_from - i_to else
42540: LD_ADDR_VAR 0 11
42544: PUSH
42545: LD_VAR 0 2
42549: PUSH
42550: LD_VAR 0 3
42554: MINUS
42555: ST_TO_ADDR
42556: GO 42580
// length := ( array - i_to ) + i_from ;
42558: LD_ADDR_VAR 0 11
42562: PUSH
42563: LD_VAR 0 1
42567: PUSH
42568: LD_VAR 0 3
42572: MINUS
42573: PUSH
42574: LD_VAR 0 2
42578: PLUS
42579: ST_TO_ADDR
// end ; if not length then
42580: LD_VAR 0 11
42584: NOT
42585: IFFALSE 42589
// exit ;
42587: GO 42747
// tmp := array ;
42589: LD_ADDR_VAR 0 10
42593: PUSH
42594: LD_VAR 0 1
42598: ST_TO_ADDR
// for i = 1 to length do
42599: LD_ADDR_VAR 0 6
42603: PUSH
42604: DOUBLE
42605: LD_INT 1
42607: DEC
42608: ST_TO_ADDR
42609: LD_VAR 0 11
42613: PUSH
42614: FOR_TO
42615: IFFALSE 42735
// begin for j = 1 to array do
42617: LD_ADDR_VAR 0 7
42621: PUSH
42622: DOUBLE
42623: LD_INT 1
42625: DEC
42626: ST_TO_ADDR
42627: LD_VAR 0 1
42631: PUSH
42632: FOR_TO
42633: IFFALSE 42721
// begin k := j + d ;
42635: LD_ADDR_VAR 0 8
42639: PUSH
42640: LD_VAR 0 7
42644: PUSH
42645: LD_VAR 0 9
42649: PLUS
42650: ST_TO_ADDR
// if k > array then
42651: LD_VAR 0 8
42655: PUSH
42656: LD_VAR 0 1
42660: GREATER
42661: IFFALSE 42671
// k := 1 ;
42663: LD_ADDR_VAR 0 8
42667: PUSH
42668: LD_INT 1
42670: ST_TO_ADDR
// if not k then
42671: LD_VAR 0 8
42675: NOT
42676: IFFALSE 42688
// k := array ;
42678: LD_ADDR_VAR 0 8
42682: PUSH
42683: LD_VAR 0 1
42687: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42688: LD_ADDR_VAR 0 10
42692: PUSH
42693: LD_VAR 0 10
42697: PPUSH
42698: LD_VAR 0 8
42702: PPUSH
42703: LD_VAR 0 1
42707: PUSH
42708: LD_VAR 0 7
42712: ARRAY
42713: PPUSH
42714: CALL_OW 1
42718: ST_TO_ADDR
// end ;
42719: GO 42632
42721: POP
42722: POP
// array := tmp ;
42723: LD_ADDR_VAR 0 1
42727: PUSH
42728: LD_VAR 0 10
42732: ST_TO_ADDR
// end ;
42733: GO 42614
42735: POP
42736: POP
// result := array ;
42737: LD_ADDR_VAR 0 5
42741: PUSH
42742: LD_VAR 0 1
42746: ST_TO_ADDR
// end ;
42747: LD_VAR 0 5
42751: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42752: LD_INT 0
42754: PPUSH
42755: PPUSH
// result := 0 ;
42756: LD_ADDR_VAR 0 3
42760: PUSH
42761: LD_INT 0
42763: ST_TO_ADDR
// if not array or not value in array then
42764: LD_VAR 0 1
42768: NOT
42769: PUSH
42770: LD_VAR 0 2
42774: PUSH
42775: LD_VAR 0 1
42779: IN
42780: NOT
42781: OR
42782: IFFALSE 42786
// exit ;
42784: GO 42840
// for i = 1 to array do
42786: LD_ADDR_VAR 0 4
42790: PUSH
42791: DOUBLE
42792: LD_INT 1
42794: DEC
42795: ST_TO_ADDR
42796: LD_VAR 0 1
42800: PUSH
42801: FOR_TO
42802: IFFALSE 42838
// if value = array [ i ] then
42804: LD_VAR 0 2
42808: PUSH
42809: LD_VAR 0 1
42813: PUSH
42814: LD_VAR 0 4
42818: ARRAY
42819: EQUAL
42820: IFFALSE 42836
// begin result := i ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_VAR 0 4
42831: ST_TO_ADDR
// exit ;
42832: POP
42833: POP
42834: GO 42840
// end ;
42836: GO 42801
42838: POP
42839: POP
// end ;
42840: LD_VAR 0 3
42844: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42845: LD_INT 0
42847: PPUSH
// vc_chassis := chassis ;
42848: LD_ADDR_OWVAR 37
42852: PUSH
42853: LD_VAR 0 1
42857: ST_TO_ADDR
// vc_engine := engine ;
42858: LD_ADDR_OWVAR 39
42862: PUSH
42863: LD_VAR 0 2
42867: ST_TO_ADDR
// vc_control := control ;
42868: LD_ADDR_OWVAR 38
42872: PUSH
42873: LD_VAR 0 3
42877: ST_TO_ADDR
// vc_weapon := weapon ;
42878: LD_ADDR_OWVAR 40
42882: PUSH
42883: LD_VAR 0 4
42887: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42888: LD_ADDR_OWVAR 41
42892: PUSH
42893: LD_VAR 0 5
42897: ST_TO_ADDR
// end ;
42898: LD_VAR 0 6
42902: RET
// export function WantPlant ( unit ) ; var task ; begin
42903: LD_INT 0
42905: PPUSH
42906: PPUSH
// result := false ;
42907: LD_ADDR_VAR 0 2
42911: PUSH
42912: LD_INT 0
42914: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 437
42929: ST_TO_ADDR
// if task then
42930: LD_VAR 0 3
42934: IFFALSE 42962
// if task [ 1 ] [ 1 ] = p then
42936: LD_VAR 0 3
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: PUSH
42945: LD_INT 1
42947: ARRAY
42948: PUSH
42949: LD_STRING p
42951: EQUAL
42952: IFFALSE 42962
// result := true ;
42954: LD_ADDR_VAR 0 2
42958: PUSH
42959: LD_INT 1
42961: ST_TO_ADDR
// end ;
42962: LD_VAR 0 2
42966: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
42971: PPUSH
42972: PPUSH
// if pos < 1 then
42973: LD_VAR 0 2
42977: PUSH
42978: LD_INT 1
42980: LESS
42981: IFFALSE 42985
// exit ;
42983: GO 43288
// if pos = 1 then
42985: LD_VAR 0 2
42989: PUSH
42990: LD_INT 1
42992: EQUAL
42993: IFFALSE 43026
// result := Replace ( arr , pos [ 1 ] , value ) else
42995: LD_ADDR_VAR 0 4
42999: PUSH
43000: LD_VAR 0 1
43004: PPUSH
43005: LD_VAR 0 2
43009: PUSH
43010: LD_INT 1
43012: ARRAY
43013: PPUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: CALL_OW 1
43023: ST_TO_ADDR
43024: GO 43288
// begin tmp := arr ;
43026: LD_ADDR_VAR 0 6
43030: PUSH
43031: LD_VAR 0 1
43035: ST_TO_ADDR
// s_arr := [ tmp ] ;
43036: LD_ADDR_VAR 0 7
43040: PUSH
43041: LD_VAR 0 6
43045: PUSH
43046: EMPTY
43047: LIST
43048: ST_TO_ADDR
// for i = 1 to pos - 1 do
43049: LD_ADDR_VAR 0 5
43053: PUSH
43054: DOUBLE
43055: LD_INT 1
43057: DEC
43058: ST_TO_ADDR
43059: LD_VAR 0 2
43063: PUSH
43064: LD_INT 1
43066: MINUS
43067: PUSH
43068: FOR_TO
43069: IFFALSE 43114
// begin tmp := tmp [ pos [ i ] ] ;
43071: LD_ADDR_VAR 0 6
43075: PUSH
43076: LD_VAR 0 6
43080: PUSH
43081: LD_VAR 0 2
43085: PUSH
43086: LD_VAR 0 5
43090: ARRAY
43091: ARRAY
43092: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43093: LD_ADDR_VAR 0 7
43097: PUSH
43098: LD_VAR 0 7
43102: PUSH
43103: LD_VAR 0 6
43107: PUSH
43108: EMPTY
43109: LIST
43110: ADD
43111: ST_TO_ADDR
// end ;
43112: GO 43068
43114: POP
43115: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43116: LD_ADDR_VAR 0 6
43120: PUSH
43121: LD_VAR 0 6
43125: PPUSH
43126: LD_VAR 0 2
43130: PUSH
43131: LD_VAR 0 2
43135: ARRAY
43136: PPUSH
43137: LD_VAR 0 3
43141: PPUSH
43142: CALL_OW 1
43146: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: LD_VAR 0 7
43156: PPUSH
43157: LD_VAR 0 7
43161: PPUSH
43162: LD_VAR 0 6
43166: PPUSH
43167: CALL_OW 1
43171: ST_TO_ADDR
// for i = s_arr downto 2 do
43172: LD_ADDR_VAR 0 5
43176: PUSH
43177: DOUBLE
43178: LD_VAR 0 7
43182: INC
43183: ST_TO_ADDR
43184: LD_INT 2
43186: PUSH
43187: FOR_DOWNTO
43188: IFFALSE 43272
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43190: LD_ADDR_VAR 0 6
43194: PUSH
43195: LD_VAR 0 7
43199: PUSH
43200: LD_VAR 0 5
43204: PUSH
43205: LD_INT 1
43207: MINUS
43208: ARRAY
43209: PPUSH
43210: LD_VAR 0 2
43214: PUSH
43215: LD_VAR 0 5
43219: PUSH
43220: LD_INT 1
43222: MINUS
43223: ARRAY
43224: PPUSH
43225: LD_VAR 0 7
43229: PUSH
43230: LD_VAR 0 5
43234: ARRAY
43235: PPUSH
43236: CALL_OW 1
43240: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43241: LD_ADDR_VAR 0 7
43245: PUSH
43246: LD_VAR 0 7
43250: PPUSH
43251: LD_VAR 0 5
43255: PUSH
43256: LD_INT 1
43258: MINUS
43259: PPUSH
43260: LD_VAR 0 6
43264: PPUSH
43265: CALL_OW 1
43269: ST_TO_ADDR
// end ;
43270: GO 43187
43272: POP
43273: POP
// result := s_arr [ 1 ] ;
43274: LD_ADDR_VAR 0 4
43278: PUSH
43279: LD_VAR 0 7
43283: PUSH
43284: LD_INT 1
43286: ARRAY
43287: ST_TO_ADDR
// end ; end ;
43288: LD_VAR 0 4
43292: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43293: LD_INT 0
43295: PPUSH
43296: PPUSH
// if not list then
43297: LD_VAR 0 1
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43397
// i := list [ pos1 ] ;
43306: LD_ADDR_VAR 0 5
43310: PUSH
43311: LD_VAR 0 1
43315: PUSH
43316: LD_VAR 0 2
43320: ARRAY
43321: ST_TO_ADDR
// if not i then
43322: LD_VAR 0 5
43326: NOT
43327: IFFALSE 43331
// exit ;
43329: GO 43397
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43331: LD_ADDR_VAR 0 1
43335: PUSH
43336: LD_VAR 0 1
43340: PPUSH
43341: LD_VAR 0 2
43345: PPUSH
43346: LD_VAR 0 1
43350: PUSH
43351: LD_VAR 0 3
43355: ARRAY
43356: PPUSH
43357: CALL_OW 1
43361: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43362: LD_ADDR_VAR 0 1
43366: PUSH
43367: LD_VAR 0 1
43371: PPUSH
43372: LD_VAR 0 3
43376: PPUSH
43377: LD_VAR 0 5
43381: PPUSH
43382: CALL_OW 1
43386: ST_TO_ADDR
// result := list ;
43387: LD_ADDR_VAR 0 4
43391: PUSH
43392: LD_VAR 0 1
43396: ST_TO_ADDR
// end ;
43397: LD_VAR 0 4
43401: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43402: LD_INT 0
43404: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43405: LD_ADDR_VAR 0 5
43409: PUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 250
43419: PPUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: CALL_OW 251
43429: PPUSH
43430: LD_VAR 0 2
43434: PPUSH
43435: LD_VAR 0 3
43439: PPUSH
43440: LD_VAR 0 4
43444: PPUSH
43445: CALL 43455 0 5
43449: ST_TO_ADDR
// end ;
43450: LD_VAR 0 5
43454: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43455: LD_INT 0
43457: PPUSH
43458: PPUSH
43459: PPUSH
43460: PPUSH
// if not list then
43461: LD_VAR 0 3
43465: NOT
43466: IFFALSE 43470
// exit ;
43468: GO 43858
// result := [ ] ;
43470: LD_ADDR_VAR 0 6
43474: PUSH
43475: EMPTY
43476: ST_TO_ADDR
// for i in list do
43477: LD_ADDR_VAR 0 7
43481: PUSH
43482: LD_VAR 0 3
43486: PUSH
43487: FOR_IN
43488: IFFALSE 43690
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_VAR 0 7
43499: PPUSH
43500: LD_VAR 0 1
43504: PPUSH
43505: LD_VAR 0 2
43509: PPUSH
43510: CALL_OW 297
43514: ST_TO_ADDR
// if not result then
43515: LD_VAR 0 6
43519: NOT
43520: IFFALSE 43546
// result := [ [ i , tmp ] ] else
43522: LD_ADDR_VAR 0 6
43526: PUSH
43527: LD_VAR 0 7
43531: PUSH
43532: LD_VAR 0 9
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: EMPTY
43542: LIST
43543: ST_TO_ADDR
43544: GO 43688
// begin if result [ result ] [ 2 ] < tmp then
43546: LD_VAR 0 6
43550: PUSH
43551: LD_VAR 0 6
43555: ARRAY
43556: PUSH
43557: LD_INT 2
43559: ARRAY
43560: PUSH
43561: LD_VAR 0 9
43565: LESS
43566: IFFALSE 43608
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43568: LD_ADDR_VAR 0 6
43572: PUSH
43573: LD_VAR 0 6
43577: PPUSH
43578: LD_VAR 0 6
43582: PUSH
43583: LD_INT 1
43585: PLUS
43586: PPUSH
43587: LD_VAR 0 7
43591: PUSH
43592: LD_VAR 0 9
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PPUSH
43601: CALL_OW 2
43605: ST_TO_ADDR
43606: GO 43688
// for j = 1 to result do
43608: LD_ADDR_VAR 0 8
43612: PUSH
43613: DOUBLE
43614: LD_INT 1
43616: DEC
43617: ST_TO_ADDR
43618: LD_VAR 0 6
43622: PUSH
43623: FOR_TO
43624: IFFALSE 43686
// begin if tmp < result [ j ] [ 2 ] then
43626: LD_VAR 0 9
43630: PUSH
43631: LD_VAR 0 6
43635: PUSH
43636: LD_VAR 0 8
43640: ARRAY
43641: PUSH
43642: LD_INT 2
43644: ARRAY
43645: LESS
43646: IFFALSE 43684
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43648: LD_ADDR_VAR 0 6
43652: PUSH
43653: LD_VAR 0 6
43657: PPUSH
43658: LD_VAR 0 8
43662: PPUSH
43663: LD_VAR 0 7
43667: PUSH
43668: LD_VAR 0 9
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PPUSH
43677: CALL_OW 2
43681: ST_TO_ADDR
// break ;
43682: GO 43686
// end ; end ;
43684: GO 43623
43686: POP
43687: POP
// end ; end ;
43688: GO 43487
43690: POP
43691: POP
// if result and not asc then
43692: LD_VAR 0 6
43696: PUSH
43697: LD_VAR 0 4
43701: NOT
43702: AND
43703: IFFALSE 43778
// begin tmp := result ;
43705: LD_ADDR_VAR 0 9
43709: PUSH
43710: LD_VAR 0 6
43714: ST_TO_ADDR
// for i = tmp downto 1 do
43715: LD_ADDR_VAR 0 7
43719: PUSH
43720: DOUBLE
43721: LD_VAR 0 9
43725: INC
43726: ST_TO_ADDR
43727: LD_INT 1
43729: PUSH
43730: FOR_DOWNTO
43731: IFFALSE 43776
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43733: LD_ADDR_VAR 0 6
43737: PUSH
43738: LD_VAR 0 6
43742: PPUSH
43743: LD_VAR 0 9
43747: PUSH
43748: LD_VAR 0 7
43752: MINUS
43753: PUSH
43754: LD_INT 1
43756: PLUS
43757: PPUSH
43758: LD_VAR 0 9
43762: PUSH
43763: LD_VAR 0 7
43767: ARRAY
43768: PPUSH
43769: CALL_OW 1
43773: ST_TO_ADDR
43774: GO 43730
43776: POP
43777: POP
// end ; tmp := [ ] ;
43778: LD_ADDR_VAR 0 9
43782: PUSH
43783: EMPTY
43784: ST_TO_ADDR
// if mode then
43785: LD_VAR 0 5
43789: IFFALSE 43858
// begin for i = 1 to result do
43791: LD_ADDR_VAR 0 7
43795: PUSH
43796: DOUBLE
43797: LD_INT 1
43799: DEC
43800: ST_TO_ADDR
43801: LD_VAR 0 6
43805: PUSH
43806: FOR_TO
43807: IFFALSE 43846
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43809: LD_ADDR_VAR 0 9
43813: PUSH
43814: LD_VAR 0 9
43818: PPUSH
43819: LD_VAR 0 7
43823: PPUSH
43824: LD_VAR 0 6
43828: PUSH
43829: LD_VAR 0 7
43833: ARRAY
43834: PUSH
43835: LD_INT 1
43837: ARRAY
43838: PPUSH
43839: CALL_OW 1
43843: ST_TO_ADDR
43844: GO 43806
43846: POP
43847: POP
// result := tmp ;
43848: LD_ADDR_VAR 0 6
43852: PUSH
43853: LD_VAR 0 9
43857: ST_TO_ADDR
// end ; end ;
43858: LD_VAR 0 6
43862: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43863: LD_INT 0
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
43869: PPUSH
43870: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43871: LD_ADDR_VAR 0 5
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// if not x or not y then
43893: LD_VAR 0 2
43897: NOT
43898: PUSH
43899: LD_VAR 0 3
43903: NOT
43904: OR
43905: IFFALSE 43909
// exit ;
43907: GO 45559
// if not range then
43909: LD_VAR 0 4
43913: NOT
43914: IFFALSE 43924
// range := 10 ;
43916: LD_ADDR_VAR 0 4
43920: PUSH
43921: LD_INT 10
43923: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43924: LD_ADDR_VAR 0 8
43928: PUSH
43929: LD_INT 81
43931: PUSH
43932: LD_VAR 0 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 92
43943: PUSH
43944: LD_VAR 0 2
43948: PUSH
43949: LD_VAR 0 3
43953: PUSH
43954: LD_VAR 0 4
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: LD_INT 21
43970: PUSH
43971: LD_INT 3
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: PPUSH
43987: CALL_OW 69
43991: ST_TO_ADDR
// if not tmp then
43992: LD_VAR 0 8
43996: NOT
43997: IFFALSE 44001
// exit ;
43999: GO 45559
// for i in tmp do
44001: LD_ADDR_VAR 0 6
44005: PUSH
44006: LD_VAR 0 8
44010: PUSH
44011: FOR_IN
44012: IFFALSE 45534
// begin points := [ 0 , 0 , 0 ] ;
44014: LD_ADDR_VAR 0 9
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: ST_TO_ADDR
// bpoints := 1 ;
44033: LD_ADDR_VAR 0 10
44037: PUSH
44038: LD_INT 1
44040: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44041: LD_VAR 0 6
44045: PPUSH
44046: CALL_OW 247
44050: PUSH
44051: LD_INT 1
44053: DOUBLE
44054: EQUAL
44055: IFTRUE 44059
44057: GO 44637
44059: POP
// begin if GetClass ( i ) = 1 then
44060: LD_VAR 0 6
44064: PPUSH
44065: CALL_OW 257
44069: PUSH
44070: LD_INT 1
44072: EQUAL
44073: IFFALSE 44094
// points := [ 10 , 5 , 3 ] ;
44075: LD_ADDR_VAR 0 9
44079: PUSH
44080: LD_INT 10
44082: PUSH
44083: LD_INT 5
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44094: LD_VAR 0 6
44098: PPUSH
44099: CALL_OW 257
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: LD_INT 3
44109: PUSH
44110: LD_INT 4
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: IN
44118: IFFALSE 44139
// points := [ 3 , 2 , 1 ] ;
44120: LD_ADDR_VAR 0 9
44124: PUSH
44125: LD_INT 3
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44139: LD_VAR 0 6
44143: PPUSH
44144: CALL_OW 257
44148: PUSH
44149: LD_INT 5
44151: EQUAL
44152: IFFALSE 44173
// points := [ 130 , 5 , 2 ] ;
44154: LD_ADDR_VAR 0 9
44158: PUSH
44159: LD_INT 130
44161: PUSH
44162: LD_INT 5
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44173: LD_VAR 0 6
44177: PPUSH
44178: CALL_OW 257
44182: PUSH
44183: LD_INT 8
44185: EQUAL
44186: IFFALSE 44207
// points := [ 35 , 35 , 30 ] ;
44188: LD_ADDR_VAR 0 9
44192: PUSH
44193: LD_INT 35
44195: PUSH
44196: LD_INT 35
44198: PUSH
44199: LD_INT 30
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44207: LD_VAR 0 6
44211: PPUSH
44212: CALL_OW 257
44216: PUSH
44217: LD_INT 9
44219: EQUAL
44220: IFFALSE 44241
// points := [ 20 , 55 , 40 ] ;
44222: LD_ADDR_VAR 0 9
44226: PUSH
44227: LD_INT 20
44229: PUSH
44230: LD_INT 55
44232: PUSH
44233: LD_INT 40
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44241: LD_VAR 0 6
44245: PPUSH
44246: CALL_OW 257
44250: PUSH
44251: LD_INT 12
44253: PUSH
44254: LD_INT 16
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: IN
44261: IFFALSE 44282
// points := [ 5 , 3 , 2 ] ;
44263: LD_ADDR_VAR 0 9
44267: PUSH
44268: LD_INT 5
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44282: LD_VAR 0 6
44286: PPUSH
44287: CALL_OW 257
44291: PUSH
44292: LD_INT 17
44294: EQUAL
44295: IFFALSE 44316
// points := [ 100 , 50 , 75 ] ;
44297: LD_ADDR_VAR 0 9
44301: PUSH
44302: LD_INT 100
44304: PUSH
44305: LD_INT 50
44307: PUSH
44308: LD_INT 75
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44316: LD_VAR 0 6
44320: PPUSH
44321: CALL_OW 257
44325: PUSH
44326: LD_INT 15
44328: EQUAL
44329: IFFALSE 44350
// points := [ 10 , 5 , 3 ] ;
44331: LD_ADDR_VAR 0 9
44335: PUSH
44336: LD_INT 10
44338: PUSH
44339: LD_INT 5
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44350: LD_VAR 0 6
44354: PPUSH
44355: CALL_OW 257
44359: PUSH
44360: LD_INT 14
44362: EQUAL
44363: IFFALSE 44384
// points := [ 10 , 0 , 0 ] ;
44365: LD_ADDR_VAR 0 9
44369: PUSH
44370: LD_INT 10
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44384: LD_VAR 0 6
44388: PPUSH
44389: CALL_OW 257
44393: PUSH
44394: LD_INT 11
44396: EQUAL
44397: IFFALSE 44418
// points := [ 30 , 10 , 5 ] ;
44399: LD_ADDR_VAR 0 9
44403: PUSH
44404: LD_INT 30
44406: PUSH
44407: LD_INT 10
44409: PUSH
44410: LD_INT 5
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44418: LD_VAR 0 1
44422: PPUSH
44423: LD_INT 5
44425: PPUSH
44426: CALL_OW 321
44430: PUSH
44431: LD_INT 2
44433: EQUAL
44434: IFFALSE 44451
// bpoints := bpoints * 1.8 ;
44436: LD_ADDR_VAR 0 10
44440: PUSH
44441: LD_VAR 0 10
44445: PUSH
44446: LD_REAL  1.80000000000000E+0000
44449: MUL
44450: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44451: LD_VAR 0 6
44455: PPUSH
44456: CALL_OW 257
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 3
44469: PUSH
44470: LD_INT 4
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: IN
44479: PUSH
44480: LD_VAR 0 1
44484: PPUSH
44485: LD_INT 51
44487: PPUSH
44488: CALL_OW 321
44492: PUSH
44493: LD_INT 2
44495: EQUAL
44496: AND
44497: IFFALSE 44514
// bpoints := bpoints * 1.2 ;
44499: LD_ADDR_VAR 0 10
44503: PUSH
44504: LD_VAR 0 10
44508: PUSH
44509: LD_REAL  1.20000000000000E+0000
44512: MUL
44513: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44514: LD_VAR 0 6
44518: PPUSH
44519: CALL_OW 257
44523: PUSH
44524: LD_INT 5
44526: PUSH
44527: LD_INT 7
44529: PUSH
44530: LD_INT 9
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: IN
44538: PUSH
44539: LD_VAR 0 1
44543: PPUSH
44544: LD_INT 52
44546: PPUSH
44547: CALL_OW 321
44551: PUSH
44552: LD_INT 2
44554: EQUAL
44555: AND
44556: IFFALSE 44573
// bpoints := bpoints * 1.5 ;
44558: LD_ADDR_VAR 0 10
44562: PUSH
44563: LD_VAR 0 10
44567: PUSH
44568: LD_REAL  1.50000000000000E+0000
44571: MUL
44572: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44573: LD_VAR 0 1
44577: PPUSH
44578: LD_INT 66
44580: PPUSH
44581: CALL_OW 321
44585: PUSH
44586: LD_INT 2
44588: EQUAL
44589: IFFALSE 44606
// bpoints := bpoints * 1.1 ;
44591: LD_ADDR_VAR 0 10
44595: PUSH
44596: LD_VAR 0 10
44600: PUSH
44601: LD_REAL  1.10000000000000E+0000
44604: MUL
44605: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44606: LD_ADDR_VAR 0 10
44610: PUSH
44611: LD_VAR 0 10
44615: PUSH
44616: LD_VAR 0 6
44620: PPUSH
44621: LD_INT 1
44623: PPUSH
44624: CALL_OW 259
44628: PUSH
44629: LD_REAL  1.15000000000000E+0000
44632: MUL
44633: MUL
44634: ST_TO_ADDR
// end ; unit_vehicle :
44635: GO 45463
44637: LD_INT 2
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 45451
44645: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44646: LD_VAR 0 6
44650: PPUSH
44651: CALL_OW 264
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 42
44661: PUSH
44662: LD_INT 24
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: IN
44670: IFFALSE 44691
// points := [ 25 , 5 , 3 ] ;
44672: LD_ADDR_VAR 0 9
44676: PUSH
44677: LD_INT 25
44679: PUSH
44680: LD_INT 5
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44691: LD_VAR 0 6
44695: PPUSH
44696: CALL_OW 264
44700: PUSH
44701: LD_INT 4
44703: PUSH
44704: LD_INT 43
44706: PUSH
44707: LD_INT 25
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: IN
44715: IFFALSE 44736
// points := [ 40 , 15 , 5 ] ;
44717: LD_ADDR_VAR 0 9
44721: PUSH
44722: LD_INT 40
44724: PUSH
44725: LD_INT 15
44727: PUSH
44728: LD_INT 5
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44736: LD_VAR 0 6
44740: PPUSH
44741: CALL_OW 264
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: LD_INT 23
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: IN
44756: IFFALSE 44777
// points := [ 7 , 25 , 8 ] ;
44758: LD_ADDR_VAR 0 9
44762: PUSH
44763: LD_INT 7
44765: PUSH
44766: LD_INT 25
44768: PUSH
44769: LD_INT 8
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44777: LD_VAR 0 6
44781: PPUSH
44782: CALL_OW 264
44786: PUSH
44787: LD_INT 5
44789: PUSH
44790: LD_INT 27
44792: PUSH
44793: LD_INT 44
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: IN
44801: IFFALSE 44822
// points := [ 14 , 50 , 16 ] ;
44803: LD_ADDR_VAR 0 9
44807: PUSH
44808: LD_INT 14
44810: PUSH
44811: LD_INT 50
44813: PUSH
44814: LD_INT 16
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44822: LD_VAR 0 6
44826: PPUSH
44827: CALL_OW 264
44831: PUSH
44832: LD_INT 6
44834: PUSH
44835: LD_INT 46
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: IN
44842: IFFALSE 44863
// points := [ 32 , 120 , 70 ] ;
44844: LD_ADDR_VAR 0 9
44848: PUSH
44849: LD_INT 32
44851: PUSH
44852: LD_INT 120
44854: PUSH
44855: LD_INT 70
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44863: LD_VAR 0 6
44867: PPUSH
44868: CALL_OW 264
44872: PUSH
44873: LD_INT 7
44875: PUSH
44876: LD_INT 28
44878: PUSH
44879: LD_INT 45
44881: PUSH
44882: LD_INT 92
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: IN
44891: IFFALSE 44912
// points := [ 35 , 20 , 45 ] ;
44893: LD_ADDR_VAR 0 9
44897: PUSH
44898: LD_INT 35
44900: PUSH
44901: LD_INT 20
44903: PUSH
44904: LD_INT 45
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44912: LD_VAR 0 6
44916: PPUSH
44917: CALL_OW 264
44921: PUSH
44922: LD_INT 47
44924: PUSH
44925: EMPTY
44926: LIST
44927: IN
44928: IFFALSE 44949
// points := [ 67 , 45 , 75 ] ;
44930: LD_ADDR_VAR 0 9
44934: PUSH
44935: LD_INT 67
44937: PUSH
44938: LD_INT 45
44940: PUSH
44941: LD_INT 75
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44949: LD_VAR 0 6
44953: PPUSH
44954: CALL_OW 264
44958: PUSH
44959: LD_INT 26
44961: PUSH
44962: EMPTY
44963: LIST
44964: IN
44965: IFFALSE 44986
// points := [ 120 , 30 , 80 ] ;
44967: LD_ADDR_VAR 0 9
44971: PUSH
44972: LD_INT 120
44974: PUSH
44975: LD_INT 30
44977: PUSH
44978: LD_INT 80
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44986: LD_VAR 0 6
44990: PPUSH
44991: CALL_OW 264
44995: PUSH
44996: LD_INT 22
44998: PUSH
44999: EMPTY
45000: LIST
45001: IN
45002: IFFALSE 45023
// points := [ 40 , 1 , 1 ] ;
45004: LD_ADDR_VAR 0 9
45008: PUSH
45009: LD_INT 40
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45023: LD_VAR 0 6
45027: PPUSH
45028: CALL_OW 264
45032: PUSH
45033: LD_INT 29
45035: PUSH
45036: EMPTY
45037: LIST
45038: IN
45039: IFFALSE 45060
// points := [ 70 , 200 , 400 ] ;
45041: LD_ADDR_VAR 0 9
45045: PUSH
45046: LD_INT 70
45048: PUSH
45049: LD_INT 200
45051: PUSH
45052: LD_INT 400
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45060: LD_VAR 0 6
45064: PPUSH
45065: CALL_OW 264
45069: PUSH
45070: LD_INT 14
45072: PUSH
45073: LD_INT 53
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: IN
45080: IFFALSE 45101
// points := [ 40 , 10 , 20 ] ;
45082: LD_ADDR_VAR 0 9
45086: PUSH
45087: LD_INT 40
45089: PUSH
45090: LD_INT 10
45092: PUSH
45093: LD_INT 20
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45101: LD_VAR 0 6
45105: PPUSH
45106: CALL_OW 264
45110: PUSH
45111: LD_INT 9
45113: PUSH
45114: EMPTY
45115: LIST
45116: IN
45117: IFFALSE 45138
// points := [ 5 , 70 , 20 ] ;
45119: LD_ADDR_VAR 0 9
45123: PUSH
45124: LD_INT 5
45126: PUSH
45127: LD_INT 70
45129: PUSH
45130: LD_INT 20
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45138: LD_VAR 0 6
45142: PPUSH
45143: CALL_OW 264
45147: PUSH
45148: LD_INT 10
45150: PUSH
45151: EMPTY
45152: LIST
45153: IN
45154: IFFALSE 45175
// points := [ 35 , 110 , 70 ] ;
45156: LD_ADDR_VAR 0 9
45160: PUSH
45161: LD_INT 35
45163: PUSH
45164: LD_INT 110
45166: PUSH
45167: LD_INT 70
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45175: LD_VAR 0 6
45179: PPUSH
45180: CALL_OW 265
45184: PUSH
45185: LD_INT 25
45187: EQUAL
45188: IFFALSE 45209
// points := [ 80 , 65 , 100 ] ;
45190: LD_ADDR_VAR 0 9
45194: PUSH
45195: LD_INT 80
45197: PUSH
45198: LD_INT 65
45200: PUSH
45201: LD_INT 100
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45209: LD_VAR 0 6
45213: PPUSH
45214: CALL_OW 263
45218: PUSH
45219: LD_INT 1
45221: EQUAL
45222: IFFALSE 45257
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45224: LD_ADDR_VAR 0 10
45228: PUSH
45229: LD_VAR 0 10
45233: PUSH
45234: LD_VAR 0 6
45238: PPUSH
45239: CALL_OW 311
45243: PPUSH
45244: LD_INT 3
45246: PPUSH
45247: CALL_OW 259
45251: PUSH
45252: LD_INT 4
45254: MUL
45255: MUL
45256: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45257: LD_VAR 0 6
45261: PPUSH
45262: CALL_OW 263
45266: PUSH
45267: LD_INT 2
45269: EQUAL
45270: IFFALSE 45321
// begin j := IsControledBy ( i ) ;
45272: LD_ADDR_VAR 0 7
45276: PUSH
45277: LD_VAR 0 6
45281: PPUSH
45282: CALL_OW 312
45286: ST_TO_ADDR
// if j then
45287: LD_VAR 0 7
45291: IFFALSE 45321
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45293: LD_ADDR_VAR 0 10
45297: PUSH
45298: LD_VAR 0 10
45302: PUSH
45303: LD_VAR 0 7
45307: PPUSH
45308: LD_INT 3
45310: PPUSH
45311: CALL_OW 259
45315: PUSH
45316: LD_INT 3
45318: MUL
45319: MUL
45320: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45321: LD_VAR 0 6
45325: PPUSH
45326: CALL_OW 264
45330: PUSH
45331: LD_INT 5
45333: PUSH
45334: LD_INT 6
45336: PUSH
45337: LD_INT 46
45339: PUSH
45340: LD_INT 44
45342: PUSH
45343: LD_INT 47
45345: PUSH
45346: LD_INT 45
45348: PUSH
45349: LD_INT 28
45351: PUSH
45352: LD_INT 7
45354: PUSH
45355: LD_INT 27
45357: PUSH
45358: LD_INT 29
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: IN
45373: PUSH
45374: LD_VAR 0 1
45378: PPUSH
45379: LD_INT 52
45381: PPUSH
45382: CALL_OW 321
45386: PUSH
45387: LD_INT 2
45389: EQUAL
45390: AND
45391: IFFALSE 45408
// bpoints := bpoints * 1.2 ;
45393: LD_ADDR_VAR 0 10
45397: PUSH
45398: LD_VAR 0 10
45402: PUSH
45403: LD_REAL  1.20000000000000E+0000
45406: MUL
45407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45408: LD_VAR 0 6
45412: PPUSH
45413: CALL_OW 264
45417: PUSH
45418: LD_INT 6
45420: PUSH
45421: LD_INT 46
45423: PUSH
45424: LD_INT 47
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: IN
45432: IFFALSE 45449
// bpoints := bpoints * 1.2 ;
45434: LD_ADDR_VAR 0 10
45438: PUSH
45439: LD_VAR 0 10
45443: PUSH
45444: LD_REAL  1.20000000000000E+0000
45447: MUL
45448: ST_TO_ADDR
// end ; unit_building :
45449: GO 45463
45451: LD_INT 3
45453: DOUBLE
45454: EQUAL
45455: IFTRUE 45459
45457: GO 45462
45459: POP
// ; end ;
45460: GO 45463
45462: POP
// for j = 1 to 3 do
45463: LD_ADDR_VAR 0 7
45467: PUSH
45468: DOUBLE
45469: LD_INT 1
45471: DEC
45472: ST_TO_ADDR
45473: LD_INT 3
45475: PUSH
45476: FOR_TO
45477: IFFALSE 45530
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45479: LD_ADDR_VAR 0 5
45483: PUSH
45484: LD_VAR 0 5
45488: PPUSH
45489: LD_VAR 0 7
45493: PPUSH
45494: LD_VAR 0 5
45498: PUSH
45499: LD_VAR 0 7
45503: ARRAY
45504: PUSH
45505: LD_VAR 0 9
45509: PUSH
45510: LD_VAR 0 7
45514: ARRAY
45515: PUSH
45516: LD_VAR 0 10
45520: MUL
45521: PLUS
45522: PPUSH
45523: CALL_OW 1
45527: ST_TO_ADDR
45528: GO 45476
45530: POP
45531: POP
// end ;
45532: GO 44011
45534: POP
45535: POP
// result := Replace ( result , 4 , tmp ) ;
45536: LD_ADDR_VAR 0 5
45540: PUSH
45541: LD_VAR 0 5
45545: PPUSH
45546: LD_INT 4
45548: PPUSH
45549: LD_VAR 0 8
45553: PPUSH
45554: CALL_OW 1
45558: ST_TO_ADDR
// end ;
45559: LD_VAR 0 5
45563: RET
// export function DangerAtRange ( unit , range ) ; begin
45564: LD_INT 0
45566: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45567: LD_ADDR_VAR 0 3
45571: PUSH
45572: LD_VAR 0 1
45576: PPUSH
45577: CALL_OW 255
45581: PPUSH
45582: LD_VAR 0 1
45586: PPUSH
45587: CALL_OW 250
45591: PPUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 251
45601: PPUSH
45602: LD_VAR 0 2
45606: PPUSH
45607: CALL 43863 0 4
45611: ST_TO_ADDR
// end ;
45612: LD_VAR 0 3
45616: RET
// export function DangerInArea ( side , area ) ; begin
45617: LD_INT 0
45619: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45620: LD_ADDR_VAR 0 3
45624: PUSH
45625: LD_VAR 0 2
45629: PPUSH
45630: LD_INT 81
45632: PUSH
45633: LD_VAR 0 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PPUSH
45642: CALL_OW 70
45646: ST_TO_ADDR
// end ;
45647: LD_VAR 0 3
45651: RET
// export function IsExtension ( b ) ; begin
45652: LD_INT 0
45654: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45655: LD_ADDR_VAR 0 2
45659: PUSH
45660: LD_VAR 0 1
45664: PUSH
45665: LD_INT 23
45667: PUSH
45668: LD_INT 20
45670: PUSH
45671: LD_INT 22
45673: PUSH
45674: LD_INT 17
45676: PUSH
45677: LD_INT 24
45679: PUSH
45680: LD_INT 21
45682: PUSH
45683: LD_INT 19
45685: PUSH
45686: LD_INT 16
45688: PUSH
45689: LD_INT 25
45691: PUSH
45692: LD_INT 18
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: IN
45707: ST_TO_ADDR
// end ;
45708: LD_VAR 0 2
45712: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45713: LD_INT 0
45715: PPUSH
45716: PPUSH
45717: PPUSH
// result := [ ] ;
45718: LD_ADDR_VAR 0 4
45722: PUSH
45723: EMPTY
45724: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45725: LD_ADDR_VAR 0 5
45729: PUSH
45730: LD_VAR 0 2
45734: PPUSH
45735: LD_INT 21
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PPUSH
45745: CALL_OW 70
45749: ST_TO_ADDR
// if not tmp then
45750: LD_VAR 0 5
45754: NOT
45755: IFFALSE 45759
// exit ;
45757: GO 45823
// if checkLink then
45759: LD_VAR 0 3
45763: IFFALSE 45813
// begin for i in tmp do
45765: LD_ADDR_VAR 0 6
45769: PUSH
45770: LD_VAR 0 5
45774: PUSH
45775: FOR_IN
45776: IFFALSE 45811
// if GetBase ( i ) <> base then
45778: LD_VAR 0 6
45782: PPUSH
45783: CALL_OW 274
45787: PUSH
45788: LD_VAR 0 1
45792: NONEQUAL
45793: IFFALSE 45809
// ComLinkToBase ( base , i ) ;
45795: LD_VAR 0 1
45799: PPUSH
45800: LD_VAR 0 6
45804: PPUSH
45805: CALL_OW 169
45809: GO 45775
45811: POP
45812: POP
// end ; result := tmp ;
45813: LD_ADDR_VAR 0 4
45817: PUSH
45818: LD_VAR 0 5
45822: ST_TO_ADDR
// end ;
45823: LD_VAR 0 4
45827: RET
// export function ComComplete ( units , b ) ; var i ; begin
45828: LD_INT 0
45830: PPUSH
45831: PPUSH
// if not units then
45832: LD_VAR 0 1
45836: NOT
45837: IFFALSE 45841
// exit ;
45839: GO 45931
// for i in units do
45841: LD_ADDR_VAR 0 4
45845: PUSH
45846: LD_VAR 0 1
45850: PUSH
45851: FOR_IN
45852: IFFALSE 45929
// if BuildingStatus ( b ) = bs_build then
45854: LD_VAR 0 2
45858: PPUSH
45859: CALL_OW 461
45863: PUSH
45864: LD_INT 1
45866: EQUAL
45867: IFFALSE 45927
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45869: LD_VAR 0 4
45873: PPUSH
45874: LD_STRING h
45876: PUSH
45877: LD_VAR 0 2
45881: PPUSH
45882: CALL_OW 250
45886: PUSH
45887: LD_VAR 0 2
45891: PPUSH
45892: CALL_OW 251
45896: PUSH
45897: LD_VAR 0 2
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: PUSH
45920: EMPTY
45921: LIST
45922: PPUSH
45923: CALL_OW 446
45927: GO 45851
45929: POP
45930: POP
// end ;
45931: LD_VAR 0 3
45935: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45936: LD_INT 0
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45944: LD_VAR 0 1
45948: NOT
45949: PUSH
45950: LD_VAR 0 1
45954: PPUSH
45955: CALL_OW 263
45959: PUSH
45960: LD_INT 2
45962: NONEQUAL
45963: OR
45964: IFFALSE 45968
// exit ;
45966: GO 46284
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45968: LD_ADDR_VAR 0 6
45972: PUSH
45973: LD_INT 22
45975: PUSH
45976: LD_VAR 0 1
45980: PPUSH
45981: CALL_OW 255
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 30
45995: PUSH
45996: LD_INT 36
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 34
46005: PUSH
46006: LD_INT 31
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PPUSH
46022: CALL_OW 69
46026: ST_TO_ADDR
// if not tmp then
46027: LD_VAR 0 6
46031: NOT
46032: IFFALSE 46036
// exit ;
46034: GO 46284
// result := [ ] ;
46036: LD_ADDR_VAR 0 2
46040: PUSH
46041: EMPTY
46042: ST_TO_ADDR
// for i in tmp do
46043: LD_ADDR_VAR 0 3
46047: PUSH
46048: LD_VAR 0 6
46052: PUSH
46053: FOR_IN
46054: IFFALSE 46125
// begin t := UnitsInside ( i ) ;
46056: LD_ADDR_VAR 0 4
46060: PUSH
46061: LD_VAR 0 3
46065: PPUSH
46066: CALL_OW 313
46070: ST_TO_ADDR
// if t then
46071: LD_VAR 0 4
46075: IFFALSE 46123
// for j in t do
46077: LD_ADDR_VAR 0 7
46081: PUSH
46082: LD_VAR 0 4
46086: PUSH
46087: FOR_IN
46088: IFFALSE 46121
// result := Replace ( result , result + 1 , j ) ;
46090: LD_ADDR_VAR 0 2
46094: PUSH
46095: LD_VAR 0 2
46099: PPUSH
46100: LD_VAR 0 2
46104: PUSH
46105: LD_INT 1
46107: PLUS
46108: PPUSH
46109: LD_VAR 0 7
46113: PPUSH
46114: CALL_OW 1
46118: ST_TO_ADDR
46119: GO 46087
46121: POP
46122: POP
// end ;
46123: GO 46053
46125: POP
46126: POP
// if not result then
46127: LD_VAR 0 2
46131: NOT
46132: IFFALSE 46136
// exit ;
46134: GO 46284
// mech := result [ 1 ] ;
46136: LD_ADDR_VAR 0 5
46140: PUSH
46141: LD_VAR 0 2
46145: PUSH
46146: LD_INT 1
46148: ARRAY
46149: ST_TO_ADDR
// if result > 1 then
46150: LD_VAR 0 2
46154: PUSH
46155: LD_INT 1
46157: GREATER
46158: IFFALSE 46270
// begin for i = 2 to result do
46160: LD_ADDR_VAR 0 3
46164: PUSH
46165: DOUBLE
46166: LD_INT 2
46168: DEC
46169: ST_TO_ADDR
46170: LD_VAR 0 2
46174: PUSH
46175: FOR_TO
46176: IFFALSE 46268
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46178: LD_ADDR_VAR 0 4
46182: PUSH
46183: LD_VAR 0 2
46187: PUSH
46188: LD_VAR 0 3
46192: ARRAY
46193: PPUSH
46194: LD_INT 3
46196: PPUSH
46197: CALL_OW 259
46201: PUSH
46202: LD_VAR 0 2
46206: PUSH
46207: LD_VAR 0 3
46211: ARRAY
46212: PPUSH
46213: CALL_OW 432
46217: MINUS
46218: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46219: LD_VAR 0 4
46223: PUSH
46224: LD_VAR 0 5
46228: PPUSH
46229: LD_INT 3
46231: PPUSH
46232: CALL_OW 259
46236: PUSH
46237: LD_VAR 0 5
46241: PPUSH
46242: CALL_OW 432
46246: MINUS
46247: GREATEREQUAL
46248: IFFALSE 46266
// mech := result [ i ] ;
46250: LD_ADDR_VAR 0 5
46254: PUSH
46255: LD_VAR 0 2
46259: PUSH
46260: LD_VAR 0 3
46264: ARRAY
46265: ST_TO_ADDR
// end ;
46266: GO 46175
46268: POP
46269: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46270: LD_VAR 0 1
46274: PPUSH
46275: LD_VAR 0 5
46279: PPUSH
46280: CALL_OW 135
// end ;
46284: LD_VAR 0 2
46288: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46289: LD_INT 0
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
// result := [ ] ;
46304: LD_ADDR_VAR 0 7
46308: PUSH
46309: EMPTY
46310: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46311: LD_VAR 0 1
46315: PPUSH
46316: CALL_OW 266
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: IN
46331: NOT
46332: IFFALSE 46336
// exit ;
46334: GO 47970
// if name then
46336: LD_VAR 0 3
46340: IFFALSE 46356
// SetBName ( base_dep , name ) ;
46342: LD_VAR 0 1
46346: PPUSH
46347: LD_VAR 0 3
46351: PPUSH
46352: CALL_OW 500
// base := GetBase ( base_dep ) ;
46356: LD_ADDR_VAR 0 15
46360: PUSH
46361: LD_VAR 0 1
46365: PPUSH
46366: CALL_OW 274
46370: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46371: LD_ADDR_VAR 0 16
46375: PUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: CALL_OW 255
46385: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46386: LD_ADDR_VAR 0 17
46390: PUSH
46391: LD_VAR 0 1
46395: PPUSH
46396: CALL_OW 248
46400: ST_TO_ADDR
// if sources then
46401: LD_VAR 0 5
46405: IFFALSE 46452
// for i = 1 to 3 do
46407: LD_ADDR_VAR 0 8
46411: PUSH
46412: DOUBLE
46413: LD_INT 1
46415: DEC
46416: ST_TO_ADDR
46417: LD_INT 3
46419: PUSH
46420: FOR_TO
46421: IFFALSE 46450
// AddResourceType ( base , i , sources [ i ] ) ;
46423: LD_VAR 0 15
46427: PPUSH
46428: LD_VAR 0 8
46432: PPUSH
46433: LD_VAR 0 5
46437: PUSH
46438: LD_VAR 0 8
46442: ARRAY
46443: PPUSH
46444: CALL_OW 276
46448: GO 46420
46450: POP
46451: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46452: LD_ADDR_VAR 0 18
46456: PUSH
46457: LD_VAR 0 15
46461: PPUSH
46462: LD_VAR 0 2
46466: PPUSH
46467: LD_INT 1
46469: PPUSH
46470: CALL 45713 0 3
46474: ST_TO_ADDR
// InitHc ;
46475: CALL_OW 19
// InitUc ;
46479: CALL_OW 18
// uc_side := side ;
46483: LD_ADDR_OWVAR 20
46487: PUSH
46488: LD_VAR 0 16
46492: ST_TO_ADDR
// uc_nation := nation ;
46493: LD_ADDR_OWVAR 21
46497: PUSH
46498: LD_VAR 0 17
46502: ST_TO_ADDR
// if buildings then
46503: LD_VAR 0 18
46507: IFFALSE 47829
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46509: LD_ADDR_VAR 0 19
46513: PUSH
46514: LD_VAR 0 18
46518: PPUSH
46519: LD_INT 2
46521: PUSH
46522: LD_INT 30
46524: PUSH
46525: LD_INT 29
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 30
46534: PUSH
46535: LD_INT 30
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: PPUSH
46547: CALL_OW 72
46551: ST_TO_ADDR
// if tmp then
46552: LD_VAR 0 19
46556: IFFALSE 46604
// for i in tmp do
46558: LD_ADDR_VAR 0 8
46562: PUSH
46563: LD_VAR 0 19
46567: PUSH
46568: FOR_IN
46569: IFFALSE 46602
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46571: LD_VAR 0 8
46575: PPUSH
46576: CALL_OW 250
46580: PPUSH
46581: LD_VAR 0 8
46585: PPUSH
46586: CALL_OW 251
46590: PPUSH
46591: LD_VAR 0 16
46595: PPUSH
46596: CALL_OW 441
46600: GO 46568
46602: POP
46603: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46604: LD_VAR 0 18
46608: PPUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 30
46614: PUSH
46615: LD_INT 32
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 30
46624: PUSH
46625: LD_INT 33
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: PPUSH
46637: CALL_OW 72
46641: IFFALSE 46729
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46643: LD_ADDR_VAR 0 8
46647: PUSH
46648: LD_VAR 0 18
46652: PPUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 30
46658: PUSH
46659: LD_INT 32
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 30
46668: PUSH
46669: LD_INT 33
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: PPUSH
46681: CALL_OW 72
46685: PUSH
46686: FOR_IN
46687: IFFALSE 46727
// begin if not GetBWeapon ( i ) then
46689: LD_VAR 0 8
46693: PPUSH
46694: CALL_OW 269
46698: NOT
46699: IFFALSE 46725
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46701: LD_VAR 0 8
46705: PPUSH
46706: LD_VAR 0 8
46710: PPUSH
46711: LD_VAR 0 2
46715: PPUSH
46716: CALL 47975 0 2
46720: PPUSH
46721: CALL_OW 431
// end ;
46725: GO 46686
46727: POP
46728: POP
// end ; for i = 1 to personel do
46729: LD_ADDR_VAR 0 8
46733: PUSH
46734: DOUBLE
46735: LD_INT 1
46737: DEC
46738: ST_TO_ADDR
46739: LD_VAR 0 6
46743: PUSH
46744: FOR_TO
46745: IFFALSE 47809
// begin if i > 4 then
46747: LD_VAR 0 8
46751: PUSH
46752: LD_INT 4
46754: GREATER
46755: IFFALSE 46759
// break ;
46757: GO 47809
// case i of 1 :
46759: LD_VAR 0 8
46763: PUSH
46764: LD_INT 1
46766: DOUBLE
46767: EQUAL
46768: IFTRUE 46772
46770: GO 46852
46772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46773: LD_ADDR_VAR 0 12
46777: PUSH
46778: LD_VAR 0 18
46782: PPUSH
46783: LD_INT 22
46785: PUSH
46786: LD_VAR 0 16
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 58
46797: PUSH
46798: EMPTY
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 30
46806: PUSH
46807: LD_INT 32
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 30
46816: PUSH
46817: LD_INT 4
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 30
46826: PUSH
46827: LD_INT 5
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: PPUSH
46845: CALL_OW 72
46849: ST_TO_ADDR
46850: GO 47074
46852: LD_INT 2
46854: DOUBLE
46855: EQUAL
46856: IFTRUE 46860
46858: GO 46922
46860: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46861: LD_ADDR_VAR 0 12
46865: PUSH
46866: LD_VAR 0 18
46870: PPUSH
46871: LD_INT 22
46873: PUSH
46874: LD_VAR 0 16
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 30
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PPUSH
46915: CALL_OW 72
46919: ST_TO_ADDR
46920: GO 47074
46922: LD_INT 3
46924: DOUBLE
46925: EQUAL
46926: IFTRUE 46930
46928: GO 46992
46930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46931: LD_ADDR_VAR 0 12
46935: PUSH
46936: LD_VAR 0 18
46940: PPUSH
46941: LD_INT 22
46943: PUSH
46944: LD_VAR 0 16
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 30
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 30
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PPUSH
46985: CALL_OW 72
46989: ST_TO_ADDR
46990: GO 47074
46992: LD_INT 4
46994: DOUBLE
46995: EQUAL
46996: IFTRUE 47000
46998: GO 47073
47000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47001: LD_ADDR_VAR 0 12
47005: PUSH
47006: LD_VAR 0 18
47010: PPUSH
47011: LD_INT 22
47013: PUSH
47014: LD_VAR 0 16
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 30
47028: PUSH
47029: LD_INT 6
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 30
47038: PUSH
47039: LD_INT 7
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: LD_INT 8
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PPUSH
47066: CALL_OW 72
47070: ST_TO_ADDR
47071: GO 47074
47073: POP
// if i = 1 then
47074: LD_VAR 0 8
47078: PUSH
47079: LD_INT 1
47081: EQUAL
47082: IFFALSE 47193
// begin tmp := [ ] ;
47084: LD_ADDR_VAR 0 19
47088: PUSH
47089: EMPTY
47090: ST_TO_ADDR
// for j in f do
47091: LD_ADDR_VAR 0 9
47095: PUSH
47096: LD_VAR 0 12
47100: PUSH
47101: FOR_IN
47102: IFFALSE 47175
// if GetBType ( j ) = b_bunker then
47104: LD_VAR 0 9
47108: PPUSH
47109: CALL_OW 266
47113: PUSH
47114: LD_INT 32
47116: EQUAL
47117: IFFALSE 47144
// tmp := Insert ( tmp , 1 , j ) else
47119: LD_ADDR_VAR 0 19
47123: PUSH
47124: LD_VAR 0 19
47128: PPUSH
47129: LD_INT 1
47131: PPUSH
47132: LD_VAR 0 9
47136: PPUSH
47137: CALL_OW 2
47141: ST_TO_ADDR
47142: GO 47173
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47144: LD_ADDR_VAR 0 19
47148: PUSH
47149: LD_VAR 0 19
47153: PPUSH
47154: LD_VAR 0 19
47158: PUSH
47159: LD_INT 1
47161: PLUS
47162: PPUSH
47163: LD_VAR 0 9
47167: PPUSH
47168: CALL_OW 2
47172: ST_TO_ADDR
47173: GO 47101
47175: POP
47176: POP
// if tmp then
47177: LD_VAR 0 19
47181: IFFALSE 47193
// f := tmp ;
47183: LD_ADDR_VAR 0 12
47187: PUSH
47188: LD_VAR 0 19
47192: ST_TO_ADDR
// end ; x := personel [ i ] ;
47193: LD_ADDR_VAR 0 13
47197: PUSH
47198: LD_VAR 0 6
47202: PUSH
47203: LD_VAR 0 8
47207: ARRAY
47208: ST_TO_ADDR
// if x = - 1 then
47209: LD_VAR 0 13
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: EQUAL
47218: IFFALSE 47427
// begin for j in f do
47220: LD_ADDR_VAR 0 9
47224: PUSH
47225: LD_VAR 0 12
47229: PUSH
47230: FOR_IN
47231: IFFALSE 47423
// repeat InitHc ;
47233: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47237: LD_VAR 0 9
47241: PPUSH
47242: CALL_OW 266
47246: PUSH
47247: LD_INT 5
47249: EQUAL
47250: IFFALSE 47320
// begin if UnitsInside ( j ) < 3 then
47252: LD_VAR 0 9
47256: PPUSH
47257: CALL_OW 313
47261: PUSH
47262: LD_INT 3
47264: LESS
47265: IFFALSE 47301
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47267: LD_INT 0
47269: PPUSH
47270: LD_INT 5
47272: PUSH
47273: LD_INT 8
47275: PUSH
47276: LD_INT 9
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 17
47288: ARRAY
47289: PPUSH
47290: LD_VAR 0 4
47294: PPUSH
47295: CALL_OW 380
47299: GO 47318
// PrepareHuman ( false , i , skill ) ;
47301: LD_INT 0
47303: PPUSH
47304: LD_VAR 0 8
47308: PPUSH
47309: LD_VAR 0 4
47313: PPUSH
47314: CALL_OW 380
// end else
47318: GO 47337
// PrepareHuman ( false , i , skill ) ;
47320: LD_INT 0
47322: PPUSH
47323: LD_VAR 0 8
47327: PPUSH
47328: LD_VAR 0 4
47332: PPUSH
47333: CALL_OW 380
// un := CreateHuman ;
47337: LD_ADDR_VAR 0 14
47341: PUSH
47342: CALL_OW 44
47346: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47347: LD_ADDR_VAR 0 7
47351: PUSH
47352: LD_VAR 0 7
47356: PPUSH
47357: LD_INT 1
47359: PPUSH
47360: LD_VAR 0 14
47364: PPUSH
47365: CALL_OW 2
47369: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47370: LD_VAR 0 14
47374: PPUSH
47375: LD_VAR 0 9
47379: PPUSH
47380: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47384: LD_VAR 0 9
47388: PPUSH
47389: CALL_OW 313
47393: PUSH
47394: LD_INT 6
47396: EQUAL
47397: PUSH
47398: LD_VAR 0 9
47402: PPUSH
47403: CALL_OW 266
47407: PUSH
47408: LD_INT 32
47410: PUSH
47411: LD_INT 31
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: IN
47418: OR
47419: IFFALSE 47233
47421: GO 47230
47423: POP
47424: POP
// end else
47425: GO 47807
// for j = 1 to x do
47427: LD_ADDR_VAR 0 9
47431: PUSH
47432: DOUBLE
47433: LD_INT 1
47435: DEC
47436: ST_TO_ADDR
47437: LD_VAR 0 13
47441: PUSH
47442: FOR_TO
47443: IFFALSE 47805
// begin InitHc ;
47445: CALL_OW 19
// if not f then
47449: LD_VAR 0 12
47453: NOT
47454: IFFALSE 47543
// begin PrepareHuman ( false , i , skill ) ;
47456: LD_INT 0
47458: PPUSH
47459: LD_VAR 0 8
47463: PPUSH
47464: LD_VAR 0 4
47468: PPUSH
47469: CALL_OW 380
// un := CreateHuman ;
47473: LD_ADDR_VAR 0 14
47477: PUSH
47478: CALL_OW 44
47482: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47483: LD_ADDR_VAR 0 7
47487: PUSH
47488: LD_VAR 0 7
47492: PPUSH
47493: LD_INT 1
47495: PPUSH
47496: LD_VAR 0 14
47500: PPUSH
47501: CALL_OW 2
47505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47506: LD_VAR 0 14
47510: PPUSH
47511: LD_VAR 0 1
47515: PPUSH
47516: CALL_OW 250
47520: PPUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: CALL_OW 251
47530: PPUSH
47531: LD_INT 10
47533: PPUSH
47534: LD_INT 0
47536: PPUSH
47537: CALL_OW 50
// continue ;
47541: GO 47442
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47543: LD_VAR 0 12
47547: PUSH
47548: LD_INT 1
47550: ARRAY
47551: PPUSH
47552: CALL_OW 313
47556: PUSH
47557: LD_VAR 0 12
47561: PUSH
47562: LD_INT 1
47564: ARRAY
47565: PPUSH
47566: CALL_OW 266
47570: PUSH
47571: LD_INT 32
47573: PUSH
47574: LD_INT 31
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: IN
47581: AND
47582: PUSH
47583: LD_VAR 0 12
47587: PUSH
47588: LD_INT 1
47590: ARRAY
47591: PPUSH
47592: CALL_OW 313
47596: PUSH
47597: LD_INT 6
47599: EQUAL
47600: OR
47601: IFFALSE 47621
// f := Delete ( f , 1 ) ;
47603: LD_ADDR_VAR 0 12
47607: PUSH
47608: LD_VAR 0 12
47612: PPUSH
47613: LD_INT 1
47615: PPUSH
47616: CALL_OW 3
47620: ST_TO_ADDR
// if not f then
47621: LD_VAR 0 12
47625: NOT
47626: IFFALSE 47644
// begin x := x + 2 ;
47628: LD_ADDR_VAR 0 13
47632: PUSH
47633: LD_VAR 0 13
47637: PUSH
47638: LD_INT 2
47640: PLUS
47641: ST_TO_ADDR
// continue ;
47642: GO 47442
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47644: LD_VAR 0 12
47648: PUSH
47649: LD_INT 1
47651: ARRAY
47652: PPUSH
47653: CALL_OW 266
47657: PUSH
47658: LD_INT 5
47660: EQUAL
47661: IFFALSE 47735
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47663: LD_VAR 0 12
47667: PUSH
47668: LD_INT 1
47670: ARRAY
47671: PPUSH
47672: CALL_OW 313
47676: PUSH
47677: LD_INT 3
47679: LESS
47680: IFFALSE 47716
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47682: LD_INT 0
47684: PPUSH
47685: LD_INT 5
47687: PUSH
47688: LD_INT 8
47690: PUSH
47691: LD_INT 9
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: PUSH
47699: LD_VAR 0 17
47703: ARRAY
47704: PPUSH
47705: LD_VAR 0 4
47709: PPUSH
47710: CALL_OW 380
47714: GO 47733
// PrepareHuman ( false , i , skill ) ;
47716: LD_INT 0
47718: PPUSH
47719: LD_VAR 0 8
47723: PPUSH
47724: LD_VAR 0 4
47728: PPUSH
47729: CALL_OW 380
// end else
47733: GO 47752
// PrepareHuman ( false , i , skill ) ;
47735: LD_INT 0
47737: PPUSH
47738: LD_VAR 0 8
47742: PPUSH
47743: LD_VAR 0 4
47747: PPUSH
47748: CALL_OW 380
// un := CreateHuman ;
47752: LD_ADDR_VAR 0 14
47756: PUSH
47757: CALL_OW 44
47761: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47762: LD_ADDR_VAR 0 7
47766: PUSH
47767: LD_VAR 0 7
47771: PPUSH
47772: LD_INT 1
47774: PPUSH
47775: LD_VAR 0 14
47779: PPUSH
47780: CALL_OW 2
47784: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47785: LD_VAR 0 14
47789: PPUSH
47790: LD_VAR 0 12
47794: PUSH
47795: LD_INT 1
47797: ARRAY
47798: PPUSH
47799: CALL_OW 52
// end ;
47803: GO 47442
47805: POP
47806: POP
// end ;
47807: GO 46744
47809: POP
47810: POP
// result := result ^ buildings ;
47811: LD_ADDR_VAR 0 7
47815: PUSH
47816: LD_VAR 0 7
47820: PUSH
47821: LD_VAR 0 18
47825: ADD
47826: ST_TO_ADDR
// end else
47827: GO 47970
// begin for i = 1 to personel do
47829: LD_ADDR_VAR 0 8
47833: PUSH
47834: DOUBLE
47835: LD_INT 1
47837: DEC
47838: ST_TO_ADDR
47839: LD_VAR 0 6
47843: PUSH
47844: FOR_TO
47845: IFFALSE 47968
// begin if i > 4 then
47847: LD_VAR 0 8
47851: PUSH
47852: LD_INT 4
47854: GREATER
47855: IFFALSE 47859
// break ;
47857: GO 47968
// x := personel [ i ] ;
47859: LD_ADDR_VAR 0 13
47863: PUSH
47864: LD_VAR 0 6
47868: PUSH
47869: LD_VAR 0 8
47873: ARRAY
47874: ST_TO_ADDR
// if x = - 1 then
47875: LD_VAR 0 13
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: EQUAL
47884: IFFALSE 47888
// continue ;
47886: GO 47844
// PrepareHuman ( false , i , skill ) ;
47888: LD_INT 0
47890: PPUSH
47891: LD_VAR 0 8
47895: PPUSH
47896: LD_VAR 0 4
47900: PPUSH
47901: CALL_OW 380
// un := CreateHuman ;
47905: LD_ADDR_VAR 0 14
47909: PUSH
47910: CALL_OW 44
47914: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47915: LD_VAR 0 14
47919: PPUSH
47920: LD_VAR 0 1
47924: PPUSH
47925: CALL_OW 250
47929: PPUSH
47930: LD_VAR 0 1
47934: PPUSH
47935: CALL_OW 251
47939: PPUSH
47940: LD_INT 10
47942: PPUSH
47943: LD_INT 0
47945: PPUSH
47946: CALL_OW 50
// result := result ^ un ;
47950: LD_ADDR_VAR 0 7
47954: PUSH
47955: LD_VAR 0 7
47959: PUSH
47960: LD_VAR 0 14
47964: ADD
47965: ST_TO_ADDR
// end ;
47966: GO 47844
47968: POP
47969: POP
// end ; end ;
47970: LD_VAR 0 7
47974: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47975: LD_INT 0
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
47981: PPUSH
47982: PPUSH
47983: PPUSH
47984: PPUSH
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
47992: PPUSH
// result := false ;
47993: LD_ADDR_VAR 0 3
47997: PUSH
47998: LD_INT 0
48000: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48001: LD_VAR 0 1
48005: NOT
48006: PUSH
48007: LD_VAR 0 1
48011: PPUSH
48012: CALL_OW 266
48016: PUSH
48017: LD_INT 32
48019: PUSH
48020: LD_INT 33
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: IN
48027: NOT
48028: OR
48029: IFFALSE 48033
// exit ;
48031: GO 49142
// nat := GetNation ( tower ) ;
48033: LD_ADDR_VAR 0 12
48037: PUSH
48038: LD_VAR 0 1
48042: PPUSH
48043: CALL_OW 248
48047: ST_TO_ADDR
// side := GetSide ( tower ) ;
48048: LD_ADDR_VAR 0 16
48052: PUSH
48053: LD_VAR 0 1
48057: PPUSH
48058: CALL_OW 255
48062: ST_TO_ADDR
// x := GetX ( tower ) ;
48063: LD_ADDR_VAR 0 10
48067: PUSH
48068: LD_VAR 0 1
48072: PPUSH
48073: CALL_OW 250
48077: ST_TO_ADDR
// y := GetY ( tower ) ;
48078: LD_ADDR_VAR 0 11
48082: PUSH
48083: LD_VAR 0 1
48087: PPUSH
48088: CALL_OW 251
48092: ST_TO_ADDR
// if not x or not y then
48093: LD_VAR 0 10
48097: NOT
48098: PUSH
48099: LD_VAR 0 11
48103: NOT
48104: OR
48105: IFFALSE 48109
// exit ;
48107: GO 49142
// weapon := 0 ;
48109: LD_ADDR_VAR 0 18
48113: PUSH
48114: LD_INT 0
48116: ST_TO_ADDR
// fac_list := [ ] ;
48117: LD_ADDR_VAR 0 17
48121: PUSH
48122: EMPTY
48123: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48124: LD_ADDR_VAR 0 6
48128: PUSH
48129: LD_VAR 0 1
48133: PPUSH
48134: CALL_OW 274
48138: PPUSH
48139: LD_VAR 0 2
48143: PPUSH
48144: LD_INT 0
48146: PPUSH
48147: CALL 45713 0 3
48151: PPUSH
48152: LD_INT 30
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PPUSH
48162: CALL_OW 72
48166: ST_TO_ADDR
// if not factories then
48167: LD_VAR 0 6
48171: NOT
48172: IFFALSE 48176
// exit ;
48174: GO 49142
// for i in factories do
48176: LD_ADDR_VAR 0 8
48180: PUSH
48181: LD_VAR 0 6
48185: PUSH
48186: FOR_IN
48187: IFFALSE 48212
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48189: LD_ADDR_VAR 0 17
48193: PUSH
48194: LD_VAR 0 17
48198: PUSH
48199: LD_VAR 0 8
48203: PPUSH
48204: CALL_OW 478
48208: UNION
48209: ST_TO_ADDR
48210: GO 48186
48212: POP
48213: POP
// if not fac_list then
48214: LD_VAR 0 17
48218: NOT
48219: IFFALSE 48223
// exit ;
48221: GO 49142
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48223: LD_ADDR_VAR 0 5
48227: PUSH
48228: LD_INT 4
48230: PUSH
48231: LD_INT 5
48233: PUSH
48234: LD_INT 9
48236: PUSH
48237: LD_INT 10
48239: PUSH
48240: LD_INT 6
48242: PUSH
48243: LD_INT 7
48245: PUSH
48246: LD_INT 11
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 27
48260: PUSH
48261: LD_INT 28
48263: PUSH
48264: LD_INT 26
48266: PUSH
48267: LD_INT 30
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 43
48278: PUSH
48279: LD_INT 44
48281: PUSH
48282: LD_INT 46
48284: PUSH
48285: LD_INT 45
48287: PUSH
48288: LD_INT 47
48290: PUSH
48291: LD_INT 49
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: PUSH
48307: LD_VAR 0 12
48311: ARRAY
48312: ST_TO_ADDR
// list := list isect fac_list ;
48313: LD_ADDR_VAR 0 5
48317: PUSH
48318: LD_VAR 0 5
48322: PUSH
48323: LD_VAR 0 17
48327: ISECT
48328: ST_TO_ADDR
// if not list then
48329: LD_VAR 0 5
48333: NOT
48334: IFFALSE 48338
// exit ;
48336: GO 49142
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48338: LD_VAR 0 12
48342: PUSH
48343: LD_INT 3
48345: EQUAL
48346: PUSH
48347: LD_INT 49
48349: PUSH
48350: LD_VAR 0 5
48354: IN
48355: AND
48356: PUSH
48357: LD_INT 31
48359: PPUSH
48360: LD_VAR 0 16
48364: PPUSH
48365: CALL_OW 321
48369: PUSH
48370: LD_INT 2
48372: EQUAL
48373: AND
48374: IFFALSE 48434
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48376: LD_INT 22
48378: PUSH
48379: LD_VAR 0 16
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 35
48390: PUSH
48391: LD_INT 49
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 91
48400: PUSH
48401: LD_VAR 0 1
48405: PUSH
48406: LD_INT 10
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: PPUSH
48419: CALL_OW 69
48423: NOT
48424: IFFALSE 48434
// weapon := ru_time_lapser ;
48426: LD_ADDR_VAR 0 18
48430: PUSH
48431: LD_INT 49
48433: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48434: LD_VAR 0 12
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: IN
48449: PUSH
48450: LD_INT 11
48452: PUSH
48453: LD_VAR 0 5
48457: IN
48458: PUSH
48459: LD_INT 30
48461: PUSH
48462: LD_VAR 0 5
48466: IN
48467: OR
48468: AND
48469: PUSH
48470: LD_INT 6
48472: PPUSH
48473: LD_VAR 0 16
48477: PPUSH
48478: CALL_OW 321
48482: PUSH
48483: LD_INT 2
48485: EQUAL
48486: AND
48487: IFFALSE 48652
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48489: LD_INT 22
48491: PUSH
48492: LD_VAR 0 16
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 35
48506: PUSH
48507: LD_INT 11
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 35
48516: PUSH
48517: LD_INT 30
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 91
48531: PUSH
48532: LD_VAR 0 1
48536: PUSH
48537: LD_INT 18
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: PPUSH
48550: CALL_OW 69
48554: NOT
48555: PUSH
48556: LD_INT 22
48558: PUSH
48559: LD_VAR 0 16
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 30
48573: PUSH
48574: LD_INT 32
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 30
48583: PUSH
48584: LD_INT 33
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 91
48598: PUSH
48599: LD_VAR 0 1
48603: PUSH
48604: LD_INT 12
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: PPUSH
48620: CALL_OW 69
48624: PUSH
48625: LD_INT 2
48627: GREATER
48628: AND
48629: IFFALSE 48652
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48631: LD_ADDR_VAR 0 18
48635: PUSH
48636: LD_INT 11
48638: PUSH
48639: LD_INT 30
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_VAR 0 12
48650: ARRAY
48651: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48652: LD_VAR 0 18
48656: NOT
48657: PUSH
48658: LD_INT 40
48660: PPUSH
48661: LD_VAR 0 16
48665: PPUSH
48666: CALL_OW 321
48670: PUSH
48671: LD_INT 2
48673: EQUAL
48674: AND
48675: PUSH
48676: LD_INT 7
48678: PUSH
48679: LD_VAR 0 5
48683: IN
48684: PUSH
48685: LD_INT 28
48687: PUSH
48688: LD_VAR 0 5
48692: IN
48693: OR
48694: PUSH
48695: LD_INT 45
48697: PUSH
48698: LD_VAR 0 5
48702: IN
48703: OR
48704: AND
48705: IFFALSE 48959
// begin hex := GetHexInfo ( x , y ) ;
48707: LD_ADDR_VAR 0 4
48711: PUSH
48712: LD_VAR 0 10
48716: PPUSH
48717: LD_VAR 0 11
48721: PPUSH
48722: CALL_OW 546
48726: ST_TO_ADDR
// if hex [ 1 ] then
48727: LD_VAR 0 4
48731: PUSH
48732: LD_INT 1
48734: ARRAY
48735: IFFALSE 48739
// exit ;
48737: GO 49142
// height := hex [ 2 ] ;
48739: LD_ADDR_VAR 0 15
48743: PUSH
48744: LD_VAR 0 4
48748: PUSH
48749: LD_INT 2
48751: ARRAY
48752: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48753: LD_ADDR_VAR 0 14
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 5
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// for i in tmp do
48776: LD_ADDR_VAR 0 8
48780: PUSH
48781: LD_VAR 0 14
48785: PUSH
48786: FOR_IN
48787: IFFALSE 48957
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48789: LD_ADDR_VAR 0 9
48793: PUSH
48794: LD_VAR 0 10
48798: PPUSH
48799: LD_VAR 0 8
48803: PPUSH
48804: LD_INT 5
48806: PPUSH
48807: CALL_OW 272
48811: PUSH
48812: LD_VAR 0 11
48816: PPUSH
48817: LD_VAR 0 8
48821: PPUSH
48822: LD_INT 5
48824: PPUSH
48825: CALL_OW 273
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48834: LD_VAR 0 9
48838: PUSH
48839: LD_INT 1
48841: ARRAY
48842: PPUSH
48843: LD_VAR 0 9
48847: PUSH
48848: LD_INT 2
48850: ARRAY
48851: PPUSH
48852: CALL_OW 488
48856: IFFALSE 48955
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48858: LD_ADDR_VAR 0 4
48862: PUSH
48863: LD_VAR 0 9
48867: PUSH
48868: LD_INT 1
48870: ARRAY
48871: PPUSH
48872: LD_VAR 0 9
48876: PUSH
48877: LD_INT 2
48879: ARRAY
48880: PPUSH
48881: CALL_OW 546
48885: ST_TO_ADDR
// if hex [ 1 ] then
48886: LD_VAR 0 4
48890: PUSH
48891: LD_INT 1
48893: ARRAY
48894: IFFALSE 48898
// continue ;
48896: GO 48786
// h := hex [ 2 ] ;
48898: LD_ADDR_VAR 0 13
48902: PUSH
48903: LD_VAR 0 4
48907: PUSH
48908: LD_INT 2
48910: ARRAY
48911: ST_TO_ADDR
// if h + 7 < height then
48912: LD_VAR 0 13
48916: PUSH
48917: LD_INT 7
48919: PLUS
48920: PUSH
48921: LD_VAR 0 15
48925: LESS
48926: IFFALSE 48955
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48928: LD_ADDR_VAR 0 18
48932: PUSH
48933: LD_INT 7
48935: PUSH
48936: LD_INT 28
48938: PUSH
48939: LD_INT 45
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: PUSH
48947: LD_VAR 0 12
48951: ARRAY
48952: ST_TO_ADDR
// break ;
48953: GO 48957
// end ; end ; end ;
48955: GO 48786
48957: POP
48958: POP
// end ; if not weapon then
48959: LD_VAR 0 18
48963: NOT
48964: IFFALSE 49024
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48966: LD_ADDR_VAR 0 5
48970: PUSH
48971: LD_VAR 0 5
48975: PUSH
48976: LD_INT 11
48978: PUSH
48979: LD_INT 30
48981: PUSH
48982: LD_INT 49
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: DIFF
48990: ST_TO_ADDR
// if not list then
48991: LD_VAR 0 5
48995: NOT
48996: IFFALSE 49000
// exit ;
48998: GO 49142
// weapon := list [ rand ( 1 , list ) ] ;
49000: LD_ADDR_VAR 0 18
49004: PUSH
49005: LD_VAR 0 5
49009: PUSH
49010: LD_INT 1
49012: PPUSH
49013: LD_VAR 0 5
49017: PPUSH
49018: CALL_OW 12
49022: ARRAY
49023: ST_TO_ADDR
// end ; if weapon then
49024: LD_VAR 0 18
49028: IFFALSE 49142
// begin tmp := CostOfWeapon ( weapon ) ;
49030: LD_ADDR_VAR 0 14
49034: PUSH
49035: LD_VAR 0 18
49039: PPUSH
49040: CALL_OW 451
49044: ST_TO_ADDR
// j := GetBase ( tower ) ;
49045: LD_ADDR_VAR 0 9
49049: PUSH
49050: LD_VAR 0 1
49054: PPUSH
49055: CALL_OW 274
49059: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49060: LD_VAR 0 9
49064: PPUSH
49065: LD_INT 1
49067: PPUSH
49068: CALL_OW 275
49072: PUSH
49073: LD_VAR 0 14
49077: PUSH
49078: LD_INT 1
49080: ARRAY
49081: GREATEREQUAL
49082: PUSH
49083: LD_VAR 0 9
49087: PPUSH
49088: LD_INT 2
49090: PPUSH
49091: CALL_OW 275
49095: PUSH
49096: LD_VAR 0 14
49100: PUSH
49101: LD_INT 2
49103: ARRAY
49104: GREATEREQUAL
49105: AND
49106: PUSH
49107: LD_VAR 0 9
49111: PPUSH
49112: LD_INT 3
49114: PPUSH
49115: CALL_OW 275
49119: PUSH
49120: LD_VAR 0 14
49124: PUSH
49125: LD_INT 3
49127: ARRAY
49128: GREATEREQUAL
49129: AND
49130: IFFALSE 49142
// result := weapon ;
49132: LD_ADDR_VAR 0 3
49136: PUSH
49137: LD_VAR 0 18
49141: ST_TO_ADDR
// end ; end ;
49142: LD_VAR 0 3
49146: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49147: LD_INT 0
49149: PPUSH
49150: PPUSH
// result := true ;
49151: LD_ADDR_VAR 0 3
49155: PUSH
49156: LD_INT 1
49158: ST_TO_ADDR
// if array1 = array2 then
49159: LD_VAR 0 1
49163: PUSH
49164: LD_VAR 0 2
49168: EQUAL
49169: IFFALSE 49229
// begin for i = 1 to array1 do
49171: LD_ADDR_VAR 0 4
49175: PUSH
49176: DOUBLE
49177: LD_INT 1
49179: DEC
49180: ST_TO_ADDR
49181: LD_VAR 0 1
49185: PUSH
49186: FOR_TO
49187: IFFALSE 49225
// if array1 [ i ] <> array2 [ i ] then
49189: LD_VAR 0 1
49193: PUSH
49194: LD_VAR 0 4
49198: ARRAY
49199: PUSH
49200: LD_VAR 0 2
49204: PUSH
49205: LD_VAR 0 4
49209: ARRAY
49210: NONEQUAL
49211: IFFALSE 49223
// begin result := false ;
49213: LD_ADDR_VAR 0 3
49217: PUSH
49218: LD_INT 0
49220: ST_TO_ADDR
// break ;
49221: GO 49225
// end ;
49223: GO 49186
49225: POP
49226: POP
// end else
49227: GO 49237
// result := false ;
49229: LD_ADDR_VAR 0 3
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// end ;
49237: LD_VAR 0 3
49241: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49242: LD_INT 0
49244: PPUSH
49245: PPUSH
// if not array1 or not array2 then
49246: LD_VAR 0 1
49250: NOT
49251: PUSH
49252: LD_VAR 0 2
49256: NOT
49257: OR
49258: IFFALSE 49262
// exit ;
49260: GO 49326
// result := true ;
49262: LD_ADDR_VAR 0 3
49266: PUSH
49267: LD_INT 1
49269: ST_TO_ADDR
// for i = 1 to array1 do
49270: LD_ADDR_VAR 0 4
49274: PUSH
49275: DOUBLE
49276: LD_INT 1
49278: DEC
49279: ST_TO_ADDR
49280: LD_VAR 0 1
49284: PUSH
49285: FOR_TO
49286: IFFALSE 49324
// if array1 [ i ] <> array2 [ i ] then
49288: LD_VAR 0 1
49292: PUSH
49293: LD_VAR 0 4
49297: ARRAY
49298: PUSH
49299: LD_VAR 0 2
49303: PUSH
49304: LD_VAR 0 4
49308: ARRAY
49309: NONEQUAL
49310: IFFALSE 49322
// begin result := false ;
49312: LD_ADDR_VAR 0 3
49316: PUSH
49317: LD_INT 0
49319: ST_TO_ADDR
// break ;
49320: GO 49324
// end ;
49322: GO 49285
49324: POP
49325: POP
// end ;
49326: LD_VAR 0 3
49330: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49331: LD_INT 0
49333: PPUSH
49334: PPUSH
49335: PPUSH
// pom := GetBase ( fac ) ;
49336: LD_ADDR_VAR 0 5
49340: PUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: CALL_OW 274
49350: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49351: LD_ADDR_VAR 0 4
49355: PUSH
49356: LD_VAR 0 2
49360: PUSH
49361: LD_INT 1
49363: ARRAY
49364: PPUSH
49365: LD_VAR 0 2
49369: PUSH
49370: LD_INT 2
49372: ARRAY
49373: PPUSH
49374: LD_VAR 0 2
49378: PUSH
49379: LD_INT 3
49381: ARRAY
49382: PPUSH
49383: LD_VAR 0 2
49387: PUSH
49388: LD_INT 4
49390: ARRAY
49391: PPUSH
49392: CALL_OW 449
49396: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49397: LD_ADDR_VAR 0 3
49401: PUSH
49402: LD_VAR 0 5
49406: PPUSH
49407: LD_INT 1
49409: PPUSH
49410: CALL_OW 275
49414: PUSH
49415: LD_VAR 0 4
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: GREATEREQUAL
49424: PUSH
49425: LD_VAR 0 5
49429: PPUSH
49430: LD_INT 2
49432: PPUSH
49433: CALL_OW 275
49437: PUSH
49438: LD_VAR 0 4
49442: PUSH
49443: LD_INT 2
49445: ARRAY
49446: GREATEREQUAL
49447: AND
49448: PUSH
49449: LD_VAR 0 5
49453: PPUSH
49454: LD_INT 3
49456: PPUSH
49457: CALL_OW 275
49461: PUSH
49462: LD_VAR 0 4
49466: PUSH
49467: LD_INT 3
49469: ARRAY
49470: GREATEREQUAL
49471: AND
49472: ST_TO_ADDR
// end ;
49473: LD_VAR 0 3
49477: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49478: LD_INT 0
49480: PPUSH
49481: PPUSH
49482: PPUSH
49483: PPUSH
// pom := GetBase ( building ) ;
49484: LD_ADDR_VAR 0 3
49488: PUSH
49489: LD_VAR 0 1
49493: PPUSH
49494: CALL_OW 274
49498: ST_TO_ADDR
// if not pom then
49499: LD_VAR 0 3
49503: NOT
49504: IFFALSE 49508
// exit ;
49506: GO 49678
// btype := GetBType ( building ) ;
49508: LD_ADDR_VAR 0 5
49512: PUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: CALL_OW 266
49522: ST_TO_ADDR
// if btype = b_armoury then
49523: LD_VAR 0 5
49527: PUSH
49528: LD_INT 4
49530: EQUAL
49531: IFFALSE 49541
// btype := b_barracks ;
49533: LD_ADDR_VAR 0 5
49537: PUSH
49538: LD_INT 5
49540: ST_TO_ADDR
// if btype = b_depot then
49541: LD_VAR 0 5
49545: PUSH
49546: LD_INT 0
49548: EQUAL
49549: IFFALSE 49559
// btype := b_warehouse ;
49551: LD_ADDR_VAR 0 5
49555: PUSH
49556: LD_INT 1
49558: ST_TO_ADDR
// if btype = b_workshop then
49559: LD_VAR 0 5
49563: PUSH
49564: LD_INT 2
49566: EQUAL
49567: IFFALSE 49577
// btype := b_factory ;
49569: LD_ADDR_VAR 0 5
49573: PUSH
49574: LD_INT 3
49576: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49577: LD_ADDR_VAR 0 4
49581: PUSH
49582: LD_VAR 0 5
49586: PPUSH
49587: LD_VAR 0 1
49591: PPUSH
49592: CALL_OW 248
49596: PPUSH
49597: CALL_OW 450
49601: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49602: LD_ADDR_VAR 0 2
49606: PUSH
49607: LD_VAR 0 3
49611: PPUSH
49612: LD_INT 1
49614: PPUSH
49615: CALL_OW 275
49619: PUSH
49620: LD_VAR 0 4
49624: PUSH
49625: LD_INT 1
49627: ARRAY
49628: GREATEREQUAL
49629: PUSH
49630: LD_VAR 0 3
49634: PPUSH
49635: LD_INT 2
49637: PPUSH
49638: CALL_OW 275
49642: PUSH
49643: LD_VAR 0 4
49647: PUSH
49648: LD_INT 2
49650: ARRAY
49651: GREATEREQUAL
49652: AND
49653: PUSH
49654: LD_VAR 0 3
49658: PPUSH
49659: LD_INT 3
49661: PPUSH
49662: CALL_OW 275
49666: PUSH
49667: LD_VAR 0 4
49671: PUSH
49672: LD_INT 3
49674: ARRAY
49675: GREATEREQUAL
49676: AND
49677: ST_TO_ADDR
// end ;
49678: LD_VAR 0 2
49682: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49683: LD_INT 0
49685: PPUSH
49686: PPUSH
49687: PPUSH
// pom := GetBase ( building ) ;
49688: LD_ADDR_VAR 0 4
49692: PUSH
49693: LD_VAR 0 1
49697: PPUSH
49698: CALL_OW 274
49702: ST_TO_ADDR
// if not pom then
49703: LD_VAR 0 4
49707: NOT
49708: IFFALSE 49712
// exit ;
49710: GO 49813
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49712: LD_ADDR_VAR 0 5
49716: PUSH
49717: LD_VAR 0 2
49721: PPUSH
49722: LD_VAR 0 1
49726: PPUSH
49727: CALL_OW 248
49731: PPUSH
49732: CALL_OW 450
49736: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49737: LD_ADDR_VAR 0 3
49741: PUSH
49742: LD_VAR 0 4
49746: PPUSH
49747: LD_INT 1
49749: PPUSH
49750: CALL_OW 275
49754: PUSH
49755: LD_VAR 0 5
49759: PUSH
49760: LD_INT 1
49762: ARRAY
49763: GREATEREQUAL
49764: PUSH
49765: LD_VAR 0 4
49769: PPUSH
49770: LD_INT 2
49772: PPUSH
49773: CALL_OW 275
49777: PUSH
49778: LD_VAR 0 5
49782: PUSH
49783: LD_INT 2
49785: ARRAY
49786: GREATEREQUAL
49787: AND
49788: PUSH
49789: LD_VAR 0 4
49793: PPUSH
49794: LD_INT 3
49796: PPUSH
49797: CALL_OW 275
49801: PUSH
49802: LD_VAR 0 5
49806: PUSH
49807: LD_INT 3
49809: ARRAY
49810: GREATEREQUAL
49811: AND
49812: ST_TO_ADDR
// end ;
49813: LD_VAR 0 3
49817: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49818: LD_INT 0
49820: PPUSH
49821: PPUSH
49822: PPUSH
49823: PPUSH
49824: PPUSH
49825: PPUSH
49826: PPUSH
49827: PPUSH
49828: PPUSH
49829: PPUSH
49830: PPUSH
// result := false ;
49831: LD_ADDR_VAR 0 8
49835: PUSH
49836: LD_INT 0
49838: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49839: LD_VAR 0 5
49843: NOT
49844: PUSH
49845: LD_VAR 0 1
49849: NOT
49850: OR
49851: PUSH
49852: LD_VAR 0 2
49856: NOT
49857: OR
49858: PUSH
49859: LD_VAR 0 3
49863: NOT
49864: OR
49865: IFFALSE 49869
// exit ;
49867: GO 50683
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49869: LD_ADDR_VAR 0 14
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: LD_VAR 0 2
49883: PPUSH
49884: LD_VAR 0 3
49888: PPUSH
49889: LD_VAR 0 4
49893: PPUSH
49894: LD_VAR 0 5
49898: PUSH
49899: LD_INT 1
49901: ARRAY
49902: PPUSH
49903: CALL_OW 248
49907: PPUSH
49908: LD_INT 0
49910: PPUSH
49911: CALL 51916 0 6
49915: ST_TO_ADDR
// if not hexes then
49916: LD_VAR 0 14
49920: NOT
49921: IFFALSE 49925
// exit ;
49923: GO 50683
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49925: LD_ADDR_VAR 0 17
49929: PUSH
49930: LD_VAR 0 5
49934: PPUSH
49935: LD_INT 22
49937: PUSH
49938: LD_VAR 0 13
49942: PPUSH
49943: CALL_OW 255
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 30
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 30
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PPUSH
49984: CALL_OW 72
49988: ST_TO_ADDR
// for i = 1 to hexes do
49989: LD_ADDR_VAR 0 9
49993: PUSH
49994: DOUBLE
49995: LD_INT 1
49997: DEC
49998: ST_TO_ADDR
49999: LD_VAR 0 14
50003: PUSH
50004: FOR_TO
50005: IFFALSE 50681
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50007: LD_ADDR_VAR 0 13
50011: PUSH
50012: LD_VAR 0 14
50016: PUSH
50017: LD_VAR 0 9
50021: ARRAY
50022: PUSH
50023: LD_INT 1
50025: ARRAY
50026: PPUSH
50027: LD_VAR 0 14
50031: PUSH
50032: LD_VAR 0 9
50036: ARRAY
50037: PUSH
50038: LD_INT 2
50040: ARRAY
50041: PPUSH
50042: CALL_OW 428
50046: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50047: LD_VAR 0 14
50051: PUSH
50052: LD_VAR 0 9
50056: ARRAY
50057: PUSH
50058: LD_INT 1
50060: ARRAY
50061: PPUSH
50062: LD_VAR 0 14
50066: PUSH
50067: LD_VAR 0 9
50071: ARRAY
50072: PUSH
50073: LD_INT 2
50075: ARRAY
50076: PPUSH
50077: CALL_OW 351
50081: PUSH
50082: LD_VAR 0 14
50086: PUSH
50087: LD_VAR 0 9
50091: ARRAY
50092: PUSH
50093: LD_INT 1
50095: ARRAY
50096: PPUSH
50097: LD_VAR 0 14
50101: PUSH
50102: LD_VAR 0 9
50106: ARRAY
50107: PUSH
50108: LD_INT 2
50110: ARRAY
50111: PPUSH
50112: CALL_OW 488
50116: NOT
50117: OR
50118: PUSH
50119: LD_VAR 0 13
50123: PPUSH
50124: CALL_OW 247
50128: PUSH
50129: LD_INT 3
50131: EQUAL
50132: OR
50133: IFFALSE 50139
// exit ;
50135: POP
50136: POP
50137: GO 50683
// if not tmp then
50139: LD_VAR 0 13
50143: NOT
50144: IFFALSE 50148
// continue ;
50146: GO 50004
// result := true ;
50148: LD_ADDR_VAR 0 8
50152: PUSH
50153: LD_INT 1
50155: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50156: LD_VAR 0 6
50160: PUSH
50161: LD_VAR 0 13
50165: PPUSH
50166: CALL_OW 247
50170: PUSH
50171: LD_INT 2
50173: EQUAL
50174: AND
50175: PUSH
50176: LD_VAR 0 13
50180: PPUSH
50181: CALL_OW 263
50185: PUSH
50186: LD_INT 1
50188: EQUAL
50189: AND
50190: IFFALSE 50354
// begin if IsDrivenBy ( tmp ) then
50192: LD_VAR 0 13
50196: PPUSH
50197: CALL_OW 311
50201: IFFALSE 50205
// continue ;
50203: GO 50004
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50205: LD_VAR 0 6
50209: PPUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 60
50215: PUSH
50216: EMPTY
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 55
50228: PUSH
50229: EMPTY
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PPUSH
50240: CALL_OW 72
50244: IFFALSE 50352
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50246: LD_ADDR_VAR 0 18
50250: PUSH
50251: LD_VAR 0 6
50255: PPUSH
50256: LD_INT 3
50258: PUSH
50259: LD_INT 60
50261: PUSH
50262: EMPTY
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: LD_INT 55
50274: PUSH
50275: EMPTY
50276: LIST
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PPUSH
50286: CALL_OW 72
50290: PUSH
50291: LD_INT 1
50293: ARRAY
50294: ST_TO_ADDR
// if IsInUnit ( driver ) then
50295: LD_VAR 0 18
50299: PPUSH
50300: CALL_OW 310
50304: IFFALSE 50315
// ComExit ( driver ) ;
50306: LD_VAR 0 18
50310: PPUSH
50311: CALL 75696 0 1
// AddComEnterUnit ( driver , tmp ) ;
50315: LD_VAR 0 18
50319: PPUSH
50320: LD_VAR 0 13
50324: PPUSH
50325: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50329: LD_VAR 0 18
50333: PPUSH
50334: LD_VAR 0 7
50338: PPUSH
50339: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50343: LD_VAR 0 18
50347: PPUSH
50348: CALL_OW 181
// end ; continue ;
50352: GO 50004
// end ; if not cleaners or not tmp in cleaners then
50354: LD_VAR 0 6
50358: NOT
50359: PUSH
50360: LD_VAR 0 13
50364: PUSH
50365: LD_VAR 0 6
50369: IN
50370: NOT
50371: OR
50372: IFFALSE 50679
// begin if dep then
50374: LD_VAR 0 17
50378: IFFALSE 50514
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50380: LD_ADDR_VAR 0 16
50384: PUSH
50385: LD_VAR 0 17
50389: PUSH
50390: LD_INT 1
50392: ARRAY
50393: PPUSH
50394: CALL_OW 250
50398: PPUSH
50399: LD_VAR 0 17
50403: PUSH
50404: LD_INT 1
50406: ARRAY
50407: PPUSH
50408: CALL_OW 254
50412: PPUSH
50413: LD_INT 5
50415: PPUSH
50416: CALL_OW 272
50420: PUSH
50421: LD_VAR 0 17
50425: PUSH
50426: LD_INT 1
50428: ARRAY
50429: PPUSH
50430: CALL_OW 251
50434: PPUSH
50435: LD_VAR 0 17
50439: PUSH
50440: LD_INT 1
50442: ARRAY
50443: PPUSH
50444: CALL_OW 254
50448: PPUSH
50449: LD_INT 5
50451: PPUSH
50452: CALL_OW 273
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50461: LD_VAR 0 16
50465: PUSH
50466: LD_INT 1
50468: ARRAY
50469: PPUSH
50470: LD_VAR 0 16
50474: PUSH
50475: LD_INT 2
50477: ARRAY
50478: PPUSH
50479: CALL_OW 488
50483: IFFALSE 50514
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50485: LD_VAR 0 13
50489: PPUSH
50490: LD_VAR 0 16
50494: PUSH
50495: LD_INT 1
50497: ARRAY
50498: PPUSH
50499: LD_VAR 0 16
50503: PUSH
50504: LD_INT 2
50506: ARRAY
50507: PPUSH
50508: CALL_OW 111
// continue ;
50512: GO 50004
// end ; end ; r := GetDir ( tmp ) ;
50514: LD_ADDR_VAR 0 15
50518: PUSH
50519: LD_VAR 0 13
50523: PPUSH
50524: CALL_OW 254
50528: ST_TO_ADDR
// if r = 5 then
50529: LD_VAR 0 15
50533: PUSH
50534: LD_INT 5
50536: EQUAL
50537: IFFALSE 50547
// r := 0 ;
50539: LD_ADDR_VAR 0 15
50543: PUSH
50544: LD_INT 0
50546: ST_TO_ADDR
// for j = r to 5 do
50547: LD_ADDR_VAR 0 10
50551: PUSH
50552: DOUBLE
50553: LD_VAR 0 15
50557: DEC
50558: ST_TO_ADDR
50559: LD_INT 5
50561: PUSH
50562: FOR_TO
50563: IFFALSE 50677
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50565: LD_ADDR_VAR 0 11
50569: PUSH
50570: LD_VAR 0 13
50574: PPUSH
50575: CALL_OW 250
50579: PPUSH
50580: LD_VAR 0 10
50584: PPUSH
50585: LD_INT 2
50587: PPUSH
50588: CALL_OW 272
50592: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50593: LD_ADDR_VAR 0 12
50597: PUSH
50598: LD_VAR 0 13
50602: PPUSH
50603: CALL_OW 251
50607: PPUSH
50608: LD_VAR 0 10
50612: PPUSH
50613: LD_INT 2
50615: PPUSH
50616: CALL_OW 273
50620: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50621: LD_VAR 0 11
50625: PPUSH
50626: LD_VAR 0 12
50630: PPUSH
50631: CALL_OW 488
50635: PUSH
50636: LD_VAR 0 11
50640: PPUSH
50641: LD_VAR 0 12
50645: PPUSH
50646: CALL_OW 428
50650: NOT
50651: AND
50652: IFFALSE 50675
// begin ComMoveXY ( tmp , _x , _y ) ;
50654: LD_VAR 0 13
50658: PPUSH
50659: LD_VAR 0 11
50663: PPUSH
50664: LD_VAR 0 12
50668: PPUSH
50669: CALL_OW 111
// break ;
50673: GO 50677
// end ; end ;
50675: GO 50562
50677: POP
50678: POP
// end ; end ;
50679: GO 50004
50681: POP
50682: POP
// end ;
50683: LD_VAR 0 8
50687: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50688: LD_INT 0
50690: PPUSH
// result := true ;
50691: LD_ADDR_VAR 0 3
50695: PUSH
50696: LD_INT 1
50698: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50699: LD_VAR 0 2
50703: PUSH
50704: LD_INT 24
50706: DOUBLE
50707: EQUAL
50708: IFTRUE 50718
50710: LD_INT 33
50712: DOUBLE
50713: EQUAL
50714: IFTRUE 50718
50716: GO 50743
50718: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50719: LD_ADDR_VAR 0 3
50723: PUSH
50724: LD_INT 32
50726: PPUSH
50727: LD_VAR 0 1
50731: PPUSH
50732: CALL_OW 321
50736: PUSH
50737: LD_INT 2
50739: EQUAL
50740: ST_TO_ADDR
50741: GO 51059
50743: LD_INT 20
50745: DOUBLE
50746: EQUAL
50747: IFTRUE 50751
50749: GO 50776
50751: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50752: LD_ADDR_VAR 0 3
50756: PUSH
50757: LD_INT 6
50759: PPUSH
50760: LD_VAR 0 1
50764: PPUSH
50765: CALL_OW 321
50769: PUSH
50770: LD_INT 2
50772: EQUAL
50773: ST_TO_ADDR
50774: GO 51059
50776: LD_INT 22
50778: DOUBLE
50779: EQUAL
50780: IFTRUE 50790
50782: LD_INT 36
50784: DOUBLE
50785: EQUAL
50786: IFTRUE 50790
50788: GO 50815
50790: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50791: LD_ADDR_VAR 0 3
50795: PUSH
50796: LD_INT 15
50798: PPUSH
50799: LD_VAR 0 1
50803: PPUSH
50804: CALL_OW 321
50808: PUSH
50809: LD_INT 2
50811: EQUAL
50812: ST_TO_ADDR
50813: GO 51059
50815: LD_INT 30
50817: DOUBLE
50818: EQUAL
50819: IFTRUE 50823
50821: GO 50848
50823: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50824: LD_ADDR_VAR 0 3
50828: PUSH
50829: LD_INT 20
50831: PPUSH
50832: LD_VAR 0 1
50836: PPUSH
50837: CALL_OW 321
50841: PUSH
50842: LD_INT 2
50844: EQUAL
50845: ST_TO_ADDR
50846: GO 51059
50848: LD_INT 28
50850: DOUBLE
50851: EQUAL
50852: IFTRUE 50862
50854: LD_INT 21
50856: DOUBLE
50857: EQUAL
50858: IFTRUE 50862
50860: GO 50887
50862: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50863: LD_ADDR_VAR 0 3
50867: PUSH
50868: LD_INT 21
50870: PPUSH
50871: LD_VAR 0 1
50875: PPUSH
50876: CALL_OW 321
50880: PUSH
50881: LD_INT 2
50883: EQUAL
50884: ST_TO_ADDR
50885: GO 51059
50887: LD_INT 16
50889: DOUBLE
50890: EQUAL
50891: IFTRUE 50895
50893: GO 50920
50895: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50896: LD_ADDR_VAR 0 3
50900: PUSH
50901: LD_INT 84
50903: PPUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: CALL_OW 321
50913: PUSH
50914: LD_INT 2
50916: EQUAL
50917: ST_TO_ADDR
50918: GO 51059
50920: LD_INT 19
50922: DOUBLE
50923: EQUAL
50924: IFTRUE 50934
50926: LD_INT 23
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 50959
50934: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50935: LD_ADDR_VAR 0 3
50939: PUSH
50940: LD_INT 83
50942: PPUSH
50943: LD_VAR 0 1
50947: PPUSH
50948: CALL_OW 321
50952: PUSH
50953: LD_INT 2
50955: EQUAL
50956: ST_TO_ADDR
50957: GO 51059
50959: LD_INT 17
50961: DOUBLE
50962: EQUAL
50963: IFTRUE 50967
50965: GO 50992
50967: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50968: LD_ADDR_VAR 0 3
50972: PUSH
50973: LD_INT 39
50975: PPUSH
50976: LD_VAR 0 1
50980: PPUSH
50981: CALL_OW 321
50985: PUSH
50986: LD_INT 2
50988: EQUAL
50989: ST_TO_ADDR
50990: GO 51059
50992: LD_INT 18
50994: DOUBLE
50995: EQUAL
50996: IFTRUE 51000
50998: GO 51025
51000: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51001: LD_ADDR_VAR 0 3
51005: PUSH
51006: LD_INT 40
51008: PPUSH
51009: LD_VAR 0 1
51013: PPUSH
51014: CALL_OW 321
51018: PUSH
51019: LD_INT 2
51021: EQUAL
51022: ST_TO_ADDR
51023: GO 51059
51025: LD_INT 27
51027: DOUBLE
51028: EQUAL
51029: IFTRUE 51033
51031: GO 51058
51033: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51034: LD_ADDR_VAR 0 3
51038: PUSH
51039: LD_INT 35
51041: PPUSH
51042: LD_VAR 0 1
51046: PPUSH
51047: CALL_OW 321
51051: PUSH
51052: LD_INT 2
51054: EQUAL
51055: ST_TO_ADDR
51056: GO 51059
51058: POP
// end ;
51059: LD_VAR 0 3
51063: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51064: LD_INT 0
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
// result := false ;
51077: LD_ADDR_VAR 0 6
51081: PUSH
51082: LD_INT 0
51084: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51085: LD_VAR 0 1
51089: NOT
51090: PUSH
51091: LD_VAR 0 1
51095: PPUSH
51096: CALL_OW 266
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: IN
51111: NOT
51112: OR
51113: PUSH
51114: LD_VAR 0 2
51118: NOT
51119: OR
51120: PUSH
51121: LD_VAR 0 5
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 4
51140: PUSH
51141: LD_INT 5
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: IN
51152: NOT
51153: OR
51154: PUSH
51155: LD_VAR 0 3
51159: PPUSH
51160: LD_VAR 0 4
51164: PPUSH
51165: CALL_OW 488
51169: NOT
51170: OR
51171: IFFALSE 51175
// exit ;
51173: GO 51911
// side := GetSide ( depot ) ;
51175: LD_ADDR_VAR 0 9
51179: PUSH
51180: LD_VAR 0 1
51184: PPUSH
51185: CALL_OW 255
51189: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51190: LD_VAR 0 9
51194: PPUSH
51195: LD_VAR 0 2
51199: PPUSH
51200: CALL 50688 0 2
51204: NOT
51205: IFFALSE 51209
// exit ;
51207: GO 51911
// pom := GetBase ( depot ) ;
51209: LD_ADDR_VAR 0 10
51213: PUSH
51214: LD_VAR 0 1
51218: PPUSH
51219: CALL_OW 274
51223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51224: LD_ADDR_VAR 0 11
51228: PUSH
51229: LD_VAR 0 2
51233: PPUSH
51234: LD_VAR 0 1
51238: PPUSH
51239: CALL_OW 248
51243: PPUSH
51244: CALL_OW 450
51248: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51249: LD_VAR 0 10
51253: PPUSH
51254: LD_INT 1
51256: PPUSH
51257: CALL_OW 275
51261: PUSH
51262: LD_VAR 0 11
51266: PUSH
51267: LD_INT 1
51269: ARRAY
51270: GREATEREQUAL
51271: PUSH
51272: LD_VAR 0 10
51276: PPUSH
51277: LD_INT 2
51279: PPUSH
51280: CALL_OW 275
51284: PUSH
51285: LD_VAR 0 11
51289: PUSH
51290: LD_INT 2
51292: ARRAY
51293: GREATEREQUAL
51294: AND
51295: PUSH
51296: LD_VAR 0 10
51300: PPUSH
51301: LD_INT 3
51303: PPUSH
51304: CALL_OW 275
51308: PUSH
51309: LD_VAR 0 11
51313: PUSH
51314: LD_INT 3
51316: ARRAY
51317: GREATEREQUAL
51318: AND
51319: NOT
51320: IFFALSE 51324
// exit ;
51322: GO 51911
// if GetBType ( depot ) = b_depot then
51324: LD_VAR 0 1
51328: PPUSH
51329: CALL_OW 266
51333: PUSH
51334: LD_INT 0
51336: EQUAL
51337: IFFALSE 51349
// dist := 28 else
51339: LD_ADDR_VAR 0 14
51343: PUSH
51344: LD_INT 28
51346: ST_TO_ADDR
51347: GO 51357
// dist := 36 ;
51349: LD_ADDR_VAR 0 14
51353: PUSH
51354: LD_INT 36
51356: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51357: LD_VAR 0 1
51361: PPUSH
51362: LD_VAR 0 3
51366: PPUSH
51367: LD_VAR 0 4
51371: PPUSH
51372: CALL_OW 297
51376: PUSH
51377: LD_VAR 0 14
51381: GREATER
51382: IFFALSE 51386
// exit ;
51384: GO 51911
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51386: LD_ADDR_VAR 0 12
51390: PUSH
51391: LD_VAR 0 2
51395: PPUSH
51396: LD_VAR 0 3
51400: PPUSH
51401: LD_VAR 0 4
51405: PPUSH
51406: LD_VAR 0 5
51410: PPUSH
51411: LD_VAR 0 1
51415: PPUSH
51416: CALL_OW 248
51420: PPUSH
51421: LD_INT 0
51423: PPUSH
51424: CALL 51916 0 6
51428: ST_TO_ADDR
// if not hexes then
51429: LD_VAR 0 12
51433: NOT
51434: IFFALSE 51438
// exit ;
51436: GO 51911
// hex := GetHexInfo ( x , y ) ;
51438: LD_ADDR_VAR 0 15
51442: PUSH
51443: LD_VAR 0 3
51447: PPUSH
51448: LD_VAR 0 4
51452: PPUSH
51453: CALL_OW 546
51457: ST_TO_ADDR
// if hex [ 1 ] then
51458: LD_VAR 0 15
51462: PUSH
51463: LD_INT 1
51465: ARRAY
51466: IFFALSE 51470
// exit ;
51468: GO 51911
// height := hex [ 2 ] ;
51470: LD_ADDR_VAR 0 13
51474: PUSH
51475: LD_VAR 0 15
51479: PUSH
51480: LD_INT 2
51482: ARRAY
51483: ST_TO_ADDR
// for i = 1 to hexes do
51484: LD_ADDR_VAR 0 7
51488: PUSH
51489: DOUBLE
51490: LD_INT 1
51492: DEC
51493: ST_TO_ADDR
51494: LD_VAR 0 12
51498: PUSH
51499: FOR_TO
51500: IFFALSE 51830
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51502: LD_VAR 0 12
51506: PUSH
51507: LD_VAR 0 7
51511: ARRAY
51512: PUSH
51513: LD_INT 1
51515: ARRAY
51516: PPUSH
51517: LD_VAR 0 12
51521: PUSH
51522: LD_VAR 0 7
51526: ARRAY
51527: PUSH
51528: LD_INT 2
51530: ARRAY
51531: PPUSH
51532: CALL_OW 488
51536: NOT
51537: PUSH
51538: LD_VAR 0 12
51542: PUSH
51543: LD_VAR 0 7
51547: ARRAY
51548: PUSH
51549: LD_INT 1
51551: ARRAY
51552: PPUSH
51553: LD_VAR 0 12
51557: PUSH
51558: LD_VAR 0 7
51562: ARRAY
51563: PUSH
51564: LD_INT 2
51566: ARRAY
51567: PPUSH
51568: CALL_OW 428
51572: PUSH
51573: LD_INT 0
51575: GREATER
51576: OR
51577: PUSH
51578: LD_VAR 0 12
51582: PUSH
51583: LD_VAR 0 7
51587: ARRAY
51588: PUSH
51589: LD_INT 1
51591: ARRAY
51592: PPUSH
51593: LD_VAR 0 12
51597: PUSH
51598: LD_VAR 0 7
51602: ARRAY
51603: PUSH
51604: LD_INT 2
51606: ARRAY
51607: PPUSH
51608: CALL_OW 351
51612: OR
51613: IFFALSE 51619
// exit ;
51615: POP
51616: POP
51617: GO 51911
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51619: LD_ADDR_VAR 0 8
51623: PUSH
51624: LD_VAR 0 12
51628: PUSH
51629: LD_VAR 0 7
51633: ARRAY
51634: PUSH
51635: LD_INT 1
51637: ARRAY
51638: PPUSH
51639: LD_VAR 0 12
51643: PUSH
51644: LD_VAR 0 7
51648: ARRAY
51649: PUSH
51650: LD_INT 2
51652: ARRAY
51653: PPUSH
51654: CALL_OW 546
51658: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51659: LD_VAR 0 8
51663: PUSH
51664: LD_INT 1
51666: ARRAY
51667: PUSH
51668: LD_VAR 0 8
51672: PUSH
51673: LD_INT 2
51675: ARRAY
51676: PUSH
51677: LD_VAR 0 13
51681: PUSH
51682: LD_INT 2
51684: PLUS
51685: GREATER
51686: OR
51687: PUSH
51688: LD_VAR 0 8
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: PUSH
51697: LD_VAR 0 13
51701: PUSH
51702: LD_INT 2
51704: MINUS
51705: LESS
51706: OR
51707: PUSH
51708: LD_VAR 0 8
51712: PUSH
51713: LD_INT 3
51715: ARRAY
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 8
51722: PUSH
51723: LD_INT 9
51725: PUSH
51726: LD_INT 10
51728: PUSH
51729: LD_INT 11
51731: PUSH
51732: LD_INT 12
51734: PUSH
51735: LD_INT 13
51737: PUSH
51738: LD_INT 16
51740: PUSH
51741: LD_INT 17
51743: PUSH
51744: LD_INT 18
51746: PUSH
51747: LD_INT 19
51749: PUSH
51750: LD_INT 20
51752: PUSH
51753: LD_INT 21
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: IN
51771: NOT
51772: OR
51773: PUSH
51774: LD_VAR 0 8
51778: PUSH
51779: LD_INT 5
51781: ARRAY
51782: NOT
51783: OR
51784: PUSH
51785: LD_VAR 0 8
51789: PUSH
51790: LD_INT 6
51792: ARRAY
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: LD_INT 7
51802: PUSH
51803: LD_INT 9
51805: PUSH
51806: LD_INT 10
51808: PUSH
51809: LD_INT 11
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: IN
51820: NOT
51821: OR
51822: IFFALSE 51828
// exit ;
51824: POP
51825: POP
51826: GO 51911
// end ;
51828: GO 51499
51830: POP
51831: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51832: LD_VAR 0 9
51836: PPUSH
51837: LD_VAR 0 3
51841: PPUSH
51842: LD_VAR 0 4
51846: PPUSH
51847: LD_INT 20
51849: PPUSH
51850: CALL 43863 0 4
51854: PUSH
51855: LD_INT 4
51857: ARRAY
51858: IFFALSE 51862
// exit ;
51860: GO 51911
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51862: LD_VAR 0 2
51866: PUSH
51867: LD_INT 29
51869: PUSH
51870: LD_INT 30
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: IN
51877: PUSH
51878: LD_VAR 0 3
51882: PPUSH
51883: LD_VAR 0 4
51887: PPUSH
51888: LD_VAR 0 9
51892: PPUSH
51893: CALL_OW 440
51897: NOT
51898: AND
51899: IFFALSE 51903
// exit ;
51901: GO 51911
// result := true ;
51903: LD_ADDR_VAR 0 6
51907: PUSH
51908: LD_INT 1
51910: ST_TO_ADDR
// end ;
51911: LD_VAR 0 6
51915: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51916: LD_INT 0
51918: PPUSH
51919: PPUSH
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
51926: PPUSH
51927: PPUSH
51928: PPUSH
51929: PPUSH
51930: PPUSH
51931: PPUSH
51932: PPUSH
51933: PPUSH
51934: PPUSH
51935: PPUSH
51936: PPUSH
51937: PPUSH
51938: PPUSH
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
// result = [ ] ;
51976: LD_ADDR_VAR 0 7
51980: PUSH
51981: EMPTY
51982: ST_TO_ADDR
// temp_list = [ ] ;
51983: LD_ADDR_VAR 0 9
51987: PUSH
51988: EMPTY
51989: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51990: LD_VAR 0 4
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: LD_INT 5
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: IN
52021: NOT
52022: PUSH
52023: LD_VAR 0 1
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: IN
52038: PUSH
52039: LD_VAR 0 5
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: IN
52058: NOT
52059: AND
52060: OR
52061: IFFALSE 52065
// exit ;
52063: GO 70456
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52065: LD_VAR 0 1
52069: PUSH
52070: LD_INT 6
52072: PUSH
52073: LD_INT 7
52075: PUSH
52076: LD_INT 8
52078: PUSH
52079: LD_INT 13
52081: PUSH
52082: LD_INT 12
52084: PUSH
52085: LD_INT 15
52087: PUSH
52088: LD_INT 11
52090: PUSH
52091: LD_INT 14
52093: PUSH
52094: LD_INT 10
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: IN
52108: IFFALSE 52118
// btype = b_lab ;
52110: LD_ADDR_VAR 0 1
52114: PUSH
52115: LD_INT 6
52117: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52118: LD_VAR 0 6
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: IN
52137: NOT
52138: PUSH
52139: LD_VAR 0 1
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: LD_INT 6
52158: PUSH
52159: LD_INT 36
52161: PUSH
52162: LD_INT 4
52164: PUSH
52165: LD_INT 5
52167: PUSH
52168: LD_INT 31
52170: PUSH
52171: LD_INT 32
52173: PUSH
52174: LD_INT 33
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: IN
52190: NOT
52191: PUSH
52192: LD_VAR 0 6
52196: PUSH
52197: LD_INT 1
52199: EQUAL
52200: AND
52201: OR
52202: PUSH
52203: LD_VAR 0 1
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: IN
52218: NOT
52219: PUSH
52220: LD_VAR 0 6
52224: PUSH
52225: LD_INT 2
52227: EQUAL
52228: AND
52229: OR
52230: IFFALSE 52240
// mode = 0 ;
52232: LD_ADDR_VAR 0 6
52236: PUSH
52237: LD_INT 0
52239: ST_TO_ADDR
// case mode of 0 :
52240: LD_VAR 0 6
52244: PUSH
52245: LD_INT 0
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 63706
52253: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52254: LD_ADDR_VAR 0 11
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52447: LD_ADDR_VAR 0 12
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52643: LD_ADDR_VAR 0 13
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 3
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: NEG
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52842: LD_ADDR_VAR 0 14
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53038: LD_ADDR_VAR 0 15
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53231: LD_ADDR_VAR 0 16
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53424: LD_ADDR_VAR 0 17
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53654: LD_ADDR_VAR 0 18
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53884: LD_ADDR_VAR 0 19
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54114: LD_ADDR_VAR 0 20
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54344: LD_ADDR_VAR 0 21
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54574: LD_ADDR_VAR 0 22
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54804: LD_ADDR_VAR 0 23
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55084: LD_ADDR_VAR 0 24
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55360: LD_ADDR_VAR 0 25
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55634: LD_ADDR_VAR 0 26
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: LD_INT 3
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 3
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55910: LD_ADDR_VAR 0 27
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56190: LD_ADDR_VAR 0 28
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: LD_INT 3
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 3
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56472: LD_ADDR_VAR 0 29
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56751: LD_ADDR_VAR 0 30
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57029: LD_ADDR_VAR 0 31
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57307: LD_ADDR_VAR 0 32
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57585: LD_ADDR_VAR 0 33
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57864: LD_ADDR_VAR 0 34
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58144: LD_ADDR_VAR 0 35
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58256: LD_ADDR_VAR 0 36
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58368: LD_ADDR_VAR 0 37
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58480: LD_ADDR_VAR 0 38
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58592: LD_ADDR_VAR 0 39
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58704: LD_ADDR_VAR 0 40
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58816: LD_ADDR_VAR 0 41
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 3
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59166: LD_ADDR_VAR 0 42
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 3
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59516: LD_ADDR_VAR 0 43
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59864: LD_ADDR_VAR 0 44
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: LD_INT 2
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60214: LD_ADDR_VAR 0 45
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: PUSH
60461: LD_INT 3
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60564: LD_ADDR_VAR 0 46
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60912: LD_ADDR_VAR 0 47
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61063: LD_ADDR_VAR 0 48
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61210: LD_ADDR_VAR 0 49
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61354: LD_ADDR_VAR 0 50
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61498: LD_ADDR_VAR 0 51
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61645: LD_ADDR_VAR 0 52
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61796: LD_ADDR_VAR 0 53
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62026: LD_ADDR_VAR 0 54
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 2
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62256: LD_ADDR_VAR 0 55
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 2
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62486: LD_ADDR_VAR 0 56
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62716: LD_ADDR_VAR 0 57
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62946: LD_ADDR_VAR 0 58
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 2
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 2
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63176: LD_ADDR_VAR 0 59
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63264: LD_ADDR_VAR 0 60
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63352: LD_ADDR_VAR 0 61
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63440: LD_ADDR_VAR 0 62
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63528: LD_ADDR_VAR 0 63
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63616: LD_ADDR_VAR 0 64
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: ST_TO_ADDR
// end ; 1 :
63704: GO 69601
63706: LD_INT 1
63708: DOUBLE
63709: EQUAL
63710: IFTRUE 63714
63712: GO 66337
63714: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63715: LD_ADDR_VAR 0 11
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: LIST
63758: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63759: LD_ADDR_VAR 0 12
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 3
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63800: LD_ADDR_VAR 0 13
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63840: LD_ADDR_VAR 0 14
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 3
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63881: LD_ADDR_VAR 0 15
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63925: LD_ADDR_VAR 0 16
63929: PUSH
63930: LD_INT 2
63932: NEG
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: LD_INT 3
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: LIST
63970: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63971: LD_ADDR_VAR 0 17
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 3
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 3
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64015: LD_ADDR_VAR 0 18
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64056: LD_ADDR_VAR 0 19
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: LD_INT 3
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64096: LD_ADDR_VAR 0 20
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 3
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64137: LD_ADDR_VAR 0 21
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 3
64155: NEG
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 3
64166: NEG
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64181: LD_ADDR_VAR 0 22
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: LD_INT 3
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64227: LD_ADDR_VAR 0 23
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 3
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 4
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 3
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64271: LD_ADDR_VAR 0 24
64275: PUSH
64276: LD_INT 3
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 4
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64312: LD_ADDR_VAR 0 25
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: LD_INT 3
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 4
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: LD_INT 4
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64352: LD_ADDR_VAR 0 26
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: LD_INT 4
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64393: LD_ADDR_VAR 0 27
64397: PUSH
64398: LD_INT 3
64400: NEG
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: NEG
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 4
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64437: LD_ADDR_VAR 0 28
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 3
64456: NEG
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 4
64468: NEG
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64483: LD_ADDR_VAR 0 29
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 3
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 4
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 4
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 5
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 5
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 4
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 6
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 6
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 5
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64638: LD_ADDR_VAR 0 30
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 4
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 4
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 4
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 5
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 5
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 5
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 6
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 6
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64781: LD_ADDR_VAR 0 31
64785: PUSH
64786: LD_INT 3
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 3
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 4
64818: PUSH
64819: LD_INT 3
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 4
64828: PUSH
64829: LD_INT 4
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 5
64848: PUSH
64849: LD_INT 4
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 5
64858: PUSH
64859: LD_INT 5
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: LD_INT 5
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 6
64878: PUSH
64879: LD_INT 5
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 6
64888: PUSH
64889: LD_INT 6
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 5
64898: PUSH
64899: LD_INT 6
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64920: LD_ADDR_VAR 0 32
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: LD_INT 3
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 3
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: LD_INT 4
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 5
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 5
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 4
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: LD_INT 6
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 6
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: LD_INT 5
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65063: LD_ADDR_VAR 0 33
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 3
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: NEG
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 4
65115: NEG
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 4
65126: NEG
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 4
65138: NEG
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 5
65149: NEG
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 5
65160: NEG
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 5
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 6
65183: NEG
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 6
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65218: LD_ADDR_VAR 0 34
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: LD_INT 3
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: LD_INT 4
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 4
65273: NEG
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 4
65285: NEG
65286: PUSH
65287: LD_INT 4
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 4
65297: NEG
65298: PUSH
65299: LD_INT 5
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 5
65309: NEG
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 5
65321: NEG
65322: PUSH
65323: LD_INT 5
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 5
65333: NEG
65334: PUSH
65335: LD_INT 6
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 6
65345: NEG
65346: PUSH
65347: LD_INT 5
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 6
65357: NEG
65358: PUSH
65359: LD_INT 6
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65381: LD_ADDR_VAR 0 41
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65425: LD_ADDR_VAR 0 42
65429: PUSH
65430: LD_INT 2
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65466: LD_ADDR_VAR 0 43
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65506: LD_ADDR_VAR 0 44
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: LD_INT 3
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 1
65533: NEG
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65547: LD_ADDR_VAR 0 45
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65591: LD_ADDR_VAR 0 46
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: LD_INT 2
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: NEG
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65637: LD_ADDR_VAR 0 47
65641: PUSH
65642: LD_INT 2
65644: NEG
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 3
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65670: LD_ADDR_VAR 0 48
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 1
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65701: LD_ADDR_VAR 0 49
65705: PUSH
65706: LD_INT 3
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65730: LD_ADDR_VAR 0 50
65734: PUSH
65735: LD_INT 2
65737: PUSH
65738: LD_INT 3
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: LD_INT 3
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65759: LD_ADDR_VAR 0 51
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65790: LD_ADDR_VAR 0 52
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: LD_INT 2
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65823: LD_ADDR_VAR 0 53
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65867: LD_ADDR_VAR 0 54
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: LIST
65907: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65908: LD_ADDR_VAR 0 55
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 3
65925: PUSH
65926: LD_INT 3
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65948: LD_ADDR_VAR 0 56
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: LD_INT 3
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65989: LD_ADDR_VAR 0 57
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 3
66018: NEG
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66033: LD_ADDR_VAR 0 58
66037: PUSH
66038: LD_INT 2
66040: NEG
66041: PUSH
66042: LD_INT 3
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: LD_INT 2
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: NEG
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66079: LD_ADDR_VAR 0 59
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66123: LD_ADDR_VAR 0 60
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66164: LD_ADDR_VAR 0 61
66168: PUSH
66169: LD_INT 2
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 2
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 2
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66204: LD_ADDR_VAR 0 62
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66245: LD_ADDR_VAR 0 63
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 2
66263: NEG
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 2
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66289: LD_ADDR_VAR 0 64
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: ST_TO_ADDR
// end ; 2 :
66335: GO 69601
66337: LD_INT 2
66339: DOUBLE
66340: EQUAL
66341: IFTRUE 66345
66343: GO 69600
66345: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66346: LD_ADDR_VAR 0 29
66350: PUSH
66351: LD_INT 4
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 4
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 5
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 5
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 4
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 2
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 5
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 4
66466: PUSH
66467: LD_INT 3
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 4
66476: PUSH
66477: LD_INT 4
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: LD_INT 4
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: LD_INT 3
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 4
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: LD_INT 4
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: LD_INT 4
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: LD_INT 5
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: LD_INT 5
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: LD_INT 4
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 1
66597: NEG
66598: PUSH
66599: LD_INT 3
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: PUSH
66609: LD_INT 5
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 2
66618: NEG
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: NEG
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 3
66640: NEG
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 3
66674: NEG
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 4
66685: NEG
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: NEG
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 4
66708: NEG
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: NEG
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 4
66731: NEG
66732: PUSH
66733: LD_INT 4
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: LD_INT 5
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: LD_INT 4
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 3
66767: NEG
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 4
66779: NEG
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 5
66791: NEG
66792: PUSH
66793: LD_INT 4
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 5
66803: NEG
66804: PUSH
66805: LD_INT 5
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 5
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 5
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66884: LD_ADDR_VAR 0 30
66888: PUSH
66889: LD_INT 4
66891: PUSH
66892: LD_INT 4
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 5
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 5
66921: PUSH
66922: LD_INT 5
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: LD_INT 5
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 5
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: LD_INT 5
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 4
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 2
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: LD_INT 4
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 4
67074: NEG
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 4
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 3
67108: NEG
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 4
67119: NEG
67120: PUSH
67121: LD_INT 1
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 5
67130: NEG
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 5
67141: NEG
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 5
67153: NEG
67154: PUSH
67155: LD_INT 2
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: LD_INT 2
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: NEG
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 4
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 2
67212: NEG
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 4
67236: NEG
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 4
67248: NEG
67249: PUSH
67250: LD_INT 4
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 2
67260: NEG
67261: PUSH
67262: LD_INT 4
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 4
67272: NEG
67273: PUSH
67274: LD_INT 2
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 5
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: LD_INT 5
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: LD_INT 3
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: LD_INT 5
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67431: LD_ADDR_VAR 0 31
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: LD_INT 4
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: LD_INT 3
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 4
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: LD_INT 5
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 5
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: LD_INT 4
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: LD_INT 3
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: LD_INT 5
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: NEG
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: NEG
67543: PUSH
67544: LD_INT 1
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 2
67554: NEG
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 4
67587: NEG
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: NEG
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 4
67610: NEG
67611: PUSH
67612: LD_INT 2
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: NEG
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 4
67633: NEG
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 4
67645: NEG
67646: PUSH
67647: LD_INT 5
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 3
67657: NEG
67658: PUSH
67659: LD_INT 4
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: LD_INT 3
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 4
67681: NEG
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: NEG
67694: PUSH
67695: LD_INT 4
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 5
67705: NEG
67706: PUSH
67707: LD_INT 5
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: NEG
67718: PUSH
67719: LD_INT 5
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 5
67729: NEG
67730: PUSH
67731: LD_INT 3
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 4
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 3
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: LD_INT 2
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 2
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: LD_INT 4
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 2
67820: PUSH
67821: LD_INT 2
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: LD_INT 4
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 4
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 4
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 5
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 5
67874: PUSH
67875: LD_INT 1
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 4
67884: PUSH
67885: LD_INT 1
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 3
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 3
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 5
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67981: LD_ADDR_VAR 0 32
67985: PUSH
67986: LD_INT 4
67988: NEG
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 4
67999: NEG
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 3
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 4
68033: NEG
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 5
68044: NEG
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 5
68055: NEG
68056: PUSH
68057: LD_INT 1
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 5
68067: NEG
68068: PUSH
68069: LD_INT 2
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 3
68079: NEG
68080: PUSH
68081: LD_INT 2
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: NEG
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: LD_INT 4
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: LD_INT 2
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: LD_INT 2
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 4
68150: NEG
68151: PUSH
68152: LD_INT 3
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 4
68162: NEG
68163: PUSH
68164: LD_INT 4
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: LD_INT 4
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 4
68186: NEG
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 4
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: LD_INT 5
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: PUSH
68221: LD_INT 4
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: LD_INT 4
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: LD_INT 3
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 2
68288: NEG
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 3
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 3
68310: PUSH
68311: LD_INT 1
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 4
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 2
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: LD_INT 2
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 4
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 4
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 4
68403: PUSH
68404: LD_INT 3
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 5
68413: PUSH
68414: LD_INT 4
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 5
68423: PUSH
68424: LD_INT 5
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: PUSH
68434: LD_INT 5
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: LD_INT 4
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 3
68453: PUSH
68454: LD_INT 3
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 5
68463: PUSH
68464: LD_INT 3
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: LD_INT 5
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68528: LD_ADDR_VAR 0 33
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: LD_INT 4
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 4
68547: NEG
68548: PUSH
68549: LD_INT 5
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: LD_INT 4
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 3
68571: NEG
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 4
68583: NEG
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 5
68595: NEG
68596: PUSH
68597: LD_INT 4
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 5
68607: NEG
68608: PUSH
68609: LD_INT 5
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 3
68619: NEG
68620: PUSH
68621: LD_INT 5
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 5
68631: NEG
68632: PUSH
68633: LD_INT 3
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 3
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: LD_INT 4
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: PUSH
68666: LD_INT 3
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 1
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: LD_INT 2
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 1
68698: NEG
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: NEG
68711: PUSH
68712: LD_INT 4
68714: NEG
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 2
68722: PUSH
68723: LD_INT 2
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 2
68733: NEG
68734: PUSH
68735: LD_INT 4
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 4
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 4
68755: PUSH
68756: LD_INT 1
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 5
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 5
68776: PUSH
68777: LD_INT 1
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 4
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: LD_INT 0
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: LD_INT 1
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 3
68817: PUSH
68818: LD_INT 2
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 5
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 3
68838: PUSH
68839: LD_INT 3
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: LD_INT 2
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 4
68858: PUSH
68859: LD_INT 3
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 4
68868: PUSH
68869: LD_INT 4
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 3
68878: PUSH
68879: LD_INT 4
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 2
68888: PUSH
68889: LD_INT 3
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: LD_INT 2
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 4
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: LD_INT 4
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: LD_INT 4
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: LD_INT 5
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: LD_INT 5
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: LD_INT 3
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: PUSH
69001: LD_INT 5
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: LD_INT 3
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69066: LD_ADDR_VAR 0 34
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 4
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: LD_INT 5
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: LD_INT 4
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 3
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: LD_INT 4
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: NEG
69141: PUSH
69142: LD_INT 5
69144: NEG
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 2
69163: NEG
69164: PUSH
69165: LD_INT 5
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 3
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 3
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 4
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 4
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 2
69247: PUSH
69248: LD_INT 2
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 4
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 4
69268: PUSH
69269: LD_INT 4
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 4
69278: PUSH
69279: LD_INT 3
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 5
69288: PUSH
69289: LD_INT 4
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 5
69298: PUSH
69299: LD_INT 5
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: LD_INT 5
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 3
69318: PUSH
69319: LD_INT 4
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 3
69328: PUSH
69329: LD_INT 3
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 5
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: LD_INT 5
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 0
69368: PUSH
69369: LD_INT 2
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 1
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 4
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 1
69419: NEG
69420: PUSH
69421: LD_INT 2
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 2
69440: NEG
69441: PUSH
69442: LD_INT 2
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 4
69451: NEG
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 4
69462: NEG
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: LD_INT 1
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 4
69496: NEG
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 5
69507: NEG
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 5
69518: NEG
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 5
69530: NEG
69531: PUSH
69532: LD_INT 2
69534: NEG
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: NEG
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: ST_TO_ADDR
// end ; end ;
69598: GO 69601
69600: POP
// case btype of b_depot , b_warehouse :
69601: LD_VAR 0 1
69605: PUSH
69606: LD_INT 0
69608: DOUBLE
69609: EQUAL
69610: IFTRUE 69620
69612: LD_INT 1
69614: DOUBLE
69615: EQUAL
69616: IFTRUE 69620
69618: GO 69821
69620: POP
// case nation of nation_american :
69621: LD_VAR 0 5
69625: PUSH
69626: LD_INT 1
69628: DOUBLE
69629: EQUAL
69630: IFTRUE 69634
69632: GO 69690
69634: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69635: LD_ADDR_VAR 0 9
69639: PUSH
69640: LD_VAR 0 11
69644: PUSH
69645: LD_VAR 0 12
69649: PUSH
69650: LD_VAR 0 13
69654: PUSH
69655: LD_VAR 0 14
69659: PUSH
69660: LD_VAR 0 15
69664: PUSH
69665: LD_VAR 0 16
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: PUSH
69678: LD_VAR 0 4
69682: PUSH
69683: LD_INT 1
69685: PLUS
69686: ARRAY
69687: ST_TO_ADDR
69688: GO 69819
69690: LD_INT 2
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69698
69696: GO 69754
69698: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69699: LD_ADDR_VAR 0 9
69703: PUSH
69704: LD_VAR 0 17
69708: PUSH
69709: LD_VAR 0 18
69713: PUSH
69714: LD_VAR 0 19
69718: PUSH
69719: LD_VAR 0 20
69723: PUSH
69724: LD_VAR 0 21
69728: PUSH
69729: LD_VAR 0 22
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: PUSH
69742: LD_VAR 0 4
69746: PUSH
69747: LD_INT 1
69749: PLUS
69750: ARRAY
69751: ST_TO_ADDR
69752: GO 69819
69754: LD_INT 3
69756: DOUBLE
69757: EQUAL
69758: IFTRUE 69762
69760: GO 69818
69762: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69763: LD_ADDR_VAR 0 9
69767: PUSH
69768: LD_VAR 0 23
69772: PUSH
69773: LD_VAR 0 24
69777: PUSH
69778: LD_VAR 0 25
69782: PUSH
69783: LD_VAR 0 26
69787: PUSH
69788: LD_VAR 0 27
69792: PUSH
69793: LD_VAR 0 28
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: PUSH
69806: LD_VAR 0 4
69810: PUSH
69811: LD_INT 1
69813: PLUS
69814: ARRAY
69815: ST_TO_ADDR
69816: GO 69819
69818: POP
69819: GO 70374
69821: LD_INT 2
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69835
69827: LD_INT 3
69829: DOUBLE
69830: EQUAL
69831: IFTRUE 69835
69833: GO 69891
69835: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69836: LD_ADDR_VAR 0 9
69840: PUSH
69841: LD_VAR 0 29
69845: PUSH
69846: LD_VAR 0 30
69850: PUSH
69851: LD_VAR 0 31
69855: PUSH
69856: LD_VAR 0 32
69860: PUSH
69861: LD_VAR 0 33
69865: PUSH
69866: LD_VAR 0 34
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 4
69883: PUSH
69884: LD_INT 1
69886: PLUS
69887: ARRAY
69888: ST_TO_ADDR
69889: GO 70374
69891: LD_INT 16
69893: DOUBLE
69894: EQUAL
69895: IFTRUE 69953
69897: LD_INT 17
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69953
69903: LD_INT 18
69905: DOUBLE
69906: EQUAL
69907: IFTRUE 69953
69909: LD_INT 19
69911: DOUBLE
69912: EQUAL
69913: IFTRUE 69953
69915: LD_INT 22
69917: DOUBLE
69918: EQUAL
69919: IFTRUE 69953
69921: LD_INT 20
69923: DOUBLE
69924: EQUAL
69925: IFTRUE 69953
69927: LD_INT 21
69929: DOUBLE
69930: EQUAL
69931: IFTRUE 69953
69933: LD_INT 23
69935: DOUBLE
69936: EQUAL
69937: IFTRUE 69953
69939: LD_INT 24
69941: DOUBLE
69942: EQUAL
69943: IFTRUE 69953
69945: LD_INT 25
69947: DOUBLE
69948: EQUAL
69949: IFTRUE 69953
69951: GO 70009
69953: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69954: LD_ADDR_VAR 0 9
69958: PUSH
69959: LD_VAR 0 35
69963: PUSH
69964: LD_VAR 0 36
69968: PUSH
69969: LD_VAR 0 37
69973: PUSH
69974: LD_VAR 0 38
69978: PUSH
69979: LD_VAR 0 39
69983: PUSH
69984: LD_VAR 0 40
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: PUSH
69997: LD_VAR 0 4
70001: PUSH
70002: LD_INT 1
70004: PLUS
70005: ARRAY
70006: ST_TO_ADDR
70007: GO 70374
70009: LD_INT 6
70011: DOUBLE
70012: EQUAL
70013: IFTRUE 70065
70015: LD_INT 7
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70065
70021: LD_INT 8
70023: DOUBLE
70024: EQUAL
70025: IFTRUE 70065
70027: LD_INT 13
70029: DOUBLE
70030: EQUAL
70031: IFTRUE 70065
70033: LD_INT 12
70035: DOUBLE
70036: EQUAL
70037: IFTRUE 70065
70039: LD_INT 15
70041: DOUBLE
70042: EQUAL
70043: IFTRUE 70065
70045: LD_INT 11
70047: DOUBLE
70048: EQUAL
70049: IFTRUE 70065
70051: LD_INT 14
70053: DOUBLE
70054: EQUAL
70055: IFTRUE 70065
70057: LD_INT 10
70059: DOUBLE
70060: EQUAL
70061: IFTRUE 70065
70063: GO 70121
70065: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70066: LD_ADDR_VAR 0 9
70070: PUSH
70071: LD_VAR 0 41
70075: PUSH
70076: LD_VAR 0 42
70080: PUSH
70081: LD_VAR 0 43
70085: PUSH
70086: LD_VAR 0 44
70090: PUSH
70091: LD_VAR 0 45
70095: PUSH
70096: LD_VAR 0 46
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: PUSH
70109: LD_VAR 0 4
70113: PUSH
70114: LD_INT 1
70116: PLUS
70117: ARRAY
70118: ST_TO_ADDR
70119: GO 70374
70121: LD_INT 36
70123: DOUBLE
70124: EQUAL
70125: IFTRUE 70129
70127: GO 70185
70129: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70130: LD_ADDR_VAR 0 9
70134: PUSH
70135: LD_VAR 0 47
70139: PUSH
70140: LD_VAR 0 48
70144: PUSH
70145: LD_VAR 0 49
70149: PUSH
70150: LD_VAR 0 50
70154: PUSH
70155: LD_VAR 0 51
70159: PUSH
70160: LD_VAR 0 52
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: PUSH
70173: LD_VAR 0 4
70177: PUSH
70178: LD_INT 1
70180: PLUS
70181: ARRAY
70182: ST_TO_ADDR
70183: GO 70374
70185: LD_INT 4
70187: DOUBLE
70188: EQUAL
70189: IFTRUE 70211
70191: LD_INT 5
70193: DOUBLE
70194: EQUAL
70195: IFTRUE 70211
70197: LD_INT 34
70199: DOUBLE
70200: EQUAL
70201: IFTRUE 70211
70203: LD_INT 37
70205: DOUBLE
70206: EQUAL
70207: IFTRUE 70211
70209: GO 70267
70211: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70212: LD_ADDR_VAR 0 9
70216: PUSH
70217: LD_VAR 0 53
70221: PUSH
70222: LD_VAR 0 54
70226: PUSH
70227: LD_VAR 0 55
70231: PUSH
70232: LD_VAR 0 56
70236: PUSH
70237: LD_VAR 0 57
70241: PUSH
70242: LD_VAR 0 58
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: PUSH
70255: LD_VAR 0 4
70259: PUSH
70260: LD_INT 1
70262: PLUS
70263: ARRAY
70264: ST_TO_ADDR
70265: GO 70374
70267: LD_INT 31
70269: DOUBLE
70270: EQUAL
70271: IFTRUE 70317
70273: LD_INT 32
70275: DOUBLE
70276: EQUAL
70277: IFTRUE 70317
70279: LD_INT 33
70281: DOUBLE
70282: EQUAL
70283: IFTRUE 70317
70285: LD_INT 27
70287: DOUBLE
70288: EQUAL
70289: IFTRUE 70317
70291: LD_INT 26
70293: DOUBLE
70294: EQUAL
70295: IFTRUE 70317
70297: LD_INT 28
70299: DOUBLE
70300: EQUAL
70301: IFTRUE 70317
70303: LD_INT 29
70305: DOUBLE
70306: EQUAL
70307: IFTRUE 70317
70309: LD_INT 30
70311: DOUBLE
70312: EQUAL
70313: IFTRUE 70317
70315: GO 70373
70317: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70318: LD_ADDR_VAR 0 9
70322: PUSH
70323: LD_VAR 0 59
70327: PUSH
70328: LD_VAR 0 60
70332: PUSH
70333: LD_VAR 0 61
70337: PUSH
70338: LD_VAR 0 62
70342: PUSH
70343: LD_VAR 0 63
70347: PUSH
70348: LD_VAR 0 64
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: PUSH
70361: LD_VAR 0 4
70365: PUSH
70366: LD_INT 1
70368: PLUS
70369: ARRAY
70370: ST_TO_ADDR
70371: GO 70374
70373: POP
// temp_list2 = [ ] ;
70374: LD_ADDR_VAR 0 10
70378: PUSH
70379: EMPTY
70380: ST_TO_ADDR
// for i in temp_list do
70381: LD_ADDR_VAR 0 8
70385: PUSH
70386: LD_VAR 0 9
70390: PUSH
70391: FOR_IN
70392: IFFALSE 70444
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70394: LD_ADDR_VAR 0 10
70398: PUSH
70399: LD_VAR 0 10
70403: PUSH
70404: LD_VAR 0 8
70408: PUSH
70409: LD_INT 1
70411: ARRAY
70412: PUSH
70413: LD_VAR 0 2
70417: PLUS
70418: PUSH
70419: LD_VAR 0 8
70423: PUSH
70424: LD_INT 2
70426: ARRAY
70427: PUSH
70428: LD_VAR 0 3
70432: PLUS
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: EMPTY
70439: LIST
70440: ADD
70441: ST_TO_ADDR
70442: GO 70391
70444: POP
70445: POP
// result = temp_list2 ;
70446: LD_ADDR_VAR 0 7
70450: PUSH
70451: LD_VAR 0 10
70455: ST_TO_ADDR
// end ;
70456: LD_VAR 0 7
70460: RET
// export function EnemyInRange ( unit , dist ) ; begin
70461: LD_INT 0
70463: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70464: LD_ADDR_VAR 0 3
70468: PUSH
70469: LD_VAR 0 1
70473: PPUSH
70474: CALL_OW 255
70478: PPUSH
70479: LD_VAR 0 1
70483: PPUSH
70484: CALL_OW 250
70488: PPUSH
70489: LD_VAR 0 1
70493: PPUSH
70494: CALL_OW 251
70498: PPUSH
70499: LD_VAR 0 2
70503: PPUSH
70504: CALL 43863 0 4
70508: PUSH
70509: LD_INT 4
70511: ARRAY
70512: ST_TO_ADDR
// end ;
70513: LD_VAR 0 3
70517: RET
// export function PlayerSeeMe ( unit ) ; begin
70518: LD_INT 0
70520: PPUSH
// result := See ( your_side , unit ) ;
70521: LD_ADDR_VAR 0 2
70525: PUSH
70526: LD_OWVAR 2
70530: PPUSH
70531: LD_VAR 0 1
70535: PPUSH
70536: CALL_OW 292
70540: ST_TO_ADDR
// end ;
70541: LD_VAR 0 2
70545: RET
// export function ReverseDir ( unit ) ; begin
70546: LD_INT 0
70548: PPUSH
// if not unit then
70549: LD_VAR 0 1
70553: NOT
70554: IFFALSE 70558
// exit ;
70556: GO 70581
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70558: LD_ADDR_VAR 0 2
70562: PUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: CALL_OW 254
70572: PUSH
70573: LD_INT 3
70575: PLUS
70576: PUSH
70577: LD_INT 6
70579: MOD
70580: ST_TO_ADDR
// end ;
70581: LD_VAR 0 2
70585: RET
// export function ReverseArray ( array ) ; var i ; begin
70586: LD_INT 0
70588: PPUSH
70589: PPUSH
// if not array then
70590: LD_VAR 0 1
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 70654
// result := [ ] ;
70599: LD_ADDR_VAR 0 2
70603: PUSH
70604: EMPTY
70605: ST_TO_ADDR
// for i := array downto 1 do
70606: LD_ADDR_VAR 0 3
70610: PUSH
70611: DOUBLE
70612: LD_VAR 0 1
70616: INC
70617: ST_TO_ADDR
70618: LD_INT 1
70620: PUSH
70621: FOR_DOWNTO
70622: IFFALSE 70652
// result := Join ( result , array [ i ] ) ;
70624: LD_ADDR_VAR 0 2
70628: PUSH
70629: LD_VAR 0 2
70633: PPUSH
70634: LD_VAR 0 1
70638: PUSH
70639: LD_VAR 0 3
70643: ARRAY
70644: PPUSH
70645: CALL 75298 0 2
70649: ST_TO_ADDR
70650: GO 70621
70652: POP
70653: POP
// end ;
70654: LD_VAR 0 2
70658: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70659: LD_INT 0
70661: PPUSH
70662: PPUSH
70663: PPUSH
70664: PPUSH
70665: PPUSH
70666: PPUSH
// if not unit or not hexes then
70667: LD_VAR 0 1
70671: NOT
70672: PUSH
70673: LD_VAR 0 2
70677: NOT
70678: OR
70679: IFFALSE 70683
// exit ;
70681: GO 70806
// dist := 9999 ;
70683: LD_ADDR_VAR 0 5
70687: PUSH
70688: LD_INT 9999
70690: ST_TO_ADDR
// for i = 1 to hexes do
70691: LD_ADDR_VAR 0 4
70695: PUSH
70696: DOUBLE
70697: LD_INT 1
70699: DEC
70700: ST_TO_ADDR
70701: LD_VAR 0 2
70705: PUSH
70706: FOR_TO
70707: IFFALSE 70794
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70709: LD_ADDR_VAR 0 6
70713: PUSH
70714: LD_VAR 0 1
70718: PPUSH
70719: LD_VAR 0 2
70723: PUSH
70724: LD_VAR 0 4
70728: ARRAY
70729: PUSH
70730: LD_INT 1
70732: ARRAY
70733: PPUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_VAR 0 4
70743: ARRAY
70744: PUSH
70745: LD_INT 2
70747: ARRAY
70748: PPUSH
70749: CALL_OW 297
70753: ST_TO_ADDR
// if tdist < dist then
70754: LD_VAR 0 6
70758: PUSH
70759: LD_VAR 0 5
70763: LESS
70764: IFFALSE 70792
// begin hex := hexes [ i ] ;
70766: LD_ADDR_VAR 0 8
70770: PUSH
70771: LD_VAR 0 2
70775: PUSH
70776: LD_VAR 0 4
70780: ARRAY
70781: ST_TO_ADDR
// dist := tdist ;
70782: LD_ADDR_VAR 0 5
70786: PUSH
70787: LD_VAR 0 6
70791: ST_TO_ADDR
// end ; end ;
70792: GO 70706
70794: POP
70795: POP
// result := hex ;
70796: LD_ADDR_VAR 0 3
70800: PUSH
70801: LD_VAR 0 8
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 3
70810: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70811: LD_INT 0
70813: PPUSH
70814: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70815: LD_VAR 0 1
70819: NOT
70820: PUSH
70821: LD_VAR 0 1
70825: PUSH
70826: LD_INT 21
70828: PUSH
70829: LD_INT 2
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 23
70838: PUSH
70839: LD_INT 2
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PPUSH
70850: CALL_OW 69
70854: IN
70855: NOT
70856: OR
70857: IFFALSE 70861
// exit ;
70859: GO 70908
// for i = 1 to 3 do
70861: LD_ADDR_VAR 0 3
70865: PUSH
70866: DOUBLE
70867: LD_INT 1
70869: DEC
70870: ST_TO_ADDR
70871: LD_INT 3
70873: PUSH
70874: FOR_TO
70875: IFFALSE 70906
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70877: LD_VAR 0 1
70881: PPUSH
70882: CALL_OW 250
70886: PPUSH
70887: LD_VAR 0 1
70891: PPUSH
70892: CALL_OW 251
70896: PPUSH
70897: LD_INT 1
70899: PPUSH
70900: CALL_OW 453
70904: GO 70874
70906: POP
70907: POP
// end ;
70908: LD_VAR 0 2
70912: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70913: LD_INT 0
70915: PPUSH
70916: PPUSH
70917: PPUSH
70918: PPUSH
70919: PPUSH
70920: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70921: LD_VAR 0 1
70925: NOT
70926: PUSH
70927: LD_VAR 0 2
70931: NOT
70932: OR
70933: PUSH
70934: LD_VAR 0 1
70938: PPUSH
70939: CALL_OW 314
70943: OR
70944: IFFALSE 70948
// exit ;
70946: GO 71415
// if GetLives ( i ) < 250 then
70948: LD_VAR 0 4
70952: PPUSH
70953: CALL_OW 256
70957: PUSH
70958: LD_INT 250
70960: LESS
70961: IFFALSE 70974
// begin ComAutodestruct ( i ) ;
70963: LD_VAR 0 4
70967: PPUSH
70968: CALL 70811 0 1
// exit ;
70972: GO 71415
// end ; x := GetX ( enemy_unit ) ;
70974: LD_ADDR_VAR 0 7
70978: PUSH
70979: LD_VAR 0 2
70983: PPUSH
70984: CALL_OW 250
70988: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70989: LD_ADDR_VAR 0 8
70993: PUSH
70994: LD_VAR 0 2
70998: PPUSH
70999: CALL_OW 251
71003: ST_TO_ADDR
// if not x or not y then
71004: LD_VAR 0 7
71008: NOT
71009: PUSH
71010: LD_VAR 0 8
71014: NOT
71015: OR
71016: IFFALSE 71020
// exit ;
71018: GO 71415
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71020: LD_ADDR_VAR 0 6
71024: PUSH
71025: LD_VAR 0 7
71029: PPUSH
71030: LD_INT 0
71032: PPUSH
71033: LD_INT 4
71035: PPUSH
71036: CALL_OW 272
71040: PUSH
71041: LD_VAR 0 8
71045: PPUSH
71046: LD_INT 0
71048: PPUSH
71049: LD_INT 4
71051: PPUSH
71052: CALL_OW 273
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_VAR 0 7
71065: PPUSH
71066: LD_INT 1
71068: PPUSH
71069: LD_INT 4
71071: PPUSH
71072: CALL_OW 272
71076: PUSH
71077: LD_VAR 0 8
71081: PPUSH
71082: LD_INT 1
71084: PPUSH
71085: LD_INT 4
71087: PPUSH
71088: CALL_OW 273
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_VAR 0 7
71101: PPUSH
71102: LD_INT 2
71104: PPUSH
71105: LD_INT 4
71107: PPUSH
71108: CALL_OW 272
71112: PUSH
71113: LD_VAR 0 8
71117: PPUSH
71118: LD_INT 2
71120: PPUSH
71121: LD_INT 4
71123: PPUSH
71124: CALL_OW 273
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_VAR 0 7
71137: PPUSH
71138: LD_INT 3
71140: PPUSH
71141: LD_INT 4
71143: PPUSH
71144: CALL_OW 272
71148: PUSH
71149: LD_VAR 0 8
71153: PPUSH
71154: LD_INT 3
71156: PPUSH
71157: LD_INT 4
71159: PPUSH
71160: CALL_OW 273
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_VAR 0 7
71173: PPUSH
71174: LD_INT 4
71176: PPUSH
71177: LD_INT 4
71179: PPUSH
71180: CALL_OW 272
71184: PUSH
71185: LD_VAR 0 8
71189: PPUSH
71190: LD_INT 4
71192: PPUSH
71193: LD_INT 4
71195: PPUSH
71196: CALL_OW 273
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_VAR 0 7
71209: PPUSH
71210: LD_INT 5
71212: PPUSH
71213: LD_INT 4
71215: PPUSH
71216: CALL_OW 272
71220: PUSH
71221: LD_VAR 0 8
71225: PPUSH
71226: LD_INT 5
71228: PPUSH
71229: LD_INT 4
71231: PPUSH
71232: CALL_OW 273
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: ST_TO_ADDR
// for i = tmp downto 1 do
71249: LD_ADDR_VAR 0 4
71253: PUSH
71254: DOUBLE
71255: LD_VAR 0 6
71259: INC
71260: ST_TO_ADDR
71261: LD_INT 1
71263: PUSH
71264: FOR_DOWNTO
71265: IFFALSE 71366
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71267: LD_VAR 0 6
71271: PUSH
71272: LD_VAR 0 4
71276: ARRAY
71277: PUSH
71278: LD_INT 1
71280: ARRAY
71281: PPUSH
71282: LD_VAR 0 6
71286: PUSH
71287: LD_VAR 0 4
71291: ARRAY
71292: PUSH
71293: LD_INT 2
71295: ARRAY
71296: PPUSH
71297: CALL_OW 488
71301: NOT
71302: PUSH
71303: LD_VAR 0 6
71307: PUSH
71308: LD_VAR 0 4
71312: ARRAY
71313: PUSH
71314: LD_INT 1
71316: ARRAY
71317: PPUSH
71318: LD_VAR 0 6
71322: PUSH
71323: LD_VAR 0 4
71327: ARRAY
71328: PUSH
71329: LD_INT 2
71331: ARRAY
71332: PPUSH
71333: CALL_OW 428
71337: PUSH
71338: LD_INT 0
71340: NONEQUAL
71341: OR
71342: IFFALSE 71364
// tmp := Delete ( tmp , i ) ;
71344: LD_ADDR_VAR 0 6
71348: PUSH
71349: LD_VAR 0 6
71353: PPUSH
71354: LD_VAR 0 4
71358: PPUSH
71359: CALL_OW 3
71363: ST_TO_ADDR
71364: GO 71264
71366: POP
71367: POP
// j := GetClosestHex ( unit , tmp ) ;
71368: LD_ADDR_VAR 0 5
71372: PUSH
71373: LD_VAR 0 1
71377: PPUSH
71378: LD_VAR 0 6
71382: PPUSH
71383: CALL 70659 0 2
71387: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71388: LD_VAR 0 1
71392: PPUSH
71393: LD_VAR 0 5
71397: PUSH
71398: LD_INT 1
71400: ARRAY
71401: PPUSH
71402: LD_VAR 0 5
71406: PUSH
71407: LD_INT 2
71409: ARRAY
71410: PPUSH
71411: CALL_OW 111
// end ;
71415: LD_VAR 0 3
71419: RET
// export function PrepareApemanSoldier ( ) ; begin
71420: LD_INT 0
71422: PPUSH
// uc_nation := 0 ;
71423: LD_ADDR_OWVAR 21
71427: PUSH
71428: LD_INT 0
71430: ST_TO_ADDR
// hc_sex := sex_male ;
71431: LD_ADDR_OWVAR 27
71435: PUSH
71436: LD_INT 1
71438: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71439: LD_ADDR_OWVAR 28
71443: PUSH
71444: LD_INT 15
71446: ST_TO_ADDR
// hc_gallery :=  ;
71447: LD_ADDR_OWVAR 33
71451: PUSH
71452: LD_STRING 
71454: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71455: LD_ADDR_OWVAR 31
71459: PUSH
71460: LD_INT 0
71462: PPUSH
71463: LD_INT 3
71465: PPUSH
71466: CALL_OW 12
71470: PUSH
71471: LD_INT 0
71473: PPUSH
71474: LD_INT 3
71476: PPUSH
71477: CALL_OW 12
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: ST_TO_ADDR
// end ;
71494: LD_VAR 0 1
71498: RET
// export function PrepareApemanEngineer ( ) ; begin
71499: LD_INT 0
71501: PPUSH
// uc_nation := 0 ;
71502: LD_ADDR_OWVAR 21
71506: PUSH
71507: LD_INT 0
71509: ST_TO_ADDR
// hc_sex := sex_male ;
71510: LD_ADDR_OWVAR 27
71514: PUSH
71515: LD_INT 1
71517: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71518: LD_ADDR_OWVAR 28
71522: PUSH
71523: LD_INT 16
71525: ST_TO_ADDR
// hc_gallery :=  ;
71526: LD_ADDR_OWVAR 33
71530: PUSH
71531: LD_STRING 
71533: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71534: LD_ADDR_OWVAR 31
71538: PUSH
71539: LD_INT 0
71541: PPUSH
71542: LD_INT 3
71544: PPUSH
71545: CALL_OW 12
71549: PUSH
71550: LD_INT 0
71552: PPUSH
71553: LD_INT 3
71555: PPUSH
71556: CALL_OW 12
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: ST_TO_ADDR
// end ;
71573: LD_VAR 0 1
71577: RET
// export function PrepareApeman ( agressivity ) ; begin
71578: LD_INT 0
71580: PPUSH
// uc_side := 0 ;
71581: LD_ADDR_OWVAR 20
71585: PUSH
71586: LD_INT 0
71588: ST_TO_ADDR
// uc_nation := 0 ;
71589: LD_ADDR_OWVAR 21
71593: PUSH
71594: LD_INT 0
71596: ST_TO_ADDR
// hc_sex := sex_male ;
71597: LD_ADDR_OWVAR 27
71601: PUSH
71602: LD_INT 1
71604: ST_TO_ADDR
// hc_class := class_apeman ;
71605: LD_ADDR_OWVAR 28
71609: PUSH
71610: LD_INT 12
71612: ST_TO_ADDR
// hc_gallery :=  ;
71613: LD_ADDR_OWVAR 33
71617: PUSH
71618: LD_STRING 
71620: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71621: LD_ADDR_OWVAR 35
71625: PUSH
71626: LD_VAR 0 1
71630: NEG
71631: PPUSH
71632: LD_VAR 0 1
71636: PPUSH
71637: CALL_OW 12
71641: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71642: LD_ADDR_OWVAR 31
71646: PUSH
71647: LD_INT 0
71649: PPUSH
71650: LD_INT 3
71652: PPUSH
71653: CALL_OW 12
71657: PUSH
71658: LD_INT 0
71660: PPUSH
71661: LD_INT 3
71663: PPUSH
71664: CALL_OW 12
71668: PUSH
71669: LD_INT 0
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: ST_TO_ADDR
// end ;
71681: LD_VAR 0 2
71685: RET
// export function PrepareTiger ( agressivity ) ; begin
71686: LD_INT 0
71688: PPUSH
// uc_side := 0 ;
71689: LD_ADDR_OWVAR 20
71693: PUSH
71694: LD_INT 0
71696: ST_TO_ADDR
// uc_nation := 0 ;
71697: LD_ADDR_OWVAR 21
71701: PUSH
71702: LD_INT 0
71704: ST_TO_ADDR
// hc_class := class_tiger ;
71705: LD_ADDR_OWVAR 28
71709: PUSH
71710: LD_INT 14
71712: ST_TO_ADDR
// hc_gallery :=  ;
71713: LD_ADDR_OWVAR 33
71717: PUSH
71718: LD_STRING 
71720: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71721: LD_ADDR_OWVAR 35
71725: PUSH
71726: LD_VAR 0 1
71730: NEG
71731: PPUSH
71732: LD_VAR 0 1
71736: PPUSH
71737: CALL_OW 12
71741: ST_TO_ADDR
// end ;
71742: LD_VAR 0 2
71746: RET
// export function PrepareEnchidna ( ) ; begin
71747: LD_INT 0
71749: PPUSH
// uc_side := 0 ;
71750: LD_ADDR_OWVAR 20
71754: PUSH
71755: LD_INT 0
71757: ST_TO_ADDR
// uc_nation := 0 ;
71758: LD_ADDR_OWVAR 21
71762: PUSH
71763: LD_INT 0
71765: ST_TO_ADDR
// hc_class := class_baggie ;
71766: LD_ADDR_OWVAR 28
71770: PUSH
71771: LD_INT 13
71773: ST_TO_ADDR
// hc_gallery :=  ;
71774: LD_ADDR_OWVAR 33
71778: PUSH
71779: LD_STRING 
71781: ST_TO_ADDR
// end ;
71782: LD_VAR 0 1
71786: RET
// export function PrepareFrog ( ) ; begin
71787: LD_INT 0
71789: PPUSH
// uc_side := 0 ;
71790: LD_ADDR_OWVAR 20
71794: PUSH
71795: LD_INT 0
71797: ST_TO_ADDR
// uc_nation := 0 ;
71798: LD_ADDR_OWVAR 21
71802: PUSH
71803: LD_INT 0
71805: ST_TO_ADDR
// hc_class := class_frog ;
71806: LD_ADDR_OWVAR 28
71810: PUSH
71811: LD_INT 19
71813: ST_TO_ADDR
// hc_gallery :=  ;
71814: LD_ADDR_OWVAR 33
71818: PUSH
71819: LD_STRING 
71821: ST_TO_ADDR
// end ;
71822: LD_VAR 0 1
71826: RET
// export function PrepareFish ( ) ; begin
71827: LD_INT 0
71829: PPUSH
// uc_side := 0 ;
71830: LD_ADDR_OWVAR 20
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
// uc_nation := 0 ;
71838: LD_ADDR_OWVAR 21
71842: PUSH
71843: LD_INT 0
71845: ST_TO_ADDR
// hc_class := class_fish ;
71846: LD_ADDR_OWVAR 28
71850: PUSH
71851: LD_INT 20
71853: ST_TO_ADDR
// hc_gallery :=  ;
71854: LD_ADDR_OWVAR 33
71858: PUSH
71859: LD_STRING 
71861: ST_TO_ADDR
// end ;
71862: LD_VAR 0 1
71866: RET
// export function PrepareBird ( ) ; begin
71867: LD_INT 0
71869: PPUSH
// uc_side := 0 ;
71870: LD_ADDR_OWVAR 20
71874: PUSH
71875: LD_INT 0
71877: ST_TO_ADDR
// uc_nation := 0 ;
71878: LD_ADDR_OWVAR 21
71882: PUSH
71883: LD_INT 0
71885: ST_TO_ADDR
// hc_class := class_phororhacos ;
71886: LD_ADDR_OWVAR 28
71890: PUSH
71891: LD_INT 18
71893: ST_TO_ADDR
// hc_gallery :=  ;
71894: LD_ADDR_OWVAR 33
71898: PUSH
71899: LD_STRING 
71901: ST_TO_ADDR
// end ;
71902: LD_VAR 0 1
71906: RET
// export function PrepareHorse ( ) ; begin
71907: LD_INT 0
71909: PPUSH
// uc_side := 0 ;
71910: LD_ADDR_OWVAR 20
71914: PUSH
71915: LD_INT 0
71917: ST_TO_ADDR
// uc_nation := 0 ;
71918: LD_ADDR_OWVAR 21
71922: PUSH
71923: LD_INT 0
71925: ST_TO_ADDR
// hc_class := class_horse ;
71926: LD_ADDR_OWVAR 28
71930: PUSH
71931: LD_INT 21
71933: ST_TO_ADDR
// hc_gallery :=  ;
71934: LD_ADDR_OWVAR 33
71938: PUSH
71939: LD_STRING 
71941: ST_TO_ADDR
// end ;
71942: LD_VAR 0 1
71946: RET
// export function PrepareMastodont ( ) ; begin
71947: LD_INT 0
71949: PPUSH
// uc_side := 0 ;
71950: LD_ADDR_OWVAR 20
71954: PUSH
71955: LD_INT 0
71957: ST_TO_ADDR
// uc_nation := 0 ;
71958: LD_ADDR_OWVAR 21
71962: PUSH
71963: LD_INT 0
71965: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71966: LD_ADDR_OWVAR 37
71970: PUSH
71971: LD_INT 31
71973: ST_TO_ADDR
// vc_control := control_rider ;
71974: LD_ADDR_OWVAR 38
71978: PUSH
71979: LD_INT 4
71981: ST_TO_ADDR
// end ;
71982: LD_VAR 0 1
71986: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71987: LD_INT 0
71989: PPUSH
71990: PPUSH
71991: PPUSH
// uc_side = 0 ;
71992: LD_ADDR_OWVAR 20
71996: PUSH
71997: LD_INT 0
71999: ST_TO_ADDR
// uc_nation = 0 ;
72000: LD_ADDR_OWVAR 21
72004: PUSH
72005: LD_INT 0
72007: ST_TO_ADDR
// InitHc_All ( ) ;
72008: CALL_OW 584
// InitVc ;
72012: CALL_OW 20
// if mastodonts then
72016: LD_VAR 0 6
72020: IFFALSE 72087
// for i = 1 to mastodonts do
72022: LD_ADDR_VAR 0 11
72026: PUSH
72027: DOUBLE
72028: LD_INT 1
72030: DEC
72031: ST_TO_ADDR
72032: LD_VAR 0 6
72036: PUSH
72037: FOR_TO
72038: IFFALSE 72085
// begin vc_chassis := 31 ;
72040: LD_ADDR_OWVAR 37
72044: PUSH
72045: LD_INT 31
72047: ST_TO_ADDR
// vc_control := control_rider ;
72048: LD_ADDR_OWVAR 38
72052: PUSH
72053: LD_INT 4
72055: ST_TO_ADDR
// animal := CreateVehicle ;
72056: LD_ADDR_VAR 0 12
72060: PUSH
72061: CALL_OW 45
72065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72066: LD_VAR 0 12
72070: PPUSH
72071: LD_VAR 0 8
72075: PPUSH
72076: LD_INT 0
72078: PPUSH
72079: CALL 74215 0 3
// end ;
72083: GO 72037
72085: POP
72086: POP
// if horses then
72087: LD_VAR 0 5
72091: IFFALSE 72158
// for i = 1 to horses do
72093: LD_ADDR_VAR 0 11
72097: PUSH
72098: DOUBLE
72099: LD_INT 1
72101: DEC
72102: ST_TO_ADDR
72103: LD_VAR 0 5
72107: PUSH
72108: FOR_TO
72109: IFFALSE 72156
// begin hc_class := 21 ;
72111: LD_ADDR_OWVAR 28
72115: PUSH
72116: LD_INT 21
72118: ST_TO_ADDR
// hc_gallery :=  ;
72119: LD_ADDR_OWVAR 33
72123: PUSH
72124: LD_STRING 
72126: ST_TO_ADDR
// animal := CreateHuman ;
72127: LD_ADDR_VAR 0 12
72131: PUSH
72132: CALL_OW 44
72136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72137: LD_VAR 0 12
72141: PPUSH
72142: LD_VAR 0 8
72146: PPUSH
72147: LD_INT 0
72149: PPUSH
72150: CALL 74215 0 3
// end ;
72154: GO 72108
72156: POP
72157: POP
// if birds then
72158: LD_VAR 0 1
72162: IFFALSE 72229
// for i = 1 to birds do
72164: LD_ADDR_VAR 0 11
72168: PUSH
72169: DOUBLE
72170: LD_INT 1
72172: DEC
72173: ST_TO_ADDR
72174: LD_VAR 0 1
72178: PUSH
72179: FOR_TO
72180: IFFALSE 72227
// begin hc_class = 18 ;
72182: LD_ADDR_OWVAR 28
72186: PUSH
72187: LD_INT 18
72189: ST_TO_ADDR
// hc_gallery =  ;
72190: LD_ADDR_OWVAR 33
72194: PUSH
72195: LD_STRING 
72197: ST_TO_ADDR
// animal := CreateHuman ;
72198: LD_ADDR_VAR 0 12
72202: PUSH
72203: CALL_OW 44
72207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72208: LD_VAR 0 12
72212: PPUSH
72213: LD_VAR 0 8
72217: PPUSH
72218: LD_INT 0
72220: PPUSH
72221: CALL 74215 0 3
// end ;
72225: GO 72179
72227: POP
72228: POP
// if tigers then
72229: LD_VAR 0 2
72233: IFFALSE 72317
// for i = 1 to tigers do
72235: LD_ADDR_VAR 0 11
72239: PUSH
72240: DOUBLE
72241: LD_INT 1
72243: DEC
72244: ST_TO_ADDR
72245: LD_VAR 0 2
72249: PUSH
72250: FOR_TO
72251: IFFALSE 72315
// begin hc_class = class_tiger ;
72253: LD_ADDR_OWVAR 28
72257: PUSH
72258: LD_INT 14
72260: ST_TO_ADDR
// hc_gallery =  ;
72261: LD_ADDR_OWVAR 33
72265: PUSH
72266: LD_STRING 
72268: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72269: LD_ADDR_OWVAR 35
72273: PUSH
72274: LD_INT 7
72276: NEG
72277: PPUSH
72278: LD_INT 7
72280: PPUSH
72281: CALL_OW 12
72285: ST_TO_ADDR
// animal := CreateHuman ;
72286: LD_ADDR_VAR 0 12
72290: PUSH
72291: CALL_OW 44
72295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72296: LD_VAR 0 12
72300: PPUSH
72301: LD_VAR 0 8
72305: PPUSH
72306: LD_INT 0
72308: PPUSH
72309: CALL 74215 0 3
// end ;
72313: GO 72250
72315: POP
72316: POP
// if apemans then
72317: LD_VAR 0 3
72321: IFFALSE 72444
// for i = 1 to apemans do
72323: LD_ADDR_VAR 0 11
72327: PUSH
72328: DOUBLE
72329: LD_INT 1
72331: DEC
72332: ST_TO_ADDR
72333: LD_VAR 0 3
72337: PUSH
72338: FOR_TO
72339: IFFALSE 72442
// begin hc_class = class_apeman ;
72341: LD_ADDR_OWVAR 28
72345: PUSH
72346: LD_INT 12
72348: ST_TO_ADDR
// hc_gallery =  ;
72349: LD_ADDR_OWVAR 33
72353: PUSH
72354: LD_STRING 
72356: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72357: LD_ADDR_OWVAR 35
72361: PUSH
72362: LD_INT 2
72364: NEG
72365: PPUSH
72366: LD_INT 2
72368: PPUSH
72369: CALL_OW 12
72373: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72374: LD_ADDR_OWVAR 31
72378: PUSH
72379: LD_INT 1
72381: PPUSH
72382: LD_INT 3
72384: PPUSH
72385: CALL_OW 12
72389: PUSH
72390: LD_INT 1
72392: PPUSH
72393: LD_INT 3
72395: PPUSH
72396: CALL_OW 12
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: LD_INT 0
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: ST_TO_ADDR
// animal := CreateHuman ;
72413: LD_ADDR_VAR 0 12
72417: PUSH
72418: CALL_OW 44
72422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72423: LD_VAR 0 12
72427: PPUSH
72428: LD_VAR 0 8
72432: PPUSH
72433: LD_INT 0
72435: PPUSH
72436: CALL 74215 0 3
// end ;
72440: GO 72338
72442: POP
72443: POP
// if enchidnas then
72444: LD_VAR 0 4
72448: IFFALSE 72515
// for i = 1 to enchidnas do
72450: LD_ADDR_VAR 0 11
72454: PUSH
72455: DOUBLE
72456: LD_INT 1
72458: DEC
72459: ST_TO_ADDR
72460: LD_VAR 0 4
72464: PUSH
72465: FOR_TO
72466: IFFALSE 72513
// begin hc_class = 13 ;
72468: LD_ADDR_OWVAR 28
72472: PUSH
72473: LD_INT 13
72475: ST_TO_ADDR
// hc_gallery =  ;
72476: LD_ADDR_OWVAR 33
72480: PUSH
72481: LD_STRING 
72483: ST_TO_ADDR
// animal := CreateHuman ;
72484: LD_ADDR_VAR 0 12
72488: PUSH
72489: CALL_OW 44
72493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72494: LD_VAR 0 12
72498: PPUSH
72499: LD_VAR 0 8
72503: PPUSH
72504: LD_INT 0
72506: PPUSH
72507: CALL 74215 0 3
// end ;
72511: GO 72465
72513: POP
72514: POP
// if fishes then
72515: LD_VAR 0 7
72519: IFFALSE 72586
// for i = 1 to fishes do
72521: LD_ADDR_VAR 0 11
72525: PUSH
72526: DOUBLE
72527: LD_INT 1
72529: DEC
72530: ST_TO_ADDR
72531: LD_VAR 0 7
72535: PUSH
72536: FOR_TO
72537: IFFALSE 72584
// begin hc_class = 20 ;
72539: LD_ADDR_OWVAR 28
72543: PUSH
72544: LD_INT 20
72546: ST_TO_ADDR
// hc_gallery =  ;
72547: LD_ADDR_OWVAR 33
72551: PUSH
72552: LD_STRING 
72554: ST_TO_ADDR
// animal := CreateHuman ;
72555: LD_ADDR_VAR 0 12
72559: PUSH
72560: CALL_OW 44
72564: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72565: LD_VAR 0 12
72569: PPUSH
72570: LD_VAR 0 9
72574: PPUSH
72575: LD_INT 0
72577: PPUSH
72578: CALL 74215 0 3
// end ;
72582: GO 72536
72584: POP
72585: POP
// end ;
72586: LD_VAR 0 10
72590: RET
// export function WantHeal ( sci , unit ) ; begin
72591: LD_INT 0
72593: PPUSH
// if GetTaskList ( sci ) > 0 then
72594: LD_VAR 0 1
72598: PPUSH
72599: CALL_OW 437
72603: PUSH
72604: LD_INT 0
72606: GREATER
72607: IFFALSE 72677
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72609: LD_VAR 0 1
72613: PPUSH
72614: CALL_OW 437
72618: PUSH
72619: LD_INT 1
72621: ARRAY
72622: PUSH
72623: LD_INT 1
72625: ARRAY
72626: PUSH
72627: LD_STRING l
72629: EQUAL
72630: PUSH
72631: LD_VAR 0 1
72635: PPUSH
72636: CALL_OW 437
72640: PUSH
72641: LD_INT 1
72643: ARRAY
72644: PUSH
72645: LD_INT 4
72647: ARRAY
72648: PUSH
72649: LD_VAR 0 2
72653: EQUAL
72654: AND
72655: IFFALSE 72667
// result := true else
72657: LD_ADDR_VAR 0 3
72661: PUSH
72662: LD_INT 1
72664: ST_TO_ADDR
72665: GO 72675
// result := false ;
72667: LD_ADDR_VAR 0 3
72671: PUSH
72672: LD_INT 0
72674: ST_TO_ADDR
// end else
72675: GO 72685
// result := false ;
72677: LD_ADDR_VAR 0 3
72681: PUSH
72682: LD_INT 0
72684: ST_TO_ADDR
// end ;
72685: LD_VAR 0 3
72689: RET
// export function HealTarget ( sci ) ; begin
72690: LD_INT 0
72692: PPUSH
// if not sci then
72693: LD_VAR 0 1
72697: NOT
72698: IFFALSE 72702
// exit ;
72700: GO 72767
// result := 0 ;
72702: LD_ADDR_VAR 0 2
72706: PUSH
72707: LD_INT 0
72709: ST_TO_ADDR
// if GetTaskList ( sci ) then
72710: LD_VAR 0 1
72714: PPUSH
72715: CALL_OW 437
72719: IFFALSE 72767
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72721: LD_VAR 0 1
72725: PPUSH
72726: CALL_OW 437
72730: PUSH
72731: LD_INT 1
72733: ARRAY
72734: PUSH
72735: LD_INT 1
72737: ARRAY
72738: PUSH
72739: LD_STRING l
72741: EQUAL
72742: IFFALSE 72767
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72744: LD_ADDR_VAR 0 2
72748: PUSH
72749: LD_VAR 0 1
72753: PPUSH
72754: CALL_OW 437
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: PUSH
72763: LD_INT 4
72765: ARRAY
72766: ST_TO_ADDR
// end ;
72767: LD_VAR 0 2
72771: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
72776: PPUSH
72777: PPUSH
// if not base_units then
72778: LD_VAR 0 1
72782: NOT
72783: IFFALSE 72787
// exit ;
72785: GO 72874
// result := false ;
72787: LD_ADDR_VAR 0 2
72791: PUSH
72792: LD_INT 0
72794: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72795: LD_ADDR_VAR 0 5
72799: PUSH
72800: LD_VAR 0 1
72804: PPUSH
72805: LD_INT 21
72807: PUSH
72808: LD_INT 3
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PPUSH
72815: CALL_OW 72
72819: ST_TO_ADDR
// if not tmp then
72820: LD_VAR 0 5
72824: NOT
72825: IFFALSE 72829
// exit ;
72827: GO 72874
// for i in tmp do
72829: LD_ADDR_VAR 0 3
72833: PUSH
72834: LD_VAR 0 5
72838: PUSH
72839: FOR_IN
72840: IFFALSE 72872
// begin result := EnemyInRange ( i , 22 ) ;
72842: LD_ADDR_VAR 0 2
72846: PUSH
72847: LD_VAR 0 3
72851: PPUSH
72852: LD_INT 22
72854: PPUSH
72855: CALL 70461 0 2
72859: ST_TO_ADDR
// if result then
72860: LD_VAR 0 2
72864: IFFALSE 72870
// exit ;
72866: POP
72867: POP
72868: GO 72874
// end ;
72870: GO 72839
72872: POP
72873: POP
// end ;
72874: LD_VAR 0 2
72878: RET
// export function FilterByTag ( units , tag ) ; begin
72879: LD_INT 0
72881: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72882: LD_ADDR_VAR 0 3
72886: PUSH
72887: LD_VAR 0 1
72891: PPUSH
72892: LD_INT 120
72894: PUSH
72895: LD_VAR 0 2
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PPUSH
72904: CALL_OW 72
72908: ST_TO_ADDR
// end ;
72909: LD_VAR 0 3
72913: RET
// export function IsDriver ( un ) ; begin
72914: LD_INT 0
72916: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72917: LD_ADDR_VAR 0 2
72921: PUSH
72922: LD_VAR 0 1
72926: PUSH
72927: LD_INT 55
72929: PUSH
72930: EMPTY
72931: LIST
72932: PPUSH
72933: CALL_OW 69
72937: IN
72938: ST_TO_ADDR
// end ;
72939: LD_VAR 0 2
72943: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72944: LD_INT 0
72946: PPUSH
72947: PPUSH
// list := [ ] ;
72948: LD_ADDR_VAR 0 5
72952: PUSH
72953: EMPTY
72954: ST_TO_ADDR
// case d of 0 :
72955: LD_VAR 0 3
72959: PUSH
72960: LD_INT 0
72962: DOUBLE
72963: EQUAL
72964: IFTRUE 72968
72966: GO 73101
72968: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72969: LD_ADDR_VAR 0 5
72973: PUSH
72974: LD_VAR 0 1
72978: PUSH
72979: LD_INT 4
72981: MINUS
72982: PUSH
72983: LD_VAR 0 2
72987: PUSH
72988: LD_INT 4
72990: MINUS
72991: PUSH
72992: LD_INT 2
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: LIST
72999: PUSH
73000: LD_VAR 0 1
73004: PUSH
73005: LD_INT 3
73007: MINUS
73008: PUSH
73009: LD_VAR 0 2
73013: PUSH
73014: LD_INT 1
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: LIST
73021: PUSH
73022: LD_VAR 0 1
73026: PUSH
73027: LD_INT 4
73029: PLUS
73030: PUSH
73031: LD_VAR 0 2
73035: PUSH
73036: LD_INT 4
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: LIST
73043: PUSH
73044: LD_VAR 0 1
73048: PUSH
73049: LD_INT 3
73051: PLUS
73052: PUSH
73053: LD_VAR 0 2
73057: PUSH
73058: LD_INT 3
73060: PLUS
73061: PUSH
73062: LD_INT 5
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: PUSH
73070: LD_VAR 0 1
73074: PUSH
73075: LD_VAR 0 2
73079: PUSH
73080: LD_INT 4
73082: PLUS
73083: PUSH
73084: LD_INT 0
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: LIST
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: ST_TO_ADDR
// end ; 1 :
73099: GO 73799
73101: LD_INT 1
73103: DOUBLE
73104: EQUAL
73105: IFTRUE 73109
73107: GO 73242
73109: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73110: LD_ADDR_VAR 0 5
73114: PUSH
73115: LD_VAR 0 1
73119: PUSH
73120: LD_VAR 0 2
73124: PUSH
73125: LD_INT 4
73127: MINUS
73128: PUSH
73129: LD_INT 3
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: LIST
73136: PUSH
73137: LD_VAR 0 1
73141: PUSH
73142: LD_INT 3
73144: MINUS
73145: PUSH
73146: LD_VAR 0 2
73150: PUSH
73151: LD_INT 3
73153: MINUS
73154: PUSH
73155: LD_INT 2
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: PUSH
73163: LD_VAR 0 1
73167: PUSH
73168: LD_INT 4
73170: MINUS
73171: PUSH
73172: LD_VAR 0 2
73176: PUSH
73177: LD_INT 1
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: LIST
73184: PUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_VAR 0 2
73194: PUSH
73195: LD_INT 3
73197: PLUS
73198: PUSH
73199: LD_INT 0
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: LIST
73206: PUSH
73207: LD_VAR 0 1
73211: PUSH
73212: LD_INT 4
73214: PLUS
73215: PUSH
73216: LD_VAR 0 2
73220: PUSH
73221: LD_INT 4
73223: PLUS
73224: PUSH
73225: LD_INT 5
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: LIST
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: ST_TO_ADDR
// end ; 2 :
73240: GO 73799
73242: LD_INT 2
73244: DOUBLE
73245: EQUAL
73246: IFTRUE 73250
73248: GO 73379
73250: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73251: LD_ADDR_VAR 0 5
73255: PUSH
73256: LD_VAR 0 1
73260: PUSH
73261: LD_VAR 0 2
73265: PUSH
73266: LD_INT 3
73268: MINUS
73269: PUSH
73270: LD_INT 3
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: LIST
73277: PUSH
73278: LD_VAR 0 1
73282: PUSH
73283: LD_INT 4
73285: PLUS
73286: PUSH
73287: LD_VAR 0 2
73291: PUSH
73292: LD_INT 4
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: LIST
73299: PUSH
73300: LD_VAR 0 1
73304: PUSH
73305: LD_VAR 0 2
73309: PUSH
73310: LD_INT 4
73312: PLUS
73313: PUSH
73314: LD_INT 0
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: PUSH
73322: LD_VAR 0 1
73326: PUSH
73327: LD_INT 3
73329: MINUS
73330: PUSH
73331: LD_VAR 0 2
73335: PUSH
73336: LD_INT 1
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: LIST
73343: PUSH
73344: LD_VAR 0 1
73348: PUSH
73349: LD_INT 4
73351: MINUS
73352: PUSH
73353: LD_VAR 0 2
73357: PUSH
73358: LD_INT 4
73360: MINUS
73361: PUSH
73362: LD_INT 2
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: LIST
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: ST_TO_ADDR
// end ; 3 :
73377: GO 73799
73379: LD_INT 3
73381: DOUBLE
73382: EQUAL
73383: IFTRUE 73387
73385: GO 73520
73387: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73388: LD_ADDR_VAR 0 5
73392: PUSH
73393: LD_VAR 0 1
73397: PUSH
73398: LD_INT 3
73400: PLUS
73401: PUSH
73402: LD_VAR 0 2
73406: PUSH
73407: LD_INT 4
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: PUSH
73415: LD_VAR 0 1
73419: PUSH
73420: LD_INT 4
73422: PLUS
73423: PUSH
73424: LD_VAR 0 2
73428: PUSH
73429: LD_INT 4
73431: PLUS
73432: PUSH
73433: LD_INT 5
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: LIST
73440: PUSH
73441: LD_VAR 0 1
73445: PUSH
73446: LD_INT 4
73448: MINUS
73449: PUSH
73450: LD_VAR 0 2
73454: PUSH
73455: LD_INT 1
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: PUSH
73463: LD_VAR 0 1
73467: PUSH
73468: LD_VAR 0 2
73472: PUSH
73473: LD_INT 4
73475: MINUS
73476: PUSH
73477: LD_INT 3
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: LIST
73484: PUSH
73485: LD_VAR 0 1
73489: PUSH
73490: LD_INT 3
73492: MINUS
73493: PUSH
73494: LD_VAR 0 2
73498: PUSH
73499: LD_INT 3
73501: MINUS
73502: PUSH
73503: LD_INT 2
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: LIST
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: ST_TO_ADDR
// end ; 4 :
73518: GO 73799
73520: LD_INT 4
73522: DOUBLE
73523: EQUAL
73524: IFTRUE 73528
73526: GO 73661
73528: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73529: LD_ADDR_VAR 0 5
73533: PUSH
73534: LD_VAR 0 1
73538: PUSH
73539: LD_VAR 0 2
73543: PUSH
73544: LD_INT 4
73546: PLUS
73547: PUSH
73548: LD_INT 0
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: PUSH
73556: LD_VAR 0 1
73560: PUSH
73561: LD_INT 3
73563: PLUS
73564: PUSH
73565: LD_VAR 0 2
73569: PUSH
73570: LD_INT 3
73572: PLUS
73573: PUSH
73574: LD_INT 5
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: PUSH
73582: LD_VAR 0 1
73586: PUSH
73587: LD_INT 4
73589: PLUS
73590: PUSH
73591: LD_VAR 0 2
73595: PUSH
73596: LD_INT 4
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: PUSH
73604: LD_VAR 0 1
73608: PUSH
73609: LD_VAR 0 2
73613: PUSH
73614: LD_INT 3
73616: MINUS
73617: PUSH
73618: LD_INT 3
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: LIST
73625: PUSH
73626: LD_VAR 0 1
73630: PUSH
73631: LD_INT 4
73633: MINUS
73634: PUSH
73635: LD_VAR 0 2
73639: PUSH
73640: LD_INT 4
73642: MINUS
73643: PUSH
73644: LD_INT 2
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: LIST
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: ST_TO_ADDR
// end ; 5 :
73659: GO 73799
73661: LD_INT 5
73663: DOUBLE
73664: EQUAL
73665: IFTRUE 73669
73667: GO 73798
73669: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73670: LD_ADDR_VAR 0 5
73674: PUSH
73675: LD_VAR 0 1
73679: PUSH
73680: LD_INT 4
73682: MINUS
73683: PUSH
73684: LD_VAR 0 2
73688: PUSH
73689: LD_INT 1
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: LIST
73696: PUSH
73697: LD_VAR 0 1
73701: PUSH
73702: LD_VAR 0 2
73706: PUSH
73707: LD_INT 4
73709: MINUS
73710: PUSH
73711: LD_INT 3
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: LIST
73718: PUSH
73719: LD_VAR 0 1
73723: PUSH
73724: LD_INT 4
73726: PLUS
73727: PUSH
73728: LD_VAR 0 2
73732: PUSH
73733: LD_INT 4
73735: PLUS
73736: PUSH
73737: LD_INT 5
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: LIST
73744: PUSH
73745: LD_VAR 0 1
73749: PUSH
73750: LD_INT 3
73752: PLUS
73753: PUSH
73754: LD_VAR 0 2
73758: PUSH
73759: LD_INT 4
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: PUSH
73767: LD_VAR 0 1
73771: PUSH
73772: LD_VAR 0 2
73776: PUSH
73777: LD_INT 3
73779: PLUS
73780: PUSH
73781: LD_INT 0
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: LIST
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: ST_TO_ADDR
// end ; end ;
73796: GO 73799
73798: POP
// result := list ;
73799: LD_ADDR_VAR 0 4
73803: PUSH
73804: LD_VAR 0 5
73808: ST_TO_ADDR
// end ;
73809: LD_VAR 0 4
73813: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73814: LD_INT 0
73816: PPUSH
73817: PPUSH
73818: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73819: LD_VAR 0 1
73823: NOT
73824: PUSH
73825: LD_VAR 0 2
73829: PUSH
73830: LD_INT 1
73832: PUSH
73833: LD_INT 2
73835: PUSH
73836: LD_INT 3
73838: PUSH
73839: LD_INT 4
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: IN
73848: NOT
73849: OR
73850: IFFALSE 73854
// exit ;
73852: GO 73937
// tmp := [ ] ;
73854: LD_ADDR_VAR 0 5
73858: PUSH
73859: EMPTY
73860: ST_TO_ADDR
// for i in units do
73861: LD_ADDR_VAR 0 4
73865: PUSH
73866: LD_VAR 0 1
73870: PUSH
73871: FOR_IN
73872: IFFALSE 73906
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73874: LD_ADDR_VAR 0 5
73878: PUSH
73879: LD_VAR 0 5
73883: PPUSH
73884: LD_VAR 0 4
73888: PPUSH
73889: LD_VAR 0 2
73893: PPUSH
73894: CALL_OW 259
73898: PPUSH
73899: CALL 75298 0 2
73903: ST_TO_ADDR
73904: GO 73871
73906: POP
73907: POP
// if not tmp then
73908: LD_VAR 0 5
73912: NOT
73913: IFFALSE 73917
// exit ;
73915: GO 73937
// result := SortListByListDesc ( units , tmp ) ;
73917: LD_ADDR_VAR 0 3
73921: PUSH
73922: LD_VAR 0 1
73926: PPUSH
73927: LD_VAR 0 5
73931: PPUSH
73932: CALL_OW 77
73936: ST_TO_ADDR
// end ;
73937: LD_VAR 0 3
73941: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73942: LD_INT 0
73944: PPUSH
73945: PPUSH
73946: PPUSH
// result := false ;
73947: LD_ADDR_VAR 0 3
73951: PUSH
73952: LD_INT 0
73954: ST_TO_ADDR
// if not building then
73955: LD_VAR 0 2
73959: NOT
73960: IFFALSE 73964
// exit ;
73962: GO 74102
// x := GetX ( building ) ;
73964: LD_ADDR_VAR 0 4
73968: PUSH
73969: LD_VAR 0 2
73973: PPUSH
73974: CALL_OW 250
73978: ST_TO_ADDR
// y := GetY ( building ) ;
73979: LD_ADDR_VAR 0 5
73983: PUSH
73984: LD_VAR 0 2
73988: PPUSH
73989: CALL_OW 251
73993: ST_TO_ADDR
// if not x or not y then
73994: LD_VAR 0 4
73998: NOT
73999: PUSH
74000: LD_VAR 0 5
74004: NOT
74005: OR
74006: IFFALSE 74010
// exit ;
74008: GO 74102
// if GetTaskList ( unit ) then
74010: LD_VAR 0 1
74014: PPUSH
74015: CALL_OW 437
74019: IFFALSE 74102
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74021: LD_STRING e
74023: PUSH
74024: LD_VAR 0 1
74028: PPUSH
74029: CALL_OW 437
74033: PUSH
74034: LD_INT 1
74036: ARRAY
74037: PUSH
74038: LD_INT 1
74040: ARRAY
74041: EQUAL
74042: PUSH
74043: LD_VAR 0 4
74047: PUSH
74048: LD_VAR 0 1
74052: PPUSH
74053: CALL_OW 437
74057: PUSH
74058: LD_INT 1
74060: ARRAY
74061: PUSH
74062: LD_INT 2
74064: ARRAY
74065: EQUAL
74066: AND
74067: PUSH
74068: LD_VAR 0 5
74072: PUSH
74073: LD_VAR 0 1
74077: PPUSH
74078: CALL_OW 437
74082: PUSH
74083: LD_INT 1
74085: ARRAY
74086: PUSH
74087: LD_INT 3
74089: ARRAY
74090: EQUAL
74091: AND
74092: IFFALSE 74102
// result := true end ;
74094: LD_ADDR_VAR 0 3
74098: PUSH
74099: LD_INT 1
74101: ST_TO_ADDR
// end ;
74102: LD_VAR 0 3
74106: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74107: LD_INT 0
74109: PPUSH
// result := false ;
74110: LD_ADDR_VAR 0 4
74114: PUSH
74115: LD_INT 0
74117: ST_TO_ADDR
// if GetTaskList ( unit ) then
74118: LD_VAR 0 1
74122: PPUSH
74123: CALL_OW 437
74127: IFFALSE 74210
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74129: LD_STRING M
74131: PUSH
74132: LD_VAR 0 1
74136: PPUSH
74137: CALL_OW 437
74141: PUSH
74142: LD_INT 1
74144: ARRAY
74145: PUSH
74146: LD_INT 1
74148: ARRAY
74149: EQUAL
74150: PUSH
74151: LD_VAR 0 2
74155: PUSH
74156: LD_VAR 0 1
74160: PPUSH
74161: CALL_OW 437
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: PUSH
74170: LD_INT 2
74172: ARRAY
74173: EQUAL
74174: AND
74175: PUSH
74176: LD_VAR 0 3
74180: PUSH
74181: LD_VAR 0 1
74185: PPUSH
74186: CALL_OW 437
74190: PUSH
74191: LD_INT 1
74193: ARRAY
74194: PUSH
74195: LD_INT 3
74197: ARRAY
74198: EQUAL
74199: AND
74200: IFFALSE 74210
// result := true ;
74202: LD_ADDR_VAR 0 4
74206: PUSH
74207: LD_INT 1
74209: ST_TO_ADDR
// end ; end ;
74210: LD_VAR 0 4
74214: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74215: LD_INT 0
74217: PPUSH
74218: PPUSH
74219: PPUSH
74220: PPUSH
// if not unit or not area then
74221: LD_VAR 0 1
74225: NOT
74226: PUSH
74227: LD_VAR 0 2
74231: NOT
74232: OR
74233: IFFALSE 74237
// exit ;
74235: GO 74401
// tmp := AreaToList ( area , i ) ;
74237: LD_ADDR_VAR 0 6
74241: PUSH
74242: LD_VAR 0 2
74246: PPUSH
74247: LD_VAR 0 5
74251: PPUSH
74252: CALL_OW 517
74256: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74257: LD_ADDR_VAR 0 5
74261: PUSH
74262: DOUBLE
74263: LD_INT 1
74265: DEC
74266: ST_TO_ADDR
74267: LD_VAR 0 6
74271: PUSH
74272: LD_INT 1
74274: ARRAY
74275: PUSH
74276: FOR_TO
74277: IFFALSE 74399
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74279: LD_ADDR_VAR 0 7
74283: PUSH
74284: LD_VAR 0 6
74288: PUSH
74289: LD_INT 1
74291: ARRAY
74292: PUSH
74293: LD_VAR 0 5
74297: ARRAY
74298: PUSH
74299: LD_VAR 0 6
74303: PUSH
74304: LD_INT 2
74306: ARRAY
74307: PUSH
74308: LD_VAR 0 5
74312: ARRAY
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74318: LD_VAR 0 7
74322: PUSH
74323: LD_INT 1
74325: ARRAY
74326: PPUSH
74327: LD_VAR 0 7
74331: PUSH
74332: LD_INT 2
74334: ARRAY
74335: PPUSH
74336: CALL_OW 428
74340: PUSH
74341: LD_INT 0
74343: EQUAL
74344: IFFALSE 74397
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74346: LD_VAR 0 1
74350: PPUSH
74351: LD_VAR 0 7
74355: PUSH
74356: LD_INT 1
74358: ARRAY
74359: PPUSH
74360: LD_VAR 0 7
74364: PUSH
74365: LD_INT 2
74367: ARRAY
74368: PPUSH
74369: LD_VAR 0 3
74373: PPUSH
74374: CALL_OW 48
// result := IsPlaced ( unit ) ;
74378: LD_ADDR_VAR 0 4
74382: PUSH
74383: LD_VAR 0 1
74387: PPUSH
74388: CALL_OW 305
74392: ST_TO_ADDR
// exit ;
74393: POP
74394: POP
74395: GO 74401
// end ; end ;
74397: GO 74276
74399: POP
74400: POP
// end ;
74401: LD_VAR 0 4
74405: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74406: LD_INT 0
74408: PPUSH
74409: PPUSH
74410: PPUSH
// if not side or side > 8 then
74411: LD_VAR 0 1
74415: NOT
74416: PUSH
74417: LD_VAR 0 1
74421: PUSH
74422: LD_INT 8
74424: GREATER
74425: OR
74426: IFFALSE 74430
// exit ;
74428: GO 74617
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74430: LD_ADDR_VAR 0 4
74434: PUSH
74435: LD_INT 22
74437: PUSH
74438: LD_VAR 0 1
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 21
74449: PUSH
74450: LD_INT 3
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PPUSH
74461: CALL_OW 69
74465: ST_TO_ADDR
// if not tmp then
74466: LD_VAR 0 4
74470: NOT
74471: IFFALSE 74475
// exit ;
74473: GO 74617
// enable_addtolog := true ;
74475: LD_ADDR_OWVAR 81
74479: PUSH
74480: LD_INT 1
74482: ST_TO_ADDR
// AddToLog ( [ ) ;
74483: LD_STRING [
74485: PPUSH
74486: CALL_OW 561
// for i in tmp do
74490: LD_ADDR_VAR 0 3
74494: PUSH
74495: LD_VAR 0 4
74499: PUSH
74500: FOR_IN
74501: IFFALSE 74608
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74503: LD_STRING [
74505: PUSH
74506: LD_VAR 0 3
74510: PPUSH
74511: CALL_OW 266
74515: STR
74516: PUSH
74517: LD_STRING , 
74519: STR
74520: PUSH
74521: LD_VAR 0 3
74525: PPUSH
74526: CALL_OW 250
74530: STR
74531: PUSH
74532: LD_STRING , 
74534: STR
74535: PUSH
74536: LD_VAR 0 3
74540: PPUSH
74541: CALL_OW 251
74545: STR
74546: PUSH
74547: LD_STRING , 
74549: STR
74550: PUSH
74551: LD_VAR 0 3
74555: PPUSH
74556: CALL_OW 254
74560: STR
74561: PUSH
74562: LD_STRING , 
74564: STR
74565: PUSH
74566: LD_VAR 0 3
74570: PPUSH
74571: LD_INT 1
74573: PPUSH
74574: CALL_OW 268
74578: STR
74579: PUSH
74580: LD_STRING , 
74582: STR
74583: PUSH
74584: LD_VAR 0 3
74588: PPUSH
74589: LD_INT 2
74591: PPUSH
74592: CALL_OW 268
74596: STR
74597: PUSH
74598: LD_STRING ],
74600: STR
74601: PPUSH
74602: CALL_OW 561
// end ;
74606: GO 74500
74608: POP
74609: POP
// AddToLog ( ]; ) ;
74610: LD_STRING ];
74612: PPUSH
74613: CALL_OW 561
// end ;
74617: LD_VAR 0 2
74621: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74622: LD_INT 0
74624: PPUSH
74625: PPUSH
74626: PPUSH
74627: PPUSH
74628: PPUSH
// if not area or not rate or not max then
74629: LD_VAR 0 1
74633: NOT
74634: PUSH
74635: LD_VAR 0 2
74639: NOT
74640: OR
74641: PUSH
74642: LD_VAR 0 4
74646: NOT
74647: OR
74648: IFFALSE 74652
// exit ;
74650: GO 74841
// while 1 do
74652: LD_INT 1
74654: IFFALSE 74841
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74656: LD_ADDR_VAR 0 9
74660: PUSH
74661: LD_VAR 0 1
74665: PPUSH
74666: LD_INT 1
74668: PPUSH
74669: CALL_OW 287
74673: PUSH
74674: LD_INT 10
74676: MUL
74677: ST_TO_ADDR
// r := rate / 10 ;
74678: LD_ADDR_VAR 0 7
74682: PUSH
74683: LD_VAR 0 2
74687: PUSH
74688: LD_INT 10
74690: DIVREAL
74691: ST_TO_ADDR
// time := 1 1$00 ;
74692: LD_ADDR_VAR 0 8
74696: PUSH
74697: LD_INT 2100
74699: ST_TO_ADDR
// if amount < min then
74700: LD_VAR 0 9
74704: PUSH
74705: LD_VAR 0 3
74709: LESS
74710: IFFALSE 74728
// r := r * 2 else
74712: LD_ADDR_VAR 0 7
74716: PUSH
74717: LD_VAR 0 7
74721: PUSH
74722: LD_INT 2
74724: MUL
74725: ST_TO_ADDR
74726: GO 74754
// if amount > max then
74728: LD_VAR 0 9
74732: PUSH
74733: LD_VAR 0 4
74737: GREATER
74738: IFFALSE 74754
// r := r / 2 ;
74740: LD_ADDR_VAR 0 7
74744: PUSH
74745: LD_VAR 0 7
74749: PUSH
74750: LD_INT 2
74752: DIVREAL
74753: ST_TO_ADDR
// time := time / r ;
74754: LD_ADDR_VAR 0 8
74758: PUSH
74759: LD_VAR 0 8
74763: PUSH
74764: LD_VAR 0 7
74768: DIVREAL
74769: ST_TO_ADDR
// if time < 0 then
74770: LD_VAR 0 8
74774: PUSH
74775: LD_INT 0
74777: LESS
74778: IFFALSE 74795
// time := time * - 1 ;
74780: LD_ADDR_VAR 0 8
74784: PUSH
74785: LD_VAR 0 8
74789: PUSH
74790: LD_INT 1
74792: NEG
74793: MUL
74794: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74795: LD_VAR 0 8
74799: PUSH
74800: LD_INT 35
74802: PPUSH
74803: LD_INT 875
74805: PPUSH
74806: CALL_OW 12
74810: PLUS
74811: PPUSH
74812: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74816: LD_INT 1
74818: PPUSH
74819: LD_INT 5
74821: PPUSH
74822: CALL_OW 12
74826: PPUSH
74827: LD_VAR 0 1
74831: PPUSH
74832: LD_INT 1
74834: PPUSH
74835: CALL_OW 55
// end ;
74839: GO 74652
// end ;
74841: LD_VAR 0 5
74845: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74846: LD_INT 0
74848: PPUSH
74849: PPUSH
74850: PPUSH
74851: PPUSH
74852: PPUSH
74853: PPUSH
74854: PPUSH
74855: PPUSH
// if not turrets or not factories then
74856: LD_VAR 0 1
74860: NOT
74861: PUSH
74862: LD_VAR 0 2
74866: NOT
74867: OR
74868: IFFALSE 74872
// exit ;
74870: GO 75179
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74872: LD_ADDR_VAR 0 10
74876: PUSH
74877: LD_INT 5
74879: PUSH
74880: LD_INT 6
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 2
74889: PUSH
74890: LD_INT 4
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 3
74899: PUSH
74900: LD_INT 5
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 24
74914: PUSH
74915: LD_INT 25
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 23
74924: PUSH
74925: LD_INT 27
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 42
74938: PUSH
74939: LD_INT 43
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 44
74948: PUSH
74949: LD_INT 46
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 45
74958: PUSH
74959: LD_INT 47
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: ST_TO_ADDR
// result := [ ] ;
74976: LD_ADDR_VAR 0 3
74980: PUSH
74981: EMPTY
74982: ST_TO_ADDR
// for i in turrets do
74983: LD_ADDR_VAR 0 4
74987: PUSH
74988: LD_VAR 0 1
74992: PUSH
74993: FOR_IN
74994: IFFALSE 75177
// begin nat := GetNation ( i ) ;
74996: LD_ADDR_VAR 0 7
75000: PUSH
75001: LD_VAR 0 4
75005: PPUSH
75006: CALL_OW 248
75010: ST_TO_ADDR
// weapon := 0 ;
75011: LD_ADDR_VAR 0 8
75015: PUSH
75016: LD_INT 0
75018: ST_TO_ADDR
// if not nat then
75019: LD_VAR 0 7
75023: NOT
75024: IFFALSE 75028
// continue ;
75026: GO 74993
// for j in list [ nat ] do
75028: LD_ADDR_VAR 0 5
75032: PUSH
75033: LD_VAR 0 10
75037: PUSH
75038: LD_VAR 0 7
75042: ARRAY
75043: PUSH
75044: FOR_IN
75045: IFFALSE 75086
// if GetBWeapon ( i ) = j [ 1 ] then
75047: LD_VAR 0 4
75051: PPUSH
75052: CALL_OW 269
75056: PUSH
75057: LD_VAR 0 5
75061: PUSH
75062: LD_INT 1
75064: ARRAY
75065: EQUAL
75066: IFFALSE 75084
// begin weapon := j [ 2 ] ;
75068: LD_ADDR_VAR 0 8
75072: PUSH
75073: LD_VAR 0 5
75077: PUSH
75078: LD_INT 2
75080: ARRAY
75081: ST_TO_ADDR
// break ;
75082: GO 75086
// end ;
75084: GO 75044
75086: POP
75087: POP
// if not weapon then
75088: LD_VAR 0 8
75092: NOT
75093: IFFALSE 75097
// continue ;
75095: GO 74993
// for k in factories do
75097: LD_ADDR_VAR 0 6
75101: PUSH
75102: LD_VAR 0 2
75106: PUSH
75107: FOR_IN
75108: IFFALSE 75173
// begin weapons := AvailableWeaponList ( k ) ;
75110: LD_ADDR_VAR 0 9
75114: PUSH
75115: LD_VAR 0 6
75119: PPUSH
75120: CALL_OW 478
75124: ST_TO_ADDR
// if not weapons then
75125: LD_VAR 0 9
75129: NOT
75130: IFFALSE 75134
// continue ;
75132: GO 75107
// if weapon in weapons then
75134: LD_VAR 0 8
75138: PUSH
75139: LD_VAR 0 9
75143: IN
75144: IFFALSE 75171
// begin result := [ i , weapon ] ;
75146: LD_ADDR_VAR 0 3
75150: PUSH
75151: LD_VAR 0 4
75155: PUSH
75156: LD_VAR 0 8
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: ST_TO_ADDR
// exit ;
75165: POP
75166: POP
75167: POP
75168: POP
75169: GO 75179
// end ; end ;
75171: GO 75107
75173: POP
75174: POP
// end ;
75175: GO 74993
75177: POP
75178: POP
// end ;
75179: LD_VAR 0 3
75183: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75184: LD_INT 0
75186: PPUSH
// if not side or side > 8 then
75187: LD_VAR 0 3
75191: NOT
75192: PUSH
75193: LD_VAR 0 3
75197: PUSH
75198: LD_INT 8
75200: GREATER
75201: OR
75202: IFFALSE 75206
// exit ;
75204: GO 75265
// if not range then
75206: LD_VAR 0 4
75210: NOT
75211: IFFALSE 75222
// range := - 12 ;
75213: LD_ADDR_VAR 0 4
75217: PUSH
75218: LD_INT 12
75220: NEG
75221: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75222: LD_VAR 0 1
75226: PPUSH
75227: LD_VAR 0 2
75231: PPUSH
75232: LD_VAR 0 3
75236: PPUSH
75237: LD_VAR 0 4
75241: PPUSH
75242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75246: LD_VAR 0 1
75250: PPUSH
75251: LD_VAR 0 2
75255: PPUSH
75256: LD_VAR 0 3
75260: PPUSH
75261: CALL_OW 331
// end ;
75265: LD_VAR 0 5
75269: RET
// export function Video ( mode ) ; begin
75270: LD_INT 0
75272: PPUSH
// ingame_video = mode ;
75273: LD_ADDR_OWVAR 52
75277: PUSH
75278: LD_VAR 0 1
75282: ST_TO_ADDR
// interface_hidden = mode ;
75283: LD_ADDR_OWVAR 54
75287: PUSH
75288: LD_VAR 0 1
75292: ST_TO_ADDR
// end ;
75293: LD_VAR 0 2
75297: RET
// export function Join ( array , element ) ; begin
75298: LD_INT 0
75300: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75301: LD_ADDR_VAR 0 3
75305: PUSH
75306: LD_VAR 0 1
75310: PPUSH
75311: LD_VAR 0 1
75315: PUSH
75316: LD_INT 1
75318: PLUS
75319: PPUSH
75320: LD_VAR 0 2
75324: PPUSH
75325: CALL_OW 1
75329: ST_TO_ADDR
// end ;
75330: LD_VAR 0 3
75334: RET
// export function JoinUnion ( array , element ) ; begin
75335: LD_INT 0
75337: PPUSH
// result := array union element ;
75338: LD_ADDR_VAR 0 3
75342: PUSH
75343: LD_VAR 0 1
75347: PUSH
75348: LD_VAR 0 2
75352: UNION
75353: ST_TO_ADDR
// end ;
75354: LD_VAR 0 3
75358: RET
// export function GetBehemoths ( side ) ; begin
75359: LD_INT 0
75361: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75362: LD_ADDR_VAR 0 2
75366: PUSH
75367: LD_INT 22
75369: PUSH
75370: LD_VAR 0 1
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 31
75381: PUSH
75382: LD_INT 25
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PPUSH
75393: CALL_OW 69
75397: ST_TO_ADDR
// end ;
75398: LD_VAR 0 2
75402: RET
// export function Shuffle ( array ) ; var i , index ; begin
75403: LD_INT 0
75405: PPUSH
75406: PPUSH
75407: PPUSH
// result := [ ] ;
75408: LD_ADDR_VAR 0 2
75412: PUSH
75413: EMPTY
75414: ST_TO_ADDR
// if not array then
75415: LD_VAR 0 1
75419: NOT
75420: IFFALSE 75424
// exit ;
75422: GO 75523
// Randomize ;
75424: CALL_OW 10
// for i = array downto 1 do
75428: LD_ADDR_VAR 0 3
75432: PUSH
75433: DOUBLE
75434: LD_VAR 0 1
75438: INC
75439: ST_TO_ADDR
75440: LD_INT 1
75442: PUSH
75443: FOR_DOWNTO
75444: IFFALSE 75521
// begin index := rand ( 1 , array ) ;
75446: LD_ADDR_VAR 0 4
75450: PUSH
75451: LD_INT 1
75453: PPUSH
75454: LD_VAR 0 1
75458: PPUSH
75459: CALL_OW 12
75463: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75464: LD_ADDR_VAR 0 2
75468: PUSH
75469: LD_VAR 0 2
75473: PPUSH
75474: LD_VAR 0 2
75478: PUSH
75479: LD_INT 1
75481: PLUS
75482: PPUSH
75483: LD_VAR 0 1
75487: PUSH
75488: LD_VAR 0 4
75492: ARRAY
75493: PPUSH
75494: CALL_OW 2
75498: ST_TO_ADDR
// array := Delete ( array , index ) ;
75499: LD_ADDR_VAR 0 1
75503: PUSH
75504: LD_VAR 0 1
75508: PPUSH
75509: LD_VAR 0 4
75513: PPUSH
75514: CALL_OW 3
75518: ST_TO_ADDR
// end ;
75519: GO 75443
75521: POP
75522: POP
// end ;
75523: LD_VAR 0 2
75527: RET
// export function GetBaseMaterials ( base ) ; begin
75528: LD_INT 0
75530: PPUSH
// result := [ 0 , 0 , 0 ] ;
75531: LD_ADDR_VAR 0 2
75535: PUSH
75536: LD_INT 0
75538: PUSH
75539: LD_INT 0
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: LIST
75549: ST_TO_ADDR
// if not base then
75550: LD_VAR 0 1
75554: NOT
75555: IFFALSE 75559
// exit ;
75557: GO 75608
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75559: LD_ADDR_VAR 0 2
75563: PUSH
75564: LD_VAR 0 1
75568: PPUSH
75569: LD_INT 1
75571: PPUSH
75572: CALL_OW 275
75576: PUSH
75577: LD_VAR 0 1
75581: PPUSH
75582: LD_INT 2
75584: PPUSH
75585: CALL_OW 275
75589: PUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: LD_INT 3
75597: PPUSH
75598: CALL_OW 275
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: LIST
75607: ST_TO_ADDR
// end ;
75608: LD_VAR 0 2
75612: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75613: LD_INT 0
75615: PPUSH
75616: PPUSH
// result := array ;
75617: LD_ADDR_VAR 0 3
75621: PUSH
75622: LD_VAR 0 1
75626: ST_TO_ADDR
// if size >= result then
75627: LD_VAR 0 2
75631: PUSH
75632: LD_VAR 0 3
75636: GREATEREQUAL
75637: IFFALSE 75641
// exit ;
75639: GO 75691
// if size then
75641: LD_VAR 0 2
75645: IFFALSE 75691
// for i := array downto size do
75647: LD_ADDR_VAR 0 4
75651: PUSH
75652: DOUBLE
75653: LD_VAR 0 1
75657: INC
75658: ST_TO_ADDR
75659: LD_VAR 0 2
75663: PUSH
75664: FOR_DOWNTO
75665: IFFALSE 75689
// result := Delete ( result , result ) ;
75667: LD_ADDR_VAR 0 3
75671: PUSH
75672: LD_VAR 0 3
75676: PPUSH
75677: LD_VAR 0 3
75681: PPUSH
75682: CALL_OW 3
75686: ST_TO_ADDR
75687: GO 75664
75689: POP
75690: POP
// end ;
75691: LD_VAR 0 3
75695: RET
// export function ComExit ( unit ) ; var tmp ; begin
75696: LD_INT 0
75698: PPUSH
75699: PPUSH
// if not IsInUnit ( unit ) then
75700: LD_VAR 0 1
75704: PPUSH
75705: CALL_OW 310
75709: NOT
75710: IFFALSE 75714
// exit ;
75712: GO 75774
// tmp := IsInUnit ( unit ) ;
75714: LD_ADDR_VAR 0 3
75718: PUSH
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL_OW 310
75728: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75729: LD_VAR 0 3
75733: PPUSH
75734: CALL_OW 247
75738: PUSH
75739: LD_INT 2
75741: EQUAL
75742: IFFALSE 75755
// ComExitVehicle ( unit ) else
75744: LD_VAR 0 1
75748: PPUSH
75749: CALL_OW 121
75753: GO 75764
// ComExitBuilding ( unit ) ;
75755: LD_VAR 0 1
75759: PPUSH
75760: CALL_OW 122
// result := tmp ;
75764: LD_ADDR_VAR 0 2
75768: PUSH
75769: LD_VAR 0 3
75773: ST_TO_ADDR
// end ;
75774: LD_VAR 0 2
75778: RET
// export function ComExitAll ( units ) ; var i ; begin
75779: LD_INT 0
75781: PPUSH
75782: PPUSH
// if not units then
75783: LD_VAR 0 1
75787: NOT
75788: IFFALSE 75792
// exit ;
75790: GO 75818
// for i in units do
75792: LD_ADDR_VAR 0 3
75796: PUSH
75797: LD_VAR 0 1
75801: PUSH
75802: FOR_IN
75803: IFFALSE 75816
// ComExit ( i ) ;
75805: LD_VAR 0 3
75809: PPUSH
75810: CALL 75696 0 1
75814: GO 75802
75816: POP
75817: POP
// end ;
75818: LD_VAR 0 2
75822: RET
// export function ResetHc ; begin
75823: LD_INT 0
75825: PPUSH
// InitHc ;
75826: CALL_OW 19
// hc_importance := 0 ;
75830: LD_ADDR_OWVAR 32
75834: PUSH
75835: LD_INT 0
75837: ST_TO_ADDR
// end ;
75838: LD_VAR 0 1
75842: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75843: LD_INT 0
75845: PPUSH
75846: PPUSH
75847: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75848: LD_ADDR_VAR 0 6
75852: PUSH
75853: LD_VAR 0 1
75857: PUSH
75858: LD_VAR 0 3
75862: PLUS
75863: PUSH
75864: LD_INT 2
75866: DIV
75867: ST_TO_ADDR
// if _x < 0 then
75868: LD_VAR 0 6
75872: PUSH
75873: LD_INT 0
75875: LESS
75876: IFFALSE 75893
// _x := _x * - 1 ;
75878: LD_ADDR_VAR 0 6
75882: PUSH
75883: LD_VAR 0 6
75887: PUSH
75888: LD_INT 1
75890: NEG
75891: MUL
75892: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75893: LD_ADDR_VAR 0 7
75897: PUSH
75898: LD_VAR 0 2
75902: PUSH
75903: LD_VAR 0 4
75907: PLUS
75908: PUSH
75909: LD_INT 2
75911: DIV
75912: ST_TO_ADDR
// if _y < 0 then
75913: LD_VAR 0 7
75917: PUSH
75918: LD_INT 0
75920: LESS
75921: IFFALSE 75938
// _y := _y * - 1 ;
75923: LD_ADDR_VAR 0 7
75927: PUSH
75928: LD_VAR 0 7
75932: PUSH
75933: LD_INT 1
75935: NEG
75936: MUL
75937: ST_TO_ADDR
// result := [ _x , _y ] ;
75938: LD_ADDR_VAR 0 5
75942: PUSH
75943: LD_VAR 0 6
75947: PUSH
75948: LD_VAR 0 7
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: ST_TO_ADDR
// end ;
75957: LD_VAR 0 5
75961: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75962: LD_INT 0
75964: PPUSH
75965: PPUSH
75966: PPUSH
75967: PPUSH
// task := GetTaskList ( unit ) ;
75968: LD_ADDR_VAR 0 7
75972: PUSH
75973: LD_VAR 0 1
75977: PPUSH
75978: CALL_OW 437
75982: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75983: LD_VAR 0 7
75987: NOT
75988: PUSH
75989: LD_VAR 0 1
75993: PPUSH
75994: LD_VAR 0 2
75998: PPUSH
75999: CALL_OW 308
76003: NOT
76004: AND
76005: IFFALSE 76009
// exit ;
76007: GO 76127
// if IsInArea ( unit , area ) then
76009: LD_VAR 0 1
76013: PPUSH
76014: LD_VAR 0 2
76018: PPUSH
76019: CALL_OW 308
76023: IFFALSE 76041
// begin ComMoveToArea ( unit , goAway ) ;
76025: LD_VAR 0 1
76029: PPUSH
76030: LD_VAR 0 3
76034: PPUSH
76035: CALL_OW 113
// exit ;
76039: GO 76127
// end ; if task [ 1 ] [ 1 ] <> M then
76041: LD_VAR 0 7
76045: PUSH
76046: LD_INT 1
76048: ARRAY
76049: PUSH
76050: LD_INT 1
76052: ARRAY
76053: PUSH
76054: LD_STRING M
76056: NONEQUAL
76057: IFFALSE 76061
// exit ;
76059: GO 76127
// x := task [ 1 ] [ 2 ] ;
76061: LD_ADDR_VAR 0 5
76065: PUSH
76066: LD_VAR 0 7
76070: PUSH
76071: LD_INT 1
76073: ARRAY
76074: PUSH
76075: LD_INT 2
76077: ARRAY
76078: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76079: LD_ADDR_VAR 0 6
76083: PUSH
76084: LD_VAR 0 7
76088: PUSH
76089: LD_INT 1
76091: ARRAY
76092: PUSH
76093: LD_INT 3
76095: ARRAY
76096: ST_TO_ADDR
// if InArea ( x , y , area ) then
76097: LD_VAR 0 5
76101: PPUSH
76102: LD_VAR 0 6
76106: PPUSH
76107: LD_VAR 0 2
76111: PPUSH
76112: CALL_OW 309
76116: IFFALSE 76127
// ComStop ( unit ) ;
76118: LD_VAR 0 1
76122: PPUSH
76123: CALL_OW 141
// end ;
76127: LD_VAR 0 4
76131: RET
// export function Abs ( value ) ; begin
76132: LD_INT 0
76134: PPUSH
// result := value ;
76135: LD_ADDR_VAR 0 2
76139: PUSH
76140: LD_VAR 0 1
76144: ST_TO_ADDR
// if value < 0 then
76145: LD_VAR 0 1
76149: PUSH
76150: LD_INT 0
76152: LESS
76153: IFFALSE 76170
// result := value * - 1 ;
76155: LD_ADDR_VAR 0 2
76159: PUSH
76160: LD_VAR 0 1
76164: PUSH
76165: LD_INT 1
76167: NEG
76168: MUL
76169: ST_TO_ADDR
// end ;
76170: LD_VAR 0 2
76174: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76175: LD_INT 0
76177: PPUSH
76178: PPUSH
76179: PPUSH
76180: PPUSH
76181: PPUSH
76182: PPUSH
76183: PPUSH
76184: PPUSH
// if not unit or not building then
76185: LD_VAR 0 1
76189: NOT
76190: PUSH
76191: LD_VAR 0 2
76195: NOT
76196: OR
76197: IFFALSE 76201
// exit ;
76199: GO 76427
// x := GetX ( building ) ;
76201: LD_ADDR_VAR 0 4
76205: PUSH
76206: LD_VAR 0 2
76210: PPUSH
76211: CALL_OW 250
76215: ST_TO_ADDR
// y := GetY ( building ) ;
76216: LD_ADDR_VAR 0 6
76220: PUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: CALL_OW 251
76230: ST_TO_ADDR
// d := GetDir ( building ) ;
76231: LD_ADDR_VAR 0 8
76235: PUSH
76236: LD_VAR 0 2
76240: PPUSH
76241: CALL_OW 254
76245: ST_TO_ADDR
// r := 4 ;
76246: LD_ADDR_VAR 0 9
76250: PUSH
76251: LD_INT 4
76253: ST_TO_ADDR
// for i := 1 to 5 do
76254: LD_ADDR_VAR 0 10
76258: PUSH
76259: DOUBLE
76260: LD_INT 1
76262: DEC
76263: ST_TO_ADDR
76264: LD_INT 5
76266: PUSH
76267: FOR_TO
76268: IFFALSE 76425
// begin _x := ShiftX ( x , d , r + i ) ;
76270: LD_ADDR_VAR 0 5
76274: PUSH
76275: LD_VAR 0 4
76279: PPUSH
76280: LD_VAR 0 8
76284: PPUSH
76285: LD_VAR 0 9
76289: PUSH
76290: LD_VAR 0 10
76294: PLUS
76295: PPUSH
76296: CALL_OW 272
76300: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76301: LD_ADDR_VAR 0 7
76305: PUSH
76306: LD_VAR 0 6
76310: PPUSH
76311: LD_VAR 0 8
76315: PPUSH
76316: LD_VAR 0 9
76320: PUSH
76321: LD_VAR 0 10
76325: PLUS
76326: PPUSH
76327: CALL_OW 273
76331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76332: LD_VAR 0 5
76336: PPUSH
76337: LD_VAR 0 7
76341: PPUSH
76342: CALL_OW 488
76346: PUSH
76347: LD_VAR 0 5
76351: PPUSH
76352: LD_VAR 0 7
76356: PPUSH
76357: CALL_OW 428
76361: PPUSH
76362: CALL_OW 247
76366: PUSH
76367: LD_INT 3
76369: PUSH
76370: LD_INT 2
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: IN
76377: NOT
76378: AND
76379: IFFALSE 76423
// begin ComMoveXY ( unit , _x , _y ) ;
76381: LD_VAR 0 1
76385: PPUSH
76386: LD_VAR 0 5
76390: PPUSH
76391: LD_VAR 0 7
76395: PPUSH
76396: CALL_OW 111
// result := [ _x , _y ] ;
76400: LD_ADDR_VAR 0 3
76404: PUSH
76405: LD_VAR 0 5
76409: PUSH
76410: LD_VAR 0 7
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: ST_TO_ADDR
// exit ;
76419: POP
76420: POP
76421: GO 76427
// end ; end ;
76423: GO 76267
76425: POP
76426: POP
// end ;
76427: LD_VAR 0 3
76431: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76432: LD_INT 0
76434: PPUSH
76435: PPUSH
76436: PPUSH
// result := 0 ;
76437: LD_ADDR_VAR 0 3
76441: PUSH
76442: LD_INT 0
76444: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76445: LD_VAR 0 1
76449: PUSH
76450: LD_INT 0
76452: LESS
76453: PUSH
76454: LD_VAR 0 1
76458: PUSH
76459: LD_INT 8
76461: GREATER
76462: OR
76463: PUSH
76464: LD_VAR 0 2
76468: PUSH
76469: LD_INT 0
76471: LESS
76472: OR
76473: PUSH
76474: LD_VAR 0 2
76478: PUSH
76479: LD_INT 8
76481: GREATER
76482: OR
76483: IFFALSE 76487
// exit ;
76485: GO 76562
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76487: LD_ADDR_VAR 0 4
76491: PUSH
76492: LD_INT 22
76494: PUSH
76495: LD_VAR 0 2
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PPUSH
76504: CALL_OW 69
76508: PUSH
76509: FOR_IN
76510: IFFALSE 76560
// begin un := UnitShoot ( i ) ;
76512: LD_ADDR_VAR 0 5
76516: PUSH
76517: LD_VAR 0 4
76521: PPUSH
76522: CALL_OW 504
76526: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76527: LD_VAR 0 5
76531: PPUSH
76532: CALL_OW 255
76536: PUSH
76537: LD_VAR 0 1
76541: EQUAL
76542: IFFALSE 76558
// begin result := un ;
76544: LD_ADDR_VAR 0 3
76548: PUSH
76549: LD_VAR 0 5
76553: ST_TO_ADDR
// exit ;
76554: POP
76555: POP
76556: GO 76562
// end ; end ;
76558: GO 76509
76560: POP
76561: POP
// end ;
76562: LD_VAR 0 3
76566: RET
// export function GetCargoBay ( units ) ; begin
76567: LD_INT 0
76569: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76570: LD_ADDR_VAR 0 2
76574: PUSH
76575: LD_VAR 0 1
76579: PPUSH
76580: LD_INT 2
76582: PUSH
76583: LD_INT 34
76585: PUSH
76586: LD_INT 12
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 34
76595: PUSH
76596: LD_INT 51
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 34
76605: PUSH
76606: LD_INT 32
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 34
76615: PUSH
76616: LD_INT 89
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: PPUSH
76630: CALL_OW 72
76634: ST_TO_ADDR
// end ;
76635: LD_VAR 0 2
76639: RET
// export function Negate ( value ) ; begin
76640: LD_INT 0
76642: PPUSH
// result := not value ;
76643: LD_ADDR_VAR 0 2
76647: PUSH
76648: LD_VAR 0 1
76652: NOT
76653: ST_TO_ADDR
// end ;
76654: LD_VAR 0 2
76658: RET
// export function Inc ( value ) ; begin
76659: LD_INT 0
76661: PPUSH
// result := value + 1 ;
76662: LD_ADDR_VAR 0 2
76666: PUSH
76667: LD_VAR 0 1
76671: PUSH
76672: LD_INT 1
76674: PLUS
76675: ST_TO_ADDR
// end ;
76676: LD_VAR 0 2
76680: RET
// export function Dec ( value ) ; begin
76681: LD_INT 0
76683: PPUSH
// result := value - 1 ;
76684: LD_ADDR_VAR 0 2
76688: PUSH
76689: LD_VAR 0 1
76693: PUSH
76694: LD_INT 1
76696: MINUS
76697: ST_TO_ADDR
// end ;
76698: LD_VAR 0 2
76702: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76703: LD_INT 0
76705: PPUSH
76706: PPUSH
76707: PPUSH
76708: PPUSH
76709: PPUSH
76710: PPUSH
76711: PPUSH
76712: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76713: LD_VAR 0 1
76717: PPUSH
76718: LD_VAR 0 2
76722: PPUSH
76723: CALL_OW 488
76727: NOT
76728: PUSH
76729: LD_VAR 0 3
76733: PPUSH
76734: LD_VAR 0 4
76738: PPUSH
76739: CALL_OW 488
76743: NOT
76744: OR
76745: IFFALSE 76758
// begin result := - 1 ;
76747: LD_ADDR_VAR 0 5
76751: PUSH
76752: LD_INT 1
76754: NEG
76755: ST_TO_ADDR
// exit ;
76756: GO 76993
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76758: LD_ADDR_VAR 0 12
76762: PUSH
76763: LD_VAR 0 1
76767: PPUSH
76768: LD_VAR 0 2
76772: PPUSH
76773: LD_VAR 0 3
76777: PPUSH
76778: LD_VAR 0 4
76782: PPUSH
76783: CALL 75843 0 4
76787: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76788: LD_ADDR_VAR 0 11
76792: PUSH
76793: LD_VAR 0 1
76797: PPUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: LD_VAR 0 12
76807: PUSH
76808: LD_INT 1
76810: ARRAY
76811: PPUSH
76812: LD_VAR 0 12
76816: PUSH
76817: LD_INT 2
76819: ARRAY
76820: PPUSH
76821: CALL_OW 298
76825: ST_TO_ADDR
// distance := 9999 ;
76826: LD_ADDR_VAR 0 10
76830: PUSH
76831: LD_INT 9999
76833: ST_TO_ADDR
// for i := 0 to 5 do
76834: LD_ADDR_VAR 0 6
76838: PUSH
76839: DOUBLE
76840: LD_INT 0
76842: DEC
76843: ST_TO_ADDR
76844: LD_INT 5
76846: PUSH
76847: FOR_TO
76848: IFFALSE 76991
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76850: LD_ADDR_VAR 0 7
76854: PUSH
76855: LD_VAR 0 1
76859: PPUSH
76860: LD_VAR 0 6
76864: PPUSH
76865: LD_VAR 0 11
76869: PPUSH
76870: CALL_OW 272
76874: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76875: LD_ADDR_VAR 0 8
76879: PUSH
76880: LD_VAR 0 2
76884: PPUSH
76885: LD_VAR 0 6
76889: PPUSH
76890: LD_VAR 0 11
76894: PPUSH
76895: CALL_OW 273
76899: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76900: LD_VAR 0 7
76904: PPUSH
76905: LD_VAR 0 8
76909: PPUSH
76910: CALL_OW 488
76914: NOT
76915: IFFALSE 76919
// continue ;
76917: GO 76847
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76919: LD_ADDR_VAR 0 9
76923: PUSH
76924: LD_VAR 0 12
76928: PUSH
76929: LD_INT 1
76931: ARRAY
76932: PPUSH
76933: LD_VAR 0 12
76937: PUSH
76938: LD_INT 2
76940: ARRAY
76941: PPUSH
76942: LD_VAR 0 7
76946: PPUSH
76947: LD_VAR 0 8
76951: PPUSH
76952: CALL_OW 298
76956: ST_TO_ADDR
// if tmp < distance then
76957: LD_VAR 0 9
76961: PUSH
76962: LD_VAR 0 10
76966: LESS
76967: IFFALSE 76989
// begin result := i ;
76969: LD_ADDR_VAR 0 5
76973: PUSH
76974: LD_VAR 0 6
76978: ST_TO_ADDR
// distance := tmp ;
76979: LD_ADDR_VAR 0 10
76983: PUSH
76984: LD_VAR 0 9
76988: ST_TO_ADDR
// end ; end ;
76989: GO 76847
76991: POP
76992: POP
// end ;
76993: LD_VAR 0 5
76997: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76998: LD_INT 0
77000: PPUSH
77001: PPUSH
// if not driver or not IsInUnit ( driver ) then
77002: LD_VAR 0 1
77006: NOT
77007: PUSH
77008: LD_VAR 0 1
77012: PPUSH
77013: CALL_OW 310
77017: NOT
77018: OR
77019: IFFALSE 77023
// exit ;
77021: GO 77113
// vehicle := IsInUnit ( driver ) ;
77023: LD_ADDR_VAR 0 3
77027: PUSH
77028: LD_VAR 0 1
77032: PPUSH
77033: CALL_OW 310
77037: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77038: LD_VAR 0 1
77042: PPUSH
77043: LD_STRING \
77045: PUSH
77046: LD_INT 0
77048: PUSH
77049: LD_INT 0
77051: PUSH
77052: LD_INT 0
77054: PUSH
77055: LD_INT 0
77057: PUSH
77058: LD_INT 0
77060: PUSH
77061: LD_INT 0
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: PUSH
77073: LD_STRING E
77075: PUSH
77076: LD_INT 0
77078: PUSH
77079: LD_INT 0
77081: PUSH
77082: LD_VAR 0 3
77086: PUSH
77087: LD_INT 0
77089: PUSH
77090: LD_INT 0
77092: PUSH
77093: LD_INT 0
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PPUSH
77109: CALL_OW 446
// end ;
77113: LD_VAR 0 2
77117: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77118: LD_INT 0
77120: PPUSH
77121: PPUSH
// if not driver or not IsInUnit ( driver ) then
77122: LD_VAR 0 1
77126: NOT
77127: PUSH
77128: LD_VAR 0 1
77132: PPUSH
77133: CALL_OW 310
77137: NOT
77138: OR
77139: IFFALSE 77143
// exit ;
77141: GO 77233
// vehicle := IsInUnit ( driver ) ;
77143: LD_ADDR_VAR 0 3
77147: PUSH
77148: LD_VAR 0 1
77152: PPUSH
77153: CALL_OW 310
77157: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77158: LD_VAR 0 1
77162: PPUSH
77163: LD_STRING \
77165: PUSH
77166: LD_INT 0
77168: PUSH
77169: LD_INT 0
77171: PUSH
77172: LD_INT 0
77174: PUSH
77175: LD_INT 0
77177: PUSH
77178: LD_INT 0
77180: PUSH
77181: LD_INT 0
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: PUSH
77193: LD_STRING E
77195: PUSH
77196: LD_INT 0
77198: PUSH
77199: LD_INT 0
77201: PUSH
77202: LD_VAR 0 3
77206: PUSH
77207: LD_INT 0
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PPUSH
77229: CALL_OW 447
// end ;
77233: LD_VAR 0 2
77237: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77238: LD_INT 0
77240: PPUSH
77241: PPUSH
77242: PPUSH
// tmp := [ ] ;
77243: LD_ADDR_VAR 0 5
77247: PUSH
77248: EMPTY
77249: ST_TO_ADDR
// for i in units do
77250: LD_ADDR_VAR 0 4
77254: PUSH
77255: LD_VAR 0 1
77259: PUSH
77260: FOR_IN
77261: IFFALSE 77299
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77263: LD_ADDR_VAR 0 5
77267: PUSH
77268: LD_VAR 0 5
77272: PPUSH
77273: LD_VAR 0 5
77277: PUSH
77278: LD_INT 1
77280: PLUS
77281: PPUSH
77282: LD_VAR 0 4
77286: PPUSH
77287: CALL_OW 256
77291: PPUSH
77292: CALL_OW 2
77296: ST_TO_ADDR
77297: GO 77260
77299: POP
77300: POP
// if not tmp then
77301: LD_VAR 0 5
77305: NOT
77306: IFFALSE 77310
// exit ;
77308: GO 77358
// if asc then
77310: LD_VAR 0 2
77314: IFFALSE 77338
// result := SortListByListAsc ( units , tmp ) else
77316: LD_ADDR_VAR 0 3
77320: PUSH
77321: LD_VAR 0 1
77325: PPUSH
77326: LD_VAR 0 5
77330: PPUSH
77331: CALL_OW 76
77335: ST_TO_ADDR
77336: GO 77358
// result := SortListByListDesc ( units , tmp ) ;
77338: LD_ADDR_VAR 0 3
77342: PUSH
77343: LD_VAR 0 1
77347: PPUSH
77348: LD_VAR 0 5
77352: PPUSH
77353: CALL_OW 77
77357: ST_TO_ADDR
// end ;
77358: LD_VAR 0 3
77362: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77363: LD_INT 0
77365: PPUSH
77366: PPUSH
// task := GetTaskList ( mech ) ;
77367: LD_ADDR_VAR 0 4
77371: PUSH
77372: LD_VAR 0 1
77376: PPUSH
77377: CALL_OW 437
77381: ST_TO_ADDR
// if not task then
77382: LD_VAR 0 4
77386: NOT
77387: IFFALSE 77391
// exit ;
77389: GO 77433
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77391: LD_ADDR_VAR 0 3
77395: PUSH
77396: LD_VAR 0 4
77400: PUSH
77401: LD_INT 1
77403: ARRAY
77404: PUSH
77405: LD_INT 1
77407: ARRAY
77408: PUSH
77409: LD_STRING r
77411: EQUAL
77412: PUSH
77413: LD_VAR 0 4
77417: PUSH
77418: LD_INT 1
77420: ARRAY
77421: PUSH
77422: LD_INT 4
77424: ARRAY
77425: PUSH
77426: LD_VAR 0 2
77430: EQUAL
77431: AND
77432: ST_TO_ADDR
// end ;
77433: LD_VAR 0 3
77437: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77438: LD_INT 0
77440: PPUSH
// SetDir ( unit , d ) ;
77441: LD_VAR 0 1
77445: PPUSH
77446: LD_VAR 0 4
77450: PPUSH
77451: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77455: LD_VAR 0 1
77459: PPUSH
77460: LD_VAR 0 2
77464: PPUSH
77465: LD_VAR 0 3
77469: PPUSH
77470: LD_VAR 0 5
77474: PPUSH
77475: CALL_OW 48
// end ;
77479: LD_VAR 0 6
77483: RET
// export function ToNaturalNumber ( number ) ; begin
77484: LD_INT 0
77486: PPUSH
// result := number div 1 ;
77487: LD_ADDR_VAR 0 2
77491: PUSH
77492: LD_VAR 0 1
77496: PUSH
77497: LD_INT 1
77499: DIV
77500: ST_TO_ADDR
// if number < 0 then
77501: LD_VAR 0 1
77505: PUSH
77506: LD_INT 0
77508: LESS
77509: IFFALSE 77519
// result := 0 ;
77511: LD_ADDR_VAR 0 2
77515: PUSH
77516: LD_INT 0
77518: ST_TO_ADDR
// end ;
77519: LD_VAR 0 2
77523: RET
// export function SortByClass ( units , class ) ; var un ; begin
77524: LD_INT 0
77526: PPUSH
77527: PPUSH
// if not units or not class then
77528: LD_VAR 0 1
77532: NOT
77533: PUSH
77534: LD_VAR 0 2
77538: NOT
77539: OR
77540: IFFALSE 77544
// exit ;
77542: GO 77639
// result := [ ] ;
77544: LD_ADDR_VAR 0 3
77548: PUSH
77549: EMPTY
77550: ST_TO_ADDR
// for un in units do
77551: LD_ADDR_VAR 0 4
77555: PUSH
77556: LD_VAR 0 1
77560: PUSH
77561: FOR_IN
77562: IFFALSE 77637
// if GetClass ( un ) = class then
77564: LD_VAR 0 4
77568: PPUSH
77569: CALL_OW 257
77573: PUSH
77574: LD_VAR 0 2
77578: EQUAL
77579: IFFALSE 77606
// result := Insert ( result , 1 , un ) else
77581: LD_ADDR_VAR 0 3
77585: PUSH
77586: LD_VAR 0 3
77590: PPUSH
77591: LD_INT 1
77593: PPUSH
77594: LD_VAR 0 4
77598: PPUSH
77599: CALL_OW 2
77603: ST_TO_ADDR
77604: GO 77635
// result := Replace ( result , result + 1 , un ) ;
77606: LD_ADDR_VAR 0 3
77610: PUSH
77611: LD_VAR 0 3
77615: PPUSH
77616: LD_VAR 0 3
77620: PUSH
77621: LD_INT 1
77623: PLUS
77624: PPUSH
77625: LD_VAR 0 4
77629: PPUSH
77630: CALL_OW 1
77634: ST_TO_ADDR
77635: GO 77561
77637: POP
77638: POP
// end ;
77639: LD_VAR 0 3
77643: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77644: LD_INT 0
77646: PPUSH
77647: PPUSH
77648: PPUSH
77649: PPUSH
77650: PPUSH
77651: PPUSH
77652: PPUSH
// result := [ ] ;
77653: LD_ADDR_VAR 0 4
77657: PUSH
77658: EMPTY
77659: ST_TO_ADDR
// if x - r < 0 then
77660: LD_VAR 0 1
77664: PUSH
77665: LD_VAR 0 3
77669: MINUS
77670: PUSH
77671: LD_INT 0
77673: LESS
77674: IFFALSE 77686
// min_x := 0 else
77676: LD_ADDR_VAR 0 8
77680: PUSH
77681: LD_INT 0
77683: ST_TO_ADDR
77684: GO 77702
// min_x := x - r ;
77686: LD_ADDR_VAR 0 8
77690: PUSH
77691: LD_VAR 0 1
77695: PUSH
77696: LD_VAR 0 3
77700: MINUS
77701: ST_TO_ADDR
// if y - r < 0 then
77702: LD_VAR 0 2
77706: PUSH
77707: LD_VAR 0 3
77711: MINUS
77712: PUSH
77713: LD_INT 0
77715: LESS
77716: IFFALSE 77728
// min_y := 0 else
77718: LD_ADDR_VAR 0 7
77722: PUSH
77723: LD_INT 0
77725: ST_TO_ADDR
77726: GO 77744
// min_y := y - r ;
77728: LD_ADDR_VAR 0 7
77732: PUSH
77733: LD_VAR 0 2
77737: PUSH
77738: LD_VAR 0 3
77742: MINUS
77743: ST_TO_ADDR
// max_x := x + r ;
77744: LD_ADDR_VAR 0 9
77748: PUSH
77749: LD_VAR 0 1
77753: PUSH
77754: LD_VAR 0 3
77758: PLUS
77759: ST_TO_ADDR
// max_y := y + r ;
77760: LD_ADDR_VAR 0 10
77764: PUSH
77765: LD_VAR 0 2
77769: PUSH
77770: LD_VAR 0 3
77774: PLUS
77775: ST_TO_ADDR
// for _x = min_x to max_x do
77776: LD_ADDR_VAR 0 5
77780: PUSH
77781: DOUBLE
77782: LD_VAR 0 8
77786: DEC
77787: ST_TO_ADDR
77788: LD_VAR 0 9
77792: PUSH
77793: FOR_TO
77794: IFFALSE 77895
// for _y = min_y to max_y do
77796: LD_ADDR_VAR 0 6
77800: PUSH
77801: DOUBLE
77802: LD_VAR 0 7
77806: DEC
77807: ST_TO_ADDR
77808: LD_VAR 0 10
77812: PUSH
77813: FOR_TO
77814: IFFALSE 77891
// begin if not ValidHex ( _x , _y ) then
77816: LD_VAR 0 5
77820: PPUSH
77821: LD_VAR 0 6
77825: PPUSH
77826: CALL_OW 488
77830: NOT
77831: IFFALSE 77835
// continue ;
77833: GO 77813
// if GetResourceTypeXY ( _x , _y ) then
77835: LD_VAR 0 5
77839: PPUSH
77840: LD_VAR 0 6
77844: PPUSH
77845: CALL_OW 283
77849: IFFALSE 77889
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77851: LD_ADDR_VAR 0 4
77855: PUSH
77856: LD_VAR 0 4
77860: PPUSH
77861: LD_VAR 0 4
77865: PUSH
77866: LD_INT 1
77868: PLUS
77869: PPUSH
77870: LD_VAR 0 5
77874: PUSH
77875: LD_VAR 0 6
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: PPUSH
77884: CALL_OW 1
77888: ST_TO_ADDR
// end ;
77889: GO 77813
77891: POP
77892: POP
77893: GO 77793
77895: POP
77896: POP
// end ;
77897: LD_VAR 0 4
77901: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77902: LD_INT 0
77904: PPUSH
77905: PPUSH
77906: PPUSH
77907: PPUSH
77908: PPUSH
77909: PPUSH
77910: PPUSH
77911: PPUSH
// if not units then
77912: LD_VAR 0 1
77916: NOT
77917: IFFALSE 77921
// exit ;
77919: GO 78445
// result := UnitFilter ( units , [ f_ok ] ) ;
77921: LD_ADDR_VAR 0 3
77925: PUSH
77926: LD_VAR 0 1
77930: PPUSH
77931: LD_INT 50
77933: PUSH
77934: EMPTY
77935: LIST
77936: PPUSH
77937: CALL_OW 72
77941: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77942: LD_ADDR_VAR 0 8
77946: PUSH
77947: LD_VAR 0 1
77951: PUSH
77952: LD_INT 1
77954: ARRAY
77955: PPUSH
77956: CALL_OW 255
77960: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77961: LD_ADDR_VAR 0 10
77965: PUSH
77966: LD_INT 29
77968: PUSH
77969: LD_INT 91
77971: PUSH
77972: LD_INT 49
77974: PUSH
77975: EMPTY
77976: LIST
77977: LIST
77978: LIST
77979: ST_TO_ADDR
// if not result then
77980: LD_VAR 0 3
77984: NOT
77985: IFFALSE 77989
// exit ;
77987: GO 78445
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77989: LD_ADDR_VAR 0 5
77993: PUSH
77994: LD_INT 81
77996: PUSH
77997: LD_VAR 0 8
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PPUSH
78006: CALL_OW 69
78010: ST_TO_ADDR
// for i in result do
78011: LD_ADDR_VAR 0 4
78015: PUSH
78016: LD_VAR 0 3
78020: PUSH
78021: FOR_IN
78022: IFFALSE 78443
// begin tag := GetTag ( i ) + 1 ;
78024: LD_ADDR_VAR 0 9
78028: PUSH
78029: LD_VAR 0 4
78033: PPUSH
78034: CALL_OW 110
78038: PUSH
78039: LD_INT 1
78041: PLUS
78042: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78043: LD_ADDR_VAR 0 7
78047: PUSH
78048: LD_VAR 0 4
78052: PPUSH
78053: CALL_OW 250
78057: PPUSH
78058: LD_VAR 0 4
78062: PPUSH
78063: CALL_OW 251
78067: PPUSH
78068: LD_INT 6
78070: PPUSH
78071: CALL 77644 0 3
78075: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78076: LD_VAR 0 4
78080: PPUSH
78081: CALL_OW 247
78085: PUSH
78086: LD_INT 2
78088: EQUAL
78089: PUSH
78090: LD_VAR 0 7
78094: AND
78095: PUSH
78096: LD_VAR 0 4
78100: PPUSH
78101: CALL_OW 264
78105: PUSH
78106: LD_VAR 0 10
78110: IN
78111: NOT
78112: AND
78113: IFFALSE 78152
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78115: LD_VAR 0 4
78119: PPUSH
78120: LD_VAR 0 7
78124: PUSH
78125: LD_INT 1
78127: ARRAY
78128: PUSH
78129: LD_INT 1
78131: ARRAY
78132: PPUSH
78133: LD_VAR 0 7
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: PUSH
78142: LD_INT 2
78144: ARRAY
78145: PPUSH
78146: CALL_OW 116
78150: GO 78441
// if path > tag then
78152: LD_VAR 0 2
78156: PUSH
78157: LD_VAR 0 9
78161: GREATER
78162: IFFALSE 78370
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78164: LD_ADDR_VAR 0 6
78168: PUSH
78169: LD_VAR 0 5
78173: PPUSH
78174: LD_INT 91
78176: PUSH
78177: LD_VAR 0 4
78181: PUSH
78182: LD_INT 8
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: LIST
78189: PPUSH
78190: CALL_OW 72
78194: ST_TO_ADDR
// if nearEnemy then
78195: LD_VAR 0 6
78199: IFFALSE 78268
// begin if GetWeapon ( i ) = ru_time_lapser then
78201: LD_VAR 0 4
78205: PPUSH
78206: CALL_OW 264
78210: PUSH
78211: LD_INT 49
78213: EQUAL
78214: IFFALSE 78242
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78216: LD_VAR 0 4
78220: PPUSH
78221: LD_VAR 0 6
78225: PPUSH
78226: LD_VAR 0 4
78230: PPUSH
78231: CALL_OW 74
78235: PPUSH
78236: CALL_OW 112
78240: GO 78266
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78242: LD_VAR 0 4
78246: PPUSH
78247: LD_VAR 0 6
78251: PPUSH
78252: LD_VAR 0 4
78256: PPUSH
78257: CALL_OW 74
78261: PPUSH
78262: CALL_OW 115
// end else
78266: GO 78368
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78268: LD_VAR 0 4
78272: PPUSH
78273: LD_VAR 0 2
78277: PUSH
78278: LD_VAR 0 9
78282: ARRAY
78283: PUSH
78284: LD_INT 1
78286: ARRAY
78287: PPUSH
78288: LD_VAR 0 2
78292: PUSH
78293: LD_VAR 0 9
78297: ARRAY
78298: PUSH
78299: LD_INT 2
78301: ARRAY
78302: PPUSH
78303: CALL_OW 297
78307: PUSH
78308: LD_INT 6
78310: GREATER
78311: IFFALSE 78354
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78313: LD_VAR 0 4
78317: PPUSH
78318: LD_VAR 0 2
78322: PUSH
78323: LD_VAR 0 9
78327: ARRAY
78328: PUSH
78329: LD_INT 1
78331: ARRAY
78332: PPUSH
78333: LD_VAR 0 2
78337: PUSH
78338: LD_VAR 0 9
78342: ARRAY
78343: PUSH
78344: LD_INT 2
78346: ARRAY
78347: PPUSH
78348: CALL_OW 114
78352: GO 78368
// SetTag ( i , tag ) ;
78354: LD_VAR 0 4
78358: PPUSH
78359: LD_VAR 0 9
78363: PPUSH
78364: CALL_OW 109
// end else
78368: GO 78441
// if enemy then
78370: LD_VAR 0 5
78374: IFFALSE 78441
// begin if GetWeapon ( i ) = ru_time_lapser then
78376: LD_VAR 0 4
78380: PPUSH
78381: CALL_OW 264
78385: PUSH
78386: LD_INT 49
78388: EQUAL
78389: IFFALSE 78417
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78391: LD_VAR 0 4
78395: PPUSH
78396: LD_VAR 0 5
78400: PPUSH
78401: LD_VAR 0 4
78405: PPUSH
78406: CALL_OW 74
78410: PPUSH
78411: CALL_OW 112
78415: GO 78441
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78417: LD_VAR 0 4
78421: PPUSH
78422: LD_VAR 0 5
78426: PPUSH
78427: LD_VAR 0 4
78431: PPUSH
78432: CALL_OW 74
78436: PPUSH
78437: CALL_OW 115
// end ; end ;
78441: GO 78021
78443: POP
78444: POP
// end ;
78445: LD_VAR 0 3
78449: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78450: LD_INT 0
78452: PPUSH
78453: PPUSH
78454: PPUSH
// if not unit or IsInUnit ( unit ) then
78455: LD_VAR 0 1
78459: NOT
78460: PUSH
78461: LD_VAR 0 1
78465: PPUSH
78466: CALL_OW 310
78470: OR
78471: IFFALSE 78475
// exit ;
78473: GO 78566
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78475: LD_ADDR_VAR 0 4
78479: PUSH
78480: LD_VAR 0 1
78484: PPUSH
78485: CALL_OW 250
78489: PPUSH
78490: LD_VAR 0 2
78494: PPUSH
78495: LD_INT 1
78497: PPUSH
78498: CALL_OW 272
78502: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78503: LD_ADDR_VAR 0 5
78507: PUSH
78508: LD_VAR 0 1
78512: PPUSH
78513: CALL_OW 251
78517: PPUSH
78518: LD_VAR 0 2
78522: PPUSH
78523: LD_INT 1
78525: PPUSH
78526: CALL_OW 273
78530: ST_TO_ADDR
// if ValidHex ( x , y ) then
78531: LD_VAR 0 4
78535: PPUSH
78536: LD_VAR 0 5
78540: PPUSH
78541: CALL_OW 488
78545: IFFALSE 78566
// ComTurnXY ( unit , x , y ) ;
78547: LD_VAR 0 1
78551: PPUSH
78552: LD_VAR 0 4
78556: PPUSH
78557: LD_VAR 0 5
78561: PPUSH
78562: CALL_OW 118
// end ;
78566: LD_VAR 0 3
78570: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78571: LD_INT 0
78573: PPUSH
78574: PPUSH
// result := false ;
78575: LD_ADDR_VAR 0 3
78579: PUSH
78580: LD_INT 0
78582: ST_TO_ADDR
// if not units then
78583: LD_VAR 0 2
78587: NOT
78588: IFFALSE 78592
// exit ;
78590: GO 78637
// for i in units do
78592: LD_ADDR_VAR 0 4
78596: PUSH
78597: LD_VAR 0 2
78601: PUSH
78602: FOR_IN
78603: IFFALSE 78635
// if See ( side , i ) then
78605: LD_VAR 0 1
78609: PPUSH
78610: LD_VAR 0 4
78614: PPUSH
78615: CALL_OW 292
78619: IFFALSE 78633
// begin result := true ;
78621: LD_ADDR_VAR 0 3
78625: PUSH
78626: LD_INT 1
78628: ST_TO_ADDR
// exit ;
78629: POP
78630: POP
78631: GO 78637
// end ;
78633: GO 78602
78635: POP
78636: POP
// end ;
78637: LD_VAR 0 3
78641: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78642: LD_INT 0
78644: PPUSH
78645: PPUSH
78646: PPUSH
78647: PPUSH
// if not unit or not points then
78648: LD_VAR 0 1
78652: NOT
78653: PUSH
78654: LD_VAR 0 2
78658: NOT
78659: OR
78660: IFFALSE 78664
// exit ;
78662: GO 78754
// dist := 99999 ;
78664: LD_ADDR_VAR 0 5
78668: PUSH
78669: LD_INT 99999
78671: ST_TO_ADDR
// for i in points do
78672: LD_ADDR_VAR 0 4
78676: PUSH
78677: LD_VAR 0 2
78681: PUSH
78682: FOR_IN
78683: IFFALSE 78752
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78685: LD_ADDR_VAR 0 6
78689: PUSH
78690: LD_VAR 0 1
78694: PPUSH
78695: LD_VAR 0 4
78699: PUSH
78700: LD_INT 1
78702: ARRAY
78703: PPUSH
78704: LD_VAR 0 4
78708: PUSH
78709: LD_INT 2
78711: ARRAY
78712: PPUSH
78713: CALL_OW 297
78717: ST_TO_ADDR
// if tmpDist < dist then
78718: LD_VAR 0 6
78722: PUSH
78723: LD_VAR 0 5
78727: LESS
78728: IFFALSE 78750
// begin result := i ;
78730: LD_ADDR_VAR 0 3
78734: PUSH
78735: LD_VAR 0 4
78739: ST_TO_ADDR
// dist := tmpDist ;
78740: LD_ADDR_VAR 0 5
78744: PUSH
78745: LD_VAR 0 6
78749: ST_TO_ADDR
// end ; end ;
78750: GO 78682
78752: POP
78753: POP
// end ;
78754: LD_VAR 0 3
78758: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78759: LD_INT 0
78761: PPUSH
// uc_side := side ;
78762: LD_ADDR_OWVAR 20
78766: PUSH
78767: LD_VAR 0 1
78771: ST_TO_ADDR
// uc_nation := 3 ;
78772: LD_ADDR_OWVAR 21
78776: PUSH
78777: LD_INT 3
78779: ST_TO_ADDR
// vc_chassis := 25 ;
78780: LD_ADDR_OWVAR 37
78784: PUSH
78785: LD_INT 25
78787: ST_TO_ADDR
// vc_engine := engine_siberite ;
78788: LD_ADDR_OWVAR 39
78792: PUSH
78793: LD_INT 3
78795: ST_TO_ADDR
// vc_control := control_computer ;
78796: LD_ADDR_OWVAR 38
78800: PUSH
78801: LD_INT 3
78803: ST_TO_ADDR
// vc_weapon := 59 ;
78804: LD_ADDR_OWVAR 40
78808: PUSH
78809: LD_INT 59
78811: ST_TO_ADDR
// result := CreateVehicle ;
78812: LD_ADDR_VAR 0 5
78816: PUSH
78817: CALL_OW 45
78821: ST_TO_ADDR
// SetDir ( result , d ) ;
78822: LD_VAR 0 5
78826: PPUSH
78827: LD_VAR 0 4
78831: PPUSH
78832: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78836: LD_VAR 0 5
78840: PPUSH
78841: LD_VAR 0 2
78845: PPUSH
78846: LD_VAR 0 3
78850: PPUSH
78851: LD_INT 0
78853: PPUSH
78854: CALL_OW 48
// end ;
78858: LD_VAR 0 5
78862: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78863: LD_INT 0
78865: PPUSH
78866: PPUSH
78867: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78868: LD_ADDR_VAR 0 2
78872: PUSH
78873: LD_INT 0
78875: PUSH
78876: LD_INT 0
78878: PUSH
78879: LD_INT 0
78881: PUSH
78882: LD_INT 0
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: LIST
78889: LIST
78890: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78891: LD_VAR 0 1
78895: NOT
78896: PUSH
78897: LD_VAR 0 1
78901: PPUSH
78902: CALL_OW 264
78906: PUSH
78907: LD_INT 12
78909: PUSH
78910: LD_INT 51
78912: PUSH
78913: LD_INT 32
78915: PUSH
78916: LD_INT 89
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: LIST
78923: LIST
78924: IN
78925: NOT
78926: OR
78927: IFFALSE 78931
// exit ;
78929: GO 79029
// for i := 1 to 3 do
78931: LD_ADDR_VAR 0 3
78935: PUSH
78936: DOUBLE
78937: LD_INT 1
78939: DEC
78940: ST_TO_ADDR
78941: LD_INT 3
78943: PUSH
78944: FOR_TO
78945: IFFALSE 79027
// begin tmp := GetCargo ( cargo , i ) ;
78947: LD_ADDR_VAR 0 4
78951: PUSH
78952: LD_VAR 0 1
78956: PPUSH
78957: LD_VAR 0 3
78961: PPUSH
78962: CALL_OW 289
78966: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78967: LD_ADDR_VAR 0 2
78971: PUSH
78972: LD_VAR 0 2
78976: PPUSH
78977: LD_VAR 0 3
78981: PPUSH
78982: LD_VAR 0 4
78986: PPUSH
78987: CALL_OW 1
78991: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78992: LD_ADDR_VAR 0 2
78996: PUSH
78997: LD_VAR 0 2
79001: PPUSH
79002: LD_INT 4
79004: PPUSH
79005: LD_VAR 0 2
79009: PUSH
79010: LD_INT 4
79012: ARRAY
79013: PUSH
79014: LD_VAR 0 4
79018: PLUS
79019: PPUSH
79020: CALL_OW 1
79024: ST_TO_ADDR
// end ;
79025: GO 78944
79027: POP
79028: POP
// end ;
79029: LD_VAR 0 2
79033: RET
// export function Length ( array ) ; begin
79034: LD_INT 0
79036: PPUSH
// result := array + 0 ;
79037: LD_ADDR_VAR 0 2
79041: PUSH
79042: LD_VAR 0 1
79046: PUSH
79047: LD_INT 0
79049: PLUS
79050: ST_TO_ADDR
// end ;
79051: LD_VAR 0 2
79055: RET
// export function PrepareArray ( array ) ; begin
79056: LD_INT 0
79058: PPUSH
// result := array diff 0 ;
79059: LD_ADDR_VAR 0 2
79063: PUSH
79064: LD_VAR 0 1
79068: PUSH
79069: LD_INT 0
79071: DIFF
79072: ST_TO_ADDR
// if not result [ 1 ] then
79073: LD_VAR 0 2
79077: PUSH
79078: LD_INT 1
79080: ARRAY
79081: NOT
79082: IFFALSE 79102
// result := Delete ( result , 1 ) ;
79084: LD_ADDR_VAR 0 2
79088: PUSH
79089: LD_VAR 0 2
79093: PPUSH
79094: LD_INT 1
79096: PPUSH
79097: CALL_OW 3
79101: ST_TO_ADDR
// end ;
79102: LD_VAR 0 2
79106: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79107: LD_INT 0
79109: PPUSH
79110: PPUSH
79111: PPUSH
79112: PPUSH
// sibRocketRange := 25 ;
79113: LD_ADDR_VAR 0 6
79117: PUSH
79118: LD_INT 25
79120: ST_TO_ADDR
// result := false ;
79121: LD_ADDR_VAR 0 4
79125: PUSH
79126: LD_INT 0
79128: ST_TO_ADDR
// for i := 0 to 5 do
79129: LD_ADDR_VAR 0 5
79133: PUSH
79134: DOUBLE
79135: LD_INT 0
79137: DEC
79138: ST_TO_ADDR
79139: LD_INT 5
79141: PUSH
79142: FOR_TO
79143: IFFALSE 79210
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79145: LD_VAR 0 1
79149: PPUSH
79150: LD_VAR 0 5
79154: PPUSH
79155: LD_VAR 0 6
79159: PPUSH
79160: CALL_OW 272
79164: PPUSH
79165: LD_VAR 0 2
79169: PPUSH
79170: LD_VAR 0 5
79174: PPUSH
79175: LD_VAR 0 6
79179: PPUSH
79180: CALL_OW 273
79184: PPUSH
79185: LD_VAR 0 3
79189: PPUSH
79190: CALL_OW 309
79194: IFFALSE 79208
// begin result := true ;
79196: LD_ADDR_VAR 0 4
79200: PUSH
79201: LD_INT 1
79203: ST_TO_ADDR
// exit ;
79204: POP
79205: POP
79206: GO 79212
// end ;
79208: GO 79142
79210: POP
79211: POP
// end ;
79212: LD_VAR 0 4
79216: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79217: LD_INT 0
79219: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79220: LD_VAR 0 1
79224: PPUSH
79225: LD_VAR 0 2
79229: PPUSH
79230: LD_INT 0
79232: PPUSH
79233: LD_INT 0
79235: PPUSH
79236: LD_INT 1
79238: PPUSH
79239: LD_INT 0
79241: PPUSH
79242: CALL_OW 587
// end ; end_of_file
79246: LD_VAR 0 3
79250: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79251: LD_VAR 0 1
79255: PPUSH
79256: LD_VAR 0 2
79260: PPUSH
79261: LD_VAR 0 3
79265: PPUSH
79266: LD_VAR 0 4
79270: PPUSH
79271: LD_VAR 0 5
79275: PPUSH
79276: LD_VAR 0 6
79280: PPUSH
79281: CALL 17707 0 6
// end ;
79285: PPOPN 6
79287: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79288: LD_INT 0
79290: PPUSH
// begin if not units then
79291: LD_VAR 0 1
79295: NOT
79296: IFFALSE 79300
// exit ;
79298: GO 79300
// end ;
79300: PPOPN 7
79302: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79303: CALL 17601 0 0
// end ;
79307: PPOPN 1
79309: END
