// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// PrepareNature ;
   8: CALL 1860 0 0
// PrepareArabian ;
  12: CALL 2230 0 0
// PrepareAmerican ;
  16: CALL 7225 0 0
// PrepareRussian ;
  20: CALL 3186 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8785 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 366: LD_INT 0
 368: PPUSH
 369: PPUSH
// if exist_mode then
 370: LD_VAR 0 2
 374: IFFALSE 399
// unit := CreateCharacter ( prefix & ident ) else
 376: LD_ADDR_VAR 0 5
 380: PUSH
 381: LD_VAR 0 3
 385: PUSH
 386: LD_VAR 0 1
 390: STR
 391: PPUSH
 392: CALL_OW 34
 396: ST_TO_ADDR
 397: GO 414
// unit := NewCharacter ( ident ) ;
 399: LD_ADDR_VAR 0 5
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 25
 413: ST_TO_ADDR
// result := unit ;
 414: LD_ADDR_VAR 0 4
 418: PUSH
 419: LD_VAR 0 5
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 4
 428: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 429: LD_INT 0
 431: PPUSH
// uc_side := side ;
 432: LD_ADDR_OWVAR 20
 436: PUSH
 437: LD_VAR 0 1
 441: ST_TO_ADDR
// uc_nation := nation ;
 442: LD_ADDR_OWVAR 21
 446: PUSH
 447: LD_VAR 0 2
 451: ST_TO_ADDR
// vc_chassis := chassis ;
 452: LD_ADDR_OWVAR 37
 456: PUSH
 457: LD_VAR 0 3
 461: ST_TO_ADDR
// vc_engine := engine ;
 462: LD_ADDR_OWVAR 39
 466: PUSH
 467: LD_VAR 0 4
 471: ST_TO_ADDR
// vc_control := control ;
 472: LD_ADDR_OWVAR 38
 476: PUSH
 477: LD_VAR 0 5
 481: ST_TO_ADDR
// vc_weapon := weapon ;
 482: LD_ADDR_OWVAR 40
 486: PUSH
 487: LD_VAR 0 6
 491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 492: LD_ADDR_OWVAR 41
 496: PUSH
 497: LD_VAR 0 7
 501: ST_TO_ADDR
// result := CreateVehicle ;
 502: LD_ADDR_VAR 0 8
 506: PUSH
 507: CALL_OW 45
 511: ST_TO_ADDR
// end ;
 512: LD_VAR 0 8
 516: RET
// export function SayX ( units , ident ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// result := false ;
 521: LD_ADDR_VAR 0 3
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// if not units then
 529: LD_VAR 0 1
 533: NOT
 534: IFFALSE 538
// exit ;
 536: GO 592
// for i in units do
 538: LD_ADDR_VAR 0 4
 542: PUSH
 543: LD_VAR 0 1
 547: PUSH
 548: FOR_IN
 549: IFFALSE 590
// if IsOk ( i ) then
 551: LD_VAR 0 4
 555: PPUSH
 556: CALL_OW 302
 560: IFFALSE 588
// begin Say ( i , ident ) ;
 562: LD_VAR 0 4
 566: PPUSH
 567: LD_VAR 0 2
 571: PPUSH
 572: CALL_OW 88
// result := i ;
 576: LD_ADDR_VAR 0 3
 580: PUSH
 581: LD_VAR 0 4
 585: ST_TO_ADDR
// break ;
 586: GO 590
// end ;
 588: GO 548
 590: POP
 591: POP
// end ;
 592: LD_VAR 0 3
 596: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if not observer or not unit then
 602: LD_VAR 0 1
 606: NOT
 607: PUSH
 608: LD_VAR 0 2
 612: NOT
 613: OR
 614: IFFALSE 618
// exit ;
 616: GO 666
// if not See ( GetSide ( observer ) , unit ) then
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 255
 627: PPUSH
 628: LD_VAR 0 2
 632: PPUSH
 633: CALL_OW 292
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 666
// result := GetDistUnits ( observer , unit ) < 12 ;
 642: LD_ADDR_VAR 0 3
 646: PUSH
 647: LD_VAR 0 1
 651: PPUSH
 652: LD_VAR 0 2
 656: PPUSH
 657: CALL_OW 296
 661: PUSH
 662: LD_INT 12
 664: LESS
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 3
 670: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 671: LD_INT 0
 673: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 674: LD_VAR 0 2
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: LD_VAR 0 2
 687: PUSH
 688: LD_INT 2
 690: ARRAY
 691: PPUSH
 692: CALL_OW 488
 696: PUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 1
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 2
 713: ARRAY
 714: PPUSH
 715: CALL_OW 428
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: IFFALSE 758
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 726: LD_VAR 0 1
 730: PPUSH
 731: LD_VAR 0 2
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 2
 747: ARRAY
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 48
// end ;
 758: LD_VAR 0 4
 762: RET
// export function Video ( mode ) ; begin
 763: LD_INT 0
 765: PPUSH
// ingame_video = mode ;
 766: LD_ADDR_OWVAR 52
 770: PUSH
 771: LD_VAR 0 1
 775: ST_TO_ADDR
// interface_hidden = mode ;
 776: LD_ADDR_OWVAR 54
 780: PUSH
 781: LD_VAR 0 1
 785: ST_TO_ADDR
// end ;
 786: LD_VAR 0 2
 790: RET
// export function ReverseArray ( array ) ; var i ; begin
 791: LD_INT 0
 793: PPUSH
 794: PPUSH
// if not array then
 795: LD_VAR 0 1
 799: NOT
 800: IFFALSE 804
// exit ;
 802: GO 862
// result := [ ] ;
 804: LD_ADDR_VAR 0 2
 808: PUSH
 809: EMPTY
 810: ST_TO_ADDR
// for i := 1 to array do
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 1
 825: PUSH
 826: FOR_TO
 827: IFFALSE 860
// result := Insert ( result , 1 , array [ i ] ) ;
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: LD_VAR 0 2
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: LD_VAR 0 1
 846: PUSH
 847: LD_VAR 0 3
 851: ARRAY
 852: PPUSH
 853: CALL_OW 2
 857: ST_TO_ADDR
 858: GO 826
 860: POP
 861: POP
// end ;
 862: LD_VAR 0 2
 866: RET
// export function ComExit ( unit ) ; begin
 867: LD_INT 0
 869: PPUSH
// result := IsInUnit ( unit ) ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 310
 884: ST_TO_ADDR
// if not result then
 885: LD_VAR 0 2
 889: NOT
 890: IFFALSE 894
// exit ;
 892: GO 929
// if GetType ( result ) = unit_vehicle then
 894: LD_VAR 0 2
 898: PPUSH
 899: CALL_OW 247
 903: PUSH
 904: LD_INT 2
 906: EQUAL
 907: IFFALSE 920
// ComExitVehicle ( unit ) else
 909: LD_VAR 0 1
 913: PPUSH
 914: CALL_OW 121
 918: GO 929
// ComExitBuilding ( unit ) ;
 920: LD_VAR 0 1
 924: PPUSH
 925: CALL_OW 122
// end ;
 929: LD_VAR 0 2
 933: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 934: LD_INT 0
 936: PPUSH
 937: PPUSH
// if not side or not nation then
 938: LD_VAR 0 1
 942: NOT
 943: PUSH
 944: LD_VAR 0 2
 948: NOT
 949: OR
 950: IFFALSE 954
// exit ;
 952: GO 1718
// case nation of nation_american :
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: DOUBLE
 962: EQUAL
 963: IFTRUE 967
 965: GO 1181
 967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 35
 975: PUSH
 976: LD_INT 45
 978: PUSH
 979: LD_INT 46
 981: PUSH
 982: LD_INT 47
 984: PUSH
 985: LD_INT 82
 987: PUSH
 988: LD_INT 83
 990: PUSH
 991: LD_INT 84
 993: PUSH
 994: LD_INT 85
 996: PUSH
 997: LD_INT 86
 999: PUSH
1000: LD_INT 1
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: LD_INT 6
1008: PUSH
1009: LD_INT 15
1011: PUSH
1012: LD_INT 16
1014: PUSH
1015: LD_INT 7
1017: PUSH
1018: LD_INT 12
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 10
1026: PUSH
1027: LD_INT 14
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: LD_INT 21
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 25
1041: PUSH
1042: LD_INT 32
1044: PUSH
1045: LD_INT 27
1047: PUSH
1048: LD_INT 36
1050: PUSH
1051: LD_INT 69
1053: PUSH
1054: LD_INT 39
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 40
1062: PUSH
1063: LD_INT 48
1065: PUSH
1066: LD_INT 49
1068: PUSH
1069: LD_INT 50
1071: PUSH
1072: LD_INT 51
1074: PUSH
1075: LD_INT 52
1077: PUSH
1078: LD_INT 53
1080: PUSH
1081: LD_INT 54
1083: PUSH
1084: LD_INT 55
1086: PUSH
1087: LD_INT 56
1089: PUSH
1090: LD_INT 57
1092: PUSH
1093: LD_INT 58
1095: PUSH
1096: LD_INT 59
1098: PUSH
1099: LD_INT 60
1101: PUSH
1102: LD_INT 61
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: LD_INT 80
1110: PUSH
1111: LD_INT 82
1113: PUSH
1114: LD_INT 83
1116: PUSH
1117: LD_INT 84
1119: PUSH
1120: LD_INT 85
1122: PUSH
1123: LD_INT 86
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: ST_TO_ADDR
1179: GO 1642
1181: LD_INT 2
1183: DOUBLE
1184: EQUAL
1185: IFTRUE 1189
1187: GO 1411
1189: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1190: LD_ADDR_VAR 0 4
1194: PUSH
1195: LD_INT 35
1197: PUSH
1198: LD_INT 45
1200: PUSH
1201: LD_INT 46
1203: PUSH
1204: LD_INT 47
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 83
1212: PUSH
1213: LD_INT 84
1215: PUSH
1216: LD_INT 85
1218: PUSH
1219: LD_INT 87
1221: PUSH
1222: LD_INT 70
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 11
1230: PUSH
1231: LD_INT 3
1233: PUSH
1234: LD_INT 4
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: LD_INT 6
1242: PUSH
1243: LD_INT 15
1245: PUSH
1246: LD_INT 18
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 17
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 72
1269: PUSH
1270: LD_INT 26
1272: PUSH
1273: LD_INT 69
1275: PUSH
1276: LD_INT 39
1278: PUSH
1279: LD_INT 40
1281: PUSH
1282: LD_INT 41
1284: PUSH
1285: LD_INT 42
1287: PUSH
1288: LD_INT 43
1290: PUSH
1291: LD_INT 48
1293: PUSH
1294: LD_INT 49
1296: PUSH
1297: LD_INT 50
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: LD_INT 52
1305: PUSH
1306: LD_INT 53
1308: PUSH
1309: LD_INT 54
1311: PUSH
1312: LD_INT 55
1314: PUSH
1315: LD_INT 56
1317: PUSH
1318: LD_INT 60
1320: PUSH
1321: LD_INT 61
1323: PUSH
1324: LD_INT 62
1326: PUSH
1327: LD_INT 66
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: LD_INT 68
1335: PUSH
1336: LD_INT 81
1338: PUSH
1339: LD_INT 82
1341: PUSH
1342: LD_INT 83
1344: PUSH
1345: LD_INT 84
1347: PUSH
1348: LD_INT 85
1350: PUSH
1351: LD_INT 87
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
1409: GO 1642
1411: LD_INT 3
1413: DOUBLE
1414: EQUAL
1415: IFTRUE 1419
1417: GO 1641
1419: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 46
1427: PUSH
1428: LD_INT 47
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 82
1439: PUSH
1440: LD_INT 83
1442: PUSH
1443: LD_INT 84
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 86
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 20
1460: PUSH
1461: LD_INT 19
1463: PUSH
1464: LD_INT 21
1466: PUSH
1467: LD_INT 24
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 25
1475: PUSH
1476: LD_INT 28
1478: PUSH
1479: LD_INT 29
1481: PUSH
1482: LD_INT 30
1484: PUSH
1485: LD_INT 31
1487: PUSH
1488: LD_INT 37
1490: PUSH
1491: LD_INT 38
1493: PUSH
1494: LD_INT 32
1496: PUSH
1497: LD_INT 27
1499: PUSH
1500: LD_INT 33
1502: PUSH
1503: LD_INT 69
1505: PUSH
1506: LD_INT 39
1508: PUSH
1509: LD_INT 34
1511: PUSH
1512: LD_INT 40
1514: PUSH
1515: LD_INT 71
1517: PUSH
1518: LD_INT 23
1520: PUSH
1521: LD_INT 44
1523: PUSH
1524: LD_INT 48
1526: PUSH
1527: LD_INT 49
1529: PUSH
1530: LD_INT 50
1532: PUSH
1533: LD_INT 51
1535: PUSH
1536: LD_INT 52
1538: PUSH
1539: LD_INT 53
1541: PUSH
1542: LD_INT 54
1544: PUSH
1545: LD_INT 55
1547: PUSH
1548: LD_INT 56
1550: PUSH
1551: LD_INT 57
1553: PUSH
1554: LD_INT 58
1556: PUSH
1557: LD_INT 59
1559: PUSH
1560: LD_INT 63
1562: PUSH
1563: LD_INT 64
1565: PUSH
1566: LD_INT 65
1568: PUSH
1569: LD_INT 82
1571: PUSH
1572: LD_INT 83
1574: PUSH
1575: LD_INT 84
1577: PUSH
1578: LD_INT 85
1580: PUSH
1581: LD_INT 86
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
1639: GO 1642
1641: POP
// if state > - 1 and state < 3 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: GREATER
1651: PUSH
1652: LD_VAR 0 3
1656: PUSH
1657: LD_INT 3
1659: LESS
1660: AND
1661: IFFALSE 1718
// for i in result do
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 4
1672: PUSH
1673: FOR_IN
1674: IFFALSE 1716
// if GetTech ( i , side ) <> state then
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL_OW 321
1690: PUSH
1691: LD_VAR 0 3
1695: NONEQUAL
1696: IFFALSE 1714
// result := result diff i ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 4
1707: PUSH
1708: LD_VAR 0 5
1712: DIFF
1713: ST_TO_ADDR
1714: GO 1673
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 4
1722: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
// InitUc ;
1727: CALL_OW 18
// InitHc ;
1731: CALL_OW 19
// uc_side := 0 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// uc_nation := 0 ;
1743: LD_ADDR_OWVAR 21
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// for i = 1 to amount do
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 2
1765: PUSH
1766: FOR_TO
1767: IFFALSE 1849
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1769: LD_ADDR_OWVAR 29
1773: PUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 12
1779: PPUSH
1780: CALL_OW 12
1784: PUSH
1785: LD_INT 9
1787: PPUSH
1788: LD_INT 12
1790: PPUSH
1791: CALL_OW 12
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1800: LD_ADDR_OWVAR 35
1804: PUSH
1805: LD_INT 1
1807: NEG
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 12
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1830: CALL_OW 44
1834: PPUSH
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 49
// end ;
1847: GO 1766
1849: POP
1850: POP
// InitHc ;
1851: CALL_OW 19
// end ;
1855: LD_VAR 0 3
1859: RET
// export function PrepareNature ; var i ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1864: LD_INT 18
1866: PPUSH
1867: LD_INT 5
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_OWVAR 67
1885: ARRAY
1886: PPUSH
1887: CALL 1723 0 2
// for i := 1 to 3 do
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1940
// begin hc_class := 21 ;
1907: LD_ADDR_OWVAR 28
1911: PUSH
1912: LD_INT 21
1914: ST_TO_ADDR
// hc_gallery :=  ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING 
1922: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1923: CALL_OW 44
1927: PPUSH
1928: LD_INT 18
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// end ;
1938: GO 1904
1940: POP
1941: POP
// for i := 1 to 2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_INT 2
1954: PUSH
1955: FOR_TO
1956: IFFALSE 1991
// begin hc_class := 18 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 18
1965: ST_TO_ADDR
// hc_gallery :=  ;
1966: LD_ADDR_OWVAR 33
1970: PUSH
1971: LD_STRING 
1973: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1974: CALL_OW 44
1978: PPUSH
1979: LD_INT 18
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// end ;
1989: GO 1955
1991: POP
1992: POP
// for i := 1 to 2 do
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: DOUBLE
1999: LD_INT 1
2001: DEC
2002: ST_TO_ADDR
2003: LD_INT 2
2005: PUSH
2006: FOR_TO
2007: IFFALSE 2042
// begin hc_class := 13 ;
2009: LD_ADDR_OWVAR 28
2013: PUSH
2014: LD_INT 13
2016: ST_TO_ADDR
// hc_gallery :=  ;
2017: LD_ADDR_OWVAR 33
2021: PUSH
2022: LD_STRING 
2024: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
2025: CALL_OW 44
2029: PPUSH
2030: LD_INT 18
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// end ;
2040: GO 2006
2042: POP
2043: POP
// end ;
2044: LD_VAR 0 1
2048: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
2055: PPUSH
// result := false ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// if not sideList or not enemySide then
2064: LD_VAR 0 1
2068: NOT
2069: PUSH
2070: LD_VAR 0 2
2074: NOT
2075: OR
2076: IFFALSE 2080
// exit ;
2078: GO 2225
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 22
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PPUSH
2097: CALL_OW 69
2101: ST_TO_ADDR
// if not tmp then
2102: LD_VAR 0 7
2106: NOT
2107: IFFALSE 2111
// exit ;
2109: GO 2225
// for s in sideList do
2111: LD_ADDR_VAR 0 6
2115: PUSH
2116: LD_VAR 0 1
2120: PUSH
2121: FOR_IN
2122: IFFALSE 2223
// for i in tmp do
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_VAR 0 7
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2219
// if See ( s , i ) then
2137: LD_VAR 0 6
2141: PPUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: CALL_OW 292
2151: IFFALSE 2217
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2153: LD_ADDR_VAR 0 8
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_VAR 0 6
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PPUSH
2170: CALL_OW 69
2174: PPUSH
2175: LD_VAR 0 5
2179: PPUSH
2180: CALL_OW 74
2184: ST_TO_ADDR
// if tmp2 in exceptUnits then
2185: LD_VAR 0 8
2189: PUSH
2190: LD_VAR 0 3
2194: IN
2195: IFFALSE 2201
// continue else
2197: GO 2134
2199: GO 2217
// begin result := tmp2 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 8
2210: ST_TO_ADDR
// exit ;
2211: POP
2212: POP
2213: POP
2214: POP
2215: GO 2225
// end ; end ;
2217: GO 2134
2219: POP
2220: POP
2221: GO 2121
2223: POP
2224: POP
// end ; end_of_file
2225: LD_VAR 0 4
2229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
// uc_side := 5 ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_INT 5
2241: ST_TO_ADDR
// uc_nation := 2 ;
2242: LD_ADDR_OWVAR 21
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2250: LD_ADDR_EXP 36
2254: PUSH
2255: LD_STRING Abdul
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: LD_STRING 
2263: PPUSH
2264: CALL 366 0 3
2268: ST_TO_ADDR
// uc_side := 2 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 2
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2285: LD_ADDR_EXP 25
2289: PUSH
2290: LD_STRING Heike
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_EXP 2
2303: PPUSH
2304: CALL 366 0 3
2308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2309: LD_ADDR_EXP 28
2313: PUSH
2314: LD_STRING Ibrahim
2316: PPUSH
2317: LD_EXP 1
2321: NOT
2322: PPUSH
2323: LD_EXP 2
2327: PPUSH
2328: CALL 366 0 3
2332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2333: LD_ADDR_EXP 26
2337: PUSH
2338: LD_STRING Givi
2340: PPUSH
2341: LD_EXP 1
2345: NOT
2346: PPUSH
2347: LD_EXP 2
2351: PPUSH
2352: CALL 366 0 3
2356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2357: LD_ADDR_EXP 29
2361: PUSH
2362: LD_STRING Kamil
2364: PPUSH
2365: LD_EXP 1
2369: NOT
2370: PPUSH
2371: LD_EXP 2
2375: PPUSH
2376: CALL 366 0 3
2380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2381: LD_ADDR_EXP 30
2385: PUSH
2386: LD_STRING Kaia
2388: PPUSH
2389: LD_EXP 1
2393: NOT
2394: PPUSH
2395: LD_EXP 2
2399: PPUSH
2400: CALL 366 0 3
2404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2405: LD_ADDR_EXP 31
2409: PUSH
2410: LD_STRING Sophia
2412: PPUSH
2413: LD_EXP 1
2417: NOT
2418: PPUSH
2419: LD_EXP 2
2423: PPUSH
2424: CALL 366 0 3
2428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2429: LD_ADDR_EXP 32
2433: PUSH
2434: LD_STRING Markov
2436: PPUSH
2437: LD_EXP 1
2441: NOT
2442: PPUSH
2443: LD_EXP 2
2447: PPUSH
2448: CALL 366 0 3
2452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2453: LD_ADDR_EXP 35
2457: PUSH
2458: LD_STRING Aviradze
2460: PPUSH
2461: LD_EXP 1
2465: NOT
2466: PPUSH
2467: LD_EXP 2
2471: PPUSH
2472: CALL 366 0 3
2476: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2477: LD_ADDR_EXP 39
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2484: LD_ADDR_EXP 37
2488: PUSH
2489: LD_STRING 03_others
2491: PPUSH
2492: CALL_OW 31
2496: ST_TO_ADDR
// uc_side := 5 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 5
2504: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2505: LD_ADDR_EXP 34
2509: PUSH
2510: LD_STRING Kurt
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: LD_STRING 
2518: PPUSH
2519: CALL 366 0 3
2523: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2524: LD_ADDR_EXP 27
2528: PUSH
2529: LD_STRING Mike
2531: PPUSH
2532: LD_EXP 1
2536: NOT
2537: PPUSH
2538: LD_EXP 2
2542: PPUSH
2543: CALL 366 0 3
2547: ST_TO_ADDR
// if Mike then
2548: LD_EXP 27
2552: IFFALSE 2575
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2554: LD_EXP 27
2558: PPUSH
2559: LD_INT 142
2561: PPUSH
2562: LD_INT 63
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2575: LD_EXP 34
2579: PPUSH
2580: LD_INT 142
2582: PPUSH
2583: LD_INT 63
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2596: LD_EXP 34
2600: PUSH
2601: LD_EXP 27
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL_OW 140
// end ;
2614: LD_VAR 0 1
2618: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// uc_side := 5 ;
2625: LD_ADDR_OWVAR 20
2629: PUSH
2630: LD_INT 5
2632: ST_TO_ADDR
// uc_nation := 2 ;
2633: LD_ADDR_OWVAR 21
2637: PUSH
2638: LD_INT 2
2640: ST_TO_ADDR
// InitHc ;
2641: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2645: LD_ADDR_EXP 33
2649: PUSH
2650: LD_STRING Omar
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: LD_STRING 
2658: PPUSH
2659: CALL 366 0 3
2663: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2664: LD_EXP 33
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2682: LD_EXP 33
2686: PPUSH
2687: LD_INT 256
2689: PPUSH
2690: LD_INT 129
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$2 ) ;
2697: LD_INT 70
2699: PPUSH
2700: CALL_OW 67
// omarSquad := [ ] ;
2704: LD_ADDR_EXP 38
2708: PUSH
2709: EMPTY
2710: ST_TO_ADDR
// for i := 1 to 5 do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: DOUBLE
2717: LD_INT 1
2719: DEC
2720: ST_TO_ADDR
2721: LD_INT 5
2723: PUSH
2724: FOR_TO
2725: IFFALSE 2931
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2727: LD_INT 5
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: LD_INT 13
2735: PUSH
2736: LD_INT 14
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 2
2750: MOD
2751: PUSH
2752: LD_INT 1
2754: PLUS
2755: ARRAY
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_INT 25
2765: PUSH
2766: LD_INT 27
2768: PUSH
2769: LD_INT 26
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 3
2784: MOD
2785: PUSH
2786: LD_INT 1
2788: PLUS
2789: ARRAY
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL 429 0 7
// veh := CreateVehicle ;
2798: LD_ADDR_VAR 0 4
2802: PUSH
2803: CALL_OW 45
2807: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 233
// omarSquad := omarSquad union veh ;
2820: LD_ADDR_EXP 38
2824: PUSH
2825: LD_EXP 38
2829: PUSH
2830: LD_VAR 0 4
2834: UNION
2835: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_INT 284
2843: PPUSH
2844: LD_INT 163
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: CALL_OW 380
// un := CreateHuman ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: CALL_OW 44
2876: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2877: LD_ADDR_EXP 38
2881: PUSH
2882: LD_EXP 38
2886: PUSH
2887: LD_VAR 0 3
2891: UNION
2892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2893: LD_VAR 0 3
2897: PPUSH
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 271
2914: PPUSH
2915: LD_INT 144
2917: PPUSH
2918: CALL_OW 111
// wait ( 0 0$2 ) ;
2922: LD_INT 70
2924: PPUSH
2925: CALL_OW 67
// end ;
2929: GO 2724
2931: POP
2932: POP
// for i := 1 to 3 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 3
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3030
// begin PrepareHuman ( false , 1 , 2 ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: CALL_OW 380
// un := CreateHuman ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2972: LD_ADDR_EXP 38
2976: PUSH
2977: LD_EXP 38
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 284
2995: PPUSH
2996: LD_INT 163
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 257
3013: PPUSH
3014: LD_INT 138
3016: PPUSH
3017: CALL_OW 111
// wait ( 0 0$1 ) ;
3021: LD_INT 35
3023: PPUSH
3024: CALL_OW 67
// end ;
3028: GO 2946
3030: POP
3031: POP
// for i := 1 to 6 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 6
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3179
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
3048: LD_INT 0
3050: PPUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 1
3056: PUSH
3057: LD_INT 4
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_VAR 0 2
3069: PUSH
3070: LD_INT 3
3072: MOD
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: ARRAY
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 380
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3096: LD_ADDR_EXP 38
3100: PUSH
3101: LD_EXP 38
3105: PUSH
3106: LD_VAR 0 3
3110: UNION
3111: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3112: LD_VAR 0 3
3116: PPUSH
3117: LD_INT 225
3119: PPUSH
3120: LD_INT 163
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 48
// if i = 1 then
3130: LD_VAR 0 2
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3155
// SetAttr ( un , attr_speed , 12 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 12
3150: PPUSH
3151: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_INT 222
3162: PPUSH
3163: LD_INT 157
3165: PPUSH
3166: CALL_OW 111
// wait ( 0 0$1 ) ;
3170: LD_INT 35
3172: PPUSH
3173: CALL_OW 67
// end ;
3177: GO 3045
3179: POP
3180: POP
// end ; end_of_file
3181: LD_VAR 0 1
3185: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3186: LD_INT 0
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 149
3199: PPUSH
3200: LD_INT 67
3202: PPUSH
3203: CALL_OW 428
3207: PPUSH
3208: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
3212: LD_ADDR_EXP 50
3216: PUSH
3217: LD_INT 111
3219: PPUSH
3220: LD_INT 89
3222: PPUSH
3223: CALL_OW 428
3227: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 21
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 23
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3279
// SetBLevel ( i , 5 ) ;
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 5
3272: PPUSH
3273: CALL_OW 241
3277: GO 3262
3279: POP
3280: POP
// SetBName ( kirov , kirov ) ;
3281: LD_INT 71
3283: PPUSH
3284: LD_STRING kirov
3286: PPUSH
3287: CALL_OW 500
// SetBName ( beria , beria ) ;
3291: LD_INT 106
3293: PPUSH
3294: LD_STRING beria
3296: PPUSH
3297: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3301: LD_INT 112
3303: PPUSH
3304: LD_STRING kagan
3306: PPUSH
3307: CALL_OW 500
// uc_side := 6 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 6
3318: ST_TO_ADDR
// uc_nation := 3 ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 3
3326: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_INT 22
3334: PUSH
3335: LD_INT 6
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 30
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: LD_INT 22
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 30
3382: PUSH
3383: LD_INT 4
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 69
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3403: LD_ADDR_EXP 44
3407: PUSH
3408: EMPTY
3409: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3410: LD_ADDR_EXP 45
3414: PUSH
3415: EMPTY
3416: ST_TO_ADDR
// russianPatrol := [ ] ;
3417: LD_ADDR_EXP 47
3421: PUSH
3422: EMPTY
3423: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3424: LD_ADDR_EXP 40
3428: PUSH
3429: LD_STRING Kurin
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: LD_STRING 
3437: PPUSH
3438: CALL 366 0 3
3442: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3443: LD_EXP 40
3447: PPUSH
3448: LD_INT 71
3450: PPUSH
3451: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3455: LD_ADDR_EXP 42
3459: PUSH
3460: LD_STRING Popov
3462: PPUSH
3463: LD_INT 0
3465: PPUSH
3466: LD_STRING 
3468: PPUSH
3469: CALL 366 0 3
3473: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3474: LD_EXP 42
3478: PPUSH
3479: LD_INT 71
3481: PPUSH
3482: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3486: LD_ADDR_EXP 41
3490: PUSH
3491: LD_STRING Grishko
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: LD_STRING 
3499: PPUSH
3500: CALL 366 0 3
3504: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3505: LD_EXP 41
3509: PPUSH
3510: LD_INT 207
3512: PPUSH
3513: LD_INT 106
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3523: LD_EXP 41
3527: PPUSH
3528: LD_INT 209
3530: PPUSH
3531: LD_INT 106
3533: PPUSH
3534: CALL_OW 118
// for i := 1 to 2 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3607
// begin PrepareHuman ( false , 2 , 2 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 71
3584: PPUSH
3585: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3589: LD_ADDR_EXP 44
3593: PUSH
3594: LD_EXP 44
3598: PUSH
3599: LD_VAR 0 3
3603: UNION
3604: ST_TO_ADDR
// end ;
3605: GO 3551
3607: POP
3608: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3714
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: CALL_OW 380
// un := CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3682: LD_VAR 0 3
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3696: LD_ADDR_EXP 44
3700: PUSH
3701: LD_EXP 44
3705: PUSH
3706: LD_VAR 0 3
3710: UNION
3711: ST_TO_ADDR
// end ;
3712: GO 3639
3714: POP
3715: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_INT 22
3723: PUSH
3724: LD_INT 6
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 30
3733: PUSH
3734: LD_INT 32
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3825
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3753: LD_INT 0
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PPUSH
3779: CALL_OW 380
// un := CreateHuman ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: CALL_OW 44
3792: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_VAR 0 2
3802: PPUSH
3803: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3807: LD_ADDR_EXP 44
3811: PUSH
3812: LD_EXP 44
3816: PUSH
3817: LD_VAR 0 3
3821: UNION
3822: ST_TO_ADDR
// end ;
3823: GO 3750
3825: POP
3826: POP
// for i := 1 to 3 do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 3
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3896
// begin PrepareHuman ( false , 3 , 3 ) ;
3843: LD_INT 0
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL_OW 380
// un := CreateHuman ;
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3866: LD_VAR 0 3
3870: PPUSH
3871: LD_INT 92
3873: PPUSH
3874: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3878: LD_ADDR_EXP 44
3882: PUSH
3883: LD_EXP 44
3887: PUSH
3888: LD_VAR 0 3
3892: UNION
3893: ST_TO_ADDR
// end ;
3894: GO 3840
3896: POP
3897: POP
// for i := 1 to 2 do
3898: LD_ADDR_VAR 0 2
3902: PUSH
3903: DOUBLE
3904: LD_INT 1
3906: DEC
3907: ST_TO_ADDR
3908: LD_INT 2
3910: PUSH
3911: FOR_TO
3912: IFFALSE 3967
// begin PrepareHuman ( false , 4 , 3 ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_INT 4
3919: PPUSH
3920: LD_INT 3
3922: PPUSH
3923: CALL_OW 380
// un := CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 83
3944: PPUSH
3945: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3949: LD_ADDR_EXP 44
3953: PUSH
3954: LD_EXP 44
3958: PUSH
3959: LD_VAR 0 3
3963: UNION
3964: ST_TO_ADDR
// end ;
3965: GO 3911
3967: POP
3968: POP
// for i := 1 to 5 do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: DOUBLE
3975: LD_INT 1
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 5
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4040
// begin PrepareHuman ( false , 1 , 3 ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 3
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 4
4017: PPUSH
4018: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
4022: LD_ADDR_EXP 46
4026: PUSH
4027: LD_EXP 46
4031: PUSH
4032: LD_VAR 0 3
4036: UNION
4037: ST_TO_ADDR
// end ;
4038: GO 3982
4040: POP
4041: POP
// russianCargo := [ ] ;
4042: LD_ADDR_EXP 49
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// for i := 1 to 2 do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 2
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4195
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
4065: LD_INT 6
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 21
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: LD_INT 51
4082: PPUSH
4083: LD_INT 100
4085: PPUSH
4086: CALL 429 0 7
// un := CreateVehicle ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: CALL_OW 45
4099: ST_TO_ADDR
// russianCargo := russianCargo union un ;
4100: LD_ADDR_EXP 49
4104: PUSH
4105: LD_EXP 49
4109: PUSH
4110: LD_VAR 0 3
4114: UNION
4115: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
4116: LD_VAR 0 3
4120: PPUSH
4121: LD_INT 2
4123: PPUSH
4124: LD_INT 100
4126: PPUSH
4127: CALL_OW 290
// SetDir ( un , 4 ) ;
4131: LD_VAR 0 3
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 147
4150: PPUSH
4151: LD_INT 103
4153: PPUSH
4154: LD_INT 4
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: LD_OWVAR 67
4174: PPUSH
4175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4179: CALL_OW 44
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 52
// end ;
4193: GO 4062
4195: POP
4196: POP
// uc_side := 3 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 3
4204: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4205: LD_ADDR_EXP 43
4209: PUSH
4210: LD_STRING Burlak
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: LD_STRING 
4218: PPUSH
4219: CALL 366 0 3
4223: ST_TO_ADDR
// for i := 1 to 5 do
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: DOUBLE
4230: LD_INT 1
4232: DEC
4233: ST_TO_ADDR
4234: LD_INT 5
4236: PUSH
4237: FOR_TO
4238: IFFALSE 4331
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_OWVAR 67
4250: PUSH
4251: LD_INT 1
4253: PLUS
4254: PPUSH
4255: CALL_OW 380
// un := CreateHuman ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 32
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 69
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4313: LD_ADDR_EXP 45
4317: PUSH
4318: LD_EXP 45
4322: PUSH
4323: LD_VAR 0 3
4327: UNION
4328: ST_TO_ADDR
// end ;
4329: GO 4237
4331: POP
4332: POP
// for i := 1 to 2 do
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 2
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4438
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4349: LD_INT 0
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_OWVAR 67
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 30
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4420: LD_ADDR_EXP 45
4424: PUSH
4425: LD_EXP 45
4429: PUSH
4430: LD_VAR 0 3
4434: UNION
4435: ST_TO_ADDR
// end ;
4436: GO 4346
4438: POP
4439: POP
// for i := 1 to 2 do
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: DOUBLE
4446: LD_INT 1
4448: DEC
4449: ST_TO_ADDR
4450: LD_INT 2
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4541
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 7
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4523: LD_ADDR_EXP 45
4527: PUSH
4528: LD_EXP 45
4532: PUSH
4533: LD_VAR 0 3
4537: UNION
4538: ST_TO_ADDR
// end ;
4539: GO 4453
4541: POP
4542: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 380
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_INT 106
4575: PPUSH
4576: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4580: LD_ADDR_EXP 45
4584: PUSH
4585: LD_EXP 45
4589: PUSH
4590: LD_VAR 0 3
4594: UNION
4595: ST_TO_ADDR
// for i := 1 to 3 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 3
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4732
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 3
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 30
4629: PUSH
4630: LD_INT 31
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_VAR 0 2
4650: ARRAY
4651: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_OWVAR 67
4662: PPUSH
4663: CALL_OW 380
// un := CreateHuman ;
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: CALL_OW 44
4676: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: CALL_OW 254
4691: PUSH
4692: LD_INT 3
4694: PLUS
4695: PPUSH
4696: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4700: LD_VAR 0 3
4704: PPUSH
4705: LD_VAR 0 6
4709: PPUSH
4710: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4714: LD_ADDR_EXP 45
4718: PUSH
4719: LD_EXP 45
4723: PUSH
4724: LD_VAR 0 3
4728: UNION
4729: ST_TO_ADDR
// end ;
4730: GO 4609
4732: POP
4733: POP
// if Difficulty > 1 then
4734: LD_OWVAR 67
4738: PUSH
4739: LD_INT 1
4741: GREATER
4742: IFFALSE 4817
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PPUSH
4755: LD_INT 23
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 44
4766: PPUSH
4767: LD_INT 100
4769: PPUSH
4770: CALL 429 0 7
4774: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_INT 73
4782: PPUSH
4783: LD_INT 110
4785: PPUSH
4786: LD_INT 0
4788: PPUSH
4789: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
4793: LD_INT 0
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
4803: CALL_OW 44
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
4817: LD_ADDR_EXP 48
4821: PUSH
4822: EMPTY
4823: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 6
4836: PUSH
4837: LD_INT 7
4839: PUSH
4840: LD_INT 8
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_OWVAR 67
4852: ARRAY
4853: PUSH
4854: FOR_TO
4855: IFFALSE 5079
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 3
4862: PPUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 23
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 2
4877: PUSH
4878: LD_INT 2
4880: MOD
4881: PUSH
4882: LD_INT 1
4884: PLUS
4885: ARRAY
4886: PPUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_INT 43
4895: PUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 42
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_VAR 0 2
4911: PUSH
4912: LD_INT 3
4914: MOD
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: ARRAY
4920: PPUSH
4921: LD_INT 100
4923: PPUSH
4924: CALL 429 0 7
// un := CreateVehicle ;
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4938: LD_VAR 0 3
4942: PPUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 1
4955: PPUSH
4956: LD_INT 2
4958: PPUSH
4959: CALL_OW 12
4963: ARRAY
4964: PPUSH
4965: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4969: LD_ADDR_EXP 48
4973: PUSH
4974: LD_EXP 48
4978: PUSH
4979: LD_VAR 0 3
4983: UNION
4984: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_INT 127
4992: PPUSH
4993: LD_INT 89
4995: PPUSH
4996: LD_INT 7
4998: PPUSH
4999: LD_INT 0
5001: PPUSH
5002: CALL_OW 50
// uc_side := 3 ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_INT 3
5013: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
5014: LD_INT 0
5016: PPUSH
5017: LD_INT 3
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: CALL_OW 380
// un := CreateHuman ;
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: CALL_OW 44
5036: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5037: LD_ADDR_EXP 48
5041: PUSH
5042: LD_EXP 48
5046: PUSH
5047: LD_VAR 0 3
5051: UNION
5052: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_EXP 48
5067: PUSH
5068: LD_INT 1
5070: MINUS
5071: ARRAY
5072: PPUSH
5073: CALL_OW 52
// end ;
5077: GO 4854
5079: POP
5080: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: LD_INT 4
5096: PUSH
5097: LD_INT 5
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5178
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5114: LD_INT 0
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_OWVAR 67
5124: PPUSH
5125: CALL_OW 380
// un := CreateHuman ;
5129: LD_ADDR_VAR 0 3
5133: PUSH
5134: CALL_OW 44
5138: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5139: LD_ADDR_EXP 48
5143: PUSH
5144: LD_EXP 48
5148: PUSH
5149: LD_VAR 0 3
5153: UNION
5154: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
5155: LD_VAR 0 3
5159: PPUSH
5160: LD_INT 91
5162: PPUSH
5163: LD_INT 60
5165: PPUSH
5166: LD_INT 3
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 50
// end ;
5176: GO 5111
5178: POP
5179: POP
// end ;
5180: LD_VAR 0 1
5184: RET
// every 0 0$3 do var i ;
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin for i := 1 to 4 do
5191: LD_ADDR_VAR 0 1
5195: PUSH
5196: DOUBLE
5197: LD_INT 1
5199: DEC
5200: ST_TO_ADDR
5201: LD_INT 4
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5224
// ComExitBuilding ( grishkoSquad [ i ] ) ;
5207: LD_EXP 46
5211: PUSH
5212: LD_VAR 0 1
5216: ARRAY
5217: PPUSH
5218: CALL_OW 122
5222: GO 5204
5224: POP
5225: POP
// wait ( 3 ) ;
5226: LD_INT 3
5228: PPUSH
5229: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
5233: LD_EXP 46
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 6
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 31
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_EXP 46
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: CALL_OW 74
5284: PPUSH
5285: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
5289: LD_EXP 46
5293: PUSH
5294: LD_INT 2
5296: ARRAY
5297: PPUSH
5298: LD_INT 211
5300: PPUSH
5301: LD_INT 107
5303: PPUSH
5304: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5308: LD_EXP 46
5312: PUSH
5313: LD_INT 2
5315: ARRAY
5316: PPUSH
5317: LD_INT 209
5319: PPUSH
5320: LD_INT 106
5322: PPUSH
5323: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5327: LD_EXP 46
5331: PUSH
5332: LD_INT 3
5334: ARRAY
5335: PPUSH
5336: LD_INT 209
5338: PPUSH
5339: LD_INT 103
5341: PPUSH
5342: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5346: LD_EXP 46
5350: PUSH
5351: LD_INT 3
5353: ARRAY
5354: PPUSH
5355: LD_INT 209
5357: PPUSH
5358: LD_INT 106
5360: PPUSH
5361: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5365: LD_EXP 46
5369: PUSH
5370: LD_INT 4
5372: ARRAY
5373: PPUSH
5374: LD_INT 227
5376: PPUSH
5377: LD_INT 117
5379: PPUSH
5380: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5384: LD_EXP 46
5388: PUSH
5389: LD_INT 4
5391: ARRAY
5392: PPUSH
5393: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5397: LD_INT 700
5399: PPUSH
5400: CALL_OW 67
// for i := 3 downto 2 do
5404: LD_ADDR_VAR 0 1
5408: PUSH
5409: DOUBLE
5410: LD_INT 3
5412: INC
5413: ST_TO_ADDR
5414: LD_INT 2
5416: PUSH
5417: FOR_DOWNTO
5418: IFFALSE 5585
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5420: LD_EXP 46
5424: PUSH
5425: LD_VAR 0 1
5429: ARRAY
5430: PPUSH
5431: LD_INT 200
5433: PPUSH
5434: LD_INT 91
5436: PPUSH
5437: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5441: LD_EXP 46
5445: PUSH
5446: LD_VAR 0 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 210
5454: PPUSH
5455: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5459: LD_EXP 46
5463: PUSH
5464: LD_VAR 0 1
5468: ARRAY
5469: PPUSH
5470: LD_INT 224
5472: PPUSH
5473: LD_INT 93
5475: PPUSH
5476: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5480: LD_EXP 46
5484: PUSH
5485: LD_VAR 0 1
5489: ARRAY
5490: PPUSH
5491: LD_INT 210
5493: PPUSH
5494: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5498: LD_EXP 46
5502: PUSH
5503: LD_VAR 0 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 239
5511: PPUSH
5512: LD_INT 123
5514: PPUSH
5515: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5519: LD_EXP 46
5523: PUSH
5524: LD_VAR 0 1
5528: ARRAY
5529: PPUSH
5530: LD_INT 210
5532: PPUSH
5533: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5537: LD_EXP 46
5541: PUSH
5542: LD_VAR 0 1
5546: ARRAY
5547: PPUSH
5548: LD_INT 212
5550: PPUSH
5551: LD_INT 105
5553: PPUSH
5554: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5558: LD_EXP 46
5562: PUSH
5563: LD_VAR 0 1
5567: ARRAY
5568: PPUSH
5569: LD_INT 700
5571: PPUSH
5572: CALL_OW 202
// wait ( 0 0$30 ) ;
5576: LD_INT 1050
5578: PPUSH
5579: CALL_OW 67
// end ;
5583: GO 5417
5585: POP
5586: POP
// until not activeGrishkoAI ;
5587: LD_EXP 10
5591: NOT
5592: IFFALSE 5397
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5594: LD_EXP 46
5598: PPUSH
5599: LD_INT 221
5601: PPUSH
5602: LD_INT 110
5604: PPUSH
5605: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5609: LD_EXP 46
5613: PPUSH
5614: LD_INT 228
5616: PPUSH
5617: LD_INT 115
5619: PPUSH
5620: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5624: LD_EXP 46
5628: PPUSH
5629: CALL_OW 200
// end ;
5633: PPOPN 1
5635: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5636: LD_EXP 12
5640: IFFALSE 6382
5642: GO 5644
5644: DISABLE
5645: LD_INT 0
5647: PPUSH
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin uc_side := 6 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 6
5658: ST_TO_ADDR
// uc_nation := 3 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 3
5666: ST_TO_ADDR
// for i := 1 to 3 do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_INT 3
5679: PUSH
5680: FOR_TO
5681: IFFALSE 5790
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5683: LD_INT 0
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 2
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: LD_INT 4
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 67
5707: ARRAY
5708: PPUSH
5709: CALL_OW 380
// un := CreateHuman ;
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: CALL_OW 44
5722: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5723: LD_ADDR_EXP 47
5727: PUSH
5728: LD_EXP 47
5732: PUSH
5733: LD_VAR 0 1
5737: UNION
5738: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5739: LD_VAR 0 1
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_INT 11
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 210
5773: PPUSH
5774: LD_INT 159
5776: PPUSH
5777: CALL_OW 111
// wait ( 0 0$2 ) ;
5781: LD_INT 70
5783: PPUSH
5784: CALL_OW 67
// end ;
5788: GO 5680
5790: POP
5791: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: LD_INT 172
5799: PUSH
5800: LD_INT 76
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 150
5809: PUSH
5810: LD_INT 38
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 148
5819: PUSH
5820: LD_INT 9
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 165
5829: PUSH
5830: LD_INT 38
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 191
5845: PUSH
5846: LD_INT 77
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 168
5855: PUSH
5856: LD_INT 42
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 166
5865: PUSH
5866: LD_INT 11
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 151
5875: PUSH
5876: LD_INT 12
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 221
5891: PUSH
5892: LD_INT 88
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 217
5901: PUSH
5902: LD_INT 64
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 232
5911: PUSH
5912: LD_INT 66
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 200
5921: PUSH
5922: LD_INT 56
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5940: LD_INT 35
5942: PPUSH
5943: CALL_OW 67
// for i := russianPatrol downto 1 do
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: DOUBLE
5953: LD_EXP 47
5957: INC
5958: ST_TO_ADDR
5959: LD_INT 1
5961: PUSH
5962: FOR_DOWNTO
5963: IFFALSE 6346
// begin if IsDead ( russianPatrol [ i ] ) then
5965: LD_EXP 47
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PPUSH
5976: CALL_OW 301
5980: IFFALSE 5984
// continue ;
5982: GO 5962
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5984: LD_EXP 47
5988: PUSH
5989: LD_VAR 0 2
5993: ARRAY
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_INT 990
6002: LESS
6003: PUSH
6004: LD_EXP 47
6008: PUSH
6009: LD_VAR 0 2
6013: ARRAY
6014: PPUSH
6015: CALL_OW 110
6019: PUSH
6020: LD_INT 1
6022: EQUAL
6023: AND
6024: IFFALSE 6044
// SetTag ( russianPatrol [ i ] , 2 ) ;
6026: LD_EXP 47
6030: PUSH
6031: LD_VAR 0 2
6035: ARRAY
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
6044: LD_EXP 47
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 2
6062: EQUAL
6063: IFFALSE 6130
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
6065: LD_EXP 47
6069: PUSH
6070: LD_VAR 0 2
6074: ARRAY
6075: PPUSH
6076: LD_INT 166
6078: PPUSH
6079: LD_INT 101
6081: PPUSH
6082: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
6086: LD_EXP 47
6090: PUSH
6091: LD_VAR 0 2
6095: ARRAY
6096: PPUSH
6097: LD_INT 71
6099: PPUSH
6100: CALL_OW 296
6104: PUSH
6105: LD_INT 10
6107: LESS
6108: IFFALSE 6128
// SetTag ( russianPatrol [ i ] , 3 ) ;
6110: LD_EXP 47
6114: PUSH
6115: LD_VAR 0 2
6119: ARRAY
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5962
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
6130: LD_EXP 47
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: CALL_OW 110
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: IFFALSE 6244
// begin spottedByPatrol := true ;
6151: LD_ADDR_EXP 7
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
6159: LD_EXP 47
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PPUSH
6170: CALL_OW 250
6174: PPUSH
6175: LD_EXP 47
6179: PUSH
6180: LD_VAR 0 2
6184: ARRAY
6185: PPUSH
6186: CALL_OW 251
6190: PPUSH
6191: LD_INT 2
6193: PPUSH
6194: LD_INT 6
6196: NEG
6197: PPUSH
6198: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
6202: LD_EXP 47
6206: PUSH
6207: LD_VAR 0 2
6211: ARRAY
6212: PPUSH
6213: CALL_OW 87
// DialogueOn ;
6217: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
6221: LD_EXP 25
6225: PPUSH
6226: LD_STRING DH-Spot-f-3
6228: PPUSH
6229: CALL_OW 88
// DialogueOff ;
6233: CALL_OW 7
// YouLost ( Spotted ) ;
6237: LD_STRING Spotted
6239: PPUSH
6240: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
6244: LD_EXP 47
6248: PUSH
6249: LD_VAR 0 2
6253: ARRAY
6254: PPUSH
6255: CALL_OW 314
6259: NOT
6260: IFFALSE 6344
// for j in patrol [ i ] do
6262: LD_ADDR_VAR 0 3
6266: PUSH
6267: LD_VAR 0 4
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: FOR_IN
6279: IFFALSE 6342
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
6281: LD_EXP 47
6285: PUSH
6286: LD_VAR 0 2
6290: ARRAY
6291: PPUSH
6292: LD_INT 35
6294: PPUSH
6295: LD_INT 175
6297: PPUSH
6298: CALL_OW 12
6302: PPUSH
6303: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
6307: LD_EXP 47
6311: PUSH
6312: LD_VAR 0 2
6316: ARRAY
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 2
6334: ARRAY
6335: PPUSH
6336: CALL_OW 174
// end ;
6340: GO 6278
6342: POP
6343: POP
// end ;
6344: GO 5962
6346: POP
6347: POP
// until not russianPatrol or russianAlert ;
6348: LD_EXP 47
6352: NOT
6353: PUSH
6354: LD_EXP 9
6358: OR
6359: IFFALSE 5940
// if russianPatrol then
6361: LD_EXP 47
6365: IFFALSE 6382
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6367: LD_EXP 47
6371: PPUSH
6372: LD_INT 161
6374: PPUSH
6375: LD_INT 107
6377: PPUSH
6378: CALL_OW 114
// end ;
6382: PPOPN 4
6384: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6385: LD_EXP 6
6389: PUSH
6390: LD_EXP 13
6394: NOT
6395: AND
6396: IFFALSE 6882
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
// begin enable ;
6408: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_EXP 48
6418: PPUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 72
6433: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// for i in filter do
6454: LD_ADDR_VAR 0 1
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: FOR_IN
6465: IFFALSE 6880
// begin tmp := IsDrivenBy ( i ) ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 311
6481: ST_TO_ADDR
// if not tmp then
6482: LD_VAR 0 3
6486: NOT
6487: IFFALSE 6491
// continue ;
6489: GO 6464
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 261
6500: PUSH
6501: LD_INT 90
6503: GREATER
6504: PUSH
6505: LD_VAR 0 1
6509: PPUSH
6510: CALL_OW 110
6514: PUSH
6515: LD_INT 2
6517: EQUAL
6518: AND
6519: IFFALSE 6535
// SetTag ( i , 0 ) else
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 109
6533: GO 6631
// if GetTag ( i ) = 2 then
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 110
6544: PUSH
6545: LD_INT 2
6547: EQUAL
6548: IFFALSE 6631
// begin x := rand ( 1 , 2 ) ;
6550: LD_ADDR_VAR 0 5
6554: PUSH
6555: LD_INT 1
6557: PPUSH
6558: LD_INT 2
6560: PPUSH
6561: CALL_OW 12
6565: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_EXP 49
6575: PUSH
6576: LD_VAR 0 5
6580: ARRAY
6581: PPUSH
6582: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6586: LD_EXP 49
6590: PUSH
6591: LD_VAR 0 5
6595: ARRAY
6596: PPUSH
6597: LD_INT 2
6599: PPUSH
6600: CALL_OW 289
6604: PUSH
6605: LD_INT 20
6607: LESS
6608: IFFALSE 6631
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6610: LD_EXP 49
6614: PUSH
6615: LD_VAR 0 5
6619: ARRAY
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 100
6626: PPUSH
6627: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 256
6640: PUSH
6641: LD_INT 600
6643: GREATEREQUAL
6644: PUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 110
6654: NOT
6655: AND
6656: IFFALSE 6682
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_VAR 0 4
6667: PPUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 74
6677: PPUSH
6678: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 256
6691: PUSH
6692: LD_INT 600
6694: LESS
6695: PUSH
6696: LD_VAR 0 1
6700: PPUSH
6701: CALL_OW 110
6705: NOT
6706: AND
6707: IFFALSE 6736
// begin SetTag ( i , 1 ) ;
6709: LD_VAR 0 1
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: LD_INT 62
6728: PPUSH
6729: LD_INT 22
6731: PPUSH
6732: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL_OW 110
6745: PUSH
6746: LD_INT 1
6748: EQUAL
6749: PUSH
6750: LD_VAR 0 1
6754: PPUSH
6755: LD_INT 62
6757: PPUSH
6758: LD_INT 22
6760: PPUSH
6761: CALL_OW 297
6765: PUSH
6766: LD_INT 6
6768: LESS
6769: AND
6770: PUSH
6771: LD_VAR 0 3
6775: AND
6776: IFFALSE 6878
// begin ComExitVehicle ( tmp ) ;
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 256
6817: PUSH
6818: LD_INT 1000
6820: EQUAL
6821: IFFALSE 6801
// ComEnterUnit ( tmp , i ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_VAR 0 1
6832: PPUSH
6833: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 261
6846: PUSH
6847: LD_INT 90
6849: LESSEQUAL
6850: IFFALSE 6866
// SetTag ( i , 2 ) else
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_INT 2
6859: PPUSH
6860: CALL_OW 109
6864: GO 6878
// SetTag ( i , 0 ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 109
// end ; end ;
6878: GO 6464
6880: POP
6881: POP
// end ;
6882: PPOPN 5
6884: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6885: LD_EXP 20
6889: IFFALSE 7112
6891: GO 6893
6893: DISABLE
6894: LD_INT 0
6896: PPUSH
6897: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6898: LD_EXP 49
6902: PPUSH
6903: LD_INT 79
6905: PPUSH
6906: LD_INT 155
6908: PPUSH
6909: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6913: LD_EXP 49
6917: PPUSH
6918: LD_INT 16
6920: PPUSH
6921: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_EXP 48
6934: PPUSH
6935: LD_INT 50
6937: PUSH
6938: EMPTY
6939: LIST
6940: PPUSH
6941: CALL_OW 72
6945: ST_TO_ADDR
// for i in tmp do
6946: LD_ADDR_VAR 0 1
6950: PUSH
6951: LD_VAR 0 2
6955: PUSH
6956: FOR_IN
6957: IFFALSE 6991
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 123
6966: PPUSH
6967: LD_INT 60
6969: PPUSH
6970: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 153
6981: PPUSH
6982: LD_INT 103
6984: PPUSH
6985: CALL_OW 174
// end ;
6989: GO 6956
6991: POP
6992: POP
// repeat wait ( 0 0$1 ) ;
6993: LD_INT 35
6995: PPUSH
6996: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 48
7009: PPUSH
7010: LD_INT 50
7012: PUSH
7013: EMPTY
7014: LIST
7015: PPUSH
7016: CALL_OW 72
7020: ST_TO_ADDR
// for i in tmp do
7021: LD_ADDR_VAR 0 1
7025: PUSH
7026: LD_VAR 0 2
7030: PUSH
7031: FOR_IN
7032: IFFALSE 7103
// if not HasTask ( i ) then
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 314
7043: NOT
7044: IFFALSE 7101
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_INT 81
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: PPUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 74
7096: PPUSH
7097: CALL_OW 115
7101: GO 7031
7103: POP
7104: POP
7105: LD_VAR 0 2
7109: NOT
7110: IFFALSE 6993
// end ;
7112: PPOPN 2
7114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
7115: LD_INT 22
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 32
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: IFFALSE 7222
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
// begin enable ;
7151: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
7152: LD_ADDR_VAR 0 1
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 32
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7220
// if GetFuel ( i ) < 1 then
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 261
7198: PUSH
7199: LD_INT 1
7201: LESS
7202: IFFALSE 7218
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 311
7213: PPUSH
7214: CALL_OW 121
7218: GO 7186
7220: POP
7221: POP
// end ; end_of_file
7222: PPOPN 1
7224: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
7229: PPUSH
// SetBName ( omikron , omikron ) ;
7230: LD_INT 64
7232: PPUSH
7233: LD_STRING omikron
7235: PPUSH
7236: CALL_OW 500
// uc_side := 4 ;
7240: LD_ADDR_OWVAR 20
7244: PUSH
7245: LD_INT 4
7247: ST_TO_ADDR
// uc_nation := 1 ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// omicronSquad := [ ] ;
7256: LD_ADDR_EXP 51
7260: PUSH
7261: EMPTY
7262: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 4
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 32
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 30
7293: PUSH
7294: LD_INT 31
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7373
// begin PrepareHuman ( false , 1 , 1 ) ;
7318: LD_INT 0
7320: PPUSH
7321: LD_INT 1
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: CALL_OW 380
// un := CreateHuman ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7341: LD_ADDR_EXP 51
7345: PUSH
7346: LD_EXP 51
7350: PUSH
7351: LD_VAR 0 3
7355: UNION
7356: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: CALL_OW 52
// end ;
7371: GO 7315
7373: POP
7374: POP
// for i := 1 to 3 do
7375: LD_ADDR_VAR 0 2
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_INT 3
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7444
// begin PrepareHuman ( false , 2 , 2 ) ;
7391: LD_INT 0
7393: PPUSH
7394: LD_INT 2
7396: PPUSH
7397: LD_INT 2
7399: PPUSH
7400: CALL_OW 380
// un := CreateHuman ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: CALL_OW 44
7413: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7414: LD_ADDR_EXP 51
7418: PUSH
7419: LD_EXP 51
7423: PUSH
7424: LD_VAR 0 3
7428: UNION
7429: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_INT 64
7437: PPUSH
7438: CALL_OW 52
// end ;
7442: GO 7388
7444: POP
7445: POP
// for i := 1 to 2 do
7446: LD_ADDR_VAR 0 2
7450: PUSH
7451: DOUBLE
7452: LD_INT 1
7454: DEC
7455: ST_TO_ADDR
7456: LD_INT 2
7458: PUSH
7459: FOR_TO
7460: IFFALSE 7599
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7462: LD_INT 4
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: LD_INT 2
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 3
7479: PPUSH
7480: LD_INT 100
7482: PPUSH
7483: CALL 429 0 7
// un := CreateVehicle ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: CALL_OW 45
7496: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7497: LD_ADDR_EXP 51
7501: PUSH
7502: LD_EXP 51
7506: PUSH
7507: LD_VAR 0 3
7511: UNION
7512: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7513: LD_VAR 0 3
7517: PPUSH
7518: LD_INT 28
7520: PPUSH
7521: LD_INT 37
7523: PPUSH
7524: LD_INT 6
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7534: LD_INT 0
7536: PPUSH
7537: LD_INT 3
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: CALL_OW 380
// un := CreateHuman ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: CALL_OW 44
7556: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7557: LD_ADDR_EXP 51
7561: PUSH
7562: LD_EXP 51
7566: PUSH
7567: LD_VAR 0 3
7571: UNION
7572: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7573: LD_VAR 0 3
7577: PPUSH
7578: LD_EXP 51
7582: PUSH
7583: LD_EXP 51
7587: PUSH
7588: LD_INT 1
7590: MINUS
7591: ARRAY
7592: PPUSH
7593: CALL_OW 52
// end ;
7597: GO 7459
7599: POP
7600: POP
// end ;
7601: LD_VAR 0 1
7605: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
// uc_side := 4 ;
7612: LD_ADDR_OWVAR 20
7616: PUSH
7617: LD_INT 4
7619: ST_TO_ADDR
// uc_nation := 1 ;
7620: LD_ADDR_OWVAR 21
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// tmp := [ ] ;
7628: LD_ADDR_VAR 0 4
7632: PUSH
7633: EMPTY
7634: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7635: LD_INT 4
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 1
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: LD_INT 4
7652: PPUSH
7653: LD_INT 77
7655: PPUSH
7656: CALL 429 0 7
// un := CreateVehicle ;
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: CALL_OW 45
7669: ST_TO_ADDR
// tmp := tmp union un ;
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PUSH
7680: LD_VAR 0 3
7684: UNION
7685: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7686: LD_VAR 0 3
7690: PPUSH
7691: LD_INT 2
7693: PPUSH
7694: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7698: LD_VAR 0 3
7702: PPUSH
7703: LD_INT 106
7705: PPUSH
7706: LD_INT 3
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_INT 3
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 380
// un := CreateHuman ;
7729: LD_ADDR_VAR 0 3
7733: PUSH
7734: CALL_OW 44
7738: ST_TO_ADDR
// tmp := tmp union un ;
7739: LD_ADDR_VAR 0 4
7743: PUSH
7744: LD_VAR 0 4
7748: PUSH
7749: LD_VAR 0 3
7753: UNION
7754: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7755: LD_VAR 0 3
7759: PPUSH
7760: LD_VAR 0 4
7764: PUSH
7765: LD_VAR 0 4
7769: PUSH
7770: LD_INT 1
7772: MINUS
7773: ARRAY
7774: PPUSH
7775: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7779: LD_VAR 0 3
7783: PPUSH
7784: LD_INT 109
7786: PPUSH
7787: LD_INT 9
7789: PPUSH
7790: CALL_OW 111
// wait ( 0 0$1 ) ;
7794: LD_INT 35
7796: PPUSH
7797: CALL_OW 67
// for i := 1 to 2 do
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: DOUBLE
7807: LD_INT 1
7809: DEC
7810: ST_TO_ADDR
7811: LD_INT 2
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7879
// begin PrepareHuman ( false , 1 , 2 ) ;
7817: LD_INT 0
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: CALL_OW 380
// un := CreateHuman ;
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: CALL_OW 44
7839: ST_TO_ADDR
// tmp := tmp union un ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 3
7854: UNION
7855: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7856: LD_VAR 0 3
7860: PPUSH
7861: LD_INT 105
7863: PPUSH
7864: LD_INT 2
7866: PPUSH
7867: LD_INT 2
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: CALL_OW 50
// end ;
7877: GO 7814
7879: POP
7880: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7881: LD_VAR 0 4
7885: PPUSH
7886: LD_INT 26
7888: PPUSH
7889: LD_INT 35
7891: PPUSH
7892: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_INT 50
7910: PUSH
7911: EMPTY
7912: LIST
7913: PPUSH
7914: CALL_OW 72
7918: NOT
7919: IFFALSE 7923
// exit ;
7921: GO 8050
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7923: LD_VAR 0 4
7927: PPUSH
7928: LD_INT 91
7930: PUSH
7931: LD_INT 64
7933: PUSH
7934: LD_INT 12
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 72
7946: PUSH
7947: LD_VAR 0 4
7951: EQUAL
7952: IFFALSE 7896
// omicronSquad := omicronSquad union tmp ;
7954: LD_ADDR_EXP 51
7958: PUSH
7959: LD_EXP 51
7963: PUSH
7964: LD_VAR 0 4
7968: UNION
7969: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7970: LD_ADDR_VAR 0 2
7974: PUSH
7975: LD_VAR 0 4
7979: PPUSH
7980: LD_INT 25
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 72
7994: PUSH
7995: FOR_IN
7996: IFFALSE 8048
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 4
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 30
8015: PUSH
8016: LD_INT 4
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: PPUSH
8032: LD_VAR 0 2
8036: PPUSH
8037: CALL_OW 74
8041: PPUSH
8042: CALL_OW 120
8046: GO 7995
8048: POP
8049: POP
// end ;
8050: LD_VAR 0 1
8054: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
8055: LD_EXP 13
8059: NOT
8060: IFFALSE 8631
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin enable ;
8071: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_INT 22
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 21
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 3
8099: PUSH
8100: LD_INT 24
8102: PUSH
8103: LD_INT 1000
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_EXP 51
8133: PPUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 72
8148: ST_TO_ADDR
// if filter and tmp then
8149: LD_VAR 0 2
8153: PUSH
8154: LD_VAR 0 3
8158: AND
8159: IFFALSE 8232
// begin for i in tmp do
8161: LD_ADDR_VAR 0 1
8165: PUSH
8166: LD_VAR 0 3
8170: PUSH
8171: FOR_IN
8172: IFFALSE 8228
// if IsInUnit ( i ) then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 310
8183: IFFALSE 8196
// ComExitBuilding ( i ) else
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 122
8194: GO 8226
// if not HasTask ( i ) then
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 314
8205: NOT
8206: IFFALSE 8226
// ComRepairBuilding ( i , filter [ 1 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: CALL_OW 130
8226: GO 8171
8228: POP
8229: POP
// end else
8230: GO 8303
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
8232: LD_VAR 0 3
8236: PPUSH
8237: LD_INT 3
8239: PUSH
8240: LD_INT 54
8242: PUSH
8243: EMPTY
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: IFFALSE 8303
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_VAR 0 3
8265: PPUSH
8266: LD_INT 3
8268: PUSH
8269: LD_INT 54
8271: PUSH
8272: EMPTY
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 72
8283: PUSH
8284: FOR_IN
8285: IFFALSE 8301
// ComEnterUnit ( i , omikron ) ;
8287: LD_VAR 0 1
8291: PPUSH
8292: LD_INT 64
8294: PPUSH
8295: CALL_OW 120
8299: GO 8284
8301: POP
8302: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_EXP 51
8312: PPUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: ST_TO_ADDR
// if not filter then
8328: LD_VAR 0 2
8332: NOT
8333: IFFALSE 8337
// exit ;
8335: GO 8631
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
8337: LD_ADDR_VAR 0 4
8341: PUSH
8342: LD_INT 13
8344: PPUSH
8345: LD_INT 81
8347: PUSH
8348: LD_INT 4
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 70
8359: ST_TO_ADDR
// if enemy then
8360: LD_VAR 0 4
8364: IFFALSE 8631
// begin for i in filter do
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_VAR 0 2
8375: PUSH
8376: FOR_IN
8377: IFFALSE 8629
// begin tmp := IsDrivenBy ( i ) ;
8379: LD_ADDR_VAR 0 3
8383: PUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 311
8393: ST_TO_ADDR
// if not tmp then
8394: LD_VAR 0 3
8398: NOT
8399: IFFALSE 8403
// continue ;
8401: GO 8376
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 256
8412: PUSH
8413: LD_INT 600
8415: GREATEREQUAL
8416: PUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 110
8426: PUSH
8427: LD_INT 1
8429: NONEQUAL
8430: AND
8431: IFFALSE 8457
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_VAR 0 4
8442: PPUSH
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 74
8452: PPUSH
8453: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 256
8466: PUSH
8467: LD_INT 600
8469: LESS
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 110
8480: PUSH
8481: LD_INT 1
8483: NONEQUAL
8484: AND
8485: IFFALSE 8514
// begin SetTag ( i , 1 ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_INT 27
8506: PPUSH
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 110
8523: PUSH
8524: LD_INT 1
8526: EQUAL
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_INT 27
8535: PPUSH
8536: LD_INT 35
8538: PPUSH
8539: CALL_OW 297
8543: PUSH
8544: LD_INT 6
8546: LESS
8547: AND
8548: PUSH
8549: LD_VAR 0 3
8553: AND
8554: IFFALSE 8627
// begin ComExitVehicle ( tmp ) ;
8556: LD_VAR 0 3
8560: PPUSH
8561: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8565: LD_VAR 0 3
8569: PPUSH
8570: LD_VAR 0 1
8574: PPUSH
8575: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8579: LD_INT 35
8581: PPUSH
8582: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 256
8595: PUSH
8596: LD_INT 1000
8598: EQUAL
8599: IFFALSE 8579
// ComEnterUnit ( tmp , i ) ;
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 120
// SetTag ( i , 0 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL_OW 109
// end ; end ;
8627: GO 8376
8629: POP
8630: POP
// end ; end ;
8631: PPOPN 4
8633: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8634: LD_EXP 13
8638: IFFALSE 8782
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8647: LD_ADDR_VAR 0 2
8651: PUSH
8652: LD_EXP 51
8656: PPUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 50
8669: PUSH
8670: EMPTY
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: ST_TO_ADDR
// if not tmp then
8682: LD_VAR 0 2
8686: NOT
8687: IFFALSE 8691
// exit ;
8689: GO 8782
// repeat wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// for i in tmp do
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8773
// begin ComExit ( i ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL 867 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8720: LD_VAR 0 1
8724: PPUSH
8725: LD_INT 14
8727: PPUSH
8728: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 14
8739: PPUSH
8740: CALL_OW 308
8744: IFFALSE 8771
// begin tmp := tmp diff i ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_VAR 0 1
8760: DIFF
8761: ST_TO_ADDR
// RemoveUnit ( i ) ;
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 64
// end ; end ;
8771: GO 8708
8773: POP
8774: POP
// until not tmp ;
8775: LD_VAR 0 2
8779: NOT
8780: IFFALSE 8691
// end ; end_of_file
8782: PPOPN 2
8784: END
// export function Action ; var i , un , veh , tmp ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
8791: PPUSH
// InGameOn ;
8792: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8796: LD_INT 179
8798: PPUSH
8799: LD_INT 5
8801: PPUSH
8802: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_INT 12
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 1
8825: PPUSH
8826: LD_INT 24
8828: PPUSH
8829: LD_INT 33
8831: PPUSH
8832: CALL 429 0 7
8836: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8837: LD_VAR 0 4
8841: PPUSH
8842: LD_INT 2
8844: PPUSH
8845: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8849: LD_VAR 0 4
8853: PPUSH
8854: LD_INT 178
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8867: LD_EXP 25
8871: PPUSH
8872: LD_VAR 0 4
8876: PPUSH
8877: CALL_OW 52
// if Kamil then
8881: LD_EXP 29
8885: IFFALSE 8920
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8887: LD_EXP 29
8891: PPUSH
8892: LD_INT 207
8894: PPUSH
8895: LD_INT 37
8897: PPUSH
8898: LD_INT 0
8900: PPUSH
8901: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8905: LD_EXP 29
8909: PPUSH
8910: LD_INT 211
8912: PPUSH
8913: LD_INT 38
8915: PPUSH
8916: CALL_OW 118
// end ; if Sophia then
8920: LD_EXP 31
8924: IFFALSE 8959
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8926: LD_EXP 31
8930: PPUSH
8931: LD_INT 209
8933: PPUSH
8934: LD_INT 40
8936: PPUSH
8937: LD_INT 0
8939: PPUSH
8940: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8944: LD_EXP 31
8948: PPUSH
8949: LD_INT 211
8951: PPUSH
8952: LD_INT 38
8954: PPUSH
8955: CALL_OW 118
// end ; if Givi then
8959: LD_EXP 26
8963: IFFALSE 8998
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8965: LD_EXP 26
8969: PPUSH
8970: LD_INT 201
8972: PPUSH
8973: LD_INT 34
8975: PPUSH
8976: LD_INT 0
8978: PPUSH
8979: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_INT 206
8990: PPUSH
8991: LD_INT 36
8993: PPUSH
8994: CALL_OW 118
// end ; if Ibrahim then
8998: LD_EXP 28
9002: IFFALSE 9037
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
9004: LD_EXP 28
9008: PPUSH
9009: LD_INT 202
9011: PPUSH
9012: LD_INT 39
9014: PPUSH
9015: LD_INT 0
9017: PPUSH
9018: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
9022: LD_EXP 28
9026: PPUSH
9027: LD_INT 206
9029: PPUSH
9030: LD_INT 36
9032: PPUSH
9033: CALL_OW 118
// end ; if Markov then
9037: LD_EXP 32
9041: IFFALSE 9128
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_INT 2
9050: PPUSH
9051: LD_INT 2
9053: PPUSH
9054: LD_INT 13
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_INT 25
9065: PPUSH
9066: LD_INT 80
9068: PUSH
9069: LD_INT 20
9071: PUSH
9072: LD_OWVAR 67
9076: MUL
9077: MINUS
9078: PPUSH
9079: CALL 429 0 7
9083: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9084: LD_VAR 0 4
9088: PPUSH
9089: LD_INT 2
9091: PPUSH
9092: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_INT 197
9103: PPUSH
9104: LD_INT 35
9106: PPUSH
9107: LD_INT 0
9109: PPUSH
9110: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
9114: LD_EXP 32
9118: PPUSH
9119: LD_VAR 0 4
9123: PPUSH
9124: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: LD_EXP 30
9137: PUSH
9138: LD_EXP 37
9142: UNION
9143: ST_TO_ADDR
// for i in tmp do
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: LD_VAR 0 5
9153: PUSH
9154: FOR_IN
9155: IFFALSE 9189
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
9157: LD_VAR 0 2
9161: PPUSH
9162: LD_INT 203
9164: PPUSH
9165: LD_INT 41
9167: PPUSH
9168: LD_INT 6
9170: PPUSH
9171: LD_INT 0
9173: PPUSH
9174: CALL_OW 50
// ComHold ( i ) ;
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 140
// end ;
9187: GO 9154
9189: POP
9190: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
9191: LD_INT 22
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: NOT
9220: IFFALSE 9234
// SetClass ( Heike , 2 ) ;
9222: LD_EXP 25
9226: PPUSH
9227: LD_INT 2
9229: PPUSH
9230: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
9234: LD_EXP 25
9238: PPUSH
9239: LD_INT 183
9241: PPUSH
9242: LD_INT 12
9244: PPUSH
9245: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
9249: LD_EXP 25
9253: PPUSH
9254: LD_INT 188
9256: PPUSH
9257: LD_INT 20
9259: PPUSH
9260: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
9264: LD_EXP 25
9268: PPUSH
9269: LD_INT 191
9271: PPUSH
9272: LD_INT 25
9274: PPUSH
9275: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
9279: LD_EXP 25
9283: PPUSH
9284: LD_INT 203
9286: PPUSH
9287: LD_INT 29
9289: PPUSH
9290: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
9294: LD_EXP 25
9298: PPUSH
9299: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9303: LD_INT 35
9305: PPUSH
9306: CALL_OW 67
// until not IsInUnit ( Heike ) ;
9310: LD_EXP 25
9314: PPUSH
9315: CALL_OW 310
9319: NOT
9320: IFFALSE 9303
// CenterOnUnits ( Heike ) ;
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
9331: LD_ADDR_VAR 0 5
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 21
9348: PUSH
9349: LD_INT 1
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: PUSH
9365: LD_EXP 25
9369: PUSH
9370: LD_EXP 32
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: DIFF
9379: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9380: LD_VAR 0 5
9384: PPUSH
9385: LD_EXP 25
9389: PPUSH
9390: CALL_OW 119
// if Givi then
9394: LD_EXP 26
9398: IFFALSE 9416
// ComTurnUnit ( Heike , Givi ) else
9400: LD_EXP 25
9404: PPUSH
9405: LD_EXP 26
9409: PPUSH
9410: CALL_OW 119
9414: GO 9434
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9416: LD_EXP 25
9420: PPUSH
9421: LD_VAR 0 5
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9434: LD_EXP 25
9438: PPUSH
9439: LD_STRING DH-Start-1
9441: PPUSH
9442: CALL_OW 88
// if Givi then
9446: LD_EXP 26
9450: IFFALSE 9497
// begin Say ( Givi , DG-Start-2 ) ;
9452: LD_EXP 26
9456: PPUSH
9457: LD_STRING DG-Start-2
9459: PPUSH
9460: CALL_OW 88
// if not Mike then
9464: LD_EXP 27
9468: NOT
9469: IFFALSE 9495
// begin Say ( Givi , DG-Start-b-3 ) ;
9471: LD_EXP 26
9475: PPUSH
9476: LD_STRING DG-Start-b-3
9478: PPUSH
9479: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9483: LD_EXP 25
9487: PPUSH
9488: LD_STRING DH-Start-b-4
9490: PPUSH
9491: CALL_OW 88
// end ; end else
9495: GO 9562
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9497: LD_EXP 37
9501: PPUSH
9502: LD_INT 26
9504: PUSH
9505: LD_INT 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 72
9516: PUSH
9517: LD_INT 1
9519: ARRAY
9520: PPUSH
9521: LD_STRING DArm-Start-a-2
9523: PPUSH
9524: CALL_OW 88
9528: NOT
9529: IFFALSE 9562
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9531: LD_EXP 37
9535: PPUSH
9536: LD_INT 26
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 72
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: LD_STRING DArf-Start-a-2
9557: PPUSH
9558: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_INT 211
9569: PPUSH
9570: LD_INT 38
9572: PPUSH
9573: CALL_OW 118
// wait ( 0 0$1 ) ;
9577: LD_INT 35
9579: PPUSH
9580: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9584: LD_EXP 25
9588: PPUSH
9589: LD_STRING DH-Start-3
9591: PPUSH
9592: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9596: LD_EXP 25
9600: PPUSH
9601: LD_STRING DH-Start-4
9603: PPUSH
9604: CALL_OW 88
// InGameOff ;
9608: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9612: LD_STRING Prepare
9614: PPUSH
9615: CALL_OW 337
// SaveForQuickRestart ;
9619: CALL_OW 22
// wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if not Aviradze then
9630: LD_EXP 35
9634: NOT
9635: IFFALSE 9639
// exit ;
9637: GO 9879
// SetDir ( Aviradze , 4 ) ;
9639: LD_EXP 35
9643: PPUSH
9644: LD_INT 4
9646: PPUSH
9647: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9651: LD_EXP 35
9655: PPUSH
9656: LD_INT 225
9658: PPUSH
9659: LD_INT 33
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: CALL_OW 48
// for i := 1 to 2 do
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: DOUBLE
9675: LD_INT 1
9677: DEC
9678: ST_TO_ADDR
9679: LD_INT 2
9681: PUSH
9682: FOR_TO
9683: IFFALSE 9814
// begin uc_side := 2 ;
9685: LD_ADDR_OWVAR 20
9689: PUSH
9690: LD_INT 2
9692: ST_TO_ADDR
// uc_nation := 0 ;
9693: LD_ADDR_OWVAR 21
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9701: LD_INT 0
9703: PPUSH
9704: LD_INT 12
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 380
// hc_gallery :=  ;
9714: LD_ADDR_OWVAR 33
9718: PUSH
9719: LD_STRING 
9721: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9722: LD_ADDR_OWVAR 26
9726: PUSH
9727: LD_STRING Artudito
9729: PUSH
9730: LD_STRING Textur
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_VAR 0 2
9741: ARRAY
9742: ST_TO_ADDR
// un := CreateHuman ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9753: LD_VAR 0 3
9757: PPUSH
9758: LD_INT 224
9760: PUSH
9761: LD_INT 226
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_VAR 0 2
9772: ARRAY
9773: PPUSH
9774: LD_INT 31
9776: PUSH
9777: LD_INT 35
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_VAR 0 2
9788: ARRAY
9789: PPUSH
9790: LD_INT 0
9792: PPUSH
9793: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 215
9804: PPUSH
9805: LD_INT 36
9807: PPUSH
9808: CALL_OW 111
// end ;
9812: GO 9682
9814: POP
9815: POP
// hc_name :=  ;
9816: LD_ADDR_OWVAR 26
9820: PUSH
9821: LD_STRING 
9823: ST_TO_ADDR
// InitHc ;
9824: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9828: LD_EXP 35
9832: PPUSH
9833: LD_INT 215
9835: PPUSH
9836: LD_INT 36
9838: PPUSH
9839: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9843: LD_EXP 35
9847: PPUSH
9848: LD_STRING DA-Arrive-1
9850: PPUSH
9851: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9855: LD_EXP 25
9859: PPUSH
9860: LD_STRING DH-Arrive-2
9862: PPUSH
9863: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9867: LD_EXP 35
9871: PPUSH
9872: LD_STRING DA-Arrive-3
9874: PPUSH
9875: CALL_OW 88
// end ;
9879: LD_VAR 0 1
9883: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9884: LD_EXP 3
9888: IFFALSE 11247
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
9897: PPUSH
// begin DialogueOn ;
9898: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9902: LD_EXP 25
9906: PPUSH
9907: LD_STRING DH-base-1
9909: PPUSH
9910: CALL_OW 88
// if Markov then
9914: LD_EXP 32
9918: IFFALSE 9970
// begin Say ( Markov , DMar-base-2 ) ;
9920: LD_EXP 32
9924: PPUSH
9925: LD_STRING DMar-base-2
9927: PPUSH
9928: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9932: LD_EXP 32
9936: PPUSH
9937: LD_STRING DMar-base-3
9939: PPUSH
9940: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9944: LD_EXP 25
9948: PPUSH
9949: LD_STRING DH-base-4
9951: PPUSH
9952: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9956: LD_EXP 32
9960: PPUSH
9961: LD_STRING DMar-base-5
9963: PPUSH
9964: CALL_OW 88
// end else
9968: GO 10047
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9970: LD_EXP 37
9974: PPUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 1
9992: ARRAY
9993: PPUSH
9994: LD_STRING DArm-base-a-2
9996: PPUSH
9997: CALL_OW 88
10001: NOT
10002: IFFALSE 10035
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_INT 26
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 72
10023: PUSH
10024: LD_INT 1
10026: ARRAY
10027: PPUSH
10028: LD_STRING DArf-base-a-2
10030: PPUSH
10031: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
10035: LD_EXP 25
10039: PPUSH
10040: LD_STRING DH-base-a-3
10042: PPUSH
10043: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
10047: LD_EXP 35
10051: PPUSH
10052: LD_STRING DA-base-6
10054: PPUSH
10055: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
10059: LD_EXP 35
10063: PPUSH
10064: LD_STRING DA-base-7
10066: PPUSH
10067: CALL_OW 88
// DialogueOff ;
10071: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
10075: LD_STRING Flamethrower
10077: PPUSH
10078: CALL_OW 337
// wait ( 2 2$00 ) ;
10082: LD_INT 4200
10084: PPUSH
10085: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
10089: LD_EXP 34
10093: PUSH
10094: LD_EXP 27
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: LD_INT 203
10105: PPUSH
10106: LD_INT 37
10108: PPUSH
10109: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
10113: LD_INT 22
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 92
10125: PUSH
10126: LD_INT 203
10128: PUSH
10129: LD_INT 37
10131: PUSH
10132: LD_INT 10
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 69
10149: NOT
10150: IFFALSE 10190
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
10152: LD_EXP 34
10156: PUSH
10157: LD_EXP 27
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: LD_EXP 25
10170: PPUSH
10171: CALL_OW 250
10175: PPUSH
10176: LD_EXP 25
10180: PPUSH
10181: CALL_OW 251
10185: PPUSH
10186: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10190: LD_INT 35
10192: PPUSH
10193: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
10197: LD_INT 2
10199: PPUSH
10200: LD_EXP 34
10204: PPUSH
10205: CALL_OW 292
10209: PUSH
10210: LD_EXP 34
10214: PPUSH
10215: LD_EXP 25
10219: PPUSH
10220: CALL_OW 296
10224: PUSH
10225: LD_INT 8
10227: LESS
10228: PUSH
10229: LD_EXP 34
10233: PPUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: PPUSH
10263: LD_EXP 34
10267: PPUSH
10268: CALL_OW 74
10272: PPUSH
10273: CALL_OW 296
10277: PUSH
10278: LD_INT 7
10280: LESS
10281: OR
10282: AND
10283: PUSH
10284: LD_EXP 34
10288: PPUSH
10289: LD_INT 10
10291: PPUSH
10292: CALL_OW 308
10296: NOT
10297: AND
10298: IFFALSE 10190
// InGameOn ;
10300: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
10304: LD_EXP 34
10308: PPUSH
10309: CALL_OW 87
// if IsInUnit ( Heike ) then
10313: LD_EXP 25
10317: PPUSH
10318: CALL_OW 310
10322: IFFALSE 10333
// ComExitBuilding ( Heike ) ;
10324: LD_EXP 25
10328: PPUSH
10329: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10333: LD_EXP 34
10337: PUSH
10338: LD_EXP 27
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PPUSH
10347: LD_EXP 25
10351: PPUSH
10352: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_EXP 34
10365: PPUSH
10366: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10370: LD_INT 22
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 91
10382: PUSH
10383: LD_EXP 34
10387: PUSH
10388: LD_INT 10
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 3
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: IFFALSE 10441
// begin Say ( Kurt , DKs-scout-1 ) ;
10417: LD_EXP 34
10421: PPUSH
10422: LD_STRING DKs-scout-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10429: LD_EXP 25
10433: PPUSH
10434: LD_STRING DH-scout-2
10436: PPUSH
10437: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10441: LD_EXP 25
10445: PPUSH
10446: CALL_OW 85
// if IsInUnit ( Heike ) then
10450: LD_EXP 25
10454: PPUSH
10455: CALL_OW 310
10459: IFFALSE 10470
// ComExit ( Heike ) ;
10461: LD_EXP 25
10465: PPUSH
10466: CALL 867 0 1
// repeat wait ( 0 0$1 ) ;
10470: LD_INT 35
10472: PPUSH
10473: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10477: LD_EXP 25
10481: PPUSH
10482: LD_EXP 34
10486: PPUSH
10487: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10491: LD_EXP 25
10495: PPUSH
10496: LD_EXP 34
10500: PPUSH
10501: CALL_OW 296
10505: PUSH
10506: LD_INT 6
10508: LESS
10509: IFFALSE 10470
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10511: LD_EXP 34
10515: PUSH
10516: LD_EXP 27
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: LD_EXP 25
10529: PPUSH
10530: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10534: LD_EXP 34
10538: PPUSH
10539: LD_STRING DKs-scout-3
10541: PPUSH
10542: CALL_OW 88
// if Kaia then
10546: LD_EXP 30
10550: IFFALSE 10740
// begin if IsInUnit ( Kaia ) then
10552: LD_EXP 30
10556: PPUSH
10557: CALL_OW 310
10561: IFFALSE 10572
// ComExitBuilding ( Kaia ) ;
10563: LD_EXP 30
10567: PPUSH
10568: CALL_OW 122
// wait ( 0 0$1 ) ;
10572: LD_INT 35
10574: PPUSH
10575: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10579: LD_EXP 30
10583: PPUSH
10584: LD_EXP 34
10588: PPUSH
10589: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10593: LD_INT 35
10595: PPUSH
10596: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10600: LD_EXP 30
10604: PPUSH
10605: LD_EXP 34
10609: PPUSH
10610: CALL_OW 296
10614: PUSH
10615: LD_INT 6
10617: LESS
10618: IFFALSE 10593
// ComTurnUnit ( Kaia , Kurt ) ;
10620: LD_EXP 30
10624: PPUSH
10625: LD_EXP 34
10629: PPUSH
10630: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10634: LD_EXP 30
10638: PPUSH
10639: LD_STRING DK-scout-4
10641: PPUSH
10642: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10646: LD_EXP 34
10650: PPUSH
10651: LD_EXP 30
10655: PPUSH
10656: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10660: LD_EXP 34
10664: PPUSH
10665: LD_STRING DKs-scout-5
10667: PPUSH
10668: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10672: LD_EXP 30
10676: PPUSH
10677: LD_STRING DK-scout-6
10679: PPUSH
10680: CALL_OW 88
// if Mike then
10684: LD_EXP 27
10688: IFFALSE 10740
// begin Say ( Mike , DM-scout-7 ) ;
10690: LD_EXP 27
10694: PPUSH
10695: LD_STRING DM-scout-7
10697: PPUSH
10698: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10702: LD_EXP 30
10706: PPUSH
10707: LD_EXP 27
10711: PPUSH
10712: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10716: LD_EXP 30
10720: PPUSH
10721: LD_STRING DK-scout-8
10723: PPUSH
10724: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10728: LD_EXP 27
10732: PPUSH
10733: LD_STRING DM-scout-9
10735: PPUSH
10736: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10740: LD_INT 184
10742: PPUSH
10743: LD_INT 100
10745: PPUSH
10746: LD_INT 2
10748: PPUSH
10749: LD_INT 12
10751: NEG
10752: PPUSH
10753: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10757: LD_INT 184
10759: PPUSH
10760: LD_INT 100
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10770: LD_INT 184
10772: PPUSH
10773: LD_INT 100
10775: PPUSH
10776: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10780: LD_EXP 34
10784: PPUSH
10785: LD_STRING DKs-scout-10
10787: PPUSH
10788: CALL_OW 88
// wait ( 0 0$1 ) ;
10792: LD_INT 35
10794: PPUSH
10795: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10799: LD_INT 144
10801: PPUSH
10802: LD_INT 65
10804: PPUSH
10805: LD_INT 2
10807: PPUSH
10808: LD_INT 12
10810: NEG
10811: PPUSH
10812: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10816: LD_INT 144
10818: PPUSH
10819: LD_INT 65
10821: PPUSH
10822: LD_INT 2
10824: PPUSH
10825: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10829: LD_INT 144
10831: PPUSH
10832: LD_INT 65
10834: PPUSH
10835: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10839: LD_EXP 34
10843: PPUSH
10844: LD_STRING DKs-scout-11
10846: PPUSH
10847: CALL_OW 88
// wait ( 0 0$1 ) ;
10851: LD_INT 35
10853: PPUSH
10854: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10858: LD_EXP 34
10862: PPUSH
10863: CALL_OW 87
// if Mike and not Givi then
10867: LD_EXP 27
10871: PUSH
10872: LD_EXP 26
10876: NOT
10877: AND
10878: IFFALSE 10904
// begin Say ( Mike , DM-scout-a-1 ) ;
10880: LD_EXP 27
10884: PPUSH
10885: LD_STRING DM-scout-a-1
10887: PPUSH
10888: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10892: LD_EXP 25
10896: PPUSH
10897: LD_STRING DH-scout-a-2
10899: PPUSH
10900: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10904: LD_EXP 34
10908: PUSH
10909: LD_EXP 27
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: LD_INT 2
10920: PPUSH
10921: CALL_OW 235
// InGameOff ;
10925: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10929: LD_STRING Hill
10931: PPUSH
10932: CALL_OW 337
// allowToPatrol := true ;
10936: LD_ADDR_EXP 12
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10944: LD_INT 3150
10946: PPUSH
10947: CALL_OW 67
// InitHc ;
10951: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10955: LD_ADDR_VAR 0 1
10959: PUSH
10960: DOUBLE
10961: LD_INT 1
10963: DEC
10964: ST_TO_ADDR
10965: LD_INT 3
10967: PUSH
10968: LD_INT 3
10970: PUSH
10971: LD_INT 2
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: LD_OWVAR 67
10983: ARRAY
10984: PUSH
10985: FOR_TO
10986: IFFALSE 11245
// begin uc_side := 2 ;
10988: LD_ADDR_OWVAR 20
10992: PUSH
10993: LD_INT 2
10995: ST_TO_ADDR
// uc_nation := 2 ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_INT 2
11003: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
11004: LD_INT 0
11006: PPUSH
11007: LD_INT 1
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: LD_INT 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: LD_VAR 0 1
11025: PUSH
11026: LD_INT 3
11028: MOD
11029: PUSH
11030: LD_INT 1
11032: PLUS
11033: ARRAY
11034: PPUSH
11035: LD_INT 3
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: PUSH
11049: LD_OWVAR 67
11053: ARRAY
11054: PPUSH
11055: CALL_OW 380
// un := CreateHuman ;
11059: LD_ADDR_VAR 0 2
11063: PUSH
11064: CALL_OW 44
11068: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
11069: LD_ADDR_EXP 37
11073: PUSH
11074: LD_EXP 37
11078: PUSH
11079: LD_VAR 0 2
11083: UNION
11084: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
11085: LD_INT 2
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: LD_INT 13
11093: PPUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 1
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_VAR 0 1
11108: PUSH
11109: LD_INT 2
11111: MOD
11112: PUSH
11113: LD_INT 1
11115: PLUS
11116: ARRAY
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: LD_INT 27
11123: PUSH
11124: LD_INT 25
11126: PUSH
11127: LD_INT 27
11129: PUSH
11130: LD_INT 23
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: LD_OWVAR 67
11143: PUSH
11144: LD_INT 0
11146: PPUSH
11147: LD_INT 1
11149: PPUSH
11150: CALL_OW 12
11154: PLUS
11155: ARRAY
11156: PPUSH
11157: LD_INT 77
11159: PPUSH
11160: CALL 429 0 7
// veh := CreateVehicle ;
11164: LD_ADDR_VAR 0 3
11168: PUSH
11169: CALL_OW 45
11173: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 2
11181: PPUSH
11182: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 178
11193: PPUSH
11194: LD_INT 2
11196: PPUSH
11197: LD_INT 2
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11207: LD_VAR 0 2
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11221: LD_VAR 0 2
11225: PPUSH
11226: LD_INT 183
11228: PPUSH
11229: LD_INT 11
11231: PPUSH
11232: CALL_OW 111
// wait ( 0 0$2 ) ;
11236: LD_INT 70
11238: PPUSH
11239: CALL_OW 67
// end ;
11243: GO 10985
11245: POP
11246: POP
// end ;
11247: PPOPN 3
11249: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11250: LD_EXP 4
11254: PUSH
11255: LD_EXP 35
11259: PPUSH
11260: CALL_OW 302
11264: AND
11265: IFFALSE 11314
11267: GO 11269
11269: DISABLE
// begin DialogueOn ;
11270: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11274: LD_EXP 35
11278: PPUSH
11279: LD_STRING DA-lab-1
11281: PPUSH
11282: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11286: LD_EXP 35
11290: PPUSH
11291: LD_STRING DA-lab-2
11293: PPUSH
11294: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11298: LD_EXP 25
11302: PPUSH
11303: LD_STRING DH-lab-3
11305: PPUSH
11306: CALL_OW 88
// DialogueOff ;
11310: CALL_OW 7
// end ;
11314: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11315: LD_INT 17
11317: PPUSH
11318: LD_INT 2
11320: PPUSH
11321: CALL_OW 321
11325: PUSH
11326: LD_INT 2
11328: EQUAL
11329: IFFALSE 11461
11331: GO 11333
11333: DISABLE
11334: LD_INT 0
11336: PPUSH
// begin DialogueOn ;
11337: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11341: LD_EXP 35
11345: PPUSH
11346: LD_STRING DA-Cam-1
11348: PPUSH
11349: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11353: LD_EXP 35
11357: PPUSH
11358: LD_STRING DA-Cam-2
11360: PPUSH
11361: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11365: LD_EXP 35
11369: PPUSH
11370: LD_STRING DA-Cam-3
11372: PPUSH
11373: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11377: LD_EXP 25
11381: PPUSH
11382: LD_STRING DH-Cam-4
11384: PPUSH
11385: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11389: LD_EXP 30
11393: PPUSH
11394: LD_STRING DK-Cam-5
11396: PPUSH
11397: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11401: LD_EXP 30
11405: PPUSH
11406: LD_STRING DK-Cam-6
11408: PPUSH
11409: CALL_OW 88
// DialogueOff ;
11413: CALL_OW 7
// Query ( Camera ) ;
11417: LD_STRING Camera
11419: PPUSH
11420: CALL_OW 97
// hiddenCameraAllowed := true ;
11424: LD_ADDR_EXP 5
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// for i in camAreas do
11432: LD_ADDR_VAR 0 1
11436: PUSH
11437: LD_EXP 8
11441: PUSH
11442: FOR_IN
11443: IFFALSE 11459
// SetAreaMapShow ( i , 1 ) ;
11445: LD_VAR 0 1
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 424
11457: GO 11442
11459: POP
11460: POP
// end ;
11461: PPOPN 1
11463: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11464: LD_EXP 8
11468: NOT
11469: PUSH
11470: LD_EXP 5
11474: AND
11475: IFFALSE 11573
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
// begin stop_talking := true ;
11483: LD_ADDR_OWVAR 56
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 21
11508: PUSH
11509: LD_INT 1
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 23
11518: PUSH
11519: LD_INT 2
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: PPUSH
11531: CALL_OW 69
11535: PUSH
11536: FOR_IN
11537: IFFALSE 11556
// AddExperience ( i , 2 , 450 ) ;
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_INT 2
11546: PPUSH
11547: LD_INT 450
11549: PPUSH
11550: CALL_OW 492
11554: GO 11536
11556: POP
11557: POP
// stop_talking := false ;
11558: LD_ADDR_OWVAR 56
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11566: LD_STRING ACH_CAMERA
11568: PPUSH
11569: CALL_OW 543
// end ;
11573: PPOPN 1
11575: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11576: LD_EXP 9
11580: PUSH
11581: LD_EXP 11
11585: NOT
11586: AND
11587: IFFALSE 11646
11589: GO 11591
11591: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11592: LD_EXP 9
11596: PPUSH
11597: CALL_OW 250
11601: PPUSH
11602: LD_EXP 9
11606: PPUSH
11607: CALL_OW 251
11611: PPUSH
11612: LD_INT 2
11614: PPUSH
11615: LD_INT 6
11617: NEG
11618: PPUSH
11619: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11623: LD_EXP 9
11627: PPUSH
11628: CALL_OW 87
// wait ( 0 0$1 ) ;
11632: LD_INT 35
11634: PPUSH
11635: CALL_OW 67
// YouLost ( Spotted ) ;
11639: LD_STRING Spotted
11641: PPUSH
11642: CALL_OW 104
// end ;
11646: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11647: LD_INT 3
11649: PUSH
11650: LD_INT 6
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PPUSH
11657: LD_INT 2
11659: PPUSH
11660: LD_EXP 47
11664: PPUSH
11665: CALL 2049 0 3
11669: IFFALSE 11702
11671: GO 11673
11673: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11674: LD_ADDR_EXP 9
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: LD_INT 6
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PPUSH
11689: LD_INT 2
11691: PPUSH
11692: LD_EXP 47
11696: PPUSH
11697: CALL 2049 0 3
11701: ST_TO_ADDR
11702: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11703: LD_INT 22
11705: PUSH
11706: LD_INT 6
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 32
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 3
11725: PUSH
11726: LD_INT 24
11728: PUSH
11729: LD_INT 1000
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: IFFALSE 11810
11751: GO 11753
11753: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11754: LD_ADDR_EXP 9
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 6
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_INT 32
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 3
11781: PUSH
11782: LD_INT 24
11784: PUSH
11785: LD_INT 1000
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 69
11805: PUSH
11806: LD_INT 1
11808: ARRAY
11809: ST_TO_ADDR
11810: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11811: LD_EXP 9
11815: IFFALSE 12047
11817: GO 11819
11819: DISABLE
11820: LD_INT 0
11822: PPUSH
11823: PPUSH
11824: PPUSH
11825: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11826: LD_ADDR_VAR 0 4
11830: PUSH
11831: LD_EXP 42
11835: PUSH
11836: LD_EXP 44
11840: PUSH
11841: LD_EXP 45
11845: UNION
11846: PPUSH
11847: LD_INT 3
11849: PUSH
11850: LD_INT 25
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 72
11868: UNION
11869: ST_TO_ADDR
// for i in noncombat do
11870: LD_ADDR_VAR 0 1
11874: PUSH
11875: LD_VAR 0 4
11879: PUSH
11880: FOR_IN
11881: IFFALSE 11977
// begin if IsInUnit ( i ) then
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 310
11892: IFFALSE 11903
// ComExitBuilding ( i ) ;
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11903: LD_VAR 0 1
11907: PPUSH
11908: LD_INT 114
11910: PPUSH
11911: LD_INT 97
11913: PPUSH
11914: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11918: LD_VAR 0 1
11922: PPUSH
11923: LD_INT 99
11925: PPUSH
11926: LD_INT 128
11928: PPUSH
11929: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11933: LD_VAR 0 1
11937: PPUSH
11938: LD_INT 91
11940: PPUSH
11941: LD_INT 145
11943: PPUSH
11944: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11948: LD_VAR 0 1
11952: PPUSH
11953: LD_INT 82
11955: PPUSH
11956: LD_INT 153
11958: PPUSH
11959: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: LD_INT 16
11970: PPUSH
11971: CALL_OW 173
// end ;
11975: GO 11880
11977: POP
11978: POP
// if not allowHeikeAttack then
11979: LD_EXP 11
11983: NOT
11984: IFFALSE 11988
// exit ;
11986: GO 12047
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11988: LD_EXP 40
11992: PPUSH
11993: LD_STRING D9a-Kur-1
11995: PPUSH
11996: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
12000: LD_EXP 43
12004: PPUSH
12005: LD_STRING D9a-Bur-1
12007: PPUSH
12008: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
12012: LD_EXP 40
12016: PPUSH
12017: LD_STRING D9a-Kur-2
12019: PPUSH
12020: CALL_OW 94
// omicronFall := true ;
12024: LD_ADDR_EXP 13
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12032: LD_INT 105
12034: PPUSH
12035: CALL_OW 67
// retreatFromOmicron := true ;
12039: LD_ADDR_EXP 20
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// end ;
12047: PPOPN 4
12049: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
12050: LD_INT 16
12052: PPUSH
12053: LD_INT 3
12055: PUSH
12056: LD_INT 22
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 23
12072: PUSH
12073: LD_INT 3
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PPUSH
12084: CALL_OW 70
12088: IFFALSE 12171
12090: GO 12092
12092: DISABLE
12093: LD_INT 0
12095: PPUSH
// begin enable ;
12096: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_INT 16
12104: PPUSH
12105: LD_INT 3
12107: PUSH
12108: LD_INT 22
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 23
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PPUSH
12136: CALL_OW 70
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12169
// begin escapeCounter := escapeCounter + 1 ;
12144: LD_ADDR_EXP 19
12148: PUSH
12149: LD_EXP 19
12153: PUSH
12154: LD_INT 1
12156: PLUS
12157: ST_TO_ADDR
// RemoveUnit ( i ) ;
12158: LD_VAR 0 1
12162: PPUSH
12163: CALL_OW 64
// end ;
12167: GO 12141
12169: POP
12170: POP
// end ;
12171: PPOPN 1
12173: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12174: LD_OWVAR 1
12178: PUSH
12179: LD_INT 13650
12181: PUSH
12182: LD_INT 0
12184: PPUSH
12185: LD_INT 3150
12187: PPUSH
12188: CALL_OW 12
12192: PLUS
12193: GREATEREQUAL
12194: IFFALSE 12203
12196: GO 12198
12198: DISABLE
// SmallAmericanReinforcements ;
12199: CALL 7606 0 0
12203: END
// every 0 0$1 trigger tick >= 9 9$15 do
12204: LD_OWVAR 1
12208: PUSH
12209: LD_INT 19425
12211: GREATEREQUAL
12212: IFFALSE 12277
12214: GO 12216
12216: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12217: LD_EXP 48
12221: PPUSH
12222: LD_INT 21
12224: PUSH
12225: LD_INT 2
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 72
12236: PPUSH
12237: LD_INT 62
12239: PPUSH
12240: LD_INT 22
12242: PPUSH
12243: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12247: LD_EXP 49
12251: PPUSH
12252: LD_INT 69
12254: PPUSH
12255: LD_INT 27
12257: PPUSH
12258: CALL_OW 111
// wait ( 1 1$00 ) ;
12262: LD_INT 2100
12264: PPUSH
12265: CALL_OW 67
// startAttackOnOmicron := true ;
12269: LD_ADDR_EXP 6
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// end ;
12277: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12278: LD_EXP 22
12282: PUSH
12283: LD_INT 0
12285: EQUAL
12286: IFFALSE 14293
12288: GO 12290
12290: DISABLE
12291: LD_INT 0
12293: PPUSH
12294: PPUSH
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12300: LD_INT 5
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 343
// PrepareOmarForces ;
12310: CALL 2619 0 0
// wait ( 0 0$03 ) ;
12314: LD_INT 105
12316: PPUSH
12317: CALL_OW 67
// allowHeikeAttack := true ;
12321: LD_ADDR_EXP 11
12325: PUSH
12326: LD_INT 1
12328: ST_TO_ADDR
// activeGrishkoAI := false ;
12329: LD_ADDR_EXP 10
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// if not hillBase then
12337: LD_EXP 15
12341: NOT
12342: IFFALSE 12351
// ChangeMissionObjectives ( HillDone ) ;
12344: LD_STRING HillDone
12346: PPUSH
12347: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12351: LD_EXP 33
12355: PPUSH
12356: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12360: LD_ADDR_VAR 0 1
12364: PUSH
12365: LD_INT 22
12367: PUSH
12368: LD_INT 2
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 21
12377: PUSH
12378: LD_INT 1
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PUSH
12394: FOR_IN
12395: IFFALSE 12419
// if HasTask ( i ) then
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 314
12406: IFFALSE 12417
// ComHold ( i ) ;
12408: LD_VAR 0 1
12412: PPUSH
12413: CALL_OW 140
12417: GO 12394
12419: POP
12420: POP
// DialogueOn ;
12421: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12425: LD_EXP 33
12429: PPUSH
12430: LD_STRING DO-assault-1
12432: PPUSH
12433: CALL_OW 94
// DialogueOff ;
12437: CALL_OW 7
// game_speed := 4 ;
12441: LD_ADDR_OWVAR 65
12445: PUSH
12446: LD_INT 4
12448: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12449: LD_ADDR_VAR 0 1
12453: PUSH
12454: LD_EXP 46
12458: PPUSH
12459: LD_INT 3
12461: PUSH
12462: LD_INT 54
12464: PUSH
12465: EMPTY
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PPUSH
12472: CALL_OW 72
12476: PUSH
12477: FOR_IN
12478: IFFALSE 12497
// ComMoveXY ( i , 226 , 114 ) ;
12480: LD_VAR 0 1
12484: PPUSH
12485: LD_INT 226
12487: PPUSH
12488: LD_INT 114
12490: PPUSH
12491: CALL_OW 111
12495: GO 12477
12497: POP
12498: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12499: LD_EXP 41
12503: PPUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 6
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 30
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PPUSH
12533: LD_EXP 41
12537: PPUSH
12538: CALL_OW 74
12542: PPUSH
12543: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12547: LD_STRING Attack
12549: PPUSH
12550: CALL_OW 337
// music_class := music_combat ;
12554: LD_ADDR_OWVAR 72
12558: PUSH
12559: LD_INT 1
12561: ST_TO_ADDR
// music_nat := 4 ;
12562: LD_ADDR_OWVAR 71
12566: PUSH
12567: LD_INT 4
12569: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12570: LD_INT 5
12572: PPUSH
12573: LD_EXP 41
12577: PPUSH
12578: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12582: LD_INT 6
12584: PPUSH
12585: LD_EXP 38
12589: PPUSH
12590: LD_INT 25
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 72
12604: PUSH
12605: LD_INT 4
12607: ARRAY
12608: PPUSH
12609: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_EXP 38
12622: PPUSH
12623: LD_INT 3
12625: PUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 4
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: PUSH
12645: FOR_IN
12646: IFFALSE 12665
// ComAgressiveMove ( i , 221 , 110 ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: LD_INT 221
12655: PPUSH
12656: LD_INT 110
12658: PPUSH
12659: CALL_OW 114
12663: GO 12645
12665: POP
12666: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12667: LD_EXP 38
12671: PPUSH
12672: LD_INT 25
12674: PUSH
12675: LD_INT 4
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 72
12686: PPUSH
12687: LD_INT 214
12689: PPUSH
12690: LD_INT 124
12692: PPUSH
12693: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12697: LD_EXP 38
12701: PPUSH
12702: LD_INT 25
12704: PUSH
12705: LD_INT 1
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 72
12716: PUSH
12717: LD_INT 4
12719: ARRAY
12720: PPUSH
12721: LD_INT 214
12723: PPUSH
12724: LD_INT 114
12726: PPUSH
12727: LD_INT 0
12729: PPUSH
12730: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12734: LD_EXP 41
12738: PPUSH
12739: LD_STRING D9-Gri-1
12741: PPUSH
12742: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12746: LD_EXP 40
12750: PPUSH
12751: LD_STRING D9-Kur-1
12753: PPUSH
12754: CALL_OW 94
// wait ( 0 0$1 ) ;
12758: LD_INT 35
12760: PPUSH
12761: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12765: LD_EXP 33
12769: PPUSH
12770: LD_INT 233
12772: PPUSH
12773: LD_INT 130
12775: PPUSH
12776: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12780: LD_EXP 41
12784: PPUSH
12785: LD_STRING D9-Gri-2
12787: PPUSH
12788: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12792: LD_EXP 40
12796: PPUSH
12797: LD_STRING D9-Kur-2
12799: PPUSH
12800: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12804: LD_EXP 41
12808: PPUSH
12809: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12813: LD_EXP 41
12817: PPUSH
12818: LD_INT 211
12820: PPUSH
12821: LD_INT 104
12823: PPUSH
12824: CALL_OW 171
// AddComHold ( Grishko ) ;
12828: LD_EXP 41
12832: PPUSH
12833: CALL_OW 200
// repeat wait ( 3 ) ;
12837: LD_INT 3
12839: PPUSH
12840: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12844: LD_EXP 41
12848: PPUSH
12849: CALL_OW 310
12853: NOT
12854: IFFALSE 12837
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12856: LD_EXP 38
12860: PPUSH
12861: LD_INT 34
12863: PUSH
12864: LD_INT 26
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PPUSH
12871: CALL_OW 72
12875: PPUSH
12876: LD_EXP 41
12880: PPUSH
12881: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12885: LD_EXP 38
12889: PPUSH
12890: LD_INT 34
12892: PUSH
12893: LD_INT 26
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PPUSH
12900: CALL_OW 72
12904: PPUSH
12905: LD_INT 215
12907: PPUSH
12908: LD_INT 106
12910: PPUSH
12911: CALL_OW 174
// repeat wait ( 3 ) ;
12915: LD_INT 3
12917: PPUSH
12918: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12922: LD_EXP 41
12926: PPUSH
12927: CALL_OW 256
12931: PUSH
12932: LD_INT 1000
12934: LESS
12935: IFFALSE 12915
// NormalAttack ( 5 , Grishko ) ;
12937: LD_INT 5
12939: PPUSH
12940: LD_EXP 41
12944: PPUSH
12945: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12949: LD_INT 6
12951: PPUSH
12952: LD_EXP 38
12956: PPUSH
12957: LD_INT 25
12959: PUSH
12960: LD_INT 1
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 72
12971: PUSH
12972: LD_INT 4
12974: ARRAY
12975: PPUSH
12976: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12980: LD_EXP 41
12984: PPUSH
12985: LD_STRING D9-Gri-3
12987: PPUSH
12988: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12992: LD_EXP 40
12996: PPUSH
12997: LD_STRING D9-Kur-3
12999: PPUSH
13000: CALL_OW 94
// music_class := music_auto ;
13004: LD_ADDR_OWVAR 72
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// music_nat := music_auto ;
13012: LD_ADDR_OWVAR 71
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// for i in omarSquad do
13020: LD_ADDR_VAR 0 1
13024: PUSH
13025: LD_EXP 38
13029: PUSH
13030: FOR_IN
13031: IFFALSE 13173
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
13033: LD_VAR 0 1
13037: PPUSH
13038: CALL_OW 247
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: PUSH
13047: LD_VAR 0 1
13051: PPUSH
13052: CALL_OW 256
13056: PUSH
13057: LD_INT 1000
13059: LESS
13060: AND
13061: IFFALSE 13127
// begin driver := IsDrivenBy ( i ) ;
13063: LD_ADDR_VAR 0 2
13067: PUSH
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 311
13077: ST_TO_ADDR
// veh := i ;
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: LD_VAR 0 1
13087: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13088: LD_VAR 0 2
13092: PPUSH
13093: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13097: LD_VAR 0 2
13101: PPUSH
13102: LD_VAR 0 3
13106: PPUSH
13107: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13111: LD_VAR 0 2
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: CALL_OW 180
// end else
13125: GO 13171
// if GetLives ( i ) < 500 then
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 256
13136: PUSH
13137: LD_INT 500
13139: LESS
13140: IFFALSE 13171
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13142: LD_EXP 38
13146: PPUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 4
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PPUSH
13157: CALL_OW 72
13161: PPUSH
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 188
// end ; end ;
13171: GO 13030
13173: POP
13174: POP
// repeat wait ( 0 0$1 ) ;
13175: LD_INT 35
13177: PPUSH
13178: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13182: LD_EXP 38
13186: PPUSH
13187: LD_INT 3
13189: PUSH
13190: LD_INT 24
13192: PUSH
13193: LD_INT 1000
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 2
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: CALL_OW 72
13222: NOT
13223: PUSH
13224: LD_EXP 38
13228: PPUSH
13229: LD_INT 3
13231: PUSH
13232: LD_INT 24
13234: PUSH
13235: LD_INT 250
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 72
13250: NOT
13251: AND
13252: IFFALSE 13175
// wait ( 0 0$2 ) ;
13254: LD_INT 70
13256: PPUSH
13257: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13261: LD_ADDR_VAR 0 5
13265: PUSH
13266: LD_EXP 38
13270: PPUSH
13271: LD_INT 58
13273: PUSH
13274: EMPTY
13275: LIST
13276: PUSH
13277: LD_INT 21
13279: PUSH
13280: LD_INT 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 72
13295: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13296: LD_ADDR_VAR 0 6
13300: PUSH
13301: LD_EXP 38
13305: PPUSH
13306: LD_INT 25
13308: PUSH
13309: LD_INT 3
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 3
13318: PUSH
13319: LD_INT 55
13321: PUSH
13322: EMPTY
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 72
13337: ST_TO_ADDR
// for i := 1 to tmp do
13338: LD_ADDR_VAR 0 1
13342: PUSH
13343: DOUBLE
13344: LD_INT 1
13346: DEC
13347: ST_TO_ADDR
13348: LD_VAR 0 5
13352: PUSH
13353: FOR_TO
13354: IFFALSE 13384
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13356: LD_VAR 0 6
13360: PUSH
13361: LD_VAR 0 1
13365: ARRAY
13366: PPUSH
13367: LD_VAR 0 5
13371: PUSH
13372: LD_VAR 0 1
13376: ARRAY
13377: PPUSH
13378: CALL_OW 120
13382: GO 13353
13384: POP
13385: POP
// wait ( 0 0$5 ) ;
13386: LD_INT 175
13388: PPUSH
13389: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13393: LD_EXP 38
13397: PPUSH
13398: LD_INT 199
13400: PPUSH
13401: LD_INT 141
13403: PPUSH
13404: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13408: LD_EXP 33
13412: PPUSH
13413: LD_INT 190
13415: PPUSH
13416: LD_INT 143
13418: PPUSH
13419: CALL_OW 114
// AddComHold ( Omar ) ;
13423: LD_EXP 33
13427: PPUSH
13428: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13432: LD_EXP 38
13436: PPUSH
13437: LD_INT 2
13439: PUSH
13440: LD_INT 25
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 25
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 72
13469: PPUSH
13470: LD_INT 161
13472: PPUSH
13473: LD_INT 130
13475: PPUSH
13476: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13480: LD_EXP 38
13484: PPUSH
13485: LD_INT 25
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 72
13499: PPUSH
13500: LD_INT 163
13502: PPUSH
13503: LD_INT 122
13505: PPUSH
13506: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13510: LD_EXP 38
13514: PPUSH
13515: LD_INT 25
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PPUSH
13525: CALL_OW 72
13529: PUSH
13530: LD_INT 4
13532: ARRAY
13533: PPUSH
13534: LD_INT 165
13536: PPUSH
13537: LD_INT 118
13539: PPUSH
13540: LD_INT 0
13542: PPUSH
13543: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13547: LD_EXP 38
13551: PPUSH
13552: LD_INT 25
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 72
13566: PUSH
13567: LD_INT 4
13569: ARRAY
13570: PPUSH
13571: LD_INT 159
13573: PPUSH
13574: LD_INT 116
13576: PPUSH
13577: LD_INT 0
13579: PPUSH
13580: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13584: LD_EXP 38
13588: PPUSH
13589: LD_INT 21
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 72
13603: PPUSH
13604: LD_INT 169
13606: PPUSH
13607: LD_INT 114
13609: PPUSH
13610: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13614: LD_INT 35
13616: PPUSH
13617: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13621: LD_ADDR_VAR 0 5
13625: PUSH
13626: LD_EXP 38
13630: PPUSH
13631: LD_INT 25
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 72
13645: ST_TO_ADDR
// for i in tmp do
13646: LD_ADDR_VAR 0 1
13650: PUSH
13651: LD_VAR 0 5
13655: PUSH
13656: FOR_IN
13657: IFFALSE 13754
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 256
13668: PUSH
13669: LD_INT 600
13671: LESS
13672: PUSH
13673: LD_VAR 0 1
13677: PPUSH
13678: LD_INT 161
13680: PPUSH
13681: LD_INT 130
13683: PPUSH
13684: CALL_OW 297
13688: PUSH
13689: LD_INT 6
13691: GREATER
13692: AND
13693: IFFALSE 13710
// ComMoveXY ( i , 161 , 130 ) ;
13695: LD_VAR 0 1
13699: PPUSH
13700: LD_INT 161
13702: PPUSH
13703: LD_INT 130
13705: PPUSH
13706: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 256
13719: PUSH
13720: LD_INT 1000
13722: EQUAL
13723: PUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 314
13733: NOT
13734: AND
13735: IFFALSE 13752
// ComAgressiveMove ( i , 160 , 109 ) ;
13737: LD_VAR 0 1
13741: PPUSH
13742: LD_INT 160
13744: PPUSH
13745: LD_INT 109
13747: PPUSH
13748: CALL_OW 114
// end ;
13752: GO 13656
13754: POP
13755: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13756: LD_ADDR_VAR 0 5
13760: PUSH
13761: LD_EXP 38
13765: PPUSH
13766: LD_INT 21
13768: PUSH
13769: LD_INT 2
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL_OW 72
13780: ST_TO_ADDR
// for i in tmp do
13781: LD_ADDR_VAR 0 1
13785: PUSH
13786: LD_VAR 0 5
13790: PUSH
13791: FOR_IN
13792: IFFALSE 14058
// begin tmp2 := IsDrivenBy ( i ) ;
13794: LD_ADDR_VAR 0 6
13798: PUSH
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 311
13808: ST_TO_ADDR
// if not tmp2 then
13809: LD_VAR 0 6
13813: NOT
13814: IFFALSE 13818
// continue ;
13816: GO 13791
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 256
13827: PUSH
13828: LD_INT 600
13830: GREATEREQUAL
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 110
13841: PUSH
13842: LD_INT 1
13844: EQUAL
13845: AND
13846: IFFALSE 13860
// SetTag ( i , 0 ) ;
13848: LD_VAR 0 1
13852: PPUSH
13853: LD_INT 0
13855: PPUSH
13856: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 256
13869: PUSH
13870: LD_INT 600
13872: GREATEREQUAL
13873: PUSH
13874: LD_VAR 0 1
13878: PPUSH
13879: CALL_OW 110
13883: NOT
13884: AND
13885: IFFALSE 13911
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13887: LD_VAR 0 1
13891: PPUSH
13892: LD_VAR 0 7
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 74
13906: PPUSH
13907: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 256
13920: PUSH
13921: LD_INT 600
13923: LESS
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 110
13934: NOT
13935: AND
13936: IFFALSE 13965
// begin SetTag ( i , 1 ) ;
13938: LD_VAR 0 1
13942: PPUSH
13943: LD_INT 1
13945: PPUSH
13946: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13950: LD_VAR 0 1
13954: PPUSH
13955: LD_INT 202
13957: PPUSH
13958: LD_INT 150
13960: PPUSH
13961: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 110
13974: PUSH
13975: LD_INT 1
13977: EQUAL
13978: PUSH
13979: LD_VAR 0 1
13983: PPUSH
13984: LD_INT 202
13986: PPUSH
13987: LD_INT 150
13989: PPUSH
13990: CALL_OW 297
13994: PUSH
13995: LD_INT 6
13997: LESS
13998: AND
13999: PUSH
14000: LD_VAR 0 6
14004: AND
14005: IFFALSE 14056
// begin ComExitVehicle ( tmp2 ) ;
14007: LD_VAR 0 6
14011: PPUSH
14012: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
14016: LD_VAR 0 6
14020: PPUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
14030: LD_VAR 0 6
14034: PPUSH
14035: LD_INT 700
14037: PPUSH
14038: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
14042: LD_VAR 0 6
14046: PPUSH
14047: LD_VAR 0 1
14051: PPUSH
14052: CALL_OW 180
// end ; end ;
14056: GO 13791
14058: POP
14059: POP
// until kirovDestroyed ;
14060: LD_EXP 16
14064: IFFALSE 13614
// repeat wait ( 0 0$1 ) ;
14066: LD_INT 35
14068: PPUSH
14069: CALL_OW 67
// for i in omarSquad union Omar do
14073: LD_ADDR_VAR 0 1
14077: PUSH
14078: LD_EXP 38
14082: PUSH
14083: LD_EXP 33
14087: UNION
14088: PUSH
14089: FOR_IN
14090: IFFALSE 14260
// if IsInArea ( i , southRoadArea ) then
14092: LD_VAR 0 1
14096: PPUSH
14097: LD_INT 15
14099: PPUSH
14100: CALL_OW 308
14104: IFFALSE 14117
// RemoveUnit ( i ) else
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 64
14115: GO 14258
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14117: LD_VAR 0 1
14121: PPUSH
14122: CALL_OW 257
14126: PUSH
14127: LD_INT 3
14129: EQUAL
14130: PUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: CALL_OW 310
14140: NOT
14141: AND
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_INT 5
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 24
14155: PUSH
14156: LD_INT 251
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 21
14165: PUSH
14166: LD_INT 2
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 58
14175: PUSH
14176: EMPTY
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PPUSH
14185: CALL_OW 69
14189: AND
14190: IFFALSE 14243
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14192: LD_VAR 0 1
14196: PPUSH
14197: LD_INT 22
14199: PUSH
14200: LD_INT 5
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 58
14219: PUSH
14220: EMPTY
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: CALL_OW 120
14241: GO 14258
// ComMoveXY ( i , 208 , 162 ) ;
14243: LD_VAR 0 1
14247: PPUSH
14248: LD_INT 208
14250: PPUSH
14251: LD_INT 162
14253: PPUSH
14254: CALL_OW 111
// end ;
14258: GO 14089
14260: POP
14261: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14262: LD_INT 22
14264: PUSH
14265: LD_INT 5
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: NOT
14291: IFFALSE 14066
// end ;
14293: PPOPN 7
14295: END
// every 0 0$1 trigger IsDead ( kirov ) do
14296: LD_INT 71
14298: PPUSH
14299: CALL_OW 301
14303: IFFALSE 14320
14305: GO 14307
14307: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14308: LD_EXP 25
14312: PPUSH
14313: LD_STRING DH-1-Kirov
14315: PPUSH
14316: CALL_OW 88
14320: END
// every 0 0$1 trigger See ( 2 , beria ) do
14321: LD_INT 2
14323: PPUSH
14324: LD_INT 106
14326: PPUSH
14327: CALL_OW 292
14331: IFFALSE 14348
14333: GO 14335
14335: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14336: LD_EXP 25
14340: PPUSH
14341: LD_STRING DH-1-Beria
14343: PPUSH
14344: CALL_OW 88
14348: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14349: LD_INT 2
14351: PPUSH
14352: LD_INT 112
14354: PPUSH
14355: CALL_OW 292
14359: IFFALSE 14604
14361: GO 14363
14363: DISABLE
// begin DialogueOn ;
14364: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14368: LD_INT 112
14370: PPUSH
14371: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14375: LD_EXP 25
14379: PPUSH
14380: LD_STRING DH-1-Kagan
14382: PPUSH
14383: CALL_OW 88
// if Kamil then
14387: LD_EXP 29
14391: IFFALSE 14429
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14393: LD_EXP 29
14397: PPUSH
14398: LD_STRING DKam-Kagan-2
14400: PPUSH
14401: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14405: LD_EXP 26
14409: PPUSH
14410: LD_STRING DG-Kagan-3
14412: PPUSH
14413: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14417: LD_EXP 26
14421: PPUSH
14422: LD_STRING DG-Kagan-4
14424: PPUSH
14425: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14429: LD_STRING KaganBase
14431: PPUSH
14432: CALL_OW 97
14436: PUSH
14437: LD_INT 1
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14540
14445: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14446: LD_EXP 25
14450: PPUSH
14451: LD_STRING DH-Kagan-5
14453: PPUSH
14454: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14458: LD_EXP 25
14462: PPUSH
14463: LD_STRING DH-Kagan-6
14465: PPUSH
14466: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14470: LD_EXP 36
14474: PPUSH
14475: LD_STRING DShar-Kagan-7
14477: PPUSH
14478: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14482: LD_EXP 25
14486: PPUSH
14487: LD_STRING DH-Kagan-8
14489: PPUSH
14490: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14494: LD_EXP 25
14498: PPUSH
14499: LD_STRING DH-Kagan-9
14501: PPUSH
14502: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14506: LD_EXP 36
14510: PPUSH
14511: LD_STRING DShar-Kagan-10
14513: PPUSH
14514: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14518: LD_EXP 25
14522: PPUSH
14523: LD_STRING DH-Kagan-11
14525: PPUSH
14526: CALL_OW 88
// kaganCaptured := true ;
14530: LD_ADDR_EXP 24
14534: PUSH
14535: LD_INT 1
14537: ST_TO_ADDR
// end ; 2 :
14538: GO 14600
14540: LD_INT 2
14542: DOUBLE
14543: EQUAL
14544: IFTRUE 14548
14546: GO 14599
14548: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
14549: LD_EXP 25
14553: PPUSH
14554: LD_STRING DH-Kagan-a-5
14556: PPUSH
14557: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14561: LD_EXP 25
14565: PPUSH
14566: LD_STRING DH-Kagan-a-6
14568: PPUSH
14569: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14573: LD_EXP 25
14577: PPUSH
14578: LD_STRING DH-Kagan-a-7
14580: PPUSH
14581: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14585: LD_EXP 26
14589: PPUSH
14590: LD_STRING DG-Kagan-a-8
14592: PPUSH
14593: CALL_OW 88
// end ; end ;
14597: GO 14600
14599: POP
// DialogueOff ;
14600: CALL_OW 7
// end ;
14604: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14605: LD_EXP 18
14609: PUSH
14610: LD_INT 112
14612: PPUSH
14613: CALL_OW 255
14617: PUSH
14618: LD_INT 2
14620: EQUAL
14621: OR
14622: IFFALSE 14634
14624: GO 14626
14626: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14627: LD_STRING KaganDone
14629: PPUSH
14630: CALL_OW 337
14634: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14635: LD_EXP 6
14639: PUSH
14640: LD_EXP 48
14644: PPUSH
14645: LD_INT 95
14647: PUSH
14648: LD_INT 19
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL_OW 72
14659: AND
14660: IFFALSE 14737
14662: GO 14664
14664: DISABLE
// begin DialogueOn ;
14665: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14669: LD_INT 63
14671: PPUSH
14672: LD_INT 32
14674: PPUSH
14675: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14679: LD_INT 63
14681: PPUSH
14682: LD_INT 32
14684: PPUSH
14685: LD_INT 2
14687: PPUSH
14688: LD_INT 12
14690: NEG
14691: PPUSH
14692: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14696: LD_EXP 25
14700: PPUSH
14701: LD_STRING DH-Omicron-1
14703: PPUSH
14704: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14708: LD_EXP 27
14712: PPUSH
14713: LD_STRING DM-Omicron-2
14715: PPUSH
14716: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14720: LD_INT 63
14722: PPUSH
14723: LD_INT 32
14725: PPUSH
14726: LD_INT 2
14728: PPUSH
14729: CALL_OW 331
// DialogueOff ;
14733: CALL_OW 7
// end ;
14737: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14738: LD_INT 2
14740: PPUSH
14741: LD_EXP 50
14745: PPUSH
14746: CALL_OW 292
14750: PUSH
14751: LD_EXP 50
14755: PPUSH
14756: CALL_OW 255
14760: PUSH
14761: LD_INT 2
14763: EQUAL
14764: OR
14765: PUSH
14766: LD_INT 106
14768: PPUSH
14769: CALL_OW 255
14773: PUSH
14774: LD_INT 2
14776: EQUAL
14777: OR
14778: PUSH
14779: LD_EXP 50
14783: PPUSH
14784: CALL_OW 302
14788: AND
14789: PUSH
14790: LD_EXP 25
14794: PPUSH
14795: CALL_OW 302
14799: AND
14800: PUSH
14801: LD_EXP 35
14805: PPUSH
14806: CALL_OW 302
14810: AND
14811: IFFALSE 15432
14813: GO 14815
14815: DISABLE
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
// begin DialogueOn ;
14823: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14827: LD_INT 111
14829: PPUSH
14830: LD_INT 90
14832: PPUSH
14833: LD_INT 2
14835: PPUSH
14836: LD_INT 6
14838: NEG
14839: PPUSH
14840: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14844: LD_INT 111
14846: PPUSH
14847: LD_INT 90
14849: PPUSH
14850: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14854: LD_EXP 35
14858: PPUSH
14859: LD_STRING DA-Cap-1
14861: PPUSH
14862: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14866: LD_EXP 25
14870: PPUSH
14871: LD_STRING DH-Cap-2
14873: PPUSH
14874: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14878: LD_INT 111
14880: PPUSH
14881: LD_INT 90
14883: PPUSH
14884: LD_INT 2
14886: PPUSH
14887: CALL_OW 331
// DialogueOff ;
14891: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14895: LD_INT 35
14897: PPUSH
14898: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) ;
14902: LD_EXP 17
14906: PUSH
14907: LD_INT 106
14909: PPUSH
14910: CALL_OW 255
14914: PUSH
14915: LD_INT 2
14917: EQUAL
14918: OR
14919: PUSH
14920: LD_EXP 50
14924: PPUSH
14925: CALL_OW 255
14929: PUSH
14930: LD_INT 2
14932: EQUAL
14933: OR
14934: PUSH
14935: LD_EXP 50
14939: PPUSH
14940: CALL_OW 302
14944: AND
14945: PUSH
14946: LD_EXP 35
14950: PPUSH
14951: CALL_OW 302
14955: AND
14956: PUSH
14957: LD_INT 2
14959: PPUSH
14960: CALL_OW 463
14964: NOT
14965: AND
14966: IFFALSE 14895
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_EXP 37
14977: PUSH
14978: LD_EXP 28
14982: PUSH
14983: LD_EXP 29
14987: PUSH
14988: LD_EXP 31
14992: PUSH
14993: LD_EXP 30
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: UNION
15004: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15005: LD_ADDR_VAR 0 2
15009: PUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: LD_INT 50
15017: PUSH
15018: EMPTY
15019: LIST
15020: PPUSH
15021: CALL_OW 72
15025: ST_TO_ADDR
// if tmp < 2 then
15026: LD_VAR 0 2
15030: PUSH
15031: LD_INT 2
15033: LESS
15034: IFFALSE 15046
// q := 2 else
15036: LD_ADDR_VAR 0 4
15040: PUSH
15041: LD_INT 2
15043: ST_TO_ADDR
15044: GO 15059
// q := Query ( LabCap ) ;
15046: LD_ADDR_VAR 0 4
15050: PUSH
15051: LD_STRING LabCap
15053: PPUSH
15054: CALL_OW 97
15058: ST_TO_ADDR
// case q of 1 :
15059: LD_VAR 0 4
15063: PUSH
15064: LD_INT 1
15066: DOUBLE
15067: EQUAL
15068: IFTRUE 15072
15070: GO 15396
15072: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15073: LD_INT 2
15075: PPUSH
15076: LD_EXP 50
15080: PPUSH
15081: CALL_OW 471
// labCaptured := true ;
15085: LD_ADDR_EXP 21
15089: PUSH
15090: LD_INT 1
15092: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15093: LD_EXP 25
15097: PPUSH
15098: LD_STRING DH-Cap-a-1
15100: PPUSH
15101: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15105: LD_EXP 35
15109: PPUSH
15110: LD_STRING DA-Cap-a-2
15112: PPUSH
15113: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
15117: LD_ADDR_VAR 0 5
15121: PUSH
15122: LD_EXP 35
15126: PUSH
15127: LD_INT -3
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT -2
15136: PUSH
15137: LD_INT -4
15139: PUSH
15140: LD_EXP 25
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: ADD
15150: PUSH
15151: LD_INT -3
15153: PUSH
15154: EMPTY
15155: LIST
15156: ADD
15157: PUSH
15158: LD_VAR 0 2
15162: ADD
15163: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15164: LD_ADDR_VAR 0 3
15168: PUSH
15169: LD_STRING Select two characters to go with Aviradze
15171: PPUSH
15172: LD_INT 2
15174: PPUSH
15175: LD_INT 2
15177: PPUSH
15178: LD_VAR 0 5
15182: PPUSH
15183: EMPTY
15184: PPUSH
15185: CALL_OW 42
15189: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15190: LD_EXP 50
15194: PPUSH
15195: LD_INT 8
15197: PPUSH
15198: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15202: LD_EXP 35
15206: PPUSH
15207: LD_INT 8
15209: PPUSH
15210: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15214: LD_ADDR_EXP 39
15218: PUSH
15219: LD_EXP 35
15223: PUSH
15224: EMPTY
15225: LIST
15226: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15227: LD_EXP 35
15231: PPUSH
15232: CALL_OW 310
15236: IFFALSE 15247
// ComExit ( Aviradze ) ;
15238: LD_EXP 35
15242: PPUSH
15243: CALL 867 0 1
// wait ( 3 ) ;
15247: LD_INT 3
15249: PPUSH
15250: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15254: LD_EXP 35
15258: PPUSH
15259: LD_EXP 50
15263: PPUSH
15264: CALL_OW 120
// for i := 1 to 2 do
15268: LD_ADDR_VAR 0 1
15272: PUSH
15273: DOUBLE
15274: LD_INT 1
15276: DEC
15277: ST_TO_ADDR
15278: LD_INT 2
15280: PUSH
15281: FOR_TO
15282: IFFALSE 15385
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15284: LD_ADDR_EXP 39
15288: PUSH
15289: LD_EXP 39
15293: PUSH
15294: LD_VAR 0 3
15298: PUSH
15299: LD_VAR 0 1
15303: ARRAY
15304: UNION
15305: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15306: LD_VAR 0 3
15310: PUSH
15311: LD_VAR 0 1
15315: ARRAY
15316: PPUSH
15317: LD_INT 8
15319: PPUSH
15320: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15324: LD_VAR 0 3
15328: PUSH
15329: LD_VAR 0 1
15333: ARRAY
15334: PPUSH
15335: CALL_OW 310
15339: IFFALSE 15356
// ComExit ( tmp2 [ i ] ) ;
15341: LD_VAR 0 3
15345: PUSH
15346: LD_VAR 0 1
15350: ARRAY
15351: PPUSH
15352: CALL 867 0 1
// wait ( 3 ) ;
15356: LD_INT 3
15358: PPUSH
15359: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15363: LD_VAR 0 3
15367: PUSH
15368: LD_VAR 0 1
15372: ARRAY
15373: PPUSH
15374: LD_EXP 50
15378: PPUSH
15379: CALL_OW 120
// end ;
15383: GO 15281
15385: POP
15386: POP
// SetAchievement ( ACH_LAB ) ;
15387: LD_STRING ACH_LAB
15389: PPUSH
15390: CALL_OW 543
// end ; 2 :
15394: GO 15432
15396: LD_INT 2
15398: DOUBLE
15399: EQUAL
15400: IFTRUE 15404
15402: GO 15431
15404: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15405: LD_EXP 25
15409: PPUSH
15410: LD_STRING DH-Cap-b-1
15412: PPUSH
15413: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15417: LD_EXP 35
15421: PPUSH
15422: LD_STRING DA-Cap-b-2
15424: PPUSH
15425: CALL_OW 88
// end ; end ;
15429: GO 15432
15431: POP
// end ;
15432: PPOPN 5
15434: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15435: LD_INT 10
15437: PPUSH
15438: LD_INT 22
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 30
15450: PUSH
15451: LD_INT 31
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 70
15466: PUSH
15467: LD_INT 2
15469: GREATEREQUAL
15470: IFFALSE 15482
15472: GO 15474
15474: DISABLE
// SetAchievement ( ACH_KING ) ;
15475: LD_STRING ACH_KING
15477: PPUSH
15478: CALL_OW 543
15482: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15483: LD_EXP 11
15487: NOT
15488: PUSH
15489: LD_INT 10
15491: PPUSH
15492: LD_INT 22
15494: PUSH
15495: LD_INT 2
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: LD_INT 31
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 30
15517: PUSH
15518: LD_INT 4
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 70
15538: AND
15539: IFFALSE 15559
15541: GO 15543
15543: DISABLE
// begin hillBase := true ;
15544: LD_ADDR_EXP 15
15548: PUSH
15549: LD_INT 1
15551: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15552: LD_STRING HillDone
15554: PPUSH
15555: CALL_OW 337
// end ;
15559: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15560: LD_EXP 30
15564: PUSH
15565: LD_EXP 30
15569: PPUSH
15570: CALL_OW 256
15574: PUSH
15575: LD_INT 3
15577: LESS
15578: AND
15579: IFFALSE 15625
15581: GO 15583
15583: DISABLE
// begin DialogueOn ;
15584: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15588: LD_EXP 30
15592: PPUSH
15593: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15597: LD_EXP 30
15601: PPUSH
15602: LD_STRING DK-Kkilled-1
15604: PPUSH
15605: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15609: LD_EXP 25
15613: PPUSH
15614: LD_STRING DH-Kkilled-2
15616: PPUSH
15617: CALL_OW 88
// DialogueOff ;
15621: CALL_OW 7
// end ;
15625: END
// every 0 0$1 trigger kaiaKilledByRussian do
15626: LD_EXP 23
15630: IFFALSE 15647
15632: GO 15634
15634: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15635: LD_EXP 25
15639: PPUSH
15640: LD_STRING DH-Kkilled-3
15642: PPUSH
15643: CALL_OW 88
15647: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15648: LD_EXP 16
15652: PUSH
15653: LD_INT 106
15655: PPUSH
15656: CALL_OW 255
15660: PUSH
15661: LD_INT 2
15663: EQUAL
15664: PUSH
15665: LD_EXP 17
15669: OR
15670: AND
15671: PUSH
15672: LD_EXP 18
15676: PUSH
15677: LD_EXP 24
15681: PUSH
15682: LD_INT 112
15684: PPUSH
15685: CALL_OW 255
15689: PUSH
15690: LD_INT 2
15692: EQUAL
15693: AND
15694: OR
15695: AND
15696: IFFALSE 16878
15698: GO 15700
15700: DISABLE
15701: LD_INT 0
15703: PPUSH
15704: PPUSH
15705: PPUSH
15706: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15707: LD_STRING GoToWest
15709: PPUSH
15710: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15714: LD_INT 17
15716: PPUSH
15717: LD_INT 1
15719: PPUSH
15720: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15724: LD_INT 35
15726: PPUSH
15727: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15731: LD_ADDR_VAR 0 2
15735: PUSH
15736: LD_INT 17
15738: PPUSH
15739: LD_INT 22
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 21
15764: PUSH
15765: LD_INT 2
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 3
15774: PUSH
15775: LD_INT 58
15777: PUSH
15778: EMPTY
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 70
15802: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 3
15820: PUSH
15821: LD_INT 55
15823: PUSH
15824: EMPTY
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 2
15833: PUSH
15834: LD_INT 21
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 21
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 58
15859: PUSH
15860: EMPTY
15861: LIST
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15886: LD_VAR 0 2
15890: PUSH
15891: LD_INT 0
15893: PLUS
15894: PUSH
15895: LD_VAR 0 3
15899: PUSH
15900: LD_INT 0
15902: PLUS
15903: EQUAL
15904: IFFALSE 15724
// SaveCharacters ( Heike , 04_1_Heike ) ;
15906: LD_EXP 25
15910: PPUSH
15911: LD_STRING 04_1_Heike
15913: PPUSH
15914: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15918: LD_EXP 35
15922: PUSH
15923: LD_EXP 35
15927: PUSH
15928: LD_EXP 39
15932: IN
15933: NOT
15934: AND
15935: IFFALSE 15951
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15937: LD_EXP 35
15941: PPUSH
15942: LD_STRING 04_1_Aviradze
15944: PPUSH
15945: CALL_OW 38
15949: GO 15969
// if Aviradze then
15951: LD_EXP 35
15955: IFFALSE 15969
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15957: LD_EXP 35
15961: PPUSH
15962: LD_STRING 04_1_Aviradze_L
15964: PPUSH
15965: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15969: LD_EXP 28
15973: PUSH
15974: LD_EXP 28
15978: PUSH
15979: LD_EXP 39
15983: IN
15984: NOT
15985: AND
15986: IFFALSE 16002
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15988: LD_EXP 28
15992: PPUSH
15993: LD_STRING 04_1_Ibrahim
15995: PPUSH
15996: CALL_OW 38
16000: GO 16020
// if Ibrahim then
16002: LD_EXP 28
16006: IFFALSE 16020
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16008: LD_EXP 28
16012: PPUSH
16013: LD_STRING 04_1_Ibrahim_L
16015: PPUSH
16016: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16020: LD_EXP 29
16024: PUSH
16025: LD_EXP 29
16029: PUSH
16030: LD_EXP 39
16034: IN
16035: NOT
16036: AND
16037: IFFALSE 16053
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16039: LD_EXP 29
16043: PPUSH
16044: LD_STRING 04_1_Kamil
16046: PPUSH
16047: CALL_OW 38
16051: GO 16071
// if Kamil then
16053: LD_EXP 29
16057: IFFALSE 16071
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16059: LD_EXP 29
16063: PPUSH
16064: LD_STRING 04_1_Kamil_L
16066: PPUSH
16067: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16071: LD_EXP 31
16075: PUSH
16076: LD_EXP 31
16080: PUSH
16081: LD_EXP 39
16085: IN
16086: NOT
16087: AND
16088: IFFALSE 16104
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16090: LD_EXP 31
16094: PPUSH
16095: LD_STRING 04_1_Sophia
16097: PPUSH
16098: CALL_OW 38
16102: GO 16122
// if Sophia then
16104: LD_EXP 31
16108: IFFALSE 16122
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16110: LD_EXP 31
16114: PPUSH
16115: LD_STRING 04_1_Sophia_L
16117: PPUSH
16118: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16122: LD_EXP 30
16126: PUSH
16127: LD_EXP 30
16131: PUSH
16132: LD_EXP 39
16136: IN
16137: NOT
16138: AND
16139: IFFALSE 16155
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16141: LD_EXP 30
16145: PPUSH
16146: LD_STRING 04_1_Kaia
16148: PPUSH
16149: CALL_OW 38
16153: GO 16173
// if Kaia then
16155: LD_EXP 30
16159: IFFALSE 16173
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16161: LD_EXP 30
16165: PPUSH
16166: LD_STRING 04_1_Kaia_L
16168: PPUSH
16169: CALL_OW 38
// if Givi then
16173: LD_EXP 26
16177: IFFALSE 16191
// SaveCharacters ( Givi , 04_1_Givi ) ;
16179: LD_EXP 26
16183: PPUSH
16184: LD_STRING 04_1_Givi
16186: PPUSH
16187: CALL_OW 38
// if Mike then
16191: LD_EXP 27
16195: IFFALSE 16209
// SaveCharacters ( Mike , 04_1_Mike ) ;
16197: LD_EXP 27
16201: PPUSH
16202: LD_STRING 04_1_Mike
16204: PPUSH
16205: CALL_OW 38
// if Markov then
16209: LD_EXP 32
16213: IFFALSE 16227
// SaveCharacters ( Markov , 04_1_Markov ) ;
16215: LD_EXP 32
16219: PPUSH
16220: LD_STRING 04_1_Markov
16222: PPUSH
16223: CALL_OW 38
// if Kurt then
16227: LD_EXP 34
16231: IFFALSE 16245
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
16233: LD_EXP 34
16237: PPUSH
16238: LD_STRING 04_1_Kurt
16240: PPUSH
16241: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
16245: LD_EXP 37
16249: PUSH
16250: LD_EXP 39
16254: DIFF
16255: IFFALSE 16275
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16257: LD_EXP 37
16261: PUSH
16262: LD_EXP 39
16266: DIFF
16267: PPUSH
16268: LD_STRING 04_1_others
16270: PPUSH
16271: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16275: LD_EXP 39
16279: PUSH
16280: LD_EXP 37
16284: AND
16285: IFFALSE 16370
// begin tmp := [ ] ;
16287: LD_ADDR_VAR 0 2
16291: PUSH
16292: EMPTY
16293: ST_TO_ADDR
// for i in heikeSecondSquad do
16294: LD_ADDR_VAR 0 1
16298: PUSH
16299: LD_EXP 37
16303: PUSH
16304: FOR_IN
16305: IFFALSE 16350
// if i in aviradzeSquad then
16307: LD_VAR 0 1
16311: PUSH
16312: LD_EXP 39
16316: IN
16317: IFFALSE 16348
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_VAR 0 2
16333: PUSH
16334: LD_INT 1
16336: PLUS
16337: PPUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 1
16347: ST_TO_ADDR
16348: GO 16304
16350: POP
16351: POP
// if tmp then
16352: LD_VAR 0 2
16356: IFFALSE 16370
// SaveCharacters ( tmp , 04_1_others_L ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_STRING 04_1_others_L
16365: PPUSH
16366: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16370: LD_ADDR_VAR 0 2
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_INT 2
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 23
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 69
16403: ST_TO_ADDR
// if tmp then
16404: LD_VAR 0 2
16408: IFFALSE 16422
// SaveCharacters ( tmp , 04_1_apes ) ;
16410: LD_VAR 0 2
16414: PPUSH
16415: LD_STRING 04_1_apes
16417: PPUSH
16418: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16422: LD_ADDR_VAR 0 2
16426: PUSH
16427: LD_INT 17
16429: PPUSH
16430: LD_INT 21
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 70
16444: ST_TO_ADDR
// if tmp then
16445: LD_VAR 0 2
16449: IFFALSE 16743
// begin tmp2 := [ ] ;
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: EMPTY
16457: ST_TO_ADDR
// for i in tmp do
16458: LD_ADDR_VAR 0 1
16462: PUSH
16463: LD_VAR 0 2
16467: PUSH
16468: FOR_IN
16469: IFFALSE 16729
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 264
16480: PUSH
16481: LD_INT 32
16483: PUSH
16484: LD_INT 12
16486: PUSH
16487: LD_INT 51
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: IN
16495: IFFALSE 16632
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16497: LD_ADDR_VAR 0 4
16501: PUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: LD_INT 1
16509: PPUSH
16510: CALL_OW 289
16514: PUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: LD_INT 2
16522: PPUSH
16523: CALL_OW 289
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16532: LD_ADDR_VAR 0 3
16536: PUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: LD_VAR 0 3
16546: PUSH
16547: LD_INT 1
16549: PLUS
16550: PPUSH
16551: LD_VAR 0 1
16555: PPUSH
16556: CALL_OW 265
16560: PUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 262
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 263
16580: PUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 264
16590: PUSH
16591: LD_VAR 0 1
16595: PPUSH
16596: CALL_OW 248
16600: PUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 256
16610: PUSH
16611: LD_VAR 0 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: PPUSH
16625: CALL_OW 1
16629: ST_TO_ADDR
// end else
16630: GO 16727
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16632: LD_ADDR_VAR 0 3
16636: PUSH
16637: LD_VAR 0 3
16641: PPUSH
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 1
16649: PLUS
16650: PPUSH
16651: LD_VAR 0 1
16655: PPUSH
16656: CALL_OW 265
16660: PUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 262
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 263
16680: PUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: CALL_OW 264
16690: PUSH
16691: LD_VAR 0 1
16695: PPUSH
16696: CALL_OW 248
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 256
16710: PUSH
16711: EMPTY
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 1
16726: ST_TO_ADDR
16727: GO 16468
16729: POP
16730: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16731: LD_VAR 0 3
16735: PPUSH
16736: LD_STRING 04_1_Vehicles
16738: PPUSH
16739: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16743: LD_EXP 21
16747: PPUSH
16748: LD_STRING 04_1_RuLabCaptured
16750: PPUSH
16751: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16755: LD_EXP 19
16759: PPUSH
16760: LD_STRING 04_1_EscapeCounter
16762: PPUSH
16763: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16767: LD_EXP 15
16771: PPUSH
16772: LD_STRING 04_1_BaseHill
16774: PPUSH
16775: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16779: LD_OWVAR 1
16783: PPUSH
16784: LD_STRING 04_1_Time
16786: PPUSH
16787: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16791: LD_EXP 14
16795: PPUSH
16796: LD_STRING 04_1_DeadCounter
16798: PPUSH
16799: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16803: LD_EXP 24
16807: PUSH
16808: LD_INT 112
16810: PPUSH
16811: CALL_OW 255
16815: MUL
16816: PUSH
16817: LD_INT 2
16819: EQUAL
16820: PPUSH
16821: LD_STRING 04_1_KaganCaptured
16823: PPUSH
16824: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16828: LD_INT 22
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 34
16840: PUSH
16841: LD_INT 26
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: PUSH
16857: LD_INT 0
16859: PLUS
16860: PPUSH
16861: LD_STRING 04_1_Flamethrower
16863: PPUSH
16864: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16868: LD_INT 1
16870: PPUSH
16871: LD_STRING __x1\04_cont2
16873: PPUSH
16874: CALL_OW 340
// end ; end_of_file
16878: PPOPN 4
16880: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL_OW 266
16890: PUSH
16891: LD_INT 0
16893: EQUAL
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: CALL_OW 255
16904: PUSH
16905: LD_INT 2
16907: EQUAL
16908: AND
16909: IFFALSE 16919
// baseConstructed := true ;
16911: LD_ADDR_EXP 3
16915: PUSH
16916: LD_INT 1
16918: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL_OW 266
16928: PUSH
16929: LD_INT 6
16931: EQUAL
16932: PUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 255
16942: PUSH
16943: LD_INT 2
16945: EQUAL
16946: AND
16947: IFFALSE 16957
// labConstructed := true ;
16949: LD_ADDR_EXP 4
16953: PUSH
16954: LD_INT 1
16956: ST_TO_ADDR
// end ;
16957: PPOPN 1
16959: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16960: LD_VAR 0 1
16964: PUSH
16965: LD_EXP 25
16969: EQUAL
16970: IFFALSE 16979
// YouLost ( Heike ) ;
16972: LD_STRING Heike
16974: PPUSH
16975: CALL_OW 104
// if un = Omar then
16979: LD_VAR 0 1
16983: PUSH
16984: LD_EXP 33
16988: EQUAL
16989: IFFALSE 16998
// YouLost ( Omar ) ;
16991: LD_STRING Omar
16993: PPUSH
16994: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16998: LD_VAR 0 1
17002: PUSH
17003: LD_INT 22
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 23
17015: PUSH
17016: LD_INT 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PPUSH
17038: CALL_OW 69
17042: IN
17043: IFFALSE 17059
// loseCounter := loseCounter + 1 ;
17045: LD_ADDR_EXP 14
17049: PUSH
17050: LD_EXP 14
17054: PUSH
17055: LD_INT 1
17057: PLUS
17058: ST_TO_ADDR
// if un = omikron then
17059: LD_VAR 0 1
17063: PUSH
17064: LD_INT 64
17066: EQUAL
17067: IFFALSE 17077
// omicronFall := true ;
17069: LD_ADDR_EXP 13
17073: PUSH
17074: LD_INT 1
17076: ST_TO_ADDR
// if un = kirov then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_INT 71
17084: EQUAL
17085: IFFALSE 17102
// begin ChangeMissionObjectives ( KirovDone ) ;
17087: LD_STRING KirovDone
17089: PPUSH
17090: CALL_OW 337
// kirovDestroyed := true ;
17094: LD_ADDR_EXP 16
17098: PUSH
17099: LD_INT 1
17101: ST_TO_ADDR
// end ; if un = beria then
17102: LD_VAR 0 1
17106: PUSH
17107: LD_INT 106
17109: EQUAL
17110: IFFALSE 17127
// begin ChangeMissionObjectives ( BeriaDone ) ;
17112: LD_STRING BeriaDone
17114: PPUSH
17115: CALL_OW 337
// beriaDestroyed := true ;
17119: LD_ADDR_EXP 17
17123: PUSH
17124: LD_INT 1
17126: ST_TO_ADDR
// end ; if un = kagan then
17127: LD_VAR 0 1
17131: PUSH
17132: LD_INT 112
17134: EQUAL
17135: IFFALSE 17145
// kaganDestroyed := true ;
17137: LD_ADDR_EXP 18
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// if un in russianPatrol then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_EXP 47
17154: IN
17155: IFFALSE 17173
// russianPatrol := russianPatrol diff un ;
17157: LD_ADDR_EXP 47
17161: PUSH
17162: LD_EXP 47
17166: PUSH
17167: LD_VAR 0 1
17171: DIFF
17172: ST_TO_ADDR
// if un in russianOmicronAttackers then
17173: LD_VAR 0 1
17177: PUSH
17178: LD_EXP 48
17182: IN
17183: IFFALSE 17201
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17185: LD_ADDR_EXP 48
17189: PUSH
17190: LD_EXP 48
17194: PUSH
17195: LD_VAR 0 1
17199: DIFF
17200: ST_TO_ADDR
// end ;
17201: PPOPN 1
17203: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17209: LD_VAR 0 1
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_INT 4
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 22
17239: PUSH
17240: LD_INT 6
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 30
17255: PUSH
17256: LD_INT 32
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: IN
17272: IFFALSE 17445
// begin sol := UnitsInside ( un ) ;
17274: LD_ADDR_VAR 0 3
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 313
17288: ST_TO_ADDR
// if not sol then
17289: LD_VAR 0 3
17293: NOT
17294: IFFALSE 17298
// exit ;
17296: GO 17445
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17298: LD_ADDR_VAR 0 4
17302: PUSH
17303: LD_INT 22
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 255
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: LD_INT 30
17325: PUSH
17326: LD_INT 4
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 30
17335: PUSH
17336: LD_INT 5
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 69
17356: ST_TO_ADDR
// if not nearestBarracks then
17357: LD_VAR 0 4
17361: NOT
17362: IFFALSE 17366
// exit ;
17364: GO 17445
// for i in nearestBarracks do
17366: LD_ADDR_VAR 0 2
17370: PUSH
17371: LD_VAR 0 4
17375: PUSH
17376: FOR_IN
17377: IFFALSE 17412
// if UnitsInside ( i ) = 6 then
17379: LD_VAR 0 2
17383: PPUSH
17384: CALL_OW 313
17388: PUSH
17389: LD_INT 6
17391: EQUAL
17392: IFFALSE 17410
// nearestBarracks := nearestBarracks diff i ;
17394: LD_ADDR_VAR 0 4
17398: PUSH
17399: LD_VAR 0 4
17403: PUSH
17404: LD_VAR 0 2
17408: DIFF
17409: ST_TO_ADDR
17410: GO 17376
17412: POP
17413: POP
// if not nearestBarracks then
17414: LD_VAR 0 4
17418: NOT
17419: IFFALSE 17423
// exit ;
17421: GO 17445
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17423: LD_VAR 0 3
17427: PUSH
17428: LD_INT 1
17430: ARRAY
17431: PPUSH
17432: LD_VAR 0 4
17436: PUSH
17437: LD_INT 1
17439: ARRAY
17440: PPUSH
17441: CALL_OW 120
// end ; end ;
17445: PPOPN 4
17447: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17448: LD_INT 0
17450: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17451: LD_EXP 8
17455: NOT
17456: PUSH
17457: LD_EXP 5
17461: NOT
17462: OR
17463: IFFALSE 17467
// exit ;
17465: GO 17535
// for i in camAreas do
17467: LD_ADDR_VAR 0 5
17471: PUSH
17472: LD_EXP 8
17476: PUSH
17477: FOR_IN
17478: IFFALSE 17533
// if InArea ( x , y , i ) then
17480: LD_VAR 0 3
17484: PPUSH
17485: LD_VAR 0 4
17489: PPUSH
17490: LD_VAR 0 5
17494: PPUSH
17495: CALL_OW 309
17499: IFFALSE 17531
// begin SetAreaMapShow ( i , 0 ) ;
17501: LD_VAR 0 5
17505: PPUSH
17506: LD_INT 0
17508: PPUSH
17509: CALL_OW 424
// camAreas := camAreas diff i ;
17513: LD_ADDR_EXP 8
17517: PUSH
17518: LD_EXP 8
17522: PUSH
17523: LD_VAR 0 5
17527: DIFF
17528: ST_TO_ADDR
// break ;
17529: GO 17533
// end ;
17531: GO 17477
17533: POP
17534: POP
// end ;
17535: PPOPN 5
17537: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17538: LD_VAR 0 1
17542: PUSH
17543: LD_INT 2
17545: EQUAL
17546: PUSH
17547: LD_VAR 0 2
17551: PUSH
17552: LD_INT 5
17554: PUSH
17555: LD_INT 8
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: IN
17562: AND
17563: IFFALSE 17572
// YouLost ( Ally ) ;
17565: LD_STRING Ally
17567: PPUSH
17568: CALL_OW 104
// end ;
17572: PPOPN 2
17574: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17575: LD_VAR 0 1
17579: PUSH
17580: LD_EXP 30
17584: EQUAL
17585: PUSH
17586: LD_VAR 0 2
17590: PUSH
17591: LD_INT 3
17593: PUSH
17594: LD_INT 6
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: IN
17601: AND
17602: IFFALSE 17633
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17604: LD_ADDR_EXP 23
17608: PUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 250
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 251
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: ST_TO_ADDR
// end ; end_of_file
17633: PPOPN 3
17635: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
17636: LD_EXP 11
17640: NOT
17641: PUSH
17642: LD_INT 12
17644: PPUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 287
17652: PUSH
17653: LD_INT 20
17655: PUSH
17656: LD_INT 16
17658: PUSH
17659: LD_INT 12
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: PUSH
17667: LD_OWVAR 67
17671: ARRAY
17672: LESS
17673: AND
17674: IFFALSE 17701
17676: GO 17678
17678: DISABLE
// begin enable ;
17679: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17680: LD_INT 1
17682: PPUSH
17683: LD_INT 5
17685: PPUSH
17686: CALL_OW 12
17690: PPUSH
17691: LD_INT 12
17693: PPUSH
17694: LD_INT 1
17696: PPUSH
17697: CALL_OW 55
// end ; end_of_file
17701: END
// every 0 0$1 trigger omarCountdown do
17702: LD_EXP 22
17706: IFFALSE 17758
17708: GO 17710
17710: DISABLE
// begin enable ;
17711: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17712: LD_ADDR_OWVAR 47
17716: PUSH
17717: LD_STRING #X104-1
17719: PUSH
17720: LD_EXP 22
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17729: LD_ADDR_EXP 22
17733: PUSH
17734: LD_EXP 22
17738: PUSH
17739: LD_INT 35
17741: MINUS
17742: ST_TO_ADDR
// if not omarCountdown then
17743: LD_EXP 22
17747: NOT
17748: IFFALSE 17758
// display_strings :=  ;
17750: LD_ADDR_OWVAR 47
17754: PUSH
17755: LD_STRING 
17757: ST_TO_ADDR
// end ; end_of_file
17758: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17759: LD_VAR 0 2
17763: PUSH
17764: LD_INT 100
17766: EQUAL
17767: IFFALSE 18716
// begin if not StreamModeActive then
17769: LD_EXP 52
17773: NOT
17774: IFFALSE 17784
// StreamModeActive := true ;
17776: LD_ADDR_EXP 52
17780: PUSH
17781: LD_INT 1
17783: ST_TO_ADDR
// if p3 = 0 then
17784: LD_VAR 0 3
17788: PUSH
17789: LD_INT 0
17791: EQUAL
17792: IFFALSE 17798
// InitStreamMode ;
17794: CALL 18949 0 0
// if p3 = 1 then
17798: LD_VAR 0 3
17802: PUSH
17803: LD_INT 1
17805: EQUAL
17806: IFFALSE 17816
// sRocket := true ;
17808: LD_ADDR_EXP 57
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// if p3 = 2 then
17816: LD_VAR 0 3
17820: PUSH
17821: LD_INT 2
17823: EQUAL
17824: IFFALSE 17834
// sSpeed := true ;
17826: LD_ADDR_EXP 56
17830: PUSH
17831: LD_INT 1
17833: ST_TO_ADDR
// if p3 = 3 then
17834: LD_VAR 0 3
17838: PUSH
17839: LD_INT 3
17841: EQUAL
17842: IFFALSE 17852
// sEngine := true ;
17844: LD_ADDR_EXP 58
17848: PUSH
17849: LD_INT 1
17851: ST_TO_ADDR
// if p3 = 4 then
17852: LD_VAR 0 3
17856: PUSH
17857: LD_INT 4
17859: EQUAL
17860: IFFALSE 17870
// sSpec := true ;
17862: LD_ADDR_EXP 55
17866: PUSH
17867: LD_INT 1
17869: ST_TO_ADDR
// if p3 = 5 then
17870: LD_VAR 0 3
17874: PUSH
17875: LD_INT 5
17877: EQUAL
17878: IFFALSE 17888
// sLevel := true ;
17880: LD_ADDR_EXP 59
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// if p3 = 6 then
17888: LD_VAR 0 3
17892: PUSH
17893: LD_INT 6
17895: EQUAL
17896: IFFALSE 17906
// sArmoury := true ;
17898: LD_ADDR_EXP 60
17902: PUSH
17903: LD_INT 1
17905: ST_TO_ADDR
// if p3 = 7 then
17906: LD_VAR 0 3
17910: PUSH
17911: LD_INT 7
17913: EQUAL
17914: IFFALSE 17924
// sRadar := true ;
17916: LD_ADDR_EXP 61
17920: PUSH
17921: LD_INT 1
17923: ST_TO_ADDR
// if p3 = 8 then
17924: LD_VAR 0 3
17928: PUSH
17929: LD_INT 8
17931: EQUAL
17932: IFFALSE 17942
// sBunker := true ;
17934: LD_ADDR_EXP 62
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// if p3 = 9 then
17942: LD_VAR 0 3
17946: PUSH
17947: LD_INT 9
17949: EQUAL
17950: IFFALSE 17960
// sHack := true ;
17952: LD_ADDR_EXP 63
17956: PUSH
17957: LD_INT 1
17959: ST_TO_ADDR
// if p3 = 10 then
17960: LD_VAR 0 3
17964: PUSH
17965: LD_INT 10
17967: EQUAL
17968: IFFALSE 17978
// sFire := true ;
17970: LD_ADDR_EXP 64
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// if p3 = 11 then
17978: LD_VAR 0 3
17982: PUSH
17983: LD_INT 11
17985: EQUAL
17986: IFFALSE 17996
// sRefresh := true ;
17988: LD_ADDR_EXP 65
17992: PUSH
17993: LD_INT 1
17995: ST_TO_ADDR
// if p3 = 12 then
17996: LD_VAR 0 3
18000: PUSH
18001: LD_INT 12
18003: EQUAL
18004: IFFALSE 18014
// sExp := true ;
18006: LD_ADDR_EXP 66
18010: PUSH
18011: LD_INT 1
18013: ST_TO_ADDR
// if p3 = 13 then
18014: LD_VAR 0 3
18018: PUSH
18019: LD_INT 13
18021: EQUAL
18022: IFFALSE 18032
// sDepot := true ;
18024: LD_ADDR_EXP 67
18028: PUSH
18029: LD_INT 1
18031: ST_TO_ADDR
// if p3 = 14 then
18032: LD_VAR 0 3
18036: PUSH
18037: LD_INT 14
18039: EQUAL
18040: IFFALSE 18050
// sFlag := true ;
18042: LD_ADDR_EXP 68
18046: PUSH
18047: LD_INT 1
18049: ST_TO_ADDR
// if p3 = 15 then
18050: LD_VAR 0 3
18054: PUSH
18055: LD_INT 15
18057: EQUAL
18058: IFFALSE 18068
// sKamikadze := true ;
18060: LD_ADDR_EXP 76
18064: PUSH
18065: LD_INT 1
18067: ST_TO_ADDR
// if p3 = 16 then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_INT 16
18075: EQUAL
18076: IFFALSE 18086
// sTroll := true ;
18078: LD_ADDR_EXP 77
18082: PUSH
18083: LD_INT 1
18085: ST_TO_ADDR
// if p3 = 17 then
18086: LD_VAR 0 3
18090: PUSH
18091: LD_INT 17
18093: EQUAL
18094: IFFALSE 18104
// sSlow := true ;
18096: LD_ADDR_EXP 78
18100: PUSH
18101: LD_INT 1
18103: ST_TO_ADDR
// if p3 = 18 then
18104: LD_VAR 0 3
18108: PUSH
18109: LD_INT 18
18111: EQUAL
18112: IFFALSE 18122
// sLack := true ;
18114: LD_ADDR_EXP 79
18118: PUSH
18119: LD_INT 1
18121: ST_TO_ADDR
// if p3 = 19 then
18122: LD_VAR 0 3
18126: PUSH
18127: LD_INT 19
18129: EQUAL
18130: IFFALSE 18140
// sTank := true ;
18132: LD_ADDR_EXP 81
18136: PUSH
18137: LD_INT 1
18139: ST_TO_ADDR
// if p3 = 20 then
18140: LD_VAR 0 3
18144: PUSH
18145: LD_INT 20
18147: EQUAL
18148: IFFALSE 18158
// sRemote := true ;
18150: LD_ADDR_EXP 82
18154: PUSH
18155: LD_INT 1
18157: ST_TO_ADDR
// if p3 = 21 then
18158: LD_VAR 0 3
18162: PUSH
18163: LD_INT 21
18165: EQUAL
18166: IFFALSE 18176
// sPowell := true ;
18168: LD_ADDR_EXP 83
18172: PUSH
18173: LD_INT 1
18175: ST_TO_ADDR
// if p3 = 22 then
18176: LD_VAR 0 3
18180: PUSH
18181: LD_INT 22
18183: EQUAL
18184: IFFALSE 18194
// sTeleport := true ;
18186: LD_ADDR_EXP 86
18190: PUSH
18191: LD_INT 1
18193: ST_TO_ADDR
// if p3 = 23 then
18194: LD_VAR 0 3
18198: PUSH
18199: LD_INT 23
18201: EQUAL
18202: IFFALSE 18212
// sOilTower := true ;
18204: LD_ADDR_EXP 88
18208: PUSH
18209: LD_INT 1
18211: ST_TO_ADDR
// if p3 = 24 then
18212: LD_VAR 0 3
18216: PUSH
18217: LD_INT 24
18219: EQUAL
18220: IFFALSE 18230
// sShovel := true ;
18222: LD_ADDR_EXP 89
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// if p3 = 25 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 25
18237: EQUAL
18238: IFFALSE 18248
// sSheik := true ;
18240: LD_ADDR_EXP 90
18244: PUSH
18245: LD_INT 1
18247: ST_TO_ADDR
// if p3 = 26 then
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 26
18255: EQUAL
18256: IFFALSE 18266
// sEarthquake := true ;
18258: LD_ADDR_EXP 92
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// if p3 = 27 then
18266: LD_VAR 0 3
18270: PUSH
18271: LD_INT 27
18273: EQUAL
18274: IFFALSE 18284
// sAI := true ;
18276: LD_ADDR_EXP 93
18280: PUSH
18281: LD_INT 1
18283: ST_TO_ADDR
// if p3 = 28 then
18284: LD_VAR 0 3
18288: PUSH
18289: LD_INT 28
18291: EQUAL
18292: IFFALSE 18302
// sCargo := true ;
18294: LD_ADDR_EXP 96
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// if p3 = 29 then
18302: LD_VAR 0 3
18306: PUSH
18307: LD_INT 29
18309: EQUAL
18310: IFFALSE 18320
// sDLaser := true ;
18312: LD_ADDR_EXP 97
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// if p3 = 30 then
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 30
18327: EQUAL
18328: IFFALSE 18338
// sExchange := true ;
18330: LD_ADDR_EXP 98
18334: PUSH
18335: LD_INT 1
18337: ST_TO_ADDR
// if p3 = 31 then
18338: LD_VAR 0 3
18342: PUSH
18343: LD_INT 31
18345: EQUAL
18346: IFFALSE 18356
// sFac := true ;
18348: LD_ADDR_EXP 99
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if p3 = 32 then
18356: LD_VAR 0 3
18360: PUSH
18361: LD_INT 32
18363: EQUAL
18364: IFFALSE 18374
// sPower := true ;
18366: LD_ADDR_EXP 100
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// if p3 = 33 then
18374: LD_VAR 0 3
18378: PUSH
18379: LD_INT 33
18381: EQUAL
18382: IFFALSE 18392
// sRandom := true ;
18384: LD_ADDR_EXP 101
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// if p3 = 34 then
18392: LD_VAR 0 3
18396: PUSH
18397: LD_INT 34
18399: EQUAL
18400: IFFALSE 18410
// sShield := true ;
18402: LD_ADDR_EXP 102
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
// if p3 = 35 then
18410: LD_VAR 0 3
18414: PUSH
18415: LD_INT 35
18417: EQUAL
18418: IFFALSE 18428
// sTime := true ;
18420: LD_ADDR_EXP 103
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// if p3 = 36 then
18428: LD_VAR 0 3
18432: PUSH
18433: LD_INT 36
18435: EQUAL
18436: IFFALSE 18446
// sTools := true ;
18438: LD_ADDR_EXP 104
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// if p3 = 101 then
18446: LD_VAR 0 3
18450: PUSH
18451: LD_INT 101
18453: EQUAL
18454: IFFALSE 18464
// sSold := true ;
18456: LD_ADDR_EXP 69
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// if p3 = 102 then
18464: LD_VAR 0 3
18468: PUSH
18469: LD_INT 102
18471: EQUAL
18472: IFFALSE 18482
// sDiff := true ;
18474: LD_ADDR_EXP 70
18478: PUSH
18479: LD_INT 1
18481: ST_TO_ADDR
// if p3 = 103 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_INT 103
18489: EQUAL
18490: IFFALSE 18500
// sFog := true ;
18492: LD_ADDR_EXP 73
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// if p3 = 104 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 104
18507: EQUAL
18508: IFFALSE 18518
// sReset := true ;
18510: LD_ADDR_EXP 74
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// if p3 = 105 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 105
18525: EQUAL
18526: IFFALSE 18536
// sSun := true ;
18528: LD_ADDR_EXP 75
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// if p3 = 106 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 106
18543: EQUAL
18544: IFFALSE 18554
// sTiger := true ;
18546: LD_ADDR_EXP 71
18550: PUSH
18551: LD_INT 1
18553: ST_TO_ADDR
// if p3 = 107 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 107
18561: EQUAL
18562: IFFALSE 18572
// sBomb := true ;
18564: LD_ADDR_EXP 72
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if p3 = 108 then
18572: LD_VAR 0 3
18576: PUSH
18577: LD_INT 108
18579: EQUAL
18580: IFFALSE 18590
// sWound := true ;
18582: LD_ADDR_EXP 80
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if p3 = 109 then
18590: LD_VAR 0 3
18594: PUSH
18595: LD_INT 109
18597: EQUAL
18598: IFFALSE 18608
// sBetray := true ;
18600: LD_ADDR_EXP 84
18604: PUSH
18605: LD_INT 1
18607: ST_TO_ADDR
// if p3 = 110 then
18608: LD_VAR 0 3
18612: PUSH
18613: LD_INT 110
18615: EQUAL
18616: IFFALSE 18626
// sContamin := true ;
18618: LD_ADDR_EXP 85
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// if p3 = 111 then
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 111
18633: EQUAL
18634: IFFALSE 18644
// sOil := true ;
18636: LD_ADDR_EXP 87
18640: PUSH
18641: LD_INT 1
18643: ST_TO_ADDR
// if p3 = 112 then
18644: LD_VAR 0 3
18648: PUSH
18649: LD_INT 112
18651: EQUAL
18652: IFFALSE 18662
// sStu := true ;
18654: LD_ADDR_EXP 91
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// if p3 = 113 then
18662: LD_VAR 0 3
18666: PUSH
18667: LD_INT 113
18669: EQUAL
18670: IFFALSE 18680
// sBazooka := true ;
18672: LD_ADDR_EXP 94
18676: PUSH
18677: LD_INT 1
18679: ST_TO_ADDR
// if p3 = 114 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 114
18687: EQUAL
18688: IFFALSE 18698
// sMortar := true ;
18690: LD_ADDR_EXP 95
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// if p3 = 115 then
18698: LD_VAR 0 3
18702: PUSH
18703: LD_INT 115
18705: EQUAL
18706: IFFALSE 18716
// sRanger := true ;
18708: LD_ADDR_EXP 105
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// end ; if p2 = 101 then
18716: LD_VAR 0 2
18720: PUSH
18721: LD_INT 101
18723: EQUAL
18724: IFFALSE 18927
// begin case p3 of 1 :
18726: LD_VAR 0 3
18730: PUSH
18731: LD_INT 1
18733: DOUBLE
18734: EQUAL
18735: IFTRUE 18739
18737: GO 18746
18739: POP
// hHackUnlimitedResources ; 2 :
18740: CALL 29021 0 0
18744: GO 18927
18746: LD_INT 2
18748: DOUBLE
18749: EQUAL
18750: IFTRUE 18754
18752: GO 18761
18754: POP
// hHackSetLevel10 ; 3 :
18755: CALL 29154 0 0
18759: GO 18927
18761: LD_INT 3
18763: DOUBLE
18764: EQUAL
18765: IFTRUE 18769
18767: GO 18776
18769: POP
// hHackSetLevel10YourUnits ; 4 :
18770: CALL 29239 0 0
18774: GO 18927
18776: LD_INT 4
18778: DOUBLE
18779: EQUAL
18780: IFTRUE 18784
18782: GO 18806
18784: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
18785: LD_VAR 0 4
18789: PPUSH
18790: LD_VAR 0 5
18794: PPUSH
18795: LD_VAR 0 6
18799: PPUSH
18800: CALL 29329 0 3
18804: GO 18927
18806: LD_INT 5
18808: DOUBLE
18809: EQUAL
18810: IFTRUE 18814
18812: GO 18821
18814: POP
// hHackSpawnVehicle ; 6 :
18815: CALL 29390 0 0
18819: GO 18927
18821: LD_INT 6
18823: DOUBLE
18824: EQUAL
18825: IFTRUE 18829
18827: GO 18836
18829: POP
// hHackInvincible ; 7 :
18830: CALL 29936 0 0
18834: GO 18927
18836: LD_INT 7
18838: DOUBLE
18839: EQUAL
18840: IFTRUE 18844
18842: GO 18851
18844: POP
// hHackInvisible ; 8 :
18845: CALL 30047 0 0
18849: GO 18927
18851: LD_INT 8
18853: DOUBLE
18854: EQUAL
18855: IFTRUE 18859
18857: GO 18866
18859: POP
// hHackChangeYourSide ; 9 :
18860: CALL 30104 0 0
18864: GO 18927
18866: LD_INT 9
18868: DOUBLE
18869: EQUAL
18870: IFTRUE 18874
18872: GO 18881
18874: POP
// hHackChangeUnitSide ; 10 :
18875: CALL 30146 0 0
18879: GO 18927
18881: LD_INT 10
18883: DOUBLE
18884: EQUAL
18885: IFTRUE 18889
18887: GO 18896
18889: POP
// hHackFog ; 11 :
18890: CALL 30247 0 0
18894: GO 18927
18896: LD_INT 11
18898: DOUBLE
18899: EQUAL
18900: IFTRUE 18904
18902: GO 18911
18904: POP
// hHackApeman ; 12 :
18905: CALL 30262 0 0
18909: GO 18927
18911: LD_INT 12
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 18926
18919: POP
// hHackBoom ; end ;
18920: CALL 30347 0 0
18924: GO 18927
18926: POP
// end ; end ;
18927: PPOPN 6
18929: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18930: GO 18932
18932: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18933: LD_STRING initStreamRollete();
18935: PPUSH
18936: CALL_OW 559
// InitStreamMode ;
18940: CALL 18949 0 0
// DefineStreamItems ( ) ;
18944: CALL 19389 0 0
// end ;
18948: END
// function InitStreamMode ; begin
18949: LD_INT 0
18951: PPUSH
// streamModeActive := false ;
18952: LD_ADDR_EXP 52
18956: PUSH
18957: LD_INT 0
18959: ST_TO_ADDR
// normalCounter := 36 ;
18960: LD_ADDR_EXP 53
18964: PUSH
18965: LD_INT 36
18967: ST_TO_ADDR
// hardcoreCounter := 16 ;
18968: LD_ADDR_EXP 54
18972: PUSH
18973: LD_INT 16
18975: ST_TO_ADDR
// sRocket := false ;
18976: LD_ADDR_EXP 57
18980: PUSH
18981: LD_INT 0
18983: ST_TO_ADDR
// sSpeed := false ;
18984: LD_ADDR_EXP 56
18988: PUSH
18989: LD_INT 0
18991: ST_TO_ADDR
// sEngine := false ;
18992: LD_ADDR_EXP 58
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// sSpec := false ;
19000: LD_ADDR_EXP 55
19004: PUSH
19005: LD_INT 0
19007: ST_TO_ADDR
// sLevel := false ;
19008: LD_ADDR_EXP 59
19012: PUSH
19013: LD_INT 0
19015: ST_TO_ADDR
// sArmoury := false ;
19016: LD_ADDR_EXP 60
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// sRadar := false ;
19024: LD_ADDR_EXP 61
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// sBunker := false ;
19032: LD_ADDR_EXP 62
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// sHack := false ;
19040: LD_ADDR_EXP 63
19044: PUSH
19045: LD_INT 0
19047: ST_TO_ADDR
// sFire := false ;
19048: LD_ADDR_EXP 64
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// sRefresh := false ;
19056: LD_ADDR_EXP 65
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// sExp := false ;
19064: LD_ADDR_EXP 66
19068: PUSH
19069: LD_INT 0
19071: ST_TO_ADDR
// sDepot := false ;
19072: LD_ADDR_EXP 67
19076: PUSH
19077: LD_INT 0
19079: ST_TO_ADDR
// sFlag := false ;
19080: LD_ADDR_EXP 68
19084: PUSH
19085: LD_INT 0
19087: ST_TO_ADDR
// sKamikadze := false ;
19088: LD_ADDR_EXP 76
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// sTroll := false ;
19096: LD_ADDR_EXP 77
19100: PUSH
19101: LD_INT 0
19103: ST_TO_ADDR
// sSlow := false ;
19104: LD_ADDR_EXP 78
19108: PUSH
19109: LD_INT 0
19111: ST_TO_ADDR
// sLack := false ;
19112: LD_ADDR_EXP 79
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// sTank := false ;
19120: LD_ADDR_EXP 81
19124: PUSH
19125: LD_INT 0
19127: ST_TO_ADDR
// sRemote := false ;
19128: LD_ADDR_EXP 82
19132: PUSH
19133: LD_INT 0
19135: ST_TO_ADDR
// sPowell := false ;
19136: LD_ADDR_EXP 83
19140: PUSH
19141: LD_INT 0
19143: ST_TO_ADDR
// sTeleport := false ;
19144: LD_ADDR_EXP 86
19148: PUSH
19149: LD_INT 0
19151: ST_TO_ADDR
// sOilTower := false ;
19152: LD_ADDR_EXP 88
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// sShovel := false ;
19160: LD_ADDR_EXP 89
19164: PUSH
19165: LD_INT 0
19167: ST_TO_ADDR
// sSheik := false ;
19168: LD_ADDR_EXP 90
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// sEarthquake := false ;
19176: LD_ADDR_EXP 92
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// sAI := false ;
19184: LD_ADDR_EXP 93
19188: PUSH
19189: LD_INT 0
19191: ST_TO_ADDR
// sCargo := false ;
19192: LD_ADDR_EXP 96
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
// sDLaser := false ;
19200: LD_ADDR_EXP 97
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// sExchange := false ;
19208: LD_ADDR_EXP 98
19212: PUSH
19213: LD_INT 0
19215: ST_TO_ADDR
// sFac := false ;
19216: LD_ADDR_EXP 99
19220: PUSH
19221: LD_INT 0
19223: ST_TO_ADDR
// sPower := false ;
19224: LD_ADDR_EXP 100
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// sRandom := false ;
19232: LD_ADDR_EXP 101
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// sShield := false ;
19240: LD_ADDR_EXP 102
19244: PUSH
19245: LD_INT 0
19247: ST_TO_ADDR
// sTime := false ;
19248: LD_ADDR_EXP 103
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// sTools := false ;
19256: LD_ADDR_EXP 104
19260: PUSH
19261: LD_INT 0
19263: ST_TO_ADDR
// sSold := false ;
19264: LD_ADDR_EXP 69
19268: PUSH
19269: LD_INT 0
19271: ST_TO_ADDR
// sDiff := false ;
19272: LD_ADDR_EXP 70
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// sFog := false ;
19280: LD_ADDR_EXP 73
19284: PUSH
19285: LD_INT 0
19287: ST_TO_ADDR
// sReset := false ;
19288: LD_ADDR_EXP 74
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
// sSun := false ;
19296: LD_ADDR_EXP 75
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// sTiger := false ;
19304: LD_ADDR_EXP 71
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// sBomb := false ;
19312: LD_ADDR_EXP 72
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// sWound := false ;
19320: LD_ADDR_EXP 80
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// sBetray := false ;
19328: LD_ADDR_EXP 84
19332: PUSH
19333: LD_INT 0
19335: ST_TO_ADDR
// sContamin := false ;
19336: LD_ADDR_EXP 85
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// sOil := false ;
19344: LD_ADDR_EXP 87
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// sStu := false ;
19352: LD_ADDR_EXP 91
19356: PUSH
19357: LD_INT 0
19359: ST_TO_ADDR
// sBazooka := false ;
19360: LD_ADDR_EXP 94
19364: PUSH
19365: LD_INT 0
19367: ST_TO_ADDR
// sMortar := false ;
19368: LD_ADDR_EXP 95
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// sRanger := false ;
19376: LD_ADDR_EXP 105
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// end ;
19384: LD_VAR 0 1
19388: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19389: LD_INT 0
19391: PPUSH
19392: PPUSH
19393: PPUSH
19394: PPUSH
19395: PPUSH
// result := [ ] ;
19396: LD_ADDR_VAR 0 1
19400: PUSH
19401: EMPTY
19402: ST_TO_ADDR
// if campaign_id = 1 then
19403: LD_OWVAR 69
19407: PUSH
19408: LD_INT 1
19410: EQUAL
19411: IFFALSE 22349
// begin case mission_number of 1 :
19413: LD_OWVAR 70
19417: PUSH
19418: LD_INT 1
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19490
19426: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19427: LD_ADDR_VAR 0 1
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 4
19437: PUSH
19438: LD_INT 11
19440: PUSH
19441: LD_INT 12
19443: PUSH
19444: LD_INT 15
19446: PUSH
19447: LD_INT 16
19449: PUSH
19450: LD_INT 22
19452: PUSH
19453: LD_INT 23
19455: PUSH
19456: LD_INT 26
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 101
19472: PUSH
19473: LD_INT 102
19475: PUSH
19476: LD_INT 106
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: ST_TO_ADDR
19488: GO 22347
19490: LD_INT 2
19492: DOUBLE
19493: EQUAL
19494: IFTRUE 19498
19496: GO 19570
19498: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19499: LD_ADDR_VAR 0 1
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 4
19509: PUSH
19510: LD_INT 11
19512: PUSH
19513: LD_INT 12
19515: PUSH
19516: LD_INT 15
19518: PUSH
19519: LD_INT 16
19521: PUSH
19522: LD_INT 22
19524: PUSH
19525: LD_INT 23
19527: PUSH
19528: LD_INT 26
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 101
19544: PUSH
19545: LD_INT 102
19547: PUSH
19548: LD_INT 105
19550: PUSH
19551: LD_INT 106
19553: PUSH
19554: LD_INT 108
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 22347
19570: LD_INT 3
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19654
19578: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: LD_INT 4
19589: PUSH
19590: LD_INT 5
19592: PUSH
19593: LD_INT 11
19595: PUSH
19596: LD_INT 12
19598: PUSH
19599: LD_INT 15
19601: PUSH
19602: LD_INT 16
19604: PUSH
19605: LD_INT 22
19607: PUSH
19608: LD_INT 26
19610: PUSH
19611: LD_INT 36
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 101
19628: PUSH
19629: LD_INT 102
19631: PUSH
19632: LD_INT 105
19634: PUSH
19635: LD_INT 106
19637: PUSH
19638: LD_INT 108
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: ST_TO_ADDR
19652: GO 22347
19654: LD_INT 4
19656: DOUBLE
19657: EQUAL
19658: IFTRUE 19662
19660: GO 19746
19662: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19663: LD_ADDR_VAR 0 1
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: LD_INT 4
19673: PUSH
19674: LD_INT 5
19676: PUSH
19677: LD_INT 8
19679: PUSH
19680: LD_INT 11
19682: PUSH
19683: LD_INT 12
19685: PUSH
19686: LD_INT 15
19688: PUSH
19689: LD_INT 16
19691: PUSH
19692: LD_INT 22
19694: PUSH
19695: LD_INT 23
19697: PUSH
19698: LD_INT 26
19700: PUSH
19701: LD_INT 36
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 101
19720: PUSH
19721: LD_INT 102
19723: PUSH
19724: LD_INT 105
19726: PUSH
19727: LD_INT 106
19729: PUSH
19730: LD_INT 108
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: ST_TO_ADDR
19744: GO 22347
19746: LD_INT 5
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19854
19754: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 4
19765: PUSH
19766: LD_INT 5
19768: PUSH
19769: LD_INT 6
19771: PUSH
19772: LD_INT 8
19774: PUSH
19775: LD_INT 11
19777: PUSH
19778: LD_INT 12
19780: PUSH
19781: LD_INT 15
19783: PUSH
19784: LD_INT 16
19786: PUSH
19787: LD_INT 22
19789: PUSH
19790: LD_INT 23
19792: PUSH
19793: LD_INT 25
19795: PUSH
19796: LD_INT 26
19798: PUSH
19799: LD_INT 36
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 101
19820: PUSH
19821: LD_INT 102
19823: PUSH
19824: LD_INT 105
19826: PUSH
19827: LD_INT 106
19829: PUSH
19830: LD_INT 108
19832: PUSH
19833: LD_INT 109
19835: PUSH
19836: LD_INT 112
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: ST_TO_ADDR
19852: GO 22347
19854: LD_INT 6
19856: DOUBLE
19857: EQUAL
19858: IFTRUE 19862
19860: GO 19982
19862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 4
19873: PUSH
19874: LD_INT 5
19876: PUSH
19877: LD_INT 6
19879: PUSH
19880: LD_INT 8
19882: PUSH
19883: LD_INT 11
19885: PUSH
19886: LD_INT 12
19888: PUSH
19889: LD_INT 15
19891: PUSH
19892: LD_INT 16
19894: PUSH
19895: LD_INT 20
19897: PUSH
19898: LD_INT 21
19900: PUSH
19901: LD_INT 22
19903: PUSH
19904: LD_INT 23
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 26
19912: PUSH
19913: LD_INT 30
19915: PUSH
19916: LD_INT 31
19918: PUSH
19919: LD_INT 32
19921: PUSH
19922: LD_INT 36
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 101
19948: PUSH
19949: LD_INT 102
19951: PUSH
19952: LD_INT 105
19954: PUSH
19955: LD_INT 106
19957: PUSH
19958: LD_INT 108
19960: PUSH
19961: LD_INT 109
19963: PUSH
19964: LD_INT 112
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: ST_TO_ADDR
19980: GO 22347
19982: LD_INT 7
19984: DOUBLE
19985: EQUAL
19986: IFTRUE 19990
19988: GO 20090
19990: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: LD_INT 4
20001: PUSH
20002: LD_INT 5
20004: PUSH
20005: LD_INT 7
20007: PUSH
20008: LD_INT 11
20010: PUSH
20011: LD_INT 12
20013: PUSH
20014: LD_INT 15
20016: PUSH
20017: LD_INT 16
20019: PUSH
20020: LD_INT 20
20022: PUSH
20023: LD_INT 21
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_INT 23
20031: PUSH
20032: LD_INT 25
20034: PUSH
20035: LD_INT 26
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 101
20056: PUSH
20057: LD_INT 102
20059: PUSH
20060: LD_INT 103
20062: PUSH
20063: LD_INT 105
20065: PUSH
20066: LD_INT 106
20068: PUSH
20069: LD_INT 108
20071: PUSH
20072: LD_INT 112
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: ST_TO_ADDR
20088: GO 22347
20090: LD_INT 8
20092: DOUBLE
20093: EQUAL
20094: IFTRUE 20098
20096: GO 20226
20098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20099: LD_ADDR_VAR 0 1
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: LD_INT 4
20109: PUSH
20110: LD_INT 5
20112: PUSH
20113: LD_INT 6
20115: PUSH
20116: LD_INT 7
20118: PUSH
20119: LD_INT 8
20121: PUSH
20122: LD_INT 11
20124: PUSH
20125: LD_INT 12
20127: PUSH
20128: LD_INT 15
20130: PUSH
20131: LD_INT 16
20133: PUSH
20134: LD_INT 20
20136: PUSH
20137: LD_INT 21
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_INT 23
20145: PUSH
20146: LD_INT 25
20148: PUSH
20149: LD_INT 26
20151: PUSH
20152: LD_INT 30
20154: PUSH
20155: LD_INT 31
20157: PUSH
20158: LD_INT 32
20160: PUSH
20161: LD_INT 36
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 101
20188: PUSH
20189: LD_INT 102
20191: PUSH
20192: LD_INT 103
20194: PUSH
20195: LD_INT 105
20197: PUSH
20198: LD_INT 106
20200: PUSH
20201: LD_INT 108
20203: PUSH
20204: LD_INT 109
20206: PUSH
20207: LD_INT 112
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: ST_TO_ADDR
20224: GO 22347
20226: LD_INT 9
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20370
20234: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20235: LD_ADDR_VAR 0 1
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 4
20245: PUSH
20246: LD_INT 5
20248: PUSH
20249: LD_INT 6
20251: PUSH
20252: LD_INT 7
20254: PUSH
20255: LD_INT 8
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 12
20263: PUSH
20264: LD_INT 15
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: LD_INT 20
20272: PUSH
20273: LD_INT 21
20275: PUSH
20276: LD_INT 22
20278: PUSH
20279: LD_INT 23
20281: PUSH
20282: LD_INT 25
20284: PUSH
20285: LD_INT 26
20287: PUSH
20288: LD_INT 28
20290: PUSH
20291: LD_INT 30
20293: PUSH
20294: LD_INT 31
20296: PUSH
20297: LD_INT 32
20299: PUSH
20300: LD_INT 36
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 101
20328: PUSH
20329: LD_INT 102
20331: PUSH
20332: LD_INT 103
20334: PUSH
20335: LD_INT 105
20337: PUSH
20338: LD_INT 106
20340: PUSH
20341: LD_INT 108
20343: PUSH
20344: LD_INT 109
20346: PUSH
20347: LD_INT 112
20349: PUSH
20350: LD_INT 114
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: ST_TO_ADDR
20368: GO 22347
20370: LD_INT 10
20372: DOUBLE
20373: EQUAL
20374: IFTRUE 20378
20376: GO 20562
20378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20379: LD_ADDR_VAR 0 1
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: LD_INT 4
20389: PUSH
20390: LD_INT 5
20392: PUSH
20393: LD_INT 6
20395: PUSH
20396: LD_INT 7
20398: PUSH
20399: LD_INT 8
20401: PUSH
20402: LD_INT 9
20404: PUSH
20405: LD_INT 10
20407: PUSH
20408: LD_INT 11
20410: PUSH
20411: LD_INT 12
20413: PUSH
20414: LD_INT 13
20416: PUSH
20417: LD_INT 14
20419: PUSH
20420: LD_INT 15
20422: PUSH
20423: LD_INT 16
20425: PUSH
20426: LD_INT 17
20428: PUSH
20429: LD_INT 18
20431: PUSH
20432: LD_INT 19
20434: PUSH
20435: LD_INT 20
20437: PUSH
20438: LD_INT 21
20440: PUSH
20441: LD_INT 22
20443: PUSH
20444: LD_INT 23
20446: PUSH
20447: LD_INT 24
20449: PUSH
20450: LD_INT 25
20452: PUSH
20453: LD_INT 26
20455: PUSH
20456: LD_INT 28
20458: PUSH
20459: LD_INT 30
20461: PUSH
20462: LD_INT 31
20464: PUSH
20465: LD_INT 32
20467: PUSH
20468: LD_INT 36
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 101
20504: PUSH
20505: LD_INT 102
20507: PUSH
20508: LD_INT 103
20510: PUSH
20511: LD_INT 104
20513: PUSH
20514: LD_INT 105
20516: PUSH
20517: LD_INT 106
20519: PUSH
20520: LD_INT 107
20522: PUSH
20523: LD_INT 108
20525: PUSH
20526: LD_INT 109
20528: PUSH
20529: LD_INT 110
20531: PUSH
20532: LD_INT 111
20534: PUSH
20535: LD_INT 112
20537: PUSH
20538: LD_INT 114
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: ST_TO_ADDR
20560: GO 22347
20562: LD_INT 11
20564: DOUBLE
20565: EQUAL
20566: IFTRUE 20570
20568: GO 20762
20570: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20571: LD_ADDR_VAR 0 1
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: LD_INT 3
20581: PUSH
20582: LD_INT 4
20584: PUSH
20585: LD_INT 5
20587: PUSH
20588: LD_INT 6
20590: PUSH
20591: LD_INT 7
20593: PUSH
20594: LD_INT 8
20596: PUSH
20597: LD_INT 9
20599: PUSH
20600: LD_INT 10
20602: PUSH
20603: LD_INT 11
20605: PUSH
20606: LD_INT 12
20608: PUSH
20609: LD_INT 13
20611: PUSH
20612: LD_INT 14
20614: PUSH
20615: LD_INT 15
20617: PUSH
20618: LD_INT 16
20620: PUSH
20621: LD_INT 17
20623: PUSH
20624: LD_INT 18
20626: PUSH
20627: LD_INT 19
20629: PUSH
20630: LD_INT 20
20632: PUSH
20633: LD_INT 21
20635: PUSH
20636: LD_INT 22
20638: PUSH
20639: LD_INT 23
20641: PUSH
20642: LD_INT 24
20644: PUSH
20645: LD_INT 25
20647: PUSH
20648: LD_INT 26
20650: PUSH
20651: LD_INT 28
20653: PUSH
20654: LD_INT 30
20656: PUSH
20657: LD_INT 31
20659: PUSH
20660: LD_INT 32
20662: PUSH
20663: LD_INT 34
20665: PUSH
20666: LD_INT 36
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 101
20704: PUSH
20705: LD_INT 102
20707: PUSH
20708: LD_INT 103
20710: PUSH
20711: LD_INT 104
20713: PUSH
20714: LD_INT 105
20716: PUSH
20717: LD_INT 106
20719: PUSH
20720: LD_INT 107
20722: PUSH
20723: LD_INT 108
20725: PUSH
20726: LD_INT 109
20728: PUSH
20729: LD_INT 110
20731: PUSH
20732: LD_INT 111
20734: PUSH
20735: LD_INT 112
20737: PUSH
20738: LD_INT 114
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: ST_TO_ADDR
20760: GO 22347
20762: LD_INT 12
20764: DOUBLE
20765: EQUAL
20766: IFTRUE 20770
20768: GO 20978
20770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20771: LD_ADDR_VAR 0 1
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: LD_INT 3
20784: PUSH
20785: LD_INT 4
20787: PUSH
20788: LD_INT 5
20790: PUSH
20791: LD_INT 6
20793: PUSH
20794: LD_INT 7
20796: PUSH
20797: LD_INT 8
20799: PUSH
20800: LD_INT 9
20802: PUSH
20803: LD_INT 10
20805: PUSH
20806: LD_INT 11
20808: PUSH
20809: LD_INT 12
20811: PUSH
20812: LD_INT 13
20814: PUSH
20815: LD_INT 14
20817: PUSH
20818: LD_INT 15
20820: PUSH
20821: LD_INT 16
20823: PUSH
20824: LD_INT 17
20826: PUSH
20827: LD_INT 18
20829: PUSH
20830: LD_INT 19
20832: PUSH
20833: LD_INT 20
20835: PUSH
20836: LD_INT 21
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_INT 23
20844: PUSH
20845: LD_INT 24
20847: PUSH
20848: LD_INT 25
20850: PUSH
20851: LD_INT 26
20853: PUSH
20854: LD_INT 27
20856: PUSH
20857: LD_INT 28
20859: PUSH
20860: LD_INT 30
20862: PUSH
20863: LD_INT 31
20865: PUSH
20866: LD_INT 32
20868: PUSH
20869: LD_INT 33
20871: PUSH
20872: LD_INT 34
20874: PUSH
20875: LD_INT 36
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 101
20916: PUSH
20917: LD_INT 102
20919: PUSH
20920: LD_INT 103
20922: PUSH
20923: LD_INT 104
20925: PUSH
20926: LD_INT 105
20928: PUSH
20929: LD_INT 106
20931: PUSH
20932: LD_INT 107
20934: PUSH
20935: LD_INT 108
20937: PUSH
20938: LD_INT 109
20940: PUSH
20941: LD_INT 110
20943: PUSH
20944: LD_INT 111
20946: PUSH
20947: LD_INT 112
20949: PUSH
20950: LD_INT 113
20952: PUSH
20953: LD_INT 114
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: ST_TO_ADDR
20976: GO 22347
20978: LD_INT 13
20980: DOUBLE
20981: EQUAL
20982: IFTRUE 20986
20984: GO 21182
20986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20987: LD_ADDR_VAR 0 1
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 3
21000: PUSH
21001: LD_INT 4
21003: PUSH
21004: LD_INT 5
21006: PUSH
21007: LD_INT 8
21009: PUSH
21010: LD_INT 9
21012: PUSH
21013: LD_INT 10
21015: PUSH
21016: LD_INT 11
21018: PUSH
21019: LD_INT 12
21021: PUSH
21022: LD_INT 14
21024: PUSH
21025: LD_INT 15
21027: PUSH
21028: LD_INT 16
21030: PUSH
21031: LD_INT 17
21033: PUSH
21034: LD_INT 18
21036: PUSH
21037: LD_INT 19
21039: PUSH
21040: LD_INT 20
21042: PUSH
21043: LD_INT 21
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_INT 23
21051: PUSH
21052: LD_INT 24
21054: PUSH
21055: LD_INT 25
21057: PUSH
21058: LD_INT 26
21060: PUSH
21061: LD_INT 27
21063: PUSH
21064: LD_INT 28
21066: PUSH
21067: LD_INT 30
21069: PUSH
21070: LD_INT 31
21072: PUSH
21073: LD_INT 32
21075: PUSH
21076: LD_INT 33
21078: PUSH
21079: LD_INT 34
21081: PUSH
21082: LD_INT 36
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 101
21120: PUSH
21121: LD_INT 102
21123: PUSH
21124: LD_INT 103
21126: PUSH
21127: LD_INT 104
21129: PUSH
21130: LD_INT 105
21132: PUSH
21133: LD_INT 106
21135: PUSH
21136: LD_INT 107
21138: PUSH
21139: LD_INT 108
21141: PUSH
21142: LD_INT 109
21144: PUSH
21145: LD_INT 110
21147: PUSH
21148: LD_INT 111
21150: PUSH
21151: LD_INT 112
21153: PUSH
21154: LD_INT 113
21156: PUSH
21157: LD_INT 114
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: ST_TO_ADDR
21180: GO 22347
21182: LD_INT 14
21184: DOUBLE
21185: EQUAL
21186: IFTRUE 21190
21188: GO 21402
21190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21191: LD_ADDR_VAR 0 1
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: LD_INT 3
21204: PUSH
21205: LD_INT 4
21207: PUSH
21208: LD_INT 5
21210: PUSH
21211: LD_INT 6
21213: PUSH
21214: LD_INT 7
21216: PUSH
21217: LD_INT 8
21219: PUSH
21220: LD_INT 9
21222: PUSH
21223: LD_INT 10
21225: PUSH
21226: LD_INT 11
21228: PUSH
21229: LD_INT 12
21231: PUSH
21232: LD_INT 13
21234: PUSH
21235: LD_INT 14
21237: PUSH
21238: LD_INT 15
21240: PUSH
21241: LD_INT 16
21243: PUSH
21244: LD_INT 17
21246: PUSH
21247: LD_INT 18
21249: PUSH
21250: LD_INT 19
21252: PUSH
21253: LD_INT 20
21255: PUSH
21256: LD_INT 21
21258: PUSH
21259: LD_INT 22
21261: PUSH
21262: LD_INT 23
21264: PUSH
21265: LD_INT 24
21267: PUSH
21268: LD_INT 25
21270: PUSH
21271: LD_INT 26
21273: PUSH
21274: LD_INT 27
21276: PUSH
21277: LD_INT 28
21279: PUSH
21280: LD_INT 29
21282: PUSH
21283: LD_INT 30
21285: PUSH
21286: LD_INT 31
21288: PUSH
21289: LD_INT 32
21291: PUSH
21292: LD_INT 33
21294: PUSH
21295: LD_INT 34
21297: PUSH
21298: LD_INT 36
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 101
21340: PUSH
21341: LD_INT 102
21343: PUSH
21344: LD_INT 103
21346: PUSH
21347: LD_INT 104
21349: PUSH
21350: LD_INT 105
21352: PUSH
21353: LD_INT 106
21355: PUSH
21356: LD_INT 107
21358: PUSH
21359: LD_INT 108
21361: PUSH
21362: LD_INT 109
21364: PUSH
21365: LD_INT 110
21367: PUSH
21368: LD_INT 111
21370: PUSH
21371: LD_INT 112
21373: PUSH
21374: LD_INT 113
21376: PUSH
21377: LD_INT 114
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: ST_TO_ADDR
21400: GO 22347
21402: LD_INT 15
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21622
21410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21411: LD_ADDR_VAR 0 1
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 3
21424: PUSH
21425: LD_INT 4
21427: PUSH
21428: LD_INT 5
21430: PUSH
21431: LD_INT 6
21433: PUSH
21434: LD_INT 7
21436: PUSH
21437: LD_INT 8
21439: PUSH
21440: LD_INT 9
21442: PUSH
21443: LD_INT 10
21445: PUSH
21446: LD_INT 11
21448: PUSH
21449: LD_INT 12
21451: PUSH
21452: LD_INT 13
21454: PUSH
21455: LD_INT 14
21457: PUSH
21458: LD_INT 15
21460: PUSH
21461: LD_INT 16
21463: PUSH
21464: LD_INT 17
21466: PUSH
21467: LD_INT 18
21469: PUSH
21470: LD_INT 19
21472: PUSH
21473: LD_INT 20
21475: PUSH
21476: LD_INT 21
21478: PUSH
21479: LD_INT 22
21481: PUSH
21482: LD_INT 23
21484: PUSH
21485: LD_INT 24
21487: PUSH
21488: LD_INT 25
21490: PUSH
21491: LD_INT 26
21493: PUSH
21494: LD_INT 27
21496: PUSH
21497: LD_INT 28
21499: PUSH
21500: LD_INT 29
21502: PUSH
21503: LD_INT 30
21505: PUSH
21506: LD_INT 31
21508: PUSH
21509: LD_INT 32
21511: PUSH
21512: LD_INT 33
21514: PUSH
21515: LD_INT 34
21517: PUSH
21518: LD_INT 36
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 101
21560: PUSH
21561: LD_INT 102
21563: PUSH
21564: LD_INT 103
21566: PUSH
21567: LD_INT 104
21569: PUSH
21570: LD_INT 105
21572: PUSH
21573: LD_INT 106
21575: PUSH
21576: LD_INT 107
21578: PUSH
21579: LD_INT 108
21581: PUSH
21582: LD_INT 109
21584: PUSH
21585: LD_INT 110
21587: PUSH
21588: LD_INT 111
21590: PUSH
21591: LD_INT 112
21593: PUSH
21594: LD_INT 113
21596: PUSH
21597: LD_INT 114
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: ST_TO_ADDR
21620: GO 22347
21622: LD_INT 16
21624: DOUBLE
21625: EQUAL
21626: IFTRUE 21630
21628: GO 21754
21630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21631: LD_ADDR_VAR 0 1
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 4
21641: PUSH
21642: LD_INT 5
21644: PUSH
21645: LD_INT 7
21647: PUSH
21648: LD_INT 11
21650: PUSH
21651: LD_INT 12
21653: PUSH
21654: LD_INT 15
21656: PUSH
21657: LD_INT 16
21659: PUSH
21660: LD_INT 20
21662: PUSH
21663: LD_INT 21
21665: PUSH
21666: LD_INT 22
21668: PUSH
21669: LD_INT 23
21671: PUSH
21672: LD_INT 25
21674: PUSH
21675: LD_INT 26
21677: PUSH
21678: LD_INT 30
21680: PUSH
21681: LD_INT 31
21683: PUSH
21684: LD_INT 32
21686: PUSH
21687: LD_INT 33
21689: PUSH
21690: LD_INT 34
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 101
21716: PUSH
21717: LD_INT 102
21719: PUSH
21720: LD_INT 103
21722: PUSH
21723: LD_INT 106
21725: PUSH
21726: LD_INT 108
21728: PUSH
21729: LD_INT 112
21731: PUSH
21732: LD_INT 113
21734: PUSH
21735: LD_INT 114
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: ST_TO_ADDR
21752: GO 22347
21754: LD_INT 17
21756: DOUBLE
21757: EQUAL
21758: IFTRUE 21762
21760: GO 21974
21762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: LD_INT 4
21779: PUSH
21780: LD_INT 5
21782: PUSH
21783: LD_INT 6
21785: PUSH
21786: LD_INT 7
21788: PUSH
21789: LD_INT 8
21791: PUSH
21792: LD_INT 9
21794: PUSH
21795: LD_INT 10
21797: PUSH
21798: LD_INT 11
21800: PUSH
21801: LD_INT 12
21803: PUSH
21804: LD_INT 13
21806: PUSH
21807: LD_INT 14
21809: PUSH
21810: LD_INT 15
21812: PUSH
21813: LD_INT 16
21815: PUSH
21816: LD_INT 17
21818: PUSH
21819: LD_INT 18
21821: PUSH
21822: LD_INT 19
21824: PUSH
21825: LD_INT 20
21827: PUSH
21828: LD_INT 21
21830: PUSH
21831: LD_INT 22
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: LD_INT 24
21839: PUSH
21840: LD_INT 25
21842: PUSH
21843: LD_INT 26
21845: PUSH
21846: LD_INT 27
21848: PUSH
21849: LD_INT 28
21851: PUSH
21852: LD_INT 29
21854: PUSH
21855: LD_INT 30
21857: PUSH
21858: LD_INT 31
21860: PUSH
21861: LD_INT 32
21863: PUSH
21864: LD_INT 33
21866: PUSH
21867: LD_INT 34
21869: PUSH
21870: LD_INT 36
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 101
21912: PUSH
21913: LD_INT 102
21915: PUSH
21916: LD_INT 103
21918: PUSH
21919: LD_INT 104
21921: PUSH
21922: LD_INT 105
21924: PUSH
21925: LD_INT 106
21927: PUSH
21928: LD_INT 107
21930: PUSH
21931: LD_INT 108
21933: PUSH
21934: LD_INT 109
21936: PUSH
21937: LD_INT 110
21939: PUSH
21940: LD_INT 111
21942: PUSH
21943: LD_INT 112
21945: PUSH
21946: LD_INT 113
21948: PUSH
21949: LD_INT 114
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: ST_TO_ADDR
21972: GO 22347
21974: LD_INT 18
21976: DOUBLE
21977: EQUAL
21978: IFTRUE 21982
21980: GO 22118
21982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 4
21993: PUSH
21994: LD_INT 5
21996: PUSH
21997: LD_INT 7
21999: PUSH
22000: LD_INT 11
22002: PUSH
22003: LD_INT 12
22005: PUSH
22006: LD_INT 15
22008: PUSH
22009: LD_INT 16
22011: PUSH
22012: LD_INT 20
22014: PUSH
22015: LD_INT 21
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_INT 23
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 26
22029: PUSH
22030: LD_INT 30
22032: PUSH
22033: LD_INT 31
22035: PUSH
22036: LD_INT 32
22038: PUSH
22039: LD_INT 33
22041: PUSH
22042: LD_INT 34
22044: PUSH
22045: LD_INT 35
22047: PUSH
22048: LD_INT 36
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 101
22076: PUSH
22077: LD_INT 102
22079: PUSH
22080: LD_INT 103
22082: PUSH
22083: LD_INT 106
22085: PUSH
22086: LD_INT 108
22088: PUSH
22089: LD_INT 112
22091: PUSH
22092: LD_INT 113
22094: PUSH
22095: LD_INT 114
22097: PUSH
22098: LD_INT 115
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: ST_TO_ADDR
22116: GO 22347
22118: LD_INT 19
22120: DOUBLE
22121: EQUAL
22122: IFTRUE 22126
22124: GO 22346
22126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22127: LD_ADDR_VAR 0 1
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: LD_INT 5
22146: PUSH
22147: LD_INT 6
22149: PUSH
22150: LD_INT 7
22152: PUSH
22153: LD_INT 8
22155: PUSH
22156: LD_INT 9
22158: PUSH
22159: LD_INT 10
22161: PUSH
22162: LD_INT 11
22164: PUSH
22165: LD_INT 12
22167: PUSH
22168: LD_INT 13
22170: PUSH
22171: LD_INT 14
22173: PUSH
22174: LD_INT 15
22176: PUSH
22177: LD_INT 16
22179: PUSH
22180: LD_INT 17
22182: PUSH
22183: LD_INT 18
22185: PUSH
22186: LD_INT 19
22188: PUSH
22189: LD_INT 20
22191: PUSH
22192: LD_INT 21
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_INT 23
22200: PUSH
22201: LD_INT 24
22203: PUSH
22204: LD_INT 25
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 27
22212: PUSH
22213: LD_INT 28
22215: PUSH
22216: LD_INT 29
22218: PUSH
22219: LD_INT 30
22221: PUSH
22222: LD_INT 31
22224: PUSH
22225: LD_INT 32
22227: PUSH
22228: LD_INT 33
22230: PUSH
22231: LD_INT 34
22233: PUSH
22234: LD_INT 35
22236: PUSH
22237: LD_INT 36
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 101
22280: PUSH
22281: LD_INT 102
22283: PUSH
22284: LD_INT 103
22286: PUSH
22287: LD_INT 104
22289: PUSH
22290: LD_INT 105
22292: PUSH
22293: LD_INT 106
22295: PUSH
22296: LD_INT 107
22298: PUSH
22299: LD_INT 108
22301: PUSH
22302: LD_INT 109
22304: PUSH
22305: LD_INT 110
22307: PUSH
22308: LD_INT 111
22310: PUSH
22311: LD_INT 112
22313: PUSH
22314: LD_INT 113
22316: PUSH
22317: LD_INT 114
22319: PUSH
22320: LD_INT 115
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: ST_TO_ADDR
22344: GO 22347
22346: POP
// end else
22347: GO 22566
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22349: LD_ADDR_VAR 0 1
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: LD_INT 3
22362: PUSH
22363: LD_INT 4
22365: PUSH
22366: LD_INT 5
22368: PUSH
22369: LD_INT 6
22371: PUSH
22372: LD_INT 7
22374: PUSH
22375: LD_INT 8
22377: PUSH
22378: LD_INT 9
22380: PUSH
22381: LD_INT 10
22383: PUSH
22384: LD_INT 11
22386: PUSH
22387: LD_INT 12
22389: PUSH
22390: LD_INT 13
22392: PUSH
22393: LD_INT 14
22395: PUSH
22396: LD_INT 15
22398: PUSH
22399: LD_INT 16
22401: PUSH
22402: LD_INT 17
22404: PUSH
22405: LD_INT 18
22407: PUSH
22408: LD_INT 19
22410: PUSH
22411: LD_INT 20
22413: PUSH
22414: LD_INT 21
22416: PUSH
22417: LD_INT 22
22419: PUSH
22420: LD_INT 23
22422: PUSH
22423: LD_INT 24
22425: PUSH
22426: LD_INT 25
22428: PUSH
22429: LD_INT 26
22431: PUSH
22432: LD_INT 27
22434: PUSH
22435: LD_INT 28
22437: PUSH
22438: LD_INT 29
22440: PUSH
22441: LD_INT 30
22443: PUSH
22444: LD_INT 31
22446: PUSH
22447: LD_INT 32
22449: PUSH
22450: LD_INT 33
22452: PUSH
22453: LD_INT 34
22455: PUSH
22456: LD_INT 35
22458: PUSH
22459: LD_INT 36
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 101
22502: PUSH
22503: LD_INT 102
22505: PUSH
22506: LD_INT 103
22508: PUSH
22509: LD_INT 104
22511: PUSH
22512: LD_INT 105
22514: PUSH
22515: LD_INT 106
22517: PUSH
22518: LD_INT 107
22520: PUSH
22521: LD_INT 108
22523: PUSH
22524: LD_INT 109
22526: PUSH
22527: LD_INT 110
22529: PUSH
22530: LD_INT 111
22532: PUSH
22533: LD_INT 112
22535: PUSH
22536: LD_INT 113
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: LD_INT 115
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: ST_TO_ADDR
// if result then
22566: LD_VAR 0 1
22570: IFFALSE 22859
// begin normal :=  ;
22572: LD_ADDR_VAR 0 3
22576: PUSH
22577: LD_STRING 
22579: ST_TO_ADDR
// hardcore :=  ;
22580: LD_ADDR_VAR 0 4
22584: PUSH
22585: LD_STRING 
22587: ST_TO_ADDR
// for i = 1 to normalCounter do
22588: LD_ADDR_VAR 0 5
22592: PUSH
22593: DOUBLE
22594: LD_INT 1
22596: DEC
22597: ST_TO_ADDR
22598: LD_EXP 53
22602: PUSH
22603: FOR_TO
22604: IFFALSE 22705
// begin tmp := 0 ;
22606: LD_ADDR_VAR 0 2
22610: PUSH
22611: LD_STRING 0
22613: ST_TO_ADDR
// if result [ 1 ] then
22614: LD_VAR 0 1
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: IFFALSE 22687
// if result [ 1 ] [ 1 ] = i then
22624: LD_VAR 0 1
22628: PUSH
22629: LD_INT 1
22631: ARRAY
22632: PUSH
22633: LD_INT 1
22635: ARRAY
22636: PUSH
22637: LD_VAR 0 5
22641: EQUAL
22642: IFFALSE 22687
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22644: LD_ADDR_VAR 0 1
22648: PUSH
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_INT 1
22656: PPUSH
22657: LD_VAR 0 1
22661: PUSH
22662: LD_INT 1
22664: ARRAY
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL_OW 3
22673: PPUSH
22674: CALL_OW 1
22678: ST_TO_ADDR
// tmp := 1 ;
22679: LD_ADDR_VAR 0 2
22683: PUSH
22684: LD_STRING 1
22686: ST_TO_ADDR
// end ; normal := normal & tmp ;
22687: LD_ADDR_VAR 0 3
22691: PUSH
22692: LD_VAR 0 3
22696: PUSH
22697: LD_VAR 0 2
22701: STR
22702: ST_TO_ADDR
// end ;
22703: GO 22603
22705: POP
22706: POP
// for i = 1 to hardcoreCounter do
22707: LD_ADDR_VAR 0 5
22711: PUSH
22712: DOUBLE
22713: LD_INT 1
22715: DEC
22716: ST_TO_ADDR
22717: LD_EXP 54
22721: PUSH
22722: FOR_TO
22723: IFFALSE 22828
// begin tmp := 0 ;
22725: LD_ADDR_VAR 0 2
22729: PUSH
22730: LD_STRING 0
22732: ST_TO_ADDR
// if result [ 2 ] then
22733: LD_VAR 0 1
22737: PUSH
22738: LD_INT 2
22740: ARRAY
22741: IFFALSE 22810
// if result [ 2 ] [ 1 ] = 100 + i then
22743: LD_VAR 0 1
22747: PUSH
22748: LD_INT 2
22750: ARRAY
22751: PUSH
22752: LD_INT 1
22754: ARRAY
22755: PUSH
22756: LD_INT 100
22758: PUSH
22759: LD_VAR 0 5
22763: PLUS
22764: EQUAL
22765: IFFALSE 22810
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22767: LD_ADDR_VAR 0 1
22771: PUSH
22772: LD_VAR 0 1
22776: PPUSH
22777: LD_INT 2
22779: PPUSH
22780: LD_VAR 0 1
22784: PUSH
22785: LD_INT 2
22787: ARRAY
22788: PPUSH
22789: LD_INT 1
22791: PPUSH
22792: CALL_OW 3
22796: PPUSH
22797: CALL_OW 1
22801: ST_TO_ADDR
// tmp := 1 ;
22802: LD_ADDR_VAR 0 2
22806: PUSH
22807: LD_STRING 1
22809: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22810: LD_ADDR_VAR 0 4
22814: PUSH
22815: LD_VAR 0 4
22819: PUSH
22820: LD_VAR 0 2
22824: STR
22825: ST_TO_ADDR
// end ;
22826: GO 22722
22828: POP
22829: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22830: LD_STRING getStreamItemsFromMission("
22832: PUSH
22833: LD_VAR 0 3
22837: STR
22838: PUSH
22839: LD_STRING ","
22841: STR
22842: PUSH
22843: LD_VAR 0 4
22847: STR
22848: PUSH
22849: LD_STRING ")
22851: STR
22852: PPUSH
22853: CALL_OW 559
// end else
22857: GO 22866
// ToLua ( getStreamItemsFromMission("","") ) ;
22859: LD_STRING getStreamItemsFromMission("","")
22861: PPUSH
22862: CALL_OW 559
// end ;
22866: LD_VAR 0 1
22870: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22871: LD_EXP 52
22875: PUSH
22876: LD_EXP 57
22880: AND
22881: IFFALSE 23005
22883: GO 22885
22885: DISABLE
22886: LD_INT 0
22888: PPUSH
22889: PPUSH
// begin enable ;
22890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22891: LD_ADDR_VAR 0 2
22895: PUSH
22896: LD_INT 22
22898: PUSH
22899: LD_OWVAR 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 34
22913: PUSH
22914: LD_INT 7
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 34
22923: PUSH
22924: LD_INT 45
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 34
22933: PUSH
22934: LD_INT 28
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 34
22943: PUSH
22944: LD_INT 47
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PPUSH
22962: CALL_OW 69
22966: ST_TO_ADDR
// if not tmp then
22967: LD_VAR 0 2
22971: NOT
22972: IFFALSE 22976
// exit ;
22974: GO 23005
// for i in tmp do
22976: LD_ADDR_VAR 0 1
22980: PUSH
22981: LD_VAR 0 2
22985: PUSH
22986: FOR_IN
22987: IFFALSE 23003
// begin SetLives ( i , 0 ) ;
22989: LD_VAR 0 1
22993: PPUSH
22994: LD_INT 0
22996: PPUSH
22997: CALL_OW 234
// end ;
23001: GO 22986
23003: POP
23004: POP
// end ;
23005: PPOPN 2
23007: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23008: LD_EXP 52
23012: PUSH
23013: LD_EXP 58
23017: AND
23018: IFFALSE 23102
23020: GO 23022
23022: DISABLE
23023: LD_INT 0
23025: PPUSH
23026: PPUSH
// begin enable ;
23027: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23028: LD_ADDR_VAR 0 2
23032: PUSH
23033: LD_INT 22
23035: PUSH
23036: LD_OWVAR 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 32
23047: PUSH
23048: LD_INT 3
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PPUSH
23059: CALL_OW 69
23063: ST_TO_ADDR
// if not tmp then
23064: LD_VAR 0 2
23068: NOT
23069: IFFALSE 23073
// exit ;
23071: GO 23102
// for i in tmp do
23073: LD_ADDR_VAR 0 1
23077: PUSH
23078: LD_VAR 0 2
23082: PUSH
23083: FOR_IN
23084: IFFALSE 23100
// begin SetLives ( i , 0 ) ;
23086: LD_VAR 0 1
23090: PPUSH
23091: LD_INT 0
23093: PPUSH
23094: CALL_OW 234
// end ;
23098: GO 23083
23100: POP
23101: POP
// end ;
23102: PPOPN 2
23104: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23105: LD_EXP 52
23109: PUSH
23110: LD_EXP 55
23114: AND
23115: IFFALSE 23208
23117: GO 23119
23119: DISABLE
23120: LD_INT 0
23122: PPUSH
// begin enable ;
23123: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23124: LD_ADDR_VAR 0 1
23128: PUSH
23129: LD_INT 22
23131: PUSH
23132: LD_OWVAR 2
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 25
23146: PUSH
23147: LD_INT 5
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 25
23156: PUSH
23157: LD_INT 9
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 25
23166: PUSH
23167: LD_INT 8
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PPUSH
23184: CALL_OW 69
23188: PUSH
23189: FOR_IN
23190: IFFALSE 23206
// begin SetClass ( i , 1 ) ;
23192: LD_VAR 0 1
23196: PPUSH
23197: LD_INT 1
23199: PPUSH
23200: CALL_OW 336
// end ;
23204: GO 23189
23206: POP
23207: POP
// end ;
23208: PPOPN 1
23210: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23211: LD_EXP 52
23215: PUSH
23216: LD_EXP 56
23220: AND
23221: PUSH
23222: LD_OWVAR 65
23226: PUSH
23227: LD_INT 7
23229: LESS
23230: AND
23231: IFFALSE 23245
23233: GO 23235
23235: DISABLE
// begin enable ;
23236: ENABLE
// game_speed := 7 ;
23237: LD_ADDR_OWVAR 65
23241: PUSH
23242: LD_INT 7
23244: ST_TO_ADDR
// end ;
23245: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23246: LD_EXP 52
23250: PUSH
23251: LD_EXP 59
23255: AND
23256: IFFALSE 23458
23258: GO 23260
23260: DISABLE
23261: LD_INT 0
23263: PPUSH
23264: PPUSH
23265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23266: LD_ADDR_VAR 0 3
23270: PUSH
23271: LD_INT 81
23273: PUSH
23274: LD_OWVAR 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 21
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 3
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23458
// if tmp > 5 then
23311: LD_VAR 0 3
23315: PUSH
23316: LD_INT 5
23318: GREATER
23319: IFFALSE 23331
// k := 5 else
23321: LD_ADDR_VAR 0 2
23325: PUSH
23326: LD_INT 5
23328: ST_TO_ADDR
23329: GO 23341
// k := tmp ;
23331: LD_ADDR_VAR 0 2
23335: PUSH
23336: LD_VAR 0 3
23340: ST_TO_ADDR
// for i := 1 to k do
23341: LD_ADDR_VAR 0 1
23345: PUSH
23346: DOUBLE
23347: LD_INT 1
23349: DEC
23350: ST_TO_ADDR
23351: LD_VAR 0 2
23355: PUSH
23356: FOR_TO
23357: IFFALSE 23456
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23359: LD_VAR 0 3
23363: PUSH
23364: LD_VAR 0 1
23368: ARRAY
23369: PPUSH
23370: LD_VAR 0 1
23374: PUSH
23375: LD_INT 4
23377: MOD
23378: PUSH
23379: LD_INT 1
23381: PLUS
23382: PPUSH
23383: CALL_OW 259
23387: PUSH
23388: LD_INT 10
23390: LESS
23391: IFFALSE 23454
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23393: LD_VAR 0 3
23397: PUSH
23398: LD_VAR 0 1
23402: ARRAY
23403: PPUSH
23404: LD_VAR 0 1
23408: PUSH
23409: LD_INT 4
23411: MOD
23412: PUSH
23413: LD_INT 1
23415: PLUS
23416: PPUSH
23417: LD_VAR 0 3
23421: PUSH
23422: LD_VAR 0 1
23426: ARRAY
23427: PPUSH
23428: LD_VAR 0 1
23432: PUSH
23433: LD_INT 4
23435: MOD
23436: PUSH
23437: LD_INT 1
23439: PLUS
23440: PPUSH
23441: CALL_OW 259
23445: PUSH
23446: LD_INT 1
23448: PLUS
23449: PPUSH
23450: CALL_OW 237
23454: GO 23356
23456: POP
23457: POP
// end ;
23458: PPOPN 3
23460: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23461: LD_EXP 52
23465: PUSH
23466: LD_EXP 60
23470: AND
23471: IFFALSE 23491
23473: GO 23475
23475: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23476: LD_INT 4
23478: PPUSH
23479: LD_OWVAR 2
23483: PPUSH
23484: LD_INT 0
23486: PPUSH
23487: CALL_OW 324
23491: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23492: LD_EXP 52
23496: PUSH
23497: LD_EXP 89
23501: AND
23502: IFFALSE 23522
23504: GO 23506
23506: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23507: LD_INT 19
23509: PPUSH
23510: LD_OWVAR 2
23514: PPUSH
23515: LD_INT 0
23517: PPUSH
23518: CALL_OW 324
23522: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23523: LD_EXP 52
23527: PUSH
23528: LD_EXP 61
23532: AND
23533: IFFALSE 23635
23535: GO 23537
23537: DISABLE
23538: LD_INT 0
23540: PPUSH
23541: PPUSH
// begin enable ;
23542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23543: LD_ADDR_VAR 0 2
23547: PUSH
23548: LD_INT 22
23550: PUSH
23551: LD_OWVAR 2
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: PUSH
23563: LD_INT 34
23565: PUSH
23566: LD_INT 11
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 34
23575: PUSH
23576: LD_INT 30
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PPUSH
23592: CALL_OW 69
23596: ST_TO_ADDR
// if not tmp then
23597: LD_VAR 0 2
23601: NOT
23602: IFFALSE 23606
// exit ;
23604: GO 23635
// for i in tmp do
23606: LD_ADDR_VAR 0 1
23610: PUSH
23611: LD_VAR 0 2
23615: PUSH
23616: FOR_IN
23617: IFFALSE 23633
// begin SetLives ( i , 0 ) ;
23619: LD_VAR 0 1
23623: PPUSH
23624: LD_INT 0
23626: PPUSH
23627: CALL_OW 234
// end ;
23631: GO 23616
23633: POP
23634: POP
// end ;
23635: PPOPN 2
23637: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23638: LD_EXP 52
23642: PUSH
23643: LD_EXP 62
23647: AND
23648: IFFALSE 23668
23650: GO 23652
23652: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23653: LD_INT 32
23655: PPUSH
23656: LD_OWVAR 2
23660: PPUSH
23661: LD_INT 0
23663: PPUSH
23664: CALL_OW 324
23668: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23669: LD_EXP 52
23673: PUSH
23674: LD_EXP 63
23678: AND
23679: IFFALSE 23860
23681: GO 23683
23683: DISABLE
23684: LD_INT 0
23686: PPUSH
23687: PPUSH
23688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 22
23696: PUSH
23697: LD_OWVAR 2
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 33
23708: PUSH
23709: LD_INT 3
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PPUSH
23720: CALL_OW 69
23724: ST_TO_ADDR
// if not tmp then
23725: LD_VAR 0 2
23729: NOT
23730: IFFALSE 23734
// exit ;
23732: GO 23860
// side := 0 ;
23734: LD_ADDR_VAR 0 3
23738: PUSH
23739: LD_INT 0
23741: ST_TO_ADDR
// for i := 1 to 8 do
23742: LD_ADDR_VAR 0 1
23746: PUSH
23747: DOUBLE
23748: LD_INT 1
23750: DEC
23751: ST_TO_ADDR
23752: LD_INT 8
23754: PUSH
23755: FOR_TO
23756: IFFALSE 23804
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23758: LD_OWVAR 2
23762: PUSH
23763: LD_VAR 0 1
23767: NONEQUAL
23768: PUSH
23769: LD_OWVAR 2
23773: PPUSH
23774: LD_VAR 0 1
23778: PPUSH
23779: CALL_OW 81
23783: PUSH
23784: LD_INT 2
23786: EQUAL
23787: AND
23788: IFFALSE 23802
// begin side := i ;
23790: LD_ADDR_VAR 0 3
23794: PUSH
23795: LD_VAR 0 1
23799: ST_TO_ADDR
// break ;
23800: GO 23804
// end ;
23802: GO 23755
23804: POP
23805: POP
// if not side then
23806: LD_VAR 0 3
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23860
// for i := 1 to tmp do
23815: LD_ADDR_VAR 0 1
23819: PUSH
23820: DOUBLE
23821: LD_INT 1
23823: DEC
23824: ST_TO_ADDR
23825: LD_VAR 0 2
23829: PUSH
23830: FOR_TO
23831: IFFALSE 23858
// if Prob ( 60 ) then
23833: LD_INT 60
23835: PPUSH
23836: CALL_OW 13
23840: IFFALSE 23856
// SetSide ( i , side ) ;
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_VAR 0 3
23851: PPUSH
23852: CALL_OW 235
23856: GO 23830
23858: POP
23859: POP
// end ;
23860: PPOPN 3
23862: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23863: LD_EXP 52
23867: PUSH
23868: LD_EXP 65
23872: AND
23873: IFFALSE 23992
23875: GO 23877
23877: DISABLE
23878: LD_INT 0
23880: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: LD_INT 22
23888: PUSH
23889: LD_OWVAR 2
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 21
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 3
23910: PUSH
23911: LD_INT 23
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: PPUSH
23930: CALL_OW 69
23934: PUSH
23935: FOR_IN
23936: IFFALSE 23990
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 257
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: LD_INT 3
23956: PUSH
23957: LD_INT 4
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: IN
23966: IFFALSE 23988
// SetClass ( un , rand ( 1 , 4 ) ) ;
23968: LD_VAR 0 1
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: LD_INT 4
23978: PPUSH
23979: CALL_OW 12
23983: PPUSH
23984: CALL_OW 336
23988: GO 23935
23990: POP
23991: POP
// end ;
23992: PPOPN 1
23994: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23995: LD_EXP 52
23999: PUSH
24000: LD_EXP 64
24004: AND
24005: IFFALSE 24084
24007: GO 24009
24009: DISABLE
24010: LD_INT 0
24012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24013: LD_ADDR_VAR 0 1
24017: PUSH
24018: LD_INT 22
24020: PUSH
24021: LD_OWVAR 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 21
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PPUSH
24044: CALL_OW 69
24048: ST_TO_ADDR
// if not tmp then
24049: LD_VAR 0 1
24053: NOT
24054: IFFALSE 24058
// exit ;
24056: GO 24084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24058: LD_VAR 0 1
24062: PUSH
24063: LD_INT 1
24065: PPUSH
24066: LD_VAR 0 1
24070: PPUSH
24071: CALL_OW 12
24075: ARRAY
24076: PPUSH
24077: LD_INT 100
24079: PPUSH
24080: CALL_OW 234
// end ;
24084: PPOPN 1
24086: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24087: LD_EXP 52
24091: PUSH
24092: LD_EXP 66
24096: AND
24097: IFFALSE 24195
24099: GO 24101
24101: DISABLE
24102: LD_INT 0
24104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24105: LD_ADDR_VAR 0 1
24109: PUSH
24110: LD_INT 22
24112: PUSH
24113: LD_OWVAR 2
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PPUSH
24136: CALL_OW 69
24140: ST_TO_ADDR
// if not tmp then
24141: LD_VAR 0 1
24145: NOT
24146: IFFALSE 24150
// exit ;
24148: GO 24195
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24150: LD_VAR 0 1
24154: PUSH
24155: LD_INT 1
24157: PPUSH
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL_OW 12
24167: ARRAY
24168: PPUSH
24169: LD_INT 1
24171: PPUSH
24172: LD_INT 4
24174: PPUSH
24175: CALL_OW 12
24179: PPUSH
24180: LD_INT 3000
24182: PPUSH
24183: LD_INT 9000
24185: PPUSH
24186: CALL_OW 12
24190: PPUSH
24191: CALL_OW 492
// end ;
24195: PPOPN 1
24197: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24198: LD_EXP 52
24202: PUSH
24203: LD_EXP 67
24207: AND
24208: IFFALSE 24228
24210: GO 24212
24212: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24213: LD_INT 1
24215: PPUSH
24216: LD_OWVAR 2
24220: PPUSH
24221: LD_INT 0
24223: PPUSH
24224: CALL_OW 324
24228: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24229: LD_EXP 52
24233: PUSH
24234: LD_EXP 68
24238: AND
24239: IFFALSE 24322
24241: GO 24243
24243: DISABLE
24244: LD_INT 0
24246: PPUSH
24247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24248: LD_ADDR_VAR 0 2
24252: PUSH
24253: LD_INT 22
24255: PUSH
24256: LD_OWVAR 2
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 21
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PPUSH
24279: CALL_OW 69
24283: ST_TO_ADDR
// if not tmp then
24284: LD_VAR 0 2
24288: NOT
24289: IFFALSE 24293
// exit ;
24291: GO 24322
// for i in tmp do
24293: LD_ADDR_VAR 0 1
24297: PUSH
24298: LD_VAR 0 2
24302: PUSH
24303: FOR_IN
24304: IFFALSE 24320
// SetBLevel ( i , 10 ) ;
24306: LD_VAR 0 1
24310: PPUSH
24311: LD_INT 10
24313: PPUSH
24314: CALL_OW 241
24318: GO 24303
24320: POP
24321: POP
// end ;
24322: PPOPN 2
24324: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24325: LD_EXP 52
24329: PUSH
24330: LD_EXP 69
24334: AND
24335: IFFALSE 24446
24337: GO 24339
24339: DISABLE
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
24344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: LD_INT 22
24352: PUSH
24353: LD_OWVAR 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 25
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PPUSH
24376: CALL_OW 69
24380: ST_TO_ADDR
// if not tmp then
24381: LD_VAR 0 3
24385: NOT
24386: IFFALSE 24390
// exit ;
24388: GO 24446
// un := tmp [ rand ( 1 , tmp ) ] ;
24390: LD_ADDR_VAR 0 2
24394: PUSH
24395: LD_VAR 0 3
24399: PUSH
24400: LD_INT 1
24402: PPUSH
24403: LD_VAR 0 3
24407: PPUSH
24408: CALL_OW 12
24412: ARRAY
24413: ST_TO_ADDR
// if Crawls ( un ) then
24414: LD_VAR 0 2
24418: PPUSH
24419: CALL_OW 318
24423: IFFALSE 24434
// ComWalk ( un ) ;
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24434: LD_VAR 0 2
24438: PPUSH
24439: LD_INT 5
24441: PPUSH
24442: CALL_OW 336
// end ;
24446: PPOPN 3
24448: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24449: LD_EXP 52
24453: PUSH
24454: LD_EXP 70
24458: AND
24459: PUSH
24460: LD_OWVAR 67
24464: PUSH
24465: LD_INT 3
24467: LESS
24468: AND
24469: IFFALSE 24488
24471: GO 24473
24473: DISABLE
// Difficulty := Difficulty + 1 ;
24474: LD_ADDR_OWVAR 67
24478: PUSH
24479: LD_OWVAR 67
24483: PUSH
24484: LD_INT 1
24486: PLUS
24487: ST_TO_ADDR
24488: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24489: LD_EXP 52
24493: PUSH
24494: LD_EXP 71
24498: AND
24499: IFFALSE 24602
24501: GO 24503
24503: DISABLE
24504: LD_INT 0
24506: PPUSH
// begin for i := 1 to 5 do
24507: LD_ADDR_VAR 0 1
24511: PUSH
24512: DOUBLE
24513: LD_INT 1
24515: DEC
24516: ST_TO_ADDR
24517: LD_INT 5
24519: PUSH
24520: FOR_TO
24521: IFFALSE 24600
// begin uc_nation := nation_nature ;
24523: LD_ADDR_OWVAR 21
24527: PUSH
24528: LD_INT 0
24530: ST_TO_ADDR
// uc_side := 0 ;
24531: LD_ADDR_OWVAR 20
24535: PUSH
24536: LD_INT 0
24538: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24539: LD_ADDR_OWVAR 29
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 12
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: ST_TO_ADDR
// hc_agressivity := 20 ;
24554: LD_ADDR_OWVAR 35
24558: PUSH
24559: LD_INT 20
24561: ST_TO_ADDR
// hc_class := class_tiger ;
24562: LD_ADDR_OWVAR 28
24566: PUSH
24567: LD_INT 14
24569: ST_TO_ADDR
// hc_gallery :=  ;
24570: LD_ADDR_OWVAR 33
24574: PUSH
24575: LD_STRING 
24577: ST_TO_ADDR
// hc_name :=  ;
24578: LD_ADDR_OWVAR 26
24582: PUSH
24583: LD_STRING 
24585: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24586: CALL_OW 44
24590: PPUSH
24591: LD_INT 0
24593: PPUSH
24594: CALL_OW 51
// end ;
24598: GO 24520
24600: POP
24601: POP
// end ;
24602: PPOPN 1
24604: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24605: LD_EXP 52
24609: PUSH
24610: LD_EXP 72
24614: AND
24615: IFFALSE 24624
24617: GO 24619
24619: DISABLE
// StreamSibBomb ;
24620: CALL 24625 0 0
24624: END
// export function StreamSibBomb ; var i , x , y ; begin
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
// result := false ;
24631: LD_ADDR_VAR 0 1
24635: PUSH
24636: LD_INT 0
24638: ST_TO_ADDR
// for i := 1 to 16 do
24639: LD_ADDR_VAR 0 2
24643: PUSH
24644: DOUBLE
24645: LD_INT 1
24647: DEC
24648: ST_TO_ADDR
24649: LD_INT 16
24651: PUSH
24652: FOR_TO
24653: IFFALSE 24852
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24655: LD_ADDR_VAR 0 3
24659: PUSH
24660: LD_INT 10
24662: PUSH
24663: LD_INT 20
24665: PUSH
24666: LD_INT 30
24668: PUSH
24669: LD_INT 40
24671: PUSH
24672: LD_INT 50
24674: PUSH
24675: LD_INT 60
24677: PUSH
24678: LD_INT 70
24680: PUSH
24681: LD_INT 80
24683: PUSH
24684: LD_INT 90
24686: PUSH
24687: LD_INT 100
24689: PUSH
24690: LD_INT 110
24692: PUSH
24693: LD_INT 120
24695: PUSH
24696: LD_INT 130
24698: PUSH
24699: LD_INT 140
24701: PUSH
24702: LD_INT 150
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PPUSH
24725: LD_INT 15
24727: PPUSH
24728: CALL_OW 12
24732: ARRAY
24733: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24734: LD_ADDR_VAR 0 4
24738: PUSH
24739: LD_INT 10
24741: PUSH
24742: LD_INT 20
24744: PUSH
24745: LD_INT 30
24747: PUSH
24748: LD_INT 40
24750: PUSH
24751: LD_INT 50
24753: PUSH
24754: LD_INT 60
24756: PUSH
24757: LD_INT 70
24759: PUSH
24760: LD_INT 80
24762: PUSH
24763: LD_INT 90
24765: PUSH
24766: LD_INT 100
24768: PUSH
24769: LD_INT 110
24771: PUSH
24772: LD_INT 120
24774: PUSH
24775: LD_INT 130
24777: PUSH
24778: LD_INT 140
24780: PUSH
24781: LD_INT 150
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: PPUSH
24804: LD_INT 15
24806: PPUSH
24807: CALL_OW 12
24811: ARRAY
24812: ST_TO_ADDR
// if ValidHex ( x , y ) then
24813: LD_VAR 0 3
24817: PPUSH
24818: LD_VAR 0 4
24822: PPUSH
24823: CALL_OW 488
24827: IFFALSE 24850
// begin result := [ x , y ] ;
24829: LD_ADDR_VAR 0 1
24833: PUSH
24834: LD_VAR 0 3
24838: PUSH
24839: LD_VAR 0 4
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: ST_TO_ADDR
// break ;
24848: GO 24852
// end ; end ;
24850: GO 24652
24852: POP
24853: POP
// if result then
24854: LD_VAR 0 1
24858: IFFALSE 24918
// begin ToLua ( playSibBomb() ) ;
24860: LD_STRING playSibBomb()
24862: PPUSH
24863: CALL_OW 559
// wait ( 0 0$14 ) ;
24867: LD_INT 490
24869: PPUSH
24870: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24874: LD_VAR 0 1
24878: PUSH
24879: LD_INT 1
24881: ARRAY
24882: PPUSH
24883: LD_VAR 0 1
24887: PUSH
24888: LD_INT 2
24890: ARRAY
24891: PPUSH
24892: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24896: LD_VAR 0 1
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: LD_VAR 0 1
24909: PUSH
24910: LD_INT 2
24912: ARRAY
24913: PPUSH
24914: CALL_OW 429
// end ; end ;
24918: LD_VAR 0 1
24922: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24923: LD_EXP 52
24927: PUSH
24928: LD_EXP 74
24932: AND
24933: IFFALSE 24945
24935: GO 24937
24937: DISABLE
// YouLost (  ) ;
24938: LD_STRING 
24940: PPUSH
24941: CALL_OW 104
24945: END
// every 0 0$1 trigger StreamModeActive and sFog do
24946: LD_EXP 52
24950: PUSH
24951: LD_EXP 73
24955: AND
24956: IFFALSE 24970
24958: GO 24960
24960: DISABLE
// FogOff ( your_side ) ;
24961: LD_OWVAR 2
24965: PPUSH
24966: CALL_OW 344
24970: END
// every 0 0$1 trigger StreamModeActive and sSun do
24971: LD_EXP 52
24975: PUSH
24976: LD_EXP 75
24980: AND
24981: IFFALSE 25009
24983: GO 24985
24985: DISABLE
// begin solar_recharge_percent := 0 ;
24986: LD_ADDR_OWVAR 79
24990: PUSH
24991: LD_INT 0
24993: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24994: LD_INT 10500
24996: PPUSH
24997: CALL_OW 67
// solar_recharge_percent := 100 ;
25001: LD_ADDR_OWVAR 79
25005: PUSH
25006: LD_INT 100
25008: ST_TO_ADDR
// end ;
25009: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25010: LD_EXP 52
25014: PUSH
25015: LD_EXP 76
25019: AND
25020: IFFALSE 25259
25022: GO 25024
25024: DISABLE
25025: LD_INT 0
25027: PPUSH
25028: PPUSH
25029: PPUSH
// begin tmp := [ ] ;
25030: LD_ADDR_VAR 0 3
25034: PUSH
25035: EMPTY
25036: ST_TO_ADDR
// for i := 1 to 6 do
25037: LD_ADDR_VAR 0 1
25041: PUSH
25042: DOUBLE
25043: LD_INT 1
25045: DEC
25046: ST_TO_ADDR
25047: LD_INT 6
25049: PUSH
25050: FOR_TO
25051: IFFALSE 25156
// begin uc_nation := nation_nature ;
25053: LD_ADDR_OWVAR 21
25057: PUSH
25058: LD_INT 0
25060: ST_TO_ADDR
// uc_side := 0 ;
25061: LD_ADDR_OWVAR 20
25065: PUSH
25066: LD_INT 0
25068: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25069: LD_ADDR_OWVAR 29
25073: PUSH
25074: LD_INT 12
25076: PUSH
25077: LD_INT 12
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: ST_TO_ADDR
// hc_agressivity := 20 ;
25084: LD_ADDR_OWVAR 35
25088: PUSH
25089: LD_INT 20
25091: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25092: LD_ADDR_OWVAR 28
25096: PUSH
25097: LD_INT 17
25099: ST_TO_ADDR
// hc_gallery :=  ;
25100: LD_ADDR_OWVAR 33
25104: PUSH
25105: LD_STRING 
25107: ST_TO_ADDR
// hc_name :=  ;
25108: LD_ADDR_OWVAR 26
25112: PUSH
25113: LD_STRING 
25115: ST_TO_ADDR
// un := CreateHuman ;
25116: LD_ADDR_VAR 0 2
25120: PUSH
25121: CALL_OW 44
25125: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25126: LD_VAR 0 2
25130: PPUSH
25131: LD_INT 1
25133: PPUSH
25134: CALL_OW 51
// tmp := tmp ^ un ;
25138: LD_ADDR_VAR 0 3
25142: PUSH
25143: LD_VAR 0 3
25147: PUSH
25148: LD_VAR 0 2
25152: ADD
25153: ST_TO_ADDR
// end ;
25154: GO 25050
25156: POP
25157: POP
// repeat wait ( 0 0$1 ) ;
25158: LD_INT 35
25160: PPUSH
25161: CALL_OW 67
// for un in tmp do
25165: LD_ADDR_VAR 0 2
25169: PUSH
25170: LD_VAR 0 3
25174: PUSH
25175: FOR_IN
25176: IFFALSE 25250
// begin if IsDead ( un ) then
25178: LD_VAR 0 2
25182: PPUSH
25183: CALL_OW 301
25187: IFFALSE 25207
// begin tmp := tmp diff un ;
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_VAR 0 3
25198: PUSH
25199: LD_VAR 0 2
25203: DIFF
25204: ST_TO_ADDR
// continue ;
25205: GO 25175
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25207: LD_VAR 0 2
25211: PPUSH
25212: LD_INT 3
25214: PUSH
25215: LD_INT 22
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: PPUSH
25234: LD_VAR 0 2
25238: PPUSH
25239: CALL_OW 74
25243: PPUSH
25244: CALL_OW 115
// end ;
25248: GO 25175
25250: POP
25251: POP
// until not tmp ;
25252: LD_VAR 0 3
25256: NOT
25257: IFFALSE 25158
// end ;
25259: PPOPN 3
25261: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25262: LD_EXP 52
25266: PUSH
25267: LD_EXP 77
25271: AND
25272: IFFALSE 25326
25274: GO 25276
25276: DISABLE
// begin ToLua ( displayTroll(); ) ;
25277: LD_STRING displayTroll();
25279: PPUSH
25280: CALL_OW 559
// wait ( 3 3$00 ) ;
25284: LD_INT 6300
25286: PPUSH
25287: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25291: LD_STRING hideTroll();
25293: PPUSH
25294: CALL_OW 559
// wait ( 1 1$00 ) ;
25298: LD_INT 2100
25300: PPUSH
25301: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25305: LD_STRING displayTroll();
25307: PPUSH
25308: CALL_OW 559
// wait ( 1 1$00 ) ;
25312: LD_INT 2100
25314: PPUSH
25315: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25319: LD_STRING hideTroll();
25321: PPUSH
25322: CALL_OW 559
// end ;
25326: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25327: LD_EXP 52
25331: PUSH
25332: LD_EXP 78
25336: AND
25337: IFFALSE 25400
25339: GO 25341
25341: DISABLE
25342: LD_INT 0
25344: PPUSH
// begin p := 0 ;
25345: LD_ADDR_VAR 0 1
25349: PUSH
25350: LD_INT 0
25352: ST_TO_ADDR
// repeat game_speed := 1 ;
25353: LD_ADDR_OWVAR 65
25357: PUSH
25358: LD_INT 1
25360: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25361: LD_INT 35
25363: PPUSH
25364: CALL_OW 67
// p := p + 1 ;
25368: LD_ADDR_VAR 0 1
25372: PUSH
25373: LD_VAR 0 1
25377: PUSH
25378: LD_INT 1
25380: PLUS
25381: ST_TO_ADDR
// until p >= 60 ;
25382: LD_VAR 0 1
25386: PUSH
25387: LD_INT 60
25389: GREATEREQUAL
25390: IFFALSE 25353
// game_speed := 4 ;
25392: LD_ADDR_OWVAR 65
25396: PUSH
25397: LD_INT 4
25399: ST_TO_ADDR
// end ;
25400: PPOPN 1
25402: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25403: LD_EXP 52
25407: PUSH
25408: LD_EXP 79
25412: AND
25413: IFFALSE 25559
25415: GO 25417
25417: DISABLE
25418: LD_INT 0
25420: PPUSH
25421: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25422: LD_ADDR_VAR 0 1
25426: PUSH
25427: LD_INT 22
25429: PUSH
25430: LD_OWVAR 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: LD_INT 30
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 30
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PPUSH
25471: CALL_OW 69
25475: ST_TO_ADDR
// if not depot then
25476: LD_VAR 0 1
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25559
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25485: LD_ADDR_VAR 0 2
25489: PUSH
25490: LD_VAR 0 1
25494: PUSH
25495: LD_INT 1
25497: PPUSH
25498: LD_VAR 0 1
25502: PPUSH
25503: CALL_OW 12
25507: ARRAY
25508: PPUSH
25509: CALL_OW 274
25513: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25514: LD_VAR 0 2
25518: PPUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_INT 0
25524: PPUSH
25525: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25529: LD_VAR 0 2
25533: PPUSH
25534: LD_INT 2
25536: PPUSH
25537: LD_INT 0
25539: PPUSH
25540: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25544: LD_VAR 0 2
25548: PPUSH
25549: LD_INT 3
25551: PPUSH
25552: LD_INT 0
25554: PPUSH
25555: CALL_OW 277
// end ;
25559: PPOPN 2
25561: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25562: LD_EXP 52
25566: PUSH
25567: LD_EXP 80
25571: AND
25572: IFFALSE 25669
25574: GO 25576
25576: DISABLE
25577: LD_INT 0
25579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25580: LD_ADDR_VAR 0 1
25584: PUSH
25585: LD_INT 22
25587: PUSH
25588: LD_OWVAR 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 21
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: PUSH
25610: LD_INT 23
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: PPUSH
25629: CALL_OW 69
25633: ST_TO_ADDR
// if not tmp then
25634: LD_VAR 0 1
25638: NOT
25639: IFFALSE 25643
// exit ;
25641: GO 25669
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25643: LD_VAR 0 1
25647: PUSH
25648: LD_INT 1
25650: PPUSH
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 12
25660: ARRAY
25661: PPUSH
25662: LD_INT 200
25664: PPUSH
25665: CALL_OW 234
// end ;
25669: PPOPN 1
25671: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25672: LD_EXP 52
25676: PUSH
25677: LD_EXP 81
25681: AND
25682: IFFALSE 25761
25684: GO 25686
25686: DISABLE
25687: LD_INT 0
25689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25690: LD_ADDR_VAR 0 1
25694: PUSH
25695: LD_INT 22
25697: PUSH
25698: LD_OWVAR 2
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 21
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 69
25725: ST_TO_ADDR
// if not tmp then
25726: LD_VAR 0 1
25730: NOT
25731: IFFALSE 25735
// exit ;
25733: GO 25761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25735: LD_VAR 0 1
25739: PUSH
25740: LD_INT 1
25742: PPUSH
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL_OW 12
25752: ARRAY
25753: PPUSH
25754: LD_INT 60
25756: PPUSH
25757: CALL_OW 234
// end ;
25761: PPOPN 1
25763: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25764: LD_EXP 52
25768: PUSH
25769: LD_EXP 82
25773: AND
25774: IFFALSE 25873
25776: GO 25778
25778: DISABLE
25779: LD_INT 0
25781: PPUSH
25782: PPUSH
// begin enable ;
25783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25784: LD_ADDR_VAR 0 1
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_OWVAR 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 61
25803: PUSH
25804: EMPTY
25805: LIST
25806: PUSH
25807: LD_INT 33
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 69
25826: ST_TO_ADDR
// if not tmp then
25827: LD_VAR 0 1
25831: NOT
25832: IFFALSE 25836
// exit ;
25834: GO 25873
// for i in tmp do
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_VAR 0 1
25845: PUSH
25846: FOR_IN
25847: IFFALSE 25871
// if IsControledBy ( i ) then
25849: LD_VAR 0 2
25853: PPUSH
25854: CALL_OW 312
25858: IFFALSE 25869
// ComUnlink ( i ) ;
25860: LD_VAR 0 2
25864: PPUSH
25865: CALL_OW 136
25869: GO 25846
25871: POP
25872: POP
// end ;
25873: PPOPN 2
25875: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25876: LD_EXP 52
25880: PUSH
25881: LD_EXP 83
25885: AND
25886: IFFALSE 26026
25888: GO 25890
25890: DISABLE
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
// begin ToLua ( displayPowell(); ) ;
25895: LD_STRING displayPowell();
25897: PPUSH
25898: CALL_OW 559
// uc_side := 0 ;
25902: LD_ADDR_OWVAR 20
25906: PUSH
25907: LD_INT 0
25909: ST_TO_ADDR
// uc_nation := 2 ;
25910: LD_ADDR_OWVAR 21
25914: PUSH
25915: LD_INT 2
25917: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25918: LD_ADDR_OWVAR 37
25922: PUSH
25923: LD_INT 14
25925: ST_TO_ADDR
// vc_engine := engine_siberite ;
25926: LD_ADDR_OWVAR 39
25930: PUSH
25931: LD_INT 3
25933: ST_TO_ADDR
// vc_control := control_apeman ;
25934: LD_ADDR_OWVAR 38
25938: PUSH
25939: LD_INT 5
25941: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25942: LD_ADDR_OWVAR 40
25946: PUSH
25947: LD_INT 29
25949: ST_TO_ADDR
// un := CreateVehicle ;
25950: LD_ADDR_VAR 0 2
25954: PUSH
25955: CALL_OW 45
25959: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_INT 1
25967: PPUSH
25968: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25972: LD_INT 35
25974: PPUSH
25975: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25979: LD_VAR 0 2
25983: PPUSH
25984: LD_INT 22
25986: PUSH
25987: LD_OWVAR 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 69
26000: PPUSH
26001: LD_VAR 0 2
26005: PPUSH
26006: CALL_OW 74
26010: PPUSH
26011: CALL_OW 115
// until IsDead ( un ) ;
26015: LD_VAR 0 2
26019: PPUSH
26020: CALL_OW 301
26024: IFFALSE 25972
// end ;
26026: PPOPN 2
26028: END
// every 0 0$1 trigger StreamModeActive and sStu do
26029: LD_EXP 52
26033: PUSH
26034: LD_EXP 91
26038: AND
26039: IFFALSE 26055
26041: GO 26043
26043: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26044: LD_STRING displayStucuk();
26046: PPUSH
26047: CALL_OW 559
// ResetFog ;
26051: CALL_OW 335
// end ;
26055: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26056: LD_EXP 52
26060: PUSH
26061: LD_EXP 84
26065: AND
26066: IFFALSE 26207
26068: GO 26070
26070: DISABLE
26071: LD_INT 0
26073: PPUSH
26074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26075: LD_ADDR_VAR 0 2
26079: PUSH
26080: LD_INT 22
26082: PUSH
26083: LD_OWVAR 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 21
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PPUSH
26106: CALL_OW 69
26110: ST_TO_ADDR
// if not tmp then
26111: LD_VAR 0 2
26115: NOT
26116: IFFALSE 26120
// exit ;
26118: GO 26207
// un := tmp [ rand ( 1 , tmp ) ] ;
26120: LD_ADDR_VAR 0 1
26124: PUSH
26125: LD_VAR 0 2
26129: PUSH
26130: LD_INT 1
26132: PPUSH
26133: LD_VAR 0 2
26137: PPUSH
26138: CALL_OW 12
26142: ARRAY
26143: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26144: LD_VAR 0 1
26148: PPUSH
26149: LD_INT 0
26151: PPUSH
26152: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26156: LD_VAR 0 1
26160: PPUSH
26161: LD_OWVAR 3
26165: PUSH
26166: LD_VAR 0 1
26170: DIFF
26171: PPUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 74
26181: PPUSH
26182: CALL_OW 115
// wait ( 0 0$20 ) ;
26186: LD_INT 700
26188: PPUSH
26189: CALL_OW 67
// SetSide ( un , your_side ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_OWVAR 2
26202: PPUSH
26203: CALL_OW 235
// end ;
26207: PPOPN 2
26209: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26210: LD_EXP 52
26214: PUSH
26215: LD_EXP 85
26219: AND
26220: IFFALSE 26326
26222: GO 26224
26224: DISABLE
26225: LD_INT 0
26227: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26228: LD_ADDR_VAR 0 1
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_OWVAR 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 2
26247: PUSH
26248: LD_INT 30
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 30
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PPUSH
26277: CALL_OW 69
26281: ST_TO_ADDR
// if not depot then
26282: LD_VAR 0 1
26286: NOT
26287: IFFALSE 26291
// exit ;
26289: GO 26326
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26291: LD_VAR 0 1
26295: PUSH
26296: LD_INT 1
26298: ARRAY
26299: PPUSH
26300: CALL_OW 250
26304: PPUSH
26305: LD_VAR 0 1
26309: PUSH
26310: LD_INT 1
26312: ARRAY
26313: PPUSH
26314: CALL_OW 251
26318: PPUSH
26319: LD_INT 70
26321: PPUSH
26322: CALL_OW 495
// end ;
26326: PPOPN 1
26328: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26329: LD_EXP 52
26333: PUSH
26334: LD_EXP 86
26338: AND
26339: IFFALSE 26550
26341: GO 26343
26343: DISABLE
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
26348: PPUSH
26349: PPUSH
26350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26351: LD_ADDR_VAR 0 5
26355: PUSH
26356: LD_INT 22
26358: PUSH
26359: LD_OWVAR 2
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 21
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PPUSH
26382: CALL_OW 69
26386: ST_TO_ADDR
// if not tmp then
26387: LD_VAR 0 5
26391: NOT
26392: IFFALSE 26396
// exit ;
26394: GO 26550
// for i in tmp do
26396: LD_ADDR_VAR 0 1
26400: PUSH
26401: LD_VAR 0 5
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26548
// begin d := rand ( 0 , 5 ) ;
26409: LD_ADDR_VAR 0 4
26413: PUSH
26414: LD_INT 0
26416: PPUSH
26417: LD_INT 5
26419: PPUSH
26420: CALL_OW 12
26424: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26425: LD_ADDR_VAR 0 2
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 250
26439: PPUSH
26440: LD_VAR 0 4
26444: PPUSH
26445: LD_INT 3
26447: PPUSH
26448: LD_INT 12
26450: PPUSH
26451: CALL_OW 12
26455: PPUSH
26456: CALL_OW 272
26460: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26461: LD_ADDR_VAR 0 3
26465: PUSH
26466: LD_VAR 0 1
26470: PPUSH
26471: CALL_OW 251
26475: PPUSH
26476: LD_VAR 0 4
26480: PPUSH
26481: LD_INT 3
26483: PPUSH
26484: LD_INT 12
26486: PPUSH
26487: CALL_OW 12
26491: PPUSH
26492: CALL_OW 273
26496: ST_TO_ADDR
// if ValidHex ( x , y ) then
26497: LD_VAR 0 2
26501: PPUSH
26502: LD_VAR 0 3
26506: PPUSH
26507: CALL_OW 488
26511: IFFALSE 26546
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_VAR 0 2
26522: PPUSH
26523: LD_VAR 0 3
26527: PPUSH
26528: LD_INT 3
26530: PPUSH
26531: LD_INT 6
26533: PPUSH
26534: CALL_OW 12
26538: PPUSH
26539: LD_INT 1
26541: PPUSH
26542: CALL_OW 483
// end ;
26546: GO 26406
26548: POP
26549: POP
// end ;
26550: PPOPN 5
26552: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26553: LD_EXP 52
26557: PUSH
26558: LD_EXP 87
26562: AND
26563: IFFALSE 26657
26565: GO 26567
26567: DISABLE
26568: LD_INT 0
26570: PPUSH
26571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26572: LD_ADDR_VAR 0 2
26576: PUSH
26577: LD_INT 22
26579: PUSH
26580: LD_OWVAR 2
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 32
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 21
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: ST_TO_ADDR
// if not tmp then
26619: LD_VAR 0 2
26623: NOT
26624: IFFALSE 26628
// exit ;
26626: GO 26657
// for i in tmp do
26628: LD_ADDR_VAR 0 1
26632: PUSH
26633: LD_VAR 0 2
26637: PUSH
26638: FOR_IN
26639: IFFALSE 26655
// SetFuel ( i , 0 ) ;
26641: LD_VAR 0 1
26645: PPUSH
26646: LD_INT 0
26648: PPUSH
26649: CALL_OW 240
26653: GO 26638
26655: POP
26656: POP
// end ;
26657: PPOPN 2
26659: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26660: LD_EXP 52
26664: PUSH
26665: LD_EXP 88
26669: AND
26670: IFFALSE 26736
26672: GO 26674
26674: DISABLE
26675: LD_INT 0
26677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26678: LD_ADDR_VAR 0 1
26682: PUSH
26683: LD_INT 22
26685: PUSH
26686: LD_OWVAR 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 30
26697: PUSH
26698: LD_INT 29
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PPUSH
26709: CALL_OW 69
26713: ST_TO_ADDR
// if not tmp then
26714: LD_VAR 0 1
26718: NOT
26719: IFFALSE 26723
// exit ;
26721: GO 26736
// DestroyUnit ( tmp [ 1 ] ) ;
26723: LD_VAR 0 1
26727: PUSH
26728: LD_INT 1
26730: ARRAY
26731: PPUSH
26732: CALL_OW 65
// end ;
26736: PPOPN 1
26738: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26739: LD_EXP 52
26743: PUSH
26744: LD_EXP 90
26748: AND
26749: IFFALSE 26878
26751: GO 26753
26753: DISABLE
26754: LD_INT 0
26756: PPUSH
// begin uc_side := 0 ;
26757: LD_ADDR_OWVAR 20
26761: PUSH
26762: LD_INT 0
26764: ST_TO_ADDR
// uc_nation := nation_arabian ;
26765: LD_ADDR_OWVAR 21
26769: PUSH
26770: LD_INT 2
26772: ST_TO_ADDR
// hc_gallery :=  ;
26773: LD_ADDR_OWVAR 33
26777: PUSH
26778: LD_STRING 
26780: ST_TO_ADDR
// hc_name :=  ;
26781: LD_ADDR_OWVAR 26
26785: PUSH
26786: LD_STRING 
26788: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26789: LD_INT 1
26791: PPUSH
26792: LD_INT 11
26794: PPUSH
26795: LD_INT 10
26797: PPUSH
26798: CALL_OW 380
// un := CreateHuman ;
26802: LD_ADDR_VAR 0 1
26806: PUSH
26807: CALL_OW 44
26811: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26812: LD_VAR 0 1
26816: PPUSH
26817: LD_INT 1
26819: PPUSH
26820: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26824: LD_INT 35
26826: PPUSH
26827: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26831: LD_VAR 0 1
26835: PPUSH
26836: LD_INT 22
26838: PUSH
26839: LD_OWVAR 2
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 69
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 74
26862: PPUSH
26863: CALL_OW 115
// until IsDead ( un ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 301
26876: IFFALSE 26824
// end ;
26878: PPOPN 1
26880: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26881: LD_EXP 52
26885: PUSH
26886: LD_EXP 92
26890: AND
26891: IFFALSE 26903
26893: GO 26895
26895: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26896: LD_STRING earthquake(getX(game), 0, 32)
26898: PPUSH
26899: CALL_OW 559
26903: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26904: LD_EXP 52
26908: PUSH
26909: LD_EXP 93
26913: AND
26914: IFFALSE 27005
26916: GO 26918
26918: DISABLE
26919: LD_INT 0
26921: PPUSH
// begin enable ;
26922: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26923: LD_ADDR_VAR 0 1
26927: PUSH
26928: LD_INT 22
26930: PUSH
26931: LD_OWVAR 2
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 21
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 33
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 69
26969: ST_TO_ADDR
// if not tmp then
26970: LD_VAR 0 1
26974: NOT
26975: IFFALSE 26979
// exit ;
26977: GO 27005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26979: LD_VAR 0 1
26983: PUSH
26984: LD_INT 1
26986: PPUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 12
26996: ARRAY
26997: PPUSH
26998: LD_INT 1
27000: PPUSH
27001: CALL_OW 234
// end ;
27005: PPOPN 1
27007: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27008: LD_EXP 52
27012: PUSH
27013: LD_EXP 94
27017: AND
27018: IFFALSE 27159
27020: GO 27022
27022: DISABLE
27023: LD_INT 0
27025: PPUSH
27026: PPUSH
27027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27028: LD_ADDR_VAR 0 3
27032: PUSH
27033: LD_INT 22
27035: PUSH
27036: LD_OWVAR 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 25
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 69
27063: ST_TO_ADDR
// if not tmp then
27064: LD_VAR 0 3
27068: NOT
27069: IFFALSE 27073
// exit ;
27071: GO 27159
// un := tmp [ rand ( 1 , tmp ) ] ;
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: LD_VAR 0 3
27082: PUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_VAR 0 3
27090: PPUSH
27091: CALL_OW 12
27095: ARRAY
27096: ST_TO_ADDR
// if Crawls ( un ) then
27097: LD_VAR 0 2
27101: PPUSH
27102: CALL_OW 318
27106: IFFALSE 27117
// ComWalk ( un ) ;
27108: LD_VAR 0 2
27112: PPUSH
27113: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27117: LD_VAR 0 2
27121: PPUSH
27122: LD_INT 9
27124: PPUSH
27125: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27129: LD_INT 28
27131: PPUSH
27132: LD_OWVAR 2
27136: PPUSH
27137: LD_INT 2
27139: PPUSH
27140: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27144: LD_INT 29
27146: PPUSH
27147: LD_OWVAR 2
27151: PPUSH
27152: LD_INT 2
27154: PPUSH
27155: CALL_OW 322
// end ;
27159: PPOPN 3
27161: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27162: LD_EXP 52
27166: PUSH
27167: LD_EXP 95
27171: AND
27172: IFFALSE 27283
27174: GO 27176
27176: DISABLE
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_INT 22
27189: PUSH
27190: LD_OWVAR 2
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 25
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 69
27217: ST_TO_ADDR
// if not tmp then
27218: LD_VAR 0 3
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27283
// un := tmp [ rand ( 1 , tmp ) ] ;
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: LD_VAR 0 3
27236: PUSH
27237: LD_INT 1
27239: PPUSH
27240: LD_VAR 0 3
27244: PPUSH
27245: CALL_OW 12
27249: ARRAY
27250: ST_TO_ADDR
// if Crawls ( un ) then
27251: LD_VAR 0 2
27255: PPUSH
27256: CALL_OW 318
27260: IFFALSE 27271
// ComWalk ( un ) ;
27262: LD_VAR 0 2
27266: PPUSH
27267: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27271: LD_VAR 0 2
27275: PPUSH
27276: LD_INT 8
27278: PPUSH
27279: CALL_OW 336
// end ;
27283: PPOPN 3
27285: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27286: LD_EXP 52
27290: PUSH
27291: LD_EXP 96
27295: AND
27296: IFFALSE 27440
27298: GO 27300
27300: DISABLE
27301: LD_INT 0
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 21
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: LD_INT 34
27337: PUSH
27338: LD_INT 12
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 34
27347: PUSH
27348: LD_INT 51
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 34
27357: PUSH
27358: LD_INT 32
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: PPUSH
27376: CALL_OW 69
27380: ST_TO_ADDR
// if not tmp then
27381: LD_VAR 0 2
27385: NOT
27386: IFFALSE 27390
// exit ;
27388: GO 27440
// for i in tmp do
27390: LD_ADDR_VAR 0 1
27394: PUSH
27395: LD_VAR 0 2
27399: PUSH
27400: FOR_IN
27401: IFFALSE 27438
// if GetCargo ( i , mat_artifact ) = 0 then
27403: LD_VAR 0 1
27407: PPUSH
27408: LD_INT 4
27410: PPUSH
27411: CALL_OW 289
27415: PUSH
27416: LD_INT 0
27418: EQUAL
27419: IFFALSE 27436
// SetCargo ( i , mat_siberit , 100 ) ;
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_INT 3
27428: PPUSH
27429: LD_INT 100
27431: PPUSH
27432: CALL_OW 290
27436: GO 27400
27438: POP
27439: POP
// end ;
27440: PPOPN 2
27442: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27443: LD_EXP 52
27447: PUSH
27448: LD_EXP 97
27452: AND
27453: IFFALSE 27636
27455: GO 27457
27457: DISABLE
27458: LD_INT 0
27460: PPUSH
27461: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27462: LD_ADDR_VAR 0 2
27466: PUSH
27467: LD_INT 22
27469: PUSH
27470: LD_OWVAR 2
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PPUSH
27479: CALL_OW 69
27483: ST_TO_ADDR
// if not tmp then
27484: LD_VAR 0 2
27488: NOT
27489: IFFALSE 27493
// exit ;
27491: GO 27636
// for i := 1 to 2 do
27493: LD_ADDR_VAR 0 1
27497: PUSH
27498: DOUBLE
27499: LD_INT 1
27501: DEC
27502: ST_TO_ADDR
27503: LD_INT 2
27505: PUSH
27506: FOR_TO
27507: IFFALSE 27634
// begin uc_side := your_side ;
27509: LD_ADDR_OWVAR 20
27513: PUSH
27514: LD_OWVAR 2
27518: ST_TO_ADDR
// uc_nation := nation_american ;
27519: LD_ADDR_OWVAR 21
27523: PUSH
27524: LD_INT 1
27526: ST_TO_ADDR
// vc_chassis := us_morphling ;
27527: LD_ADDR_OWVAR 37
27531: PUSH
27532: LD_INT 5
27534: ST_TO_ADDR
// vc_engine := engine_siberite ;
27535: LD_ADDR_OWVAR 39
27539: PUSH
27540: LD_INT 3
27542: ST_TO_ADDR
// vc_control := control_computer ;
27543: LD_ADDR_OWVAR 38
27547: PUSH
27548: LD_INT 3
27550: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27551: LD_ADDR_OWVAR 40
27555: PUSH
27556: LD_INT 10
27558: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27559: LD_VAR 0 2
27563: PUSH
27564: LD_INT 1
27566: ARRAY
27567: PPUSH
27568: CALL_OW 310
27572: NOT
27573: IFFALSE 27620
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27575: CALL_OW 45
27579: PPUSH
27580: LD_VAR 0 2
27584: PUSH
27585: LD_INT 1
27587: ARRAY
27588: PPUSH
27589: CALL_OW 250
27593: PPUSH
27594: LD_VAR 0 2
27598: PUSH
27599: LD_INT 1
27601: ARRAY
27602: PPUSH
27603: CALL_OW 251
27607: PPUSH
27608: LD_INT 12
27610: PPUSH
27611: LD_INT 1
27613: PPUSH
27614: CALL_OW 50
27618: GO 27632
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27620: CALL_OW 45
27624: PPUSH
27625: LD_INT 1
27627: PPUSH
27628: CALL_OW 51
// end ;
27632: GO 27506
27634: POP
27635: POP
// end ;
27636: PPOPN 2
27638: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27639: LD_EXP 52
27643: PUSH
27644: LD_EXP 98
27648: AND
27649: IFFALSE 27871
27651: GO 27653
27653: DISABLE
27654: LD_INT 0
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27662: LD_ADDR_VAR 0 6
27666: PUSH
27667: LD_INT 22
27669: PUSH
27670: LD_OWVAR 2
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 21
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 3
27691: PUSH
27692: LD_INT 23
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: ST_TO_ADDR
// if not tmp then
27716: LD_VAR 0 6
27720: NOT
27721: IFFALSE 27725
// exit ;
27723: GO 27871
// s1 := rand ( 1 , 4 ) ;
27725: LD_ADDR_VAR 0 2
27729: PUSH
27730: LD_INT 1
27732: PPUSH
27733: LD_INT 4
27735: PPUSH
27736: CALL_OW 12
27740: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27741: LD_ADDR_VAR 0 4
27745: PUSH
27746: LD_VAR 0 6
27750: PUSH
27751: LD_INT 1
27753: ARRAY
27754: PPUSH
27755: LD_VAR 0 2
27759: PPUSH
27760: CALL_OW 259
27764: ST_TO_ADDR
// if s1 = 1 then
27765: LD_VAR 0 2
27769: PUSH
27770: LD_INT 1
27772: EQUAL
27773: IFFALSE 27793
// s2 := rand ( 2 , 4 ) else
27775: LD_ADDR_VAR 0 3
27779: PUSH
27780: LD_INT 2
27782: PPUSH
27783: LD_INT 4
27785: PPUSH
27786: CALL_OW 12
27790: ST_TO_ADDR
27791: GO 27801
// s2 := 1 ;
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_INT 1
27800: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27801: LD_ADDR_VAR 0 5
27805: PUSH
27806: LD_VAR 0 6
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: PPUSH
27815: LD_VAR 0 3
27819: PPUSH
27820: CALL_OW 259
27824: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27825: LD_VAR 0 6
27829: PUSH
27830: LD_INT 1
27832: ARRAY
27833: PPUSH
27834: LD_VAR 0 2
27838: PPUSH
27839: LD_VAR 0 5
27843: PPUSH
27844: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27848: LD_VAR 0 6
27852: PUSH
27853: LD_INT 1
27855: ARRAY
27856: PPUSH
27857: LD_VAR 0 3
27861: PPUSH
27862: LD_VAR 0 4
27866: PPUSH
27867: CALL_OW 237
// end ;
27871: PPOPN 6
27873: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27874: LD_EXP 52
27878: PUSH
27879: LD_EXP 99
27883: AND
27884: IFFALSE 27963
27886: GO 27888
27888: DISABLE
27889: LD_INT 0
27891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27892: LD_ADDR_VAR 0 1
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_OWVAR 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 30
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PPUSH
27923: CALL_OW 69
27927: ST_TO_ADDR
// if not tmp then
27928: LD_VAR 0 1
27932: NOT
27933: IFFALSE 27937
// exit ;
27935: GO 27963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27937: LD_VAR 0 1
27941: PUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_VAR 0 1
27949: PPUSH
27950: CALL_OW 12
27954: ARRAY
27955: PPUSH
27956: LD_INT 1
27958: PPUSH
27959: CALL_OW 234
// end ;
27963: PPOPN 1
27965: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27966: LD_EXP 52
27970: PUSH
27971: LD_EXP 100
27975: AND
27976: IFFALSE 28088
27978: GO 27980
27980: DISABLE
27981: LD_INT 0
27983: PPUSH
27984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27985: LD_ADDR_VAR 0 2
27989: PUSH
27990: LD_INT 22
27992: PUSH
27993: LD_OWVAR 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 27
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 30
28017: PUSH
28018: LD_INT 26
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 30
28027: PUSH
28028: LD_INT 28
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PPUSH
28045: CALL_OW 69
28049: ST_TO_ADDR
// if not tmp then
28050: LD_VAR 0 2
28054: NOT
28055: IFFALSE 28059
// exit ;
28057: GO 28088
// for i in tmp do
28059: LD_ADDR_VAR 0 1
28063: PUSH
28064: LD_VAR 0 2
28068: PUSH
28069: FOR_IN
28070: IFFALSE 28086
// SetLives ( i , 1 ) ;
28072: LD_VAR 0 1
28076: PPUSH
28077: LD_INT 1
28079: PPUSH
28080: CALL_OW 234
28084: GO 28069
28086: POP
28087: POP
// end ;
28088: PPOPN 2
28090: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28091: LD_EXP 52
28095: PUSH
28096: LD_EXP 101
28100: AND
28101: IFFALSE 28375
28103: GO 28105
28105: DISABLE
28106: LD_INT 0
28108: PPUSH
28109: PPUSH
28110: PPUSH
// begin i := rand ( 1 , 7 ) ;
28111: LD_ADDR_VAR 0 1
28115: PUSH
28116: LD_INT 1
28118: PPUSH
28119: LD_INT 7
28121: PPUSH
28122: CALL_OW 12
28126: ST_TO_ADDR
// case i of 1 :
28127: LD_VAR 0 1
28131: PUSH
28132: LD_INT 1
28134: DOUBLE
28135: EQUAL
28136: IFTRUE 28140
28138: GO 28150
28140: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28141: LD_STRING earthquake(getX(game), 0, 32)
28143: PPUSH
28144: CALL_OW 559
28148: GO 28375
28150: LD_INT 2
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28172
28158: POP
// begin ToLua ( displayStucuk(); ) ;
28159: LD_STRING displayStucuk();
28161: PPUSH
28162: CALL_OW 559
// ResetFog ;
28166: CALL_OW 335
// end ; 3 :
28170: GO 28375
28172: LD_INT 3
28174: DOUBLE
28175: EQUAL
28176: IFTRUE 28180
28178: GO 28284
28180: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28181: LD_ADDR_VAR 0 2
28185: PUSH
28186: LD_INT 22
28188: PUSH
28189: LD_OWVAR 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 25
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PPUSH
28212: CALL_OW 69
28216: ST_TO_ADDR
// if not tmp then
28217: LD_VAR 0 2
28221: NOT
28222: IFFALSE 28226
// exit ;
28224: GO 28375
// un := tmp [ rand ( 1 , tmp ) ] ;
28226: LD_ADDR_VAR 0 3
28230: PUSH
28231: LD_VAR 0 2
28235: PUSH
28236: LD_INT 1
28238: PPUSH
28239: LD_VAR 0 2
28243: PPUSH
28244: CALL_OW 12
28248: ARRAY
28249: ST_TO_ADDR
// if Crawls ( un ) then
28250: LD_VAR 0 3
28254: PPUSH
28255: CALL_OW 318
28259: IFFALSE 28270
// ComWalk ( un ) ;
28261: LD_VAR 0 3
28265: PPUSH
28266: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28270: LD_VAR 0 3
28274: PPUSH
28275: LD_INT 8
28277: PPUSH
28278: CALL_OW 336
// end ; 4 :
28282: GO 28375
28284: LD_INT 4
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28353
28292: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28293: LD_ADDR_VAR 0 2
28297: PUSH
28298: LD_INT 22
28300: PUSH
28301: LD_OWVAR 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 30
28312: PUSH
28313: LD_INT 29
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PPUSH
28324: CALL_OW 69
28328: ST_TO_ADDR
// if not tmp then
28329: LD_VAR 0 2
28333: NOT
28334: IFFALSE 28338
// exit ;
28336: GO 28375
// DestroyUnit ( tmp [ 1 ] ) ;
28338: LD_VAR 0 2
28342: PUSH
28343: LD_INT 1
28345: ARRAY
28346: PPUSH
28347: CALL_OW 65
// end ; 5 .. 7 :
28351: GO 28375
28353: LD_INT 5
28355: DOUBLE
28356: GREATEREQUAL
28357: IFFALSE 28365
28359: LD_INT 7
28361: DOUBLE
28362: LESSEQUAL
28363: IFTRUE 28367
28365: GO 28374
28367: POP
// StreamSibBomb ; end ;
28368: CALL 24625 0 0
28372: GO 28375
28374: POP
// end ;
28375: PPOPN 3
28377: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28378: LD_EXP 52
28382: PUSH
28383: LD_EXP 102
28387: AND
28388: IFFALSE 28544
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
28397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28398: LD_ADDR_VAR 0 2
28402: PUSH
28403: LD_INT 81
28405: PUSH
28406: LD_OWVAR 2
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 21
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 21
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: ST_TO_ADDR
// if not tmp then
28452: LD_VAR 0 2
28456: NOT
28457: IFFALSE 28461
// exit ;
28459: GO 28544
// p := 0 ;
28461: LD_ADDR_VAR 0 3
28465: PUSH
28466: LD_INT 0
28468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28469: LD_INT 35
28471: PPUSH
28472: CALL_OW 67
// p := p + 1 ;
28476: LD_ADDR_VAR 0 3
28480: PUSH
28481: LD_VAR 0 3
28485: PUSH
28486: LD_INT 1
28488: PLUS
28489: ST_TO_ADDR
// for i in tmp do
28490: LD_ADDR_VAR 0 1
28494: PUSH
28495: LD_VAR 0 2
28499: PUSH
28500: FOR_IN
28501: IFFALSE 28532
// if GetLives ( i ) < 1000 then
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 256
28512: PUSH
28513: LD_INT 1000
28515: LESS
28516: IFFALSE 28530
// SetLives ( i , 1000 ) ;
28518: LD_VAR 0 1
28522: PPUSH
28523: LD_INT 1000
28525: PPUSH
28526: CALL_OW 234
28530: GO 28500
28532: POP
28533: POP
// until p > 20 ;
28534: LD_VAR 0 3
28538: PUSH
28539: LD_INT 20
28541: GREATER
28542: IFFALSE 28469
// end ;
28544: PPOPN 3
28546: END
// every 0 0$1 trigger StreamModeActive and sTime do
28547: LD_EXP 52
28551: PUSH
28552: LD_EXP 103
28556: AND
28557: IFFALSE 28592
28559: GO 28561
28561: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28562: LD_INT 28
28564: PPUSH
28565: LD_OWVAR 2
28569: PPUSH
28570: LD_INT 2
28572: PPUSH
28573: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28577: LD_INT 30
28579: PPUSH
28580: LD_OWVAR 2
28584: PPUSH
28585: LD_INT 2
28587: PPUSH
28588: CALL_OW 322
// end ;
28592: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28593: LD_EXP 52
28597: PUSH
28598: LD_EXP 104
28602: AND
28603: IFFALSE 28724
28605: GO 28607
28607: DISABLE
28608: LD_INT 0
28610: PPUSH
28611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28612: LD_ADDR_VAR 0 2
28616: PUSH
28617: LD_INT 22
28619: PUSH
28620: LD_OWVAR 2
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 21
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 3
28641: PUSH
28642: LD_INT 23
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: PPUSH
28661: CALL_OW 69
28665: ST_TO_ADDR
// if not tmp then
28666: LD_VAR 0 2
28670: NOT
28671: IFFALSE 28675
// exit ;
28673: GO 28724
// for i in tmp do
28675: LD_ADDR_VAR 0 1
28679: PUSH
28680: LD_VAR 0 2
28684: PUSH
28685: FOR_IN
28686: IFFALSE 28722
// begin if Crawls ( i ) then
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 318
28697: IFFALSE 28708
// ComWalk ( i ) ;
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 138
// SetClass ( i , 2 ) ;
28708: LD_VAR 0 1
28712: PPUSH
28713: LD_INT 2
28715: PPUSH
28716: CALL_OW 336
// end ;
28720: GO 28685
28722: POP
28723: POP
// end ;
28724: PPOPN 2
28726: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28727: LD_EXP 52
28731: PUSH
28732: LD_EXP 105
28736: AND
28737: IFFALSE 29018
28739: GO 28741
28741: DISABLE
28742: LD_INT 0
28744: PPUSH
28745: PPUSH
28746: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28747: LD_OWVAR 2
28751: PPUSH
28752: LD_INT 9
28754: PPUSH
28755: LD_INT 1
28757: PPUSH
28758: LD_INT 1
28760: PPUSH
28761: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28765: LD_INT 9
28767: PPUSH
28768: LD_OWVAR 2
28772: PPUSH
28773: CALL_OW 343
// uc_side := 9 ;
28777: LD_ADDR_OWVAR 20
28781: PUSH
28782: LD_INT 9
28784: ST_TO_ADDR
// uc_nation := 2 ;
28785: LD_ADDR_OWVAR 21
28789: PUSH
28790: LD_INT 2
28792: ST_TO_ADDR
// hc_name := Dark Warrior ;
28793: LD_ADDR_OWVAR 26
28797: PUSH
28798: LD_STRING Dark Warrior
28800: ST_TO_ADDR
// hc_gallery :=  ;
28801: LD_ADDR_OWVAR 33
28805: PUSH
28806: LD_STRING 
28808: ST_TO_ADDR
// hc_noskilllimit := true ;
28809: LD_ADDR_OWVAR 76
28813: PUSH
28814: LD_INT 1
28816: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28817: LD_ADDR_OWVAR 31
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 30
28827: PUSH
28828: LD_INT 30
28830: PUSH
28831: LD_INT 30
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: ST_TO_ADDR
// un := CreateHuman ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: CALL_OW 44
28849: ST_TO_ADDR
// hc_noskilllimit := false ;
28850: LD_ADDR_OWVAR 76
28854: PUSH
28855: LD_INT 0
28857: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28858: LD_VAR 0 3
28862: PPUSH
28863: LD_INT 1
28865: PPUSH
28866: CALL_OW 51
// p := 0 ;
28870: LD_ADDR_VAR 0 2
28874: PUSH
28875: LD_INT 0
28877: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28878: LD_INT 35
28880: PPUSH
28881: CALL_OW 67
// p := p + 1 ;
28885: LD_ADDR_VAR 0 2
28889: PUSH
28890: LD_VAR 0 2
28894: PUSH
28895: LD_INT 1
28897: PLUS
28898: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28899: LD_VAR 0 3
28903: PPUSH
28904: CALL_OW 256
28908: PUSH
28909: LD_INT 1000
28911: LESS
28912: IFFALSE 28926
// SetLives ( un , 1000 ) ;
28914: LD_VAR 0 3
28918: PPUSH
28919: LD_INT 1000
28921: PPUSH
28922: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28926: LD_VAR 0 3
28930: PPUSH
28931: LD_INT 81
28933: PUSH
28934: LD_OWVAR 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 91
28945: PUSH
28946: LD_VAR 0 3
28950: PUSH
28951: LD_INT 30
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PPUSH
28963: CALL_OW 69
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: CALL_OW 74
28977: PPUSH
28978: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28982: LD_VAR 0 2
28986: PUSH
28987: LD_INT 60
28989: GREATER
28990: PUSH
28991: LD_VAR 0 3
28995: PPUSH
28996: CALL_OW 301
29000: OR
29001: IFFALSE 28878
// if un then
29003: LD_VAR 0 3
29007: IFFALSE 29018
// RemoveUnit ( un ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: CALL_OW 64
// end ;
29018: PPOPN 3
29020: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29021: LD_INT 0
29023: PPUSH
29024: PPUSH
29025: PPUSH
29026: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29027: LD_ADDR_VAR 0 4
29031: PUSH
29032: LD_INT 22
29034: PUSH
29035: LD_OWVAR 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: LD_INT 30
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 30
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PPUSH
29076: CALL_OW 69
29080: ST_TO_ADDR
// if not tmp then
29081: LD_VAR 0 4
29085: NOT
29086: IFFALSE 29090
// exit ;
29088: GO 29149
// for i in tmp do
29090: LD_ADDR_VAR 0 2
29094: PUSH
29095: LD_VAR 0 4
29099: PUSH
29100: FOR_IN
29101: IFFALSE 29147
// for j = 1 to 3 do
29103: LD_ADDR_VAR 0 3
29107: PUSH
29108: DOUBLE
29109: LD_INT 1
29111: DEC
29112: ST_TO_ADDR
29113: LD_INT 3
29115: PUSH
29116: FOR_TO
29117: IFFALSE 29143
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29119: LD_VAR 0 2
29123: PPUSH
29124: CALL_OW 274
29128: PPUSH
29129: LD_VAR 0 3
29133: PPUSH
29134: LD_INT 99999
29136: PPUSH
29137: CALL_OW 277
29141: GO 29116
29143: POP
29144: POP
29145: GO 29100
29147: POP
29148: POP
// end ;
29149: LD_VAR 0 1
29153: RET
// export function hHackSetLevel10 ; var i , j ; begin
29154: LD_INT 0
29156: PPUSH
29157: PPUSH
29158: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_INT 21
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PPUSH
29174: CALL_OW 69
29178: PUSH
29179: FOR_IN
29180: IFFALSE 29232
// if IsSelected ( i ) then
29182: LD_VAR 0 2
29186: PPUSH
29187: CALL_OW 306
29191: IFFALSE 29230
// begin for j := 1 to 4 do
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: DOUBLE
29199: LD_INT 1
29201: DEC
29202: ST_TO_ADDR
29203: LD_INT 4
29205: PUSH
29206: FOR_TO
29207: IFFALSE 29228
// SetSkill ( i , j , 10 ) ;
29209: LD_VAR 0 2
29213: PPUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: LD_INT 10
29221: PPUSH
29222: CALL_OW 237
29226: GO 29206
29228: POP
29229: POP
// end ;
29230: GO 29179
29232: POP
29233: POP
// end ;
29234: LD_VAR 0 1
29238: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29239: LD_INT 0
29241: PPUSH
29242: PPUSH
29243: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_INT 22
29251: PUSH
29252: LD_OWVAR 2
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 21
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PPUSH
29275: CALL_OW 69
29279: PUSH
29280: FOR_IN
29281: IFFALSE 29322
// begin for j := 1 to 4 do
29283: LD_ADDR_VAR 0 3
29287: PUSH
29288: DOUBLE
29289: LD_INT 1
29291: DEC
29292: ST_TO_ADDR
29293: LD_INT 4
29295: PUSH
29296: FOR_TO
29297: IFFALSE 29318
// SetSkill ( i , j , 10 ) ;
29299: LD_VAR 0 2
29303: PPUSH
29304: LD_VAR 0 3
29308: PPUSH
29309: LD_INT 10
29311: PPUSH
29312: CALL_OW 237
29316: GO 29296
29318: POP
29319: POP
// end ;
29320: GO 29280
29322: POP
29323: POP
// end ;
29324: LD_VAR 0 1
29328: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
29329: LD_INT 0
29331: PPUSH
// uc_side := your_side ;
29332: LD_ADDR_OWVAR 20
29336: PUSH
29337: LD_OWVAR 2
29341: ST_TO_ADDR
// uc_nation := nation ;
29342: LD_ADDR_OWVAR 21
29346: PUSH
29347: LD_VAR 0 1
29351: ST_TO_ADDR
// InitHc ;
29352: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29356: LD_INT 0
29358: PPUSH
29359: LD_VAR 0 2
29363: PPUSH
29364: LD_VAR 0 3
29368: PPUSH
29369: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
29373: CALL_OW 44
29377: PPUSH
29378: LD_INT 1
29380: PPUSH
29381: CALL_OW 51
// end ;
29385: LD_VAR 0 4
29389: RET
// export function hHackSpawnVehicle ; begin
29390: LD_INT 0
29392: PPUSH
// uc_side := your_side ;
29393: LD_ADDR_OWVAR 20
29397: PUSH
29398: LD_OWVAR 2
29402: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
29403: LD_ADDR_OWVAR 21
29407: PUSH
29408: LD_INT 1
29410: PPUSH
29411: LD_INT 3
29413: PPUSH
29414: CALL_OW 12
29418: ST_TO_ADDR
// InitVc ;
29419: CALL_OW 20
// case uc_nation of 1 :
29423: LD_OWVAR 21
29427: PUSH
29428: LD_INT 1
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29580
29436: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
29437: LD_ADDR_OWVAR 37
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 4
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: PPUSH
29467: LD_INT 5
29469: PPUSH
29470: CALL_OW 12
29474: ARRAY
29475: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29476: LD_ADDR_OWVAR 39
29480: PUSH
29481: LD_INT 1
29483: PPUSH
29484: LD_INT 3
29486: PPUSH
29487: CALL_OW 12
29491: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
29492: LD_ADDR_OWVAR 38
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: PPUSH
29514: LD_INT 3
29516: PPUSH
29517: CALL_OW 12
29521: ARRAY
29522: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
29523: LD_ADDR_OWVAR 40
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 4
29533: PUSH
29534: LD_INT 5
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: LD_INT 7
29542: PUSH
29543: LD_INT 8
29545: PUSH
29546: LD_INT 9
29548: PUSH
29549: LD_INT 10
29551: PUSH
29552: LD_INT 6
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: PPUSH
29569: LD_INT 9
29571: PPUSH
29572: CALL_OW 12
29576: ARRAY
29577: ST_TO_ADDR
// end ; 2 :
29578: GO 29845
29580: LD_INT 2
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29712
29588: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
29589: LD_ADDR_OWVAR 37
29593: PUSH
29594: LD_INT 11
29596: PUSH
29597: LD_INT 12
29599: PUSH
29600: LD_INT 13
29602: PUSH
29603: LD_INT 14
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PPUSH
29615: LD_INT 4
29617: PPUSH
29618: CALL_OW 12
29622: ARRAY
29623: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29624: LD_ADDR_OWVAR 39
29628: PUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 3
29634: PPUSH
29635: CALL_OW 12
29639: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
29640: LD_ADDR_OWVAR 38
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 5
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 1
29661: PPUSH
29662: LD_INT 3
29664: PPUSH
29665: CALL_OW 12
29669: ARRAY
29670: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
29671: LD_ADDR_OWVAR 40
29675: PUSH
29676: LD_INT 24
29678: PUSH
29679: LD_INT 26
29681: PUSH
29682: LD_INT 27
29684: PUSH
29685: LD_INT 28
29687: PUSH
29688: LD_INT 29
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PPUSH
29701: LD_INT 5
29703: PPUSH
29704: CALL_OW 12
29708: ARRAY
29709: ST_TO_ADDR
// end ; 3 :
29710: GO 29845
29712: LD_INT 3
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29720
29718: GO 29844
29720: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
29721: LD_ADDR_OWVAR 37
29725: PUSH
29726: LD_INT 21
29728: PUSH
29729: LD_INT 23
29731: PUSH
29732: LD_INT 22
29734: PUSH
29735: LD_INT 24
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: PPUSH
29747: LD_INT 4
29749: PPUSH
29750: CALL_OW 12
29754: ARRAY
29755: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29756: LD_ADDR_OWVAR 39
29760: PUSH
29761: LD_INT 1
29763: PPUSH
29764: LD_INT 3
29766: PPUSH
29767: CALL_OW 12
29771: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
29772: LD_ADDR_OWVAR 38
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PPUSH
29790: LD_INT 2
29792: PPUSH
29793: CALL_OW 12
29797: ARRAY
29798: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
29799: LD_ADDR_OWVAR 40
29803: PUSH
29804: LD_INT 42
29806: PUSH
29807: LD_INT 43
29809: PUSH
29810: LD_INT 44
29812: PUSH
29813: LD_INT 46
29815: PUSH
29816: LD_INT 48
29818: PUSH
29819: LD_INT 47
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PPUSH
29833: LD_INT 6
29835: PPUSH
29836: CALL_OW 12
29840: ARRAY
29841: ST_TO_ADDR
// end ; end ;
29842: GO 29845
29844: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29845: CALL_OW 45
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: CALL_OW 51
// end ;
29857: LD_VAR 0 1
29861: RET
// export hInvincible ; every 1 do
29862: GO 29864
29864: DISABLE
// hInvincible := [ ] ;
29865: LD_ADDR_EXP 106
29869: PUSH
29870: EMPTY
29871: ST_TO_ADDR
29872: END
// every 10 do var i ;
29873: GO 29875
29875: DISABLE
29876: LD_INT 0
29878: PPUSH
// begin enable ;
29879: ENABLE
// if not hInvincible then
29880: LD_EXP 106
29884: NOT
29885: IFFALSE 29889
// exit ;
29887: GO 29933
// for i in hInvincible do
29889: LD_ADDR_VAR 0 1
29893: PUSH
29894: LD_EXP 106
29898: PUSH
29899: FOR_IN
29900: IFFALSE 29931
// if GetLives ( i ) < 1000 then
29902: LD_VAR 0 1
29906: PPUSH
29907: CALL_OW 256
29911: PUSH
29912: LD_INT 1000
29914: LESS
29915: IFFALSE 29929
// SetLives ( i , 1000 ) ;
29917: LD_VAR 0 1
29921: PPUSH
29922: LD_INT 1000
29924: PPUSH
29925: CALL_OW 234
29929: GO 29899
29931: POP
29932: POP
// end ;
29933: PPOPN 1
29935: END
// export function hHackInvincible ; var i ; begin
29936: LD_INT 0
29938: PPUSH
29939: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29940: LD_ADDR_VAR 0 2
29944: PUSH
29945: LD_INT 2
29947: PUSH
29948: LD_INT 21
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 21
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: PPUSH
29973: CALL_OW 69
29977: PUSH
29978: FOR_IN
29979: IFFALSE 30040
// if IsSelected ( i ) then
29981: LD_VAR 0 2
29985: PPUSH
29986: CALL_OW 306
29990: IFFALSE 30038
// begin if i in hInvincible then
29992: LD_VAR 0 2
29996: PUSH
29997: LD_EXP 106
30001: IN
30002: IFFALSE 30022
// hInvincible := hInvincible diff i else
30004: LD_ADDR_EXP 106
30008: PUSH
30009: LD_EXP 106
30013: PUSH
30014: LD_VAR 0 2
30018: DIFF
30019: ST_TO_ADDR
30020: GO 30038
// hInvincible := hInvincible union i ;
30022: LD_ADDR_EXP 106
30026: PUSH
30027: LD_EXP 106
30031: PUSH
30032: LD_VAR 0 2
30036: UNION
30037: ST_TO_ADDR
// end ;
30038: GO 29978
30040: POP
30041: POP
// end ;
30042: LD_VAR 0 1
30046: RET
// export function hHackInvisible ; var i , j ; begin
30047: LD_INT 0
30049: PPUSH
30050: PPUSH
30051: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30052: LD_ADDR_VAR 0 2
30056: PUSH
30057: LD_INT 21
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PPUSH
30067: CALL_OW 69
30071: PUSH
30072: FOR_IN
30073: IFFALSE 30097
// if IsSelected ( i ) then
30075: LD_VAR 0 2
30079: PPUSH
30080: CALL_OW 306
30084: IFFALSE 30095
// ComForceInvisible ( i ) ;
30086: LD_VAR 0 2
30090: PPUSH
30091: CALL_OW 496
30095: GO 30072
30097: POP
30098: POP
// end ;
30099: LD_VAR 0 1
30103: RET
// export function hHackChangeYourSide ; begin
30104: LD_INT 0
30106: PPUSH
// if your_side = 8 then
30107: LD_OWVAR 2
30111: PUSH
30112: LD_INT 8
30114: EQUAL
30115: IFFALSE 30127
// your_side := 0 else
30117: LD_ADDR_OWVAR 2
30121: PUSH
30122: LD_INT 0
30124: ST_TO_ADDR
30125: GO 30141
// your_side := your_side + 1 ;
30127: LD_ADDR_OWVAR 2
30131: PUSH
30132: LD_OWVAR 2
30136: PUSH
30137: LD_INT 1
30139: PLUS
30140: ST_TO_ADDR
// end ;
30141: LD_VAR 0 1
30145: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
30150: PPUSH
// for i in all_units do
30151: LD_ADDR_VAR 0 2
30155: PUSH
30156: LD_OWVAR 3
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30240
// if IsSelected ( i ) then
30164: LD_VAR 0 2
30168: PPUSH
30169: CALL_OW 306
30173: IFFALSE 30238
// begin j := GetSide ( i ) ;
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: LD_VAR 0 2
30184: PPUSH
30185: CALL_OW 255
30189: ST_TO_ADDR
// if j = 8 then
30190: LD_VAR 0 3
30194: PUSH
30195: LD_INT 8
30197: EQUAL
30198: IFFALSE 30210
// j := 0 else
30200: LD_ADDR_VAR 0 3
30204: PUSH
30205: LD_INT 0
30207: ST_TO_ADDR
30208: GO 30224
// j := j + 1 ;
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: LD_VAR 0 3
30219: PUSH
30220: LD_INT 1
30222: PLUS
30223: ST_TO_ADDR
// SetSide ( i , j ) ;
30224: LD_VAR 0 2
30228: PPUSH
30229: LD_VAR 0 3
30233: PPUSH
30234: CALL_OW 235
// end ;
30238: GO 30161
30240: POP
30241: POP
// end ;
30242: LD_VAR 0 1
30246: RET
// export function hHackFog ; begin
30247: LD_INT 0
30249: PPUSH
// FogOff ( true ) ;
30250: LD_INT 1
30252: PPUSH
30253: CALL_OW 344
// end ;
30257: LD_VAR 0 1
30261: RET
// export function hHackApeman ; begin
30262: LD_INT 0
30264: PPUSH
// uc_side := your_side ;
30265: LD_ADDR_OWVAR 20
30269: PUSH
30270: LD_OWVAR 2
30274: ST_TO_ADDR
// uc_nation := 0 ;
30275: LD_ADDR_OWVAR 21
30279: PUSH
30280: LD_INT 0
30282: ST_TO_ADDR
// hc_name :=  ;
30283: LD_ADDR_OWVAR 26
30287: PUSH
30288: LD_STRING 
30290: ST_TO_ADDR
// hc_gallery :=  ;
30291: LD_ADDR_OWVAR 33
30295: PUSH
30296: LD_STRING 
30298: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
30299: LD_ADDR_OWVAR 31
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// hc_class := class_apeman ;
30322: LD_ADDR_OWVAR 28
30326: PUSH
30327: LD_INT 12
30329: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30330: CALL_OW 44
30334: PPUSH
30335: LD_INT 1
30337: PPUSH
30338: CALL_OW 51
// end ;
30342: LD_VAR 0 1
30346: RET
// export function hHackBoom ; begin
30347: LD_INT 0
30349: PPUSH
// uc_side := your_side ;
30350: LD_ADDR_OWVAR 20
30354: PUSH
30355: LD_OWVAR 2
30359: ST_TO_ADDR
// uc_nation := 1 ;
30360: LD_ADDR_OWVAR 21
30364: PUSH
30365: LD_INT 1
30367: ST_TO_ADDR
// vc_chassis := us_morphling ;
30368: LD_ADDR_OWVAR 37
30372: PUSH
30373: LD_INT 5
30375: ST_TO_ADDR
// vc_engine := engine_siberite ;
30376: LD_ADDR_OWVAR 39
30380: PUSH
30381: LD_INT 3
30383: ST_TO_ADDR
// vc_control := control_computer ;
30384: LD_ADDR_OWVAR 38
30388: PUSH
30389: LD_INT 3
30391: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
30392: LD_ADDR_OWVAR 40
30396: PUSH
30397: LD_INT 8
30399: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30400: CALL_OW 45
30404: PPUSH
30405: LD_INT 1
30407: PPUSH
30408: CALL_OW 51
// end ;
30412: LD_VAR 0 1
30416: RET
