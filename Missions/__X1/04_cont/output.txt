// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 857 0 0
// PrepareArabian ;
  12: CALL 1231 0 0
// PrepareAmerican ;
  16: CALL 6760 0 0
// PrepareRussian ;
  20: CALL 2219 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8320 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: PUSH
 565: LD_VAR 0 2
 569: NOT
 570: OR
 571: IFFALSE 575
// exit ;
 573: GO 623
// if not See ( GetSide ( observer ) , unit ) then
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 255
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 292
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 623
// result := GetDistUnits ( observer , unit ) < 12 ;
 599: LD_ADDR_VAR 0 3
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: CALL_OW 296
 618: PUSH
 619: LD_INT 12
 621: LESS
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 3
 627: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 628: LD_INT 0
 630: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: CALL_OW 488
 653: PUSH
 654: LD_VAR 0 2
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 2
 670: ARRAY
 671: PPUSH
 672: CALL_OW 428
 676: PUSH
 677: LD_INT 0
 679: EQUAL
 680: AND
 681: IFFALSE 715
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 3
 710: PPUSH
 711: CALL_OW 48
// end ;
 715: LD_VAR 0 4
 719: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
// InitUc ;
 724: CALL_OW 18
// InitHc ;
 728: CALL_OW 19
// uc_side := 0 ;
 732: LD_ADDR_OWVAR 20
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// uc_nation := 0 ;
 740: LD_ADDR_OWVAR 21
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// for i = 1 to amount do
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: DOUBLE
 754: LD_INT 1
 756: DEC
 757: ST_TO_ADDR
 758: LD_VAR 0 2
 762: PUSH
 763: FOR_TO
 764: IFFALSE 846
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 766: LD_ADDR_OWVAR 29
 770: PUSH
 771: LD_INT 9
 773: PPUSH
 774: LD_INT 12
 776: PPUSH
 777: CALL_OW 12
 781: PUSH
 782: LD_INT 9
 784: PPUSH
 785: LD_INT 12
 787: PPUSH
 788: CALL_OW 12
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 797: LD_ADDR_OWVAR 35
 801: PUSH
 802: LD_INT 1
 804: NEG
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL_OW 12
 813: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 12
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 827: CALL_OW 44
 831: PPUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// end ;
 844: GO 763
 846: POP
 847: POP
// InitHc ;
 848: CALL_OW 19
// end ;
 852: LD_VAR 0 3
 856: RET
// export function CreateNature ; var i ; begin
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 861: LD_INT 18
 863: PPUSH
 864: LD_INT 5
 866: PUSH
 867: LD_INT 4
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL 720 0 2
// for i := 1 to 3 do
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: DOUBLE
 898: LD_INT 1
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 3
 904: PUSH
 905: FOR_TO
 906: IFFALSE 941
// begin hc_class := 21 ;
 908: LD_ADDR_OWVAR 28
 912: PUSH
 913: LD_INT 21
 915: ST_TO_ADDR
// hc_gallery :=  ;
 916: LD_ADDR_OWVAR 33
 920: PUSH
 921: LD_STRING 
 923: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 924: CALL_OW 44
 928: PPUSH
 929: LD_INT 18
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// end ;
 939: GO 905
 941: POP
 942: POP
// for i := 1 to 2 do
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: DOUBLE
 949: LD_INT 1
 951: DEC
 952: ST_TO_ADDR
 953: LD_INT 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 992
// begin hc_class := 18 ;
 959: LD_ADDR_OWVAR 28
 963: PUSH
 964: LD_INT 18
 966: ST_TO_ADDR
// hc_gallery :=  ;
 967: LD_ADDR_OWVAR 33
 971: PUSH
 972: LD_STRING 
 974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 975: CALL_OW 44
 979: PPUSH
 980: LD_INT 18
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 49
// end ;
 990: GO 956
 992: POP
 993: POP
// for i := 1 to 2 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 2
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1043
// begin hc_class := 13 ;
1010: LD_ADDR_OWVAR 28
1014: PUSH
1015: LD_INT 13
1017: ST_TO_ADDR
// hc_gallery :=  ;
1018: LD_ADDR_OWVAR 33
1022: PUSH
1023: LD_STRING 
1025: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1026: CALL_OW 44
1030: PPUSH
1031: LD_INT 18
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end ;
1041: GO 1007
1043: POP
1044: POP
// end ;
1045: LD_VAR 0 1
1049: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
// result := false ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// if not sideList or not enemySide then
1065: LD_VAR 0 1
1069: NOT
1070: PUSH
1071: LD_VAR 0 2
1075: NOT
1076: OR
1077: IFFALSE 1081
// exit ;
1079: GO 1226
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// if not tmp then
1103: LD_VAR 0 7
1107: NOT
1108: IFFALSE 1112
// exit ;
1110: GO 1226
// for s in sideList do
1112: LD_ADDR_VAR 0 6
1116: PUSH
1117: LD_VAR 0 1
1121: PUSH
1122: FOR_IN
1123: IFFALSE 1224
// for i in tmp do
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_VAR 0 7
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1220
// if See ( s , i ) then
1138: LD_VAR 0 6
1142: PPUSH
1143: LD_VAR 0 5
1147: PPUSH
1148: CALL_OW 292
1152: IFFALSE 1218
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1154: LD_ADDR_VAR 0 8
1158: PUSH
1159: LD_INT 22
1161: PUSH
1162: LD_VAR 0 6
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: PPUSH
1176: LD_VAR 0 5
1180: PPUSH
1181: CALL_OW 74
1185: ST_TO_ADDR
// if tmp2 in exceptUnits then
1186: LD_VAR 0 8
1190: PUSH
1191: LD_VAR 0 3
1195: IN
1196: IFFALSE 1202
// continue else
1198: GO 1135
1200: GO 1218
// begin result := tmp2 ;
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_VAR 0 8
1211: ST_TO_ADDR
// exit ;
1212: POP
1213: POP
1214: POP
1215: POP
1216: GO 1226
// end ; end ;
1218: GO 1135
1220: POP
1221: POP
1222: GO 1122
1224: POP
1225: POP
// end ; end_of_file
1226: LD_VAR 0 4
1230: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
// if cargoRecycled then
1235: LD_EXP 25
1239: IFFALSE 1267
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1241: LD_INT 82
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1254: LD_INT 83
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 322
// end ; uc_side := 5 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 5
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1283: LD_ADDR_EXP 37
1287: PUSH
1288: LD_STRING Abdul
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: LD_STRING 
1296: PPUSH
1297: CALL 37970 0 3
1301: ST_TO_ADDR
// uc_side := 2 ;
1302: LD_ADDR_OWVAR 20
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// uc_nation := 2 ;
1310: LD_ADDR_OWVAR 21
1314: PUSH
1315: LD_INT 2
1317: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Heike
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37970 0 3
1341: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Ibrahim
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37970 0 3
1365: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 27
1370: PUSH
1371: LD_STRING Givi
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37970 0 3
1389: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_STRING Kamil
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37970 0 3
1413: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 31
1418: PUSH
1419: LD_STRING Kaia
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37970 0 3
1437: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 32
1442: PUSH
1443: LD_STRING Sophia
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37970 0 3
1461: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1462: LD_ADDR_EXP 33
1466: PUSH
1467: LD_STRING Markov
1469: PPUSH
1470: LD_EXP 1
1474: NOT
1475: PPUSH
1476: LD_EXP 2
1480: PPUSH
1481: CALL 37970 0 3
1485: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1486: LD_ADDR_EXP 36
1490: PUSH
1491: LD_STRING Aviradze
1493: PPUSH
1494: LD_EXP 1
1498: NOT
1499: PPUSH
1500: LD_EXP 2
1504: PPUSH
1505: CALL 37970 0 3
1509: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1510: LD_ADDR_EXP 40
1514: PUSH
1515: EMPTY
1516: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1517: LD_ADDR_EXP 38
1521: PUSH
1522: LD_STRING 03_others
1524: PPUSH
1525: CALL_OW 31
1529: ST_TO_ADDR
// uc_side := 5 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 5
1537: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_STRING Kurt
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: LD_STRING 
1551: PPUSH
1552: CALL 37970 0 3
1556: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_STRING Mike
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 37970 0 3
1580: ST_TO_ADDR
// if Mike then
1581: LD_EXP 28
1585: IFFALSE 1608
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1587: LD_EXP 28
1591: PPUSH
1592: LD_INT 142
1594: PPUSH
1595: LD_INT 63
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1608: LD_EXP 35
1612: PPUSH
1613: LD_INT 142
1615: PPUSH
1616: LD_INT 63
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1629: LD_EXP 35
1633: PUSH
1634: LD_EXP 28
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 140
// end ;
1647: LD_VAR 0 1
1651: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1652: LD_INT 0
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
// uc_side := 5 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 5
1665: ST_TO_ADDR
// uc_nation := 2 ;
1666: LD_ADDR_OWVAR 21
1670: PUSH
1671: LD_INT 2
1673: ST_TO_ADDR
// InitHc ;
1674: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1678: LD_ADDR_EXP 34
1682: PUSH
1683: LD_STRING Omar
1685: PPUSH
1686: LD_INT 0
1688: PPUSH
1689: LD_STRING 
1691: PPUSH
1692: CALL 37970 0 3
1696: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1697: LD_EXP 34
1701: PPUSH
1702: LD_INT 284
1704: PPUSH
1705: LD_INT 163
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1715: LD_EXP 34
1719: PPUSH
1720: LD_INT 256
1722: PPUSH
1723: LD_INT 129
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$2 ) ;
1730: LD_INT 70
1732: PPUSH
1733: CALL_OW 67
// omarSquad := [ ] ;
1737: LD_ADDR_EXP 39
1741: PUSH
1742: EMPTY
1743: ST_TO_ADDR
// for i := 1 to 5 do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1964
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 2
1783: MOD
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: ARRAY
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 27
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 3
1817: MOD
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 386 0 7
// veh := CreateVehicle ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1841: LD_VAR 0 4
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// omarSquad := omarSquad union veh ;
1853: LD_ADDR_EXP 39
1857: PUSH
1858: LD_EXP 39
1862: PUSH
1863: LD_VAR 0 4
1867: UNION
1868: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 284
1876: PPUSH
1877: LD_INT 163
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_VAR 0 3
1924: UNION
1925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1926: LD_VAR 0 3
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 271
1947: PPUSH
1948: LD_INT 144
1950: PPUSH
1951: CALL_OW 111
// wait ( 0 0$2 ) ;
1955: LD_INT 70
1957: PPUSH
1958: CALL_OW 67
// end ;
1962: GO 1757
1964: POP
1965: POP
// for i := 1 to 3 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 3
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2063
// begin PrepareHuman ( false , 1 , 2 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 380
// un := CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2005: LD_ADDR_EXP 39
2009: PUSH
2010: LD_EXP 39
2014: PUSH
2015: LD_VAR 0 3
2019: UNION
2020: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 284
2028: PPUSH
2029: LD_INT 163
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 257
2046: PPUSH
2047: LD_INT 138
2049: PPUSH
2050: CALL_OW 111
// wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// end ;
2061: GO 1979
2063: POP
2064: POP
// for i := 1 to 6 do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_INT 6
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2081: LD_INT 0
2083: PPUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 4
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: LD_INT 3
2105: MOD
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: ARRAY
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 380
// un := CreateHuman ;
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: CALL_OW 44
2128: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2129: LD_ADDR_EXP 39
2133: PUSH
2134: LD_EXP 39
2138: PUSH
2139: LD_VAR 0 3
2143: UNION
2144: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 225
2152: PPUSH
2153: LD_INT 163
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// if i = 1 then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: EQUAL
2171: IFFALSE 2188
// SetAttr ( un , attr_speed , 12 ) ;
2173: LD_VAR 0 3
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 12
2183: PPUSH
2184: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 222
2195: PPUSH
2196: LD_INT 157
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// end ;
2210: GO 2078
2212: POP
2213: POP
// end ; end_of_file
2214: LD_VAR 0 1
2218: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 149
2232: PPUSH
2233: LD_INT 67
2235: PPUSH
2236: CALL_OW 428
2240: PPUSH
2241: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2245: LD_ADDR_EXP 51
2249: PUSH
2250: LD_INT 111
2252: PPUSH
2253: LD_INT 89
2255: PPUSH
2256: CALL_OW 428
2260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 23
2278: PUSH
2279: LD_INT 3
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2312
// SetBLevel ( i , 5 ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL_OW 241
2310: GO 2295
2312: POP
2313: POP
// SetBName ( kirov , kirov ) ;
2314: LD_INT 71
2316: PPUSH
2317: LD_STRING kirov
2319: PPUSH
2320: CALL_OW 500
// SetBName ( beria , beria ) ;
2324: LD_INT 106
2326: PPUSH
2327: LD_STRING beria
2329: PPUSH
2330: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2334: LD_INT 112
2336: PPUSH
2337: LD_STRING kagan
2339: PPUSH
2340: CALL_OW 500
// uc_side := 6 ;
2344: LD_ADDR_OWVAR 20
2348: PUSH
2349: LD_INT 6
2351: ST_TO_ADDR
// uc_nation := 3 ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 6
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 5
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 6
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2436: LD_ADDR_EXP 45
2440: PUSH
2441: EMPTY
2442: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2443: LD_ADDR_EXP 46
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// russianPatrol := [ ] ;
2450: LD_ADDR_EXP 48
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2457: LD_ADDR_EXP 41
2461: PUSH
2462: LD_STRING Kurin
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 37970 0 3
2475: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2476: LD_EXP 41
2480: PPUSH
2481: LD_INT 71
2483: PPUSH
2484: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2488: LD_ADDR_EXP 43
2492: PUSH
2493: LD_STRING Popov
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_STRING 
2501: PPUSH
2502: CALL 37970 0 3
2506: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2507: LD_EXP 43
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2519: LD_ADDR_EXP 42
2523: PUSH
2524: LD_STRING Grishko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 37970 0 3
2537: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2538: LD_EXP 42
2542: PPUSH
2543: LD_INT 207
2545: PPUSH
2546: LD_INT 106
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_INT 209
2563: PPUSH
2564: LD_INT 106
2566: PPUSH
2567: CALL_OW 118
// for i := 1 to 2 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 2
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2640
// begin PrepareHuman ( false , 2 , 2 ) ;
2587: LD_INT 0
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 380
// un := CreateHuman ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: CALL_OW 44
2609: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_INT 71
2617: PPUSH
2618: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2622: LD_ADDR_EXP 45
2626: PUSH
2627: LD_EXP 45
2631: PUSH
2632: LD_VAR 0 3
2636: UNION
2637: ST_TO_ADDR
// end ;
2638: GO 2584
2640: POP
2641: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: DOUBLE
2648: LD_INT 1
2650: DEC
2651: ST_TO_ADDR
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PUSH
2676: FOR_TO
2677: IFFALSE 2755
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2679: LD_INT 0
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 4
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_OWVAR 67
2707: ARRAY
2708: PPUSH
2709: CALL_OW 380
// un := CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2737: LD_ADDR_EXP 45
2741: PUSH
2742: LD_EXP 45
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// end ;
2753: GO 2676
2755: POP
2756: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2870
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PUSH
2803: LD_INT 4
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: LD_OWVAR 67
2822: ARRAY
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2852: LD_ADDR_EXP 45
2856: PUSH
2857: LD_EXP 45
2861: PUSH
2862: LD_VAR 0 3
2866: UNION
2867: ST_TO_ADDR
// end ;
2868: GO 2791
2870: POP
2871: POP
// for i := 1 to 3 do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 3
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2941
// begin PrepareHuman ( false , 3 , 3 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 380
// un := CreateHuman ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: CALL_OW 44
2910: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_INT 92
2918: PPUSH
2919: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_EXP 45
2932: PUSH
2933: LD_VAR 0 3
2937: UNION
2938: ST_TO_ADDR
// end ;
2939: GO 2885
2941: POP
2942: POP
// for i := 1 to 2 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3012
// begin PrepareHuman ( false , 4 , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 380
// un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 83
2989: PPUSH
2990: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2994: LD_ADDR_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PUSH
3004: LD_VAR 0 3
3008: UNION
3009: ST_TO_ADDR
// end ;
3010: GO 2956
3012: POP
3013: POP
// for i := 1 to 5 do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 5
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3085
// begin PrepareHuman ( false , 1 , 3 ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 380
// un := CreateHuman ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3053: LD_VAR 0 3
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3067: LD_ADDR_EXP 47
3071: PUSH
3072: LD_EXP 47
3076: PUSH
3077: LD_VAR 0 3
3081: UNION
3082: ST_TO_ADDR
// end ;
3083: GO 3027
3085: POP
3086: POP
// russianCargo := [ ] ;
3087: LD_ADDR_EXP 50
3091: PUSH
3092: EMPTY
3093: ST_TO_ADDR
// for i := 1 to 2 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3240
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3110: LD_INT 6
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 21
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 51
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 386 0 7
// un := CreateVehicle ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3145: LD_ADDR_EXP 50
3149: PUSH
3150: LD_EXP 50
3154: PUSH
3155: LD_VAR 0 3
3159: UNION
3160: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 100
3171: PPUSH
3172: CALL_OW 290
// SetDir ( un , 4 ) ;
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_INT 4
3183: PPUSH
3184: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_INT 147
3195: PPUSH
3196: LD_INT 103
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_OWVAR 67
3219: PPUSH
3220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3224: CALL_OW 44
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL_OW 52
// end ;
3238: GO 3107
3240: POP
3241: POP
// uc_side := 3 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 3
3249: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3250: LD_ADDR_EXP 44
3254: PUSH
3255: LD_STRING Burlak
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_STRING 
3263: PPUSH
3264: CALL 37970 0 3
3268: ST_TO_ADDR
// for i := 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3376
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: PPUSH
3300: CALL_OW 380
// un := CreateHuman ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: CALL_OW 44
3313: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 3
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3358: LD_ADDR_EXP 46
3362: PUSH
3363: LD_EXP 46
3367: PUSH
3368: LD_VAR 0 3
3372: UNION
3373: ST_TO_ADDR
// end ;
3374: GO 3282
3376: POP
3377: POP
// for i := 1 to 2 do
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_INT 2
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3483
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: LD_OWVAR 67
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: CALL_OW 380
// un := CreateHuman ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: CALL_OW 44
3422: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 30
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PPUSH
3452: CALL_OW 69
3456: PUSH
3457: LD_INT 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3465: LD_ADDR_EXP 46
3469: PUSH
3470: LD_EXP 46
3474: PUSH
3475: LD_VAR 0 3
3479: UNION
3480: ST_TO_ADDR
// end ;
3481: GO 3391
3483: POP
3484: POP
// for i := 1 to 2 do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: DOUBLE
3491: LD_INT 1
3493: DEC
3494: ST_TO_ADDR
3495: LD_INT 2
3497: PUSH
3498: FOR_TO
3499: IFFALSE 3586
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_OWVAR 67
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 3
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 69
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3568: LD_ADDR_EXP 46
3572: PUSH
3573: LD_EXP 46
3577: PUSH
3578: LD_VAR 0 3
3582: UNION
3583: ST_TO_ADDR
// end ;
3584: GO 3498
3586: POP
3587: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_OWVAR 67
3598: PPUSH
3599: CALL_OW 380
// un := CreateHuman ;
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 106
3620: PPUSH
3621: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3625: LD_ADDR_EXP 46
3629: PUSH
3630: LD_EXP 46
3634: PUSH
3635: LD_VAR 0 3
3639: UNION
3640: ST_TO_ADDR
// for i := 1 to 3 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 3
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3777
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 30
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_OWVAR 67
3707: PPUSH
3708: CALL_OW 380
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3722: LD_VAR 0 3
3726: PPUSH
3727: LD_VAR 0 6
3731: PPUSH
3732: CALL_OW 254
3736: PUSH
3737: LD_INT 3
3739: PLUS
3740: PPUSH
3741: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 6
3754: PPUSH
3755: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3759: LD_ADDR_EXP 46
3763: PUSH
3764: LD_EXP 46
3768: PUSH
3769: LD_VAR 0 3
3773: UNION
3774: ST_TO_ADDR
// end ;
3775: GO 3654
3777: POP
3778: POP
// if Difficulty > 1 then
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: GREATER
3787: IFFALSE 3862
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 23
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 44
3811: PPUSH
3812: LD_INT 100
3814: PPUSH
3815: CALL 386 0 7
3819: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 73
3827: PPUSH
3828: LD_INT 110
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 3
3843: PPUSH
3844: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3848: CALL_OW 44
3852: PPUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3862: LD_ADDR_EXP 49
3866: PUSH
3867: EMPTY
3868: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 8
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: LD_OWVAR 67
3901: ARRAY
3902: PUSH
3903: FOR_TO
3904: IFFALSE 4128
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3906: LD_INT 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 23
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 2
3929: MOD
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ARRAY
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_INT 43
3944: PUSH
3945: LD_INT 44
3947: PUSH
3948: LD_INT 42
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 3
3963: MOD
3964: PUSH
3965: LD_INT 1
3967: PLUS
3968: ARRAY
3969: PPUSH
3970: LD_INT 100
3972: PPUSH
3973: CALL 386 0 7
// un := CreateVehicle ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: PPUSH
4014: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4018: LD_ADDR_EXP 49
4022: PUSH
4023: LD_EXP 49
4027: PUSH
4028: LD_VAR 0 3
4032: UNION
4033: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 127
4041: PPUSH
4042: LD_INT 89
4044: PPUSH
4045: LD_INT 7
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// uc_side := 3 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 3
4062: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 380
// un := CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4086: LD_ADDR_EXP 49
4090: PUSH
4091: LD_EXP 49
4095: PUSH
4096: LD_VAR 0 3
4100: UNION
4101: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 49
4111: PUSH
4112: LD_EXP 49
4116: PUSH
4117: LD_INT 1
4119: MINUS
4120: ARRAY
4121: PPUSH
4122: CALL_OW 52
// end ;
4126: GO 3903
4128: POP
4129: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4231
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_OWVAR 67
4177: PPUSH
4178: CALL_OW 380
// un := CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4192: LD_ADDR_EXP 49
4196: PUSH
4197: LD_EXP 49
4201: PUSH
4202: LD_VAR 0 3
4206: UNION
4207: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 91
4215: PPUSH
4216: LD_INT 60
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 50
// end ;
4229: GO 4164
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$3 do var i ;
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
// begin for i := 1 to 4 do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 4
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4277
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4260: LD_EXP 47
4264: PUSH
4265: LD_VAR 0 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 122
4275: GO 4257
4277: POP
4278: POP
// wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4286: LD_EXP 47
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 31
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PPUSH
4324: LD_EXP 47
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: CALL_OW 74
4337: PPUSH
4338: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4342: LD_EXP 47
4346: PUSH
4347: LD_INT 2
4349: ARRAY
4350: PPUSH
4351: LD_INT 211
4353: PPUSH
4354: LD_INT 107
4356: PPUSH
4357: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4361: LD_EXP 47
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 209
4372: PPUSH
4373: LD_INT 106
4375: PPUSH
4376: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4380: LD_EXP 47
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: LD_INT 209
4391: PPUSH
4392: LD_INT 103
4394: PPUSH
4395: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4399: LD_EXP 47
4403: PUSH
4404: LD_INT 3
4406: ARRAY
4407: PPUSH
4408: LD_INT 209
4410: PPUSH
4411: LD_INT 106
4413: PPUSH
4414: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4418: LD_EXP 47
4422: PUSH
4423: LD_INT 4
4425: ARRAY
4426: PPUSH
4427: LD_INT 227
4429: PPUSH
4430: LD_INT 117
4432: PPUSH
4433: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4437: LD_EXP 47
4441: PUSH
4442: LD_INT 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4450: LD_INT 700
4452: PPUSH
4453: CALL_OW 67
// for i := 3 downto 2 do
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: DOUBLE
4463: LD_INT 3
4465: INC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_DOWNTO
4471: IFFALSE 4638
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4473: LD_EXP 47
4477: PUSH
4478: LD_VAR 0 1
4482: ARRAY
4483: PPUSH
4484: LD_INT 200
4486: PPUSH
4487: LD_INT 91
4489: PPUSH
4490: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4494: LD_EXP 47
4498: PUSH
4499: LD_VAR 0 1
4503: ARRAY
4504: PPUSH
4505: LD_INT 210
4507: PPUSH
4508: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4512: LD_EXP 47
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: PPUSH
4523: LD_INT 224
4525: PPUSH
4526: LD_INT 93
4528: PPUSH
4529: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4533: LD_EXP 47
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PPUSH
4544: LD_INT 210
4546: PPUSH
4547: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4551: LD_EXP 47
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: PPUSH
4562: LD_INT 239
4564: PPUSH
4565: LD_INT 123
4567: PPUSH
4568: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4572: LD_EXP 47
4576: PUSH
4577: LD_VAR 0 1
4581: ARRAY
4582: PPUSH
4583: LD_INT 210
4585: PPUSH
4586: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4590: LD_EXP 47
4594: PUSH
4595: LD_VAR 0 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 212
4603: PPUSH
4604: LD_INT 105
4606: PPUSH
4607: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4611: LD_EXP 47
4615: PUSH
4616: LD_VAR 0 1
4620: ARRAY
4621: PPUSH
4622: LD_INT 700
4624: PPUSH
4625: CALL_OW 202
// wait ( 0 0$30 ) ;
4629: LD_INT 1050
4631: PPUSH
4632: CALL_OW 67
// end ;
4636: GO 4470
4638: POP
4639: POP
// until not activeGrishkoAI ;
4640: LD_EXP 10
4644: NOT
4645: IFFALSE 4450
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 221
4654: PPUSH
4655: LD_INT 110
4657: PPUSH
4658: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4662: LD_EXP 47
4666: PPUSH
4667: LD_INT 228
4669: PPUSH
4670: LD_INT 115
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4677: LD_EXP 47
4681: PPUSH
4682: CALL_OW 200
// end ;
4686: PPOPN 1
4688: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4689: LD_EXP 12
4693: IFFALSE 5439
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin uc_side := 6 ;
4704: LD_ADDR_OWVAR 20
4708: PUSH
4709: LD_INT 6
4711: ST_TO_ADDR
// uc_nation := 3 ;
4712: LD_ADDR_OWVAR 21
4716: PUSH
4717: LD_INT 3
4719: ST_TO_ADDR
// for i := 1 to 3 do
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_INT 3
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4847
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: LD_INT 2
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_OWVAR 67
4764: ARRAY
4765: PPUSH
4766: CALL_OW 380
// un := CreateHuman ;
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4780: LD_ADDR_EXP 48
4784: PUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_VAR 0 1
4794: UNION
4795: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 210
4830: PPUSH
4831: LD_INT 159
4833: PPUSH
4834: CALL_OW 111
// wait ( 0 0$2 ) ;
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 67
// end ;
4845: GO 4733
4847: POP
4848: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4849: LD_ADDR_VAR 0 4
4853: PUSH
4854: LD_INT 172
4856: PUSH
4857: LD_INT 76
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 150
4866: PUSH
4867: LD_INT 38
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 148
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 165
4886: PUSH
4887: LD_INT 38
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 191
4902: PUSH
4903: LD_INT 77
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 168
4912: PUSH
4913: LD_INT 42
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 166
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 151
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 221
4948: PUSH
4949: LD_INT 88
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 217
4958: PUSH
4959: LD_INT 64
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 232
4968: PUSH
4969: LD_INT 66
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 200
4978: PUSH
4979: LD_INT 56
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4997: LD_INT 35
4999: PPUSH
5000: CALL_OW 67
// for i := russianPatrol downto 1 do
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: DOUBLE
5010: LD_EXP 48
5014: INC
5015: ST_TO_ADDR
5016: LD_INT 1
5018: PUSH
5019: FOR_DOWNTO
5020: IFFALSE 5403
// begin if IsDead ( russianPatrol [ i ] ) then
5022: LD_EXP 48
5026: PUSH
5027: LD_VAR 0 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 301
5037: IFFALSE 5041
// continue ;
5039: GO 5019
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5041: LD_EXP 48
5045: PUSH
5046: LD_VAR 0 2
5050: ARRAY
5051: PPUSH
5052: CALL_OW 256
5056: PUSH
5057: LD_INT 990
5059: LESS
5060: PUSH
5061: LD_EXP 48
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: PPUSH
5072: CALL_OW 110
5076: PUSH
5077: LD_INT 1
5079: EQUAL
5080: AND
5081: IFFALSE 5101
// SetTag ( russianPatrol [ i ] , 2 ) ;
5083: LD_EXP 48
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5101: LD_EXP 48
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PPUSH
5112: CALL_OW 110
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: IFFALSE 5187
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5122: LD_EXP 48
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 166
5135: PPUSH
5136: LD_INT 101
5138: PPUSH
5139: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5143: LD_EXP 48
5147: PUSH
5148: LD_VAR 0 2
5152: ARRAY
5153: PPUSH
5154: LD_INT 71
5156: PPUSH
5157: CALL_OW 296
5161: PUSH
5162: LD_INT 10
5164: LESS
5165: IFFALSE 5185
// SetTag ( russianPatrol [ i ] , 3 ) ;
5167: LD_EXP 48
5171: PUSH
5172: LD_VAR 0 2
5176: ARRAY
5177: PPUSH
5178: LD_INT 3
5180: PPUSH
5181: CALL_OW 109
// continue ;
5185: GO 5019
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5187: LD_EXP 48
5191: PUSH
5192: LD_VAR 0 2
5196: ARRAY
5197: PPUSH
5198: CALL_OW 110
5202: PUSH
5203: LD_INT 3
5205: EQUAL
5206: IFFALSE 5301
// begin spottedByPatrol := true ;
5208: LD_ADDR_EXP 7
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5216: LD_EXP 48
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 250
5231: PPUSH
5232: LD_EXP 48
5236: PUSH
5237: LD_VAR 0 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 251
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 6
5253: NEG
5254: PPUSH
5255: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5259: LD_EXP 48
5263: PUSH
5264: LD_VAR 0 2
5268: ARRAY
5269: PPUSH
5270: CALL_OW 87
// DialogueOn ;
5274: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5278: LD_EXP 26
5282: PPUSH
5283: LD_STRING DH-Spot-f-3
5285: PPUSH
5286: CALL_OW 88
// DialogueOff ;
5290: CALL_OW 7
// YouLost ( Spotted ) ;
5294: LD_STRING Spotted
5296: PPUSH
5297: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5301: LD_EXP 48
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PPUSH
5312: CALL_OW 314
5316: NOT
5317: IFFALSE 5401
// for j in patrol [ i ] do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 4
5328: PUSH
5329: LD_VAR 0 2
5333: ARRAY
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5399
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5338: LD_EXP 48
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: PPUSH
5349: LD_INT 35
5351: PPUSH
5352: LD_INT 175
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5364: LD_EXP 48
5368: PUSH
5369: LD_VAR 0 2
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 174
// end ;
5397: GO 5335
5399: POP
5400: POP
// end ;
5401: GO 5019
5403: POP
5404: POP
// until not russianPatrol or russianAlert ;
5405: LD_EXP 48
5409: NOT
5410: PUSH
5411: LD_EXP 9
5415: OR
5416: IFFALSE 4997
// if russianPatrol then
5418: LD_EXP 48
5422: IFFALSE 5439
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5424: LD_EXP 48
5428: PPUSH
5429: LD_INT 161
5431: PPUSH
5432: LD_INT 107
5434: PPUSH
5435: CALL_OW 114
// end ;
5439: PPOPN 4
5441: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5442: LD_EXP 6
5446: PUSH
5447: LD_EXP 13
5451: NOT
5452: AND
5453: IFFALSE 5939
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 49
5475: PPUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// for i in filter do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5937
// begin tmp := IsDrivenBy ( i ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 311
5538: ST_TO_ADDR
// if not tmp then
5539: LD_VAR 0 3
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5521
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 261
5557: PUSH
5558: LD_INT 90
5560: GREATER
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 110
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: AND
5576: IFFALSE 5592
// SetTag ( i , 0 ) else
5578: LD_VAR 0 1
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 109
5590: GO 5688
// if GetTag ( i ) = 2 then
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 110
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5688
// begin x := rand ( 1 , 2 ) ;
5607: LD_ADDR_VAR 0 5
5611: PUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 12
5622: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_EXP 50
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5643: LD_EXP 50
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 289
5661: PUSH
5662: LD_INT 20
5664: LESS
5665: IFFALSE 5688
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5667: LD_EXP 50
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_INT 100
5683: PPUSH
5684: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 256
5697: PUSH
5698: LD_INT 600
5700: GREATEREQUAL
5701: PUSH
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 110
5711: NOT
5712: AND
5713: IFFALSE 5739
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 74
5734: PPUSH
5735: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 256
5748: PUSH
5749: LD_INT 600
5751: LESS
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 110
5762: NOT
5763: AND
5764: IFFALSE 5793
// begin SetTag ( i , 1 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_INT 62
5785: PPUSH
5786: LD_INT 22
5788: PPUSH
5789: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 110
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 62
5814: PPUSH
5815: LD_INT 22
5817: PPUSH
5818: CALL_OW 297
5822: PUSH
5823: LD_INT 6
5825: LESS
5826: AND
5827: PUSH
5828: LD_VAR 0 3
5832: AND
5833: IFFALSE 5935
// begin ComExitVehicle ( tmp ) ;
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5858: LD_INT 35
5860: PPUSH
5861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 256
5874: PUSH
5875: LD_INT 1000
5877: EQUAL
5878: IFFALSE 5858
// ComEnterUnit ( tmp , i ) ;
5880: LD_VAR 0 3
5884: PPUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 261
5903: PUSH
5904: LD_INT 90
5906: LESSEQUAL
5907: IFFALSE 5923
// SetTag ( i , 2 ) else
5909: LD_VAR 0 1
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 109
5921: GO 5935
// SetTag ( i , 0 ) ;
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 109
// end ; end ;
5935: GO 5521
5937: POP
5938: POP
// end ;
5939: PPOPN 5
5941: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5942: LD_EXP 20
5946: IFFALSE 6169
5948: GO 5950
5950: DISABLE
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5955: LD_EXP 50
5959: PPUSH
5960: LD_INT 79
5962: PPUSH
5963: LD_INT 155
5965: PPUSH
5966: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5970: LD_EXP 50
5974: PPUSH
5975: LD_INT 16
5977: PPUSH
5978: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// for i in tmp do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: FOR_IN
6014: IFFALSE 6048
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_INT 123
6023: PPUSH
6024: LD_INT 60
6026: PPUSH
6027: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_INT 153
6038: PPUSH
6039: LD_INT 103
6041: PPUSH
6042: CALL_OW 174
// end ;
6046: GO 6013
6048: POP
6049: POP
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_EXP 49
6066: PPUSH
6067: LD_INT 50
6069: PUSH
6070: EMPTY
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// for i in tmp do
6078: LD_ADDR_VAR 0 1
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6160
// if not HasTask ( i ) then
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: IFFALSE 6158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6103: LD_VAR 0 1
6107: PPUSH
6108: LD_INT 81
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 21
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 74
6153: PPUSH
6154: CALL_OW 115
6158: GO 6088
6160: POP
6161: POP
6162: LD_VAR 0 2
6166: NOT
6167: IFFALSE 6050
// end ;
6169: PPOPN 2
6171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6172: LD_INT 22
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: IFFALSE 6279
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
// begin enable ;
6208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: FOR_IN
6244: IFFALSE 6277
// if GetFuel ( i ) < 1 then
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 261
6255: PUSH
6256: LD_INT 1
6258: LESS
6259: IFFALSE 6275
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 311
6270: PPUSH
6271: CALL_OW 121
6275: GO 6243
6277: POP
6278: POP
// end ;
6279: PPOPN 1
6281: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6282: LD_EXP 41
6286: PPUSH
6287: CALL_OW 303
6291: PUSH
6292: LD_EXP 41
6296: PPUSH
6297: CALL_OW 301
6301: OR
6302: PUSH
6303: LD_INT 71
6305: PPUSH
6306: CALL_OW 303
6310: OR
6311: PUSH
6312: LD_INT 71
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: IFFALSE 6643
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 72
6355: ST_TO_ADDR
// if not tmp then
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6643
// barracks := HexInfo ( 166 , 116 ) ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_INT 166
6372: PPUSH
6373: LD_INT 116
6375: PPUSH
6376: CALL_OW 428
6380: ST_TO_ADDR
// for i in tmp do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6405
// ComExitBuilding ( i ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 122
6403: GO 6391
6405: POP
6406: POP
// repeat wait ( 0 0$1 ) ;
6407: LD_INT 35
6409: PPUSH
6410: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6414: LD_ADDR_VAR 0 2
6418: PUSH
6419: LD_EXP 45
6423: PPUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 50
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 72
6448: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 21
6456: PPUSH
6457: LD_INT 81
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 70
6471: ST_TO_ADDR
// if enemy then
6472: LD_VAR 0 3
6476: IFFALSE 6521
// begin for i in tmp do
6478: LD_ADDR_VAR 0 1
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6517
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 74
6510: PPUSH
6511: CALL_OW 115
6515: GO 6488
6517: POP
6518: POP
// end else
6519: GO 6636
// begin for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6634
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 314
6543: PUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 21
6551: PPUSH
6552: CALL_OW 308
6556: NOT
6557: OR
6558: IFFALSE 6632
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 600
6572: LESS
6573: PUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 313
6594: PUSH
6595: LD_INT 6
6597: LESS
6598: AND
6599: IFFALSE 6617
// ComEnterUnit ( i , barracks ) else
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 120
6615: GO 6632
// ComMoveXY ( i , 162 , 109 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 162
6624: PPUSH
6625: LD_INT 109
6627: PPUSH
6628: CALL_OW 111
6632: GO 6531
6634: POP
6635: POP
// end ; until not tmp ;
6636: LD_VAR 0 2
6640: NOT
6641: IFFALSE 6407
// end ;
6643: PPOPN 4
6645: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6646: LD_INT 106
6648: PPUSH
6649: CALL_OW 303
6653: PUSH
6654: LD_INT 106
6656: PPUSH
6657: CALL_OW 301
6661: OR
6662: IFFALSE 6757
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_EXP 46
6680: PPUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 72
6695: ST_TO_ADDR
// if not tmp then
6696: LD_VAR 0 2
6700: NOT
6701: IFFALSE 6705
// exit ;
6703: GO 6757
// for i in tmp do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_VAR 0 2
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6755
// begin if IsInUnit ( i ) then
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 310
6727: IFFALSE 6738
// ComExitBuilding ( i ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6738: LD_VAR 0 1
6742: PPUSH
6743: LD_INT 66
6745: PPUSH
6746: LD_INT 128
6748: PPUSH
6749: CALL_OW 171
// end ;
6753: GO 6715
6755: POP
6756: POP
// end ; end_of_file
6757: PPOPN 2
6759: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
// SetBName ( omikron , omikron ) ;
6765: LD_INT 64
6767: PPUSH
6768: LD_STRING omikron
6770: PPUSH
6771: CALL_OW 500
// uc_side := 4 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 4
6782: ST_TO_ADDR
// uc_nation := 1 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// omicronSquad := [ ] ;
6791: LD_ADDR_EXP 52
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 31
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6908
// begin PrepareHuman ( false , 1 , 1 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 380
// un := CreateHuman ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: CALL_OW 44
6875: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6876: LD_ADDR_EXP 52
6880: PUSH
6881: LD_EXP 52
6885: PUSH
6886: LD_VAR 0 3
6890: UNION
6891: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: CALL_OW 52
// end ;
6906: GO 6850
6908: POP
6909: POP
// for i := 1 to 3 do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 3
6922: PUSH
6923: FOR_TO
6924: IFFALSE 6979
// begin PrepareHuman ( false , 2 , 2 ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 2
6931: PPUSH
6932: LD_INT 2
6934: PPUSH
6935: CALL_OW 380
// un := CreateHuman ;
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6949: LD_ADDR_EXP 52
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: LD_VAR 0 3
6963: UNION
6964: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 64
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6923
6979: POP
6980: POP
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7134
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6997: LD_INT 4
6999: PPUSH
7000: LD_INT 1
7002: PPUSH
7003: LD_INT 2
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL 386 0 7
// un := CreateVehicle ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: CALL_OW 45
7031: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_EXP 52
7041: PUSH
7042: LD_VAR 0 3
7046: UNION
7047: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 28
7055: PPUSH
7056: LD_INT 37
7058: PPUSH
7059: LD_INT 6
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7069: LD_INT 0
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7092: LD_ADDR_EXP 52
7096: PUSH
7097: LD_EXP 52
7101: PUSH
7102: LD_VAR 0 3
7106: UNION
7107: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_EXP 52
7117: PUSH
7118: LD_EXP 52
7122: PUSH
7123: LD_INT 1
7125: MINUS
7126: ARRAY
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 6994
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// uc_side := 4 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 4
7154: ST_TO_ADDR
// uc_nation := 1 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// tmp := [ ] ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: EMPTY
7169: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_INT 77
7190: PPUSH
7191: CALL 386 0 7
// un := CreateVehicle ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: CALL_OW 45
7204: ST_TO_ADDR
// tmp := tmp union un ;
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: UNION
7220: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_INT 106
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7251: LD_INT 0
7253: PPUSH
7254: LD_INT 3
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// tmp := tmp union un ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_VAR 0 3
7288: UNION
7289: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_INT 1
7307: MINUS
7308: ARRAY
7309: PPUSH
7310: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7314: LD_VAR 0 3
7318: PPUSH
7319: LD_INT 109
7321: PPUSH
7322: LD_INT 9
7324: PPUSH
7325: CALL_OW 111
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// for i := 1 to 2 do
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: DOUBLE
7342: LD_INT 1
7344: DEC
7345: ST_TO_ADDR
7346: LD_INT 2
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7414
// begin PrepareHuman ( false , 1 , 2 ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 380
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// tmp := tmp union un ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 4
7384: PUSH
7385: LD_VAR 0 3
7389: UNION
7390: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7391: LD_VAR 0 3
7395: PPUSH
7396: LD_INT 105
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 0
7407: PPUSH
7408: CALL_OW 50
// end ;
7412: GO 7349
7414: POP
7415: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 26
7423: PPUSH
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7438: LD_VAR 0 4
7442: PPUSH
7443: LD_INT 50
7445: PUSH
7446: EMPTY
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7585
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_INT 91
7465: PUSH
7466: LD_INT 64
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: LD_VAR 0 4
7486: EQUAL
7487: IFFALSE 7431
// omicronSquad := omicronSquad union tmp ;
7489: LD_ADDR_EXP 52
7493: PUSH
7494: LD_EXP 52
7498: PUSH
7499: LD_VAR 0 4
7503: UNION
7504: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 25
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 72
7529: PUSH
7530: FOR_IN
7531: IFFALSE 7583
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 30
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 74
7576: PPUSH
7577: CALL_OW 120
7581: GO 7530
7583: POP
7584: POP
// end ;
7585: LD_VAR 0 1
7589: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7590: LD_EXP 13
7594: NOT
7595: IFFALSE 8166
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// begin enable ;
7606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_EXP 52
7668: PPUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: ST_TO_ADDR
// if filter and tmp then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: AND
7694: IFFALSE 7767
// begin for i in tmp do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7763
// if IsInUnit ( i ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7731
// ComExitBuilding ( i ) else
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 122
7729: GO 7761
// if not HasTask ( i ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 314
7740: NOT
7741: IFFALSE 7761
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_VAR 0 2
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 130
7761: GO 7706
7763: POP
7764: POP
// end else
7765: GO 7838
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7767: LD_VAR 0 3
7771: PPUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 54
7777: PUSH
7778: EMPTY
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: IFFALSE 7838
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: PUSH
7819: FOR_IN
7820: IFFALSE 7836
// ComEnterUnit ( i , omikron ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_INT 64
7829: PPUSH
7830: CALL_OW 120
7834: GO 7819
7836: POP
7837: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_EXP 52
7847: PPUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 72
7862: ST_TO_ADDR
// if not filter then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 8166
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_INT 13
7879: PPUSH
7880: LD_INT 81
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 70
7894: ST_TO_ADDR
// if enemy then
7895: LD_VAR 0 4
7899: IFFALSE 8166
// begin for i in filter do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 8164
// begin tmp := IsDrivenBy ( i ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 311
7928: ST_TO_ADDR
// if not tmp then
7929: LD_VAR 0 3
7933: NOT
7934: IFFALSE 7938
// continue ;
7936: GO 7911
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 600
7950: GREATEREQUAL
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_INT 1
7964: NONEQUAL
7965: AND
7966: IFFALSE 7992
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 256
8001: PUSH
8002: LD_INT 600
8004: LESS
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 110
8015: PUSH
8016: LD_INT 1
8018: NONEQUAL
8019: AND
8020: IFFALSE 8049
// begin SetTag ( i , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_INT 27
8041: PPUSH
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 110
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 27
8070: PPUSH
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 297
8078: PUSH
8079: LD_INT 6
8081: LESS
8082: AND
8083: PUSH
8084: LD_VAR 0 3
8088: AND
8089: IFFALSE 8162
// begin ComExitVehicle ( tmp ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8114: LD_INT 35
8116: PPUSH
8117: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 1000
8133: EQUAL
8134: IFFALSE 8114
// ComEnterUnit ( tmp , i ) ;
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 120
// SetTag ( i , 0 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 109
// end ; end ;
8162: GO 7911
8164: POP
8165: POP
// end ; end ;
8166: PPOPN 4
8168: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8169: LD_EXP 13
8173: IFFALSE 8317
8175: GO 8177
8177: DISABLE
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 52
8191: PPUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 50
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: ST_TO_ADDR
// if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8317
// repeat wait ( 0 0$1 ) ;
8226: LD_INT 35
8228: PPUSH
8229: CALL_OW 67
// for i in tmp do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8308
// begin ComExit ( i ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 75689 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_INT 14
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8306
// begin tmp := tmp diff i ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// RemoveUnit ( i ) ;
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 64
// end ; end ;
8306: GO 8243
8308: POP
8309: POP
// until not tmp ;
8310: LD_VAR 0 2
8314: NOT
8315: IFFALSE 8226
// end ; end_of_file
8317: PPOPN 2
8319: END
// export function Action ; var i , un , veh , tmp ; begin
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
// InGameOn ;
8327: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8331: LD_INT 179
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_INT 2
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: LD_INT 12
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 24
8363: PPUSH
8364: LD_INT 33
8366: PPUSH
8367: CALL 386 0 7
8371: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 178
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 52
// if Kamil then
8416: LD_EXP 30
8420: IFFALSE 8455
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8422: LD_EXP 30
8426: PPUSH
8427: LD_INT 207
8429: PPUSH
8430: LD_INT 37
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8440: LD_EXP 30
8444: PPUSH
8445: LD_INT 211
8447: PPUSH
8448: LD_INT 38
8450: PPUSH
8451: CALL_OW 118
// end ; if Sophia then
8455: LD_EXP 32
8459: IFFALSE 8494
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8461: LD_EXP 32
8465: PPUSH
8466: LD_INT 209
8468: PPUSH
8469: LD_INT 40
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8479: LD_EXP 32
8483: PPUSH
8484: LD_INT 211
8486: PPUSH
8487: LD_INT 38
8489: PPUSH
8490: CALL_OW 118
// end ; if Givi then
8494: LD_EXP 27
8498: IFFALSE 8533
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8500: LD_EXP 27
8504: PPUSH
8505: LD_INT 201
8507: PPUSH
8508: LD_INT 34
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8518: LD_EXP 27
8522: PPUSH
8523: LD_INT 206
8525: PPUSH
8526: LD_INT 36
8528: PPUSH
8529: CALL_OW 118
// end ; if Ibrahim then
8533: LD_EXP 29
8537: IFFALSE 8572
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8539: LD_EXP 29
8543: PPUSH
8544: LD_INT 202
8546: PPUSH
8547: LD_INT 39
8549: PPUSH
8550: LD_INT 0
8552: PPUSH
8553: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8557: LD_EXP 29
8561: PPUSH
8562: LD_INT 206
8564: PPUSH
8565: LD_INT 36
8567: PPUSH
8568: CALL_OW 118
// end ; if Markov then
8572: LD_EXP 33
8576: IFFALSE 8663
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 2
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 13
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 25
8600: PPUSH
8601: LD_INT 80
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: LD_OWVAR 67
8611: MUL
8612: MINUS
8613: PPUSH
8614: CALL 386 0 7
8618: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8631: LD_VAR 0 4
8635: PPUSH
8636: LD_INT 197
8638: PPUSH
8639: LD_INT 35
8641: PPUSH
8642: LD_INT 0
8644: PPUSH
8645: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8649: LD_EXP 33
8653: PPUSH
8654: LD_VAR 0 4
8658: PPUSH
8659: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_EXP 31
8672: PUSH
8673: LD_EXP 38
8677: UNION
8678: ST_TO_ADDR
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 5
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8724
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 203
8699: PPUSH
8700: LD_INT 41
8702: PPUSH
8703: LD_INT 6
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 50
// ComHold ( i ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: CALL_OW 140
// end ;
8722: GO 8689
8724: POP
8725: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8726: LD_INT 22
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: NOT
8755: IFFALSE 8769
// SetClass ( Heike , 2 ) ;
8757: LD_EXP 26
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8769: LD_EXP 26
8773: PPUSH
8774: LD_INT 183
8776: PPUSH
8777: LD_INT 12
8779: PPUSH
8780: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8784: LD_EXP 26
8788: PPUSH
8789: LD_INT 188
8791: PPUSH
8792: LD_INT 20
8794: PPUSH
8795: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8799: LD_EXP 26
8803: PPUSH
8804: LD_INT 191
8806: PPUSH
8807: LD_INT 25
8809: PPUSH
8810: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8814: LD_EXP 26
8818: PPUSH
8819: LD_INT 203
8821: PPUSH
8822: LD_INT 29
8824: PPUSH
8825: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8829: LD_EXP 26
8833: PPUSH
8834: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8838: LD_INT 35
8840: PPUSH
8841: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8845: LD_EXP 26
8849: PPUSH
8850: CALL_OW 310
8854: NOT
8855: IFFALSE 8838
// CenterOnUnits ( Heike ) ;
8857: LD_EXP 26
8861: PPUSH
8862: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_INT 22
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: LD_EXP 26
8904: PUSH
8905: LD_EXP 33
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: DIFF
8914: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// if Givi then
8929: LD_EXP 27
8933: IFFALSE 8951
// ComTurnUnit ( Heike , Givi ) else
8935: LD_EXP 26
8939: PPUSH
8940: LD_EXP 27
8944: PPUSH
8945: CALL_OW 119
8949: GO 8969
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8951: LD_EXP 26
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8969: LD_EXP 26
8973: PPUSH
8974: LD_STRING DH-Start-1
8976: PPUSH
8977: CALL_OW 88
// if Givi then
8981: LD_EXP 27
8985: IFFALSE 9032
// begin Say ( Givi , DG-Start-2 ) ;
8987: LD_EXP 27
8991: PPUSH
8992: LD_STRING DG-Start-2
8994: PPUSH
8995: CALL_OW 88
// if not Mike then
8999: LD_EXP 28
9003: NOT
9004: IFFALSE 9030
// begin Say ( Givi , DG-Start-b-3 ) ;
9006: LD_EXP 27
9010: PPUSH
9011: LD_STRING DG-Start-b-3
9013: PPUSH
9014: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9018: LD_EXP 26
9022: PPUSH
9023: LD_STRING DH-Start-b-4
9025: PPUSH
9026: CALL_OW 88
// end ; end else
9030: GO 9097
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9032: LD_EXP 38
9036: PPUSH
9037: LD_INT 26
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 72
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: LD_STRING DArm-Start-a-2
9058: PPUSH
9059: CALL_OW 88
9063: NOT
9064: IFFALSE 9097
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9066: LD_EXP 38
9070: PPUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: LD_STRING DArf-Start-a-2
9092: PPUSH
9093: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9097: LD_EXP 26
9101: PPUSH
9102: LD_INT 211
9104: PPUSH
9105: LD_INT 38
9107: PPUSH
9108: CALL_OW 118
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9119: LD_EXP 26
9123: PPUSH
9124: LD_STRING DH-Start-3
9126: PPUSH
9127: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_STRING DH-Start-4
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9147: LD_STRING Prepare
9149: PPUSH
9150: CALL_OW 337
// SaveForQuickRestart ;
9154: CALL_OW 22
// wait ( 0 0$10 ) ;
9158: LD_INT 350
9160: PPUSH
9161: CALL_OW 67
// if not Aviradze then
9165: LD_EXP 36
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9414
// SetDir ( Aviradze , 4 ) ;
9174: LD_EXP 36
9178: PPUSH
9179: LD_INT 4
9181: PPUSH
9182: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_INT 225
9193: PPUSH
9194: LD_INT 33
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL_OW 48
// for i := 1 to 2 do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: DOUBLE
9210: LD_INT 1
9212: DEC
9213: ST_TO_ADDR
9214: LD_INT 2
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9349
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 0 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 12
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 380
// hc_gallery :=  ;
9249: LD_ADDR_OWVAR 33
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9257: LD_ADDR_OWVAR 26
9261: PUSH
9262: LD_STRING Artudito
9264: PUSH
9265: LD_STRING Textur
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: ST_TO_ADDR
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 224
9295: PUSH
9296: LD_INT 226
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_VAR 0 2
9307: ARRAY
9308: PPUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_VAR 0 2
9323: ARRAY
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 215
9339: PPUSH
9340: LD_INT 36
9342: PPUSH
9343: CALL_OW 111
// end ;
9347: GO 9217
9349: POP
9350: POP
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// InitHc ;
9359: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9363: LD_EXP 36
9367: PPUSH
9368: LD_INT 215
9370: PPUSH
9371: LD_INT 36
9373: PPUSH
9374: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9378: LD_EXP 36
9382: PPUSH
9383: LD_STRING DA-Arrive-1
9385: PPUSH
9386: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9390: LD_EXP 26
9394: PPUSH
9395: LD_STRING DH-Arrive-2
9397: PPUSH
9398: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9402: LD_EXP 36
9406: PPUSH
9407: LD_STRING DA-Arrive-3
9409: PPUSH
9410: CALL_OW 88
// end ;
9414: LD_VAR 0 1
9418: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9419: LD_EXP 3
9423: IFFALSE 10865
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
// begin DialogueOn ;
9434: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9438: LD_EXP 26
9442: PPUSH
9443: LD_STRING DH-base-1
9445: PPUSH
9446: CALL_OW 88
// if Markov then
9450: LD_EXP 33
9454: IFFALSE 9506
// begin Say ( Markov , DMar-base-2 ) ;
9456: LD_EXP 33
9460: PPUSH
9461: LD_STRING DMar-base-2
9463: PPUSH
9464: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9468: LD_EXP 33
9472: PPUSH
9473: LD_STRING DMar-base-3
9475: PPUSH
9476: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9480: LD_EXP 26
9484: PPUSH
9485: LD_STRING DH-base-4
9487: PPUSH
9488: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9492: LD_EXP 33
9496: PPUSH
9497: LD_STRING DMar-base-5
9499: PPUSH
9500: CALL_OW 88
// end else
9504: GO 9583
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9506: LD_EXP 38
9510: PPUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 72
9525: PUSH
9526: LD_INT 1
9528: ARRAY
9529: PPUSH
9530: LD_STRING DArm-base-a-2
9532: PPUSH
9533: CALL_OW 88
9537: NOT
9538: IFFALSE 9571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9540: LD_EXP 38
9544: PPUSH
9545: LD_INT 26
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 72
9559: PUSH
9560: LD_INT 1
9562: ARRAY
9563: PPUSH
9564: LD_STRING DArf-base-a-2
9566: PPUSH
9567: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9571: LD_EXP 26
9575: PPUSH
9576: LD_STRING DH-base-a-3
9578: PPUSH
9579: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9583: LD_EXP 36
9587: PPUSH
9588: LD_STRING DA-base-6
9590: PPUSH
9591: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9595: LD_EXP 36
9599: PPUSH
9600: LD_STRING DA-base-7
9602: PPUSH
9603: CALL_OW 88
// DialogueOff ;
9607: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9611: LD_STRING Flamethrower
9613: PPUSH
9614: CALL_OW 337
// wait ( 2 2$00 ) ;
9618: LD_INT 4200
9620: PPUSH
9621: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9625: LD_EXP 35
9629: PUSH
9630: LD_EXP 28
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PPUSH
9639: LD_INT 203
9641: PPUSH
9642: LD_INT 37
9644: PPUSH
9645: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9649: LD_INT 22
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 92
9661: PUSH
9662: LD_INT 203
9664: PUSH
9665: LD_INT 37
9667: PUSH
9668: LD_INT 10
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: NOT
9686: IFFALSE 9726
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9688: LD_EXP 35
9692: PUSH
9693: LD_EXP 28
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: LD_EXP 26
9706: PPUSH
9707: CALL_OW 250
9711: PPUSH
9712: LD_EXP 26
9716: PPUSH
9717: CALL_OW 251
9721: PPUSH
9722: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9726: LD_INT 35
9728: PPUSH
9729: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9733: LD_INT 2
9735: PPUSH
9736: LD_EXP 35
9740: PPUSH
9741: CALL_OW 292
9745: PUSH
9746: LD_EXP 35
9750: PPUSH
9751: LD_EXP 26
9755: PPUSH
9756: CALL_OW 296
9760: PUSH
9761: LD_INT 8
9763: LESS
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 21
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 69
9798: PPUSH
9799: LD_EXP 35
9803: PPUSH
9804: CALL_OW 74
9808: PPUSH
9809: CALL_OW 296
9813: PUSH
9814: LD_INT 7
9816: LESS
9817: OR
9818: AND
9819: PUSH
9820: LD_EXP 35
9824: PPUSH
9825: LD_INT 10
9827: PPUSH
9828: CALL_OW 308
9832: NOT
9833: AND
9834: IFFALSE 9726
// InGameOn ;
9836: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9840: LD_EXP 35
9844: PPUSH
9845: CALL_OW 87
// if IsInUnit ( Heike ) then
9849: LD_EXP 26
9853: PPUSH
9854: CALL_OW 310
9858: IFFALSE 9869
// ComExitBuilding ( Heike ) ;
9860: LD_EXP 26
9864: PPUSH
9865: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9869: LD_EXP 35
9873: PUSH
9874: LD_EXP 28
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: LD_EXP 26
9887: PPUSH
9888: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9892: LD_EXP 26
9896: PPUSH
9897: LD_EXP 35
9901: PPUSH
9902: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9906: LD_INT 22
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 91
9918: PUSH
9919: LD_EXP 35
9923: PUSH
9924: LD_INT 10
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 21
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 69
9951: IFFALSE 9977
// begin Say ( Kurt , DKs-scout-1 ) ;
9953: LD_EXP 35
9957: PPUSH
9958: LD_STRING DKs-scout-1
9960: PPUSH
9961: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9965: LD_EXP 26
9969: PPUSH
9970: LD_STRING DH-scout-2
9972: PPUSH
9973: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9977: LD_EXP 26
9981: PPUSH
9982: CALL_OW 85
// if IsInUnit ( Heike ) then
9986: LD_EXP 26
9990: PPUSH
9991: CALL_OW 310
9995: IFFALSE 10006
// ComExit ( Heike ) ;
9997: LD_EXP 26
10001: PPUSH
10002: CALL 75689 0 1
// repeat wait ( 0 0$1 ) ;
10006: LD_INT 35
10008: PPUSH
10009: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10013: LD_EXP 26
10017: PPUSH
10018: LD_EXP 35
10022: PPUSH
10023: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10027: LD_EXP 26
10031: PPUSH
10032: LD_EXP 35
10036: PPUSH
10037: CALL_OW 296
10041: PUSH
10042: LD_INT 6
10044: LESS
10045: IFFALSE 10006
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10047: LD_EXP 35
10051: PUSH
10052: LD_EXP 28
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: LD_EXP 26
10065: PPUSH
10066: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10070: LD_EXP 35
10074: PPUSH
10075: LD_STRING DKs-scout-3
10077: PPUSH
10078: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10082: LD_EXP 31
10086: PUSH
10087: LD_EXP 31
10091: PPUSH
10092: LD_EXP 35
10096: PPUSH
10097: CALL_OW 296
10101: PUSH
10102: LD_INT 15
10104: LESS
10105: AND
10106: IFFALSE 10329
// begin p := 1 ;
10108: LD_ADDR_VAR 0 4
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10116: LD_EXP 31
10120: PPUSH
10121: CALL_OW 310
10125: IFFALSE 10136
// ComExit ( Kaia ) ;
10127: LD_EXP 31
10131: PPUSH
10132: CALL 75689 0 1
// wait ( 0 0$1 ) ;
10136: LD_INT 35
10138: PPUSH
10139: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10143: LD_EXP 31
10147: PPUSH
10148: LD_EXP 35
10152: PPUSH
10153: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10157: LD_INT 35
10159: PPUSH
10160: CALL_OW 67
// p := Inc ( p ) ;
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL 76652 0 1
10178: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10179: LD_EXP 31
10183: PPUSH
10184: LD_EXP 35
10188: PPUSH
10189: CALL_OW 296
10193: PUSH
10194: LD_INT 6
10196: LESS
10197: PUSH
10198: LD_VAR 0 4
10202: PUSH
10203: LD_INT 12
10205: GREATER
10206: OR
10207: IFFALSE 10157
// ComTurnUnit ( Kaia , Kurt ) ;
10209: LD_EXP 31
10213: PPUSH
10214: LD_EXP 35
10218: PPUSH
10219: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10223: LD_EXP 31
10227: PPUSH
10228: LD_STRING DK-scout-4
10230: PPUSH
10231: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10235: LD_EXP 35
10239: PPUSH
10240: LD_EXP 31
10244: PPUSH
10245: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10249: LD_EXP 35
10253: PPUSH
10254: LD_STRING DKs-scout-5
10256: PPUSH
10257: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10261: LD_EXP 31
10265: PPUSH
10266: LD_STRING DK-scout-6
10268: PPUSH
10269: CALL_OW 88
// if Mike then
10273: LD_EXP 28
10277: IFFALSE 10329
// begin Say ( Mike , DM-scout-7 ) ;
10279: LD_EXP 28
10283: PPUSH
10284: LD_STRING DM-scout-7
10286: PPUSH
10287: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10291: LD_EXP 31
10295: PPUSH
10296: LD_EXP 28
10300: PPUSH
10301: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10305: LD_EXP 31
10309: PPUSH
10310: LD_STRING DK-scout-8
10312: PPUSH
10313: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10317: LD_EXP 28
10321: PPUSH
10322: LD_STRING DM-scout-9
10324: PPUSH
10325: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10329: LD_INT 184
10331: PPUSH
10332: LD_INT 100
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: LD_INT 12
10340: NEG
10341: PPUSH
10342: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10346: LD_INT 184
10348: PPUSH
10349: LD_INT 100
10351: PPUSH
10352: LD_INT 2
10354: PPUSH
10355: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10359: LD_INT 184
10361: PPUSH
10362: LD_INT 100
10364: PPUSH
10365: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10369: LD_EXP 35
10373: PPUSH
10374: LD_STRING DKs-scout-10
10376: PPUSH
10377: CALL_OW 88
// wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10388: LD_INT 144
10390: PPUSH
10391: LD_INT 65
10393: PPUSH
10394: LD_INT 2
10396: PPUSH
10397: LD_INT 12
10399: NEG
10400: PPUSH
10401: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10405: LD_INT 144
10407: PPUSH
10408: LD_INT 65
10410: PPUSH
10411: LD_INT 2
10413: PPUSH
10414: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10418: LD_INT 144
10420: PPUSH
10421: LD_INT 65
10423: PPUSH
10424: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10428: LD_EXP 35
10432: PPUSH
10433: LD_STRING DKs-scout-11
10435: PPUSH
10436: CALL_OW 88
// wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10447: LD_EXP 35
10451: PPUSH
10452: CALL_OW 87
// if Mike and not Givi then
10456: LD_EXP 28
10460: PUSH
10461: LD_EXP 27
10465: NOT
10466: AND
10467: IFFALSE 10493
// begin Say ( Mike , DM-scout-a-1 ) ;
10469: LD_EXP 28
10473: PPUSH
10474: LD_STRING DM-scout-a-1
10476: PPUSH
10477: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10481: LD_EXP 26
10485: PPUSH
10486: LD_STRING DH-scout-a-2
10488: PPUSH
10489: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10493: LD_EXP 35
10497: PUSH
10498: LD_EXP 28
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: LD_INT 2
10509: PPUSH
10510: CALL_OW 235
// InGameOff ;
10514: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10518: LD_STRING Hill
10520: PPUSH
10521: CALL_OW 337
// Hint ( BunkerHill ) ;
10525: LD_STRING BunkerHill
10527: PPUSH
10528: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10532: LD_INT 20
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 424
// allowToPatrol := true ;
10542: LD_ADDR_EXP 12
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10550: LD_INT 3150
10552: PPUSH
10553: CALL_OW 67
// InitHc ;
10557: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10561: LD_ADDR_VAR 0 1
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_INT 3
10573: PUSH
10574: LD_INT 3
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: LD_INT 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_OWVAR 67
10593: ARRAY
10594: PUSH
10595: FOR_TO
10596: IFFALSE 10863
// begin uc_side := 2 ;
10598: LD_ADDR_OWVAR 20
10602: PUSH
10603: LD_INT 2
10605: ST_TO_ADDR
// uc_nation := 2 ;
10606: LD_ADDR_OWVAR 21
10610: PUSH
10611: LD_INT 2
10613: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10614: LD_INT 0
10616: PPUSH
10617: LD_INT 1
10619: PUSH
10620: LD_INT 3
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: LD_VAR 0 1
10635: PUSH
10636: LD_INT 3
10638: MOD
10639: PUSH
10640: LD_INT 1
10642: PLUS
10643: ARRAY
10644: PPUSH
10645: LD_INT 3
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: LD_OWVAR 67
10667: ARRAY
10668: PPUSH
10669: CALL_OW 380
// un := CreateHuman ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: CALL_OW 44
10682: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10683: LD_ADDR_EXP 38
10687: PUSH
10688: LD_EXP 38
10692: PUSH
10693: LD_VAR 0 2
10697: UNION
10698: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10699: LD_INT 2
10701: PPUSH
10702: LD_INT 2
10704: PPUSH
10705: LD_INT 13
10707: PPUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_VAR 0 1
10722: PUSH
10723: LD_INT 2
10725: MOD
10726: PUSH
10727: LD_INT 1
10729: PLUS
10730: ARRAY
10731: PPUSH
10732: LD_INT 1
10734: PPUSH
10735: LD_INT 27
10737: PUSH
10738: LD_INT 25
10740: PUSH
10741: LD_INT 27
10743: PUSH
10744: LD_INT 23
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: PUSH
10757: LD_OWVAR 67
10761: PUSH
10762: LD_INT 0
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 12
10772: PLUS
10773: ARRAY
10774: PPUSH
10775: LD_INT 77
10777: PPUSH
10778: CALL 386 0 7
// veh := CreateVehicle ;
10782: LD_ADDR_VAR 0 3
10786: PUSH
10787: CALL_OW 45
10791: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 2
10799: PPUSH
10800: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 178
10811: PPUSH
10812: LD_INT 2
10814: PPUSH
10815: LD_INT 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10825: LD_VAR 0 2
10829: PPUSH
10830: LD_VAR 0 3
10834: PPUSH
10835: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 183
10846: PPUSH
10847: LD_INT 11
10849: PPUSH
10850: CALL_OW 111
// wait ( 0 0$2 ) ;
10854: LD_INT 70
10856: PPUSH
10857: CALL_OW 67
// end ;
10861: GO 10595
10863: POP
10864: POP
// end ;
10865: PPOPN 4
10867: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10868: LD_EXP 4
10872: PUSH
10873: LD_EXP 36
10877: PPUSH
10878: CALL_OW 302
10882: AND
10883: IFFALSE 10932
10885: GO 10887
10887: DISABLE
// begin DialogueOn ;
10888: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10892: LD_EXP 36
10896: PPUSH
10897: LD_STRING DA-lab-1
10899: PPUSH
10900: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10904: LD_EXP 36
10908: PPUSH
10909: LD_STRING DA-lab-2
10911: PPUSH
10912: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10916: LD_EXP 26
10920: PPUSH
10921: LD_STRING DH-lab-3
10923: PPUSH
10924: CALL_OW 88
// DialogueOff ;
10928: CALL_OW 7
// end ;
10932: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10933: LD_INT 17
10935: PPUSH
10936: LD_INT 2
10938: PPUSH
10939: CALL_OW 321
10943: PUSH
10944: LD_INT 2
10946: EQUAL
10947: IFFALSE 11079
10949: GO 10951
10951: DISABLE
10952: LD_INT 0
10954: PPUSH
// begin DialogueOn ;
10955: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10959: LD_EXP 36
10963: PPUSH
10964: LD_STRING DA-Cam-1
10966: PPUSH
10967: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10971: LD_EXP 36
10975: PPUSH
10976: LD_STRING DA-Cam-2
10978: PPUSH
10979: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10983: LD_EXP 36
10987: PPUSH
10988: LD_STRING DA-Cam-3
10990: PPUSH
10991: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10995: LD_EXP 26
10999: PPUSH
11000: LD_STRING DH-Cam-4
11002: PPUSH
11003: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11007: LD_EXP 31
11011: PPUSH
11012: LD_STRING DK-Cam-5
11014: PPUSH
11015: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11019: LD_EXP 31
11023: PPUSH
11024: LD_STRING DK-Cam-6
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// Query ( Camera ) ;
11035: LD_STRING Camera
11037: PPUSH
11038: CALL_OW 97
// hiddenCameraAllowed := true ;
11042: LD_ADDR_EXP 5
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// for i in camAreas do
11050: LD_ADDR_VAR 0 1
11054: PUSH
11055: LD_EXP 8
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11077
// SetAreaMapShow ( i , 1 ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 424
11075: GO 11060
11077: POP
11078: POP
// end ;
11079: PPOPN 1
11081: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11082: LD_EXP 8
11086: NOT
11087: PUSH
11088: LD_EXP 5
11092: AND
11093: IFFALSE 11191
11095: GO 11097
11097: DISABLE
11098: LD_INT 0
11100: PPUSH
// begin stop_talking := true ;
11101: LD_ADDR_OWVAR 56
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_INT 22
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 21
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 23
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11174
// AddExperience ( i , 2 , 450 ) ;
11157: LD_VAR 0 1
11161: PPUSH
11162: LD_INT 2
11164: PPUSH
11165: LD_INT 450
11167: PPUSH
11168: CALL_OW 492
11172: GO 11154
11174: POP
11175: POP
// stop_talking := false ;
11176: LD_ADDR_OWVAR 56
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11184: LD_STRING ACH_CAMERA
11186: PPUSH
11187: CALL_OW 543
// end ;
11191: PPOPN 1
11193: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11194: LD_EXP 9
11198: PUSH
11199: LD_EXP 11
11203: NOT
11204: AND
11205: IFFALSE 11264
11207: GO 11209
11209: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11210: LD_EXP 9
11214: PPUSH
11215: CALL_OW 250
11219: PPUSH
11220: LD_EXP 9
11224: PPUSH
11225: CALL_OW 251
11229: PPUSH
11230: LD_INT 2
11232: PPUSH
11233: LD_INT 6
11235: NEG
11236: PPUSH
11237: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11241: LD_EXP 9
11245: PPUSH
11246: CALL_OW 87
// wait ( 0 0$1 ) ;
11250: LD_INT 35
11252: PPUSH
11253: CALL_OW 67
// YouLost ( Spotted ) ;
11257: LD_STRING Spotted
11259: PPUSH
11260: CALL_OW 104
// end ;
11264: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11265: LD_INT 3
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PPUSH
11275: LD_INT 2
11277: PPUSH
11278: LD_EXP 48
11282: PPUSH
11283: CALL 1050 0 3
11287: IFFALSE 11320
11289: GO 11291
11291: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11292: LD_ADDR_EXP 9
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: LD_INT 6
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: LD_INT 2
11309: PPUSH
11310: LD_EXP 48
11314: PPUSH
11315: CALL 1050 0 3
11319: ST_TO_ADDR
11320: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11321: LD_INT 22
11323: PUSH
11324: LD_INT 6
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 30
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: LD_INT 24
11346: PUSH
11347: LD_INT 1000
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: IFFALSE 11428
11369: GO 11371
11371: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11372: LD_ADDR_EXP 9
11376: PUSH
11377: LD_INT 22
11379: PUSH
11380: LD_INT 6
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: LD_INT 24
11402: PUSH
11403: LD_INT 1000
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PUSH
11424: LD_INT 1
11426: ARRAY
11427: ST_TO_ADDR
11428: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11429: LD_EXP 9
11433: PUSH
11434: LD_INT 21
11436: PPUSH
11437: LD_INT 21
11439: PUSH
11440: LD_INT 3
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 3
11449: PUSH
11450: LD_INT 24
11452: PUSH
11453: LD_INT 1000
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PPUSH
11468: CALL_OW 70
11472: AND
11473: IFFALSE 11712
11475: GO 11477
11477: DISABLE
11478: LD_INT 0
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11484: LD_ADDR_VAR 0 4
11488: PUSH
11489: LD_EXP 43
11493: PUSH
11494: LD_EXP 45
11498: PUSH
11499: LD_EXP 46
11503: UNION
11504: PPUSH
11505: LD_INT 3
11507: PUSH
11508: LD_INT 25
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PPUSH
11522: CALL_OW 72
11526: UNION
11527: ST_TO_ADDR
// for i in noncombat do
11528: LD_ADDR_VAR 0 1
11532: PUSH
11533: LD_VAR 0 4
11537: PUSH
11538: FOR_IN
11539: IFFALSE 11635
// begin if IsInUnit ( i ) then
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 310
11550: IFFALSE 11561
// ComExitBuilding ( i ) ;
11552: LD_VAR 0 1
11556: PPUSH
11557: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11561: LD_VAR 0 1
11565: PPUSH
11566: LD_INT 114
11568: PPUSH
11569: LD_INT 97
11571: PPUSH
11572: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11576: LD_VAR 0 1
11580: PPUSH
11581: LD_INT 99
11583: PPUSH
11584: LD_INT 128
11586: PPUSH
11587: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11591: LD_VAR 0 1
11595: PPUSH
11596: LD_INT 91
11598: PPUSH
11599: LD_INT 145
11601: PPUSH
11602: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11606: LD_VAR 0 1
11610: PPUSH
11611: LD_INT 82
11613: PPUSH
11614: LD_INT 153
11616: PPUSH
11617: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11621: LD_VAR 0 1
11625: PPUSH
11626: LD_INT 16
11628: PPUSH
11629: CALL_OW 173
// end ;
11633: GO 11538
11635: POP
11636: POP
// if not allowHeikeAttack then
11637: LD_EXP 11
11641: NOT
11642: IFFALSE 11646
// exit ;
11644: GO 11712
// wait ( 0 0$05 ) ;
11646: LD_INT 175
11648: PPUSH
11649: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11653: LD_EXP 41
11657: PPUSH
11658: LD_STRING D9a-Kur-1
11660: PPUSH
11661: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11665: LD_EXP 44
11669: PPUSH
11670: LD_STRING D9a-Bur-1
11672: PPUSH
11673: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11677: LD_EXP 41
11681: PPUSH
11682: LD_STRING D9a-Kur-2
11684: PPUSH
11685: CALL_OW 94
// omicronFall := true ;
11689: LD_ADDR_EXP 13
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11697: LD_INT 105
11699: PPUSH
11700: CALL_OW 67
// retreatFromOmicron := true ;
11704: LD_ADDR_EXP 20
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// end ;
11712: PPOPN 4
11714: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11715: LD_INT 16
11717: PPUSH
11718: LD_INT 3
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_INT 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 23
11737: PUSH
11738: LD_INT 3
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 70
11753: IFFALSE 11836
11755: GO 11757
11757: DISABLE
11758: LD_INT 0
11760: PPUSH
// begin enable ;
11761: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11762: LD_ADDR_VAR 0 1
11766: PUSH
11767: LD_INT 16
11769: PPUSH
11770: LD_INT 3
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 3
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 70
11805: PUSH
11806: FOR_IN
11807: IFFALSE 11834
// begin escapeCounter := escapeCounter + 1 ;
11809: LD_ADDR_EXP 19
11813: PUSH
11814: LD_EXP 19
11818: PUSH
11819: LD_INT 1
11821: PLUS
11822: ST_TO_ADDR
// RemoveUnit ( i ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: CALL_OW 64
// end ;
11832: GO 11806
11834: POP
11835: POP
// end ;
11836: PPOPN 1
11838: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11839: LD_OWVAR 1
11843: PUSH
11844: LD_INT 13650
11846: PUSH
11847: LD_INT 0
11849: PPUSH
11850: LD_INT 3150
11852: PPUSH
11853: CALL_OW 12
11857: PLUS
11858: GREATEREQUAL
11859: IFFALSE 11868
11861: GO 11863
11863: DISABLE
// SmallAmericanReinforcements ;
11864: CALL 7141 0 0
11868: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11869: LD_OWVAR 1
11873: PUSH
11874: LD_INT 31500
11876: PUSH
11877: LD_INT 29400
11879: PUSH
11880: LD_INT 27300
11882: PUSH
11883: LD_INT 25200
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: LD_OWVAR 67
11896: ARRAY
11897: GREATEREQUAL
11898: IFFALSE 11963
11900: GO 11902
11902: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11903: LD_EXP 49
11907: PPUSH
11908: LD_INT 21
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 72
11922: PPUSH
11923: LD_INT 62
11925: PPUSH
11926: LD_INT 22
11928: PPUSH
11929: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11933: LD_EXP 50
11937: PPUSH
11938: LD_INT 69
11940: PPUSH
11941: LD_INT 27
11943: PPUSH
11944: CALL_OW 111
// wait ( 1 1$00 ) ;
11948: LD_INT 2100
11950: PPUSH
11951: CALL_OW 67
// startAttackOnOmicron := true ;
11955: LD_ADDR_EXP 6
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// end ;
11963: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11964: LD_EXP 22
11968: PUSH
11969: LD_INT 0
11971: EQUAL
11972: IFFALSE 14022
11974: GO 11976
11976: DISABLE
11977: LD_INT 0
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
11985: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11986: LD_INT 5
11988: PPUSH
11989: LD_INT 2
11991: PPUSH
11992: CALL_OW 343
// PrepareOmarForces ;
11996: CALL 1652 0 0
// wait ( 0 0$03 ) ;
12000: LD_INT 105
12002: PPUSH
12003: CALL_OW 67
// allowHeikeAttack := true ;
12007: LD_ADDR_EXP 11
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// activeGrishkoAI := false ;
12015: LD_ADDR_EXP 10
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12023: LD_INT 20
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 424
// if not hillBase then
12033: LD_EXP 15
12037: NOT
12038: IFFALSE 12047
// ChangeMissionObjectives ( HillDone ) ;
12040: LD_STRING HillDone
12042: PPUSH
12043: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12047: LD_EXP 34
12051: PPUSH
12052: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12056: LD_ADDR_VAR 0 1
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_INT 2
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: PUSH
12090: FOR_IN
12091: IFFALSE 12115
// if HasTask ( i ) then
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 314
12102: IFFALSE 12113
// ComHold ( i ) ;
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 140
12113: GO 12090
12115: POP
12116: POP
// DialogueOn ;
12117: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12121: LD_EXP 34
12125: PPUSH
12126: LD_STRING DO-assault-1
12128: PPUSH
12129: CALL_OW 94
// DialogueOff ;
12133: CALL_OW 7
// game_speed := 4 ;
12137: LD_ADDR_OWVAR 65
12141: PUSH
12142: LD_INT 4
12144: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12145: LD_ADDR_VAR 0 1
12149: PUSH
12150: LD_EXP 47
12154: PPUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 54
12160: PUSH
12161: EMPTY
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12193
// ComMoveXY ( i , 226 , 114 ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_INT 226
12183: PPUSH
12184: LD_INT 114
12186: PPUSH
12187: CALL_OW 111
12191: GO 12173
12193: POP
12194: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12195: LD_EXP 42
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 6
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 4
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PPUSH
12224: CALL_OW 69
12228: PPUSH
12229: LD_EXP 42
12233: PPUSH
12234: CALL_OW 74
12238: PPUSH
12239: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12243: LD_STRING Attack
12245: PPUSH
12246: CALL_OW 337
// music_class := music_combat ;
12250: LD_ADDR_OWVAR 72
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// music_nat := 4 ;
12258: LD_ADDR_OWVAR 71
12262: PUSH
12263: LD_INT 4
12265: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12266: LD_INT 5
12268: PPUSH
12269: LD_EXP 42
12273: PPUSH
12274: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12278: LD_INT 6
12280: PPUSH
12281: LD_EXP 39
12285: PPUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 1
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 72
12300: PUSH
12301: LD_INT 4
12303: ARRAY
12304: PPUSH
12305: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: LD_EXP 39
12318: PPUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 4
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PUSH
12341: FOR_IN
12342: IFFALSE 12361
// ComAgressiveMove ( i , 221 , 110 ) ;
12344: LD_VAR 0 1
12348: PPUSH
12349: LD_INT 221
12351: PPUSH
12352: LD_INT 110
12354: PPUSH
12355: CALL_OW 114
12359: GO 12341
12361: POP
12362: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12363: LD_EXP 39
12367: PPUSH
12368: LD_INT 25
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: PPUSH
12383: LD_INT 214
12385: PPUSH
12386: LD_INT 124
12388: PPUSH
12389: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12393: LD_EXP 39
12397: PPUSH
12398: LD_INT 25
12400: PUSH
12401: LD_INT 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 72
12412: PUSH
12413: LD_INT 4
12415: ARRAY
12416: PPUSH
12417: LD_INT 214
12419: PPUSH
12420: LD_INT 114
12422: PPUSH
12423: LD_INT 0
12425: PPUSH
12426: CALL_OW 132
// if IsOk ( Grishko ) then
12430: LD_EXP 42
12434: PPUSH
12435: CALL_OW 302
12439: IFFALSE 12465
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12441: LD_EXP 42
12445: PPUSH
12446: LD_STRING D9-Gri-1
12448: PPUSH
12449: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12453: LD_EXP 41
12457: PPUSH
12458: LD_STRING D9-Kur-1
12460: PPUSH
12461: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12465: LD_INT 35
12467: PPUSH
12468: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_INT 233
12479: PPUSH
12480: LD_INT 130
12482: PPUSH
12483: CALL_OW 114
// if IsOk ( Grishko ) then
12487: LD_EXP 42
12491: PPUSH
12492: CALL_OW 302
12496: IFFALSE 12522
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12498: LD_EXP 42
12502: PPUSH
12503: LD_STRING D9-Gri-2
12505: PPUSH
12506: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12510: LD_EXP 41
12514: PPUSH
12515: LD_STRING D9-Kur-2
12517: PPUSH
12518: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12522: LD_EXP 42
12526: PPUSH
12527: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12531: LD_EXP 42
12535: PPUSH
12536: LD_INT 211
12538: PPUSH
12539: LD_INT 104
12541: PPUSH
12542: CALL_OW 171
// AddComHold ( Grishko ) ;
12546: LD_EXP 42
12550: PPUSH
12551: CALL_OW 200
// repeat wait ( 3 ) ;
12555: LD_INT 3
12557: PPUSH
12558: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12562: LD_EXP 42
12566: PPUSH
12567: CALL_OW 310
12571: NOT
12572: IFFALSE 12555
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12574: LD_EXP 39
12578: PPUSH
12579: LD_INT 34
12581: PUSH
12582: LD_INT 26
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 72
12593: PPUSH
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12603: LD_EXP 39
12607: PPUSH
12608: LD_INT 34
12610: PUSH
12611: LD_INT 26
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PPUSH
12618: CALL_OW 72
12622: PPUSH
12623: LD_INT 215
12625: PPUSH
12626: LD_INT 106
12628: PPUSH
12629: CALL_OW 174
// repeat wait ( 3 ) ;
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12640: LD_EXP 42
12644: PPUSH
12645: CALL_OW 256
12649: PUSH
12650: LD_INT 1000
12652: LESS
12653: IFFALSE 12633
// NormalAttack ( 5 , Grishko ) ;
12655: LD_INT 5
12657: PPUSH
12658: LD_EXP 42
12662: PPUSH
12663: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12667: LD_INT 6
12669: PPUSH
12670: LD_EXP 39
12674: PPUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 72
12689: PUSH
12690: LD_INT 4
12692: ARRAY
12693: PPUSH
12694: CALL_OW 472
// if IsOk ( Grishko ) then
12698: LD_EXP 42
12702: PPUSH
12703: CALL_OW 302
12707: IFFALSE 12733
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12709: LD_EXP 42
12713: PPUSH
12714: LD_STRING D9-Gri-3
12716: PPUSH
12717: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12721: LD_EXP 41
12725: PPUSH
12726: LD_STRING D9-Kur-3
12728: PPUSH
12729: CALL_OW 94
// end ; music_class := music_auto ;
12733: LD_ADDR_OWVAR 72
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// music_nat := music_auto ;
12741: LD_ADDR_OWVAR 71
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// for i in omarSquad do
12749: LD_ADDR_VAR 0 1
12753: PUSH
12754: LD_EXP 39
12758: PUSH
12759: FOR_IN
12760: IFFALSE 12902
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12762: LD_VAR 0 1
12766: PPUSH
12767: CALL_OW 247
12771: PUSH
12772: LD_INT 2
12774: EQUAL
12775: PUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 256
12785: PUSH
12786: LD_INT 1000
12788: LESS
12789: AND
12790: IFFALSE 12856
// begin driver := IsDrivenBy ( i ) ;
12792: LD_ADDR_VAR 0 2
12796: PUSH
12797: LD_VAR 0 1
12801: PPUSH
12802: CALL_OW 311
12806: ST_TO_ADDR
// veh := i ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: LD_VAR 0 1
12816: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12826: LD_VAR 0 2
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12840: LD_VAR 0 2
12844: PPUSH
12845: LD_VAR 0 3
12849: PPUSH
12850: CALL_OW 180
// end else
12854: GO 12900
// if GetLives ( i ) < 500 then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 256
12865: PUSH
12866: LD_INT 500
12868: LESS
12869: IFFALSE 12900
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12871: LD_EXP 39
12875: PPUSH
12876: LD_INT 25
12878: PUSH
12879: LD_INT 4
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 72
12890: PPUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 188
// end ; end ;
12900: GO 12759
12902: POP
12903: POP
// repeat wait ( 0 0$1 ) ;
12904: LD_INT 35
12906: PPUSH
12907: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12911: LD_EXP 39
12915: PPUSH
12916: LD_INT 3
12918: PUSH
12919: LD_INT 24
12921: PUSH
12922: LD_INT 1000
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 21
12935: PUSH
12936: LD_INT 2
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 72
12951: NOT
12952: PUSH
12953: LD_EXP 39
12957: PPUSH
12958: LD_INT 3
12960: PUSH
12961: LD_INT 24
12963: PUSH
12964: LD_INT 250
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 72
12979: NOT
12980: AND
12981: IFFALSE 12904
// wait ( 0 0$2 ) ;
12983: LD_INT 70
12985: PPUSH
12986: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12990: LD_ADDR_VAR 0 5
12994: PUSH
12995: LD_EXP 39
12999: PPUSH
13000: LD_INT 58
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: LD_INT 21
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 72
13024: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13025: LD_ADDR_VAR 0 6
13029: PUSH
13030: LD_EXP 39
13034: PPUSH
13035: LD_INT 25
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 3
13047: PUSH
13048: LD_INT 55
13050: PUSH
13051: EMPTY
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PPUSH
13062: CALL_OW 72
13066: ST_TO_ADDR
// for i := 1 to tmp do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: DOUBLE
13073: LD_INT 1
13075: DEC
13076: ST_TO_ADDR
13077: LD_VAR 0 5
13081: PUSH
13082: FOR_TO
13083: IFFALSE 13113
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13085: LD_VAR 0 6
13089: PUSH
13090: LD_VAR 0 1
13094: ARRAY
13095: PPUSH
13096: LD_VAR 0 5
13100: PUSH
13101: LD_VAR 0 1
13105: ARRAY
13106: PPUSH
13107: CALL_OW 120
13111: GO 13082
13113: POP
13114: POP
// wait ( 0 0$5 ) ;
13115: LD_INT 175
13117: PPUSH
13118: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13122: LD_EXP 39
13126: PPUSH
13127: LD_INT 199
13129: PPUSH
13130: LD_INT 141
13132: PPUSH
13133: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13137: LD_EXP 34
13141: PPUSH
13142: LD_INT 190
13144: PPUSH
13145: LD_INT 143
13147: PPUSH
13148: CALL_OW 114
// AddComHold ( Omar ) ;
13152: LD_EXP 34
13156: PPUSH
13157: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13161: LD_EXP 39
13165: PPUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 4
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 72
13198: PPUSH
13199: LD_INT 161
13201: PPUSH
13202: LD_INT 130
13204: PPUSH
13205: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13209: LD_EXP 39
13213: PPUSH
13214: LD_INT 25
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 72
13228: PPUSH
13229: LD_INT 163
13231: PPUSH
13232: LD_INT 122
13234: PPUSH
13235: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13239: LD_EXP 39
13243: PPUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 72
13258: PUSH
13259: LD_INT 4
13261: ARRAY
13262: PPUSH
13263: LD_INT 165
13265: PPUSH
13266: LD_INT 118
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13276: LD_EXP 39
13280: PPUSH
13281: LD_INT 25
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 72
13295: PUSH
13296: LD_INT 4
13298: ARRAY
13299: PPUSH
13300: LD_INT 159
13302: PPUSH
13303: LD_INT 116
13305: PPUSH
13306: LD_INT 0
13308: PPUSH
13309: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13313: LD_EXP 39
13317: PPUSH
13318: LD_INT 21
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PPUSH
13328: CALL_OW 72
13332: PPUSH
13333: LD_INT 169
13335: PPUSH
13336: LD_INT 114
13338: PPUSH
13339: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13343: LD_INT 35
13345: PPUSH
13346: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13350: LD_ADDR_VAR 0 5
13354: PUSH
13355: LD_EXP 39
13359: PPUSH
13360: LD_INT 25
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PPUSH
13370: CALL_OW 72
13374: ST_TO_ADDR
// for i in tmp do
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: LD_VAR 0 5
13384: PUSH
13385: FOR_IN
13386: IFFALSE 13483
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 256
13397: PUSH
13398: LD_INT 600
13400: LESS
13401: PUSH
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_INT 161
13409: PPUSH
13410: LD_INT 130
13412: PPUSH
13413: CALL_OW 297
13417: PUSH
13418: LD_INT 6
13420: GREATER
13421: AND
13422: IFFALSE 13439
// ComMoveXY ( i , 161 , 130 ) ;
13424: LD_VAR 0 1
13428: PPUSH
13429: LD_INT 161
13431: PPUSH
13432: LD_INT 130
13434: PPUSH
13435: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13439: LD_VAR 0 1
13443: PPUSH
13444: CALL_OW 256
13448: PUSH
13449: LD_INT 1000
13451: EQUAL
13452: PUSH
13453: LD_VAR 0 1
13457: PPUSH
13458: CALL_OW 314
13462: NOT
13463: AND
13464: IFFALSE 13481
// ComAgressiveMove ( i , 160 , 109 ) ;
13466: LD_VAR 0 1
13470: PPUSH
13471: LD_INT 160
13473: PPUSH
13474: LD_INT 109
13476: PPUSH
13477: CALL_OW 114
// end ;
13481: GO 13385
13483: POP
13484: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13485: LD_ADDR_VAR 0 5
13489: PUSH
13490: LD_EXP 39
13494: PPUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: ST_TO_ADDR
// for i in tmp do
13510: LD_ADDR_VAR 0 1
13514: PUSH
13515: LD_VAR 0 5
13519: PUSH
13520: FOR_IN
13521: IFFALSE 13787
// begin tmp2 := IsDrivenBy ( i ) ;
13523: LD_ADDR_VAR 0 6
13527: PUSH
13528: LD_VAR 0 1
13532: PPUSH
13533: CALL_OW 311
13537: ST_TO_ADDR
// if not tmp2 then
13538: LD_VAR 0 6
13542: NOT
13543: IFFALSE 13547
// continue ;
13545: GO 13520
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13547: LD_VAR 0 1
13551: PPUSH
13552: CALL_OW 256
13556: PUSH
13557: LD_INT 600
13559: GREATEREQUAL
13560: PUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 110
13570: PUSH
13571: LD_INT 1
13573: EQUAL
13574: AND
13575: IFFALSE 13589
// SetTag ( i , 0 ) ;
13577: LD_VAR 0 1
13581: PPUSH
13582: LD_INT 0
13584: PPUSH
13585: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 256
13598: PUSH
13599: LD_INT 600
13601: GREATEREQUAL
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: CALL_OW 110
13612: NOT
13613: AND
13614: IFFALSE 13640
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13616: LD_VAR 0 1
13620: PPUSH
13621: LD_VAR 0 7
13625: PPUSH
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 74
13635: PPUSH
13636: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 256
13649: PUSH
13650: LD_INT 600
13652: LESS
13653: PUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 110
13663: NOT
13664: AND
13665: IFFALSE 13694
// begin SetTag ( i , 1 ) ;
13667: LD_VAR 0 1
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13679: LD_VAR 0 1
13683: PPUSH
13684: LD_INT 202
13686: PPUSH
13687: LD_INT 150
13689: PPUSH
13690: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13694: LD_VAR 0 1
13698: PPUSH
13699: CALL_OW 110
13703: PUSH
13704: LD_INT 1
13706: EQUAL
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_INT 202
13715: PPUSH
13716: LD_INT 150
13718: PPUSH
13719: CALL_OW 297
13723: PUSH
13724: LD_INT 6
13726: LESS
13727: AND
13728: PUSH
13729: LD_VAR 0 6
13733: AND
13734: IFFALSE 13785
// begin ComExitVehicle ( tmp2 ) ;
13736: LD_VAR 0 6
13740: PPUSH
13741: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13759: LD_VAR 0 6
13763: PPUSH
13764: LD_INT 700
13766: PPUSH
13767: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13771: LD_VAR 0 6
13775: PPUSH
13776: LD_VAR 0 1
13780: PPUSH
13781: CALL_OW 180
// end ; end ;
13785: GO 13520
13787: POP
13788: POP
// until kirovDestroyed ;
13789: LD_EXP 16
13793: IFFALSE 13343
// repeat wait ( 0 0$1 ) ;
13795: LD_INT 35
13797: PPUSH
13798: CALL_OW 67
// for i in omarSquad union Omar do
13802: LD_ADDR_VAR 0 1
13806: PUSH
13807: LD_EXP 39
13811: PUSH
13812: LD_EXP 34
13816: UNION
13817: PUSH
13818: FOR_IN
13819: IFFALSE 13989
// if IsInArea ( i , southRoadArea ) then
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 15
13828: PPUSH
13829: CALL_OW 308
13833: IFFALSE 13846
// RemoveUnit ( i ) else
13835: LD_VAR 0 1
13839: PPUSH
13840: CALL_OW 64
13844: GO 13987
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 257
13855: PUSH
13856: LD_INT 3
13858: EQUAL
13859: PUSH
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 310
13869: NOT
13870: AND
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 24
13884: PUSH
13885: LD_INT 251
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 21
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 58
13904: PUSH
13905: EMPTY
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: AND
13919: IFFALSE 13972
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13921: LD_VAR 0 1
13925: PPUSH
13926: LD_INT 22
13928: PUSH
13929: LD_INT 5
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 58
13948: PUSH
13949: EMPTY
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: PPUSH
13957: CALL_OW 69
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: CALL_OW 120
13970: GO 13987
// ComMoveXY ( i , 208 , 162 ) ;
13972: LD_VAR 0 1
13976: PPUSH
13977: LD_INT 208
13979: PPUSH
13980: LD_INT 162
13982: PPUSH
13983: CALL_OW 111
// end ;
13987: GO 13818
13989: POP
13990: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13991: LD_INT 22
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 21
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: NOT
14020: IFFALSE 13795
// end ;
14022: PPOPN 7
14024: END
// every 0 0$1 trigger IsDead ( kirov ) do
14025: LD_INT 71
14027: PPUSH
14028: CALL_OW 301
14032: IFFALSE 14049
14034: GO 14036
14036: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14037: LD_EXP 26
14041: PPUSH
14042: LD_STRING DH-1-Kirov
14044: PPUSH
14045: CALL_OW 88
14049: END
// every 0 0$1 trigger See ( 2 , beria ) do
14050: LD_INT 2
14052: PPUSH
14053: LD_INT 106
14055: PPUSH
14056: CALL_OW 292
14060: IFFALSE 14077
14062: GO 14064
14064: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14065: LD_EXP 26
14069: PPUSH
14070: LD_STRING DH-1-Beria
14072: PPUSH
14073: CALL_OW 88
14077: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14078: LD_INT 2
14080: PPUSH
14081: LD_INT 112
14083: PPUSH
14084: CALL_OW 292
14088: IFFALSE 14355
14090: GO 14092
14092: DISABLE
// begin DialogueOn ;
14093: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14097: LD_INT 112
14099: PPUSH
14100: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14104: LD_EXP 26
14108: PPUSH
14109: LD_STRING DH-1-Kagan
14111: PPUSH
14112: CALL_OW 88
// if Kamil then
14116: LD_EXP 30
14120: IFFALSE 14158
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14122: LD_EXP 30
14126: PPUSH
14127: LD_STRING DKam-Kagan-2
14129: PPUSH
14130: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14134: LD_EXP 27
14138: PPUSH
14139: LD_STRING DG-Kagan-3
14141: PPUSH
14142: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14146: LD_EXP 27
14150: PPUSH
14151: LD_STRING DG-Kagan-4
14153: PPUSH
14154: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14158: LD_STRING KaganBase
14160: PPUSH
14161: CALL_OW 97
14165: PUSH
14166: LD_INT 1
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14269
14174: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14175: LD_EXP 26
14179: PPUSH
14180: LD_STRING DH-Kagan-5
14182: PPUSH
14183: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14187: LD_EXP 26
14191: PPUSH
14192: LD_STRING DH-Kagan-6
14194: PPUSH
14195: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14199: LD_EXP 37
14203: PPUSH
14204: LD_STRING DShar-Kagan-7
14206: PPUSH
14207: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14211: LD_EXP 26
14215: PPUSH
14216: LD_STRING DH-Kagan-8
14218: PPUSH
14219: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14223: LD_EXP 26
14227: PPUSH
14228: LD_STRING DH-Kagan-9
14230: PPUSH
14231: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14235: LD_EXP 37
14239: PPUSH
14240: LD_STRING DShar-Kagan-10
14242: PPUSH
14243: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14247: LD_EXP 26
14251: PPUSH
14252: LD_STRING DH-Kagan-11
14254: PPUSH
14255: CALL_OW 88
// kaganCaptured := true ;
14259: LD_ADDR_EXP 24
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// end ; 2 :
14267: GO 14351
14269: LD_INT 2
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14350
14277: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14278: LD_INT 22
14280: PUSH
14281: LD_INT 8
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 69
14292: PUSH
14293: LD_EXP 36
14297: AND
14298: IFFALSE 14312
// Say ( Heike , DH-Kagan-a-5 ) ;
14300: LD_EXP 26
14304: PPUSH
14305: LD_STRING DH-Kagan-a-5
14307: PPUSH
14308: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14312: LD_EXP 26
14316: PPUSH
14317: LD_STRING DH-Kagan-a-6
14319: PPUSH
14320: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14324: LD_EXP 26
14328: PPUSH
14329: LD_STRING DH-Kagan-a-7
14331: PPUSH
14332: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14336: LD_EXP 27
14340: PPUSH
14341: LD_STRING DG-Kagan-a-8
14343: PPUSH
14344: CALL_OW 88
// end ; end ;
14348: GO 14351
14350: POP
// DialogueOff ;
14351: CALL_OW 7
// end ;
14355: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14356: LD_EXP 18
14360: PUSH
14361: LD_INT 112
14363: PPUSH
14364: CALL_OW 255
14368: PUSH
14369: LD_INT 2
14371: EQUAL
14372: OR
14373: IFFALSE 14385
14375: GO 14377
14377: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14378: LD_STRING KaganDone
14380: PPUSH
14381: CALL_OW 337
14385: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14386: LD_EXP 6
14390: PUSH
14391: LD_EXP 49
14395: PPUSH
14396: LD_INT 95
14398: PUSH
14399: LD_INT 19
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PPUSH
14406: CALL_OW 72
14410: AND
14411: IFFALSE 14488
14413: GO 14415
14415: DISABLE
// begin DialogueOn ;
14416: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14420: LD_INT 63
14422: PPUSH
14423: LD_INT 32
14425: PPUSH
14426: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14430: LD_INT 63
14432: PPUSH
14433: LD_INT 32
14435: PPUSH
14436: LD_INT 2
14438: PPUSH
14439: LD_INT 12
14441: NEG
14442: PPUSH
14443: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14447: LD_EXP 26
14451: PPUSH
14452: LD_STRING DH-Omicron-1
14454: PPUSH
14455: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14459: LD_EXP 28
14463: PPUSH
14464: LD_STRING DM-Omicron-2
14466: PPUSH
14467: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14471: LD_INT 63
14473: PPUSH
14474: LD_INT 32
14476: PPUSH
14477: LD_INT 2
14479: PPUSH
14480: CALL_OW 331
// DialogueOff ;
14484: CALL_OW 7
// end ;
14488: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14489: LD_INT 2
14491: PPUSH
14492: LD_EXP 51
14496: PPUSH
14497: CALL_OW 292
14501: PUSH
14502: LD_EXP 51
14506: PPUSH
14507: CALL_OW 255
14511: PUSH
14512: LD_INT 2
14514: EQUAL
14515: OR
14516: PUSH
14517: LD_INT 106
14519: PPUSH
14520: CALL_OW 255
14524: PUSH
14525: LD_INT 2
14527: EQUAL
14528: OR
14529: PUSH
14530: LD_EXP 51
14534: PPUSH
14535: CALL_OW 302
14539: AND
14540: PUSH
14541: LD_EXP 26
14545: PPUSH
14546: CALL_OW 302
14550: AND
14551: PUSH
14552: LD_EXP 36
14556: PPUSH
14557: CALL_OW 302
14561: AND
14562: IFFALSE 15301
14564: GO 14566
14566: DISABLE
14567: LD_INT 0
14569: PPUSH
14570: PPUSH
14571: PPUSH
14572: PPUSH
14573: PPUSH
// begin DialogueOn ;
14574: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14578: LD_INT 111
14580: PPUSH
14581: LD_INT 90
14583: PPUSH
14584: LD_INT 2
14586: PPUSH
14587: LD_INT 6
14589: NEG
14590: PPUSH
14591: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14595: LD_INT 111
14597: PPUSH
14598: LD_INT 90
14600: PPUSH
14601: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14605: LD_EXP 36
14609: PPUSH
14610: LD_STRING DA-Cap-1
14612: PPUSH
14613: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14617: LD_EXP 26
14621: PPUSH
14622: LD_STRING DH-Cap-2
14624: PPUSH
14625: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14629: LD_INT 111
14631: PPUSH
14632: LD_INT 90
14634: PPUSH
14635: LD_INT 2
14637: PPUSH
14638: CALL_OW 331
// DialogueOff ;
14642: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14646: LD_INT 35
14648: PPUSH
14649: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14653: LD_EXP 17
14657: PUSH
14658: LD_INT 106
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 2
14668: EQUAL
14669: OR
14670: PUSH
14671: LD_EXP 51
14675: PPUSH
14676: CALL_OW 255
14680: PUSH
14681: LD_INT 2
14683: EQUAL
14684: OR
14685: PUSH
14686: LD_EXP 51
14690: PPUSH
14691: CALL_OW 302
14695: AND
14696: PUSH
14697: LD_EXP 36
14701: PPUSH
14702: CALL_OW 302
14706: AND
14707: PUSH
14708: LD_INT 2
14710: PPUSH
14711: CALL_OW 463
14715: NOT
14716: AND
14717: PUSH
14718: LD_INT 22
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 92
14740: PUSH
14741: LD_INT 110
14743: PUSH
14744: LD_INT 95
14746: PUSH
14747: LD_INT 12
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: PPUSH
14761: CALL_OW 69
14765: NOT
14766: AND
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 3
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 5
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 92
14790: PUSH
14791: LD_INT 110
14793: PUSH
14794: LD_INT 95
14796: PUSH
14797: LD_INT 12
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: NOT
14816: AND
14817: IFFALSE 14646
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_EXP 38
14828: PUSH
14829: LD_EXP 29
14833: PUSH
14834: LD_EXP 30
14838: PUSH
14839: LD_EXP 32
14843: PUSH
14844: LD_EXP 31
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: UNION
14855: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_VAR 0 2
14865: PPUSH
14866: LD_INT 50
14868: PUSH
14869: EMPTY
14870: LIST
14871: PPUSH
14872: CALL_OW 72
14876: ST_TO_ADDR
// if tmp < 2 then
14877: LD_VAR 0 2
14881: PUSH
14882: LD_INT 2
14884: LESS
14885: IFFALSE 14897
// q := 2 else
14887: LD_ADDR_VAR 0 4
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
14895: GO 14910
// q := Query ( LabCap ) ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_STRING LabCap
14904: PPUSH
14905: CALL_OW 97
14909: ST_TO_ADDR
// case q of 1 :
14910: LD_VAR 0 4
14914: PUSH
14915: LD_INT 1
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 15265
14923: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14924: LD_INT 2
14926: PPUSH
14927: LD_EXP 51
14931: PPUSH
14932: CALL_OW 471
// labCaptured := true ;
14936: LD_ADDR_EXP 21
14940: PUSH
14941: LD_INT 1
14943: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14944: LD_EXP 26
14948: PPUSH
14949: LD_STRING DH-Cap-a-1
14951: PPUSH
14952: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14956: LD_EXP 36
14960: PPUSH
14961: LD_STRING DA-Cap-a-2
14963: PPUSH
14964: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14968: LD_ADDR_VAR 0 5
14972: PUSH
14973: LD_EXP 36
14977: PUSH
14978: LD_INT -3
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT -2
14987: PUSH
14988: LD_INT -4
14990: PUSH
14991: LD_EXP 26
14995: PUSH
14996: LD_EXP 27
15000: PUSH
15001: LD_EXP 35
15005: PUSH
15006: LD_EXP 33
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: ADD
15019: PUSH
15020: LD_INT -3
15022: PUSH
15023: EMPTY
15024: LIST
15025: ADD
15026: PUSH
15027: LD_VAR 0 2
15031: ADD
15032: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_STRING Select two characters to go with Aviradze
15040: PPUSH
15041: LD_INT 2
15043: PPUSH
15044: LD_INT 2
15046: PPUSH
15047: LD_VAR 0 5
15051: PPUSH
15052: EMPTY
15053: PPUSH
15054: CALL_OW 42
15058: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15059: LD_EXP 51
15063: PPUSH
15064: LD_INT 8
15066: PPUSH
15067: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15071: LD_EXP 36
15075: PPUSH
15076: LD_INT 8
15078: PPUSH
15079: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15083: LD_ADDR_EXP 40
15087: PUSH
15088: LD_EXP 36
15092: PUSH
15093: EMPTY
15094: LIST
15095: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15096: LD_EXP 36
15100: PPUSH
15101: CALL_OW 310
15105: IFFALSE 15116
// ComExit ( Aviradze ) ;
15107: LD_EXP 36
15111: PPUSH
15112: CALL 75689 0 1
// wait ( 3 ) ;
15116: LD_INT 3
15118: PPUSH
15119: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15123: LD_EXP 36
15127: PPUSH
15128: LD_EXP 51
15132: PPUSH
15133: CALL_OW 120
// for i := 1 to 2 do
15137: LD_ADDR_VAR 0 1
15141: PUSH
15142: DOUBLE
15143: LD_INT 1
15145: DEC
15146: ST_TO_ADDR
15147: LD_INT 2
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15254
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15153: LD_ADDR_EXP 40
15157: PUSH
15158: LD_EXP 40
15162: PUSH
15163: LD_VAR 0 3
15167: PUSH
15168: LD_VAR 0 1
15172: ARRAY
15173: UNION
15174: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15175: LD_VAR 0 3
15179: PUSH
15180: LD_VAR 0 1
15184: ARRAY
15185: PPUSH
15186: LD_INT 8
15188: PPUSH
15189: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15193: LD_VAR 0 3
15197: PUSH
15198: LD_VAR 0 1
15202: ARRAY
15203: PPUSH
15204: CALL_OW 310
15208: IFFALSE 15225
// ComExit ( tmp2 [ i ] ) ;
15210: LD_VAR 0 3
15214: PUSH
15215: LD_VAR 0 1
15219: ARRAY
15220: PPUSH
15221: CALL 75689 0 1
// wait ( 3 ) ;
15225: LD_INT 3
15227: PPUSH
15228: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 1
15241: ARRAY
15242: PPUSH
15243: LD_EXP 51
15247: PPUSH
15248: CALL_OW 120
// end ;
15252: GO 15150
15254: POP
15255: POP
// SetAchievement ( ACH_LAB ) ;
15256: LD_STRING ACH_LAB
15258: PPUSH
15259: CALL_OW 543
// end ; 2 :
15263: GO 15301
15265: LD_INT 2
15267: DOUBLE
15268: EQUAL
15269: IFTRUE 15273
15271: GO 15300
15273: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15274: LD_EXP 26
15278: PPUSH
15279: LD_STRING DH-Cap-b-1
15281: PPUSH
15282: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15286: LD_EXP 36
15290: PPUSH
15291: LD_STRING DA-Cap-b-2
15293: PPUSH
15294: CALL_OW 88
// end ; end ;
15298: GO 15301
15300: POP
// end ;
15301: PPOPN 5
15303: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15304: LD_INT 10
15306: PPUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 31
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 70
15335: PUSH
15336: LD_INT 2
15338: GREATEREQUAL
15339: IFFALSE 15351
15341: GO 15343
15343: DISABLE
// SetAchievement ( ACH_KING ) ;
15344: LD_STRING ACH_KING
15346: PPUSH
15347: CALL_OW 543
15351: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15352: LD_EXP 11
15356: NOT
15357: PUSH
15358: LD_INT 10
15360: PPUSH
15361: LD_INT 22
15363: PUSH
15364: LD_INT 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 30
15376: PUSH
15377: LD_INT 31
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 70
15407: AND
15408: IFFALSE 15428
15410: GO 15412
15412: DISABLE
// begin hillBase := true ;
15413: LD_ADDR_EXP 15
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15421: LD_STRING HillDone
15423: PPUSH
15424: CALL_OW 337
// end ;
15428: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15429: LD_EXP 31
15433: PUSH
15434: LD_EXP 31
15438: PPUSH
15439: CALL_OW 256
15443: PUSH
15444: LD_INT 3
15446: LESS
15447: AND
15448: IFFALSE 15494
15450: GO 15452
15452: DISABLE
// begin DialogueOn ;
15453: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15457: LD_EXP 31
15461: PPUSH
15462: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15466: LD_EXP 31
15470: PPUSH
15471: LD_STRING DK-Kkilled-1
15473: PPUSH
15474: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15478: LD_EXP 26
15482: PPUSH
15483: LD_STRING DH-Kkilled-2
15485: PPUSH
15486: CALL_OW 88
// DialogueOff ;
15490: CALL_OW 7
// end ;
15494: END
// every 0 0$1 trigger kaiaKilledByRussian do
15495: LD_EXP 23
15499: IFFALSE 15516
15501: GO 15503
15503: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15504: LD_EXP 26
15508: PPUSH
15509: LD_STRING DH-Kkilled-3
15511: PPUSH
15512: CALL_OW 88
15516: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15517: LD_EXP 16
15521: PUSH
15522: LD_INT 106
15524: PPUSH
15525: CALL_OW 255
15529: PUSH
15530: LD_INT 2
15532: EQUAL
15533: PUSH
15534: LD_EXP 17
15538: OR
15539: AND
15540: PUSH
15541: LD_EXP 18
15545: PUSH
15546: LD_EXP 24
15550: PUSH
15551: LD_INT 112
15553: PPUSH
15554: CALL_OW 255
15558: PUSH
15559: LD_INT 2
15561: EQUAL
15562: AND
15563: OR
15564: AND
15565: IFFALSE 16805
15567: GO 15569
15569: DISABLE
15570: LD_INT 0
15572: PPUSH
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15577: LD_STRING GoToWest
15579: PPUSH
15580: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15584: LD_INT 17
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15594: LD_INT 35
15596: PPUSH
15597: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 17
15608: PPUSH
15609: LD_INT 22
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: LD_INT 58
15647: PUSH
15648: EMPTY
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 70
15672: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15673: LD_ADDR_VAR 0 3
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: LD_INT 55
15693: PUSH
15694: EMPTY
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 58
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: LIST
15750: PPUSH
15751: CALL_OW 69
15755: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15756: LD_VAR 0 2
15760: PUSH
15761: LD_INT 0
15763: PLUS
15764: PUSH
15765: LD_VAR 0 3
15769: PUSH
15770: LD_INT 0
15772: PLUS
15773: EQUAL
15774: IFFALSE 15594
// SaveCharacters ( Heike , 04_1_Heike ) ;
15776: LD_EXP 26
15780: PPUSH
15781: LD_STRING 04_1_Heike
15783: PPUSH
15784: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15788: LD_EXP 36
15792: PUSH
15793: LD_EXP 36
15797: PUSH
15798: LD_EXP 40
15802: IN
15803: NOT
15804: AND
15805: IFFALSE 15821
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15807: LD_EXP 36
15811: PPUSH
15812: LD_STRING 04_1_Aviradze
15814: PPUSH
15815: CALL_OW 38
15819: GO 15839
// if Aviradze then
15821: LD_EXP 36
15825: IFFALSE 15839
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15827: LD_EXP 36
15831: PPUSH
15832: LD_STRING 04_1_Aviradze_L
15834: PPUSH
15835: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15839: LD_EXP 29
15843: PUSH
15844: LD_EXP 29
15848: PUSH
15849: LD_EXP 40
15853: IN
15854: NOT
15855: AND
15856: IFFALSE 15872
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15858: LD_EXP 29
15862: PPUSH
15863: LD_STRING 04_1_Ibrahim
15865: PPUSH
15866: CALL_OW 38
15870: GO 15890
// if Ibrahim then
15872: LD_EXP 29
15876: IFFALSE 15890
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15878: LD_EXP 29
15882: PPUSH
15883: LD_STRING 04_1_Ibrahim_L
15885: PPUSH
15886: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15890: LD_EXP 30
15894: PUSH
15895: LD_EXP 30
15899: PUSH
15900: LD_EXP 40
15904: IN
15905: NOT
15906: AND
15907: IFFALSE 15923
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15909: LD_EXP 30
15913: PPUSH
15914: LD_STRING 04_1_Kamil
15916: PPUSH
15917: CALL_OW 38
15921: GO 15941
// if Kamil then
15923: LD_EXP 30
15927: IFFALSE 15941
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15929: LD_EXP 30
15933: PPUSH
15934: LD_STRING 04_1_Kamil_L
15936: PPUSH
15937: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15941: LD_EXP 32
15945: PUSH
15946: LD_EXP 32
15950: PUSH
15951: LD_EXP 40
15955: IN
15956: NOT
15957: AND
15958: IFFALSE 15974
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15960: LD_EXP 32
15964: PPUSH
15965: LD_STRING 04_1_Sophia
15967: PPUSH
15968: CALL_OW 38
15972: GO 15992
// if Sophia then
15974: LD_EXP 32
15978: IFFALSE 15992
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15980: LD_EXP 32
15984: PPUSH
15985: LD_STRING 04_1_Sophia_L
15987: PPUSH
15988: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15992: LD_EXP 31
15996: PUSH
15997: LD_EXP 31
16001: PUSH
16002: LD_EXP 40
16006: IN
16007: NOT
16008: AND
16009: IFFALSE 16025
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16011: LD_EXP 31
16015: PPUSH
16016: LD_STRING 04_1_Kaia
16018: PPUSH
16019: CALL_OW 38
16023: GO 16043
// if Kaia then
16025: LD_EXP 31
16029: IFFALSE 16043
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16031: LD_EXP 31
16035: PPUSH
16036: LD_STRING 04_1_Kaia_L
16038: PPUSH
16039: CALL_OW 38
// if Givi then
16043: LD_EXP 27
16047: IFFALSE 16061
// SaveCharacters ( Givi , 04_1_Givi ) ;
16049: LD_EXP 27
16053: PPUSH
16054: LD_STRING 04_1_Givi
16056: PPUSH
16057: CALL_OW 38
// if Mike then
16061: LD_EXP 28
16065: IFFALSE 16079
// SaveCharacters ( Mike , 04_1_Mike ) ;
16067: LD_EXP 28
16071: PPUSH
16072: LD_STRING 04_1_Mike
16074: PPUSH
16075: CALL_OW 38
// if Markov then
16079: LD_EXP 33
16083: IFFALSE 16097
// SaveCharacters ( Markov , 04_1_Markov ) ;
16085: LD_EXP 33
16089: PPUSH
16090: LD_STRING 04_1_Markov
16092: PPUSH
16093: CALL_OW 38
// if Kurt then
16097: LD_EXP 35
16101: IFFALSE 16122
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16103: LD_EXP 35
16107: PPUSH
16108: LD_STRING 04_1_Kurt
16110: PPUSH
16111: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16115: LD_STRING enableBioCharacter(BIO_KURT)
16117: PPUSH
16118: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16122: LD_EXP 38
16126: PUSH
16127: LD_EXP 40
16131: DIFF
16132: IFFALSE 16152
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16134: LD_EXP 38
16138: PUSH
16139: LD_EXP 40
16143: DIFF
16144: PPUSH
16145: LD_STRING 04_1_others
16147: PPUSH
16148: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16152: LD_EXP 40
16156: PUSH
16157: LD_EXP 38
16161: AND
16162: IFFALSE 16247
// begin tmp := [ ] ;
16164: LD_ADDR_VAR 0 2
16168: PUSH
16169: EMPTY
16170: ST_TO_ADDR
// for i in heikeSecondSquad do
16171: LD_ADDR_VAR 0 1
16175: PUSH
16176: LD_EXP 38
16180: PUSH
16181: FOR_IN
16182: IFFALSE 16227
// if i in aviradzeSquad then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_EXP 40
16193: IN
16194: IFFALSE 16225
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_VAR 0 2
16205: PPUSH
16206: LD_VAR 0 2
16210: PUSH
16211: LD_INT 1
16213: PLUS
16214: PPUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 1
16224: ST_TO_ADDR
16225: GO 16181
16227: POP
16228: POP
// if tmp then
16229: LD_VAR 0 2
16233: IFFALSE 16247
// SaveCharacters ( tmp , 04_1_others_L ) ;
16235: LD_VAR 0 2
16239: PPUSH
16240: LD_STRING 04_1_others_L
16242: PPUSH
16243: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 23
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: ST_TO_ADDR
// if tmp then
16281: LD_VAR 0 2
16285: IFFALSE 16299
// SaveCharacters ( tmp , 04_1_apes ) ;
16287: LD_VAR 0 2
16291: PPUSH
16292: LD_STRING 04_1_apes
16294: PPUSH
16295: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 17
16306: PPUSH
16307: LD_INT 21
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 70
16321: ST_TO_ADDR
// if tmp then
16322: LD_VAR 0 2
16326: IFFALSE 16670
// begin tmp2 := [ ] ;
16328: LD_ADDR_VAR 0 3
16332: PUSH
16333: EMPTY
16334: ST_TO_ADDR
// for i in tmp do
16335: LD_ADDR_VAR 0 1
16339: PUSH
16340: LD_VAR 0 2
16344: PUSH
16345: FOR_IN
16346: IFFALSE 16656
// begin driver := IsDrivenBy ( i ) ;
16348: LD_ADDR_VAR 0 5
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 311
16362: ST_TO_ADDR
// if not driver then
16363: LD_VAR 0 5
16367: NOT
16368: IFFALSE 16372
// continue ;
16370: GO 16345
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 264
16381: PUSH
16382: LD_INT 32
16384: PUSH
16385: LD_INT 12
16387: PUSH
16388: LD_INT 51
16390: PUSH
16391: LD_INT 89
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: IN
16400: IFFALSE 16548
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16402: LD_ADDR_VAR 0 4
16406: PUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 289
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 2
16427: PPUSH
16428: CALL_OW 289
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_VAR 0 3
16446: PPUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_INT 1
16454: PLUS
16455: PPUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 265
16465: PUSH
16466: LD_VAR 0 1
16470: PPUSH
16471: CALL_OW 262
16475: PUSH
16476: LD_VAR 0 1
16480: PPUSH
16481: CALL_OW 263
16485: PUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 264
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 248
16505: PUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 256
16515: PUSH
16516: LD_VAR 0 4
16520: PUSH
16521: LD_VAR 0 5
16525: PPUSH
16526: CALL_OW 257
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 1
16545: ST_TO_ADDR
// end else
16546: GO 16654
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16548: LD_ADDR_VAR 0 3
16552: PUSH
16553: LD_VAR 0 3
16557: PPUSH
16558: LD_VAR 0 3
16562: PUSH
16563: LD_INT 1
16565: PLUS
16566: PPUSH
16567: LD_VAR 0 1
16571: PPUSH
16572: CALL_OW 265
16576: PUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 262
16586: PUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 263
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 264
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 248
16616: PUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 256
16626: PUSH
16627: EMPTY
16628: PUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 257
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: PPUSH
16649: CALL_OW 1
16653: ST_TO_ADDR
// end ;
16654: GO 16345
16656: POP
16657: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16658: LD_VAR 0 3
16662: PPUSH
16663: LD_STRING 04_1_Vehicles
16665: PPUSH
16666: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16670: LD_EXP 21
16674: PPUSH
16675: LD_STRING 04_1_RuLabCaptured
16677: PPUSH
16678: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16682: LD_EXP 19
16686: PPUSH
16687: LD_STRING 04_1_EscapeCounter
16689: PPUSH
16690: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16694: LD_EXP 15
16698: PPUSH
16699: LD_STRING 04_1_BaseHill
16701: PPUSH
16702: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16706: LD_OWVAR 1
16710: PPUSH
16711: LD_STRING 04_1_Time
16713: PPUSH
16714: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16718: LD_EXP 14
16722: PPUSH
16723: LD_STRING 04_1_DeadCounter
16725: PPUSH
16726: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16730: LD_EXP 24
16734: PUSH
16735: LD_INT 112
16737: PPUSH
16738: CALL_OW 255
16742: MUL
16743: PUSH
16744: LD_INT 2
16746: EQUAL
16747: PPUSH
16748: LD_STRING 04_1_KaganCaptured
16750: PPUSH
16751: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16755: LD_INT 22
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 34
16767: PUSH
16768: LD_INT 26
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PPUSH
16779: CALL_OW 69
16783: PUSH
16784: LD_INT 0
16786: PLUS
16787: PPUSH
16788: LD_STRING 04_1_Flamethrower
16790: PPUSH
16791: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16795: LD_INT 1
16797: PPUSH
16798: LD_STRING __x1\04_cont2
16800: PPUSH
16801: CALL_OW 340
// end ; end_of_file
16805: PPOPN 5
16807: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 266
16817: PUSH
16818: LD_INT 0
16820: EQUAL
16821: PUSH
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 255
16831: PUSH
16832: LD_INT 2
16834: EQUAL
16835: AND
16836: IFFALSE 16846
// baseConstructed := true ;
16838: LD_ADDR_EXP 3
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 266
16855: PUSH
16856: LD_INT 6
16858: EQUAL
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 2
16872: EQUAL
16873: AND
16874: IFFALSE 16884
// labConstructed := true ;
16876: LD_ADDR_EXP 4
16880: PUSH
16881: LD_INT 1
16883: ST_TO_ADDR
// end ;
16884: PPOPN 1
16886: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL 33681 0 1
// if un = Heike then
16896: LD_VAR 0 1
16900: PUSH
16901: LD_EXP 26
16905: EQUAL
16906: IFFALSE 16915
// YouLost ( Heike ) ;
16908: LD_STRING Heike
16910: PPUSH
16911: CALL_OW 104
// if un = Omar then
16915: LD_VAR 0 1
16919: PUSH
16920: LD_EXP 34
16924: EQUAL
16925: IFFALSE 16934
// YouLost ( Omar ) ;
16927: LD_STRING Omar
16929: PPUSH
16930: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16934: LD_VAR 0 1
16938: PUSH
16939: LD_INT 22
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 23
16951: PUSH
16952: LD_INT 2
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 21
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: IN
16979: IFFALSE 16995
// loseCounter := loseCounter + 1 ;
16981: LD_ADDR_EXP 14
16985: PUSH
16986: LD_EXP 14
16990: PUSH
16991: LD_INT 1
16993: PLUS
16994: ST_TO_ADDR
// if un = omikron then
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 64
17002: EQUAL
17003: IFFALSE 17013
// omicronFall := true ;
17005: LD_ADDR_EXP 13
17009: PUSH
17010: LD_INT 1
17012: ST_TO_ADDR
// if un = kirov then
17013: LD_VAR 0 1
17017: PUSH
17018: LD_INT 71
17020: EQUAL
17021: IFFALSE 17038
// begin ChangeMissionObjectives ( KirovDone ) ;
17023: LD_STRING KirovDone
17025: PPUSH
17026: CALL_OW 337
// kirovDestroyed := true ;
17030: LD_ADDR_EXP 16
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// end ; if un = beria then
17038: LD_VAR 0 1
17042: PUSH
17043: LD_INT 106
17045: EQUAL
17046: IFFALSE 17063
// begin ChangeMissionObjectives ( BeriaDone ) ;
17048: LD_STRING BeriaDone
17050: PPUSH
17051: CALL_OW 337
// beriaDestroyed := true ;
17055: LD_ADDR_EXP 17
17059: PUSH
17060: LD_INT 1
17062: ST_TO_ADDR
// end ; if un = kagan then
17063: LD_VAR 0 1
17067: PUSH
17068: LD_INT 112
17070: EQUAL
17071: IFFALSE 17081
// kaganDestroyed := true ;
17073: LD_ADDR_EXP 18
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// if un in russianPatrol then
17081: LD_VAR 0 1
17085: PUSH
17086: LD_EXP 48
17090: IN
17091: IFFALSE 17109
// russianPatrol := russianPatrol diff un ;
17093: LD_ADDR_EXP 48
17097: PUSH
17098: LD_EXP 48
17102: PUSH
17103: LD_VAR 0 1
17107: DIFF
17108: ST_TO_ADDR
// if un in russianOmicronAttackers then
17109: LD_VAR 0 1
17113: PUSH
17114: LD_EXP 49
17118: IN
17119: IFFALSE 17137
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17121: LD_ADDR_EXP 49
17125: PUSH
17126: LD_EXP 49
17130: PUSH
17131: LD_VAR 0 1
17135: DIFF
17136: ST_TO_ADDR
// end ;
17137: PPOPN 1
17139: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_INT 4
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_INT 6
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 30
17191: PUSH
17192: LD_INT 32
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: IN
17208: IFFALSE 17381
// begin sol := UnitsInside ( un ) ;
17210: LD_ADDR_VAR 0 3
17214: PUSH
17215: LD_VAR 0 1
17219: PPUSH
17220: CALL_OW 313
17224: ST_TO_ADDR
// if not sol then
17225: LD_VAR 0 3
17229: NOT
17230: IFFALSE 17234
// exit ;
17232: GO 17381
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17234: LD_ADDR_VAR 0 4
17238: PUSH
17239: LD_INT 22
17241: PUSH
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 255
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: LD_INT 30
17261: PUSH
17262: LD_INT 4
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 30
17271: PUSH
17272: LD_INT 5
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 69
17292: ST_TO_ADDR
// if not nearestBarracks then
17293: LD_VAR 0 4
17297: NOT
17298: IFFALSE 17302
// exit ;
17300: GO 17381
// for i in nearestBarracks do
17302: LD_ADDR_VAR 0 2
17306: PUSH
17307: LD_VAR 0 4
17311: PUSH
17312: FOR_IN
17313: IFFALSE 17348
// if UnitsInside ( i ) = 6 then
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 313
17324: PUSH
17325: LD_INT 6
17327: EQUAL
17328: IFFALSE 17346
// nearestBarracks := nearestBarracks diff i ;
17330: LD_ADDR_VAR 0 4
17334: PUSH
17335: LD_VAR 0 4
17339: PUSH
17340: LD_VAR 0 2
17344: DIFF
17345: ST_TO_ADDR
17346: GO 17312
17348: POP
17349: POP
// if not nearestBarracks then
17350: LD_VAR 0 4
17354: NOT
17355: IFFALSE 17359
// exit ;
17357: GO 17381
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17359: LD_VAR 0 3
17363: PUSH
17364: LD_INT 1
17366: ARRAY
17367: PPUSH
17368: LD_VAR 0 4
17372: PUSH
17373: LD_INT 1
17375: ARRAY
17376: PPUSH
17377: CALL_OW 120
// end ; end ;
17381: PPOPN 4
17383: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17384: LD_INT 0
17386: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17387: LD_EXP 8
17391: NOT
17392: PUSH
17393: LD_EXP 5
17397: NOT
17398: OR
17399: IFFALSE 17403
// exit ;
17401: GO 17471
// for i in camAreas do
17403: LD_ADDR_VAR 0 5
17407: PUSH
17408: LD_EXP 8
17412: PUSH
17413: FOR_IN
17414: IFFALSE 17469
// if InArea ( x , y , i ) then
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_VAR 0 4
17425: PPUSH
17426: LD_VAR 0 5
17430: PPUSH
17431: CALL_OW 309
17435: IFFALSE 17467
// begin SetAreaMapShow ( i , 0 ) ;
17437: LD_VAR 0 5
17441: PPUSH
17442: LD_INT 0
17444: PPUSH
17445: CALL_OW 424
// camAreas := camAreas diff i ;
17449: LD_ADDR_EXP 8
17453: PUSH
17454: LD_EXP 8
17458: PUSH
17459: LD_VAR 0 5
17463: DIFF
17464: ST_TO_ADDR
// break ;
17465: GO 17469
// end ;
17467: GO 17413
17469: POP
17470: POP
// end ;
17471: PPOPN 5
17473: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17474: LD_VAR 0 1
17478: PUSH
17479: LD_INT 2
17481: EQUAL
17482: PUSH
17483: LD_VAR 0 2
17487: PUSH
17488: LD_INT 5
17490: PUSH
17491: LD_INT 8
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: IN
17498: AND
17499: IFFALSE 17508
// YouLost ( Ally ) ;
17501: LD_STRING Ally
17503: PPUSH
17504: CALL_OW 104
// end ;
17508: PPOPN 2
17510: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17511: LD_VAR 0 1
17515: PUSH
17516: LD_EXP 31
17520: EQUAL
17521: PUSH
17522: LD_VAR 0 2
17526: PUSH
17527: LD_INT 3
17529: PUSH
17530: LD_INT 6
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: IN
17537: AND
17538: IFFALSE 17569
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17540: LD_ADDR_EXP 23
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 250
17554: PUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 251
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: ST_TO_ADDR
// end ;
17569: PPOPN 3
17571: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17572: LD_VAR 0 1
17576: PPUSH
17577: LD_VAR 0 2
17581: PPUSH
17582: CALL 33801 0 2
// end ; end_of_file
17586: PPOPN 2
17588: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17589: LD_EXP 11
17593: NOT
17594: PUSH
17595: LD_INT 12
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 287
17605: PUSH
17606: LD_INT 20
17608: PUSH
17609: LD_INT 16
17611: PUSH
17612: LD_INT 12
17614: PUSH
17615: LD_INT 10
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: PUSH
17624: LD_OWVAR 67
17628: ARRAY
17629: LESS
17630: AND
17631: IFFALSE 17658
17633: GO 17635
17635: DISABLE
// begin enable ;
17636: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 5
17642: PPUSH
17643: CALL_OW 12
17647: PPUSH
17648: LD_INT 12
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL_OW 55
// end ; end_of_file
17658: END
// every 0 0$1 trigger omarCountdown do
17659: LD_EXP 22
17663: IFFALSE 17715
17665: GO 17667
17667: DISABLE
// begin enable ;
17668: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17669: LD_ADDR_OWVAR 47
17673: PUSH
17674: LD_STRING #X104-1
17676: PUSH
17677: LD_EXP 22
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17686: LD_ADDR_EXP 22
17690: PUSH
17691: LD_EXP 22
17695: PUSH
17696: LD_INT 35
17698: MINUS
17699: ST_TO_ADDR
// if not omarCountdown then
17700: LD_EXP 22
17704: NOT
17705: IFFALSE 17715
// display_strings :=  ;
17707: LD_ADDR_OWVAR 47
17711: PUSH
17712: LD_STRING 
17714: ST_TO_ADDR
// end ; end_of_file
17715: END
// export globalGameSaveCounter ; every 0 0$1 do
17716: GO 17718
17718: DISABLE
// begin enable ;
17719: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17720: LD_STRING updateTimer(
17722: PUSH
17723: LD_OWVAR 1
17727: STR
17728: PUSH
17729: LD_STRING );
17731: STR
17732: PPUSH
17733: CALL_OW 559
// end ;
17737: END
// every 0 0$1 do
17738: GO 17740
17740: DISABLE
// begin globalGameSaveCounter := 0 ;
17741: LD_ADDR_EXP 53
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17749: LD_STRING setGameSaveCounter(0)
17751: PPUSH
17752: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17756: LD_STRING initStreamRollete();
17758: PPUSH
17759: CALL_OW 559
// InitStreamMode ;
17763: CALL 19089 0 0
// DefineStreamItems ( false ) ;
17767: LD_INT 0
17769: PPUSH
17770: CALL 19553 0 1
// end ;
17774: END
// export function SOS_MapStart ( ) ; begin
17775: LD_INT 0
17777: PPUSH
// if streamModeActive then
17778: LD_EXP 54
17782: IFFALSE 17791
// DefineStreamItems ( true ) ;
17784: LD_INT 1
17786: PPUSH
17787: CALL 19553 0 1
// UpdateLuaVariables ( ) ;
17791: CALL 17808 0 0
// UpdateFactoryWaypoints ( ) ;
17795: CALL 32422 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17799: CALL 32679 0 0
// end ;
17803: LD_VAR 0 1
17807: RET
// function UpdateLuaVariables ( ) ; begin
17808: LD_INT 0
17810: PPUSH
// if globalGameSaveCounter then
17811: LD_EXP 53
17815: IFFALSE 17849
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17817: LD_ADDR_EXP 53
17821: PUSH
17822: LD_EXP 53
17826: PPUSH
17827: CALL 76652 0 1
17831: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17832: LD_STRING setGameSaveCounter(
17834: PUSH
17835: LD_EXP 53
17839: STR
17840: PUSH
17841: LD_STRING )
17843: STR
17844: PPUSH
17845: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17849: LD_STRING setGameDifficulty(
17851: PUSH
17852: LD_OWVAR 67
17856: STR
17857: PUSH
17858: LD_STRING )
17860: STR
17861: PPUSH
17862: CALL_OW 559
// end ;
17866: LD_VAR 0 1
17870: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17871: LD_INT 0
17873: PPUSH
// if p2 = stream_mode then
17874: LD_VAR 0 2
17878: PUSH
17879: LD_INT 100
17881: EQUAL
17882: IFFALSE 18885
// begin if not StreamModeActive then
17884: LD_EXP 54
17888: NOT
17889: IFFALSE 17899
// StreamModeActive := true ;
17891: LD_ADDR_EXP 54
17895: PUSH
17896: LD_INT 1
17898: ST_TO_ADDR
// if p3 = 0 then
17899: LD_VAR 0 3
17903: PUSH
17904: LD_INT 0
17906: EQUAL
17907: IFFALSE 17913
// InitStreamMode ;
17909: CALL 19089 0 0
// if p3 = 1 then
17913: LD_VAR 0 3
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: IFFALSE 17931
// sRocket := true ;
17923: LD_ADDR_EXP 59
17927: PUSH
17928: LD_INT 1
17930: ST_TO_ADDR
// if p3 = 2 then
17931: LD_VAR 0 3
17935: PUSH
17936: LD_INT 2
17938: EQUAL
17939: IFFALSE 17949
// sSpeed := true ;
17941: LD_ADDR_EXP 58
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if p3 = 3 then
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 3
17956: EQUAL
17957: IFFALSE 17967
// sEngine := true ;
17959: LD_ADDR_EXP 60
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
// if p3 = 4 then
17967: LD_VAR 0 3
17971: PUSH
17972: LD_INT 4
17974: EQUAL
17975: IFFALSE 17985
// sSpec := true ;
17977: LD_ADDR_EXP 57
17981: PUSH
17982: LD_INT 1
17984: ST_TO_ADDR
// if p3 = 5 then
17985: LD_VAR 0 3
17989: PUSH
17990: LD_INT 5
17992: EQUAL
17993: IFFALSE 18003
// sLevel := true ;
17995: LD_ADDR_EXP 61
17999: PUSH
18000: LD_INT 1
18002: ST_TO_ADDR
// if p3 = 6 then
18003: LD_VAR 0 3
18007: PUSH
18008: LD_INT 6
18010: EQUAL
18011: IFFALSE 18021
// sArmoury := true ;
18013: LD_ADDR_EXP 62
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// if p3 = 7 then
18021: LD_VAR 0 3
18025: PUSH
18026: LD_INT 7
18028: EQUAL
18029: IFFALSE 18039
// sRadar := true ;
18031: LD_ADDR_EXP 63
18035: PUSH
18036: LD_INT 1
18038: ST_TO_ADDR
// if p3 = 8 then
18039: LD_VAR 0 3
18043: PUSH
18044: LD_INT 8
18046: EQUAL
18047: IFFALSE 18057
// sBunker := true ;
18049: LD_ADDR_EXP 64
18053: PUSH
18054: LD_INT 1
18056: ST_TO_ADDR
// if p3 = 9 then
18057: LD_VAR 0 3
18061: PUSH
18062: LD_INT 9
18064: EQUAL
18065: IFFALSE 18075
// sHack := true ;
18067: LD_ADDR_EXP 65
18071: PUSH
18072: LD_INT 1
18074: ST_TO_ADDR
// if p3 = 10 then
18075: LD_VAR 0 3
18079: PUSH
18080: LD_INT 10
18082: EQUAL
18083: IFFALSE 18093
// sFire := true ;
18085: LD_ADDR_EXP 66
18089: PUSH
18090: LD_INT 1
18092: ST_TO_ADDR
// if p3 = 11 then
18093: LD_VAR 0 3
18097: PUSH
18098: LD_INT 11
18100: EQUAL
18101: IFFALSE 18111
// sRefresh := true ;
18103: LD_ADDR_EXP 67
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// if p3 = 12 then
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 12
18118: EQUAL
18119: IFFALSE 18129
// sExp := true ;
18121: LD_ADDR_EXP 68
18125: PUSH
18126: LD_INT 1
18128: ST_TO_ADDR
// if p3 = 13 then
18129: LD_VAR 0 3
18133: PUSH
18134: LD_INT 13
18136: EQUAL
18137: IFFALSE 18147
// sDepot := true ;
18139: LD_ADDR_EXP 69
18143: PUSH
18144: LD_INT 1
18146: ST_TO_ADDR
// if p3 = 14 then
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 14
18154: EQUAL
18155: IFFALSE 18165
// sFlag := true ;
18157: LD_ADDR_EXP 70
18161: PUSH
18162: LD_INT 1
18164: ST_TO_ADDR
// if p3 = 15 then
18165: LD_VAR 0 3
18169: PUSH
18170: LD_INT 15
18172: EQUAL
18173: IFFALSE 18183
// sKamikadze := true ;
18175: LD_ADDR_EXP 78
18179: PUSH
18180: LD_INT 1
18182: ST_TO_ADDR
// if p3 = 16 then
18183: LD_VAR 0 3
18187: PUSH
18188: LD_INT 16
18190: EQUAL
18191: IFFALSE 18201
// sTroll := true ;
18193: LD_ADDR_EXP 79
18197: PUSH
18198: LD_INT 1
18200: ST_TO_ADDR
// if p3 = 17 then
18201: LD_VAR 0 3
18205: PUSH
18206: LD_INT 17
18208: EQUAL
18209: IFFALSE 18219
// sSlow := true ;
18211: LD_ADDR_EXP 80
18215: PUSH
18216: LD_INT 1
18218: ST_TO_ADDR
// if p3 = 18 then
18219: LD_VAR 0 3
18223: PUSH
18224: LD_INT 18
18226: EQUAL
18227: IFFALSE 18237
// sLack := true ;
18229: LD_ADDR_EXP 81
18233: PUSH
18234: LD_INT 1
18236: ST_TO_ADDR
// if p3 = 19 then
18237: LD_VAR 0 3
18241: PUSH
18242: LD_INT 19
18244: EQUAL
18245: IFFALSE 18255
// sTank := true ;
18247: LD_ADDR_EXP 83
18251: PUSH
18252: LD_INT 1
18254: ST_TO_ADDR
// if p3 = 20 then
18255: LD_VAR 0 3
18259: PUSH
18260: LD_INT 20
18262: EQUAL
18263: IFFALSE 18273
// sRemote := true ;
18265: LD_ADDR_EXP 84
18269: PUSH
18270: LD_INT 1
18272: ST_TO_ADDR
// if p3 = 21 then
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 21
18280: EQUAL
18281: IFFALSE 18291
// sPowell := true ;
18283: LD_ADDR_EXP 85
18287: PUSH
18288: LD_INT 1
18290: ST_TO_ADDR
// if p3 = 22 then
18291: LD_VAR 0 3
18295: PUSH
18296: LD_INT 22
18298: EQUAL
18299: IFFALSE 18309
// sTeleport := true ;
18301: LD_ADDR_EXP 88
18305: PUSH
18306: LD_INT 1
18308: ST_TO_ADDR
// if p3 = 23 then
18309: LD_VAR 0 3
18313: PUSH
18314: LD_INT 23
18316: EQUAL
18317: IFFALSE 18327
// sOilTower := true ;
18319: LD_ADDR_EXP 90
18323: PUSH
18324: LD_INT 1
18326: ST_TO_ADDR
// if p3 = 24 then
18327: LD_VAR 0 3
18331: PUSH
18332: LD_INT 24
18334: EQUAL
18335: IFFALSE 18345
// sShovel := true ;
18337: LD_ADDR_EXP 91
18341: PUSH
18342: LD_INT 1
18344: ST_TO_ADDR
// if p3 = 25 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 25
18352: EQUAL
18353: IFFALSE 18363
// sSheik := true ;
18355: LD_ADDR_EXP 92
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// if p3 = 26 then
18363: LD_VAR 0 3
18367: PUSH
18368: LD_INT 26
18370: EQUAL
18371: IFFALSE 18381
// sEarthquake := true ;
18373: LD_ADDR_EXP 94
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if p3 = 27 then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 27
18388: EQUAL
18389: IFFALSE 18399
// sAI := true ;
18391: LD_ADDR_EXP 95
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// if p3 = 28 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 28
18406: EQUAL
18407: IFFALSE 18417
// sCargo := true ;
18409: LD_ADDR_EXP 98
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// if p3 = 29 then
18417: LD_VAR 0 3
18421: PUSH
18422: LD_INT 29
18424: EQUAL
18425: IFFALSE 18435
// sDLaser := true ;
18427: LD_ADDR_EXP 99
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// if p3 = 30 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 30
18442: EQUAL
18443: IFFALSE 18453
// sExchange := true ;
18445: LD_ADDR_EXP 100
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if p3 = 31 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 31
18460: EQUAL
18461: IFFALSE 18471
// sFac := true ;
18463: LD_ADDR_EXP 101
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// if p3 = 32 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_INT 32
18478: EQUAL
18479: IFFALSE 18489
// sPower := true ;
18481: LD_ADDR_EXP 102
18485: PUSH
18486: LD_INT 1
18488: ST_TO_ADDR
// if p3 = 33 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 33
18496: EQUAL
18497: IFFALSE 18507
// sRandom := true ;
18499: LD_ADDR_EXP 103
18503: PUSH
18504: LD_INT 1
18506: ST_TO_ADDR
// if p3 = 34 then
18507: LD_VAR 0 3
18511: PUSH
18512: LD_INT 34
18514: EQUAL
18515: IFFALSE 18525
// sShield := true ;
18517: LD_ADDR_EXP 104
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if p3 = 35 then
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 35
18532: EQUAL
18533: IFFALSE 18543
// sTime := true ;
18535: LD_ADDR_EXP 105
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// if p3 = 36 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 36
18550: EQUAL
18551: IFFALSE 18561
// sTools := true ;
18553: LD_ADDR_EXP 106
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// if p3 = 101 then
18561: LD_VAR 0 3
18565: PUSH
18566: LD_INT 101
18568: EQUAL
18569: IFFALSE 18579
// sSold := true ;
18571: LD_ADDR_EXP 71
18575: PUSH
18576: LD_INT 1
18578: ST_TO_ADDR
// if p3 = 102 then
18579: LD_VAR 0 3
18583: PUSH
18584: LD_INT 102
18586: EQUAL
18587: IFFALSE 18597
// sDiff := true ;
18589: LD_ADDR_EXP 72
18593: PUSH
18594: LD_INT 1
18596: ST_TO_ADDR
// if p3 = 103 then
18597: LD_VAR 0 3
18601: PUSH
18602: LD_INT 103
18604: EQUAL
18605: IFFALSE 18615
// sFog := true ;
18607: LD_ADDR_EXP 75
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// if p3 = 104 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 104
18622: EQUAL
18623: IFFALSE 18633
// sReset := true ;
18625: LD_ADDR_EXP 76
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if p3 = 105 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 105
18640: EQUAL
18641: IFFALSE 18651
// sSun := true ;
18643: LD_ADDR_EXP 77
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if p3 = 106 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 106
18658: EQUAL
18659: IFFALSE 18669
// sTiger := true ;
18661: LD_ADDR_EXP 73
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 107 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 107
18676: EQUAL
18677: IFFALSE 18687
// sBomb := true ;
18679: LD_ADDR_EXP 74
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 108 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 108
18694: EQUAL
18695: IFFALSE 18705
// sWound := true ;
18697: LD_ADDR_EXP 82
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 109 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 109
18712: EQUAL
18713: IFFALSE 18723
// sBetray := true ;
18715: LD_ADDR_EXP 86
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 110 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 110
18730: EQUAL
18731: IFFALSE 18741
// sContamin := true ;
18733: LD_ADDR_EXP 87
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 111 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 111
18748: EQUAL
18749: IFFALSE 18759
// sOil := true ;
18751: LD_ADDR_EXP 89
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 112 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 112
18766: EQUAL
18767: IFFALSE 18777
// sStu := true ;
18769: LD_ADDR_EXP 93
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 113 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 113
18784: EQUAL
18785: IFFALSE 18795
// sBazooka := true ;
18787: LD_ADDR_EXP 96
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 114 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 114
18802: EQUAL
18803: IFFALSE 18813
// sMortar := true ;
18805: LD_ADDR_EXP 97
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 115 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 115
18820: EQUAL
18821: IFFALSE 18831
// sRanger := true ;
18823: LD_ADDR_EXP 107
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 116 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 116
18838: EQUAL
18839: IFFALSE 18849
// sComputer := true ;
18841: LD_ADDR_EXP 108
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 117 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 117
18856: EQUAL
18857: IFFALSE 18867
// s30 := true ;
18859: LD_ADDR_EXP 109
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 118 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 118
18874: EQUAL
18875: IFFALSE 18885
// s60 := true ;
18877: LD_ADDR_EXP 110
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// end ; if p2 = hack_mode then
18885: LD_VAR 0 2
18889: PUSH
18890: LD_INT 101
18892: EQUAL
18893: IFFALSE 19021
// begin case p3 of 1 :
18895: LD_VAR 0 3
18899: PUSH
18900: LD_INT 1
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18915
18908: POP
// hHackUnlimitedResources ; 2 :
18909: CALL 31168 0 0
18913: GO 19021
18915: LD_INT 2
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18930
18923: POP
// hHackSetLevel10 ; 3 :
18924: CALL 31301 0 0
18928: GO 19021
18930: LD_INT 3
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18945
18938: POP
// hHackSetLevel10YourUnits ; 4 :
18939: CALL 31386 0 0
18943: GO 19021
18945: LD_INT 4
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18960
18953: POP
// hHackInvincible ; 5 :
18954: CALL 31834 0 0
18958: GO 19021
18960: LD_INT 5
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18975
18968: POP
// hHackInvisible ; 6 :
18969: CALL 31945 0 0
18973: GO 19021
18975: LD_INT 6
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 18990
18983: POP
// hHackChangeYourSide ; 7 :
18984: CALL 32002 0 0
18988: GO 19021
18990: LD_INT 7
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19005
18998: POP
// hHackChangeUnitSide ; 8 :
18999: CALL 32044 0 0
19003: GO 19021
19005: LD_INT 8
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19020
19013: POP
// hHackFog ; end ;
19014: CALL 32145 0 0
19018: GO 19021
19020: POP
// end ; if p2 = game_save_mode then
19021: LD_VAR 0 2
19025: PUSH
19026: LD_INT 102
19028: EQUAL
19029: IFFALSE 19084
// begin if p3 = 1 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 1
19038: EQUAL
19039: IFFALSE 19051
// globalGameSaveCounter := p4 ;
19041: LD_ADDR_EXP 53
19045: PUSH
19046: LD_VAR 0 4
19050: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19051: LD_VAR 0 3
19055: PUSH
19056: LD_INT 2
19058: EQUAL
19059: PUSH
19060: LD_EXP 53
19064: AND
19065: IFFALSE 19084
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19067: LD_STRING setGameSaveCounter(
19069: PUSH
19070: LD_EXP 53
19074: STR
19075: PUSH
19076: LD_STRING )
19078: STR
19079: PPUSH
19080: CALL_OW 559
// end ; end ;
19084: LD_VAR 0 7
19088: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19089: LD_INT 0
19091: PPUSH
// streamModeActive := false ;
19092: LD_ADDR_EXP 54
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// normalCounter := 36 ;
19100: LD_ADDR_EXP 55
19104: PUSH
19105: LD_INT 36
19107: ST_TO_ADDR
// hardcoreCounter := 18 ;
19108: LD_ADDR_EXP 56
19112: PUSH
19113: LD_INT 18
19115: ST_TO_ADDR
// sRocket := false ;
19116: LD_ADDR_EXP 59
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// sSpeed := false ;
19124: LD_ADDR_EXP 58
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// sEngine := false ;
19132: LD_ADDR_EXP 60
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// sSpec := false ;
19140: LD_ADDR_EXP 57
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// sLevel := false ;
19148: LD_ADDR_EXP 61
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// sArmoury := false ;
19156: LD_ADDR_EXP 62
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// sRadar := false ;
19164: LD_ADDR_EXP 63
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// sBunker := false ;
19172: LD_ADDR_EXP 64
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// sHack := false ;
19180: LD_ADDR_EXP 65
19184: PUSH
19185: LD_INT 0
19187: ST_TO_ADDR
// sFire := false ;
19188: LD_ADDR_EXP 66
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// sRefresh := false ;
19196: LD_ADDR_EXP 67
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
// sExp := false ;
19204: LD_ADDR_EXP 68
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// sDepot := false ;
19212: LD_ADDR_EXP 69
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// sFlag := false ;
19220: LD_ADDR_EXP 70
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// sKamikadze := false ;
19228: LD_ADDR_EXP 78
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// sTroll := false ;
19236: LD_ADDR_EXP 79
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// sSlow := false ;
19244: LD_ADDR_EXP 80
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// sLack := false ;
19252: LD_ADDR_EXP 81
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// sTank := false ;
19260: LD_ADDR_EXP 83
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// sRemote := false ;
19268: LD_ADDR_EXP 84
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// sPowell := false ;
19276: LD_ADDR_EXP 85
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// sTeleport := false ;
19284: LD_ADDR_EXP 88
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// sOilTower := false ;
19292: LD_ADDR_EXP 90
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// sShovel := false ;
19300: LD_ADDR_EXP 91
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// sSheik := false ;
19308: LD_ADDR_EXP 92
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// sEarthquake := false ;
19316: LD_ADDR_EXP 94
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// sAI := false ;
19324: LD_ADDR_EXP 95
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// sCargo := false ;
19332: LD_ADDR_EXP 98
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// sDLaser := false ;
19340: LD_ADDR_EXP 99
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// sExchange := false ;
19348: LD_ADDR_EXP 100
19352: PUSH
19353: LD_INT 0
19355: ST_TO_ADDR
// sFac := false ;
19356: LD_ADDR_EXP 101
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// sPower := false ;
19364: LD_ADDR_EXP 102
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// sRandom := false ;
19372: LD_ADDR_EXP 103
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// sShield := false ;
19380: LD_ADDR_EXP 104
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
// sTime := false ;
19388: LD_ADDR_EXP 105
19392: PUSH
19393: LD_INT 0
19395: ST_TO_ADDR
// sTools := false ;
19396: LD_ADDR_EXP 106
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// sSold := false ;
19404: LD_ADDR_EXP 71
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// sDiff := false ;
19412: LD_ADDR_EXP 72
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
// sFog := false ;
19420: LD_ADDR_EXP 75
19424: PUSH
19425: LD_INT 0
19427: ST_TO_ADDR
// sReset := false ;
19428: LD_ADDR_EXP 76
19432: PUSH
19433: LD_INT 0
19435: ST_TO_ADDR
// sSun := false ;
19436: LD_ADDR_EXP 77
19440: PUSH
19441: LD_INT 0
19443: ST_TO_ADDR
// sTiger := false ;
19444: LD_ADDR_EXP 73
19448: PUSH
19449: LD_INT 0
19451: ST_TO_ADDR
// sBomb := false ;
19452: LD_ADDR_EXP 74
19456: PUSH
19457: LD_INT 0
19459: ST_TO_ADDR
// sWound := false ;
19460: LD_ADDR_EXP 82
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// sBetray := false ;
19468: LD_ADDR_EXP 86
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
// sContamin := false ;
19476: LD_ADDR_EXP 87
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
// sOil := false ;
19484: LD_ADDR_EXP 89
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// sStu := false ;
19492: LD_ADDR_EXP 93
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// sBazooka := false ;
19500: LD_ADDR_EXP 96
19504: PUSH
19505: LD_INT 0
19507: ST_TO_ADDR
// sMortar := false ;
19508: LD_ADDR_EXP 97
19512: PUSH
19513: LD_INT 0
19515: ST_TO_ADDR
// sRanger := false ;
19516: LD_ADDR_EXP 107
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// sComputer := false ;
19524: LD_ADDR_EXP 108
19528: PUSH
19529: LD_INT 0
19531: ST_TO_ADDR
// s30 := false ;
19532: LD_ADDR_EXP 109
19536: PUSH
19537: LD_INT 0
19539: ST_TO_ADDR
// s60 := false ;
19540: LD_ADDR_EXP 110
19544: PUSH
19545: LD_INT 0
19547: ST_TO_ADDR
// end ;
19548: LD_VAR 0 1
19552: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19553: LD_INT 0
19555: PPUSH
19556: PPUSH
19557: PPUSH
19558: PPUSH
19559: PPUSH
19560: PPUSH
19561: PPUSH
// result := [ ] ;
19562: LD_ADDR_VAR 0 2
19566: PUSH
19567: EMPTY
19568: ST_TO_ADDR
// if campaign_id = 1 then
19569: LD_OWVAR 69
19573: PUSH
19574: LD_INT 1
19576: EQUAL
19577: IFFALSE 22743
// begin case mission_number of 1 :
19579: LD_OWVAR 70
19583: PUSH
19584: LD_INT 1
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19668
19592: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: LD_INT 11
19606: PUSH
19607: LD_INT 12
19609: PUSH
19610: LD_INT 15
19612: PUSH
19613: LD_INT 16
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_INT 23
19621: PUSH
19622: LD_INT 26
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 101
19638: PUSH
19639: LD_INT 102
19641: PUSH
19642: LD_INT 106
19644: PUSH
19645: LD_INT 116
19647: PUSH
19648: LD_INT 117
19650: PUSH
19651: LD_INT 118
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: ST_TO_ADDR
19666: GO 22741
19668: LD_INT 2
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19760
19676: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19677: LD_ADDR_VAR 0 2
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 4
19687: PUSH
19688: LD_INT 11
19690: PUSH
19691: LD_INT 12
19693: PUSH
19694: LD_INT 15
19696: PUSH
19697: LD_INT 16
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 26
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 101
19722: PUSH
19723: LD_INT 102
19725: PUSH
19726: LD_INT 105
19728: PUSH
19729: LD_INT 106
19731: PUSH
19732: LD_INT 108
19734: PUSH
19735: LD_INT 116
19737: PUSH
19738: LD_INT 117
19740: PUSH
19741: LD_INT 118
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: ST_TO_ADDR
19758: GO 22741
19760: LD_INT 3
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19856
19768: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19769: LD_ADDR_VAR 0 2
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: LD_INT 4
19779: PUSH
19780: LD_INT 5
19782: PUSH
19783: LD_INT 11
19785: PUSH
19786: LD_INT 12
19788: PUSH
19789: LD_INT 15
19791: PUSH
19792: LD_INT 16
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_INT 26
19800: PUSH
19801: LD_INT 36
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 101
19818: PUSH
19819: LD_INT 102
19821: PUSH
19822: LD_INT 105
19824: PUSH
19825: LD_INT 106
19827: PUSH
19828: LD_INT 108
19830: PUSH
19831: LD_INT 116
19833: PUSH
19834: LD_INT 117
19836: PUSH
19837: LD_INT 118
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: ST_TO_ADDR
19854: GO 22741
19856: LD_INT 4
19858: DOUBLE
19859: EQUAL
19860: IFTRUE 19864
19862: GO 19960
19864: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 4
19875: PUSH
19876: LD_INT 5
19878: PUSH
19879: LD_INT 8
19881: PUSH
19882: LD_INT 11
19884: PUSH
19885: LD_INT 12
19887: PUSH
19888: LD_INT 15
19890: PUSH
19891: LD_INT 16
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_INT 23
19899: PUSH
19900: LD_INT 26
19902: PUSH
19903: LD_INT 36
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 101
19922: PUSH
19923: LD_INT 102
19925: PUSH
19926: LD_INT 105
19928: PUSH
19929: LD_INT 106
19931: PUSH
19932: LD_INT 108
19934: PUSH
19935: LD_INT 116
19937: PUSH
19938: LD_INT 117
19940: PUSH
19941: LD_INT 118
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: ST_TO_ADDR
19958: GO 22741
19960: LD_INT 5
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 20080
19968: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 4
19979: PUSH
19980: LD_INT 5
19982: PUSH
19983: LD_INT 6
19985: PUSH
19986: LD_INT 8
19988: PUSH
19989: LD_INT 11
19991: PUSH
19992: LD_INT 12
19994: PUSH
19995: LD_INT 15
19997: PUSH
19998: LD_INT 16
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 25
20009: PUSH
20010: LD_INT 26
20012: PUSH
20013: LD_INT 36
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 101
20034: PUSH
20035: LD_INT 102
20037: PUSH
20038: LD_INT 105
20040: PUSH
20041: LD_INT 106
20043: PUSH
20044: LD_INT 108
20046: PUSH
20047: LD_INT 109
20049: PUSH
20050: LD_INT 112
20052: PUSH
20053: LD_INT 116
20055: PUSH
20056: LD_INT 117
20058: PUSH
20059: LD_INT 118
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: ST_TO_ADDR
20078: GO 22741
20080: LD_INT 6
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20220
20088: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20089: LD_ADDR_VAR 0 2
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: LD_INT 4
20099: PUSH
20100: LD_INT 5
20102: PUSH
20103: LD_INT 6
20105: PUSH
20106: LD_INT 8
20108: PUSH
20109: LD_INT 11
20111: PUSH
20112: LD_INT 12
20114: PUSH
20115: LD_INT 15
20117: PUSH
20118: LD_INT 16
20120: PUSH
20121: LD_INT 20
20123: PUSH
20124: LD_INT 21
20126: PUSH
20127: LD_INT 22
20129: PUSH
20130: LD_INT 23
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 26
20138: PUSH
20139: LD_INT 30
20141: PUSH
20142: LD_INT 31
20144: PUSH
20145: LD_INT 32
20147: PUSH
20148: LD_INT 36
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 101
20174: PUSH
20175: LD_INT 102
20177: PUSH
20178: LD_INT 105
20180: PUSH
20181: LD_INT 106
20183: PUSH
20184: LD_INT 108
20186: PUSH
20187: LD_INT 109
20189: PUSH
20190: LD_INT 112
20192: PUSH
20193: LD_INT 116
20195: PUSH
20196: LD_INT 117
20198: PUSH
20199: LD_INT 118
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: ST_TO_ADDR
20218: GO 22741
20220: LD_INT 7
20222: DOUBLE
20223: EQUAL
20224: IFTRUE 20228
20226: GO 20340
20228: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: LD_INT 4
20239: PUSH
20240: LD_INT 5
20242: PUSH
20243: LD_INT 7
20245: PUSH
20246: LD_INT 11
20248: PUSH
20249: LD_INT 12
20251: PUSH
20252: LD_INT 15
20254: PUSH
20255: LD_INT 16
20257: PUSH
20258: LD_INT 20
20260: PUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 22
20266: PUSH
20267: LD_INT 23
20269: PUSH
20270: LD_INT 25
20272: PUSH
20273: LD_INT 26
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 101
20294: PUSH
20295: LD_INT 102
20297: PUSH
20298: LD_INT 103
20300: PUSH
20301: LD_INT 105
20303: PUSH
20304: LD_INT 106
20306: PUSH
20307: LD_INT 108
20309: PUSH
20310: LD_INT 112
20312: PUSH
20313: LD_INT 116
20315: PUSH
20316: LD_INT 117
20318: PUSH
20319: LD_INT 118
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: ST_TO_ADDR
20338: GO 22741
20340: LD_INT 8
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20488
20348: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: LD_INT 4
20359: PUSH
20360: LD_INT 5
20362: PUSH
20363: LD_INT 6
20365: PUSH
20366: LD_INT 7
20368: PUSH
20369: LD_INT 8
20371: PUSH
20372: LD_INT 11
20374: PUSH
20375: LD_INT 12
20377: PUSH
20378: LD_INT 15
20380: PUSH
20381: LD_INT 16
20383: PUSH
20384: LD_INT 20
20386: PUSH
20387: LD_INT 21
20389: PUSH
20390: LD_INT 22
20392: PUSH
20393: LD_INT 23
20395: PUSH
20396: LD_INT 25
20398: PUSH
20399: LD_INT 26
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 31
20407: PUSH
20408: LD_INT 32
20410: PUSH
20411: LD_INT 36
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 101
20438: PUSH
20439: LD_INT 102
20441: PUSH
20442: LD_INT 103
20444: PUSH
20445: LD_INT 105
20447: PUSH
20448: LD_INT 106
20450: PUSH
20451: LD_INT 108
20453: PUSH
20454: LD_INT 109
20456: PUSH
20457: LD_INT 112
20459: PUSH
20460: LD_INT 116
20462: PUSH
20463: LD_INT 117
20465: PUSH
20466: LD_INT 118
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: ST_TO_ADDR
20486: GO 22741
20488: LD_INT 9
20490: DOUBLE
20491: EQUAL
20492: IFTRUE 20496
20494: GO 20644
20496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20497: LD_ADDR_VAR 0 2
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 4
20507: PUSH
20508: LD_INT 5
20510: PUSH
20511: LD_INT 6
20513: PUSH
20514: LD_INT 7
20516: PUSH
20517: LD_INT 8
20519: PUSH
20520: LD_INT 11
20522: PUSH
20523: LD_INT 12
20525: PUSH
20526: LD_INT 15
20528: PUSH
20529: LD_INT 16
20531: PUSH
20532: LD_INT 20
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 22
20540: PUSH
20541: LD_INT 23
20543: PUSH
20544: LD_INT 25
20546: PUSH
20547: LD_INT 26
20549: PUSH
20550: LD_INT 28
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 31
20558: PUSH
20559: LD_INT 32
20561: PUSH
20562: LD_INT 36
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 101
20590: PUSH
20591: LD_INT 102
20593: PUSH
20594: LD_INT 103
20596: PUSH
20597: LD_INT 105
20599: PUSH
20600: LD_INT 106
20602: PUSH
20603: LD_INT 108
20605: PUSH
20606: LD_INT 109
20608: PUSH
20609: LD_INT 112
20611: PUSH
20612: LD_INT 114
20614: PUSH
20615: LD_INT 116
20617: PUSH
20618: LD_INT 117
20620: PUSH
20621: LD_INT 118
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: ST_TO_ADDR
20642: GO 22741
20644: LD_INT 10
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20848
20652: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20653: LD_ADDR_VAR 0 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 4
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: LD_INT 6
20669: PUSH
20670: LD_INT 7
20672: PUSH
20673: LD_INT 8
20675: PUSH
20676: LD_INT 9
20678: PUSH
20679: LD_INT 10
20681: PUSH
20682: LD_INT 11
20684: PUSH
20685: LD_INT 12
20687: PUSH
20688: LD_INT 13
20690: PUSH
20691: LD_INT 14
20693: PUSH
20694: LD_INT 15
20696: PUSH
20697: LD_INT 16
20699: PUSH
20700: LD_INT 17
20702: PUSH
20703: LD_INT 18
20705: PUSH
20706: LD_INT 19
20708: PUSH
20709: LD_INT 20
20711: PUSH
20712: LD_INT 21
20714: PUSH
20715: LD_INT 22
20717: PUSH
20718: LD_INT 23
20720: PUSH
20721: LD_INT 24
20723: PUSH
20724: LD_INT 25
20726: PUSH
20727: LD_INT 26
20729: PUSH
20730: LD_INT 28
20732: PUSH
20733: LD_INT 30
20735: PUSH
20736: LD_INT 31
20738: PUSH
20739: LD_INT 32
20741: PUSH
20742: LD_INT 36
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 101
20778: PUSH
20779: LD_INT 102
20781: PUSH
20782: LD_INT 103
20784: PUSH
20785: LD_INT 104
20787: PUSH
20788: LD_INT 105
20790: PUSH
20791: LD_INT 106
20793: PUSH
20794: LD_INT 107
20796: PUSH
20797: LD_INT 108
20799: PUSH
20800: LD_INT 109
20802: PUSH
20803: LD_INT 110
20805: PUSH
20806: LD_INT 111
20808: PUSH
20809: LD_INT 112
20811: PUSH
20812: LD_INT 114
20814: PUSH
20815: LD_INT 116
20817: PUSH
20818: LD_INT 117
20820: PUSH
20821: LD_INT 118
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: ST_TO_ADDR
20846: GO 22741
20848: LD_INT 11
20850: DOUBLE
20851: EQUAL
20852: IFTRUE 20856
20854: GO 21060
20856: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20857: LD_ADDR_VAR 0 2
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 3
20867: PUSH
20868: LD_INT 4
20870: PUSH
20871: LD_INT 5
20873: PUSH
20874: LD_INT 6
20876: PUSH
20877: LD_INT 7
20879: PUSH
20880: LD_INT 8
20882: PUSH
20883: LD_INT 9
20885: PUSH
20886: LD_INT 10
20888: PUSH
20889: LD_INT 11
20891: PUSH
20892: LD_INT 12
20894: PUSH
20895: LD_INT 13
20897: PUSH
20898: LD_INT 14
20900: PUSH
20901: LD_INT 15
20903: PUSH
20904: LD_INT 16
20906: PUSH
20907: LD_INT 17
20909: PUSH
20910: LD_INT 18
20912: PUSH
20913: LD_INT 19
20915: PUSH
20916: LD_INT 20
20918: PUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 22
20924: PUSH
20925: LD_INT 23
20927: PUSH
20928: LD_INT 24
20930: PUSH
20931: LD_INT 25
20933: PUSH
20934: LD_INT 26
20936: PUSH
20937: LD_INT 28
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 31
20945: PUSH
20946: LD_INT 32
20948: PUSH
20949: LD_INT 34
20951: PUSH
20952: LD_INT 36
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 101
20990: PUSH
20991: LD_INT 102
20993: PUSH
20994: LD_INT 103
20996: PUSH
20997: LD_INT 104
20999: PUSH
21000: LD_INT 105
21002: PUSH
21003: LD_INT 106
21005: PUSH
21006: LD_INT 107
21008: PUSH
21009: LD_INT 108
21011: PUSH
21012: LD_INT 109
21014: PUSH
21015: LD_INT 110
21017: PUSH
21018: LD_INT 111
21020: PUSH
21021: LD_INT 112
21023: PUSH
21024: LD_INT 114
21026: PUSH
21027: LD_INT 116
21029: PUSH
21030: LD_INT 117
21032: PUSH
21033: LD_INT 118
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: ST_TO_ADDR
21058: GO 22741
21060: LD_INT 12
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21288
21068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: LD_INT 3
21082: PUSH
21083: LD_INT 4
21085: PUSH
21086: LD_INT 5
21088: PUSH
21089: LD_INT 6
21091: PUSH
21092: LD_INT 7
21094: PUSH
21095: LD_INT 8
21097: PUSH
21098: LD_INT 9
21100: PUSH
21101: LD_INT 10
21103: PUSH
21104: LD_INT 11
21106: PUSH
21107: LD_INT 12
21109: PUSH
21110: LD_INT 13
21112: PUSH
21113: LD_INT 14
21115: PUSH
21116: LD_INT 15
21118: PUSH
21119: LD_INT 16
21121: PUSH
21122: LD_INT 17
21124: PUSH
21125: LD_INT 18
21127: PUSH
21128: LD_INT 19
21130: PUSH
21131: LD_INT 20
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 22
21139: PUSH
21140: LD_INT 23
21142: PUSH
21143: LD_INT 24
21145: PUSH
21146: LD_INT 25
21148: PUSH
21149: LD_INT 26
21151: PUSH
21152: LD_INT 27
21154: PUSH
21155: LD_INT 28
21157: PUSH
21158: LD_INT 30
21160: PUSH
21161: LD_INT 31
21163: PUSH
21164: LD_INT 32
21166: PUSH
21167: LD_INT 33
21169: PUSH
21170: LD_INT 34
21172: PUSH
21173: LD_INT 36
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 101
21214: PUSH
21215: LD_INT 102
21217: PUSH
21218: LD_INT 103
21220: PUSH
21221: LD_INT 104
21223: PUSH
21224: LD_INT 105
21226: PUSH
21227: LD_INT 106
21229: PUSH
21230: LD_INT 107
21232: PUSH
21233: LD_INT 108
21235: PUSH
21236: LD_INT 109
21238: PUSH
21239: LD_INT 110
21241: PUSH
21242: LD_INT 111
21244: PUSH
21245: LD_INT 112
21247: PUSH
21248: LD_INT 113
21250: PUSH
21251: LD_INT 114
21253: PUSH
21254: LD_INT 116
21256: PUSH
21257: LD_INT 117
21259: PUSH
21260: LD_INT 118
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: ST_TO_ADDR
21286: GO 22741
21288: LD_INT 13
21290: DOUBLE
21291: EQUAL
21292: IFTRUE 21296
21294: GO 21504
21296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21297: LD_ADDR_VAR 0 2
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 4
21313: PUSH
21314: LD_INT 5
21316: PUSH
21317: LD_INT 8
21319: PUSH
21320: LD_INT 9
21322: PUSH
21323: LD_INT 10
21325: PUSH
21326: LD_INT 11
21328: PUSH
21329: LD_INT 12
21331: PUSH
21332: LD_INT 14
21334: PUSH
21335: LD_INT 15
21337: PUSH
21338: LD_INT 16
21340: PUSH
21341: LD_INT 17
21343: PUSH
21344: LD_INT 18
21346: PUSH
21347: LD_INT 19
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 24
21364: PUSH
21365: LD_INT 25
21367: PUSH
21368: LD_INT 26
21370: PUSH
21371: LD_INT 27
21373: PUSH
21374: LD_INT 28
21376: PUSH
21377: LD_INT 30
21379: PUSH
21380: LD_INT 31
21382: PUSH
21383: LD_INT 32
21385: PUSH
21386: LD_INT 33
21388: PUSH
21389: LD_INT 34
21391: PUSH
21392: LD_INT 36
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 101
21430: PUSH
21431: LD_INT 102
21433: PUSH
21434: LD_INT 103
21436: PUSH
21437: LD_INT 104
21439: PUSH
21440: LD_INT 105
21442: PUSH
21443: LD_INT 106
21445: PUSH
21446: LD_INT 107
21448: PUSH
21449: LD_INT 108
21451: PUSH
21452: LD_INT 109
21454: PUSH
21455: LD_INT 110
21457: PUSH
21458: LD_INT 111
21460: PUSH
21461: LD_INT 112
21463: PUSH
21464: LD_INT 113
21466: PUSH
21467: LD_INT 114
21469: PUSH
21470: LD_INT 116
21472: PUSH
21473: LD_INT 117
21475: PUSH
21476: LD_INT 118
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 22741
21504: LD_INT 14
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21736
21512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 3
21526: PUSH
21527: LD_INT 4
21529: PUSH
21530: LD_INT 5
21532: PUSH
21533: LD_INT 6
21535: PUSH
21536: LD_INT 7
21538: PUSH
21539: LD_INT 8
21541: PUSH
21542: LD_INT 9
21544: PUSH
21545: LD_INT 10
21547: PUSH
21548: LD_INT 11
21550: PUSH
21551: LD_INT 12
21553: PUSH
21554: LD_INT 13
21556: PUSH
21557: LD_INT 14
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 17
21568: PUSH
21569: LD_INT 18
21571: PUSH
21572: LD_INT 19
21574: PUSH
21575: LD_INT 20
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 23
21586: PUSH
21587: LD_INT 24
21589: PUSH
21590: LD_INT 25
21592: PUSH
21593: LD_INT 26
21595: PUSH
21596: LD_INT 27
21598: PUSH
21599: LD_INT 28
21601: PUSH
21602: LD_INT 29
21604: PUSH
21605: LD_INT 30
21607: PUSH
21608: LD_INT 31
21610: PUSH
21611: LD_INT 32
21613: PUSH
21614: LD_INT 33
21616: PUSH
21617: LD_INT 34
21619: PUSH
21620: LD_INT 36
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 101
21662: PUSH
21663: LD_INT 102
21665: PUSH
21666: LD_INT 103
21668: PUSH
21669: LD_INT 104
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 107
21680: PUSH
21681: LD_INT 108
21683: PUSH
21684: LD_INT 109
21686: PUSH
21687: LD_INT 110
21689: PUSH
21690: LD_INT 111
21692: PUSH
21693: LD_INT 112
21695: PUSH
21696: LD_INT 113
21698: PUSH
21699: LD_INT 114
21701: PUSH
21702: LD_INT 116
21704: PUSH
21705: LD_INT 117
21707: PUSH
21708: LD_INT 118
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
21734: GO 22741
21736: LD_INT 15
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21968
21744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 9
21776: PUSH
21777: LD_INT 10
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 13
21788: PUSH
21789: LD_INT 14
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 18
21803: PUSH
21804: LD_INT 19
21806: PUSH
21807: LD_INT 20
21809: PUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 23
21818: PUSH
21819: LD_INT 24
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 26
21827: PUSH
21828: LD_INT 27
21830: PUSH
21831: LD_INT 28
21833: PUSH
21834: LD_INT 29
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 31
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: LD_INT 34
21851: PUSH
21852: LD_INT 36
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 101
21894: PUSH
21895: LD_INT 102
21897: PUSH
21898: LD_INT 103
21900: PUSH
21901: LD_INT 104
21903: PUSH
21904: LD_INT 105
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 107
21912: PUSH
21913: LD_INT 108
21915: PUSH
21916: LD_INT 109
21918: PUSH
21919: LD_INT 110
21921: PUSH
21922: LD_INT 111
21924: PUSH
21925: LD_INT 112
21927: PUSH
21928: LD_INT 113
21930: PUSH
21931: LD_INT 114
21933: PUSH
21934: LD_INT 116
21936: PUSH
21937: LD_INT 117
21939: PUSH
21940: LD_INT 118
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: ST_TO_ADDR
21966: GO 22741
21968: LD_INT 16
21970: DOUBLE
21971: EQUAL
21972: IFTRUE 21976
21974: GO 22112
21976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21977: LD_ADDR_VAR 0 2
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 4
21987: PUSH
21988: LD_INT 5
21990: PUSH
21991: LD_INT 7
21993: PUSH
21994: LD_INT 11
21996: PUSH
21997: LD_INT 12
21999: PUSH
22000: LD_INT 15
22002: PUSH
22003: LD_INT 16
22005: PUSH
22006: LD_INT 20
22008: PUSH
22009: LD_INT 21
22011: PUSH
22012: LD_INT 22
22014: PUSH
22015: LD_INT 23
22017: PUSH
22018: LD_INT 25
22020: PUSH
22021: LD_INT 26
22023: PUSH
22024: LD_INT 30
22026: PUSH
22027: LD_INT 31
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: LD_INT 33
22035: PUSH
22036: LD_INT 34
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 101
22062: PUSH
22063: LD_INT 102
22065: PUSH
22066: LD_INT 103
22068: PUSH
22069: LD_INT 106
22071: PUSH
22072: LD_INT 108
22074: PUSH
22075: LD_INT 112
22077: PUSH
22078: LD_INT 113
22080: PUSH
22081: LD_INT 114
22083: PUSH
22084: LD_INT 116
22086: PUSH
22087: LD_INT 117
22089: PUSH
22090: LD_INT 118
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: ST_TO_ADDR
22110: GO 22741
22112: LD_INT 17
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22344
22120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: LD_INT 5
22140: PUSH
22141: LD_INT 6
22143: PUSH
22144: LD_INT 7
22146: PUSH
22147: LD_INT 8
22149: PUSH
22150: LD_INT 9
22152: PUSH
22153: LD_INT 10
22155: PUSH
22156: LD_INT 11
22158: PUSH
22159: LD_INT 12
22161: PUSH
22162: LD_INT 13
22164: PUSH
22165: LD_INT 14
22167: PUSH
22168: LD_INT 15
22170: PUSH
22171: LD_INT 16
22173: PUSH
22174: LD_INT 17
22176: PUSH
22177: LD_INT 18
22179: PUSH
22180: LD_INT 19
22182: PUSH
22183: LD_INT 20
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_INT 23
22194: PUSH
22195: LD_INT 24
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 26
22203: PUSH
22204: LD_INT 27
22206: PUSH
22207: LD_INT 28
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 31
22218: PUSH
22219: LD_INT 32
22221: PUSH
22222: LD_INT 33
22224: PUSH
22225: LD_INT 34
22227: PUSH
22228: LD_INT 36
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 101
22270: PUSH
22271: LD_INT 102
22273: PUSH
22274: LD_INT 103
22276: PUSH
22277: LD_INT 104
22279: PUSH
22280: LD_INT 105
22282: PUSH
22283: LD_INT 106
22285: PUSH
22286: LD_INT 107
22288: PUSH
22289: LD_INT 108
22291: PUSH
22292: LD_INT 109
22294: PUSH
22295: LD_INT 110
22297: PUSH
22298: LD_INT 111
22300: PUSH
22301: LD_INT 112
22303: PUSH
22304: LD_INT 113
22306: PUSH
22307: LD_INT 114
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: ST_TO_ADDR
22342: GO 22741
22344: LD_INT 18
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22500
22352: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 4
22363: PUSH
22364: LD_INT 5
22366: PUSH
22367: LD_INT 7
22369: PUSH
22370: LD_INT 11
22372: PUSH
22373: LD_INT 12
22375: PUSH
22376: LD_INT 15
22378: PUSH
22379: LD_INT 16
22381: PUSH
22382: LD_INT 20
22384: PUSH
22385: LD_INT 21
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 30
22402: PUSH
22403: LD_INT 31
22405: PUSH
22406: LD_INT 32
22408: PUSH
22409: LD_INT 33
22411: PUSH
22412: LD_INT 34
22414: PUSH
22415: LD_INT 35
22417: PUSH
22418: LD_INT 36
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 101
22446: PUSH
22447: LD_INT 102
22449: PUSH
22450: LD_INT 103
22452: PUSH
22453: LD_INT 106
22455: PUSH
22456: LD_INT 108
22458: PUSH
22459: LD_INT 112
22461: PUSH
22462: LD_INT 113
22464: PUSH
22465: LD_INT 114
22467: PUSH
22468: LD_INT 115
22470: PUSH
22471: LD_INT 116
22473: PUSH
22474: LD_INT 117
22476: PUSH
22477: LD_INT 118
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: ST_TO_ADDR
22498: GO 22741
22500: LD_INT 19
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22740
22508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: LD_INT 4
22525: PUSH
22526: LD_INT 5
22528: PUSH
22529: LD_INT 6
22531: PUSH
22532: LD_INT 7
22534: PUSH
22535: LD_INT 8
22537: PUSH
22538: LD_INT 9
22540: PUSH
22541: LD_INT 10
22543: PUSH
22544: LD_INT 11
22546: PUSH
22547: LD_INT 12
22549: PUSH
22550: LD_INT 13
22552: PUSH
22553: LD_INT 14
22555: PUSH
22556: LD_INT 15
22558: PUSH
22559: LD_INT 16
22561: PUSH
22562: LD_INT 17
22564: PUSH
22565: LD_INT 18
22567: PUSH
22568: LD_INT 19
22570: PUSH
22571: LD_INT 20
22573: PUSH
22574: LD_INT 21
22576: PUSH
22577: LD_INT 22
22579: PUSH
22580: LD_INT 23
22582: PUSH
22583: LD_INT 24
22585: PUSH
22586: LD_INT 25
22588: PUSH
22589: LD_INT 26
22591: PUSH
22592: LD_INT 27
22594: PUSH
22595: LD_INT 28
22597: PUSH
22598: LD_INT 29
22600: PUSH
22601: LD_INT 30
22603: PUSH
22604: LD_INT 31
22606: PUSH
22607: LD_INT 32
22609: PUSH
22610: LD_INT 33
22612: PUSH
22613: LD_INT 34
22615: PUSH
22616: LD_INT 35
22618: PUSH
22619: LD_INT 36
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 101
22662: PUSH
22663: LD_INT 102
22665: PUSH
22666: LD_INT 103
22668: PUSH
22669: LD_INT 104
22671: PUSH
22672: LD_INT 105
22674: PUSH
22675: LD_INT 106
22677: PUSH
22678: LD_INT 107
22680: PUSH
22681: LD_INT 108
22683: PUSH
22684: LD_INT 109
22686: PUSH
22687: LD_INT 110
22689: PUSH
22690: LD_INT 111
22692: PUSH
22693: LD_INT 112
22695: PUSH
22696: LD_INT 113
22698: PUSH
22699: LD_INT 114
22701: PUSH
22702: LD_INT 115
22704: PUSH
22705: LD_INT 116
22707: PUSH
22708: LD_INT 117
22710: PUSH
22711: LD_INT 118
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 22741
22740: POP
// end else
22741: GO 22972
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 3
22756: PUSH
22757: LD_INT 4
22759: PUSH
22760: LD_INT 5
22762: PUSH
22763: LD_INT 6
22765: PUSH
22766: LD_INT 7
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: LD_INT 9
22774: PUSH
22775: LD_INT 10
22777: PUSH
22778: LD_INT 11
22780: PUSH
22781: LD_INT 12
22783: PUSH
22784: LD_INT 13
22786: PUSH
22787: LD_INT 14
22789: PUSH
22790: LD_INT 15
22792: PUSH
22793: LD_INT 16
22795: PUSH
22796: LD_INT 17
22798: PUSH
22799: LD_INT 18
22801: PUSH
22802: LD_INT 19
22804: PUSH
22805: LD_INT 20
22807: PUSH
22808: LD_INT 21
22810: PUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 23
22816: PUSH
22817: LD_INT 24
22819: PUSH
22820: LD_INT 25
22822: PUSH
22823: LD_INT 26
22825: PUSH
22826: LD_INT 27
22828: PUSH
22829: LD_INT 28
22831: PUSH
22832: LD_INT 29
22834: PUSH
22835: LD_INT 30
22837: PUSH
22838: LD_INT 31
22840: PUSH
22841: LD_INT 32
22843: PUSH
22844: LD_INT 33
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 35
22852: PUSH
22853: LD_INT 36
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 101
22896: PUSH
22897: LD_INT 102
22899: PUSH
22900: LD_INT 103
22902: PUSH
22903: LD_INT 104
22905: PUSH
22906: LD_INT 105
22908: PUSH
22909: LD_INT 106
22911: PUSH
22912: LD_INT 107
22914: PUSH
22915: LD_INT 108
22917: PUSH
22918: LD_INT 109
22920: PUSH
22921: LD_INT 110
22923: PUSH
22924: LD_INT 111
22926: PUSH
22927: LD_INT 112
22929: PUSH
22930: LD_INT 113
22932: PUSH
22933: LD_INT 114
22935: PUSH
22936: LD_INT 115
22938: PUSH
22939: LD_INT 116
22941: PUSH
22942: LD_INT 117
22944: PUSH
22945: LD_INT 118
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: ST_TO_ADDR
// if result then
22972: LD_VAR 0 2
22976: IFFALSE 23762
// begin normal :=  ;
22978: LD_ADDR_VAR 0 5
22982: PUSH
22983: LD_STRING 
22985: ST_TO_ADDR
// hardcore :=  ;
22986: LD_ADDR_VAR 0 6
22990: PUSH
22991: LD_STRING 
22993: ST_TO_ADDR
// active :=  ;
22994: LD_ADDR_VAR 0 7
22998: PUSH
22999: LD_STRING 
23001: ST_TO_ADDR
// for i = 1 to normalCounter do
23002: LD_ADDR_VAR 0 8
23006: PUSH
23007: DOUBLE
23008: LD_INT 1
23010: DEC
23011: ST_TO_ADDR
23012: LD_EXP 55
23016: PUSH
23017: FOR_TO
23018: IFFALSE 23119
// begin tmp := 0 ;
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_STRING 0
23027: ST_TO_ADDR
// if result [ 1 ] then
23028: LD_VAR 0 2
23032: PUSH
23033: LD_INT 1
23035: ARRAY
23036: IFFALSE 23101
// if result [ 1 ] [ 1 ] = i then
23038: LD_VAR 0 2
23042: PUSH
23043: LD_INT 1
23045: ARRAY
23046: PUSH
23047: LD_INT 1
23049: ARRAY
23050: PUSH
23051: LD_VAR 0 8
23055: EQUAL
23056: IFFALSE 23101
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23058: LD_ADDR_VAR 0 2
23062: PUSH
23063: LD_VAR 0 2
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: LD_VAR 0 2
23075: PUSH
23076: LD_INT 1
23078: ARRAY
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 3
23087: PPUSH
23088: CALL_OW 1
23092: ST_TO_ADDR
// tmp := 1 ;
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_STRING 1
23100: ST_TO_ADDR
// end ; normal := normal & tmp ;
23101: LD_ADDR_VAR 0 5
23105: PUSH
23106: LD_VAR 0 5
23110: PUSH
23111: LD_VAR 0 3
23115: STR
23116: ST_TO_ADDR
// end ;
23117: GO 23017
23119: POP
23120: POP
// for i = 1 to hardcoreCounter do
23121: LD_ADDR_VAR 0 8
23125: PUSH
23126: DOUBLE
23127: LD_INT 1
23129: DEC
23130: ST_TO_ADDR
23131: LD_EXP 56
23135: PUSH
23136: FOR_TO
23137: IFFALSE 23242
// begin tmp := 0 ;
23139: LD_ADDR_VAR 0 3
23143: PUSH
23144: LD_STRING 0
23146: ST_TO_ADDR
// if result [ 2 ] then
23147: LD_VAR 0 2
23151: PUSH
23152: LD_INT 2
23154: ARRAY
23155: IFFALSE 23224
// if result [ 2 ] [ 1 ] = 100 + i then
23157: LD_VAR 0 2
23161: PUSH
23162: LD_INT 2
23164: ARRAY
23165: PUSH
23166: LD_INT 1
23168: ARRAY
23169: PUSH
23170: LD_INT 100
23172: PUSH
23173: LD_VAR 0 8
23177: PLUS
23178: EQUAL
23179: IFFALSE 23224
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_VAR 0 2
23190: PPUSH
23191: LD_INT 2
23193: PPUSH
23194: LD_VAR 0 2
23198: PUSH
23199: LD_INT 2
23201: ARRAY
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: CALL_OW 3
23210: PPUSH
23211: CALL_OW 1
23215: ST_TO_ADDR
// tmp := 1 ;
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_STRING 1
23223: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23224: LD_ADDR_VAR 0 6
23228: PUSH
23229: LD_VAR 0 6
23233: PUSH
23234: LD_VAR 0 3
23238: STR
23239: ST_TO_ADDR
// end ;
23240: GO 23136
23242: POP
23243: POP
// if isGameLoad then
23244: LD_VAR 0 1
23248: IFFALSE 23723
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23250: LD_ADDR_VAR 0 4
23254: PUSH
23255: LD_EXP 59
23259: PUSH
23260: LD_EXP 58
23264: PUSH
23265: LD_EXP 60
23269: PUSH
23270: LD_EXP 57
23274: PUSH
23275: LD_EXP 61
23279: PUSH
23280: LD_EXP 62
23284: PUSH
23285: LD_EXP 63
23289: PUSH
23290: LD_EXP 64
23294: PUSH
23295: LD_EXP 65
23299: PUSH
23300: LD_EXP 66
23304: PUSH
23305: LD_EXP 67
23309: PUSH
23310: LD_EXP 68
23314: PUSH
23315: LD_EXP 69
23319: PUSH
23320: LD_EXP 70
23324: PUSH
23325: LD_EXP 78
23329: PUSH
23330: LD_EXP 79
23334: PUSH
23335: LD_EXP 80
23339: PUSH
23340: LD_EXP 81
23344: PUSH
23345: LD_EXP 83
23349: PUSH
23350: LD_EXP 84
23354: PUSH
23355: LD_EXP 85
23359: PUSH
23360: LD_EXP 88
23364: PUSH
23365: LD_EXP 90
23369: PUSH
23370: LD_EXP 91
23374: PUSH
23375: LD_EXP 92
23379: PUSH
23380: LD_EXP 94
23384: PUSH
23385: LD_EXP 95
23389: PUSH
23390: LD_EXP 98
23394: PUSH
23395: LD_EXP 99
23399: PUSH
23400: LD_EXP 100
23404: PUSH
23405: LD_EXP 101
23409: PUSH
23410: LD_EXP 102
23414: PUSH
23415: LD_EXP 103
23419: PUSH
23420: LD_EXP 104
23424: PUSH
23425: LD_EXP 105
23429: PUSH
23430: LD_EXP 106
23434: PUSH
23435: LD_EXP 71
23439: PUSH
23440: LD_EXP 72
23444: PUSH
23445: LD_EXP 75
23449: PUSH
23450: LD_EXP 76
23454: PUSH
23455: LD_EXP 77
23459: PUSH
23460: LD_EXP 73
23464: PUSH
23465: LD_EXP 74
23469: PUSH
23470: LD_EXP 82
23474: PUSH
23475: LD_EXP 86
23479: PUSH
23480: LD_EXP 87
23484: PUSH
23485: LD_EXP 89
23489: PUSH
23490: LD_EXP 93
23494: PUSH
23495: LD_EXP 96
23499: PUSH
23500: LD_EXP 97
23504: PUSH
23505: LD_EXP 107
23509: PUSH
23510: LD_EXP 108
23514: PUSH
23515: LD_EXP 109
23519: PUSH
23520: LD_EXP 110
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: ST_TO_ADDR
// tmp :=  ;
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_STRING 
23588: ST_TO_ADDR
// for i = 1 to normalCounter do
23589: LD_ADDR_VAR 0 8
23593: PUSH
23594: DOUBLE
23595: LD_INT 1
23597: DEC
23598: ST_TO_ADDR
23599: LD_EXP 55
23603: PUSH
23604: FOR_TO
23605: IFFALSE 23641
// begin if flags [ i ] then
23607: LD_VAR 0 4
23611: PUSH
23612: LD_VAR 0 8
23616: ARRAY
23617: IFFALSE 23639
// tmp := tmp & i & ; ;
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_VAR 0 3
23628: PUSH
23629: LD_VAR 0 8
23633: STR
23634: PUSH
23635: LD_STRING ;
23637: STR
23638: ST_TO_ADDR
// end ;
23639: GO 23604
23641: POP
23642: POP
// for i = 1 to hardcoreCounter do
23643: LD_ADDR_VAR 0 8
23647: PUSH
23648: DOUBLE
23649: LD_INT 1
23651: DEC
23652: ST_TO_ADDR
23653: LD_EXP 56
23657: PUSH
23658: FOR_TO
23659: IFFALSE 23705
// begin if flags [ normalCounter + i ] then
23661: LD_VAR 0 4
23665: PUSH
23666: LD_EXP 55
23670: PUSH
23671: LD_VAR 0 8
23675: PLUS
23676: ARRAY
23677: IFFALSE 23703
// tmp := tmp & ( 100 + i ) & ; ;
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_VAR 0 3
23688: PUSH
23689: LD_INT 100
23691: PUSH
23692: LD_VAR 0 8
23696: PLUS
23697: STR
23698: PUSH
23699: LD_STRING ;
23701: STR
23702: ST_TO_ADDR
// end ;
23703: GO 23658
23705: POP
23706: POP
// if tmp then
23707: LD_VAR 0 3
23711: IFFALSE 23723
// active := tmp ;
23713: LD_ADDR_VAR 0 7
23717: PUSH
23718: LD_VAR 0 3
23722: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23723: LD_STRING getStreamItemsFromMission("
23725: PUSH
23726: LD_VAR 0 5
23730: STR
23731: PUSH
23732: LD_STRING ","
23734: STR
23735: PUSH
23736: LD_VAR 0 6
23740: STR
23741: PUSH
23742: LD_STRING ","
23744: STR
23745: PUSH
23746: LD_VAR 0 7
23750: STR
23751: PUSH
23752: LD_STRING ")
23754: STR
23755: PPUSH
23756: CALL_OW 559
// end else
23760: GO 23769
// ToLua ( getStreamItemsFromMission("","","") ) ;
23762: LD_STRING getStreamItemsFromMission("","","")
23764: PPUSH
23765: CALL_OW 559
// end ;
23769: LD_VAR 0 2
23773: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23774: LD_EXP 54
23778: PUSH
23779: LD_EXP 59
23783: AND
23784: IFFALSE 23908
23786: GO 23788
23788: DISABLE
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
// begin enable ;
23793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_INT 22
23801: PUSH
23802: LD_OWVAR 2
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: LD_INT 34
23816: PUSH
23817: LD_INT 7
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 34
23826: PUSH
23827: LD_INT 45
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 34
23836: PUSH
23837: LD_INT 28
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 34
23846: PUSH
23847: LD_INT 47
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: ST_TO_ADDR
// if not tmp then
23870: LD_VAR 0 2
23874: NOT
23875: IFFALSE 23879
// exit ;
23877: GO 23908
// for i in tmp do
23879: LD_ADDR_VAR 0 1
23883: PUSH
23884: LD_VAR 0 2
23888: PUSH
23889: FOR_IN
23890: IFFALSE 23906
// begin SetLives ( i , 0 ) ;
23892: LD_VAR 0 1
23896: PPUSH
23897: LD_INT 0
23899: PPUSH
23900: CALL_OW 234
// end ;
23904: GO 23889
23906: POP
23907: POP
// end ;
23908: PPOPN 2
23910: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23911: LD_EXP 54
23915: PUSH
23916: LD_EXP 60
23920: AND
23921: IFFALSE 24005
23923: GO 23925
23925: DISABLE
23926: LD_INT 0
23928: PPUSH
23929: PPUSH
// begin enable ;
23930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_OWVAR 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 32
23950: PUSH
23951: LD_INT 3
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 69
23966: ST_TO_ADDR
// if not tmp then
23967: LD_VAR 0 2
23971: NOT
23972: IFFALSE 23976
// exit ;
23974: GO 24005
// for i in tmp do
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_VAR 0 2
23985: PUSH
23986: FOR_IN
23987: IFFALSE 24003
// begin SetLives ( i , 0 ) ;
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_INT 0
23996: PPUSH
23997: CALL_OW 234
// end ;
24001: GO 23986
24003: POP
24004: POP
// end ;
24005: PPOPN 2
24007: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24008: LD_EXP 54
24012: PUSH
24013: LD_EXP 57
24017: AND
24018: IFFALSE 24111
24020: GO 24022
24022: DISABLE
24023: LD_INT 0
24025: PPUSH
// begin enable ;
24026: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24027: LD_ADDR_VAR 0 1
24031: PUSH
24032: LD_INT 22
24034: PUSH
24035: LD_OWVAR 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 2
24046: PUSH
24047: LD_INT 25
24049: PUSH
24050: LD_INT 5
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 25
24059: PUSH
24060: LD_INT 9
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 25
24069: PUSH
24070: LD_INT 8
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PPUSH
24087: CALL_OW 69
24091: PUSH
24092: FOR_IN
24093: IFFALSE 24109
// begin SetClass ( i , 1 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL_OW 336
// end ;
24107: GO 24092
24109: POP
24110: POP
// end ;
24111: PPOPN 1
24113: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24114: LD_EXP 54
24118: PUSH
24119: LD_EXP 58
24123: AND
24124: PUSH
24125: LD_OWVAR 65
24129: PUSH
24130: LD_INT 7
24132: LESS
24133: AND
24134: IFFALSE 24148
24136: GO 24138
24138: DISABLE
// begin enable ;
24139: ENABLE
// game_speed := 7 ;
24140: LD_ADDR_OWVAR 65
24144: PUSH
24145: LD_INT 7
24147: ST_TO_ADDR
// end ;
24148: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24149: LD_EXP 54
24153: PUSH
24154: LD_EXP 61
24158: AND
24159: IFFALSE 24361
24161: GO 24163
24163: DISABLE
24164: LD_INT 0
24166: PPUSH
24167: PPUSH
24168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 81
24176: PUSH
24177: LD_OWVAR 2
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 21
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PPUSH
24200: CALL_OW 69
24204: ST_TO_ADDR
// if not tmp then
24205: LD_VAR 0 3
24209: NOT
24210: IFFALSE 24214
// exit ;
24212: GO 24361
// if tmp > 5 then
24214: LD_VAR 0 3
24218: PUSH
24219: LD_INT 5
24221: GREATER
24222: IFFALSE 24234
// k := 5 else
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_INT 5
24231: ST_TO_ADDR
24232: GO 24244
// k := tmp ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_VAR 0 3
24243: ST_TO_ADDR
// for i := 1 to k do
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: DOUBLE
24250: LD_INT 1
24252: DEC
24253: ST_TO_ADDR
24254: LD_VAR 0 2
24258: PUSH
24259: FOR_TO
24260: IFFALSE 24359
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24262: LD_VAR 0 3
24266: PUSH
24267: LD_VAR 0 1
24271: ARRAY
24272: PPUSH
24273: LD_VAR 0 1
24277: PUSH
24278: LD_INT 4
24280: MOD
24281: PUSH
24282: LD_INT 1
24284: PLUS
24285: PPUSH
24286: CALL_OW 259
24290: PUSH
24291: LD_INT 10
24293: LESS
24294: IFFALSE 24357
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24296: LD_VAR 0 3
24300: PUSH
24301: LD_VAR 0 1
24305: ARRAY
24306: PPUSH
24307: LD_VAR 0 1
24311: PUSH
24312: LD_INT 4
24314: MOD
24315: PUSH
24316: LD_INT 1
24318: PLUS
24319: PPUSH
24320: LD_VAR 0 3
24324: PUSH
24325: LD_VAR 0 1
24329: ARRAY
24330: PPUSH
24331: LD_VAR 0 1
24335: PUSH
24336: LD_INT 4
24338: MOD
24339: PUSH
24340: LD_INT 1
24342: PLUS
24343: PPUSH
24344: CALL_OW 259
24348: PUSH
24349: LD_INT 1
24351: PLUS
24352: PPUSH
24353: CALL_OW 237
24357: GO 24259
24359: POP
24360: POP
// end ;
24361: PPOPN 3
24363: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24364: LD_EXP 54
24368: PUSH
24369: LD_EXP 62
24373: AND
24374: IFFALSE 24394
24376: GO 24378
24378: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24379: LD_INT 4
24381: PPUSH
24382: LD_OWVAR 2
24386: PPUSH
24387: LD_INT 0
24389: PPUSH
24390: CALL_OW 324
24394: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24395: LD_EXP 54
24399: PUSH
24400: LD_EXP 91
24404: AND
24405: IFFALSE 24425
24407: GO 24409
24409: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24410: LD_INT 19
24412: PPUSH
24413: LD_OWVAR 2
24417: PPUSH
24418: LD_INT 0
24420: PPUSH
24421: CALL_OW 324
24425: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24426: LD_EXP 54
24430: PUSH
24431: LD_EXP 63
24435: AND
24436: IFFALSE 24538
24438: GO 24440
24440: DISABLE
24441: LD_INT 0
24443: PPUSH
24444: PPUSH
// begin enable ;
24445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24446: LD_ADDR_VAR 0 2
24450: PUSH
24451: LD_INT 22
24453: PUSH
24454: LD_OWVAR 2
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 34
24468: PUSH
24469: LD_INT 11
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 34
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not tmp then
24500: LD_VAR 0 2
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24538
// for i in tmp do
24509: LD_ADDR_VAR 0 1
24513: PUSH
24514: LD_VAR 0 2
24518: PUSH
24519: FOR_IN
24520: IFFALSE 24536
// begin SetLives ( i , 0 ) ;
24522: LD_VAR 0 1
24526: PPUSH
24527: LD_INT 0
24529: PPUSH
24530: CALL_OW 234
// end ;
24534: GO 24519
24536: POP
24537: POP
// end ;
24538: PPOPN 2
24540: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24541: LD_EXP 54
24545: PUSH
24546: LD_EXP 64
24550: AND
24551: IFFALSE 24571
24553: GO 24555
24555: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24556: LD_INT 32
24558: PPUSH
24559: LD_OWVAR 2
24563: PPUSH
24564: LD_INT 0
24566: PPUSH
24567: CALL_OW 324
24571: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24572: LD_EXP 54
24576: PUSH
24577: LD_EXP 65
24581: AND
24582: IFFALSE 24763
24584: GO 24586
24586: DISABLE
24587: LD_INT 0
24589: PPUSH
24590: PPUSH
24591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24592: LD_ADDR_VAR 0 2
24596: PUSH
24597: LD_INT 22
24599: PUSH
24600: LD_OWVAR 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 33
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PPUSH
24623: CALL_OW 69
24627: ST_TO_ADDR
// if not tmp then
24628: LD_VAR 0 2
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 24763
// side := 0 ;
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: LD_INT 0
24644: ST_TO_ADDR
// for i := 1 to 8 do
24645: LD_ADDR_VAR 0 1
24649: PUSH
24650: DOUBLE
24651: LD_INT 1
24653: DEC
24654: ST_TO_ADDR
24655: LD_INT 8
24657: PUSH
24658: FOR_TO
24659: IFFALSE 24707
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24661: LD_OWVAR 2
24665: PUSH
24666: LD_VAR 0 1
24670: NONEQUAL
24671: PUSH
24672: LD_OWVAR 2
24676: PPUSH
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 81
24686: PUSH
24687: LD_INT 2
24689: EQUAL
24690: AND
24691: IFFALSE 24705
// begin side := i ;
24693: LD_ADDR_VAR 0 3
24697: PUSH
24698: LD_VAR 0 1
24702: ST_TO_ADDR
// break ;
24703: GO 24707
// end ;
24705: GO 24658
24707: POP
24708: POP
// if not side then
24709: LD_VAR 0 3
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24763
// for i := 1 to tmp do
24718: LD_ADDR_VAR 0 1
24722: PUSH
24723: DOUBLE
24724: LD_INT 1
24726: DEC
24727: ST_TO_ADDR
24728: LD_VAR 0 2
24732: PUSH
24733: FOR_TO
24734: IFFALSE 24761
// if Prob ( 60 ) then
24736: LD_INT 60
24738: PPUSH
24739: CALL_OW 13
24743: IFFALSE 24759
// SetSide ( i , side ) ;
24745: LD_VAR 0 1
24749: PPUSH
24750: LD_VAR 0 3
24754: PPUSH
24755: CALL_OW 235
24759: GO 24733
24761: POP
24762: POP
// end ;
24763: PPOPN 3
24765: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24766: LD_EXP 54
24770: PUSH
24771: LD_EXP 67
24775: AND
24776: IFFALSE 24895
24778: GO 24780
24780: DISABLE
24781: LD_INT 0
24783: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24784: LD_ADDR_VAR 0 1
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_OWVAR 2
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 23
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: PPUSH
24833: CALL_OW 69
24837: PUSH
24838: FOR_IN
24839: IFFALSE 24893
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24841: LD_VAR 0 1
24845: PPUSH
24846: CALL_OW 257
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: LD_INT 4
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: IN
24869: IFFALSE 24891
// SetClass ( un , rand ( 1 , 4 ) ) ;
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_INT 1
24878: PPUSH
24879: LD_INT 4
24881: PPUSH
24882: CALL_OW 12
24886: PPUSH
24887: CALL_OW 336
24891: GO 24838
24893: POP
24894: POP
// end ;
24895: PPOPN 1
24897: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24898: LD_EXP 54
24902: PUSH
24903: LD_EXP 66
24907: AND
24908: IFFALSE 24987
24910: GO 24912
24912: DISABLE
24913: LD_INT 0
24915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24916: LD_ADDR_VAR 0 1
24920: PUSH
24921: LD_INT 22
24923: PUSH
24924: LD_OWVAR 2
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 21
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 69
24951: ST_TO_ADDR
// if not tmp then
24952: LD_VAR 0 1
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 24987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24961: LD_VAR 0 1
24965: PUSH
24966: LD_INT 1
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL_OW 12
24978: ARRAY
24979: PPUSH
24980: LD_INT 100
24982: PPUSH
24983: CALL_OW 234
// end ;
24987: PPOPN 1
24989: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24990: LD_EXP 54
24994: PUSH
24995: LD_EXP 68
24999: AND
25000: IFFALSE 25098
25002: GO 25004
25004: DISABLE
25005: LD_INT 0
25007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25008: LD_ADDR_VAR 0 1
25012: PUSH
25013: LD_INT 22
25015: PUSH
25016: LD_OWVAR 2
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 21
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PPUSH
25039: CALL_OW 69
25043: ST_TO_ADDR
// if not tmp then
25044: LD_VAR 0 1
25048: NOT
25049: IFFALSE 25053
// exit ;
25051: GO 25098
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25053: LD_VAR 0 1
25057: PUSH
25058: LD_INT 1
25060: PPUSH
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL_OW 12
25070: ARRAY
25071: PPUSH
25072: LD_INT 1
25074: PPUSH
25075: LD_INT 4
25077: PPUSH
25078: CALL_OW 12
25082: PPUSH
25083: LD_INT 3000
25085: PPUSH
25086: LD_INT 9000
25088: PPUSH
25089: CALL_OW 12
25093: PPUSH
25094: CALL_OW 492
// end ;
25098: PPOPN 1
25100: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25101: LD_EXP 54
25105: PUSH
25106: LD_EXP 69
25110: AND
25111: IFFALSE 25131
25113: GO 25115
25115: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25116: LD_INT 1
25118: PPUSH
25119: LD_OWVAR 2
25123: PPUSH
25124: LD_INT 0
25126: PPUSH
25127: CALL_OW 324
25131: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25132: LD_EXP 54
25136: PUSH
25137: LD_EXP 70
25141: AND
25142: IFFALSE 25225
25144: GO 25146
25146: DISABLE
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_INT 22
25158: PUSH
25159: LD_OWVAR 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 21
25170: PUSH
25171: LD_INT 3
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PPUSH
25182: CALL_OW 69
25186: ST_TO_ADDR
// if not tmp then
25187: LD_VAR 0 2
25191: NOT
25192: IFFALSE 25196
// exit ;
25194: GO 25225
// for i in tmp do
25196: LD_ADDR_VAR 0 1
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: FOR_IN
25207: IFFALSE 25223
// SetBLevel ( i , 10 ) ;
25209: LD_VAR 0 1
25213: PPUSH
25214: LD_INT 10
25216: PPUSH
25217: CALL_OW 241
25221: GO 25206
25223: POP
25224: POP
// end ;
25225: PPOPN 2
25227: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25228: LD_EXP 54
25232: PUSH
25233: LD_EXP 71
25237: AND
25238: IFFALSE 25349
25240: GO 25242
25242: DISABLE
25243: LD_INT 0
25245: PPUSH
25246: PPUSH
25247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25248: LD_ADDR_VAR 0 3
25252: PUSH
25253: LD_INT 22
25255: PUSH
25256: LD_OWVAR 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 25
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PPUSH
25279: CALL_OW 69
25283: ST_TO_ADDR
// if not tmp then
25284: LD_VAR 0 3
25288: NOT
25289: IFFALSE 25293
// exit ;
25291: GO 25349
// un := tmp [ rand ( 1 , tmp ) ] ;
25293: LD_ADDR_VAR 0 2
25297: PUSH
25298: LD_VAR 0 3
25302: PUSH
25303: LD_INT 1
25305: PPUSH
25306: LD_VAR 0 3
25310: PPUSH
25311: CALL_OW 12
25315: ARRAY
25316: ST_TO_ADDR
// if Crawls ( un ) then
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL_OW 318
25326: IFFALSE 25337
// ComWalk ( un ) ;
25328: LD_VAR 0 2
25332: PPUSH
25333: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25337: LD_VAR 0 2
25341: PPUSH
25342: LD_INT 5
25344: PPUSH
25345: CALL_OW 336
// end ;
25349: PPOPN 3
25351: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25352: LD_EXP 54
25356: PUSH
25357: LD_EXP 72
25361: AND
25362: PUSH
25363: LD_OWVAR 67
25367: PUSH
25368: LD_INT 4
25370: LESS
25371: AND
25372: IFFALSE 25391
25374: GO 25376
25376: DISABLE
// begin Difficulty := Difficulty + 1 ;
25377: LD_ADDR_OWVAR 67
25381: PUSH
25382: LD_OWVAR 67
25386: PUSH
25387: LD_INT 1
25389: PLUS
25390: ST_TO_ADDR
// end ;
25391: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25392: LD_EXP 54
25396: PUSH
25397: LD_EXP 73
25401: AND
25402: IFFALSE 25505
25404: GO 25406
25406: DISABLE
25407: LD_INT 0
25409: PPUSH
// begin for i := 1 to 5 do
25410: LD_ADDR_VAR 0 1
25414: PUSH
25415: DOUBLE
25416: LD_INT 1
25418: DEC
25419: ST_TO_ADDR
25420: LD_INT 5
25422: PUSH
25423: FOR_TO
25424: IFFALSE 25503
// begin uc_nation := nation_nature ;
25426: LD_ADDR_OWVAR 21
25430: PUSH
25431: LD_INT 0
25433: ST_TO_ADDR
// uc_side := 0 ;
25434: LD_ADDR_OWVAR 20
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25442: LD_ADDR_OWVAR 29
25446: PUSH
25447: LD_INT 12
25449: PUSH
25450: LD_INT 12
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: ST_TO_ADDR
// hc_agressivity := 20 ;
25457: LD_ADDR_OWVAR 35
25461: PUSH
25462: LD_INT 20
25464: ST_TO_ADDR
// hc_class := class_tiger ;
25465: LD_ADDR_OWVAR 28
25469: PUSH
25470: LD_INT 14
25472: ST_TO_ADDR
// hc_gallery :=  ;
25473: LD_ADDR_OWVAR 33
25477: PUSH
25478: LD_STRING 
25480: ST_TO_ADDR
// hc_name :=  ;
25481: LD_ADDR_OWVAR 26
25485: PUSH
25486: LD_STRING 
25488: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25489: CALL_OW 44
25493: PPUSH
25494: LD_INT 0
25496: PPUSH
25497: CALL_OW 51
// end ;
25501: GO 25423
25503: POP
25504: POP
// end ;
25505: PPOPN 1
25507: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25508: LD_EXP 54
25512: PUSH
25513: LD_EXP 74
25517: AND
25518: IFFALSE 25527
25520: GO 25522
25522: DISABLE
// StreamSibBomb ;
25523: CALL 25528 0 0
25527: END
// export function StreamSibBomb ; var i , x , y ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
// result := false ;
25534: LD_ADDR_VAR 0 1
25538: PUSH
25539: LD_INT 0
25541: ST_TO_ADDR
// for i := 1 to 16 do
25542: LD_ADDR_VAR 0 2
25546: PUSH
25547: DOUBLE
25548: LD_INT 1
25550: DEC
25551: ST_TO_ADDR
25552: LD_INT 16
25554: PUSH
25555: FOR_TO
25556: IFFALSE 25755
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25558: LD_ADDR_VAR 0 3
25562: PUSH
25563: LD_INT 10
25565: PUSH
25566: LD_INT 20
25568: PUSH
25569: LD_INT 30
25571: PUSH
25572: LD_INT 40
25574: PUSH
25575: LD_INT 50
25577: PUSH
25578: LD_INT 60
25580: PUSH
25581: LD_INT 70
25583: PUSH
25584: LD_INT 80
25586: PUSH
25587: LD_INT 90
25589: PUSH
25590: LD_INT 100
25592: PUSH
25593: LD_INT 110
25595: PUSH
25596: LD_INT 120
25598: PUSH
25599: LD_INT 130
25601: PUSH
25602: LD_INT 140
25604: PUSH
25605: LD_INT 150
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: PPUSH
25628: LD_INT 15
25630: PPUSH
25631: CALL_OW 12
25635: ARRAY
25636: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25637: LD_ADDR_VAR 0 4
25641: PUSH
25642: LD_INT 10
25644: PUSH
25645: LD_INT 20
25647: PUSH
25648: LD_INT 30
25650: PUSH
25651: LD_INT 40
25653: PUSH
25654: LD_INT 50
25656: PUSH
25657: LD_INT 60
25659: PUSH
25660: LD_INT 70
25662: PUSH
25663: LD_INT 80
25665: PUSH
25666: LD_INT 90
25668: PUSH
25669: LD_INT 100
25671: PUSH
25672: LD_INT 110
25674: PUSH
25675: LD_INT 120
25677: PUSH
25678: LD_INT 130
25680: PUSH
25681: LD_INT 140
25683: PUSH
25684: LD_INT 150
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PPUSH
25707: LD_INT 15
25709: PPUSH
25710: CALL_OW 12
25714: ARRAY
25715: ST_TO_ADDR
// if ValidHex ( x , y ) then
25716: LD_VAR 0 3
25720: PPUSH
25721: LD_VAR 0 4
25725: PPUSH
25726: CALL_OW 488
25730: IFFALSE 25753
// begin result := [ x , y ] ;
25732: LD_ADDR_VAR 0 1
25736: PUSH
25737: LD_VAR 0 3
25741: PUSH
25742: LD_VAR 0 4
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: ST_TO_ADDR
// break ;
25751: GO 25755
// end ; end ;
25753: GO 25555
25755: POP
25756: POP
// if result then
25757: LD_VAR 0 1
25761: IFFALSE 25821
// begin ToLua ( playSibBomb() ) ;
25763: LD_STRING playSibBomb()
25765: PPUSH
25766: CALL_OW 559
// wait ( 0 0$14 ) ;
25770: LD_INT 490
25772: PPUSH
25773: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25777: LD_VAR 0 1
25781: PUSH
25782: LD_INT 1
25784: ARRAY
25785: PPUSH
25786: LD_VAR 0 1
25790: PUSH
25791: LD_INT 2
25793: ARRAY
25794: PPUSH
25795: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 1
25806: ARRAY
25807: PPUSH
25808: LD_VAR 0 1
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: PPUSH
25817: CALL_OW 429
// end ; end ;
25821: LD_VAR 0 1
25825: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25826: LD_EXP 54
25830: PUSH
25831: LD_EXP 76
25835: AND
25836: IFFALSE 25848
25838: GO 25840
25840: DISABLE
// YouLost (  ) ;
25841: LD_STRING 
25843: PPUSH
25844: CALL_OW 104
25848: END
// every 0 0$1 trigger StreamModeActive and sFog do
25849: LD_EXP 54
25853: PUSH
25854: LD_EXP 75
25858: AND
25859: IFFALSE 25873
25861: GO 25863
25863: DISABLE
// FogOff ( your_side ) ;
25864: LD_OWVAR 2
25868: PPUSH
25869: CALL_OW 344
25873: END
// every 0 0$1 trigger StreamModeActive and sSun do
25874: LD_EXP 54
25878: PUSH
25879: LD_EXP 77
25883: AND
25884: IFFALSE 25912
25886: GO 25888
25888: DISABLE
// begin solar_recharge_percent := 0 ;
25889: LD_ADDR_OWVAR 79
25893: PUSH
25894: LD_INT 0
25896: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25897: LD_INT 10500
25899: PPUSH
25900: CALL_OW 67
// solar_recharge_percent := 100 ;
25904: LD_ADDR_OWVAR 79
25908: PUSH
25909: LD_INT 100
25911: ST_TO_ADDR
// end ;
25912: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25913: LD_EXP 54
25917: PUSH
25918: LD_EXP 78
25922: AND
25923: IFFALSE 26162
25925: GO 25927
25927: DISABLE
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
25932: PPUSH
// begin tmp := [ ] ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: EMPTY
25939: ST_TO_ADDR
// for i := 1 to 6 do
25940: LD_ADDR_VAR 0 1
25944: PUSH
25945: DOUBLE
25946: LD_INT 1
25948: DEC
25949: ST_TO_ADDR
25950: LD_INT 6
25952: PUSH
25953: FOR_TO
25954: IFFALSE 26059
// begin uc_nation := nation_nature ;
25956: LD_ADDR_OWVAR 21
25960: PUSH
25961: LD_INT 0
25963: ST_TO_ADDR
// uc_side := 0 ;
25964: LD_ADDR_OWVAR 20
25968: PUSH
25969: LD_INT 0
25971: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25972: LD_ADDR_OWVAR 29
25976: PUSH
25977: LD_INT 12
25979: PUSH
25980: LD_INT 12
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: ST_TO_ADDR
// hc_agressivity := 20 ;
25987: LD_ADDR_OWVAR 35
25991: PUSH
25992: LD_INT 20
25994: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25995: LD_ADDR_OWVAR 28
25999: PUSH
26000: LD_INT 17
26002: ST_TO_ADDR
// hc_gallery :=  ;
26003: LD_ADDR_OWVAR 33
26007: PUSH
26008: LD_STRING 
26010: ST_TO_ADDR
// hc_name :=  ;
26011: LD_ADDR_OWVAR 26
26015: PUSH
26016: LD_STRING 
26018: ST_TO_ADDR
// un := CreateHuman ;
26019: LD_ADDR_VAR 0 2
26023: PUSH
26024: CALL_OW 44
26028: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26029: LD_VAR 0 2
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: CALL_OW 51
// tmp := tmp ^ un ;
26041: LD_ADDR_VAR 0 3
26045: PUSH
26046: LD_VAR 0 3
26050: PUSH
26051: LD_VAR 0 2
26055: ADD
26056: ST_TO_ADDR
// end ;
26057: GO 25953
26059: POP
26060: POP
// repeat wait ( 0 0$1 ) ;
26061: LD_INT 35
26063: PPUSH
26064: CALL_OW 67
// for un in tmp do
26068: LD_ADDR_VAR 0 2
26072: PUSH
26073: LD_VAR 0 3
26077: PUSH
26078: FOR_IN
26079: IFFALSE 26153
// begin if IsDead ( un ) then
26081: LD_VAR 0 2
26085: PPUSH
26086: CALL_OW 301
26090: IFFALSE 26110
// begin tmp := tmp diff un ;
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_VAR 0 3
26101: PUSH
26102: LD_VAR 0 2
26106: DIFF
26107: ST_TO_ADDR
// continue ;
26108: GO 26078
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26110: LD_VAR 0 2
26114: PPUSH
26115: LD_INT 3
26117: PUSH
26118: LD_INT 22
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PPUSH
26132: CALL_OW 69
26136: PPUSH
26137: LD_VAR 0 2
26141: PPUSH
26142: CALL_OW 74
26146: PPUSH
26147: CALL_OW 115
// end ;
26151: GO 26078
26153: POP
26154: POP
// until not tmp ;
26155: LD_VAR 0 3
26159: NOT
26160: IFFALSE 26061
// end ;
26162: PPOPN 3
26164: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26165: LD_EXP 54
26169: PUSH
26170: LD_EXP 79
26174: AND
26175: IFFALSE 26229
26177: GO 26179
26179: DISABLE
// begin ToLua ( displayTroll(); ) ;
26180: LD_STRING displayTroll();
26182: PPUSH
26183: CALL_OW 559
// wait ( 3 3$00 ) ;
26187: LD_INT 6300
26189: PPUSH
26190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26194: LD_STRING hideTroll();
26196: PPUSH
26197: CALL_OW 559
// wait ( 1 1$00 ) ;
26201: LD_INT 2100
26203: PPUSH
26204: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26208: LD_STRING displayTroll();
26210: PPUSH
26211: CALL_OW 559
// wait ( 1 1$00 ) ;
26215: LD_INT 2100
26217: PPUSH
26218: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26222: LD_STRING hideTroll();
26224: PPUSH
26225: CALL_OW 559
// end ;
26229: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26230: LD_EXP 54
26234: PUSH
26235: LD_EXP 80
26239: AND
26240: IFFALSE 26303
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
// begin p := 0 ;
26248: LD_ADDR_VAR 0 1
26252: PUSH
26253: LD_INT 0
26255: ST_TO_ADDR
// repeat game_speed := 1 ;
26256: LD_ADDR_OWVAR 65
26260: PUSH
26261: LD_INT 1
26263: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26264: LD_INT 35
26266: PPUSH
26267: CALL_OW 67
// p := p + 1 ;
26271: LD_ADDR_VAR 0 1
26275: PUSH
26276: LD_VAR 0 1
26280: PUSH
26281: LD_INT 1
26283: PLUS
26284: ST_TO_ADDR
// until p >= 60 ;
26285: LD_VAR 0 1
26289: PUSH
26290: LD_INT 60
26292: GREATEREQUAL
26293: IFFALSE 26256
// game_speed := 4 ;
26295: LD_ADDR_OWVAR 65
26299: PUSH
26300: LD_INT 4
26302: ST_TO_ADDR
// end ;
26303: PPOPN 1
26305: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26306: LD_EXP 54
26310: PUSH
26311: LD_EXP 81
26315: AND
26316: IFFALSE 26462
26318: GO 26320
26320: DISABLE
26321: LD_INT 0
26323: PPUSH
26324: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26325: LD_ADDR_VAR 0 1
26329: PUSH
26330: LD_INT 22
26332: PUSH
26333: LD_OWVAR 2
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: LD_INT 30
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 30
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL_OW 69
26378: ST_TO_ADDR
// if not depot then
26379: LD_VAR 0 1
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26462
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26388: LD_ADDR_VAR 0 2
26392: PUSH
26393: LD_VAR 0 1
26397: PUSH
26398: LD_INT 1
26400: PPUSH
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 12
26410: ARRAY
26411: PPUSH
26412: CALL_OW 274
26416: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26417: LD_VAR 0 2
26421: PPUSH
26422: LD_INT 1
26424: PPUSH
26425: LD_INT 0
26427: PPUSH
26428: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26432: LD_VAR 0 2
26436: PPUSH
26437: LD_INT 2
26439: PPUSH
26440: LD_INT 0
26442: PPUSH
26443: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_INT 3
26454: PPUSH
26455: LD_INT 0
26457: PPUSH
26458: CALL_OW 277
// end ;
26462: PPOPN 2
26464: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26465: LD_EXP 54
26469: PUSH
26470: LD_EXP 82
26474: AND
26475: IFFALSE 26572
26477: GO 26479
26479: DISABLE
26480: LD_INT 0
26482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26483: LD_ADDR_VAR 0 1
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_OWVAR 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 21
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 23
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL_OW 69
26536: ST_TO_ADDR
// if not tmp then
26537: LD_VAR 0 1
26541: NOT
26542: IFFALSE 26546
// exit ;
26544: GO 26572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26546: LD_VAR 0 1
26550: PUSH
26551: LD_INT 1
26553: PPUSH
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 12
26563: ARRAY
26564: PPUSH
26565: LD_INT 200
26567: PPUSH
26568: CALL_OW 234
// end ;
26572: PPOPN 1
26574: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26575: LD_EXP 54
26579: PUSH
26580: LD_EXP 83
26584: AND
26585: IFFALSE 26664
26587: GO 26589
26589: DISABLE
26590: LD_INT 0
26592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26593: LD_ADDR_VAR 0 1
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_OWVAR 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 21
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: ST_TO_ADDR
// if not tmp then
26629: LD_VAR 0 1
26633: NOT
26634: IFFALSE 26638
// exit ;
26636: GO 26664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 1
26645: PPUSH
26646: LD_VAR 0 1
26650: PPUSH
26651: CALL_OW 12
26655: ARRAY
26656: PPUSH
26657: LD_INT 60
26659: PPUSH
26660: CALL_OW 234
// end ;
26664: PPOPN 1
26666: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26667: LD_EXP 54
26671: PUSH
26672: LD_EXP 84
26676: AND
26677: IFFALSE 26776
26679: GO 26681
26681: DISABLE
26682: LD_INT 0
26684: PPUSH
26685: PPUSH
// begin enable ;
26686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26687: LD_ADDR_VAR 0 1
26691: PUSH
26692: LD_INT 22
26694: PUSH
26695: LD_OWVAR 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 61
26706: PUSH
26707: EMPTY
26708: LIST
26709: PUSH
26710: LD_INT 33
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: PPUSH
26725: CALL_OW 69
26729: ST_TO_ADDR
// if not tmp then
26730: LD_VAR 0 1
26734: NOT
26735: IFFALSE 26739
// exit ;
26737: GO 26776
// for i in tmp do
26739: LD_ADDR_VAR 0 2
26743: PUSH
26744: LD_VAR 0 1
26748: PUSH
26749: FOR_IN
26750: IFFALSE 26774
// if IsControledBy ( i ) then
26752: LD_VAR 0 2
26756: PPUSH
26757: CALL_OW 312
26761: IFFALSE 26772
// ComUnlink ( i ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 136
26772: GO 26749
26774: POP
26775: POP
// end ;
26776: PPOPN 2
26778: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26779: LD_EXP 54
26783: PUSH
26784: LD_EXP 85
26788: AND
26789: IFFALSE 26929
26791: GO 26793
26793: DISABLE
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
// begin ToLua ( displayPowell(); ) ;
26798: LD_STRING displayPowell();
26800: PPUSH
26801: CALL_OW 559
// uc_side := 0 ;
26805: LD_ADDR_OWVAR 20
26809: PUSH
26810: LD_INT 0
26812: ST_TO_ADDR
// uc_nation := 2 ;
26813: LD_ADDR_OWVAR 21
26817: PUSH
26818: LD_INT 2
26820: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26821: LD_ADDR_OWVAR 37
26825: PUSH
26826: LD_INT 14
26828: ST_TO_ADDR
// vc_engine := engine_siberite ;
26829: LD_ADDR_OWVAR 39
26833: PUSH
26834: LD_INT 3
26836: ST_TO_ADDR
// vc_control := control_apeman ;
26837: LD_ADDR_OWVAR 38
26841: PUSH
26842: LD_INT 5
26844: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26845: LD_ADDR_OWVAR 40
26849: PUSH
26850: LD_INT 29
26852: ST_TO_ADDR
// un := CreateVehicle ;
26853: LD_ADDR_VAR 0 2
26857: PUSH
26858: CALL_OW 45
26862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26863: LD_VAR 0 2
26867: PPUSH
26868: LD_INT 1
26870: PPUSH
26871: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26875: LD_INT 35
26877: PPUSH
26878: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_INT 22
26889: PUSH
26890: LD_OWVAR 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 69
26903: PPUSH
26904: LD_VAR 0 2
26908: PPUSH
26909: CALL_OW 74
26913: PPUSH
26914: CALL_OW 115
// until IsDead ( un ) ;
26918: LD_VAR 0 2
26922: PPUSH
26923: CALL_OW 301
26927: IFFALSE 26875
// end ;
26929: PPOPN 2
26931: END
// every 0 0$1 trigger StreamModeActive and sStu do
26932: LD_EXP 54
26936: PUSH
26937: LD_EXP 93
26941: AND
26942: IFFALSE 26958
26944: GO 26946
26946: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26947: LD_STRING displayStucuk();
26949: PPUSH
26950: CALL_OW 559
// ResetFog ;
26954: CALL_OW 335
// end ;
26958: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26959: LD_EXP 54
26963: PUSH
26964: LD_EXP 86
26968: AND
26969: IFFALSE 27110
26971: GO 26973
26973: DISABLE
26974: LD_INT 0
26976: PPUSH
26977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_INT 22
26985: PUSH
26986: LD_OWVAR 2
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 21
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PPUSH
27009: CALL_OW 69
27013: ST_TO_ADDR
// if not tmp then
27014: LD_VAR 0 2
27018: NOT
27019: IFFALSE 27023
// exit ;
27021: GO 27110
// un := tmp [ rand ( 1 , tmp ) ] ;
27023: LD_ADDR_VAR 0 1
27027: PUSH
27028: LD_VAR 0 2
27032: PUSH
27033: LD_INT 1
27035: PPUSH
27036: LD_VAR 0 2
27040: PPUSH
27041: CALL_OW 12
27045: ARRAY
27046: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27047: LD_VAR 0 1
27051: PPUSH
27052: LD_INT 0
27054: PPUSH
27055: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27059: LD_VAR 0 1
27063: PPUSH
27064: LD_OWVAR 3
27068: PUSH
27069: LD_VAR 0 1
27073: DIFF
27074: PPUSH
27075: LD_VAR 0 1
27079: PPUSH
27080: CALL_OW 74
27084: PPUSH
27085: CALL_OW 115
// wait ( 0 0$20 ) ;
27089: LD_INT 700
27091: PPUSH
27092: CALL_OW 67
// SetSide ( un , your_side ) ;
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_OWVAR 2
27105: PPUSH
27106: CALL_OW 235
// end ;
27110: PPOPN 2
27112: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27113: LD_EXP 54
27117: PUSH
27118: LD_EXP 87
27122: AND
27123: IFFALSE 27229
27125: GO 27127
27127: DISABLE
27128: LD_INT 0
27130: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27131: LD_ADDR_VAR 0 1
27135: PUSH
27136: LD_INT 22
27138: PUSH
27139: LD_OWVAR 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 30
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 30
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 69
27184: ST_TO_ADDR
// if not depot then
27185: LD_VAR 0 1
27189: NOT
27190: IFFALSE 27194
// exit ;
27192: GO 27229
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27194: LD_VAR 0 1
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: CALL_OW 250
27207: PPUSH
27208: LD_VAR 0 1
27212: PUSH
27213: LD_INT 1
27215: ARRAY
27216: PPUSH
27217: CALL_OW 251
27221: PPUSH
27222: LD_INT 70
27224: PPUSH
27225: CALL_OW 495
// end ;
27229: PPOPN 1
27231: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27232: LD_EXP 54
27236: PUSH
27237: LD_EXP 88
27241: AND
27242: IFFALSE 27453
27244: GO 27246
27246: DISABLE
27247: LD_INT 0
27249: PPUSH
27250: PPUSH
27251: PPUSH
27252: PPUSH
27253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27254: LD_ADDR_VAR 0 5
27258: PUSH
27259: LD_INT 22
27261: PUSH
27262: LD_OWVAR 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 21
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PPUSH
27285: CALL_OW 69
27289: ST_TO_ADDR
// if not tmp then
27290: LD_VAR 0 5
27294: NOT
27295: IFFALSE 27299
// exit ;
27297: GO 27453
// for i in tmp do
27299: LD_ADDR_VAR 0 1
27303: PUSH
27304: LD_VAR 0 5
27308: PUSH
27309: FOR_IN
27310: IFFALSE 27451
// begin d := rand ( 0 , 5 ) ;
27312: LD_ADDR_VAR 0 4
27316: PUSH
27317: LD_INT 0
27319: PPUSH
27320: LD_INT 5
27322: PPUSH
27323: CALL_OW 12
27327: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 250
27342: PPUSH
27343: LD_VAR 0 4
27347: PPUSH
27348: LD_INT 3
27350: PPUSH
27351: LD_INT 12
27353: PPUSH
27354: CALL_OW 12
27358: PPUSH
27359: CALL_OW 272
27363: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 251
27378: PPUSH
27379: LD_VAR 0 4
27383: PPUSH
27384: LD_INT 3
27386: PPUSH
27387: LD_INT 12
27389: PPUSH
27390: CALL_OW 12
27394: PPUSH
27395: CALL_OW 273
27399: ST_TO_ADDR
// if ValidHex ( x , y ) then
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: CALL_OW 488
27414: IFFALSE 27449
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27416: LD_VAR 0 1
27420: PPUSH
27421: LD_VAR 0 2
27425: PPUSH
27426: LD_VAR 0 3
27430: PPUSH
27431: LD_INT 3
27433: PPUSH
27434: LD_INT 6
27436: PPUSH
27437: CALL_OW 12
27441: PPUSH
27442: LD_INT 1
27444: PPUSH
27445: CALL_OW 483
// end ;
27449: GO 27309
27451: POP
27452: POP
// end ;
27453: PPOPN 5
27455: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27456: LD_EXP 54
27460: PUSH
27461: LD_EXP 89
27465: AND
27466: IFFALSE 27560
27468: GO 27470
27470: DISABLE
27471: LD_INT 0
27473: PPUSH
27474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27475: LD_ADDR_VAR 0 2
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_OWVAR 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 32
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 21
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: PPUSH
27517: CALL_OW 69
27521: ST_TO_ADDR
// if not tmp then
27522: LD_VAR 0 2
27526: NOT
27527: IFFALSE 27531
// exit ;
27529: GO 27560
// for i in tmp do
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: FOR_IN
27542: IFFALSE 27558
// SetFuel ( i , 0 ) ;
27544: LD_VAR 0 1
27548: PPUSH
27549: LD_INT 0
27551: PPUSH
27552: CALL_OW 240
27556: GO 27541
27558: POP
27559: POP
// end ;
27560: PPOPN 2
27562: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27563: LD_EXP 54
27567: PUSH
27568: LD_EXP 90
27572: AND
27573: IFFALSE 27639
27575: GO 27577
27577: DISABLE
27578: LD_INT 0
27580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27581: LD_ADDR_VAR 0 1
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_OWVAR 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 30
27600: PUSH
27601: LD_INT 29
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PPUSH
27612: CALL_OW 69
27616: ST_TO_ADDR
// if not tmp then
27617: LD_VAR 0 1
27621: NOT
27622: IFFALSE 27626
// exit ;
27624: GO 27639
// DestroyUnit ( tmp [ 1 ] ) ;
27626: LD_VAR 0 1
27630: PUSH
27631: LD_INT 1
27633: ARRAY
27634: PPUSH
27635: CALL_OW 65
// end ;
27639: PPOPN 1
27641: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27642: LD_EXP 54
27646: PUSH
27647: LD_EXP 92
27651: AND
27652: IFFALSE 27781
27654: GO 27656
27656: DISABLE
27657: LD_INT 0
27659: PPUSH
// begin uc_side := 0 ;
27660: LD_ADDR_OWVAR 20
27664: PUSH
27665: LD_INT 0
27667: ST_TO_ADDR
// uc_nation := nation_arabian ;
27668: LD_ADDR_OWVAR 21
27672: PUSH
27673: LD_INT 2
27675: ST_TO_ADDR
// hc_gallery :=  ;
27676: LD_ADDR_OWVAR 33
27680: PUSH
27681: LD_STRING 
27683: ST_TO_ADDR
// hc_name :=  ;
27684: LD_ADDR_OWVAR 26
27688: PUSH
27689: LD_STRING 
27691: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27692: LD_INT 1
27694: PPUSH
27695: LD_INT 11
27697: PPUSH
27698: LD_INT 10
27700: PPUSH
27701: CALL_OW 380
// un := CreateHuman ;
27705: LD_ADDR_VAR 0 1
27709: PUSH
27710: CALL_OW 44
27714: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27715: LD_VAR 0 1
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27727: LD_INT 35
27729: PPUSH
27730: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_INT 22
27741: PUSH
27742: LD_OWVAR 2
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PPUSH
27751: CALL_OW 69
27755: PPUSH
27756: LD_VAR 0 1
27760: PPUSH
27761: CALL_OW 74
27765: PPUSH
27766: CALL_OW 115
// until IsDead ( un ) ;
27770: LD_VAR 0 1
27774: PPUSH
27775: CALL_OW 301
27779: IFFALSE 27727
// end ;
27781: PPOPN 1
27783: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27784: LD_EXP 54
27788: PUSH
27789: LD_EXP 94
27793: AND
27794: IFFALSE 27806
27796: GO 27798
27798: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27799: LD_STRING earthquake(getX(game), 0, 32)
27801: PPUSH
27802: CALL_OW 559
27806: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27807: LD_EXP 54
27811: PUSH
27812: LD_EXP 95
27816: AND
27817: IFFALSE 27908
27819: GO 27821
27821: DISABLE
27822: LD_INT 0
27824: PPUSH
// begin enable ;
27825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27826: LD_ADDR_VAR 0 1
27830: PUSH
27831: LD_INT 22
27833: PUSH
27834: LD_OWVAR 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 21
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 33
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: PPUSH
27868: CALL_OW 69
27872: ST_TO_ADDR
// if not tmp then
27873: LD_VAR 0 1
27877: NOT
27878: IFFALSE 27882
// exit ;
27880: GO 27908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27882: LD_VAR 0 1
27886: PUSH
27887: LD_INT 1
27889: PPUSH
27890: LD_VAR 0 1
27894: PPUSH
27895: CALL_OW 12
27899: ARRAY
27900: PPUSH
27901: LD_INT 1
27903: PPUSH
27904: CALL_OW 234
// end ;
27908: PPOPN 1
27910: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27911: LD_EXP 54
27915: PUSH
27916: LD_EXP 96
27920: AND
27921: IFFALSE 28062
27923: GO 27925
27925: DISABLE
27926: LD_INT 0
27928: PPUSH
27929: PPUSH
27930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_OWVAR 2
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 25
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PPUSH
27962: CALL_OW 69
27966: ST_TO_ADDR
// if not tmp then
27967: LD_VAR 0 3
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28062
// un := tmp [ rand ( 1 , tmp ) ] ;
27976: LD_ADDR_VAR 0 2
27980: PUSH
27981: LD_VAR 0 3
27985: PUSH
27986: LD_INT 1
27988: PPUSH
27989: LD_VAR 0 3
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: ST_TO_ADDR
// if Crawls ( un ) then
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL_OW 318
28009: IFFALSE 28020
// ComWalk ( un ) ;
28011: LD_VAR 0 2
28015: PPUSH
28016: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28020: LD_VAR 0 2
28024: PPUSH
28025: LD_INT 9
28027: PPUSH
28028: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28032: LD_INT 28
28034: PPUSH
28035: LD_OWVAR 2
28039: PPUSH
28040: LD_INT 2
28042: PPUSH
28043: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28047: LD_INT 29
28049: PPUSH
28050: LD_OWVAR 2
28054: PPUSH
28055: LD_INT 2
28057: PPUSH
28058: CALL_OW 322
// end ;
28062: PPOPN 3
28064: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28065: LD_EXP 54
28069: PUSH
28070: LD_EXP 97
28074: AND
28075: IFFALSE 28186
28077: GO 28079
28079: DISABLE
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
28084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_OWVAR 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 25
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 3
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28186
// un := tmp [ rand ( 1 , tmp ) ] ;
28130: LD_ADDR_VAR 0 2
28134: PUSH
28135: LD_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: PPUSH
28143: LD_VAR 0 3
28147: PPUSH
28148: CALL_OW 12
28152: ARRAY
28153: ST_TO_ADDR
// if Crawls ( un ) then
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 318
28163: IFFALSE 28174
// ComWalk ( un ) ;
28165: LD_VAR 0 2
28169: PPUSH
28170: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28174: LD_VAR 0 2
28178: PPUSH
28179: LD_INT 8
28181: PPUSH
28182: CALL_OW 336
// end ;
28186: PPOPN 3
28188: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28189: LD_EXP 54
28193: PUSH
28194: LD_EXP 98
28198: AND
28199: IFFALSE 28343
28201: GO 28203
28203: DISABLE
28204: LD_INT 0
28206: PPUSH
28207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28208: LD_ADDR_VAR 0 2
28212: PUSH
28213: LD_INT 22
28215: PUSH
28216: LD_OWVAR 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 21
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: LD_INT 34
28240: PUSH
28241: LD_INT 12
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 34
28250: PUSH
28251: LD_INT 51
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 34
28260: PUSH
28261: LD_INT 32
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: ST_TO_ADDR
// if not tmp then
28284: LD_VAR 0 2
28288: NOT
28289: IFFALSE 28293
// exit ;
28291: GO 28343
// for i in tmp do
28293: LD_ADDR_VAR 0 1
28297: PUSH
28298: LD_VAR 0 2
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28341
// if GetCargo ( i , mat_artifact ) = 0 then
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_INT 4
28313: PPUSH
28314: CALL_OW 289
28318: PUSH
28319: LD_INT 0
28321: EQUAL
28322: IFFALSE 28339
// SetCargo ( i , mat_siberit , 100 ) ;
28324: LD_VAR 0 1
28328: PPUSH
28329: LD_INT 3
28331: PPUSH
28332: LD_INT 100
28334: PPUSH
28335: CALL_OW 290
28339: GO 28303
28341: POP
28342: POP
// end ;
28343: PPOPN 2
28345: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28346: LD_EXP 54
28350: PUSH
28351: LD_EXP 99
28355: AND
28356: IFFALSE 28539
28358: GO 28360
28360: DISABLE
28361: LD_INT 0
28363: PPUSH
28364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28365: LD_ADDR_VAR 0 2
28369: PUSH
28370: LD_INT 22
28372: PUSH
28373: LD_OWVAR 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PPUSH
28382: CALL_OW 69
28386: ST_TO_ADDR
// if not tmp then
28387: LD_VAR 0 2
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28539
// for i := 1 to 2 do
28396: LD_ADDR_VAR 0 1
28400: PUSH
28401: DOUBLE
28402: LD_INT 1
28404: DEC
28405: ST_TO_ADDR
28406: LD_INT 2
28408: PUSH
28409: FOR_TO
28410: IFFALSE 28537
// begin uc_side := your_side ;
28412: LD_ADDR_OWVAR 20
28416: PUSH
28417: LD_OWVAR 2
28421: ST_TO_ADDR
// uc_nation := nation_american ;
28422: LD_ADDR_OWVAR 21
28426: PUSH
28427: LD_INT 1
28429: ST_TO_ADDR
// vc_chassis := us_morphling ;
28430: LD_ADDR_OWVAR 37
28434: PUSH
28435: LD_INT 5
28437: ST_TO_ADDR
// vc_engine := engine_siberite ;
28438: LD_ADDR_OWVAR 39
28442: PUSH
28443: LD_INT 3
28445: ST_TO_ADDR
// vc_control := control_computer ;
28446: LD_ADDR_OWVAR 38
28450: PUSH
28451: LD_INT 3
28453: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28454: LD_ADDR_OWVAR 40
28458: PUSH
28459: LD_INT 10
28461: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28462: LD_VAR 0 2
28466: PUSH
28467: LD_INT 1
28469: ARRAY
28470: PPUSH
28471: CALL_OW 310
28475: NOT
28476: IFFALSE 28523
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28478: CALL_OW 45
28482: PPUSH
28483: LD_VAR 0 2
28487: PUSH
28488: LD_INT 1
28490: ARRAY
28491: PPUSH
28492: CALL_OW 250
28496: PPUSH
28497: LD_VAR 0 2
28501: PUSH
28502: LD_INT 1
28504: ARRAY
28505: PPUSH
28506: CALL_OW 251
28510: PPUSH
28511: LD_INT 12
28513: PPUSH
28514: LD_INT 1
28516: PPUSH
28517: CALL_OW 50
28521: GO 28535
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28523: CALL_OW 45
28527: PPUSH
28528: LD_INT 1
28530: PPUSH
28531: CALL_OW 51
// end ;
28535: GO 28409
28537: POP
28538: POP
// end ;
28539: PPOPN 2
28541: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28542: LD_EXP 54
28546: PUSH
28547: LD_EXP 100
28551: AND
28552: IFFALSE 28774
28554: GO 28556
28556: DISABLE
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28565: LD_ADDR_VAR 0 6
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 21
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: PUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 69
28618: ST_TO_ADDR
// if not tmp then
28619: LD_VAR 0 6
28623: NOT
28624: IFFALSE 28628
// exit ;
28626: GO 28774
// s1 := rand ( 1 , 4 ) ;
28628: LD_ADDR_VAR 0 2
28632: PUSH
28633: LD_INT 1
28635: PPUSH
28636: LD_INT 4
28638: PPUSH
28639: CALL_OW 12
28643: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28644: LD_ADDR_VAR 0 4
28648: PUSH
28649: LD_VAR 0 6
28653: PUSH
28654: LD_INT 1
28656: ARRAY
28657: PPUSH
28658: LD_VAR 0 2
28662: PPUSH
28663: CALL_OW 259
28667: ST_TO_ADDR
// if s1 = 1 then
28668: LD_VAR 0 2
28672: PUSH
28673: LD_INT 1
28675: EQUAL
28676: IFFALSE 28696
// s2 := rand ( 2 , 4 ) else
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_INT 2
28685: PPUSH
28686: LD_INT 4
28688: PPUSH
28689: CALL_OW 12
28693: ST_TO_ADDR
28694: GO 28704
// s2 := 1 ;
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 1
28703: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28704: LD_ADDR_VAR 0 5
28708: PUSH
28709: LD_VAR 0 6
28713: PUSH
28714: LD_INT 1
28716: ARRAY
28717: PPUSH
28718: LD_VAR 0 3
28722: PPUSH
28723: CALL_OW 259
28727: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28728: LD_VAR 0 6
28732: PUSH
28733: LD_INT 1
28735: ARRAY
28736: PPUSH
28737: LD_VAR 0 2
28741: PPUSH
28742: LD_VAR 0 5
28746: PPUSH
28747: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28751: LD_VAR 0 6
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: LD_VAR 0 3
28764: PPUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: CALL_OW 237
// end ;
28774: PPOPN 6
28776: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28777: LD_EXP 54
28781: PUSH
28782: LD_EXP 101
28786: AND
28787: IFFALSE 28866
28789: GO 28791
28791: DISABLE
28792: LD_INT 0
28794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28795: LD_ADDR_VAR 0 1
28799: PUSH
28800: LD_INT 22
28802: PUSH
28803: LD_OWVAR 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: CALL_OW 69
28830: ST_TO_ADDR
// if not tmp then
28831: LD_VAR 0 1
28835: NOT
28836: IFFALSE 28840
// exit ;
28838: GO 28866
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28840: LD_VAR 0 1
28844: PUSH
28845: LD_INT 1
28847: PPUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 12
28857: ARRAY
28858: PPUSH
28859: LD_INT 1
28861: PPUSH
28862: CALL_OW 234
// end ;
28866: PPOPN 1
28868: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28869: LD_EXP 54
28873: PUSH
28874: LD_EXP 102
28878: AND
28879: IFFALSE 28991
28881: GO 28883
28883: DISABLE
28884: LD_INT 0
28886: PPUSH
28887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28888: LD_ADDR_VAR 0 2
28892: PUSH
28893: LD_INT 22
28895: PUSH
28896: LD_OWVAR 2
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 30
28910: PUSH
28911: LD_INT 27
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 30
28920: PUSH
28921: LD_INT 26
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 30
28930: PUSH
28931: LD_INT 28
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 69
28952: ST_TO_ADDR
// if not tmp then
28953: LD_VAR 0 2
28957: NOT
28958: IFFALSE 28962
// exit ;
28960: GO 28991
// for i in tmp do
28962: LD_ADDR_VAR 0 1
28966: PUSH
28967: LD_VAR 0 2
28971: PUSH
28972: FOR_IN
28973: IFFALSE 28989
// SetLives ( i , 1 ) ;
28975: LD_VAR 0 1
28979: PPUSH
28980: LD_INT 1
28982: PPUSH
28983: CALL_OW 234
28987: GO 28972
28989: POP
28990: POP
// end ;
28991: PPOPN 2
28993: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28994: LD_EXP 54
28998: PUSH
28999: LD_EXP 103
29003: AND
29004: IFFALSE 29291
29006: GO 29008
29008: DISABLE
29009: LD_INT 0
29011: PPUSH
29012: PPUSH
29013: PPUSH
// begin i := rand ( 1 , 7 ) ;
29014: LD_ADDR_VAR 0 1
29018: PUSH
29019: LD_INT 1
29021: PPUSH
29022: LD_INT 7
29024: PPUSH
29025: CALL_OW 12
29029: ST_TO_ADDR
// case i of 1 :
29030: LD_VAR 0 1
29034: PUSH
29035: LD_INT 1
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29053
29043: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29044: LD_STRING earthquake(getX(game), 0, 32)
29046: PPUSH
29047: CALL_OW 559
29051: GO 29291
29053: LD_INT 2
29055: DOUBLE
29056: EQUAL
29057: IFTRUE 29061
29059: GO 29075
29061: POP
// begin ToLua ( displayStucuk(); ) ;
29062: LD_STRING displayStucuk();
29064: PPUSH
29065: CALL_OW 559
// ResetFog ;
29069: CALL_OW 335
// end ; 3 :
29073: GO 29291
29075: LD_INT 3
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29187
29083: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29084: LD_ADDR_VAR 0 2
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_OWVAR 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 25
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PPUSH
29115: CALL_OW 69
29119: ST_TO_ADDR
// if not tmp then
29120: LD_VAR 0 2
29124: NOT
29125: IFFALSE 29129
// exit ;
29127: GO 29291
// un := tmp [ rand ( 1 , tmp ) ] ;
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_VAR 0 2
29138: PUSH
29139: LD_INT 1
29141: PPUSH
29142: LD_VAR 0 2
29146: PPUSH
29147: CALL_OW 12
29151: ARRAY
29152: ST_TO_ADDR
// if Crawls ( un ) then
29153: LD_VAR 0 3
29157: PPUSH
29158: CALL_OW 318
29162: IFFALSE 29173
// ComWalk ( un ) ;
29164: LD_VAR 0 3
29168: PPUSH
29169: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29173: LD_VAR 0 3
29177: PPUSH
29178: LD_INT 8
29180: PPUSH
29181: CALL_OW 336
// end ; 4 :
29185: GO 29291
29187: LD_INT 4
29189: DOUBLE
29190: EQUAL
29191: IFTRUE 29195
29193: GO 29269
29195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29196: LD_ADDR_VAR 0 2
29200: PUSH
29201: LD_INT 22
29203: PUSH
29204: LD_OWVAR 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 30
29215: PUSH
29216: LD_INT 29
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PPUSH
29227: CALL_OW 69
29231: ST_TO_ADDR
// if not tmp then
29232: LD_VAR 0 2
29236: NOT
29237: IFFALSE 29241
// exit ;
29239: GO 29291
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29241: LD_VAR 0 2
29245: PUSH
29246: LD_INT 1
29248: ARRAY
29249: PPUSH
29250: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29254: LD_VAR 0 2
29258: PUSH
29259: LD_INT 1
29261: ARRAY
29262: PPUSH
29263: CALL_OW 65
// end ; 5 .. 7 :
29267: GO 29291
29269: LD_INT 5
29271: DOUBLE
29272: GREATEREQUAL
29273: IFFALSE 29281
29275: LD_INT 7
29277: DOUBLE
29278: LESSEQUAL
29279: IFTRUE 29283
29281: GO 29290
29283: POP
// StreamSibBomb ; end ;
29284: CALL 25528 0 0
29288: GO 29291
29290: POP
// end ;
29291: PPOPN 3
29293: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29294: LD_EXP 54
29298: PUSH
29299: LD_EXP 104
29303: AND
29304: IFFALSE 29460
29306: GO 29308
29308: DISABLE
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
29313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29314: LD_ADDR_VAR 0 2
29318: PUSH
29319: LD_INT 81
29321: PUSH
29322: LD_OWVAR 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 21
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 21
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: ST_TO_ADDR
// if not tmp then
29368: LD_VAR 0 2
29372: NOT
29373: IFFALSE 29377
// exit ;
29375: GO 29460
// p := 0 ;
29377: LD_ADDR_VAR 0 3
29381: PUSH
29382: LD_INT 0
29384: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29385: LD_INT 35
29387: PPUSH
29388: CALL_OW 67
// p := p + 1 ;
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_VAR 0 3
29401: PUSH
29402: LD_INT 1
29404: PLUS
29405: ST_TO_ADDR
// for i in tmp do
29406: LD_ADDR_VAR 0 1
29410: PUSH
29411: LD_VAR 0 2
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29448
// if GetLives ( i ) < 1000 then
29419: LD_VAR 0 1
29423: PPUSH
29424: CALL_OW 256
29428: PUSH
29429: LD_INT 1000
29431: LESS
29432: IFFALSE 29446
// SetLives ( i , 1000 ) ;
29434: LD_VAR 0 1
29438: PPUSH
29439: LD_INT 1000
29441: PPUSH
29442: CALL_OW 234
29446: GO 29416
29448: POP
29449: POP
// until p > 20 ;
29450: LD_VAR 0 3
29454: PUSH
29455: LD_INT 20
29457: GREATER
29458: IFFALSE 29385
// end ;
29460: PPOPN 3
29462: END
// every 0 0$1 trigger StreamModeActive and sTime do
29463: LD_EXP 54
29467: PUSH
29468: LD_EXP 105
29472: AND
29473: IFFALSE 29508
29475: GO 29477
29477: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29478: LD_INT 28
29480: PPUSH
29481: LD_OWVAR 2
29485: PPUSH
29486: LD_INT 2
29488: PPUSH
29489: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29493: LD_INT 30
29495: PPUSH
29496: LD_OWVAR 2
29500: PPUSH
29501: LD_INT 2
29503: PPUSH
29504: CALL_OW 322
// end ;
29508: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29509: LD_EXP 54
29513: PUSH
29514: LD_EXP 106
29518: AND
29519: IFFALSE 29640
29521: GO 29523
29523: DISABLE
29524: LD_INT 0
29526: PPUSH
29527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29528: LD_ADDR_VAR 0 2
29532: PUSH
29533: LD_INT 22
29535: PUSH
29536: LD_OWVAR 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 21
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: LD_INT 23
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 69
29581: ST_TO_ADDR
// if not tmp then
29582: LD_VAR 0 2
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 29640
// for i in tmp do
29591: LD_ADDR_VAR 0 1
29595: PUSH
29596: LD_VAR 0 2
29600: PUSH
29601: FOR_IN
29602: IFFALSE 29638
// begin if Crawls ( i ) then
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 318
29613: IFFALSE 29624
// ComWalk ( i ) ;
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 138
// SetClass ( i , 2 ) ;
29624: LD_VAR 0 1
29628: PPUSH
29629: LD_INT 2
29631: PPUSH
29632: CALL_OW 336
// end ;
29636: GO 29601
29638: POP
29639: POP
// end ;
29640: PPOPN 2
29642: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29643: LD_EXP 54
29647: PUSH
29648: LD_EXP 107
29652: AND
29653: IFFALSE 29941
29655: GO 29657
29657: DISABLE
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
29662: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29663: LD_OWVAR 2
29667: PPUSH
29668: LD_INT 9
29670: PPUSH
29671: LD_INT 1
29673: PPUSH
29674: LD_INT 1
29676: PPUSH
29677: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29681: LD_INT 9
29683: PPUSH
29684: LD_OWVAR 2
29688: PPUSH
29689: CALL_OW 343
// uc_side := 9 ;
29693: LD_ADDR_OWVAR 20
29697: PUSH
29698: LD_INT 9
29700: ST_TO_ADDR
// uc_nation := 2 ;
29701: LD_ADDR_OWVAR 21
29705: PUSH
29706: LD_INT 2
29708: ST_TO_ADDR
// hc_name := Dark Warrior ;
29709: LD_ADDR_OWVAR 26
29713: PUSH
29714: LD_STRING Dark Warrior
29716: ST_TO_ADDR
// hc_gallery :=  ;
29717: LD_ADDR_OWVAR 33
29721: PUSH
29722: LD_STRING 
29724: ST_TO_ADDR
// hc_noskilllimit := true ;
29725: LD_ADDR_OWVAR 76
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29733: LD_ADDR_OWVAR 31
29737: PUSH
29738: LD_INT 30
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: LD_INT 30
29746: PUSH
29747: LD_INT 30
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// un := CreateHuman ;
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: CALL_OW 44
29765: ST_TO_ADDR
// hc_noskilllimit := false ;
29766: LD_ADDR_OWVAR 76
29770: PUSH
29771: LD_INT 0
29773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29774: LD_VAR 0 3
29778: PPUSH
29779: LD_INT 1
29781: PPUSH
29782: CALL_OW 51
// ToLua ( playRanger() ) ;
29786: LD_STRING playRanger()
29788: PPUSH
29789: CALL_OW 559
// p := 0 ;
29793: LD_ADDR_VAR 0 2
29797: PUSH
29798: LD_INT 0
29800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29801: LD_INT 35
29803: PPUSH
29804: CALL_OW 67
// p := p + 1 ;
29808: LD_ADDR_VAR 0 2
29812: PUSH
29813: LD_VAR 0 2
29817: PUSH
29818: LD_INT 1
29820: PLUS
29821: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29822: LD_VAR 0 3
29826: PPUSH
29827: CALL_OW 256
29831: PUSH
29832: LD_INT 1000
29834: LESS
29835: IFFALSE 29849
// SetLives ( un , 1000 ) ;
29837: LD_VAR 0 3
29841: PPUSH
29842: LD_INT 1000
29844: PPUSH
29845: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_INT 81
29856: PUSH
29857: LD_OWVAR 2
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 91
29868: PUSH
29869: LD_VAR 0 3
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 69
29890: PPUSH
29891: LD_VAR 0 3
29895: PPUSH
29896: CALL_OW 74
29900: PPUSH
29901: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29905: LD_VAR 0 2
29909: PUSH
29910: LD_INT 80
29912: GREATER
29913: PUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: CALL_OW 301
29923: OR
29924: IFFALSE 29801
// if un then
29926: LD_VAR 0 3
29930: IFFALSE 29941
// RemoveUnit ( un ) ;
29932: LD_VAR 0 3
29936: PPUSH
29937: CALL_OW 64
// end ;
29941: PPOPN 3
29943: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29944: LD_EXP 108
29948: IFFALSE 30064
29950: GO 29952
29952: DISABLE
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29958: LD_ADDR_VAR 0 2
29962: PUSH
29963: LD_INT 81
29965: PUSH
29966: LD_OWVAR 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 21
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PPUSH
29989: CALL_OW 69
29993: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29994: LD_STRING playComputer()
29996: PPUSH
29997: CALL_OW 559
// if not tmp then
30001: LD_VAR 0 2
30005: NOT
30006: IFFALSE 30010
// exit ;
30008: GO 30064
// for i in tmp do
30010: LD_ADDR_VAR 0 1
30014: PUSH
30015: LD_VAR 0 2
30019: PUSH
30020: FOR_IN
30021: IFFALSE 30062
// for j := 1 to 4 do
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: DOUBLE
30029: LD_INT 1
30031: DEC
30032: ST_TO_ADDR
30033: LD_INT 4
30035: PUSH
30036: FOR_TO
30037: IFFALSE 30058
// SetSkill ( i , j , 10 ) ;
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_VAR 0 3
30048: PPUSH
30049: LD_INT 10
30051: PPUSH
30052: CALL_OW 237
30056: GO 30036
30058: POP
30059: POP
30060: GO 30020
30062: POP
30063: POP
// end ;
30064: PPOPN 3
30066: END
// every 0 0$1 trigger s30 do var i , tmp ;
30067: LD_EXP 109
30071: IFFALSE 30140
30073: GO 30075
30075: DISABLE
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_OWVAR 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PPUSH
30097: CALL_OW 69
30101: ST_TO_ADDR
// if not tmp then
30102: LD_VAR 0 2
30106: NOT
30107: IFFALSE 30111
// exit ;
30109: GO 30140
// for i in tmp do
30111: LD_ADDR_VAR 0 1
30115: PUSH
30116: LD_VAR 0 2
30120: PUSH
30121: FOR_IN
30122: IFFALSE 30138
// SetLives ( i , 300 ) ;
30124: LD_VAR 0 1
30128: PPUSH
30129: LD_INT 300
30131: PPUSH
30132: CALL_OW 234
30136: GO 30121
30138: POP
30139: POP
// end ;
30140: PPOPN 2
30142: END
// every 0 0$1 trigger s60 do var i , tmp ;
30143: LD_EXP 110
30147: IFFALSE 30216
30149: GO 30151
30151: DISABLE
30152: LD_INT 0
30154: PPUSH
30155: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_INT 22
30163: PUSH
30164: LD_OWVAR 2
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: ST_TO_ADDR
// if not tmp then
30178: LD_VAR 0 2
30182: NOT
30183: IFFALSE 30187
// exit ;
30185: GO 30216
// for i in tmp do
30187: LD_ADDR_VAR 0 1
30191: PUSH
30192: LD_VAR 0 2
30196: PUSH
30197: FOR_IN
30198: IFFALSE 30214
// SetLives ( i , 600 ) ;
30200: LD_VAR 0 1
30204: PPUSH
30205: LD_INT 600
30207: PPUSH
30208: CALL_OW 234
30212: GO 30197
30214: POP
30215: POP
// end ;
30216: PPOPN 2
30218: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30219: LD_INT 0
30221: PPUSH
// case cmd of 301 :
30222: LD_VAR 0 1
30226: PUSH
30227: LD_INT 301
30229: DOUBLE
30230: EQUAL
30231: IFTRUE 30235
30233: GO 30267
30235: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30236: LD_VAR 0 6
30240: PPUSH
30241: LD_VAR 0 7
30245: PPUSH
30246: LD_VAR 0 8
30250: PPUSH
30251: LD_VAR 0 4
30255: PPUSH
30256: LD_VAR 0 5
30260: PPUSH
30261: CALL 31476 0 5
30265: GO 30388
30267: LD_INT 302
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30312
30275: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30276: LD_VAR 0 6
30280: PPUSH
30281: LD_VAR 0 7
30285: PPUSH
30286: LD_VAR 0 8
30290: PPUSH
30291: LD_VAR 0 9
30295: PPUSH
30296: LD_VAR 0 4
30300: PPUSH
30301: LD_VAR 0 5
30305: PPUSH
30306: CALL 31567 0 6
30310: GO 30388
30312: LD_INT 303
30314: DOUBLE
30315: EQUAL
30316: IFTRUE 30320
30318: GO 30357
30320: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30321: LD_VAR 0 6
30325: PPUSH
30326: LD_VAR 0 7
30330: PPUSH
30331: LD_VAR 0 8
30335: PPUSH
30336: LD_VAR 0 9
30340: PPUSH
30341: LD_VAR 0 4
30345: PPUSH
30346: LD_VAR 0 5
30350: PPUSH
30351: CALL 30393 0 6
30355: GO 30388
30357: LD_INT 304
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30387
30365: POP
// hHackTeleport ( unit , x , y ) ; end ;
30366: LD_VAR 0 2
30370: PPUSH
30371: LD_VAR 0 4
30375: PPUSH
30376: LD_VAR 0 5
30380: PPUSH
30381: CALL 32160 0 3
30385: GO 30388
30387: POP
// end ;
30388: LD_VAR 0 12
30392: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30397: LD_VAR 0 1
30401: PUSH
30402: LD_INT 1
30404: LESS
30405: PUSH
30406: LD_VAR 0 1
30410: PUSH
30411: LD_INT 3
30413: GREATER
30414: OR
30415: PUSH
30416: LD_VAR 0 5
30420: PPUSH
30421: LD_VAR 0 6
30425: PPUSH
30426: CALL_OW 428
30430: OR
30431: IFFALSE 30435
// exit ;
30433: GO 31163
// uc_side := your_side ;
30435: LD_ADDR_OWVAR 20
30439: PUSH
30440: LD_OWVAR 2
30444: ST_TO_ADDR
// uc_nation := nation ;
30445: LD_ADDR_OWVAR 21
30449: PUSH
30450: LD_VAR 0 1
30454: ST_TO_ADDR
// bc_level = 1 ;
30455: LD_ADDR_OWVAR 43
30459: PUSH
30460: LD_INT 1
30462: ST_TO_ADDR
// case btype of 1 :
30463: LD_VAR 0 2
30467: PUSH
30468: LD_INT 1
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 30487
30476: POP
// bc_type := b_depot ; 2 :
30477: LD_ADDR_OWVAR 42
30481: PUSH
30482: LD_INT 0
30484: ST_TO_ADDR
30485: GO 31107
30487: LD_INT 2
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30506
30495: POP
// bc_type := b_warehouse ; 3 :
30496: LD_ADDR_OWVAR 42
30500: PUSH
30501: LD_INT 1
30503: ST_TO_ADDR
30504: GO 31107
30506: LD_INT 3
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30525
30514: POP
// bc_type := b_lab ; 4 .. 9 :
30515: LD_ADDR_OWVAR 42
30519: PUSH
30520: LD_INT 6
30522: ST_TO_ADDR
30523: GO 31107
30525: LD_INT 4
30527: DOUBLE
30528: GREATEREQUAL
30529: IFFALSE 30537
30531: LD_INT 9
30533: DOUBLE
30534: LESSEQUAL
30535: IFTRUE 30539
30537: GO 30599
30539: POP
// begin bc_type := b_lab_half ;
30540: LD_ADDR_OWVAR 42
30544: PUSH
30545: LD_INT 7
30547: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30548: LD_ADDR_OWVAR 44
30552: PUSH
30553: LD_INT 10
30555: PUSH
30556: LD_INT 11
30558: PUSH
30559: LD_INT 12
30561: PUSH
30562: LD_INT 15
30564: PUSH
30565: LD_INT 14
30567: PUSH
30568: LD_INT 13
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: PUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_INT 3
30586: MINUS
30587: ARRAY
30588: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30589: LD_ADDR_OWVAR 45
30593: PUSH
30594: LD_INT 9
30596: ST_TO_ADDR
// end ; 10 .. 13 :
30597: GO 31107
30599: LD_INT 10
30601: DOUBLE
30602: GREATEREQUAL
30603: IFFALSE 30611
30605: LD_INT 13
30607: DOUBLE
30608: LESSEQUAL
30609: IFTRUE 30613
30611: GO 30690
30613: POP
// begin bc_type := b_lab_full ;
30614: LD_ADDR_OWVAR 42
30618: PUSH
30619: LD_INT 8
30621: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30622: LD_ADDR_OWVAR 44
30626: PUSH
30627: LD_INT 10
30629: PUSH
30630: LD_INT 12
30632: PUSH
30633: LD_INT 14
30635: PUSH
30636: LD_INT 13
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: PUSH
30645: LD_VAR 0 2
30649: PUSH
30650: LD_INT 9
30652: MINUS
30653: ARRAY
30654: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30655: LD_ADDR_OWVAR 45
30659: PUSH
30660: LD_INT 11
30662: PUSH
30663: LD_INT 15
30665: PUSH
30666: LD_INT 12
30668: PUSH
30669: LD_INT 15
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_INT 9
30685: MINUS
30686: ARRAY
30687: ST_TO_ADDR
// end ; 14 :
30688: GO 31107
30690: LD_INT 14
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30709
30698: POP
// bc_type := b_workshop ; 15 :
30699: LD_ADDR_OWVAR 42
30703: PUSH
30704: LD_INT 2
30706: ST_TO_ADDR
30707: GO 31107
30709: LD_INT 15
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30728
30717: POP
// bc_type := b_factory ; 16 :
30718: LD_ADDR_OWVAR 42
30722: PUSH
30723: LD_INT 3
30725: ST_TO_ADDR
30726: GO 31107
30728: LD_INT 16
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30747
30736: POP
// bc_type := b_ext_gun ; 17 :
30737: LD_ADDR_OWVAR 42
30741: PUSH
30742: LD_INT 17
30744: ST_TO_ADDR
30745: GO 31107
30747: LD_INT 17
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30783
30755: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30756: LD_ADDR_OWVAR 42
30760: PUSH
30761: LD_INT 19
30763: PUSH
30764: LD_INT 23
30766: PUSH
30767: LD_INT 19
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: PUSH
30775: LD_VAR 0 1
30779: ARRAY
30780: ST_TO_ADDR
30781: GO 31107
30783: LD_INT 18
30785: DOUBLE
30786: EQUAL
30787: IFTRUE 30791
30789: GO 30802
30791: POP
// bc_type := b_ext_radar ; 19 :
30792: LD_ADDR_OWVAR 42
30796: PUSH
30797: LD_INT 20
30799: ST_TO_ADDR
30800: GO 31107
30802: LD_INT 19
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30821
30810: POP
// bc_type := b_ext_radio ; 20 :
30811: LD_ADDR_OWVAR 42
30815: PUSH
30816: LD_INT 22
30818: ST_TO_ADDR
30819: GO 31107
30821: LD_INT 20
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30840
30829: POP
// bc_type := b_ext_siberium ; 21 :
30830: LD_ADDR_OWVAR 42
30834: PUSH
30835: LD_INT 21
30837: ST_TO_ADDR
30838: GO 31107
30840: LD_INT 21
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30859
30848: POP
// bc_type := b_ext_computer ; 22 :
30849: LD_ADDR_OWVAR 42
30853: PUSH
30854: LD_INT 24
30856: ST_TO_ADDR
30857: GO 31107
30859: LD_INT 22
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30878
30867: POP
// bc_type := b_ext_track ; 23 :
30868: LD_ADDR_OWVAR 42
30872: PUSH
30873: LD_INT 16
30875: ST_TO_ADDR
30876: GO 31107
30878: LD_INT 23
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30897
30886: POP
// bc_type := b_ext_laser ; 24 :
30887: LD_ADDR_OWVAR 42
30891: PUSH
30892: LD_INT 25
30894: ST_TO_ADDR
30895: GO 31107
30897: LD_INT 24
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30916
30905: POP
// bc_type := b_control_tower ; 25 :
30906: LD_ADDR_OWVAR 42
30910: PUSH
30911: LD_INT 36
30913: ST_TO_ADDR
30914: GO 31107
30916: LD_INT 25
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30935
30924: POP
// bc_type := b_breastwork ; 26 :
30925: LD_ADDR_OWVAR 42
30929: PUSH
30930: LD_INT 31
30932: ST_TO_ADDR
30933: GO 31107
30935: LD_INT 26
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30954
30943: POP
// bc_type := b_bunker ; 27 :
30944: LD_ADDR_OWVAR 42
30948: PUSH
30949: LD_INT 32
30951: ST_TO_ADDR
30952: GO 31107
30954: LD_INT 27
30956: DOUBLE
30957: EQUAL
30958: IFTRUE 30962
30960: GO 30973
30962: POP
// bc_type := b_turret ; 28 :
30963: LD_ADDR_OWVAR 42
30967: PUSH
30968: LD_INT 33
30970: ST_TO_ADDR
30971: GO 31107
30973: LD_INT 28
30975: DOUBLE
30976: EQUAL
30977: IFTRUE 30981
30979: GO 30992
30981: POP
// bc_type := b_armoury ; 29 :
30982: LD_ADDR_OWVAR 42
30986: PUSH
30987: LD_INT 4
30989: ST_TO_ADDR
30990: GO 31107
30992: LD_INT 29
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31011
31000: POP
// bc_type := b_barracks ; 30 :
31001: LD_ADDR_OWVAR 42
31005: PUSH
31006: LD_INT 5
31008: ST_TO_ADDR
31009: GO 31107
31011: LD_INT 30
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31030
31019: POP
// bc_type := b_solar_power ; 31 :
31020: LD_ADDR_OWVAR 42
31024: PUSH
31025: LD_INT 27
31027: ST_TO_ADDR
31028: GO 31107
31030: LD_INT 31
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31049
31038: POP
// bc_type := b_oil_power ; 32 :
31039: LD_ADDR_OWVAR 42
31043: PUSH
31044: LD_INT 26
31046: ST_TO_ADDR
31047: GO 31107
31049: LD_INT 32
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31068
31057: POP
// bc_type := b_siberite_power ; 33 :
31058: LD_ADDR_OWVAR 42
31062: PUSH
31063: LD_INT 28
31065: ST_TO_ADDR
31066: GO 31107
31068: LD_INT 33
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31087
31076: POP
// bc_type := b_oil_mine ; 34 :
31077: LD_ADDR_OWVAR 42
31081: PUSH
31082: LD_INT 29
31084: ST_TO_ADDR
31085: GO 31107
31087: LD_INT 34
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31106
31095: POP
// bc_type := b_siberite_mine ; end ;
31096: LD_ADDR_OWVAR 42
31100: PUSH
31101: LD_INT 30
31103: ST_TO_ADDR
31104: GO 31107
31106: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31107: LD_ADDR_VAR 0 8
31111: PUSH
31112: LD_VAR 0 5
31116: PPUSH
31117: LD_VAR 0 6
31121: PPUSH
31122: LD_VAR 0 3
31126: PPUSH
31127: CALL_OW 47
31131: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31132: LD_OWVAR 42
31136: PUSH
31137: LD_INT 32
31139: PUSH
31140: LD_INT 33
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: IN
31147: IFFALSE 31163
// PlaceWeaponTurret ( b , weapon ) ;
31149: LD_VAR 0 8
31153: PPUSH
31154: LD_VAR 0 4
31158: PPUSH
31159: CALL_OW 431
// end ;
31163: LD_VAR 0 7
31167: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31168: LD_INT 0
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31174: LD_ADDR_VAR 0 4
31178: PUSH
31179: LD_INT 22
31181: PUSH
31182: LD_OWVAR 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 30
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ST_TO_ADDR
// if not tmp then
31228: LD_VAR 0 4
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31296
// for i in tmp do
31237: LD_ADDR_VAR 0 2
31241: PUSH
31242: LD_VAR 0 4
31246: PUSH
31247: FOR_IN
31248: IFFALSE 31294
// for j = 1 to 3 do
31250: LD_ADDR_VAR 0 3
31254: PUSH
31255: DOUBLE
31256: LD_INT 1
31258: DEC
31259: ST_TO_ADDR
31260: LD_INT 3
31262: PUSH
31263: FOR_TO
31264: IFFALSE 31290
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31266: LD_VAR 0 2
31270: PPUSH
31271: CALL_OW 274
31275: PPUSH
31276: LD_VAR 0 3
31280: PPUSH
31281: LD_INT 99999
31283: PPUSH
31284: CALL_OW 277
31288: GO 31263
31290: POP
31291: POP
31292: GO 31247
31294: POP
31295: POP
// end ;
31296: LD_VAR 0 1
31300: RET
// export function hHackSetLevel10 ; var i , j ; begin
31301: LD_INT 0
31303: PPUSH
31304: PPUSH
31305: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_INT 21
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 69
31325: PUSH
31326: FOR_IN
31327: IFFALSE 31379
// if IsSelected ( i ) then
31329: LD_VAR 0 2
31333: PPUSH
31334: CALL_OW 306
31338: IFFALSE 31377
// begin for j := 1 to 4 do
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: DOUBLE
31346: LD_INT 1
31348: DEC
31349: ST_TO_ADDR
31350: LD_INT 4
31352: PUSH
31353: FOR_TO
31354: IFFALSE 31375
// SetSkill ( i , j , 10 ) ;
31356: LD_VAR 0 2
31360: PPUSH
31361: LD_VAR 0 3
31365: PPUSH
31366: LD_INT 10
31368: PPUSH
31369: CALL_OW 237
31373: GO 31353
31375: POP
31376: POP
// end ;
31377: GO 31326
31379: POP
31380: POP
// end ;
31381: LD_VAR 0 1
31385: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31386: LD_INT 0
31388: PPUSH
31389: PPUSH
31390: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31391: LD_ADDR_VAR 0 2
31395: PUSH
31396: LD_INT 22
31398: PUSH
31399: LD_OWVAR 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 21
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: PUSH
31427: FOR_IN
31428: IFFALSE 31469
// begin for j := 1 to 4 do
31430: LD_ADDR_VAR 0 3
31434: PUSH
31435: DOUBLE
31436: LD_INT 1
31438: DEC
31439: ST_TO_ADDR
31440: LD_INT 4
31442: PUSH
31443: FOR_TO
31444: IFFALSE 31465
// SetSkill ( i , j , 10 ) ;
31446: LD_VAR 0 2
31450: PPUSH
31451: LD_VAR 0 3
31455: PPUSH
31456: LD_INT 10
31458: PPUSH
31459: CALL_OW 237
31463: GO 31443
31465: POP
31466: POP
// end ;
31467: GO 31427
31469: POP
31470: POP
// end ;
31471: LD_VAR 0 1
31475: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31476: LD_INT 0
31478: PPUSH
// uc_side := your_side ;
31479: LD_ADDR_OWVAR 20
31483: PUSH
31484: LD_OWVAR 2
31488: ST_TO_ADDR
// uc_nation := nation ;
31489: LD_ADDR_OWVAR 21
31493: PUSH
31494: LD_VAR 0 1
31498: ST_TO_ADDR
// InitHc ;
31499: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31503: LD_INT 0
31505: PPUSH
31506: LD_VAR 0 2
31510: PPUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31520: LD_VAR 0 4
31524: PPUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: CALL_OW 428
31534: PUSH
31535: LD_INT 0
31537: EQUAL
31538: IFFALSE 31562
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31540: CALL_OW 44
31544: PPUSH
31545: LD_VAR 0 4
31549: PPUSH
31550: LD_VAR 0 5
31554: PPUSH
31555: LD_INT 1
31557: PPUSH
31558: CALL_OW 48
// end ;
31562: LD_VAR 0 6
31566: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31567: LD_INT 0
31569: PPUSH
31570: PPUSH
// uc_side := your_side ;
31571: LD_ADDR_OWVAR 20
31575: PUSH
31576: LD_OWVAR 2
31580: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31581: LD_VAR 0 1
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: LD_INT 3
31594: PUSH
31595: LD_INT 4
31597: PUSH
31598: LD_INT 5
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: IN
31608: IFFALSE 31620
// uc_nation := nation_american else
31610: LD_ADDR_OWVAR 21
31614: PUSH
31615: LD_INT 1
31617: ST_TO_ADDR
31618: GO 31663
// if chassis in [ 11 , 12 , 13 , 14 ] then
31620: LD_VAR 0 1
31624: PUSH
31625: LD_INT 11
31627: PUSH
31628: LD_INT 12
31630: PUSH
31631: LD_INT 13
31633: PUSH
31634: LD_INT 14
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: IN
31643: IFFALSE 31655
// uc_nation := nation_arabian else
31645: LD_ADDR_OWVAR 21
31649: PUSH
31650: LD_INT 2
31652: ST_TO_ADDR
31653: GO 31663
// uc_nation := nation_russian ;
31655: LD_ADDR_OWVAR 21
31659: PUSH
31660: LD_INT 3
31662: ST_TO_ADDR
// vc_chassis := chassis ;
31663: LD_ADDR_OWVAR 37
31667: PUSH
31668: LD_VAR 0 1
31672: ST_TO_ADDR
// vc_engine := engine ;
31673: LD_ADDR_OWVAR 39
31677: PUSH
31678: LD_VAR 0 2
31682: ST_TO_ADDR
// vc_control := control ;
31683: LD_ADDR_OWVAR 38
31687: PUSH
31688: LD_VAR 0 3
31692: ST_TO_ADDR
// vc_weapon := weapon ;
31693: LD_ADDR_OWVAR 40
31697: PUSH
31698: LD_VAR 0 4
31702: ST_TO_ADDR
// un := CreateVehicle ;
31703: LD_ADDR_VAR 0 8
31707: PUSH
31708: CALL_OW 45
31712: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31713: LD_VAR 0 8
31717: PPUSH
31718: LD_INT 0
31720: PPUSH
31721: LD_INT 5
31723: PPUSH
31724: CALL_OW 12
31728: PPUSH
31729: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31733: LD_VAR 0 8
31737: PPUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: LD_VAR 0 6
31747: PPUSH
31748: LD_INT 1
31750: PPUSH
31751: CALL_OW 48
// end ;
31755: LD_VAR 0 7
31759: RET
// export hInvincible ; every 1 do
31760: GO 31762
31762: DISABLE
// hInvincible := [ ] ;
31763: LD_ADDR_EXP 111
31767: PUSH
31768: EMPTY
31769: ST_TO_ADDR
31770: END
// every 10 do var i ;
31771: GO 31773
31773: DISABLE
31774: LD_INT 0
31776: PPUSH
// begin enable ;
31777: ENABLE
// if not hInvincible then
31778: LD_EXP 111
31782: NOT
31783: IFFALSE 31787
// exit ;
31785: GO 31831
// for i in hInvincible do
31787: LD_ADDR_VAR 0 1
31791: PUSH
31792: LD_EXP 111
31796: PUSH
31797: FOR_IN
31798: IFFALSE 31829
// if GetLives ( i ) < 1000 then
31800: LD_VAR 0 1
31804: PPUSH
31805: CALL_OW 256
31809: PUSH
31810: LD_INT 1000
31812: LESS
31813: IFFALSE 31827
// SetLives ( i , 1000 ) ;
31815: LD_VAR 0 1
31819: PPUSH
31820: LD_INT 1000
31822: PPUSH
31823: CALL_OW 234
31827: GO 31797
31829: POP
31830: POP
// end ;
31831: PPOPN 1
31833: END
// export function hHackInvincible ; var i ; begin
31834: LD_INT 0
31836: PPUSH
31837: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31838: LD_ADDR_VAR 0 2
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 21
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 21
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PPUSH
31871: CALL_OW 69
31875: PUSH
31876: FOR_IN
31877: IFFALSE 31938
// if IsSelected ( i ) then
31879: LD_VAR 0 2
31883: PPUSH
31884: CALL_OW 306
31888: IFFALSE 31936
// begin if i in hInvincible then
31890: LD_VAR 0 2
31894: PUSH
31895: LD_EXP 111
31899: IN
31900: IFFALSE 31920
// hInvincible := hInvincible diff i else
31902: LD_ADDR_EXP 111
31906: PUSH
31907: LD_EXP 111
31911: PUSH
31912: LD_VAR 0 2
31916: DIFF
31917: ST_TO_ADDR
31918: GO 31936
// hInvincible := hInvincible union i ;
31920: LD_ADDR_EXP 111
31924: PUSH
31925: LD_EXP 111
31929: PUSH
31930: LD_VAR 0 2
31934: UNION
31935: ST_TO_ADDR
// end ;
31936: GO 31876
31938: POP
31939: POP
// end ;
31940: LD_VAR 0 1
31944: RET
// export function hHackInvisible ; var i , j ; begin
31945: LD_INT 0
31947: PPUSH
31948: PPUSH
31949: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31950: LD_ADDR_VAR 0 2
31954: PUSH
31955: LD_INT 21
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PPUSH
31965: CALL_OW 69
31969: PUSH
31970: FOR_IN
31971: IFFALSE 31995
// if IsSelected ( i ) then
31973: LD_VAR 0 2
31977: PPUSH
31978: CALL_OW 306
31982: IFFALSE 31993
// ComForceInvisible ( i ) ;
31984: LD_VAR 0 2
31988: PPUSH
31989: CALL_OW 496
31993: GO 31970
31995: POP
31996: POP
// end ;
31997: LD_VAR 0 1
32001: RET
// export function hHackChangeYourSide ; begin
32002: LD_INT 0
32004: PPUSH
// if your_side = 8 then
32005: LD_OWVAR 2
32009: PUSH
32010: LD_INT 8
32012: EQUAL
32013: IFFALSE 32025
// your_side := 0 else
32015: LD_ADDR_OWVAR 2
32019: PUSH
32020: LD_INT 0
32022: ST_TO_ADDR
32023: GO 32039
// your_side := your_side + 1 ;
32025: LD_ADDR_OWVAR 2
32029: PUSH
32030: LD_OWVAR 2
32034: PUSH
32035: LD_INT 1
32037: PLUS
32038: ST_TO_ADDR
// end ;
32039: LD_VAR 0 1
32043: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
// for i in all_units do
32049: LD_ADDR_VAR 0 2
32053: PUSH
32054: LD_OWVAR 3
32058: PUSH
32059: FOR_IN
32060: IFFALSE 32138
// if IsSelected ( i ) then
32062: LD_VAR 0 2
32066: PPUSH
32067: CALL_OW 306
32071: IFFALSE 32136
// begin j := GetSide ( i ) ;
32073: LD_ADDR_VAR 0 3
32077: PUSH
32078: LD_VAR 0 2
32082: PPUSH
32083: CALL_OW 255
32087: ST_TO_ADDR
// if j = 8 then
32088: LD_VAR 0 3
32092: PUSH
32093: LD_INT 8
32095: EQUAL
32096: IFFALSE 32108
// j := 0 else
32098: LD_ADDR_VAR 0 3
32102: PUSH
32103: LD_INT 0
32105: ST_TO_ADDR
32106: GO 32122
// j := j + 1 ;
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_VAR 0 3
32117: PUSH
32118: LD_INT 1
32120: PLUS
32121: ST_TO_ADDR
// SetSide ( i , j ) ;
32122: LD_VAR 0 2
32126: PPUSH
32127: LD_VAR 0 3
32131: PPUSH
32132: CALL_OW 235
// end ;
32136: GO 32059
32138: POP
32139: POP
// end ;
32140: LD_VAR 0 1
32144: RET
// export function hHackFog ; begin
32145: LD_INT 0
32147: PPUSH
// FogOff ( true ) ;
32148: LD_INT 1
32150: PPUSH
32151: CALL_OW 344
// end ;
32155: LD_VAR 0 1
32159: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32160: LD_INT 0
32162: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32163: LD_VAR 0 1
32167: PPUSH
32168: LD_VAR 0 2
32172: PPUSH
32173: LD_VAR 0 3
32177: PPUSH
32178: LD_INT 1
32180: PPUSH
32181: LD_INT 1
32183: PPUSH
32184: CALL_OW 483
// CenterOnXY ( x , y ) ;
32188: LD_VAR 0 2
32192: PPUSH
32193: LD_VAR 0 3
32197: PPUSH
32198: CALL_OW 84
// end ;
32202: LD_VAR 0 4
32206: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32211: LD_VAR 0 1
32215: NOT
32216: PUSH
32217: LD_VAR 0 2
32221: PPUSH
32222: LD_VAR 0 3
32226: PPUSH
32227: CALL_OW 488
32231: NOT
32232: OR
32233: PUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 266
32243: PUSH
32244: LD_INT 3
32246: NONEQUAL
32247: PUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 247
32257: PUSH
32258: LD_INT 1
32260: EQUAL
32261: NOT
32262: AND
32263: OR
32264: IFFALSE 32268
// exit ;
32266: GO 32417
// if GetType ( factory ) = unit_human then
32268: LD_VAR 0 1
32272: PPUSH
32273: CALL_OW 247
32277: PUSH
32278: LD_INT 1
32280: EQUAL
32281: IFFALSE 32298
// factory := IsInUnit ( factory ) ;
32283: LD_ADDR_VAR 0 1
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 310
32297: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32298: LD_VAR 0 1
32302: PPUSH
32303: CALL_OW 266
32307: PUSH
32308: LD_INT 3
32310: NONEQUAL
32311: IFFALSE 32315
// exit ;
32313: GO 32417
// if HexInfo ( x , y ) = factory then
32315: LD_VAR 0 2
32319: PPUSH
32320: LD_VAR 0 3
32324: PPUSH
32325: CALL_OW 428
32329: PUSH
32330: LD_VAR 0 1
32334: EQUAL
32335: IFFALSE 32362
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32337: LD_ADDR_EXP 112
32341: PUSH
32342: LD_EXP 112
32346: PPUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: LD_INT 0
32354: PPUSH
32355: CALL_OW 1
32359: ST_TO_ADDR
32360: GO 32413
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32362: LD_ADDR_EXP 112
32366: PUSH
32367: LD_EXP 112
32371: PPUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 255
32386: PUSH
32387: LD_VAR 0 1
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_VAR 0 3
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: PPUSH
32408: CALL_OW 1
32412: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32413: CALL 32422 0 0
// end ;
32417: LD_VAR 0 4
32421: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32422: LD_INT 0
32424: PPUSH
32425: PPUSH
32426: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32427: LD_STRING resetFactoryWaypoint();
32429: PPUSH
32430: CALL_OW 559
// if factoryWaypoints then
32434: LD_EXP 112
32438: IFFALSE 32564
// begin list := PrepareArray ( factoryWaypoints ) ;
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_EXP 112
32449: PPUSH
32450: CALL 79049 0 1
32454: ST_TO_ADDR
// for i := 1 to list do
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: DOUBLE
32461: LD_INT 1
32463: DEC
32464: ST_TO_ADDR
32465: LD_VAR 0 3
32469: PUSH
32470: FOR_TO
32471: IFFALSE 32562
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32473: LD_STRING setFactoryWaypointXY(
32475: PUSH
32476: LD_VAR 0 3
32480: PUSH
32481: LD_VAR 0 2
32485: ARRAY
32486: PUSH
32487: LD_INT 1
32489: ARRAY
32490: STR
32491: PUSH
32492: LD_STRING ,
32494: STR
32495: PUSH
32496: LD_VAR 0 3
32500: PUSH
32501: LD_VAR 0 2
32505: ARRAY
32506: PUSH
32507: LD_INT 2
32509: ARRAY
32510: STR
32511: PUSH
32512: LD_STRING ,
32514: STR
32515: PUSH
32516: LD_VAR 0 3
32520: PUSH
32521: LD_VAR 0 2
32525: ARRAY
32526: PUSH
32527: LD_INT 3
32529: ARRAY
32530: STR
32531: PUSH
32532: LD_STRING ,
32534: STR
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_VAR 0 2
32545: ARRAY
32546: PUSH
32547: LD_INT 4
32549: ARRAY
32550: STR
32551: PUSH
32552: LD_STRING )
32554: STR
32555: PPUSH
32556: CALL_OW 559
32560: GO 32470
32562: POP
32563: POP
// end ; end ;
32564: LD_VAR 0 1
32568: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32569: LD_INT 0
32571: PPUSH
// if HexInfo ( x , y ) = warehouse then
32572: LD_VAR 0 2
32576: PPUSH
32577: LD_VAR 0 3
32581: PPUSH
32582: CALL_OW 428
32586: PUSH
32587: LD_VAR 0 1
32591: EQUAL
32592: IFFALSE 32619
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32594: LD_ADDR_EXP 113
32598: PUSH
32599: LD_EXP 113
32603: PPUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: LD_INT 0
32611: PPUSH
32612: CALL_OW 1
32616: ST_TO_ADDR
32617: GO 32670
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32619: LD_ADDR_EXP 113
32623: PUSH
32624: LD_EXP 113
32628: PPUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 255
32643: PUSH
32644: LD_VAR 0 1
32648: PUSH
32649: LD_VAR 0 2
32653: PUSH
32654: LD_VAR 0 3
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: PPUSH
32665: CALL_OW 1
32669: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32670: CALL 32679 0 0
// end ;
32674: LD_VAR 0 4
32678: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32679: LD_INT 0
32681: PPUSH
32682: PPUSH
32683: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32684: LD_STRING resetWarehouseGatheringPoints();
32686: PPUSH
32687: CALL_OW 559
// if warehouseGatheringPoints then
32691: LD_EXP 113
32695: IFFALSE 32821
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32697: LD_ADDR_VAR 0 3
32701: PUSH
32702: LD_EXP 113
32706: PPUSH
32707: CALL 79049 0 1
32711: ST_TO_ADDR
// for i := 1 to list do
32712: LD_ADDR_VAR 0 2
32716: PUSH
32717: DOUBLE
32718: LD_INT 1
32720: DEC
32721: ST_TO_ADDR
32722: LD_VAR 0 3
32726: PUSH
32727: FOR_TO
32728: IFFALSE 32819
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32730: LD_STRING setWarehouseGatheringPointXY(
32732: PUSH
32733: LD_VAR 0 3
32737: PUSH
32738: LD_VAR 0 2
32742: ARRAY
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: STR
32748: PUSH
32749: LD_STRING ,
32751: STR
32752: PUSH
32753: LD_VAR 0 3
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PUSH
32764: LD_INT 2
32766: ARRAY
32767: STR
32768: PUSH
32769: LD_STRING ,
32771: STR
32772: PUSH
32773: LD_VAR 0 3
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PUSH
32784: LD_INT 3
32786: ARRAY
32787: STR
32788: PUSH
32789: LD_STRING ,
32791: STR
32792: PUSH
32793: LD_VAR 0 3
32797: PUSH
32798: LD_VAR 0 2
32802: ARRAY
32803: PUSH
32804: LD_INT 4
32806: ARRAY
32807: STR
32808: PUSH
32809: LD_STRING )
32811: STR
32812: PPUSH
32813: CALL_OW 559
32817: GO 32727
32819: POP
32820: POP
// end ; end ;
32821: LD_VAR 0 1
32825: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32826: LD_EXP 113
32830: IFFALSE 33515
32832: GO 32834
32834: DISABLE
32835: LD_INT 0
32837: PPUSH
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
// begin enable ;
32846: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32847: LD_ADDR_VAR 0 3
32851: PUSH
32852: LD_EXP 113
32856: PPUSH
32857: CALL 79049 0 1
32861: ST_TO_ADDR
// if not list then
32862: LD_VAR 0 3
32866: NOT
32867: IFFALSE 32871
// exit ;
32869: GO 33515
// for i := 1 to list do
32871: LD_ADDR_VAR 0 1
32875: PUSH
32876: DOUBLE
32877: LD_INT 1
32879: DEC
32880: ST_TO_ADDR
32881: LD_VAR 0 3
32885: PUSH
32886: FOR_TO
32887: IFFALSE 33513
// begin depot := list [ i ] [ 2 ] ;
32889: LD_ADDR_VAR 0 8
32893: PUSH
32894: LD_VAR 0 3
32898: PUSH
32899: LD_VAR 0 1
32903: ARRAY
32904: PUSH
32905: LD_INT 2
32907: ARRAY
32908: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32909: LD_ADDR_VAR 0 5
32913: PUSH
32914: LD_VAR 0 3
32918: PUSH
32919: LD_VAR 0 1
32923: ARRAY
32924: PUSH
32925: LD_INT 1
32927: ARRAY
32928: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32929: LD_VAR 0 8
32933: PPUSH
32934: CALL_OW 301
32938: PUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_VAR 0 8
32948: PPUSH
32949: CALL_OW 255
32953: NONEQUAL
32954: OR
32955: IFFALSE 32984
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32957: LD_ADDR_EXP 113
32961: PUSH
32962: LD_EXP 113
32966: PPUSH
32967: LD_VAR 0 8
32971: PPUSH
32972: LD_INT 0
32974: PPUSH
32975: CALL_OW 1
32979: ST_TO_ADDR
// exit ;
32980: POP
32981: POP
32982: GO 33515
// end ; x := list [ i ] [ 3 ] ;
32984: LD_ADDR_VAR 0 6
32988: PUSH
32989: LD_VAR 0 3
32993: PUSH
32994: LD_VAR 0 1
32998: ARRAY
32999: PUSH
33000: LD_INT 3
33002: ARRAY
33003: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: LD_VAR 0 3
33013: PUSH
33014: LD_VAR 0 1
33018: ARRAY
33019: PUSH
33020: LD_INT 4
33022: ARRAY
33023: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33024: LD_ADDR_VAR 0 9
33028: PUSH
33029: LD_VAR 0 6
33033: PPUSH
33034: LD_VAR 0 7
33038: PPUSH
33039: LD_INT 16
33041: PPUSH
33042: CALL 77637 0 3
33046: ST_TO_ADDR
// if not cratesNearbyPoint then
33047: LD_VAR 0 9
33051: NOT
33052: IFFALSE 33058
// exit ;
33054: POP
33055: POP
33056: GO 33515
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33058: LD_ADDR_VAR 0 4
33062: PUSH
33063: LD_INT 22
33065: PUSH
33066: LD_VAR 0 5
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 60
33080: PUSH
33081: EMPTY
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 91
33090: PUSH
33091: LD_VAR 0 8
33095: PUSH
33096: LD_INT 6
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 25
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 25
33119: PUSH
33120: LD_INT 16
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: PPUSH
33138: CALL_OW 69
33142: PUSH
33143: LD_VAR 0 8
33147: PPUSH
33148: CALL_OW 313
33152: PPUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 60
33158: PUSH
33159: EMPTY
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 25
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 25
33181: PUSH
33182: LD_INT 16
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PPUSH
33198: CALL_OW 72
33202: UNION
33203: ST_TO_ADDR
// if tmp then
33204: LD_VAR 0 4
33208: IFFALSE 33288
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_VAR 0 4
33219: PPUSH
33220: LD_INT 3
33222: PPUSH
33223: CALL 75606 0 2
33227: ST_TO_ADDR
// for j in tmp do
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_VAR 0 4
33237: PUSH
33238: FOR_IN
33239: IFFALSE 33282
// begin if IsInUnit ( j ) then
33241: LD_VAR 0 2
33245: PPUSH
33246: CALL_OW 310
33250: IFFALSE 33261
// ComExit ( j ) ;
33252: LD_VAR 0 2
33256: PPUSH
33257: CALL 75689 0 1
// AddComCollect ( j , x , y ) ;
33261: LD_VAR 0 2
33265: PPUSH
33266: LD_VAR 0 6
33270: PPUSH
33271: LD_VAR 0 7
33275: PPUSH
33276: CALL_OW 177
// end ;
33280: GO 33238
33282: POP
33283: POP
// exit ;
33284: POP
33285: POP
33286: GO 33515
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33288: LD_ADDR_VAR 0 4
33292: PUSH
33293: LD_INT 22
33295: PUSH
33296: LD_VAR 0 5
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 91
33307: PUSH
33308: LD_VAR 0 8
33312: PUSH
33313: LD_INT 8
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 34
33326: PUSH
33327: LD_INT 12
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 34
33336: PUSH
33337: LD_INT 51
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 34
33346: PUSH
33347: LD_INT 32
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 34
33356: PUSH
33357: LD_INT 89
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: PPUSH
33376: CALL_OW 69
33380: ST_TO_ADDR
// if tmp then
33381: LD_VAR 0 4
33385: IFFALSE 33511
// begin for j in tmp do
33387: LD_ADDR_VAR 0 2
33391: PUSH
33392: LD_VAR 0 4
33396: PUSH
33397: FOR_IN
33398: IFFALSE 33509
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33400: LD_VAR 0 2
33404: PPUSH
33405: CALL_OW 262
33409: PUSH
33410: LD_INT 3
33412: EQUAL
33413: PUSH
33414: LD_VAR 0 2
33418: PPUSH
33419: CALL_OW 261
33423: PUSH
33424: LD_INT 20
33426: GREATER
33427: OR
33428: PUSH
33429: LD_VAR 0 2
33433: PPUSH
33434: CALL_OW 314
33438: NOT
33439: AND
33440: PUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: CALL_OW 263
33450: PUSH
33451: LD_INT 1
33453: NONEQUAL
33454: PUSH
33455: LD_VAR 0 2
33459: PPUSH
33460: CALL_OW 311
33464: OR
33465: AND
33466: IFFALSE 33507
// begin ComCollect ( j , x , y ) ;
33468: LD_VAR 0 2
33472: PPUSH
33473: LD_VAR 0 6
33477: PPUSH
33478: LD_VAR 0 7
33482: PPUSH
33483: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_VAR 0 8
33496: PPUSH
33497: CALL_OW 172
// exit ;
33501: POP
33502: POP
33503: POP
33504: POP
33505: GO 33515
// end ;
33507: GO 33397
33509: POP
33510: POP
// end ; end ;
33511: GO 32886
33513: POP
33514: POP
// end ; end_of_file
33515: PPOPN 9
33517: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33518: LD_VAR 0 1
33522: PUSH
33523: LD_INT 200
33525: DOUBLE
33526: GREATEREQUAL
33527: IFFALSE 33535
33529: LD_INT 299
33531: DOUBLE
33532: LESSEQUAL
33533: IFTRUE 33537
33535: GO 33569
33537: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33538: LD_VAR 0 1
33542: PPUSH
33543: LD_VAR 0 2
33547: PPUSH
33548: LD_VAR 0 3
33552: PPUSH
33553: LD_VAR 0 4
33557: PPUSH
33558: LD_VAR 0 5
33562: PPUSH
33563: CALL 34057 0 5
33567: GO 33646
33569: LD_INT 300
33571: DOUBLE
33572: GREATEREQUAL
33573: IFFALSE 33581
33575: LD_INT 399
33577: DOUBLE
33578: LESSEQUAL
33579: IFTRUE 33583
33581: GO 33645
33583: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33584: LD_VAR 0 1
33588: PPUSH
33589: LD_VAR 0 2
33593: PPUSH
33594: LD_VAR 0 3
33598: PPUSH
33599: LD_VAR 0 4
33603: PPUSH
33604: LD_VAR 0 5
33608: PPUSH
33609: LD_VAR 0 6
33613: PPUSH
33614: LD_VAR 0 7
33618: PPUSH
33619: LD_VAR 0 8
33623: PPUSH
33624: LD_VAR 0 9
33628: PPUSH
33629: LD_VAR 0 10
33633: PPUSH
33634: LD_VAR 0 11
33638: PPUSH
33639: CALL 30219 0 11
33643: GO 33646
33645: POP
// end ;
33646: PPOPN 11
33648: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33649: LD_VAR 0 1
33653: PPUSH
33654: LD_VAR 0 2
33658: PPUSH
33659: LD_VAR 0 3
33663: PPUSH
33664: LD_VAR 0 4
33668: PPUSH
33669: LD_VAR 0 5
33673: PPUSH
33674: CALL 33793 0 5
// end ; end_of_file
33678: PPOPN 5
33680: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33681: LD_INT 0
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33687: LD_VAR 0 1
33691: PPUSH
33692: CALL_OW 264
33696: PUSH
33697: LD_INT 91
33699: EQUAL
33700: IFFALSE 33772
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33702: LD_INT 68
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 255
33714: PPUSH
33715: CALL_OW 321
33719: PUSH
33720: LD_INT 2
33722: EQUAL
33723: IFFALSE 33735
// eff := 70 else
33725: LD_ADDR_VAR 0 4
33729: PUSH
33730: LD_INT 70
33732: ST_TO_ADDR
33733: GO 33743
// eff := 30 ;
33735: LD_ADDR_VAR 0 4
33739: PUSH
33740: LD_INT 30
33742: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 250
33752: PPUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 251
33762: PPUSH
33763: LD_VAR 0 4
33767: PPUSH
33768: CALL_OW 495
// end ; end ;
33772: LD_VAR 0 2
33776: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33777: LD_INT 0
33779: PPUSH
// end ;
33780: LD_VAR 0 4
33784: RET
// export function SOS_Command ( cmd ) ; begin
33785: LD_INT 0
33787: PPUSH
// end ;
33788: LD_VAR 0 2
33792: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33793: LD_INT 0
33795: PPUSH
// end ;
33796: LD_VAR 0 6
33800: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
// if not vehicle or not factory then
33805: LD_VAR 0 1
33809: NOT
33810: PUSH
33811: LD_VAR 0 2
33815: NOT
33816: OR
33817: IFFALSE 33821
// exit ;
33819: GO 34052
// if factoryWaypoints >= factory then
33821: LD_EXP 112
33825: PUSH
33826: LD_VAR 0 2
33830: GREATEREQUAL
33831: IFFALSE 34052
// if factoryWaypoints [ factory ] then
33833: LD_EXP 112
33837: PUSH
33838: LD_VAR 0 2
33842: ARRAY
33843: IFFALSE 34052
// begin if GetControl ( vehicle ) = control_manual then
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 263
33854: PUSH
33855: LD_INT 1
33857: EQUAL
33858: IFFALSE 33939
// begin driver := IsDrivenBy ( vehicle ) ;
33860: LD_ADDR_VAR 0 4
33864: PUSH
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 311
33874: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_EXP 112
33884: PUSH
33885: LD_VAR 0 2
33889: ARRAY
33890: PUSH
33891: LD_INT 3
33893: ARRAY
33894: PPUSH
33895: LD_EXP 112
33899: PUSH
33900: LD_VAR 0 2
33904: ARRAY
33905: PUSH
33906: LD_INT 4
33908: ARRAY
33909: PPUSH
33910: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33914: LD_VAR 0 4
33918: PPUSH
33919: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33923: LD_VAR 0 4
33927: PPUSH
33928: LD_VAR 0 2
33932: PPUSH
33933: CALL_OW 180
// end else
33937: GO 34052
// if GetControl ( vehicle ) = control_remote then
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 263
33948: PUSH
33949: LD_INT 2
33951: EQUAL
33952: IFFALSE 34013
// begin wait ( 0 0$2 ) ;
33954: LD_INT 70
33956: PPUSH
33957: CALL_OW 67
// if Connect ( vehicle ) then
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL 45910 0 1
33970: IFFALSE 34011
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33972: LD_VAR 0 1
33976: PPUSH
33977: LD_EXP 112
33981: PUSH
33982: LD_VAR 0 2
33986: ARRAY
33987: PUSH
33988: LD_INT 3
33990: ARRAY
33991: PPUSH
33992: LD_EXP 112
33996: PUSH
33997: LD_VAR 0 2
34001: ARRAY
34002: PUSH
34003: LD_INT 4
34005: ARRAY
34006: PPUSH
34007: CALL_OW 171
// end else
34011: GO 34052
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34013: LD_VAR 0 1
34017: PPUSH
34018: LD_EXP 112
34022: PUSH
34023: LD_VAR 0 2
34027: ARRAY
34028: PUSH
34029: LD_INT 3
34031: ARRAY
34032: PPUSH
34033: LD_EXP 112
34037: PUSH
34038: LD_VAR 0 2
34042: ARRAY
34043: PUSH
34044: LD_INT 4
34046: ARRAY
34047: PPUSH
34048: CALL_OW 171
// end ; end ;
34052: LD_VAR 0 3
34056: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34057: LD_INT 0
34059: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34060: LD_VAR 0 1
34064: PUSH
34065: LD_INT 250
34067: EQUAL
34068: PUSH
34069: LD_VAR 0 2
34073: PPUSH
34074: CALL_OW 264
34078: PUSH
34079: LD_INT 81
34081: EQUAL
34082: AND
34083: IFFALSE 34104
// MinerPlaceMine ( unit , x , y ) ;
34085: LD_VAR 0 2
34089: PPUSH
34090: LD_VAR 0 4
34094: PPUSH
34095: LD_VAR 0 5
34099: PPUSH
34100: CALL 36489 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34104: LD_VAR 0 1
34108: PUSH
34109: LD_INT 251
34111: EQUAL
34112: PUSH
34113: LD_VAR 0 2
34117: PPUSH
34118: CALL_OW 264
34122: PUSH
34123: LD_INT 81
34125: EQUAL
34126: AND
34127: IFFALSE 34148
// MinerDetonateMine ( unit , x , y ) ;
34129: LD_VAR 0 2
34133: PPUSH
34134: LD_VAR 0 4
34138: PPUSH
34139: LD_VAR 0 5
34143: PPUSH
34144: CALL 36764 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34148: LD_VAR 0 1
34152: PUSH
34153: LD_INT 252
34155: EQUAL
34156: PUSH
34157: LD_VAR 0 2
34161: PPUSH
34162: CALL_OW 264
34166: PUSH
34167: LD_INT 81
34169: EQUAL
34170: AND
34171: IFFALSE 34192
// MinerCreateMinefield ( unit , x , y ) ;
34173: LD_VAR 0 2
34177: PPUSH
34178: LD_VAR 0 4
34182: PPUSH
34183: LD_VAR 0 5
34187: PPUSH
34188: CALL 37181 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34192: LD_VAR 0 1
34196: PUSH
34197: LD_INT 253
34199: EQUAL
34200: PUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 257
34210: PUSH
34211: LD_INT 5
34213: EQUAL
34214: AND
34215: IFFALSE 34236
// ComBinocular ( unit , x , y ) ;
34217: LD_VAR 0 2
34221: PPUSH
34222: LD_VAR 0 4
34226: PPUSH
34227: LD_VAR 0 5
34231: PPUSH
34232: CALL 37550 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34236: LD_VAR 0 1
34240: PUSH
34241: LD_INT 254
34243: EQUAL
34244: PUSH
34245: LD_VAR 0 2
34249: PPUSH
34250: CALL_OW 264
34254: PUSH
34255: LD_INT 99
34257: EQUAL
34258: AND
34259: PUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: CALL_OW 263
34269: PUSH
34270: LD_INT 3
34272: EQUAL
34273: AND
34274: IFFALSE 34290
// HackDestroyVehicle ( unit , selectedUnit ) ;
34276: LD_VAR 0 2
34280: PPUSH
34281: LD_VAR 0 3
34285: PPUSH
34286: CALL 35853 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34290: LD_VAR 0 1
34294: PUSH
34295: LD_INT 255
34297: EQUAL
34298: PUSH
34299: LD_VAR 0 2
34303: PPUSH
34304: CALL_OW 264
34308: PUSH
34309: LD_INT 14
34311: PUSH
34312: LD_INT 53
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: IN
34319: AND
34320: PUSH
34321: LD_VAR 0 4
34325: PPUSH
34326: LD_VAR 0 5
34330: PPUSH
34331: CALL_OW 488
34335: AND
34336: IFFALSE 34360
// CutTreeXYR ( unit , x , y , 12 ) ;
34338: LD_VAR 0 2
34342: PPUSH
34343: LD_VAR 0 4
34347: PPUSH
34348: LD_VAR 0 5
34352: PPUSH
34353: LD_INT 12
34355: PPUSH
34356: CALL 34423 0 4
// if cmd = 256 then
34360: LD_VAR 0 1
34364: PUSH
34365: LD_INT 256
34367: EQUAL
34368: IFFALSE 34389
// SetFactoryWaypoint ( unit , x , y ) ;
34370: LD_VAR 0 2
34374: PPUSH
34375: LD_VAR 0 4
34379: PPUSH
34380: LD_VAR 0 5
34384: PPUSH
34385: CALL 32207 0 3
// if cmd = 257 then
34389: LD_VAR 0 1
34393: PUSH
34394: LD_INT 257
34396: EQUAL
34397: IFFALSE 34418
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34399: LD_VAR 0 2
34403: PPUSH
34404: LD_VAR 0 4
34408: PPUSH
34409: LD_VAR 0 5
34413: PPUSH
34414: CALL 32569 0 3
// end ;
34418: LD_VAR 0 6
34422: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34423: LD_INT 0
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34434: LD_VAR 0 1
34438: NOT
34439: PUSH
34440: LD_VAR 0 2
34444: PPUSH
34445: LD_VAR 0 3
34449: PPUSH
34450: CALL_OW 488
34454: NOT
34455: OR
34456: PUSH
34457: LD_VAR 0 4
34461: NOT
34462: OR
34463: IFFALSE 34467
// exit ;
34465: GO 34807
// list := [ ] ;
34467: LD_ADDR_VAR 0 13
34471: PUSH
34472: EMPTY
34473: ST_TO_ADDR
// if x - r < 0 then
34474: LD_VAR 0 2
34478: PUSH
34479: LD_VAR 0 4
34483: MINUS
34484: PUSH
34485: LD_INT 0
34487: LESS
34488: IFFALSE 34500
// min_x := 0 else
34490: LD_ADDR_VAR 0 7
34494: PUSH
34495: LD_INT 0
34497: ST_TO_ADDR
34498: GO 34516
// min_x := x - r ;
34500: LD_ADDR_VAR 0 7
34504: PUSH
34505: LD_VAR 0 2
34509: PUSH
34510: LD_VAR 0 4
34514: MINUS
34515: ST_TO_ADDR
// if y - r < 0 then
34516: LD_VAR 0 3
34520: PUSH
34521: LD_VAR 0 4
34525: MINUS
34526: PUSH
34527: LD_INT 0
34529: LESS
34530: IFFALSE 34542
// min_y := 0 else
34532: LD_ADDR_VAR 0 8
34536: PUSH
34537: LD_INT 0
34539: ST_TO_ADDR
34540: GO 34558
// min_y := y - r ;
34542: LD_ADDR_VAR 0 8
34546: PUSH
34547: LD_VAR 0 3
34551: PUSH
34552: LD_VAR 0 4
34556: MINUS
34557: ST_TO_ADDR
// max_x := x + r ;
34558: LD_ADDR_VAR 0 9
34562: PUSH
34563: LD_VAR 0 2
34567: PUSH
34568: LD_VAR 0 4
34572: PLUS
34573: ST_TO_ADDR
// max_y := y + r ;
34574: LD_ADDR_VAR 0 10
34578: PUSH
34579: LD_VAR 0 3
34583: PUSH
34584: LD_VAR 0 4
34588: PLUS
34589: ST_TO_ADDR
// for _x = min_x to max_x do
34590: LD_ADDR_VAR 0 11
34594: PUSH
34595: DOUBLE
34596: LD_VAR 0 7
34600: DEC
34601: ST_TO_ADDR
34602: LD_VAR 0 9
34606: PUSH
34607: FOR_TO
34608: IFFALSE 34725
// for _y = min_y to max_y do
34610: LD_ADDR_VAR 0 12
34614: PUSH
34615: DOUBLE
34616: LD_VAR 0 8
34620: DEC
34621: ST_TO_ADDR
34622: LD_VAR 0 10
34626: PUSH
34627: FOR_TO
34628: IFFALSE 34721
// begin if not ValidHex ( _x , _y ) then
34630: LD_VAR 0 11
34634: PPUSH
34635: LD_VAR 0 12
34639: PPUSH
34640: CALL_OW 488
34644: NOT
34645: IFFALSE 34649
// continue ;
34647: GO 34627
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34649: LD_VAR 0 11
34653: PPUSH
34654: LD_VAR 0 12
34658: PPUSH
34659: CALL_OW 351
34663: PUSH
34664: LD_VAR 0 11
34668: PPUSH
34669: LD_VAR 0 12
34673: PPUSH
34674: CALL_OW 554
34678: AND
34679: IFFALSE 34719
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34681: LD_ADDR_VAR 0 13
34685: PUSH
34686: LD_VAR 0 13
34690: PPUSH
34691: LD_VAR 0 13
34695: PUSH
34696: LD_INT 1
34698: PLUS
34699: PPUSH
34700: LD_VAR 0 11
34704: PUSH
34705: LD_VAR 0 12
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PPUSH
34714: CALL_OW 2
34718: ST_TO_ADDR
// end ;
34719: GO 34627
34721: POP
34722: POP
34723: GO 34607
34725: POP
34726: POP
// if not list then
34727: LD_VAR 0 13
34731: NOT
34732: IFFALSE 34736
// exit ;
34734: GO 34807
// for i in list do
34736: LD_ADDR_VAR 0 6
34740: PUSH
34741: LD_VAR 0 13
34745: PUSH
34746: FOR_IN
34747: IFFALSE 34805
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34749: LD_VAR 0 1
34753: PPUSH
34754: LD_STRING M
34756: PUSH
34757: LD_VAR 0 6
34761: PUSH
34762: LD_INT 1
34764: ARRAY
34765: PUSH
34766: LD_VAR 0 6
34770: PUSH
34771: LD_INT 2
34773: ARRAY
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: PPUSH
34799: CALL_OW 447
34803: GO 34746
34805: POP
34806: POP
// end ;
34807: LD_VAR 0 5
34811: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34812: LD_EXP 115
34816: NOT
34817: IFFALSE 34867
34819: GO 34821
34821: DISABLE
// begin initHack := true ;
34822: LD_ADDR_EXP 115
34826: PUSH
34827: LD_INT 1
34829: ST_TO_ADDR
// hackTanks := [ ] ;
34830: LD_ADDR_EXP 116
34834: PUSH
34835: EMPTY
34836: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34837: LD_ADDR_EXP 117
34841: PUSH
34842: EMPTY
34843: ST_TO_ADDR
// hackLimit := 3 ;
34844: LD_ADDR_EXP 118
34848: PUSH
34849: LD_INT 3
34851: ST_TO_ADDR
// hackDist := 12 ;
34852: LD_ADDR_EXP 119
34856: PUSH
34857: LD_INT 12
34859: ST_TO_ADDR
// hackCounter := [ ] ;
34860: LD_ADDR_EXP 120
34864: PUSH
34865: EMPTY
34866: ST_TO_ADDR
// end ;
34867: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34868: LD_EXP 115
34872: PUSH
34873: LD_INT 34
34875: PUSH
34876: LD_INT 99
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PPUSH
34883: CALL_OW 69
34887: AND
34888: IFFALSE 35141
34890: GO 34892
34892: DISABLE
34893: LD_INT 0
34895: PPUSH
34896: PPUSH
// begin enable ;
34897: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34898: LD_ADDR_VAR 0 1
34902: PUSH
34903: LD_INT 34
34905: PUSH
34906: LD_INT 99
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PPUSH
34913: CALL_OW 69
34917: PUSH
34918: FOR_IN
34919: IFFALSE 35139
// begin if not i in hackTanks then
34921: LD_VAR 0 1
34925: PUSH
34926: LD_EXP 116
34930: IN
34931: NOT
34932: IFFALSE 35015
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34934: LD_ADDR_EXP 116
34938: PUSH
34939: LD_EXP 116
34943: PPUSH
34944: LD_EXP 116
34948: PUSH
34949: LD_INT 1
34951: PLUS
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 1
34962: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34963: LD_ADDR_EXP 117
34967: PUSH
34968: LD_EXP 117
34972: PPUSH
34973: LD_EXP 117
34977: PUSH
34978: LD_INT 1
34980: PLUS
34981: PPUSH
34982: EMPTY
34983: PPUSH
34984: CALL_OW 1
34988: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34989: LD_ADDR_EXP 120
34993: PUSH
34994: LD_EXP 120
34998: PPUSH
34999: LD_EXP 120
35003: PUSH
35004: LD_INT 1
35006: PLUS
35007: PPUSH
35008: EMPTY
35009: PPUSH
35010: CALL_OW 1
35014: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35015: LD_VAR 0 1
35019: PPUSH
35020: CALL_OW 302
35024: NOT
35025: IFFALSE 35038
// begin HackUnlinkAll ( i ) ;
35027: LD_VAR 0 1
35031: PPUSH
35032: CALL 35144 0 1
// continue ;
35036: GO 34918
// end ; HackCheckCapturedStatus ( i ) ;
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL 35587 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35047: LD_ADDR_VAR 0 2
35051: PUSH
35052: LD_INT 81
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: CALL_OW 255
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 33
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 91
35081: PUSH
35082: LD_VAR 0 1
35086: PUSH
35087: LD_EXP 119
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 50
35099: PUSH
35100: EMPTY
35101: LIST
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: PPUSH
35109: CALL_OW 69
35113: ST_TO_ADDR
// if not tmp then
35114: LD_VAR 0 2
35118: NOT
35119: IFFALSE 35123
// continue ;
35121: GO 34918
// HackLink ( i , tmp ) ;
35123: LD_VAR 0 1
35127: PPUSH
35128: LD_VAR 0 2
35132: PPUSH
35133: CALL 35280 0 2
// end ;
35137: GO 34918
35139: POP
35140: POP
// end ;
35141: PPOPN 2
35143: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
35148: PPUSH
// if not hack in hackTanks then
35149: LD_VAR 0 1
35153: PUSH
35154: LD_EXP 116
35158: IN
35159: NOT
35160: IFFALSE 35164
// exit ;
35162: GO 35275
// index := GetElementIndex ( hackTanks , hack ) ;
35164: LD_ADDR_VAR 0 4
35168: PUSH
35169: LD_EXP 116
35173: PPUSH
35174: LD_VAR 0 1
35178: PPUSH
35179: CALL 42717 0 2
35183: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35184: LD_EXP 117
35188: PUSH
35189: LD_VAR 0 4
35193: ARRAY
35194: IFFALSE 35275
// begin for i in hackTanksCaptured [ index ] do
35196: LD_ADDR_VAR 0 3
35200: PUSH
35201: LD_EXP 117
35205: PUSH
35206: LD_VAR 0 4
35210: ARRAY
35211: PUSH
35212: FOR_IN
35213: IFFALSE 35239
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35215: LD_VAR 0 3
35219: PUSH
35220: LD_INT 1
35222: ARRAY
35223: PPUSH
35224: LD_VAR 0 3
35228: PUSH
35229: LD_INT 2
35231: ARRAY
35232: PPUSH
35233: CALL_OW 235
35237: GO 35212
35239: POP
35240: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35241: LD_ADDR_EXP 117
35245: PUSH
35246: LD_EXP 117
35250: PPUSH
35251: LD_VAR 0 4
35255: PPUSH
35256: EMPTY
35257: PPUSH
35258: CALL_OW 1
35262: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35263: LD_VAR 0 1
35267: PPUSH
35268: LD_INT 0
35270: PPUSH
35271: CALL_OW 505
// end ; end ;
35275: LD_VAR 0 2
35279: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35280: LD_INT 0
35282: PPUSH
35283: PPUSH
35284: PPUSH
// if not hack in hackTanks or not vehicles then
35285: LD_VAR 0 1
35289: PUSH
35290: LD_EXP 116
35294: IN
35295: NOT
35296: PUSH
35297: LD_VAR 0 2
35301: NOT
35302: OR
35303: IFFALSE 35307
// exit ;
35305: GO 35582
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35307: LD_ADDR_VAR 0 2
35311: PUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: LD_VAR 0 2
35321: PPUSH
35322: LD_INT 1
35324: PPUSH
35325: LD_INT 1
35327: PPUSH
35328: CALL 43367 0 4
35332: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35333: LD_ADDR_VAR 0 5
35337: PUSH
35338: LD_EXP 116
35342: PPUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: CALL 42717 0 2
35352: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35353: LD_EXP 117
35357: PUSH
35358: LD_VAR 0 5
35362: ARRAY
35363: PUSH
35364: LD_EXP 118
35368: LESS
35369: IFFALSE 35558
// begin for i := 1 to vehicles do
35371: LD_ADDR_VAR 0 4
35375: PUSH
35376: DOUBLE
35377: LD_INT 1
35379: DEC
35380: ST_TO_ADDR
35381: LD_VAR 0 2
35385: PUSH
35386: FOR_TO
35387: IFFALSE 35556
// begin if hackTanksCaptured [ index ] = hackLimit then
35389: LD_EXP 117
35393: PUSH
35394: LD_VAR 0 5
35398: ARRAY
35399: PUSH
35400: LD_EXP 118
35404: EQUAL
35405: IFFALSE 35409
// break ;
35407: GO 35556
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35409: LD_ADDR_EXP 120
35413: PUSH
35414: LD_EXP 120
35418: PPUSH
35419: LD_VAR 0 5
35423: PPUSH
35424: LD_EXP 120
35428: PUSH
35429: LD_VAR 0 5
35433: ARRAY
35434: PUSH
35435: LD_INT 1
35437: PLUS
35438: PPUSH
35439: CALL_OW 1
35443: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35444: LD_ADDR_EXP 117
35448: PUSH
35449: LD_EXP 117
35453: PPUSH
35454: LD_VAR 0 5
35458: PUSH
35459: LD_EXP 117
35463: PUSH
35464: LD_VAR 0 5
35468: ARRAY
35469: PUSH
35470: LD_INT 1
35472: PLUS
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PPUSH
35478: LD_VAR 0 2
35482: PUSH
35483: LD_VAR 0 4
35487: ARRAY
35488: PUSH
35489: LD_VAR 0 2
35493: PUSH
35494: LD_VAR 0 4
35498: ARRAY
35499: PPUSH
35500: CALL_OW 255
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PPUSH
35509: CALL 42932 0 3
35513: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35514: LD_VAR 0 2
35518: PUSH
35519: LD_VAR 0 4
35523: ARRAY
35524: PPUSH
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 255
35534: PPUSH
35535: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35539: LD_VAR 0 2
35543: PUSH
35544: LD_VAR 0 4
35548: ARRAY
35549: PPUSH
35550: CALL_OW 141
// end ;
35554: GO 35386
35556: POP
35557: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35558: LD_VAR 0 1
35562: PPUSH
35563: LD_EXP 117
35567: PUSH
35568: LD_VAR 0 5
35572: ARRAY
35573: PUSH
35574: LD_INT 0
35576: PLUS
35577: PPUSH
35578: CALL_OW 505
// end ;
35582: LD_VAR 0 3
35586: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35587: LD_INT 0
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
// if not hack in hackTanks then
35593: LD_VAR 0 1
35597: PUSH
35598: LD_EXP 116
35602: IN
35603: NOT
35604: IFFALSE 35608
// exit ;
35606: GO 35848
// index := GetElementIndex ( hackTanks , hack ) ;
35608: LD_ADDR_VAR 0 4
35612: PUSH
35613: LD_EXP 116
35617: PPUSH
35618: LD_VAR 0 1
35622: PPUSH
35623: CALL 42717 0 2
35627: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: DOUBLE
35634: LD_EXP 117
35638: PUSH
35639: LD_VAR 0 4
35643: ARRAY
35644: INC
35645: ST_TO_ADDR
35646: LD_INT 1
35648: PUSH
35649: FOR_DOWNTO
35650: IFFALSE 35822
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35652: LD_ADDR_VAR 0 5
35656: PUSH
35657: LD_EXP 117
35661: PUSH
35662: LD_VAR 0 4
35666: ARRAY
35667: PUSH
35668: LD_VAR 0 3
35672: ARRAY
35673: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35674: LD_VAR 0 5
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: CALL_OW 302
35687: NOT
35688: PUSH
35689: LD_VAR 0 5
35693: PUSH
35694: LD_INT 1
35696: ARRAY
35697: PPUSH
35698: CALL_OW 255
35702: PUSH
35703: LD_VAR 0 1
35707: PPUSH
35708: CALL_OW 255
35712: NONEQUAL
35713: OR
35714: IFFALSE 35820
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35716: LD_VAR 0 5
35720: PUSH
35721: LD_INT 1
35723: ARRAY
35724: PPUSH
35725: CALL_OW 305
35729: PUSH
35730: LD_VAR 0 5
35734: PUSH
35735: LD_INT 1
35737: ARRAY
35738: PPUSH
35739: CALL_OW 255
35743: PUSH
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 255
35753: EQUAL
35754: AND
35755: IFFALSE 35779
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35757: LD_VAR 0 5
35761: PUSH
35762: LD_INT 1
35764: ARRAY
35765: PPUSH
35766: LD_VAR 0 5
35770: PUSH
35771: LD_INT 2
35773: ARRAY
35774: PPUSH
35775: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35779: LD_ADDR_EXP 117
35783: PUSH
35784: LD_EXP 117
35788: PPUSH
35789: LD_VAR 0 4
35793: PPUSH
35794: LD_EXP 117
35798: PUSH
35799: LD_VAR 0 4
35803: ARRAY
35804: PPUSH
35805: LD_VAR 0 3
35809: PPUSH
35810: CALL_OW 3
35814: PPUSH
35815: CALL_OW 1
35819: ST_TO_ADDR
// end ; end ;
35820: GO 35649
35822: POP
35823: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35824: LD_VAR 0 1
35828: PPUSH
35829: LD_EXP 117
35833: PUSH
35834: LD_VAR 0 4
35838: ARRAY
35839: PUSH
35840: LD_INT 0
35842: PLUS
35843: PPUSH
35844: CALL_OW 505
// end ;
35848: LD_VAR 0 2
35852: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35853: LD_INT 0
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
// if not hack in hackTanks then
35859: LD_VAR 0 1
35863: PUSH
35864: LD_EXP 116
35868: IN
35869: NOT
35870: IFFALSE 35874
// exit ;
35872: GO 35959
// index := GetElementIndex ( hackTanks , hack ) ;
35874: LD_ADDR_VAR 0 5
35878: PUSH
35879: LD_EXP 116
35883: PPUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL 42717 0 2
35893: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: DOUBLE
35900: LD_INT 1
35902: DEC
35903: ST_TO_ADDR
35904: LD_EXP 117
35908: PUSH
35909: LD_VAR 0 5
35913: ARRAY
35914: PUSH
35915: FOR_TO
35916: IFFALSE 35957
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35918: LD_EXP 117
35922: PUSH
35923: LD_VAR 0 5
35927: ARRAY
35928: PUSH
35929: LD_VAR 0 4
35933: ARRAY
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: PUSH
35939: LD_VAR 0 2
35943: EQUAL
35944: IFFALSE 35955
// KillUnit ( vehicle ) ;
35946: LD_VAR 0 2
35950: PPUSH
35951: CALL_OW 66
35955: GO 35915
35957: POP
35958: POP
// end ;
35959: LD_VAR 0 3
35963: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35964: LD_EXP 121
35968: NOT
35969: IFFALSE 36004
35971: GO 35973
35973: DISABLE
// begin initMiner := true ;
35974: LD_ADDR_EXP 121
35978: PUSH
35979: LD_INT 1
35981: ST_TO_ADDR
// minersList := [ ] ;
35982: LD_ADDR_EXP 122
35986: PUSH
35987: EMPTY
35988: ST_TO_ADDR
// minerMinesList := [ ] ;
35989: LD_ADDR_EXP 123
35993: PUSH
35994: EMPTY
35995: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35996: LD_ADDR_EXP 124
36000: PUSH
36001: LD_INT 5
36003: ST_TO_ADDR
// end ;
36004: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36005: LD_EXP 121
36009: PUSH
36010: LD_INT 34
36012: PUSH
36013: LD_INT 81
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PPUSH
36020: CALL_OW 69
36024: AND
36025: IFFALSE 36486
36027: GO 36029
36029: DISABLE
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
// begin enable ;
36036: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36037: LD_ADDR_VAR 0 1
36041: PUSH
36042: LD_INT 34
36044: PUSH
36045: LD_INT 81
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PPUSH
36052: CALL_OW 69
36056: PUSH
36057: FOR_IN
36058: IFFALSE 36130
// begin if not i in minersList then
36060: LD_VAR 0 1
36064: PUSH
36065: LD_EXP 122
36069: IN
36070: NOT
36071: IFFALSE 36128
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36073: LD_ADDR_EXP 122
36077: PUSH
36078: LD_EXP 122
36082: PPUSH
36083: LD_EXP 122
36087: PUSH
36088: LD_INT 1
36090: PLUS
36091: PPUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 1
36101: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36102: LD_ADDR_EXP 123
36106: PUSH
36107: LD_EXP 123
36111: PPUSH
36112: LD_EXP 123
36116: PUSH
36117: LD_INT 1
36119: PLUS
36120: PPUSH
36121: EMPTY
36122: PPUSH
36123: CALL_OW 1
36127: ST_TO_ADDR
// end end ;
36128: GO 36057
36130: POP
36131: POP
// for i := minerMinesList downto 1 do
36132: LD_ADDR_VAR 0 1
36136: PUSH
36137: DOUBLE
36138: LD_EXP 123
36142: INC
36143: ST_TO_ADDR
36144: LD_INT 1
36146: PUSH
36147: FOR_DOWNTO
36148: IFFALSE 36484
// begin if IsLive ( minersList [ i ] ) then
36150: LD_EXP 122
36154: PUSH
36155: LD_VAR 0 1
36159: ARRAY
36160: PPUSH
36161: CALL_OW 300
36165: IFFALSE 36193
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36167: LD_EXP 122
36171: PUSH
36172: LD_VAR 0 1
36176: ARRAY
36177: PPUSH
36178: LD_EXP 123
36182: PUSH
36183: LD_VAR 0 1
36187: ARRAY
36188: PPUSH
36189: CALL_OW 505
// if not minerMinesList [ i ] then
36193: LD_EXP 123
36197: PUSH
36198: LD_VAR 0 1
36202: ARRAY
36203: NOT
36204: IFFALSE 36208
// continue ;
36206: GO 36147
// for j := minerMinesList [ i ] downto 1 do
36208: LD_ADDR_VAR 0 2
36212: PUSH
36213: DOUBLE
36214: LD_EXP 123
36218: PUSH
36219: LD_VAR 0 1
36223: ARRAY
36224: INC
36225: ST_TO_ADDR
36226: LD_INT 1
36228: PUSH
36229: FOR_DOWNTO
36230: IFFALSE 36480
// begin side := GetSide ( minersList [ i ] ) ;
36232: LD_ADDR_VAR 0 3
36236: PUSH
36237: LD_EXP 122
36241: PUSH
36242: LD_VAR 0 1
36246: ARRAY
36247: PPUSH
36248: CALL_OW 255
36252: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36253: LD_ADDR_VAR 0 4
36257: PUSH
36258: LD_EXP 123
36262: PUSH
36263: LD_VAR 0 1
36267: ARRAY
36268: PUSH
36269: LD_VAR 0 2
36273: ARRAY
36274: PUSH
36275: LD_INT 1
36277: ARRAY
36278: PPUSH
36279: LD_EXP 123
36283: PUSH
36284: LD_VAR 0 1
36288: ARRAY
36289: PUSH
36290: LD_VAR 0 2
36294: ARRAY
36295: PUSH
36296: LD_INT 2
36298: ARRAY
36299: PPUSH
36300: CALL_OW 428
36304: ST_TO_ADDR
// if not tmp then
36305: LD_VAR 0 4
36309: NOT
36310: IFFALSE 36314
// continue ;
36312: GO 36229
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36314: LD_VAR 0 4
36318: PUSH
36319: LD_INT 81
36321: PUSH
36322: LD_VAR 0 3
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PPUSH
36331: CALL_OW 69
36335: IN
36336: PUSH
36337: LD_EXP 123
36341: PUSH
36342: LD_VAR 0 1
36346: ARRAY
36347: PUSH
36348: LD_VAR 0 2
36352: ARRAY
36353: PUSH
36354: LD_INT 1
36356: ARRAY
36357: PPUSH
36358: LD_EXP 123
36362: PUSH
36363: LD_VAR 0 1
36367: ARRAY
36368: PUSH
36369: LD_VAR 0 2
36373: ARRAY
36374: PUSH
36375: LD_INT 2
36377: ARRAY
36378: PPUSH
36379: CALL_OW 458
36383: AND
36384: IFFALSE 36478
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36386: LD_EXP 123
36390: PUSH
36391: LD_VAR 0 1
36395: ARRAY
36396: PUSH
36397: LD_VAR 0 2
36401: ARRAY
36402: PUSH
36403: LD_INT 1
36405: ARRAY
36406: PPUSH
36407: LD_EXP 123
36411: PUSH
36412: LD_VAR 0 1
36416: ARRAY
36417: PUSH
36418: LD_VAR 0 2
36422: ARRAY
36423: PUSH
36424: LD_INT 2
36426: ARRAY
36427: PPUSH
36428: LD_VAR 0 3
36432: PPUSH
36433: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36437: LD_ADDR_EXP 123
36441: PUSH
36442: LD_EXP 123
36446: PPUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: LD_EXP 123
36456: PUSH
36457: LD_VAR 0 1
36461: ARRAY
36462: PPUSH
36463: LD_VAR 0 2
36467: PPUSH
36468: CALL_OW 3
36472: PPUSH
36473: CALL_OW 1
36477: ST_TO_ADDR
// end ; end ;
36478: GO 36229
36480: POP
36481: POP
// end ;
36482: GO 36147
36484: POP
36485: POP
// end ;
36486: PPOPN 4
36488: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36489: LD_INT 0
36491: PPUSH
36492: PPUSH
// result := false ;
36493: LD_ADDR_VAR 0 4
36497: PUSH
36498: LD_INT 0
36500: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 264
36510: PUSH
36511: LD_INT 81
36513: EQUAL
36514: NOT
36515: IFFALSE 36519
// exit ;
36517: GO 36759
// index := GetElementIndex ( minersList , unit ) ;
36519: LD_ADDR_VAR 0 5
36523: PUSH
36524: LD_EXP 122
36528: PPUSH
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL 42717 0 2
36538: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36539: LD_EXP 123
36543: PUSH
36544: LD_VAR 0 5
36548: ARRAY
36549: PUSH
36550: LD_EXP 124
36554: GREATEREQUAL
36555: IFFALSE 36559
// exit ;
36557: GO 36759
// ComMoveXY ( unit , x , y ) ;
36559: LD_VAR 0 1
36563: PPUSH
36564: LD_VAR 0 2
36568: PPUSH
36569: LD_VAR 0 3
36573: PPUSH
36574: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36578: LD_INT 35
36580: PPUSH
36581: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36585: LD_VAR 0 1
36589: PPUSH
36590: LD_VAR 0 2
36594: PPUSH
36595: LD_VAR 0 3
36599: PPUSH
36600: CALL 74101 0 3
36604: NOT
36605: PUSH
36606: LD_VAR 0 1
36610: PPUSH
36611: CALL_OW 314
36615: AND
36616: IFFALSE 36620
// exit ;
36618: GO 36759
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: CALL_OW 428
36634: PUSH
36635: LD_VAR 0 1
36639: EQUAL
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 314
36650: NOT
36651: AND
36652: IFFALSE 36578
// PlaySoundXY ( x , y , PlantMine ) ;
36654: LD_VAR 0 2
36658: PPUSH
36659: LD_VAR 0 3
36663: PPUSH
36664: LD_STRING PlantMine
36666: PPUSH
36667: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36671: LD_VAR 0 2
36675: PPUSH
36676: LD_VAR 0 3
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 255
36690: PPUSH
36691: LD_INT 0
36693: PPUSH
36694: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36698: LD_ADDR_EXP 123
36702: PUSH
36703: LD_EXP 123
36707: PPUSH
36708: LD_VAR 0 5
36712: PUSH
36713: LD_EXP 123
36717: PUSH
36718: LD_VAR 0 5
36722: ARRAY
36723: PUSH
36724: LD_INT 1
36726: PLUS
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PPUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_VAR 0 3
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: CALL 42932 0 3
36750: ST_TO_ADDR
// result := true ;
36751: LD_ADDR_VAR 0 4
36755: PUSH
36756: LD_INT 1
36758: ST_TO_ADDR
// end ;
36759: LD_VAR 0 4
36763: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36764: LD_INT 0
36766: PPUSH
36767: PPUSH
36768: PPUSH
// if not unit in minersList then
36769: LD_VAR 0 1
36773: PUSH
36774: LD_EXP 122
36778: IN
36779: NOT
36780: IFFALSE 36784
// exit ;
36782: GO 37176
// index := GetElementIndex ( minersList , unit ) ;
36784: LD_ADDR_VAR 0 6
36788: PUSH
36789: LD_EXP 122
36793: PPUSH
36794: LD_VAR 0 1
36798: PPUSH
36799: CALL 42717 0 2
36803: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: DOUBLE
36810: LD_EXP 123
36814: PUSH
36815: LD_VAR 0 6
36819: ARRAY
36820: INC
36821: ST_TO_ADDR
36822: LD_INT 1
36824: PUSH
36825: FOR_DOWNTO
36826: IFFALSE 36987
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36828: LD_EXP 123
36832: PUSH
36833: LD_VAR 0 6
36837: ARRAY
36838: PUSH
36839: LD_VAR 0 5
36843: ARRAY
36844: PUSH
36845: LD_INT 1
36847: ARRAY
36848: PUSH
36849: LD_VAR 0 2
36853: EQUAL
36854: PUSH
36855: LD_EXP 123
36859: PUSH
36860: LD_VAR 0 6
36864: ARRAY
36865: PUSH
36866: LD_VAR 0 5
36870: ARRAY
36871: PUSH
36872: LD_INT 2
36874: ARRAY
36875: PUSH
36876: LD_VAR 0 3
36880: EQUAL
36881: AND
36882: IFFALSE 36985
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36884: LD_EXP 123
36888: PUSH
36889: LD_VAR 0 6
36893: ARRAY
36894: PUSH
36895: LD_VAR 0 5
36899: ARRAY
36900: PUSH
36901: LD_INT 1
36903: ARRAY
36904: PPUSH
36905: LD_EXP 123
36909: PUSH
36910: LD_VAR 0 6
36914: ARRAY
36915: PUSH
36916: LD_VAR 0 5
36920: ARRAY
36921: PUSH
36922: LD_INT 2
36924: ARRAY
36925: PPUSH
36926: LD_VAR 0 1
36930: PPUSH
36931: CALL_OW 255
36935: PPUSH
36936: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36940: LD_ADDR_EXP 123
36944: PUSH
36945: LD_EXP 123
36949: PPUSH
36950: LD_VAR 0 6
36954: PPUSH
36955: LD_EXP 123
36959: PUSH
36960: LD_VAR 0 6
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 5
36970: PPUSH
36971: CALL_OW 3
36975: PPUSH
36976: CALL_OW 1
36980: ST_TO_ADDR
// exit ;
36981: POP
36982: POP
36983: GO 37176
// end ; end ;
36985: GO 36825
36987: POP
36988: POP
// for i := minerMinesList [ index ] downto 1 do
36989: LD_ADDR_VAR 0 5
36993: PUSH
36994: DOUBLE
36995: LD_EXP 123
36999: PUSH
37000: LD_VAR 0 6
37004: ARRAY
37005: INC
37006: ST_TO_ADDR
37007: LD_INT 1
37009: PUSH
37010: FOR_DOWNTO
37011: IFFALSE 37174
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37013: LD_EXP 123
37017: PUSH
37018: LD_VAR 0 6
37022: ARRAY
37023: PUSH
37024: LD_VAR 0 5
37028: ARRAY
37029: PUSH
37030: LD_INT 1
37032: ARRAY
37033: PPUSH
37034: LD_EXP 123
37038: PUSH
37039: LD_VAR 0 6
37043: ARRAY
37044: PUSH
37045: LD_VAR 0 5
37049: ARRAY
37050: PUSH
37051: LD_INT 2
37053: ARRAY
37054: PPUSH
37055: LD_VAR 0 2
37059: PPUSH
37060: LD_VAR 0 3
37064: PPUSH
37065: CALL_OW 298
37069: PUSH
37070: LD_INT 6
37072: LESS
37073: IFFALSE 37172
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37075: LD_EXP 123
37079: PUSH
37080: LD_VAR 0 6
37084: ARRAY
37085: PUSH
37086: LD_VAR 0 5
37090: ARRAY
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: LD_EXP 123
37100: PUSH
37101: LD_VAR 0 6
37105: ARRAY
37106: PUSH
37107: LD_VAR 0 5
37111: ARRAY
37112: PUSH
37113: LD_INT 2
37115: ARRAY
37116: PPUSH
37117: LD_VAR 0 1
37121: PPUSH
37122: CALL_OW 255
37126: PPUSH
37127: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37131: LD_ADDR_EXP 123
37135: PUSH
37136: LD_EXP 123
37140: PPUSH
37141: LD_VAR 0 6
37145: PPUSH
37146: LD_EXP 123
37150: PUSH
37151: LD_VAR 0 6
37155: ARRAY
37156: PPUSH
37157: LD_VAR 0 5
37161: PPUSH
37162: CALL_OW 3
37166: PPUSH
37167: CALL_OW 1
37171: ST_TO_ADDR
// end ; end ;
37172: GO 37010
37174: POP
37175: POP
// end ;
37176: LD_VAR 0 4
37180: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37192: LD_VAR 0 1
37196: PPUSH
37197: CALL_OW 264
37201: PUSH
37202: LD_INT 81
37204: EQUAL
37205: NOT
37206: PUSH
37207: LD_VAR 0 1
37211: PUSH
37212: LD_EXP 122
37216: IN
37217: NOT
37218: OR
37219: IFFALSE 37223
// exit ;
37221: GO 37545
// index := GetElementIndex ( minersList , unit ) ;
37223: LD_ADDR_VAR 0 6
37227: PUSH
37228: LD_EXP 122
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL 42717 0 2
37242: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37243: LD_ADDR_VAR 0 8
37247: PUSH
37248: LD_EXP 124
37252: PUSH
37253: LD_EXP 123
37257: PUSH
37258: LD_VAR 0 6
37262: ARRAY
37263: MINUS
37264: ST_TO_ADDR
// if not minesFreeAmount then
37265: LD_VAR 0 8
37269: NOT
37270: IFFALSE 37274
// exit ;
37272: GO 37545
// tmp := [ ] ;
37274: LD_ADDR_VAR 0 7
37278: PUSH
37279: EMPTY
37280: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37281: LD_ADDR_VAR 0 5
37285: PUSH
37286: DOUBLE
37287: LD_INT 1
37289: DEC
37290: ST_TO_ADDR
37291: LD_VAR 0 8
37295: PUSH
37296: FOR_TO
37297: IFFALSE 37492
// begin _d := rand ( 0 , 5 ) ;
37299: LD_ADDR_VAR 0 11
37303: PUSH
37304: LD_INT 0
37306: PPUSH
37307: LD_INT 5
37309: PPUSH
37310: CALL_OW 12
37314: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37315: LD_ADDR_VAR 0 12
37319: PUSH
37320: LD_INT 2
37322: PPUSH
37323: LD_INT 6
37325: PPUSH
37326: CALL_OW 12
37330: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37331: LD_ADDR_VAR 0 9
37335: PUSH
37336: LD_VAR 0 2
37340: PPUSH
37341: LD_VAR 0 11
37345: PPUSH
37346: LD_VAR 0 12
37350: PPUSH
37351: CALL_OW 272
37355: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37356: LD_ADDR_VAR 0 10
37360: PUSH
37361: LD_VAR 0 3
37365: PPUSH
37366: LD_VAR 0 11
37370: PPUSH
37371: LD_VAR 0 12
37375: PPUSH
37376: CALL_OW 273
37380: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37381: LD_VAR 0 9
37385: PPUSH
37386: LD_VAR 0 10
37390: PPUSH
37391: CALL_OW 488
37395: PUSH
37396: LD_VAR 0 9
37400: PUSH
37401: LD_VAR 0 10
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_VAR 0 7
37414: IN
37415: NOT
37416: AND
37417: PUSH
37418: LD_VAR 0 9
37422: PPUSH
37423: LD_VAR 0 10
37427: PPUSH
37428: CALL_OW 458
37432: NOT
37433: AND
37434: IFFALSE 37476
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37436: LD_ADDR_VAR 0 7
37440: PUSH
37441: LD_VAR 0 7
37445: PPUSH
37446: LD_VAR 0 7
37450: PUSH
37451: LD_INT 1
37453: PLUS
37454: PPUSH
37455: LD_VAR 0 9
37459: PUSH
37460: LD_VAR 0 10
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PPUSH
37469: CALL_OW 1
37473: ST_TO_ADDR
37474: GO 37490
// i := i - 1 ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: LD_VAR 0 5
37485: PUSH
37486: LD_INT 1
37488: MINUS
37489: ST_TO_ADDR
// end ;
37490: GO 37296
37492: POP
37493: POP
// for i in tmp do
37494: LD_ADDR_VAR 0 5
37498: PUSH
37499: LD_VAR 0 7
37503: PUSH
37504: FOR_IN
37505: IFFALSE 37543
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37507: LD_VAR 0 1
37511: PPUSH
37512: LD_VAR 0 5
37516: PUSH
37517: LD_INT 1
37519: ARRAY
37520: PPUSH
37521: LD_VAR 0 5
37525: PUSH
37526: LD_INT 2
37528: ARRAY
37529: PPUSH
37530: CALL 36489 0 3
37534: NOT
37535: IFFALSE 37541
// exit ;
37537: POP
37538: POP
37539: GO 37545
37541: GO 37504
37543: POP
37544: POP
// end ;
37545: LD_VAR 0 4
37549: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37550: LD_INT 0
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
// if not GetClass ( unit ) = class_sniper then
37559: LD_VAR 0 1
37563: PPUSH
37564: CALL_OW 257
37568: PUSH
37569: LD_INT 5
37571: EQUAL
37572: NOT
37573: IFFALSE 37577
// exit ;
37575: GO 37965
// dist := 8 ;
37577: LD_ADDR_VAR 0 5
37581: PUSH
37582: LD_INT 8
37584: ST_TO_ADDR
// viewRange := 12 ;
37585: LD_ADDR_VAR 0 7
37589: PUSH
37590: LD_INT 12
37592: ST_TO_ADDR
// side := GetSide ( unit ) ;
37593: LD_ADDR_VAR 0 6
37597: PUSH
37598: LD_VAR 0 1
37602: PPUSH
37603: CALL_OW 255
37607: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37608: LD_INT 61
37610: PPUSH
37611: LD_VAR 0 6
37615: PPUSH
37616: CALL_OW 321
37620: PUSH
37621: LD_INT 2
37623: EQUAL
37624: IFFALSE 37634
// viewRange := 16 ;
37626: LD_ADDR_VAR 0 7
37630: PUSH
37631: LD_INT 16
37633: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37634: LD_VAR 0 1
37638: PPUSH
37639: LD_VAR 0 2
37643: PPUSH
37644: LD_VAR 0 3
37648: PPUSH
37649: CALL_OW 297
37653: PUSH
37654: LD_VAR 0 5
37658: GREATER
37659: IFFALSE 37738
// begin ComMoveXY ( unit , x , y ) ;
37661: LD_VAR 0 1
37665: PPUSH
37666: LD_VAR 0 2
37670: PPUSH
37671: LD_VAR 0 3
37675: PPUSH
37676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37680: LD_INT 35
37682: PPUSH
37683: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37687: LD_VAR 0 1
37691: PPUSH
37692: LD_VAR 0 2
37696: PPUSH
37697: LD_VAR 0 3
37701: PPUSH
37702: CALL 74101 0 3
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 37965
// until GetDistUnitXY ( unit , x , y ) < dist ;
37711: LD_VAR 0 1
37715: PPUSH
37716: LD_VAR 0 2
37720: PPUSH
37721: LD_VAR 0 3
37725: PPUSH
37726: CALL_OW 297
37730: PUSH
37731: LD_VAR 0 5
37735: LESS
37736: IFFALSE 37680
// end ; ComTurnXY ( unit , x , y ) ;
37738: LD_VAR 0 1
37742: PPUSH
37743: LD_VAR 0 2
37747: PPUSH
37748: LD_VAR 0 3
37752: PPUSH
37753: CALL_OW 118
// wait ( 5 ) ;
37757: LD_INT 5
37759: PPUSH
37760: CALL_OW 67
// _d := GetDir ( unit ) ;
37764: LD_ADDR_VAR 0 10
37768: PUSH
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL_OW 254
37778: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37779: LD_ADDR_VAR 0 8
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 250
37793: PPUSH
37794: LD_VAR 0 10
37798: PPUSH
37799: LD_VAR 0 5
37803: PPUSH
37804: CALL_OW 272
37808: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37809: LD_ADDR_VAR 0 9
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 251
37823: PPUSH
37824: LD_VAR 0 10
37828: PPUSH
37829: LD_VAR 0 5
37833: PPUSH
37834: CALL_OW 273
37838: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37839: LD_VAR 0 8
37843: PPUSH
37844: LD_VAR 0 9
37848: PPUSH
37849: CALL_OW 488
37853: NOT
37854: IFFALSE 37858
// exit ;
37856: GO 37965
// ComAnimCustom ( unit , 1 ) ;
37858: LD_VAR 0 1
37862: PPUSH
37863: LD_INT 1
37865: PPUSH
37866: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37870: LD_VAR 0 8
37874: PPUSH
37875: LD_VAR 0 9
37879: PPUSH
37880: LD_VAR 0 6
37884: PPUSH
37885: LD_VAR 0 7
37889: PPUSH
37890: CALL_OW 330
// repeat wait ( 1 ) ;
37894: LD_INT 1
37896: PPUSH
37897: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37901: LD_VAR 0 1
37905: PPUSH
37906: CALL_OW 316
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 314
37920: OR
37921: PUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 302
37931: NOT
37932: OR
37933: PUSH
37934: LD_VAR 0 1
37938: PPUSH
37939: CALL_OW 301
37943: OR
37944: IFFALSE 37894
// RemoveSeeing ( _x , _y , side ) ;
37946: LD_VAR 0 8
37950: PPUSH
37951: LD_VAR 0 9
37955: PPUSH
37956: LD_VAR 0 6
37960: PPUSH
37961: CALL_OW 331
// end ; end_of_file
37965: LD_VAR 0 4
37969: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37970: LD_INT 0
37972: PPUSH
37973: PPUSH
// if exist_mode then
37974: LD_VAR 0 2
37978: IFFALSE 38003
// unit := CreateCharacter ( prefix & ident ) else
37980: LD_ADDR_VAR 0 5
37984: PUSH
37985: LD_VAR 0 3
37989: PUSH
37990: LD_VAR 0 1
37994: STR
37995: PPUSH
37996: CALL_OW 34
38000: ST_TO_ADDR
38001: GO 38018
// unit := NewCharacter ( ident ) ;
38003: LD_ADDR_VAR 0 5
38007: PUSH
38008: LD_VAR 0 1
38012: PPUSH
38013: CALL_OW 25
38017: ST_TO_ADDR
// result := unit ;
38018: LD_ADDR_VAR 0 4
38022: PUSH
38023: LD_VAR 0 5
38027: ST_TO_ADDR
// end ;
38028: LD_VAR 0 4
38032: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38033: LD_INT 0
38035: PPUSH
38036: PPUSH
// if not side or not nation then
38037: LD_VAR 0 1
38041: NOT
38042: PUSH
38043: LD_VAR 0 2
38047: NOT
38048: OR
38049: IFFALSE 38053
// exit ;
38051: GO 38821
// case nation of nation_american :
38053: LD_VAR 0 2
38057: PUSH
38058: LD_INT 1
38060: DOUBLE
38061: EQUAL
38062: IFTRUE 38066
38064: GO 38280
38066: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38067: LD_ADDR_VAR 0 4
38071: PUSH
38072: LD_INT 35
38074: PUSH
38075: LD_INT 45
38077: PUSH
38078: LD_INT 46
38080: PUSH
38081: LD_INT 47
38083: PUSH
38084: LD_INT 82
38086: PUSH
38087: LD_INT 83
38089: PUSH
38090: LD_INT 84
38092: PUSH
38093: LD_INT 85
38095: PUSH
38096: LD_INT 86
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: LD_INT 6
38107: PUSH
38108: LD_INT 15
38110: PUSH
38111: LD_INT 16
38113: PUSH
38114: LD_INT 7
38116: PUSH
38117: LD_INT 12
38119: PUSH
38120: LD_INT 13
38122: PUSH
38123: LD_INT 10
38125: PUSH
38126: LD_INT 14
38128: PUSH
38129: LD_INT 20
38131: PUSH
38132: LD_INT 21
38134: PUSH
38135: LD_INT 22
38137: PUSH
38138: LD_INT 25
38140: PUSH
38141: LD_INT 32
38143: PUSH
38144: LD_INT 27
38146: PUSH
38147: LD_INT 36
38149: PUSH
38150: LD_INT 69
38152: PUSH
38153: LD_INT 39
38155: PUSH
38156: LD_INT 34
38158: PUSH
38159: LD_INT 40
38161: PUSH
38162: LD_INT 48
38164: PUSH
38165: LD_INT 49
38167: PUSH
38168: LD_INT 50
38170: PUSH
38171: LD_INT 51
38173: PUSH
38174: LD_INT 52
38176: PUSH
38177: LD_INT 53
38179: PUSH
38180: LD_INT 54
38182: PUSH
38183: LD_INT 55
38185: PUSH
38186: LD_INT 56
38188: PUSH
38189: LD_INT 57
38191: PUSH
38192: LD_INT 58
38194: PUSH
38195: LD_INT 59
38197: PUSH
38198: LD_INT 60
38200: PUSH
38201: LD_INT 61
38203: PUSH
38204: LD_INT 62
38206: PUSH
38207: LD_INT 80
38209: PUSH
38210: LD_INT 82
38212: PUSH
38213: LD_INT 83
38215: PUSH
38216: LD_INT 84
38218: PUSH
38219: LD_INT 85
38221: PUSH
38222: LD_INT 86
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
38278: GO 38745
38280: LD_INT 2
38282: DOUBLE
38283: EQUAL
38284: IFTRUE 38288
38286: GO 38514
38288: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38289: LD_ADDR_VAR 0 4
38293: PUSH
38294: LD_INT 35
38296: PUSH
38297: LD_INT 45
38299: PUSH
38300: LD_INT 46
38302: PUSH
38303: LD_INT 47
38305: PUSH
38306: LD_INT 82
38308: PUSH
38309: LD_INT 83
38311: PUSH
38312: LD_INT 84
38314: PUSH
38315: LD_INT 85
38317: PUSH
38318: LD_INT 87
38320: PUSH
38321: LD_INT 70
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 11
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: LD_INT 4
38335: PUSH
38336: LD_INT 5
38338: PUSH
38339: LD_INT 6
38341: PUSH
38342: LD_INT 15
38344: PUSH
38345: LD_INT 18
38347: PUSH
38348: LD_INT 7
38350: PUSH
38351: LD_INT 17
38353: PUSH
38354: LD_INT 8
38356: PUSH
38357: LD_INT 20
38359: PUSH
38360: LD_INT 21
38362: PUSH
38363: LD_INT 22
38365: PUSH
38366: LD_INT 72
38368: PUSH
38369: LD_INT 26
38371: PUSH
38372: LD_INT 69
38374: PUSH
38375: LD_INT 39
38377: PUSH
38378: LD_INT 40
38380: PUSH
38381: LD_INT 41
38383: PUSH
38384: LD_INT 42
38386: PUSH
38387: LD_INT 43
38389: PUSH
38390: LD_INT 48
38392: PUSH
38393: LD_INT 49
38395: PUSH
38396: LD_INT 50
38398: PUSH
38399: LD_INT 51
38401: PUSH
38402: LD_INT 52
38404: PUSH
38405: LD_INT 53
38407: PUSH
38408: LD_INT 54
38410: PUSH
38411: LD_INT 55
38413: PUSH
38414: LD_INT 56
38416: PUSH
38417: LD_INT 60
38419: PUSH
38420: LD_INT 61
38422: PUSH
38423: LD_INT 62
38425: PUSH
38426: LD_INT 66
38428: PUSH
38429: LD_INT 67
38431: PUSH
38432: LD_INT 68
38434: PUSH
38435: LD_INT 81
38437: PUSH
38438: LD_INT 82
38440: PUSH
38441: LD_INT 83
38443: PUSH
38444: LD_INT 84
38446: PUSH
38447: LD_INT 85
38449: PUSH
38450: LD_INT 87
38452: PUSH
38453: LD_INT 88
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: ST_TO_ADDR
38512: GO 38745
38514: LD_INT 3
38516: DOUBLE
38517: EQUAL
38518: IFTRUE 38522
38520: GO 38744
38522: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: LD_INT 46
38530: PUSH
38531: LD_INT 47
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 82
38542: PUSH
38543: LD_INT 83
38545: PUSH
38546: LD_INT 84
38548: PUSH
38549: LD_INT 85
38551: PUSH
38552: LD_INT 86
38554: PUSH
38555: LD_INT 11
38557: PUSH
38558: LD_INT 9
38560: PUSH
38561: LD_INT 20
38563: PUSH
38564: LD_INT 19
38566: PUSH
38567: LD_INT 21
38569: PUSH
38570: LD_INT 24
38572: PUSH
38573: LD_INT 22
38575: PUSH
38576: LD_INT 25
38578: PUSH
38579: LD_INT 28
38581: PUSH
38582: LD_INT 29
38584: PUSH
38585: LD_INT 30
38587: PUSH
38588: LD_INT 31
38590: PUSH
38591: LD_INT 37
38593: PUSH
38594: LD_INT 38
38596: PUSH
38597: LD_INT 32
38599: PUSH
38600: LD_INT 27
38602: PUSH
38603: LD_INT 33
38605: PUSH
38606: LD_INT 69
38608: PUSH
38609: LD_INT 39
38611: PUSH
38612: LD_INT 34
38614: PUSH
38615: LD_INT 40
38617: PUSH
38618: LD_INT 71
38620: PUSH
38621: LD_INT 23
38623: PUSH
38624: LD_INT 44
38626: PUSH
38627: LD_INT 48
38629: PUSH
38630: LD_INT 49
38632: PUSH
38633: LD_INT 50
38635: PUSH
38636: LD_INT 51
38638: PUSH
38639: LD_INT 52
38641: PUSH
38642: LD_INT 53
38644: PUSH
38645: LD_INT 54
38647: PUSH
38648: LD_INT 55
38650: PUSH
38651: LD_INT 56
38653: PUSH
38654: LD_INT 57
38656: PUSH
38657: LD_INT 58
38659: PUSH
38660: LD_INT 59
38662: PUSH
38663: LD_INT 63
38665: PUSH
38666: LD_INT 64
38668: PUSH
38669: LD_INT 65
38671: PUSH
38672: LD_INT 82
38674: PUSH
38675: LD_INT 83
38677: PUSH
38678: LD_INT 84
38680: PUSH
38681: LD_INT 85
38683: PUSH
38684: LD_INT 86
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
38742: GO 38745
38744: POP
// if state > - 1 and state < 3 then
38745: LD_VAR 0 3
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: GREATER
38754: PUSH
38755: LD_VAR 0 3
38759: PUSH
38760: LD_INT 3
38762: LESS
38763: AND
38764: IFFALSE 38821
// for i in result do
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: LD_VAR 0 4
38775: PUSH
38776: FOR_IN
38777: IFFALSE 38819
// if GetTech ( i , side ) <> state then
38779: LD_VAR 0 5
38783: PPUSH
38784: LD_VAR 0 1
38788: PPUSH
38789: CALL_OW 321
38793: PUSH
38794: LD_VAR 0 3
38798: NONEQUAL
38799: IFFALSE 38817
// result := result diff i ;
38801: LD_ADDR_VAR 0 4
38805: PUSH
38806: LD_VAR 0 4
38810: PUSH
38811: LD_VAR 0 5
38815: DIFF
38816: ST_TO_ADDR
38817: GO 38776
38819: POP
38820: POP
// end ;
38821: LD_VAR 0 4
38825: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38826: LD_INT 0
38828: PPUSH
38829: PPUSH
38830: PPUSH
// result := true ;
38831: LD_ADDR_VAR 0 3
38835: PUSH
38836: LD_INT 1
38838: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: LD_VAR 0 2
38848: PPUSH
38849: CALL_OW 480
38853: ST_TO_ADDR
// if not tmp then
38854: LD_VAR 0 5
38858: NOT
38859: IFFALSE 38863
// exit ;
38861: GO 38912
// for i in tmp do
38863: LD_ADDR_VAR 0 4
38867: PUSH
38868: LD_VAR 0 5
38872: PUSH
38873: FOR_IN
38874: IFFALSE 38910
// if GetTech ( i , side ) <> state_researched then
38876: LD_VAR 0 4
38880: PPUSH
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 321
38890: PUSH
38891: LD_INT 2
38893: NONEQUAL
38894: IFFALSE 38908
// begin result := false ;
38896: LD_ADDR_VAR 0 3
38900: PUSH
38901: LD_INT 0
38903: ST_TO_ADDR
// exit ;
38904: POP
38905: POP
38906: GO 38912
// end ;
38908: GO 38873
38910: POP
38911: POP
// end ;
38912: LD_VAR 0 3
38916: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38917: LD_INT 0
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38932: LD_VAR 0 1
38936: NOT
38937: PUSH
38938: LD_VAR 0 1
38942: PPUSH
38943: CALL_OW 257
38947: PUSH
38948: LD_INT 9
38950: NONEQUAL
38951: OR
38952: IFFALSE 38956
// exit ;
38954: GO 39529
// side := GetSide ( unit ) ;
38956: LD_ADDR_VAR 0 9
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 255
38970: ST_TO_ADDR
// tech_space := tech_spacanom ;
38971: LD_ADDR_VAR 0 12
38975: PUSH
38976: LD_INT 29
38978: ST_TO_ADDR
// tech_time := tech_taurad ;
38979: LD_ADDR_VAR 0 13
38983: PUSH
38984: LD_INT 28
38986: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38987: LD_ADDR_VAR 0 11
38991: PUSH
38992: LD_VAR 0 1
38996: PPUSH
38997: CALL_OW 310
39001: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39002: LD_VAR 0 11
39006: PPUSH
39007: CALL_OW 247
39011: PUSH
39012: LD_INT 2
39014: EQUAL
39015: IFFALSE 39019
// exit ;
39017: GO 39529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39019: LD_ADDR_VAR 0 8
39023: PUSH
39024: LD_INT 81
39026: PUSH
39027: LD_VAR 0 9
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 3
39038: PUSH
39039: LD_INT 21
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PPUSH
39057: CALL_OW 69
39061: ST_TO_ADDR
// if not tmp then
39062: LD_VAR 0 8
39066: NOT
39067: IFFALSE 39071
// exit ;
39069: GO 39529
// if in_unit then
39071: LD_VAR 0 11
39075: IFFALSE 39099
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39077: LD_ADDR_VAR 0 10
39081: PUSH
39082: LD_VAR 0 8
39086: PPUSH
39087: LD_VAR 0 11
39091: PPUSH
39092: CALL_OW 74
39096: ST_TO_ADDR
39097: GO 39119
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39099: LD_ADDR_VAR 0 10
39103: PUSH
39104: LD_VAR 0 8
39108: PPUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 74
39118: ST_TO_ADDR
// if not enemy then
39119: LD_VAR 0 10
39123: NOT
39124: IFFALSE 39128
// exit ;
39126: GO 39529
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39128: LD_VAR 0 11
39132: PUSH
39133: LD_VAR 0 11
39137: PPUSH
39138: LD_VAR 0 10
39142: PPUSH
39143: CALL_OW 296
39147: PUSH
39148: LD_INT 13
39150: GREATER
39151: AND
39152: PUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: LD_VAR 0 10
39162: PPUSH
39163: CALL_OW 296
39167: PUSH
39168: LD_INT 12
39170: GREATER
39171: OR
39172: IFFALSE 39176
// exit ;
39174: GO 39529
// missile := [ 1 ] ;
39176: LD_ADDR_VAR 0 14
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39187: LD_VAR 0 9
39191: PPUSH
39192: LD_VAR 0 12
39196: PPUSH
39197: CALL_OW 325
39201: IFFALSE 39230
// missile := Replace ( missile , missile + 1 , 2 ) ;
39203: LD_ADDR_VAR 0 14
39207: PUSH
39208: LD_VAR 0 14
39212: PPUSH
39213: LD_VAR 0 14
39217: PUSH
39218: LD_INT 1
39220: PLUS
39221: PPUSH
39222: LD_INT 2
39224: PPUSH
39225: CALL_OW 1
39229: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39230: LD_VAR 0 9
39234: PPUSH
39235: LD_VAR 0 13
39239: PPUSH
39240: CALL_OW 325
39244: PUSH
39245: LD_VAR 0 10
39249: PPUSH
39250: CALL_OW 255
39254: PPUSH
39255: LD_VAR 0 13
39259: PPUSH
39260: CALL_OW 325
39264: NOT
39265: AND
39266: IFFALSE 39295
// missile := Replace ( missile , missile + 1 , 3 ) ;
39268: LD_ADDR_VAR 0 14
39272: PUSH
39273: LD_VAR 0 14
39277: PPUSH
39278: LD_VAR 0 14
39282: PUSH
39283: LD_INT 1
39285: PLUS
39286: PPUSH
39287: LD_INT 3
39289: PPUSH
39290: CALL_OW 1
39294: ST_TO_ADDR
// if missile < 2 then
39295: LD_VAR 0 14
39299: PUSH
39300: LD_INT 2
39302: LESS
39303: IFFALSE 39307
// exit ;
39305: GO 39529
// x := GetX ( enemy ) ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_VAR 0 10
39316: PPUSH
39317: CALL_OW 250
39321: ST_TO_ADDR
// y := GetY ( enemy ) ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 10
39331: PPUSH
39332: CALL_OW 251
39336: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39337: LD_ADDR_VAR 0 6
39341: PUSH
39342: LD_VAR 0 4
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PPUSH
39351: LD_INT 1
39353: PPUSH
39354: CALL_OW 12
39358: PLUS
39359: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39360: LD_ADDR_VAR 0 7
39364: PUSH
39365: LD_VAR 0 5
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PPUSH
39374: LD_INT 1
39376: PPUSH
39377: CALL_OW 12
39381: PLUS
39382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39383: LD_VAR 0 6
39387: PPUSH
39388: LD_VAR 0 7
39392: PPUSH
39393: CALL_OW 488
39397: NOT
39398: IFFALSE 39420
// begin _x := x ;
39400: LD_ADDR_VAR 0 6
39404: PUSH
39405: LD_VAR 0 4
39409: ST_TO_ADDR
// _y := y ;
39410: LD_ADDR_VAR 0 7
39414: PUSH
39415: LD_VAR 0 5
39419: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39420: LD_ADDR_VAR 0 3
39424: PUSH
39425: LD_INT 1
39427: PPUSH
39428: LD_VAR 0 14
39432: PPUSH
39433: CALL_OW 12
39437: ST_TO_ADDR
// case i of 1 :
39438: LD_VAR 0 3
39442: PUSH
39443: LD_INT 1
39445: DOUBLE
39446: EQUAL
39447: IFTRUE 39451
39449: GO 39468
39451: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39452: LD_VAR 0 1
39456: PPUSH
39457: LD_VAR 0 10
39461: PPUSH
39462: CALL_OW 115
39466: GO 39529
39468: LD_INT 2
39470: DOUBLE
39471: EQUAL
39472: IFTRUE 39476
39474: GO 39498
39476: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39477: LD_VAR 0 1
39481: PPUSH
39482: LD_VAR 0 6
39486: PPUSH
39487: LD_VAR 0 7
39491: PPUSH
39492: CALL_OW 153
39496: GO 39529
39498: LD_INT 3
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39528
39506: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39507: LD_VAR 0 1
39511: PPUSH
39512: LD_VAR 0 6
39516: PPUSH
39517: LD_VAR 0 7
39521: PPUSH
39522: CALL_OW 154
39526: GO 39529
39528: POP
// end ;
39529: LD_VAR 0 2
39533: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39534: LD_INT 0
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
// if not unit or not building then
39542: LD_VAR 0 1
39546: NOT
39547: PUSH
39548: LD_VAR 0 2
39552: NOT
39553: OR
39554: IFFALSE 39558
// exit ;
39556: GO 39716
// x := GetX ( building ) ;
39558: LD_ADDR_VAR 0 5
39562: PUSH
39563: LD_VAR 0 2
39567: PPUSH
39568: CALL_OW 250
39572: ST_TO_ADDR
// y := GetY ( building ) ;
39573: LD_ADDR_VAR 0 6
39577: PUSH
39578: LD_VAR 0 2
39582: PPUSH
39583: CALL_OW 251
39587: ST_TO_ADDR
// for i = 0 to 5 do
39588: LD_ADDR_VAR 0 4
39592: PUSH
39593: DOUBLE
39594: LD_INT 0
39596: DEC
39597: ST_TO_ADDR
39598: LD_INT 5
39600: PUSH
39601: FOR_TO
39602: IFFALSE 39714
// begin _x := ShiftX ( x , i , 3 ) ;
39604: LD_ADDR_VAR 0 7
39608: PUSH
39609: LD_VAR 0 5
39613: PPUSH
39614: LD_VAR 0 4
39618: PPUSH
39619: LD_INT 3
39621: PPUSH
39622: CALL_OW 272
39626: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39627: LD_ADDR_VAR 0 8
39631: PUSH
39632: LD_VAR 0 6
39636: PPUSH
39637: LD_VAR 0 4
39641: PPUSH
39642: LD_INT 3
39644: PPUSH
39645: CALL_OW 273
39649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39650: LD_VAR 0 7
39654: PPUSH
39655: LD_VAR 0 8
39659: PPUSH
39660: CALL_OW 488
39664: NOT
39665: IFFALSE 39669
// continue ;
39667: GO 39601
// if HexInfo ( _x , _y ) = 0 then
39669: LD_VAR 0 7
39673: PPUSH
39674: LD_VAR 0 8
39678: PPUSH
39679: CALL_OW 428
39683: PUSH
39684: LD_INT 0
39686: EQUAL
39687: IFFALSE 39712
// begin ComMoveXY ( unit , _x , _y ) ;
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_VAR 0 7
39698: PPUSH
39699: LD_VAR 0 8
39703: PPUSH
39704: CALL_OW 111
// exit ;
39708: POP
39709: POP
39710: GO 39716
// end ; end ;
39712: GO 39601
39714: POP
39715: POP
// end ;
39716: LD_VAR 0 3
39720: RET
// export function ScanBase ( side , base_area ) ; begin
39721: LD_INT 0
39723: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39724: LD_ADDR_VAR 0 3
39728: PUSH
39729: LD_VAR 0 2
39733: PPUSH
39734: LD_INT 81
39736: PUSH
39737: LD_VAR 0 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PPUSH
39746: CALL_OW 70
39750: ST_TO_ADDR
// end ;
39751: LD_VAR 0 3
39755: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39756: LD_INT 0
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
// result := false ;
39762: LD_ADDR_VAR 0 2
39766: PUSH
39767: LD_INT 0
39769: ST_TO_ADDR
// side := GetSide ( unit ) ;
39770: LD_ADDR_VAR 0 3
39774: PUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 255
39784: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39785: LD_ADDR_VAR 0 4
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 248
39799: ST_TO_ADDR
// case nat of 1 :
39800: LD_VAR 0 4
39804: PUSH
39805: LD_INT 1
39807: DOUBLE
39808: EQUAL
39809: IFTRUE 39813
39811: GO 39824
39813: POP
// tech := tech_lassight ; 2 :
39814: LD_ADDR_VAR 0 5
39818: PUSH
39819: LD_INT 12
39821: ST_TO_ADDR
39822: GO 39863
39824: LD_INT 2
39826: DOUBLE
39827: EQUAL
39828: IFTRUE 39832
39830: GO 39843
39832: POP
// tech := tech_mortar ; 3 :
39833: LD_ADDR_VAR 0 5
39837: PUSH
39838: LD_INT 41
39840: ST_TO_ADDR
39841: GO 39863
39843: LD_INT 3
39845: DOUBLE
39846: EQUAL
39847: IFTRUE 39851
39849: GO 39862
39851: POP
// tech := tech_bazooka ; end ;
39852: LD_ADDR_VAR 0 5
39856: PUSH
39857: LD_INT 44
39859: ST_TO_ADDR
39860: GO 39863
39862: POP
// if Researched ( side , tech ) then
39863: LD_VAR 0 3
39867: PPUSH
39868: LD_VAR 0 5
39872: PPUSH
39873: CALL_OW 325
39877: IFFALSE 39904
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39879: LD_ADDR_VAR 0 2
39883: PUSH
39884: LD_INT 5
39886: PUSH
39887: LD_INT 8
39889: PUSH
39890: LD_INT 9
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: PUSH
39898: LD_VAR 0 4
39902: ARRAY
39903: ST_TO_ADDR
// end ;
39904: LD_VAR 0 2
39908: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39909: LD_INT 0
39911: PPUSH
39912: PPUSH
39913: PPUSH
// if not mines then
39914: LD_VAR 0 2
39918: NOT
39919: IFFALSE 39923
// exit ;
39921: GO 40067
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39923: LD_ADDR_VAR 0 5
39927: PUSH
39928: LD_INT 81
39930: PUSH
39931: LD_VAR 0 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 3
39942: PUSH
39943: LD_INT 21
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PPUSH
39961: CALL_OW 69
39965: ST_TO_ADDR
// for i in mines do
39966: LD_ADDR_VAR 0 4
39970: PUSH
39971: LD_VAR 0 2
39975: PUSH
39976: FOR_IN
39977: IFFALSE 40065
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39979: LD_VAR 0 4
39983: PUSH
39984: LD_INT 1
39986: ARRAY
39987: PPUSH
39988: LD_VAR 0 4
39992: PUSH
39993: LD_INT 2
39995: ARRAY
39996: PPUSH
39997: CALL_OW 458
40001: NOT
40002: IFFALSE 40006
// continue ;
40004: GO 39976
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40006: LD_VAR 0 4
40010: PUSH
40011: LD_INT 1
40013: ARRAY
40014: PPUSH
40015: LD_VAR 0 4
40019: PUSH
40020: LD_INT 2
40022: ARRAY
40023: PPUSH
40024: CALL_OW 428
40028: PUSH
40029: LD_VAR 0 5
40033: IN
40034: IFFALSE 40063
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40036: LD_VAR 0 4
40040: PUSH
40041: LD_INT 1
40043: ARRAY
40044: PPUSH
40045: LD_VAR 0 4
40049: PUSH
40050: LD_INT 2
40052: ARRAY
40053: PPUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 456
// end ;
40063: GO 39976
40065: POP
40066: POP
// end ;
40067: LD_VAR 0 3
40071: RET
// export function Count ( array ) ; begin
40072: LD_INT 0
40074: PPUSH
// result := array + 0 ;
40075: LD_ADDR_VAR 0 2
40079: PUSH
40080: LD_VAR 0 1
40084: PUSH
40085: LD_INT 0
40087: PLUS
40088: ST_TO_ADDR
// end ;
40089: LD_VAR 0 2
40093: RET
// export function IsEmpty ( building ) ; begin
40094: LD_INT 0
40096: PPUSH
// if not building then
40097: LD_VAR 0 1
40101: NOT
40102: IFFALSE 40106
// exit ;
40104: GO 40149
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40106: LD_ADDR_VAR 0 2
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: LD_INT 22
40118: PUSH
40119: LD_VAR 0 1
40123: PPUSH
40124: CALL_OW 255
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 58
40135: PUSH
40136: EMPTY
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 69
40147: IN
40148: ST_TO_ADDR
// end ;
40149: LD_VAR 0 2
40153: RET
// export function IsNotFull ( building ) ; var places ; begin
40154: LD_INT 0
40156: PPUSH
40157: PPUSH
// if not building then
40158: LD_VAR 0 1
40162: NOT
40163: IFFALSE 40167
// exit ;
40165: GO 40195
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40167: LD_ADDR_VAR 0 2
40171: PUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 62
40182: PUSH
40183: EMPTY
40184: LIST
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PPUSH
40190: CALL_OW 72
40194: ST_TO_ADDR
// end ;
40195: LD_VAR 0 2
40199: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40200: LD_INT 0
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
// tmp := [ ] ;
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: EMPTY
40212: ST_TO_ADDR
// list := [ ] ;
40213: LD_ADDR_VAR 0 5
40217: PUSH
40218: EMPTY
40219: ST_TO_ADDR
// for i = 16 to 25 do
40220: LD_ADDR_VAR 0 4
40224: PUSH
40225: DOUBLE
40226: LD_INT 16
40228: DEC
40229: ST_TO_ADDR
40230: LD_INT 25
40232: PUSH
40233: FOR_TO
40234: IFFALSE 40307
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40236: LD_ADDR_VAR 0 3
40240: PUSH
40241: LD_VAR 0 3
40245: PUSH
40246: LD_INT 22
40248: PUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 255
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 91
40265: PUSH
40266: LD_VAR 0 1
40270: PUSH
40271: LD_INT 6
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 30
40281: PUSH
40282: LD_VAR 0 4
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: PPUSH
40299: CALL_OW 69
40303: ADD
40304: ST_TO_ADDR
40305: GO 40233
40307: POP
40308: POP
// for i = 1 to tmp do
40309: LD_ADDR_VAR 0 4
40313: PUSH
40314: DOUBLE
40315: LD_INT 1
40317: DEC
40318: ST_TO_ADDR
40319: LD_VAR 0 3
40323: PUSH
40324: FOR_TO
40325: IFFALSE 40413
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40327: LD_ADDR_VAR 0 5
40331: PUSH
40332: LD_VAR 0 5
40336: PUSH
40337: LD_VAR 0 3
40341: PUSH
40342: LD_VAR 0 4
40346: ARRAY
40347: PPUSH
40348: CALL_OW 266
40352: PUSH
40353: LD_VAR 0 3
40357: PUSH
40358: LD_VAR 0 4
40362: ARRAY
40363: PPUSH
40364: CALL_OW 250
40368: PUSH
40369: LD_VAR 0 3
40373: PUSH
40374: LD_VAR 0 4
40378: ARRAY
40379: PPUSH
40380: CALL_OW 251
40384: PUSH
40385: LD_VAR 0 3
40389: PUSH
40390: LD_VAR 0 4
40394: ARRAY
40395: PPUSH
40396: CALL_OW 254
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: PUSH
40407: EMPTY
40408: LIST
40409: ADD
40410: ST_TO_ADDR
40411: GO 40324
40413: POP
40414: POP
// result := list ;
40415: LD_ADDR_VAR 0 2
40419: PUSH
40420: LD_VAR 0 5
40424: ST_TO_ADDR
// end ;
40425: LD_VAR 0 2
40429: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40430: LD_INT 0
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
// if not factory then
40439: LD_VAR 0 1
40443: NOT
40444: IFFALSE 40448
// exit ;
40446: GO 41041
// if control = control_apeman then
40448: LD_VAR 0 4
40452: PUSH
40453: LD_INT 5
40455: EQUAL
40456: IFFALSE 40565
// begin tmp := UnitsInside ( factory ) ;
40458: LD_ADDR_VAR 0 8
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 313
40472: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40473: LD_VAR 0 8
40477: PPUSH
40478: LD_INT 25
40480: PUSH
40481: LD_INT 12
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PPUSH
40488: CALL_OW 72
40492: NOT
40493: IFFALSE 40503
// control := control_manual ;
40495: LD_ADDR_VAR 0 4
40499: PUSH
40500: LD_INT 1
40502: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40503: LD_ADDR_VAR 0 8
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL 40200 0 1
40517: ST_TO_ADDR
// if tmp then
40518: LD_VAR 0 8
40522: IFFALSE 40565
// begin for i in tmp do
40524: LD_ADDR_VAR 0 7
40528: PUSH
40529: LD_VAR 0 8
40533: PUSH
40534: FOR_IN
40535: IFFALSE 40563
// if i [ 1 ] = b_ext_radio then
40537: LD_VAR 0 7
40541: PUSH
40542: LD_INT 1
40544: ARRAY
40545: PUSH
40546: LD_INT 22
40548: EQUAL
40549: IFFALSE 40561
// begin control := control_remote ;
40551: LD_ADDR_VAR 0 4
40555: PUSH
40556: LD_INT 2
40558: ST_TO_ADDR
// break ;
40559: GO 40563
// end ;
40561: GO 40534
40563: POP
40564: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40565: LD_VAR 0 1
40569: PPUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: LD_VAR 0 3
40579: PPUSH
40580: LD_VAR 0 4
40584: PPUSH
40585: LD_VAR 0 5
40589: PPUSH
40590: CALL_OW 448
40594: IFFALSE 40629
// begin result := [ chassis , engine , control , weapon ] ;
40596: LD_ADDR_VAR 0 6
40600: PUSH
40601: LD_VAR 0 2
40605: PUSH
40606: LD_VAR 0 3
40610: PUSH
40611: LD_VAR 0 4
40615: PUSH
40616: LD_VAR 0 5
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: ST_TO_ADDR
// exit ;
40627: GO 41041
// end ; _chassis := AvailableChassisList ( factory ) ;
40629: LD_ADDR_VAR 0 9
40633: PUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 475
40643: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40644: LD_ADDR_VAR 0 11
40648: PUSH
40649: LD_VAR 0 1
40653: PPUSH
40654: CALL_OW 476
40658: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40659: LD_ADDR_VAR 0 12
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 477
40673: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40674: LD_ADDR_VAR 0 10
40678: PUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 478
40688: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40689: LD_VAR 0 9
40693: NOT
40694: PUSH
40695: LD_VAR 0 11
40699: NOT
40700: OR
40701: PUSH
40702: LD_VAR 0 12
40706: NOT
40707: OR
40708: PUSH
40709: LD_VAR 0 10
40713: NOT
40714: OR
40715: IFFALSE 40750
// begin result := [ chassis , engine , control , weapon ] ;
40717: LD_ADDR_VAR 0 6
40721: PUSH
40722: LD_VAR 0 2
40726: PUSH
40727: LD_VAR 0 3
40731: PUSH
40732: LD_VAR 0 4
40736: PUSH
40737: LD_VAR 0 5
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: ST_TO_ADDR
// exit ;
40748: GO 41041
// end ; if not chassis in _chassis then
40750: LD_VAR 0 2
40754: PUSH
40755: LD_VAR 0 9
40759: IN
40760: NOT
40761: IFFALSE 40787
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40763: LD_ADDR_VAR 0 2
40767: PUSH
40768: LD_VAR 0 9
40772: PUSH
40773: LD_INT 1
40775: PPUSH
40776: LD_VAR 0 9
40780: PPUSH
40781: CALL_OW 12
40785: ARRAY
40786: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40787: LD_VAR 0 2
40791: PPUSH
40792: LD_VAR 0 3
40796: PPUSH
40797: CALL 41046 0 2
40801: NOT
40802: IFFALSE 40861
// repeat engine := _engine [ 1 ] ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_VAR 0 11
40813: PUSH
40814: LD_INT 1
40816: ARRAY
40817: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40818: LD_ADDR_VAR 0 11
40822: PUSH
40823: LD_VAR 0 11
40827: PPUSH
40828: LD_INT 1
40830: PPUSH
40831: CALL_OW 3
40835: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40836: LD_VAR 0 2
40840: PPUSH
40841: LD_VAR 0 3
40845: PPUSH
40846: CALL 41046 0 2
40850: PUSH
40851: LD_VAR 0 11
40855: PUSH
40856: EMPTY
40857: EQUAL
40858: OR
40859: IFFALSE 40804
// if not control in _control then
40861: LD_VAR 0 4
40865: PUSH
40866: LD_VAR 0 12
40870: IN
40871: NOT
40872: IFFALSE 40898
// control := _control [ rand ( 1 , _control ) ] ;
40874: LD_ADDR_VAR 0 4
40878: PUSH
40879: LD_VAR 0 12
40883: PUSH
40884: LD_INT 1
40886: PPUSH
40887: LD_VAR 0 12
40891: PPUSH
40892: CALL_OW 12
40896: ARRAY
40897: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40898: LD_VAR 0 2
40902: PPUSH
40903: LD_VAR 0 5
40907: PPUSH
40908: CALL 41266 0 2
40912: NOT
40913: IFFALSE 40972
// repeat weapon := _weapon [ 1 ] ;
40915: LD_ADDR_VAR 0 5
40919: PUSH
40920: LD_VAR 0 10
40924: PUSH
40925: LD_INT 1
40927: ARRAY
40928: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40929: LD_ADDR_VAR 0 10
40933: PUSH
40934: LD_VAR 0 10
40938: PPUSH
40939: LD_INT 1
40941: PPUSH
40942: CALL_OW 3
40946: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40947: LD_VAR 0 2
40951: PPUSH
40952: LD_VAR 0 5
40956: PPUSH
40957: CALL 41266 0 2
40961: PUSH
40962: LD_VAR 0 10
40966: PUSH
40967: EMPTY
40968: EQUAL
40969: OR
40970: IFFALSE 40915
// result := [ ] ;
40972: LD_ADDR_VAR 0 6
40976: PUSH
40977: EMPTY
40978: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40979: LD_VAR 0 1
40983: PPUSH
40984: LD_VAR 0 2
40988: PPUSH
40989: LD_VAR 0 3
40993: PPUSH
40994: LD_VAR 0 4
40998: PPUSH
40999: LD_VAR 0 5
41003: PPUSH
41004: CALL_OW 448
41008: IFFALSE 41041
// result := [ chassis , engine , control , weapon ] ;
41010: LD_ADDR_VAR 0 6
41014: PUSH
41015: LD_VAR 0 2
41019: PUSH
41020: LD_VAR 0 3
41024: PUSH
41025: LD_VAR 0 4
41029: PUSH
41030: LD_VAR 0 5
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: ST_TO_ADDR
// end ;
41041: LD_VAR 0 6
41045: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41046: LD_INT 0
41048: PPUSH
// if not chassis or not engine then
41049: LD_VAR 0 1
41053: NOT
41054: PUSH
41055: LD_VAR 0 2
41059: NOT
41060: OR
41061: IFFALSE 41065
// exit ;
41063: GO 41261
// case engine of engine_solar :
41065: LD_VAR 0 2
41069: PUSH
41070: LD_INT 2
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41116
41078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_INT 11
41086: PUSH
41087: LD_INT 12
41089: PUSH
41090: LD_INT 13
41092: PUSH
41093: LD_INT 14
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: ST_TO_ADDR
41114: GO 41245
41116: LD_INT 1
41118: DOUBLE
41119: EQUAL
41120: IFTRUE 41124
41122: GO 41186
41124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41125: LD_ADDR_VAR 0 3
41129: PUSH
41130: LD_INT 11
41132: PUSH
41133: LD_INT 12
41135: PUSH
41136: LD_INT 13
41138: PUSH
41139: LD_INT 14
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: LD_INT 5
41156: PUSH
41157: LD_INT 21
41159: PUSH
41160: LD_INT 23
41162: PUSH
41163: LD_INT 22
41165: PUSH
41166: LD_INT 24
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
41184: GO 41245
41186: LD_INT 3
41188: DOUBLE
41189: EQUAL
41190: IFTRUE 41194
41192: GO 41244
41194: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 13
41202: PUSH
41203: LD_INT 14
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 3
41211: PUSH
41212: LD_INT 4
41214: PUSH
41215: LD_INT 5
41217: PUSH
41218: LD_INT 21
41220: PUSH
41221: LD_INT 22
41223: PUSH
41224: LD_INT 23
41226: PUSH
41227: LD_INT 24
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: ST_TO_ADDR
41242: GO 41245
41244: POP
// result := ( chassis in result ) ;
41245: LD_ADDR_VAR 0 3
41249: PUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 3
41259: IN
41260: ST_TO_ADDR
// end ;
41261: LD_VAR 0 3
41265: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41266: LD_INT 0
41268: PPUSH
// if not chassis or not weapon then
41269: LD_VAR 0 1
41273: NOT
41274: PUSH
41275: LD_VAR 0 2
41279: NOT
41280: OR
41281: IFFALSE 41285
// exit ;
41283: GO 42345
// case weapon of us_machine_gun :
41285: LD_VAR 0 2
41289: PUSH
41290: LD_INT 2
41292: DOUBLE
41293: EQUAL
41294: IFTRUE 41298
41296: GO 41328
41298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: LD_INT 4
41315: PUSH
41316: LD_INT 5
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: ST_TO_ADDR
41326: GO 42329
41328: LD_INT 3
41330: DOUBLE
41331: EQUAL
41332: IFTRUE 41336
41334: GO 41366
41336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41337: LD_ADDR_VAR 0 3
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 4
41353: PUSH
41354: LD_INT 5
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: ST_TO_ADDR
41364: GO 42329
41366: LD_INT 11
41368: DOUBLE
41369: EQUAL
41370: IFTRUE 41374
41372: GO 41404
41374: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41375: LD_ADDR_VAR 0 3
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: LD_INT 5
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: ST_TO_ADDR
41402: GO 42329
41404: LD_INT 4
41406: DOUBLE
41407: EQUAL
41408: IFTRUE 41412
41410: GO 41438
41412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41413: LD_ADDR_VAR 0 3
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 4
41426: PUSH
41427: LD_INT 5
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
41436: GO 42329
41438: LD_INT 5
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41446
41444: GO 41472
41446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41447: LD_ADDR_VAR 0 3
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: LD_INT 3
41457: PUSH
41458: LD_INT 4
41460: PUSH
41461: LD_INT 5
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
41470: GO 42329
41472: LD_INT 9
41474: DOUBLE
41475: EQUAL
41476: IFTRUE 41480
41478: GO 41506
41480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41481: LD_ADDR_VAR 0 3
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 3
41491: PUSH
41492: LD_INT 4
41494: PUSH
41495: LD_INT 5
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: ST_TO_ADDR
41504: GO 42329
41506: LD_INT 7
41508: DOUBLE
41509: EQUAL
41510: IFTRUE 41514
41512: GO 41540
41514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41515: LD_ADDR_VAR 0 3
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: LD_INT 4
41528: PUSH
41529: LD_INT 5
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: ST_TO_ADDR
41538: GO 42329
41540: LD_INT 12
41542: DOUBLE
41543: EQUAL
41544: IFTRUE 41548
41546: GO 41574
41548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41549: LD_ADDR_VAR 0 3
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: LD_INT 4
41562: PUSH
41563: LD_INT 5
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: ST_TO_ADDR
41572: GO 42329
41574: LD_INT 13
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41582
41580: GO 41608
41582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41583: LD_ADDR_VAR 0 3
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: LD_INT 4
41596: PUSH
41597: LD_INT 5
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: ST_TO_ADDR
41606: GO 42329
41608: LD_INT 14
41610: DOUBLE
41611: EQUAL
41612: IFTRUE 41616
41614: GO 41634
41616: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41617: LD_ADDR_VAR 0 3
41621: PUSH
41622: LD_INT 4
41624: PUSH
41625: LD_INT 5
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: ST_TO_ADDR
41632: GO 42329
41634: LD_INT 6
41636: DOUBLE
41637: EQUAL
41638: IFTRUE 41642
41640: GO 41660
41642: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_INT 4
41650: PUSH
41651: LD_INT 5
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: ST_TO_ADDR
41658: GO 42329
41660: LD_INT 10
41662: DOUBLE
41663: EQUAL
41664: IFTRUE 41668
41666: GO 41686
41668: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41669: LD_ADDR_VAR 0 3
41673: PUSH
41674: LD_INT 4
41676: PUSH
41677: LD_INT 5
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: ST_TO_ADDR
41684: GO 42329
41686: LD_INT 22
41688: DOUBLE
41689: EQUAL
41690: IFTRUE 41694
41692: GO 41720
41694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: LD_INT 11
41702: PUSH
41703: LD_INT 12
41705: PUSH
41706: LD_INT 13
41708: PUSH
41709: LD_INT 14
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
41718: GO 42329
41720: LD_INT 23
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41728
41726: GO 41754
41728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_INT 11
41736: PUSH
41737: LD_INT 12
41739: PUSH
41740: LD_INT 13
41742: PUSH
41743: LD_INT 14
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
41752: GO 42329
41754: LD_INT 24
41756: DOUBLE
41757: EQUAL
41758: IFTRUE 41762
41760: GO 41788
41762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_INT 11
41770: PUSH
41771: LD_INT 12
41773: PUSH
41774: LD_INT 13
41776: PUSH
41777: LD_INT 14
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
41786: GO 42329
41788: LD_INT 30
41790: DOUBLE
41791: EQUAL
41792: IFTRUE 41796
41794: GO 41822
41796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_INT 11
41804: PUSH
41805: LD_INT 12
41807: PUSH
41808: LD_INT 13
41810: PUSH
41811: LD_INT 14
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
41820: GO 42329
41822: LD_INT 25
41824: DOUBLE
41825: EQUAL
41826: IFTRUE 41830
41828: GO 41848
41830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41831: LD_ADDR_VAR 0 3
41835: PUSH
41836: LD_INT 13
41838: PUSH
41839: LD_INT 14
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: ST_TO_ADDR
41846: GO 42329
41848: LD_INT 27
41850: DOUBLE
41851: EQUAL
41852: IFTRUE 41856
41854: GO 41874
41856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_INT 13
41864: PUSH
41865: LD_INT 14
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: ST_TO_ADDR
41872: GO 42329
41874: LD_INT 92
41876: DOUBLE
41877: EQUAL
41878: IFTRUE 41882
41880: GO 41908
41882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_INT 11
41890: PUSH
41891: LD_INT 12
41893: PUSH
41894: LD_INT 13
41896: PUSH
41897: LD_INT 14
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: ST_TO_ADDR
41906: GO 42329
41908: LD_INT 28
41910: DOUBLE
41911: EQUAL
41912: IFTRUE 41916
41914: GO 41934
41916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_INT 13
41924: PUSH
41925: LD_INT 14
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: ST_TO_ADDR
41932: GO 42329
41934: LD_INT 29
41936: DOUBLE
41937: EQUAL
41938: IFTRUE 41942
41940: GO 41960
41942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_INT 13
41950: PUSH
41951: LD_INT 14
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: ST_TO_ADDR
41958: GO 42329
41960: LD_INT 31
41962: DOUBLE
41963: EQUAL
41964: IFTRUE 41968
41966: GO 41986
41968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41969: LD_ADDR_VAR 0 3
41973: PUSH
41974: LD_INT 13
41976: PUSH
41977: LD_INT 14
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: ST_TO_ADDR
41984: GO 42329
41986: LD_INT 26
41988: DOUBLE
41989: EQUAL
41990: IFTRUE 41994
41992: GO 42012
41994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_INT 13
42002: PUSH
42003: LD_INT 14
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: ST_TO_ADDR
42010: GO 42329
42012: LD_INT 42
42014: DOUBLE
42015: EQUAL
42016: IFTRUE 42020
42018: GO 42046
42020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42021: LD_ADDR_VAR 0 3
42025: PUSH
42026: LD_INT 21
42028: PUSH
42029: LD_INT 22
42031: PUSH
42032: LD_INT 23
42034: PUSH
42035: LD_INT 24
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: ST_TO_ADDR
42044: GO 42329
42046: LD_INT 43
42048: DOUBLE
42049: EQUAL
42050: IFTRUE 42054
42052: GO 42080
42054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: LD_INT 21
42062: PUSH
42063: LD_INT 22
42065: PUSH
42066: LD_INT 23
42068: PUSH
42069: LD_INT 24
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
42078: GO 42329
42080: LD_INT 44
42082: DOUBLE
42083: EQUAL
42084: IFTRUE 42088
42086: GO 42114
42088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: LD_INT 21
42096: PUSH
42097: LD_INT 22
42099: PUSH
42100: LD_INT 23
42102: PUSH
42103: LD_INT 24
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
42112: GO 42329
42114: LD_INT 45
42116: DOUBLE
42117: EQUAL
42118: IFTRUE 42122
42120: GO 42148
42122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: LD_INT 21
42130: PUSH
42131: LD_INT 22
42133: PUSH
42134: LD_INT 23
42136: PUSH
42137: LD_INT 24
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
42146: GO 42329
42148: LD_INT 49
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42182
42156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 21
42164: PUSH
42165: LD_INT 22
42167: PUSH
42168: LD_INT 23
42170: PUSH
42171: LD_INT 24
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
42180: GO 42329
42182: LD_INT 51
42184: DOUBLE
42185: EQUAL
42186: IFTRUE 42190
42188: GO 42216
42190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42191: LD_ADDR_VAR 0 3
42195: PUSH
42196: LD_INT 21
42198: PUSH
42199: LD_INT 22
42201: PUSH
42202: LD_INT 23
42204: PUSH
42205: LD_INT 24
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
42214: GO 42329
42216: LD_INT 52
42218: DOUBLE
42219: EQUAL
42220: IFTRUE 42224
42222: GO 42250
42224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42225: LD_ADDR_VAR 0 3
42229: PUSH
42230: LD_INT 21
42232: PUSH
42233: LD_INT 22
42235: PUSH
42236: LD_INT 23
42238: PUSH
42239: LD_INT 24
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: ST_TO_ADDR
42248: GO 42329
42250: LD_INT 53
42252: DOUBLE
42253: EQUAL
42254: IFTRUE 42258
42256: GO 42276
42258: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42259: LD_ADDR_VAR 0 3
42263: PUSH
42264: LD_INT 23
42266: PUSH
42267: LD_INT 24
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: ST_TO_ADDR
42274: GO 42329
42276: LD_INT 46
42278: DOUBLE
42279: EQUAL
42280: IFTRUE 42284
42282: GO 42302
42284: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42285: LD_ADDR_VAR 0 3
42289: PUSH
42290: LD_INT 23
42292: PUSH
42293: LD_INT 24
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: ST_TO_ADDR
42300: GO 42329
42302: LD_INT 47
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42310
42308: GO 42328
42310: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_INT 23
42318: PUSH
42319: LD_INT 24
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: ST_TO_ADDR
42326: GO 42329
42328: POP
// result := ( chassis in result ) ;
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: LD_VAR 0 1
42338: PUSH
42339: LD_VAR 0 3
42343: IN
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 3
42349: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42350: LD_INT 0
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
// result := array ;
42359: LD_ADDR_VAR 0 5
42363: PUSH
42364: LD_VAR 0 1
42368: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42369: LD_VAR 0 1
42373: NOT
42374: PUSH
42375: LD_VAR 0 2
42379: NOT
42380: OR
42381: PUSH
42382: LD_VAR 0 3
42386: NOT
42387: OR
42388: PUSH
42389: LD_VAR 0 2
42393: PUSH
42394: LD_VAR 0 1
42398: GREATER
42399: OR
42400: PUSH
42401: LD_VAR 0 3
42405: PUSH
42406: LD_VAR 0 1
42410: GREATER
42411: OR
42412: IFFALSE 42416
// exit ;
42414: GO 42712
// if direction then
42416: LD_VAR 0 4
42420: IFFALSE 42484
// begin d := 1 ;
42422: LD_ADDR_VAR 0 9
42426: PUSH
42427: LD_INT 1
42429: ST_TO_ADDR
// if i_from > i_to then
42430: LD_VAR 0 2
42434: PUSH
42435: LD_VAR 0 3
42439: GREATER
42440: IFFALSE 42466
// length := ( array - i_from ) + i_to else
42442: LD_ADDR_VAR 0 11
42446: PUSH
42447: LD_VAR 0 1
42451: PUSH
42452: LD_VAR 0 2
42456: MINUS
42457: PUSH
42458: LD_VAR 0 3
42462: PLUS
42463: ST_TO_ADDR
42464: GO 42482
// length := i_to - i_from ;
42466: LD_ADDR_VAR 0 11
42470: PUSH
42471: LD_VAR 0 3
42475: PUSH
42476: LD_VAR 0 2
42480: MINUS
42481: ST_TO_ADDR
// end else
42482: GO 42545
// begin d := - 1 ;
42484: LD_ADDR_VAR 0 9
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: ST_TO_ADDR
// if i_from > i_to then
42493: LD_VAR 0 2
42497: PUSH
42498: LD_VAR 0 3
42502: GREATER
42503: IFFALSE 42523
// length := i_from - i_to else
42505: LD_ADDR_VAR 0 11
42509: PUSH
42510: LD_VAR 0 2
42514: PUSH
42515: LD_VAR 0 3
42519: MINUS
42520: ST_TO_ADDR
42521: GO 42545
// length := ( array - i_to ) + i_from ;
42523: LD_ADDR_VAR 0 11
42527: PUSH
42528: LD_VAR 0 1
42532: PUSH
42533: LD_VAR 0 3
42537: MINUS
42538: PUSH
42539: LD_VAR 0 2
42543: PLUS
42544: ST_TO_ADDR
// end ; if not length then
42545: LD_VAR 0 11
42549: NOT
42550: IFFALSE 42554
// exit ;
42552: GO 42712
// tmp := array ;
42554: LD_ADDR_VAR 0 10
42558: PUSH
42559: LD_VAR 0 1
42563: ST_TO_ADDR
// for i = 1 to length do
42564: LD_ADDR_VAR 0 6
42568: PUSH
42569: DOUBLE
42570: LD_INT 1
42572: DEC
42573: ST_TO_ADDR
42574: LD_VAR 0 11
42578: PUSH
42579: FOR_TO
42580: IFFALSE 42700
// begin for j = 1 to array do
42582: LD_ADDR_VAR 0 7
42586: PUSH
42587: DOUBLE
42588: LD_INT 1
42590: DEC
42591: ST_TO_ADDR
42592: LD_VAR 0 1
42596: PUSH
42597: FOR_TO
42598: IFFALSE 42686
// begin k := j + d ;
42600: LD_ADDR_VAR 0 8
42604: PUSH
42605: LD_VAR 0 7
42609: PUSH
42610: LD_VAR 0 9
42614: PLUS
42615: ST_TO_ADDR
// if k > array then
42616: LD_VAR 0 8
42620: PUSH
42621: LD_VAR 0 1
42625: GREATER
42626: IFFALSE 42636
// k := 1 ;
42628: LD_ADDR_VAR 0 8
42632: PUSH
42633: LD_INT 1
42635: ST_TO_ADDR
// if not k then
42636: LD_VAR 0 8
42640: NOT
42641: IFFALSE 42653
// k := array ;
42643: LD_ADDR_VAR 0 8
42647: PUSH
42648: LD_VAR 0 1
42652: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42653: LD_ADDR_VAR 0 10
42657: PUSH
42658: LD_VAR 0 10
42662: PPUSH
42663: LD_VAR 0 8
42667: PPUSH
42668: LD_VAR 0 1
42672: PUSH
42673: LD_VAR 0 7
42677: ARRAY
42678: PPUSH
42679: CALL_OW 1
42683: ST_TO_ADDR
// end ;
42684: GO 42597
42686: POP
42687: POP
// array := tmp ;
42688: LD_ADDR_VAR 0 1
42692: PUSH
42693: LD_VAR 0 10
42697: ST_TO_ADDR
// end ;
42698: GO 42579
42700: POP
42701: POP
// result := array ;
42702: LD_ADDR_VAR 0 5
42706: PUSH
42707: LD_VAR 0 1
42711: ST_TO_ADDR
// end ;
42712: LD_VAR 0 5
42716: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42717: LD_INT 0
42719: PPUSH
42720: PPUSH
// result := 0 ;
42721: LD_ADDR_VAR 0 3
42725: PUSH
42726: LD_INT 0
42728: ST_TO_ADDR
// if not array or not value in array then
42729: LD_VAR 0 1
42733: NOT
42734: PUSH
42735: LD_VAR 0 2
42739: PUSH
42740: LD_VAR 0 1
42744: IN
42745: NOT
42746: OR
42747: IFFALSE 42751
// exit ;
42749: GO 42805
// for i = 1 to array do
42751: LD_ADDR_VAR 0 4
42755: PUSH
42756: DOUBLE
42757: LD_INT 1
42759: DEC
42760: ST_TO_ADDR
42761: LD_VAR 0 1
42765: PUSH
42766: FOR_TO
42767: IFFALSE 42803
// if value = array [ i ] then
42769: LD_VAR 0 2
42773: PUSH
42774: LD_VAR 0 1
42778: PUSH
42779: LD_VAR 0 4
42783: ARRAY
42784: EQUAL
42785: IFFALSE 42801
// begin result := i ;
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_VAR 0 4
42796: ST_TO_ADDR
// exit ;
42797: POP
42798: POP
42799: GO 42805
// end ;
42801: GO 42766
42803: POP
42804: POP
// end ;
42805: LD_VAR 0 3
42809: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42810: LD_INT 0
42812: PPUSH
// vc_chassis := chassis ;
42813: LD_ADDR_OWVAR 37
42817: PUSH
42818: LD_VAR 0 1
42822: ST_TO_ADDR
// vc_engine := engine ;
42823: LD_ADDR_OWVAR 39
42827: PUSH
42828: LD_VAR 0 2
42832: ST_TO_ADDR
// vc_control := control ;
42833: LD_ADDR_OWVAR 38
42837: PUSH
42838: LD_VAR 0 3
42842: ST_TO_ADDR
// vc_weapon := weapon ;
42843: LD_ADDR_OWVAR 40
42847: PUSH
42848: LD_VAR 0 4
42852: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42853: LD_ADDR_OWVAR 41
42857: PUSH
42858: LD_VAR 0 5
42862: ST_TO_ADDR
// end ;
42863: LD_VAR 0 6
42867: RET
// export function WantPlant ( unit ) ; var task ; begin
42868: LD_INT 0
42870: PPUSH
42871: PPUSH
// result := false ;
42872: LD_ADDR_VAR 0 2
42876: PUSH
42877: LD_INT 0
42879: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42880: LD_ADDR_VAR 0 3
42884: PUSH
42885: LD_VAR 0 1
42889: PPUSH
42890: CALL_OW 437
42894: ST_TO_ADDR
// if task then
42895: LD_VAR 0 3
42899: IFFALSE 42927
// if task [ 1 ] [ 1 ] = p then
42901: LD_VAR 0 3
42905: PUSH
42906: LD_INT 1
42908: ARRAY
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PUSH
42914: LD_STRING p
42916: EQUAL
42917: IFFALSE 42927
// result := true ;
42919: LD_ADDR_VAR 0 2
42923: PUSH
42924: LD_INT 1
42926: ST_TO_ADDR
// end ;
42927: LD_VAR 0 2
42931: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42932: LD_INT 0
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
// if pos < 1 then
42938: LD_VAR 0 2
42942: PUSH
42943: LD_INT 1
42945: LESS
42946: IFFALSE 42950
// exit ;
42948: GO 43253
// if pos = 1 then
42950: LD_VAR 0 2
42954: PUSH
42955: LD_INT 1
42957: EQUAL
42958: IFFALSE 42991
// result := Replace ( arr , pos [ 1 ] , value ) else
42960: LD_ADDR_VAR 0 4
42964: PUSH
42965: LD_VAR 0 1
42969: PPUSH
42970: LD_VAR 0 2
42974: PUSH
42975: LD_INT 1
42977: ARRAY
42978: PPUSH
42979: LD_VAR 0 3
42983: PPUSH
42984: CALL_OW 1
42988: ST_TO_ADDR
42989: GO 43253
// begin tmp := arr ;
42991: LD_ADDR_VAR 0 6
42995: PUSH
42996: LD_VAR 0 1
43000: ST_TO_ADDR
// s_arr := [ tmp ] ;
43001: LD_ADDR_VAR 0 7
43005: PUSH
43006: LD_VAR 0 6
43010: PUSH
43011: EMPTY
43012: LIST
43013: ST_TO_ADDR
// for i = 1 to pos - 1 do
43014: LD_ADDR_VAR 0 5
43018: PUSH
43019: DOUBLE
43020: LD_INT 1
43022: DEC
43023: ST_TO_ADDR
43024: LD_VAR 0 2
43028: PUSH
43029: LD_INT 1
43031: MINUS
43032: PUSH
43033: FOR_TO
43034: IFFALSE 43079
// begin tmp := tmp [ pos [ i ] ] ;
43036: LD_ADDR_VAR 0 6
43040: PUSH
43041: LD_VAR 0 6
43045: PUSH
43046: LD_VAR 0 2
43050: PUSH
43051: LD_VAR 0 5
43055: ARRAY
43056: ARRAY
43057: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43058: LD_ADDR_VAR 0 7
43062: PUSH
43063: LD_VAR 0 7
43067: PUSH
43068: LD_VAR 0 6
43072: PUSH
43073: EMPTY
43074: LIST
43075: ADD
43076: ST_TO_ADDR
// end ;
43077: GO 43033
43079: POP
43080: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43081: LD_ADDR_VAR 0 6
43085: PUSH
43086: LD_VAR 0 6
43090: PPUSH
43091: LD_VAR 0 2
43095: PUSH
43096: LD_VAR 0 2
43100: ARRAY
43101: PPUSH
43102: LD_VAR 0 3
43106: PPUSH
43107: CALL_OW 1
43111: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43112: LD_ADDR_VAR 0 7
43116: PUSH
43117: LD_VAR 0 7
43121: PPUSH
43122: LD_VAR 0 7
43126: PPUSH
43127: LD_VAR 0 6
43131: PPUSH
43132: CALL_OW 1
43136: ST_TO_ADDR
// for i = s_arr downto 2 do
43137: LD_ADDR_VAR 0 5
43141: PUSH
43142: DOUBLE
43143: LD_VAR 0 7
43147: INC
43148: ST_TO_ADDR
43149: LD_INT 2
43151: PUSH
43152: FOR_DOWNTO
43153: IFFALSE 43237
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43155: LD_ADDR_VAR 0 6
43159: PUSH
43160: LD_VAR 0 7
43164: PUSH
43165: LD_VAR 0 5
43169: PUSH
43170: LD_INT 1
43172: MINUS
43173: ARRAY
43174: PPUSH
43175: LD_VAR 0 2
43179: PUSH
43180: LD_VAR 0 5
43184: PUSH
43185: LD_INT 1
43187: MINUS
43188: ARRAY
43189: PPUSH
43190: LD_VAR 0 7
43194: PUSH
43195: LD_VAR 0 5
43199: ARRAY
43200: PPUSH
43201: CALL_OW 1
43205: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43206: LD_ADDR_VAR 0 7
43210: PUSH
43211: LD_VAR 0 7
43215: PPUSH
43216: LD_VAR 0 5
43220: PUSH
43221: LD_INT 1
43223: MINUS
43224: PPUSH
43225: LD_VAR 0 6
43229: PPUSH
43230: CALL_OW 1
43234: ST_TO_ADDR
// end ;
43235: GO 43152
43237: POP
43238: POP
// result := s_arr [ 1 ] ;
43239: LD_ADDR_VAR 0 4
43243: PUSH
43244: LD_VAR 0 7
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: ST_TO_ADDR
// end ; end ;
43253: LD_VAR 0 4
43257: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43258: LD_INT 0
43260: PPUSH
43261: PPUSH
// if not list then
43262: LD_VAR 0 1
43266: NOT
43267: IFFALSE 43271
// exit ;
43269: GO 43362
// i := list [ pos1 ] ;
43271: LD_ADDR_VAR 0 5
43275: PUSH
43276: LD_VAR 0 1
43280: PUSH
43281: LD_VAR 0 2
43285: ARRAY
43286: ST_TO_ADDR
// if not i then
43287: LD_VAR 0 5
43291: NOT
43292: IFFALSE 43296
// exit ;
43294: GO 43362
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43296: LD_ADDR_VAR 0 1
43300: PUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: LD_VAR 0 2
43310: PPUSH
43311: LD_VAR 0 1
43315: PUSH
43316: LD_VAR 0 3
43320: ARRAY
43321: PPUSH
43322: CALL_OW 1
43326: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43327: LD_ADDR_VAR 0 1
43331: PUSH
43332: LD_VAR 0 1
43336: PPUSH
43337: LD_VAR 0 3
43341: PPUSH
43342: LD_VAR 0 5
43346: PPUSH
43347: CALL_OW 1
43351: ST_TO_ADDR
// result := list ;
43352: LD_ADDR_VAR 0 4
43356: PUSH
43357: LD_VAR 0 1
43361: ST_TO_ADDR
// end ;
43362: LD_VAR 0 4
43366: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43367: LD_INT 0
43369: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43370: LD_ADDR_VAR 0 5
43374: PUSH
43375: LD_VAR 0 1
43379: PPUSH
43380: CALL_OW 250
43384: PPUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL_OW 251
43394: PPUSH
43395: LD_VAR 0 2
43399: PPUSH
43400: LD_VAR 0 3
43404: PPUSH
43405: LD_VAR 0 4
43409: PPUSH
43410: CALL 43420 0 5
43414: ST_TO_ADDR
// end ;
43415: LD_VAR 0 5
43419: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43420: LD_INT 0
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
// if not list then
43426: LD_VAR 0 3
43430: NOT
43431: IFFALSE 43435
// exit ;
43433: GO 43823
// result := [ ] ;
43435: LD_ADDR_VAR 0 6
43439: PUSH
43440: EMPTY
43441: ST_TO_ADDR
// for i in list do
43442: LD_ADDR_VAR 0 7
43446: PUSH
43447: LD_VAR 0 3
43451: PUSH
43452: FOR_IN
43453: IFFALSE 43655
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43455: LD_ADDR_VAR 0 9
43459: PUSH
43460: LD_VAR 0 7
43464: PPUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: LD_VAR 0 2
43474: PPUSH
43475: CALL_OW 297
43479: ST_TO_ADDR
// if not result then
43480: LD_VAR 0 6
43484: NOT
43485: IFFALSE 43511
// result := [ [ i , tmp ] ] else
43487: LD_ADDR_VAR 0 6
43491: PUSH
43492: LD_VAR 0 7
43496: PUSH
43497: LD_VAR 0 9
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: ST_TO_ADDR
43509: GO 43653
// begin if result [ result ] [ 2 ] < tmp then
43511: LD_VAR 0 6
43515: PUSH
43516: LD_VAR 0 6
43520: ARRAY
43521: PUSH
43522: LD_INT 2
43524: ARRAY
43525: PUSH
43526: LD_VAR 0 9
43530: LESS
43531: IFFALSE 43573
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43533: LD_ADDR_VAR 0 6
43537: PUSH
43538: LD_VAR 0 6
43542: PPUSH
43543: LD_VAR 0 6
43547: PUSH
43548: LD_INT 1
43550: PLUS
43551: PPUSH
43552: LD_VAR 0 7
43556: PUSH
43557: LD_VAR 0 9
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PPUSH
43566: CALL_OW 2
43570: ST_TO_ADDR
43571: GO 43653
// for j = 1 to result do
43573: LD_ADDR_VAR 0 8
43577: PUSH
43578: DOUBLE
43579: LD_INT 1
43581: DEC
43582: ST_TO_ADDR
43583: LD_VAR 0 6
43587: PUSH
43588: FOR_TO
43589: IFFALSE 43651
// begin if tmp < result [ j ] [ 2 ] then
43591: LD_VAR 0 9
43595: PUSH
43596: LD_VAR 0 6
43600: PUSH
43601: LD_VAR 0 8
43605: ARRAY
43606: PUSH
43607: LD_INT 2
43609: ARRAY
43610: LESS
43611: IFFALSE 43649
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43613: LD_ADDR_VAR 0 6
43617: PUSH
43618: LD_VAR 0 6
43622: PPUSH
43623: LD_VAR 0 8
43627: PPUSH
43628: LD_VAR 0 7
43632: PUSH
43633: LD_VAR 0 9
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PPUSH
43642: CALL_OW 2
43646: ST_TO_ADDR
// break ;
43647: GO 43651
// end ; end ;
43649: GO 43588
43651: POP
43652: POP
// end ; end ;
43653: GO 43452
43655: POP
43656: POP
// if result and not asc then
43657: LD_VAR 0 6
43661: PUSH
43662: LD_VAR 0 4
43666: NOT
43667: AND
43668: IFFALSE 43743
// begin tmp := result ;
43670: LD_ADDR_VAR 0 9
43674: PUSH
43675: LD_VAR 0 6
43679: ST_TO_ADDR
// for i = tmp downto 1 do
43680: LD_ADDR_VAR 0 7
43684: PUSH
43685: DOUBLE
43686: LD_VAR 0 9
43690: INC
43691: ST_TO_ADDR
43692: LD_INT 1
43694: PUSH
43695: FOR_DOWNTO
43696: IFFALSE 43741
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43698: LD_ADDR_VAR 0 6
43702: PUSH
43703: LD_VAR 0 6
43707: PPUSH
43708: LD_VAR 0 9
43712: PUSH
43713: LD_VAR 0 7
43717: MINUS
43718: PUSH
43719: LD_INT 1
43721: PLUS
43722: PPUSH
43723: LD_VAR 0 9
43727: PUSH
43728: LD_VAR 0 7
43732: ARRAY
43733: PPUSH
43734: CALL_OW 1
43738: ST_TO_ADDR
43739: GO 43695
43741: POP
43742: POP
// end ; tmp := [ ] ;
43743: LD_ADDR_VAR 0 9
43747: PUSH
43748: EMPTY
43749: ST_TO_ADDR
// if mode then
43750: LD_VAR 0 5
43754: IFFALSE 43823
// begin for i = 1 to result do
43756: LD_ADDR_VAR 0 7
43760: PUSH
43761: DOUBLE
43762: LD_INT 1
43764: DEC
43765: ST_TO_ADDR
43766: LD_VAR 0 6
43770: PUSH
43771: FOR_TO
43772: IFFALSE 43811
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43774: LD_ADDR_VAR 0 9
43778: PUSH
43779: LD_VAR 0 9
43783: PPUSH
43784: LD_VAR 0 7
43788: PPUSH
43789: LD_VAR 0 6
43793: PUSH
43794: LD_VAR 0 7
43798: ARRAY
43799: PUSH
43800: LD_INT 1
43802: ARRAY
43803: PPUSH
43804: CALL_OW 1
43808: ST_TO_ADDR
43809: GO 43771
43811: POP
43812: POP
// result := tmp ;
43813: LD_ADDR_VAR 0 6
43817: PUSH
43818: LD_VAR 0 9
43822: ST_TO_ADDR
// end ; end ;
43823: LD_VAR 0 6
43827: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43828: LD_INT 0
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43836: LD_ADDR_VAR 0 5
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// if not x or not y then
43858: LD_VAR 0 2
43862: NOT
43863: PUSH
43864: LD_VAR 0 3
43868: NOT
43869: OR
43870: IFFALSE 43874
// exit ;
43872: GO 45524
// if not range then
43874: LD_VAR 0 4
43878: NOT
43879: IFFALSE 43889
// range := 10 ;
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: LD_INT 10
43888: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43889: LD_ADDR_VAR 0 8
43893: PUSH
43894: LD_INT 81
43896: PUSH
43897: LD_VAR 0 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 92
43908: PUSH
43909: LD_VAR 0 2
43913: PUSH
43914: LD_VAR 0 3
43918: PUSH
43919: LD_VAR 0 4
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: LD_INT 21
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: PPUSH
43952: CALL_OW 69
43956: ST_TO_ADDR
// if not tmp then
43957: LD_VAR 0 8
43961: NOT
43962: IFFALSE 43966
// exit ;
43964: GO 45524
// for i in tmp do
43966: LD_ADDR_VAR 0 6
43970: PUSH
43971: LD_VAR 0 8
43975: PUSH
43976: FOR_IN
43977: IFFALSE 45499
// begin points := [ 0 , 0 , 0 ] ;
43979: LD_ADDR_VAR 0 9
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
// bpoints := 1 ;
43998: LD_ADDR_VAR 0 10
44002: PUSH
44003: LD_INT 1
44005: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44006: LD_VAR 0 6
44010: PPUSH
44011: CALL_OW 247
44015: PUSH
44016: LD_INT 1
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44024
44022: GO 44602
44024: POP
// begin if GetClass ( i ) = 1 then
44025: LD_VAR 0 6
44029: PPUSH
44030: CALL_OW 257
44034: PUSH
44035: LD_INT 1
44037: EQUAL
44038: IFFALSE 44059
// points := [ 10 , 5 , 3 ] ;
44040: LD_ADDR_VAR 0 9
44044: PUSH
44045: LD_INT 10
44047: PUSH
44048: LD_INT 5
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44059: LD_VAR 0 6
44063: PPUSH
44064: CALL_OW 257
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 4
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: IN
44083: IFFALSE 44104
// points := [ 3 , 2 , 1 ] ;
44085: LD_ADDR_VAR 0 9
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44104: LD_VAR 0 6
44108: PPUSH
44109: CALL_OW 257
44113: PUSH
44114: LD_INT 5
44116: EQUAL
44117: IFFALSE 44138
// points := [ 130 , 5 , 2 ] ;
44119: LD_ADDR_VAR 0 9
44123: PUSH
44124: LD_INT 130
44126: PUSH
44127: LD_INT 5
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44138: LD_VAR 0 6
44142: PPUSH
44143: CALL_OW 257
44147: PUSH
44148: LD_INT 8
44150: EQUAL
44151: IFFALSE 44172
// points := [ 35 , 35 , 30 ] ;
44153: LD_ADDR_VAR 0 9
44157: PUSH
44158: LD_INT 35
44160: PUSH
44161: LD_INT 35
44163: PUSH
44164: LD_INT 30
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44172: LD_VAR 0 6
44176: PPUSH
44177: CALL_OW 257
44181: PUSH
44182: LD_INT 9
44184: EQUAL
44185: IFFALSE 44206
// points := [ 20 , 55 , 40 ] ;
44187: LD_ADDR_VAR 0 9
44191: PUSH
44192: LD_INT 20
44194: PUSH
44195: LD_INT 55
44197: PUSH
44198: LD_INT 40
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44206: LD_VAR 0 6
44210: PPUSH
44211: CALL_OW 257
44215: PUSH
44216: LD_INT 12
44218: PUSH
44219: LD_INT 16
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: IN
44226: IFFALSE 44247
// points := [ 5 , 3 , 2 ] ;
44228: LD_ADDR_VAR 0 9
44232: PUSH
44233: LD_INT 5
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44247: LD_VAR 0 6
44251: PPUSH
44252: CALL_OW 257
44256: PUSH
44257: LD_INT 17
44259: EQUAL
44260: IFFALSE 44281
// points := [ 100 , 50 , 75 ] ;
44262: LD_ADDR_VAR 0 9
44266: PUSH
44267: LD_INT 100
44269: PUSH
44270: LD_INT 50
44272: PUSH
44273: LD_INT 75
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44281: LD_VAR 0 6
44285: PPUSH
44286: CALL_OW 257
44290: PUSH
44291: LD_INT 15
44293: EQUAL
44294: IFFALSE 44315
// points := [ 10 , 5 , 3 ] ;
44296: LD_ADDR_VAR 0 9
44300: PUSH
44301: LD_INT 10
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44315: LD_VAR 0 6
44319: PPUSH
44320: CALL_OW 257
44324: PUSH
44325: LD_INT 14
44327: EQUAL
44328: IFFALSE 44349
// points := [ 10 , 0 , 0 ] ;
44330: LD_ADDR_VAR 0 9
44334: PUSH
44335: LD_INT 10
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44349: LD_VAR 0 6
44353: PPUSH
44354: CALL_OW 257
44358: PUSH
44359: LD_INT 11
44361: EQUAL
44362: IFFALSE 44383
// points := [ 30 , 10 , 5 ] ;
44364: LD_ADDR_VAR 0 9
44368: PUSH
44369: LD_INT 30
44371: PUSH
44372: LD_INT 10
44374: PUSH
44375: LD_INT 5
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44383: LD_VAR 0 1
44387: PPUSH
44388: LD_INT 5
44390: PPUSH
44391: CALL_OW 321
44395: PUSH
44396: LD_INT 2
44398: EQUAL
44399: IFFALSE 44416
// bpoints := bpoints * 1.8 ;
44401: LD_ADDR_VAR 0 10
44405: PUSH
44406: LD_VAR 0 10
44410: PUSH
44411: LD_REAL  1.80000000000000E+0000
44414: MUL
44415: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44416: LD_VAR 0 6
44420: PPUSH
44421: CALL_OW 257
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: LD_INT 4
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: IN
44444: PUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: LD_INT 51
44452: PPUSH
44453: CALL_OW 321
44457: PUSH
44458: LD_INT 2
44460: EQUAL
44461: AND
44462: IFFALSE 44479
// bpoints := bpoints * 1.2 ;
44464: LD_ADDR_VAR 0 10
44468: PUSH
44469: LD_VAR 0 10
44473: PUSH
44474: LD_REAL  1.20000000000000E+0000
44477: MUL
44478: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44479: LD_VAR 0 6
44483: PPUSH
44484: CALL_OW 257
44488: PUSH
44489: LD_INT 5
44491: PUSH
44492: LD_INT 7
44494: PUSH
44495: LD_INT 9
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: IN
44503: PUSH
44504: LD_VAR 0 1
44508: PPUSH
44509: LD_INT 52
44511: PPUSH
44512: CALL_OW 321
44516: PUSH
44517: LD_INT 2
44519: EQUAL
44520: AND
44521: IFFALSE 44538
// bpoints := bpoints * 1.5 ;
44523: LD_ADDR_VAR 0 10
44527: PUSH
44528: LD_VAR 0 10
44532: PUSH
44533: LD_REAL  1.50000000000000E+0000
44536: MUL
44537: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44538: LD_VAR 0 1
44542: PPUSH
44543: LD_INT 66
44545: PPUSH
44546: CALL_OW 321
44550: PUSH
44551: LD_INT 2
44553: EQUAL
44554: IFFALSE 44571
// bpoints := bpoints * 1.1 ;
44556: LD_ADDR_VAR 0 10
44560: PUSH
44561: LD_VAR 0 10
44565: PUSH
44566: LD_REAL  1.10000000000000E+0000
44569: MUL
44570: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44571: LD_ADDR_VAR 0 10
44575: PUSH
44576: LD_VAR 0 10
44580: PUSH
44581: LD_VAR 0 6
44585: PPUSH
44586: LD_INT 1
44588: PPUSH
44589: CALL_OW 259
44593: PUSH
44594: LD_REAL  1.15000000000000E+0000
44597: MUL
44598: MUL
44599: ST_TO_ADDR
// end ; unit_vehicle :
44600: GO 45428
44602: LD_INT 2
44604: DOUBLE
44605: EQUAL
44606: IFTRUE 44610
44608: GO 45416
44610: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44611: LD_VAR 0 6
44615: PPUSH
44616: CALL_OW 264
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 42
44626: PUSH
44627: LD_INT 24
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: IN
44635: IFFALSE 44656
// points := [ 25 , 5 , 3 ] ;
44637: LD_ADDR_VAR 0 9
44641: PUSH
44642: LD_INT 25
44644: PUSH
44645: LD_INT 5
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44656: LD_VAR 0 6
44660: PPUSH
44661: CALL_OW 264
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: LD_INT 43
44671: PUSH
44672: LD_INT 25
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: IN
44680: IFFALSE 44701
// points := [ 40 , 15 , 5 ] ;
44682: LD_ADDR_VAR 0 9
44686: PUSH
44687: LD_INT 40
44689: PUSH
44690: LD_INT 15
44692: PUSH
44693: LD_INT 5
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44701: LD_VAR 0 6
44705: PPUSH
44706: CALL_OW 264
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: LD_INT 23
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: IN
44721: IFFALSE 44742
// points := [ 7 , 25 , 8 ] ;
44723: LD_ADDR_VAR 0 9
44727: PUSH
44728: LD_INT 7
44730: PUSH
44731: LD_INT 25
44733: PUSH
44734: LD_INT 8
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44742: LD_VAR 0 6
44746: PPUSH
44747: CALL_OW 264
44751: PUSH
44752: LD_INT 5
44754: PUSH
44755: LD_INT 27
44757: PUSH
44758: LD_INT 44
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: IN
44766: IFFALSE 44787
// points := [ 14 , 50 , 16 ] ;
44768: LD_ADDR_VAR 0 9
44772: PUSH
44773: LD_INT 14
44775: PUSH
44776: LD_INT 50
44778: PUSH
44779: LD_INT 16
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44787: LD_VAR 0 6
44791: PPUSH
44792: CALL_OW 264
44796: PUSH
44797: LD_INT 6
44799: PUSH
44800: LD_INT 46
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: IN
44807: IFFALSE 44828
// points := [ 32 , 120 , 70 ] ;
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_INT 32
44816: PUSH
44817: LD_INT 120
44819: PUSH
44820: LD_INT 70
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44828: LD_VAR 0 6
44832: PPUSH
44833: CALL_OW 264
44837: PUSH
44838: LD_INT 7
44840: PUSH
44841: LD_INT 28
44843: PUSH
44844: LD_INT 45
44846: PUSH
44847: LD_INT 92
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: IN
44856: IFFALSE 44877
// points := [ 35 , 20 , 45 ] ;
44858: LD_ADDR_VAR 0 9
44862: PUSH
44863: LD_INT 35
44865: PUSH
44866: LD_INT 20
44868: PUSH
44869: LD_INT 45
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44877: LD_VAR 0 6
44881: PPUSH
44882: CALL_OW 264
44886: PUSH
44887: LD_INT 47
44889: PUSH
44890: EMPTY
44891: LIST
44892: IN
44893: IFFALSE 44914
// points := [ 67 , 45 , 75 ] ;
44895: LD_ADDR_VAR 0 9
44899: PUSH
44900: LD_INT 67
44902: PUSH
44903: LD_INT 45
44905: PUSH
44906: LD_INT 75
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44914: LD_VAR 0 6
44918: PPUSH
44919: CALL_OW 264
44923: PUSH
44924: LD_INT 26
44926: PUSH
44927: EMPTY
44928: LIST
44929: IN
44930: IFFALSE 44951
// points := [ 120 , 30 , 80 ] ;
44932: LD_ADDR_VAR 0 9
44936: PUSH
44937: LD_INT 120
44939: PUSH
44940: LD_INT 30
44942: PUSH
44943: LD_INT 80
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44951: LD_VAR 0 6
44955: PPUSH
44956: CALL_OW 264
44960: PUSH
44961: LD_INT 22
44963: PUSH
44964: EMPTY
44965: LIST
44966: IN
44967: IFFALSE 44988
// points := [ 40 , 1 , 1 ] ;
44969: LD_ADDR_VAR 0 9
44973: PUSH
44974: LD_INT 40
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44988: LD_VAR 0 6
44992: PPUSH
44993: CALL_OW 264
44997: PUSH
44998: LD_INT 29
45000: PUSH
45001: EMPTY
45002: LIST
45003: IN
45004: IFFALSE 45025
// points := [ 70 , 200 , 400 ] ;
45006: LD_ADDR_VAR 0 9
45010: PUSH
45011: LD_INT 70
45013: PUSH
45014: LD_INT 200
45016: PUSH
45017: LD_INT 400
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45025: LD_VAR 0 6
45029: PPUSH
45030: CALL_OW 264
45034: PUSH
45035: LD_INT 14
45037: PUSH
45038: LD_INT 53
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: IN
45045: IFFALSE 45066
// points := [ 40 , 10 , 20 ] ;
45047: LD_ADDR_VAR 0 9
45051: PUSH
45052: LD_INT 40
45054: PUSH
45055: LD_INT 10
45057: PUSH
45058: LD_INT 20
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45066: LD_VAR 0 6
45070: PPUSH
45071: CALL_OW 264
45075: PUSH
45076: LD_INT 9
45078: PUSH
45079: EMPTY
45080: LIST
45081: IN
45082: IFFALSE 45103
// points := [ 5 , 70 , 20 ] ;
45084: LD_ADDR_VAR 0 9
45088: PUSH
45089: LD_INT 5
45091: PUSH
45092: LD_INT 70
45094: PUSH
45095: LD_INT 20
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45103: LD_VAR 0 6
45107: PPUSH
45108: CALL_OW 264
45112: PUSH
45113: LD_INT 10
45115: PUSH
45116: EMPTY
45117: LIST
45118: IN
45119: IFFALSE 45140
// points := [ 35 , 110 , 70 ] ;
45121: LD_ADDR_VAR 0 9
45125: PUSH
45126: LD_INT 35
45128: PUSH
45129: LD_INT 110
45131: PUSH
45132: LD_INT 70
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45140: LD_VAR 0 6
45144: PPUSH
45145: CALL_OW 265
45149: PUSH
45150: LD_INT 25
45152: EQUAL
45153: IFFALSE 45174
// points := [ 80 , 65 , 100 ] ;
45155: LD_ADDR_VAR 0 9
45159: PUSH
45160: LD_INT 80
45162: PUSH
45163: LD_INT 65
45165: PUSH
45166: LD_INT 100
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45174: LD_VAR 0 6
45178: PPUSH
45179: CALL_OW 263
45183: PUSH
45184: LD_INT 1
45186: EQUAL
45187: IFFALSE 45222
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45189: LD_ADDR_VAR 0 10
45193: PUSH
45194: LD_VAR 0 10
45198: PUSH
45199: LD_VAR 0 6
45203: PPUSH
45204: CALL_OW 311
45208: PPUSH
45209: LD_INT 3
45211: PPUSH
45212: CALL_OW 259
45216: PUSH
45217: LD_INT 4
45219: MUL
45220: MUL
45221: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45222: LD_VAR 0 6
45226: PPUSH
45227: CALL_OW 263
45231: PUSH
45232: LD_INT 2
45234: EQUAL
45235: IFFALSE 45286
// begin j := IsControledBy ( i ) ;
45237: LD_ADDR_VAR 0 7
45241: PUSH
45242: LD_VAR 0 6
45246: PPUSH
45247: CALL_OW 312
45251: ST_TO_ADDR
// if j then
45252: LD_VAR 0 7
45256: IFFALSE 45286
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45258: LD_ADDR_VAR 0 10
45262: PUSH
45263: LD_VAR 0 10
45267: PUSH
45268: LD_VAR 0 7
45272: PPUSH
45273: LD_INT 3
45275: PPUSH
45276: CALL_OW 259
45280: PUSH
45281: LD_INT 3
45283: MUL
45284: MUL
45285: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45286: LD_VAR 0 6
45290: PPUSH
45291: CALL_OW 264
45295: PUSH
45296: LD_INT 5
45298: PUSH
45299: LD_INT 6
45301: PUSH
45302: LD_INT 46
45304: PUSH
45305: LD_INT 44
45307: PUSH
45308: LD_INT 47
45310: PUSH
45311: LD_INT 45
45313: PUSH
45314: LD_INT 28
45316: PUSH
45317: LD_INT 7
45319: PUSH
45320: LD_INT 27
45322: PUSH
45323: LD_INT 29
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: IN
45338: PUSH
45339: LD_VAR 0 1
45343: PPUSH
45344: LD_INT 52
45346: PPUSH
45347: CALL_OW 321
45351: PUSH
45352: LD_INT 2
45354: EQUAL
45355: AND
45356: IFFALSE 45373
// bpoints := bpoints * 1.2 ;
45358: LD_ADDR_VAR 0 10
45362: PUSH
45363: LD_VAR 0 10
45367: PUSH
45368: LD_REAL  1.20000000000000E+0000
45371: MUL
45372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45373: LD_VAR 0 6
45377: PPUSH
45378: CALL_OW 264
45382: PUSH
45383: LD_INT 6
45385: PUSH
45386: LD_INT 46
45388: PUSH
45389: LD_INT 47
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: IN
45397: IFFALSE 45414
// bpoints := bpoints * 1.2 ;
45399: LD_ADDR_VAR 0 10
45403: PUSH
45404: LD_VAR 0 10
45408: PUSH
45409: LD_REAL  1.20000000000000E+0000
45412: MUL
45413: ST_TO_ADDR
// end ; unit_building :
45414: GO 45428
45416: LD_INT 3
45418: DOUBLE
45419: EQUAL
45420: IFTRUE 45424
45422: GO 45427
45424: POP
// ; end ;
45425: GO 45428
45427: POP
// for j = 1 to 3 do
45428: LD_ADDR_VAR 0 7
45432: PUSH
45433: DOUBLE
45434: LD_INT 1
45436: DEC
45437: ST_TO_ADDR
45438: LD_INT 3
45440: PUSH
45441: FOR_TO
45442: IFFALSE 45495
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45444: LD_ADDR_VAR 0 5
45448: PUSH
45449: LD_VAR 0 5
45453: PPUSH
45454: LD_VAR 0 7
45458: PPUSH
45459: LD_VAR 0 5
45463: PUSH
45464: LD_VAR 0 7
45468: ARRAY
45469: PUSH
45470: LD_VAR 0 9
45474: PUSH
45475: LD_VAR 0 7
45479: ARRAY
45480: PUSH
45481: LD_VAR 0 10
45485: MUL
45486: PLUS
45487: PPUSH
45488: CALL_OW 1
45492: ST_TO_ADDR
45493: GO 45441
45495: POP
45496: POP
// end ;
45497: GO 43976
45499: POP
45500: POP
// result := Replace ( result , 4 , tmp ) ;
45501: LD_ADDR_VAR 0 5
45505: PUSH
45506: LD_VAR 0 5
45510: PPUSH
45511: LD_INT 4
45513: PPUSH
45514: LD_VAR 0 8
45518: PPUSH
45519: CALL_OW 1
45523: ST_TO_ADDR
// end ;
45524: LD_VAR 0 5
45528: RET
// export function DangerAtRange ( unit , range ) ; begin
45529: LD_INT 0
45531: PPUSH
// if not unit then
45532: LD_VAR 0 1
45536: NOT
45537: IFFALSE 45541
// exit ;
45539: GO 45586
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45541: LD_ADDR_VAR 0 3
45545: PUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL_OW 255
45555: PPUSH
45556: LD_VAR 0 1
45560: PPUSH
45561: CALL_OW 250
45565: PPUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: CALL_OW 251
45575: PPUSH
45576: LD_VAR 0 2
45580: PPUSH
45581: CALL 43828 0 4
45585: ST_TO_ADDR
// end ;
45586: LD_VAR 0 3
45590: RET
// export function DangerInArea ( side , area ) ; begin
45591: LD_INT 0
45593: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45594: LD_ADDR_VAR 0 3
45598: PUSH
45599: LD_VAR 0 2
45603: PPUSH
45604: LD_INT 81
45606: PUSH
45607: LD_VAR 0 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PPUSH
45616: CALL_OW 70
45620: ST_TO_ADDR
// end ;
45621: LD_VAR 0 3
45625: RET
// export function IsExtension ( b ) ; begin
45626: LD_INT 0
45628: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45629: LD_ADDR_VAR 0 2
45633: PUSH
45634: LD_VAR 0 1
45638: PUSH
45639: LD_INT 23
45641: PUSH
45642: LD_INT 20
45644: PUSH
45645: LD_INT 22
45647: PUSH
45648: LD_INT 17
45650: PUSH
45651: LD_INT 24
45653: PUSH
45654: LD_INT 21
45656: PUSH
45657: LD_INT 19
45659: PUSH
45660: LD_INT 16
45662: PUSH
45663: LD_INT 25
45665: PUSH
45666: LD_INT 18
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: IN
45681: ST_TO_ADDR
// end ;
45682: LD_VAR 0 2
45686: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45687: LD_INT 0
45689: PPUSH
45690: PPUSH
45691: PPUSH
// result := [ ] ;
45692: LD_ADDR_VAR 0 4
45696: PUSH
45697: EMPTY
45698: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45699: LD_ADDR_VAR 0 5
45703: PUSH
45704: LD_VAR 0 2
45708: PPUSH
45709: LD_INT 21
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PPUSH
45719: CALL_OW 70
45723: ST_TO_ADDR
// if not tmp then
45724: LD_VAR 0 5
45728: NOT
45729: IFFALSE 45733
// exit ;
45731: GO 45797
// if checkLink then
45733: LD_VAR 0 3
45737: IFFALSE 45787
// begin for i in tmp do
45739: LD_ADDR_VAR 0 6
45743: PUSH
45744: LD_VAR 0 5
45748: PUSH
45749: FOR_IN
45750: IFFALSE 45785
// if GetBase ( i ) <> base then
45752: LD_VAR 0 6
45756: PPUSH
45757: CALL_OW 274
45761: PUSH
45762: LD_VAR 0 1
45766: NONEQUAL
45767: IFFALSE 45783
// ComLinkToBase ( base , i ) ;
45769: LD_VAR 0 1
45773: PPUSH
45774: LD_VAR 0 6
45778: PPUSH
45779: CALL_OW 169
45783: GO 45749
45785: POP
45786: POP
// end ; result := tmp ;
45787: LD_ADDR_VAR 0 4
45791: PUSH
45792: LD_VAR 0 5
45796: ST_TO_ADDR
// end ;
45797: LD_VAR 0 4
45801: RET
// export function ComComplete ( units , b ) ; var i ; begin
45802: LD_INT 0
45804: PPUSH
45805: PPUSH
// if not units then
45806: LD_VAR 0 1
45810: NOT
45811: IFFALSE 45815
// exit ;
45813: GO 45905
// for i in units do
45815: LD_ADDR_VAR 0 4
45819: PUSH
45820: LD_VAR 0 1
45824: PUSH
45825: FOR_IN
45826: IFFALSE 45903
// if BuildingStatus ( b ) = bs_build then
45828: LD_VAR 0 2
45832: PPUSH
45833: CALL_OW 461
45837: PUSH
45838: LD_INT 1
45840: EQUAL
45841: IFFALSE 45901
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45843: LD_VAR 0 4
45847: PPUSH
45848: LD_STRING h
45850: PUSH
45851: LD_VAR 0 2
45855: PPUSH
45856: CALL_OW 250
45860: PUSH
45861: LD_VAR 0 2
45865: PPUSH
45866: CALL_OW 251
45870: PUSH
45871: LD_VAR 0 2
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: PPUSH
45897: CALL_OW 446
45901: GO 45825
45903: POP
45904: POP
// end ;
45905: LD_VAR 0 3
45909: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45910: LD_INT 0
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45918: LD_VAR 0 1
45922: NOT
45923: PUSH
45924: LD_VAR 0 1
45928: PPUSH
45929: CALL_OW 263
45933: PUSH
45934: LD_INT 2
45936: NONEQUAL
45937: OR
45938: IFFALSE 45942
// exit ;
45940: GO 46258
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45942: LD_ADDR_VAR 0 6
45946: PUSH
45947: LD_INT 22
45949: PUSH
45950: LD_VAR 0 1
45954: PPUSH
45955: CALL_OW 255
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 30
45969: PUSH
45970: LD_INT 36
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 34
45979: PUSH
45980: LD_INT 31
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PPUSH
45996: CALL_OW 69
46000: ST_TO_ADDR
// if not tmp then
46001: LD_VAR 0 6
46005: NOT
46006: IFFALSE 46010
// exit ;
46008: GO 46258
// result := [ ] ;
46010: LD_ADDR_VAR 0 2
46014: PUSH
46015: EMPTY
46016: ST_TO_ADDR
// for i in tmp do
46017: LD_ADDR_VAR 0 3
46021: PUSH
46022: LD_VAR 0 6
46026: PUSH
46027: FOR_IN
46028: IFFALSE 46099
// begin t := UnitsInside ( i ) ;
46030: LD_ADDR_VAR 0 4
46034: PUSH
46035: LD_VAR 0 3
46039: PPUSH
46040: CALL_OW 313
46044: ST_TO_ADDR
// if t then
46045: LD_VAR 0 4
46049: IFFALSE 46097
// for j in t do
46051: LD_ADDR_VAR 0 7
46055: PUSH
46056: LD_VAR 0 4
46060: PUSH
46061: FOR_IN
46062: IFFALSE 46095
// result := Replace ( result , result + 1 , j ) ;
46064: LD_ADDR_VAR 0 2
46068: PUSH
46069: LD_VAR 0 2
46073: PPUSH
46074: LD_VAR 0 2
46078: PUSH
46079: LD_INT 1
46081: PLUS
46082: PPUSH
46083: LD_VAR 0 7
46087: PPUSH
46088: CALL_OW 1
46092: ST_TO_ADDR
46093: GO 46061
46095: POP
46096: POP
// end ;
46097: GO 46027
46099: POP
46100: POP
// if not result then
46101: LD_VAR 0 2
46105: NOT
46106: IFFALSE 46110
// exit ;
46108: GO 46258
// mech := result [ 1 ] ;
46110: LD_ADDR_VAR 0 5
46114: PUSH
46115: LD_VAR 0 2
46119: PUSH
46120: LD_INT 1
46122: ARRAY
46123: ST_TO_ADDR
// if result > 1 then
46124: LD_VAR 0 2
46128: PUSH
46129: LD_INT 1
46131: GREATER
46132: IFFALSE 46244
// begin for i = 2 to result do
46134: LD_ADDR_VAR 0 3
46138: PUSH
46139: DOUBLE
46140: LD_INT 2
46142: DEC
46143: ST_TO_ADDR
46144: LD_VAR 0 2
46148: PUSH
46149: FOR_TO
46150: IFFALSE 46242
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46152: LD_ADDR_VAR 0 4
46156: PUSH
46157: LD_VAR 0 2
46161: PUSH
46162: LD_VAR 0 3
46166: ARRAY
46167: PPUSH
46168: LD_INT 3
46170: PPUSH
46171: CALL_OW 259
46175: PUSH
46176: LD_VAR 0 2
46180: PUSH
46181: LD_VAR 0 3
46185: ARRAY
46186: PPUSH
46187: CALL_OW 432
46191: MINUS
46192: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46193: LD_VAR 0 4
46197: PUSH
46198: LD_VAR 0 5
46202: PPUSH
46203: LD_INT 3
46205: PPUSH
46206: CALL_OW 259
46210: PUSH
46211: LD_VAR 0 5
46215: PPUSH
46216: CALL_OW 432
46220: MINUS
46221: GREATEREQUAL
46222: IFFALSE 46240
// mech := result [ i ] ;
46224: LD_ADDR_VAR 0 5
46228: PUSH
46229: LD_VAR 0 2
46233: PUSH
46234: LD_VAR 0 3
46238: ARRAY
46239: ST_TO_ADDR
// end ;
46240: GO 46149
46242: POP
46243: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_VAR 0 5
46253: PPUSH
46254: CALL_OW 135
// end ;
46258: LD_VAR 0 2
46262: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46263: LD_INT 0
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
// result := [ ] ;
46278: LD_ADDR_VAR 0 7
46282: PUSH
46283: EMPTY
46284: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46285: LD_VAR 0 1
46289: PPUSH
46290: CALL_OW 266
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: IN
46305: NOT
46306: IFFALSE 46310
// exit ;
46308: GO 47944
// if name then
46310: LD_VAR 0 3
46314: IFFALSE 46330
// SetBName ( base_dep , name ) ;
46316: LD_VAR 0 1
46320: PPUSH
46321: LD_VAR 0 3
46325: PPUSH
46326: CALL_OW 500
// base := GetBase ( base_dep ) ;
46330: LD_ADDR_VAR 0 15
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 274
46344: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46345: LD_ADDR_VAR 0 16
46349: PUSH
46350: LD_VAR 0 1
46354: PPUSH
46355: CALL_OW 255
46359: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46360: LD_ADDR_VAR 0 17
46364: PUSH
46365: LD_VAR 0 1
46369: PPUSH
46370: CALL_OW 248
46374: ST_TO_ADDR
// if sources then
46375: LD_VAR 0 5
46379: IFFALSE 46426
// for i = 1 to 3 do
46381: LD_ADDR_VAR 0 8
46385: PUSH
46386: DOUBLE
46387: LD_INT 1
46389: DEC
46390: ST_TO_ADDR
46391: LD_INT 3
46393: PUSH
46394: FOR_TO
46395: IFFALSE 46424
// AddResourceType ( base , i , sources [ i ] ) ;
46397: LD_VAR 0 15
46401: PPUSH
46402: LD_VAR 0 8
46406: PPUSH
46407: LD_VAR 0 5
46411: PUSH
46412: LD_VAR 0 8
46416: ARRAY
46417: PPUSH
46418: CALL_OW 276
46422: GO 46394
46424: POP
46425: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46426: LD_ADDR_VAR 0 18
46430: PUSH
46431: LD_VAR 0 15
46435: PPUSH
46436: LD_VAR 0 2
46440: PPUSH
46441: LD_INT 1
46443: PPUSH
46444: CALL 45687 0 3
46448: ST_TO_ADDR
// InitHc ;
46449: CALL_OW 19
// InitUc ;
46453: CALL_OW 18
// uc_side := side ;
46457: LD_ADDR_OWVAR 20
46461: PUSH
46462: LD_VAR 0 16
46466: ST_TO_ADDR
// uc_nation := nation ;
46467: LD_ADDR_OWVAR 21
46471: PUSH
46472: LD_VAR 0 17
46476: ST_TO_ADDR
// if buildings then
46477: LD_VAR 0 18
46481: IFFALSE 47803
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46483: LD_ADDR_VAR 0 19
46487: PUSH
46488: LD_VAR 0 18
46492: PPUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 30
46498: PUSH
46499: LD_INT 29
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 30
46508: PUSH
46509: LD_INT 30
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: PPUSH
46521: CALL_OW 72
46525: ST_TO_ADDR
// if tmp then
46526: LD_VAR 0 19
46530: IFFALSE 46578
// for i in tmp do
46532: LD_ADDR_VAR 0 8
46536: PUSH
46537: LD_VAR 0 19
46541: PUSH
46542: FOR_IN
46543: IFFALSE 46576
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46545: LD_VAR 0 8
46549: PPUSH
46550: CALL_OW 250
46554: PPUSH
46555: LD_VAR 0 8
46559: PPUSH
46560: CALL_OW 251
46564: PPUSH
46565: LD_VAR 0 16
46569: PPUSH
46570: CALL_OW 441
46574: GO 46542
46576: POP
46577: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46578: LD_VAR 0 18
46582: PPUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 30
46588: PUSH
46589: LD_INT 32
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 30
46598: PUSH
46599: LD_INT 33
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: PPUSH
46611: CALL_OW 72
46615: IFFALSE 46703
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46617: LD_ADDR_VAR 0 8
46621: PUSH
46622: LD_VAR 0 18
46626: PPUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 30
46632: PUSH
46633: LD_INT 32
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 30
46642: PUSH
46643: LD_INT 33
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: PPUSH
46655: CALL_OW 72
46659: PUSH
46660: FOR_IN
46661: IFFALSE 46701
// begin if not GetBWeapon ( i ) then
46663: LD_VAR 0 8
46667: PPUSH
46668: CALL_OW 269
46672: NOT
46673: IFFALSE 46699
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46675: LD_VAR 0 8
46679: PPUSH
46680: LD_VAR 0 8
46684: PPUSH
46685: LD_VAR 0 2
46689: PPUSH
46690: CALL 47949 0 2
46694: PPUSH
46695: CALL_OW 431
// end ;
46699: GO 46660
46701: POP
46702: POP
// end ; for i = 1 to personel do
46703: LD_ADDR_VAR 0 8
46707: PUSH
46708: DOUBLE
46709: LD_INT 1
46711: DEC
46712: ST_TO_ADDR
46713: LD_VAR 0 6
46717: PUSH
46718: FOR_TO
46719: IFFALSE 47783
// begin if i > 4 then
46721: LD_VAR 0 8
46725: PUSH
46726: LD_INT 4
46728: GREATER
46729: IFFALSE 46733
// break ;
46731: GO 47783
// case i of 1 :
46733: LD_VAR 0 8
46737: PUSH
46738: LD_INT 1
46740: DOUBLE
46741: EQUAL
46742: IFTRUE 46746
46744: GO 46826
46746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46747: LD_ADDR_VAR 0 12
46751: PUSH
46752: LD_VAR 0 18
46756: PPUSH
46757: LD_INT 22
46759: PUSH
46760: LD_VAR 0 16
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 58
46771: PUSH
46772: EMPTY
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 30
46780: PUSH
46781: LD_INT 32
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 30
46790: PUSH
46791: LD_INT 4
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 30
46800: PUSH
46801: LD_INT 5
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: PPUSH
46819: CALL_OW 72
46823: ST_TO_ADDR
46824: GO 47048
46826: LD_INT 2
46828: DOUBLE
46829: EQUAL
46830: IFTRUE 46834
46832: GO 46896
46834: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46835: LD_ADDR_VAR 0 12
46839: PUSH
46840: LD_VAR 0 18
46844: PPUSH
46845: LD_INT 22
46847: PUSH
46848: LD_VAR 0 16
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 30
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 30
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PPUSH
46889: CALL_OW 72
46893: ST_TO_ADDR
46894: GO 47048
46896: LD_INT 3
46898: DOUBLE
46899: EQUAL
46900: IFTRUE 46904
46902: GO 46966
46904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46905: LD_ADDR_VAR 0 12
46909: PUSH
46910: LD_VAR 0 18
46914: PPUSH
46915: LD_INT 22
46917: PUSH
46918: LD_VAR 0 16
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 30
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 30
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PPUSH
46959: CALL_OW 72
46963: ST_TO_ADDR
46964: GO 47048
46966: LD_INT 4
46968: DOUBLE
46969: EQUAL
46970: IFTRUE 46974
46972: GO 47047
46974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46975: LD_ADDR_VAR 0 12
46979: PUSH
46980: LD_VAR 0 18
46984: PPUSH
46985: LD_INT 22
46987: PUSH
46988: LD_VAR 0 16
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: LD_INT 30
47002: PUSH
47003: LD_INT 6
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 30
47012: PUSH
47013: LD_INT 7
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 30
47022: PUSH
47023: LD_INT 8
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PPUSH
47040: CALL_OW 72
47044: ST_TO_ADDR
47045: GO 47048
47047: POP
// if i = 1 then
47048: LD_VAR 0 8
47052: PUSH
47053: LD_INT 1
47055: EQUAL
47056: IFFALSE 47167
// begin tmp := [ ] ;
47058: LD_ADDR_VAR 0 19
47062: PUSH
47063: EMPTY
47064: ST_TO_ADDR
// for j in f do
47065: LD_ADDR_VAR 0 9
47069: PUSH
47070: LD_VAR 0 12
47074: PUSH
47075: FOR_IN
47076: IFFALSE 47149
// if GetBType ( j ) = b_bunker then
47078: LD_VAR 0 9
47082: PPUSH
47083: CALL_OW 266
47087: PUSH
47088: LD_INT 32
47090: EQUAL
47091: IFFALSE 47118
// tmp := Insert ( tmp , 1 , j ) else
47093: LD_ADDR_VAR 0 19
47097: PUSH
47098: LD_VAR 0 19
47102: PPUSH
47103: LD_INT 1
47105: PPUSH
47106: LD_VAR 0 9
47110: PPUSH
47111: CALL_OW 2
47115: ST_TO_ADDR
47116: GO 47147
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47118: LD_ADDR_VAR 0 19
47122: PUSH
47123: LD_VAR 0 19
47127: PPUSH
47128: LD_VAR 0 19
47132: PUSH
47133: LD_INT 1
47135: PLUS
47136: PPUSH
47137: LD_VAR 0 9
47141: PPUSH
47142: CALL_OW 2
47146: ST_TO_ADDR
47147: GO 47075
47149: POP
47150: POP
// if tmp then
47151: LD_VAR 0 19
47155: IFFALSE 47167
// f := tmp ;
47157: LD_ADDR_VAR 0 12
47161: PUSH
47162: LD_VAR 0 19
47166: ST_TO_ADDR
// end ; x := personel [ i ] ;
47167: LD_ADDR_VAR 0 13
47171: PUSH
47172: LD_VAR 0 6
47176: PUSH
47177: LD_VAR 0 8
47181: ARRAY
47182: ST_TO_ADDR
// if x = - 1 then
47183: LD_VAR 0 13
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: EQUAL
47192: IFFALSE 47401
// begin for j in f do
47194: LD_ADDR_VAR 0 9
47198: PUSH
47199: LD_VAR 0 12
47203: PUSH
47204: FOR_IN
47205: IFFALSE 47397
// repeat InitHc ;
47207: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47211: LD_VAR 0 9
47215: PPUSH
47216: CALL_OW 266
47220: PUSH
47221: LD_INT 5
47223: EQUAL
47224: IFFALSE 47294
// begin if UnitsInside ( j ) < 3 then
47226: LD_VAR 0 9
47230: PPUSH
47231: CALL_OW 313
47235: PUSH
47236: LD_INT 3
47238: LESS
47239: IFFALSE 47275
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47241: LD_INT 0
47243: PPUSH
47244: LD_INT 5
47246: PUSH
47247: LD_INT 8
47249: PUSH
47250: LD_INT 9
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: PUSH
47258: LD_VAR 0 17
47262: ARRAY
47263: PPUSH
47264: LD_VAR 0 4
47268: PPUSH
47269: CALL_OW 380
47273: GO 47292
// PrepareHuman ( false , i , skill ) ;
47275: LD_INT 0
47277: PPUSH
47278: LD_VAR 0 8
47282: PPUSH
47283: LD_VAR 0 4
47287: PPUSH
47288: CALL_OW 380
// end else
47292: GO 47311
// PrepareHuman ( false , i , skill ) ;
47294: LD_INT 0
47296: PPUSH
47297: LD_VAR 0 8
47301: PPUSH
47302: LD_VAR 0 4
47306: PPUSH
47307: CALL_OW 380
// un := CreateHuman ;
47311: LD_ADDR_VAR 0 14
47315: PUSH
47316: CALL_OW 44
47320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47321: LD_ADDR_VAR 0 7
47325: PUSH
47326: LD_VAR 0 7
47330: PPUSH
47331: LD_INT 1
47333: PPUSH
47334: LD_VAR 0 14
47338: PPUSH
47339: CALL_OW 2
47343: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47344: LD_VAR 0 14
47348: PPUSH
47349: LD_VAR 0 9
47353: PPUSH
47354: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47358: LD_VAR 0 9
47362: PPUSH
47363: CALL_OW 313
47367: PUSH
47368: LD_INT 6
47370: EQUAL
47371: PUSH
47372: LD_VAR 0 9
47376: PPUSH
47377: CALL_OW 266
47381: PUSH
47382: LD_INT 32
47384: PUSH
47385: LD_INT 31
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: IN
47392: OR
47393: IFFALSE 47207
47395: GO 47204
47397: POP
47398: POP
// end else
47399: GO 47781
// for j = 1 to x do
47401: LD_ADDR_VAR 0 9
47405: PUSH
47406: DOUBLE
47407: LD_INT 1
47409: DEC
47410: ST_TO_ADDR
47411: LD_VAR 0 13
47415: PUSH
47416: FOR_TO
47417: IFFALSE 47779
// begin InitHc ;
47419: CALL_OW 19
// if not f then
47423: LD_VAR 0 12
47427: NOT
47428: IFFALSE 47517
// begin PrepareHuman ( false , i , skill ) ;
47430: LD_INT 0
47432: PPUSH
47433: LD_VAR 0 8
47437: PPUSH
47438: LD_VAR 0 4
47442: PPUSH
47443: CALL_OW 380
// un := CreateHuman ;
47447: LD_ADDR_VAR 0 14
47451: PUSH
47452: CALL_OW 44
47456: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47457: LD_ADDR_VAR 0 7
47461: PUSH
47462: LD_VAR 0 7
47466: PPUSH
47467: LD_INT 1
47469: PPUSH
47470: LD_VAR 0 14
47474: PPUSH
47475: CALL_OW 2
47479: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47480: LD_VAR 0 14
47484: PPUSH
47485: LD_VAR 0 1
47489: PPUSH
47490: CALL_OW 250
47494: PPUSH
47495: LD_VAR 0 1
47499: PPUSH
47500: CALL_OW 251
47504: PPUSH
47505: LD_INT 10
47507: PPUSH
47508: LD_INT 0
47510: PPUSH
47511: CALL_OW 50
// continue ;
47515: GO 47416
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47517: LD_VAR 0 12
47521: PUSH
47522: LD_INT 1
47524: ARRAY
47525: PPUSH
47526: CALL_OW 313
47530: PUSH
47531: LD_VAR 0 12
47535: PUSH
47536: LD_INT 1
47538: ARRAY
47539: PPUSH
47540: CALL_OW 266
47544: PUSH
47545: LD_INT 32
47547: PUSH
47548: LD_INT 31
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: IN
47555: AND
47556: PUSH
47557: LD_VAR 0 12
47561: PUSH
47562: LD_INT 1
47564: ARRAY
47565: PPUSH
47566: CALL_OW 313
47570: PUSH
47571: LD_INT 6
47573: EQUAL
47574: OR
47575: IFFALSE 47595
// f := Delete ( f , 1 ) ;
47577: LD_ADDR_VAR 0 12
47581: PUSH
47582: LD_VAR 0 12
47586: PPUSH
47587: LD_INT 1
47589: PPUSH
47590: CALL_OW 3
47594: ST_TO_ADDR
// if not f then
47595: LD_VAR 0 12
47599: NOT
47600: IFFALSE 47618
// begin x := x + 2 ;
47602: LD_ADDR_VAR 0 13
47606: PUSH
47607: LD_VAR 0 13
47611: PUSH
47612: LD_INT 2
47614: PLUS
47615: ST_TO_ADDR
// continue ;
47616: GO 47416
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47618: LD_VAR 0 12
47622: PUSH
47623: LD_INT 1
47625: ARRAY
47626: PPUSH
47627: CALL_OW 266
47631: PUSH
47632: LD_INT 5
47634: EQUAL
47635: IFFALSE 47709
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47637: LD_VAR 0 12
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PPUSH
47646: CALL_OW 313
47650: PUSH
47651: LD_INT 3
47653: LESS
47654: IFFALSE 47690
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47656: LD_INT 0
47658: PPUSH
47659: LD_INT 5
47661: PUSH
47662: LD_INT 8
47664: PUSH
47665: LD_INT 9
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: LIST
47672: PUSH
47673: LD_VAR 0 17
47677: ARRAY
47678: PPUSH
47679: LD_VAR 0 4
47683: PPUSH
47684: CALL_OW 380
47688: GO 47707
// PrepareHuman ( false , i , skill ) ;
47690: LD_INT 0
47692: PPUSH
47693: LD_VAR 0 8
47697: PPUSH
47698: LD_VAR 0 4
47702: PPUSH
47703: CALL_OW 380
// end else
47707: GO 47726
// PrepareHuman ( false , i , skill ) ;
47709: LD_INT 0
47711: PPUSH
47712: LD_VAR 0 8
47716: PPUSH
47717: LD_VAR 0 4
47721: PPUSH
47722: CALL_OW 380
// un := CreateHuman ;
47726: LD_ADDR_VAR 0 14
47730: PUSH
47731: CALL_OW 44
47735: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47736: LD_ADDR_VAR 0 7
47740: PUSH
47741: LD_VAR 0 7
47745: PPUSH
47746: LD_INT 1
47748: PPUSH
47749: LD_VAR 0 14
47753: PPUSH
47754: CALL_OW 2
47758: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47759: LD_VAR 0 14
47763: PPUSH
47764: LD_VAR 0 12
47768: PUSH
47769: LD_INT 1
47771: ARRAY
47772: PPUSH
47773: CALL_OW 52
// end ;
47777: GO 47416
47779: POP
47780: POP
// end ;
47781: GO 46718
47783: POP
47784: POP
// result := result ^ buildings ;
47785: LD_ADDR_VAR 0 7
47789: PUSH
47790: LD_VAR 0 7
47794: PUSH
47795: LD_VAR 0 18
47799: ADD
47800: ST_TO_ADDR
// end else
47801: GO 47944
// begin for i = 1 to personel do
47803: LD_ADDR_VAR 0 8
47807: PUSH
47808: DOUBLE
47809: LD_INT 1
47811: DEC
47812: ST_TO_ADDR
47813: LD_VAR 0 6
47817: PUSH
47818: FOR_TO
47819: IFFALSE 47942
// begin if i > 4 then
47821: LD_VAR 0 8
47825: PUSH
47826: LD_INT 4
47828: GREATER
47829: IFFALSE 47833
// break ;
47831: GO 47942
// x := personel [ i ] ;
47833: LD_ADDR_VAR 0 13
47837: PUSH
47838: LD_VAR 0 6
47842: PUSH
47843: LD_VAR 0 8
47847: ARRAY
47848: ST_TO_ADDR
// if x = - 1 then
47849: LD_VAR 0 13
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: EQUAL
47858: IFFALSE 47862
// continue ;
47860: GO 47818
// PrepareHuman ( false , i , skill ) ;
47862: LD_INT 0
47864: PPUSH
47865: LD_VAR 0 8
47869: PPUSH
47870: LD_VAR 0 4
47874: PPUSH
47875: CALL_OW 380
// un := CreateHuman ;
47879: LD_ADDR_VAR 0 14
47883: PUSH
47884: CALL_OW 44
47888: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47889: LD_VAR 0 14
47893: PPUSH
47894: LD_VAR 0 1
47898: PPUSH
47899: CALL_OW 250
47903: PPUSH
47904: LD_VAR 0 1
47908: PPUSH
47909: CALL_OW 251
47913: PPUSH
47914: LD_INT 10
47916: PPUSH
47917: LD_INT 0
47919: PPUSH
47920: CALL_OW 50
// result := result ^ un ;
47924: LD_ADDR_VAR 0 7
47928: PUSH
47929: LD_VAR 0 7
47933: PUSH
47934: LD_VAR 0 14
47938: ADD
47939: ST_TO_ADDR
// end ;
47940: GO 47818
47942: POP
47943: POP
// end ; end ;
47944: LD_VAR 0 7
47948: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47949: LD_INT 0
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
47961: PPUSH
47962: PPUSH
47963: PPUSH
47964: PPUSH
47965: PPUSH
47966: PPUSH
// result := false ;
47967: LD_ADDR_VAR 0 3
47971: PUSH
47972: LD_INT 0
47974: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47975: LD_VAR 0 1
47979: NOT
47980: PUSH
47981: LD_VAR 0 1
47985: PPUSH
47986: CALL_OW 266
47990: PUSH
47991: LD_INT 32
47993: PUSH
47994: LD_INT 33
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: IN
48001: NOT
48002: OR
48003: IFFALSE 48007
// exit ;
48005: GO 49116
// nat := GetNation ( tower ) ;
48007: LD_ADDR_VAR 0 12
48011: PUSH
48012: LD_VAR 0 1
48016: PPUSH
48017: CALL_OW 248
48021: ST_TO_ADDR
// side := GetSide ( tower ) ;
48022: LD_ADDR_VAR 0 16
48026: PUSH
48027: LD_VAR 0 1
48031: PPUSH
48032: CALL_OW 255
48036: ST_TO_ADDR
// x := GetX ( tower ) ;
48037: LD_ADDR_VAR 0 10
48041: PUSH
48042: LD_VAR 0 1
48046: PPUSH
48047: CALL_OW 250
48051: ST_TO_ADDR
// y := GetY ( tower ) ;
48052: LD_ADDR_VAR 0 11
48056: PUSH
48057: LD_VAR 0 1
48061: PPUSH
48062: CALL_OW 251
48066: ST_TO_ADDR
// if not x or not y then
48067: LD_VAR 0 10
48071: NOT
48072: PUSH
48073: LD_VAR 0 11
48077: NOT
48078: OR
48079: IFFALSE 48083
// exit ;
48081: GO 49116
// weapon := 0 ;
48083: LD_ADDR_VAR 0 18
48087: PUSH
48088: LD_INT 0
48090: ST_TO_ADDR
// fac_list := [ ] ;
48091: LD_ADDR_VAR 0 17
48095: PUSH
48096: EMPTY
48097: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48098: LD_ADDR_VAR 0 6
48102: PUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 274
48112: PPUSH
48113: LD_VAR 0 2
48117: PPUSH
48118: LD_INT 0
48120: PPUSH
48121: CALL 45687 0 3
48125: PPUSH
48126: LD_INT 30
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PPUSH
48136: CALL_OW 72
48140: ST_TO_ADDR
// if not factories then
48141: LD_VAR 0 6
48145: NOT
48146: IFFALSE 48150
// exit ;
48148: GO 49116
// for i in factories do
48150: LD_ADDR_VAR 0 8
48154: PUSH
48155: LD_VAR 0 6
48159: PUSH
48160: FOR_IN
48161: IFFALSE 48186
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48163: LD_ADDR_VAR 0 17
48167: PUSH
48168: LD_VAR 0 17
48172: PUSH
48173: LD_VAR 0 8
48177: PPUSH
48178: CALL_OW 478
48182: UNION
48183: ST_TO_ADDR
48184: GO 48160
48186: POP
48187: POP
// if not fac_list then
48188: LD_VAR 0 17
48192: NOT
48193: IFFALSE 48197
// exit ;
48195: GO 49116
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_INT 4
48204: PUSH
48205: LD_INT 5
48207: PUSH
48208: LD_INT 9
48210: PUSH
48211: LD_INT 10
48213: PUSH
48214: LD_INT 6
48216: PUSH
48217: LD_INT 7
48219: PUSH
48220: LD_INT 11
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 27
48234: PUSH
48235: LD_INT 28
48237: PUSH
48238: LD_INT 26
48240: PUSH
48241: LD_INT 30
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 43
48252: PUSH
48253: LD_INT 44
48255: PUSH
48256: LD_INT 46
48258: PUSH
48259: LD_INT 45
48261: PUSH
48262: LD_INT 47
48264: PUSH
48265: LD_INT 49
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: PUSH
48281: LD_VAR 0 12
48285: ARRAY
48286: ST_TO_ADDR
// list := list isect fac_list ;
48287: LD_ADDR_VAR 0 5
48291: PUSH
48292: LD_VAR 0 5
48296: PUSH
48297: LD_VAR 0 17
48301: ISECT
48302: ST_TO_ADDR
// if not list then
48303: LD_VAR 0 5
48307: NOT
48308: IFFALSE 48312
// exit ;
48310: GO 49116
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48312: LD_VAR 0 12
48316: PUSH
48317: LD_INT 3
48319: EQUAL
48320: PUSH
48321: LD_INT 49
48323: PUSH
48324: LD_VAR 0 5
48328: IN
48329: AND
48330: PUSH
48331: LD_INT 31
48333: PPUSH
48334: LD_VAR 0 16
48338: PPUSH
48339: CALL_OW 321
48343: PUSH
48344: LD_INT 2
48346: EQUAL
48347: AND
48348: IFFALSE 48408
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48350: LD_INT 22
48352: PUSH
48353: LD_VAR 0 16
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 35
48364: PUSH
48365: LD_INT 49
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 91
48374: PUSH
48375: LD_VAR 0 1
48379: PUSH
48380: LD_INT 10
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: LIST
48392: PPUSH
48393: CALL_OW 69
48397: NOT
48398: IFFALSE 48408
// weapon := ru_time_lapser ;
48400: LD_ADDR_VAR 0 18
48404: PUSH
48405: LD_INT 49
48407: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48408: LD_VAR 0 12
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: IN
48423: PUSH
48424: LD_INT 11
48426: PUSH
48427: LD_VAR 0 5
48431: IN
48432: PUSH
48433: LD_INT 30
48435: PUSH
48436: LD_VAR 0 5
48440: IN
48441: OR
48442: AND
48443: PUSH
48444: LD_INT 6
48446: PPUSH
48447: LD_VAR 0 16
48451: PPUSH
48452: CALL_OW 321
48456: PUSH
48457: LD_INT 2
48459: EQUAL
48460: AND
48461: IFFALSE 48626
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48463: LD_INT 22
48465: PUSH
48466: LD_VAR 0 16
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 35
48480: PUSH
48481: LD_INT 11
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 35
48490: PUSH
48491: LD_INT 30
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 91
48505: PUSH
48506: LD_VAR 0 1
48510: PUSH
48511: LD_INT 18
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: PPUSH
48524: CALL_OW 69
48528: NOT
48529: PUSH
48530: LD_INT 22
48532: PUSH
48533: LD_VAR 0 16
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 30
48547: PUSH
48548: LD_INT 32
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 30
48557: PUSH
48558: LD_INT 33
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 91
48572: PUSH
48573: LD_VAR 0 1
48577: PUSH
48578: LD_INT 12
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: PPUSH
48594: CALL_OW 69
48598: PUSH
48599: LD_INT 2
48601: GREATER
48602: AND
48603: IFFALSE 48626
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48605: LD_ADDR_VAR 0 18
48609: PUSH
48610: LD_INT 11
48612: PUSH
48613: LD_INT 30
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_VAR 0 12
48624: ARRAY
48625: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48626: LD_VAR 0 18
48630: NOT
48631: PUSH
48632: LD_INT 40
48634: PPUSH
48635: LD_VAR 0 16
48639: PPUSH
48640: CALL_OW 321
48644: PUSH
48645: LD_INT 2
48647: EQUAL
48648: AND
48649: PUSH
48650: LD_INT 7
48652: PUSH
48653: LD_VAR 0 5
48657: IN
48658: PUSH
48659: LD_INT 28
48661: PUSH
48662: LD_VAR 0 5
48666: IN
48667: OR
48668: PUSH
48669: LD_INT 45
48671: PUSH
48672: LD_VAR 0 5
48676: IN
48677: OR
48678: AND
48679: IFFALSE 48933
// begin hex := GetHexInfo ( x , y ) ;
48681: LD_ADDR_VAR 0 4
48685: PUSH
48686: LD_VAR 0 10
48690: PPUSH
48691: LD_VAR 0 11
48695: PPUSH
48696: CALL_OW 546
48700: ST_TO_ADDR
// if hex [ 1 ] then
48701: LD_VAR 0 4
48705: PUSH
48706: LD_INT 1
48708: ARRAY
48709: IFFALSE 48713
// exit ;
48711: GO 49116
// height := hex [ 2 ] ;
48713: LD_ADDR_VAR 0 15
48717: PUSH
48718: LD_VAR 0 4
48722: PUSH
48723: LD_INT 2
48725: ARRAY
48726: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48727: LD_ADDR_VAR 0 14
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: LD_INT 5
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// for i in tmp do
48750: LD_ADDR_VAR 0 8
48754: PUSH
48755: LD_VAR 0 14
48759: PUSH
48760: FOR_IN
48761: IFFALSE 48931
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48763: LD_ADDR_VAR 0 9
48767: PUSH
48768: LD_VAR 0 10
48772: PPUSH
48773: LD_VAR 0 8
48777: PPUSH
48778: LD_INT 5
48780: PPUSH
48781: CALL_OW 272
48785: PUSH
48786: LD_VAR 0 11
48790: PPUSH
48791: LD_VAR 0 8
48795: PPUSH
48796: LD_INT 5
48798: PPUSH
48799: CALL_OW 273
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48808: LD_VAR 0 9
48812: PUSH
48813: LD_INT 1
48815: ARRAY
48816: PPUSH
48817: LD_VAR 0 9
48821: PUSH
48822: LD_INT 2
48824: ARRAY
48825: PPUSH
48826: CALL_OW 488
48830: IFFALSE 48929
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48832: LD_ADDR_VAR 0 4
48836: PUSH
48837: LD_VAR 0 9
48841: PUSH
48842: LD_INT 1
48844: ARRAY
48845: PPUSH
48846: LD_VAR 0 9
48850: PUSH
48851: LD_INT 2
48853: ARRAY
48854: PPUSH
48855: CALL_OW 546
48859: ST_TO_ADDR
// if hex [ 1 ] then
48860: LD_VAR 0 4
48864: PUSH
48865: LD_INT 1
48867: ARRAY
48868: IFFALSE 48872
// continue ;
48870: GO 48760
// h := hex [ 2 ] ;
48872: LD_ADDR_VAR 0 13
48876: PUSH
48877: LD_VAR 0 4
48881: PUSH
48882: LD_INT 2
48884: ARRAY
48885: ST_TO_ADDR
// if h + 7 < height then
48886: LD_VAR 0 13
48890: PUSH
48891: LD_INT 7
48893: PLUS
48894: PUSH
48895: LD_VAR 0 15
48899: LESS
48900: IFFALSE 48929
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48902: LD_ADDR_VAR 0 18
48906: PUSH
48907: LD_INT 7
48909: PUSH
48910: LD_INT 28
48912: PUSH
48913: LD_INT 45
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: PUSH
48921: LD_VAR 0 12
48925: ARRAY
48926: ST_TO_ADDR
// break ;
48927: GO 48931
// end ; end ; end ;
48929: GO 48760
48931: POP
48932: POP
// end ; if not weapon then
48933: LD_VAR 0 18
48937: NOT
48938: IFFALSE 48998
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48940: LD_ADDR_VAR 0 5
48944: PUSH
48945: LD_VAR 0 5
48949: PUSH
48950: LD_INT 11
48952: PUSH
48953: LD_INT 30
48955: PUSH
48956: LD_INT 49
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: DIFF
48964: ST_TO_ADDR
// if not list then
48965: LD_VAR 0 5
48969: NOT
48970: IFFALSE 48974
// exit ;
48972: GO 49116
// weapon := list [ rand ( 1 , list ) ] ;
48974: LD_ADDR_VAR 0 18
48978: PUSH
48979: LD_VAR 0 5
48983: PUSH
48984: LD_INT 1
48986: PPUSH
48987: LD_VAR 0 5
48991: PPUSH
48992: CALL_OW 12
48996: ARRAY
48997: ST_TO_ADDR
// end ; if weapon then
48998: LD_VAR 0 18
49002: IFFALSE 49116
// begin tmp := CostOfWeapon ( weapon ) ;
49004: LD_ADDR_VAR 0 14
49008: PUSH
49009: LD_VAR 0 18
49013: PPUSH
49014: CALL_OW 451
49018: ST_TO_ADDR
// j := GetBase ( tower ) ;
49019: LD_ADDR_VAR 0 9
49023: PUSH
49024: LD_VAR 0 1
49028: PPUSH
49029: CALL_OW 274
49033: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49034: LD_VAR 0 9
49038: PPUSH
49039: LD_INT 1
49041: PPUSH
49042: CALL_OW 275
49046: PUSH
49047: LD_VAR 0 14
49051: PUSH
49052: LD_INT 1
49054: ARRAY
49055: GREATEREQUAL
49056: PUSH
49057: LD_VAR 0 9
49061: PPUSH
49062: LD_INT 2
49064: PPUSH
49065: CALL_OW 275
49069: PUSH
49070: LD_VAR 0 14
49074: PUSH
49075: LD_INT 2
49077: ARRAY
49078: GREATEREQUAL
49079: AND
49080: PUSH
49081: LD_VAR 0 9
49085: PPUSH
49086: LD_INT 3
49088: PPUSH
49089: CALL_OW 275
49093: PUSH
49094: LD_VAR 0 14
49098: PUSH
49099: LD_INT 3
49101: ARRAY
49102: GREATEREQUAL
49103: AND
49104: IFFALSE 49116
// result := weapon ;
49106: LD_ADDR_VAR 0 3
49110: PUSH
49111: LD_VAR 0 18
49115: ST_TO_ADDR
// end ; end ;
49116: LD_VAR 0 3
49120: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49121: LD_INT 0
49123: PPUSH
49124: PPUSH
// result := true ;
49125: LD_ADDR_VAR 0 3
49129: PUSH
49130: LD_INT 1
49132: ST_TO_ADDR
// if array1 = array2 then
49133: LD_VAR 0 1
49137: PUSH
49138: LD_VAR 0 2
49142: EQUAL
49143: IFFALSE 49203
// begin for i = 1 to array1 do
49145: LD_ADDR_VAR 0 4
49149: PUSH
49150: DOUBLE
49151: LD_INT 1
49153: DEC
49154: ST_TO_ADDR
49155: LD_VAR 0 1
49159: PUSH
49160: FOR_TO
49161: IFFALSE 49199
// if array1 [ i ] <> array2 [ i ] then
49163: LD_VAR 0 1
49167: PUSH
49168: LD_VAR 0 4
49172: ARRAY
49173: PUSH
49174: LD_VAR 0 2
49178: PUSH
49179: LD_VAR 0 4
49183: ARRAY
49184: NONEQUAL
49185: IFFALSE 49197
// begin result := false ;
49187: LD_ADDR_VAR 0 3
49191: PUSH
49192: LD_INT 0
49194: ST_TO_ADDR
// break ;
49195: GO 49199
// end ;
49197: GO 49160
49199: POP
49200: POP
// end else
49201: GO 49211
// result := false ;
49203: LD_ADDR_VAR 0 3
49207: PUSH
49208: LD_INT 0
49210: ST_TO_ADDR
// end ;
49211: LD_VAR 0 3
49215: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49216: LD_INT 0
49218: PPUSH
49219: PPUSH
// if not array1 or not array2 then
49220: LD_VAR 0 1
49224: NOT
49225: PUSH
49226: LD_VAR 0 2
49230: NOT
49231: OR
49232: IFFALSE 49236
// exit ;
49234: GO 49300
// result := true ;
49236: LD_ADDR_VAR 0 3
49240: PUSH
49241: LD_INT 1
49243: ST_TO_ADDR
// for i = 1 to array1 do
49244: LD_ADDR_VAR 0 4
49248: PUSH
49249: DOUBLE
49250: LD_INT 1
49252: DEC
49253: ST_TO_ADDR
49254: LD_VAR 0 1
49258: PUSH
49259: FOR_TO
49260: IFFALSE 49298
// if array1 [ i ] <> array2 [ i ] then
49262: LD_VAR 0 1
49266: PUSH
49267: LD_VAR 0 4
49271: ARRAY
49272: PUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_VAR 0 4
49282: ARRAY
49283: NONEQUAL
49284: IFFALSE 49296
// begin result := false ;
49286: LD_ADDR_VAR 0 3
49290: PUSH
49291: LD_INT 0
49293: ST_TO_ADDR
// break ;
49294: GO 49298
// end ;
49296: GO 49259
49298: POP
49299: POP
// end ;
49300: LD_VAR 0 3
49304: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49305: LD_INT 0
49307: PPUSH
49308: PPUSH
49309: PPUSH
// pom := GetBase ( fac ) ;
49310: LD_ADDR_VAR 0 5
49314: PUSH
49315: LD_VAR 0 1
49319: PPUSH
49320: CALL_OW 274
49324: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49325: LD_ADDR_VAR 0 4
49329: PUSH
49330: LD_VAR 0 2
49334: PUSH
49335: LD_INT 1
49337: ARRAY
49338: PPUSH
49339: LD_VAR 0 2
49343: PUSH
49344: LD_INT 2
49346: ARRAY
49347: PPUSH
49348: LD_VAR 0 2
49352: PUSH
49353: LD_INT 3
49355: ARRAY
49356: PPUSH
49357: LD_VAR 0 2
49361: PUSH
49362: LD_INT 4
49364: ARRAY
49365: PPUSH
49366: CALL_OW 449
49370: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49371: LD_ADDR_VAR 0 3
49375: PUSH
49376: LD_VAR 0 5
49380: PPUSH
49381: LD_INT 1
49383: PPUSH
49384: CALL_OW 275
49388: PUSH
49389: LD_VAR 0 4
49393: PUSH
49394: LD_INT 1
49396: ARRAY
49397: GREATEREQUAL
49398: PUSH
49399: LD_VAR 0 5
49403: PPUSH
49404: LD_INT 2
49406: PPUSH
49407: CALL_OW 275
49411: PUSH
49412: LD_VAR 0 4
49416: PUSH
49417: LD_INT 2
49419: ARRAY
49420: GREATEREQUAL
49421: AND
49422: PUSH
49423: LD_VAR 0 5
49427: PPUSH
49428: LD_INT 3
49430: PPUSH
49431: CALL_OW 275
49435: PUSH
49436: LD_VAR 0 4
49440: PUSH
49441: LD_INT 3
49443: ARRAY
49444: GREATEREQUAL
49445: AND
49446: ST_TO_ADDR
// end ;
49447: LD_VAR 0 3
49451: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49452: LD_INT 0
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
// pom := GetBase ( building ) ;
49458: LD_ADDR_VAR 0 3
49462: PUSH
49463: LD_VAR 0 1
49467: PPUSH
49468: CALL_OW 274
49472: ST_TO_ADDR
// if not pom then
49473: LD_VAR 0 3
49477: NOT
49478: IFFALSE 49482
// exit ;
49480: GO 49652
// btype := GetBType ( building ) ;
49482: LD_ADDR_VAR 0 5
49486: PUSH
49487: LD_VAR 0 1
49491: PPUSH
49492: CALL_OW 266
49496: ST_TO_ADDR
// if btype = b_armoury then
49497: LD_VAR 0 5
49501: PUSH
49502: LD_INT 4
49504: EQUAL
49505: IFFALSE 49515
// btype := b_barracks ;
49507: LD_ADDR_VAR 0 5
49511: PUSH
49512: LD_INT 5
49514: ST_TO_ADDR
// if btype = b_depot then
49515: LD_VAR 0 5
49519: PUSH
49520: LD_INT 0
49522: EQUAL
49523: IFFALSE 49533
// btype := b_warehouse ;
49525: LD_ADDR_VAR 0 5
49529: PUSH
49530: LD_INT 1
49532: ST_TO_ADDR
// if btype = b_workshop then
49533: LD_VAR 0 5
49537: PUSH
49538: LD_INT 2
49540: EQUAL
49541: IFFALSE 49551
// btype := b_factory ;
49543: LD_ADDR_VAR 0 5
49547: PUSH
49548: LD_INT 3
49550: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49551: LD_ADDR_VAR 0 4
49555: PUSH
49556: LD_VAR 0 5
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 248
49570: PPUSH
49571: CALL_OW 450
49575: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49576: LD_ADDR_VAR 0 2
49580: PUSH
49581: LD_VAR 0 3
49585: PPUSH
49586: LD_INT 1
49588: PPUSH
49589: CALL_OW 275
49593: PUSH
49594: LD_VAR 0 4
49598: PUSH
49599: LD_INT 1
49601: ARRAY
49602: GREATEREQUAL
49603: PUSH
49604: LD_VAR 0 3
49608: PPUSH
49609: LD_INT 2
49611: PPUSH
49612: CALL_OW 275
49616: PUSH
49617: LD_VAR 0 4
49621: PUSH
49622: LD_INT 2
49624: ARRAY
49625: GREATEREQUAL
49626: AND
49627: PUSH
49628: LD_VAR 0 3
49632: PPUSH
49633: LD_INT 3
49635: PPUSH
49636: CALL_OW 275
49640: PUSH
49641: LD_VAR 0 4
49645: PUSH
49646: LD_INT 3
49648: ARRAY
49649: GREATEREQUAL
49650: AND
49651: ST_TO_ADDR
// end ;
49652: LD_VAR 0 2
49656: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49657: LD_INT 0
49659: PPUSH
49660: PPUSH
49661: PPUSH
// pom := GetBase ( building ) ;
49662: LD_ADDR_VAR 0 4
49666: PUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: CALL_OW 274
49676: ST_TO_ADDR
// if not pom then
49677: LD_VAR 0 4
49681: NOT
49682: IFFALSE 49686
// exit ;
49684: GO 49787
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49686: LD_ADDR_VAR 0 5
49690: PUSH
49691: LD_VAR 0 2
49695: PPUSH
49696: LD_VAR 0 1
49700: PPUSH
49701: CALL_OW 248
49705: PPUSH
49706: CALL_OW 450
49710: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49711: LD_ADDR_VAR 0 3
49715: PUSH
49716: LD_VAR 0 4
49720: PPUSH
49721: LD_INT 1
49723: PPUSH
49724: CALL_OW 275
49728: PUSH
49729: LD_VAR 0 5
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: GREATEREQUAL
49738: PUSH
49739: LD_VAR 0 4
49743: PPUSH
49744: LD_INT 2
49746: PPUSH
49747: CALL_OW 275
49751: PUSH
49752: LD_VAR 0 5
49756: PUSH
49757: LD_INT 2
49759: ARRAY
49760: GREATEREQUAL
49761: AND
49762: PUSH
49763: LD_VAR 0 4
49767: PPUSH
49768: LD_INT 3
49770: PPUSH
49771: CALL_OW 275
49775: PUSH
49776: LD_VAR 0 5
49780: PUSH
49781: LD_INT 3
49783: ARRAY
49784: GREATEREQUAL
49785: AND
49786: ST_TO_ADDR
// end ;
49787: LD_VAR 0 3
49791: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49792: LD_INT 0
49794: PPUSH
49795: PPUSH
49796: PPUSH
49797: PPUSH
49798: PPUSH
49799: PPUSH
49800: PPUSH
49801: PPUSH
49802: PPUSH
49803: PPUSH
49804: PPUSH
// result := false ;
49805: LD_ADDR_VAR 0 8
49809: PUSH
49810: LD_INT 0
49812: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49813: LD_VAR 0 5
49817: NOT
49818: PUSH
49819: LD_VAR 0 1
49823: NOT
49824: OR
49825: PUSH
49826: LD_VAR 0 2
49830: NOT
49831: OR
49832: PUSH
49833: LD_VAR 0 3
49837: NOT
49838: OR
49839: IFFALSE 49843
// exit ;
49841: GO 50657
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49843: LD_ADDR_VAR 0 14
49847: PUSH
49848: LD_VAR 0 1
49852: PPUSH
49853: LD_VAR 0 2
49857: PPUSH
49858: LD_VAR 0 3
49862: PPUSH
49863: LD_VAR 0 4
49867: PPUSH
49868: LD_VAR 0 5
49872: PUSH
49873: LD_INT 1
49875: ARRAY
49876: PPUSH
49877: CALL_OW 248
49881: PPUSH
49882: LD_INT 0
49884: PPUSH
49885: CALL 51910 0 6
49889: ST_TO_ADDR
// if not hexes then
49890: LD_VAR 0 14
49894: NOT
49895: IFFALSE 49899
// exit ;
49897: GO 50657
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49899: LD_ADDR_VAR 0 17
49903: PUSH
49904: LD_VAR 0 5
49908: PPUSH
49909: LD_INT 22
49911: PUSH
49912: LD_VAR 0 13
49916: PPUSH
49917: CALL_OW 255
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 30
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 30
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PPUSH
49958: CALL_OW 72
49962: ST_TO_ADDR
// for i = 1 to hexes do
49963: LD_ADDR_VAR 0 9
49967: PUSH
49968: DOUBLE
49969: LD_INT 1
49971: DEC
49972: ST_TO_ADDR
49973: LD_VAR 0 14
49977: PUSH
49978: FOR_TO
49979: IFFALSE 50655
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49981: LD_ADDR_VAR 0 13
49985: PUSH
49986: LD_VAR 0 14
49990: PUSH
49991: LD_VAR 0 9
49995: ARRAY
49996: PUSH
49997: LD_INT 1
49999: ARRAY
50000: PPUSH
50001: LD_VAR 0 14
50005: PUSH
50006: LD_VAR 0 9
50010: ARRAY
50011: PUSH
50012: LD_INT 2
50014: ARRAY
50015: PPUSH
50016: CALL_OW 428
50020: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50021: LD_VAR 0 14
50025: PUSH
50026: LD_VAR 0 9
50030: ARRAY
50031: PUSH
50032: LD_INT 1
50034: ARRAY
50035: PPUSH
50036: LD_VAR 0 14
50040: PUSH
50041: LD_VAR 0 9
50045: ARRAY
50046: PUSH
50047: LD_INT 2
50049: ARRAY
50050: PPUSH
50051: CALL_OW 351
50055: PUSH
50056: LD_VAR 0 14
50060: PUSH
50061: LD_VAR 0 9
50065: ARRAY
50066: PUSH
50067: LD_INT 1
50069: ARRAY
50070: PPUSH
50071: LD_VAR 0 14
50075: PUSH
50076: LD_VAR 0 9
50080: ARRAY
50081: PUSH
50082: LD_INT 2
50084: ARRAY
50085: PPUSH
50086: CALL_OW 488
50090: NOT
50091: OR
50092: PUSH
50093: LD_VAR 0 13
50097: PPUSH
50098: CALL_OW 247
50102: PUSH
50103: LD_INT 3
50105: EQUAL
50106: OR
50107: IFFALSE 50113
// exit ;
50109: POP
50110: POP
50111: GO 50657
// if not tmp then
50113: LD_VAR 0 13
50117: NOT
50118: IFFALSE 50122
// continue ;
50120: GO 49978
// result := true ;
50122: LD_ADDR_VAR 0 8
50126: PUSH
50127: LD_INT 1
50129: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50130: LD_VAR 0 6
50134: PUSH
50135: LD_VAR 0 13
50139: PPUSH
50140: CALL_OW 247
50144: PUSH
50145: LD_INT 2
50147: EQUAL
50148: AND
50149: PUSH
50150: LD_VAR 0 13
50154: PPUSH
50155: CALL_OW 263
50159: PUSH
50160: LD_INT 1
50162: EQUAL
50163: AND
50164: IFFALSE 50328
// begin if IsDrivenBy ( tmp ) then
50166: LD_VAR 0 13
50170: PPUSH
50171: CALL_OW 311
50175: IFFALSE 50179
// continue ;
50177: GO 49978
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50179: LD_VAR 0 6
50183: PPUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 60
50189: PUSH
50190: EMPTY
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 55
50202: PUSH
50203: EMPTY
50204: LIST
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PPUSH
50214: CALL_OW 72
50218: IFFALSE 50326
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50220: LD_ADDR_VAR 0 18
50224: PUSH
50225: LD_VAR 0 6
50229: PPUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 60
50235: PUSH
50236: EMPTY
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: LD_INT 55
50248: PUSH
50249: EMPTY
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PPUSH
50260: CALL_OW 72
50264: PUSH
50265: LD_INT 1
50267: ARRAY
50268: ST_TO_ADDR
// if IsInUnit ( driver ) then
50269: LD_VAR 0 18
50273: PPUSH
50274: CALL_OW 310
50278: IFFALSE 50289
// ComExit ( driver ) ;
50280: LD_VAR 0 18
50284: PPUSH
50285: CALL 75689 0 1
// AddComEnterUnit ( driver , tmp ) ;
50289: LD_VAR 0 18
50293: PPUSH
50294: LD_VAR 0 13
50298: PPUSH
50299: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50303: LD_VAR 0 18
50307: PPUSH
50308: LD_VAR 0 7
50312: PPUSH
50313: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50317: LD_VAR 0 18
50321: PPUSH
50322: CALL_OW 181
// end ; continue ;
50326: GO 49978
// end ; if not cleaners or not tmp in cleaners then
50328: LD_VAR 0 6
50332: NOT
50333: PUSH
50334: LD_VAR 0 13
50338: PUSH
50339: LD_VAR 0 6
50343: IN
50344: NOT
50345: OR
50346: IFFALSE 50653
// begin if dep then
50348: LD_VAR 0 17
50352: IFFALSE 50488
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50354: LD_ADDR_VAR 0 16
50358: PUSH
50359: LD_VAR 0 17
50363: PUSH
50364: LD_INT 1
50366: ARRAY
50367: PPUSH
50368: CALL_OW 250
50372: PPUSH
50373: LD_VAR 0 17
50377: PUSH
50378: LD_INT 1
50380: ARRAY
50381: PPUSH
50382: CALL_OW 254
50386: PPUSH
50387: LD_INT 5
50389: PPUSH
50390: CALL_OW 272
50394: PUSH
50395: LD_VAR 0 17
50399: PUSH
50400: LD_INT 1
50402: ARRAY
50403: PPUSH
50404: CALL_OW 251
50408: PPUSH
50409: LD_VAR 0 17
50413: PUSH
50414: LD_INT 1
50416: ARRAY
50417: PPUSH
50418: CALL_OW 254
50422: PPUSH
50423: LD_INT 5
50425: PPUSH
50426: CALL_OW 273
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50435: LD_VAR 0 16
50439: PUSH
50440: LD_INT 1
50442: ARRAY
50443: PPUSH
50444: LD_VAR 0 16
50448: PUSH
50449: LD_INT 2
50451: ARRAY
50452: PPUSH
50453: CALL_OW 488
50457: IFFALSE 50488
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50459: LD_VAR 0 13
50463: PPUSH
50464: LD_VAR 0 16
50468: PUSH
50469: LD_INT 1
50471: ARRAY
50472: PPUSH
50473: LD_VAR 0 16
50477: PUSH
50478: LD_INT 2
50480: ARRAY
50481: PPUSH
50482: CALL_OW 111
// continue ;
50486: GO 49978
// end ; end ; r := GetDir ( tmp ) ;
50488: LD_ADDR_VAR 0 15
50492: PUSH
50493: LD_VAR 0 13
50497: PPUSH
50498: CALL_OW 254
50502: ST_TO_ADDR
// if r = 5 then
50503: LD_VAR 0 15
50507: PUSH
50508: LD_INT 5
50510: EQUAL
50511: IFFALSE 50521
// r := 0 ;
50513: LD_ADDR_VAR 0 15
50517: PUSH
50518: LD_INT 0
50520: ST_TO_ADDR
// for j = r to 5 do
50521: LD_ADDR_VAR 0 10
50525: PUSH
50526: DOUBLE
50527: LD_VAR 0 15
50531: DEC
50532: ST_TO_ADDR
50533: LD_INT 5
50535: PUSH
50536: FOR_TO
50537: IFFALSE 50651
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50539: LD_ADDR_VAR 0 11
50543: PUSH
50544: LD_VAR 0 13
50548: PPUSH
50549: CALL_OW 250
50553: PPUSH
50554: LD_VAR 0 10
50558: PPUSH
50559: LD_INT 2
50561: PPUSH
50562: CALL_OW 272
50566: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50567: LD_ADDR_VAR 0 12
50571: PUSH
50572: LD_VAR 0 13
50576: PPUSH
50577: CALL_OW 251
50581: PPUSH
50582: LD_VAR 0 10
50586: PPUSH
50587: LD_INT 2
50589: PPUSH
50590: CALL_OW 273
50594: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50595: LD_VAR 0 11
50599: PPUSH
50600: LD_VAR 0 12
50604: PPUSH
50605: CALL_OW 488
50609: PUSH
50610: LD_VAR 0 11
50614: PPUSH
50615: LD_VAR 0 12
50619: PPUSH
50620: CALL_OW 428
50624: NOT
50625: AND
50626: IFFALSE 50649
// begin ComMoveXY ( tmp , _x , _y ) ;
50628: LD_VAR 0 13
50632: PPUSH
50633: LD_VAR 0 11
50637: PPUSH
50638: LD_VAR 0 12
50642: PPUSH
50643: CALL_OW 111
// break ;
50647: GO 50651
// end ; end ;
50649: GO 50536
50651: POP
50652: POP
// end ; end ;
50653: GO 49978
50655: POP
50656: POP
// end ;
50657: LD_VAR 0 8
50661: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50662: LD_INT 0
50664: PPUSH
// result := true ;
50665: LD_ADDR_VAR 0 3
50669: PUSH
50670: LD_INT 1
50672: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50673: LD_VAR 0 2
50677: PUSH
50678: LD_INT 24
50680: DOUBLE
50681: EQUAL
50682: IFTRUE 50692
50684: LD_INT 33
50686: DOUBLE
50687: EQUAL
50688: IFTRUE 50692
50690: GO 50717
50692: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50693: LD_ADDR_VAR 0 3
50697: PUSH
50698: LD_INT 32
50700: PPUSH
50701: LD_VAR 0 1
50705: PPUSH
50706: CALL_OW 321
50710: PUSH
50711: LD_INT 2
50713: EQUAL
50714: ST_TO_ADDR
50715: GO 51033
50717: LD_INT 20
50719: DOUBLE
50720: EQUAL
50721: IFTRUE 50725
50723: GO 50750
50725: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: LD_INT 6
50733: PPUSH
50734: LD_VAR 0 1
50738: PPUSH
50739: CALL_OW 321
50743: PUSH
50744: LD_INT 2
50746: EQUAL
50747: ST_TO_ADDR
50748: GO 51033
50750: LD_INT 22
50752: DOUBLE
50753: EQUAL
50754: IFTRUE 50764
50756: LD_INT 36
50758: DOUBLE
50759: EQUAL
50760: IFTRUE 50764
50762: GO 50789
50764: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50765: LD_ADDR_VAR 0 3
50769: PUSH
50770: LD_INT 15
50772: PPUSH
50773: LD_VAR 0 1
50777: PPUSH
50778: CALL_OW 321
50782: PUSH
50783: LD_INT 2
50785: EQUAL
50786: ST_TO_ADDR
50787: GO 51033
50789: LD_INT 30
50791: DOUBLE
50792: EQUAL
50793: IFTRUE 50797
50795: GO 50822
50797: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50798: LD_ADDR_VAR 0 3
50802: PUSH
50803: LD_INT 20
50805: PPUSH
50806: LD_VAR 0 1
50810: PPUSH
50811: CALL_OW 321
50815: PUSH
50816: LD_INT 2
50818: EQUAL
50819: ST_TO_ADDR
50820: GO 51033
50822: LD_INT 28
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50836
50828: LD_INT 21
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50836
50834: GO 50861
50836: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50837: LD_ADDR_VAR 0 3
50841: PUSH
50842: LD_INT 21
50844: PPUSH
50845: LD_VAR 0 1
50849: PPUSH
50850: CALL_OW 321
50854: PUSH
50855: LD_INT 2
50857: EQUAL
50858: ST_TO_ADDR
50859: GO 51033
50861: LD_INT 16
50863: DOUBLE
50864: EQUAL
50865: IFTRUE 50869
50867: GO 50894
50869: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_INT 84
50877: PPUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 321
50887: PUSH
50888: LD_INT 2
50890: EQUAL
50891: ST_TO_ADDR
50892: GO 51033
50894: LD_INT 19
50896: DOUBLE
50897: EQUAL
50898: IFTRUE 50908
50900: LD_INT 23
50902: DOUBLE
50903: EQUAL
50904: IFTRUE 50908
50906: GO 50933
50908: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50909: LD_ADDR_VAR 0 3
50913: PUSH
50914: LD_INT 83
50916: PPUSH
50917: LD_VAR 0 1
50921: PPUSH
50922: CALL_OW 321
50926: PUSH
50927: LD_INT 2
50929: EQUAL
50930: ST_TO_ADDR
50931: GO 51033
50933: LD_INT 17
50935: DOUBLE
50936: EQUAL
50937: IFTRUE 50941
50939: GO 50966
50941: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50942: LD_ADDR_VAR 0 3
50946: PUSH
50947: LD_INT 39
50949: PPUSH
50950: LD_VAR 0 1
50954: PPUSH
50955: CALL_OW 321
50959: PUSH
50960: LD_INT 2
50962: EQUAL
50963: ST_TO_ADDR
50964: GO 51033
50966: LD_INT 18
50968: DOUBLE
50969: EQUAL
50970: IFTRUE 50974
50972: GO 50999
50974: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50975: LD_ADDR_VAR 0 3
50979: PUSH
50980: LD_INT 40
50982: PPUSH
50983: LD_VAR 0 1
50987: PPUSH
50988: CALL_OW 321
50992: PUSH
50993: LD_INT 2
50995: EQUAL
50996: ST_TO_ADDR
50997: GO 51033
50999: LD_INT 27
51001: DOUBLE
51002: EQUAL
51003: IFTRUE 51007
51005: GO 51032
51007: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51008: LD_ADDR_VAR 0 3
51012: PUSH
51013: LD_INT 35
51015: PPUSH
51016: LD_VAR 0 1
51020: PPUSH
51021: CALL_OW 321
51025: PUSH
51026: LD_INT 2
51028: EQUAL
51029: ST_TO_ADDR
51030: GO 51033
51032: POP
// end ;
51033: LD_VAR 0 3
51037: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51038: LD_INT 0
51040: PPUSH
51041: PPUSH
51042: PPUSH
51043: PPUSH
51044: PPUSH
51045: PPUSH
51046: PPUSH
51047: PPUSH
51048: PPUSH
51049: PPUSH
51050: PPUSH
// result := false ;
51051: LD_ADDR_VAR 0 6
51055: PUSH
51056: LD_INT 0
51058: ST_TO_ADDR
// if btype = b_depot then
51059: LD_VAR 0 2
51063: PUSH
51064: LD_INT 0
51066: EQUAL
51067: IFFALSE 51079
// begin result := true ;
51069: LD_ADDR_VAR 0 6
51073: PUSH
51074: LD_INT 1
51076: ST_TO_ADDR
// exit ;
51077: GO 51905
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51079: LD_VAR 0 1
51083: NOT
51084: PUSH
51085: LD_VAR 0 1
51089: PPUSH
51090: CALL_OW 266
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: IN
51105: NOT
51106: OR
51107: PUSH
51108: LD_VAR 0 2
51112: NOT
51113: OR
51114: PUSH
51115: LD_VAR 0 5
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: LD_INT 4
51134: PUSH
51135: LD_INT 5
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: IN
51146: NOT
51147: OR
51148: PUSH
51149: LD_VAR 0 3
51153: PPUSH
51154: LD_VAR 0 4
51158: PPUSH
51159: CALL_OW 488
51163: NOT
51164: OR
51165: IFFALSE 51169
// exit ;
51167: GO 51905
// side := GetSide ( depot ) ;
51169: LD_ADDR_VAR 0 9
51173: PUSH
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 255
51183: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51184: LD_VAR 0 9
51188: PPUSH
51189: LD_VAR 0 2
51193: PPUSH
51194: CALL 50662 0 2
51198: NOT
51199: IFFALSE 51203
// exit ;
51201: GO 51905
// pom := GetBase ( depot ) ;
51203: LD_ADDR_VAR 0 10
51207: PUSH
51208: LD_VAR 0 1
51212: PPUSH
51213: CALL_OW 274
51217: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51218: LD_ADDR_VAR 0 11
51222: PUSH
51223: LD_VAR 0 2
51227: PPUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL_OW 248
51237: PPUSH
51238: CALL_OW 450
51242: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51243: LD_VAR 0 10
51247: PPUSH
51248: LD_INT 1
51250: PPUSH
51251: CALL_OW 275
51255: PUSH
51256: LD_VAR 0 11
51260: PUSH
51261: LD_INT 1
51263: ARRAY
51264: GREATEREQUAL
51265: PUSH
51266: LD_VAR 0 10
51270: PPUSH
51271: LD_INT 2
51273: PPUSH
51274: CALL_OW 275
51278: PUSH
51279: LD_VAR 0 11
51283: PUSH
51284: LD_INT 2
51286: ARRAY
51287: GREATEREQUAL
51288: AND
51289: PUSH
51290: LD_VAR 0 10
51294: PPUSH
51295: LD_INT 3
51297: PPUSH
51298: CALL_OW 275
51302: PUSH
51303: LD_VAR 0 11
51307: PUSH
51308: LD_INT 3
51310: ARRAY
51311: GREATEREQUAL
51312: AND
51313: NOT
51314: IFFALSE 51318
// exit ;
51316: GO 51905
// if GetBType ( depot ) = b_depot then
51318: LD_VAR 0 1
51322: PPUSH
51323: CALL_OW 266
51327: PUSH
51328: LD_INT 0
51330: EQUAL
51331: IFFALSE 51343
// dist := 28 else
51333: LD_ADDR_VAR 0 14
51337: PUSH
51338: LD_INT 28
51340: ST_TO_ADDR
51341: GO 51351
// dist := 36 ;
51343: LD_ADDR_VAR 0 14
51347: PUSH
51348: LD_INT 36
51350: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51351: LD_VAR 0 1
51355: PPUSH
51356: LD_VAR 0 3
51360: PPUSH
51361: LD_VAR 0 4
51365: PPUSH
51366: CALL_OW 297
51370: PUSH
51371: LD_VAR 0 14
51375: GREATER
51376: IFFALSE 51380
// exit ;
51378: GO 51905
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51380: LD_ADDR_VAR 0 12
51384: PUSH
51385: LD_VAR 0 2
51389: PPUSH
51390: LD_VAR 0 3
51394: PPUSH
51395: LD_VAR 0 4
51399: PPUSH
51400: LD_VAR 0 5
51404: PPUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 248
51414: PPUSH
51415: LD_INT 0
51417: PPUSH
51418: CALL 51910 0 6
51422: ST_TO_ADDR
// if not hexes then
51423: LD_VAR 0 12
51427: NOT
51428: IFFALSE 51432
// exit ;
51430: GO 51905
// hex := GetHexInfo ( x , y ) ;
51432: LD_ADDR_VAR 0 15
51436: PUSH
51437: LD_VAR 0 3
51441: PPUSH
51442: LD_VAR 0 4
51446: PPUSH
51447: CALL_OW 546
51451: ST_TO_ADDR
// if hex [ 1 ] then
51452: LD_VAR 0 15
51456: PUSH
51457: LD_INT 1
51459: ARRAY
51460: IFFALSE 51464
// exit ;
51462: GO 51905
// height := hex [ 2 ] ;
51464: LD_ADDR_VAR 0 13
51468: PUSH
51469: LD_VAR 0 15
51473: PUSH
51474: LD_INT 2
51476: ARRAY
51477: ST_TO_ADDR
// for i = 1 to hexes do
51478: LD_ADDR_VAR 0 7
51482: PUSH
51483: DOUBLE
51484: LD_INT 1
51486: DEC
51487: ST_TO_ADDR
51488: LD_VAR 0 12
51492: PUSH
51493: FOR_TO
51494: IFFALSE 51824
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51496: LD_VAR 0 12
51500: PUSH
51501: LD_VAR 0 7
51505: ARRAY
51506: PUSH
51507: LD_INT 1
51509: ARRAY
51510: PPUSH
51511: LD_VAR 0 12
51515: PUSH
51516: LD_VAR 0 7
51520: ARRAY
51521: PUSH
51522: LD_INT 2
51524: ARRAY
51525: PPUSH
51526: CALL_OW 488
51530: NOT
51531: PUSH
51532: LD_VAR 0 12
51536: PUSH
51537: LD_VAR 0 7
51541: ARRAY
51542: PUSH
51543: LD_INT 1
51545: ARRAY
51546: PPUSH
51547: LD_VAR 0 12
51551: PUSH
51552: LD_VAR 0 7
51556: ARRAY
51557: PUSH
51558: LD_INT 2
51560: ARRAY
51561: PPUSH
51562: CALL_OW 428
51566: PUSH
51567: LD_INT 0
51569: GREATER
51570: OR
51571: PUSH
51572: LD_VAR 0 12
51576: PUSH
51577: LD_VAR 0 7
51581: ARRAY
51582: PUSH
51583: LD_INT 1
51585: ARRAY
51586: PPUSH
51587: LD_VAR 0 12
51591: PUSH
51592: LD_VAR 0 7
51596: ARRAY
51597: PUSH
51598: LD_INT 2
51600: ARRAY
51601: PPUSH
51602: CALL_OW 351
51606: OR
51607: IFFALSE 51613
// exit ;
51609: POP
51610: POP
51611: GO 51905
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51613: LD_ADDR_VAR 0 8
51617: PUSH
51618: LD_VAR 0 12
51622: PUSH
51623: LD_VAR 0 7
51627: ARRAY
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PPUSH
51633: LD_VAR 0 12
51637: PUSH
51638: LD_VAR 0 7
51642: ARRAY
51643: PUSH
51644: LD_INT 2
51646: ARRAY
51647: PPUSH
51648: CALL_OW 546
51652: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51653: LD_VAR 0 8
51657: PUSH
51658: LD_INT 1
51660: ARRAY
51661: PUSH
51662: LD_VAR 0 8
51666: PUSH
51667: LD_INT 2
51669: ARRAY
51670: PUSH
51671: LD_VAR 0 13
51675: PUSH
51676: LD_INT 2
51678: PLUS
51679: GREATER
51680: OR
51681: PUSH
51682: LD_VAR 0 8
51686: PUSH
51687: LD_INT 2
51689: ARRAY
51690: PUSH
51691: LD_VAR 0 13
51695: PUSH
51696: LD_INT 2
51698: MINUS
51699: LESS
51700: OR
51701: PUSH
51702: LD_VAR 0 8
51706: PUSH
51707: LD_INT 3
51709: ARRAY
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 8
51716: PUSH
51717: LD_INT 9
51719: PUSH
51720: LD_INT 10
51722: PUSH
51723: LD_INT 11
51725: PUSH
51726: LD_INT 12
51728: PUSH
51729: LD_INT 13
51731: PUSH
51732: LD_INT 16
51734: PUSH
51735: LD_INT 17
51737: PUSH
51738: LD_INT 18
51740: PUSH
51741: LD_INT 19
51743: PUSH
51744: LD_INT 20
51746: PUSH
51747: LD_INT 21
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: IN
51765: NOT
51766: OR
51767: PUSH
51768: LD_VAR 0 8
51772: PUSH
51773: LD_INT 5
51775: ARRAY
51776: NOT
51777: OR
51778: PUSH
51779: LD_VAR 0 8
51783: PUSH
51784: LD_INT 6
51786: ARRAY
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 7
51796: PUSH
51797: LD_INT 9
51799: PUSH
51800: LD_INT 10
51802: PUSH
51803: LD_INT 11
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: IN
51814: NOT
51815: OR
51816: IFFALSE 51822
// exit ;
51818: POP
51819: POP
51820: GO 51905
// end ;
51822: GO 51493
51824: POP
51825: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51826: LD_VAR 0 9
51830: PPUSH
51831: LD_VAR 0 3
51835: PPUSH
51836: LD_VAR 0 4
51840: PPUSH
51841: LD_INT 20
51843: PPUSH
51844: CALL 43828 0 4
51848: PUSH
51849: LD_INT 4
51851: ARRAY
51852: IFFALSE 51856
// exit ;
51854: GO 51905
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51856: LD_VAR 0 2
51860: PUSH
51861: LD_INT 29
51863: PUSH
51864: LD_INT 30
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: IN
51871: PUSH
51872: LD_VAR 0 3
51876: PPUSH
51877: LD_VAR 0 4
51881: PPUSH
51882: LD_VAR 0 9
51886: PPUSH
51887: CALL_OW 440
51891: NOT
51892: AND
51893: IFFALSE 51897
// exit ;
51895: GO 51905
// result := true ;
51897: LD_ADDR_VAR 0 6
51901: PUSH
51902: LD_INT 1
51904: ST_TO_ADDR
// end ;
51905: LD_VAR 0 6
51909: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51910: LD_INT 0
51912: PPUSH
51913: PPUSH
51914: PPUSH
51915: PPUSH
51916: PPUSH
51917: PPUSH
51918: PPUSH
51919: PPUSH
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
51926: PPUSH
51927: PPUSH
51928: PPUSH
51929: PPUSH
51930: PPUSH
51931: PPUSH
51932: PPUSH
51933: PPUSH
51934: PPUSH
51935: PPUSH
51936: PPUSH
51937: PPUSH
51938: PPUSH
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
// result = [ ] ;
51970: LD_ADDR_VAR 0 7
51974: PUSH
51975: EMPTY
51976: ST_TO_ADDR
// temp_list = [ ] ;
51977: LD_ADDR_VAR 0 9
51981: PUSH
51982: EMPTY
51983: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51984: LD_VAR 0 4
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 4
52003: PUSH
52004: LD_INT 5
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: IN
52015: NOT
52016: PUSH
52017: LD_VAR 0 1
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: IN
52032: PUSH
52033: LD_VAR 0 5
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: IN
52052: NOT
52053: AND
52054: OR
52055: IFFALSE 52059
// exit ;
52057: GO 70450
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52059: LD_VAR 0 1
52063: PUSH
52064: LD_INT 6
52066: PUSH
52067: LD_INT 7
52069: PUSH
52070: LD_INT 8
52072: PUSH
52073: LD_INT 13
52075: PUSH
52076: LD_INT 12
52078: PUSH
52079: LD_INT 15
52081: PUSH
52082: LD_INT 11
52084: PUSH
52085: LD_INT 14
52087: PUSH
52088: LD_INT 10
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: IN
52102: IFFALSE 52112
// btype = b_lab ;
52104: LD_ADDR_VAR 0 1
52108: PUSH
52109: LD_INT 6
52111: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52112: LD_VAR 0 6
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: IN
52131: NOT
52132: PUSH
52133: LD_VAR 0 1
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: LD_INT 6
52152: PUSH
52153: LD_INT 36
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: LD_INT 5
52161: PUSH
52162: LD_INT 31
52164: PUSH
52165: LD_INT 32
52167: PUSH
52168: LD_INT 33
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: IN
52184: NOT
52185: PUSH
52186: LD_VAR 0 6
52190: PUSH
52191: LD_INT 1
52193: EQUAL
52194: AND
52195: OR
52196: PUSH
52197: LD_VAR 0 1
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: IN
52212: NOT
52213: PUSH
52214: LD_VAR 0 6
52218: PUSH
52219: LD_INT 2
52221: EQUAL
52222: AND
52223: OR
52224: IFFALSE 52234
// mode = 0 ;
52226: LD_ADDR_VAR 0 6
52230: PUSH
52231: LD_INT 0
52233: ST_TO_ADDR
// case mode of 0 :
52234: LD_VAR 0 6
52238: PUSH
52239: LD_INT 0
52241: DOUBLE
52242: EQUAL
52243: IFTRUE 52247
52245: GO 63700
52247: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52248: LD_ADDR_VAR 0 11
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52441: LD_ADDR_VAR 0 12
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52637: LD_ADDR_VAR 0 13
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52836: LD_ADDR_VAR 0 14
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53032: LD_ADDR_VAR 0 15
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53225: LD_ADDR_VAR 0 16
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53418: LD_ADDR_VAR 0 17
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53648: LD_ADDR_VAR 0 18
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53878: LD_ADDR_VAR 0 19
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54108: LD_ADDR_VAR 0 20
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54338: LD_ADDR_VAR 0 21
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54568: LD_ADDR_VAR 0 22
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54798: LD_ADDR_VAR 0 23
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 3
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 3
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55078: LD_ADDR_VAR 0 24
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55354: LD_ADDR_VAR 0 25
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55628: LD_ADDR_VAR 0 26
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55904: LD_ADDR_VAR 0 27
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56184: LD_ADDR_VAR 0 28
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56466: LD_ADDR_VAR 0 29
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56745: LD_ADDR_VAR 0 30
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57023: LD_ADDR_VAR 0 31
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 3
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57301: LD_ADDR_VAR 0 32
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 3
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57579: LD_ADDR_VAR 0 33
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57858: LD_ADDR_VAR 0 34
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 2
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58138: LD_ADDR_VAR 0 35
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58250: LD_ADDR_VAR 0 36
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58362: LD_ADDR_VAR 0 37
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58474: LD_ADDR_VAR 0 38
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58586: LD_ADDR_VAR 0 39
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58698: LD_ADDR_VAR 0 40
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58810: LD_ADDR_VAR 0 41
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: LD_INT 3
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59160: LD_ADDR_VAR 0 42
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 3
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 3
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: NEG
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: LD_INT 3
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59510: LD_ADDR_VAR 0 43
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59858: LD_ADDR_VAR 0 44
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60208: LD_ADDR_VAR 0 45
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 3
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60558: LD_ADDR_VAR 0 46
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60906: LD_ADDR_VAR 0 47
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61057: LD_ADDR_VAR 0 48
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61204: LD_ADDR_VAR 0 49
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61348: LD_ADDR_VAR 0 50
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61492: LD_ADDR_VAR 0 51
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61639: LD_ADDR_VAR 0 52
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61790: LD_ADDR_VAR 0 53
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62020: LD_ADDR_VAR 0 54
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62250: LD_ADDR_VAR 0 55
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62480: LD_ADDR_VAR 0 56
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62710: LD_ADDR_VAR 0 57
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 2
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: NEG
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62940: LD_ADDR_VAR 0 58
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63170: LD_ADDR_VAR 0 59
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63258: LD_ADDR_VAR 0 60
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63346: LD_ADDR_VAR 0 61
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63434: LD_ADDR_VAR 0 62
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63522: LD_ADDR_VAR 0 63
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63610: LD_ADDR_VAR 0 64
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: ST_TO_ADDR
// end ; 1 :
63698: GO 69595
63700: LD_INT 1
63702: DOUBLE
63703: EQUAL
63704: IFTRUE 63708
63706: GO 66331
63708: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63709: LD_ADDR_VAR 0 11
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63753: LD_ADDR_VAR 0 12
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63794: LD_ADDR_VAR 0 13
63798: PUSH
63799: LD_INT 3
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: LIST
63833: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63834: LD_ADDR_VAR 0 14
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63875: LD_ADDR_VAR 0 15
63879: PUSH
63880: LD_INT 2
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 3
63893: NEG
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: LIST
63918: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63919: LD_ADDR_VAR 0 16
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63965: LD_ADDR_VAR 0 17
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 3
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64009: LD_ADDR_VAR 0 18
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64050: LD_ADDR_VAR 0 19
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64090: LD_ADDR_VAR 0 20
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64131: LD_ADDR_VAR 0 21
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 3
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64175: LD_ADDR_VAR 0 22
64179: PUSH
64180: LD_INT 2
64182: NEG
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: LD_INT 3
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64221: LD_ADDR_VAR 0 23
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 3
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 4
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64265: LD_ADDR_VAR 0 24
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64306: LD_ADDR_VAR 0 25
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 4
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: LD_INT 4
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64346: LD_ADDR_VAR 0 26
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 4
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: LIST
64386: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64387: LD_ADDR_VAR 0 27
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 3
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 4
64416: NEG
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64431: LD_ADDR_VAR 0 28
64435: PUSH
64436: LD_INT 3
64438: NEG
64439: PUSH
64440: LD_INT 3
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: LD_INT 4
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 4
64462: NEG
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64477: LD_ADDR_VAR 0 29
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: LD_INT 3
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 3
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: LD_INT 2
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 4
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 4
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 5
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 5
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 4
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: LD_INT 6
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 6
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: LD_INT 5
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64632: LD_ADDR_VAR 0 30
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 4
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 4
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 5
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 5
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 5
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 6
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 6
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64775: LD_ADDR_VAR 0 31
64779: PUSH
64780: LD_INT 3
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 2
64802: PUSH
64803: LD_INT 3
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 4
64812: PUSH
64813: LD_INT 3
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 4
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 5
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 5
64852: PUSH
64853: LD_INT 5
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: PUSH
64863: LD_INT 5
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 6
64872: PUSH
64873: LD_INT 5
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 6
64882: PUSH
64883: LD_INT 6
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 5
64892: PUSH
64893: LD_INT 6
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64914: LD_ADDR_VAR 0 32
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 4
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 4
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 5
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 5
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: LD_INT 6
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 6
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: LD_INT 5
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65057: LD_ADDR_VAR 0 33
65061: PUSH
65062: LD_INT 2
65064: NEG
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 3
65086: NEG
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 3
65098: NEG
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 4
65120: NEG
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 4
65132: NEG
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 5
65143: NEG
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 5
65166: NEG
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 6
65177: NEG
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 6
65188: NEG
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65212: LD_ADDR_VAR 0 34
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: LD_INT 3
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: NEG
65256: PUSH
65257: LD_INT 4
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 4
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 4
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 4
65291: NEG
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 5
65303: NEG
65304: PUSH
65305: LD_INT 4
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 5
65315: NEG
65316: PUSH
65317: LD_INT 5
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 5
65327: NEG
65328: PUSH
65329: LD_INT 6
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 6
65339: NEG
65340: PUSH
65341: LD_INT 5
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 6
65351: NEG
65352: PUSH
65353: LD_INT 6
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65375: LD_ADDR_VAR 0 41
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 2
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 2
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65419: LD_ADDR_VAR 0 42
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: LIST
65459: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65460: LD_ADDR_VAR 0 43
65464: PUSH
65465: LD_INT 2
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 3
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: LIST
65499: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65500: LD_ADDR_VAR 0 44
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 2
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: LIST
65540: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65541: LD_ADDR_VAR 0 45
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 3
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65585: LD_ADDR_VAR 0 46
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 3
65616: NEG
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65631: LD_ADDR_VAR 0 47
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65664: LD_ADDR_VAR 0 48
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65695: LD_ADDR_VAR 0 49
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65724: LD_ADDR_VAR 0 50
65728: PUSH
65729: LD_INT 2
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65753: LD_ADDR_VAR 0 51
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65784: LD_ADDR_VAR 0 52
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 3
65803: NEG
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65817: LD_ADDR_VAR 0 53
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: LD_INT 3
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 3
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65861: LD_ADDR_VAR 0 54
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65902: LD_ADDR_VAR 0 55
65906: PUSH
65907: LD_INT 3
65909: PUSH
65910: LD_INT 2
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 3
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65942: LD_ADDR_VAR 0 56
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65983: LD_ADDR_VAR 0 57
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 3
66001: NEG
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66027: LD_ADDR_VAR 0 58
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 3
66058: NEG
66059: PUSH
66060: LD_INT 3
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66073: LD_ADDR_VAR 0 59
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: LIST
66116: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66117: LD_ADDR_VAR 0 60
66121: PUSH
66122: LD_INT 1
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 2
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 2
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66158: LD_ADDR_VAR 0 61
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: LD_INT 2
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: LD_INT 2
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66198: LD_ADDR_VAR 0 62
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: LD_INT 2
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66239: LD_ADDR_VAR 0 63
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 2
66257: NEG
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: LD_INT 1
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66283: LD_ADDR_VAR 0 64
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: ST_TO_ADDR
// end ; 2 :
66329: GO 69595
66331: LD_INT 2
66333: DOUBLE
66334: EQUAL
66335: IFTRUE 66339
66337: GO 69594
66339: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66340: LD_ADDR_VAR 0 29
66344: PUSH
66345: LD_INT 4
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 4
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 5
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 5
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 5
66430: PUSH
66431: LD_INT 2
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 4
66470: PUSH
66471: LD_INT 4
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: LD_INT 4
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: LD_INT 3
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 4
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 4
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: LD_INT 4
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 3
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: LD_INT 4
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: LD_INT 5
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 5
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: LD_INT 4
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 2
66602: PUSH
66603: LD_INT 5
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 3
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 3
66668: NEG
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 4
66679: NEG
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 4
66690: NEG
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 4
66702: NEG
66703: PUSH
66704: LD_INT 2
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: LD_INT 4
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 4
66737: NEG
66738: PUSH
66739: LD_INT 5
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 3
66749: NEG
66750: PUSH
66751: LD_INT 4
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: LD_INT 3
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 4
66773: NEG
66774: PUSH
66775: LD_INT 3
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 5
66785: NEG
66786: PUSH
66787: LD_INT 4
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 5
66797: NEG
66798: PUSH
66799: LD_INT 5
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: LD_INT 5
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 5
66821: NEG
66822: PUSH
66823: LD_INT 3
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66878: LD_ADDR_VAR 0 30
66882: PUSH
66883: LD_INT 4
66885: PUSH
66886: LD_INT 4
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 4
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 5
66905: PUSH
66906: LD_INT 4
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 5
66915: PUSH
66916: LD_INT 5
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 4
66925: PUSH
66926: LD_INT 5
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: LD_INT 4
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: LD_INT 3
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 5
66955: PUSH
66956: LD_INT 3
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: LD_INT 5
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: LD_INT 3
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 2
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 4
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 4
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 3
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: LD_INT 4
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 2
67057: NEG
67058: PUSH
67059: LD_INT 2
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 4
67068: NEG
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 4
67079: NEG
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 4
67113: NEG
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 5
67124: NEG
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 5
67135: NEG
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 5
67147: NEG
67148: PUSH
67149: LD_INT 2
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: LD_INT 3
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: NEG
67183: PUSH
67184: LD_INT 4
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: NEG
67195: PUSH
67196: LD_INT 3
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: LD_INT 2
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 3
67218: NEG
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 4
67230: NEG
67231: PUSH
67232: LD_INT 3
67234: NEG
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 4
67242: NEG
67243: PUSH
67244: LD_INT 4
67246: NEG
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 2
67254: NEG
67255: PUSH
67256: LD_INT 4
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 4
67266: NEG
67267: PUSH
67268: LD_INT 2
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 4
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: LD_INT 5
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: PUSH
67301: LD_INT 4
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 3
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: LD_INT 3
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: NEG
67334: PUSH
67335: LD_INT 4
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: LD_INT 5
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 2
67357: PUSH
67358: LD_INT 3
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: NEG
67369: PUSH
67370: LD_INT 5
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67425: LD_ADDR_VAR 0 31
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 4
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: LD_INT 3
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 1
67452: PUSH
67453: LD_INT 4
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: LD_INT 5
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 5
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: LD_INT 4
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 5
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: NEG
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 3
67570: NEG
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 4
67581: NEG
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 4
67592: NEG
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 4
67604: NEG
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: NEG
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 4
67627: NEG
67628: PUSH
67629: LD_INT 4
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 4
67639: NEG
67640: PUSH
67641: LD_INT 5
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: LD_INT 4
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 3
67663: NEG
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 4
67675: NEG
67676: PUSH
67677: LD_INT 3
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 5
67687: NEG
67688: PUSH
67689: LD_INT 4
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 5
67699: NEG
67700: PUSH
67701: LD_INT 5
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 3
67711: NEG
67712: PUSH
67713: LD_INT 5
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 5
67723: NEG
67724: PUSH
67725: LD_INT 3
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: LD_INT 3
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: LD_INT 4
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: PUSH
67769: LD_INT 2
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: LD_INT 2
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 1
67790: NEG
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: LD_INT 4
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 2
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 2
67825: NEG
67826: PUSH
67827: LD_INT 4
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 4
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 5
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 5
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 4
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 5
67920: PUSH
67921: LD_INT 2
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67975: LD_ADDR_VAR 0 32
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 4
67993: NEG
67994: PUSH
67995: LD_INT 1
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 3
68016: NEG
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 4
68027: NEG
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 5
68038: NEG
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 5
68049: NEG
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 5
68061: NEG
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: NEG
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: LD_INT 4
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: NEG
68109: PUSH
68110: LD_INT 3
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: LD_INT 2
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 4
68144: NEG
68145: PUSH
68146: LD_INT 3
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 4
68156: NEG
68157: PUSH
68158: LD_INT 4
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 2
68168: NEG
68169: PUSH
68170: LD_INT 4
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 4
68180: NEG
68181: PUSH
68182: LD_INT 2
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: LD_INT 4
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 5
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: LD_INT 4
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: LD_INT 3
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: LD_INT 3
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: LD_INT 4
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: LD_INT 5
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: LD_INT 3
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: LD_INT 5
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 4
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 4
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 3
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 2
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: LD_INT 4
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 4
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: LD_INT 4
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: LD_INT 5
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: LD_INT 5
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 5
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 3
68467: PUSH
68468: LD_INT 5
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68522: LD_ADDR_VAR 0 33
68526: PUSH
68527: LD_INT 4
68529: NEG
68530: PUSH
68531: LD_INT 4
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 4
68541: NEG
68542: PUSH
68543: LD_INT 5
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: LD_INT 4
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 3
68565: NEG
68566: PUSH
68567: LD_INT 3
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 4
68577: NEG
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 5
68589: NEG
68590: PUSH
68591: LD_INT 4
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 5
68601: NEG
68602: PUSH
68603: LD_INT 5
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 3
68613: NEG
68614: PUSH
68615: LD_INT 5
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 5
68625: NEG
68626: PUSH
68627: LD_INT 3
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 3
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: LD_INT 4
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: PUSH
68660: LD_INT 3
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: LD_INT 2
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: LD_INT 2
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 2
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 2
68727: NEG
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 4
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: LD_INT 1
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 5
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 5
68770: PUSH
68771: LD_INT 1
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 4
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 3
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 3
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 5
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 4
68852: PUSH
68853: LD_INT 3
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 4
68862: PUSH
68863: LD_INT 4
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 2
68882: PUSH
68883: LD_INT 3
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 2
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 4
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_INT 4
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 1
68952: PUSH
68953: LD_INT 5
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: LD_INT 5
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: LD_INT 4
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 1
68983: NEG
68984: PUSH
68985: LD_INT 3
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 2
68994: PUSH
68995: LD_INT 5
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: LD_INT 3
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69060: LD_ADDR_VAR 0 34
69064: PUSH
69065: LD_INT 0
69067: PUSH
69068: LD_INT 4
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: LD_INT 5
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 1
69089: PUSH
69090: LD_INT 4
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: LD_INT 3
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: LD_INT 3
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: PUSH
69124: LD_INT 4
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: LD_INT 5
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 2
69146: PUSH
69147: LD_INT 3
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: LD_INT 5
69161: NEG
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 3
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 3
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 4
69190: PUSH
69191: LD_INT 0
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 4
69200: PUSH
69201: LD_INT 1
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 3
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 2
69230: PUSH
69231: LD_INT 1
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: LD_INT 2
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 4
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: LD_INT 4
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 5
69282: PUSH
69283: LD_INT 4
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 5
69292: PUSH
69293: LD_INT 5
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 4
69302: PUSH
69303: LD_INT 5
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: PUSH
69313: LD_INT 4
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 5
69332: PUSH
69333: LD_INT 3
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: LD_INT 5
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: LD_INT 3
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 1
69372: PUSH
69373: LD_INT 3
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: PUSH
69383: LD_INT 4
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: LD_INT 4
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 1
69402: NEG
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 2
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 2
69434: NEG
69435: PUSH
69436: LD_INT 2
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 4
69445: NEG
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 4
69456: NEG
69457: PUSH
69458: LD_INT 1
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 3
69468: NEG
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 3
69479: NEG
69480: PUSH
69481: LD_INT 1
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 4
69490: NEG
69491: PUSH
69492: LD_INT 1
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 5
69501: NEG
69502: PUSH
69503: LD_INT 0
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 5
69512: NEG
69513: PUSH
69514: LD_INT 1
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 5
69524: NEG
69525: PUSH
69526: LD_INT 2
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: NEG
69537: PUSH
69538: LD_INT 2
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: ST_TO_ADDR
// end ; end ;
69592: GO 69595
69594: POP
// case btype of b_depot , b_warehouse :
69595: LD_VAR 0 1
69599: PUSH
69600: LD_INT 0
69602: DOUBLE
69603: EQUAL
69604: IFTRUE 69614
69606: LD_INT 1
69608: DOUBLE
69609: EQUAL
69610: IFTRUE 69614
69612: GO 69815
69614: POP
// case nation of nation_american :
69615: LD_VAR 0 5
69619: PUSH
69620: LD_INT 1
69622: DOUBLE
69623: EQUAL
69624: IFTRUE 69628
69626: GO 69684
69628: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69629: LD_ADDR_VAR 0 9
69633: PUSH
69634: LD_VAR 0 11
69638: PUSH
69639: LD_VAR 0 12
69643: PUSH
69644: LD_VAR 0 13
69648: PUSH
69649: LD_VAR 0 14
69653: PUSH
69654: LD_VAR 0 15
69658: PUSH
69659: LD_VAR 0 16
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: PUSH
69672: LD_VAR 0 4
69676: PUSH
69677: LD_INT 1
69679: PLUS
69680: ARRAY
69681: ST_TO_ADDR
69682: GO 69813
69684: LD_INT 2
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69692
69690: GO 69748
69692: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69693: LD_ADDR_VAR 0 9
69697: PUSH
69698: LD_VAR 0 17
69702: PUSH
69703: LD_VAR 0 18
69707: PUSH
69708: LD_VAR 0 19
69712: PUSH
69713: LD_VAR 0 20
69717: PUSH
69718: LD_VAR 0 21
69722: PUSH
69723: LD_VAR 0 22
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: PUSH
69736: LD_VAR 0 4
69740: PUSH
69741: LD_INT 1
69743: PLUS
69744: ARRAY
69745: ST_TO_ADDR
69746: GO 69813
69748: LD_INT 3
69750: DOUBLE
69751: EQUAL
69752: IFTRUE 69756
69754: GO 69812
69756: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69757: LD_ADDR_VAR 0 9
69761: PUSH
69762: LD_VAR 0 23
69766: PUSH
69767: LD_VAR 0 24
69771: PUSH
69772: LD_VAR 0 25
69776: PUSH
69777: LD_VAR 0 26
69781: PUSH
69782: LD_VAR 0 27
69786: PUSH
69787: LD_VAR 0 28
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: PUSH
69800: LD_VAR 0 4
69804: PUSH
69805: LD_INT 1
69807: PLUS
69808: ARRAY
69809: ST_TO_ADDR
69810: GO 69813
69812: POP
69813: GO 70368
69815: LD_INT 2
69817: DOUBLE
69818: EQUAL
69819: IFTRUE 69829
69821: LD_INT 3
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69829
69827: GO 69885
69829: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69830: LD_ADDR_VAR 0 9
69834: PUSH
69835: LD_VAR 0 29
69839: PUSH
69840: LD_VAR 0 30
69844: PUSH
69845: LD_VAR 0 31
69849: PUSH
69850: LD_VAR 0 32
69854: PUSH
69855: LD_VAR 0 33
69859: PUSH
69860: LD_VAR 0 34
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: PUSH
69873: LD_VAR 0 4
69877: PUSH
69878: LD_INT 1
69880: PLUS
69881: ARRAY
69882: ST_TO_ADDR
69883: GO 70368
69885: LD_INT 16
69887: DOUBLE
69888: EQUAL
69889: IFTRUE 69947
69891: LD_INT 17
69893: DOUBLE
69894: EQUAL
69895: IFTRUE 69947
69897: LD_INT 18
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69947
69903: LD_INT 19
69905: DOUBLE
69906: EQUAL
69907: IFTRUE 69947
69909: LD_INT 22
69911: DOUBLE
69912: EQUAL
69913: IFTRUE 69947
69915: LD_INT 20
69917: DOUBLE
69918: EQUAL
69919: IFTRUE 69947
69921: LD_INT 21
69923: DOUBLE
69924: EQUAL
69925: IFTRUE 69947
69927: LD_INT 23
69929: DOUBLE
69930: EQUAL
69931: IFTRUE 69947
69933: LD_INT 24
69935: DOUBLE
69936: EQUAL
69937: IFTRUE 69947
69939: LD_INT 25
69941: DOUBLE
69942: EQUAL
69943: IFTRUE 69947
69945: GO 70003
69947: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69948: LD_ADDR_VAR 0 9
69952: PUSH
69953: LD_VAR 0 35
69957: PUSH
69958: LD_VAR 0 36
69962: PUSH
69963: LD_VAR 0 37
69967: PUSH
69968: LD_VAR 0 38
69972: PUSH
69973: LD_VAR 0 39
69977: PUSH
69978: LD_VAR 0 40
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: PUSH
69991: LD_VAR 0 4
69995: PUSH
69996: LD_INT 1
69998: PLUS
69999: ARRAY
70000: ST_TO_ADDR
70001: GO 70368
70003: LD_INT 6
70005: DOUBLE
70006: EQUAL
70007: IFTRUE 70059
70009: LD_INT 7
70011: DOUBLE
70012: EQUAL
70013: IFTRUE 70059
70015: LD_INT 8
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70059
70021: LD_INT 13
70023: DOUBLE
70024: EQUAL
70025: IFTRUE 70059
70027: LD_INT 12
70029: DOUBLE
70030: EQUAL
70031: IFTRUE 70059
70033: LD_INT 15
70035: DOUBLE
70036: EQUAL
70037: IFTRUE 70059
70039: LD_INT 11
70041: DOUBLE
70042: EQUAL
70043: IFTRUE 70059
70045: LD_INT 14
70047: DOUBLE
70048: EQUAL
70049: IFTRUE 70059
70051: LD_INT 10
70053: DOUBLE
70054: EQUAL
70055: IFTRUE 70059
70057: GO 70115
70059: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70060: LD_ADDR_VAR 0 9
70064: PUSH
70065: LD_VAR 0 41
70069: PUSH
70070: LD_VAR 0 42
70074: PUSH
70075: LD_VAR 0 43
70079: PUSH
70080: LD_VAR 0 44
70084: PUSH
70085: LD_VAR 0 45
70089: PUSH
70090: LD_VAR 0 46
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: PUSH
70103: LD_VAR 0 4
70107: PUSH
70108: LD_INT 1
70110: PLUS
70111: ARRAY
70112: ST_TO_ADDR
70113: GO 70368
70115: LD_INT 36
70117: DOUBLE
70118: EQUAL
70119: IFTRUE 70123
70121: GO 70179
70123: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70124: LD_ADDR_VAR 0 9
70128: PUSH
70129: LD_VAR 0 47
70133: PUSH
70134: LD_VAR 0 48
70138: PUSH
70139: LD_VAR 0 49
70143: PUSH
70144: LD_VAR 0 50
70148: PUSH
70149: LD_VAR 0 51
70153: PUSH
70154: LD_VAR 0 52
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: PUSH
70167: LD_VAR 0 4
70171: PUSH
70172: LD_INT 1
70174: PLUS
70175: ARRAY
70176: ST_TO_ADDR
70177: GO 70368
70179: LD_INT 4
70181: DOUBLE
70182: EQUAL
70183: IFTRUE 70205
70185: LD_INT 5
70187: DOUBLE
70188: EQUAL
70189: IFTRUE 70205
70191: LD_INT 34
70193: DOUBLE
70194: EQUAL
70195: IFTRUE 70205
70197: LD_INT 37
70199: DOUBLE
70200: EQUAL
70201: IFTRUE 70205
70203: GO 70261
70205: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70206: LD_ADDR_VAR 0 9
70210: PUSH
70211: LD_VAR 0 53
70215: PUSH
70216: LD_VAR 0 54
70220: PUSH
70221: LD_VAR 0 55
70225: PUSH
70226: LD_VAR 0 56
70230: PUSH
70231: LD_VAR 0 57
70235: PUSH
70236: LD_VAR 0 58
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: PUSH
70249: LD_VAR 0 4
70253: PUSH
70254: LD_INT 1
70256: PLUS
70257: ARRAY
70258: ST_TO_ADDR
70259: GO 70368
70261: LD_INT 31
70263: DOUBLE
70264: EQUAL
70265: IFTRUE 70311
70267: LD_INT 32
70269: DOUBLE
70270: EQUAL
70271: IFTRUE 70311
70273: LD_INT 33
70275: DOUBLE
70276: EQUAL
70277: IFTRUE 70311
70279: LD_INT 27
70281: DOUBLE
70282: EQUAL
70283: IFTRUE 70311
70285: LD_INT 26
70287: DOUBLE
70288: EQUAL
70289: IFTRUE 70311
70291: LD_INT 28
70293: DOUBLE
70294: EQUAL
70295: IFTRUE 70311
70297: LD_INT 29
70299: DOUBLE
70300: EQUAL
70301: IFTRUE 70311
70303: LD_INT 30
70305: DOUBLE
70306: EQUAL
70307: IFTRUE 70311
70309: GO 70367
70311: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70312: LD_ADDR_VAR 0 9
70316: PUSH
70317: LD_VAR 0 59
70321: PUSH
70322: LD_VAR 0 60
70326: PUSH
70327: LD_VAR 0 61
70331: PUSH
70332: LD_VAR 0 62
70336: PUSH
70337: LD_VAR 0 63
70341: PUSH
70342: LD_VAR 0 64
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: PUSH
70355: LD_VAR 0 4
70359: PUSH
70360: LD_INT 1
70362: PLUS
70363: ARRAY
70364: ST_TO_ADDR
70365: GO 70368
70367: POP
// temp_list2 = [ ] ;
70368: LD_ADDR_VAR 0 10
70372: PUSH
70373: EMPTY
70374: ST_TO_ADDR
// for i in temp_list do
70375: LD_ADDR_VAR 0 8
70379: PUSH
70380: LD_VAR 0 9
70384: PUSH
70385: FOR_IN
70386: IFFALSE 70438
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70388: LD_ADDR_VAR 0 10
70392: PUSH
70393: LD_VAR 0 10
70397: PUSH
70398: LD_VAR 0 8
70402: PUSH
70403: LD_INT 1
70405: ARRAY
70406: PUSH
70407: LD_VAR 0 2
70411: PLUS
70412: PUSH
70413: LD_VAR 0 8
70417: PUSH
70418: LD_INT 2
70420: ARRAY
70421: PUSH
70422: LD_VAR 0 3
70426: PLUS
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: EMPTY
70433: LIST
70434: ADD
70435: ST_TO_ADDR
70436: GO 70385
70438: POP
70439: POP
// result = temp_list2 ;
70440: LD_ADDR_VAR 0 7
70444: PUSH
70445: LD_VAR 0 10
70449: ST_TO_ADDR
// end ;
70450: LD_VAR 0 7
70454: RET
// export function EnemyInRange ( unit , dist ) ; begin
70455: LD_INT 0
70457: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70458: LD_ADDR_VAR 0 3
70462: PUSH
70463: LD_VAR 0 1
70467: PPUSH
70468: CALL_OW 255
70472: PPUSH
70473: LD_VAR 0 1
70477: PPUSH
70478: CALL_OW 250
70482: PPUSH
70483: LD_VAR 0 1
70487: PPUSH
70488: CALL_OW 251
70492: PPUSH
70493: LD_VAR 0 2
70497: PPUSH
70498: CALL 43828 0 4
70502: PUSH
70503: LD_INT 4
70505: ARRAY
70506: ST_TO_ADDR
// end ;
70507: LD_VAR 0 3
70511: RET
// export function PlayerSeeMe ( unit ) ; begin
70512: LD_INT 0
70514: PPUSH
// result := See ( your_side , unit ) ;
70515: LD_ADDR_VAR 0 2
70519: PUSH
70520: LD_OWVAR 2
70524: PPUSH
70525: LD_VAR 0 1
70529: PPUSH
70530: CALL_OW 292
70534: ST_TO_ADDR
// end ;
70535: LD_VAR 0 2
70539: RET
// export function ReverseDir ( unit ) ; begin
70540: LD_INT 0
70542: PPUSH
// if not unit then
70543: LD_VAR 0 1
70547: NOT
70548: IFFALSE 70552
// exit ;
70550: GO 70575
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70552: LD_ADDR_VAR 0 2
70556: PUSH
70557: LD_VAR 0 1
70561: PPUSH
70562: CALL_OW 254
70566: PUSH
70567: LD_INT 3
70569: PLUS
70570: PUSH
70571: LD_INT 6
70573: MOD
70574: ST_TO_ADDR
// end ;
70575: LD_VAR 0 2
70579: RET
// export function ReverseArray ( array ) ; var i ; begin
70580: LD_INT 0
70582: PPUSH
70583: PPUSH
// if not array then
70584: LD_VAR 0 1
70588: NOT
70589: IFFALSE 70593
// exit ;
70591: GO 70648
// result := [ ] ;
70593: LD_ADDR_VAR 0 2
70597: PUSH
70598: EMPTY
70599: ST_TO_ADDR
// for i := array downto 1 do
70600: LD_ADDR_VAR 0 3
70604: PUSH
70605: DOUBLE
70606: LD_VAR 0 1
70610: INC
70611: ST_TO_ADDR
70612: LD_INT 1
70614: PUSH
70615: FOR_DOWNTO
70616: IFFALSE 70646
// result := Join ( result , array [ i ] ) ;
70618: LD_ADDR_VAR 0 2
70622: PUSH
70623: LD_VAR 0 2
70627: PPUSH
70628: LD_VAR 0 1
70632: PUSH
70633: LD_VAR 0 3
70637: ARRAY
70638: PPUSH
70639: CALL 75291 0 2
70643: ST_TO_ADDR
70644: GO 70615
70646: POP
70647: POP
// end ;
70648: LD_VAR 0 2
70652: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70653: LD_INT 0
70655: PPUSH
70656: PPUSH
70657: PPUSH
70658: PPUSH
70659: PPUSH
70660: PPUSH
// if not unit or not hexes then
70661: LD_VAR 0 1
70665: NOT
70666: PUSH
70667: LD_VAR 0 2
70671: NOT
70672: OR
70673: IFFALSE 70677
// exit ;
70675: GO 70800
// dist := 9999 ;
70677: LD_ADDR_VAR 0 5
70681: PUSH
70682: LD_INT 9999
70684: ST_TO_ADDR
// for i = 1 to hexes do
70685: LD_ADDR_VAR 0 4
70689: PUSH
70690: DOUBLE
70691: LD_INT 1
70693: DEC
70694: ST_TO_ADDR
70695: LD_VAR 0 2
70699: PUSH
70700: FOR_TO
70701: IFFALSE 70788
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70703: LD_ADDR_VAR 0 6
70707: PUSH
70708: LD_VAR 0 1
70712: PPUSH
70713: LD_VAR 0 2
70717: PUSH
70718: LD_VAR 0 4
70722: ARRAY
70723: PUSH
70724: LD_INT 1
70726: ARRAY
70727: PPUSH
70728: LD_VAR 0 2
70732: PUSH
70733: LD_VAR 0 4
70737: ARRAY
70738: PUSH
70739: LD_INT 2
70741: ARRAY
70742: PPUSH
70743: CALL_OW 297
70747: ST_TO_ADDR
// if tdist < dist then
70748: LD_VAR 0 6
70752: PUSH
70753: LD_VAR 0 5
70757: LESS
70758: IFFALSE 70786
// begin hex := hexes [ i ] ;
70760: LD_ADDR_VAR 0 8
70764: PUSH
70765: LD_VAR 0 2
70769: PUSH
70770: LD_VAR 0 4
70774: ARRAY
70775: ST_TO_ADDR
// dist := tdist ;
70776: LD_ADDR_VAR 0 5
70780: PUSH
70781: LD_VAR 0 6
70785: ST_TO_ADDR
// end ; end ;
70786: GO 70700
70788: POP
70789: POP
// result := hex ;
70790: LD_ADDR_VAR 0 3
70794: PUSH
70795: LD_VAR 0 8
70799: ST_TO_ADDR
// end ;
70800: LD_VAR 0 3
70804: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70805: LD_INT 0
70807: PPUSH
70808: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70809: LD_VAR 0 1
70813: NOT
70814: PUSH
70815: LD_VAR 0 1
70819: PUSH
70820: LD_INT 21
70822: PUSH
70823: LD_INT 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 23
70832: PUSH
70833: LD_INT 2
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PPUSH
70844: CALL_OW 69
70848: IN
70849: NOT
70850: OR
70851: IFFALSE 70855
// exit ;
70853: GO 70902
// for i = 1 to 3 do
70855: LD_ADDR_VAR 0 3
70859: PUSH
70860: DOUBLE
70861: LD_INT 1
70863: DEC
70864: ST_TO_ADDR
70865: LD_INT 3
70867: PUSH
70868: FOR_TO
70869: IFFALSE 70900
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70871: LD_VAR 0 1
70875: PPUSH
70876: CALL_OW 250
70880: PPUSH
70881: LD_VAR 0 1
70885: PPUSH
70886: CALL_OW 251
70890: PPUSH
70891: LD_INT 1
70893: PPUSH
70894: CALL_OW 453
70898: GO 70868
70900: POP
70901: POP
// end ;
70902: LD_VAR 0 2
70906: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70907: LD_INT 0
70909: PPUSH
70910: PPUSH
70911: PPUSH
70912: PPUSH
70913: PPUSH
70914: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70915: LD_VAR 0 1
70919: NOT
70920: PUSH
70921: LD_VAR 0 2
70925: NOT
70926: OR
70927: PUSH
70928: LD_VAR 0 1
70932: PPUSH
70933: CALL_OW 314
70937: OR
70938: IFFALSE 70942
// exit ;
70940: GO 71409
// if GetLives ( i ) < 250 then
70942: LD_VAR 0 4
70946: PPUSH
70947: CALL_OW 256
70951: PUSH
70952: LD_INT 250
70954: LESS
70955: IFFALSE 70968
// begin ComAutodestruct ( i ) ;
70957: LD_VAR 0 4
70961: PPUSH
70962: CALL 70805 0 1
// exit ;
70966: GO 71409
// end ; x := GetX ( enemy_unit ) ;
70968: LD_ADDR_VAR 0 7
70972: PUSH
70973: LD_VAR 0 2
70977: PPUSH
70978: CALL_OW 250
70982: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70983: LD_ADDR_VAR 0 8
70987: PUSH
70988: LD_VAR 0 2
70992: PPUSH
70993: CALL_OW 251
70997: ST_TO_ADDR
// if not x or not y then
70998: LD_VAR 0 7
71002: NOT
71003: PUSH
71004: LD_VAR 0 8
71008: NOT
71009: OR
71010: IFFALSE 71014
// exit ;
71012: GO 71409
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71014: LD_ADDR_VAR 0 6
71018: PUSH
71019: LD_VAR 0 7
71023: PPUSH
71024: LD_INT 0
71026: PPUSH
71027: LD_INT 4
71029: PPUSH
71030: CALL_OW 272
71034: PUSH
71035: LD_VAR 0 8
71039: PPUSH
71040: LD_INT 0
71042: PPUSH
71043: LD_INT 4
71045: PPUSH
71046: CALL_OW 273
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_VAR 0 7
71059: PPUSH
71060: LD_INT 1
71062: PPUSH
71063: LD_INT 4
71065: PPUSH
71066: CALL_OW 272
71070: PUSH
71071: LD_VAR 0 8
71075: PPUSH
71076: LD_INT 1
71078: PPUSH
71079: LD_INT 4
71081: PPUSH
71082: CALL_OW 273
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_VAR 0 7
71095: PPUSH
71096: LD_INT 2
71098: PPUSH
71099: LD_INT 4
71101: PPUSH
71102: CALL_OW 272
71106: PUSH
71107: LD_VAR 0 8
71111: PPUSH
71112: LD_INT 2
71114: PPUSH
71115: LD_INT 4
71117: PPUSH
71118: CALL_OW 273
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_VAR 0 7
71131: PPUSH
71132: LD_INT 3
71134: PPUSH
71135: LD_INT 4
71137: PPUSH
71138: CALL_OW 272
71142: PUSH
71143: LD_VAR 0 8
71147: PPUSH
71148: LD_INT 3
71150: PPUSH
71151: LD_INT 4
71153: PPUSH
71154: CALL_OW 273
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_VAR 0 7
71167: PPUSH
71168: LD_INT 4
71170: PPUSH
71171: LD_INT 4
71173: PPUSH
71174: CALL_OW 272
71178: PUSH
71179: LD_VAR 0 8
71183: PPUSH
71184: LD_INT 4
71186: PPUSH
71187: LD_INT 4
71189: PPUSH
71190: CALL_OW 273
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_VAR 0 7
71203: PPUSH
71204: LD_INT 5
71206: PPUSH
71207: LD_INT 4
71209: PPUSH
71210: CALL_OW 272
71214: PUSH
71215: LD_VAR 0 8
71219: PPUSH
71220: LD_INT 5
71222: PPUSH
71223: LD_INT 4
71225: PPUSH
71226: CALL_OW 273
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: ST_TO_ADDR
// for i = tmp downto 1 do
71243: LD_ADDR_VAR 0 4
71247: PUSH
71248: DOUBLE
71249: LD_VAR 0 6
71253: INC
71254: ST_TO_ADDR
71255: LD_INT 1
71257: PUSH
71258: FOR_DOWNTO
71259: IFFALSE 71360
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71261: LD_VAR 0 6
71265: PUSH
71266: LD_VAR 0 4
71270: ARRAY
71271: PUSH
71272: LD_INT 1
71274: ARRAY
71275: PPUSH
71276: LD_VAR 0 6
71280: PUSH
71281: LD_VAR 0 4
71285: ARRAY
71286: PUSH
71287: LD_INT 2
71289: ARRAY
71290: PPUSH
71291: CALL_OW 488
71295: NOT
71296: PUSH
71297: LD_VAR 0 6
71301: PUSH
71302: LD_VAR 0 4
71306: ARRAY
71307: PUSH
71308: LD_INT 1
71310: ARRAY
71311: PPUSH
71312: LD_VAR 0 6
71316: PUSH
71317: LD_VAR 0 4
71321: ARRAY
71322: PUSH
71323: LD_INT 2
71325: ARRAY
71326: PPUSH
71327: CALL_OW 428
71331: PUSH
71332: LD_INT 0
71334: NONEQUAL
71335: OR
71336: IFFALSE 71358
// tmp := Delete ( tmp , i ) ;
71338: LD_ADDR_VAR 0 6
71342: PUSH
71343: LD_VAR 0 6
71347: PPUSH
71348: LD_VAR 0 4
71352: PPUSH
71353: CALL_OW 3
71357: ST_TO_ADDR
71358: GO 71258
71360: POP
71361: POP
// j := GetClosestHex ( unit , tmp ) ;
71362: LD_ADDR_VAR 0 5
71366: PUSH
71367: LD_VAR 0 1
71371: PPUSH
71372: LD_VAR 0 6
71376: PPUSH
71377: CALL 70653 0 2
71381: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71382: LD_VAR 0 1
71386: PPUSH
71387: LD_VAR 0 5
71391: PUSH
71392: LD_INT 1
71394: ARRAY
71395: PPUSH
71396: LD_VAR 0 5
71400: PUSH
71401: LD_INT 2
71403: ARRAY
71404: PPUSH
71405: CALL_OW 111
// end ;
71409: LD_VAR 0 3
71413: RET
// export function PrepareApemanSoldier ( ) ; begin
71414: LD_INT 0
71416: PPUSH
// uc_nation := 0 ;
71417: LD_ADDR_OWVAR 21
71421: PUSH
71422: LD_INT 0
71424: ST_TO_ADDR
// hc_sex := sex_male ;
71425: LD_ADDR_OWVAR 27
71429: PUSH
71430: LD_INT 1
71432: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71433: LD_ADDR_OWVAR 28
71437: PUSH
71438: LD_INT 15
71440: ST_TO_ADDR
// hc_gallery :=  ;
71441: LD_ADDR_OWVAR 33
71445: PUSH
71446: LD_STRING 
71448: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71449: LD_ADDR_OWVAR 31
71453: PUSH
71454: LD_INT 0
71456: PPUSH
71457: LD_INT 3
71459: PPUSH
71460: CALL_OW 12
71464: PUSH
71465: LD_INT 0
71467: PPUSH
71468: LD_INT 3
71470: PPUSH
71471: CALL_OW 12
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: ST_TO_ADDR
// end ;
71488: LD_VAR 0 1
71492: RET
// export function PrepareApemanEngineer ( ) ; begin
71493: LD_INT 0
71495: PPUSH
// uc_nation := 0 ;
71496: LD_ADDR_OWVAR 21
71500: PUSH
71501: LD_INT 0
71503: ST_TO_ADDR
// hc_sex := sex_male ;
71504: LD_ADDR_OWVAR 27
71508: PUSH
71509: LD_INT 1
71511: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71512: LD_ADDR_OWVAR 28
71516: PUSH
71517: LD_INT 16
71519: ST_TO_ADDR
// hc_gallery :=  ;
71520: LD_ADDR_OWVAR 33
71524: PUSH
71525: LD_STRING 
71527: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71528: LD_ADDR_OWVAR 31
71532: PUSH
71533: LD_INT 0
71535: PPUSH
71536: LD_INT 3
71538: PPUSH
71539: CALL_OW 12
71543: PUSH
71544: LD_INT 0
71546: PPUSH
71547: LD_INT 3
71549: PPUSH
71550: CALL_OW 12
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: ST_TO_ADDR
// end ;
71567: LD_VAR 0 1
71571: RET
// export function PrepareApeman ( agressivity ) ; begin
71572: LD_INT 0
71574: PPUSH
// uc_side := 0 ;
71575: LD_ADDR_OWVAR 20
71579: PUSH
71580: LD_INT 0
71582: ST_TO_ADDR
// uc_nation := 0 ;
71583: LD_ADDR_OWVAR 21
71587: PUSH
71588: LD_INT 0
71590: ST_TO_ADDR
// hc_sex := sex_male ;
71591: LD_ADDR_OWVAR 27
71595: PUSH
71596: LD_INT 1
71598: ST_TO_ADDR
// hc_class := class_apeman ;
71599: LD_ADDR_OWVAR 28
71603: PUSH
71604: LD_INT 12
71606: ST_TO_ADDR
// hc_gallery :=  ;
71607: LD_ADDR_OWVAR 33
71611: PUSH
71612: LD_STRING 
71614: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71615: LD_ADDR_OWVAR 35
71619: PUSH
71620: LD_VAR 0 1
71624: NEG
71625: PPUSH
71626: LD_VAR 0 1
71630: PPUSH
71631: CALL_OW 12
71635: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71636: LD_ADDR_OWVAR 31
71640: PUSH
71641: LD_INT 0
71643: PPUSH
71644: LD_INT 3
71646: PPUSH
71647: CALL_OW 12
71651: PUSH
71652: LD_INT 0
71654: PPUSH
71655: LD_INT 3
71657: PPUSH
71658: CALL_OW 12
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: LD_INT 0
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: ST_TO_ADDR
// end ;
71675: LD_VAR 0 2
71679: RET
// export function PrepareTiger ( agressivity ) ; begin
71680: LD_INT 0
71682: PPUSH
// uc_side := 0 ;
71683: LD_ADDR_OWVAR 20
71687: PUSH
71688: LD_INT 0
71690: ST_TO_ADDR
// uc_nation := 0 ;
71691: LD_ADDR_OWVAR 21
71695: PUSH
71696: LD_INT 0
71698: ST_TO_ADDR
// hc_class := class_tiger ;
71699: LD_ADDR_OWVAR 28
71703: PUSH
71704: LD_INT 14
71706: ST_TO_ADDR
// hc_gallery :=  ;
71707: LD_ADDR_OWVAR 33
71711: PUSH
71712: LD_STRING 
71714: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71715: LD_ADDR_OWVAR 35
71719: PUSH
71720: LD_VAR 0 1
71724: NEG
71725: PPUSH
71726: LD_VAR 0 1
71730: PPUSH
71731: CALL_OW 12
71735: ST_TO_ADDR
// end ;
71736: LD_VAR 0 2
71740: RET
// export function PrepareEnchidna ( ) ; begin
71741: LD_INT 0
71743: PPUSH
// uc_side := 0 ;
71744: LD_ADDR_OWVAR 20
71748: PUSH
71749: LD_INT 0
71751: ST_TO_ADDR
// uc_nation := 0 ;
71752: LD_ADDR_OWVAR 21
71756: PUSH
71757: LD_INT 0
71759: ST_TO_ADDR
// hc_class := class_baggie ;
71760: LD_ADDR_OWVAR 28
71764: PUSH
71765: LD_INT 13
71767: ST_TO_ADDR
// hc_gallery :=  ;
71768: LD_ADDR_OWVAR 33
71772: PUSH
71773: LD_STRING 
71775: ST_TO_ADDR
// end ;
71776: LD_VAR 0 1
71780: RET
// export function PrepareFrog ( ) ; begin
71781: LD_INT 0
71783: PPUSH
// uc_side := 0 ;
71784: LD_ADDR_OWVAR 20
71788: PUSH
71789: LD_INT 0
71791: ST_TO_ADDR
// uc_nation := 0 ;
71792: LD_ADDR_OWVAR 21
71796: PUSH
71797: LD_INT 0
71799: ST_TO_ADDR
// hc_class := class_frog ;
71800: LD_ADDR_OWVAR 28
71804: PUSH
71805: LD_INT 19
71807: ST_TO_ADDR
// hc_gallery :=  ;
71808: LD_ADDR_OWVAR 33
71812: PUSH
71813: LD_STRING 
71815: ST_TO_ADDR
// end ;
71816: LD_VAR 0 1
71820: RET
// export function PrepareFish ( ) ; begin
71821: LD_INT 0
71823: PPUSH
// uc_side := 0 ;
71824: LD_ADDR_OWVAR 20
71828: PUSH
71829: LD_INT 0
71831: ST_TO_ADDR
// uc_nation := 0 ;
71832: LD_ADDR_OWVAR 21
71836: PUSH
71837: LD_INT 0
71839: ST_TO_ADDR
// hc_class := class_fish ;
71840: LD_ADDR_OWVAR 28
71844: PUSH
71845: LD_INT 20
71847: ST_TO_ADDR
// hc_gallery :=  ;
71848: LD_ADDR_OWVAR 33
71852: PUSH
71853: LD_STRING 
71855: ST_TO_ADDR
// end ;
71856: LD_VAR 0 1
71860: RET
// export function PrepareBird ( ) ; begin
71861: LD_INT 0
71863: PPUSH
// uc_side := 0 ;
71864: LD_ADDR_OWVAR 20
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// uc_nation := 0 ;
71872: LD_ADDR_OWVAR 21
71876: PUSH
71877: LD_INT 0
71879: ST_TO_ADDR
// hc_class := class_phororhacos ;
71880: LD_ADDR_OWVAR 28
71884: PUSH
71885: LD_INT 18
71887: ST_TO_ADDR
// hc_gallery :=  ;
71888: LD_ADDR_OWVAR 33
71892: PUSH
71893: LD_STRING 
71895: ST_TO_ADDR
// end ;
71896: LD_VAR 0 1
71900: RET
// export function PrepareHorse ( ) ; begin
71901: LD_INT 0
71903: PPUSH
// uc_side := 0 ;
71904: LD_ADDR_OWVAR 20
71908: PUSH
71909: LD_INT 0
71911: ST_TO_ADDR
// uc_nation := 0 ;
71912: LD_ADDR_OWVAR 21
71916: PUSH
71917: LD_INT 0
71919: ST_TO_ADDR
// hc_class := class_horse ;
71920: LD_ADDR_OWVAR 28
71924: PUSH
71925: LD_INT 21
71927: ST_TO_ADDR
// hc_gallery :=  ;
71928: LD_ADDR_OWVAR 33
71932: PUSH
71933: LD_STRING 
71935: ST_TO_ADDR
// end ;
71936: LD_VAR 0 1
71940: RET
// export function PrepareMastodont ( ) ; begin
71941: LD_INT 0
71943: PPUSH
// uc_side := 0 ;
71944: LD_ADDR_OWVAR 20
71948: PUSH
71949: LD_INT 0
71951: ST_TO_ADDR
// uc_nation := 0 ;
71952: LD_ADDR_OWVAR 21
71956: PUSH
71957: LD_INT 0
71959: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71960: LD_ADDR_OWVAR 37
71964: PUSH
71965: LD_INT 31
71967: ST_TO_ADDR
// vc_control := control_rider ;
71968: LD_ADDR_OWVAR 38
71972: PUSH
71973: LD_INT 4
71975: ST_TO_ADDR
// end ;
71976: LD_VAR 0 1
71980: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71981: LD_INT 0
71983: PPUSH
71984: PPUSH
71985: PPUSH
// uc_side = 0 ;
71986: LD_ADDR_OWVAR 20
71990: PUSH
71991: LD_INT 0
71993: ST_TO_ADDR
// uc_nation = 0 ;
71994: LD_ADDR_OWVAR 21
71998: PUSH
71999: LD_INT 0
72001: ST_TO_ADDR
// InitHc_All ( ) ;
72002: CALL_OW 584
// InitVc ;
72006: CALL_OW 20
// if mastodonts then
72010: LD_VAR 0 6
72014: IFFALSE 72081
// for i = 1 to mastodonts do
72016: LD_ADDR_VAR 0 11
72020: PUSH
72021: DOUBLE
72022: LD_INT 1
72024: DEC
72025: ST_TO_ADDR
72026: LD_VAR 0 6
72030: PUSH
72031: FOR_TO
72032: IFFALSE 72079
// begin vc_chassis := 31 ;
72034: LD_ADDR_OWVAR 37
72038: PUSH
72039: LD_INT 31
72041: ST_TO_ADDR
// vc_control := control_rider ;
72042: LD_ADDR_OWVAR 38
72046: PUSH
72047: LD_INT 4
72049: ST_TO_ADDR
// animal := CreateVehicle ;
72050: LD_ADDR_VAR 0 12
72054: PUSH
72055: CALL_OW 45
72059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72060: LD_VAR 0 12
72064: PPUSH
72065: LD_VAR 0 8
72069: PPUSH
72070: LD_INT 0
72072: PPUSH
72073: CALL 74209 0 3
// end ;
72077: GO 72031
72079: POP
72080: POP
// if horses then
72081: LD_VAR 0 5
72085: IFFALSE 72152
// for i = 1 to horses do
72087: LD_ADDR_VAR 0 11
72091: PUSH
72092: DOUBLE
72093: LD_INT 1
72095: DEC
72096: ST_TO_ADDR
72097: LD_VAR 0 5
72101: PUSH
72102: FOR_TO
72103: IFFALSE 72150
// begin hc_class := 21 ;
72105: LD_ADDR_OWVAR 28
72109: PUSH
72110: LD_INT 21
72112: ST_TO_ADDR
// hc_gallery :=  ;
72113: LD_ADDR_OWVAR 33
72117: PUSH
72118: LD_STRING 
72120: ST_TO_ADDR
// animal := CreateHuman ;
72121: LD_ADDR_VAR 0 12
72125: PUSH
72126: CALL_OW 44
72130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72131: LD_VAR 0 12
72135: PPUSH
72136: LD_VAR 0 8
72140: PPUSH
72141: LD_INT 0
72143: PPUSH
72144: CALL 74209 0 3
// end ;
72148: GO 72102
72150: POP
72151: POP
// if birds then
72152: LD_VAR 0 1
72156: IFFALSE 72223
// for i = 1 to birds do
72158: LD_ADDR_VAR 0 11
72162: PUSH
72163: DOUBLE
72164: LD_INT 1
72166: DEC
72167: ST_TO_ADDR
72168: LD_VAR 0 1
72172: PUSH
72173: FOR_TO
72174: IFFALSE 72221
// begin hc_class := 18 ;
72176: LD_ADDR_OWVAR 28
72180: PUSH
72181: LD_INT 18
72183: ST_TO_ADDR
// hc_gallery =  ;
72184: LD_ADDR_OWVAR 33
72188: PUSH
72189: LD_STRING 
72191: ST_TO_ADDR
// animal := CreateHuman ;
72192: LD_ADDR_VAR 0 12
72196: PUSH
72197: CALL_OW 44
72201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72202: LD_VAR 0 12
72206: PPUSH
72207: LD_VAR 0 8
72211: PPUSH
72212: LD_INT 0
72214: PPUSH
72215: CALL 74209 0 3
// end ;
72219: GO 72173
72221: POP
72222: POP
// if tigers then
72223: LD_VAR 0 2
72227: IFFALSE 72311
// for i = 1 to tigers do
72229: LD_ADDR_VAR 0 11
72233: PUSH
72234: DOUBLE
72235: LD_INT 1
72237: DEC
72238: ST_TO_ADDR
72239: LD_VAR 0 2
72243: PUSH
72244: FOR_TO
72245: IFFALSE 72309
// begin hc_class = class_tiger ;
72247: LD_ADDR_OWVAR 28
72251: PUSH
72252: LD_INT 14
72254: ST_TO_ADDR
// hc_gallery =  ;
72255: LD_ADDR_OWVAR 33
72259: PUSH
72260: LD_STRING 
72262: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72263: LD_ADDR_OWVAR 35
72267: PUSH
72268: LD_INT 7
72270: NEG
72271: PPUSH
72272: LD_INT 7
72274: PPUSH
72275: CALL_OW 12
72279: ST_TO_ADDR
// animal := CreateHuman ;
72280: LD_ADDR_VAR 0 12
72284: PUSH
72285: CALL_OW 44
72289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72290: LD_VAR 0 12
72294: PPUSH
72295: LD_VAR 0 8
72299: PPUSH
72300: LD_INT 0
72302: PPUSH
72303: CALL 74209 0 3
// end ;
72307: GO 72244
72309: POP
72310: POP
// if apemans then
72311: LD_VAR 0 3
72315: IFFALSE 72438
// for i = 1 to apemans do
72317: LD_ADDR_VAR 0 11
72321: PUSH
72322: DOUBLE
72323: LD_INT 1
72325: DEC
72326: ST_TO_ADDR
72327: LD_VAR 0 3
72331: PUSH
72332: FOR_TO
72333: IFFALSE 72436
// begin hc_class = class_apeman ;
72335: LD_ADDR_OWVAR 28
72339: PUSH
72340: LD_INT 12
72342: ST_TO_ADDR
// hc_gallery =  ;
72343: LD_ADDR_OWVAR 33
72347: PUSH
72348: LD_STRING 
72350: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72351: LD_ADDR_OWVAR 35
72355: PUSH
72356: LD_INT 2
72358: NEG
72359: PPUSH
72360: LD_INT 2
72362: PPUSH
72363: CALL_OW 12
72367: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72368: LD_ADDR_OWVAR 31
72372: PUSH
72373: LD_INT 1
72375: PPUSH
72376: LD_INT 3
72378: PPUSH
72379: CALL_OW 12
72383: PUSH
72384: LD_INT 1
72386: PPUSH
72387: LD_INT 3
72389: PPUSH
72390: CALL_OW 12
72394: PUSH
72395: LD_INT 0
72397: PUSH
72398: LD_INT 0
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: ST_TO_ADDR
// animal := CreateHuman ;
72407: LD_ADDR_VAR 0 12
72411: PUSH
72412: CALL_OW 44
72416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72417: LD_VAR 0 12
72421: PPUSH
72422: LD_VAR 0 8
72426: PPUSH
72427: LD_INT 0
72429: PPUSH
72430: CALL 74209 0 3
// end ;
72434: GO 72332
72436: POP
72437: POP
// if enchidnas then
72438: LD_VAR 0 4
72442: IFFALSE 72509
// for i = 1 to enchidnas do
72444: LD_ADDR_VAR 0 11
72448: PUSH
72449: DOUBLE
72450: LD_INT 1
72452: DEC
72453: ST_TO_ADDR
72454: LD_VAR 0 4
72458: PUSH
72459: FOR_TO
72460: IFFALSE 72507
// begin hc_class = 13 ;
72462: LD_ADDR_OWVAR 28
72466: PUSH
72467: LD_INT 13
72469: ST_TO_ADDR
// hc_gallery =  ;
72470: LD_ADDR_OWVAR 33
72474: PUSH
72475: LD_STRING 
72477: ST_TO_ADDR
// animal := CreateHuman ;
72478: LD_ADDR_VAR 0 12
72482: PUSH
72483: CALL_OW 44
72487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72488: LD_VAR 0 12
72492: PPUSH
72493: LD_VAR 0 8
72497: PPUSH
72498: LD_INT 0
72500: PPUSH
72501: CALL 74209 0 3
// end ;
72505: GO 72459
72507: POP
72508: POP
// if fishes then
72509: LD_VAR 0 7
72513: IFFALSE 72580
// for i = 1 to fishes do
72515: LD_ADDR_VAR 0 11
72519: PUSH
72520: DOUBLE
72521: LD_INT 1
72523: DEC
72524: ST_TO_ADDR
72525: LD_VAR 0 7
72529: PUSH
72530: FOR_TO
72531: IFFALSE 72578
// begin hc_class = 20 ;
72533: LD_ADDR_OWVAR 28
72537: PUSH
72538: LD_INT 20
72540: ST_TO_ADDR
// hc_gallery =  ;
72541: LD_ADDR_OWVAR 33
72545: PUSH
72546: LD_STRING 
72548: ST_TO_ADDR
// animal := CreateHuman ;
72549: LD_ADDR_VAR 0 12
72553: PUSH
72554: CALL_OW 44
72558: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72559: LD_VAR 0 12
72563: PPUSH
72564: LD_VAR 0 9
72568: PPUSH
72569: LD_INT 0
72571: PPUSH
72572: CALL 74209 0 3
// end ;
72576: GO 72530
72578: POP
72579: POP
// end ;
72580: LD_VAR 0 10
72584: RET
// export function WantHeal ( sci , unit ) ; begin
72585: LD_INT 0
72587: PPUSH
// if GetTaskList ( sci ) > 0 then
72588: LD_VAR 0 1
72592: PPUSH
72593: CALL_OW 437
72597: PUSH
72598: LD_INT 0
72600: GREATER
72601: IFFALSE 72671
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72603: LD_VAR 0 1
72607: PPUSH
72608: CALL_OW 437
72612: PUSH
72613: LD_INT 1
72615: ARRAY
72616: PUSH
72617: LD_INT 1
72619: ARRAY
72620: PUSH
72621: LD_STRING l
72623: EQUAL
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: CALL_OW 437
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: PUSH
72639: LD_INT 4
72641: ARRAY
72642: PUSH
72643: LD_VAR 0 2
72647: EQUAL
72648: AND
72649: IFFALSE 72661
// result := true else
72651: LD_ADDR_VAR 0 3
72655: PUSH
72656: LD_INT 1
72658: ST_TO_ADDR
72659: GO 72669
// result := false ;
72661: LD_ADDR_VAR 0 3
72665: PUSH
72666: LD_INT 0
72668: ST_TO_ADDR
// end else
72669: GO 72679
// result := false ;
72671: LD_ADDR_VAR 0 3
72675: PUSH
72676: LD_INT 0
72678: ST_TO_ADDR
// end ;
72679: LD_VAR 0 3
72683: RET
// export function HealTarget ( sci ) ; begin
72684: LD_INT 0
72686: PPUSH
// if not sci then
72687: LD_VAR 0 1
72691: NOT
72692: IFFALSE 72696
// exit ;
72694: GO 72761
// result := 0 ;
72696: LD_ADDR_VAR 0 2
72700: PUSH
72701: LD_INT 0
72703: ST_TO_ADDR
// if GetTaskList ( sci ) then
72704: LD_VAR 0 1
72708: PPUSH
72709: CALL_OW 437
72713: IFFALSE 72761
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72715: LD_VAR 0 1
72719: PPUSH
72720: CALL_OW 437
72724: PUSH
72725: LD_INT 1
72727: ARRAY
72728: PUSH
72729: LD_INT 1
72731: ARRAY
72732: PUSH
72733: LD_STRING l
72735: EQUAL
72736: IFFALSE 72761
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72738: LD_ADDR_VAR 0 2
72742: PUSH
72743: LD_VAR 0 1
72747: PPUSH
72748: CALL_OW 437
72752: PUSH
72753: LD_INT 1
72755: ARRAY
72756: PUSH
72757: LD_INT 4
72759: ARRAY
72760: ST_TO_ADDR
// end ;
72761: LD_VAR 0 2
72765: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72766: LD_INT 0
72768: PPUSH
72769: PPUSH
72770: PPUSH
72771: PPUSH
// if not base_units then
72772: LD_VAR 0 1
72776: NOT
72777: IFFALSE 72781
// exit ;
72779: GO 72868
// result := false ;
72781: LD_ADDR_VAR 0 2
72785: PUSH
72786: LD_INT 0
72788: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72789: LD_ADDR_VAR 0 5
72793: PUSH
72794: LD_VAR 0 1
72798: PPUSH
72799: LD_INT 21
72801: PUSH
72802: LD_INT 3
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PPUSH
72809: CALL_OW 72
72813: ST_TO_ADDR
// if not tmp then
72814: LD_VAR 0 5
72818: NOT
72819: IFFALSE 72823
// exit ;
72821: GO 72868
// for i in tmp do
72823: LD_ADDR_VAR 0 3
72827: PUSH
72828: LD_VAR 0 5
72832: PUSH
72833: FOR_IN
72834: IFFALSE 72866
// begin result := EnemyInRange ( i , 22 ) ;
72836: LD_ADDR_VAR 0 2
72840: PUSH
72841: LD_VAR 0 3
72845: PPUSH
72846: LD_INT 22
72848: PPUSH
72849: CALL 70455 0 2
72853: ST_TO_ADDR
// if result then
72854: LD_VAR 0 2
72858: IFFALSE 72864
// exit ;
72860: POP
72861: POP
72862: GO 72868
// end ;
72864: GO 72833
72866: POP
72867: POP
// end ;
72868: LD_VAR 0 2
72872: RET
// export function FilterByTag ( units , tag ) ; begin
72873: LD_INT 0
72875: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72876: LD_ADDR_VAR 0 3
72880: PUSH
72881: LD_VAR 0 1
72885: PPUSH
72886: LD_INT 120
72888: PUSH
72889: LD_VAR 0 2
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PPUSH
72898: CALL_OW 72
72902: ST_TO_ADDR
// end ;
72903: LD_VAR 0 3
72907: RET
// export function IsDriver ( un ) ; begin
72908: LD_INT 0
72910: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72911: LD_ADDR_VAR 0 2
72915: PUSH
72916: LD_VAR 0 1
72920: PUSH
72921: LD_INT 55
72923: PUSH
72924: EMPTY
72925: LIST
72926: PPUSH
72927: CALL_OW 69
72931: IN
72932: ST_TO_ADDR
// end ;
72933: LD_VAR 0 2
72937: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72938: LD_INT 0
72940: PPUSH
72941: PPUSH
// list := [ ] ;
72942: LD_ADDR_VAR 0 5
72946: PUSH
72947: EMPTY
72948: ST_TO_ADDR
// case d of 0 :
72949: LD_VAR 0 3
72953: PUSH
72954: LD_INT 0
72956: DOUBLE
72957: EQUAL
72958: IFTRUE 72962
72960: GO 73095
72962: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72963: LD_ADDR_VAR 0 5
72967: PUSH
72968: LD_VAR 0 1
72972: PUSH
72973: LD_INT 4
72975: MINUS
72976: PUSH
72977: LD_VAR 0 2
72981: PUSH
72982: LD_INT 4
72984: MINUS
72985: PUSH
72986: LD_INT 2
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: LIST
72993: PUSH
72994: LD_VAR 0 1
72998: PUSH
72999: LD_INT 3
73001: MINUS
73002: PUSH
73003: LD_VAR 0 2
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_INT 4
73023: PLUS
73024: PUSH
73025: LD_VAR 0 2
73029: PUSH
73030: LD_INT 4
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: PUSH
73038: LD_VAR 0 1
73042: PUSH
73043: LD_INT 3
73045: PLUS
73046: PUSH
73047: LD_VAR 0 2
73051: PUSH
73052: LD_INT 3
73054: PLUS
73055: PUSH
73056: LD_INT 5
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: LIST
73063: PUSH
73064: LD_VAR 0 1
73068: PUSH
73069: LD_VAR 0 2
73073: PUSH
73074: LD_INT 4
73076: PLUS
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: LIST
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: ST_TO_ADDR
// end ; 1 :
73093: GO 73793
73095: LD_INT 1
73097: DOUBLE
73098: EQUAL
73099: IFTRUE 73103
73101: GO 73236
73103: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73104: LD_ADDR_VAR 0 5
73108: PUSH
73109: LD_VAR 0 1
73113: PUSH
73114: LD_VAR 0 2
73118: PUSH
73119: LD_INT 4
73121: MINUS
73122: PUSH
73123: LD_INT 3
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: PUSH
73131: LD_VAR 0 1
73135: PUSH
73136: LD_INT 3
73138: MINUS
73139: PUSH
73140: LD_VAR 0 2
73144: PUSH
73145: LD_INT 3
73147: MINUS
73148: PUSH
73149: LD_INT 2
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: LIST
73156: PUSH
73157: LD_VAR 0 1
73161: PUSH
73162: LD_INT 4
73164: MINUS
73165: PUSH
73166: LD_VAR 0 2
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: LD_VAR 0 1
73183: PUSH
73184: LD_VAR 0 2
73188: PUSH
73189: LD_INT 3
73191: PLUS
73192: PUSH
73193: LD_INT 0
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: LIST
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: LD_INT 4
73208: PLUS
73209: PUSH
73210: LD_VAR 0 2
73214: PUSH
73215: LD_INT 4
73217: PLUS
73218: PUSH
73219: LD_INT 5
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: LIST
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: ST_TO_ADDR
// end ; 2 :
73234: GO 73793
73236: LD_INT 2
73238: DOUBLE
73239: EQUAL
73240: IFTRUE 73244
73242: GO 73373
73244: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73245: LD_ADDR_VAR 0 5
73249: PUSH
73250: LD_VAR 0 1
73254: PUSH
73255: LD_VAR 0 2
73259: PUSH
73260: LD_INT 3
73262: MINUS
73263: PUSH
73264: LD_INT 3
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: LIST
73271: PUSH
73272: LD_VAR 0 1
73276: PUSH
73277: LD_INT 4
73279: PLUS
73280: PUSH
73281: LD_VAR 0 2
73285: PUSH
73286: LD_INT 4
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: LIST
73293: PUSH
73294: LD_VAR 0 1
73298: PUSH
73299: LD_VAR 0 2
73303: PUSH
73304: LD_INT 4
73306: PLUS
73307: PUSH
73308: LD_INT 0
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: LIST
73315: PUSH
73316: LD_VAR 0 1
73320: PUSH
73321: LD_INT 3
73323: MINUS
73324: PUSH
73325: LD_VAR 0 2
73329: PUSH
73330: LD_INT 1
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: LIST
73337: PUSH
73338: LD_VAR 0 1
73342: PUSH
73343: LD_INT 4
73345: MINUS
73346: PUSH
73347: LD_VAR 0 2
73351: PUSH
73352: LD_INT 4
73354: MINUS
73355: PUSH
73356: LD_INT 2
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: LIST
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: ST_TO_ADDR
// end ; 3 :
73371: GO 73793
73373: LD_INT 3
73375: DOUBLE
73376: EQUAL
73377: IFTRUE 73381
73379: GO 73514
73381: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73382: LD_ADDR_VAR 0 5
73386: PUSH
73387: LD_VAR 0 1
73391: PUSH
73392: LD_INT 3
73394: PLUS
73395: PUSH
73396: LD_VAR 0 2
73400: PUSH
73401: LD_INT 4
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: LIST
73408: PUSH
73409: LD_VAR 0 1
73413: PUSH
73414: LD_INT 4
73416: PLUS
73417: PUSH
73418: LD_VAR 0 2
73422: PUSH
73423: LD_INT 4
73425: PLUS
73426: PUSH
73427: LD_INT 5
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_VAR 0 1
73439: PUSH
73440: LD_INT 4
73442: MINUS
73443: PUSH
73444: LD_VAR 0 2
73448: PUSH
73449: LD_INT 1
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: PUSH
73457: LD_VAR 0 1
73461: PUSH
73462: LD_VAR 0 2
73466: PUSH
73467: LD_INT 4
73469: MINUS
73470: PUSH
73471: LD_INT 3
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: LIST
73478: PUSH
73479: LD_VAR 0 1
73483: PUSH
73484: LD_INT 3
73486: MINUS
73487: PUSH
73488: LD_VAR 0 2
73492: PUSH
73493: LD_INT 3
73495: MINUS
73496: PUSH
73497: LD_INT 2
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: ST_TO_ADDR
// end ; 4 :
73512: GO 73793
73514: LD_INT 4
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73522
73520: GO 73655
73522: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73523: LD_ADDR_VAR 0 5
73527: PUSH
73528: LD_VAR 0 1
73532: PUSH
73533: LD_VAR 0 2
73537: PUSH
73538: LD_INT 4
73540: PLUS
73541: PUSH
73542: LD_INT 0
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: PUSH
73550: LD_VAR 0 1
73554: PUSH
73555: LD_INT 3
73557: PLUS
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: LD_INT 3
73566: PLUS
73567: PUSH
73568: LD_INT 5
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: LIST
73575: PUSH
73576: LD_VAR 0 1
73580: PUSH
73581: LD_INT 4
73583: PLUS
73584: PUSH
73585: LD_VAR 0 2
73589: PUSH
73590: LD_INT 4
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: LIST
73597: PUSH
73598: LD_VAR 0 1
73602: PUSH
73603: LD_VAR 0 2
73607: PUSH
73608: LD_INT 3
73610: MINUS
73611: PUSH
73612: LD_INT 3
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: LIST
73619: PUSH
73620: LD_VAR 0 1
73624: PUSH
73625: LD_INT 4
73627: MINUS
73628: PUSH
73629: LD_VAR 0 2
73633: PUSH
73634: LD_INT 4
73636: MINUS
73637: PUSH
73638: LD_INT 2
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: LIST
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: ST_TO_ADDR
// end ; 5 :
73653: GO 73793
73655: LD_INT 5
73657: DOUBLE
73658: EQUAL
73659: IFTRUE 73663
73661: GO 73792
73663: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73664: LD_ADDR_VAR 0 5
73668: PUSH
73669: LD_VAR 0 1
73673: PUSH
73674: LD_INT 4
73676: MINUS
73677: PUSH
73678: LD_VAR 0 2
73682: PUSH
73683: LD_INT 1
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: PUSH
73691: LD_VAR 0 1
73695: PUSH
73696: LD_VAR 0 2
73700: PUSH
73701: LD_INT 4
73703: MINUS
73704: PUSH
73705: LD_INT 3
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: LD_VAR 0 1
73717: PUSH
73718: LD_INT 4
73720: PLUS
73721: PUSH
73722: LD_VAR 0 2
73726: PUSH
73727: LD_INT 4
73729: PLUS
73730: PUSH
73731: LD_INT 5
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: PUSH
73739: LD_VAR 0 1
73743: PUSH
73744: LD_INT 3
73746: PLUS
73747: PUSH
73748: LD_VAR 0 2
73752: PUSH
73753: LD_INT 4
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: LIST
73760: PUSH
73761: LD_VAR 0 1
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 3
73773: PLUS
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: ST_TO_ADDR
// end ; end ;
73790: GO 73793
73792: POP
// result := list ;
73793: LD_ADDR_VAR 0 4
73797: PUSH
73798: LD_VAR 0 5
73802: ST_TO_ADDR
// end ;
73803: LD_VAR 0 4
73807: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73808: LD_INT 0
73810: PPUSH
73811: PPUSH
73812: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73813: LD_VAR 0 1
73817: NOT
73818: PUSH
73819: LD_VAR 0 2
73823: PUSH
73824: LD_INT 1
73826: PUSH
73827: LD_INT 2
73829: PUSH
73830: LD_INT 3
73832: PUSH
73833: LD_INT 4
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: IN
73842: NOT
73843: OR
73844: IFFALSE 73848
// exit ;
73846: GO 73931
// tmp := [ ] ;
73848: LD_ADDR_VAR 0 5
73852: PUSH
73853: EMPTY
73854: ST_TO_ADDR
// for i in units do
73855: LD_ADDR_VAR 0 4
73859: PUSH
73860: LD_VAR 0 1
73864: PUSH
73865: FOR_IN
73866: IFFALSE 73900
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73868: LD_ADDR_VAR 0 5
73872: PUSH
73873: LD_VAR 0 5
73877: PPUSH
73878: LD_VAR 0 4
73882: PPUSH
73883: LD_VAR 0 2
73887: PPUSH
73888: CALL_OW 259
73892: PPUSH
73893: CALL 75291 0 2
73897: ST_TO_ADDR
73898: GO 73865
73900: POP
73901: POP
// if not tmp then
73902: LD_VAR 0 5
73906: NOT
73907: IFFALSE 73911
// exit ;
73909: GO 73931
// result := SortListByListDesc ( units , tmp ) ;
73911: LD_ADDR_VAR 0 3
73915: PUSH
73916: LD_VAR 0 1
73920: PPUSH
73921: LD_VAR 0 5
73925: PPUSH
73926: CALL_OW 77
73930: ST_TO_ADDR
// end ;
73931: LD_VAR 0 3
73935: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73936: LD_INT 0
73938: PPUSH
73939: PPUSH
73940: PPUSH
// result := false ;
73941: LD_ADDR_VAR 0 3
73945: PUSH
73946: LD_INT 0
73948: ST_TO_ADDR
// if not building then
73949: LD_VAR 0 2
73953: NOT
73954: IFFALSE 73958
// exit ;
73956: GO 74096
// x := GetX ( building ) ;
73958: LD_ADDR_VAR 0 4
73962: PUSH
73963: LD_VAR 0 2
73967: PPUSH
73968: CALL_OW 250
73972: ST_TO_ADDR
// y := GetY ( building ) ;
73973: LD_ADDR_VAR 0 5
73977: PUSH
73978: LD_VAR 0 2
73982: PPUSH
73983: CALL_OW 251
73987: ST_TO_ADDR
// if not x or not y then
73988: LD_VAR 0 4
73992: NOT
73993: PUSH
73994: LD_VAR 0 5
73998: NOT
73999: OR
74000: IFFALSE 74004
// exit ;
74002: GO 74096
// if GetTaskList ( unit ) then
74004: LD_VAR 0 1
74008: PPUSH
74009: CALL_OW 437
74013: IFFALSE 74096
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74015: LD_STRING e
74017: PUSH
74018: LD_VAR 0 1
74022: PPUSH
74023: CALL_OW 437
74027: PUSH
74028: LD_INT 1
74030: ARRAY
74031: PUSH
74032: LD_INT 1
74034: ARRAY
74035: EQUAL
74036: PUSH
74037: LD_VAR 0 4
74041: PUSH
74042: LD_VAR 0 1
74046: PPUSH
74047: CALL_OW 437
74051: PUSH
74052: LD_INT 1
74054: ARRAY
74055: PUSH
74056: LD_INT 2
74058: ARRAY
74059: EQUAL
74060: AND
74061: PUSH
74062: LD_VAR 0 5
74066: PUSH
74067: LD_VAR 0 1
74071: PPUSH
74072: CALL_OW 437
74076: PUSH
74077: LD_INT 1
74079: ARRAY
74080: PUSH
74081: LD_INT 3
74083: ARRAY
74084: EQUAL
74085: AND
74086: IFFALSE 74096
// result := true end ;
74088: LD_ADDR_VAR 0 3
74092: PUSH
74093: LD_INT 1
74095: ST_TO_ADDR
// end ;
74096: LD_VAR 0 3
74100: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74101: LD_INT 0
74103: PPUSH
// result := false ;
74104: LD_ADDR_VAR 0 4
74108: PUSH
74109: LD_INT 0
74111: ST_TO_ADDR
// if GetTaskList ( unit ) then
74112: LD_VAR 0 1
74116: PPUSH
74117: CALL_OW 437
74121: IFFALSE 74204
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74123: LD_STRING M
74125: PUSH
74126: LD_VAR 0 1
74130: PPUSH
74131: CALL_OW 437
74135: PUSH
74136: LD_INT 1
74138: ARRAY
74139: PUSH
74140: LD_INT 1
74142: ARRAY
74143: EQUAL
74144: PUSH
74145: LD_VAR 0 2
74149: PUSH
74150: LD_VAR 0 1
74154: PPUSH
74155: CALL_OW 437
74159: PUSH
74160: LD_INT 1
74162: ARRAY
74163: PUSH
74164: LD_INT 2
74166: ARRAY
74167: EQUAL
74168: AND
74169: PUSH
74170: LD_VAR 0 3
74174: PUSH
74175: LD_VAR 0 1
74179: PPUSH
74180: CALL_OW 437
74184: PUSH
74185: LD_INT 1
74187: ARRAY
74188: PUSH
74189: LD_INT 3
74191: ARRAY
74192: EQUAL
74193: AND
74194: IFFALSE 74204
// result := true ;
74196: LD_ADDR_VAR 0 4
74200: PUSH
74201: LD_INT 1
74203: ST_TO_ADDR
// end ; end ;
74204: LD_VAR 0 4
74208: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74209: LD_INT 0
74211: PPUSH
74212: PPUSH
74213: PPUSH
74214: PPUSH
// if not unit or not area then
74215: LD_VAR 0 1
74219: NOT
74220: PUSH
74221: LD_VAR 0 2
74225: NOT
74226: OR
74227: IFFALSE 74231
// exit ;
74229: GO 74394
// tmp := AreaToList ( area , i ) ;
74231: LD_ADDR_VAR 0 6
74235: PUSH
74236: LD_VAR 0 2
74240: PPUSH
74241: LD_VAR 0 5
74245: PPUSH
74246: CALL_OW 517
74250: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74251: LD_ADDR_VAR 0 5
74255: PUSH
74256: DOUBLE
74257: LD_INT 1
74259: DEC
74260: ST_TO_ADDR
74261: LD_VAR 0 6
74265: PUSH
74266: LD_INT 1
74268: ARRAY
74269: PUSH
74270: FOR_TO
74271: IFFALSE 74392
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74273: LD_ADDR_VAR 0 7
74277: PUSH
74278: LD_VAR 0 6
74282: PUSH
74283: LD_INT 1
74285: ARRAY
74286: PUSH
74287: LD_VAR 0 5
74291: ARRAY
74292: PUSH
74293: LD_VAR 0 6
74297: PUSH
74298: LD_INT 2
74300: ARRAY
74301: PUSH
74302: LD_VAR 0 5
74306: ARRAY
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
74312: LD_INT 92
74314: PUSH
74315: LD_VAR 0 7
74319: PUSH
74320: LD_INT 1
74322: ARRAY
74323: PUSH
74324: LD_VAR 0 7
74328: PUSH
74329: LD_INT 2
74331: ARRAY
74332: PUSH
74333: LD_INT 3
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: PPUSH
74342: CALL_OW 69
74346: PUSH
74347: LD_INT 0
74349: EQUAL
74350: IFFALSE 74390
// begin PlaceUnitArea ( unit , area , mode ) ;
74352: LD_VAR 0 1
74356: PPUSH
74357: LD_VAR 0 2
74361: PPUSH
74362: LD_VAR 0 3
74366: PPUSH
74367: CALL_OW 49
// result := IsPlaced ( unit ) ;
74371: LD_ADDR_VAR 0 4
74375: PUSH
74376: LD_VAR 0 1
74380: PPUSH
74381: CALL_OW 305
74385: ST_TO_ADDR
// exit ;
74386: POP
74387: POP
74388: GO 74394
// end ; end ;
74390: GO 74270
74392: POP
74393: POP
// end ;
74394: LD_VAR 0 4
74398: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74399: LD_INT 0
74401: PPUSH
74402: PPUSH
74403: PPUSH
// if not side or side > 8 then
74404: LD_VAR 0 1
74408: NOT
74409: PUSH
74410: LD_VAR 0 1
74414: PUSH
74415: LD_INT 8
74417: GREATER
74418: OR
74419: IFFALSE 74423
// exit ;
74421: GO 74610
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74423: LD_ADDR_VAR 0 4
74427: PUSH
74428: LD_INT 22
74430: PUSH
74431: LD_VAR 0 1
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 21
74442: PUSH
74443: LD_INT 3
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PPUSH
74454: CALL_OW 69
74458: ST_TO_ADDR
// if not tmp then
74459: LD_VAR 0 4
74463: NOT
74464: IFFALSE 74468
// exit ;
74466: GO 74610
// enable_addtolog := true ;
74468: LD_ADDR_OWVAR 81
74472: PUSH
74473: LD_INT 1
74475: ST_TO_ADDR
// AddToLog ( [ ) ;
74476: LD_STRING [
74478: PPUSH
74479: CALL_OW 561
// for i in tmp do
74483: LD_ADDR_VAR 0 3
74487: PUSH
74488: LD_VAR 0 4
74492: PUSH
74493: FOR_IN
74494: IFFALSE 74601
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74496: LD_STRING [
74498: PUSH
74499: LD_VAR 0 3
74503: PPUSH
74504: CALL_OW 266
74508: STR
74509: PUSH
74510: LD_STRING , 
74512: STR
74513: PUSH
74514: LD_VAR 0 3
74518: PPUSH
74519: CALL_OW 250
74523: STR
74524: PUSH
74525: LD_STRING , 
74527: STR
74528: PUSH
74529: LD_VAR 0 3
74533: PPUSH
74534: CALL_OW 251
74538: STR
74539: PUSH
74540: LD_STRING , 
74542: STR
74543: PUSH
74544: LD_VAR 0 3
74548: PPUSH
74549: CALL_OW 254
74553: STR
74554: PUSH
74555: LD_STRING , 
74557: STR
74558: PUSH
74559: LD_VAR 0 3
74563: PPUSH
74564: LD_INT 1
74566: PPUSH
74567: CALL_OW 268
74571: STR
74572: PUSH
74573: LD_STRING , 
74575: STR
74576: PUSH
74577: LD_VAR 0 3
74581: PPUSH
74582: LD_INT 2
74584: PPUSH
74585: CALL_OW 268
74589: STR
74590: PUSH
74591: LD_STRING ],
74593: STR
74594: PPUSH
74595: CALL_OW 561
// end ;
74599: GO 74493
74601: POP
74602: POP
// AddToLog ( ]; ) ;
74603: LD_STRING ];
74605: PPUSH
74606: CALL_OW 561
// end ;
74610: LD_VAR 0 2
74614: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74615: LD_INT 0
74617: PPUSH
74618: PPUSH
74619: PPUSH
74620: PPUSH
74621: PPUSH
// if not area or not rate or not max then
74622: LD_VAR 0 1
74626: NOT
74627: PUSH
74628: LD_VAR 0 2
74632: NOT
74633: OR
74634: PUSH
74635: LD_VAR 0 4
74639: NOT
74640: OR
74641: IFFALSE 74645
// exit ;
74643: GO 74834
// while 1 do
74645: LD_INT 1
74647: IFFALSE 74834
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74649: LD_ADDR_VAR 0 9
74653: PUSH
74654: LD_VAR 0 1
74658: PPUSH
74659: LD_INT 1
74661: PPUSH
74662: CALL_OW 287
74666: PUSH
74667: LD_INT 10
74669: MUL
74670: ST_TO_ADDR
// r := rate / 10 ;
74671: LD_ADDR_VAR 0 7
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: LD_INT 10
74683: DIVREAL
74684: ST_TO_ADDR
// time := 1 1$00 ;
74685: LD_ADDR_VAR 0 8
74689: PUSH
74690: LD_INT 2100
74692: ST_TO_ADDR
// if amount < min then
74693: LD_VAR 0 9
74697: PUSH
74698: LD_VAR 0 3
74702: LESS
74703: IFFALSE 74721
// r := r * 2 else
74705: LD_ADDR_VAR 0 7
74709: PUSH
74710: LD_VAR 0 7
74714: PUSH
74715: LD_INT 2
74717: MUL
74718: ST_TO_ADDR
74719: GO 74747
// if amount > max then
74721: LD_VAR 0 9
74725: PUSH
74726: LD_VAR 0 4
74730: GREATER
74731: IFFALSE 74747
// r := r / 2 ;
74733: LD_ADDR_VAR 0 7
74737: PUSH
74738: LD_VAR 0 7
74742: PUSH
74743: LD_INT 2
74745: DIVREAL
74746: ST_TO_ADDR
// time := time / r ;
74747: LD_ADDR_VAR 0 8
74751: PUSH
74752: LD_VAR 0 8
74756: PUSH
74757: LD_VAR 0 7
74761: DIVREAL
74762: ST_TO_ADDR
// if time < 0 then
74763: LD_VAR 0 8
74767: PUSH
74768: LD_INT 0
74770: LESS
74771: IFFALSE 74788
// time := time * - 1 ;
74773: LD_ADDR_VAR 0 8
74777: PUSH
74778: LD_VAR 0 8
74782: PUSH
74783: LD_INT 1
74785: NEG
74786: MUL
74787: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74788: LD_VAR 0 8
74792: PUSH
74793: LD_INT 35
74795: PPUSH
74796: LD_INT 875
74798: PPUSH
74799: CALL_OW 12
74803: PLUS
74804: PPUSH
74805: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74809: LD_INT 1
74811: PPUSH
74812: LD_INT 5
74814: PPUSH
74815: CALL_OW 12
74819: PPUSH
74820: LD_VAR 0 1
74824: PPUSH
74825: LD_INT 1
74827: PPUSH
74828: CALL_OW 55
// end ;
74832: GO 74645
// end ;
74834: LD_VAR 0 5
74838: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74839: LD_INT 0
74841: PPUSH
74842: PPUSH
74843: PPUSH
74844: PPUSH
74845: PPUSH
74846: PPUSH
74847: PPUSH
74848: PPUSH
// if not turrets or not factories then
74849: LD_VAR 0 1
74853: NOT
74854: PUSH
74855: LD_VAR 0 2
74859: NOT
74860: OR
74861: IFFALSE 74865
// exit ;
74863: GO 75172
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74865: LD_ADDR_VAR 0 10
74869: PUSH
74870: LD_INT 5
74872: PUSH
74873: LD_INT 6
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 2
74882: PUSH
74883: LD_INT 4
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PUSH
74890: LD_INT 3
74892: PUSH
74893: LD_INT 5
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 24
74907: PUSH
74908: LD_INT 25
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 23
74917: PUSH
74918: LD_INT 27
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 42
74931: PUSH
74932: LD_INT 43
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 44
74941: PUSH
74942: LD_INT 46
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 45
74951: PUSH
74952: LD_INT 47
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: LIST
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: LIST
74968: ST_TO_ADDR
// result := [ ] ;
74969: LD_ADDR_VAR 0 3
74973: PUSH
74974: EMPTY
74975: ST_TO_ADDR
// for i in turrets do
74976: LD_ADDR_VAR 0 4
74980: PUSH
74981: LD_VAR 0 1
74985: PUSH
74986: FOR_IN
74987: IFFALSE 75170
// begin nat := GetNation ( i ) ;
74989: LD_ADDR_VAR 0 7
74993: PUSH
74994: LD_VAR 0 4
74998: PPUSH
74999: CALL_OW 248
75003: ST_TO_ADDR
// weapon := 0 ;
75004: LD_ADDR_VAR 0 8
75008: PUSH
75009: LD_INT 0
75011: ST_TO_ADDR
// if not nat then
75012: LD_VAR 0 7
75016: NOT
75017: IFFALSE 75021
// continue ;
75019: GO 74986
// for j in list [ nat ] do
75021: LD_ADDR_VAR 0 5
75025: PUSH
75026: LD_VAR 0 10
75030: PUSH
75031: LD_VAR 0 7
75035: ARRAY
75036: PUSH
75037: FOR_IN
75038: IFFALSE 75079
// if GetBWeapon ( i ) = j [ 1 ] then
75040: LD_VAR 0 4
75044: PPUSH
75045: CALL_OW 269
75049: PUSH
75050: LD_VAR 0 5
75054: PUSH
75055: LD_INT 1
75057: ARRAY
75058: EQUAL
75059: IFFALSE 75077
// begin weapon := j [ 2 ] ;
75061: LD_ADDR_VAR 0 8
75065: PUSH
75066: LD_VAR 0 5
75070: PUSH
75071: LD_INT 2
75073: ARRAY
75074: ST_TO_ADDR
// break ;
75075: GO 75079
// end ;
75077: GO 75037
75079: POP
75080: POP
// if not weapon then
75081: LD_VAR 0 8
75085: NOT
75086: IFFALSE 75090
// continue ;
75088: GO 74986
// for k in factories do
75090: LD_ADDR_VAR 0 6
75094: PUSH
75095: LD_VAR 0 2
75099: PUSH
75100: FOR_IN
75101: IFFALSE 75166
// begin weapons := AvailableWeaponList ( k ) ;
75103: LD_ADDR_VAR 0 9
75107: PUSH
75108: LD_VAR 0 6
75112: PPUSH
75113: CALL_OW 478
75117: ST_TO_ADDR
// if not weapons then
75118: LD_VAR 0 9
75122: NOT
75123: IFFALSE 75127
// continue ;
75125: GO 75100
// if weapon in weapons then
75127: LD_VAR 0 8
75131: PUSH
75132: LD_VAR 0 9
75136: IN
75137: IFFALSE 75164
// begin result := [ i , weapon ] ;
75139: LD_ADDR_VAR 0 3
75143: PUSH
75144: LD_VAR 0 4
75148: PUSH
75149: LD_VAR 0 8
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: ST_TO_ADDR
// exit ;
75158: POP
75159: POP
75160: POP
75161: POP
75162: GO 75172
// end ; end ;
75164: GO 75100
75166: POP
75167: POP
// end ;
75168: GO 74986
75170: POP
75171: POP
// end ;
75172: LD_VAR 0 3
75176: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75177: LD_INT 0
75179: PPUSH
// if not side or side > 8 then
75180: LD_VAR 0 3
75184: NOT
75185: PUSH
75186: LD_VAR 0 3
75190: PUSH
75191: LD_INT 8
75193: GREATER
75194: OR
75195: IFFALSE 75199
// exit ;
75197: GO 75258
// if not range then
75199: LD_VAR 0 4
75203: NOT
75204: IFFALSE 75215
// range := - 12 ;
75206: LD_ADDR_VAR 0 4
75210: PUSH
75211: LD_INT 12
75213: NEG
75214: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75215: LD_VAR 0 1
75219: PPUSH
75220: LD_VAR 0 2
75224: PPUSH
75225: LD_VAR 0 3
75229: PPUSH
75230: LD_VAR 0 4
75234: PPUSH
75235: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75239: LD_VAR 0 1
75243: PPUSH
75244: LD_VAR 0 2
75248: PPUSH
75249: LD_VAR 0 3
75253: PPUSH
75254: CALL_OW 331
// end ;
75258: LD_VAR 0 5
75262: RET
// export function Video ( mode ) ; begin
75263: LD_INT 0
75265: PPUSH
// ingame_video = mode ;
75266: LD_ADDR_OWVAR 52
75270: PUSH
75271: LD_VAR 0 1
75275: ST_TO_ADDR
// interface_hidden = mode ;
75276: LD_ADDR_OWVAR 54
75280: PUSH
75281: LD_VAR 0 1
75285: ST_TO_ADDR
// end ;
75286: LD_VAR 0 2
75290: RET
// export function Join ( array , element ) ; begin
75291: LD_INT 0
75293: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75294: LD_ADDR_VAR 0 3
75298: PUSH
75299: LD_VAR 0 1
75303: PPUSH
75304: LD_VAR 0 1
75308: PUSH
75309: LD_INT 1
75311: PLUS
75312: PPUSH
75313: LD_VAR 0 2
75317: PPUSH
75318: CALL_OW 1
75322: ST_TO_ADDR
// end ;
75323: LD_VAR 0 3
75327: RET
// export function JoinUnion ( array , element ) ; begin
75328: LD_INT 0
75330: PPUSH
// result := array union element ;
75331: LD_ADDR_VAR 0 3
75335: PUSH
75336: LD_VAR 0 1
75340: PUSH
75341: LD_VAR 0 2
75345: UNION
75346: ST_TO_ADDR
// end ;
75347: LD_VAR 0 3
75351: RET
// export function GetBehemoths ( side ) ; begin
75352: LD_INT 0
75354: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75355: LD_ADDR_VAR 0 2
75359: PUSH
75360: LD_INT 22
75362: PUSH
75363: LD_VAR 0 1
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 31
75374: PUSH
75375: LD_INT 25
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PPUSH
75386: CALL_OW 69
75390: ST_TO_ADDR
// end ;
75391: LD_VAR 0 2
75395: RET
// export function Shuffle ( array ) ; var i , index ; begin
75396: LD_INT 0
75398: PPUSH
75399: PPUSH
75400: PPUSH
// result := [ ] ;
75401: LD_ADDR_VAR 0 2
75405: PUSH
75406: EMPTY
75407: ST_TO_ADDR
// if not array then
75408: LD_VAR 0 1
75412: NOT
75413: IFFALSE 75417
// exit ;
75415: GO 75516
// Randomize ;
75417: CALL_OW 10
// for i = array downto 1 do
75421: LD_ADDR_VAR 0 3
75425: PUSH
75426: DOUBLE
75427: LD_VAR 0 1
75431: INC
75432: ST_TO_ADDR
75433: LD_INT 1
75435: PUSH
75436: FOR_DOWNTO
75437: IFFALSE 75514
// begin index := rand ( 1 , array ) ;
75439: LD_ADDR_VAR 0 4
75443: PUSH
75444: LD_INT 1
75446: PPUSH
75447: LD_VAR 0 1
75451: PPUSH
75452: CALL_OW 12
75456: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75457: LD_ADDR_VAR 0 2
75461: PUSH
75462: LD_VAR 0 2
75466: PPUSH
75467: LD_VAR 0 2
75471: PUSH
75472: LD_INT 1
75474: PLUS
75475: PPUSH
75476: LD_VAR 0 1
75480: PUSH
75481: LD_VAR 0 4
75485: ARRAY
75486: PPUSH
75487: CALL_OW 2
75491: ST_TO_ADDR
// array := Delete ( array , index ) ;
75492: LD_ADDR_VAR 0 1
75496: PUSH
75497: LD_VAR 0 1
75501: PPUSH
75502: LD_VAR 0 4
75506: PPUSH
75507: CALL_OW 3
75511: ST_TO_ADDR
// end ;
75512: GO 75436
75514: POP
75515: POP
// end ;
75516: LD_VAR 0 2
75520: RET
// export function GetBaseMaterials ( base ) ; begin
75521: LD_INT 0
75523: PPUSH
// result := [ 0 , 0 , 0 ] ;
75524: LD_ADDR_VAR 0 2
75528: PUSH
75529: LD_INT 0
75531: PUSH
75532: LD_INT 0
75534: PUSH
75535: LD_INT 0
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: LIST
75542: ST_TO_ADDR
// if not base then
75543: LD_VAR 0 1
75547: NOT
75548: IFFALSE 75552
// exit ;
75550: GO 75601
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75552: LD_ADDR_VAR 0 2
75556: PUSH
75557: LD_VAR 0 1
75561: PPUSH
75562: LD_INT 1
75564: PPUSH
75565: CALL_OW 275
75569: PUSH
75570: LD_VAR 0 1
75574: PPUSH
75575: LD_INT 2
75577: PPUSH
75578: CALL_OW 275
75582: PUSH
75583: LD_VAR 0 1
75587: PPUSH
75588: LD_INT 3
75590: PPUSH
75591: CALL_OW 275
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: ST_TO_ADDR
// end ;
75601: LD_VAR 0 2
75605: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75606: LD_INT 0
75608: PPUSH
75609: PPUSH
// result := array ;
75610: LD_ADDR_VAR 0 3
75614: PUSH
75615: LD_VAR 0 1
75619: ST_TO_ADDR
// if size >= result then
75620: LD_VAR 0 2
75624: PUSH
75625: LD_VAR 0 3
75629: GREATEREQUAL
75630: IFFALSE 75634
// exit ;
75632: GO 75684
// if size then
75634: LD_VAR 0 2
75638: IFFALSE 75684
// for i := array downto size do
75640: LD_ADDR_VAR 0 4
75644: PUSH
75645: DOUBLE
75646: LD_VAR 0 1
75650: INC
75651: ST_TO_ADDR
75652: LD_VAR 0 2
75656: PUSH
75657: FOR_DOWNTO
75658: IFFALSE 75682
// result := Delete ( result , result ) ;
75660: LD_ADDR_VAR 0 3
75664: PUSH
75665: LD_VAR 0 3
75669: PPUSH
75670: LD_VAR 0 3
75674: PPUSH
75675: CALL_OW 3
75679: ST_TO_ADDR
75680: GO 75657
75682: POP
75683: POP
// end ;
75684: LD_VAR 0 3
75688: RET
// export function ComExit ( unit ) ; var tmp ; begin
75689: LD_INT 0
75691: PPUSH
75692: PPUSH
// if not IsInUnit ( unit ) then
75693: LD_VAR 0 1
75697: PPUSH
75698: CALL_OW 310
75702: NOT
75703: IFFALSE 75707
// exit ;
75705: GO 75767
// tmp := IsInUnit ( unit ) ;
75707: LD_ADDR_VAR 0 3
75711: PUSH
75712: LD_VAR 0 1
75716: PPUSH
75717: CALL_OW 310
75721: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75722: LD_VAR 0 3
75726: PPUSH
75727: CALL_OW 247
75731: PUSH
75732: LD_INT 2
75734: EQUAL
75735: IFFALSE 75748
// ComExitVehicle ( unit ) else
75737: LD_VAR 0 1
75741: PPUSH
75742: CALL_OW 121
75746: GO 75757
// ComExitBuilding ( unit ) ;
75748: LD_VAR 0 1
75752: PPUSH
75753: CALL_OW 122
// result := tmp ;
75757: LD_ADDR_VAR 0 2
75761: PUSH
75762: LD_VAR 0 3
75766: ST_TO_ADDR
// end ;
75767: LD_VAR 0 2
75771: RET
// export function ComExitAll ( units ) ; var i ; begin
75772: LD_INT 0
75774: PPUSH
75775: PPUSH
// if not units then
75776: LD_VAR 0 1
75780: NOT
75781: IFFALSE 75785
// exit ;
75783: GO 75811
// for i in units do
75785: LD_ADDR_VAR 0 3
75789: PUSH
75790: LD_VAR 0 1
75794: PUSH
75795: FOR_IN
75796: IFFALSE 75809
// ComExit ( i ) ;
75798: LD_VAR 0 3
75802: PPUSH
75803: CALL 75689 0 1
75807: GO 75795
75809: POP
75810: POP
// end ;
75811: LD_VAR 0 2
75815: RET
// export function ResetHc ; begin
75816: LD_INT 0
75818: PPUSH
// InitHc ;
75819: CALL_OW 19
// hc_importance := 0 ;
75823: LD_ADDR_OWVAR 32
75827: PUSH
75828: LD_INT 0
75830: ST_TO_ADDR
// end ;
75831: LD_VAR 0 1
75835: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75836: LD_INT 0
75838: PPUSH
75839: PPUSH
75840: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75841: LD_ADDR_VAR 0 6
75845: PUSH
75846: LD_VAR 0 1
75850: PUSH
75851: LD_VAR 0 3
75855: PLUS
75856: PUSH
75857: LD_INT 2
75859: DIV
75860: ST_TO_ADDR
// if _x < 0 then
75861: LD_VAR 0 6
75865: PUSH
75866: LD_INT 0
75868: LESS
75869: IFFALSE 75886
// _x := _x * - 1 ;
75871: LD_ADDR_VAR 0 6
75875: PUSH
75876: LD_VAR 0 6
75880: PUSH
75881: LD_INT 1
75883: NEG
75884: MUL
75885: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75886: LD_ADDR_VAR 0 7
75890: PUSH
75891: LD_VAR 0 2
75895: PUSH
75896: LD_VAR 0 4
75900: PLUS
75901: PUSH
75902: LD_INT 2
75904: DIV
75905: ST_TO_ADDR
// if _y < 0 then
75906: LD_VAR 0 7
75910: PUSH
75911: LD_INT 0
75913: LESS
75914: IFFALSE 75931
// _y := _y * - 1 ;
75916: LD_ADDR_VAR 0 7
75920: PUSH
75921: LD_VAR 0 7
75925: PUSH
75926: LD_INT 1
75928: NEG
75929: MUL
75930: ST_TO_ADDR
// result := [ _x , _y ] ;
75931: LD_ADDR_VAR 0 5
75935: PUSH
75936: LD_VAR 0 6
75940: PUSH
75941: LD_VAR 0 7
75945: PUSH
75946: EMPTY
75947: LIST
75948: LIST
75949: ST_TO_ADDR
// end ;
75950: LD_VAR 0 5
75954: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75955: LD_INT 0
75957: PPUSH
75958: PPUSH
75959: PPUSH
75960: PPUSH
// task := GetTaskList ( unit ) ;
75961: LD_ADDR_VAR 0 7
75965: PUSH
75966: LD_VAR 0 1
75970: PPUSH
75971: CALL_OW 437
75975: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75976: LD_VAR 0 7
75980: NOT
75981: PUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: LD_VAR 0 2
75991: PPUSH
75992: CALL_OW 308
75996: NOT
75997: AND
75998: IFFALSE 76002
// exit ;
76000: GO 76120
// if IsInArea ( unit , area ) then
76002: LD_VAR 0 1
76006: PPUSH
76007: LD_VAR 0 2
76011: PPUSH
76012: CALL_OW 308
76016: IFFALSE 76034
// begin ComMoveToArea ( unit , goAway ) ;
76018: LD_VAR 0 1
76022: PPUSH
76023: LD_VAR 0 3
76027: PPUSH
76028: CALL_OW 113
// exit ;
76032: GO 76120
// end ; if task [ 1 ] [ 1 ] <> M then
76034: LD_VAR 0 7
76038: PUSH
76039: LD_INT 1
76041: ARRAY
76042: PUSH
76043: LD_INT 1
76045: ARRAY
76046: PUSH
76047: LD_STRING M
76049: NONEQUAL
76050: IFFALSE 76054
// exit ;
76052: GO 76120
// x := task [ 1 ] [ 2 ] ;
76054: LD_ADDR_VAR 0 5
76058: PUSH
76059: LD_VAR 0 7
76063: PUSH
76064: LD_INT 1
76066: ARRAY
76067: PUSH
76068: LD_INT 2
76070: ARRAY
76071: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76072: LD_ADDR_VAR 0 6
76076: PUSH
76077: LD_VAR 0 7
76081: PUSH
76082: LD_INT 1
76084: ARRAY
76085: PUSH
76086: LD_INT 3
76088: ARRAY
76089: ST_TO_ADDR
// if InArea ( x , y , area ) then
76090: LD_VAR 0 5
76094: PPUSH
76095: LD_VAR 0 6
76099: PPUSH
76100: LD_VAR 0 2
76104: PPUSH
76105: CALL_OW 309
76109: IFFALSE 76120
// ComStop ( unit ) ;
76111: LD_VAR 0 1
76115: PPUSH
76116: CALL_OW 141
// end ;
76120: LD_VAR 0 4
76124: RET
// export function Abs ( value ) ; begin
76125: LD_INT 0
76127: PPUSH
// result := value ;
76128: LD_ADDR_VAR 0 2
76132: PUSH
76133: LD_VAR 0 1
76137: ST_TO_ADDR
// if value < 0 then
76138: LD_VAR 0 1
76142: PUSH
76143: LD_INT 0
76145: LESS
76146: IFFALSE 76163
// result := value * - 1 ;
76148: LD_ADDR_VAR 0 2
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_INT 1
76160: NEG
76161: MUL
76162: ST_TO_ADDR
// end ;
76163: LD_VAR 0 2
76167: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76168: LD_INT 0
76170: PPUSH
76171: PPUSH
76172: PPUSH
76173: PPUSH
76174: PPUSH
76175: PPUSH
76176: PPUSH
76177: PPUSH
// if not unit or not building then
76178: LD_VAR 0 1
76182: NOT
76183: PUSH
76184: LD_VAR 0 2
76188: NOT
76189: OR
76190: IFFALSE 76194
// exit ;
76192: GO 76420
// x := GetX ( building ) ;
76194: LD_ADDR_VAR 0 4
76198: PUSH
76199: LD_VAR 0 2
76203: PPUSH
76204: CALL_OW 250
76208: ST_TO_ADDR
// y := GetY ( building ) ;
76209: LD_ADDR_VAR 0 6
76213: PUSH
76214: LD_VAR 0 2
76218: PPUSH
76219: CALL_OW 251
76223: ST_TO_ADDR
// d := GetDir ( building ) ;
76224: LD_ADDR_VAR 0 8
76228: PUSH
76229: LD_VAR 0 2
76233: PPUSH
76234: CALL_OW 254
76238: ST_TO_ADDR
// r := 4 ;
76239: LD_ADDR_VAR 0 9
76243: PUSH
76244: LD_INT 4
76246: ST_TO_ADDR
// for i := 1 to 5 do
76247: LD_ADDR_VAR 0 10
76251: PUSH
76252: DOUBLE
76253: LD_INT 1
76255: DEC
76256: ST_TO_ADDR
76257: LD_INT 5
76259: PUSH
76260: FOR_TO
76261: IFFALSE 76418
// begin _x := ShiftX ( x , d , r + i ) ;
76263: LD_ADDR_VAR 0 5
76267: PUSH
76268: LD_VAR 0 4
76272: PPUSH
76273: LD_VAR 0 8
76277: PPUSH
76278: LD_VAR 0 9
76282: PUSH
76283: LD_VAR 0 10
76287: PLUS
76288: PPUSH
76289: CALL_OW 272
76293: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76294: LD_ADDR_VAR 0 7
76298: PUSH
76299: LD_VAR 0 6
76303: PPUSH
76304: LD_VAR 0 8
76308: PPUSH
76309: LD_VAR 0 9
76313: PUSH
76314: LD_VAR 0 10
76318: PLUS
76319: PPUSH
76320: CALL_OW 273
76324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76325: LD_VAR 0 5
76329: PPUSH
76330: LD_VAR 0 7
76334: PPUSH
76335: CALL_OW 488
76339: PUSH
76340: LD_VAR 0 5
76344: PPUSH
76345: LD_VAR 0 7
76349: PPUSH
76350: CALL_OW 428
76354: PPUSH
76355: CALL_OW 247
76359: PUSH
76360: LD_INT 3
76362: PUSH
76363: LD_INT 2
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: IN
76370: NOT
76371: AND
76372: IFFALSE 76416
// begin ComMoveXY ( unit , _x , _y ) ;
76374: LD_VAR 0 1
76378: PPUSH
76379: LD_VAR 0 5
76383: PPUSH
76384: LD_VAR 0 7
76388: PPUSH
76389: CALL_OW 111
// result := [ _x , _y ] ;
76393: LD_ADDR_VAR 0 3
76397: PUSH
76398: LD_VAR 0 5
76402: PUSH
76403: LD_VAR 0 7
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: ST_TO_ADDR
// exit ;
76412: POP
76413: POP
76414: GO 76420
// end ; end ;
76416: GO 76260
76418: POP
76419: POP
// end ;
76420: LD_VAR 0 3
76424: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76425: LD_INT 0
76427: PPUSH
76428: PPUSH
76429: PPUSH
// result := 0 ;
76430: LD_ADDR_VAR 0 3
76434: PUSH
76435: LD_INT 0
76437: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76438: LD_VAR 0 1
76442: PUSH
76443: LD_INT 0
76445: LESS
76446: PUSH
76447: LD_VAR 0 1
76451: PUSH
76452: LD_INT 8
76454: GREATER
76455: OR
76456: PUSH
76457: LD_VAR 0 2
76461: PUSH
76462: LD_INT 0
76464: LESS
76465: OR
76466: PUSH
76467: LD_VAR 0 2
76471: PUSH
76472: LD_INT 8
76474: GREATER
76475: OR
76476: IFFALSE 76480
// exit ;
76478: GO 76555
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76480: LD_ADDR_VAR 0 4
76484: PUSH
76485: LD_INT 22
76487: PUSH
76488: LD_VAR 0 2
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PPUSH
76497: CALL_OW 69
76501: PUSH
76502: FOR_IN
76503: IFFALSE 76553
// begin un := UnitShoot ( i ) ;
76505: LD_ADDR_VAR 0 5
76509: PUSH
76510: LD_VAR 0 4
76514: PPUSH
76515: CALL_OW 504
76519: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76520: LD_VAR 0 5
76524: PPUSH
76525: CALL_OW 255
76529: PUSH
76530: LD_VAR 0 1
76534: EQUAL
76535: IFFALSE 76551
// begin result := un ;
76537: LD_ADDR_VAR 0 3
76541: PUSH
76542: LD_VAR 0 5
76546: ST_TO_ADDR
// exit ;
76547: POP
76548: POP
76549: GO 76555
// end ; end ;
76551: GO 76502
76553: POP
76554: POP
// end ;
76555: LD_VAR 0 3
76559: RET
// export function GetCargoBay ( units ) ; begin
76560: LD_INT 0
76562: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76563: LD_ADDR_VAR 0 2
76567: PUSH
76568: LD_VAR 0 1
76572: PPUSH
76573: LD_INT 2
76575: PUSH
76576: LD_INT 34
76578: PUSH
76579: LD_INT 12
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: LD_INT 34
76588: PUSH
76589: LD_INT 51
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: PUSH
76596: LD_INT 34
76598: PUSH
76599: LD_INT 32
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: LD_INT 34
76608: PUSH
76609: LD_INT 89
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: PPUSH
76623: CALL_OW 72
76627: ST_TO_ADDR
// end ;
76628: LD_VAR 0 2
76632: RET
// export function Negate ( value ) ; begin
76633: LD_INT 0
76635: PPUSH
// result := not value ;
76636: LD_ADDR_VAR 0 2
76640: PUSH
76641: LD_VAR 0 1
76645: NOT
76646: ST_TO_ADDR
// end ;
76647: LD_VAR 0 2
76651: RET
// export function Inc ( value ) ; begin
76652: LD_INT 0
76654: PPUSH
// result := value + 1 ;
76655: LD_ADDR_VAR 0 2
76659: PUSH
76660: LD_VAR 0 1
76664: PUSH
76665: LD_INT 1
76667: PLUS
76668: ST_TO_ADDR
// end ;
76669: LD_VAR 0 2
76673: RET
// export function Dec ( value ) ; begin
76674: LD_INT 0
76676: PPUSH
// result := value - 1 ;
76677: LD_ADDR_VAR 0 2
76681: PUSH
76682: LD_VAR 0 1
76686: PUSH
76687: LD_INT 1
76689: MINUS
76690: ST_TO_ADDR
// end ;
76691: LD_VAR 0 2
76695: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76696: LD_INT 0
76698: PPUSH
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76706: LD_VAR 0 1
76710: PPUSH
76711: LD_VAR 0 2
76715: PPUSH
76716: CALL_OW 488
76720: NOT
76721: PUSH
76722: LD_VAR 0 3
76726: PPUSH
76727: LD_VAR 0 4
76731: PPUSH
76732: CALL_OW 488
76736: NOT
76737: OR
76738: IFFALSE 76751
// begin result := - 1 ;
76740: LD_ADDR_VAR 0 5
76744: PUSH
76745: LD_INT 1
76747: NEG
76748: ST_TO_ADDR
// exit ;
76749: GO 76986
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76751: LD_ADDR_VAR 0 12
76755: PUSH
76756: LD_VAR 0 1
76760: PPUSH
76761: LD_VAR 0 2
76765: PPUSH
76766: LD_VAR 0 3
76770: PPUSH
76771: LD_VAR 0 4
76775: PPUSH
76776: CALL 75836 0 4
76780: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76781: LD_ADDR_VAR 0 11
76785: PUSH
76786: LD_VAR 0 1
76790: PPUSH
76791: LD_VAR 0 2
76795: PPUSH
76796: LD_VAR 0 12
76800: PUSH
76801: LD_INT 1
76803: ARRAY
76804: PPUSH
76805: LD_VAR 0 12
76809: PUSH
76810: LD_INT 2
76812: ARRAY
76813: PPUSH
76814: CALL_OW 298
76818: ST_TO_ADDR
// distance := 9999 ;
76819: LD_ADDR_VAR 0 10
76823: PUSH
76824: LD_INT 9999
76826: ST_TO_ADDR
// for i := 0 to 5 do
76827: LD_ADDR_VAR 0 6
76831: PUSH
76832: DOUBLE
76833: LD_INT 0
76835: DEC
76836: ST_TO_ADDR
76837: LD_INT 5
76839: PUSH
76840: FOR_TO
76841: IFFALSE 76984
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76843: LD_ADDR_VAR 0 7
76847: PUSH
76848: LD_VAR 0 1
76852: PPUSH
76853: LD_VAR 0 6
76857: PPUSH
76858: LD_VAR 0 11
76862: PPUSH
76863: CALL_OW 272
76867: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76868: LD_ADDR_VAR 0 8
76872: PUSH
76873: LD_VAR 0 2
76877: PPUSH
76878: LD_VAR 0 6
76882: PPUSH
76883: LD_VAR 0 11
76887: PPUSH
76888: CALL_OW 273
76892: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76893: LD_VAR 0 7
76897: PPUSH
76898: LD_VAR 0 8
76902: PPUSH
76903: CALL_OW 488
76907: NOT
76908: IFFALSE 76912
// continue ;
76910: GO 76840
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76912: LD_ADDR_VAR 0 9
76916: PUSH
76917: LD_VAR 0 12
76921: PUSH
76922: LD_INT 1
76924: ARRAY
76925: PPUSH
76926: LD_VAR 0 12
76930: PUSH
76931: LD_INT 2
76933: ARRAY
76934: PPUSH
76935: LD_VAR 0 7
76939: PPUSH
76940: LD_VAR 0 8
76944: PPUSH
76945: CALL_OW 298
76949: ST_TO_ADDR
// if tmp < distance then
76950: LD_VAR 0 9
76954: PUSH
76955: LD_VAR 0 10
76959: LESS
76960: IFFALSE 76982
// begin result := i ;
76962: LD_ADDR_VAR 0 5
76966: PUSH
76967: LD_VAR 0 6
76971: ST_TO_ADDR
// distance := tmp ;
76972: LD_ADDR_VAR 0 10
76976: PUSH
76977: LD_VAR 0 9
76981: ST_TO_ADDR
// end ; end ;
76982: GO 76840
76984: POP
76985: POP
// end ;
76986: LD_VAR 0 5
76990: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76991: LD_INT 0
76993: PPUSH
76994: PPUSH
// if not driver or not IsInUnit ( driver ) then
76995: LD_VAR 0 1
76999: NOT
77000: PUSH
77001: LD_VAR 0 1
77005: PPUSH
77006: CALL_OW 310
77010: NOT
77011: OR
77012: IFFALSE 77016
// exit ;
77014: GO 77106
// vehicle := IsInUnit ( driver ) ;
77016: LD_ADDR_VAR 0 3
77020: PUSH
77021: LD_VAR 0 1
77025: PPUSH
77026: CALL_OW 310
77030: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77031: LD_VAR 0 1
77035: PPUSH
77036: LD_STRING \
77038: PUSH
77039: LD_INT 0
77041: PUSH
77042: LD_INT 0
77044: PUSH
77045: LD_INT 0
77047: PUSH
77048: LD_INT 0
77050: PUSH
77051: LD_INT 0
77053: PUSH
77054: LD_INT 0
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: PUSH
77066: LD_STRING E
77068: PUSH
77069: LD_INT 0
77071: PUSH
77072: LD_INT 0
77074: PUSH
77075: LD_VAR 0 3
77079: PUSH
77080: LD_INT 0
77082: PUSH
77083: LD_INT 0
77085: PUSH
77086: LD_INT 0
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: PPUSH
77102: CALL_OW 446
// end ;
77106: LD_VAR 0 2
77110: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77111: LD_INT 0
77113: PPUSH
77114: PPUSH
// if not driver or not IsInUnit ( driver ) then
77115: LD_VAR 0 1
77119: NOT
77120: PUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL_OW 310
77130: NOT
77131: OR
77132: IFFALSE 77136
// exit ;
77134: GO 77226
// vehicle := IsInUnit ( driver ) ;
77136: LD_ADDR_VAR 0 3
77140: PUSH
77141: LD_VAR 0 1
77145: PPUSH
77146: CALL_OW 310
77150: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77151: LD_VAR 0 1
77155: PPUSH
77156: LD_STRING \
77158: PUSH
77159: LD_INT 0
77161: PUSH
77162: LD_INT 0
77164: PUSH
77165: LD_INT 0
77167: PUSH
77168: LD_INT 0
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: LD_INT 0
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: PUSH
77186: LD_STRING E
77188: PUSH
77189: LD_INT 0
77191: PUSH
77192: LD_INT 0
77194: PUSH
77195: LD_VAR 0 3
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: LD_INT 0
77205: PUSH
77206: LD_INT 0
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PPUSH
77222: CALL_OW 447
// end ;
77226: LD_VAR 0 2
77230: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77231: LD_INT 0
77233: PPUSH
77234: PPUSH
77235: PPUSH
// tmp := [ ] ;
77236: LD_ADDR_VAR 0 5
77240: PUSH
77241: EMPTY
77242: ST_TO_ADDR
// for i in units do
77243: LD_ADDR_VAR 0 4
77247: PUSH
77248: LD_VAR 0 1
77252: PUSH
77253: FOR_IN
77254: IFFALSE 77292
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77256: LD_ADDR_VAR 0 5
77260: PUSH
77261: LD_VAR 0 5
77265: PPUSH
77266: LD_VAR 0 5
77270: PUSH
77271: LD_INT 1
77273: PLUS
77274: PPUSH
77275: LD_VAR 0 4
77279: PPUSH
77280: CALL_OW 256
77284: PPUSH
77285: CALL_OW 2
77289: ST_TO_ADDR
77290: GO 77253
77292: POP
77293: POP
// if not tmp then
77294: LD_VAR 0 5
77298: NOT
77299: IFFALSE 77303
// exit ;
77301: GO 77351
// if asc then
77303: LD_VAR 0 2
77307: IFFALSE 77331
// result := SortListByListAsc ( units , tmp ) else
77309: LD_ADDR_VAR 0 3
77313: PUSH
77314: LD_VAR 0 1
77318: PPUSH
77319: LD_VAR 0 5
77323: PPUSH
77324: CALL_OW 76
77328: ST_TO_ADDR
77329: GO 77351
// result := SortListByListDesc ( units , tmp ) ;
77331: LD_ADDR_VAR 0 3
77335: PUSH
77336: LD_VAR 0 1
77340: PPUSH
77341: LD_VAR 0 5
77345: PPUSH
77346: CALL_OW 77
77350: ST_TO_ADDR
// end ;
77351: LD_VAR 0 3
77355: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77356: LD_INT 0
77358: PPUSH
77359: PPUSH
// task := GetTaskList ( mech ) ;
77360: LD_ADDR_VAR 0 4
77364: PUSH
77365: LD_VAR 0 1
77369: PPUSH
77370: CALL_OW 437
77374: ST_TO_ADDR
// if not task then
77375: LD_VAR 0 4
77379: NOT
77380: IFFALSE 77384
// exit ;
77382: GO 77426
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77384: LD_ADDR_VAR 0 3
77388: PUSH
77389: LD_VAR 0 4
77393: PUSH
77394: LD_INT 1
77396: ARRAY
77397: PUSH
77398: LD_INT 1
77400: ARRAY
77401: PUSH
77402: LD_STRING r
77404: EQUAL
77405: PUSH
77406: LD_VAR 0 4
77410: PUSH
77411: LD_INT 1
77413: ARRAY
77414: PUSH
77415: LD_INT 4
77417: ARRAY
77418: PUSH
77419: LD_VAR 0 2
77423: EQUAL
77424: AND
77425: ST_TO_ADDR
// end ;
77426: LD_VAR 0 3
77430: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77431: LD_INT 0
77433: PPUSH
// SetDir ( unit , d ) ;
77434: LD_VAR 0 1
77438: PPUSH
77439: LD_VAR 0 4
77443: PPUSH
77444: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77448: LD_VAR 0 1
77452: PPUSH
77453: LD_VAR 0 2
77457: PPUSH
77458: LD_VAR 0 3
77462: PPUSH
77463: LD_VAR 0 5
77467: PPUSH
77468: CALL_OW 48
// end ;
77472: LD_VAR 0 6
77476: RET
// export function ToNaturalNumber ( number ) ; begin
77477: LD_INT 0
77479: PPUSH
// result := number div 1 ;
77480: LD_ADDR_VAR 0 2
77484: PUSH
77485: LD_VAR 0 1
77489: PUSH
77490: LD_INT 1
77492: DIV
77493: ST_TO_ADDR
// if number < 0 then
77494: LD_VAR 0 1
77498: PUSH
77499: LD_INT 0
77501: LESS
77502: IFFALSE 77512
// result := 0 ;
77504: LD_ADDR_VAR 0 2
77508: PUSH
77509: LD_INT 0
77511: ST_TO_ADDR
// end ;
77512: LD_VAR 0 2
77516: RET
// export function SortByClass ( units , class ) ; var un ; begin
77517: LD_INT 0
77519: PPUSH
77520: PPUSH
// if not units or not class then
77521: LD_VAR 0 1
77525: NOT
77526: PUSH
77527: LD_VAR 0 2
77531: NOT
77532: OR
77533: IFFALSE 77537
// exit ;
77535: GO 77632
// result := [ ] ;
77537: LD_ADDR_VAR 0 3
77541: PUSH
77542: EMPTY
77543: ST_TO_ADDR
// for un in units do
77544: LD_ADDR_VAR 0 4
77548: PUSH
77549: LD_VAR 0 1
77553: PUSH
77554: FOR_IN
77555: IFFALSE 77630
// if GetClass ( un ) = class then
77557: LD_VAR 0 4
77561: PPUSH
77562: CALL_OW 257
77566: PUSH
77567: LD_VAR 0 2
77571: EQUAL
77572: IFFALSE 77599
// result := Insert ( result , 1 , un ) else
77574: LD_ADDR_VAR 0 3
77578: PUSH
77579: LD_VAR 0 3
77583: PPUSH
77584: LD_INT 1
77586: PPUSH
77587: LD_VAR 0 4
77591: PPUSH
77592: CALL_OW 2
77596: ST_TO_ADDR
77597: GO 77628
// result := Replace ( result , result + 1 , un ) ;
77599: LD_ADDR_VAR 0 3
77603: PUSH
77604: LD_VAR 0 3
77608: PPUSH
77609: LD_VAR 0 3
77613: PUSH
77614: LD_INT 1
77616: PLUS
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: CALL_OW 1
77627: ST_TO_ADDR
77628: GO 77554
77630: POP
77631: POP
// end ;
77632: LD_VAR 0 3
77636: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77637: LD_INT 0
77639: PPUSH
77640: PPUSH
77641: PPUSH
77642: PPUSH
77643: PPUSH
77644: PPUSH
77645: PPUSH
// result := [ ] ;
77646: LD_ADDR_VAR 0 4
77650: PUSH
77651: EMPTY
77652: ST_TO_ADDR
// if x - r < 0 then
77653: LD_VAR 0 1
77657: PUSH
77658: LD_VAR 0 3
77662: MINUS
77663: PUSH
77664: LD_INT 0
77666: LESS
77667: IFFALSE 77679
// min_x := 0 else
77669: LD_ADDR_VAR 0 8
77673: PUSH
77674: LD_INT 0
77676: ST_TO_ADDR
77677: GO 77695
// min_x := x - r ;
77679: LD_ADDR_VAR 0 8
77683: PUSH
77684: LD_VAR 0 1
77688: PUSH
77689: LD_VAR 0 3
77693: MINUS
77694: ST_TO_ADDR
// if y - r < 0 then
77695: LD_VAR 0 2
77699: PUSH
77700: LD_VAR 0 3
77704: MINUS
77705: PUSH
77706: LD_INT 0
77708: LESS
77709: IFFALSE 77721
// min_y := 0 else
77711: LD_ADDR_VAR 0 7
77715: PUSH
77716: LD_INT 0
77718: ST_TO_ADDR
77719: GO 77737
// min_y := y - r ;
77721: LD_ADDR_VAR 0 7
77725: PUSH
77726: LD_VAR 0 2
77730: PUSH
77731: LD_VAR 0 3
77735: MINUS
77736: ST_TO_ADDR
// max_x := x + r ;
77737: LD_ADDR_VAR 0 9
77741: PUSH
77742: LD_VAR 0 1
77746: PUSH
77747: LD_VAR 0 3
77751: PLUS
77752: ST_TO_ADDR
// max_y := y + r ;
77753: LD_ADDR_VAR 0 10
77757: PUSH
77758: LD_VAR 0 2
77762: PUSH
77763: LD_VAR 0 3
77767: PLUS
77768: ST_TO_ADDR
// for _x = min_x to max_x do
77769: LD_ADDR_VAR 0 5
77773: PUSH
77774: DOUBLE
77775: LD_VAR 0 8
77779: DEC
77780: ST_TO_ADDR
77781: LD_VAR 0 9
77785: PUSH
77786: FOR_TO
77787: IFFALSE 77888
// for _y = min_y to max_y do
77789: LD_ADDR_VAR 0 6
77793: PUSH
77794: DOUBLE
77795: LD_VAR 0 7
77799: DEC
77800: ST_TO_ADDR
77801: LD_VAR 0 10
77805: PUSH
77806: FOR_TO
77807: IFFALSE 77884
// begin if not ValidHex ( _x , _y ) then
77809: LD_VAR 0 5
77813: PPUSH
77814: LD_VAR 0 6
77818: PPUSH
77819: CALL_OW 488
77823: NOT
77824: IFFALSE 77828
// continue ;
77826: GO 77806
// if GetResourceTypeXY ( _x , _y ) then
77828: LD_VAR 0 5
77832: PPUSH
77833: LD_VAR 0 6
77837: PPUSH
77838: CALL_OW 283
77842: IFFALSE 77882
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77844: LD_ADDR_VAR 0 4
77848: PUSH
77849: LD_VAR 0 4
77853: PPUSH
77854: LD_VAR 0 4
77858: PUSH
77859: LD_INT 1
77861: PLUS
77862: PPUSH
77863: LD_VAR 0 5
77867: PUSH
77868: LD_VAR 0 6
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PPUSH
77877: CALL_OW 1
77881: ST_TO_ADDR
// end ;
77882: GO 77806
77884: POP
77885: POP
77886: GO 77786
77888: POP
77889: POP
// end ;
77890: LD_VAR 0 4
77894: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77895: LD_INT 0
77897: PPUSH
77898: PPUSH
77899: PPUSH
77900: PPUSH
77901: PPUSH
77902: PPUSH
77903: PPUSH
77904: PPUSH
// if not units then
77905: LD_VAR 0 1
77909: NOT
77910: IFFALSE 77914
// exit ;
77912: GO 78438
// result := UnitFilter ( units , [ f_ok ] ) ;
77914: LD_ADDR_VAR 0 3
77918: PUSH
77919: LD_VAR 0 1
77923: PPUSH
77924: LD_INT 50
77926: PUSH
77927: EMPTY
77928: LIST
77929: PPUSH
77930: CALL_OW 72
77934: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77935: LD_ADDR_VAR 0 8
77939: PUSH
77940: LD_VAR 0 1
77944: PUSH
77945: LD_INT 1
77947: ARRAY
77948: PPUSH
77949: CALL_OW 255
77953: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77954: LD_ADDR_VAR 0 10
77958: PUSH
77959: LD_INT 29
77961: PUSH
77962: LD_INT 91
77964: PUSH
77965: LD_INT 49
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: LIST
77972: ST_TO_ADDR
// if not result then
77973: LD_VAR 0 3
77977: NOT
77978: IFFALSE 77982
// exit ;
77980: GO 78438
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77982: LD_ADDR_VAR 0 5
77986: PUSH
77987: LD_INT 81
77989: PUSH
77990: LD_VAR 0 8
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PPUSH
77999: CALL_OW 69
78003: ST_TO_ADDR
// for i in result do
78004: LD_ADDR_VAR 0 4
78008: PUSH
78009: LD_VAR 0 3
78013: PUSH
78014: FOR_IN
78015: IFFALSE 78436
// begin tag := GetTag ( i ) + 1 ;
78017: LD_ADDR_VAR 0 9
78021: PUSH
78022: LD_VAR 0 4
78026: PPUSH
78027: CALL_OW 110
78031: PUSH
78032: LD_INT 1
78034: PLUS
78035: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78036: LD_ADDR_VAR 0 7
78040: PUSH
78041: LD_VAR 0 4
78045: PPUSH
78046: CALL_OW 250
78050: PPUSH
78051: LD_VAR 0 4
78055: PPUSH
78056: CALL_OW 251
78060: PPUSH
78061: LD_INT 6
78063: PPUSH
78064: CALL 77637 0 3
78068: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78069: LD_VAR 0 4
78073: PPUSH
78074: CALL_OW 247
78078: PUSH
78079: LD_INT 2
78081: EQUAL
78082: PUSH
78083: LD_VAR 0 7
78087: AND
78088: PUSH
78089: LD_VAR 0 4
78093: PPUSH
78094: CALL_OW 264
78098: PUSH
78099: LD_VAR 0 10
78103: IN
78104: NOT
78105: AND
78106: IFFALSE 78145
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78108: LD_VAR 0 4
78112: PPUSH
78113: LD_VAR 0 7
78117: PUSH
78118: LD_INT 1
78120: ARRAY
78121: PUSH
78122: LD_INT 1
78124: ARRAY
78125: PPUSH
78126: LD_VAR 0 7
78130: PUSH
78131: LD_INT 1
78133: ARRAY
78134: PUSH
78135: LD_INT 2
78137: ARRAY
78138: PPUSH
78139: CALL_OW 116
78143: GO 78434
// if path > tag then
78145: LD_VAR 0 2
78149: PUSH
78150: LD_VAR 0 9
78154: GREATER
78155: IFFALSE 78363
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78157: LD_ADDR_VAR 0 6
78161: PUSH
78162: LD_VAR 0 5
78166: PPUSH
78167: LD_INT 91
78169: PUSH
78170: LD_VAR 0 4
78174: PUSH
78175: LD_INT 8
78177: PUSH
78178: EMPTY
78179: LIST
78180: LIST
78181: LIST
78182: PPUSH
78183: CALL_OW 72
78187: ST_TO_ADDR
// if nearEnemy then
78188: LD_VAR 0 6
78192: IFFALSE 78261
// begin if GetWeapon ( i ) = ru_time_lapser then
78194: LD_VAR 0 4
78198: PPUSH
78199: CALL_OW 264
78203: PUSH
78204: LD_INT 49
78206: EQUAL
78207: IFFALSE 78235
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78209: LD_VAR 0 4
78213: PPUSH
78214: LD_VAR 0 6
78218: PPUSH
78219: LD_VAR 0 4
78223: PPUSH
78224: CALL_OW 74
78228: PPUSH
78229: CALL_OW 112
78233: GO 78259
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78235: LD_VAR 0 4
78239: PPUSH
78240: LD_VAR 0 6
78244: PPUSH
78245: LD_VAR 0 4
78249: PPUSH
78250: CALL_OW 74
78254: PPUSH
78255: CALL 79363 0 2
// end else
78259: GO 78361
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78261: LD_VAR 0 4
78265: PPUSH
78266: LD_VAR 0 2
78270: PUSH
78271: LD_VAR 0 9
78275: ARRAY
78276: PUSH
78277: LD_INT 1
78279: ARRAY
78280: PPUSH
78281: LD_VAR 0 2
78285: PUSH
78286: LD_VAR 0 9
78290: ARRAY
78291: PUSH
78292: LD_INT 2
78294: ARRAY
78295: PPUSH
78296: CALL_OW 297
78300: PUSH
78301: LD_INT 6
78303: GREATER
78304: IFFALSE 78347
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78306: LD_VAR 0 4
78310: PPUSH
78311: LD_VAR 0 2
78315: PUSH
78316: LD_VAR 0 9
78320: ARRAY
78321: PUSH
78322: LD_INT 1
78324: ARRAY
78325: PPUSH
78326: LD_VAR 0 2
78330: PUSH
78331: LD_VAR 0 9
78335: ARRAY
78336: PUSH
78337: LD_INT 2
78339: ARRAY
78340: PPUSH
78341: CALL_OW 114
78345: GO 78361
// SetTag ( i , tag ) ;
78347: LD_VAR 0 4
78351: PPUSH
78352: LD_VAR 0 9
78356: PPUSH
78357: CALL_OW 109
// end else
78361: GO 78434
// if enemy then
78363: LD_VAR 0 5
78367: IFFALSE 78434
// begin if GetWeapon ( i ) = ru_time_lapser then
78369: LD_VAR 0 4
78373: PPUSH
78374: CALL_OW 264
78378: PUSH
78379: LD_INT 49
78381: EQUAL
78382: IFFALSE 78410
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78384: LD_VAR 0 4
78388: PPUSH
78389: LD_VAR 0 5
78393: PPUSH
78394: LD_VAR 0 4
78398: PPUSH
78399: CALL_OW 74
78403: PPUSH
78404: CALL_OW 112
78408: GO 78434
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78410: LD_VAR 0 4
78414: PPUSH
78415: LD_VAR 0 5
78419: PPUSH
78420: LD_VAR 0 4
78424: PPUSH
78425: CALL_OW 74
78429: PPUSH
78430: CALL 79363 0 2
// end ; end ;
78434: GO 78014
78436: POP
78437: POP
// end ;
78438: LD_VAR 0 3
78442: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78443: LD_INT 0
78445: PPUSH
78446: PPUSH
78447: PPUSH
// if not unit or IsInUnit ( unit ) then
78448: LD_VAR 0 1
78452: NOT
78453: PUSH
78454: LD_VAR 0 1
78458: PPUSH
78459: CALL_OW 310
78463: OR
78464: IFFALSE 78468
// exit ;
78466: GO 78559
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78468: LD_ADDR_VAR 0 4
78472: PUSH
78473: LD_VAR 0 1
78477: PPUSH
78478: CALL_OW 250
78482: PPUSH
78483: LD_VAR 0 2
78487: PPUSH
78488: LD_INT 1
78490: PPUSH
78491: CALL_OW 272
78495: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78496: LD_ADDR_VAR 0 5
78500: PUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: CALL_OW 251
78510: PPUSH
78511: LD_VAR 0 2
78515: PPUSH
78516: LD_INT 1
78518: PPUSH
78519: CALL_OW 273
78523: ST_TO_ADDR
// if ValidHex ( x , y ) then
78524: LD_VAR 0 4
78528: PPUSH
78529: LD_VAR 0 5
78533: PPUSH
78534: CALL_OW 488
78538: IFFALSE 78559
// ComTurnXY ( unit , x , y ) ;
78540: LD_VAR 0 1
78544: PPUSH
78545: LD_VAR 0 4
78549: PPUSH
78550: LD_VAR 0 5
78554: PPUSH
78555: CALL_OW 118
// end ;
78559: LD_VAR 0 3
78563: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78564: LD_INT 0
78566: PPUSH
78567: PPUSH
// result := false ;
78568: LD_ADDR_VAR 0 3
78572: PUSH
78573: LD_INT 0
78575: ST_TO_ADDR
// if not units then
78576: LD_VAR 0 2
78580: NOT
78581: IFFALSE 78585
// exit ;
78583: GO 78630
// for i in units do
78585: LD_ADDR_VAR 0 4
78589: PUSH
78590: LD_VAR 0 2
78594: PUSH
78595: FOR_IN
78596: IFFALSE 78628
// if See ( side , i ) then
78598: LD_VAR 0 1
78602: PPUSH
78603: LD_VAR 0 4
78607: PPUSH
78608: CALL_OW 292
78612: IFFALSE 78626
// begin result := true ;
78614: LD_ADDR_VAR 0 3
78618: PUSH
78619: LD_INT 1
78621: ST_TO_ADDR
// exit ;
78622: POP
78623: POP
78624: GO 78630
// end ;
78626: GO 78595
78628: POP
78629: POP
// end ;
78630: LD_VAR 0 3
78634: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78635: LD_INT 0
78637: PPUSH
78638: PPUSH
78639: PPUSH
78640: PPUSH
// if not unit or not points then
78641: LD_VAR 0 1
78645: NOT
78646: PUSH
78647: LD_VAR 0 2
78651: NOT
78652: OR
78653: IFFALSE 78657
// exit ;
78655: GO 78747
// dist := 99999 ;
78657: LD_ADDR_VAR 0 5
78661: PUSH
78662: LD_INT 99999
78664: ST_TO_ADDR
// for i in points do
78665: LD_ADDR_VAR 0 4
78669: PUSH
78670: LD_VAR 0 2
78674: PUSH
78675: FOR_IN
78676: IFFALSE 78745
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78678: LD_ADDR_VAR 0 6
78682: PUSH
78683: LD_VAR 0 1
78687: PPUSH
78688: LD_VAR 0 4
78692: PUSH
78693: LD_INT 1
78695: ARRAY
78696: PPUSH
78697: LD_VAR 0 4
78701: PUSH
78702: LD_INT 2
78704: ARRAY
78705: PPUSH
78706: CALL_OW 297
78710: ST_TO_ADDR
// if tmpDist < dist then
78711: LD_VAR 0 6
78715: PUSH
78716: LD_VAR 0 5
78720: LESS
78721: IFFALSE 78743
// begin result := i ;
78723: LD_ADDR_VAR 0 3
78727: PUSH
78728: LD_VAR 0 4
78732: ST_TO_ADDR
// dist := tmpDist ;
78733: LD_ADDR_VAR 0 5
78737: PUSH
78738: LD_VAR 0 6
78742: ST_TO_ADDR
// end ; end ;
78743: GO 78675
78745: POP
78746: POP
// end ;
78747: LD_VAR 0 3
78751: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78752: LD_INT 0
78754: PPUSH
// uc_side := side ;
78755: LD_ADDR_OWVAR 20
78759: PUSH
78760: LD_VAR 0 1
78764: ST_TO_ADDR
// uc_nation := 3 ;
78765: LD_ADDR_OWVAR 21
78769: PUSH
78770: LD_INT 3
78772: ST_TO_ADDR
// vc_chassis := 25 ;
78773: LD_ADDR_OWVAR 37
78777: PUSH
78778: LD_INT 25
78780: ST_TO_ADDR
// vc_engine := engine_siberite ;
78781: LD_ADDR_OWVAR 39
78785: PUSH
78786: LD_INT 3
78788: ST_TO_ADDR
// vc_control := control_computer ;
78789: LD_ADDR_OWVAR 38
78793: PUSH
78794: LD_INT 3
78796: ST_TO_ADDR
// vc_weapon := 59 ;
78797: LD_ADDR_OWVAR 40
78801: PUSH
78802: LD_INT 59
78804: ST_TO_ADDR
// result := CreateVehicle ;
78805: LD_ADDR_VAR 0 5
78809: PUSH
78810: CALL_OW 45
78814: ST_TO_ADDR
// SetDir ( result , d ) ;
78815: LD_VAR 0 5
78819: PPUSH
78820: LD_VAR 0 4
78824: PPUSH
78825: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78829: LD_VAR 0 5
78833: PPUSH
78834: LD_VAR 0 2
78838: PPUSH
78839: LD_VAR 0 3
78843: PPUSH
78844: LD_INT 0
78846: PPUSH
78847: CALL_OW 48
// end ;
78851: LD_VAR 0 5
78855: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78856: LD_INT 0
78858: PPUSH
78859: PPUSH
78860: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78861: LD_ADDR_VAR 0 2
78865: PUSH
78866: LD_INT 0
78868: PUSH
78869: LD_INT 0
78871: PUSH
78872: LD_INT 0
78874: PUSH
78875: LD_INT 0
78877: PUSH
78878: EMPTY
78879: LIST
78880: LIST
78881: LIST
78882: LIST
78883: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78884: LD_VAR 0 1
78888: NOT
78889: PUSH
78890: LD_VAR 0 1
78894: PPUSH
78895: CALL_OW 264
78899: PUSH
78900: LD_INT 12
78902: PUSH
78903: LD_INT 51
78905: PUSH
78906: LD_INT 32
78908: PUSH
78909: LD_INT 89
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: LIST
78916: LIST
78917: IN
78918: NOT
78919: OR
78920: IFFALSE 78924
// exit ;
78922: GO 79022
// for i := 1 to 3 do
78924: LD_ADDR_VAR 0 3
78928: PUSH
78929: DOUBLE
78930: LD_INT 1
78932: DEC
78933: ST_TO_ADDR
78934: LD_INT 3
78936: PUSH
78937: FOR_TO
78938: IFFALSE 79020
// begin tmp := GetCargo ( cargo , i ) ;
78940: LD_ADDR_VAR 0 4
78944: PUSH
78945: LD_VAR 0 1
78949: PPUSH
78950: LD_VAR 0 3
78954: PPUSH
78955: CALL_OW 289
78959: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78960: LD_ADDR_VAR 0 2
78964: PUSH
78965: LD_VAR 0 2
78969: PPUSH
78970: LD_VAR 0 3
78974: PPUSH
78975: LD_VAR 0 4
78979: PPUSH
78980: CALL_OW 1
78984: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78985: LD_ADDR_VAR 0 2
78989: PUSH
78990: LD_VAR 0 2
78994: PPUSH
78995: LD_INT 4
78997: PPUSH
78998: LD_VAR 0 2
79002: PUSH
79003: LD_INT 4
79005: ARRAY
79006: PUSH
79007: LD_VAR 0 4
79011: PLUS
79012: PPUSH
79013: CALL_OW 1
79017: ST_TO_ADDR
// end ;
79018: GO 78937
79020: POP
79021: POP
// end ;
79022: LD_VAR 0 2
79026: RET
// export function Length ( array ) ; begin
79027: LD_INT 0
79029: PPUSH
// result := array + 0 ;
79030: LD_ADDR_VAR 0 2
79034: PUSH
79035: LD_VAR 0 1
79039: PUSH
79040: LD_INT 0
79042: PLUS
79043: ST_TO_ADDR
// end ;
79044: LD_VAR 0 2
79048: RET
// export function PrepareArray ( array ) ; begin
79049: LD_INT 0
79051: PPUSH
// result := array diff 0 ;
79052: LD_ADDR_VAR 0 2
79056: PUSH
79057: LD_VAR 0 1
79061: PUSH
79062: LD_INT 0
79064: DIFF
79065: ST_TO_ADDR
// if not result [ 1 ] then
79066: LD_VAR 0 2
79070: PUSH
79071: LD_INT 1
79073: ARRAY
79074: NOT
79075: IFFALSE 79095
// result := Delete ( result , 1 ) ;
79077: LD_ADDR_VAR 0 2
79081: PUSH
79082: LD_VAR 0 2
79086: PPUSH
79087: LD_INT 1
79089: PPUSH
79090: CALL_OW 3
79094: ST_TO_ADDR
// end ;
79095: LD_VAR 0 2
79099: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79100: LD_INT 0
79102: PPUSH
79103: PPUSH
79104: PPUSH
79105: PPUSH
// sibRocketRange := 25 ;
79106: LD_ADDR_VAR 0 6
79110: PUSH
79111: LD_INT 25
79113: ST_TO_ADDR
// result := false ;
79114: LD_ADDR_VAR 0 4
79118: PUSH
79119: LD_INT 0
79121: ST_TO_ADDR
// for i := 0 to 5 do
79122: LD_ADDR_VAR 0 5
79126: PUSH
79127: DOUBLE
79128: LD_INT 0
79130: DEC
79131: ST_TO_ADDR
79132: LD_INT 5
79134: PUSH
79135: FOR_TO
79136: IFFALSE 79203
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79138: LD_VAR 0 1
79142: PPUSH
79143: LD_VAR 0 5
79147: PPUSH
79148: LD_VAR 0 6
79152: PPUSH
79153: CALL_OW 272
79157: PPUSH
79158: LD_VAR 0 2
79162: PPUSH
79163: LD_VAR 0 5
79167: PPUSH
79168: LD_VAR 0 6
79172: PPUSH
79173: CALL_OW 273
79177: PPUSH
79178: LD_VAR 0 3
79182: PPUSH
79183: CALL_OW 309
79187: IFFALSE 79201
// begin result := true ;
79189: LD_ADDR_VAR 0 4
79193: PUSH
79194: LD_INT 1
79196: ST_TO_ADDR
// exit ;
79197: POP
79198: POP
79199: GO 79205
// end ;
79201: GO 79135
79203: POP
79204: POP
// end ;
79205: LD_VAR 0 4
79209: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79210: LD_INT 0
79212: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79213: LD_VAR 0 1
79217: PPUSH
79218: LD_VAR 0 2
79222: PPUSH
79223: LD_INT 0
79225: PPUSH
79226: LD_INT 0
79228: PPUSH
79229: LD_INT 1
79231: PPUSH
79232: LD_INT 0
79234: PPUSH
79235: CALL_OW 587
// end ;
79239: LD_VAR 0 3
79243: RET
// export function CenterOnNow ( unit ) ; begin
79244: LD_INT 0
79246: PPUSH
// result := IsInUnit ( unit ) ;
79247: LD_ADDR_VAR 0 2
79251: PUSH
79252: LD_VAR 0 1
79256: PPUSH
79257: CALL_OW 310
79261: ST_TO_ADDR
// if not result then
79262: LD_VAR 0 2
79266: NOT
79267: IFFALSE 79279
// result := unit ;
79269: LD_ADDR_VAR 0 2
79273: PUSH
79274: LD_VAR 0 1
79278: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79279: LD_VAR 0 1
79283: PPUSH
79284: CALL_OW 87
// end ;
79288: LD_VAR 0 2
79292: RET
// export function ComMoveHex ( unit , hex ) ; begin
79293: LD_INT 0
79295: PPUSH
// if not hex then
79296: LD_VAR 0 2
79300: NOT
79301: IFFALSE 79305
// exit ;
79303: GO 79358
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79305: LD_VAR 0 2
79309: PUSH
79310: LD_INT 1
79312: ARRAY
79313: PPUSH
79314: LD_VAR 0 2
79318: PUSH
79319: LD_INT 2
79321: ARRAY
79322: PPUSH
79323: CALL_OW 428
79327: IFFALSE 79331
// exit ;
79329: GO 79358
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79331: LD_VAR 0 1
79335: PPUSH
79336: LD_VAR 0 2
79340: PUSH
79341: LD_INT 1
79343: ARRAY
79344: PPUSH
79345: LD_VAR 0 2
79349: PUSH
79350: LD_INT 2
79352: ARRAY
79353: PPUSH
79354: CALL_OW 111
// end ;
79358: LD_VAR 0 3
79362: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79363: LD_INT 0
79365: PPUSH
79366: PPUSH
79367: PPUSH
// if not unit or not enemy then
79368: LD_VAR 0 1
79372: NOT
79373: PUSH
79374: LD_VAR 0 2
79378: NOT
79379: OR
79380: IFFALSE 79384
// exit ;
79382: GO 79508
// x := GetX ( enemy ) ;
79384: LD_ADDR_VAR 0 4
79388: PUSH
79389: LD_VAR 0 2
79393: PPUSH
79394: CALL_OW 250
79398: ST_TO_ADDR
// y := GetY ( enemy ) ;
79399: LD_ADDR_VAR 0 5
79403: PUSH
79404: LD_VAR 0 2
79408: PPUSH
79409: CALL_OW 251
79413: ST_TO_ADDR
// if ValidHex ( x , y ) then
79414: LD_VAR 0 4
79418: PPUSH
79419: LD_VAR 0 5
79423: PPUSH
79424: CALL_OW 488
79428: IFFALSE 79508
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
79430: LD_VAR 0 2
79434: PPUSH
79435: CALL_OW 247
79439: PUSH
79440: LD_INT 3
79442: PUSH
79443: LD_INT 2
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: IN
79450: PUSH
79451: LD_VAR 0 1
79455: PPUSH
79456: CALL_OW 255
79460: PPUSH
79461: LD_VAR 0 2
79465: PPUSH
79466: CALL_OW 292
79470: AND
79471: IFFALSE 79489
// ComAttackUnit ( unit , enemy ) else
79473: LD_VAR 0 1
79477: PPUSH
79478: LD_VAR 0 2
79482: PPUSH
79483: CALL_OW 115
79487: GO 79508
// ComAgressiveMove ( unit , x , y ) ;
79489: LD_VAR 0 1
79493: PPUSH
79494: LD_VAR 0 4
79498: PPUSH
79499: LD_VAR 0 5
79503: PPUSH
79504: CALL_OW 114
// end ; end_of_file
79508: LD_VAR 0 3
79512: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79513: LD_VAR 0 1
79517: PPUSH
79518: LD_VAR 0 2
79522: PPUSH
79523: LD_VAR 0 3
79527: PPUSH
79528: LD_VAR 0 4
79532: PPUSH
79533: LD_VAR 0 5
79537: PPUSH
79538: LD_VAR 0 6
79542: PPUSH
79543: CALL 17871 0 6
// end ;
79547: PPOPN 6
79549: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79550: LD_INT 0
79552: PPUSH
// begin if not units then
79553: LD_VAR 0 1
79557: NOT
79558: IFFALSE 79562
// exit ;
79560: GO 79562
// end ;
79562: PPOPN 7
79564: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79565: CALL 17775 0 0
// end ;
79569: PPOPN 1
79571: END
