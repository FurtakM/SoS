// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 30 0 0
// PrepareArabian ;
   8: CALL 1832 0 0
// PrepareRussian ;
  12: CALL 2217 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 2 ) ;
  22: LD_INT 2
  24: PPUSH
  25: CALL_OW 344
// end ;
  29: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol ; function Init ; begin
  30: LD_INT 0
  32: PPUSH
// debug := true ;
  33: LD_ADDR_EXP 1
  37: PUSH
  38: LD_INT 1
  40: ST_TO_ADDR
// prefix := 03_ ;
  41: LD_ADDR_EXP 2
  45: PUSH
  46: LD_STRING 03_
  48: ST_TO_ADDR
// baseConstructed := false ;
  49: LD_ADDR_EXP 3
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// labConstructed := false ;
  57: LD_ADDR_EXP 4
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  65: LD_ADDR_EXP 5
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// russianAlert := false ;
  73: LD_ADDR_EXP 7
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// activeGrishkoAI := true ;
  81: LD_ADDR_EXP 8
  85: PUSH
  86: LD_INT 1
  88: ST_TO_ADDR
// allowHeikeAttack := false ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// allowToPatrol := false ;
  97: LD_ADDR_EXP 10
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 3
 112: PUSH
 113: LD_INT 4
 115: PUSH
 116: LD_INT 5
 118: PUSH
 119: LD_INT 6
 121: PUSH
 122: LD_INT 7
 124: PUSH
 125: LD_INT 8
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: LIST
 132: LIST
 133: LIST
 134: LIST
 135: ST_TO_ADDR
// end ; end_of_file
 136: LD_VAR 0 1
 140: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 141: LD_INT 0
 143: PPUSH
 144: PPUSH
// if exist_mode then
 145: LD_VAR 0 2
 149: IFFALSE 174
// unit := CreateCharacter ( prefix & ident ) else
 151: LD_ADDR_VAR 0 5
 155: PUSH
 156: LD_VAR 0 3
 160: PUSH
 161: LD_VAR 0 1
 165: STR
 166: PPUSH
 167: CALL_OW 34
 171: ST_TO_ADDR
 172: GO 189
// unit := NewCharacter ( ident ) ;
 174: LD_ADDR_VAR 0 5
 178: PUSH
 179: LD_VAR 0 1
 183: PPUSH
 184: CALL_OW 25
 188: ST_TO_ADDR
// result := unit ;
 189: LD_ADDR_VAR 0 4
 193: PUSH
 194: LD_VAR 0 5
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 4
 203: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 204: LD_INT 0
 206: PPUSH
// uc_side := side ;
 207: LD_ADDR_OWVAR 20
 211: PUSH
 212: LD_VAR 0 1
 216: ST_TO_ADDR
// uc_nation := nation ;
 217: LD_ADDR_OWVAR 21
 221: PUSH
 222: LD_VAR 0 2
 226: ST_TO_ADDR
// vc_chassis := chassis ;
 227: LD_ADDR_OWVAR 37
 231: PUSH
 232: LD_VAR 0 3
 236: ST_TO_ADDR
// vc_engine := engine ;
 237: LD_ADDR_OWVAR 39
 241: PUSH
 242: LD_VAR 0 4
 246: ST_TO_ADDR
// vc_control := control ;
 247: LD_ADDR_OWVAR 38
 251: PUSH
 252: LD_VAR 0 5
 256: ST_TO_ADDR
// vc_weapon := weapon ;
 257: LD_ADDR_OWVAR 40
 261: PUSH
 262: LD_VAR 0 6
 266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 267: LD_ADDR_OWVAR 41
 271: PUSH
 272: LD_VAR 0 7
 276: ST_TO_ADDR
// result := CreateVehicle ;
 277: LD_ADDR_VAR 0 8
 281: PUSH
 282: CALL_OW 45
 286: ST_TO_ADDR
// end ;
 287: LD_VAR 0 8
 291: RET
// export function SayX ( units , ident ) ; var i ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
// result := false ;
 296: LD_ADDR_VAR 0 3
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// if not units then
 304: LD_VAR 0 1
 308: NOT
 309: IFFALSE 313
// exit ;
 311: GO 367
// for i in units do
 313: LD_ADDR_VAR 0 4
 317: PUSH
 318: LD_VAR 0 1
 322: PUSH
 323: FOR_IN
 324: IFFALSE 365
// if IsOk ( i ) then
 326: LD_VAR 0 4
 330: PPUSH
 331: CALL_OW 302
 335: IFFALSE 363
// begin Say ( i , ident ) ;
 337: LD_VAR 0 4
 341: PPUSH
 342: LD_VAR 0 2
 346: PPUSH
 347: CALL_OW 88
// result := i ;
 351: LD_ADDR_VAR 0 3
 355: PUSH
 356: LD_VAR 0 4
 360: ST_TO_ADDR
// break ;
 361: GO 365
// end ;
 363: GO 323
 365: POP
 366: POP
// end ;
 367: LD_VAR 0 3
 371: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// InitUc ;
 376: CALL_OW 18
// InitHc ;
 380: CALL_OW 19
// uc_side := 0 ;
 384: LD_ADDR_OWVAR 20
 388: PUSH
 389: LD_INT 0
 391: ST_TO_ADDR
// uc_nation := 0 ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 0
 399: ST_TO_ADDR
// for i = 1 to amount do
 400: LD_ADDR_VAR 0 4
 404: PUSH
 405: DOUBLE
 406: LD_INT 1
 408: DEC
 409: ST_TO_ADDR
 410: LD_VAR 0 2
 414: PUSH
 415: FOR_TO
 416: IFFALSE 498
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 418: LD_ADDR_OWVAR 29
 422: PUSH
 423: LD_INT 9
 425: PPUSH
 426: LD_INT 12
 428: PPUSH
 429: CALL_OW 12
 433: PUSH
 434: LD_INT 9
 436: PPUSH
 437: LD_INT 12
 439: PPUSH
 440: CALL_OW 12
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 449: LD_ADDR_OWVAR 35
 453: PUSH
 454: LD_INT 1
 456: NEG
 457: PPUSH
 458: LD_INT 1
 460: PPUSH
 461: CALL_OW 12
 465: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 466: LD_INT 0
 468: PPUSH
 469: LD_INT 12
 471: PPUSH
 472: LD_INT 1
 474: PPUSH
 475: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 479: CALL_OW 44
 483: PPUSH
 484: LD_VAR 0 1
 488: PPUSH
 489: LD_INT 0
 491: PPUSH
 492: CALL_OW 49
// end ;
 496: GO 415
 498: POP
 499: POP
// InitHc ;
 500: CALL_OW 19
// end ;
 504: LD_VAR 0 3
 508: RET
// export function PrepareNature ( forest ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 513: LD_VAR 0 1
 517: PPUSH
 518: LD_INT 6
 520: PUSH
 521: LD_INT 5
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: PPUSH
 538: CALL 372 0 2
// for i := 1 to 3 do
 542: LD_ADDR_VAR 0 3
 546: PUSH
 547: DOUBLE
 548: LD_INT 1
 550: DEC
 551: ST_TO_ADDR
 552: LD_INT 3
 554: PUSH
 555: FOR_TO
 556: IFFALSE 593
// begin hc_class := 21 ;
 558: LD_ADDR_OWVAR 28
 562: PUSH
 563: LD_INT 21
 565: ST_TO_ADDR
// hc_gallery :=  ;
 566: LD_ADDR_OWVAR 33
 570: PUSH
 571: LD_STRING 
 573: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 574: CALL_OW 44
 578: PPUSH
 579: LD_VAR 0 1
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 49
// end ;
 591: GO 555
 593: POP
 594: POP
// for i := 1 to 2 do
 595: LD_ADDR_VAR 0 3
 599: PUSH
 600: DOUBLE
 601: LD_INT 1
 603: DEC
 604: ST_TO_ADDR
 605: LD_INT 2
 607: PUSH
 608: FOR_TO
 609: IFFALSE 646
// begin hc_class := 18 ;
 611: LD_ADDR_OWVAR 28
 615: PUSH
 616: LD_INT 18
 618: ST_TO_ADDR
// hc_gallery :=  ;
 619: LD_ADDR_OWVAR 33
 623: PUSH
 624: LD_STRING 
 626: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 627: CALL_OW 44
 631: PPUSH
 632: LD_VAR 0 1
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 49
// end ;
 644: GO 608
 646: POP
 647: POP
// for i := 1 to 2 do
 648: LD_ADDR_VAR 0 3
 652: PUSH
 653: DOUBLE
 654: LD_INT 1
 656: DEC
 657: ST_TO_ADDR
 658: LD_INT 2
 660: PUSH
 661: FOR_TO
 662: IFFALSE 699
// begin hc_class := 13 ;
 664: LD_ADDR_OWVAR 28
 668: PUSH
 669: LD_INT 13
 671: ST_TO_ADDR
// hc_gallery :=  ;
 672: LD_ADDR_OWVAR 33
 676: PUSH
 677: LD_STRING 
 679: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 680: CALL_OW 44
 684: PPUSH
 685: LD_VAR 0 1
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 49
// end ;
 697: GO 661
 699: POP
 700: POP
// end ;
 701: LD_VAR 0 2
 705: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 706: LD_INT 0
 708: PPUSH
 709: PPUSH
 710: PPUSH
// if not observer or not unit then
 711: LD_VAR 0 1
 715: NOT
 716: PUSH
 717: LD_VAR 0 2
 721: NOT
 722: OR
 723: IFFALSE 727
// exit ;
 725: GO 775
// if not See ( GetSide ( observer ) , unit ) then
 727: LD_VAR 0 1
 731: PPUSH
 732: CALL_OW 255
 736: PPUSH
 737: LD_VAR 0 2
 741: PPUSH
 742: CALL_OW 292
 746: NOT
 747: IFFALSE 751
// exit ;
 749: GO 775
// result := GetDistUnits ( observer , unit ) < 12 ;
 751: LD_ADDR_VAR 0 3
 755: PUSH
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_VAR 0 2
 765: PPUSH
 766: CALL_OW 296
 770: PUSH
 771: LD_INT 12
 773: LESS
 774: ST_TO_ADDR
// end ;
 775: LD_VAR 0 3
 779: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 780: LD_INT 0
 782: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 783: LD_VAR 0 2
 787: PUSH
 788: LD_INT 1
 790: ARRAY
 791: PPUSH
 792: LD_VAR 0 2
 796: PUSH
 797: LD_INT 2
 799: ARRAY
 800: PPUSH
 801: CALL_OW 488
 805: PUSH
 806: LD_VAR 0 2
 810: PUSH
 811: LD_INT 1
 813: ARRAY
 814: PPUSH
 815: LD_VAR 0 2
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PPUSH
 824: CALL_OW 428
 828: PUSH
 829: LD_INT 0
 831: EQUAL
 832: AND
 833: IFFALSE 867
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 835: LD_VAR 0 1
 839: PPUSH
 840: LD_VAR 0 2
 844: PUSH
 845: LD_INT 1
 847: ARRAY
 848: PPUSH
 849: LD_VAR 0 2
 853: PUSH
 854: LD_INT 2
 856: ARRAY
 857: PPUSH
 858: LD_VAR 0 3
 862: PPUSH
 863: CALL_OW 48
// end ;
 867: LD_VAR 0 4
 871: RET
// export function Video ( mode ) ; begin
 872: LD_INT 0
 874: PPUSH
// ingame_video = mode ;
 875: LD_ADDR_OWVAR 52
 879: PUSH
 880: LD_VAR 0 1
 884: ST_TO_ADDR
// interface_hidden = mode ;
 885: LD_ADDR_OWVAR 54
 889: PUSH
 890: LD_VAR 0 1
 894: ST_TO_ADDR
// end ;
 895: LD_VAR 0 2
 899: RET
// export function ReverseArray ( array ) ; var i ; begin
 900: LD_INT 0
 902: PPUSH
 903: PPUSH
// if not array then
 904: LD_VAR 0 1
 908: NOT
 909: IFFALSE 913
// exit ;
 911: GO 971
// result := [ ] ;
 913: LD_ADDR_VAR 0 2
 917: PUSH
 918: EMPTY
 919: ST_TO_ADDR
// for i := 1 to array do
 920: LD_ADDR_VAR 0 3
 924: PUSH
 925: DOUBLE
 926: LD_INT 1
 928: DEC
 929: ST_TO_ADDR
 930: LD_VAR 0 1
 934: PUSH
 935: FOR_TO
 936: IFFALSE 969
// result := Insert ( result , 1 , array [ i ] ) ;
 938: LD_ADDR_VAR 0 2
 942: PUSH
 943: LD_VAR 0 2
 947: PPUSH
 948: LD_INT 1
 950: PPUSH
 951: LD_VAR 0 1
 955: PUSH
 956: LD_VAR 0 3
 960: ARRAY
 961: PPUSH
 962: CALL_OW 2
 966: ST_TO_ADDR
 967: GO 935
 969: POP
 970: POP
// end ;
 971: LD_VAR 0 2
 975: RET
// export function ComExit ( unit ) ; begin
 976: LD_INT 0
 978: PPUSH
// result := IsInUnit ( unit ) ;
 979: LD_ADDR_VAR 0 2
 983: PUSH
 984: LD_VAR 0 1
 988: PPUSH
 989: CALL_OW 310
 993: ST_TO_ADDR
// if not result then
 994: LD_VAR 0 2
 998: NOT
 999: IFFALSE 1003
// exit ;
1001: GO 1038
// if GetType ( result ) = unit_vehicle then
1003: LD_VAR 0 2
1007: PPUSH
1008: CALL_OW 247
1012: PUSH
1013: LD_INT 2
1015: EQUAL
1016: IFFALSE 1029
// ComExitVehicle ( unit ) else
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 121
1027: GO 1038
// ComExitBuilding ( unit ) ;
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 122
// end ;
1038: LD_VAR 0 2
1042: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1043: LD_INT 0
1045: PPUSH
1046: PPUSH
// if not side or not nation then
1047: LD_VAR 0 1
1051: NOT
1052: PUSH
1053: LD_VAR 0 2
1057: NOT
1058: OR
1059: IFFALSE 1063
// exit ;
1061: GO 1827
// case nation of nation_american :
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 1
1070: DOUBLE
1071: EQUAL
1072: IFTRUE 1076
1074: GO 1290
1076: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1077: LD_ADDR_VAR 0 4
1081: PUSH
1082: LD_INT 35
1084: PUSH
1085: LD_INT 45
1087: PUSH
1088: LD_INT 46
1090: PUSH
1091: LD_INT 47
1093: PUSH
1094: LD_INT 82
1096: PUSH
1097: LD_INT 83
1099: PUSH
1100: LD_INT 84
1102: PUSH
1103: LD_INT 85
1105: PUSH
1106: LD_INT 86
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 6
1117: PUSH
1118: LD_INT 15
1120: PUSH
1121: LD_INT 16
1123: PUSH
1124: LD_INT 7
1126: PUSH
1127: LD_INT 12
1129: PUSH
1130: LD_INT 13
1132: PUSH
1133: LD_INT 10
1135: PUSH
1136: LD_INT 14
1138: PUSH
1139: LD_INT 20
1141: PUSH
1142: LD_INT 21
1144: PUSH
1145: LD_INT 22
1147: PUSH
1148: LD_INT 25
1150: PUSH
1151: LD_INT 32
1153: PUSH
1154: LD_INT 27
1156: PUSH
1157: LD_INT 36
1159: PUSH
1160: LD_INT 69
1162: PUSH
1163: LD_INT 39
1165: PUSH
1166: LD_INT 34
1168: PUSH
1169: LD_INT 40
1171: PUSH
1172: LD_INT 48
1174: PUSH
1175: LD_INT 49
1177: PUSH
1178: LD_INT 50
1180: PUSH
1181: LD_INT 51
1183: PUSH
1184: LD_INT 52
1186: PUSH
1187: LD_INT 53
1189: PUSH
1190: LD_INT 54
1192: PUSH
1193: LD_INT 55
1195: PUSH
1196: LD_INT 56
1198: PUSH
1199: LD_INT 57
1201: PUSH
1202: LD_INT 58
1204: PUSH
1205: LD_INT 59
1207: PUSH
1208: LD_INT 60
1210: PUSH
1211: LD_INT 61
1213: PUSH
1214: LD_INT 62
1216: PUSH
1217: LD_INT 80
1219: PUSH
1220: LD_INT 82
1222: PUSH
1223: LD_INT 83
1225: PUSH
1226: LD_INT 84
1228: PUSH
1229: LD_INT 85
1231: PUSH
1232: LD_INT 86
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: ST_TO_ADDR
1288: GO 1751
1290: LD_INT 2
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1520
1298: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: LD_INT 35
1306: PUSH
1307: LD_INT 45
1309: PUSH
1310: LD_INT 46
1312: PUSH
1313: LD_INT 47
1315: PUSH
1316: LD_INT 82
1318: PUSH
1319: LD_INT 83
1321: PUSH
1322: LD_INT 84
1324: PUSH
1325: LD_INT 85
1327: PUSH
1328: LD_INT 87
1330: PUSH
1331: LD_INT 70
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 11
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 4
1345: PUSH
1346: LD_INT 5
1348: PUSH
1349: LD_INT 6
1351: PUSH
1352: LD_INT 15
1354: PUSH
1355: LD_INT 18
1357: PUSH
1358: LD_INT 7
1360: PUSH
1361: LD_INT 17
1363: PUSH
1364: LD_INT 8
1366: PUSH
1367: LD_INT 20
1369: PUSH
1370: LD_INT 21
1372: PUSH
1373: LD_INT 22
1375: PUSH
1376: LD_INT 72
1378: PUSH
1379: LD_INT 26
1381: PUSH
1382: LD_INT 69
1384: PUSH
1385: LD_INT 39
1387: PUSH
1388: LD_INT 40
1390: PUSH
1391: LD_INT 41
1393: PUSH
1394: LD_INT 42
1396: PUSH
1397: LD_INT 43
1399: PUSH
1400: LD_INT 48
1402: PUSH
1403: LD_INT 49
1405: PUSH
1406: LD_INT 50
1408: PUSH
1409: LD_INT 51
1411: PUSH
1412: LD_INT 52
1414: PUSH
1415: LD_INT 53
1417: PUSH
1418: LD_INT 54
1420: PUSH
1421: LD_INT 55
1423: PUSH
1424: LD_INT 56
1426: PUSH
1427: LD_INT 60
1429: PUSH
1430: LD_INT 61
1432: PUSH
1433: LD_INT 62
1435: PUSH
1436: LD_INT 66
1438: PUSH
1439: LD_INT 67
1441: PUSH
1442: LD_INT 68
1444: PUSH
1445: LD_INT 81
1447: PUSH
1448: LD_INT 82
1450: PUSH
1451: LD_INT 83
1453: PUSH
1454: LD_INT 84
1456: PUSH
1457: LD_INT 85
1459: PUSH
1460: LD_INT 87
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: ST_TO_ADDR
1518: GO 1751
1520: LD_INT 3
1522: DOUBLE
1523: EQUAL
1524: IFTRUE 1528
1526: GO 1750
1528: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1529: LD_ADDR_VAR 0 4
1533: PUSH
1534: LD_INT 46
1536: PUSH
1537: LD_INT 47
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 82
1548: PUSH
1549: LD_INT 83
1551: PUSH
1552: LD_INT 84
1554: PUSH
1555: LD_INT 85
1557: PUSH
1558: LD_INT 86
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 9
1566: PUSH
1567: LD_INT 20
1569: PUSH
1570: LD_INT 19
1572: PUSH
1573: LD_INT 21
1575: PUSH
1576: LD_INT 24
1578: PUSH
1579: LD_INT 22
1581: PUSH
1582: LD_INT 25
1584: PUSH
1585: LD_INT 28
1587: PUSH
1588: LD_INT 29
1590: PUSH
1591: LD_INT 30
1593: PUSH
1594: LD_INT 31
1596: PUSH
1597: LD_INT 37
1599: PUSH
1600: LD_INT 38
1602: PUSH
1603: LD_INT 32
1605: PUSH
1606: LD_INT 27
1608: PUSH
1609: LD_INT 33
1611: PUSH
1612: LD_INT 69
1614: PUSH
1615: LD_INT 39
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 40
1623: PUSH
1624: LD_INT 71
1626: PUSH
1627: LD_INT 23
1629: PUSH
1630: LD_INT 44
1632: PUSH
1633: LD_INT 48
1635: PUSH
1636: LD_INT 49
1638: PUSH
1639: LD_INT 50
1641: PUSH
1642: LD_INT 51
1644: PUSH
1645: LD_INT 52
1647: PUSH
1648: LD_INT 53
1650: PUSH
1651: LD_INT 54
1653: PUSH
1654: LD_INT 55
1656: PUSH
1657: LD_INT 56
1659: PUSH
1660: LD_INT 57
1662: PUSH
1663: LD_INT 58
1665: PUSH
1666: LD_INT 59
1668: PUSH
1669: LD_INT 63
1671: PUSH
1672: LD_INT 64
1674: PUSH
1675: LD_INT 65
1677: PUSH
1678: LD_INT 82
1680: PUSH
1681: LD_INT 83
1683: PUSH
1684: LD_INT 84
1686: PUSH
1687: LD_INT 85
1689: PUSH
1690: LD_INT 86
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: ST_TO_ADDR
1748: GO 1751
1750: POP
// if state > - 1 and state < 3 then
1751: LD_VAR 0 3
1755: PUSH
1756: LD_INT 1
1758: NEG
1759: GREATER
1760: PUSH
1761: LD_VAR 0 3
1765: PUSH
1766: LD_INT 3
1768: LESS
1769: AND
1770: IFFALSE 1827
// for i in result do
1772: LD_ADDR_VAR 0 5
1776: PUSH
1777: LD_VAR 0 4
1781: PUSH
1782: FOR_IN
1783: IFFALSE 1825
// if GetTech ( i , side ) <> state then
1785: LD_VAR 0 5
1789: PPUSH
1790: LD_VAR 0 1
1794: PPUSH
1795: CALL_OW 321
1799: PUSH
1800: LD_VAR 0 3
1804: NONEQUAL
1805: IFFALSE 1823
// result := result diff i ;
1807: LD_ADDR_VAR 0 4
1811: PUSH
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 5
1821: DIFF
1822: ST_TO_ADDR
1823: GO 1782
1825: POP
1826: POP
// end ; end_of_file
1827: LD_VAR 0 4
1831: RET
// export Heike , Givi , Mike , Kamil , Kaia , Sophia , Markov , Omar , Ibrahim , Shariff , Kurt , Aviradze , heikeSecondSquad ; export function PrepareArabian ; var i ; begin
1832: LD_INT 0
1834: PPUSH
1835: PPUSH
// uc_side := 2 ;
1836: LD_ADDR_OWVAR 20
1840: PUSH
1841: LD_INT 2
1843: ST_TO_ADDR
// uc_nation := 2 ;
1844: LD_ADDR_OWVAR 21
1848: PUSH
1849: LD_INT 2
1851: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1852: LD_ADDR_EXP 11
1856: PUSH
1857: LD_STRING Heike
1859: PPUSH
1860: LD_EXP 1
1864: NOT
1865: PPUSH
1866: LD_EXP 2
1870: PPUSH
1871: CALL 141 0 3
1875: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1876: LD_ADDR_EXP 19
1880: PUSH
1881: LD_STRING Ibrahim
1883: PPUSH
1884: LD_EXP 1
1888: NOT
1889: PPUSH
1890: LD_EXP 2
1894: PPUSH
1895: CALL 141 0 3
1899: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1900: LD_ADDR_EXP 12
1904: PUSH
1905: LD_STRING Givi
1907: PPUSH
1908: LD_EXP 1
1912: NOT
1913: PPUSH
1914: LD_EXP 2
1918: PPUSH
1919: CALL 141 0 3
1923: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1924: LD_ADDR_EXP 14
1928: PUSH
1929: LD_STRING Kamil
1931: PPUSH
1932: LD_EXP 1
1936: NOT
1937: PPUSH
1938: LD_EXP 2
1942: PPUSH
1943: CALL 141 0 3
1947: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1948: LD_ADDR_EXP 15
1952: PUSH
1953: LD_STRING Kaia
1955: PPUSH
1956: LD_EXP 1
1960: NOT
1961: PPUSH
1962: LD_EXP 2
1966: PPUSH
1967: CALL 141 0 3
1971: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1972: LD_ADDR_EXP 16
1976: PUSH
1977: LD_STRING Sophia
1979: PPUSH
1980: LD_EXP 1
1984: NOT
1985: PPUSH
1986: LD_EXP 2
1990: PPUSH
1991: CALL 141 0 3
1995: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1996: LD_ADDR_EXP 17
2000: PUSH
2001: LD_STRING Markov
2003: PPUSH
2004: LD_EXP 1
2008: NOT
2009: PPUSH
2010: LD_EXP 2
2014: PPUSH
2015: CALL 141 0 3
2019: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2020: LD_ADDR_EXP 22
2024: PUSH
2025: LD_STRING Aviradze
2027: PPUSH
2028: LD_EXP 1
2032: NOT
2033: PPUSH
2034: LD_EXP 2
2038: PPUSH
2039: CALL 141 0 3
2043: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2044: LD_ADDR_EXP 23
2048: PUSH
2049: LD_STRING 03_others
2051: PPUSH
2052: CALL_OW 31
2056: ST_TO_ADDR
// uc_side := 5 ;
2057: LD_ADDR_OWVAR 20
2061: PUSH
2062: LD_INT 5
2064: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2065: LD_ADDR_EXP 18
2069: PUSH
2070: LD_STRING Omar
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: LD_STRING 
2078: PPUSH
2079: CALL 141 0 3
2083: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2084: LD_ADDR_EXP 21
2088: PUSH
2089: LD_STRING Kurt
2091: PPUSH
2092: LD_INT 0
2094: PPUSH
2095: LD_STRING 
2097: PPUSH
2098: CALL 141 0 3
2102: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2103: LD_ADDR_EXP 13
2107: PUSH
2108: LD_STRING Mike
2110: PPUSH
2111: LD_EXP 1
2115: NOT
2116: PPUSH
2117: LD_EXP 2
2121: PPUSH
2122: CALL 141 0 3
2126: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2127: LD_ADDR_EXP 20
2131: PUSH
2132: LD_STRING Abdul
2134: PPUSH
2135: LD_INT 0
2137: PPUSH
2138: LD_STRING 
2140: PPUSH
2141: CALL 141 0 3
2145: ST_TO_ADDR
// if Mike then
2146: LD_EXP 13
2150: IFFALSE 2173
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2152: LD_EXP 13
2156: PPUSH
2157: LD_INT 142
2159: PPUSH
2160: LD_INT 63
2162: PPUSH
2163: LD_INT 2
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2173: LD_EXP 21
2177: PPUSH
2178: LD_INT 142
2180: PPUSH
2181: LD_INT 63
2183: PPUSH
2184: LD_INT 3
2186: PPUSH
2187: LD_INT 0
2189: PPUSH
2190: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2194: LD_EXP 21
2198: PUSH
2199: LD_EXP 13
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 140
// end ; end_of_file
2212: LD_VAR 0 1
2216: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol ; export function PrepareRussian ; var i , un , veh , arm , bar ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side := 6 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 6
2232: ST_TO_ADDR
// uc_nation := 3 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 3
2240: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2241: LD_ADDR_VAR 0 6
2245: PUSH
2246: LD_INT 22
2248: PUSH
2249: LD_INT 6
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 30
2258: PUSH
2259: LD_INT 5
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: PPUSH
2270: CALL_OW 69
2274: PUSH
2275: LD_INT 1
2277: ARRAY
2278: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2279: LD_ADDR_VAR 0 5
2283: PUSH
2284: LD_INT 22
2286: PUSH
2287: LD_INT 6
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 30
2296: PUSH
2297: LD_INT 4
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PPUSH
2308: CALL_OW 69
2312: PUSH
2313: LD_INT 1
2315: ARRAY
2316: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2317: LD_ADDR_EXP 28
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2324: LD_ADDR_EXP 29
2328: PUSH
2329: EMPTY
2330: ST_TO_ADDR
// russianPatrol := [ ] ;
2331: LD_ADDR_EXP 31
2335: PUSH
2336: EMPTY
2337: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2338: LD_ADDR_EXP 24
2342: PUSH
2343: LD_STRING Kurin
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 141 0 3
2356: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2357: LD_EXP 24
2361: PPUSH
2362: LD_INT 71
2364: PPUSH
2365: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2369: LD_ADDR_EXP 26
2373: PUSH
2374: LD_STRING Popov
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: LD_STRING 
2382: PPUSH
2383: CALL 141 0 3
2387: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2388: LD_EXP 26
2392: PPUSH
2393: LD_INT 71
2395: PPUSH
2396: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2400: LD_ADDR_EXP 25
2404: PUSH
2405: LD_STRING Grishko
2407: PPUSH
2408: LD_INT 0
2410: PPUSH
2411: LD_STRING 
2413: PPUSH
2414: CALL 141 0 3
2418: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2419: LD_EXP 25
2423: PPUSH
2424: LD_INT 207
2426: PPUSH
2427: LD_INT 106
2429: PPUSH
2430: LD_INT 0
2432: PPUSH
2433: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2437: LD_EXP 25
2441: PPUSH
2442: LD_INT 209
2444: PPUSH
2445: LD_INT 106
2447: PPUSH
2448: CALL_OW 118
// for i := 1 to 2 do
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: DOUBLE
2458: LD_INT 1
2460: DEC
2461: ST_TO_ADDR
2462: LD_INT 2
2464: PUSH
2465: FOR_TO
2466: IFFALSE 2521
// begin PrepareHuman ( false , 2 , 2 ) ;
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 2
2473: PPUSH
2474: LD_INT 2
2476: PPUSH
2477: CALL_OW 380
// un := CreateHuman ;
2481: LD_ADDR_VAR 0 3
2485: PUSH
2486: CALL_OW 44
2490: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2491: LD_VAR 0 3
2495: PPUSH
2496: LD_INT 71
2498: PPUSH
2499: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2503: LD_ADDR_EXP 28
2507: PUSH
2508: LD_EXP 28
2512: PUSH
2513: LD_VAR 0 3
2517: UNION
2518: ST_TO_ADDR
// end ;
2519: GO 2465
2521: POP
2522: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 5
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: LD_INT 6
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PUSH
2547: LD_OWVAR 67
2551: ARRAY
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2628
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2556: LD_INT 0
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 2
2564: PUSH
2565: LD_INT 3
2567: PUSH
2568: LD_INT 4
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: PUSH
2576: LD_OWVAR 67
2580: ARRAY
2581: PPUSH
2582: CALL_OW 380
// un := CreateHuman ;
2586: LD_ADDR_VAR 0 3
2590: PUSH
2591: CALL_OW 44
2595: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_VAR 0 6
2605: PPUSH
2606: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2610: LD_ADDR_EXP 28
2614: PUSH
2615: LD_EXP 28
2619: PUSH
2620: LD_VAR 0 3
2624: UNION
2625: ST_TO_ADDR
// end ;
2626: GO 2553
2628: POP
2629: POP
// for i := 1 to 3 do
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 3
2642: PUSH
2643: FOR_TO
2644: IFFALSE 2699
// begin PrepareHuman ( false , 3 , 3 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: CALL_OW 380
// un := CreateHuman ;
2659: LD_ADDR_VAR 0 3
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2669: LD_VAR 0 3
2673: PPUSH
2674: LD_INT 92
2676: PPUSH
2677: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2681: LD_ADDR_EXP 28
2685: PUSH
2686: LD_EXP 28
2690: PUSH
2691: LD_VAR 0 3
2695: UNION
2696: ST_TO_ADDR
// end ;
2697: GO 2643
2699: POP
2700: POP
// for i := 1 to 2 do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: DOUBLE
2707: LD_INT 1
2709: DEC
2710: ST_TO_ADDR
2711: LD_INT 2
2713: PUSH
2714: FOR_TO
2715: IFFALSE 2770
// begin PrepareHuman ( false , 4 , 3 ) ;
2717: LD_INT 0
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 380
// un := CreateHuman ;
2730: LD_ADDR_VAR 0 3
2734: PUSH
2735: CALL_OW 44
2739: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 83
2747: PPUSH
2748: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2752: LD_ADDR_EXP 28
2756: PUSH
2757: LD_EXP 28
2761: PUSH
2762: LD_VAR 0 3
2766: UNION
2767: ST_TO_ADDR
// end ;
2768: GO 2714
2770: POP
2771: POP
// for i := 1 to 3 do
2772: LD_ADDR_VAR 0 2
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 3
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2843
// begin PrepareHuman ( false , 1 , 2 ) ;
2788: LD_INT 0
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 380
// un := CreateHuman ;
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: CALL_OW 44
2810: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2811: LD_VAR 0 3
2815: PPUSH
2816: LD_VAR 0 5
2820: PPUSH
2821: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2825: LD_ADDR_EXP 30
2829: PUSH
2830: LD_EXP 30
2834: PUSH
2835: LD_VAR 0 3
2839: UNION
2840: ST_TO_ADDR
// end ;
2841: GO 2785
2843: POP
2844: POP
// uc_side := 3 ;
2845: LD_ADDR_OWVAR 20
2849: PUSH
2850: LD_INT 3
2852: ST_TO_ADDR
// for i := 1 to 2 do
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: DOUBLE
2859: LD_INT 1
2861: DEC
2862: ST_TO_ADDR
2863: LD_INT 2
2865: PUSH
2866: FOR_TO
2867: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2869: LD_INT 0
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: LD_OWVAR 67
2879: PUSH
2880: LD_INT 1
2882: PLUS
2883: PPUSH
2884: CALL_OW 380
// un := CreateHuman ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: CALL_OW 44
2897: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
2898: LD_VAR 0 3
2902: PPUSH
2903: LD_INT 22
2905: PUSH
2906: LD_INT 3
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 30
2915: PUSH
2916: LD_INT 32
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: PUSH
2932: LD_VAR 0 2
2936: ARRAY
2937: PPUSH
2938: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2942: LD_ADDR_EXP 29
2946: PUSH
2947: LD_EXP 29
2951: PUSH
2952: LD_VAR 0 3
2956: UNION
2957: ST_TO_ADDR
// end ;
2958: GO 2866
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin ComExitBuilding ( grishkoSquad ) ;
2973: LD_EXP 30
2977: PPUSH
2978: CALL_OW 122
// wait ( 3 ) ;
2982: LD_INT 3
2984: PPUSH
2985: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
2989: LD_EXP 30
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PPUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 6
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 30
3010: PUSH
3011: LD_INT 31
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PPUSH
3022: CALL_OW 69
3026: PPUSH
3027: LD_EXP 30
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: PPUSH
3036: CALL_OW 74
3040: PPUSH
3041: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3045: LD_EXP 30
3049: PUSH
3050: LD_INT 2
3052: ARRAY
3053: PPUSH
3054: LD_INT 211
3056: PPUSH
3057: LD_INT 107
3059: PPUSH
3060: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3064: LD_EXP 30
3068: PUSH
3069: LD_INT 2
3071: ARRAY
3072: PPUSH
3073: LD_INT 209
3075: PPUSH
3076: LD_INT 106
3078: PPUSH
3079: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3083: LD_EXP 30
3087: PUSH
3088: LD_INT 3
3090: ARRAY
3091: PPUSH
3092: LD_INT 209
3094: PPUSH
3095: LD_INT 103
3097: PPUSH
3098: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3102: LD_EXP 30
3106: PUSH
3107: LD_INT 3
3109: ARRAY
3110: PPUSH
3111: LD_INT 209
3113: PPUSH
3114: LD_INT 106
3116: PPUSH
3117: CALL_OW 178
// repeat wait ( 0 0$20 ) ;
3121: LD_INT 700
3123: PPUSH
3124: CALL_OW 67
// for i := 3 downto 2 do
3128: LD_ADDR_VAR 0 1
3132: PUSH
3133: DOUBLE
3134: LD_INT 3
3136: INC
3137: ST_TO_ADDR
3138: LD_INT 2
3140: PUSH
3141: FOR_DOWNTO
3142: IFFALSE 3309
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3144: LD_EXP 30
3148: PUSH
3149: LD_VAR 0 1
3153: ARRAY
3154: PPUSH
3155: LD_INT 200
3157: PPUSH
3158: LD_INT 91
3160: PPUSH
3161: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3165: LD_EXP 30
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: LD_INT 210
3178: PPUSH
3179: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3183: LD_EXP 30
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_INT 224
3196: PPUSH
3197: LD_INT 93
3199: PPUSH
3200: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3204: LD_EXP 30
3208: PUSH
3209: LD_VAR 0 1
3213: ARRAY
3214: PPUSH
3215: LD_INT 210
3217: PPUSH
3218: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3222: LD_EXP 30
3226: PUSH
3227: LD_VAR 0 1
3231: ARRAY
3232: PPUSH
3233: LD_INT 239
3235: PPUSH
3236: LD_INT 123
3238: PPUSH
3239: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3243: LD_EXP 30
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: LD_INT 210
3256: PPUSH
3257: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3261: LD_EXP 30
3265: PUSH
3266: LD_VAR 0 1
3270: ARRAY
3271: PPUSH
3272: LD_INT 212
3274: PPUSH
3275: LD_INT 105
3277: PPUSH
3278: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3282: LD_EXP 30
3286: PUSH
3287: LD_VAR 0 1
3291: ARRAY
3292: PPUSH
3293: LD_INT 700
3295: PPUSH
3296: CALL_OW 202
// wait ( 0 0$30 ) ;
3300: LD_INT 1050
3302: PPUSH
3303: CALL_OW 67
// end ;
3307: GO 3141
3309: POP
3310: POP
// until not activeGrishkoAI ;
3311: LD_EXP 8
3315: NOT
3316: IFFALSE 3121
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3318: LD_EXP 30
3322: PPUSH
3323: LD_INT 221
3325: PPUSH
3326: LD_INT 110
3328: PPUSH
3329: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3333: LD_EXP 30
3337: PPUSH
3338: LD_INT 228
3340: PPUSH
3341: LD_INT 115
3343: PPUSH
3344: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3348: LD_EXP 30
3352: PPUSH
3353: CALL_OW 200
// end ;
3357: PPOPN 1
3359: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3360: LD_EXP 10
3364: IFFALSE 3925
3366: GO 3368
3368: DISABLE
3369: LD_INT 0
3371: PPUSH
3372: PPUSH
3373: PPUSH
3374: PPUSH
// begin uc_side := 6 ;
3375: LD_ADDR_OWVAR 20
3379: PUSH
3380: LD_INT 6
3382: ST_TO_ADDR
// uc_nation := 3 ;
3383: LD_ADDR_OWVAR 21
3387: PUSH
3388: LD_INT 3
3390: ST_TO_ADDR
// for i := 1 to 3 do
3391: LD_ADDR_VAR 0 2
3395: PUSH
3396: DOUBLE
3397: LD_INT 1
3399: DEC
3400: ST_TO_ADDR
3401: LD_INT 3
3403: PUSH
3404: FOR_TO
3405: IFFALSE 3514
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3407: LD_INT 0
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_INT 2
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: LD_INT 4
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_OWVAR 67
3431: ARRAY
3432: PPUSH
3433: CALL_OW 380
// un := CreateHuman ;
3437: LD_ADDR_VAR 0 1
3441: PUSH
3442: CALL_OW 44
3446: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3447: LD_ADDR_EXP 31
3451: PUSH
3452: LD_EXP 31
3456: PUSH
3457: LD_VAR 0 1
3461: UNION
3462: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: LD_INT 1
3470: PPUSH
3471: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3475: LD_VAR 0 1
3479: PPUSH
3480: LD_INT 11
3482: PPUSH
3483: LD_INT 0
3485: PPUSH
3486: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3490: LD_VAR 0 1
3494: PPUSH
3495: LD_INT 210
3497: PPUSH
3498: LD_INT 159
3500: PPUSH
3501: CALL_OW 111
// wait ( 0 0$2 ) ;
3505: LD_INT 70
3507: PPUSH
3508: CALL_OW 67
// end ;
3512: GO 3404
3514: POP
3515: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3516: LD_ADDR_VAR 0 4
3520: PUSH
3521: LD_INT 172
3523: PUSH
3524: LD_INT 76
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 150
3533: PUSH
3534: LD_INT 38
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 148
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 165
3553: PUSH
3554: LD_INT 38
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 191
3569: PUSH
3570: LD_INT 77
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 168
3579: PUSH
3580: LD_INT 42
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 166
3589: PUSH
3590: LD_INT 11
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 151
3599: PUSH
3600: LD_INT 12
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 221
3615: PUSH
3616: LD_INT 88
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: LD_INT 217
3625: PUSH
3626: LD_INT 64
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 208
3635: PUSH
3636: LD_INT 42
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3653: LD_INT 35
3655: PPUSH
3656: CALL_OW 67
// for i := 1 to patrol do
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: DOUBLE
3666: LD_INT 1
3668: DEC
3669: ST_TO_ADDR
3670: LD_VAR 0 4
3674: PUSH
3675: FOR_TO
3676: IFFALSE 3916
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3678: LD_EXP 31
3682: PUSH
3683: LD_VAR 0 2
3687: ARRAY
3688: PPUSH
3689: CALL_OW 256
3693: PUSH
3694: LD_INT 990
3696: LESS
3697: PUSH
3698: LD_EXP 31
3702: PUSH
3703: LD_VAR 0 2
3707: ARRAY
3708: PPUSH
3709: CALL_OW 110
3713: PUSH
3714: LD_INT 1
3716: EQUAL
3717: AND
3718: IFFALSE 3738
// SetTag ( russianPatrol [ i ] , 2 ) ;
3720: LD_EXP 31
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PPUSH
3731: LD_INT 2
3733: PPUSH
3734: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
3738: LD_EXP 31
3742: PUSH
3743: LD_VAR 0 2
3747: ARRAY
3748: PPUSH
3749: CALL_OW 110
3753: PUSH
3754: LD_INT 2
3756: EQUAL
3757: IFFALSE 3814
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3759: LD_EXP 31
3763: PUSH
3764: LD_VAR 0 2
3768: ARRAY
3769: PPUSH
3770: LD_INT 166
3772: PPUSH
3773: LD_INT 101
3775: PPUSH
3776: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3780: LD_EXP 31
3784: PUSH
3785: LD_VAR 0 2
3789: ARRAY
3790: PPUSH
3791: LD_INT 71
3793: PPUSH
3794: CALL_OW 296
3798: PUSH
3799: LD_INT 10
3801: LESS
3802: IFFALSE 3812
// russianAlert := true ;
3804: LD_ADDR_EXP 7
3808: PUSH
3809: LD_INT 1
3811: ST_TO_ADDR
// continue ;
3812: GO 3675
// end ; if not HasTask ( russianPatrol [ i ] ) then
3814: LD_EXP 31
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: PPUSH
3825: CALL_OW 314
3829: NOT
3830: IFFALSE 3914
// for j in patrol [ i ] do
3832: LD_ADDR_VAR 0 3
3836: PUSH
3837: LD_VAR 0 4
3841: PUSH
3842: LD_VAR 0 2
3846: ARRAY
3847: PUSH
3848: FOR_IN
3849: IFFALSE 3912
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3851: LD_EXP 31
3855: PUSH
3856: LD_VAR 0 2
3860: ARRAY
3861: PPUSH
3862: LD_INT 35
3864: PPUSH
3865: LD_INT 175
3867: PPUSH
3868: CALL_OW 12
3872: PPUSH
3873: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3877: LD_EXP 31
3881: PUSH
3882: LD_VAR 0 2
3886: ARRAY
3887: PPUSH
3888: LD_VAR 0 3
3892: PUSH
3893: LD_INT 1
3895: ARRAY
3896: PPUSH
3897: LD_VAR 0 3
3901: PUSH
3902: LD_INT 2
3904: ARRAY
3905: PPUSH
3906: CALL_OW 174
// end ;
3910: GO 3848
3912: POP
3913: POP
// end ;
3914: GO 3675
3916: POP
3917: POP
// until not russianPatrol ;
3918: LD_EXP 31
3922: NOT
3923: IFFALSE 3653
// end ;
3925: PPOPN 4
3927: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
3928: LD_INT 2
3930: PUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 22
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 101
3958: PUSH
3959: LD_INT 2
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PPUSH
3970: CALL_OW 69
3974: PUSH
3975: LD_EXP 31
3979: DIFF
3980: IFFALSE 3993
3982: GO 3984
3984: DISABLE
// russianAlert := true ; end_of_file end_of_file
3985: LD_ADDR_EXP 7
3989: PUSH
3990: LD_INT 1
3992: ST_TO_ADDR
3993: END
// export function Action ; var i , un , veh , tmp ; begin
3994: LD_INT 0
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
// InGameOn ;
4001: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
4005: LD_INT 179
4007: PPUSH
4008: LD_INT 5
4010: PPUSH
4011: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
4015: LD_ADDR_VAR 0 4
4019: PUSH
4020: LD_INT 2
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 12
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: LD_INT 24
4037: PPUSH
4038: LD_INT 33
4040: PPUSH
4041: CALL 204 0 7
4045: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4046: LD_VAR 0 4
4050: PPUSH
4051: LD_INT 2
4053: PPUSH
4054: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_INT 178
4065: PPUSH
4066: LD_INT 2
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
4076: LD_EXP 11
4080: PPUSH
4081: LD_VAR 0 4
4085: PPUSH
4086: CALL_OW 52
// if Kamil then
4090: LD_EXP 14
4094: IFFALSE 4129
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
4096: LD_EXP 14
4100: PPUSH
4101: LD_INT 207
4103: PPUSH
4104: LD_INT 37
4106: PPUSH
4107: LD_INT 0
4109: PPUSH
4110: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
4114: LD_EXP 14
4118: PPUSH
4119: LD_INT 211
4121: PPUSH
4122: LD_INT 38
4124: PPUSH
4125: CALL_OW 118
// end ; if Sophia then
4129: LD_EXP 16
4133: IFFALSE 4168
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
4135: LD_EXP 16
4139: PPUSH
4140: LD_INT 209
4142: PPUSH
4143: LD_INT 40
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
4153: LD_EXP 16
4157: PPUSH
4158: LD_INT 211
4160: PPUSH
4161: LD_INT 38
4163: PPUSH
4164: CALL_OW 118
// end ; if Givi then
4168: LD_EXP 12
4172: IFFALSE 4207
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
4174: LD_EXP 12
4178: PPUSH
4179: LD_INT 201
4181: PPUSH
4182: LD_INT 34
4184: PPUSH
4185: LD_INT 0
4187: PPUSH
4188: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
4192: LD_EXP 12
4196: PPUSH
4197: LD_INT 206
4199: PPUSH
4200: LD_INT 36
4202: PPUSH
4203: CALL_OW 118
// end ; if Markov then
4207: LD_EXP 17
4211: IFFALSE 4298
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
4213: LD_ADDR_VAR 0 4
4217: PUSH
4218: LD_INT 2
4220: PPUSH
4221: LD_INT 2
4223: PPUSH
4224: LD_INT 13
4226: PPUSH
4227: LD_INT 1
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: LD_INT 25
4235: PPUSH
4236: LD_INT 80
4238: PUSH
4239: LD_INT 20
4241: PUSH
4242: LD_OWVAR 67
4246: MUL
4247: MINUS
4248: PPUSH
4249: CALL 204 0 7
4253: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4254: LD_VAR 0 4
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_INT 197
4273: PPUSH
4274: LD_INT 35
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
4284: LD_EXP 17
4288: PPUSH
4289: LD_VAR 0 4
4293: PPUSH
4294: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
4298: LD_ADDR_VAR 0 5
4302: PUSH
4303: LD_EXP 15
4307: PUSH
4308: LD_EXP 23
4312: UNION
4313: ST_TO_ADDR
// for i in tmp do
4314: LD_ADDR_VAR 0 2
4318: PUSH
4319: LD_VAR 0 5
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4359
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_INT 203
4334: PPUSH
4335: LD_INT 41
4337: PPUSH
4338: LD_INT 6
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: CALL_OW 50
// ComHold ( i ) ;
4348: LD_VAR 0 2
4352: PPUSH
4353: CALL_OW 140
// end ;
4357: GO 4324
4359: POP
4360: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
4361: LD_INT 22
4363: PUSH
4364: LD_INT 2
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 25
4373: PUSH
4374: LD_INT 2
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PPUSH
4385: CALL_OW 69
4389: NOT
4390: IFFALSE 4404
// SetClass ( Heike , 2 ) ;
4392: LD_EXP 11
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
4404: LD_EXP 11
4408: PPUSH
4409: LD_INT 183
4411: PPUSH
4412: LD_INT 12
4414: PPUSH
4415: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
4419: LD_EXP 11
4423: PPUSH
4424: LD_INT 188
4426: PPUSH
4427: LD_INT 20
4429: PPUSH
4430: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
4434: LD_EXP 11
4438: PPUSH
4439: LD_INT 191
4441: PPUSH
4442: LD_INT 25
4444: PPUSH
4445: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
4449: LD_EXP 11
4453: PPUSH
4454: LD_INT 203
4456: PPUSH
4457: LD_INT 29
4459: PPUSH
4460: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
4464: LD_EXP 11
4468: PPUSH
4469: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
4473: LD_INT 35
4475: PPUSH
4476: CALL_OW 67
// until not IsInUnit ( Heike ) ;
4480: LD_EXP 11
4484: PPUSH
4485: CALL_OW 310
4489: NOT
4490: IFFALSE 4473
// CenterOnUnits ( Heike ) ;
4492: LD_EXP 11
4496: PPUSH
4497: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
4501: LD_ADDR_VAR 0 5
4505: PUSH
4506: LD_INT 22
4508: PUSH
4509: LD_INT 2
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 21
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 11
4539: PUSH
4540: LD_EXP 17
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: DIFF
4549: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
4550: LD_VAR 0 5
4554: PPUSH
4555: LD_EXP 11
4559: PPUSH
4560: CALL_OW 119
// if Givi then
4564: LD_EXP 12
4568: IFFALSE 4586
// ComTurnUnit ( Heike , Givi ) else
4570: LD_EXP 11
4574: PPUSH
4575: LD_EXP 12
4579: PPUSH
4580: CALL_OW 119
4584: GO 4604
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
4586: LD_EXP 11
4590: PPUSH
4591: LD_VAR 0 5
4595: PUSH
4596: LD_INT 1
4598: ARRAY
4599: PPUSH
4600: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
4604: LD_EXP 11
4608: PPUSH
4609: LD_STRING DH-Start-1
4611: PPUSH
4612: CALL_OW 88
// if Givi then
4616: LD_EXP 12
4620: IFFALSE 4667
// begin Say ( Givi , DG-Start-2 ) ;
4622: LD_EXP 12
4626: PPUSH
4627: LD_STRING DG-Start-2
4629: PPUSH
4630: CALL_OW 88
// if not Mike then
4634: LD_EXP 13
4638: NOT
4639: IFFALSE 4665
// begin Say ( Givi , DG-Start-b-3 ) ;
4641: LD_EXP 12
4645: PPUSH
4646: LD_STRING DG-Start-b-3
4648: PPUSH
4649: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
4653: LD_EXP 11
4657: PPUSH
4658: LD_STRING DH-Start-b-4
4660: PPUSH
4661: CALL_OW 88
// end ; end else
4665: GO 4732
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
4667: LD_EXP 23
4671: PPUSH
4672: LD_INT 26
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 72
4686: PUSH
4687: LD_INT 1
4689: ARRAY
4690: PPUSH
4691: LD_STRING DArm-Start-a-2
4693: PPUSH
4694: CALL_OW 88
4698: NOT
4699: IFFALSE 4732
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
4701: LD_EXP 23
4705: PPUSH
4706: LD_INT 26
4708: PUSH
4709: LD_INT 2
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 72
4720: PUSH
4721: LD_INT 1
4723: ARRAY
4724: PPUSH
4725: LD_STRING DArf-Start-a-2
4727: PPUSH
4728: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
4732: LD_EXP 11
4736: PPUSH
4737: LD_INT 211
4739: PPUSH
4740: LD_INT 38
4742: PPUSH
4743: CALL_OW 118
// wait ( 0 0$1 ) ;
4747: LD_INT 35
4749: PPUSH
4750: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
4754: LD_EXP 11
4758: PPUSH
4759: LD_STRING DH-Start-3
4761: PPUSH
4762: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
4766: LD_EXP 11
4770: PPUSH
4771: LD_STRING DH-Start-4
4773: PPUSH
4774: CALL_OW 88
// InGameOff ;
4778: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
4782: LD_STRING Prepare
4784: PPUSH
4785: CALL_OW 337
// wait ( 0 0$10 ) ;
4789: LD_INT 350
4791: PPUSH
4792: CALL_OW 67
// if not Aviradze then
4796: LD_EXP 22
4800: NOT
4801: IFFALSE 4805
// exit ;
4803: GO 4997
// SetDir ( Aviradze , 4 ) ;
4805: LD_EXP 22
4809: PPUSH
4810: LD_INT 4
4812: PPUSH
4813: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
4817: LD_EXP 22
4821: PPUSH
4822: LD_INT 225
4824: PPUSH
4825: LD_INT 33
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: CALL_OW 48
// for i := 1 to 2 do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 2
4847: PUSH
4848: FOR_TO
4849: IFFALSE 4980
// begin uc_side := 2 ;
4851: LD_ADDR_OWVAR 20
4855: PUSH
4856: LD_INT 2
4858: ST_TO_ADDR
// uc_nation := 0 ;
4859: LD_ADDR_OWVAR 21
4863: PUSH
4864: LD_INT 0
4866: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
4867: LD_INT 0
4869: PPUSH
4870: LD_INT 12
4872: PPUSH
4873: LD_INT 1
4875: PPUSH
4876: CALL_OW 380
// hc_gallery :=  ;
4880: LD_ADDR_OWVAR 33
4884: PUSH
4885: LD_STRING 
4887: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
4888: LD_ADDR_OWVAR 26
4892: PUSH
4893: LD_STRING Artudito
4895: PUSH
4896: LD_STRING Textur
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: LD_VAR 0 2
4907: ARRAY
4908: ST_TO_ADDR
// un := CreateHuman ;
4909: LD_ADDR_VAR 0 3
4913: PUSH
4914: CALL_OW 44
4918: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
4919: LD_VAR 0 3
4923: PPUSH
4924: LD_INT 224
4926: PUSH
4927: LD_INT 226
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 2
4938: ARRAY
4939: PPUSH
4940: LD_INT 31
4942: PUSH
4943: LD_INT 35
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_VAR 0 2
4954: ARRAY
4955: PPUSH
4956: LD_INT 0
4958: PPUSH
4959: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
4963: LD_VAR 0 3
4967: PPUSH
4968: LD_INT 215
4970: PPUSH
4971: LD_INT 36
4973: PPUSH
4974: CALL_OW 111
// end ;
4978: GO 4848
4980: POP
4981: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
4982: LD_EXP 22
4986: PPUSH
4987: LD_INT 215
4989: PPUSH
4990: LD_INT 36
4992: PPUSH
4993: CALL_OW 111
// end ;
4997: LD_VAR 0 1
5001: RET
// every 0 0$2 trigger baseConstructed do
5002: LD_EXP 3
5006: IFFALSE 5891
5008: GO 5010
5010: DISABLE
// begin DialogueOn ;
5011: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
5015: LD_EXP 11
5019: PPUSH
5020: LD_STRING DH-base-1
5022: PPUSH
5023: CALL_OW 88
// if Markov then
5027: LD_EXP 17
5031: IFFALSE 5083
// begin Say ( Markov , DMar-base-2 ) ;
5033: LD_EXP 17
5037: PPUSH
5038: LD_STRING DMar-base-2
5040: PPUSH
5041: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
5045: LD_EXP 17
5049: PPUSH
5050: LD_STRING DMar-base-3
5052: PPUSH
5053: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
5057: LD_EXP 11
5061: PPUSH
5062: LD_STRING DH-base-4
5064: PPUSH
5065: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
5069: LD_EXP 17
5073: PPUSH
5074: LD_STRING DMar-base-5
5076: PPUSH
5077: CALL_OW 88
// end else
5081: GO 5160
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
5083: LD_EXP 23
5087: PPUSH
5088: LD_INT 26
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 72
5102: PUSH
5103: LD_INT 1
5105: ARRAY
5106: PPUSH
5107: LD_STRING DArm-base-a-2
5109: PPUSH
5110: CALL_OW 88
5114: NOT
5115: IFFALSE 5148
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
5117: LD_EXP 23
5121: PPUSH
5122: LD_INT 26
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 72
5136: PUSH
5137: LD_INT 1
5139: ARRAY
5140: PPUSH
5141: LD_STRING DArf-base-a-2
5143: PPUSH
5144: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
5148: LD_EXP 11
5152: PPUSH
5153: LD_STRING DH-base-a-3
5155: PPUSH
5156: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
5160: LD_EXP 22
5164: PPUSH
5165: LD_STRING DA-base-6
5167: PPUSH
5168: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
5172: LD_EXP 22
5176: PPUSH
5177: LD_STRING DA-base-7
5179: PPUSH
5180: CALL_OW 88
// DialogueOff ;
5184: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
5188: LD_STRING Flamethrower
5190: PPUSH
5191: CALL_OW 337
// wait ( 2 2$00 ) ;
5195: LD_INT 4200
5197: PPUSH
5198: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
5202: LD_EXP 21
5206: PUSH
5207: LD_EXP 13
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PPUSH
5216: LD_INT 203
5218: PPUSH
5219: LD_INT 37
5221: PPUSH
5222: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
5226: LD_INT 22
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 92
5238: PUSH
5239: LD_INT 203
5241: PUSH
5242: LD_INT 37
5244: PUSH
5245: LD_INT 10
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 69
5262: NOT
5263: IFFALSE 5303
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
5265: LD_EXP 21
5269: PUSH
5270: LD_EXP 13
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: LD_EXP 11
5283: PPUSH
5284: CALL_OW 250
5288: PPUSH
5289: LD_EXP 11
5293: PPUSH
5294: CALL_OW 251
5298: PPUSH
5299: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5303: LD_INT 35
5305: PPUSH
5306: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
5310: LD_INT 2
5312: PPUSH
5313: LD_EXP 21
5317: PPUSH
5318: CALL_OW 292
5322: PUSH
5323: LD_EXP 21
5327: PPUSH
5328: LD_EXP 11
5332: PPUSH
5333: CALL_OW 296
5337: PUSH
5338: LD_INT 8
5340: LESS
5341: OR
5342: IFFALSE 5303
// InGameOn ;
5344: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
5348: LD_EXP 21
5352: PPUSH
5353: CALL_OW 87
// if IsInUnit ( Heike ) then
5357: LD_EXP 11
5361: PPUSH
5362: CALL_OW 310
5366: IFFALSE 5377
// ComExitBuilding ( Heike ) ;
5368: LD_EXP 11
5372: PPUSH
5373: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
5377: LD_EXP 21
5381: PUSH
5382: LD_EXP 13
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PPUSH
5391: LD_EXP 11
5395: PPUSH
5396: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
5400: LD_EXP 11
5404: PPUSH
5405: LD_EXP 21
5409: PPUSH
5410: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
5414: LD_INT 22
5416: PUSH
5417: LD_INT 2
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 91
5426: PUSH
5427: LD_EXP 21
5431: PUSH
5432: LD_INT 10
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 21
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: LIST
5454: PPUSH
5455: CALL_OW 69
5459: IFFALSE 5485
// begin Say ( Kurt , DKs-scout-1 ) ;
5461: LD_EXP 21
5465: PPUSH
5466: LD_STRING DKs-scout-1
5468: PPUSH
5469: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
5473: LD_EXP 11
5477: PPUSH
5478: LD_STRING DH-scout-2
5480: PPUSH
5481: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
5485: LD_INT 35
5487: PPUSH
5488: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
5492: LD_EXP 11
5496: PPUSH
5497: LD_EXP 21
5501: PPUSH
5502: CALL_OW 296
5506: PUSH
5507: LD_INT 6
5509: LESS
5510: IFFALSE 5485
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
5512: LD_EXP 21
5516: PUSH
5517: LD_EXP 13
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: LD_EXP 11
5530: PPUSH
5531: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
5535: LD_EXP 21
5539: PPUSH
5540: LD_STRING DKs-scout-3
5542: PPUSH
5543: CALL_OW 88
// if Kaia then
5547: LD_EXP 15
5551: IFFALSE 5734
// begin if IsInUnit ( Kaia ) then
5553: LD_EXP 15
5557: PPUSH
5558: CALL_OW 310
5562: IFFALSE 5573
// ComExitBuilding ( Kaia ) ;
5564: LD_EXP 15
5568: PPUSH
5569: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
5573: LD_EXP 15
5577: PPUSH
5578: LD_EXP 21
5582: PPUSH
5583: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
5587: LD_INT 35
5589: PPUSH
5590: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
5594: LD_EXP 15
5598: PPUSH
5599: LD_EXP 21
5603: PPUSH
5604: CALL_OW 296
5608: PUSH
5609: LD_INT 6
5611: LESS
5612: IFFALSE 5587
// ComTurnUnit ( Kaia , Kurt ) ;
5614: LD_EXP 15
5618: PPUSH
5619: LD_EXP 21
5623: PPUSH
5624: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
5628: LD_EXP 15
5632: PPUSH
5633: LD_STRING DK-scout-4
5635: PPUSH
5636: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
5640: LD_EXP 21
5644: PPUSH
5645: LD_EXP 15
5649: PPUSH
5650: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
5654: LD_EXP 21
5658: PPUSH
5659: LD_STRING DKs-scout-5
5661: PPUSH
5662: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
5666: LD_EXP 15
5670: PPUSH
5671: LD_STRING DK-scout-6
5673: PPUSH
5674: CALL_OW 88
// if Mike then
5678: LD_EXP 13
5682: IFFALSE 5734
// begin Say ( Mike , DM-scout-7 ) ;
5684: LD_EXP 13
5688: PPUSH
5689: LD_STRING DM-scout-7
5691: PPUSH
5692: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
5696: LD_EXP 15
5700: PPUSH
5701: LD_EXP 13
5705: PPUSH
5706: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
5710: LD_EXP 15
5714: PPUSH
5715: LD_STRING DK-scout-8
5717: PPUSH
5718: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
5722: LD_EXP 13
5726: PPUSH
5727: LD_STRING DM-scout-9
5729: PPUSH
5730: CALL_OW 88
// end ; end ; ShowArea ( scoutArea , 2 ) ;
5734: LD_INT 9
5736: PPUSH
5737: LD_INT 2
5739: PPUSH
5740: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
5744: LD_INT 184
5746: PPUSH
5747: LD_INT 100
5749: PPUSH
5750: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
5754: LD_EXP 21
5758: PPUSH
5759: LD_STRING DKs-scout-10
5761: PPUSH
5762: CALL_OW 88
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// ShowArea ( hillArea , 2 ) ;
5773: LD_INT 10
5775: PPUSH
5776: LD_INT 2
5778: PPUSH
5779: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
5783: LD_INT 144
5785: PPUSH
5786: LD_INT 65
5788: PPUSH
5789: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
5793: LD_EXP 21
5797: PPUSH
5798: LD_STRING DKs-scout-11
5800: PPUSH
5801: CALL_OW 88
// wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
5812: LD_EXP 21
5816: PPUSH
5817: CALL_OW 87
// if Mike and not Givi then
5821: LD_EXP 13
5825: PUSH
5826: LD_EXP 12
5830: NOT
5831: AND
5832: IFFALSE 5858
// begin Say ( Mike , DM-scout-a-1 ) ;
5834: LD_EXP 13
5838: PPUSH
5839: LD_STRING DM-scout-a-1
5841: PPUSH
5842: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
5846: LD_EXP 11
5850: PPUSH
5851: LD_STRING DH-scout-a-2
5853: PPUSH
5854: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
5858: LD_EXP 21
5862: PUSH
5863: LD_EXP 13
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: LD_INT 2
5874: PPUSH
5875: CALL_OW 235
// InGameOff ;
5879: CALL_OW 9
// allowToPatrol := true ;
5883: LD_ADDR_EXP 10
5887: PUSH
5888: LD_INT 1
5890: ST_TO_ADDR
// end ;
5891: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
5892: LD_EXP 4
5896: PUSH
5897: LD_EXP 22
5901: PPUSH
5902: CALL_OW 302
5906: AND
5907: IFFALSE 5956
5909: GO 5911
5911: DISABLE
// begin DialogueOn ;
5912: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
5916: LD_EXP 22
5920: PPUSH
5921: LD_STRING DA-lab-1
5923: PPUSH
5924: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
5928: LD_EXP 22
5932: PPUSH
5933: LD_STRING DA-lab-2
5935: PPUSH
5936: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
5940: LD_EXP 11
5944: PPUSH
5945: LD_STRING DH-lab-3
5947: PPUSH
5948: CALL_OW 88
// DialogueOff ;
5952: CALL_OW 7
// end ;
5956: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
5957: LD_INT 17
5959: PPUSH
5960: LD_INT 2
5962: PPUSH
5963: CALL_OW 321
5967: PUSH
5968: LD_INT 2
5970: EQUAL
5971: IFFALSE 6103
5973: GO 5975
5975: DISABLE
5976: LD_INT 0
5978: PPUSH
// begin DialogueOn ;
5979: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
5983: LD_EXP 22
5987: PPUSH
5988: LD_STRING DA-Cam-1
5990: PPUSH
5991: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
5995: LD_EXP 22
5999: PPUSH
6000: LD_STRING DA-Cam-2
6002: PPUSH
6003: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
6007: LD_EXP 22
6011: PPUSH
6012: LD_STRING DA-Cam-3
6014: PPUSH
6015: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
6019: LD_EXP 11
6023: PPUSH
6024: LD_STRING DH-Cam-4
6026: PPUSH
6027: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
6031: LD_EXP 15
6035: PPUSH
6036: LD_STRING DK-Cam-5
6038: PPUSH
6039: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
6043: LD_EXP 15
6047: PPUSH
6048: LD_STRING DK-Cam-6
6050: PPUSH
6051: CALL_OW 88
// DialogueOff ;
6055: CALL_OW 7
// Query ( Camera ) ;
6059: LD_STRING Camera
6061: PPUSH
6062: CALL_OW 97
// hiddenCameraAllowed := true ;
6066: LD_ADDR_EXP 5
6070: PUSH
6071: LD_INT 1
6073: ST_TO_ADDR
// for i in camAreas do
6074: LD_ADDR_VAR 0 1
6078: PUSH
6079: LD_EXP 6
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6101
// SetAreaMapShow ( i , 1 ) ;
6087: LD_VAR 0 1
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: CALL_OW 424
6099: GO 6084
6101: POP
6102: POP
// end ;
6103: PPOPN 1
6105: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
6106: LD_EXP 6
6110: NOT
6111: PUSH
6112: LD_EXP 5
6116: AND
6117: IFFALSE 6208
6119: GO 6121
6121: DISABLE
6122: LD_INT 0
6124: PPUSH
// begin stop_talking := true ;
6125: LD_ADDR_OWVAR 56
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
6133: LD_ADDR_VAR 0 1
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_INT 2
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 1
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 23
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: PPUSH
6173: CALL_OW 69
6177: PUSH
6178: FOR_IN
6179: IFFALSE 6198
// AddExperience ( i , 2 , 450 ) ;
6181: LD_VAR 0 1
6185: PPUSH
6186: LD_INT 2
6188: PPUSH
6189: LD_INT 450
6191: PPUSH
6192: CALL_OW 492
6196: GO 6178
6198: POP
6199: POP
// stop_talking := false ;
6200: LD_ADDR_OWVAR 56
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// end ;
6208: PPOPN 1
6210: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
6211: LD_EXP 7
6215: PUSH
6216: LD_EXP 9
6220: NOT
6221: AND
6222: IFFALSE 6234
6224: GO 6226
6226: DISABLE
// YouLost ( Spotted ) ; end_of_file
6227: LD_STRING Spotted
6229: PPUSH
6230: CALL_OW 104
6234: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
6235: LD_VAR 0 1
6239: PPUSH
6240: CALL_OW 266
6244: PUSH
6245: LD_INT 0
6247: EQUAL
6248: PUSH
6249: LD_VAR 0 1
6253: PPUSH
6254: CALL_OW 255
6258: PUSH
6259: LD_INT 2
6261: EQUAL
6262: AND
6263: IFFALSE 6273
// baseConstructed := true ;
6265: LD_ADDR_EXP 3
6269: PUSH
6270: LD_INT 1
6272: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
6273: LD_VAR 0 1
6277: PPUSH
6278: CALL_OW 266
6282: PUSH
6283: LD_INT 6
6285: EQUAL
6286: PUSH
6287: LD_VAR 0 1
6291: PPUSH
6292: CALL_OW 255
6296: PUSH
6297: LD_INT 2
6299: EQUAL
6300: AND
6301: IFFALSE 6311
// labConstructed := true ;
6303: LD_ADDR_EXP 4
6307: PUSH
6308: LD_INT 1
6310: ST_TO_ADDR
// end ;
6311: PPOPN 1
6313: END
// on UnitDestroyed ( un ) do begin if un = Heike then
6314: LD_VAR 0 1
6318: PUSH
6319: LD_EXP 11
6323: EQUAL
6324: IFFALSE 6333
// YouLost ( Heike ) ;
6326: LD_STRING Heike
6328: PPUSH
6329: CALL_OW 104
// if un in russianPatrol then
6333: LD_VAR 0 1
6337: PUSH
6338: LD_EXP 31
6342: IN
6343: IFFALSE 6361
// russianPatrol := russianPatrol diff un ;
6345: LD_ADDR_EXP 31
6349: PUSH
6350: LD_EXP 31
6354: PUSH
6355: LD_VAR 0 1
6359: DIFF
6360: ST_TO_ADDR
// end ;
6361: PPOPN 1
6363: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
6364: LD_INT 0
6366: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
6367: LD_EXP 6
6371: NOT
6372: PUSH
6373: LD_EXP 5
6377: NOT
6378: OR
6379: IFFALSE 6383
// exit ;
6381: GO 6451
// for i in camAreas do
6383: LD_ADDR_VAR 0 5
6387: PUSH
6388: LD_EXP 6
6392: PUSH
6393: FOR_IN
6394: IFFALSE 6449
// if InArea ( x , y , i ) then
6396: LD_VAR 0 3
6400: PPUSH
6401: LD_VAR 0 4
6405: PPUSH
6406: LD_VAR 0 5
6410: PPUSH
6411: CALL_OW 309
6415: IFFALSE 6447
// begin SetAreaMapShow ( i , 0 ) ;
6417: LD_VAR 0 5
6421: PPUSH
6422: LD_INT 0
6424: PPUSH
6425: CALL_OW 424
// camAreas := camAreas diff i ;
6429: LD_ADDR_EXP 6
6433: PUSH
6434: LD_EXP 6
6438: PUSH
6439: LD_VAR 0 5
6443: DIFF
6444: ST_TO_ADDR
// break ;
6445: GO 6449
// end ;
6447: GO 6393
6449: POP
6450: POP
// end ; end_of_file
6451: PPOPN 5
6453: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
6454: LD_EXP 9
6458: NOT
6459: PUSH
6460: LD_INT 12
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: CALL_OW 287
6470: PUSH
6471: LD_INT 200
6473: PUSH
6474: LD_INT 160
6476: PUSH
6477: LD_INT 120
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: LD_OWVAR 67
6489: ARRAY
6490: LESS
6491: AND
6492: IFFALSE 6519
6494: GO 6496
6496: DISABLE
// begin enable ;
6497: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
6498: LD_INT 1
6500: PPUSH
6501: LD_INT 5
6503: PPUSH
6504: CALL_OW 12
6508: PPUSH
6509: LD_INT 12
6511: PPUSH
6512: LD_INT 1
6514: PPUSH
6515: CALL_OW 55
// end ;
6519: END
