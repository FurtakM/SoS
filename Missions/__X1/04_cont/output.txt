// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1752 0 0
// PrepareArabian ;
  12: CALL 1941 0 0
// PrepareAmerican ;
  16: CALL 6476 0 0
// PrepareRussian ;
  20: CALL 2862 0 0
// Action ;
  24: CALL 8036 0 0
// if debug then
  28: LD_EXP 1
  32: IFFALSE 41
// FogOff ( 2 ) ;
  34: LD_INT 2
  36: PPUSH
  37: CALL_OW 344
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 15
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 22 22$00 , 21 21$00 , 20 20$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 21
 177: PUSH
 178: LD_INT 46200
 180: PUSH
 181: LD_INT 44100
 183: PUSH
 184: LD_INT 42000
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 18
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 20
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 3
 229: PUSH
 230: LD_INT 4
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 7
 241: PUSH
 242: LD_INT 8
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// end ; end_of_file
 253: LD_VAR 0 1
 257: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
// if exist_mode then
 262: LD_VAR 0 2
 266: IFFALSE 291
// unit := CreateCharacter ( prefix & ident ) else
 268: LD_ADDR_VAR 0 5
 272: PUSH
 273: LD_VAR 0 3
 277: PUSH
 278: LD_VAR 0 1
 282: STR
 283: PPUSH
 284: CALL_OW 34
 288: ST_TO_ADDR
 289: GO 306
// unit := NewCharacter ( ident ) ;
 291: LD_ADDR_VAR 0 5
 295: PUSH
 296: LD_VAR 0 1
 300: PPUSH
 301: CALL_OW 25
 305: ST_TO_ADDR
// result := unit ;
 306: LD_ADDR_VAR 0 4
 310: PUSH
 311: LD_VAR 0 5
 315: ST_TO_ADDR
// end ;
 316: LD_VAR 0 4
 320: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 321: LD_INT 0
 323: PPUSH
// uc_side := side ;
 324: LD_ADDR_OWVAR 20
 328: PUSH
 329: LD_VAR 0 1
 333: ST_TO_ADDR
// uc_nation := nation ;
 334: LD_ADDR_OWVAR 21
 338: PUSH
 339: LD_VAR 0 2
 343: ST_TO_ADDR
// vc_chassis := chassis ;
 344: LD_ADDR_OWVAR 37
 348: PUSH
 349: LD_VAR 0 3
 353: ST_TO_ADDR
// vc_engine := engine ;
 354: LD_ADDR_OWVAR 39
 358: PUSH
 359: LD_VAR 0 4
 363: ST_TO_ADDR
// vc_control := control ;
 364: LD_ADDR_OWVAR 38
 368: PUSH
 369: LD_VAR 0 5
 373: ST_TO_ADDR
// vc_weapon := weapon ;
 374: LD_ADDR_OWVAR 40
 378: PUSH
 379: LD_VAR 0 6
 383: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 384: LD_ADDR_OWVAR 41
 388: PUSH
 389: LD_VAR 0 7
 393: ST_TO_ADDR
// result := CreateVehicle ;
 394: LD_ADDR_VAR 0 8
 398: PUSH
 399: CALL_OW 45
 403: ST_TO_ADDR
// end ;
 404: LD_VAR 0 8
 408: RET
// export function SayX ( units , ident ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// result := false ;
 413: LD_ADDR_VAR 0 3
 417: PUSH
 418: LD_INT 0
 420: ST_TO_ADDR
// if not units then
 421: LD_VAR 0 1
 425: NOT
 426: IFFALSE 430
// exit ;
 428: GO 484
// for i in units do
 430: LD_ADDR_VAR 0 4
 434: PUSH
 435: LD_VAR 0 1
 439: PUSH
 440: FOR_IN
 441: IFFALSE 482
// if IsOk ( i ) then
 443: LD_VAR 0 4
 447: PPUSH
 448: CALL_OW 302
 452: IFFALSE 480
// begin Say ( i , ident ) ;
 454: LD_VAR 0 4
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: CALL_OW 88
// result := i ;
 468: LD_ADDR_VAR 0 3
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// break ;
 478: GO 482
// end ;
 480: GO 440
 482: POP
 483: POP
// end ;
 484: LD_VAR 0 3
 488: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
 493: PPUSH
// if not observer or not unit then
 494: LD_VAR 0 1
 498: NOT
 499: PUSH
 500: LD_VAR 0 2
 504: NOT
 505: OR
 506: IFFALSE 510
// exit ;
 508: GO 558
// if not See ( GetSide ( observer ) , unit ) then
 510: LD_VAR 0 1
 514: PPUSH
 515: CALL_OW 255
 519: PPUSH
 520: LD_VAR 0 2
 524: PPUSH
 525: CALL_OW 292
 529: NOT
 530: IFFALSE 534
// exit ;
 532: GO 558
// result := GetDistUnits ( observer , unit ) < 12 ;
 534: LD_ADDR_VAR 0 3
 538: PUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 296
 553: PUSH
 554: LD_INT 12
 556: LESS
 557: ST_TO_ADDR
// end ;
 558: LD_VAR 0 3
 562: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 563: LD_INT 0
 565: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 566: LD_VAR 0 2
 570: PUSH
 571: LD_INT 1
 573: ARRAY
 574: PPUSH
 575: LD_VAR 0 2
 579: PUSH
 580: LD_INT 2
 582: ARRAY
 583: PPUSH
 584: CALL_OW 488
 588: PUSH
 589: LD_VAR 0 2
 593: PUSH
 594: LD_INT 1
 596: ARRAY
 597: PPUSH
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 2
 605: ARRAY
 606: PPUSH
 607: CALL_OW 428
 611: PUSH
 612: LD_INT 0
 614: EQUAL
 615: AND
 616: IFFALSE 650
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: LD_VAR 0 2
 627: PUSH
 628: LD_INT 1
 630: ARRAY
 631: PPUSH
 632: LD_VAR 0 2
 636: PUSH
 637: LD_INT 2
 639: ARRAY
 640: PPUSH
 641: LD_VAR 0 3
 645: PPUSH
 646: CALL_OW 48
// end ;
 650: LD_VAR 0 4
 654: RET
// export function Video ( mode ) ; begin
 655: LD_INT 0
 657: PPUSH
// ingame_video = mode ;
 658: LD_ADDR_OWVAR 52
 662: PUSH
 663: LD_VAR 0 1
 667: ST_TO_ADDR
// interface_hidden = mode ;
 668: LD_ADDR_OWVAR 54
 672: PUSH
 673: LD_VAR 0 1
 677: ST_TO_ADDR
// end ;
 678: LD_VAR 0 2
 682: RET
// export function ReverseArray ( array ) ; var i ; begin
 683: LD_INT 0
 685: PPUSH
 686: PPUSH
// if not array then
 687: LD_VAR 0 1
 691: NOT
 692: IFFALSE 696
// exit ;
 694: GO 754
// result := [ ] ;
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: EMPTY
 702: ST_TO_ADDR
// for i := 1 to array do
 703: LD_ADDR_VAR 0 3
 707: PUSH
 708: DOUBLE
 709: LD_INT 1
 711: DEC
 712: ST_TO_ADDR
 713: LD_VAR 0 1
 717: PUSH
 718: FOR_TO
 719: IFFALSE 752
// result := Insert ( result , 1 , array [ i ] ) ;
 721: LD_ADDR_VAR 0 2
 725: PUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_VAR 0 1
 738: PUSH
 739: LD_VAR 0 3
 743: ARRAY
 744: PPUSH
 745: CALL_OW 2
 749: ST_TO_ADDR
 750: GO 718
 752: POP
 753: POP
// end ;
 754: LD_VAR 0 2
 758: RET
// export function ComExit ( unit ) ; begin
 759: LD_INT 0
 761: PPUSH
// result := IsInUnit ( unit ) ;
 762: LD_ADDR_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: PPUSH
 772: CALL_OW 310
 776: ST_TO_ADDR
// if not result then
 777: LD_VAR 0 2
 781: NOT
 782: IFFALSE 786
// exit ;
 784: GO 821
// if GetType ( result ) = unit_vehicle then
 786: LD_VAR 0 2
 790: PPUSH
 791: CALL_OW 247
 795: PUSH
 796: LD_INT 2
 798: EQUAL
 799: IFFALSE 812
// ComExitVehicle ( unit ) else
 801: LD_VAR 0 1
 805: PPUSH
 806: CALL_OW 121
 810: GO 821
// ComExitBuilding ( unit ) ;
 812: LD_VAR 0 1
 816: PPUSH
 817: CALL_OW 122
// end ;
 821: LD_VAR 0 2
 825: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
// if not side or not nation then
 830: LD_VAR 0 1
 834: NOT
 835: PUSH
 836: LD_VAR 0 2
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1610
// case nation of nation_american :
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: DOUBLE
 854: EQUAL
 855: IFTRUE 859
 857: GO 1073
 859: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 860: LD_ADDR_VAR 0 4
 864: PUSH
 865: LD_INT 35
 867: PUSH
 868: LD_INT 45
 870: PUSH
 871: LD_INT 46
 873: PUSH
 874: LD_INT 47
 876: PUSH
 877: LD_INT 82
 879: PUSH
 880: LD_INT 83
 882: PUSH
 883: LD_INT 84
 885: PUSH
 886: LD_INT 85
 888: PUSH
 889: LD_INT 86
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 6
 900: PUSH
 901: LD_INT 15
 903: PUSH
 904: LD_INT 16
 906: PUSH
 907: LD_INT 7
 909: PUSH
 910: LD_INT 12
 912: PUSH
 913: LD_INT 13
 915: PUSH
 916: LD_INT 10
 918: PUSH
 919: LD_INT 14
 921: PUSH
 922: LD_INT 20
 924: PUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 22
 930: PUSH
 931: LD_INT 25
 933: PUSH
 934: LD_INT 32
 936: PUSH
 937: LD_INT 27
 939: PUSH
 940: LD_INT 36
 942: PUSH
 943: LD_INT 69
 945: PUSH
 946: LD_INT 39
 948: PUSH
 949: LD_INT 34
 951: PUSH
 952: LD_INT 40
 954: PUSH
 955: LD_INT 48
 957: PUSH
 958: LD_INT 49
 960: PUSH
 961: LD_INT 50
 963: PUSH
 964: LD_INT 51
 966: PUSH
 967: LD_INT 52
 969: PUSH
 970: LD_INT 53
 972: PUSH
 973: LD_INT 54
 975: PUSH
 976: LD_INT 55
 978: PUSH
 979: LD_INT 56
 981: PUSH
 982: LD_INT 57
 984: PUSH
 985: LD_INT 58
 987: PUSH
 988: LD_INT 59
 990: PUSH
 991: LD_INT 60
 993: PUSH
 994: LD_INT 61
 996: PUSH
 997: LD_INT 62
 999: PUSH
1000: LD_INT 80
1002: PUSH
1003: LD_INT 82
1005: PUSH
1006: LD_INT 83
1008: PUSH
1009: LD_INT 84
1011: PUSH
1012: LD_INT 85
1014: PUSH
1015: LD_INT 86
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: ST_TO_ADDR
1071: GO 1534
1073: LD_INT 2
1075: DOUBLE
1076: EQUAL
1077: IFTRUE 1081
1079: GO 1303
1081: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1082: LD_ADDR_VAR 0 4
1086: PUSH
1087: LD_INT 35
1089: PUSH
1090: LD_INT 45
1092: PUSH
1093: LD_INT 46
1095: PUSH
1096: LD_INT 47
1098: PUSH
1099: LD_INT 82
1101: PUSH
1102: LD_INT 83
1104: PUSH
1105: LD_INT 84
1107: PUSH
1108: LD_INT 85
1110: PUSH
1111: LD_INT 87
1113: PUSH
1114: LD_INT 70
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 11
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 5
1131: PUSH
1132: LD_INT 6
1134: PUSH
1135: LD_INT 15
1137: PUSH
1138: LD_INT 18
1140: PUSH
1141: LD_INT 7
1143: PUSH
1144: LD_INT 17
1146: PUSH
1147: LD_INT 8
1149: PUSH
1150: LD_INT 20
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 22
1158: PUSH
1159: LD_INT 72
1161: PUSH
1162: LD_INT 26
1164: PUSH
1165: LD_INT 69
1167: PUSH
1168: LD_INT 39
1170: PUSH
1171: LD_INT 40
1173: PUSH
1174: LD_INT 41
1176: PUSH
1177: LD_INT 42
1179: PUSH
1180: LD_INT 43
1182: PUSH
1183: LD_INT 48
1185: PUSH
1186: LD_INT 49
1188: PUSH
1189: LD_INT 50
1191: PUSH
1192: LD_INT 51
1194: PUSH
1195: LD_INT 52
1197: PUSH
1198: LD_INT 53
1200: PUSH
1201: LD_INT 54
1203: PUSH
1204: LD_INT 55
1206: PUSH
1207: LD_INT 56
1209: PUSH
1210: LD_INT 60
1212: PUSH
1213: LD_INT 61
1215: PUSH
1216: LD_INT 62
1218: PUSH
1219: LD_INT 66
1221: PUSH
1222: LD_INT 67
1224: PUSH
1225: LD_INT 68
1227: PUSH
1228: LD_INT 81
1230: PUSH
1231: LD_INT 82
1233: PUSH
1234: LD_INT 83
1236: PUSH
1237: LD_INT 84
1239: PUSH
1240: LD_INT 85
1242: PUSH
1243: LD_INT 87
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: ST_TO_ADDR
1301: GO 1534
1303: LD_INT 3
1305: DOUBLE
1306: EQUAL
1307: IFTRUE 1311
1309: GO 1533
1311: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1312: LD_ADDR_VAR 0 4
1316: PUSH
1317: LD_INT 46
1319: PUSH
1320: LD_INT 47
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: LD_INT 82
1331: PUSH
1332: LD_INT 83
1334: PUSH
1335: LD_INT 84
1337: PUSH
1338: LD_INT 85
1340: PUSH
1341: LD_INT 86
1343: PUSH
1344: LD_INT 11
1346: PUSH
1347: LD_INT 9
1349: PUSH
1350: LD_INT 20
1352: PUSH
1353: LD_INT 19
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 24
1361: PUSH
1362: LD_INT 22
1364: PUSH
1365: LD_INT 25
1367: PUSH
1368: LD_INT 28
1370: PUSH
1371: LD_INT 29
1373: PUSH
1374: LD_INT 30
1376: PUSH
1377: LD_INT 31
1379: PUSH
1380: LD_INT 37
1382: PUSH
1383: LD_INT 38
1385: PUSH
1386: LD_INT 32
1388: PUSH
1389: LD_INT 27
1391: PUSH
1392: LD_INT 33
1394: PUSH
1395: LD_INT 69
1397: PUSH
1398: LD_INT 39
1400: PUSH
1401: LD_INT 34
1403: PUSH
1404: LD_INT 40
1406: PUSH
1407: LD_INT 71
1409: PUSH
1410: LD_INT 23
1412: PUSH
1413: LD_INT 44
1415: PUSH
1416: LD_INT 48
1418: PUSH
1419: LD_INT 49
1421: PUSH
1422: LD_INT 50
1424: PUSH
1425: LD_INT 51
1427: PUSH
1428: LD_INT 52
1430: PUSH
1431: LD_INT 53
1433: PUSH
1434: LD_INT 54
1436: PUSH
1437: LD_INT 55
1439: PUSH
1440: LD_INT 56
1442: PUSH
1443: LD_INT 57
1445: PUSH
1446: LD_INT 58
1448: PUSH
1449: LD_INT 59
1451: PUSH
1452: LD_INT 63
1454: PUSH
1455: LD_INT 64
1457: PUSH
1458: LD_INT 65
1460: PUSH
1461: LD_INT 82
1463: PUSH
1464: LD_INT 83
1466: PUSH
1467: LD_INT 84
1469: PUSH
1470: LD_INT 85
1472: PUSH
1473: LD_INT 86
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: ST_TO_ADDR
1531: GO 1534
1533: POP
// if state > - 1 and state < 3 then
1534: LD_VAR 0 3
1538: PUSH
1539: LD_INT 1
1541: NEG
1542: GREATER
1543: PUSH
1544: LD_VAR 0 3
1548: PUSH
1549: LD_INT 3
1551: LESS
1552: AND
1553: IFFALSE 1610
// for i in result do
1555: LD_ADDR_VAR 0 5
1559: PUSH
1560: LD_VAR 0 4
1564: PUSH
1565: FOR_IN
1566: IFFALSE 1608
// if GetTech ( i , side ) <> state then
1568: LD_VAR 0 5
1572: PPUSH
1573: LD_VAR 0 1
1577: PPUSH
1578: CALL_OW 321
1582: PUSH
1583: LD_VAR 0 3
1587: NONEQUAL
1588: IFFALSE 1606
// result := result diff i ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_VAR 0 4
1599: PUSH
1600: LD_VAR 0 5
1604: DIFF
1605: ST_TO_ADDR
1606: GO 1565
1608: POP
1609: POP
// end ;
1610: LD_VAR 0 4
1614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1615: LD_INT 0
1617: PPUSH
1618: PPUSH
// InitUc ;
1619: CALL_OW 18
// InitHc ;
1623: CALL_OW 19
// uc_side := 0 ;
1627: LD_ADDR_OWVAR 20
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// uc_nation := 0 ;
1635: LD_ADDR_OWVAR 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// for i = 1 to amount do
1643: LD_ADDR_VAR 0 4
1647: PUSH
1648: DOUBLE
1649: LD_INT 1
1651: DEC
1652: ST_TO_ADDR
1653: LD_VAR 0 2
1657: PUSH
1658: FOR_TO
1659: IFFALSE 1741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1661: LD_ADDR_OWVAR 29
1665: PUSH
1666: LD_INT 9
1668: PPUSH
1669: LD_INT 12
1671: PPUSH
1672: CALL_OW 12
1676: PUSH
1677: LD_INT 9
1679: PPUSH
1680: LD_INT 12
1682: PPUSH
1683: CALL_OW 12
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1692: LD_ADDR_OWVAR 35
1696: PUSH
1697: LD_INT 1
1699: NEG
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: CALL_OW 12
1708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1709: LD_INT 0
1711: PPUSH
1712: LD_INT 12
1714: PPUSH
1715: LD_INT 1
1717: PPUSH
1718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1722: CALL_OW 44
1726: PPUSH
1727: LD_VAR 0 1
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// end ;
1739: GO 1658
1741: POP
1742: POP
// InitHc ;
1743: CALL_OW 19
// end ;
1747: LD_VAR 0 3
1751: RET
// export function PrepareNature ; var i ; begin
1752: LD_INT 0
1754: PPUSH
1755: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1756: LD_INT 18
1758: PPUSH
1759: LD_INT 5
1761: PUSH
1762: LD_INT 4
1764: PUSH
1765: LD_INT 3
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_OWVAR 67
1777: ARRAY
1778: PPUSH
1779: CALL 1615 0 2
// for i := 1 to 3 do
1783: LD_ADDR_VAR 0 2
1787: PUSH
1788: DOUBLE
1789: LD_INT 1
1791: DEC
1792: ST_TO_ADDR
1793: LD_INT 3
1795: PUSH
1796: FOR_TO
1797: IFFALSE 1832
// begin hc_class := 21 ;
1799: LD_ADDR_OWVAR 28
1803: PUSH
1804: LD_INT 21
1806: ST_TO_ADDR
// hc_gallery :=  ;
1807: LD_ADDR_OWVAR 33
1811: PUSH
1812: LD_STRING 
1814: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1815: CALL_OW 44
1819: PPUSH
1820: LD_INT 18
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 49
// end ;
1830: GO 1796
1832: POP
1833: POP
// for i := 1 to 2 do
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 2
1846: PUSH
1847: FOR_TO
1848: IFFALSE 1883
// begin hc_class := 18 ;
1850: LD_ADDR_OWVAR 28
1854: PUSH
1855: LD_INT 18
1857: ST_TO_ADDR
// hc_gallery :=  ;
1858: LD_ADDR_OWVAR 33
1862: PUSH
1863: LD_STRING 
1865: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1866: CALL_OW 44
1870: PPUSH
1871: LD_INT 18
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1847
1883: POP
1884: POP
// for i := 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1934
// begin hc_class := 13 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 13
1908: ST_TO_ADDR
// hc_gallery :=  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1917: CALL_OW 44
1921: PPUSH
1922: LD_INT 18
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// end ;
1932: GO 1898
1934: POP
1935: POP
// end ; end_of_file
1936: LD_VAR 0 1
1940: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1941: LD_INT 0
1943: PPUSH
1944: PPUSH
// uc_side := 2 ;
1945: LD_ADDR_OWVAR 20
1949: PUSH
1950: LD_INT 2
1952: ST_TO_ADDR
// uc_nation := 2 ;
1953: LD_ADDR_OWVAR 21
1957: PUSH
1958: LD_INT 2
1960: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1961: LD_ADDR_EXP 22
1965: PUSH
1966: LD_STRING Heike
1968: PPUSH
1969: LD_EXP 1
1973: NOT
1974: PPUSH
1975: LD_EXP 2
1979: PPUSH
1980: CALL 258 0 3
1984: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1985: LD_ADDR_EXP 25
1989: PUSH
1990: LD_STRING Ibrahim
1992: PPUSH
1993: LD_EXP 1
1997: NOT
1998: PPUSH
1999: LD_EXP 2
2003: PPUSH
2004: CALL 258 0 3
2008: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2009: LD_ADDR_EXP 23
2013: PUSH
2014: LD_STRING Givi
2016: PPUSH
2017: LD_EXP 1
2021: NOT
2022: PPUSH
2023: LD_EXP 2
2027: PPUSH
2028: CALL 258 0 3
2032: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2033: LD_ADDR_EXP 26
2037: PUSH
2038: LD_STRING Kamil
2040: PPUSH
2041: LD_EXP 1
2045: NOT
2046: PPUSH
2047: LD_EXP 2
2051: PPUSH
2052: CALL 258 0 3
2056: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2057: LD_ADDR_EXP 27
2061: PUSH
2062: LD_STRING Kaia
2064: PPUSH
2065: LD_EXP 1
2069: NOT
2070: PPUSH
2071: LD_EXP 2
2075: PPUSH
2076: CALL 258 0 3
2080: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2081: LD_ADDR_EXP 28
2085: PUSH
2086: LD_STRING Sophia
2088: PPUSH
2089: LD_EXP 1
2093: NOT
2094: PPUSH
2095: LD_EXP 2
2099: PPUSH
2100: CALL 258 0 3
2104: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2105: LD_ADDR_EXP 29
2109: PUSH
2110: LD_STRING Markov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_EXP 2
2123: PPUSH
2124: CALL 258 0 3
2128: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2129: LD_ADDR_EXP 32
2133: PUSH
2134: LD_STRING Aviradze
2136: PPUSH
2137: LD_EXP 1
2141: NOT
2142: PPUSH
2143: LD_EXP 2
2147: PPUSH
2148: CALL 258 0 3
2152: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2153: LD_ADDR_EXP 35
2157: PUSH
2158: EMPTY
2159: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2160: LD_ADDR_EXP 33
2164: PUSH
2165: LD_STRING 03_others
2167: PPUSH
2168: CALL_OW 31
2172: ST_TO_ADDR
// uc_side := 5 ;
2173: LD_ADDR_OWVAR 20
2177: PUSH
2178: LD_INT 5
2180: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2181: LD_ADDR_EXP 31
2185: PUSH
2186: LD_STRING Kurt
2188: PPUSH
2189: LD_INT 0
2191: PPUSH
2192: LD_STRING 
2194: PPUSH
2195: CALL 258 0 3
2199: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2200: LD_ADDR_EXP 24
2204: PUSH
2205: LD_STRING Mike
2207: PPUSH
2208: LD_EXP 1
2212: NOT
2213: PPUSH
2214: LD_EXP 2
2218: PPUSH
2219: CALL 258 0 3
2223: ST_TO_ADDR
// if Mike then
2224: LD_EXP 24
2228: IFFALSE 2251
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2230: LD_EXP 24
2234: PPUSH
2235: LD_INT 142
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 2
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2251: LD_EXP 31
2255: PPUSH
2256: LD_INT 142
2258: PPUSH
2259: LD_INT 63
2261: PPUSH
2262: LD_INT 3
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2272: LD_EXP 31
2276: PUSH
2277: LD_EXP 24
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PPUSH
2286: CALL_OW 140
// end ;
2290: LD_VAR 0 1
2294: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2295: LD_INT 0
2297: PPUSH
2298: PPUSH
2299: PPUSH
2300: PPUSH
// uc_side := 5 ;
2301: LD_ADDR_OWVAR 20
2305: PUSH
2306: LD_INT 5
2308: ST_TO_ADDR
// uc_nation := 2 ;
2309: LD_ADDR_OWVAR 21
2313: PUSH
2314: LD_INT 2
2316: ST_TO_ADDR
// InitHc ;
2317: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2321: LD_ADDR_EXP 30
2325: PUSH
2326: LD_STRING Omar
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: LD_STRING 
2334: PPUSH
2335: CALL 258 0 3
2339: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2340: LD_EXP 30
2344: PPUSH
2345: LD_INT 284
2347: PPUSH
2348: LD_INT 163
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2358: LD_EXP 30
2362: PPUSH
2363: LD_INT 256
2365: PPUSH
2366: LD_INT 129
2368: PPUSH
2369: CALL_OW 111
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// omarSquad := [ ] ;
2380: LD_ADDR_EXP 34
2384: PUSH
2385: EMPTY
2386: ST_TO_ADDR
// for i := 1 to 5 do
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 5
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2607
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2403: LD_INT 5
2405: PPUSH
2406: LD_INT 2
2408: PPUSH
2409: LD_INT 13
2411: PUSH
2412: LD_INT 14
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 2
2426: MOD
2427: PUSH
2428: LD_INT 1
2430: PLUS
2431: ARRAY
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 25
2441: PUSH
2442: LD_INT 27
2444: PUSH
2445: LD_INT 26
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 3
2460: MOD
2461: PUSH
2462: LD_INT 1
2464: PLUS
2465: ARRAY
2466: PPUSH
2467: LD_INT 100
2469: PPUSH
2470: CALL 321 0 7
// veh := CreateVehicle ;
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: CALL_OW 45
2483: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2484: LD_VAR 0 4
2488: PPUSH
2489: LD_INT 5
2491: PPUSH
2492: CALL_OW 233
// omarSquad := omarSquad union veh ;
2496: LD_ADDR_EXP 34
2500: PUSH
2501: LD_EXP 34
2505: PUSH
2506: LD_VAR 0 4
2510: UNION
2511: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 284
2519: PPUSH
2520: LD_INT 163
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL_OW 380
// un := CreateHuman ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2553: LD_ADDR_EXP 34
2557: PUSH
2558: LD_EXP 34
2562: PUSH
2563: LD_VAR 0 3
2567: UNION
2568: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2569: LD_VAR 0 3
2573: PPUSH
2574: LD_VAR 0 4
2578: PPUSH
2579: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2583: LD_VAR 0 3
2587: PPUSH
2588: LD_INT 271
2590: PPUSH
2591: LD_INT 144
2593: PPUSH
2594: CALL_OW 111
// wait ( 0 0$2 ) ;
2598: LD_INT 70
2600: PPUSH
2601: CALL_OW 67
// end ;
2605: GO 2400
2607: POP
2608: POP
// for i := 1 to 3 do
2609: LD_ADDR_VAR 0 2
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_INT 3
2621: PUSH
2622: FOR_TO
2623: IFFALSE 2706
// begin PrepareHuman ( false , 1 , 3 ) ;
2625: LD_INT 0
2627: PPUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 3
2633: PPUSH
2634: CALL_OW 380
// un := CreateHuman ;
2638: LD_ADDR_VAR 0 3
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2648: LD_ADDR_EXP 34
2652: PUSH
2653: LD_EXP 34
2657: PUSH
2658: LD_VAR 0 3
2662: UNION
2663: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2682: LD_VAR 0 3
2686: PPUSH
2687: LD_INT 257
2689: PPUSH
2690: LD_INT 138
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$1 ) ;
2697: LD_INT 35
2699: PPUSH
2700: CALL_OW 67
// end ;
2704: GO 2622
2706: POP
2707: POP
// for i := 1 to 6 do
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: DOUBLE
2714: LD_INT 1
2716: DEC
2717: ST_TO_ADDR
2718: LD_INT 6
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2855
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2724: LD_INT 0
2726: PPUSH
2727: LD_INT 1
2729: PUSH
2730: LD_INT 1
2732: PUSH
2733: LD_INT 4
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: LIST
2740: PUSH
2741: LD_VAR 0 2
2745: PUSH
2746: LD_INT 3
2748: MOD
2749: PUSH
2750: LD_INT 1
2752: PLUS
2753: ARRAY
2754: PPUSH
2755: LD_INT 3
2757: PPUSH
2758: CALL_OW 380
// un := CreateHuman ;
2762: LD_ADDR_VAR 0 3
2766: PUSH
2767: CALL_OW 44
2771: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2772: LD_ADDR_EXP 34
2776: PUSH
2777: LD_EXP 34
2781: PUSH
2782: LD_VAR 0 3
2786: UNION
2787: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 225
2795: PPUSH
2796: LD_INT 163
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 48
// if i = 1 then
2806: LD_VAR 0 2
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: IFFALSE 2831
// SetAttr ( un , attr_speed , 12 ) ;
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 2
2823: PPUSH
2824: LD_INT 12
2826: PPUSH
2827: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 222
2838: PPUSH
2839: LD_INT 157
2841: PPUSH
2842: CALL_OW 111
// wait ( 0 0$1 ) ;
2846: LD_INT 35
2848: PPUSH
2849: CALL_OW 67
// end ;
2853: GO 2721
2855: POP
2856: POP
// end ; end_of_file
2857: LD_VAR 0 1
2861: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2862: LD_INT 0
2864: PPUSH
2865: PPUSH
2866: PPUSH
2867: PPUSH
2868: PPUSH
2869: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2870: LD_ADDR_EXP 46
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 3
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 7
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2908: LD_ADDR_VAR 0 2
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 23
2925: PUSH
2926: LD_INT 3
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: PUSH
2942: FOR_IN
2943: IFFALSE 2959
// SetBLevel ( i , 5 ) ;
2945: LD_VAR 0 2
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 241
2957: GO 2942
2959: POP
2960: POP
// SetBName ( kirov , kirov ) ;
2961: LD_INT 71
2963: PPUSH
2964: LD_STRING kirov
2966: PPUSH
2967: CALL_OW 500
// SetBName ( beria , beria ) ;
2971: LD_INT 106
2973: PPUSH
2974: LD_STRING beria
2976: PPUSH
2977: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2981: LD_INT 112
2983: PPUSH
2984: LD_STRING kagan
2986: PPUSH
2987: CALL_OW 500
// uc_side := 6 ;
2991: LD_ADDR_OWVAR 20
2995: PUSH
2996: LD_INT 6
2998: ST_TO_ADDR
// uc_nation := 3 ;
2999: LD_ADDR_OWVAR 21
3003: PUSH
3004: LD_INT 3
3006: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: LD_INT 22
3014: PUSH
3015: LD_INT 6
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 30
3024: PUSH
3025: LD_INT 5
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PPUSH
3036: CALL_OW 69
3040: PUSH
3041: LD_INT 1
3043: ARRAY
3044: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3045: LD_ADDR_VAR 0 4
3049: PUSH
3050: LD_INT 22
3052: PUSH
3053: LD_INT 6
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 30
3062: PUSH
3063: LD_INT 4
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 69
3078: PUSH
3079: LD_INT 1
3081: ARRAY
3082: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3083: LD_ADDR_EXP 40
3087: PUSH
3088: EMPTY
3089: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3090: LD_ADDR_EXP 41
3094: PUSH
3095: EMPTY
3096: ST_TO_ADDR
// russianPatrol := [ ] ;
3097: LD_ADDR_EXP 43
3101: PUSH
3102: EMPTY
3103: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3104: LD_ADDR_EXP 36
3108: PUSH
3109: LD_STRING Kurin
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: LD_STRING 
3117: PPUSH
3118: CALL 258 0 3
3122: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3123: LD_EXP 36
3127: PPUSH
3128: LD_INT 71
3130: PPUSH
3131: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3135: LD_ADDR_EXP 38
3139: PUSH
3140: LD_STRING Popov
3142: PPUSH
3143: LD_INT 0
3145: PPUSH
3146: LD_STRING 
3148: PPUSH
3149: CALL 258 0 3
3153: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3154: LD_EXP 38
3158: PPUSH
3159: LD_INT 71
3161: PPUSH
3162: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3166: LD_ADDR_EXP 37
3170: PUSH
3171: LD_STRING Grishko
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: LD_STRING 
3179: PPUSH
3180: CALL 258 0 3
3184: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3185: LD_EXP 37
3189: PPUSH
3190: LD_INT 207
3192: PPUSH
3193: LD_INT 106
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3203: LD_EXP 37
3207: PPUSH
3208: LD_INT 209
3210: PPUSH
3211: LD_INT 106
3213: PPUSH
3214: CALL_OW 118
// for i := 1 to 2 do
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: DOUBLE
3224: LD_INT 1
3226: DEC
3227: ST_TO_ADDR
3228: LD_INT 2
3230: PUSH
3231: FOR_TO
3232: IFFALSE 3287
// begin PrepareHuman ( false , 2 , 2 ) ;
3234: LD_INT 0
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 380
// un := CreateHuman ;
3247: LD_ADDR_VAR 0 3
3251: PUSH
3252: CALL_OW 44
3256: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3257: LD_VAR 0 3
3261: PPUSH
3262: LD_INT 71
3264: PPUSH
3265: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3269: LD_ADDR_EXP 40
3273: PUSH
3274: LD_EXP 40
3278: PUSH
3279: LD_VAR 0 3
3283: UNION
3284: ST_TO_ADDR
// end ;
3285: GO 3231
3287: POP
3288: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3289: LD_ADDR_VAR 0 2
3293: PUSH
3294: DOUBLE
3295: LD_INT 1
3297: DEC
3298: ST_TO_ADDR
3299: LD_INT 5
3301: PUSH
3302: LD_INT 6
3304: PUSH
3305: LD_INT 6
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: LD_OWVAR 67
3317: ARRAY
3318: PUSH
3319: FOR_TO
3320: IFFALSE 3394
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3322: LD_INT 0
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: LD_INT 2
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: LD_INT 4
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_OWVAR 67
3346: ARRAY
3347: PPUSH
3348: CALL_OW 380
// un := CreateHuman ;
3352: LD_ADDR_VAR 0 3
3356: PUSH
3357: CALL_OW 44
3361: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3362: LD_VAR 0 3
3366: PPUSH
3367: LD_VAR 0 5
3371: PPUSH
3372: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3376: LD_ADDR_EXP 40
3380: PUSH
3381: LD_EXP 40
3385: PUSH
3386: LD_VAR 0 3
3390: UNION
3391: ST_TO_ADDR
// end ;
3392: GO 3319
3394: POP
3395: POP
// for i := 1 to 3 do
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: DOUBLE
3402: LD_INT 1
3404: DEC
3405: ST_TO_ADDR
3406: LD_INT 3
3408: PUSH
3409: FOR_TO
3410: IFFALSE 3465
// begin PrepareHuman ( false , 3 , 3 ) ;
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 3
3417: PPUSH
3418: LD_INT 3
3420: PPUSH
3421: CALL_OW 380
// un := CreateHuman ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3435: LD_VAR 0 3
3439: PPUSH
3440: LD_INT 92
3442: PPUSH
3443: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3447: LD_ADDR_EXP 40
3451: PUSH
3452: LD_EXP 40
3456: PUSH
3457: LD_VAR 0 3
3461: UNION
3462: ST_TO_ADDR
// end ;
3463: GO 3409
3465: POP
3466: POP
// for i := 1 to 2 do
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: DOUBLE
3473: LD_INT 1
3475: DEC
3476: ST_TO_ADDR
3477: LD_INT 2
3479: PUSH
3480: FOR_TO
3481: IFFALSE 3536
// begin PrepareHuman ( false , 4 , 3 ) ;
3483: LD_INT 0
3485: PPUSH
3486: LD_INT 4
3488: PPUSH
3489: LD_INT 3
3491: PPUSH
3492: CALL_OW 380
// un := CreateHuman ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: CALL_OW 44
3505: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3506: LD_VAR 0 3
3510: PPUSH
3511: LD_INT 83
3513: PPUSH
3514: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3518: LD_ADDR_EXP 40
3522: PUSH
3523: LD_EXP 40
3527: PUSH
3528: LD_VAR 0 3
3532: UNION
3533: ST_TO_ADDR
// end ;
3534: GO 3480
3536: POP
3537: POP
// for i := 1 to 5 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 5
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3609
// begin PrepareHuman ( false , 1 , 3 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 3
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_VAR 0 4
3586: PPUSH
3587: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3591: LD_ADDR_EXP 42
3595: PUSH
3596: LD_EXP 42
3600: PUSH
3601: LD_VAR 0 3
3605: UNION
3606: ST_TO_ADDR
// end ;
3607: GO 3551
3609: POP
3610: POP
// russianCargo := [ ] ;
3611: LD_ADDR_EXP 45
3615: PUSH
3616: EMPTY
3617: ST_TO_ADDR
// for i := 1 to 2 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 2
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3764
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3634: LD_INT 6
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 21
3642: PPUSH
3643: LD_INT 1
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 51
3651: PPUSH
3652: LD_INT 100
3654: PPUSH
3655: CALL 321 0 7
// un := CreateVehicle ;
3659: LD_ADDR_VAR 0 3
3663: PUSH
3664: CALL_OW 45
3668: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3669: LD_ADDR_EXP 45
3673: PUSH
3674: LD_EXP 45
3678: PUSH
3679: LD_VAR 0 3
3683: UNION
3684: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_INT 2
3692: PPUSH
3693: LD_INT 100
3695: PPUSH
3696: CALL_OW 290
// SetDir ( un , 4 ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_INT 4
3707: PPUSH
3708: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: LD_INT 147
3719: PPUSH
3720: LD_INT 103
3722: PPUSH
3723: LD_INT 4
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_OWVAR 67
3743: PPUSH
3744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3748: CALL_OW 44
3752: PPUSH
3753: LD_VAR 0 3
3757: PPUSH
3758: CALL_OW 52
// end ;
3762: GO 3631
3764: POP
3765: POP
// uc_side := 3 ;
3766: LD_ADDR_OWVAR 20
3770: PUSH
3771: LD_INT 3
3773: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3774: LD_ADDR_EXP 39
3778: PUSH
3779: LD_STRING Burlak
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: LD_STRING 
3787: PPUSH
3788: CALL 258 0 3
3792: ST_TO_ADDR
// for i := 1 to 2 do
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: DOUBLE
3799: LD_INT 1
3801: DEC
3802: ST_TO_ADDR
3803: LD_INT 2
3805: PUSH
3806: FOR_TO
3807: IFFALSE 3900
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3809: LD_INT 0
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_OWVAR 67
3819: PUSH
3820: LD_INT 1
3822: PLUS
3823: PPUSH
3824: CALL_OW 380
// un := CreateHuman ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: CALL_OW 44
3837: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3838: LD_VAR 0 3
3842: PPUSH
3843: LD_INT 22
3845: PUSH
3846: LD_INT 3
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 30
3855: PUSH
3856: LD_INT 32
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: CALL_OW 69
3871: PUSH
3872: LD_VAR 0 2
3876: ARRAY
3877: PPUSH
3878: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3882: LD_ADDR_EXP 41
3886: PUSH
3887: LD_EXP 41
3891: PUSH
3892: LD_VAR 0 3
3896: UNION
3897: ST_TO_ADDR
// end ;
3898: GO 3806
3900: POP
3901: POP
// for i := 1 to 2 do
3902: LD_ADDR_VAR 0 2
3906: PUSH
3907: DOUBLE
3908: LD_INT 1
3910: DEC
3911: ST_TO_ADDR
3912: LD_INT 2
3914: PUSH
3915: FOR_TO
3916: IFFALSE 4007
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3918: LD_INT 0
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_OWVAR 67
3928: PUSH
3929: LD_INT 1
3931: PLUS
3932: PPUSH
3933: CALL_OW 380
// un := CreateHuman ;
3937: LD_ADDR_VAR 0 3
3941: PUSH
3942: CALL_OW 44
3946: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3947: LD_VAR 0 3
3951: PPUSH
3952: LD_INT 22
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 30
3964: PUSH
3965: LD_INT 5
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 69
3980: PUSH
3981: LD_INT 1
3983: ARRAY
3984: PPUSH
3985: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3989: LD_ADDR_EXP 41
3993: PUSH
3994: LD_EXP 41
3998: PUSH
3999: LD_VAR 0 3
4003: UNION
4004: ST_TO_ADDR
// end ;
4005: GO 3915
4007: POP
4008: POP
// for i := 1 to 2 do
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: DOUBLE
4015: LD_INT 1
4017: DEC
4018: ST_TO_ADDR
4019: LD_INT 2
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4110
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4025: LD_INT 0
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: LD_OWVAR 67
4035: PPUSH
4036: CALL_OW 380
// un := CreateHuman ;
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: CALL_OW 44
4049: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4050: LD_VAR 0 3
4054: PPUSH
4055: LD_INT 22
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 30
4067: PUSH
4068: LD_INT 7
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PUSH
4084: LD_INT 1
4086: ARRAY
4087: PPUSH
4088: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4092: LD_ADDR_EXP 41
4096: PUSH
4097: LD_EXP 41
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// end ;
4108: GO 4022
4110: POP
4111: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4112: LD_INT 0
4114: PPUSH
4115: LD_INT 2
4117: PPUSH
4118: LD_OWVAR 67
4122: PPUSH
4123: CALL_OW 380
// un := CreateHuman ;
4127: LD_ADDR_VAR 0 3
4131: PUSH
4132: CALL_OW 44
4136: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4137: LD_VAR 0 3
4141: PPUSH
4142: LD_INT 106
4144: PPUSH
4145: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4149: LD_ADDR_EXP 41
4153: PUSH
4154: LD_EXP 41
4158: PUSH
4159: LD_VAR 0 3
4163: UNION
4164: ST_TO_ADDR
// for i := 1 to 3 do
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: DOUBLE
4171: LD_INT 1
4173: DEC
4174: ST_TO_ADDR
4175: LD_INT 3
4177: PUSH
4178: FOR_TO
4179: IFFALSE 4301
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4181: LD_ADDR_VAR 0 6
4185: PUSH
4186: LD_INT 22
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 30
4198: PUSH
4199: LD_INT 31
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PPUSH
4210: CALL_OW 69
4214: PUSH
4215: LD_VAR 0 2
4219: ARRAY
4220: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4221: LD_INT 0
4223: PPUSH
4224: LD_INT 1
4226: PPUSH
4227: LD_OWVAR 67
4231: PPUSH
4232: CALL_OW 380
// un := CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4246: LD_VAR 0 3
4250: PPUSH
4251: LD_VAR 0 6
4255: PPUSH
4256: CALL_OW 254
4260: PUSH
4261: LD_INT 3
4263: PLUS
4264: PPUSH
4265: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_VAR 0 6
4278: PPUSH
4279: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4283: LD_ADDR_EXP 41
4287: PUSH
4288: LD_EXP 41
4292: PUSH
4293: LD_VAR 0 3
4297: UNION
4298: ST_TO_ADDR
// end ;
4299: GO 4178
4301: POP
4302: POP
// russianOmicronAttackers := [ ] ;
4303: LD_ADDR_EXP 44
4307: PUSH
4308: EMPTY
4309: ST_TO_ADDR
// for i := 1 to 6 do
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: DOUBLE
4316: LD_INT 1
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 6
4322: PUSH
4323: FOR_TO
4324: IFFALSE 4548
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4326: LD_INT 3
4328: PPUSH
4329: LD_INT 3
4331: PPUSH
4332: LD_INT 21
4334: PUSH
4335: LD_INT 23
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: LD_VAR 0 2
4346: PUSH
4347: LD_INT 2
4349: MOD
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: ARRAY
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_INT 43
4364: PUSH
4365: LD_INT 44
4367: PUSH
4368: LD_INT 42
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: PUSH
4376: LD_VAR 0 2
4380: PUSH
4381: LD_INT 3
4383: MOD
4384: PUSH
4385: LD_INT 1
4387: PLUS
4388: ARRAY
4389: PPUSH
4390: LD_INT 100
4392: PPUSH
4393: CALL 321 0 7
// un := CreateVehicle ;
4397: LD_ADDR_VAR 0 3
4401: PUSH
4402: CALL_OW 45
4406: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4407: LD_VAR 0 3
4411: PPUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 5
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 2
4427: PPUSH
4428: CALL_OW 12
4432: ARRAY
4433: PPUSH
4434: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4438: LD_ADDR_EXP 44
4442: PUSH
4443: LD_EXP 44
4447: PUSH
4448: LD_VAR 0 3
4452: UNION
4453: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4454: LD_VAR 0 3
4458: PPUSH
4459: LD_INT 127
4461: PPUSH
4462: LD_INT 89
4464: PPUSH
4465: LD_INT 7
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// uc_side := 3 ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_INT 3
4482: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 3
4491: PPUSH
4492: CALL_OW 380
// un := CreateHuman ;
4496: LD_ADDR_VAR 0 3
4500: PUSH
4501: CALL_OW 44
4505: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4506: LD_ADDR_EXP 44
4510: PUSH
4511: LD_EXP 44
4515: PUSH
4516: LD_VAR 0 3
4520: UNION
4521: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4522: LD_VAR 0 3
4526: PPUSH
4527: LD_EXP 44
4531: PUSH
4532: LD_EXP 44
4536: PUSH
4537: LD_INT 1
4539: MINUS
4540: ARRAY
4541: PPUSH
4542: CALL_OW 52
// end ;
4546: GO 4323
4548: POP
4549: POP
// for i := 1 to 3 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 3
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4630
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4566: LD_INT 0
4568: PPUSH
4569: LD_INT 1
4571: PPUSH
4572: LD_OWVAR 67
4576: PPUSH
4577: CALL_OW 380
// un := CreateHuman ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: CALL_OW 44
4590: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4591: LD_ADDR_EXP 44
4595: PUSH
4596: LD_EXP 44
4600: PUSH
4601: LD_VAR 0 3
4605: UNION
4606: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 91
4614: PPUSH
4615: LD_INT 60
4617: PPUSH
4618: LD_INT 3
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL_OW 50
// end ;
4628: GO 4563
4630: POP
4631: POP
// end ;
4632: LD_VAR 0 1
4636: RET
// every 0 0$3 do var i ;
4637: GO 4639
4639: DISABLE
4640: LD_INT 0
4642: PPUSH
// begin for i := 1 to 4 do
4643: LD_ADDR_VAR 0 1
4647: PUSH
4648: DOUBLE
4649: LD_INT 1
4651: DEC
4652: ST_TO_ADDR
4653: LD_INT 4
4655: PUSH
4656: FOR_TO
4657: IFFALSE 4676
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4659: LD_EXP 42
4663: PUSH
4664: LD_VAR 0 1
4668: ARRAY
4669: PPUSH
4670: CALL_OW 122
4674: GO 4656
4676: POP
4677: POP
// wait ( 3 ) ;
4678: LD_INT 3
4680: PPUSH
4681: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4685: LD_EXP 42
4689: PUSH
4690: LD_INT 1
4692: ARRAY
4693: PPUSH
4694: LD_INT 22
4696: PUSH
4697: LD_INT 6
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 30
4706: PUSH
4707: LD_INT 31
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 69
4722: PPUSH
4723: LD_EXP 42
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: CALL_OW 74
4736: PPUSH
4737: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4741: LD_EXP 42
4745: PUSH
4746: LD_INT 2
4748: ARRAY
4749: PPUSH
4750: LD_INT 211
4752: PPUSH
4753: LD_INT 107
4755: PPUSH
4756: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4760: LD_EXP 42
4764: PUSH
4765: LD_INT 2
4767: ARRAY
4768: PPUSH
4769: LD_INT 209
4771: PPUSH
4772: LD_INT 106
4774: PPUSH
4775: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4779: LD_EXP 42
4783: PUSH
4784: LD_INT 3
4786: ARRAY
4787: PPUSH
4788: LD_INT 209
4790: PPUSH
4791: LD_INT 103
4793: PPUSH
4794: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4798: LD_EXP 42
4802: PUSH
4803: LD_INT 3
4805: ARRAY
4806: PPUSH
4807: LD_INT 209
4809: PPUSH
4810: LD_INT 106
4812: PPUSH
4813: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4817: LD_EXP 42
4821: PUSH
4822: LD_INT 4
4824: ARRAY
4825: PPUSH
4826: LD_INT 227
4828: PPUSH
4829: LD_INT 117
4831: PPUSH
4832: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4836: LD_EXP 42
4840: PUSH
4841: LD_INT 4
4843: ARRAY
4844: PPUSH
4845: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4849: LD_INT 700
4851: PPUSH
4852: CALL_OW 67
// for i := 3 downto 2 do
4856: LD_ADDR_VAR 0 1
4860: PUSH
4861: DOUBLE
4862: LD_INT 3
4864: INC
4865: ST_TO_ADDR
4866: LD_INT 2
4868: PUSH
4869: FOR_DOWNTO
4870: IFFALSE 5037
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4872: LD_EXP 42
4876: PUSH
4877: LD_VAR 0 1
4881: ARRAY
4882: PPUSH
4883: LD_INT 200
4885: PPUSH
4886: LD_INT 91
4888: PPUSH
4889: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4893: LD_EXP 42
4897: PUSH
4898: LD_VAR 0 1
4902: ARRAY
4903: PPUSH
4904: LD_INT 210
4906: PPUSH
4907: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4911: LD_EXP 42
4915: PUSH
4916: LD_VAR 0 1
4920: ARRAY
4921: PPUSH
4922: LD_INT 224
4924: PPUSH
4925: LD_INT 93
4927: PPUSH
4928: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4932: LD_EXP 42
4936: PUSH
4937: LD_VAR 0 1
4941: ARRAY
4942: PPUSH
4943: LD_INT 210
4945: PPUSH
4946: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4950: LD_EXP 42
4954: PUSH
4955: LD_VAR 0 1
4959: ARRAY
4960: PPUSH
4961: LD_INT 239
4963: PPUSH
4964: LD_INT 123
4966: PPUSH
4967: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4971: LD_EXP 42
4975: PUSH
4976: LD_VAR 0 1
4980: ARRAY
4981: PPUSH
4982: LD_INT 210
4984: PPUSH
4985: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4989: LD_EXP 42
4993: PUSH
4994: LD_VAR 0 1
4998: ARRAY
4999: PPUSH
5000: LD_INT 212
5002: PPUSH
5003: LD_INT 105
5005: PPUSH
5006: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5010: LD_EXP 42
5014: PUSH
5015: LD_VAR 0 1
5019: ARRAY
5020: PPUSH
5021: LD_INT 700
5023: PPUSH
5024: CALL_OW 202
// wait ( 0 0$30 ) ;
5028: LD_INT 1050
5030: PPUSH
5031: CALL_OW 67
// end ;
5035: GO 4869
5037: POP
5038: POP
// until not activeGrishkoAI ;
5039: LD_EXP 10
5043: NOT
5044: IFFALSE 4849
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5046: LD_EXP 42
5050: PPUSH
5051: LD_INT 221
5053: PPUSH
5054: LD_INT 110
5056: PPUSH
5057: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5061: LD_EXP 42
5065: PPUSH
5066: LD_INT 228
5068: PPUSH
5069: LD_INT 115
5071: PPUSH
5072: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5076: LD_EXP 42
5080: PPUSH
5081: CALL_OW 200
// end ;
5085: PPOPN 1
5087: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5088: LD_EXP 12
5092: IFFALSE 5699
5094: GO 5096
5096: DISABLE
5097: LD_INT 0
5099: PPUSH
5100: PPUSH
5101: PPUSH
5102: PPUSH
// begin uc_side := 6 ;
5103: LD_ADDR_OWVAR 20
5107: PUSH
5108: LD_INT 6
5110: ST_TO_ADDR
// uc_nation := 3 ;
5111: LD_ADDR_OWVAR 21
5115: PUSH
5116: LD_INT 3
5118: ST_TO_ADDR
// for i := 1 to 3 do
5119: LD_ADDR_VAR 0 2
5123: PUSH
5124: DOUBLE
5125: LD_INT 1
5127: DEC
5128: ST_TO_ADDR
5129: LD_INT 3
5131: PUSH
5132: FOR_TO
5133: IFFALSE 5242
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5135: LD_INT 0
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: LD_INT 2
5143: PUSH
5144: LD_INT 3
5146: PUSH
5147: LD_INT 4
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_OWVAR 67
5159: ARRAY
5160: PPUSH
5161: CALL_OW 380
// un := CreateHuman ;
5165: LD_ADDR_VAR 0 1
5169: PUSH
5170: CALL_OW 44
5174: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5175: LD_ADDR_EXP 43
5179: PUSH
5180: LD_EXP 43
5184: PUSH
5185: LD_VAR 0 1
5189: UNION
5190: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_INT 11
5210: PPUSH
5211: LD_INT 0
5213: PPUSH
5214: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_INT 210
5225: PPUSH
5226: LD_INT 159
5228: PPUSH
5229: CALL_OW 111
// wait ( 0 0$2 ) ;
5233: LD_INT 70
5235: PPUSH
5236: CALL_OW 67
// end ;
5240: GO 5132
5242: POP
5243: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: LD_INT 172
5251: PUSH
5252: LD_INT 76
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 150
5261: PUSH
5262: LD_INT 38
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 148
5271: PUSH
5272: LD_INT 9
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: LD_INT 165
5281: PUSH
5282: LD_INT 38
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 191
5297: PUSH
5298: LD_INT 77
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 168
5307: PUSH
5308: LD_INT 42
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 166
5317: PUSH
5318: LD_INT 11
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PUSH
5325: LD_INT 151
5327: PUSH
5328: LD_INT 12
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 221
5343: PUSH
5344: LD_INT 88
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 217
5353: PUSH
5354: LD_INT 64
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 208
5363: PUSH
5364: LD_INT 42
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: LIST
5380: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5381: LD_INT 35
5383: PPUSH
5384: CALL_OW 67
// for i := 1 to patrol do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_VAR 0 4
5402: PUSH
5403: FOR_TO
5404: IFFALSE 5663
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5406: LD_EXP 43
5410: PUSH
5411: LD_VAR 0 2
5415: ARRAY
5416: PPUSH
5417: CALL_OW 256
5421: PUSH
5422: LD_INT 990
5424: LESS
5425: PUSH
5426: LD_EXP 43
5430: PUSH
5431: LD_VAR 0 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 110
5441: PUSH
5442: LD_INT 1
5444: EQUAL
5445: AND
5446: IFFALSE 5474
// begin spottedByPatrol := true ;
5448: LD_ADDR_EXP 7
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5456: LD_EXP 43
5460: PUSH
5461: LD_VAR 0 2
5465: ARRAY
5466: PPUSH
5467: LD_INT 2
5469: PPUSH
5470: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5474: LD_EXP 43
5478: PUSH
5479: LD_VAR 0 2
5483: ARRAY
5484: PPUSH
5485: CALL_OW 110
5489: PUSH
5490: LD_INT 2
5492: EQUAL
5493: IFFALSE 5561
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5495: LD_EXP 43
5499: PUSH
5500: LD_VAR 0 2
5504: ARRAY
5505: PPUSH
5506: LD_INT 166
5508: PPUSH
5509: LD_INT 101
5511: PPUSH
5512: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5516: LD_EXP 43
5520: PUSH
5521: LD_VAR 0 2
5525: ARRAY
5526: PPUSH
5527: LD_INT 71
5529: PPUSH
5530: CALL_OW 296
5534: PUSH
5535: LD_INT 10
5537: LESS
5538: IFFALSE 5559
// russianAlert := [ russianPatrol [ i ] ] ;
5540: LD_ADDR_EXP 9
5544: PUSH
5545: LD_EXP 43
5549: PUSH
5550: LD_VAR 0 2
5554: ARRAY
5555: PUSH
5556: EMPTY
5557: LIST
5558: ST_TO_ADDR
// continue ;
5559: GO 5403
// end ; if not HasTask ( russianPatrol [ i ] ) then
5561: LD_EXP 43
5565: PUSH
5566: LD_VAR 0 2
5570: ARRAY
5571: PPUSH
5572: CALL_OW 314
5576: NOT
5577: IFFALSE 5661
// for j in patrol [ i ] do
5579: LD_ADDR_VAR 0 3
5583: PUSH
5584: LD_VAR 0 4
5588: PUSH
5589: LD_VAR 0 2
5593: ARRAY
5594: PUSH
5595: FOR_IN
5596: IFFALSE 5659
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5598: LD_EXP 43
5602: PUSH
5603: LD_VAR 0 2
5607: ARRAY
5608: PPUSH
5609: LD_INT 35
5611: PPUSH
5612: LD_INT 175
5614: PPUSH
5615: CALL_OW 12
5619: PPUSH
5620: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5624: LD_EXP 43
5628: PUSH
5629: LD_VAR 0 2
5633: ARRAY
5634: PPUSH
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 2
5651: ARRAY
5652: PPUSH
5653: CALL_OW 174
// end ;
5657: GO 5595
5659: POP
5660: POP
// end ;
5661: GO 5403
5663: POP
5664: POP
// until not russianPatrol or russianAlert ;
5665: LD_EXP 43
5669: NOT
5670: PUSH
5671: LD_EXP 9
5675: OR
5676: IFFALSE 5381
// if russianPatrol then
5678: LD_EXP 43
5682: IFFALSE 5699
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5684: LD_EXP 43
5688: PPUSH
5689: LD_INT 161
5691: PPUSH
5692: LD_INT 107
5694: PPUSH
5695: CALL_OW 114
// end ;
5699: PPOPN 4
5701: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5702: LD_EXP 6
5706: PUSH
5707: LD_EXP 13
5711: NOT
5712: AND
5713: IFFALSE 6154
5715: GO 5717
5717: DISABLE
5718: LD_INT 0
5720: PPUSH
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
// begin enable ;
5725: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: LD_EXP 44
5735: PPUSH
5736: LD_INT 21
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PPUSH
5746: CALL_OW 72
5750: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5751: LD_ADDR_VAR 0 4
5755: PUSH
5756: LD_INT 22
5758: PUSH
5759: LD_INT 4
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// for i in filter do
5771: LD_ADDR_VAR 0 1
5775: PUSH
5776: LD_VAR 0 2
5780: PUSH
5781: FOR_IN
5782: IFFALSE 6152
// begin tmp := IsDrivenBy ( i ) ;
5784: LD_ADDR_VAR 0 3
5788: PUSH
5789: LD_VAR 0 1
5793: PPUSH
5794: CALL_OW 311
5798: ST_TO_ADDR
// if not tmp then
5799: LD_VAR 0 3
5803: NOT
5804: IFFALSE 5808
// continue ;
5806: GO 5781
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5808: LD_VAR 0 1
5812: PPUSH
5813: CALL_OW 261
5817: PUSH
5818: LD_INT 90
5820: GREATER
5821: PUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 110
5831: PUSH
5832: LD_INT 2
5834: EQUAL
5835: AND
5836: IFFALSE 5852
// SetTag ( i , 0 ) else
5838: LD_VAR 0 1
5842: PPUSH
5843: LD_INT 0
5845: PPUSH
5846: CALL_OW 109
5850: GO 5903
// if GetTag ( i ) = 2 then
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL_OW 110
5861: PUSH
5862: LD_INT 2
5864: EQUAL
5865: IFFALSE 5903
// begin x := rand ( 1 , 2 ) ;
5867: LD_ADDR_VAR 0 5
5871: PUSH
5872: LD_INT 1
5874: PPUSH
5875: LD_INT 2
5877: PPUSH
5878: CALL_OW 12
5882: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5883: LD_VAR 0 1
5887: PPUSH
5888: LD_EXP 45
5892: PUSH
5893: LD_VAR 0 5
5897: ARRAY
5898: PPUSH
5899: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5903: LD_VAR 0 1
5907: PPUSH
5908: CALL_OW 256
5912: PUSH
5913: LD_INT 600
5915: GREATEREQUAL
5916: PUSH
5917: LD_VAR 0 1
5921: PPUSH
5922: CALL_OW 110
5926: NOT
5927: AND
5928: IFFALSE 5954
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5930: LD_VAR 0 1
5934: PPUSH
5935: LD_VAR 0 4
5939: PPUSH
5940: LD_VAR 0 1
5944: PPUSH
5945: CALL_OW 74
5949: PPUSH
5950: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5954: LD_VAR 0 1
5958: PPUSH
5959: CALL_OW 256
5963: PUSH
5964: LD_INT 600
5966: LESS
5967: PUSH
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 110
5977: NOT
5978: AND
5979: IFFALSE 6008
// begin SetTag ( i , 1 ) ;
5981: LD_VAR 0 1
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5993: LD_VAR 0 1
5997: PPUSH
5998: LD_INT 62
6000: PPUSH
6001: LD_INT 22
6003: PPUSH
6004: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6008: LD_VAR 0 1
6012: PPUSH
6013: CALL_OW 110
6017: PUSH
6018: LD_INT 1
6020: EQUAL
6021: PUSH
6022: LD_VAR 0 1
6026: PPUSH
6027: LD_INT 62
6029: PPUSH
6030: LD_INT 22
6032: PPUSH
6033: CALL_OW 297
6037: PUSH
6038: LD_INT 6
6040: LESS
6041: AND
6042: PUSH
6043: LD_VAR 0 3
6047: AND
6048: IFFALSE 6150
// begin ComExitVehicle ( tmp ) ;
6050: LD_VAR 0 3
6054: PPUSH
6055: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6059: LD_VAR 0 3
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6073: LD_INT 35
6075: PPUSH
6076: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6080: LD_VAR 0 1
6084: PPUSH
6085: CALL_OW 256
6089: PUSH
6090: LD_INT 1000
6092: EQUAL
6093: IFFALSE 6073
// ComEnterUnit ( tmp , i ) ;
6095: LD_VAR 0 3
6099: PPUSH
6100: LD_VAR 0 1
6104: PPUSH
6105: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6109: LD_VAR 0 1
6113: PPUSH
6114: CALL_OW 261
6118: PUSH
6119: LD_INT 90
6121: LESSEQUAL
6122: IFFALSE 6138
// SetTag ( i , 2 ) else
6124: LD_VAR 0 1
6128: PPUSH
6129: LD_INT 2
6131: PPUSH
6132: CALL_OW 109
6136: GO 6150
// SetTag ( i , 0 ) ;
6138: LD_VAR 0 1
6142: PPUSH
6143: LD_INT 0
6145: PPUSH
6146: CALL_OW 109
// end ; end ;
6150: GO 5781
6152: POP
6153: POP
// end ;
6154: PPOPN 5
6156: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6157: LD_EXP 19
6161: IFFALSE 6363
6163: GO 6165
6165: DISABLE
6166: LD_INT 0
6168: PPUSH
6169: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6170: LD_EXP 45
6174: PPUSH
6175: LD_INT 79
6177: PPUSH
6178: LD_INT 155
6180: PPUSH
6181: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_INT 16
6192: PPUSH
6193: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6197: LD_ADDR_VAR 0 2
6201: PUSH
6202: LD_EXP 44
6206: PPUSH
6207: LD_INT 50
6209: PUSH
6210: EMPTY
6211: LIST
6212: PPUSH
6213: CALL_OW 72
6217: ST_TO_ADDR
// for i in tmp do
6218: LD_ADDR_VAR 0 1
6222: PUSH
6223: LD_VAR 0 2
6227: PUSH
6228: FOR_IN
6229: IFFALSE 6263
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6231: LD_VAR 0 1
6235: PPUSH
6236: LD_INT 123
6238: PPUSH
6239: LD_INT 60
6241: PPUSH
6242: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_INT 153
6253: PPUSH
6254: LD_INT 103
6256: PPUSH
6257: CALL_OW 174
// end ;
6261: GO 6228
6263: POP
6264: POP
// repeat wait ( 0 0$1 ) ;
6265: LD_INT 35
6267: PPUSH
6268: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_EXP 44
6281: PPUSH
6282: LD_INT 50
6284: PUSH
6285: EMPTY
6286: LIST
6287: PPUSH
6288: CALL_OW 72
6292: ST_TO_ADDR
// for i in tmp do
6293: LD_ADDR_VAR 0 1
6297: PUSH
6298: LD_VAR 0 2
6302: PUSH
6303: FOR_IN
6304: IFFALSE 6354
// if not HasTask ( i ) then
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 314
6315: NOT
6316: IFFALSE 6352
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6318: LD_VAR 0 1
6322: PPUSH
6323: LD_INT 81
6325: PUSH
6326: LD_INT 3
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PPUSH
6333: CALL_OW 69
6337: PPUSH
6338: LD_VAR 0 1
6342: PPUSH
6343: CALL_OW 74
6347: PPUSH
6348: CALL_OW 115
6352: GO 6303
6354: POP
6355: POP
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6265
// end ;
6363: PPOPN 2
6365: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6366: LD_INT 22
6368: PUSH
6369: LD_INT 3
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 32
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 69
6394: IFFALSE 6473
6396: GO 6398
6398: DISABLE
6399: LD_INT 0
6401: PPUSH
// begin enable ;
6402: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6403: LD_ADDR_VAR 0 1
6407: PUSH
6408: LD_INT 22
6410: PUSH
6411: LD_INT 3
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 32
6420: PUSH
6421: LD_INT 1
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL_OW 69
6436: PUSH
6437: FOR_IN
6438: IFFALSE 6471
// if GetFuel ( i ) < 1 then
6440: LD_VAR 0 1
6444: PPUSH
6445: CALL_OW 261
6449: PUSH
6450: LD_INT 1
6452: LESS
6453: IFFALSE 6469
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 311
6464: PPUSH
6465: CALL_OW 121
6469: GO 6437
6471: POP
6472: POP
// end ; end_of_file
6473: PPOPN 1
6475: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6476: LD_INT 0
6478: PPUSH
6479: PPUSH
6480: PPUSH
// SetBName ( omikron , omikron ) ;
6481: LD_INT 64
6483: PPUSH
6484: LD_STRING omikron
6486: PPUSH
6487: CALL_OW 500
// uc_side := 4 ;
6491: LD_ADDR_OWVAR 20
6495: PUSH
6496: LD_INT 4
6498: ST_TO_ADDR
// uc_nation := 1 ;
6499: LD_ADDR_OWVAR 21
6503: PUSH
6504: LD_INT 1
6506: ST_TO_ADDR
// omicronSquad := [ ] ;
6507: LD_ADDR_EXP 47
6511: PUSH
6512: EMPTY
6513: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 4
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: LD_INT 30
6534: PUSH
6535: LD_INT 32
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 30
6544: PUSH
6545: LD_INT 31
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 69
6565: PUSH
6566: FOR_IN
6567: IFFALSE 6624
// begin PrepareHuman ( false , 1 , 1 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: LD_INT 1
6577: PPUSH
6578: CALL_OW 380
// un := CreateHuman ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: CALL_OW 44
6591: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6592: LD_ADDR_EXP 47
6596: PUSH
6597: LD_EXP 47
6601: PUSH
6602: LD_VAR 0 3
6606: UNION
6607: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6608: LD_VAR 0 3
6612: PPUSH
6613: LD_VAR 0 2
6617: PPUSH
6618: CALL_OW 52
// end ;
6622: GO 6566
6624: POP
6625: POP
// for i := 1 to 3 do
6626: LD_ADDR_VAR 0 2
6630: PUSH
6631: DOUBLE
6632: LD_INT 1
6634: DEC
6635: ST_TO_ADDR
6636: LD_INT 3
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6695
// begin PrepareHuman ( false , 2 , 2 ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 2
6647: PPUSH
6648: LD_INT 2
6650: PPUSH
6651: CALL_OW 380
// un := CreateHuman ;
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: CALL_OW 44
6664: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6665: LD_ADDR_EXP 47
6669: PUSH
6670: LD_EXP 47
6674: PUSH
6675: LD_VAR 0 3
6679: UNION
6680: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_INT 64
6688: PPUSH
6689: CALL_OW 52
// end ;
6693: GO 6639
6695: POP
6696: POP
// for i := 1 to 2 do
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_INT 2
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6850
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6713: LD_INT 4
6715: PPUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: LD_INT 2
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 100
6733: PPUSH
6734: CALL 321 0 7
// un := CreateVehicle ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 45
6747: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6748: LD_ADDR_EXP 47
6752: PUSH
6753: LD_EXP 47
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_INT 28
6771: PPUSH
6772: LD_INT 37
6774: PPUSH
6775: LD_INT 6
6777: PPUSH
6778: LD_INT 0
6780: PPUSH
6781: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 3
6790: PPUSH
6791: LD_INT 2
6793: PPUSH
6794: CALL_OW 380
// un := CreateHuman ;
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6808: LD_ADDR_EXP 47
6812: PUSH
6813: LD_EXP 47
6817: PUSH
6818: LD_VAR 0 3
6822: UNION
6823: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6824: LD_VAR 0 3
6828: PPUSH
6829: LD_EXP 47
6833: PUSH
6834: LD_EXP 47
6838: PUSH
6839: LD_INT 1
6841: MINUS
6842: ARRAY
6843: PPUSH
6844: CALL_OW 52
// end ;
6848: GO 6710
6850: POP
6851: POP
// end ;
6852: LD_VAR 0 1
6856: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6857: LD_INT 0
6859: PPUSH
6860: PPUSH
6861: PPUSH
6862: PPUSH
// uc_side := 4 ;
6863: LD_ADDR_OWVAR 20
6867: PUSH
6868: LD_INT 4
6870: ST_TO_ADDR
// uc_nation := 1 ;
6871: LD_ADDR_OWVAR 21
6875: PUSH
6876: LD_INT 1
6878: ST_TO_ADDR
// tmp := [ ] ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: EMPTY
6885: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6886: LD_INT 4
6888: PPUSH
6889: LD_INT 1
6891: PPUSH
6892: LD_INT 2
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: LD_INT 4
6903: PPUSH
6904: LD_INT 77
6906: PPUSH
6907: CALL 321 0 7
// un := CreateVehicle ;
6911: LD_ADDR_VAR 0 3
6915: PUSH
6916: CALL_OW 45
6920: ST_TO_ADDR
// tmp := tmp union un ;
6921: LD_ADDR_VAR 0 4
6925: PUSH
6926: LD_VAR 0 4
6930: PUSH
6931: LD_VAR 0 3
6935: UNION
6936: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6937: LD_VAR 0 3
6941: PPUSH
6942: LD_INT 2
6944: PPUSH
6945: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6949: LD_VAR 0 3
6953: PPUSH
6954: LD_INT 106
6956: PPUSH
6957: LD_INT 3
6959: PPUSH
6960: LD_INT 0
6962: PPUSH
6963: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6967: LD_INT 0
6969: PPUSH
6970: LD_INT 3
6972: PPUSH
6973: LD_INT 2
6975: PPUSH
6976: CALL_OW 380
// un := CreateHuman ;
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: CALL_OW 44
6989: ST_TO_ADDR
// tmp := tmp union un ;
6990: LD_ADDR_VAR 0 4
6994: PUSH
6995: LD_VAR 0 4
6999: PUSH
7000: LD_VAR 0 3
7004: UNION
7005: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7006: LD_VAR 0 3
7010: PPUSH
7011: LD_VAR 0 4
7015: PUSH
7016: LD_VAR 0 4
7020: PUSH
7021: LD_INT 1
7023: MINUS
7024: ARRAY
7025: PPUSH
7026: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7030: LD_VAR 0 3
7034: PPUSH
7035: LD_INT 109
7037: PPUSH
7038: LD_INT 9
7040: PPUSH
7041: CALL_OW 111
// wait ( 0 0$1 ) ;
7045: LD_INT 35
7047: PPUSH
7048: CALL_OW 67
// for i := 1 to 2 do
7052: LD_ADDR_VAR 0 2
7056: PUSH
7057: DOUBLE
7058: LD_INT 1
7060: DEC
7061: ST_TO_ADDR
7062: LD_INT 2
7064: PUSH
7065: FOR_TO
7066: IFFALSE 7130
// begin PrepareHuman ( false , 1 , 2 ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: LD_INT 2
7076: PPUSH
7077: CALL_OW 380
// un := CreateHuman ;
7081: LD_ADDR_VAR 0 3
7085: PUSH
7086: CALL_OW 44
7090: ST_TO_ADDR
// tmp := tmp union un ;
7091: LD_ADDR_VAR 0 4
7095: PUSH
7096: LD_VAR 0 4
7100: PUSH
7101: LD_VAR 0 3
7105: UNION
7106: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7107: LD_VAR 0 3
7111: PPUSH
7112: LD_INT 105
7114: PPUSH
7115: LD_INT 2
7117: PPUSH
7118: LD_INT 2
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 50
// end ;
7128: GO 7065
7130: POP
7131: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7132: LD_VAR 0 4
7136: PPUSH
7137: LD_INT 26
7139: PPUSH
7140: LD_INT 35
7142: PPUSH
7143: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7147: LD_INT 35
7149: PPUSH
7150: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7154: LD_VAR 0 4
7158: PPUSH
7159: LD_INT 50
7161: PUSH
7162: EMPTY
7163: LIST
7164: PPUSH
7165: CALL_OW 72
7169: NOT
7170: IFFALSE 7174
// exit ;
7172: GO 7301
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7174: LD_VAR 0 4
7178: PPUSH
7179: LD_INT 91
7181: PUSH
7182: LD_INT 64
7184: PUSH
7185: LD_INT 12
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 72
7197: PUSH
7198: LD_VAR 0 4
7202: EQUAL
7203: IFFALSE 7147
// omicronSquad := omicronSquad union tmp ;
7205: LD_ADDR_EXP 47
7209: PUSH
7210: LD_EXP 47
7214: PUSH
7215: LD_VAR 0 4
7219: UNION
7220: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7221: LD_ADDR_VAR 0 2
7225: PUSH
7226: LD_VAR 0 4
7230: PPUSH
7231: LD_INT 25
7233: PUSH
7234: LD_INT 1
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 72
7245: PUSH
7246: FOR_IN
7247: IFFALSE 7299
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7249: LD_VAR 0 2
7253: PPUSH
7254: LD_INT 22
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 30
7266: PUSH
7267: LD_INT 4
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: PPUSH
7283: LD_VAR 0 2
7287: PPUSH
7288: CALL_OW 74
7292: PPUSH
7293: CALL_OW 120
7297: GO 7246
7299: POP
7300: POP
// end ;
7301: LD_VAR 0 1
7305: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7306: LD_EXP 13
7310: NOT
7311: IFFALSE 7882
7313: GO 7315
7315: DISABLE
7316: LD_INT 0
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
// begin enable ;
7322: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7323: LD_ADDR_VAR 0 2
7327: PUSH
7328: LD_INT 22
7330: PUSH
7331: LD_INT 4
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 21
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 3
7350: PUSH
7351: LD_INT 24
7353: PUSH
7354: LD_INT 1000
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: PPUSH
7370: CALL_OW 69
7374: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_EXP 47
7384: PPUSH
7385: LD_INT 25
7387: PUSH
7388: LD_INT 2
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL_OW 72
7399: ST_TO_ADDR
// if filter and tmp then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_VAR 0 3
7409: AND
7410: IFFALSE 7483
// begin for i in tmp do
7412: LD_ADDR_VAR 0 1
7416: PUSH
7417: LD_VAR 0 3
7421: PUSH
7422: FOR_IN
7423: IFFALSE 7479
// if IsInUnit ( i ) then
7425: LD_VAR 0 1
7429: PPUSH
7430: CALL_OW 310
7434: IFFALSE 7447
// ComExitBuilding ( i ) else
7436: LD_VAR 0 1
7440: PPUSH
7441: CALL_OW 122
7445: GO 7477
// if not HasTask ( i ) then
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 314
7456: NOT
7457: IFFALSE 7477
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7459: LD_VAR 0 1
7463: PPUSH
7464: LD_VAR 0 2
7468: PUSH
7469: LD_INT 1
7471: ARRAY
7472: PPUSH
7473: CALL_OW 130
7477: GO 7422
7479: POP
7480: POP
// end else
7481: GO 7554
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7483: LD_VAR 0 3
7487: PPUSH
7488: LD_INT 3
7490: PUSH
7491: LD_INT 54
7493: PUSH
7494: EMPTY
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PPUSH
7501: CALL_OW 72
7505: IFFALSE 7554
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: LD_VAR 0 3
7516: PPUSH
7517: LD_INT 3
7519: PUSH
7520: LD_INT 54
7522: PUSH
7523: EMPTY
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 72
7534: PUSH
7535: FOR_IN
7536: IFFALSE 7552
// ComEnterUnit ( i , omikron ) ;
7538: LD_VAR 0 1
7542: PPUSH
7543: LD_INT 64
7545: PPUSH
7546: CALL_OW 120
7550: GO 7535
7552: POP
7553: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7554: LD_ADDR_VAR 0 2
7558: PUSH
7559: LD_EXP 47
7563: PPUSH
7564: LD_INT 21
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 72
7578: ST_TO_ADDR
// if not filter then
7579: LD_VAR 0 2
7583: NOT
7584: IFFALSE 7588
// exit ;
7586: GO 7882
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7588: LD_ADDR_VAR 0 4
7592: PUSH
7593: LD_INT 13
7595: PPUSH
7596: LD_INT 81
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 70
7610: ST_TO_ADDR
// if enemy then
7611: LD_VAR 0 4
7615: IFFALSE 7882
// begin for i in filter do
7617: LD_ADDR_VAR 0 1
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: FOR_IN
7628: IFFALSE 7880
// begin tmp := IsDrivenBy ( i ) ;
7630: LD_ADDR_VAR 0 3
7634: PUSH
7635: LD_VAR 0 1
7639: PPUSH
7640: CALL_OW 311
7644: ST_TO_ADDR
// if not tmp then
7645: LD_VAR 0 3
7649: NOT
7650: IFFALSE 7654
// continue ;
7652: GO 7627
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7654: LD_VAR 0 1
7658: PPUSH
7659: CALL_OW 256
7663: PUSH
7664: LD_INT 600
7666: GREATEREQUAL
7667: PUSH
7668: LD_VAR 0 1
7672: PPUSH
7673: CALL_OW 110
7677: PUSH
7678: LD_INT 1
7680: NONEQUAL
7681: AND
7682: IFFALSE 7708
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7684: LD_VAR 0 1
7688: PPUSH
7689: LD_VAR 0 4
7693: PPUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 74
7703: PPUSH
7704: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 256
7717: PUSH
7718: LD_INT 600
7720: LESS
7721: PUSH
7722: LD_VAR 0 1
7726: PPUSH
7727: CALL_OW 110
7731: PUSH
7732: LD_INT 1
7734: NONEQUAL
7735: AND
7736: IFFALSE 7765
// begin SetTag ( i , 1 ) ;
7738: LD_VAR 0 1
7742: PPUSH
7743: LD_INT 1
7745: PPUSH
7746: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7750: LD_VAR 0 1
7754: PPUSH
7755: LD_INT 27
7757: PPUSH
7758: LD_INT 35
7760: PPUSH
7761: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 110
7774: PUSH
7775: LD_INT 1
7777: EQUAL
7778: PUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_INT 27
7786: PPUSH
7787: LD_INT 35
7789: PPUSH
7790: CALL_OW 297
7794: PUSH
7795: LD_INT 6
7797: LESS
7798: AND
7799: PUSH
7800: LD_VAR 0 3
7804: AND
7805: IFFALSE 7878
// begin ComExitVehicle ( tmp ) ;
7807: LD_VAR 0 3
7811: PPUSH
7812: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7816: LD_VAR 0 3
7820: PPUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 256
7846: PUSH
7847: LD_INT 1000
7849: EQUAL
7850: IFFALSE 7830
// ComEnterUnit ( tmp , i ) ;
7852: LD_VAR 0 3
7856: PPUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 120
// SetTag ( i , 0 ) ;
7866: LD_VAR 0 1
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 109
// end ; end ;
7878: GO 7627
7880: POP
7881: POP
// end ; end ;
7882: PPOPN 4
7884: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7885: LD_EXP 13
7889: IFFALSE 8033
7891: GO 7893
7893: DISABLE
7894: LD_INT 0
7896: PPUSH
7897: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7898: LD_ADDR_VAR 0 2
7902: PUSH
7903: LD_EXP 47
7907: PPUSH
7908: LD_INT 21
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 50
7920: PUSH
7921: EMPTY
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 72
7932: ST_TO_ADDR
// if not tmp then
7933: LD_VAR 0 2
7937: NOT
7938: IFFALSE 7942
// exit ;
7940: GO 8033
// repeat wait ( 0 0$1 ) ;
7942: LD_INT 35
7944: PPUSH
7945: CALL_OW 67
// for i in tmp do
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_VAR 0 2
7958: PUSH
7959: FOR_IN
7960: IFFALSE 8024
// begin ComExit ( i ) ;
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL 759 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7971: LD_VAR 0 1
7975: PPUSH
7976: LD_INT 14
7978: PPUSH
7979: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7983: LD_VAR 0 1
7987: PPUSH
7988: LD_INT 14
7990: PPUSH
7991: CALL_OW 308
7995: IFFALSE 8022
// begin tmp := tmp diff i ;
7997: LD_ADDR_VAR 0 2
8001: PUSH
8002: LD_VAR 0 2
8006: PUSH
8007: LD_VAR 0 1
8011: DIFF
8012: ST_TO_ADDR
// RemoveUnit ( i ) ;
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 64
// end ; end ;
8022: GO 7959
8024: POP
8025: POP
// until not tmp ;
8026: LD_VAR 0 2
8030: NOT
8031: IFFALSE 7942
// end ; end_of_file
8033: PPOPN 2
8035: END
// export function Action ; var i , un , veh , tmp ; begin
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
// InGameOn ;
8043: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8047: LD_INT 179
8049: PPUSH
8050: LD_INT 5
8052: PPUSH
8053: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8057: LD_ADDR_VAR 0 4
8061: PUSH
8062: LD_INT 2
8064: PPUSH
8065: LD_INT 2
8067: PPUSH
8068: LD_INT 12
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: LD_INT 24
8079: PPUSH
8080: LD_INT 33
8082: PPUSH
8083: CALL 321 0 7
8087: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8088: LD_VAR 0 4
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_INT 178
8107: PPUSH
8108: LD_INT 2
8110: PPUSH
8111: LD_INT 0
8113: PPUSH
8114: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8118: LD_EXP 22
8122: PPUSH
8123: LD_VAR 0 4
8127: PPUSH
8128: CALL_OW 52
// if Kamil then
8132: LD_EXP 26
8136: IFFALSE 8171
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8138: LD_EXP 26
8142: PPUSH
8143: LD_INT 207
8145: PPUSH
8146: LD_INT 37
8148: PPUSH
8149: LD_INT 0
8151: PPUSH
8152: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8156: LD_EXP 26
8160: PPUSH
8161: LD_INT 211
8163: PPUSH
8164: LD_INT 38
8166: PPUSH
8167: CALL_OW 118
// end ; if Sophia then
8171: LD_EXP 28
8175: IFFALSE 8210
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8177: LD_EXP 28
8181: PPUSH
8182: LD_INT 209
8184: PPUSH
8185: LD_INT 40
8187: PPUSH
8188: LD_INT 0
8190: PPUSH
8191: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8195: LD_EXP 28
8199: PPUSH
8200: LD_INT 211
8202: PPUSH
8203: LD_INT 38
8205: PPUSH
8206: CALL_OW 118
// end ; if Givi then
8210: LD_EXP 23
8214: IFFALSE 8249
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8216: LD_EXP 23
8220: PPUSH
8221: LD_INT 201
8223: PPUSH
8224: LD_INT 34
8226: PPUSH
8227: LD_INT 0
8229: PPUSH
8230: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8234: LD_EXP 23
8238: PPUSH
8239: LD_INT 206
8241: PPUSH
8242: LD_INT 36
8244: PPUSH
8245: CALL_OW 118
// end ; if Ibrahim then
8249: LD_EXP 25
8253: IFFALSE 8288
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8255: LD_EXP 25
8259: PPUSH
8260: LD_INT 202
8262: PPUSH
8263: LD_INT 39
8265: PPUSH
8266: LD_INT 0
8268: PPUSH
8269: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 206
8280: PPUSH
8281: LD_INT 36
8283: PPUSH
8284: CALL_OW 118
// end ; if Markov then
8288: LD_EXP 29
8292: IFFALSE 8379
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8294: LD_ADDR_VAR 0 4
8298: PUSH
8299: LD_INT 2
8301: PPUSH
8302: LD_INT 2
8304: PPUSH
8305: LD_INT 13
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 25
8316: PPUSH
8317: LD_INT 80
8319: PUSH
8320: LD_INT 20
8322: PUSH
8323: LD_OWVAR 67
8327: MUL
8328: MINUS
8329: PPUSH
8330: CALL 321 0 7
8334: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8335: LD_VAR 0 4
8339: PPUSH
8340: LD_INT 2
8342: PPUSH
8343: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8347: LD_VAR 0 4
8351: PPUSH
8352: LD_INT 197
8354: PPUSH
8355: LD_INT 35
8357: PPUSH
8358: LD_INT 0
8360: PPUSH
8361: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8365: LD_EXP 29
8369: PPUSH
8370: LD_VAR 0 4
8374: PPUSH
8375: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: LD_EXP 27
8388: PUSH
8389: LD_EXP 33
8393: UNION
8394: ST_TO_ADDR
// for i in tmp do
8395: LD_ADDR_VAR 0 2
8399: PUSH
8400: LD_VAR 0 5
8404: PUSH
8405: FOR_IN
8406: IFFALSE 8440
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 203
8415: PPUSH
8416: LD_INT 41
8418: PPUSH
8419: LD_INT 6
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: CALL_OW 50
// ComHold ( i ) ;
8429: LD_VAR 0 2
8433: PPUSH
8434: CALL_OW 140
// end ;
8438: GO 8405
8440: POP
8441: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8442: LD_INT 22
8444: PUSH
8445: LD_INT 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: NOT
8471: IFFALSE 8485
// SetClass ( Heike , 2 ) ;
8473: LD_EXP 22
8477: PPUSH
8478: LD_INT 2
8480: PPUSH
8481: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8485: LD_EXP 22
8489: PPUSH
8490: LD_INT 183
8492: PPUSH
8493: LD_INT 12
8495: PPUSH
8496: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8500: LD_EXP 22
8504: PPUSH
8505: LD_INT 188
8507: PPUSH
8508: LD_INT 20
8510: PPUSH
8511: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8515: LD_EXP 22
8519: PPUSH
8520: LD_INT 191
8522: PPUSH
8523: LD_INT 25
8525: PPUSH
8526: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8530: LD_EXP 22
8534: PPUSH
8535: LD_INT 203
8537: PPUSH
8538: LD_INT 29
8540: PPUSH
8541: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8545: LD_EXP 22
8549: PPUSH
8550: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8554: LD_INT 35
8556: PPUSH
8557: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8561: LD_EXP 22
8565: PPUSH
8566: CALL_OW 310
8570: NOT
8571: IFFALSE 8554
// CenterOnUnits ( Heike ) ;
8573: LD_EXP 22
8577: PPUSH
8578: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8582: LD_ADDR_VAR 0 5
8586: PUSH
8587: LD_INT 22
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 21
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 69
8615: PUSH
8616: LD_EXP 22
8620: PUSH
8621: LD_EXP 29
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: DIFF
8630: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8631: LD_VAR 0 5
8635: PPUSH
8636: LD_EXP 22
8640: PPUSH
8641: CALL_OW 119
// if Givi then
8645: LD_EXP 23
8649: IFFALSE 8667
// ComTurnUnit ( Heike , Givi ) else
8651: LD_EXP 22
8655: PPUSH
8656: LD_EXP 23
8660: PPUSH
8661: CALL_OW 119
8665: GO 8685
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8667: LD_EXP 22
8671: PPUSH
8672: LD_VAR 0 5
8676: PUSH
8677: LD_INT 1
8679: ARRAY
8680: PPUSH
8681: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8685: LD_EXP 22
8689: PPUSH
8690: LD_STRING DH-Start-1
8692: PPUSH
8693: CALL_OW 88
// if Givi then
8697: LD_EXP 23
8701: IFFALSE 8748
// begin Say ( Givi , DG-Start-2 ) ;
8703: LD_EXP 23
8707: PPUSH
8708: LD_STRING DG-Start-2
8710: PPUSH
8711: CALL_OW 88
// if not Mike then
8715: LD_EXP 24
8719: NOT
8720: IFFALSE 8746
// begin Say ( Givi , DG-Start-b-3 ) ;
8722: LD_EXP 23
8726: PPUSH
8727: LD_STRING DG-Start-b-3
8729: PPUSH
8730: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8734: LD_EXP 22
8738: PPUSH
8739: LD_STRING DH-Start-b-4
8741: PPUSH
8742: CALL_OW 88
// end ; end else
8746: GO 8813
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8748: LD_EXP 33
8752: PPUSH
8753: LD_INT 26
8755: PUSH
8756: LD_INT 1
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PPUSH
8763: CALL_OW 72
8767: PUSH
8768: LD_INT 1
8770: ARRAY
8771: PPUSH
8772: LD_STRING DArm-Start-a-2
8774: PPUSH
8775: CALL_OW 88
8779: NOT
8780: IFFALSE 8813
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8782: LD_EXP 33
8786: PPUSH
8787: LD_INT 26
8789: PUSH
8790: LD_INT 2
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 72
8801: PUSH
8802: LD_INT 1
8804: ARRAY
8805: PPUSH
8806: LD_STRING DArf-Start-a-2
8808: PPUSH
8809: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8813: LD_EXP 22
8817: PPUSH
8818: LD_INT 211
8820: PPUSH
8821: LD_INT 38
8823: PPUSH
8824: CALL_OW 118
// wait ( 0 0$1 ) ;
8828: LD_INT 35
8830: PPUSH
8831: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8835: LD_EXP 22
8839: PPUSH
8840: LD_STRING DH-Start-3
8842: PPUSH
8843: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8847: LD_EXP 22
8851: PPUSH
8852: LD_STRING DH-Start-4
8854: PPUSH
8855: CALL_OW 88
// InGameOff ;
8859: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8863: LD_STRING Prepare
8865: PPUSH
8866: CALL_OW 337
// SaveForQuickRestart ;
8870: CALL_OW 22
// wait ( 0 0$10 ) ;
8874: LD_INT 350
8876: PPUSH
8877: CALL_OW 67
// if not Aviradze then
8881: LD_EXP 32
8885: NOT
8886: IFFALSE 8890
// exit ;
8888: GO 9094
// SetDir ( Aviradze , 4 ) ;
8890: LD_EXP 32
8894: PPUSH
8895: LD_INT 4
8897: PPUSH
8898: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8902: LD_EXP 32
8906: PPUSH
8907: LD_INT 225
8909: PPUSH
8910: LD_INT 33
8912: PPUSH
8913: LD_INT 0
8915: PPUSH
8916: CALL_OW 48
// for i := 1 to 2 do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: DOUBLE
8926: LD_INT 1
8928: DEC
8929: ST_TO_ADDR
8930: LD_INT 2
8932: PUSH
8933: FOR_TO
8934: IFFALSE 9065
// begin uc_side := 2 ;
8936: LD_ADDR_OWVAR 20
8940: PUSH
8941: LD_INT 2
8943: ST_TO_ADDR
// uc_nation := 0 ;
8944: LD_ADDR_OWVAR 21
8948: PUSH
8949: LD_INT 0
8951: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8952: LD_INT 0
8954: PPUSH
8955: LD_INT 12
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: CALL_OW 380
// hc_gallery :=  ;
8965: LD_ADDR_OWVAR 33
8969: PUSH
8970: LD_STRING 
8972: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8973: LD_ADDR_OWVAR 26
8977: PUSH
8978: LD_STRING Artudito
8980: PUSH
8981: LD_STRING Textur
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_VAR 0 2
8992: ARRAY
8993: ST_TO_ADDR
// un := CreateHuman ;
8994: LD_ADDR_VAR 0 3
8998: PUSH
8999: CALL_OW 44
9003: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9004: LD_VAR 0 3
9008: PPUSH
9009: LD_INT 224
9011: PUSH
9012: LD_INT 226
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_VAR 0 2
9023: ARRAY
9024: PPUSH
9025: LD_INT 31
9027: PUSH
9028: LD_INT 35
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_VAR 0 2
9039: ARRAY
9040: PPUSH
9041: LD_INT 0
9043: PPUSH
9044: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9048: LD_VAR 0 3
9052: PPUSH
9053: LD_INT 215
9055: PPUSH
9056: LD_INT 36
9058: PPUSH
9059: CALL_OW 111
// end ;
9063: GO 8933
9065: POP
9066: POP
// hc_name :=  ;
9067: LD_ADDR_OWVAR 26
9071: PUSH
9072: LD_STRING 
9074: ST_TO_ADDR
// InitHc ;
9075: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9079: LD_EXP 32
9083: PPUSH
9084: LD_INT 215
9086: PPUSH
9087: LD_INT 36
9089: PPUSH
9090: CALL_OW 111
// end ;
9094: LD_VAR 0 1
9098: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9099: LD_EXP 3
9103: IFFALSE 10336
9105: GO 9107
9107: DISABLE
9108: LD_INT 0
9110: PPUSH
9111: PPUSH
9112: PPUSH
// begin DialogueOn ;
9113: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9117: LD_EXP 22
9121: PPUSH
9122: LD_STRING DH-base-1
9124: PPUSH
9125: CALL_OW 88
// if Markov then
9129: LD_EXP 29
9133: IFFALSE 9185
// begin Say ( Markov , DMar-base-2 ) ;
9135: LD_EXP 29
9139: PPUSH
9140: LD_STRING DMar-base-2
9142: PPUSH
9143: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9147: LD_EXP 29
9151: PPUSH
9152: LD_STRING DMar-base-3
9154: PPUSH
9155: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9159: LD_EXP 22
9163: PPUSH
9164: LD_STRING DH-base-4
9166: PPUSH
9167: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9171: LD_EXP 29
9175: PPUSH
9176: LD_STRING DMar-base-5
9178: PPUSH
9179: CALL_OW 88
// end else
9183: GO 9262
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9185: LD_EXP 33
9189: PPUSH
9190: LD_INT 26
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PPUSH
9200: CALL_OW 72
9204: PUSH
9205: LD_INT 1
9207: ARRAY
9208: PPUSH
9209: LD_STRING DArm-base-a-2
9211: PPUSH
9212: CALL_OW 88
9216: NOT
9217: IFFALSE 9250
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9219: LD_EXP 33
9223: PPUSH
9224: LD_INT 26
9226: PUSH
9227: LD_INT 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 72
9238: PUSH
9239: LD_INT 1
9241: ARRAY
9242: PPUSH
9243: LD_STRING DArf-base-a-2
9245: PPUSH
9246: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9250: LD_EXP 22
9254: PPUSH
9255: LD_STRING DH-base-a-3
9257: PPUSH
9258: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9262: LD_EXP 32
9266: PPUSH
9267: LD_STRING DA-base-6
9269: PPUSH
9270: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9274: LD_EXP 32
9278: PPUSH
9279: LD_STRING DA-base-7
9281: PPUSH
9282: CALL_OW 88
// DialogueOff ;
9286: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9290: LD_STRING Flamethrower
9292: PPUSH
9293: CALL_OW 337
// wait ( 2 2$00 ) ;
9297: LD_INT 4200
9299: PPUSH
9300: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9304: LD_EXP 31
9308: PUSH
9309: LD_EXP 24
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PPUSH
9318: LD_INT 203
9320: PPUSH
9321: LD_INT 37
9323: PPUSH
9324: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9328: LD_INT 22
9330: PUSH
9331: LD_INT 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 92
9340: PUSH
9341: LD_INT 203
9343: PUSH
9344: LD_INT 37
9346: PUSH
9347: LD_INT 10
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: NOT
9365: IFFALSE 9405
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9367: LD_EXP 31
9371: PUSH
9372: LD_EXP 24
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: LD_EXP 22
9385: PPUSH
9386: CALL_OW 250
9390: PPUSH
9391: LD_EXP 22
9395: PPUSH
9396: CALL_OW 251
9400: PPUSH
9401: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9405: LD_INT 35
9407: PPUSH
9408: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
9412: LD_INT 2
9414: PPUSH
9415: LD_EXP 31
9419: PPUSH
9420: CALL_OW 292
9424: PUSH
9425: LD_EXP 31
9429: PPUSH
9430: LD_EXP 22
9434: PPUSH
9435: CALL_OW 296
9439: PUSH
9440: LD_INT 8
9442: LESS
9443: OR
9444: IFFALSE 9405
// InGameOn ;
9446: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9450: LD_EXP 31
9454: PPUSH
9455: CALL_OW 87
// if IsInUnit ( Heike ) then
9459: LD_EXP 22
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExitBuilding ( Heike ) ;
9470: LD_EXP 22
9474: PPUSH
9475: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9479: LD_EXP 31
9483: PUSH
9484: LD_EXP 24
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: LD_EXP 22
9497: PPUSH
9498: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9502: LD_EXP 22
9506: PPUSH
9507: LD_EXP 31
9511: PPUSH
9512: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9516: LD_INT 22
9518: PUSH
9519: LD_INT 2
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 91
9528: PUSH
9529: LD_EXP 31
9533: PUSH
9534: LD_INT 10
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 3
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: PPUSH
9557: CALL_OW 69
9561: IFFALSE 9587
// begin Say ( Kurt , DKs-scout-1 ) ;
9563: LD_EXP 31
9567: PPUSH
9568: LD_STRING DKs-scout-1
9570: PPUSH
9571: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9575: LD_EXP 22
9579: PPUSH
9580: LD_STRING DH-scout-2
9582: PPUSH
9583: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9587: LD_INT 35
9589: PPUSH
9590: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9594: LD_EXP 22
9598: PPUSH
9599: LD_EXP 31
9603: PPUSH
9604: CALL_OW 296
9608: PUSH
9609: LD_INT 6
9611: LESS
9612: IFFALSE 9587
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9614: LD_EXP 31
9618: PUSH
9619: LD_EXP 24
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: LD_EXP 22
9632: PPUSH
9633: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9637: LD_EXP 31
9641: PPUSH
9642: LD_STRING DKs-scout-3
9644: PPUSH
9645: CALL_OW 88
// if Kaia then
9649: LD_EXP 27
9653: IFFALSE 9836
// begin if IsInUnit ( Kaia ) then
9655: LD_EXP 27
9659: PPUSH
9660: CALL_OW 310
9664: IFFALSE 9675
// ComExitBuilding ( Kaia ) ;
9666: LD_EXP 27
9670: PPUSH
9671: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9675: LD_EXP 27
9679: PPUSH
9680: LD_EXP 31
9684: PPUSH
9685: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9689: LD_INT 35
9691: PPUSH
9692: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9696: LD_EXP 27
9700: PPUSH
9701: LD_EXP 31
9705: PPUSH
9706: CALL_OW 296
9710: PUSH
9711: LD_INT 6
9713: LESS
9714: IFFALSE 9689
// ComTurnUnit ( Kaia , Kurt ) ;
9716: LD_EXP 27
9720: PPUSH
9721: LD_EXP 31
9725: PPUSH
9726: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9730: LD_EXP 27
9734: PPUSH
9735: LD_STRING DK-scout-4
9737: PPUSH
9738: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9742: LD_EXP 31
9746: PPUSH
9747: LD_EXP 27
9751: PPUSH
9752: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9756: LD_EXP 31
9760: PPUSH
9761: LD_STRING DKs-scout-5
9763: PPUSH
9764: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9768: LD_EXP 27
9772: PPUSH
9773: LD_STRING DK-scout-6
9775: PPUSH
9776: CALL_OW 88
// if Mike then
9780: LD_EXP 24
9784: IFFALSE 9836
// begin Say ( Mike , DM-scout-7 ) ;
9786: LD_EXP 24
9790: PPUSH
9791: LD_STRING DM-scout-7
9793: PPUSH
9794: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9798: LD_EXP 27
9802: PPUSH
9803: LD_EXP 24
9807: PPUSH
9808: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9812: LD_EXP 27
9816: PPUSH
9817: LD_STRING DK-scout-8
9819: PPUSH
9820: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9824: LD_EXP 24
9828: PPUSH
9829: LD_STRING DM-scout-9
9831: PPUSH
9832: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9836: LD_INT 184
9838: PPUSH
9839: LD_INT 100
9841: PPUSH
9842: LD_INT 2
9844: PPUSH
9845: LD_INT 12
9847: NEG
9848: PPUSH
9849: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9853: LD_INT 184
9855: PPUSH
9856: LD_INT 100
9858: PPUSH
9859: LD_INT 2
9861: PPUSH
9862: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9866: LD_INT 184
9868: PPUSH
9869: LD_INT 100
9871: PPUSH
9872: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9876: LD_EXP 31
9880: PPUSH
9881: LD_STRING DKs-scout-10
9883: PPUSH
9884: CALL_OW 88
// wait ( 0 0$1 ) ;
9888: LD_INT 35
9890: PPUSH
9891: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9895: LD_INT 144
9897: PPUSH
9898: LD_INT 65
9900: PPUSH
9901: LD_INT 2
9903: PPUSH
9904: LD_INT 12
9906: NEG
9907: PPUSH
9908: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9912: LD_INT 144
9914: PPUSH
9915: LD_INT 65
9917: PPUSH
9918: LD_INT 2
9920: PPUSH
9921: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9925: LD_INT 144
9927: PPUSH
9928: LD_INT 65
9930: PPUSH
9931: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9935: LD_EXP 31
9939: PPUSH
9940: LD_STRING DKs-scout-11
9942: PPUSH
9943: CALL_OW 88
// wait ( 0 0$1 ) ;
9947: LD_INT 35
9949: PPUSH
9950: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9954: LD_EXP 31
9958: PPUSH
9959: CALL_OW 87
// if Mike and not Givi then
9963: LD_EXP 24
9967: PUSH
9968: LD_EXP 23
9972: NOT
9973: AND
9974: IFFALSE 10000
// begin Say ( Mike , DM-scout-a-1 ) ;
9976: LD_EXP 24
9980: PPUSH
9981: LD_STRING DM-scout-a-1
9983: PPUSH
9984: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9988: LD_EXP 22
9992: PPUSH
9993: LD_STRING DH-scout-a-2
9995: PPUSH
9996: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10000: LD_EXP 31
10004: PUSH
10005: LD_EXP 24
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: LD_INT 2
10016: PPUSH
10017: CALL_OW 235
// InGameOff ;
10021: CALL_OW 9
// allowToPatrol := true ;
10025: LD_ADDR_EXP 12
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10033: LD_INT 3150
10035: PPUSH
10036: CALL_OW 67
// InitHc ;
10040: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10044: LD_ADDR_VAR 0 1
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 3
10056: PUSH
10057: LD_INT 3
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: PUSH
10068: LD_OWVAR 67
10072: ARRAY
10073: PUSH
10074: FOR_TO
10075: IFFALSE 10334
// begin uc_side := 2 ;
10077: LD_ADDR_OWVAR 20
10081: PUSH
10082: LD_INT 2
10084: ST_TO_ADDR
// uc_nation := 2 ;
10085: LD_ADDR_OWVAR 21
10089: PUSH
10090: LD_INT 2
10092: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10093: LD_INT 0
10095: PPUSH
10096: LD_INT 1
10098: PUSH
10099: LD_INT 3
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: LD_VAR 0 1
10114: PUSH
10115: LD_INT 3
10117: MOD
10118: PUSH
10119: LD_INT 1
10121: PLUS
10122: ARRAY
10123: PPUSH
10124: LD_INT 3
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: LD_OWVAR 67
10142: ARRAY
10143: PPUSH
10144: CALL_OW 380
// un := CreateHuman ;
10148: LD_ADDR_VAR 0 2
10152: PUSH
10153: CALL_OW 44
10157: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10158: LD_ADDR_EXP 33
10162: PUSH
10163: LD_EXP 33
10167: PUSH
10168: LD_VAR 0 2
10172: UNION
10173: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10174: LD_INT 2
10176: PPUSH
10177: LD_INT 2
10179: PPUSH
10180: LD_INT 13
10182: PPUSH
10183: LD_INT 2
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_VAR 0 1
10197: PUSH
10198: LD_INT 2
10200: MOD
10201: PUSH
10202: LD_INT 1
10204: PLUS
10205: ARRAY
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 27
10212: PUSH
10213: LD_INT 25
10215: PUSH
10216: LD_INT 27
10218: PUSH
10219: LD_INT 23
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: LD_OWVAR 67
10232: PUSH
10233: LD_INT 0
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: CALL_OW 12
10243: PLUS
10244: ARRAY
10245: PPUSH
10246: LD_INT 77
10248: PPUSH
10249: CALL 321 0 7
// veh := CreateVehicle ;
10253: LD_ADDR_VAR 0 3
10257: PUSH
10258: CALL_OW 45
10262: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 2
10270: PPUSH
10271: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10275: LD_VAR 0 3
10279: PPUSH
10280: LD_INT 178
10282: PPUSH
10283: LD_INT 2
10285: PPUSH
10286: LD_INT 2
10288: PPUSH
10289: LD_INT 0
10291: PPUSH
10292: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10296: LD_VAR 0 2
10300: PPUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_INT 183
10317: PPUSH
10318: LD_INT 11
10320: PPUSH
10321: CALL_OW 111
// wait ( 0 0$2 ) ;
10325: LD_INT 70
10327: PPUSH
10328: CALL_OW 67
// end ;
10332: GO 10074
10334: POP
10335: POP
// end ;
10336: PPOPN 3
10338: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10339: LD_EXP 4
10343: PUSH
10344: LD_EXP 32
10348: PPUSH
10349: CALL_OW 302
10353: AND
10354: IFFALSE 10403
10356: GO 10358
10358: DISABLE
// begin DialogueOn ;
10359: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10363: LD_EXP 32
10367: PPUSH
10368: LD_STRING DA-lab-1
10370: PPUSH
10371: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10375: LD_EXP 32
10379: PPUSH
10380: LD_STRING DA-lab-2
10382: PPUSH
10383: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10387: LD_EXP 22
10391: PPUSH
10392: LD_STRING DH-lab-3
10394: PPUSH
10395: CALL_OW 88
// DialogueOff ;
10399: CALL_OW 7
// end ;
10403: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10404: LD_INT 17
10406: PPUSH
10407: LD_INT 2
10409: PPUSH
10410: CALL_OW 321
10414: PUSH
10415: LD_INT 2
10417: EQUAL
10418: IFFALSE 10550
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
// begin DialogueOn ;
10426: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10430: LD_EXP 32
10434: PPUSH
10435: LD_STRING DA-Cam-1
10437: PPUSH
10438: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10442: LD_EXP 32
10446: PPUSH
10447: LD_STRING DA-Cam-2
10449: PPUSH
10450: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10454: LD_EXP 32
10458: PPUSH
10459: LD_STRING DA-Cam-3
10461: PPUSH
10462: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10466: LD_EXP 22
10470: PPUSH
10471: LD_STRING DH-Cam-4
10473: PPUSH
10474: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10478: LD_EXP 27
10482: PPUSH
10483: LD_STRING DK-Cam-5
10485: PPUSH
10486: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10490: LD_EXP 27
10494: PPUSH
10495: LD_STRING DK-Cam-6
10497: PPUSH
10498: CALL_OW 88
// DialogueOff ;
10502: CALL_OW 7
// Query ( Camera ) ;
10506: LD_STRING Camera
10508: PPUSH
10509: CALL_OW 97
// hiddenCameraAllowed := true ;
10513: LD_ADDR_EXP 5
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// for i in camAreas do
10521: LD_ADDR_VAR 0 1
10525: PUSH
10526: LD_EXP 8
10530: PUSH
10531: FOR_IN
10532: IFFALSE 10548
// SetAreaMapShow ( i , 1 ) ;
10534: LD_VAR 0 1
10538: PPUSH
10539: LD_INT 1
10541: PPUSH
10542: CALL_OW 424
10546: GO 10531
10548: POP
10549: POP
// end ;
10550: PPOPN 1
10552: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10553: LD_EXP 8
10557: NOT
10558: PUSH
10559: LD_EXP 5
10563: AND
10564: IFFALSE 10655
10566: GO 10568
10568: DISABLE
10569: LD_INT 0
10571: PPUSH
// begin stop_talking := true ;
10572: LD_ADDR_OWVAR 56
10576: PUSH
10577: LD_INT 1
10579: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10580: LD_ADDR_VAR 0 1
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 21
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 23
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10645
// AddExperience ( i , 2 , 450 ) ;
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_INT 2
10635: PPUSH
10636: LD_INT 450
10638: PPUSH
10639: CALL_OW 492
10643: GO 10625
10645: POP
10646: POP
// stop_talking := false ;
10647: LD_ADDR_OWVAR 56
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// end ;
10655: PPOPN 1
10657: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10658: LD_EXP 9
10662: PUSH
10663: LD_EXP 11
10667: NOT
10668: AND
10669: IFFALSE 10762
10671: GO 10673
10673: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
10674: LD_EXP 9
10678: PUSH
10679: LD_INT 1
10681: ARRAY
10682: PPUSH
10683: CALL_OW 250
10687: PPUSH
10688: LD_EXP 9
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: CALL_OW 251
10701: PPUSH
10702: LD_INT 2
10704: PPUSH
10705: LD_INT 6
10707: NEG
10708: PPUSH
10709: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
10713: LD_EXP 9
10717: PUSH
10718: LD_INT 1
10720: ARRAY
10721: PPUSH
10722: CALL_OW 87
// DialogueOn ;
10726: CALL_OW 6
// if spottedByPatrol then
10730: LD_EXP 7
10734: IFFALSE 10748
// Say ( Heike , DH-Spot-f-3 ) ;
10736: LD_EXP 22
10740: PPUSH
10741: LD_STRING DH-Spot-f-3
10743: PPUSH
10744: CALL_OW 88
// dwait ( 0 0$2 ) ;
10748: LD_INT 70
10750: PPUSH
10751: CALL_OW 68
// YouLost ( Spotted ) ;
10755: LD_STRING Spotted
10757: PPUSH
10758: CALL_OW 104
// end ;
10762: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10763: LD_INT 2
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_INT 6
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 101
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: PUSH
10810: LD_EXP 43
10814: DIFF
10815: IFFALSE 10885
10817: GO 10819
10819: DISABLE
// russianAlert := [ FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol ] [ 1 ] ;
10820: LD_ADDR_EXP 9
10824: PUSH
10825: LD_INT 2
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_INT 3
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 22
10840: PUSH
10841: LD_INT 6
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 101
10855: PUSH
10856: LD_INT 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 69
10871: PUSH
10872: LD_EXP 43
10876: DIFF
10877: PUSH
10878: EMPTY
10879: LIST
10880: PUSH
10881: LD_INT 1
10883: ARRAY
10884: ST_TO_ADDR
10885: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10886: LD_EXP 9
10890: IFFALSE 11187
10892: GO 10894
10894: DISABLE
10895: LD_INT 0
10897: PPUSH
10898: PPUSH
10899: PPUSH
10900: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10901: LD_ADDR_VAR 0 2
10905: PUSH
10906: LD_EXP 40
10910: PPUSH
10911: LD_INT 25
10913: PUSH
10914: LD_INT 1
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 54
10923: PUSH
10924: EMPTY
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 72
10935: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_INT 6
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 30
10953: PUSH
10954: LD_INT 32
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// for i := 1 to tmp do
10970: LD_ADDR_VAR 0 1
10974: PUSH
10975: DOUBLE
10976: LD_INT 1
10978: DEC
10979: ST_TO_ADDR
10980: LD_VAR 0 2
10984: PUSH
10985: FOR_TO
10986: IFFALSE 11031
// begin ComExitBuilding ( tmp [ i ] ) ;
10988: LD_VAR 0 2
10992: PUSH
10993: LD_VAR 0 1
10997: ARRAY
10998: PPUSH
10999: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11003: LD_VAR 0 2
11007: PUSH
11008: LD_VAR 0 1
11012: ARRAY
11013: PPUSH
11014: LD_VAR 0 3
11018: PUSH
11019: LD_VAR 0 1
11023: ARRAY
11024: PPUSH
11025: CALL_OW 180
// end ;
11029: GO 10985
11031: POP
11032: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11033: LD_ADDR_VAR 0 4
11037: PUSH
11038: LD_EXP 38
11042: PUSH
11043: LD_EXP 40
11047: PUSH
11048: LD_EXP 41
11052: UNION
11053: PPUSH
11054: LD_INT 3
11056: PUSH
11057: LD_INT 25
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 72
11075: UNION
11076: ST_TO_ADDR
// for i in noncombat do
11077: LD_ADDR_VAR 0 1
11081: PUSH
11082: LD_VAR 0 4
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11124
// begin if IsInUnit ( i ) then
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 310
11099: IFFALSE 11110
// ComExitBuilding ( i ) ;
11101: LD_VAR 0 1
11105: PPUSH
11106: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11110: LD_VAR 0 1
11114: PPUSH
11115: LD_INT 16
11117: PPUSH
11118: CALL_OW 173
// end ;
11122: GO 11087
11124: POP
11125: POP
// if not allowHeikeAttack then
11126: LD_EXP 11
11130: NOT
11131: IFFALSE 11135
// exit ;
11133: GO 11187
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11135: LD_EXP 36
11139: PPUSH
11140: LD_STRING D9a-Kur-1
11142: PPUSH
11143: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11147: LD_EXP 39
11151: PPUSH
11152: LD_STRING D9a-Bur-1
11154: PPUSH
11155: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11159: LD_EXP 36
11163: PPUSH
11164: LD_STRING D9a-Kur-2
11166: PPUSH
11167: CALL_OW 94
// omicronFall := true ;
11171: LD_ADDR_EXP 13
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// retreatFromOmicron := true ;
11179: LD_ADDR_EXP 19
11183: PUSH
11184: LD_INT 1
11186: ST_TO_ADDR
// end ;
11187: PPOPN 4
11189: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11190: LD_INT 16
11192: PPUSH
11193: LD_INT 3
11195: PUSH
11196: LD_INT 22
11198: PUSH
11199: LD_INT 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 23
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 70
11228: IFFALSE 11311
11230: GO 11232
11232: DISABLE
11233: LD_INT 0
11235: PPUSH
// begin enable ;
11236: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11237: LD_ADDR_VAR 0 1
11241: PUSH
11242: LD_INT 16
11244: PPUSH
11245: LD_INT 3
11247: PUSH
11248: LD_INT 22
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 23
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 70
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11309
// begin escapeCounter := escapeCounter + 1 ;
11284: LD_ADDR_EXP 18
11288: PUSH
11289: LD_EXP 18
11293: PUSH
11294: LD_INT 1
11296: PLUS
11297: ST_TO_ADDR
// RemoveUnit ( i ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: CALL_OW 64
// end ;
11307: GO 11281
11309: POP
11310: POP
// end ;
11311: PPOPN 1
11313: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11314: LD_OWVAR 1
11318: PUSH
11319: LD_INT 13650
11321: PUSH
11322: LD_INT 0
11324: PPUSH
11325: LD_INT 3150
11327: PPUSH
11328: CALL_OW 12
11332: PLUS
11333: GREATEREQUAL
11334: IFFALSE 11343
11336: GO 11338
11338: DISABLE
// SmallAmericanReinforcements ;
11339: CALL 6857 0 0
11343: END
// every 0 0$1 trigger tick >= 9 9$15 do
11344: LD_OWVAR 1
11348: PUSH
11349: LD_INT 19425
11351: GREATEREQUAL
11352: IFFALSE 11417
11354: GO 11356
11356: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11357: LD_EXP 44
11361: PPUSH
11362: LD_INT 21
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PPUSH
11372: CALL_OW 72
11376: PPUSH
11377: LD_INT 62
11379: PPUSH
11380: LD_INT 22
11382: PPUSH
11383: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11387: LD_EXP 45
11391: PPUSH
11392: LD_INT 69
11394: PPUSH
11395: LD_INT 27
11397: PPUSH
11398: CALL_OW 111
// wait ( 1 1$00 ) ;
11402: LD_INT 2100
11404: PPUSH
11405: CALL_OW 67
// startAttackOnOmicron := true ;
11409: LD_ADDR_EXP 6
11413: PUSH
11414: LD_INT 1
11416: ST_TO_ADDR
// end ;
11417: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11418: LD_EXP 21
11422: PUSH
11423: LD_INT 0
11425: EQUAL
11426: IFFALSE 13285
11428: GO 11430
11430: DISABLE
11431: LD_INT 0
11433: PPUSH
11434: PPUSH
11435: PPUSH
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11440: LD_INT 5
11442: PPUSH
11443: LD_INT 2
11445: PPUSH
11446: CALL_OW 343
// PrepareOmarForces ;
11450: CALL 2295 0 0
// wait ( 0 0$03 ) ;
11454: LD_INT 105
11456: PPUSH
11457: CALL_OW 67
// allowHeikeAttack := true ;
11461: LD_ADDR_EXP 11
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// activeGrishkoAI := false ;
11469: LD_ADDR_EXP 10
11473: PUSH
11474: LD_INT 0
11476: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11477: LD_EXP 30
11481: PPUSH
11482: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11486: LD_ADDR_VAR 0 1
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 21
11503: PUSH
11504: LD_INT 1
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: PUSH
11520: FOR_IN
11521: IFFALSE 11545
// if HasTask ( i ) then
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 314
11532: IFFALSE 11543
// ComHold ( i ) ;
11534: LD_VAR 0 1
11538: PPUSH
11539: CALL_OW 140
11543: GO 11520
11545: POP
11546: POP
// DialogueOn ;
11547: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11551: LD_EXP 30
11555: PPUSH
11556: LD_STRING DO-assault-1
11558: PPUSH
11559: CALL_OW 94
// DialogueOff ;
11563: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11567: LD_ADDR_VAR 0 1
11571: PUSH
11572: LD_EXP 42
11576: PPUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 54
11582: PUSH
11583: EMPTY
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PPUSH
11590: CALL_OW 72
11594: PUSH
11595: FOR_IN
11596: IFFALSE 11615
// ComMoveXY ( i , 226 , 114 ) ;
11598: LD_VAR 0 1
11602: PPUSH
11603: LD_INT 226
11605: PPUSH
11606: LD_INT 114
11608: PPUSH
11609: CALL_OW 111
11613: GO 11595
11615: POP
11616: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11617: LD_EXP 37
11621: PPUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 6
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 4
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: PPUSH
11651: LD_EXP 37
11655: PPUSH
11656: CALL_OW 74
11660: PPUSH
11661: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11665: LD_STRING Attack
11667: PPUSH
11668: CALL_OW 337
// music_class := music_combat ;
11672: LD_ADDR_OWVAR 72
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// music_nat := 4 ;
11680: LD_ADDR_OWVAR 71
11684: PUSH
11685: LD_INT 4
11687: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11688: LD_INT 5
11690: PPUSH
11691: LD_EXP 37
11695: PPUSH
11696: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11700: LD_INT 6
11702: PPUSH
11703: LD_EXP 34
11707: PPUSH
11708: LD_INT 25
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: PUSH
11723: LD_INT 4
11725: ARRAY
11726: PPUSH
11727: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11731: LD_ADDR_VAR 0 1
11735: PUSH
11736: LD_EXP 34
11740: PPUSH
11741: LD_INT 3
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 4
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 72
11762: PUSH
11763: FOR_IN
11764: IFFALSE 11783
// ComAgressiveMove ( i , 221 , 110 ) ;
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_INT 221
11773: PPUSH
11774: LD_INT 110
11776: PPUSH
11777: CALL_OW 114
11781: GO 11763
11783: POP
11784: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11785: LD_EXP 34
11789: PPUSH
11790: LD_INT 25
11792: PUSH
11793: LD_INT 4
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PPUSH
11800: CALL_OW 72
11804: PPUSH
11805: LD_INT 214
11807: PPUSH
11808: LD_INT 124
11810: PPUSH
11811: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11815: LD_EXP 34
11819: PPUSH
11820: LD_INT 25
11822: PUSH
11823: LD_INT 1
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 72
11834: PUSH
11835: LD_INT 4
11837: ARRAY
11838: PPUSH
11839: LD_INT 214
11841: PPUSH
11842: LD_INT 114
11844: PPUSH
11845: LD_INT 0
11847: PPUSH
11848: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11852: LD_EXP 37
11856: PPUSH
11857: LD_STRING D9-Gri-1
11859: PPUSH
11860: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11864: LD_EXP 36
11868: PPUSH
11869: LD_STRING D9-Kur-1
11871: PPUSH
11872: CALL_OW 94
// wait ( 0 0$1 ) ;
11876: LD_INT 35
11878: PPUSH
11879: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11883: LD_EXP 30
11887: PPUSH
11888: LD_INT 233
11890: PPUSH
11891: LD_INT 130
11893: PPUSH
11894: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11898: LD_EXP 37
11902: PPUSH
11903: LD_STRING D9-Gri-2
11905: PPUSH
11906: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11910: LD_EXP 36
11914: PPUSH
11915: LD_STRING D9-Kur-2
11917: PPUSH
11918: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11922: LD_EXP 37
11926: PPUSH
11927: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11931: LD_EXP 37
11935: PPUSH
11936: LD_INT 211
11938: PPUSH
11939: LD_INT 104
11941: PPUSH
11942: CALL_OW 171
// AddComHold ( Grishko ) ;
11946: LD_EXP 37
11950: PPUSH
11951: CALL_OW 200
// repeat wait ( 3 ) ;
11955: LD_INT 3
11957: PPUSH
11958: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11962: LD_EXP 37
11966: PPUSH
11967: CALL_OW 310
11971: NOT
11972: IFFALSE 11955
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11974: LD_EXP 34
11978: PPUSH
11979: LD_INT 34
11981: PUSH
11982: LD_INT 26
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 72
11993: PPUSH
11994: LD_EXP 37
11998: PPUSH
11999: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12003: LD_EXP 34
12007: PPUSH
12008: LD_INT 34
12010: PUSH
12011: LD_INT 26
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PPUSH
12018: CALL_OW 72
12022: PPUSH
12023: LD_INT 215
12025: PPUSH
12026: LD_INT 106
12028: PPUSH
12029: CALL_OW 174
// repeat wait ( 3 ) ;
12033: LD_INT 3
12035: PPUSH
12036: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12040: LD_EXP 37
12044: PPUSH
12045: CALL_OW 256
12049: PUSH
12050: LD_INT 1000
12052: LESS
12053: IFFALSE 12033
// NormalAttack ( 5 , Grishko ) ;
12055: LD_INT 5
12057: PPUSH
12058: LD_EXP 37
12062: PPUSH
12063: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12067: LD_INT 6
12069: PPUSH
12070: LD_EXP 34
12074: PPUSH
12075: LD_INT 25
12077: PUSH
12078: LD_INT 1
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 72
12089: PUSH
12090: LD_INT 4
12092: ARRAY
12093: PPUSH
12094: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12098: LD_EXP 37
12102: PPUSH
12103: LD_STRING D9-Gri-3
12105: PPUSH
12106: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12110: LD_EXP 36
12114: PPUSH
12115: LD_STRING D9-Kur-3
12117: PPUSH
12118: CALL_OW 94
// music_class := music_auto ;
12122: LD_ADDR_OWVAR 72
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// music_nat := music_auto ;
12130: LD_ADDR_OWVAR 71
12134: PUSH
12135: LD_INT 0
12137: ST_TO_ADDR
// for i in omarSquad do
12138: LD_ADDR_VAR 0 1
12142: PUSH
12143: LD_EXP 34
12147: PUSH
12148: FOR_IN
12149: IFFALSE 12291
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12151: LD_VAR 0 1
12155: PPUSH
12156: CALL_OW 247
12160: PUSH
12161: LD_INT 2
12163: EQUAL
12164: PUSH
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 256
12174: PUSH
12175: LD_INT 1000
12177: LESS
12178: AND
12179: IFFALSE 12245
// begin driver := IsDrivenBy ( i ) ;
12181: LD_ADDR_VAR 0 2
12185: PUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL_OW 311
12195: ST_TO_ADDR
// veh := i ;
12196: LD_ADDR_VAR 0 3
12200: PUSH
12201: LD_VAR 0 1
12205: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12206: LD_VAR 0 2
12210: PPUSH
12211: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12215: LD_VAR 0 2
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: CALL_OW 180
// end else
12243: GO 12289
// if GetLives ( i ) < 500 then
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 256
12254: PUSH
12255: LD_INT 500
12257: LESS
12258: IFFALSE 12289
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12260: LD_EXP 34
12264: PPUSH
12265: LD_INT 25
12267: PUSH
12268: LD_INT 4
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 72
12279: PPUSH
12280: LD_VAR 0 1
12284: PPUSH
12285: CALL_OW 188
// end ; end ;
12289: GO 12148
12291: POP
12292: POP
// repeat wait ( 0 0$1 ) ;
12293: LD_INT 35
12295: PPUSH
12296: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12300: LD_EXP 34
12304: PPUSH
12305: LD_INT 3
12307: PUSH
12308: LD_INT 24
12310: PUSH
12311: LD_INT 1000
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 21
12324: PUSH
12325: LD_INT 2
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: NOT
12341: PUSH
12342: LD_EXP 34
12346: PPUSH
12347: LD_INT 3
12349: PUSH
12350: LD_INT 24
12352: PUSH
12353: LD_INT 250
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PPUSH
12364: CALL_OW 72
12368: NOT
12369: AND
12370: IFFALSE 12293
// wait ( 0 0$2 ) ;
12372: LD_INT 70
12374: PPUSH
12375: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12379: LD_ADDR_VAR 0 5
12383: PUSH
12384: LD_EXP 34
12388: PPUSH
12389: LD_INT 58
12391: PUSH
12392: EMPTY
12393: LIST
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 2
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 72
12413: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12414: LD_ADDR_VAR 0 6
12418: PUSH
12419: LD_EXP 34
12423: PPUSH
12424: LD_INT 25
12426: PUSH
12427: LD_INT 3
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 3
12436: PUSH
12437: LD_INT 55
12439: PUSH
12440: EMPTY
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 72
12455: ST_TO_ADDR
// for i := 1 to tmp do
12456: LD_ADDR_VAR 0 1
12460: PUSH
12461: DOUBLE
12462: LD_INT 1
12464: DEC
12465: ST_TO_ADDR
12466: LD_VAR 0 5
12470: PUSH
12471: FOR_TO
12472: IFFALSE 12502
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12474: LD_VAR 0 6
12478: PUSH
12479: LD_VAR 0 1
12483: ARRAY
12484: PPUSH
12485: LD_VAR 0 5
12489: PUSH
12490: LD_VAR 0 1
12494: ARRAY
12495: PPUSH
12496: CALL_OW 120
12500: GO 12471
12502: POP
12503: POP
// wait ( 0 0$5 ) ;
12504: LD_INT 175
12506: PPUSH
12507: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12511: LD_EXP 34
12515: PPUSH
12516: LD_INT 199
12518: PPUSH
12519: LD_INT 141
12521: PPUSH
12522: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12526: LD_EXP 30
12530: PPUSH
12531: LD_INT 190
12533: PPUSH
12534: LD_INT 143
12536: PPUSH
12537: CALL_OW 111
// AddComHold ( Omar ) ;
12541: LD_EXP 30
12545: PPUSH
12546: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12550: LD_EXP 34
12554: PPUSH
12555: LD_INT 2
12557: PUSH
12558: LD_INT 25
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 25
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 72
12587: PPUSH
12588: LD_INT 161
12590: PPUSH
12591: LD_INT 130
12593: PPUSH
12594: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12598: LD_EXP 34
12602: PPUSH
12603: LD_INT 25
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 72
12617: PPUSH
12618: LD_INT 163
12620: PPUSH
12621: LD_INT 122
12623: PPUSH
12624: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12628: LD_EXP 34
12632: PPUSH
12633: LD_INT 25
12635: PUSH
12636: LD_INT 1
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 72
12647: PUSH
12648: LD_INT 4
12650: ARRAY
12651: PPUSH
12652: LD_INT 165
12654: PPUSH
12655: LD_INT 118
12657: PPUSH
12658: LD_INT 0
12660: PPUSH
12661: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12665: LD_EXP 34
12669: PPUSH
12670: LD_INT 25
12672: PUSH
12673: LD_INT 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 72
12684: PUSH
12685: LD_INT 4
12687: ARRAY
12688: PPUSH
12689: LD_INT 159
12691: PPUSH
12692: LD_INT 116
12694: PPUSH
12695: LD_INT 0
12697: PPUSH
12698: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12702: LD_EXP 34
12706: PPUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 72
12721: PPUSH
12722: LD_INT 169
12724: PPUSH
12725: LD_INT 114
12727: PPUSH
12728: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12732: LD_INT 35
12734: PPUSH
12735: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12739: LD_ADDR_VAR 0 5
12743: PUSH
12744: LD_EXP 34
12748: PPUSH
12749: LD_INT 25
12751: PUSH
12752: LD_INT 1
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 72
12763: ST_TO_ADDR
// for i in tmp do
12764: LD_ADDR_VAR 0 1
12768: PUSH
12769: LD_VAR 0 5
12773: PUSH
12774: FOR_IN
12775: IFFALSE 12872
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 256
12786: PUSH
12787: LD_INT 600
12789: LESS
12790: PUSH
12791: LD_VAR 0 1
12795: PPUSH
12796: LD_INT 161
12798: PPUSH
12799: LD_INT 130
12801: PPUSH
12802: CALL_OW 297
12806: PUSH
12807: LD_INT 6
12809: GREATER
12810: AND
12811: IFFALSE 12828
// ComMoveXY ( i , 161 , 130 ) ;
12813: LD_VAR 0 1
12817: PPUSH
12818: LD_INT 161
12820: PPUSH
12821: LD_INT 130
12823: PPUSH
12824: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12828: LD_VAR 0 1
12832: PPUSH
12833: CALL_OW 256
12837: PUSH
12838: LD_INT 1000
12840: EQUAL
12841: PUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 314
12851: NOT
12852: AND
12853: IFFALSE 12870
// ComAgressiveMove ( i , 160 , 109 ) ;
12855: LD_VAR 0 1
12859: PPUSH
12860: LD_INT 160
12862: PPUSH
12863: LD_INT 109
12865: PPUSH
12866: CALL_OW 114
// end ;
12870: GO 12774
12872: POP
12873: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12874: LD_ADDR_VAR 0 5
12878: PUSH
12879: LD_EXP 34
12883: PPUSH
12884: LD_INT 21
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PPUSH
12894: CALL_OW 72
12898: ST_TO_ADDR
// for i in tmp do
12899: LD_ADDR_VAR 0 1
12903: PUSH
12904: LD_VAR 0 5
12908: PUSH
12909: FOR_IN
12910: IFFALSE 13176
// begin tmp2 := IsDrivenBy ( i ) ;
12912: LD_ADDR_VAR 0 6
12916: PUSH
12917: LD_VAR 0 1
12921: PPUSH
12922: CALL_OW 311
12926: ST_TO_ADDR
// if not tmp2 then
12927: LD_VAR 0 6
12931: NOT
12932: IFFALSE 12936
// continue ;
12934: GO 12909
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 256
12945: PUSH
12946: LD_INT 600
12948: GREATEREQUAL
12949: PUSH
12950: LD_VAR 0 1
12954: PPUSH
12955: CALL_OW 110
12959: PUSH
12960: LD_INT 1
12962: EQUAL
12963: AND
12964: IFFALSE 12978
// SetTag ( i , 0 ) ;
12966: LD_VAR 0 1
12970: PPUSH
12971: LD_INT 0
12973: PPUSH
12974: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 256
12987: PUSH
12988: LD_INT 600
12990: GREATEREQUAL
12991: PUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: CALL_OW 110
13001: NOT
13002: AND
13003: IFFALSE 13029
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_VAR 0 7
13014: PPUSH
13015: LD_VAR 0 1
13019: PPUSH
13020: CALL_OW 74
13024: PPUSH
13025: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13029: LD_VAR 0 1
13033: PPUSH
13034: CALL_OW 256
13038: PUSH
13039: LD_INT 600
13041: LESS
13042: PUSH
13043: LD_VAR 0 1
13047: PPUSH
13048: CALL_OW 110
13052: NOT
13053: AND
13054: IFFALSE 13083
// begin SetTag ( i , 1 ) ;
13056: LD_VAR 0 1
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_INT 202
13075: PPUSH
13076: LD_INT 150
13078: PPUSH
13079: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 110
13092: PUSH
13093: LD_INT 1
13095: EQUAL
13096: PUSH
13097: LD_VAR 0 1
13101: PPUSH
13102: LD_INT 202
13104: PPUSH
13105: LD_INT 150
13107: PPUSH
13108: CALL_OW 297
13112: PUSH
13113: LD_INT 6
13115: LESS
13116: AND
13117: PUSH
13118: LD_VAR 0 6
13122: AND
13123: IFFALSE 13174
// begin ComExitVehicle ( tmp2 ) ;
13125: LD_VAR 0 6
13129: PPUSH
13130: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13134: LD_VAR 0 6
13138: PPUSH
13139: LD_VAR 0 1
13143: PPUSH
13144: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13148: LD_VAR 0 6
13152: PPUSH
13153: LD_INT 700
13155: PPUSH
13156: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13160: LD_VAR 0 6
13164: PPUSH
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 180
// end ; end ;
13174: GO 12909
13176: POP
13177: POP
// until kirovDestroyed ;
13178: LD_EXP 15
13182: IFFALSE 12732
// repeat wait ( 0 0$1 ) ;
13184: LD_INT 35
13186: PPUSH
13187: CALL_OW 67
// for i in omarSquad union Omar do
13191: LD_ADDR_VAR 0 1
13195: PUSH
13196: LD_EXP 34
13200: PUSH
13201: LD_EXP 30
13205: UNION
13206: PUSH
13207: FOR_IN
13208: IFFALSE 13252
// if IsInArea ( i , southRoadArea ) then
13210: LD_VAR 0 1
13214: PPUSH
13215: LD_INT 15
13217: PPUSH
13218: CALL_OW 308
13222: IFFALSE 13235
// RemoveUnit ( i ) else
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 64
13233: GO 13250
// ComMoveXY ( i , 208 , 162 ) ;
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_INT 208
13242: PPUSH
13243: LD_INT 162
13245: PPUSH
13246: CALL_OW 111
13250: GO 13207
13252: POP
13253: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13254: LD_INT 22
13256: PUSH
13257: LD_INT 5
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 1
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 69
13282: NOT
13283: IFFALSE 13184
// end ;
13285: PPOPN 7
13287: END
// every 0 0$1 trigger IsDead ( kirov ) do
13288: LD_INT 71
13290: PPUSH
13291: CALL_OW 301
13295: IFFALSE 13312
13297: GO 13299
13299: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13300: LD_EXP 22
13304: PPUSH
13305: LD_STRING DH-1-Kirov
13307: PPUSH
13308: CALL_OW 88
13312: END
// every 0 0$1 trigger See ( 2 , beria ) do
13313: LD_INT 2
13315: PPUSH
13316: LD_INT 106
13318: PPUSH
13319: CALL_OW 292
13323: IFFALSE 13340
13325: GO 13327
13327: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13328: LD_EXP 22
13332: PPUSH
13333: LD_STRING DH-1-Beria
13335: PPUSH
13336: CALL_OW 88
13340: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13341: LD_INT 2
13343: PPUSH
13344: LD_INT 112
13346: PPUSH
13347: CALL_OW 292
13351: IFFALSE 13368
13353: GO 13355
13355: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
13356: LD_EXP 22
13360: PPUSH
13361: LD_STRING DH-1-Kagan
13363: PPUSH
13364: CALL_OW 88
13368: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
13369: LD_INT 2
13371: PPUSH
13372: LD_EXP 46
13376: PPUSH
13377: CALL_OW 292
13381: PUSH
13382: LD_EXP 46
13386: PPUSH
13387: CALL_OW 302
13391: AND
13392: PUSH
13393: LD_EXP 22
13397: PPUSH
13398: CALL_OW 302
13402: AND
13403: PUSH
13404: LD_EXP 32
13408: PPUSH
13409: CALL_OW 302
13413: AND
13414: PUSH
13415: LD_INT 2
13417: PPUSH
13418: CALL_OW 463
13422: NOT
13423: AND
13424: IFFALSE 13846
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
13432: PPUSH
13433: PPUSH
// begin DialogueOn ;
13434: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13438: LD_INT 111
13440: PPUSH
13441: LD_INT 90
13443: PPUSH
13444: LD_INT 2
13446: PPUSH
13447: LD_INT 6
13449: NEG
13450: PPUSH
13451: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13455: LD_INT 111
13457: PPUSH
13458: LD_INT 90
13460: PPUSH
13461: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13465: LD_EXP 32
13469: PPUSH
13470: LD_STRING DA-Cap-1
13472: PPUSH
13473: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13477: LD_EXP 22
13481: PPUSH
13482: LD_STRING DH-Cap-2
13484: PPUSH
13485: CALL_OW 88
// DialogueOff ;
13489: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13493: LD_INT 35
13495: PPUSH
13496: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
13500: LD_EXP 16
13504: PUSH
13505: LD_EXP 46
13509: PPUSH
13510: CALL_OW 302
13514: AND
13515: PUSH
13516: LD_EXP 32
13520: PPUSH
13521: CALL_OW 302
13525: AND
13526: IFFALSE 13493
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13528: LD_ADDR_VAR 0 2
13532: PUSH
13533: LD_EXP 33
13537: PUSH
13538: LD_EXP 25
13542: PUSH
13543: LD_EXP 26
13547: PUSH
13548: LD_EXP 28
13552: PUSH
13553: LD_EXP 27
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: UNION
13564: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_VAR 0 2
13574: PPUSH
13575: LD_INT 50
13577: PUSH
13578: EMPTY
13579: LIST
13580: PPUSH
13581: CALL_OW 72
13585: ST_TO_ADDR
// if tmp < 2 then
13586: LD_VAR 0 2
13590: PUSH
13591: LD_INT 2
13593: LESS
13594: IFFALSE 13606
// q := 2 else
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: LD_INT 2
13603: ST_TO_ADDR
13604: GO 13619
// q := Query ( LabCap ) ;
13606: LD_ADDR_VAR 0 3
13610: PUSH
13611: LD_STRING LabCap
13613: PPUSH
13614: CALL_OW 97
13618: ST_TO_ADDR
// case q of 1 :
13619: LD_VAR 0 3
13623: PUSH
13624: LD_INT 1
13626: DOUBLE
13627: EQUAL
13628: IFTRUE 13632
13630: GO 13810
13632: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13633: LD_INT 2
13635: PPUSH
13636: LD_EXP 46
13640: PPUSH
13641: CALL_OW 471
// labCaptured := true ;
13645: LD_ADDR_EXP 20
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13653: LD_EXP 22
13657: PPUSH
13658: LD_STRING DH-Cap-a-1
13660: PPUSH
13661: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13665: LD_EXP 32
13669: PPUSH
13670: LD_STRING DA-Cap-a-2
13672: PPUSH
13673: CALL_OW 88
// SetSide ( ruLab , 8 ) ;
13677: LD_EXP 46
13681: PPUSH
13682: LD_INT 8
13684: PPUSH
13685: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
13689: LD_EXP 32
13693: PPUSH
13694: LD_INT 8
13696: PPUSH
13697: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13701: LD_ADDR_EXP 35
13705: PUSH
13706: LD_EXP 32
13710: PUSH
13711: EMPTY
13712: LIST
13713: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13714: LD_EXP 32
13718: PPUSH
13719: LD_EXP 46
13723: PPUSH
13724: CALL_OW 120
// for i := 1 to 2 do
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: DOUBLE
13734: LD_INT 1
13736: DEC
13737: ST_TO_ADDR
13738: LD_INT 2
13740: PUSH
13741: FOR_TO
13742: IFFALSE 13806
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13744: LD_ADDR_EXP 35
13748: PUSH
13749: LD_EXP 35
13753: PUSH
13754: LD_VAR 0 2
13758: PUSH
13759: LD_VAR 0 1
13763: ARRAY
13764: UNION
13765: ST_TO_ADDR
// SetSide ( tmp [ i ] , 8 ) ;
13766: LD_VAR 0 2
13770: PUSH
13771: LD_VAR 0 1
13775: ARRAY
13776: PPUSH
13777: LD_INT 8
13779: PPUSH
13780: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13784: LD_VAR 0 2
13788: PUSH
13789: LD_VAR 0 1
13793: ARRAY
13794: PPUSH
13795: LD_EXP 46
13799: PPUSH
13800: CALL_OW 120
// end ;
13804: GO 13741
13806: POP
13807: POP
// end ; 2 :
13808: GO 13846
13810: LD_INT 2
13812: DOUBLE
13813: EQUAL
13814: IFTRUE 13818
13816: GO 13845
13818: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13819: LD_EXP 22
13823: PPUSH
13824: LD_STRING DH-Cap-b-1
13826: PPUSH
13827: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13831: LD_EXP 32
13835: PPUSH
13836: LD_STRING DA-Cap-b-2
13838: PPUSH
13839: CALL_OW 88
// end ; end ;
13843: GO 13846
13845: POP
// end ;
13846: PPOPN 3
13848: END
// every 0 0$1 trigger debug do var i ;
13849: LD_EXP 1
13853: IFFALSE 13897
13855: GO 13857
13857: DISABLE
13858: LD_INT 0
13860: PPUSH
// begin for i in FilterAllUnits ( [ f_enemy , 2 ] ) do
13861: LD_ADDR_VAR 0 1
13865: PUSH
13866: LD_INT 81
13868: PUSH
13869: LD_INT 2
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 69
13880: PUSH
13881: FOR_IN
13882: IFFALSE 13895
// RemoveUnit ( i ) ;
13884: LD_VAR 0 1
13888: PPUSH
13889: CALL_OW 64
13893: GO 13881
13895: POP
13896: POP
// end ;
13897: PPOPN 1
13899: END
// every 0 0$1 trigger debug or ( kirovDestroyed and beriaDestroyed and kaganDestroyed ) do var i , tmp , tmp2 , cargo ;
13900: LD_EXP 1
13904: PUSH
13905: LD_EXP 15
13909: PUSH
13910: LD_EXP 16
13914: AND
13915: PUSH
13916: LD_EXP 17
13920: AND
13921: OR
13922: IFFALSE 15110
13924: GO 13926
13926: DISABLE
13927: LD_INT 0
13929: PPUSH
13930: PPUSH
13931: PPUSH
13932: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
13933: LD_STRING GoToWest
13935: PPUSH
13936: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
13940: LD_INT 17
13942: PPUSH
13943: LD_INT 1
13945: PPUSH
13946: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
13950: LD_INT 35
13952: PPUSH
13953: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_INT 17
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_INT 2
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: LD_INT 21
13980: PUSH
13981: LD_INT 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 3
14000: PUSH
14001: LD_INT 58
14003: PUSH
14004: EMPTY
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 70
14028: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 22
14036: PUSH
14037: LD_INT 2
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 3
14046: PUSH
14047: LD_INT 55
14049: PUSH
14050: EMPTY
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 3
14082: PUSH
14083: LD_INT 58
14085: PUSH
14086: EMPTY
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 69
14111: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
14112: LD_VAR 0 2
14116: PUSH
14117: LD_INT 0
14119: PLUS
14120: PUSH
14121: LD_VAR 0 3
14125: PUSH
14126: LD_INT 0
14128: PLUS
14129: EQUAL
14130: IFFALSE 13950
// SaveCharacters ( Heike , 04_1_Heike ) ;
14132: LD_EXP 22
14136: PPUSH
14137: LD_STRING 04_1_Heike
14139: PPUSH
14140: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
14144: LD_EXP 32
14148: PUSH
14149: LD_EXP 32
14153: PUSH
14154: LD_EXP 35
14158: IN
14159: NOT
14160: AND
14161: IFFALSE 14177
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
14163: LD_EXP 32
14167: PPUSH
14168: LD_STRING 04_1_Aviradze
14170: PPUSH
14171: CALL_OW 38
14175: GO 14195
// if Aviradze then
14177: LD_EXP 32
14181: IFFALSE 14195
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
14183: LD_EXP 32
14187: PPUSH
14188: LD_STRING 04_1_Aviradze_L
14190: PPUSH
14191: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
14195: LD_EXP 25
14199: PUSH
14200: LD_EXP 25
14204: PUSH
14205: LD_EXP 35
14209: IN
14210: NOT
14211: AND
14212: IFFALSE 14228
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
14214: LD_EXP 25
14218: PPUSH
14219: LD_STRING 04_1_Ibrahim
14221: PPUSH
14222: CALL_OW 38
14226: GO 14246
// if Ibrahim then
14228: LD_EXP 25
14232: IFFALSE 14246
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
14234: LD_EXP 25
14238: PPUSH
14239: LD_STRING 04_1_Ibrahim_L
14241: PPUSH
14242: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
14246: LD_EXP 26
14250: PUSH
14251: LD_EXP 26
14255: PUSH
14256: LD_EXP 35
14260: IN
14261: NOT
14262: AND
14263: IFFALSE 14279
// SaveCharacters ( Kamil , 04_1_Kamil ) else
14265: LD_EXP 26
14269: PPUSH
14270: LD_STRING 04_1_Kamil
14272: PPUSH
14273: CALL_OW 38
14277: GO 14297
// if Kamil then
14279: LD_EXP 26
14283: IFFALSE 14297
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
14285: LD_EXP 26
14289: PPUSH
14290: LD_STRING 04_1_Kamil_L
14292: PPUSH
14293: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
14297: LD_EXP 28
14301: PUSH
14302: LD_EXP 28
14306: PUSH
14307: LD_EXP 35
14311: IN
14312: NOT
14313: AND
14314: IFFALSE 14330
// SaveCharacters ( Sophia , 04_1_Sophia ) else
14316: LD_EXP 28
14320: PPUSH
14321: LD_STRING 04_1_Sophia
14323: PPUSH
14324: CALL_OW 38
14328: GO 14348
// if Sophia then
14330: LD_EXP 28
14334: IFFALSE 14348
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
14336: LD_EXP 28
14340: PPUSH
14341: LD_STRING 04_1_Sophia_L
14343: PPUSH
14344: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
14348: LD_EXP 27
14352: PUSH
14353: LD_EXP 27
14357: PUSH
14358: LD_EXP 35
14362: IN
14363: NOT
14364: AND
14365: IFFALSE 14381
// SaveCharacters ( Kaia , 04_1_Kaia ) else
14367: LD_EXP 27
14371: PPUSH
14372: LD_STRING 04_1_Kaia
14374: PPUSH
14375: CALL_OW 38
14379: GO 14399
// if Kaia then
14381: LD_EXP 27
14385: IFFALSE 14399
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
14387: LD_EXP 27
14391: PPUSH
14392: LD_STRING 04_1_Kaia_L
14394: PPUSH
14395: CALL_OW 38
// if Givi then
14399: LD_EXP 23
14403: IFFALSE 14417
// SaveCharacters ( Givi , 04_1_Givi ) ;
14405: LD_EXP 23
14409: PPUSH
14410: LD_STRING 04_1_Givi
14412: PPUSH
14413: CALL_OW 38
// if Mike then
14417: LD_EXP 24
14421: IFFALSE 14435
// SaveCharacters ( Mike , 04_1_Mike ) ;
14423: LD_EXP 24
14427: PPUSH
14428: LD_STRING 04_1_Mike
14430: PPUSH
14431: CALL_OW 38
// if Markov then
14435: LD_EXP 29
14439: IFFALSE 14453
// SaveCharacters ( Markov , 04_1_Markov ) ;
14441: LD_EXP 29
14445: PPUSH
14446: LD_STRING 04_1_Markov
14448: PPUSH
14449: CALL_OW 38
// if Kurt then
14453: LD_EXP 31
14457: IFFALSE 14471
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
14459: LD_EXP 31
14463: PPUSH
14464: LD_STRING 04_1_Kurt
14466: PPUSH
14467: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
14471: LD_EXP 33
14475: PUSH
14476: LD_EXP 35
14480: DIFF
14481: IFFALSE 14501
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
14483: LD_EXP 33
14487: PUSH
14488: LD_EXP 35
14492: DIFF
14493: PPUSH
14494: LD_STRING 04_1_others
14496: PPUSH
14497: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
14501: LD_EXP 35
14505: PUSH
14506: LD_EXP 33
14510: AND
14511: IFFALSE 14596
// begin tmp := [ ] ;
14513: LD_ADDR_VAR 0 2
14517: PUSH
14518: EMPTY
14519: ST_TO_ADDR
// for i in heikeSecondSquad do
14520: LD_ADDR_VAR 0 1
14524: PUSH
14525: LD_EXP 33
14529: PUSH
14530: FOR_IN
14531: IFFALSE 14576
// if i in aviradzeSquad then
14533: LD_VAR 0 1
14537: PUSH
14538: LD_EXP 35
14542: IN
14543: IFFALSE 14574
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14545: LD_ADDR_VAR 0 2
14549: PUSH
14550: LD_VAR 0 2
14554: PPUSH
14555: LD_VAR 0 2
14559: PUSH
14560: LD_INT 1
14562: PLUS
14563: PPUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 1
14573: ST_TO_ADDR
14574: GO 14530
14576: POP
14577: POP
// if tmp then
14578: LD_VAR 0 2
14582: IFFALSE 14596
// SaveCharacters ( tmp , 04_1_others_L ) ;
14584: LD_VAR 0 2
14588: PPUSH
14589: LD_STRING 04_1_others_L
14591: PPUSH
14592: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14596: LD_ADDR_VAR 0 2
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 23
14613: PUSH
14614: LD_INT 0
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: ST_TO_ADDR
// if tmp then
14630: LD_VAR 0 2
14634: IFFALSE 14648
// SaveCharacters ( tmp , 04_1_apes ) ;
14636: LD_VAR 0 2
14640: PPUSH
14641: LD_STRING 04_1_apes
14643: PPUSH
14644: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14648: LD_ADDR_VAR 0 2
14652: PUSH
14653: LD_INT 17
14655: PPUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PPUSH
14666: CALL_OW 70
14670: ST_TO_ADDR
// if tmp then
14671: LD_VAR 0 2
14675: IFFALSE 14969
// begin tmp2 := [ ] ;
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: EMPTY
14683: ST_TO_ADDR
// for i in tmp do
14684: LD_ADDR_VAR 0 1
14688: PUSH
14689: LD_VAR 0 2
14693: PUSH
14694: FOR_IN
14695: IFFALSE 14955
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14697: LD_VAR 0 1
14701: PPUSH
14702: CALL_OW 264
14706: PUSH
14707: LD_INT 32
14709: PUSH
14710: LD_INT 12
14712: PUSH
14713: LD_INT 51
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: IN
14721: IFFALSE 14858
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14723: LD_ADDR_VAR 0 4
14727: PUSH
14728: LD_VAR 0 1
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 289
14740: PUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_INT 2
14748: PPUSH
14749: CALL_OW 289
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_VAR 0 3
14767: PPUSH
14768: LD_VAR 0 3
14772: PUSH
14773: LD_INT 1
14775: PLUS
14776: PPUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 265
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 262
14796: PUSH
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 263
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 264
14816: PUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 248
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 256
14836: PUSH
14837: LD_VAR 0 4
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 1
14855: ST_TO_ADDR
// end else
14856: GO 14953
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
14858: LD_ADDR_VAR 0 3
14862: PUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: LD_VAR 0 3
14872: PUSH
14873: LD_INT 1
14875: PLUS
14876: PPUSH
14877: LD_VAR 0 1
14881: PPUSH
14882: CALL_OW 265
14886: PUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 262
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 263
14906: PUSH
14907: LD_VAR 0 1
14911: PPUSH
14912: CALL_OW 264
14916: PUSH
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 248
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 256
14936: PUSH
14937: EMPTY
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 1
14952: ST_TO_ADDR
14953: GO 14694
14955: POP
14956: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_STRING 04_1_Vehicles
14964: PPUSH
14965: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
14969: LD_EXP 20
14973: PPUSH
14974: LD_STRING 04_1_RuLabCaptured
14976: PPUSH
14977: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
14981: LD_EXP 18
14985: PPUSH
14986: LD_STRING 04_1_EscapeCounter
14988: PPUSH
14989: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
14993: LD_INT 10
14995: PPUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 70
15024: PUSH
15025: LD_INT 0
15027: GREATER
15028: PPUSH
15029: LD_STRING 04_1_BaseHill
15031: PPUSH
15032: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15036: LD_OWVAR 1
15040: PPUSH
15041: LD_STRING 04_1_Time
15043: PPUSH
15044: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15048: LD_EXP 14
15052: PPUSH
15053: LD_STRING 04_1_DeadCounter
15055: PPUSH
15056: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15060: LD_INT 22
15062: PUSH
15063: LD_INT 2
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 34
15072: PUSH
15073: LD_INT 26
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PPUSH
15084: CALL_OW 69
15088: PUSH
15089: LD_INT 0
15091: PLUS
15092: PPUSH
15093: LD_STRING 04_1_Flamethrower
15095: PPUSH
15096: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
15100: LD_INT 1
15102: PPUSH
15103: LD_STRING __x1\04_cont2
15105: PPUSH
15106: CALL_OW 340
// end ; end_of_file
15110: PPOPN 4
15112: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
15113: LD_VAR 0 1
15117: PPUSH
15118: CALL_OW 266
15122: PUSH
15123: LD_INT 0
15125: EQUAL
15126: PUSH
15127: LD_VAR 0 1
15131: PPUSH
15132: CALL_OW 255
15136: PUSH
15137: LD_INT 2
15139: EQUAL
15140: AND
15141: IFFALSE 15151
// baseConstructed := true ;
15143: LD_ADDR_EXP 3
15147: PUSH
15148: LD_INT 1
15150: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 266
15160: PUSH
15161: LD_INT 6
15163: EQUAL
15164: PUSH
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 255
15174: PUSH
15175: LD_INT 2
15177: EQUAL
15178: AND
15179: IFFALSE 15189
// labConstructed := true ;
15181: LD_ADDR_EXP 4
15185: PUSH
15186: LD_INT 1
15188: ST_TO_ADDR
// end ;
15189: PPOPN 1
15191: END
// on UnitDestroyed ( un ) do begin if un = Heike then
15192: LD_VAR 0 1
15196: PUSH
15197: LD_EXP 22
15201: EQUAL
15202: IFFALSE 15211
// YouLost ( Heike ) ;
15204: LD_STRING Heike
15206: PPUSH
15207: CALL_OW 104
// if un = Omar then
15211: LD_VAR 0 1
15215: PUSH
15216: LD_EXP 30
15220: EQUAL
15221: IFFALSE 15230
// YouLost ( Omar ) ;
15223: LD_STRING Omar
15225: PPUSH
15226: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
15230: LD_VAR 0 1
15234: PUSH
15235: LD_INT 22
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 23
15247: PUSH
15248: LD_INT 2
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 21
15257: PUSH
15258: LD_INT 1
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 69
15274: IN
15275: IFFALSE 15291
// loseCounter := loseCounter + 1 ;
15277: LD_ADDR_EXP 14
15281: PUSH
15282: LD_EXP 14
15286: PUSH
15287: LD_INT 1
15289: PLUS
15290: ST_TO_ADDR
// if un = omikron then
15291: LD_VAR 0 1
15295: PUSH
15296: LD_INT 64
15298: EQUAL
15299: IFFALSE 15309
// omicronFall := true ;
15301: LD_ADDR_EXP 13
15305: PUSH
15306: LD_INT 1
15308: ST_TO_ADDR
// if un = kirov then
15309: LD_VAR 0 1
15313: PUSH
15314: LD_INT 71
15316: EQUAL
15317: IFFALSE 15334
// begin ChangeMissionObjectives ( KirovDone ) ;
15319: LD_STRING KirovDone
15321: PPUSH
15322: CALL_OW 337
// kirovDestroyed := true ;
15326: LD_ADDR_EXP 15
15330: PUSH
15331: LD_INT 1
15333: ST_TO_ADDR
// end ; if un = beria then
15334: LD_VAR 0 1
15338: PUSH
15339: LD_INT 106
15341: EQUAL
15342: IFFALSE 15359
// begin ChangeMissionObjectives ( BeriaDone ) ;
15344: LD_STRING BeriaDone
15346: PPUSH
15347: CALL_OW 337
// beriaDestroyed := true ;
15351: LD_ADDR_EXP 16
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// end ; if un = kagan then
15359: LD_VAR 0 1
15363: PUSH
15364: LD_INT 112
15366: EQUAL
15367: IFFALSE 15384
// begin ChangeMissionObjectives ( KaganDone ) ;
15369: LD_STRING KaganDone
15371: PPUSH
15372: CALL_OW 337
// kaganDestroyed := true ;
15376: LD_ADDR_EXP 17
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// end ; if un in russianPatrol then
15384: LD_VAR 0 1
15388: PUSH
15389: LD_EXP 43
15393: IN
15394: IFFALSE 15435
// begin if GetTag ( un ) = 2 then
15396: LD_VAR 0 1
15400: PPUSH
15401: CALL_OW 110
15405: PUSH
15406: LD_INT 2
15408: EQUAL
15409: IFFALSE 15419
// spottedByPatrol := false ;
15411: LD_ADDR_EXP 7
15415: PUSH
15416: LD_INT 0
15418: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
15419: LD_ADDR_EXP 43
15423: PUSH
15424: LD_EXP 43
15428: PUSH
15429: LD_VAR 0 1
15433: DIFF
15434: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
15435: LD_VAR 0 1
15439: PUSH
15440: LD_EXP 44
15444: IN
15445: IFFALSE 15463
// russianOmicronAttackers := russianOmicronAttackers diff un ;
15447: LD_ADDR_EXP 44
15451: PUSH
15452: LD_EXP 44
15456: PUSH
15457: LD_VAR 0 1
15461: DIFF
15462: ST_TO_ADDR
// end ;
15463: PPOPN 1
15465: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
15470: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
15471: LD_VAR 0 1
15475: PUSH
15476: LD_INT 2
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_INT 3
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_INT 4
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 22
15501: PUSH
15502: LD_INT 6
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 30
15517: PUSH
15518: LD_INT 32
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PPUSH
15529: CALL_OW 69
15533: IN
15534: IFFALSE 15707
// begin sol := UnitsInside ( un ) ;
15536: LD_ADDR_VAR 0 3
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 313
15550: ST_TO_ADDR
// if not sol then
15551: LD_VAR 0 3
15555: NOT
15556: IFFALSE 15560
// exit ;
15558: GO 15707
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15560: LD_ADDR_VAR 0 4
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_VAR 0 1
15572: PPUSH
15573: CALL_OW 255
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 2
15584: PUSH
15585: LD_INT 30
15587: PUSH
15588: LD_INT 4
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PPUSH
15614: CALL_OW 69
15618: ST_TO_ADDR
// if not nearestBarracks then
15619: LD_VAR 0 4
15623: NOT
15624: IFFALSE 15628
// exit ;
15626: GO 15707
// for i in nearestBarracks do
15628: LD_ADDR_VAR 0 2
15632: PUSH
15633: LD_VAR 0 4
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15674
// if UnitsInside ( i ) = 6 then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 313
15650: PUSH
15651: LD_INT 6
15653: EQUAL
15654: IFFALSE 15672
// nearestBarracks := nearestBarracks diff i ;
15656: LD_ADDR_VAR 0 4
15660: PUSH
15661: LD_VAR 0 4
15665: PUSH
15666: LD_VAR 0 2
15670: DIFF
15671: ST_TO_ADDR
15672: GO 15638
15674: POP
15675: POP
// if not nearestBarracks then
15676: LD_VAR 0 4
15680: NOT
15681: IFFALSE 15685
// exit ;
15683: GO 15707
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 4
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: CALL_OW 120
// end ; end ;
15707: PPOPN 4
15709: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15710: LD_INT 0
15712: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15713: LD_EXP 8
15717: NOT
15718: PUSH
15719: LD_EXP 5
15723: NOT
15724: OR
15725: IFFALSE 15729
// exit ;
15727: GO 15797
// for i in camAreas do
15729: LD_ADDR_VAR 0 5
15733: PUSH
15734: LD_EXP 8
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15795
// if InArea ( x , y , i ) then
15742: LD_VAR 0 3
15746: PPUSH
15747: LD_VAR 0 4
15751: PPUSH
15752: LD_VAR 0 5
15756: PPUSH
15757: CALL_OW 309
15761: IFFALSE 15793
// begin SetAreaMapShow ( i , 0 ) ;
15763: LD_VAR 0 5
15767: PPUSH
15768: LD_INT 0
15770: PPUSH
15771: CALL_OW 424
// camAreas := camAreas diff i ;
15775: LD_ADDR_EXP 8
15779: PUSH
15780: LD_EXP 8
15784: PUSH
15785: LD_VAR 0 5
15789: DIFF
15790: ST_TO_ADDR
// break ;
15791: GO 15795
// end ;
15793: GO 15739
15795: POP
15796: POP
// end ;
15797: PPOPN 5
15799: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
15800: LD_VAR 0 1
15804: PUSH
15805: LD_INT 2
15807: EQUAL
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: LD_INT 5
15816: PUSH
15817: LD_INT 8
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: IN
15824: AND
15825: IFFALSE 15834
// YouLost ( Ally ) ;
15827: LD_STRING Ally
15829: PPUSH
15830: CALL_OW 104
// end ; end_of_file
15834: PPOPN 2
15836: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15837: LD_EXP 11
15841: NOT
15842: PUSH
15843: LD_INT 12
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: CALL_OW 287
15853: PUSH
15854: LD_INT 200
15856: PUSH
15857: LD_INT 160
15859: PUSH
15860: LD_INT 120
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: PUSH
15868: LD_OWVAR 67
15872: ARRAY
15873: LESS
15874: AND
15875: IFFALSE 15902
15877: GO 15879
15879: DISABLE
// begin enable ;
15880: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 5
15886: PPUSH
15887: CALL_OW 12
15891: PPUSH
15892: LD_INT 12
15894: PPUSH
15895: LD_INT 1
15897: PPUSH
15898: CALL_OW 55
// end ; end_of_file
15902: END
// every 0 0$1 trigger omarCountdown do
15903: LD_EXP 21
15907: IFFALSE 15959
15909: GO 15911
15911: DISABLE
// begin enable ;
15912: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
15913: LD_ADDR_OWVAR 47
15917: PUSH
15918: LD_STRING #X104-1
15920: PUSH
15921: LD_EXP 21
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
15930: LD_ADDR_EXP 21
15934: PUSH
15935: LD_EXP 21
15939: PUSH
15940: LD_INT 35
15942: MINUS
15943: ST_TO_ADDR
// if not omarCountdown then
15944: LD_EXP 21
15948: NOT
15949: IFFALSE 15959
// display_strings :=  ;
15951: LD_ADDR_OWVAR 47
15955: PUSH
15956: LD_STRING 
15958: ST_TO_ADDR
// end ;
15959: END
