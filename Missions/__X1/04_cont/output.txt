// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 1756 0 0
// Action ;
  12: CALL 2075 0 0
// end ;
  16: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 03_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 03_
  35: ST_TO_ADDR
// baseConstructed := false ;
  36: LD_ADDR_EXP 3
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// labConstructed := false ;
  44: LD_ADDR_EXP 4
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  52: LD_ADDR_EXP 5
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
// if exist_mode then
  69: LD_VAR 0 2
  73: IFFALSE 98
// unit := CreateCharacter ( prefix & ident ) else
  75: LD_ADDR_VAR 0 5
  79: PUSH
  80: LD_VAR 0 3
  84: PUSH
  85: LD_VAR 0 1
  89: STR
  90: PPUSH
  91: CALL_OW 34
  95: ST_TO_ADDR
  96: GO 113
// unit := NewCharacter ( ident ) ;
  98: LD_ADDR_VAR 0 5
 102: PUSH
 103: LD_VAR 0 1
 107: PPUSH
 108: CALL_OW 25
 112: ST_TO_ADDR
// result := unit ;
 113: LD_ADDR_VAR 0 4
 117: PUSH
 118: LD_VAR 0 5
 122: ST_TO_ADDR
// end ;
 123: LD_VAR 0 4
 127: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 128: LD_INT 0
 130: PPUSH
// uc_side := side ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_VAR 0 1
 140: ST_TO_ADDR
// uc_nation := nation ;
 141: LD_ADDR_OWVAR 21
 145: PUSH
 146: LD_VAR 0 2
 150: ST_TO_ADDR
// vc_chassis := chassis ;
 151: LD_ADDR_OWVAR 37
 155: PUSH
 156: LD_VAR 0 3
 160: ST_TO_ADDR
// vc_engine := engine ;
 161: LD_ADDR_OWVAR 39
 165: PUSH
 166: LD_VAR 0 4
 170: ST_TO_ADDR
// vc_control := control ;
 171: LD_ADDR_OWVAR 38
 175: PUSH
 176: LD_VAR 0 5
 180: ST_TO_ADDR
// vc_weapon := weapon ;
 181: LD_ADDR_OWVAR 40
 185: PUSH
 186: LD_VAR 0 6
 190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 191: LD_ADDR_OWVAR 41
 195: PUSH
 196: LD_VAR 0 7
 200: ST_TO_ADDR
// result := CreateVehicle ;
 201: LD_ADDR_VAR 0 8
 205: PUSH
 206: CALL_OW 45
 210: ST_TO_ADDR
// end ;
 211: LD_VAR 0 8
 215: RET
// export function SayX ( units , ident ) ; var i ; begin
 216: LD_INT 0
 218: PPUSH
 219: PPUSH
// result := false ;
 220: LD_ADDR_VAR 0 3
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// if not units then
 228: LD_VAR 0 1
 232: NOT
 233: IFFALSE 237
// exit ;
 235: GO 291
// for i in units do
 237: LD_ADDR_VAR 0 4
 241: PUSH
 242: LD_VAR 0 1
 246: PUSH
 247: FOR_IN
 248: IFFALSE 289
// if IsOk ( i ) then
 250: LD_VAR 0 4
 254: PPUSH
 255: CALL_OW 302
 259: IFFALSE 287
// begin Say ( i , ident ) ;
 261: LD_VAR 0 4
 265: PPUSH
 266: LD_VAR 0 2
 270: PPUSH
 271: CALL_OW 88
// result := i ;
 275: LD_ADDR_VAR 0 3
 279: PUSH
 280: LD_VAR 0 4
 284: ST_TO_ADDR
// break ;
 285: GO 289
// end ;
 287: GO 247
 289: POP
 290: POP
// end ;
 291: LD_VAR 0 3
 295: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 296: LD_INT 0
 298: PPUSH
 299: PPUSH
// InitUc ;
 300: CALL_OW 18
// InitHc ;
 304: CALL_OW 19
// uc_side := 0 ;
 308: LD_ADDR_OWVAR 20
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// uc_nation := 0 ;
 316: LD_ADDR_OWVAR 21
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// for i = 1 to amount do
 324: LD_ADDR_VAR 0 4
 328: PUSH
 329: DOUBLE
 330: LD_INT 1
 332: DEC
 333: ST_TO_ADDR
 334: LD_VAR 0 2
 338: PUSH
 339: FOR_TO
 340: IFFALSE 422
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 342: LD_ADDR_OWVAR 29
 346: PUSH
 347: LD_INT 9
 349: PPUSH
 350: LD_INT 12
 352: PPUSH
 353: CALL_OW 12
 357: PUSH
 358: LD_INT 9
 360: PPUSH
 361: LD_INT 12
 363: PPUSH
 364: CALL_OW 12
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 373: LD_ADDR_OWVAR 35
 377: PUSH
 378: LD_INT 1
 380: NEG
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: CALL_OW 12
 389: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 390: LD_INT 0
 392: PPUSH
 393: LD_INT 12
 395: PPUSH
 396: LD_INT 1
 398: PPUSH
 399: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 403: CALL_OW 44
 407: PPUSH
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 0
 415: PPUSH
 416: CALL_OW 49
// end ;
 420: GO 339
 422: POP
 423: POP
// InitHc ;
 424: CALL_OW 19
// end ;
 428: LD_VAR 0 3
 432: RET
// export function PrepareNature ( forest ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 437: LD_VAR 0 1
 441: PPUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 5
 447: PUSH
 448: LD_INT 4
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_OWVAR 67
 460: ARRAY
 461: PPUSH
 462: CALL 296 0 2
// for i := 1 to 3 do
 466: LD_ADDR_VAR 0 3
 470: PUSH
 471: DOUBLE
 472: LD_INT 1
 474: DEC
 475: ST_TO_ADDR
 476: LD_INT 3
 478: PUSH
 479: FOR_TO
 480: IFFALSE 517
// begin hc_class := 21 ;
 482: LD_ADDR_OWVAR 28
 486: PUSH
 487: LD_INT 21
 489: ST_TO_ADDR
// hc_gallery :=  ;
 490: LD_ADDR_OWVAR 33
 494: PUSH
 495: LD_STRING 
 497: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 498: CALL_OW 44
 502: PPUSH
 503: LD_VAR 0 1
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL_OW 49
// end ;
 515: GO 479
 517: POP
 518: POP
// for i := 1 to 2 do
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: DOUBLE
 525: LD_INT 1
 527: DEC
 528: ST_TO_ADDR
 529: LD_INT 2
 531: PUSH
 532: FOR_TO
 533: IFFALSE 570
// begin hc_class := 18 ;
 535: LD_ADDR_OWVAR 28
 539: PUSH
 540: LD_INT 18
 542: ST_TO_ADDR
// hc_gallery :=  ;
 543: LD_ADDR_OWVAR 33
 547: PUSH
 548: LD_STRING 
 550: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 551: CALL_OW 44
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// end ;
 568: GO 532
 570: POP
 571: POP
// for i := 1 to 2 do
 572: LD_ADDR_VAR 0 3
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 2
 584: PUSH
 585: FOR_TO
 586: IFFALSE 623
// begin hc_class := 13 ;
 588: LD_ADDR_OWVAR 28
 592: PUSH
 593: LD_INT 13
 595: ST_TO_ADDR
// hc_gallery :=  ;
 596: LD_ADDR_OWVAR 33
 600: PUSH
 601: LD_STRING 
 603: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_VAR 0 1
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
// end ;
 621: GO 585
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 2
 629: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// if not observer or not unit then
 635: LD_VAR 0 1
 639: NOT
 640: PUSH
 641: LD_VAR 0 2
 645: NOT
 646: OR
 647: IFFALSE 651
// exit ;
 649: GO 699
// if not See ( GetSide ( observer ) , unit ) then
 651: LD_VAR 0 1
 655: PPUSH
 656: CALL_OW 255
 660: PPUSH
 661: LD_VAR 0 2
 665: PPUSH
 666: CALL_OW 292
 670: NOT
 671: IFFALSE 675
// exit ;
 673: GO 699
// result := GetDistUnits ( observer , unit ) < 12 ;
 675: LD_ADDR_VAR 0 3
 679: PUSH
 680: LD_VAR 0 1
 684: PPUSH
 685: LD_VAR 0 2
 689: PPUSH
 690: CALL_OW 296
 694: PUSH
 695: LD_INT 12
 697: LESS
 698: ST_TO_ADDR
// end ;
 699: LD_VAR 0 3
 703: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 704: LD_INT 0
 706: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: LD_VAR 0 2
 720: PUSH
 721: LD_INT 2
 723: ARRAY
 724: PPUSH
 725: CALL_OW 488
 729: PUSH
 730: LD_VAR 0 2
 734: PUSH
 735: LD_INT 1
 737: ARRAY
 738: PPUSH
 739: LD_VAR 0 2
 743: PUSH
 744: LD_INT 2
 746: ARRAY
 747: PPUSH
 748: CALL_OW 428
 752: PUSH
 753: LD_INT 0
 755: EQUAL
 756: AND
 757: IFFALSE 791
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 759: LD_VAR 0 1
 763: PPUSH
 764: LD_VAR 0 2
 768: PUSH
 769: LD_INT 1
 771: ARRAY
 772: PPUSH
 773: LD_VAR 0 2
 777: PUSH
 778: LD_INT 2
 780: ARRAY
 781: PPUSH
 782: LD_VAR 0 3
 786: PPUSH
 787: CALL_OW 48
// end ;
 791: LD_VAR 0 4
 795: RET
// export function Video ( mode ) ; begin
 796: LD_INT 0
 798: PPUSH
// ingame_video = mode ;
 799: LD_ADDR_OWVAR 52
 803: PUSH
 804: LD_VAR 0 1
 808: ST_TO_ADDR
// interface_hidden = mode ;
 809: LD_ADDR_OWVAR 54
 813: PUSH
 814: LD_VAR 0 1
 818: ST_TO_ADDR
// end ;
 819: LD_VAR 0 2
 823: RET
// export function ReverseArray ( array ) ; var i ; begin
 824: LD_INT 0
 826: PPUSH
 827: PPUSH
// if not array then
 828: LD_VAR 0 1
 832: NOT
 833: IFFALSE 837
// exit ;
 835: GO 895
// result := [ ] ;
 837: LD_ADDR_VAR 0 2
 841: PUSH
 842: EMPTY
 843: ST_TO_ADDR
// for i := 1 to array do
 844: LD_ADDR_VAR 0 3
 848: PUSH
 849: DOUBLE
 850: LD_INT 1
 852: DEC
 853: ST_TO_ADDR
 854: LD_VAR 0 1
 858: PUSH
 859: FOR_TO
 860: IFFALSE 893
// result := Insert ( result , 1 , array [ i ] ) ;
 862: LD_ADDR_VAR 0 2
 866: PUSH
 867: LD_VAR 0 2
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_VAR 0 1
 879: PUSH
 880: LD_VAR 0 3
 884: ARRAY
 885: PPUSH
 886: CALL_OW 2
 890: ST_TO_ADDR
 891: GO 859
 893: POP
 894: POP
// end ;
 895: LD_VAR 0 2
 899: RET
// export function ComExit ( unit ) ; begin
 900: LD_INT 0
 902: PPUSH
// result := IsInUnit ( unit ) ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_VAR 0 1
 912: PPUSH
 913: CALL_OW 310
 917: ST_TO_ADDR
// if not result then
 918: LD_VAR 0 2
 922: NOT
 923: IFFALSE 927
// exit ;
 925: GO 962
// if GetType ( result ) = unit_vehicle then
 927: LD_VAR 0 2
 931: PPUSH
 932: CALL_OW 247
 936: PUSH
 937: LD_INT 2
 939: EQUAL
 940: IFFALSE 953
// ComExitVehicle ( unit ) else
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 121
 951: GO 962
// ComExitBuilding ( unit ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: CALL_OW 122
// end ;
 962: LD_VAR 0 2
 966: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 967: LD_INT 0
 969: PPUSH
 970: PPUSH
// if not side or not nation then
 971: LD_VAR 0 1
 975: NOT
 976: PUSH
 977: LD_VAR 0 2
 981: NOT
 982: OR
 983: IFFALSE 987
// exit ;
 985: GO 1751
// case nation of nation_american :
 987: LD_VAR 0 2
 991: PUSH
 992: LD_INT 1
 994: DOUBLE
 995: EQUAL
 996: IFTRUE 1000
 998: GO 1214
1000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1001: LD_ADDR_VAR 0 4
1005: PUSH
1006: LD_INT 35
1008: PUSH
1009: LD_INT 45
1011: PUSH
1012: LD_INT 46
1014: PUSH
1015: LD_INT 47
1017: PUSH
1018: LD_INT 82
1020: PUSH
1021: LD_INT 83
1023: PUSH
1024: LD_INT 84
1026: PUSH
1027: LD_INT 85
1029: PUSH
1030: LD_INT 86
1032: PUSH
1033: LD_INT 1
1035: PUSH
1036: LD_INT 2
1038: PUSH
1039: LD_INT 6
1041: PUSH
1042: LD_INT 15
1044: PUSH
1045: LD_INT 16
1047: PUSH
1048: LD_INT 7
1050: PUSH
1051: LD_INT 12
1053: PUSH
1054: LD_INT 13
1056: PUSH
1057: LD_INT 10
1059: PUSH
1060: LD_INT 14
1062: PUSH
1063: LD_INT 20
1065: PUSH
1066: LD_INT 21
1068: PUSH
1069: LD_INT 22
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: LD_INT 32
1077: PUSH
1078: LD_INT 27
1080: PUSH
1081: LD_INT 36
1083: PUSH
1084: LD_INT 69
1086: PUSH
1087: LD_INT 39
1089: PUSH
1090: LD_INT 34
1092: PUSH
1093: LD_INT 40
1095: PUSH
1096: LD_INT 48
1098: PUSH
1099: LD_INT 49
1101: PUSH
1102: LD_INT 50
1104: PUSH
1105: LD_INT 51
1107: PUSH
1108: LD_INT 52
1110: PUSH
1111: LD_INT 53
1113: PUSH
1114: LD_INT 54
1116: PUSH
1117: LD_INT 55
1119: PUSH
1120: LD_INT 56
1122: PUSH
1123: LD_INT 57
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: LD_INT 59
1131: PUSH
1132: LD_INT 60
1134: PUSH
1135: LD_INT 61
1137: PUSH
1138: LD_INT 62
1140: PUSH
1141: LD_INT 80
1143: PUSH
1144: LD_INT 82
1146: PUSH
1147: LD_INT 83
1149: PUSH
1150: LD_INT 84
1152: PUSH
1153: LD_INT 85
1155: PUSH
1156: LD_INT 86
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: ST_TO_ADDR
1212: GO 1675
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1444
1222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1223: LD_ADDR_VAR 0 4
1227: PUSH
1228: LD_INT 35
1230: PUSH
1231: LD_INT 45
1233: PUSH
1234: LD_INT 46
1236: PUSH
1237: LD_INT 47
1239: PUSH
1240: LD_INT 82
1242: PUSH
1243: LD_INT 83
1245: PUSH
1246: LD_INT 84
1248: PUSH
1249: LD_INT 85
1251: PUSH
1252: LD_INT 87
1254: PUSH
1255: LD_INT 70
1257: PUSH
1258: LD_INT 1
1260: PUSH
1261: LD_INT 11
1263: PUSH
1264: LD_INT 3
1266: PUSH
1267: LD_INT 4
1269: PUSH
1270: LD_INT 5
1272: PUSH
1273: LD_INT 6
1275: PUSH
1276: LD_INT 15
1278: PUSH
1279: LD_INT 18
1281: PUSH
1282: LD_INT 7
1284: PUSH
1285: LD_INT 17
1287: PUSH
1288: LD_INT 8
1290: PUSH
1291: LD_INT 20
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_INT 72
1302: PUSH
1303: LD_INT 26
1305: PUSH
1306: LD_INT 69
1308: PUSH
1309: LD_INT 39
1311: PUSH
1312: LD_INT 40
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: LD_INT 42
1320: PUSH
1321: LD_INT 43
1323: PUSH
1324: LD_INT 48
1326: PUSH
1327: LD_INT 49
1329: PUSH
1330: LD_INT 50
1332: PUSH
1333: LD_INT 51
1335: PUSH
1336: LD_INT 52
1338: PUSH
1339: LD_INT 53
1341: PUSH
1342: LD_INT 54
1344: PUSH
1345: LD_INT 55
1347: PUSH
1348: LD_INT 56
1350: PUSH
1351: LD_INT 60
1353: PUSH
1354: LD_INT 61
1356: PUSH
1357: LD_INT 62
1359: PUSH
1360: LD_INT 66
1362: PUSH
1363: LD_INT 67
1365: PUSH
1366: LD_INT 68
1368: PUSH
1369: LD_INT 81
1371: PUSH
1372: LD_INT 82
1374: PUSH
1375: LD_INT 83
1377: PUSH
1378: LD_INT 84
1380: PUSH
1381: LD_INT 85
1383: PUSH
1384: LD_INT 87
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: ST_TO_ADDR
1442: GO 1675
1444: LD_INT 3
1446: DOUBLE
1447: EQUAL
1448: IFTRUE 1452
1450: GO 1674
1452: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1453: LD_ADDR_VAR 0 4
1457: PUSH
1458: LD_INT 46
1460: PUSH
1461: LD_INT 47
1463: PUSH
1464: LD_INT 1
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 82
1472: PUSH
1473: LD_INT 83
1475: PUSH
1476: LD_INT 84
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 86
1484: PUSH
1485: LD_INT 11
1487: PUSH
1488: LD_INT 9
1490: PUSH
1491: LD_INT 20
1493: PUSH
1494: LD_INT 19
1496: PUSH
1497: LD_INT 21
1499: PUSH
1500: LD_INT 24
1502: PUSH
1503: LD_INT 22
1505: PUSH
1506: LD_INT 25
1508: PUSH
1509: LD_INT 28
1511: PUSH
1512: LD_INT 29
1514: PUSH
1515: LD_INT 30
1517: PUSH
1518: LD_INT 31
1520: PUSH
1521: LD_INT 37
1523: PUSH
1524: LD_INT 38
1526: PUSH
1527: LD_INT 32
1529: PUSH
1530: LD_INT 27
1532: PUSH
1533: LD_INT 33
1535: PUSH
1536: LD_INT 69
1538: PUSH
1539: LD_INT 39
1541: PUSH
1542: LD_INT 34
1544: PUSH
1545: LD_INT 40
1547: PUSH
1548: LD_INT 71
1550: PUSH
1551: LD_INT 23
1553: PUSH
1554: LD_INT 44
1556: PUSH
1557: LD_INT 48
1559: PUSH
1560: LD_INT 49
1562: PUSH
1563: LD_INT 50
1565: PUSH
1566: LD_INT 51
1568: PUSH
1569: LD_INT 52
1571: PUSH
1572: LD_INT 53
1574: PUSH
1575: LD_INT 54
1577: PUSH
1578: LD_INT 55
1580: PUSH
1581: LD_INT 56
1583: PUSH
1584: LD_INT 57
1586: PUSH
1587: LD_INT 58
1589: PUSH
1590: LD_INT 59
1592: PUSH
1593: LD_INT 63
1595: PUSH
1596: LD_INT 64
1598: PUSH
1599: LD_INT 65
1601: PUSH
1602: LD_INT 82
1604: PUSH
1605: LD_INT 83
1607: PUSH
1608: LD_INT 84
1610: PUSH
1611: LD_INT 85
1613: PUSH
1614: LD_INT 86
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
1672: GO 1675
1674: POP
// if state > - 1 and state < 3 then
1675: LD_VAR 0 3
1679: PUSH
1680: LD_INT 1
1682: NEG
1683: GREATER
1684: PUSH
1685: LD_VAR 0 3
1689: PUSH
1690: LD_INT 3
1692: LESS
1693: AND
1694: IFFALSE 1751
// for i in result do
1696: LD_ADDR_VAR 0 5
1700: PUSH
1701: LD_VAR 0 4
1705: PUSH
1706: FOR_IN
1707: IFFALSE 1749
// if GetTech ( i , side ) <> state then
1709: LD_VAR 0 5
1713: PPUSH
1714: LD_VAR 0 1
1718: PPUSH
1719: CALL_OW 321
1723: PUSH
1724: LD_VAR 0 3
1728: NONEQUAL
1729: IFFALSE 1747
// result := result diff i ;
1731: LD_ADDR_VAR 0 4
1735: PUSH
1736: LD_VAR 0 4
1740: PUSH
1741: LD_VAR 0 5
1745: DIFF
1746: ST_TO_ADDR
1747: GO 1706
1749: POP
1750: POP
// end ; end_of_file
1751: LD_VAR 0 4
1755: RET
// export Heike , Givi , Mike , Kamil , Kaia , Sophia , Markov , Omar , Ibrahim , Shariff , Kurt , Aviradze , heikeSecondSquad ; export function PrepareArabian ; var i ; begin
1756: LD_INT 0
1758: PPUSH
1759: PPUSH
// uc_side := 2 ;
1760: LD_ADDR_OWVAR 20
1764: PUSH
1765: LD_INT 2
1767: ST_TO_ADDR
// uc_nation := 2 ;
1768: LD_ADDR_OWVAR 21
1772: PUSH
1773: LD_INT 2
1775: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1776: LD_ADDR_EXP 6
1780: PUSH
1781: LD_STRING Heike
1783: PPUSH
1784: LD_EXP 1
1788: NOT
1789: PPUSH
1790: LD_EXP 2
1794: PPUSH
1795: CALL 65 0 3
1799: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1800: LD_ADDR_EXP 14
1804: PUSH
1805: LD_STRING Ibrahim
1807: PPUSH
1808: LD_EXP 1
1812: NOT
1813: PPUSH
1814: LD_EXP 2
1818: PPUSH
1819: CALL 65 0 3
1823: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1824: LD_ADDR_EXP 7
1828: PUSH
1829: LD_STRING Givi
1831: PPUSH
1832: LD_EXP 1
1836: NOT
1837: PPUSH
1838: LD_EXP 2
1842: PPUSH
1843: CALL 65 0 3
1847: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1848: LD_ADDR_EXP 8
1852: PUSH
1853: LD_STRING Mike
1855: PPUSH
1856: LD_EXP 1
1860: NOT
1861: PPUSH
1862: LD_EXP 2
1866: PPUSH
1867: CALL 65 0 3
1871: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1872: LD_ADDR_EXP 9
1876: PUSH
1877: LD_STRING Kamil
1879: PPUSH
1880: LD_EXP 1
1884: NOT
1885: PPUSH
1886: LD_EXP 2
1890: PPUSH
1891: CALL 65 0 3
1895: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1896: LD_ADDR_EXP 10
1900: PUSH
1901: LD_STRING Kaia
1903: PPUSH
1904: LD_EXP 1
1908: NOT
1909: PPUSH
1910: LD_EXP 2
1914: PPUSH
1915: CALL 65 0 3
1919: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1920: LD_ADDR_EXP 11
1924: PUSH
1925: LD_STRING Sophia
1927: PPUSH
1928: LD_EXP 1
1932: NOT
1933: PPUSH
1934: LD_EXP 2
1938: PPUSH
1939: CALL 65 0 3
1943: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1944: LD_ADDR_EXP 12
1948: PUSH
1949: LD_STRING Markov
1951: PPUSH
1952: LD_EXP 1
1956: NOT
1957: PPUSH
1958: LD_EXP 2
1962: PPUSH
1963: CALL 65 0 3
1967: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1968: LD_ADDR_EXP 17
1972: PUSH
1973: LD_STRING Aviradze
1975: PPUSH
1976: LD_EXP 1
1980: NOT
1981: PPUSH
1982: LD_EXP 2
1986: PPUSH
1987: CALL 65 0 3
1991: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1992: LD_ADDR_EXP 18
1996: PUSH
1997: LD_STRING 03_others
1999: PPUSH
2000: CALL_OW 31
2004: ST_TO_ADDR
// uc_side := 5 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 5
2012: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2013: LD_ADDR_EXP 13
2017: PUSH
2018: LD_STRING Omar
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: LD_STRING 
2026: PPUSH
2027: CALL 65 0 3
2031: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2032: LD_ADDR_EXP 16
2036: PUSH
2037: LD_STRING Kurt
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: LD_STRING 
2045: PPUSH
2046: CALL 65 0 3
2050: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2051: LD_ADDR_EXP 15
2055: PUSH
2056: LD_STRING Abdul
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: LD_STRING 
2064: PPUSH
2065: CALL 65 0 3
2069: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
2070: LD_VAR 0 1
2074: RET
// export function Action ; var i , un , veh , tmp ; begin
2075: LD_INT 0
2077: PPUSH
2078: PPUSH
2079: PPUSH
2080: PPUSH
2081: PPUSH
// InGameOn ;
2082: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
2086: LD_INT 179
2088: PPUSH
2089: LD_INT 5
2091: PPUSH
2092: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
2096: LD_ADDR_VAR 0 4
2100: PUSH
2101: LD_INT 2
2103: PPUSH
2104: LD_INT 2
2106: PPUSH
2107: LD_INT 12
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 24
2118: PPUSH
2119: LD_INT 33
2121: PPUSH
2122: CALL 128 0 7
2126: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_INT 2
2134: PPUSH
2135: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_INT 178
2146: PPUSH
2147: LD_INT 2
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
2157: LD_EXP 6
2161: PPUSH
2162: LD_VAR 0 4
2166: PPUSH
2167: CALL_OW 52
// if Kamil then
2171: LD_EXP 9
2175: IFFALSE 2210
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
2177: LD_EXP 9
2181: PPUSH
2182: LD_INT 207
2184: PPUSH
2185: LD_INT 37
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
2195: LD_EXP 9
2199: PPUSH
2200: LD_INT 211
2202: PPUSH
2203: LD_INT 38
2205: PPUSH
2206: CALL_OW 118
// end ; if Sophia then
2210: LD_EXP 11
2214: IFFALSE 2249
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
2216: LD_EXP 11
2220: PPUSH
2221: LD_INT 209
2223: PPUSH
2224: LD_INT 40
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
2234: LD_EXP 11
2238: PPUSH
2239: LD_INT 211
2241: PPUSH
2242: LD_INT 38
2244: PPUSH
2245: CALL_OW 118
// end ; if Givi then
2249: LD_EXP 7
2253: IFFALSE 2288
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
2255: LD_EXP 7
2259: PPUSH
2260: LD_INT 201
2262: PPUSH
2263: LD_INT 34
2265: PPUSH
2266: LD_INT 0
2268: PPUSH
2269: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
2273: LD_EXP 7
2277: PPUSH
2278: LD_INT 206
2280: PPUSH
2281: LD_INT 36
2283: PPUSH
2284: CALL_OW 118
// end ; if Markov then
2288: LD_EXP 12
2292: IFFALSE 2379
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
2294: LD_ADDR_VAR 0 4
2298: PUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 2
2304: PPUSH
2305: LD_INT 13
2307: PPUSH
2308: LD_INT 1
2310: PPUSH
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 25
2316: PPUSH
2317: LD_INT 80
2319: PUSH
2320: LD_INT 20
2322: PUSH
2323: LD_OWVAR 67
2327: MUL
2328: MINUS
2329: PPUSH
2330: CALL 128 0 7
2334: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2335: LD_VAR 0 4
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
2347: LD_VAR 0 4
2351: PPUSH
2352: LD_INT 197
2354: PPUSH
2355: LD_INT 35
2357: PPUSH
2358: LD_INT 0
2360: PPUSH
2361: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
2365: LD_EXP 12
2369: PPUSH
2370: LD_VAR 0 4
2374: PPUSH
2375: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_EXP 10
2388: PUSH
2389: LD_EXP 18
2393: UNION
2394: ST_TO_ADDR
// for i in tmp do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: LD_VAR 0 5
2404: PUSH
2405: FOR_IN
2406: IFFALSE 2440
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
2408: LD_VAR 0 2
2412: PPUSH
2413: LD_INT 203
2415: PPUSH
2416: LD_INT 41
2418: PPUSH
2419: LD_INT 6
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL_OW 50
// ComHold ( i ) ;
2429: LD_VAR 0 2
2433: PPUSH
2434: CALL_OW 140
// end ;
2438: GO 2405
2440: POP
2441: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
2442: LD_INT 22
2444: PUSH
2445: LD_INT 2
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 25
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PPUSH
2466: CALL_OW 69
2470: NOT
2471: IFFALSE 2485
// SetClass ( Heike , 2 ) ;
2473: LD_EXP 6
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
2485: LD_EXP 6
2489: PPUSH
2490: LD_INT 183
2492: PPUSH
2493: LD_INT 12
2495: PPUSH
2496: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
2500: LD_EXP 6
2504: PPUSH
2505: LD_INT 188
2507: PPUSH
2508: LD_INT 20
2510: PPUSH
2511: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
2515: LD_EXP 6
2519: PPUSH
2520: LD_INT 191
2522: PPUSH
2523: LD_INT 25
2525: PPUSH
2526: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
2530: LD_EXP 6
2534: PPUSH
2535: LD_INT 203
2537: PPUSH
2538: LD_INT 29
2540: PPUSH
2541: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
2545: LD_EXP 6
2549: PPUSH
2550: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// until not IsInUnit ( Heike ) ;
2561: LD_EXP 6
2565: PPUSH
2566: CALL_OW 310
2570: NOT
2571: IFFALSE 2554
// CenterOnUnits ( Heike ) ;
2573: LD_EXP 6
2577: PPUSH
2578: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
2582: LD_ADDR_VAR 0 5
2586: PUSH
2587: LD_INT 22
2589: PUSH
2590: LD_INT 2
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 21
2599: PUSH
2600: LD_INT 1
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PPUSH
2611: CALL_OW 69
2615: PUSH
2616: LD_EXP 6
2620: PUSH
2621: LD_EXP 12
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: DIFF
2630: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
2631: LD_VAR 0 5
2635: PPUSH
2636: LD_EXP 6
2640: PPUSH
2641: CALL_OW 119
// if Givi then
2645: LD_EXP 7
2649: IFFALSE 2667
// ComTurnUnit ( Heike , Givi ) else
2651: LD_EXP 6
2655: PPUSH
2656: LD_EXP 7
2660: PPUSH
2661: CALL_OW 119
2665: GO 2685
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
2667: LD_EXP 6
2671: PPUSH
2672: LD_VAR 0 5
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PPUSH
2681: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
2685: LD_EXP 6
2689: PPUSH
2690: LD_STRING DH-Start-1
2692: PPUSH
2693: CALL_OW 88
// if Givi then
2697: LD_EXP 7
2701: IFFALSE 2748
// begin Say ( Givi , DG-Start-2 ) ;
2703: LD_EXP 7
2707: PPUSH
2708: LD_STRING DG-Start-2
2710: PPUSH
2711: CALL_OW 88
// if not Mike then
2715: LD_EXP 8
2719: NOT
2720: IFFALSE 2746
// begin Say ( Givi , DG-Start-b-3 ) ;
2722: LD_EXP 7
2726: PPUSH
2727: LD_STRING DG-Start-b-3
2729: PPUSH
2730: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
2734: LD_EXP 6
2738: PPUSH
2739: LD_STRING DH-Start-b-4
2741: PPUSH
2742: CALL_OW 88
// end ; end else
2746: GO 2813
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
2748: LD_EXP 18
2752: PPUSH
2753: LD_INT 26
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 72
2767: PUSH
2768: LD_INT 1
2770: ARRAY
2771: PPUSH
2772: LD_STRING DArm-Start-a-2
2774: PPUSH
2775: CALL_OW 88
2779: NOT
2780: IFFALSE 2813
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
2782: LD_EXP 18
2786: PPUSH
2787: LD_INT 26
2789: PUSH
2790: LD_INT 2
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PPUSH
2797: CALL_OW 72
2801: PUSH
2802: LD_INT 1
2804: ARRAY
2805: PPUSH
2806: LD_STRING DArf-Start-a-2
2808: PPUSH
2809: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
2813: LD_EXP 6
2817: PPUSH
2818: LD_INT 211
2820: PPUSH
2821: LD_INT 38
2823: PPUSH
2824: CALL_OW 118
// wait ( 0 0$1 ) ;
2828: LD_INT 35
2830: PPUSH
2831: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
2835: LD_EXP 6
2839: PPUSH
2840: LD_STRING DH-Start-3
2842: PPUSH
2843: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
2847: LD_EXP 6
2851: PPUSH
2852: LD_STRING DH-Start-4
2854: PPUSH
2855: CALL_OW 88
// InGameOff ;
2859: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
2863: LD_STRING Prepare
2865: PPUSH
2866: CALL_OW 337
// wait ( 0 0$10 ) ;
2870: LD_INT 350
2872: PPUSH
2873: CALL_OW 67
// if not Aviradze then
2877: LD_EXP 17
2881: NOT
2882: IFFALSE 2886
// exit ;
2884: GO 3078
// SetDir ( Aviradze , 4 ) ;
2886: LD_EXP 17
2890: PPUSH
2891: LD_INT 4
2893: PPUSH
2894: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
2898: LD_EXP 17
2902: PPUSH
2903: LD_INT 225
2905: PPUSH
2906: LD_INT 33
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 48
// for i := 1 to 2 do
2916: LD_ADDR_VAR 0 2
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 2
2928: PUSH
2929: FOR_TO
2930: IFFALSE 3061
// begin uc_side := 2 ;
2932: LD_ADDR_OWVAR 20
2936: PUSH
2937: LD_INT 2
2939: ST_TO_ADDR
// uc_nation := 0 ;
2940: LD_ADDR_OWVAR 21
2944: PUSH
2945: LD_INT 0
2947: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2948: LD_INT 0
2950: PPUSH
2951: LD_INT 12
2953: PPUSH
2954: LD_INT 1
2956: PPUSH
2957: CALL_OW 380
// hc_gallery :=  ;
2961: LD_ADDR_OWVAR 33
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
2969: LD_ADDR_OWVAR 26
2973: PUSH
2974: LD_STRING Artudito
2976: PUSH
2977: LD_STRING Textur
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: LD_VAR 0 2
2988: ARRAY
2989: ST_TO_ADDR
// un := CreateHuman ;
2990: LD_ADDR_VAR 0 3
2994: PUSH
2995: CALL_OW 44
2999: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_INT 224
3007: PUSH
3008: LD_INT 226
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_VAR 0 2
3019: ARRAY
3020: PPUSH
3021: LD_INT 31
3023: PUSH
3024: LD_INT 35
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_VAR 0 2
3035: ARRAY
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
3044: LD_VAR 0 3
3048: PPUSH
3049: LD_INT 215
3051: PPUSH
3052: LD_INT 36
3054: PPUSH
3055: CALL_OW 111
// end ;
3059: GO 2929
3061: POP
3062: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
3063: LD_EXP 17
3067: PPUSH
3068: LD_INT 215
3070: PPUSH
3071: LD_INT 36
3073: PPUSH
3074: CALL_OW 111
// end ;
3078: LD_VAR 0 1
3082: RET
// every 0 0$2 trigger baseConstructed do
3083: LD_EXP 3
3087: IFFALSE 3276
3089: GO 3091
3091: DISABLE
// begin DialogueOn ;
3092: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
3096: LD_EXP 6
3100: PPUSH
3101: LD_STRING DH-base-1
3103: PPUSH
3104: CALL_OW 88
// if Markov then
3108: LD_EXP 12
3112: IFFALSE 3164
// begin Say ( Markov , DMar-base-2 ) ;
3114: LD_EXP 12
3118: PPUSH
3119: LD_STRING DMar-base-2
3121: PPUSH
3122: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
3126: LD_EXP 12
3130: PPUSH
3131: LD_STRING DMar-base-3
3133: PPUSH
3134: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
3138: LD_EXP 6
3142: PPUSH
3143: LD_STRING DH-base-4
3145: PPUSH
3146: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
3150: LD_EXP 12
3154: PPUSH
3155: LD_STRING DMar-base-5
3157: PPUSH
3158: CALL_OW 88
// end else
3162: GO 3241
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
3164: LD_EXP 18
3168: PPUSH
3169: LD_INT 26
3171: PUSH
3172: LD_INT 1
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PPUSH
3179: CALL_OW 72
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: LD_STRING DArm-base-a-2
3190: PPUSH
3191: CALL_OW 88
3195: NOT
3196: IFFALSE 3229
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
3198: LD_EXP 18
3202: PPUSH
3203: LD_INT 26
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PPUSH
3213: CALL_OW 72
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_STRING DArf-base-a-2
3224: PPUSH
3225: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
3229: LD_EXP 6
3233: PPUSH
3234: LD_STRING DH-base-a-3
3236: PPUSH
3237: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
3241: LD_EXP 17
3245: PPUSH
3246: LD_STRING DA-base-6
3248: PPUSH
3249: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
3253: LD_EXP 17
3257: PPUSH
3258: LD_STRING DA-base-7
3260: PPUSH
3261: CALL_OW 88
// DialogueOff ;
3265: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
3269: LD_STRING Flamethrower
3271: PPUSH
3272: CALL_OW 337
// end ;
3276: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
3277: LD_EXP 4
3281: PUSH
3282: LD_EXP 17
3286: PPUSH
3287: CALL_OW 302
3291: AND
3292: IFFALSE 3341
3294: GO 3296
3296: DISABLE
// begin DialogueOn ;
3297: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
3301: LD_EXP 17
3305: PPUSH
3306: LD_STRING DA-lab-1
3308: PPUSH
3309: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
3313: LD_EXP 17
3317: PPUSH
3318: LD_STRING DA-lab-2
3320: PPUSH
3321: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
3325: LD_EXP 6
3329: PPUSH
3330: LD_STRING DH-lab-3
3332: PPUSH
3333: CALL_OW 88
// DialogueOff ;
3337: CALL_OW 7
// end ;
3341: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do
3342: LD_INT 17
3344: PPUSH
3345: LD_INT 2
3347: PPUSH
3348: CALL_OW 321
3352: PUSH
3353: LD_INT 2
3355: EQUAL
3356: IFFALSE 3448
3358: GO 3360
3360: DISABLE
// begin DialogueOn ;
3361: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
3365: LD_EXP 17
3369: PPUSH
3370: LD_STRING DA-Cam-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
3377: LD_EXP 17
3381: PPUSH
3382: LD_STRING DA-Cam-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
3389: LD_EXP 17
3393: PPUSH
3394: LD_STRING DA-Cam-3
3396: PPUSH
3397: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
3401: LD_EXP 6
3405: PPUSH
3406: LD_STRING DH-Cam-4
3408: PPUSH
3409: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
3413: LD_EXP 10
3417: PPUSH
3418: LD_STRING DK-Cam-5
3420: PPUSH
3421: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
3425: LD_EXP 10
3429: PPUSH
3430: LD_STRING DK-Cam-6
3432: PPUSH
3433: CALL_OW 88
// DialogueOff ;
3437: CALL_OW 7
// Query ( Camera ) ;
3441: LD_STRING Camera
3443: PPUSH
3444: CALL_OW 97
// end ; end_of_file
3448: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
3449: LD_VAR 0 1
3453: PPUSH
3454: CALL_OW 266
3458: PUSH
3459: LD_INT 0
3461: EQUAL
3462: PUSH
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 255
3472: PUSH
3473: LD_INT 2
3475: EQUAL
3476: AND
3477: IFFALSE 3487
// baseConstructed := true ;
3479: LD_ADDR_EXP 3
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
3487: LD_VAR 0 1
3491: PPUSH
3492: CALL_OW 266
3496: PUSH
3497: LD_INT 6
3499: EQUAL
3500: PUSH
3501: LD_VAR 0 1
3505: PPUSH
3506: CALL_OW 255
3510: PUSH
3511: LD_INT 2
3513: EQUAL
3514: AND
3515: IFFALSE 3525
// labConstructed := true ;
3517: LD_ADDR_EXP 4
3521: PUSH
3522: LD_INT 1
3524: ST_TO_ADDR
// end ;
3525: PPOPN 1
3527: END
// on HiddenCameraPlaced ( side , un , x , y ) do begin display_strings := [ side , un , x , y ] ;
3528: LD_ADDR_OWVAR 47
3532: PUSH
3533: LD_VAR 0 1
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_VAR 0 4
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: ST_TO_ADDR
// end ;
3559: PPOPN 4
3561: END
