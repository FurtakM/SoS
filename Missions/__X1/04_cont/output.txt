// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 35074 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 35074 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 35074 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 35074 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 35074 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 35074 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 35074 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 35074 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 35074 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 35074 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 35074 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 35074 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 35074 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 35074 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 35074 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 35074 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 72199 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10298
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 72199 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9965: LD_INT 20
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 424
// allowToPatrol := true ;
9975: LD_ADDR_EXP 12
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9983: LD_INT 3150
9985: PPUSH
9986: CALL_OW 67
// InitHc ;
9990: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
9994: LD_ADDR_VAR 0 1
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_INT 3
10006: PUSH
10007: LD_INT 3
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_OWVAR 67
10026: ARRAY
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10296
// begin uc_side := 2 ;
10031: LD_ADDR_OWVAR 20
10035: PUSH
10036: LD_INT 2
10038: ST_TO_ADDR
// uc_nation := 2 ;
10039: LD_ADDR_OWVAR 21
10043: PUSH
10044: LD_INT 2
10046: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10047: LD_INT 0
10049: PPUSH
10050: LD_INT 1
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 3
10071: MOD
10072: PUSH
10073: LD_INT 1
10075: PLUS
10076: ARRAY
10077: PPUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: LD_OWVAR 67
10100: ARRAY
10101: PPUSH
10102: CALL_OW 380
// un := CreateHuman ;
10106: LD_ADDR_VAR 0 2
10110: PUSH
10111: CALL_OW 44
10115: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10116: LD_ADDR_EXP 37
10120: PUSH
10121: LD_EXP 37
10125: PUSH
10126: LD_VAR 0 2
10130: UNION
10131: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10132: LD_INT 2
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: LD_INT 13
10140: PPUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_VAR 0 1
10155: PUSH
10156: LD_INT 2
10158: MOD
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: LD_INT 27
10170: PUSH
10171: LD_INT 25
10173: PUSH
10174: LD_INT 27
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 23
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 0
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 12
10205: PLUS
10206: ARRAY
10207: PPUSH
10208: LD_INT 77
10210: PPUSH
10211: CALL 370 0 7
// veh := CreateVehicle ;
10215: LD_ADDR_VAR 0 3
10219: PUSH
10220: CALL_OW 45
10224: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10225: LD_VAR 0 3
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 178
10244: PPUSH
10245: LD_INT 2
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: LD_INT 0
10253: PPUSH
10254: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10272: LD_VAR 0 2
10276: PPUSH
10277: LD_INT 183
10279: PPUSH
10280: LD_INT 11
10282: PPUSH
10283: CALL_OW 111
// wait ( 0 0$2 ) ;
10287: LD_INT 70
10289: PPUSH
10290: CALL_OW 67
// end ;
10294: GO 10028
10296: POP
10297: POP
// end ;
10298: PPOPN 3
10300: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10301: LD_EXP 4
10305: PUSH
10306: LD_EXP 35
10310: PPUSH
10311: CALL_OW 302
10315: AND
10316: IFFALSE 10365
10318: GO 10320
10320: DISABLE
// begin DialogueOn ;
10321: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10325: LD_EXP 35
10329: PPUSH
10330: LD_STRING DA-lab-1
10332: PPUSH
10333: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10337: LD_EXP 35
10341: PPUSH
10342: LD_STRING DA-lab-2
10344: PPUSH
10345: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10349: LD_EXP 25
10353: PPUSH
10354: LD_STRING DH-lab-3
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// end ;
10365: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10366: LD_INT 17
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 321
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: IFFALSE 10512
10382: GO 10384
10384: DISABLE
10385: LD_INT 0
10387: PPUSH
// begin DialogueOn ;
10388: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10392: LD_EXP 35
10396: PPUSH
10397: LD_STRING DA-Cam-1
10399: PPUSH
10400: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10404: LD_EXP 35
10408: PPUSH
10409: LD_STRING DA-Cam-2
10411: PPUSH
10412: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10416: LD_EXP 35
10420: PPUSH
10421: LD_STRING DA-Cam-3
10423: PPUSH
10424: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10428: LD_EXP 25
10432: PPUSH
10433: LD_STRING DH-Cam-4
10435: PPUSH
10436: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10440: LD_EXP 30
10444: PPUSH
10445: LD_STRING DK-Cam-5
10447: PPUSH
10448: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10452: LD_EXP 30
10456: PPUSH
10457: LD_STRING DK-Cam-6
10459: PPUSH
10460: CALL_OW 88
// DialogueOff ;
10464: CALL_OW 7
// Query ( Camera ) ;
10468: LD_STRING Camera
10470: PPUSH
10471: CALL_OW 97
// hiddenCameraAllowed := true ;
10475: LD_ADDR_EXP 5
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// for i in camAreas do
10483: LD_ADDR_VAR 0 1
10487: PUSH
10488: LD_EXP 8
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10510
// SetAreaMapShow ( i , 1 ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 424
10508: GO 10493
10510: POP
10511: POP
// end ;
10512: PPOPN 1
10514: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10515: LD_EXP 8
10519: NOT
10520: PUSH
10521: LD_EXP 5
10525: AND
10526: IFFALSE 10624
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
// begin stop_talking := true ;
10534: LD_ADDR_OWVAR 56
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10542: LD_ADDR_VAR 0 1
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 21
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 23
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PUSH
10587: FOR_IN
10588: IFFALSE 10607
// AddExperience ( i , 2 , 450 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: LD_INT 450
10600: PPUSH
10601: CALL_OW 492
10605: GO 10587
10607: POP
10608: POP
// stop_talking := false ;
10609: LD_ADDR_OWVAR 56
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10617: LD_STRING ACH_CAMERA
10619: PPUSH
10620: CALL_OW 543
// end ;
10624: PPOPN 1
10626: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10627: LD_EXP 9
10631: PUSH
10632: LD_EXP 11
10636: NOT
10637: AND
10638: IFFALSE 10697
10640: GO 10642
10642: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10643: LD_EXP 9
10647: PPUSH
10648: CALL_OW 250
10652: PPUSH
10653: LD_EXP 9
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 2
10665: PPUSH
10666: LD_INT 6
10668: NEG
10669: PPUSH
10670: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10674: LD_EXP 9
10678: PPUSH
10679: CALL_OW 87
// wait ( 0 0$1 ) ;
10683: LD_INT 35
10685: PPUSH
10686: CALL_OW 67
// YouLost ( Spotted ) ;
10690: LD_STRING Spotted
10692: PPUSH
10693: CALL_OW 104
// end ;
10697: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10698: LD_INT 3
10700: PUSH
10701: LD_INT 6
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: LD_INT 2
10710: PPUSH
10711: LD_EXP 47
10715: PPUSH
10716: CALL 1034 0 3
10720: IFFALSE 10753
10722: GO 10724
10724: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10725: LD_ADDR_EXP 9
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 6
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: LD_INT 2
10742: PPUSH
10743: LD_EXP 47
10747: PPUSH
10748: CALL 1034 0 3
10752: ST_TO_ADDR
10753: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10754: LD_INT 22
10756: PUSH
10757: LD_INT 6
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 1000
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: IFFALSE 10861
10802: GO 10804
10804: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10805: LD_ADDR_EXP 9
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: LD_INT 24
10835: PUSH
10836: LD_INT 1000
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: PUSH
10857: LD_INT 1
10859: ARRAY
10860: ST_TO_ADDR
10861: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10862: LD_EXP 9
10866: IFFALSE 11098
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10877: LD_ADDR_VAR 0 4
10881: PUSH
10882: LD_EXP 42
10886: PUSH
10887: LD_EXP 44
10891: PUSH
10892: LD_EXP 45
10896: UNION
10897: PPUSH
10898: LD_INT 3
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 72
10919: UNION
10920: ST_TO_ADDR
// for i in noncombat do
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_VAR 0 4
10930: PUSH
10931: FOR_IN
10932: IFFALSE 11028
// begin if IsInUnit ( i ) then
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 310
10943: IFFALSE 10954
// ComExitBuilding ( i ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10954: LD_VAR 0 1
10958: PPUSH
10959: LD_INT 114
10961: PPUSH
10962: LD_INT 97
10964: PPUSH
10965: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10969: LD_VAR 0 1
10973: PPUSH
10974: LD_INT 99
10976: PPUSH
10977: LD_INT 128
10979: PPUSH
10980: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 91
10991: PPUSH
10992: LD_INT 145
10994: PPUSH
10995: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10999: LD_VAR 0 1
11003: PPUSH
11004: LD_INT 82
11006: PPUSH
11007: LD_INT 153
11009: PPUSH
11010: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11014: LD_VAR 0 1
11018: PPUSH
11019: LD_INT 16
11021: PPUSH
11022: CALL_OW 173
// end ;
11026: GO 10931
11028: POP
11029: POP
// if not allowHeikeAttack then
11030: LD_EXP 11
11034: NOT
11035: IFFALSE 11039
// exit ;
11037: GO 11098
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11039: LD_EXP 40
11043: PPUSH
11044: LD_STRING D9a-Kur-1
11046: PPUSH
11047: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11051: LD_EXP 43
11055: PPUSH
11056: LD_STRING D9a-Bur-1
11058: PPUSH
11059: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D9a-Kur-2
11070: PPUSH
11071: CALL_OW 94
// omicronFall := true ;
11075: LD_ADDR_EXP 13
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// retreatFromOmicron := true ;
11090: LD_ADDR_EXP 20
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: PPOPN 4
11100: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11101: LD_INT 16
11103: PPUSH
11104: LD_INT 3
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 23
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: IFFALSE 11222
11141: GO 11143
11143: DISABLE
11144: LD_INT 0
11146: PPUSH
// begin enable ;
11147: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_INT 16
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 23
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 70
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11220
// begin escapeCounter := escapeCounter + 1 ;
11195: LD_ADDR_EXP 19
11199: PUSH
11200: LD_EXP 19
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: ST_TO_ADDR
// RemoveUnit ( i ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 64
// end ;
11218: GO 11192
11220: POP
11221: POP
// end ;
11222: PPOPN 1
11224: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11225: LD_OWVAR 1
11229: PUSH
11230: LD_INT 13650
11232: PUSH
11233: LD_INT 0
11235: PPUSH
11236: LD_INT 3150
11238: PPUSH
11239: CALL_OW 12
11243: PLUS
11244: GREATEREQUAL
11245: IFFALSE 11254
11247: GO 11249
11249: DISABLE
// SmallAmericanReinforcements ;
11250: CALL 6615 0 0
11254: END
// every 0 0$1 trigger tick >= 9 9$15 do
11255: LD_OWVAR 1
11259: PUSH
11260: LD_INT 19425
11262: GREATEREQUAL
11263: IFFALSE 11328
11265: GO 11267
11267: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11268: LD_EXP 48
11272: PPUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 72
11287: PPUSH
11288: LD_INT 62
11290: PPUSH
11291: LD_INT 22
11293: PPUSH
11294: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11298: LD_EXP 49
11302: PPUSH
11303: LD_INT 69
11305: PPUSH
11306: LD_INT 27
11308: PPUSH
11309: CALL_OW 111
// wait ( 1 1$00 ) ;
11313: LD_INT 2100
11315: PPUSH
11316: CALL_OW 67
// startAttackOnOmicron := true ;
11320: LD_ADDR_EXP 6
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// end ;
11328: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11329: LD_EXP 22
11333: PUSH
11334: LD_INT 0
11336: EQUAL
11337: IFFALSE 13354
11339: GO 11341
11341: DISABLE
11342: LD_INT 0
11344: PPUSH
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11351: LD_INT 5
11353: PPUSH
11354: LD_INT 2
11356: PPUSH
11357: CALL_OW 343
// PrepareOmarForces ;
11361: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11365: LD_INT 105
11367: PPUSH
11368: CALL_OW 67
// allowHeikeAttack := true ;
11372: LD_ADDR_EXP 11
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// activeGrishkoAI := false ;
11380: LD_ADDR_EXP 10
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11388: LD_INT 20
11390: PPUSH
11391: LD_INT 0
11393: PPUSH
11394: CALL_OW 424
// if not hillBase then
11398: LD_EXP 15
11402: NOT
11403: IFFALSE 11412
// ChangeMissionObjectives ( HillDone ) ;
11405: LD_STRING HillDone
11407: PPUSH
11408: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11412: LD_EXP 33
11416: PPUSH
11417: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11480
// if HasTask ( i ) then
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 314
11467: IFFALSE 11478
// ComHold ( i ) ;
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 140
11478: GO 11455
11480: POP
11481: POP
// DialogueOn ;
11482: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11486: LD_EXP 33
11490: PPUSH
11491: LD_STRING DO-assault-1
11493: PPUSH
11494: CALL_OW 94
// DialogueOff ;
11498: CALL_OW 7
// game_speed := 4 ;
11502: LD_ADDR_OWVAR 65
11506: PUSH
11507: LD_INT 4
11509: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11510: LD_ADDR_VAR 0 1
11514: PUSH
11515: LD_EXP 46
11519: PPUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 54
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 72
11537: PUSH
11538: FOR_IN
11539: IFFALSE 11558
// ComMoveXY ( i , 226 , 114 ) ;
11541: LD_VAR 0 1
11545: PPUSH
11546: LD_INT 226
11548: PPUSH
11549: LD_INT 114
11551: PPUSH
11552: CALL_OW 111
11556: GO 11538
11558: POP
11559: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11560: LD_EXP 41
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 6
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 30
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: PPUSH
11594: LD_EXP 41
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11608: LD_STRING Attack
11610: PPUSH
11611: CALL_OW 337
// music_class := music_combat ;
11615: LD_ADDR_OWVAR 72
11619: PUSH
11620: LD_INT 1
11622: ST_TO_ADDR
// music_nat := 4 ;
11623: LD_ADDR_OWVAR 71
11627: PUSH
11628: LD_INT 4
11630: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11631: LD_INT 5
11633: PPUSH
11634: LD_EXP 41
11638: PPUSH
11639: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11643: LD_INT 6
11645: PPUSH
11646: LD_EXP 38
11650: PPUSH
11651: LD_INT 25
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: PUSH
11666: LD_INT 4
11668: ARRAY
11669: PPUSH
11670: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_EXP 38
11683: PPUSH
11684: LD_INT 3
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 4
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 72
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11726
// ComAgressiveMove ( i , 221 , 110 ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 221
11716: PPUSH
11717: LD_INT 110
11719: PPUSH
11720: CALL_OW 114
11724: GO 11706
11726: POP
11727: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11728: LD_EXP 38
11732: PPUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 4
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PPUSH
11743: CALL_OW 72
11747: PPUSH
11748: LD_INT 214
11750: PPUSH
11751: LD_INT 124
11753: PPUSH
11754: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11758: LD_EXP 38
11762: PPUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 72
11777: PUSH
11778: LD_INT 4
11780: ARRAY
11781: PPUSH
11782: LD_INT 214
11784: PPUSH
11785: LD_INT 114
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11795: LD_EXP 41
11799: PPUSH
11800: LD_STRING D9-Gri-1
11802: PPUSH
11803: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11807: LD_EXP 40
11811: PPUSH
11812: LD_STRING D9-Kur-1
11814: PPUSH
11815: CALL_OW 94
// wait ( 0 0$1 ) ;
11819: LD_INT 35
11821: PPUSH
11822: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11826: LD_EXP 33
11830: PPUSH
11831: LD_INT 233
11833: PPUSH
11834: LD_INT 130
11836: PPUSH
11837: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11841: LD_EXP 41
11845: PPUSH
11846: LD_STRING D9-Gri-2
11848: PPUSH
11849: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11853: LD_EXP 40
11857: PPUSH
11858: LD_STRING D9-Kur-2
11860: PPUSH
11861: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11865: LD_EXP 41
11869: PPUSH
11870: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11874: LD_EXP 41
11878: PPUSH
11879: LD_INT 211
11881: PPUSH
11882: LD_INT 104
11884: PPUSH
11885: CALL_OW 171
// AddComHold ( Grishko ) ;
11889: LD_EXP 41
11893: PPUSH
11894: CALL_OW 200
// repeat wait ( 3 ) ;
11898: LD_INT 3
11900: PPUSH
11901: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11905: LD_EXP 41
11909: PPUSH
11910: CALL_OW 310
11914: NOT
11915: IFFALSE 11898
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11917: LD_EXP 38
11921: PPUSH
11922: LD_INT 34
11924: PUSH
11925: LD_INT 26
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 72
11936: PPUSH
11937: LD_EXP 41
11941: PPUSH
11942: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11946: LD_EXP 38
11950: PPUSH
11951: LD_INT 34
11953: PUSH
11954: LD_INT 26
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: PPUSH
11966: LD_INT 215
11968: PPUSH
11969: LD_INT 106
11971: PPUSH
11972: CALL_OW 174
// repeat wait ( 3 ) ;
11976: LD_INT 3
11978: PPUSH
11979: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11983: LD_EXP 41
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: LESS
11996: IFFALSE 11976
// NormalAttack ( 5 , Grishko ) ;
11998: LD_INT 5
12000: PPUSH
12001: LD_EXP 41
12005: PPUSH
12006: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12010: LD_INT 6
12012: PPUSH
12013: LD_EXP 38
12017: PPUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 72
12032: PUSH
12033: LD_INT 4
12035: ARRAY
12036: PPUSH
12037: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12041: LD_EXP 41
12045: PPUSH
12046: LD_STRING D9-Gri-3
12048: PPUSH
12049: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12053: LD_EXP 40
12057: PPUSH
12058: LD_STRING D9-Kur-3
12060: PPUSH
12061: CALL_OW 94
// music_class := music_auto ;
12065: LD_ADDR_OWVAR 72
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// music_nat := music_auto ;
12073: LD_ADDR_OWVAR 71
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
// for i in omarSquad do
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_EXP 38
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12234
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 247
12103: PUSH
12104: LD_INT 2
12106: EQUAL
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 256
12117: PUSH
12118: LD_INT 1000
12120: LESS
12121: AND
12122: IFFALSE 12188
// begin driver := IsDrivenBy ( i ) ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 311
12138: ST_TO_ADDR
// veh := i ;
12139: LD_ADDR_VAR 0 3
12143: PUSH
12144: LD_VAR 0 1
12148: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12149: LD_VAR 0 2
12153: PPUSH
12154: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12158: LD_VAR 0 2
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12172: LD_VAR 0 2
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: CALL_OW 180
// end else
12186: GO 12232
// if GetLives ( i ) < 500 then
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 256
12197: PUSH
12198: LD_INT 500
12200: LESS
12201: IFFALSE 12232
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12203: LD_EXP 38
12207: PPUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 72
12222: PPUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 188
// end ; end ;
12232: GO 12091
12234: POP
12235: POP
// repeat wait ( 0 0$1 ) ;
12236: LD_INT 35
12238: PPUSH
12239: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12243: LD_EXP 38
12247: PPUSH
12248: LD_INT 3
12250: PUSH
12251: LD_INT 24
12253: PUSH
12254: LD_INT 1000
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 21
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 72
12283: NOT
12284: PUSH
12285: LD_EXP 38
12289: PPUSH
12290: LD_INT 3
12292: PUSH
12293: LD_INT 24
12295: PUSH
12296: LD_INT 250
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 72
12311: NOT
12312: AND
12313: IFFALSE 12236
// wait ( 0 0$2 ) ;
12315: LD_INT 70
12317: PPUSH
12318: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_EXP 38
12331: PPUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 72
12356: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12357: LD_ADDR_VAR 0 6
12361: PUSH
12362: LD_EXP 38
12366: PPUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 55
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: ST_TO_ADDR
// for i := 1 to tmp do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 5
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12445
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12417: LD_VAR 0 6
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_VAR 0 1
12437: ARRAY
12438: PPUSH
12439: CALL_OW 120
12443: GO 12414
12445: POP
12446: POP
// wait ( 0 0$5 ) ;
12447: LD_INT 175
12449: PPUSH
12450: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12454: LD_EXP 38
12458: PPUSH
12459: LD_INT 199
12461: PPUSH
12462: LD_INT 141
12464: PPUSH
12465: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12469: LD_EXP 33
12473: PPUSH
12474: LD_INT 190
12476: PPUSH
12477: LD_INT 143
12479: PPUSH
12480: CALL_OW 114
// AddComHold ( Omar ) ;
12484: LD_EXP 33
12488: PPUSH
12489: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12493: LD_EXP 38
12497: PPUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 72
12530: PPUSH
12531: LD_INT 161
12533: PPUSH
12534: LD_INT 130
12536: PPUSH
12537: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12541: LD_EXP 38
12545: PPUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PPUSH
12556: CALL_OW 72
12560: PPUSH
12561: LD_INT 163
12563: PPUSH
12564: LD_INT 122
12566: PPUSH
12567: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12571: LD_EXP 38
12575: PPUSH
12576: LD_INT 25
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: PUSH
12591: LD_INT 4
12593: ARRAY
12594: PPUSH
12595: LD_INT 165
12597: PPUSH
12598: LD_INT 118
12600: PPUSH
12601: LD_INT 0
12603: PPUSH
12604: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12608: LD_EXP 38
12612: PPUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 1
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 72
12627: PUSH
12628: LD_INT 4
12630: ARRAY
12631: PPUSH
12632: LD_INT 159
12634: PPUSH
12635: LD_INT 116
12637: PPUSH
12638: LD_INT 0
12640: PPUSH
12641: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12645: LD_EXP 38
12649: PPUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 72
12664: PPUSH
12665: LD_INT 169
12667: PPUSH
12668: LD_INT 114
12670: PPUSH
12671: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12675: LD_INT 35
12677: PPUSH
12678: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 38
12691: PPUSH
12692: LD_INT 25
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 72
12706: ST_TO_ADDR
// for i in tmp do
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_VAR 0 5
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12815
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12720: LD_VAR 0 1
12724: PPUSH
12725: CALL_OW 256
12729: PUSH
12730: LD_INT 600
12732: LESS
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: LD_INT 161
12741: PPUSH
12742: LD_INT 130
12744: PPUSH
12745: CALL_OW 297
12749: PUSH
12750: LD_INT 6
12752: GREATER
12753: AND
12754: IFFALSE 12771
// ComMoveXY ( i , 161 , 130 ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_INT 161
12763: PPUSH
12764: LD_INT 130
12766: PPUSH
12767: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 256
12780: PUSH
12781: LD_INT 1000
12783: EQUAL
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 314
12794: NOT
12795: AND
12796: IFFALSE 12813
// ComAgressiveMove ( i , 160 , 109 ) ;
12798: LD_VAR 0 1
12802: PPUSH
12803: LD_INT 160
12805: PPUSH
12806: LD_INT 109
12808: PPUSH
12809: CALL_OW 114
// end ;
12813: GO 12717
12815: POP
12816: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12817: LD_ADDR_VAR 0 5
12821: PUSH
12822: LD_EXP 38
12826: PPUSH
12827: LD_INT 21
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: ST_TO_ADDR
// for i in tmp do
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 5
12851: PUSH
12852: FOR_IN
12853: IFFALSE 13119
// begin tmp2 := IsDrivenBy ( i ) ;
12855: LD_ADDR_VAR 0 6
12859: PUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 311
12869: ST_TO_ADDR
// if not tmp2 then
12870: LD_VAR 0 6
12874: NOT
12875: IFFALSE 12879
// continue ;
12877: GO 12852
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 256
12888: PUSH
12889: LD_INT 600
12891: GREATEREQUAL
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 110
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: AND
12907: IFFALSE 12921
// SetTag ( i , 0 ) ;
12909: LD_VAR 0 1
12913: PPUSH
12914: LD_INT 0
12916: PPUSH
12917: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 256
12930: PUSH
12931: LD_INT 600
12933: GREATEREQUAL
12934: PUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL_OW 110
12944: NOT
12945: AND
12946: IFFALSE 12972
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_VAR 0 7
12957: PPUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 74
12967: PPUSH
12968: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 256
12981: PUSH
12982: LD_INT 600
12984: LESS
12985: PUSH
12986: LD_VAR 0 1
12990: PPUSH
12991: CALL_OW 110
12995: NOT
12996: AND
12997: IFFALSE 13026
// begin SetTag ( i , 1 ) ;
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13011: LD_VAR 0 1
13015: PPUSH
13016: LD_INT 202
13018: PPUSH
13019: LD_INT 150
13021: PPUSH
13022: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 110
13035: PUSH
13036: LD_INT 1
13038: EQUAL
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 202
13047: PPUSH
13048: LD_INT 150
13050: PPUSH
13051: CALL_OW 297
13055: PUSH
13056: LD_INT 6
13058: LESS
13059: AND
13060: PUSH
13061: LD_VAR 0 6
13065: AND
13066: IFFALSE 13117
// begin ComExitVehicle ( tmp2 ) ;
13068: LD_VAR 0 6
13072: PPUSH
13073: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13077: LD_VAR 0 6
13081: PPUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13091: LD_VAR 0 6
13095: PPUSH
13096: LD_INT 700
13098: PPUSH
13099: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13103: LD_VAR 0 6
13107: PPUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 180
// end ; end ;
13117: GO 12852
13119: POP
13120: POP
// until kirovDestroyed ;
13121: LD_EXP 16
13125: IFFALSE 12675
// repeat wait ( 0 0$1 ) ;
13127: LD_INT 35
13129: PPUSH
13130: CALL_OW 67
// for i in omarSquad union Omar do
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_EXP 38
13143: PUSH
13144: LD_EXP 33
13148: UNION
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13321
// if IsInArea ( i , southRoadArea ) then
13153: LD_VAR 0 1
13157: PPUSH
13158: LD_INT 15
13160: PPUSH
13161: CALL_OW 308
13165: IFFALSE 13178
// RemoveUnit ( i ) else
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 64
13176: GO 13319
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 257
13187: PUSH
13188: LD_INT 3
13190: EQUAL
13191: PUSH
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 310
13201: NOT
13202: AND
13203: PUSH
13204: LD_INT 22
13206: PUSH
13207: LD_INT 5
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 24
13216: PUSH
13217: LD_INT 251
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 69
13250: AND
13251: IFFALSE 13304
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13253: LD_VAR 0 1
13257: PPUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 58
13280: PUSH
13281: EMPTY
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 120
13302: GO 13319
// ComMoveXY ( i , 208 , 162 ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_INT 208
13311: PPUSH
13312: LD_INT 162
13314: PPUSH
13315: CALL_OW 111
// end ;
13319: GO 13150
13321: POP
13322: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13323: LD_INT 22
13325: PUSH
13326: LD_INT 5
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 21
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: NOT
13352: IFFALSE 13127
// end ;
13354: PPOPN 7
13356: END
// every 0 0$1 trigger IsDead ( kirov ) do
13357: LD_INT 71
13359: PPUSH
13360: CALL_OW 301
13364: IFFALSE 13381
13366: GO 13368
13368: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13369: LD_EXP 25
13373: PPUSH
13374: LD_STRING DH-1-Kirov
13376: PPUSH
13377: CALL_OW 88
13381: END
// every 0 0$1 trigger See ( 2 , beria ) do
13382: LD_INT 2
13384: PPUSH
13385: LD_INT 106
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13409
13394: GO 13396
13396: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13397: LD_EXP 25
13401: PPUSH
13402: LD_STRING DH-1-Beria
13404: PPUSH
13405: CALL_OW 88
13409: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13410: LD_INT 2
13412: PPUSH
13413: LD_INT 112
13415: PPUSH
13416: CALL_OW 292
13420: IFFALSE 13687
13422: GO 13424
13424: DISABLE
// begin DialogueOn ;
13425: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13429: LD_INT 112
13431: PPUSH
13432: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13436: LD_EXP 25
13440: PPUSH
13441: LD_STRING DH-1-Kagan
13443: PPUSH
13444: CALL_OW 88
// if Kamil then
13448: LD_EXP 29
13452: IFFALSE 13490
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13454: LD_EXP 29
13458: PPUSH
13459: LD_STRING DKam-Kagan-2
13461: PPUSH
13462: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13466: LD_EXP 26
13470: PPUSH
13471: LD_STRING DG-Kagan-3
13473: PPUSH
13474: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13478: LD_EXP 26
13482: PPUSH
13483: LD_STRING DG-Kagan-4
13485: PPUSH
13486: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13490: LD_STRING KaganBase
13492: PPUSH
13493: CALL_OW 97
13497: PUSH
13498: LD_INT 1
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13601
13506: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13507: LD_EXP 25
13511: PPUSH
13512: LD_STRING DH-Kagan-5
13514: PPUSH
13515: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13519: LD_EXP 25
13523: PPUSH
13524: LD_STRING DH-Kagan-6
13526: PPUSH
13527: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13531: LD_EXP 36
13535: PPUSH
13536: LD_STRING DShar-Kagan-7
13538: PPUSH
13539: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13543: LD_EXP 25
13547: PPUSH
13548: LD_STRING DH-Kagan-8
13550: PPUSH
13551: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13555: LD_EXP 25
13559: PPUSH
13560: LD_STRING DH-Kagan-9
13562: PPUSH
13563: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13567: LD_EXP 36
13571: PPUSH
13572: LD_STRING DShar-Kagan-10
13574: PPUSH
13575: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13579: LD_EXP 25
13583: PPUSH
13584: LD_STRING DH-Kagan-11
13586: PPUSH
13587: CALL_OW 88
// kaganCaptured := true ;
13591: LD_ADDR_EXP 24
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// end ; 2 :
13599: GO 13683
13601: LD_INT 2
13603: DOUBLE
13604: EQUAL
13605: IFTRUE 13609
13607: GO 13682
13609: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13610: LD_INT 22
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_EXP 35
13629: AND
13630: IFFALSE 13644
// Say ( Heike , DH-Kagan-a-5 ) ;
13632: LD_EXP 25
13636: PPUSH
13637: LD_STRING DH-Kagan-a-5
13639: PPUSH
13640: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13644: LD_EXP 25
13648: PPUSH
13649: LD_STRING DH-Kagan-a-6
13651: PPUSH
13652: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13656: LD_EXP 25
13660: PPUSH
13661: LD_STRING DH-Kagan-a-7
13663: PPUSH
13664: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING DG-Kagan-a-8
13675: PPUSH
13676: CALL_OW 88
// end ; end ;
13680: GO 13683
13682: POP
// DialogueOff ;
13683: CALL_OW 7
// end ;
13687: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13688: LD_EXP 18
13692: PUSH
13693: LD_INT 112
13695: PPUSH
13696: CALL_OW 255
13700: PUSH
13701: LD_INT 2
13703: EQUAL
13704: OR
13705: IFFALSE 13717
13707: GO 13709
13709: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13710: LD_STRING KaganDone
13712: PPUSH
13713: CALL_OW 337
13717: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13718: LD_EXP 6
13722: PUSH
13723: LD_EXP 48
13727: PPUSH
13728: LD_INT 95
13730: PUSH
13731: LD_INT 19
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 72
13742: AND
13743: IFFALSE 13820
13745: GO 13747
13747: DISABLE
// begin DialogueOn ;
13748: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13752: LD_INT 63
13754: PPUSH
13755: LD_INT 32
13757: PPUSH
13758: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13762: LD_INT 63
13764: PPUSH
13765: LD_INT 32
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: LD_INT 12
13773: NEG
13774: PPUSH
13775: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13779: LD_EXP 25
13783: PPUSH
13784: LD_STRING DH-Omicron-1
13786: PPUSH
13787: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13791: LD_EXP 27
13795: PPUSH
13796: LD_STRING DM-Omicron-2
13798: PPUSH
13799: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13803: LD_INT 63
13805: PPUSH
13806: LD_INT 32
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 331
// DialogueOff ;
13816: CALL_OW 7
// end ;
13820: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13821: LD_INT 2
13823: PPUSH
13824: LD_EXP 50
13828: PPUSH
13829: CALL_OW 292
13833: PUSH
13834: LD_EXP 50
13838: PPUSH
13839: CALL_OW 255
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: OR
13848: PUSH
13849: LD_INT 106
13851: PPUSH
13852: CALL_OW 255
13856: PUSH
13857: LD_INT 2
13859: EQUAL
13860: OR
13861: PUSH
13862: LD_EXP 50
13866: PPUSH
13867: CALL_OW 302
13871: AND
13872: PUSH
13873: LD_EXP 25
13877: PPUSH
13878: CALL_OW 302
13882: AND
13883: PUSH
13884: LD_EXP 35
13888: PPUSH
13889: CALL_OW 302
13893: AND
13894: IFFALSE 14615
13896: GO 13898
13898: DISABLE
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
// begin DialogueOn ;
13906: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13910: LD_INT 111
13912: PPUSH
13913: LD_INT 90
13915: PPUSH
13916: LD_INT 2
13918: PPUSH
13919: LD_INT 6
13921: NEG
13922: PPUSH
13923: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13927: LD_INT 111
13929: PPUSH
13930: LD_INT 90
13932: PPUSH
13933: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13937: LD_EXP 35
13941: PPUSH
13942: LD_STRING DA-Cap-1
13944: PPUSH
13945: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13949: LD_EXP 25
13953: PPUSH
13954: LD_STRING DH-Cap-2
13956: PPUSH
13957: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13961: LD_INT 111
13963: PPUSH
13964: LD_INT 90
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 331
// DialogueOff ;
13974: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13978: LD_INT 35
13980: PPUSH
13981: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13985: LD_EXP 17
13989: PUSH
13990: LD_INT 106
13992: PPUSH
13993: CALL_OW 255
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: OR
14002: PUSH
14003: LD_EXP 50
14007: PPUSH
14008: CALL_OW 255
14012: PUSH
14013: LD_INT 2
14015: EQUAL
14016: OR
14017: PUSH
14018: LD_EXP 50
14022: PPUSH
14023: CALL_OW 302
14027: AND
14028: PUSH
14029: LD_EXP 35
14033: PPUSH
14034: CALL_OW 302
14038: AND
14039: PUSH
14040: LD_INT 2
14042: PPUSH
14043: CALL_OW 463
14047: NOT
14048: AND
14049: PUSH
14050: LD_INT 22
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 92
14072: PUSH
14073: LD_INT 110
14075: PUSH
14076: LD_INT 95
14078: PUSH
14079: LD_INT 12
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: NOT
14098: AND
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 30
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 92
14122: PUSH
14123: LD_INT 110
14125: PUSH
14126: LD_INT 95
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: NOT
14148: AND
14149: IFFALSE 13978
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14151: LD_ADDR_VAR 0 2
14155: PUSH
14156: LD_EXP 37
14160: PUSH
14161: LD_EXP 28
14165: PUSH
14166: LD_EXP 29
14170: PUSH
14171: LD_EXP 31
14175: PUSH
14176: LD_EXP 30
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: UNION
14187: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14188: LD_ADDR_VAR 0 2
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_INT 50
14200: PUSH
14201: EMPTY
14202: LIST
14203: PPUSH
14204: CALL_OW 72
14208: ST_TO_ADDR
// if tmp < 2 then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 2
14216: LESS
14217: IFFALSE 14229
// q := 2 else
14219: LD_ADDR_VAR 0 4
14223: PUSH
14224: LD_INT 2
14226: ST_TO_ADDR
14227: GO 14242
// q := Query ( LabCap ) ;
14229: LD_ADDR_VAR 0 4
14233: PUSH
14234: LD_STRING LabCap
14236: PPUSH
14237: CALL_OW 97
14241: ST_TO_ADDR
// case q of 1 :
14242: LD_VAR 0 4
14246: PUSH
14247: LD_INT 1
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14579
14255: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14256: LD_INT 2
14258: PPUSH
14259: LD_EXP 50
14263: PPUSH
14264: CALL_OW 471
// labCaptured := true ;
14268: LD_ADDR_EXP 21
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Cap-a-1
14283: PPUSH
14284: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14288: LD_EXP 35
14292: PPUSH
14293: LD_STRING DA-Cap-a-2
14295: PPUSH
14296: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14300: LD_ADDR_VAR 0 5
14304: PUSH
14305: LD_EXP 35
14309: PUSH
14310: LD_INT -3
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT -2
14319: PUSH
14320: LD_INT -4
14322: PUSH
14323: LD_EXP 25
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: ADD
14333: PUSH
14334: LD_INT -3
14336: PUSH
14337: EMPTY
14338: LIST
14339: ADD
14340: PUSH
14341: LD_VAR 0 2
14345: ADD
14346: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_STRING Select two characters to go with Aviradze
14354: PPUSH
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 2
14360: PPUSH
14361: LD_VAR 0 5
14365: PPUSH
14366: EMPTY
14367: PPUSH
14368: CALL_OW 42
14372: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14373: LD_EXP 50
14377: PPUSH
14378: LD_INT 8
14380: PPUSH
14381: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14385: LD_EXP 35
14389: PPUSH
14390: LD_INT 8
14392: PPUSH
14393: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14397: LD_ADDR_EXP 39
14401: PUSH
14402: LD_EXP 35
14406: PUSH
14407: EMPTY
14408: LIST
14409: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14410: LD_EXP 35
14414: PPUSH
14415: CALL_OW 310
14419: IFFALSE 14430
// ComExit ( Aviradze ) ;
14421: LD_EXP 35
14425: PPUSH
14426: CALL 72199 0 1
// wait ( 3 ) ;
14430: LD_INT 3
14432: PPUSH
14433: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14437: LD_EXP 35
14441: PPUSH
14442: LD_EXP 50
14446: PPUSH
14447: CALL_OW 120
// for i := 1 to 2 do
14451: LD_ADDR_VAR 0 1
14455: PUSH
14456: DOUBLE
14457: LD_INT 1
14459: DEC
14460: ST_TO_ADDR
14461: LD_INT 2
14463: PUSH
14464: FOR_TO
14465: IFFALSE 14568
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14467: LD_ADDR_EXP 39
14471: PUSH
14472: LD_EXP 39
14476: PUSH
14477: LD_VAR 0 3
14481: PUSH
14482: LD_VAR 0 1
14486: ARRAY
14487: UNION
14488: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14489: LD_VAR 0 3
14493: PUSH
14494: LD_VAR 0 1
14498: ARRAY
14499: PPUSH
14500: LD_INT 8
14502: PPUSH
14503: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14507: LD_VAR 0 3
14511: PUSH
14512: LD_VAR 0 1
14516: ARRAY
14517: PPUSH
14518: CALL_OW 310
14522: IFFALSE 14539
// ComExit ( tmp2 [ i ] ) ;
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 1
14533: ARRAY
14534: PPUSH
14535: CALL 72199 0 1
// wait ( 3 ) ;
14539: LD_INT 3
14541: PPUSH
14542: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14546: LD_VAR 0 3
14550: PUSH
14551: LD_VAR 0 1
14555: ARRAY
14556: PPUSH
14557: LD_EXP 50
14561: PPUSH
14562: CALL_OW 120
// end ;
14566: GO 14464
14568: POP
14569: POP
// SetAchievement ( ACH_LAB ) ;
14570: LD_STRING ACH_LAB
14572: PPUSH
14573: CALL_OW 543
// end ; 2 :
14577: GO 14615
14579: LD_INT 2
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14614
14587: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14588: LD_EXP 25
14592: PPUSH
14593: LD_STRING DH-Cap-b-1
14595: PPUSH
14596: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14600: LD_EXP 35
14604: PPUSH
14605: LD_STRING DA-Cap-b-2
14607: PPUSH
14608: CALL_OW 88
// end ; end ;
14612: GO 14615
14614: POP
// end ;
14615: PPOPN 5
14617: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14618: LD_INT 10
14620: PPUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 70
14649: PUSH
14650: LD_INT 2
14652: GREATEREQUAL
14653: IFFALSE 14665
14655: GO 14657
14657: DISABLE
// SetAchievement ( ACH_KING ) ;
14658: LD_STRING ACH_KING
14660: PPUSH
14661: CALL_OW 543
14665: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14666: LD_EXP 11
14670: NOT
14671: PUSH
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 31
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 4
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 70
14721: AND
14722: IFFALSE 14742
14724: GO 14726
14726: DISABLE
// begin hillBase := true ;
14727: LD_ADDR_EXP 15
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14735: LD_STRING HillDone
14737: PPUSH
14738: CALL_OW 337
// end ;
14742: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14743: LD_EXP 30
14747: PUSH
14748: LD_EXP 30
14752: PPUSH
14753: CALL_OW 256
14757: PUSH
14758: LD_INT 3
14760: LESS
14761: AND
14762: IFFALSE 14808
14764: GO 14766
14766: DISABLE
// begin DialogueOn ;
14767: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14771: LD_EXP 30
14775: PPUSH
14776: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14780: LD_EXP 30
14784: PPUSH
14785: LD_STRING DK-Kkilled-1
14787: PPUSH
14788: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14792: LD_EXP 25
14796: PPUSH
14797: LD_STRING DH-Kkilled-2
14799: PPUSH
14800: CALL_OW 88
// DialogueOff ;
14804: CALL_OW 7
// end ;
14808: END
// every 0 0$1 trigger kaiaKilledByRussian do
14809: LD_EXP 23
14813: IFFALSE 14830
14815: GO 14817
14817: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14818: LD_EXP 25
14822: PPUSH
14823: LD_STRING DH-Kkilled-3
14825: PPUSH
14826: CALL_OW 88
14830: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14831: LD_EXP 16
14835: PUSH
14836: LD_INT 106
14838: PPUSH
14839: CALL_OW 255
14843: PUSH
14844: LD_INT 2
14846: EQUAL
14847: PUSH
14848: LD_EXP 17
14852: OR
14853: AND
14854: PUSH
14855: LD_EXP 18
14859: PUSH
14860: LD_EXP 24
14864: PUSH
14865: LD_INT 112
14867: PPUSH
14868: CALL_OW 255
14872: PUSH
14873: LD_INT 2
14875: EQUAL
14876: AND
14877: OR
14878: AND
14879: IFFALSE 16068
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14890: LD_STRING GoToWest
14892: PPUSH
14893: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14897: LD_INT 17
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14907: LD_INT 35
14909: PPUSH
14910: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 17
14921: PPUSH
14922: LD_INT 22
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 3
14957: PUSH
14958: LD_INT 58
14960: PUSH
14961: EMPTY
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 70
14985: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14986: LD_ADDR_VAR 0 3
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 55
15006: PUSH
15007: EMPTY
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: LD_INT 58
15042: PUSH
15043: EMPTY
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 0
15076: PLUS
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 0
15085: PLUS
15086: EQUAL
15087: IFFALSE 14907
// SaveCharacters ( Heike , 04_1_Heike ) ;
15089: LD_EXP 25
15093: PPUSH
15094: LD_STRING 04_1_Heike
15096: PPUSH
15097: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15101: LD_EXP 35
15105: PUSH
15106: LD_EXP 35
15110: PUSH
15111: LD_EXP 39
15115: IN
15116: NOT
15117: AND
15118: IFFALSE 15134
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15120: LD_EXP 35
15124: PPUSH
15125: LD_STRING 04_1_Aviradze
15127: PPUSH
15128: CALL_OW 38
15132: GO 15152
// if Aviradze then
15134: LD_EXP 35
15138: IFFALSE 15152
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15140: LD_EXP 35
15144: PPUSH
15145: LD_STRING 04_1_Aviradze_L
15147: PPUSH
15148: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15152: LD_EXP 28
15156: PUSH
15157: LD_EXP 28
15161: PUSH
15162: LD_EXP 39
15166: IN
15167: NOT
15168: AND
15169: IFFALSE 15185
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15171: LD_EXP 28
15175: PPUSH
15176: LD_STRING 04_1_Ibrahim
15178: PPUSH
15179: CALL_OW 38
15183: GO 15203
// if Ibrahim then
15185: LD_EXP 28
15189: IFFALSE 15203
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15191: LD_EXP 28
15195: PPUSH
15196: LD_STRING 04_1_Ibrahim_L
15198: PPUSH
15199: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15203: LD_EXP 29
15207: PUSH
15208: LD_EXP 29
15212: PUSH
15213: LD_EXP 39
15217: IN
15218: NOT
15219: AND
15220: IFFALSE 15236
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15222: LD_EXP 29
15226: PPUSH
15227: LD_STRING 04_1_Kamil
15229: PPUSH
15230: CALL_OW 38
15234: GO 15254
// if Kamil then
15236: LD_EXP 29
15240: IFFALSE 15254
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15242: LD_EXP 29
15246: PPUSH
15247: LD_STRING 04_1_Kamil_L
15249: PPUSH
15250: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15254: LD_EXP 31
15258: PUSH
15259: LD_EXP 31
15263: PUSH
15264: LD_EXP 39
15268: IN
15269: NOT
15270: AND
15271: IFFALSE 15287
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15273: LD_EXP 31
15277: PPUSH
15278: LD_STRING 04_1_Sophia
15280: PPUSH
15281: CALL_OW 38
15285: GO 15305
// if Sophia then
15287: LD_EXP 31
15291: IFFALSE 15305
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15293: LD_EXP 31
15297: PPUSH
15298: LD_STRING 04_1_Sophia_L
15300: PPUSH
15301: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15305: LD_EXP 30
15309: PUSH
15310: LD_EXP 30
15314: PUSH
15315: LD_EXP 39
15319: IN
15320: NOT
15321: AND
15322: IFFALSE 15338
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15324: LD_EXP 30
15328: PPUSH
15329: LD_STRING 04_1_Kaia
15331: PPUSH
15332: CALL_OW 38
15336: GO 15356
// if Kaia then
15338: LD_EXP 30
15342: IFFALSE 15356
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15344: LD_EXP 30
15348: PPUSH
15349: LD_STRING 04_1_Kaia_L
15351: PPUSH
15352: CALL_OW 38
// if Givi then
15356: LD_EXP 26
15360: IFFALSE 15374
// SaveCharacters ( Givi , 04_1_Givi ) ;
15362: LD_EXP 26
15366: PPUSH
15367: LD_STRING 04_1_Givi
15369: PPUSH
15370: CALL_OW 38
// if Mike then
15374: LD_EXP 27
15378: IFFALSE 15392
// SaveCharacters ( Mike , 04_1_Mike ) ;
15380: LD_EXP 27
15384: PPUSH
15385: LD_STRING 04_1_Mike
15387: PPUSH
15388: CALL_OW 38
// if Markov then
15392: LD_EXP 32
15396: IFFALSE 15410
// SaveCharacters ( Markov , 04_1_Markov ) ;
15398: LD_EXP 32
15402: PPUSH
15403: LD_STRING 04_1_Markov
15405: PPUSH
15406: CALL_OW 38
// if Kurt then
15410: LD_EXP 34
15414: IFFALSE 15435
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15416: LD_EXP 34
15420: PPUSH
15421: LD_STRING 04_1_Kurt
15423: PPUSH
15424: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15428: LD_STRING enableBioCharacter(BIO_KURT)
15430: PPUSH
15431: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15435: LD_EXP 37
15439: PUSH
15440: LD_EXP 39
15444: DIFF
15445: IFFALSE 15465
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15447: LD_EXP 37
15451: PUSH
15452: LD_EXP 39
15456: DIFF
15457: PPUSH
15458: LD_STRING 04_1_others
15460: PPUSH
15461: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15465: LD_EXP 39
15469: PUSH
15470: LD_EXP 37
15474: AND
15475: IFFALSE 15560
// begin tmp := [ ] ;
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: EMPTY
15483: ST_TO_ADDR
// for i in heikeSecondSquad do
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_EXP 37
15493: PUSH
15494: FOR_IN
15495: IFFALSE 15540
// if i in aviradzeSquad then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_EXP 39
15506: IN
15507: IFFALSE 15538
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: PLUS
15527: PPUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: CALL_OW 1
15537: ST_TO_ADDR
15538: GO 15494
15540: POP
15541: POP
// if tmp then
15542: LD_VAR 0 2
15546: IFFALSE 15560
// SaveCharacters ( tmp , 04_1_others_L ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_STRING 04_1_others_L
15555: PPUSH
15556: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 23
15577: PUSH
15578: LD_INT 0
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// if tmp then
15594: LD_VAR 0 2
15598: IFFALSE 15612
// SaveCharacters ( tmp , 04_1_apes ) ;
15600: LD_VAR 0 2
15604: PPUSH
15605: LD_STRING 04_1_apes
15607: PPUSH
15608: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 17
15619: PPUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PPUSH
15630: CALL_OW 70
15634: ST_TO_ADDR
// if tmp then
15635: LD_VAR 0 2
15639: IFFALSE 15933
// begin tmp2 := [ ] ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: EMPTY
15647: ST_TO_ADDR
// for i in tmp do
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: LD_VAR 0 2
15657: PUSH
15658: FOR_IN
15659: IFFALSE 15919
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 264
15670: PUSH
15671: LD_INT 32
15673: PUSH
15674: LD_INT 12
15676: PUSH
15677: LD_INT 51
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: IN
15685: IFFALSE 15822
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 289
15704: PUSH
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 289
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: PLUS
15740: PPUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 265
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 262
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 263
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 264
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 248
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 256
15800: PUSH
15801: LD_VAR 0 4
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 1
15819: ST_TO_ADDR
// end else
15820: GO 15917
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15822: LD_ADDR_VAR 0 3
15826: PUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 1
15839: PLUS
15840: PPUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 265
15850: PUSH
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 262
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 263
15870: PUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 264
15880: PUSH
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 248
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 256
15900: PUSH
15901: EMPTY
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 1
15916: ST_TO_ADDR
15917: GO 15658
15919: POP
15920: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_STRING 04_1_Vehicles
15928: PPUSH
15929: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15933: LD_EXP 21
15937: PPUSH
15938: LD_STRING 04_1_RuLabCaptured
15940: PPUSH
15941: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15945: LD_EXP 19
15949: PPUSH
15950: LD_STRING 04_1_EscapeCounter
15952: PPUSH
15953: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15957: LD_EXP 15
15961: PPUSH
15962: LD_STRING 04_1_BaseHill
15964: PPUSH
15965: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15969: LD_OWVAR 1
15973: PPUSH
15974: LD_STRING 04_1_Time
15976: PPUSH
15977: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15981: LD_EXP 14
15985: PPUSH
15986: LD_STRING 04_1_DeadCounter
15988: PPUSH
15989: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15993: LD_EXP 24
15997: PUSH
15998: LD_INT 112
16000: PPUSH
16001: CALL_OW 255
16005: MUL
16006: PUSH
16007: LD_INT 2
16009: EQUAL
16010: PPUSH
16011: LD_STRING 04_1_KaganCaptured
16013: PPUSH
16014: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16018: LD_INT 22
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 34
16030: PUSH
16031: LD_INT 26
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 69
16046: PUSH
16047: LD_INT 0
16049: PLUS
16050: PPUSH
16051: LD_STRING 04_1_Flamethrower
16053: PPUSH
16054: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16058: LD_INT 1
16060: PPUSH
16061: LD_STRING __x1\04_cont2
16063: PPUSH
16064: CALL_OW 340
// end ; end_of_file
16068: PPOPN 4
16070: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 266
16080: PUSH
16081: LD_INT 0
16083: EQUAL
16084: PUSH
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 255
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: AND
16099: IFFALSE 16109
// baseConstructed := true ;
16101: LD_ADDR_EXP 3
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 266
16118: PUSH
16119: LD_INT 6
16121: EQUAL
16122: PUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 255
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: AND
16137: IFFALSE 16147
// labConstructed := true ;
16139: LD_ADDR_EXP 4
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// end ;
16147: PPOPN 1
16149: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16150: LD_VAR 0 1
16154: PUSH
16155: LD_EXP 25
16159: EQUAL
16160: IFFALSE 16169
// YouLost ( Heike ) ;
16162: LD_STRING Heike
16164: PPUSH
16165: CALL_OW 104
// if un = Omar then
16169: LD_VAR 0 1
16173: PUSH
16174: LD_EXP 33
16178: EQUAL
16179: IFFALSE 16188
// YouLost ( Omar ) ;
16181: LD_STRING Omar
16183: PPUSH
16184: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: IN
16233: IFFALSE 16249
// loseCounter := loseCounter + 1 ;
16235: LD_ADDR_EXP 14
16239: PUSH
16240: LD_EXP 14
16244: PUSH
16245: LD_INT 1
16247: PLUS
16248: ST_TO_ADDR
// if un = omikron then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 64
16256: EQUAL
16257: IFFALSE 16267
// omicronFall := true ;
16259: LD_ADDR_EXP 13
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if un = kirov then
16267: LD_VAR 0 1
16271: PUSH
16272: LD_INT 71
16274: EQUAL
16275: IFFALSE 16292
// begin ChangeMissionObjectives ( KirovDone ) ;
16277: LD_STRING KirovDone
16279: PPUSH
16280: CALL_OW 337
// kirovDestroyed := true ;
16284: LD_ADDR_EXP 16
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// end ; if un = beria then
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 106
16299: EQUAL
16300: IFFALSE 16317
// begin ChangeMissionObjectives ( BeriaDone ) ;
16302: LD_STRING BeriaDone
16304: PPUSH
16305: CALL_OW 337
// beriaDestroyed := true ;
16309: LD_ADDR_EXP 17
16313: PUSH
16314: LD_INT 1
16316: ST_TO_ADDR
// end ; if un = kagan then
16317: LD_VAR 0 1
16321: PUSH
16322: LD_INT 112
16324: EQUAL
16325: IFFALSE 16335
// kaganDestroyed := true ;
16327: LD_ADDR_EXP 18
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// if un in russianPatrol then
16335: LD_VAR 0 1
16339: PUSH
16340: LD_EXP 47
16344: IN
16345: IFFALSE 16363
// russianPatrol := russianPatrol diff un ;
16347: LD_ADDR_EXP 47
16351: PUSH
16352: LD_EXP 47
16356: PUSH
16357: LD_VAR 0 1
16361: DIFF
16362: ST_TO_ADDR
// if un in russianOmicronAttackers then
16363: LD_VAR 0 1
16367: PUSH
16368: LD_EXP 48
16372: IN
16373: IFFALSE 16391
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16375: LD_ADDR_EXP 48
16379: PUSH
16380: LD_EXP 48
16384: PUSH
16385: LD_VAR 0 1
16389: DIFF
16390: ST_TO_ADDR
// end ;
16391: PPOPN 1
16393: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
16398: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 6
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 30
16445: PUSH
16446: LD_INT 32
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 69
16461: IN
16462: IFFALSE 16635
// begin sol := UnitsInside ( un ) ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 313
16478: ST_TO_ADDR
// if not sol then
16479: LD_VAR 0 3
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16635
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16488: LD_ADDR_VAR 0 4
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 255
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 30
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 30
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: ST_TO_ADDR
// if not nearestBarracks then
16547: LD_VAR 0 4
16551: NOT
16552: IFFALSE 16556
// exit ;
16554: GO 16635
// for i in nearestBarracks do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_VAR 0 4
16565: PUSH
16566: FOR_IN
16567: IFFALSE 16602
// if UnitsInside ( i ) = 6 then
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL_OW 313
16578: PUSH
16579: LD_INT 6
16581: EQUAL
16582: IFFALSE 16600
// nearestBarracks := nearestBarracks diff i ;
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_VAR 0 4
16593: PUSH
16594: LD_VAR 0 2
16598: DIFF
16599: ST_TO_ADDR
16600: GO 16566
16602: POP
16603: POP
// if not nearestBarracks then
16604: LD_VAR 0 4
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16635
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16613: LD_VAR 0 3
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 4
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: CALL_OW 120
// end ; end ;
16635: PPOPN 4
16637: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16638: LD_INT 0
16640: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16641: LD_EXP 8
16645: NOT
16646: PUSH
16647: LD_EXP 5
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 16725
// for i in camAreas do
16657: LD_ADDR_VAR 0 5
16661: PUSH
16662: LD_EXP 8
16666: PUSH
16667: FOR_IN
16668: IFFALSE 16723
// if InArea ( x , y , i ) then
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_VAR 0 5
16684: PPUSH
16685: CALL_OW 309
16689: IFFALSE 16721
// begin SetAreaMapShow ( i , 0 ) ;
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_INT 0
16698: PPUSH
16699: CALL_OW 424
// camAreas := camAreas diff i ;
16703: LD_ADDR_EXP 8
16707: PUSH
16708: LD_EXP 8
16712: PUSH
16713: LD_VAR 0 5
16717: DIFF
16718: ST_TO_ADDR
// break ;
16719: GO 16723
// end ;
16721: GO 16667
16723: POP
16724: POP
// end ;
16725: PPOPN 5
16727: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16728: LD_VAR 0 1
16732: PUSH
16733: LD_INT 2
16735: EQUAL
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: IN
16752: AND
16753: IFFALSE 16762
// YouLost ( Ally ) ;
16755: LD_STRING Ally
16757: PPUSH
16758: CALL_OW 104
// end ;
16762: PPOPN 2
16764: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 30
16774: EQUAL
16775: PUSH
16776: LD_VAR 0 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 6
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: IN
16791: AND
16792: IFFALSE 16823
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16794: LD_ADDR_EXP 23
16798: PUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 250
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 251
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// end ; end_of_file
16823: PPOPN 3
16825: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16826: LD_EXP 11
16830: NOT
16831: PUSH
16832: LD_INT 12
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 287
16842: PUSH
16843: LD_INT 20
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 12
16851: PUSH
16852: LD_INT 10
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_OWVAR 67
16865: ARRAY
16866: LESS
16867: AND
16868: IFFALSE 16895
16870: GO 16872
16872: DISABLE
// begin enable ;
16873: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 5
16879: PPUSH
16880: CALL_OW 12
16884: PPUSH
16885: LD_INT 12
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 55
// end ; end_of_file
16895: END
// every 0 0$1 trigger omarCountdown do
16896: LD_EXP 22
16900: IFFALSE 16952
16902: GO 16904
16904: DISABLE
// begin enable ;
16905: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16906: LD_ADDR_OWVAR 47
16910: PUSH
16911: LD_STRING #X104-1
16913: PUSH
16914: LD_EXP 22
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16923: LD_ADDR_EXP 22
16927: PUSH
16928: LD_EXP 22
16932: PUSH
16933: LD_INT 35
16935: MINUS
16936: ST_TO_ADDR
// if not omarCountdown then
16937: LD_EXP 22
16941: NOT
16942: IFFALSE 16952
// display_strings :=  ;
16944: LD_ADDR_OWVAR 47
16948: PUSH
16949: LD_STRING 
16951: ST_TO_ADDR
// end ; end_of_file
16952: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16953: LD_INT 0
16955: PPUSH
// if p2 = 100 then
16956: LD_VAR 0 2
16960: PUSH
16961: LD_INT 100
16963: EQUAL
16964: IFFALSE 17967
// begin if not StreamModeActive then
16966: LD_EXP 52
16970: NOT
16971: IFFALSE 16981
// StreamModeActive := true ;
16973: LD_ADDR_EXP 52
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// if p3 = 0 then
16981: LD_VAR 0 3
16985: PUSH
16986: LD_INT 0
16988: EQUAL
16989: IFFALSE 16995
// InitStreamMode ;
16991: CALL 18127 0 0
// if p3 = 1 then
16995: LD_VAR 0 3
16999: PUSH
17000: LD_INT 1
17002: EQUAL
17003: IFFALSE 17013
// sRocket := true ;
17005: LD_ADDR_EXP 57
17009: PUSH
17010: LD_INT 1
17012: ST_TO_ADDR
// if p3 = 2 then
17013: LD_VAR 0 3
17017: PUSH
17018: LD_INT 2
17020: EQUAL
17021: IFFALSE 17031
// sSpeed := true ;
17023: LD_ADDR_EXP 56
17027: PUSH
17028: LD_INT 1
17030: ST_TO_ADDR
// if p3 = 3 then
17031: LD_VAR 0 3
17035: PUSH
17036: LD_INT 3
17038: EQUAL
17039: IFFALSE 17049
// sEngine := true ;
17041: LD_ADDR_EXP 58
17045: PUSH
17046: LD_INT 1
17048: ST_TO_ADDR
// if p3 = 4 then
17049: LD_VAR 0 3
17053: PUSH
17054: LD_INT 4
17056: EQUAL
17057: IFFALSE 17067
// sSpec := true ;
17059: LD_ADDR_EXP 55
17063: PUSH
17064: LD_INT 1
17066: ST_TO_ADDR
// if p3 = 5 then
17067: LD_VAR 0 3
17071: PUSH
17072: LD_INT 5
17074: EQUAL
17075: IFFALSE 17085
// sLevel := true ;
17077: LD_ADDR_EXP 59
17081: PUSH
17082: LD_INT 1
17084: ST_TO_ADDR
// if p3 = 6 then
17085: LD_VAR 0 3
17089: PUSH
17090: LD_INT 6
17092: EQUAL
17093: IFFALSE 17103
// sArmoury := true ;
17095: LD_ADDR_EXP 60
17099: PUSH
17100: LD_INT 1
17102: ST_TO_ADDR
// if p3 = 7 then
17103: LD_VAR 0 3
17107: PUSH
17108: LD_INT 7
17110: EQUAL
17111: IFFALSE 17121
// sRadar := true ;
17113: LD_ADDR_EXP 61
17117: PUSH
17118: LD_INT 1
17120: ST_TO_ADDR
// if p3 = 8 then
17121: LD_VAR 0 3
17125: PUSH
17126: LD_INT 8
17128: EQUAL
17129: IFFALSE 17139
// sBunker := true ;
17131: LD_ADDR_EXP 62
17135: PUSH
17136: LD_INT 1
17138: ST_TO_ADDR
// if p3 = 9 then
17139: LD_VAR 0 3
17143: PUSH
17144: LD_INT 9
17146: EQUAL
17147: IFFALSE 17157
// sHack := true ;
17149: LD_ADDR_EXP 63
17153: PUSH
17154: LD_INT 1
17156: ST_TO_ADDR
// if p3 = 10 then
17157: LD_VAR 0 3
17161: PUSH
17162: LD_INT 10
17164: EQUAL
17165: IFFALSE 17175
// sFire := true ;
17167: LD_ADDR_EXP 64
17171: PUSH
17172: LD_INT 1
17174: ST_TO_ADDR
// if p3 = 11 then
17175: LD_VAR 0 3
17179: PUSH
17180: LD_INT 11
17182: EQUAL
17183: IFFALSE 17193
// sRefresh := true ;
17185: LD_ADDR_EXP 65
17189: PUSH
17190: LD_INT 1
17192: ST_TO_ADDR
// if p3 = 12 then
17193: LD_VAR 0 3
17197: PUSH
17198: LD_INT 12
17200: EQUAL
17201: IFFALSE 17211
// sExp := true ;
17203: LD_ADDR_EXP 66
17207: PUSH
17208: LD_INT 1
17210: ST_TO_ADDR
// if p3 = 13 then
17211: LD_VAR 0 3
17215: PUSH
17216: LD_INT 13
17218: EQUAL
17219: IFFALSE 17229
// sDepot := true ;
17221: LD_ADDR_EXP 67
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// if p3 = 14 then
17229: LD_VAR 0 3
17233: PUSH
17234: LD_INT 14
17236: EQUAL
17237: IFFALSE 17247
// sFlag := true ;
17239: LD_ADDR_EXP 68
17243: PUSH
17244: LD_INT 1
17246: ST_TO_ADDR
// if p3 = 15 then
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 15
17254: EQUAL
17255: IFFALSE 17265
// sKamikadze := true ;
17257: LD_ADDR_EXP 76
17261: PUSH
17262: LD_INT 1
17264: ST_TO_ADDR
// if p3 = 16 then
17265: LD_VAR 0 3
17269: PUSH
17270: LD_INT 16
17272: EQUAL
17273: IFFALSE 17283
// sTroll := true ;
17275: LD_ADDR_EXP 77
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// if p3 = 17 then
17283: LD_VAR 0 3
17287: PUSH
17288: LD_INT 17
17290: EQUAL
17291: IFFALSE 17301
// sSlow := true ;
17293: LD_ADDR_EXP 78
17297: PUSH
17298: LD_INT 1
17300: ST_TO_ADDR
// if p3 = 18 then
17301: LD_VAR 0 3
17305: PUSH
17306: LD_INT 18
17308: EQUAL
17309: IFFALSE 17319
// sLack := true ;
17311: LD_ADDR_EXP 79
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// if p3 = 19 then
17319: LD_VAR 0 3
17323: PUSH
17324: LD_INT 19
17326: EQUAL
17327: IFFALSE 17337
// sTank := true ;
17329: LD_ADDR_EXP 81
17333: PUSH
17334: LD_INT 1
17336: ST_TO_ADDR
// if p3 = 20 then
17337: LD_VAR 0 3
17341: PUSH
17342: LD_INT 20
17344: EQUAL
17345: IFFALSE 17355
// sRemote := true ;
17347: LD_ADDR_EXP 82
17351: PUSH
17352: LD_INT 1
17354: ST_TO_ADDR
// if p3 = 21 then
17355: LD_VAR 0 3
17359: PUSH
17360: LD_INT 21
17362: EQUAL
17363: IFFALSE 17373
// sPowell := true ;
17365: LD_ADDR_EXP 83
17369: PUSH
17370: LD_INT 1
17372: ST_TO_ADDR
// if p3 = 22 then
17373: LD_VAR 0 3
17377: PUSH
17378: LD_INT 22
17380: EQUAL
17381: IFFALSE 17391
// sTeleport := true ;
17383: LD_ADDR_EXP 86
17387: PUSH
17388: LD_INT 1
17390: ST_TO_ADDR
// if p3 = 23 then
17391: LD_VAR 0 3
17395: PUSH
17396: LD_INT 23
17398: EQUAL
17399: IFFALSE 17409
// sOilTower := true ;
17401: LD_ADDR_EXP 88
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// if p3 = 24 then
17409: LD_VAR 0 3
17413: PUSH
17414: LD_INT 24
17416: EQUAL
17417: IFFALSE 17427
// sShovel := true ;
17419: LD_ADDR_EXP 89
17423: PUSH
17424: LD_INT 1
17426: ST_TO_ADDR
// if p3 = 25 then
17427: LD_VAR 0 3
17431: PUSH
17432: LD_INT 25
17434: EQUAL
17435: IFFALSE 17445
// sSheik := true ;
17437: LD_ADDR_EXP 90
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// if p3 = 26 then
17445: LD_VAR 0 3
17449: PUSH
17450: LD_INT 26
17452: EQUAL
17453: IFFALSE 17463
// sEarthquake := true ;
17455: LD_ADDR_EXP 92
17459: PUSH
17460: LD_INT 1
17462: ST_TO_ADDR
// if p3 = 27 then
17463: LD_VAR 0 3
17467: PUSH
17468: LD_INT 27
17470: EQUAL
17471: IFFALSE 17481
// sAI := true ;
17473: LD_ADDR_EXP 93
17477: PUSH
17478: LD_INT 1
17480: ST_TO_ADDR
// if p3 = 28 then
17481: LD_VAR 0 3
17485: PUSH
17486: LD_INT 28
17488: EQUAL
17489: IFFALSE 17499
// sCargo := true ;
17491: LD_ADDR_EXP 96
17495: PUSH
17496: LD_INT 1
17498: ST_TO_ADDR
// if p3 = 29 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_INT 29
17506: EQUAL
17507: IFFALSE 17517
// sDLaser := true ;
17509: LD_ADDR_EXP 97
17513: PUSH
17514: LD_INT 1
17516: ST_TO_ADDR
// if p3 = 30 then
17517: LD_VAR 0 3
17521: PUSH
17522: LD_INT 30
17524: EQUAL
17525: IFFALSE 17535
// sExchange := true ;
17527: LD_ADDR_EXP 98
17531: PUSH
17532: LD_INT 1
17534: ST_TO_ADDR
// if p3 = 31 then
17535: LD_VAR 0 3
17539: PUSH
17540: LD_INT 31
17542: EQUAL
17543: IFFALSE 17553
// sFac := true ;
17545: LD_ADDR_EXP 99
17549: PUSH
17550: LD_INT 1
17552: ST_TO_ADDR
// if p3 = 32 then
17553: LD_VAR 0 3
17557: PUSH
17558: LD_INT 32
17560: EQUAL
17561: IFFALSE 17571
// sPower := true ;
17563: LD_ADDR_EXP 100
17567: PUSH
17568: LD_INT 1
17570: ST_TO_ADDR
// if p3 = 33 then
17571: LD_VAR 0 3
17575: PUSH
17576: LD_INT 33
17578: EQUAL
17579: IFFALSE 17589
// sRandom := true ;
17581: LD_ADDR_EXP 101
17585: PUSH
17586: LD_INT 1
17588: ST_TO_ADDR
// if p3 = 34 then
17589: LD_VAR 0 3
17593: PUSH
17594: LD_INT 34
17596: EQUAL
17597: IFFALSE 17607
// sShield := true ;
17599: LD_ADDR_EXP 102
17603: PUSH
17604: LD_INT 1
17606: ST_TO_ADDR
// if p3 = 35 then
17607: LD_VAR 0 3
17611: PUSH
17612: LD_INT 35
17614: EQUAL
17615: IFFALSE 17625
// sTime := true ;
17617: LD_ADDR_EXP 103
17621: PUSH
17622: LD_INT 1
17624: ST_TO_ADDR
// if p3 = 36 then
17625: LD_VAR 0 3
17629: PUSH
17630: LD_INT 36
17632: EQUAL
17633: IFFALSE 17643
// sTools := true ;
17635: LD_ADDR_EXP 104
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// if p3 = 101 then
17643: LD_VAR 0 3
17647: PUSH
17648: LD_INT 101
17650: EQUAL
17651: IFFALSE 17661
// sSold := true ;
17653: LD_ADDR_EXP 69
17657: PUSH
17658: LD_INT 1
17660: ST_TO_ADDR
// if p3 = 102 then
17661: LD_VAR 0 3
17665: PUSH
17666: LD_INT 102
17668: EQUAL
17669: IFFALSE 17679
// sDiff := true ;
17671: LD_ADDR_EXP 70
17675: PUSH
17676: LD_INT 1
17678: ST_TO_ADDR
// if p3 = 103 then
17679: LD_VAR 0 3
17683: PUSH
17684: LD_INT 103
17686: EQUAL
17687: IFFALSE 17697
// sFog := true ;
17689: LD_ADDR_EXP 73
17693: PUSH
17694: LD_INT 1
17696: ST_TO_ADDR
// if p3 = 104 then
17697: LD_VAR 0 3
17701: PUSH
17702: LD_INT 104
17704: EQUAL
17705: IFFALSE 17715
// sReset := true ;
17707: LD_ADDR_EXP 74
17711: PUSH
17712: LD_INT 1
17714: ST_TO_ADDR
// if p3 = 105 then
17715: LD_VAR 0 3
17719: PUSH
17720: LD_INT 105
17722: EQUAL
17723: IFFALSE 17733
// sSun := true ;
17725: LD_ADDR_EXP 75
17729: PUSH
17730: LD_INT 1
17732: ST_TO_ADDR
// if p3 = 106 then
17733: LD_VAR 0 3
17737: PUSH
17738: LD_INT 106
17740: EQUAL
17741: IFFALSE 17751
// sTiger := true ;
17743: LD_ADDR_EXP 71
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
// if p3 = 107 then
17751: LD_VAR 0 3
17755: PUSH
17756: LD_INT 107
17758: EQUAL
17759: IFFALSE 17769
// sBomb := true ;
17761: LD_ADDR_EXP 72
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
// if p3 = 108 then
17769: LD_VAR 0 3
17773: PUSH
17774: LD_INT 108
17776: EQUAL
17777: IFFALSE 17787
// sWound := true ;
17779: LD_ADDR_EXP 80
17783: PUSH
17784: LD_INT 1
17786: ST_TO_ADDR
// if p3 = 109 then
17787: LD_VAR 0 3
17791: PUSH
17792: LD_INT 109
17794: EQUAL
17795: IFFALSE 17805
// sBetray := true ;
17797: LD_ADDR_EXP 84
17801: PUSH
17802: LD_INT 1
17804: ST_TO_ADDR
// if p3 = 110 then
17805: LD_VAR 0 3
17809: PUSH
17810: LD_INT 110
17812: EQUAL
17813: IFFALSE 17823
// sContamin := true ;
17815: LD_ADDR_EXP 85
17819: PUSH
17820: LD_INT 1
17822: ST_TO_ADDR
// if p3 = 111 then
17823: LD_VAR 0 3
17827: PUSH
17828: LD_INT 111
17830: EQUAL
17831: IFFALSE 17841
// sOil := true ;
17833: LD_ADDR_EXP 87
17837: PUSH
17838: LD_INT 1
17840: ST_TO_ADDR
// if p3 = 112 then
17841: LD_VAR 0 3
17845: PUSH
17846: LD_INT 112
17848: EQUAL
17849: IFFALSE 17859
// sStu := true ;
17851: LD_ADDR_EXP 91
17855: PUSH
17856: LD_INT 1
17858: ST_TO_ADDR
// if p3 = 113 then
17859: LD_VAR 0 3
17863: PUSH
17864: LD_INT 113
17866: EQUAL
17867: IFFALSE 17877
// sBazooka := true ;
17869: LD_ADDR_EXP 94
17873: PUSH
17874: LD_INT 1
17876: ST_TO_ADDR
// if p3 = 114 then
17877: LD_VAR 0 3
17881: PUSH
17882: LD_INT 114
17884: EQUAL
17885: IFFALSE 17895
// sMortar := true ;
17887: LD_ADDR_EXP 95
17891: PUSH
17892: LD_INT 1
17894: ST_TO_ADDR
// if p3 = 115 then
17895: LD_VAR 0 3
17899: PUSH
17900: LD_INT 115
17902: EQUAL
17903: IFFALSE 17913
// sRanger := true ;
17905: LD_ADDR_EXP 105
17909: PUSH
17910: LD_INT 1
17912: ST_TO_ADDR
// if p3 = 116 then
17913: LD_VAR 0 3
17917: PUSH
17918: LD_INT 116
17920: EQUAL
17921: IFFALSE 17931
// sComputer := true ;
17923: LD_ADDR_EXP 106
17927: PUSH
17928: LD_INT 1
17930: ST_TO_ADDR
// if p3 = 117 then
17931: LD_VAR 0 3
17935: PUSH
17936: LD_INT 117
17938: EQUAL
17939: IFFALSE 17949
// s30 := true ;
17941: LD_ADDR_EXP 107
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if p3 = 118 then
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 118
17956: EQUAL
17957: IFFALSE 17967
// s60 := true ;
17959: LD_ADDR_EXP 108
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
// end ; if p2 = 101 then
17967: LD_VAR 0 2
17971: PUSH
17972: LD_INT 101
17974: EQUAL
17975: IFFALSE 18103
// begin case p3 of 1 :
17977: LD_VAR 0 3
17981: PUSH
17982: LD_INT 1
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 17997
17990: POP
// hHackUnlimitedResources ; 2 :
17991: CALL 29699 0 0
17995: GO 18103
17997: LD_INT 2
17999: DOUBLE
18000: EQUAL
18001: IFTRUE 18005
18003: GO 18012
18005: POP
// hHackSetLevel10 ; 3 :
18006: CALL 29832 0 0
18010: GO 18103
18012: LD_INT 3
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18020
18018: GO 18027
18020: POP
// hHackSetLevel10YourUnits ; 4 :
18021: CALL 29917 0 0
18025: GO 18103
18027: LD_INT 4
18029: DOUBLE
18030: EQUAL
18031: IFTRUE 18035
18033: GO 18042
18035: POP
// hHackInvincible ; 5 :
18036: CALL 30365 0 0
18040: GO 18103
18042: LD_INT 5
18044: DOUBLE
18045: EQUAL
18046: IFTRUE 18050
18048: GO 18057
18050: POP
// hHackInvisible ; 6 :
18051: CALL 30476 0 0
18055: GO 18103
18057: LD_INT 6
18059: DOUBLE
18060: EQUAL
18061: IFTRUE 18065
18063: GO 18072
18065: POP
// hHackChangeYourSide ; 7 :
18066: CALL 30533 0 0
18070: GO 18103
18072: LD_INT 7
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18087
18080: POP
// hHackChangeUnitSide ; 8 :
18081: CALL 30575 0 0
18085: GO 18103
18087: LD_INT 8
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18102
18095: POP
// hHackFog ; end ;
18096: CALL 30676 0 0
18100: GO 18103
18102: POP
// end ; end ;
18103: LD_VAR 0 7
18107: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18108: GO 18110
18110: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18111: LD_STRING initStreamRollete();
18113: PPUSH
18114: CALL_OW 559
// InitStreamMode ;
18118: CALL 18127 0 0
// DefineStreamItems ( ) ;
18122: CALL 18591 0 0
// end ;
18126: END
// function InitStreamMode ; begin
18127: LD_INT 0
18129: PPUSH
// streamModeActive := false ;
18130: LD_ADDR_EXP 52
18134: PUSH
18135: LD_INT 0
18137: ST_TO_ADDR
// normalCounter := 36 ;
18138: LD_ADDR_EXP 53
18142: PUSH
18143: LD_INT 36
18145: ST_TO_ADDR
// hardcoreCounter := 16 ;
18146: LD_ADDR_EXP 54
18150: PUSH
18151: LD_INT 16
18153: ST_TO_ADDR
// sRocket := false ;
18154: LD_ADDR_EXP 57
18158: PUSH
18159: LD_INT 0
18161: ST_TO_ADDR
// sSpeed := false ;
18162: LD_ADDR_EXP 56
18166: PUSH
18167: LD_INT 0
18169: ST_TO_ADDR
// sEngine := false ;
18170: LD_ADDR_EXP 58
18174: PUSH
18175: LD_INT 0
18177: ST_TO_ADDR
// sSpec := false ;
18178: LD_ADDR_EXP 55
18182: PUSH
18183: LD_INT 0
18185: ST_TO_ADDR
// sLevel := false ;
18186: LD_ADDR_EXP 59
18190: PUSH
18191: LD_INT 0
18193: ST_TO_ADDR
// sArmoury := false ;
18194: LD_ADDR_EXP 60
18198: PUSH
18199: LD_INT 0
18201: ST_TO_ADDR
// sRadar := false ;
18202: LD_ADDR_EXP 61
18206: PUSH
18207: LD_INT 0
18209: ST_TO_ADDR
// sBunker := false ;
18210: LD_ADDR_EXP 62
18214: PUSH
18215: LD_INT 0
18217: ST_TO_ADDR
// sHack := false ;
18218: LD_ADDR_EXP 63
18222: PUSH
18223: LD_INT 0
18225: ST_TO_ADDR
// sFire := false ;
18226: LD_ADDR_EXP 64
18230: PUSH
18231: LD_INT 0
18233: ST_TO_ADDR
// sRefresh := false ;
18234: LD_ADDR_EXP 65
18238: PUSH
18239: LD_INT 0
18241: ST_TO_ADDR
// sExp := false ;
18242: LD_ADDR_EXP 66
18246: PUSH
18247: LD_INT 0
18249: ST_TO_ADDR
// sDepot := false ;
18250: LD_ADDR_EXP 67
18254: PUSH
18255: LD_INT 0
18257: ST_TO_ADDR
// sFlag := false ;
18258: LD_ADDR_EXP 68
18262: PUSH
18263: LD_INT 0
18265: ST_TO_ADDR
// sKamikadze := false ;
18266: LD_ADDR_EXP 76
18270: PUSH
18271: LD_INT 0
18273: ST_TO_ADDR
// sTroll := false ;
18274: LD_ADDR_EXP 77
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// sSlow := false ;
18282: LD_ADDR_EXP 78
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// sLack := false ;
18290: LD_ADDR_EXP 79
18294: PUSH
18295: LD_INT 0
18297: ST_TO_ADDR
// sTank := false ;
18298: LD_ADDR_EXP 81
18302: PUSH
18303: LD_INT 0
18305: ST_TO_ADDR
// sRemote := false ;
18306: LD_ADDR_EXP 82
18310: PUSH
18311: LD_INT 0
18313: ST_TO_ADDR
// sPowell := false ;
18314: LD_ADDR_EXP 83
18318: PUSH
18319: LD_INT 0
18321: ST_TO_ADDR
// sTeleport := false ;
18322: LD_ADDR_EXP 86
18326: PUSH
18327: LD_INT 0
18329: ST_TO_ADDR
// sOilTower := false ;
18330: LD_ADDR_EXP 88
18334: PUSH
18335: LD_INT 0
18337: ST_TO_ADDR
// sShovel := false ;
18338: LD_ADDR_EXP 89
18342: PUSH
18343: LD_INT 0
18345: ST_TO_ADDR
// sSheik := false ;
18346: LD_ADDR_EXP 90
18350: PUSH
18351: LD_INT 0
18353: ST_TO_ADDR
// sEarthquake := false ;
18354: LD_ADDR_EXP 92
18358: PUSH
18359: LD_INT 0
18361: ST_TO_ADDR
// sAI := false ;
18362: LD_ADDR_EXP 93
18366: PUSH
18367: LD_INT 0
18369: ST_TO_ADDR
// sCargo := false ;
18370: LD_ADDR_EXP 96
18374: PUSH
18375: LD_INT 0
18377: ST_TO_ADDR
// sDLaser := false ;
18378: LD_ADDR_EXP 97
18382: PUSH
18383: LD_INT 0
18385: ST_TO_ADDR
// sExchange := false ;
18386: LD_ADDR_EXP 98
18390: PUSH
18391: LD_INT 0
18393: ST_TO_ADDR
// sFac := false ;
18394: LD_ADDR_EXP 99
18398: PUSH
18399: LD_INT 0
18401: ST_TO_ADDR
// sPower := false ;
18402: LD_ADDR_EXP 100
18406: PUSH
18407: LD_INT 0
18409: ST_TO_ADDR
// sRandom := false ;
18410: LD_ADDR_EXP 101
18414: PUSH
18415: LD_INT 0
18417: ST_TO_ADDR
// sShield := false ;
18418: LD_ADDR_EXP 102
18422: PUSH
18423: LD_INT 0
18425: ST_TO_ADDR
// sTime := false ;
18426: LD_ADDR_EXP 103
18430: PUSH
18431: LD_INT 0
18433: ST_TO_ADDR
// sTools := false ;
18434: LD_ADDR_EXP 104
18438: PUSH
18439: LD_INT 0
18441: ST_TO_ADDR
// sSold := false ;
18442: LD_ADDR_EXP 69
18446: PUSH
18447: LD_INT 0
18449: ST_TO_ADDR
// sDiff := false ;
18450: LD_ADDR_EXP 70
18454: PUSH
18455: LD_INT 0
18457: ST_TO_ADDR
// sFog := false ;
18458: LD_ADDR_EXP 73
18462: PUSH
18463: LD_INT 0
18465: ST_TO_ADDR
// sReset := false ;
18466: LD_ADDR_EXP 74
18470: PUSH
18471: LD_INT 0
18473: ST_TO_ADDR
// sSun := false ;
18474: LD_ADDR_EXP 75
18478: PUSH
18479: LD_INT 0
18481: ST_TO_ADDR
// sTiger := false ;
18482: LD_ADDR_EXP 71
18486: PUSH
18487: LD_INT 0
18489: ST_TO_ADDR
// sBomb := false ;
18490: LD_ADDR_EXP 72
18494: PUSH
18495: LD_INT 0
18497: ST_TO_ADDR
// sWound := false ;
18498: LD_ADDR_EXP 80
18502: PUSH
18503: LD_INT 0
18505: ST_TO_ADDR
// sBetray := false ;
18506: LD_ADDR_EXP 84
18510: PUSH
18511: LD_INT 0
18513: ST_TO_ADDR
// sContamin := false ;
18514: LD_ADDR_EXP 85
18518: PUSH
18519: LD_INT 0
18521: ST_TO_ADDR
// sOil := false ;
18522: LD_ADDR_EXP 87
18526: PUSH
18527: LD_INT 0
18529: ST_TO_ADDR
// sStu := false ;
18530: LD_ADDR_EXP 91
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// sBazooka := false ;
18538: LD_ADDR_EXP 94
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// sMortar := false ;
18546: LD_ADDR_EXP 95
18550: PUSH
18551: LD_INT 0
18553: ST_TO_ADDR
// sRanger := false ;
18554: LD_ADDR_EXP 105
18558: PUSH
18559: LD_INT 0
18561: ST_TO_ADDR
// sComputer := false ;
18562: LD_ADDR_EXP 106
18566: PUSH
18567: LD_INT 0
18569: ST_TO_ADDR
// s30 := false ;
18570: LD_ADDR_EXP 107
18574: PUSH
18575: LD_INT 0
18577: ST_TO_ADDR
// s60 := false ;
18578: LD_ADDR_EXP 108
18582: PUSH
18583: LD_INT 0
18585: ST_TO_ADDR
// end ;
18586: LD_VAR 0 1
18590: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
// result := [ ] ;
18598: LD_ADDR_VAR 0 1
18602: PUSH
18603: EMPTY
18604: ST_TO_ADDR
// if campaign_id = 1 then
18605: LD_OWVAR 69
18609: PUSH
18610: LD_INT 1
18612: EQUAL
18613: IFFALSE 21779
// begin case mission_number of 1 :
18615: LD_OWVAR 70
18619: PUSH
18620: LD_INT 1
18622: DOUBLE
18623: EQUAL
18624: IFTRUE 18628
18626: GO 18704
18628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18629: LD_ADDR_VAR 0 1
18633: PUSH
18634: LD_INT 2
18636: PUSH
18637: LD_INT 4
18639: PUSH
18640: LD_INT 11
18642: PUSH
18643: LD_INT 12
18645: PUSH
18646: LD_INT 15
18648: PUSH
18649: LD_INT 16
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_INT 23
18657: PUSH
18658: LD_INT 26
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 101
18674: PUSH
18675: LD_INT 102
18677: PUSH
18678: LD_INT 106
18680: PUSH
18681: LD_INT 116
18683: PUSH
18684: LD_INT 117
18686: PUSH
18687: LD_INT 118
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: ST_TO_ADDR
18702: GO 21777
18704: LD_INT 2
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18796
18712: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 4
18723: PUSH
18724: LD_INT 11
18726: PUSH
18727: LD_INT 12
18729: PUSH
18730: LD_INT 15
18732: PUSH
18733: LD_INT 16
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_INT 23
18741: PUSH
18742: LD_INT 26
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 101
18758: PUSH
18759: LD_INT 102
18761: PUSH
18762: LD_INT 105
18764: PUSH
18765: LD_INT 106
18767: PUSH
18768: LD_INT 108
18770: PUSH
18771: LD_INT 116
18773: PUSH
18774: LD_INT 117
18776: PUSH
18777: LD_INT 118
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: ST_TO_ADDR
18794: GO 21777
18796: LD_INT 3
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18892
18804: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18805: LD_ADDR_VAR 0 1
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: LD_INT 4
18815: PUSH
18816: LD_INT 5
18818: PUSH
18819: LD_INT 11
18821: PUSH
18822: LD_INT 12
18824: PUSH
18825: LD_INT 15
18827: PUSH
18828: LD_INT 16
18830: PUSH
18831: LD_INT 22
18833: PUSH
18834: LD_INT 26
18836: PUSH
18837: LD_INT 36
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 101
18854: PUSH
18855: LD_INT 102
18857: PUSH
18858: LD_INT 105
18860: PUSH
18861: LD_INT 106
18863: PUSH
18864: LD_INT 108
18866: PUSH
18867: LD_INT 116
18869: PUSH
18870: LD_INT 117
18872: PUSH
18873: LD_INT 118
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: ST_TO_ADDR
18890: GO 21777
18892: LD_INT 4
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 18996
18900: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 4
18911: PUSH
18912: LD_INT 5
18914: PUSH
18915: LD_INT 8
18917: PUSH
18918: LD_INT 11
18920: PUSH
18921: LD_INT 12
18923: PUSH
18924: LD_INT 15
18926: PUSH
18927: LD_INT 16
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 23
18935: PUSH
18936: LD_INT 26
18938: PUSH
18939: LD_INT 36
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 101
18958: PUSH
18959: LD_INT 102
18961: PUSH
18962: LD_INT 105
18964: PUSH
18965: LD_INT 106
18967: PUSH
18968: LD_INT 108
18970: PUSH
18971: LD_INT 116
18973: PUSH
18974: LD_INT 117
18976: PUSH
18977: LD_INT 118
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 21777
18996: LD_INT 5
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19116
19004: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 6
19021: PUSH
19022: LD_INT 8
19024: PUSH
19025: LD_INT 11
19027: PUSH
19028: LD_INT 12
19030: PUSH
19031: LD_INT 15
19033: PUSH
19034: LD_INT 16
19036: PUSH
19037: LD_INT 22
19039: PUSH
19040: LD_INT 23
19042: PUSH
19043: LD_INT 25
19045: PUSH
19046: LD_INT 26
19048: PUSH
19049: LD_INT 36
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 101
19070: PUSH
19071: LD_INT 102
19073: PUSH
19074: LD_INT 105
19076: PUSH
19077: LD_INT 106
19079: PUSH
19080: LD_INT 108
19082: PUSH
19083: LD_INT 109
19085: PUSH
19086: LD_INT 112
19088: PUSH
19089: LD_INT 116
19091: PUSH
19092: LD_INT 117
19094: PUSH
19095: LD_INT 118
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: ST_TO_ADDR
19114: GO 21777
19116: LD_INT 6
19118: DOUBLE
19119: EQUAL
19120: IFTRUE 19124
19122: GO 19256
19124: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19125: LD_ADDR_VAR 0 1
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: LD_INT 4
19135: PUSH
19136: LD_INT 5
19138: PUSH
19139: LD_INT 6
19141: PUSH
19142: LD_INT 8
19144: PUSH
19145: LD_INT 11
19147: PUSH
19148: LD_INT 12
19150: PUSH
19151: LD_INT 15
19153: PUSH
19154: LD_INT 16
19156: PUSH
19157: LD_INT 20
19159: PUSH
19160: LD_INT 21
19162: PUSH
19163: LD_INT 22
19165: PUSH
19166: LD_INT 23
19168: PUSH
19169: LD_INT 25
19171: PUSH
19172: LD_INT 26
19174: PUSH
19175: LD_INT 30
19177: PUSH
19178: LD_INT 31
19180: PUSH
19181: LD_INT 32
19183: PUSH
19184: LD_INT 36
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 101
19210: PUSH
19211: LD_INT 102
19213: PUSH
19214: LD_INT 105
19216: PUSH
19217: LD_INT 106
19219: PUSH
19220: LD_INT 108
19222: PUSH
19223: LD_INT 109
19225: PUSH
19226: LD_INT 112
19228: PUSH
19229: LD_INT 116
19231: PUSH
19232: LD_INT 117
19234: PUSH
19235: LD_INT 118
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: ST_TO_ADDR
19254: GO 21777
19256: LD_INT 7
19258: DOUBLE
19259: EQUAL
19260: IFTRUE 19264
19262: GO 19376
19264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19265: LD_ADDR_VAR 0 1
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: LD_INT 4
19275: PUSH
19276: LD_INT 5
19278: PUSH
19279: LD_INT 7
19281: PUSH
19282: LD_INT 11
19284: PUSH
19285: LD_INT 12
19287: PUSH
19288: LD_INT 15
19290: PUSH
19291: LD_INT 16
19293: PUSH
19294: LD_INT 20
19296: PUSH
19297: LD_INT 21
19299: PUSH
19300: LD_INT 22
19302: PUSH
19303: LD_INT 23
19305: PUSH
19306: LD_INT 25
19308: PUSH
19309: LD_INT 26
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 101
19330: PUSH
19331: LD_INT 102
19333: PUSH
19334: LD_INT 103
19336: PUSH
19337: LD_INT 105
19339: PUSH
19340: LD_INT 106
19342: PUSH
19343: LD_INT 108
19345: PUSH
19346: LD_INT 112
19348: PUSH
19349: LD_INT 116
19351: PUSH
19352: LD_INT 117
19354: PUSH
19355: LD_INT 118
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: ST_TO_ADDR
19374: GO 21777
19376: LD_INT 8
19378: DOUBLE
19379: EQUAL
19380: IFTRUE 19384
19382: GO 19524
19384: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19385: LD_ADDR_VAR 0 1
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: LD_INT 4
19395: PUSH
19396: LD_INT 5
19398: PUSH
19399: LD_INT 6
19401: PUSH
19402: LD_INT 7
19404: PUSH
19405: LD_INT 8
19407: PUSH
19408: LD_INT 11
19410: PUSH
19411: LD_INT 12
19413: PUSH
19414: LD_INT 15
19416: PUSH
19417: LD_INT 16
19419: PUSH
19420: LD_INT 20
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 23
19431: PUSH
19432: LD_INT 25
19434: PUSH
19435: LD_INT 26
19437: PUSH
19438: LD_INT 30
19440: PUSH
19441: LD_INT 31
19443: PUSH
19444: LD_INT 32
19446: PUSH
19447: LD_INT 36
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 101
19474: PUSH
19475: LD_INT 102
19477: PUSH
19478: LD_INT 103
19480: PUSH
19481: LD_INT 105
19483: PUSH
19484: LD_INT 106
19486: PUSH
19487: LD_INT 108
19489: PUSH
19490: LD_INT 109
19492: PUSH
19493: LD_INT 112
19495: PUSH
19496: LD_INT 116
19498: PUSH
19499: LD_INT 117
19501: PUSH
19502: LD_INT 118
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: ST_TO_ADDR
19522: GO 21777
19524: LD_INT 9
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19680
19532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19533: LD_ADDR_VAR 0 1
19537: PUSH
19538: LD_INT 2
19540: PUSH
19541: LD_INT 4
19543: PUSH
19544: LD_INT 5
19546: PUSH
19547: LD_INT 6
19549: PUSH
19550: LD_INT 7
19552: PUSH
19553: LD_INT 8
19555: PUSH
19556: LD_INT 11
19558: PUSH
19559: LD_INT 12
19561: PUSH
19562: LD_INT 15
19564: PUSH
19565: LD_INT 16
19567: PUSH
19568: LD_INT 20
19570: PUSH
19571: LD_INT 21
19573: PUSH
19574: LD_INT 22
19576: PUSH
19577: LD_INT 23
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 26
19585: PUSH
19586: LD_INT 28
19588: PUSH
19589: LD_INT 30
19591: PUSH
19592: LD_INT 31
19594: PUSH
19595: LD_INT 32
19597: PUSH
19598: LD_INT 36
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 101
19626: PUSH
19627: LD_INT 102
19629: PUSH
19630: LD_INT 103
19632: PUSH
19633: LD_INT 105
19635: PUSH
19636: LD_INT 106
19638: PUSH
19639: LD_INT 108
19641: PUSH
19642: LD_INT 109
19644: PUSH
19645: LD_INT 112
19647: PUSH
19648: LD_INT 114
19650: PUSH
19651: LD_INT 116
19653: PUSH
19654: LD_INT 117
19656: PUSH
19657: LD_INT 118
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: ST_TO_ADDR
19678: GO 21777
19680: LD_INT 10
19682: DOUBLE
19683: EQUAL
19684: IFTRUE 19688
19686: GO 19884
19688: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19689: LD_ADDR_VAR 0 1
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 4
19699: PUSH
19700: LD_INT 5
19702: PUSH
19703: LD_INT 6
19705: PUSH
19706: LD_INT 7
19708: PUSH
19709: LD_INT 8
19711: PUSH
19712: LD_INT 9
19714: PUSH
19715: LD_INT 10
19717: PUSH
19718: LD_INT 11
19720: PUSH
19721: LD_INT 12
19723: PUSH
19724: LD_INT 13
19726: PUSH
19727: LD_INT 14
19729: PUSH
19730: LD_INT 15
19732: PUSH
19733: LD_INT 16
19735: PUSH
19736: LD_INT 17
19738: PUSH
19739: LD_INT 18
19741: PUSH
19742: LD_INT 19
19744: PUSH
19745: LD_INT 20
19747: PUSH
19748: LD_INT 21
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_INT 23
19756: PUSH
19757: LD_INT 24
19759: PUSH
19760: LD_INT 25
19762: PUSH
19763: LD_INT 26
19765: PUSH
19766: LD_INT 28
19768: PUSH
19769: LD_INT 30
19771: PUSH
19772: LD_INT 31
19774: PUSH
19775: LD_INT 32
19777: PUSH
19778: LD_INT 36
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 101
19814: PUSH
19815: LD_INT 102
19817: PUSH
19818: LD_INT 103
19820: PUSH
19821: LD_INT 104
19823: PUSH
19824: LD_INT 105
19826: PUSH
19827: LD_INT 106
19829: PUSH
19830: LD_INT 107
19832: PUSH
19833: LD_INT 108
19835: PUSH
19836: LD_INT 109
19838: PUSH
19839: LD_INT 110
19841: PUSH
19842: LD_INT 111
19844: PUSH
19845: LD_INT 112
19847: PUSH
19848: LD_INT 114
19850: PUSH
19851: LD_INT 116
19853: PUSH
19854: LD_INT 117
19856: PUSH
19857: LD_INT 118
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: ST_TO_ADDR
19882: GO 21777
19884: LD_INT 11
19886: DOUBLE
19887: EQUAL
19888: IFTRUE 19892
19890: GO 20096
19892: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19893: LD_ADDR_VAR 0 1
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: LD_INT 4
19906: PUSH
19907: LD_INT 5
19909: PUSH
19910: LD_INT 6
19912: PUSH
19913: LD_INT 7
19915: PUSH
19916: LD_INT 8
19918: PUSH
19919: LD_INT 9
19921: PUSH
19922: LD_INT 10
19924: PUSH
19925: LD_INT 11
19927: PUSH
19928: LD_INT 12
19930: PUSH
19931: LD_INT 13
19933: PUSH
19934: LD_INT 14
19936: PUSH
19937: LD_INT 15
19939: PUSH
19940: LD_INT 16
19942: PUSH
19943: LD_INT 17
19945: PUSH
19946: LD_INT 18
19948: PUSH
19949: LD_INT 19
19951: PUSH
19952: LD_INT 20
19954: PUSH
19955: LD_INT 21
19957: PUSH
19958: LD_INT 22
19960: PUSH
19961: LD_INT 23
19963: PUSH
19964: LD_INT 24
19966: PUSH
19967: LD_INT 25
19969: PUSH
19970: LD_INT 26
19972: PUSH
19973: LD_INT 28
19975: PUSH
19976: LD_INT 30
19978: PUSH
19979: LD_INT 31
19981: PUSH
19982: LD_INT 32
19984: PUSH
19985: LD_INT 34
19987: PUSH
19988: LD_INT 36
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 101
20026: PUSH
20027: LD_INT 102
20029: PUSH
20030: LD_INT 103
20032: PUSH
20033: LD_INT 104
20035: PUSH
20036: LD_INT 105
20038: PUSH
20039: LD_INT 106
20041: PUSH
20042: LD_INT 107
20044: PUSH
20045: LD_INT 108
20047: PUSH
20048: LD_INT 109
20050: PUSH
20051: LD_INT 110
20053: PUSH
20054: LD_INT 111
20056: PUSH
20057: LD_INT 112
20059: PUSH
20060: LD_INT 114
20062: PUSH
20063: LD_INT 116
20065: PUSH
20066: LD_INT 117
20068: PUSH
20069: LD_INT 118
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: ST_TO_ADDR
20094: GO 21777
20096: LD_INT 12
20098: DOUBLE
20099: EQUAL
20100: IFTRUE 20104
20102: GO 20324
20104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20105: LD_ADDR_VAR 0 1
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: LD_INT 3
20118: PUSH
20119: LD_INT 4
20121: PUSH
20122: LD_INT 5
20124: PUSH
20125: LD_INT 6
20127: PUSH
20128: LD_INT 7
20130: PUSH
20131: LD_INT 8
20133: PUSH
20134: LD_INT 9
20136: PUSH
20137: LD_INT 10
20139: PUSH
20140: LD_INT 11
20142: PUSH
20143: LD_INT 12
20145: PUSH
20146: LD_INT 13
20148: PUSH
20149: LD_INT 14
20151: PUSH
20152: LD_INT 15
20154: PUSH
20155: LD_INT 16
20157: PUSH
20158: LD_INT 17
20160: PUSH
20161: LD_INT 18
20163: PUSH
20164: LD_INT 19
20166: PUSH
20167: LD_INT 20
20169: PUSH
20170: LD_INT 21
20172: PUSH
20173: LD_INT 22
20175: PUSH
20176: LD_INT 23
20178: PUSH
20179: LD_INT 24
20181: PUSH
20182: LD_INT 25
20184: PUSH
20185: LD_INT 26
20187: PUSH
20188: LD_INT 27
20190: PUSH
20191: LD_INT 28
20193: PUSH
20194: LD_INT 30
20196: PUSH
20197: LD_INT 31
20199: PUSH
20200: LD_INT 32
20202: PUSH
20203: LD_INT 33
20205: PUSH
20206: LD_INT 34
20208: PUSH
20209: LD_INT 36
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 101
20250: PUSH
20251: LD_INT 102
20253: PUSH
20254: LD_INT 103
20256: PUSH
20257: LD_INT 104
20259: PUSH
20260: LD_INT 105
20262: PUSH
20263: LD_INT 106
20265: PUSH
20266: LD_INT 107
20268: PUSH
20269: LD_INT 108
20271: PUSH
20272: LD_INT 109
20274: PUSH
20275: LD_INT 110
20277: PUSH
20278: LD_INT 111
20280: PUSH
20281: LD_INT 112
20283: PUSH
20284: LD_INT 113
20286: PUSH
20287: LD_INT 114
20289: PUSH
20290: LD_INT 116
20292: PUSH
20293: LD_INT 117
20295: PUSH
20296: LD_INT 118
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: ST_TO_ADDR
20322: GO 21777
20324: LD_INT 13
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20540
20332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20333: LD_ADDR_VAR 0 1
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 3
20346: PUSH
20347: LD_INT 4
20349: PUSH
20350: LD_INT 5
20352: PUSH
20353: LD_INT 8
20355: PUSH
20356: LD_INT 9
20358: PUSH
20359: LD_INT 10
20361: PUSH
20362: LD_INT 11
20364: PUSH
20365: LD_INT 12
20367: PUSH
20368: LD_INT 14
20370: PUSH
20371: LD_INT 15
20373: PUSH
20374: LD_INT 16
20376: PUSH
20377: LD_INT 17
20379: PUSH
20380: LD_INT 18
20382: PUSH
20383: LD_INT 19
20385: PUSH
20386: LD_INT 20
20388: PUSH
20389: LD_INT 21
20391: PUSH
20392: LD_INT 22
20394: PUSH
20395: LD_INT 23
20397: PUSH
20398: LD_INT 24
20400: PUSH
20401: LD_INT 25
20403: PUSH
20404: LD_INT 26
20406: PUSH
20407: LD_INT 27
20409: PUSH
20410: LD_INT 28
20412: PUSH
20413: LD_INT 30
20415: PUSH
20416: LD_INT 31
20418: PUSH
20419: LD_INT 32
20421: PUSH
20422: LD_INT 33
20424: PUSH
20425: LD_INT 34
20427: PUSH
20428: LD_INT 36
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 101
20466: PUSH
20467: LD_INT 102
20469: PUSH
20470: LD_INT 103
20472: PUSH
20473: LD_INT 104
20475: PUSH
20476: LD_INT 105
20478: PUSH
20479: LD_INT 106
20481: PUSH
20482: LD_INT 107
20484: PUSH
20485: LD_INT 108
20487: PUSH
20488: LD_INT 109
20490: PUSH
20491: LD_INT 110
20493: PUSH
20494: LD_INT 111
20496: PUSH
20497: LD_INT 112
20499: PUSH
20500: LD_INT 113
20502: PUSH
20503: LD_INT 114
20505: PUSH
20506: LD_INT 116
20508: PUSH
20509: LD_INT 117
20511: PUSH
20512: LD_INT 118
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: ST_TO_ADDR
20538: GO 21777
20540: LD_INT 14
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20772
20548: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 3
20562: PUSH
20563: LD_INT 4
20565: PUSH
20566: LD_INT 5
20568: PUSH
20569: LD_INT 6
20571: PUSH
20572: LD_INT 7
20574: PUSH
20575: LD_INT 8
20577: PUSH
20578: LD_INT 9
20580: PUSH
20581: LD_INT 10
20583: PUSH
20584: LD_INT 11
20586: PUSH
20587: LD_INT 12
20589: PUSH
20590: LD_INT 13
20592: PUSH
20593: LD_INT 14
20595: PUSH
20596: LD_INT 15
20598: PUSH
20599: LD_INT 16
20601: PUSH
20602: LD_INT 17
20604: PUSH
20605: LD_INT 18
20607: PUSH
20608: LD_INT 19
20610: PUSH
20611: LD_INT 20
20613: PUSH
20614: LD_INT 21
20616: PUSH
20617: LD_INT 22
20619: PUSH
20620: LD_INT 23
20622: PUSH
20623: LD_INT 24
20625: PUSH
20626: LD_INT 25
20628: PUSH
20629: LD_INT 26
20631: PUSH
20632: LD_INT 27
20634: PUSH
20635: LD_INT 28
20637: PUSH
20638: LD_INT 29
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 31
20646: PUSH
20647: LD_INT 32
20649: PUSH
20650: LD_INT 33
20652: PUSH
20653: LD_INT 34
20655: PUSH
20656: LD_INT 36
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 101
20698: PUSH
20699: LD_INT 102
20701: PUSH
20702: LD_INT 103
20704: PUSH
20705: LD_INT 104
20707: PUSH
20708: LD_INT 105
20710: PUSH
20711: LD_INT 106
20713: PUSH
20714: LD_INT 107
20716: PUSH
20717: LD_INT 108
20719: PUSH
20720: LD_INT 109
20722: PUSH
20723: LD_INT 110
20725: PUSH
20726: LD_INT 111
20728: PUSH
20729: LD_INT 112
20731: PUSH
20732: LD_INT 113
20734: PUSH
20735: LD_INT 114
20737: PUSH
20738: LD_INT 116
20740: PUSH
20741: LD_INT 117
20743: PUSH
20744: LD_INT 118
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: ST_TO_ADDR
20770: GO 21777
20772: LD_INT 15
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 21004
20780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20781: LD_ADDR_VAR 0 1
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 3
20794: PUSH
20795: LD_INT 4
20797: PUSH
20798: LD_INT 5
20800: PUSH
20801: LD_INT 6
20803: PUSH
20804: LD_INT 7
20806: PUSH
20807: LD_INT 8
20809: PUSH
20810: LD_INT 9
20812: PUSH
20813: LD_INT 10
20815: PUSH
20816: LD_INT 11
20818: PUSH
20819: LD_INT 12
20821: PUSH
20822: LD_INT 13
20824: PUSH
20825: LD_INT 14
20827: PUSH
20828: LD_INT 15
20830: PUSH
20831: LD_INT 16
20833: PUSH
20834: LD_INT 17
20836: PUSH
20837: LD_INT 18
20839: PUSH
20840: LD_INT 19
20842: PUSH
20843: LD_INT 20
20845: PUSH
20846: LD_INT 21
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_INT 23
20854: PUSH
20855: LD_INT 24
20857: PUSH
20858: LD_INT 25
20860: PUSH
20861: LD_INT 26
20863: PUSH
20864: LD_INT 27
20866: PUSH
20867: LD_INT 28
20869: PUSH
20870: LD_INT 29
20872: PUSH
20873: LD_INT 30
20875: PUSH
20876: LD_INT 31
20878: PUSH
20879: LD_INT 32
20881: PUSH
20882: LD_INT 33
20884: PUSH
20885: LD_INT 34
20887: PUSH
20888: LD_INT 36
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 101
20930: PUSH
20931: LD_INT 102
20933: PUSH
20934: LD_INT 103
20936: PUSH
20937: LD_INT 104
20939: PUSH
20940: LD_INT 105
20942: PUSH
20943: LD_INT 106
20945: PUSH
20946: LD_INT 107
20948: PUSH
20949: LD_INT 108
20951: PUSH
20952: LD_INT 109
20954: PUSH
20955: LD_INT 110
20957: PUSH
20958: LD_INT 111
20960: PUSH
20961: LD_INT 112
20963: PUSH
20964: LD_INT 113
20966: PUSH
20967: LD_INT 114
20969: PUSH
20970: LD_INT 116
20972: PUSH
20973: LD_INT 117
20975: PUSH
20976: LD_INT 118
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: ST_TO_ADDR
21002: GO 21777
21004: LD_INT 16
21006: DOUBLE
21007: EQUAL
21008: IFTRUE 21012
21010: GO 21148
21012: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21013: LD_ADDR_VAR 0 1
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: LD_INT 4
21023: PUSH
21024: LD_INT 5
21026: PUSH
21027: LD_INT 7
21029: PUSH
21030: LD_INT 11
21032: PUSH
21033: LD_INT 12
21035: PUSH
21036: LD_INT 15
21038: PUSH
21039: LD_INT 16
21041: PUSH
21042: LD_INT 20
21044: PUSH
21045: LD_INT 21
21047: PUSH
21048: LD_INT 22
21050: PUSH
21051: LD_INT 23
21053: PUSH
21054: LD_INT 25
21056: PUSH
21057: LD_INT 26
21059: PUSH
21060: LD_INT 30
21062: PUSH
21063: LD_INT 31
21065: PUSH
21066: LD_INT 32
21068: PUSH
21069: LD_INT 33
21071: PUSH
21072: LD_INT 34
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 101
21098: PUSH
21099: LD_INT 102
21101: PUSH
21102: LD_INT 103
21104: PUSH
21105: LD_INT 106
21107: PUSH
21108: LD_INT 108
21110: PUSH
21111: LD_INT 112
21113: PUSH
21114: LD_INT 113
21116: PUSH
21117: LD_INT 114
21119: PUSH
21120: LD_INT 116
21122: PUSH
21123: LD_INT 117
21125: PUSH
21126: LD_INT 118
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: ST_TO_ADDR
21146: GO 21777
21148: LD_INT 17
21150: DOUBLE
21151: EQUAL
21152: IFTRUE 21156
21154: GO 21380
21156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21157: LD_ADDR_VAR 0 1
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 3
21170: PUSH
21171: LD_INT 4
21173: PUSH
21174: LD_INT 5
21176: PUSH
21177: LD_INT 6
21179: PUSH
21180: LD_INT 7
21182: PUSH
21183: LD_INT 8
21185: PUSH
21186: LD_INT 9
21188: PUSH
21189: LD_INT 10
21191: PUSH
21192: LD_INT 11
21194: PUSH
21195: LD_INT 12
21197: PUSH
21198: LD_INT 13
21200: PUSH
21201: LD_INT 14
21203: PUSH
21204: LD_INT 15
21206: PUSH
21207: LD_INT 16
21209: PUSH
21210: LD_INT 17
21212: PUSH
21213: LD_INT 18
21215: PUSH
21216: LD_INT 19
21218: PUSH
21219: LD_INT 20
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 23
21230: PUSH
21231: LD_INT 24
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 26
21239: PUSH
21240: LD_INT 27
21242: PUSH
21243: LD_INT 28
21245: PUSH
21246: LD_INT 29
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: LD_INT 31
21254: PUSH
21255: LD_INT 32
21257: PUSH
21258: LD_INT 33
21260: PUSH
21261: LD_INT 34
21263: PUSH
21264: LD_INT 36
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 101
21306: PUSH
21307: LD_INT 102
21309: PUSH
21310: LD_INT 103
21312: PUSH
21313: LD_INT 104
21315: PUSH
21316: LD_INT 105
21318: PUSH
21319: LD_INT 106
21321: PUSH
21322: LD_INT 107
21324: PUSH
21325: LD_INT 108
21327: PUSH
21328: LD_INT 109
21330: PUSH
21331: LD_INT 110
21333: PUSH
21334: LD_INT 111
21336: PUSH
21337: LD_INT 112
21339: PUSH
21340: LD_INT 113
21342: PUSH
21343: LD_INT 114
21345: PUSH
21346: LD_INT 116
21348: PUSH
21349: LD_INT 117
21351: PUSH
21352: LD_INT 118
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: ST_TO_ADDR
21378: GO 21777
21380: LD_INT 18
21382: DOUBLE
21383: EQUAL
21384: IFTRUE 21388
21386: GO 21536
21388: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21389: LD_ADDR_VAR 0 1
21393: PUSH
21394: LD_INT 2
21396: PUSH
21397: LD_INT 4
21399: PUSH
21400: LD_INT 5
21402: PUSH
21403: LD_INT 7
21405: PUSH
21406: LD_INT 11
21408: PUSH
21409: LD_INT 12
21411: PUSH
21412: LD_INT 15
21414: PUSH
21415: LD_INT 16
21417: PUSH
21418: LD_INT 20
21420: PUSH
21421: LD_INT 21
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_INT 23
21429: PUSH
21430: LD_INT 25
21432: PUSH
21433: LD_INT 26
21435: PUSH
21436: LD_INT 30
21438: PUSH
21439: LD_INT 31
21441: PUSH
21442: LD_INT 32
21444: PUSH
21445: LD_INT 33
21447: PUSH
21448: LD_INT 34
21450: PUSH
21451: LD_INT 35
21453: PUSH
21454: LD_INT 36
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 101
21482: PUSH
21483: LD_INT 102
21485: PUSH
21486: LD_INT 103
21488: PUSH
21489: LD_INT 106
21491: PUSH
21492: LD_INT 108
21494: PUSH
21495: LD_INT 112
21497: PUSH
21498: LD_INT 113
21500: PUSH
21501: LD_INT 114
21503: PUSH
21504: LD_INT 115
21506: PUSH
21507: LD_INT 116
21509: PUSH
21510: LD_INT 117
21512: PUSH
21513: LD_INT 118
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: ST_TO_ADDR
21534: GO 21777
21536: LD_INT 19
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21776
21544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21545: LD_ADDR_VAR 0 1
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: LD_INT 3
21558: PUSH
21559: LD_INT 4
21561: PUSH
21562: LD_INT 5
21564: PUSH
21565: LD_INT 6
21567: PUSH
21568: LD_INT 7
21570: PUSH
21571: LD_INT 8
21573: PUSH
21574: LD_INT 9
21576: PUSH
21577: LD_INT 10
21579: PUSH
21580: LD_INT 11
21582: PUSH
21583: LD_INT 12
21585: PUSH
21586: LD_INT 13
21588: PUSH
21589: LD_INT 14
21591: PUSH
21592: LD_INT 15
21594: PUSH
21595: LD_INT 16
21597: PUSH
21598: LD_INT 17
21600: PUSH
21601: LD_INT 18
21603: PUSH
21604: LD_INT 19
21606: PUSH
21607: LD_INT 20
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 24
21621: PUSH
21622: LD_INT 25
21624: PUSH
21625: LD_INT 26
21627: PUSH
21628: LD_INT 27
21630: PUSH
21631: LD_INT 28
21633: PUSH
21634: LD_INT 29
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 31
21642: PUSH
21643: LD_INT 32
21645: PUSH
21646: LD_INT 33
21648: PUSH
21649: LD_INT 34
21651: PUSH
21652: LD_INT 35
21654: PUSH
21655: LD_INT 36
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 101
21698: PUSH
21699: LD_INT 102
21701: PUSH
21702: LD_INT 103
21704: PUSH
21705: LD_INT 104
21707: PUSH
21708: LD_INT 105
21710: PUSH
21711: LD_INT 106
21713: PUSH
21714: LD_INT 107
21716: PUSH
21717: LD_INT 108
21719: PUSH
21720: LD_INT 109
21722: PUSH
21723: LD_INT 110
21725: PUSH
21726: LD_INT 111
21728: PUSH
21729: LD_INT 112
21731: PUSH
21732: LD_INT 113
21734: PUSH
21735: LD_INT 114
21737: PUSH
21738: LD_INT 115
21740: PUSH
21741: LD_INT 116
21743: PUSH
21744: LD_INT 117
21746: PUSH
21747: LD_INT 118
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: ST_TO_ADDR
21774: GO 21777
21776: POP
// end else
21777: GO 22008
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21779: LD_ADDR_VAR 0 1
21783: PUSH
21784: LD_INT 1
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 3
21792: PUSH
21793: LD_INT 4
21795: PUSH
21796: LD_INT 5
21798: PUSH
21799: LD_INT 6
21801: PUSH
21802: LD_INT 7
21804: PUSH
21805: LD_INT 8
21807: PUSH
21808: LD_INT 9
21810: PUSH
21811: LD_INT 10
21813: PUSH
21814: LD_INT 11
21816: PUSH
21817: LD_INT 12
21819: PUSH
21820: LD_INT 13
21822: PUSH
21823: LD_INT 14
21825: PUSH
21826: LD_INT 15
21828: PUSH
21829: LD_INT 16
21831: PUSH
21832: LD_INT 17
21834: PUSH
21835: LD_INT 18
21837: PUSH
21838: LD_INT 19
21840: PUSH
21841: LD_INT 20
21843: PUSH
21844: LD_INT 21
21846: PUSH
21847: LD_INT 22
21849: PUSH
21850: LD_INT 23
21852: PUSH
21853: LD_INT 24
21855: PUSH
21856: LD_INT 25
21858: PUSH
21859: LD_INT 26
21861: PUSH
21862: LD_INT 27
21864: PUSH
21865: LD_INT 28
21867: PUSH
21868: LD_INT 29
21870: PUSH
21871: LD_INT 30
21873: PUSH
21874: LD_INT 31
21876: PUSH
21877: LD_INT 32
21879: PUSH
21880: LD_INT 33
21882: PUSH
21883: LD_INT 34
21885: PUSH
21886: LD_INT 35
21888: PUSH
21889: LD_INT 36
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 101
21932: PUSH
21933: LD_INT 102
21935: PUSH
21936: LD_INT 103
21938: PUSH
21939: LD_INT 104
21941: PUSH
21942: LD_INT 105
21944: PUSH
21945: LD_INT 106
21947: PUSH
21948: LD_INT 107
21950: PUSH
21951: LD_INT 108
21953: PUSH
21954: LD_INT 109
21956: PUSH
21957: LD_INT 110
21959: PUSH
21960: LD_INT 111
21962: PUSH
21963: LD_INT 112
21965: PUSH
21966: LD_INT 113
21968: PUSH
21969: LD_INT 114
21971: PUSH
21972: LD_INT 115
21974: PUSH
21975: LD_INT 116
21977: PUSH
21978: LD_INT 117
21980: PUSH
21981: LD_INT 118
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: ST_TO_ADDR
// if result then
22008: LD_VAR 0 1
22012: IFFALSE 22301
// begin normal :=  ;
22014: LD_ADDR_VAR 0 3
22018: PUSH
22019: LD_STRING 
22021: ST_TO_ADDR
// hardcore :=  ;
22022: LD_ADDR_VAR 0 4
22026: PUSH
22027: LD_STRING 
22029: ST_TO_ADDR
// for i = 1 to normalCounter do
22030: LD_ADDR_VAR 0 5
22034: PUSH
22035: DOUBLE
22036: LD_INT 1
22038: DEC
22039: ST_TO_ADDR
22040: LD_EXP 53
22044: PUSH
22045: FOR_TO
22046: IFFALSE 22147
// begin tmp := 0 ;
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_STRING 0
22055: ST_TO_ADDR
// if result [ 1 ] then
22056: LD_VAR 0 1
22060: PUSH
22061: LD_INT 1
22063: ARRAY
22064: IFFALSE 22129
// if result [ 1 ] [ 1 ] = i then
22066: LD_VAR 0 1
22070: PUSH
22071: LD_INT 1
22073: ARRAY
22074: PUSH
22075: LD_INT 1
22077: ARRAY
22078: PUSH
22079: LD_VAR 0 5
22083: EQUAL
22084: IFFALSE 22129
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22086: LD_ADDR_VAR 0 1
22090: PUSH
22091: LD_VAR 0 1
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: LD_VAR 0 1
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 3
22115: PPUSH
22116: CALL_OW 1
22120: ST_TO_ADDR
// tmp := 1 ;
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_STRING 1
22128: ST_TO_ADDR
// end ; normal := normal & tmp ;
22129: LD_ADDR_VAR 0 3
22133: PUSH
22134: LD_VAR 0 3
22138: PUSH
22139: LD_VAR 0 2
22143: STR
22144: ST_TO_ADDR
// end ;
22145: GO 22045
22147: POP
22148: POP
// for i = 1 to hardcoreCounter do
22149: LD_ADDR_VAR 0 5
22153: PUSH
22154: DOUBLE
22155: LD_INT 1
22157: DEC
22158: ST_TO_ADDR
22159: LD_EXP 54
22163: PUSH
22164: FOR_TO
22165: IFFALSE 22270
// begin tmp := 0 ;
22167: LD_ADDR_VAR 0 2
22171: PUSH
22172: LD_STRING 0
22174: ST_TO_ADDR
// if result [ 2 ] then
22175: LD_VAR 0 1
22179: PUSH
22180: LD_INT 2
22182: ARRAY
22183: IFFALSE 22252
// if result [ 2 ] [ 1 ] = 100 + i then
22185: LD_VAR 0 1
22189: PUSH
22190: LD_INT 2
22192: ARRAY
22193: PUSH
22194: LD_INT 1
22196: ARRAY
22197: PUSH
22198: LD_INT 100
22200: PUSH
22201: LD_VAR 0 5
22205: PLUS
22206: EQUAL
22207: IFFALSE 22252
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22209: LD_ADDR_VAR 0 1
22213: PUSH
22214: LD_VAR 0 1
22218: PPUSH
22219: LD_INT 2
22221: PPUSH
22222: LD_VAR 0 1
22226: PUSH
22227: LD_INT 2
22229: ARRAY
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 3
22238: PPUSH
22239: CALL_OW 1
22243: ST_TO_ADDR
// tmp := 1 ;
22244: LD_ADDR_VAR 0 2
22248: PUSH
22249: LD_STRING 1
22251: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22252: LD_ADDR_VAR 0 4
22256: PUSH
22257: LD_VAR 0 4
22261: PUSH
22262: LD_VAR 0 2
22266: STR
22267: ST_TO_ADDR
// end ;
22268: GO 22164
22270: POP
22271: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22272: LD_STRING getStreamItemsFromMission("
22274: PUSH
22275: LD_VAR 0 3
22279: STR
22280: PUSH
22281: LD_STRING ","
22283: STR
22284: PUSH
22285: LD_VAR 0 4
22289: STR
22290: PUSH
22291: LD_STRING ")
22293: STR
22294: PPUSH
22295: CALL_OW 559
// end else
22299: GO 22308
// ToLua ( getStreamItemsFromMission("","") ) ;
22301: LD_STRING getStreamItemsFromMission("","")
22303: PPUSH
22304: CALL_OW 559
// end ;
22308: LD_VAR 0 1
22312: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22313: LD_EXP 52
22317: PUSH
22318: LD_EXP 57
22322: AND
22323: IFFALSE 22447
22325: GO 22327
22327: DISABLE
22328: LD_INT 0
22330: PPUSH
22331: PPUSH
// begin enable ;
22332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22333: LD_ADDR_VAR 0 2
22337: PUSH
22338: LD_INT 22
22340: PUSH
22341: LD_OWVAR 2
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: LD_INT 34
22355: PUSH
22356: LD_INT 7
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 34
22365: PUSH
22366: LD_INT 45
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 34
22375: PUSH
22376: LD_INT 28
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 34
22385: PUSH
22386: LD_INT 47
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PPUSH
22404: CALL_OW 69
22408: ST_TO_ADDR
// if not tmp then
22409: LD_VAR 0 2
22413: NOT
22414: IFFALSE 22418
// exit ;
22416: GO 22447
// for i in tmp do
22418: LD_ADDR_VAR 0 1
22422: PUSH
22423: LD_VAR 0 2
22427: PUSH
22428: FOR_IN
22429: IFFALSE 22445
// begin SetLives ( i , 0 ) ;
22431: LD_VAR 0 1
22435: PPUSH
22436: LD_INT 0
22438: PPUSH
22439: CALL_OW 234
// end ;
22443: GO 22428
22445: POP
22446: POP
// end ;
22447: PPOPN 2
22449: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22450: LD_EXP 52
22454: PUSH
22455: LD_EXP 58
22459: AND
22460: IFFALSE 22544
22462: GO 22464
22464: DISABLE
22465: LD_INT 0
22467: PPUSH
22468: PPUSH
// begin enable ;
22469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_OWVAR 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 32
22489: PUSH
22490: LD_INT 3
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PPUSH
22501: CALL_OW 69
22505: ST_TO_ADDR
// if not tmp then
22506: LD_VAR 0 2
22510: NOT
22511: IFFALSE 22515
// exit ;
22513: GO 22544
// for i in tmp do
22515: LD_ADDR_VAR 0 1
22519: PUSH
22520: LD_VAR 0 2
22524: PUSH
22525: FOR_IN
22526: IFFALSE 22542
// begin SetLives ( i , 0 ) ;
22528: LD_VAR 0 1
22532: PPUSH
22533: LD_INT 0
22535: PPUSH
22536: CALL_OW 234
// end ;
22540: GO 22525
22542: POP
22543: POP
// end ;
22544: PPOPN 2
22546: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22547: LD_EXP 52
22551: PUSH
22552: LD_EXP 55
22556: AND
22557: IFFALSE 22650
22559: GO 22561
22561: DISABLE
22562: LD_INT 0
22564: PPUSH
// begin enable ;
22565: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22566: LD_ADDR_VAR 0 1
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_OWVAR 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 25
22588: PUSH
22589: LD_INT 5
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 25
22598: PUSH
22599: LD_INT 9
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 25
22608: PUSH
22609: LD_INT 8
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: PUSH
22631: FOR_IN
22632: IFFALSE 22648
// begin SetClass ( i , 1 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_INT 1
22641: PPUSH
22642: CALL_OW 336
// end ;
22646: GO 22631
22648: POP
22649: POP
// end ;
22650: PPOPN 1
22652: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22653: LD_EXP 52
22657: PUSH
22658: LD_EXP 56
22662: AND
22663: PUSH
22664: LD_OWVAR 65
22668: PUSH
22669: LD_INT 7
22671: LESS
22672: AND
22673: IFFALSE 22687
22675: GO 22677
22677: DISABLE
// begin enable ;
22678: ENABLE
// game_speed := 7 ;
22679: LD_ADDR_OWVAR 65
22683: PUSH
22684: LD_INT 7
22686: ST_TO_ADDR
// end ;
22687: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22688: LD_EXP 52
22692: PUSH
22693: LD_EXP 59
22697: AND
22698: IFFALSE 22900
22700: GO 22702
22702: DISABLE
22703: LD_INT 0
22705: PPUSH
22706: PPUSH
22707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22708: LD_ADDR_VAR 0 3
22712: PUSH
22713: LD_INT 81
22715: PUSH
22716: LD_OWVAR 2
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 21
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PPUSH
22739: CALL_OW 69
22743: ST_TO_ADDR
// if not tmp then
22744: LD_VAR 0 3
22748: NOT
22749: IFFALSE 22753
// exit ;
22751: GO 22900
// if tmp > 5 then
22753: LD_VAR 0 3
22757: PUSH
22758: LD_INT 5
22760: GREATER
22761: IFFALSE 22773
// k := 5 else
22763: LD_ADDR_VAR 0 2
22767: PUSH
22768: LD_INT 5
22770: ST_TO_ADDR
22771: GO 22783
// k := tmp ;
22773: LD_ADDR_VAR 0 2
22777: PUSH
22778: LD_VAR 0 3
22782: ST_TO_ADDR
// for i := 1 to k do
22783: LD_ADDR_VAR 0 1
22787: PUSH
22788: DOUBLE
22789: LD_INT 1
22791: DEC
22792: ST_TO_ADDR
22793: LD_VAR 0 2
22797: PUSH
22798: FOR_TO
22799: IFFALSE 22898
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22801: LD_VAR 0 3
22805: PUSH
22806: LD_VAR 0 1
22810: ARRAY
22811: PPUSH
22812: LD_VAR 0 1
22816: PUSH
22817: LD_INT 4
22819: MOD
22820: PUSH
22821: LD_INT 1
22823: PLUS
22824: PPUSH
22825: CALL_OW 259
22829: PUSH
22830: LD_INT 10
22832: LESS
22833: IFFALSE 22896
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22835: LD_VAR 0 3
22839: PUSH
22840: LD_VAR 0 1
22844: ARRAY
22845: PPUSH
22846: LD_VAR 0 1
22850: PUSH
22851: LD_INT 4
22853: MOD
22854: PUSH
22855: LD_INT 1
22857: PLUS
22858: PPUSH
22859: LD_VAR 0 3
22863: PUSH
22864: LD_VAR 0 1
22868: ARRAY
22869: PPUSH
22870: LD_VAR 0 1
22874: PUSH
22875: LD_INT 4
22877: MOD
22878: PUSH
22879: LD_INT 1
22881: PLUS
22882: PPUSH
22883: CALL_OW 259
22887: PUSH
22888: LD_INT 1
22890: PLUS
22891: PPUSH
22892: CALL_OW 237
22896: GO 22798
22898: POP
22899: POP
// end ;
22900: PPOPN 3
22902: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22903: LD_EXP 52
22907: PUSH
22908: LD_EXP 60
22912: AND
22913: IFFALSE 22933
22915: GO 22917
22917: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22918: LD_INT 4
22920: PPUSH
22921: LD_OWVAR 2
22925: PPUSH
22926: LD_INT 0
22928: PPUSH
22929: CALL_OW 324
22933: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22934: LD_EXP 52
22938: PUSH
22939: LD_EXP 89
22943: AND
22944: IFFALSE 22964
22946: GO 22948
22948: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22949: LD_INT 19
22951: PPUSH
22952: LD_OWVAR 2
22956: PPUSH
22957: LD_INT 0
22959: PPUSH
22960: CALL_OW 324
22964: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22965: LD_EXP 52
22969: PUSH
22970: LD_EXP 61
22974: AND
22975: IFFALSE 23077
22977: GO 22979
22979: DISABLE
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
// begin enable ;
22984: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_INT 22
22992: PUSH
22993: LD_OWVAR 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: LD_INT 34
23007: PUSH
23008: LD_INT 11
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 34
23017: PUSH
23018: LD_INT 30
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PPUSH
23034: CALL_OW 69
23038: ST_TO_ADDR
// if not tmp then
23039: LD_VAR 0 2
23043: NOT
23044: IFFALSE 23048
// exit ;
23046: GO 23077
// for i in tmp do
23048: LD_ADDR_VAR 0 1
23052: PUSH
23053: LD_VAR 0 2
23057: PUSH
23058: FOR_IN
23059: IFFALSE 23075
// begin SetLives ( i , 0 ) ;
23061: LD_VAR 0 1
23065: PPUSH
23066: LD_INT 0
23068: PPUSH
23069: CALL_OW 234
// end ;
23073: GO 23058
23075: POP
23076: POP
// end ;
23077: PPOPN 2
23079: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23080: LD_EXP 52
23084: PUSH
23085: LD_EXP 62
23089: AND
23090: IFFALSE 23110
23092: GO 23094
23094: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23095: LD_INT 32
23097: PPUSH
23098: LD_OWVAR 2
23102: PPUSH
23103: LD_INT 0
23105: PPUSH
23106: CALL_OW 324
23110: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23111: LD_EXP 52
23115: PUSH
23116: LD_EXP 63
23120: AND
23121: IFFALSE 23302
23123: GO 23125
23125: DISABLE
23126: LD_INT 0
23128: PPUSH
23129: PPUSH
23130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23131: LD_ADDR_VAR 0 2
23135: PUSH
23136: LD_INT 22
23138: PUSH
23139: LD_OWVAR 2
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 33
23150: PUSH
23151: LD_INT 3
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: ST_TO_ADDR
// if not tmp then
23167: LD_VAR 0 2
23171: NOT
23172: IFFALSE 23176
// exit ;
23174: GO 23302
// side := 0 ;
23176: LD_ADDR_VAR 0 3
23180: PUSH
23181: LD_INT 0
23183: ST_TO_ADDR
// for i := 1 to 8 do
23184: LD_ADDR_VAR 0 1
23188: PUSH
23189: DOUBLE
23190: LD_INT 1
23192: DEC
23193: ST_TO_ADDR
23194: LD_INT 8
23196: PUSH
23197: FOR_TO
23198: IFFALSE 23246
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23200: LD_OWVAR 2
23204: PUSH
23205: LD_VAR 0 1
23209: NONEQUAL
23210: PUSH
23211: LD_OWVAR 2
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 81
23225: PUSH
23226: LD_INT 2
23228: EQUAL
23229: AND
23230: IFFALSE 23244
// begin side := i ;
23232: LD_ADDR_VAR 0 3
23236: PUSH
23237: LD_VAR 0 1
23241: ST_TO_ADDR
// break ;
23242: GO 23246
// end ;
23244: GO 23197
23246: POP
23247: POP
// if not side then
23248: LD_VAR 0 3
23252: NOT
23253: IFFALSE 23257
// exit ;
23255: GO 23302
// for i := 1 to tmp do
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: DOUBLE
23263: LD_INT 1
23265: DEC
23266: ST_TO_ADDR
23267: LD_VAR 0 2
23271: PUSH
23272: FOR_TO
23273: IFFALSE 23300
// if Prob ( 60 ) then
23275: LD_INT 60
23277: PPUSH
23278: CALL_OW 13
23282: IFFALSE 23298
// SetSide ( i , side ) ;
23284: LD_VAR 0 1
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: CALL_OW 235
23298: GO 23272
23300: POP
23301: POP
// end ;
23302: PPOPN 3
23304: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23305: LD_EXP 52
23309: PUSH
23310: LD_EXP 65
23314: AND
23315: IFFALSE 23434
23317: GO 23319
23319: DISABLE
23320: LD_INT 0
23322: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23323: LD_ADDR_VAR 0 1
23327: PUSH
23328: LD_INT 22
23330: PUSH
23331: LD_OWVAR 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 21
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: LD_INT 23
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: PPUSH
23372: CALL_OW 69
23376: PUSH
23377: FOR_IN
23378: IFFALSE 23432
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 257
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: LD_INT 3
23398: PUSH
23399: LD_INT 4
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: IN
23408: IFFALSE 23430
// SetClass ( un , rand ( 1 , 4 ) ) ;
23410: LD_VAR 0 1
23414: PPUSH
23415: LD_INT 1
23417: PPUSH
23418: LD_INT 4
23420: PPUSH
23421: CALL_OW 12
23425: PPUSH
23426: CALL_OW 336
23430: GO 23377
23432: POP
23433: POP
// end ;
23434: PPOPN 1
23436: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23437: LD_EXP 52
23441: PUSH
23442: LD_EXP 64
23446: AND
23447: IFFALSE 23526
23449: GO 23451
23451: DISABLE
23452: LD_INT 0
23454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23455: LD_ADDR_VAR 0 1
23459: PUSH
23460: LD_INT 22
23462: PUSH
23463: LD_OWVAR 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 21
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: ST_TO_ADDR
// if not tmp then
23491: LD_VAR 0 1
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23500: LD_VAR 0 1
23504: PUSH
23505: LD_INT 1
23507: PPUSH
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 12
23517: ARRAY
23518: PPUSH
23519: LD_INT 100
23521: PPUSH
23522: CALL_OW 234
// end ;
23526: PPOPN 1
23528: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23529: LD_EXP 52
23533: PUSH
23534: LD_EXP 66
23538: AND
23539: IFFALSE 23637
23541: GO 23543
23543: DISABLE
23544: LD_INT 0
23546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23547: LD_ADDR_VAR 0 1
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_OWVAR 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 21
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PPUSH
23578: CALL_OW 69
23582: ST_TO_ADDR
// if not tmp then
23583: LD_VAR 0 1
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23637
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23592: LD_VAR 0 1
23596: PUSH
23597: LD_INT 1
23599: PPUSH
23600: LD_VAR 0 1
23604: PPUSH
23605: CALL_OW 12
23609: ARRAY
23610: PPUSH
23611: LD_INT 1
23613: PPUSH
23614: LD_INT 4
23616: PPUSH
23617: CALL_OW 12
23621: PPUSH
23622: LD_INT 3000
23624: PPUSH
23625: LD_INT 9000
23627: PPUSH
23628: CALL_OW 12
23632: PPUSH
23633: CALL_OW 492
// end ;
23637: PPOPN 1
23639: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23640: LD_EXP 52
23644: PUSH
23645: LD_EXP 67
23649: AND
23650: IFFALSE 23670
23652: GO 23654
23654: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23655: LD_INT 1
23657: PPUSH
23658: LD_OWVAR 2
23662: PPUSH
23663: LD_INT 0
23665: PPUSH
23666: CALL_OW 324
23670: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23671: LD_EXP 52
23675: PUSH
23676: LD_EXP 68
23680: AND
23681: IFFALSE 23764
23683: GO 23685
23685: DISABLE
23686: LD_INT 0
23688: PPUSH
23689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23690: LD_ADDR_VAR 0 2
23694: PUSH
23695: LD_INT 22
23697: PUSH
23698: LD_OWVAR 2
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 3
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PPUSH
23721: CALL_OW 69
23725: ST_TO_ADDR
// if not tmp then
23726: LD_VAR 0 2
23730: NOT
23731: IFFALSE 23735
// exit ;
23733: GO 23764
// for i in tmp do
23735: LD_ADDR_VAR 0 1
23739: PUSH
23740: LD_VAR 0 2
23744: PUSH
23745: FOR_IN
23746: IFFALSE 23762
// SetBLevel ( i , 10 ) ;
23748: LD_VAR 0 1
23752: PPUSH
23753: LD_INT 10
23755: PPUSH
23756: CALL_OW 241
23760: GO 23745
23762: POP
23763: POP
// end ;
23764: PPOPN 2
23766: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23767: LD_EXP 52
23771: PUSH
23772: LD_EXP 69
23776: AND
23777: IFFALSE 23888
23779: GO 23781
23781: DISABLE
23782: LD_INT 0
23784: PPUSH
23785: PPUSH
23786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: LD_OWVAR 2
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 25
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PPUSH
23818: CALL_OW 69
23822: ST_TO_ADDR
// if not tmp then
23823: LD_VAR 0 3
23827: NOT
23828: IFFALSE 23832
// exit ;
23830: GO 23888
// un := tmp [ rand ( 1 , tmp ) ] ;
23832: LD_ADDR_VAR 0 2
23836: PUSH
23837: LD_VAR 0 3
23841: PUSH
23842: LD_INT 1
23844: PPUSH
23845: LD_VAR 0 3
23849: PPUSH
23850: CALL_OW 12
23854: ARRAY
23855: ST_TO_ADDR
// if Crawls ( un ) then
23856: LD_VAR 0 2
23860: PPUSH
23861: CALL_OW 318
23865: IFFALSE 23876
// ComWalk ( un ) ;
23867: LD_VAR 0 2
23871: PPUSH
23872: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23876: LD_VAR 0 2
23880: PPUSH
23881: LD_INT 5
23883: PPUSH
23884: CALL_OW 336
// end ;
23888: PPOPN 3
23890: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23891: LD_EXP 52
23895: PUSH
23896: LD_EXP 70
23900: AND
23901: PUSH
23902: LD_OWVAR 67
23906: PUSH
23907: LD_INT 4
23909: LESS
23910: AND
23911: IFFALSE 23930
23913: GO 23915
23915: DISABLE
// begin Difficulty := Difficulty + 1 ;
23916: LD_ADDR_OWVAR 67
23920: PUSH
23921: LD_OWVAR 67
23925: PUSH
23926: LD_INT 1
23928: PLUS
23929: ST_TO_ADDR
// end ;
23930: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23931: LD_EXP 52
23935: PUSH
23936: LD_EXP 71
23940: AND
23941: IFFALSE 24044
23943: GO 23945
23945: DISABLE
23946: LD_INT 0
23948: PPUSH
// begin for i := 1 to 5 do
23949: LD_ADDR_VAR 0 1
23953: PUSH
23954: DOUBLE
23955: LD_INT 1
23957: DEC
23958: ST_TO_ADDR
23959: LD_INT 5
23961: PUSH
23962: FOR_TO
23963: IFFALSE 24042
// begin uc_nation := nation_nature ;
23965: LD_ADDR_OWVAR 21
23969: PUSH
23970: LD_INT 0
23972: ST_TO_ADDR
// uc_side := 0 ;
23973: LD_ADDR_OWVAR 20
23977: PUSH
23978: LD_INT 0
23980: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23981: LD_ADDR_OWVAR 29
23985: PUSH
23986: LD_INT 12
23988: PUSH
23989: LD_INT 12
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: ST_TO_ADDR
// hc_agressivity := 20 ;
23996: LD_ADDR_OWVAR 35
24000: PUSH
24001: LD_INT 20
24003: ST_TO_ADDR
// hc_class := class_tiger ;
24004: LD_ADDR_OWVAR 28
24008: PUSH
24009: LD_INT 14
24011: ST_TO_ADDR
// hc_gallery :=  ;
24012: LD_ADDR_OWVAR 33
24016: PUSH
24017: LD_STRING 
24019: ST_TO_ADDR
// hc_name :=  ;
24020: LD_ADDR_OWVAR 26
24024: PUSH
24025: LD_STRING 
24027: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24028: CALL_OW 44
24032: PPUSH
24033: LD_INT 0
24035: PPUSH
24036: CALL_OW 51
// end ;
24040: GO 23962
24042: POP
24043: POP
// end ;
24044: PPOPN 1
24046: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24047: LD_EXP 52
24051: PUSH
24052: LD_EXP 72
24056: AND
24057: IFFALSE 24066
24059: GO 24061
24061: DISABLE
// StreamSibBomb ;
24062: CALL 24067 0 0
24066: END
// export function StreamSibBomb ; var i , x , y ; begin
24067: LD_INT 0
24069: PPUSH
24070: PPUSH
24071: PPUSH
24072: PPUSH
// result := false ;
24073: LD_ADDR_VAR 0 1
24077: PUSH
24078: LD_INT 0
24080: ST_TO_ADDR
// for i := 1 to 16 do
24081: LD_ADDR_VAR 0 2
24085: PUSH
24086: DOUBLE
24087: LD_INT 1
24089: DEC
24090: ST_TO_ADDR
24091: LD_INT 16
24093: PUSH
24094: FOR_TO
24095: IFFALSE 24294
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_INT 10
24104: PUSH
24105: LD_INT 20
24107: PUSH
24108: LD_INT 30
24110: PUSH
24111: LD_INT 40
24113: PUSH
24114: LD_INT 50
24116: PUSH
24117: LD_INT 60
24119: PUSH
24120: LD_INT 70
24122: PUSH
24123: LD_INT 80
24125: PUSH
24126: LD_INT 90
24128: PUSH
24129: LD_INT 100
24131: PUSH
24132: LD_INT 110
24134: PUSH
24135: LD_INT 120
24137: PUSH
24138: LD_INT 130
24140: PUSH
24141: LD_INT 140
24143: PUSH
24144: LD_INT 150
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: PPUSH
24167: LD_INT 15
24169: PPUSH
24170: CALL_OW 12
24174: ARRAY
24175: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24176: LD_ADDR_VAR 0 4
24180: PUSH
24181: LD_INT 10
24183: PUSH
24184: LD_INT 20
24186: PUSH
24187: LD_INT 30
24189: PUSH
24190: LD_INT 40
24192: PUSH
24193: LD_INT 50
24195: PUSH
24196: LD_INT 60
24198: PUSH
24199: LD_INT 70
24201: PUSH
24202: LD_INT 80
24204: PUSH
24205: LD_INT 90
24207: PUSH
24208: LD_INT 100
24210: PUSH
24211: LD_INT 110
24213: PUSH
24214: LD_INT 120
24216: PUSH
24217: LD_INT 130
24219: PUSH
24220: LD_INT 140
24222: PUSH
24223: LD_INT 150
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PPUSH
24246: LD_INT 15
24248: PPUSH
24249: CALL_OW 12
24253: ARRAY
24254: ST_TO_ADDR
// if ValidHex ( x , y ) then
24255: LD_VAR 0 3
24259: PPUSH
24260: LD_VAR 0 4
24264: PPUSH
24265: CALL_OW 488
24269: IFFALSE 24292
// begin result := [ x , y ] ;
24271: LD_ADDR_VAR 0 1
24275: PUSH
24276: LD_VAR 0 3
24280: PUSH
24281: LD_VAR 0 4
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: ST_TO_ADDR
// break ;
24290: GO 24294
// end ; end ;
24292: GO 24094
24294: POP
24295: POP
// if result then
24296: LD_VAR 0 1
24300: IFFALSE 24360
// begin ToLua ( playSibBomb() ) ;
24302: LD_STRING playSibBomb()
24304: PPUSH
24305: CALL_OW 559
// wait ( 0 0$14 ) ;
24309: LD_INT 490
24311: PPUSH
24312: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24316: LD_VAR 0 1
24320: PUSH
24321: LD_INT 1
24323: ARRAY
24324: PPUSH
24325: LD_VAR 0 1
24329: PUSH
24330: LD_INT 2
24332: ARRAY
24333: PPUSH
24334: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24338: LD_VAR 0 1
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: PPUSH
24347: LD_VAR 0 1
24351: PUSH
24352: LD_INT 2
24354: ARRAY
24355: PPUSH
24356: CALL_OW 429
// end ; end ;
24360: LD_VAR 0 1
24364: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24365: LD_EXP 52
24369: PUSH
24370: LD_EXP 74
24374: AND
24375: IFFALSE 24387
24377: GO 24379
24379: DISABLE
// YouLost (  ) ;
24380: LD_STRING 
24382: PPUSH
24383: CALL_OW 104
24387: END
// every 0 0$1 trigger StreamModeActive and sFog do
24388: LD_EXP 52
24392: PUSH
24393: LD_EXP 73
24397: AND
24398: IFFALSE 24412
24400: GO 24402
24402: DISABLE
// FogOff ( your_side ) ;
24403: LD_OWVAR 2
24407: PPUSH
24408: CALL_OW 344
24412: END
// every 0 0$1 trigger StreamModeActive and sSun do
24413: LD_EXP 52
24417: PUSH
24418: LD_EXP 75
24422: AND
24423: IFFALSE 24451
24425: GO 24427
24427: DISABLE
// begin solar_recharge_percent := 0 ;
24428: LD_ADDR_OWVAR 79
24432: PUSH
24433: LD_INT 0
24435: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24436: LD_INT 10500
24438: PPUSH
24439: CALL_OW 67
// solar_recharge_percent := 100 ;
24443: LD_ADDR_OWVAR 79
24447: PUSH
24448: LD_INT 100
24450: ST_TO_ADDR
// end ;
24451: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24452: LD_EXP 52
24456: PUSH
24457: LD_EXP 76
24461: AND
24462: IFFALSE 24701
24464: GO 24466
24466: DISABLE
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
24471: PPUSH
// begin tmp := [ ] ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: EMPTY
24478: ST_TO_ADDR
// for i := 1 to 6 do
24479: LD_ADDR_VAR 0 1
24483: PUSH
24484: DOUBLE
24485: LD_INT 1
24487: DEC
24488: ST_TO_ADDR
24489: LD_INT 6
24491: PUSH
24492: FOR_TO
24493: IFFALSE 24598
// begin uc_nation := nation_nature ;
24495: LD_ADDR_OWVAR 21
24499: PUSH
24500: LD_INT 0
24502: ST_TO_ADDR
// uc_side := 0 ;
24503: LD_ADDR_OWVAR 20
24507: PUSH
24508: LD_INT 0
24510: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24511: LD_ADDR_OWVAR 29
24515: PUSH
24516: LD_INT 12
24518: PUSH
24519: LD_INT 12
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: ST_TO_ADDR
// hc_agressivity := 20 ;
24526: LD_ADDR_OWVAR 35
24530: PUSH
24531: LD_INT 20
24533: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24534: LD_ADDR_OWVAR 28
24538: PUSH
24539: LD_INT 17
24541: ST_TO_ADDR
// hc_gallery :=  ;
24542: LD_ADDR_OWVAR 33
24546: PUSH
24547: LD_STRING 
24549: ST_TO_ADDR
// hc_name :=  ;
24550: LD_ADDR_OWVAR 26
24554: PUSH
24555: LD_STRING 
24557: ST_TO_ADDR
// un := CreateHuman ;
24558: LD_ADDR_VAR 0 2
24562: PUSH
24563: CALL_OW 44
24567: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24568: LD_VAR 0 2
24572: PPUSH
24573: LD_INT 1
24575: PPUSH
24576: CALL_OW 51
// tmp := tmp ^ un ;
24580: LD_ADDR_VAR 0 3
24584: PUSH
24585: LD_VAR 0 3
24589: PUSH
24590: LD_VAR 0 2
24594: ADD
24595: ST_TO_ADDR
// end ;
24596: GO 24492
24598: POP
24599: POP
// repeat wait ( 0 0$1 ) ;
24600: LD_INT 35
24602: PPUSH
24603: CALL_OW 67
// for un in tmp do
24607: LD_ADDR_VAR 0 2
24611: PUSH
24612: LD_VAR 0 3
24616: PUSH
24617: FOR_IN
24618: IFFALSE 24692
// begin if IsDead ( un ) then
24620: LD_VAR 0 2
24624: PPUSH
24625: CALL_OW 301
24629: IFFALSE 24649
// begin tmp := tmp diff un ;
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_VAR 0 3
24640: PUSH
24641: LD_VAR 0 2
24645: DIFF
24646: ST_TO_ADDR
// continue ;
24647: GO 24617
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24649: LD_VAR 0 2
24653: PPUSH
24654: LD_INT 3
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PPUSH
24671: CALL_OW 69
24675: PPUSH
24676: LD_VAR 0 2
24680: PPUSH
24681: CALL_OW 74
24685: PPUSH
24686: CALL_OW 115
// end ;
24690: GO 24617
24692: POP
24693: POP
// until not tmp ;
24694: LD_VAR 0 3
24698: NOT
24699: IFFALSE 24600
// end ;
24701: PPOPN 3
24703: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24704: LD_EXP 52
24708: PUSH
24709: LD_EXP 77
24713: AND
24714: IFFALSE 24768
24716: GO 24718
24718: DISABLE
// begin ToLua ( displayTroll(); ) ;
24719: LD_STRING displayTroll();
24721: PPUSH
24722: CALL_OW 559
// wait ( 3 3$00 ) ;
24726: LD_INT 6300
24728: PPUSH
24729: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24733: LD_STRING hideTroll();
24735: PPUSH
24736: CALL_OW 559
// wait ( 1 1$00 ) ;
24740: LD_INT 2100
24742: PPUSH
24743: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24747: LD_STRING displayTroll();
24749: PPUSH
24750: CALL_OW 559
// wait ( 1 1$00 ) ;
24754: LD_INT 2100
24756: PPUSH
24757: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24761: LD_STRING hideTroll();
24763: PPUSH
24764: CALL_OW 559
// end ;
24768: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24769: LD_EXP 52
24773: PUSH
24774: LD_EXP 78
24778: AND
24779: IFFALSE 24842
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
// begin p := 0 ;
24787: LD_ADDR_VAR 0 1
24791: PUSH
24792: LD_INT 0
24794: ST_TO_ADDR
// repeat game_speed := 1 ;
24795: LD_ADDR_OWVAR 65
24799: PUSH
24800: LD_INT 1
24802: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24803: LD_INT 35
24805: PPUSH
24806: CALL_OW 67
// p := p + 1 ;
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_VAR 0 1
24819: PUSH
24820: LD_INT 1
24822: PLUS
24823: ST_TO_ADDR
// until p >= 60 ;
24824: LD_VAR 0 1
24828: PUSH
24829: LD_INT 60
24831: GREATEREQUAL
24832: IFFALSE 24795
// game_speed := 4 ;
24834: LD_ADDR_OWVAR 65
24838: PUSH
24839: LD_INT 4
24841: ST_TO_ADDR
// end ;
24842: PPOPN 1
24844: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24845: LD_EXP 52
24849: PUSH
24850: LD_EXP 79
24854: AND
24855: IFFALSE 25001
24857: GO 24859
24859: DISABLE
24860: LD_INT 0
24862: PPUSH
24863: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24864: LD_ADDR_VAR 0 1
24868: PUSH
24869: LD_INT 22
24871: PUSH
24872: LD_OWVAR 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 30
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: CALL_OW 69
24917: ST_TO_ADDR
// if not depot then
24918: LD_VAR 0 1
24922: NOT
24923: IFFALSE 24927
// exit ;
24925: GO 25001
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24927: LD_ADDR_VAR 0 2
24931: PUSH
24932: LD_VAR 0 1
24936: PUSH
24937: LD_INT 1
24939: PPUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 12
24949: ARRAY
24950: PPUSH
24951: CALL_OW 274
24955: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24956: LD_VAR 0 2
24960: PPUSH
24961: LD_INT 1
24963: PPUSH
24964: LD_INT 0
24966: PPUSH
24967: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_INT 2
24978: PPUSH
24979: LD_INT 0
24981: PPUSH
24982: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24986: LD_VAR 0 2
24990: PPUSH
24991: LD_INT 3
24993: PPUSH
24994: LD_INT 0
24996: PPUSH
24997: CALL_OW 277
// end ;
25001: PPOPN 2
25003: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25004: LD_EXP 52
25008: PUSH
25009: LD_EXP 80
25013: AND
25014: IFFALSE 25111
25016: GO 25018
25018: DISABLE
25019: LD_INT 0
25021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25022: LD_ADDR_VAR 0 1
25026: PUSH
25027: LD_INT 22
25029: PUSH
25030: LD_OWVAR 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 3
25051: PUSH
25052: LD_INT 23
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: PPUSH
25071: CALL_OW 69
25075: ST_TO_ADDR
// if not tmp then
25076: LD_VAR 0 1
25080: NOT
25081: IFFALSE 25085
// exit ;
25083: GO 25111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25085: LD_VAR 0 1
25089: PUSH
25090: LD_INT 1
25092: PPUSH
25093: LD_VAR 0 1
25097: PPUSH
25098: CALL_OW 12
25102: ARRAY
25103: PPUSH
25104: LD_INT 200
25106: PPUSH
25107: CALL_OW 234
// end ;
25111: PPOPN 1
25113: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25114: LD_EXP 52
25118: PUSH
25119: LD_EXP 81
25123: AND
25124: IFFALSE 25203
25126: GO 25128
25128: DISABLE
25129: LD_INT 0
25131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25132: LD_ADDR_VAR 0 1
25136: PUSH
25137: LD_INT 22
25139: PUSH
25140: LD_OWVAR 2
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 21
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PPUSH
25163: CALL_OW 69
25167: ST_TO_ADDR
// if not tmp then
25168: LD_VAR 0 1
25172: NOT
25173: IFFALSE 25177
// exit ;
25175: GO 25203
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25177: LD_VAR 0 1
25181: PUSH
25182: LD_INT 1
25184: PPUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: CALL_OW 12
25194: ARRAY
25195: PPUSH
25196: LD_INT 60
25198: PPUSH
25199: CALL_OW 234
// end ;
25203: PPOPN 1
25205: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25206: LD_EXP 52
25210: PUSH
25211: LD_EXP 82
25215: AND
25216: IFFALSE 25315
25218: GO 25220
25220: DISABLE
25221: LD_INT 0
25223: PPUSH
25224: PPUSH
// begin enable ;
25225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25226: LD_ADDR_VAR 0 1
25230: PUSH
25231: LD_INT 22
25233: PUSH
25234: LD_OWVAR 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 61
25245: PUSH
25246: EMPTY
25247: LIST
25248: PUSH
25249: LD_INT 33
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL_OW 69
25268: ST_TO_ADDR
// if not tmp then
25269: LD_VAR 0 1
25273: NOT
25274: IFFALSE 25278
// exit ;
25276: GO 25315
// for i in tmp do
25278: LD_ADDR_VAR 0 2
25282: PUSH
25283: LD_VAR 0 1
25287: PUSH
25288: FOR_IN
25289: IFFALSE 25313
// if IsControledBy ( i ) then
25291: LD_VAR 0 2
25295: PPUSH
25296: CALL_OW 312
25300: IFFALSE 25311
// ComUnlink ( i ) ;
25302: LD_VAR 0 2
25306: PPUSH
25307: CALL_OW 136
25311: GO 25288
25313: POP
25314: POP
// end ;
25315: PPOPN 2
25317: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25318: LD_EXP 52
25322: PUSH
25323: LD_EXP 83
25327: AND
25328: IFFALSE 25468
25330: GO 25332
25332: DISABLE
25333: LD_INT 0
25335: PPUSH
25336: PPUSH
// begin ToLua ( displayPowell(); ) ;
25337: LD_STRING displayPowell();
25339: PPUSH
25340: CALL_OW 559
// uc_side := 0 ;
25344: LD_ADDR_OWVAR 20
25348: PUSH
25349: LD_INT 0
25351: ST_TO_ADDR
// uc_nation := 2 ;
25352: LD_ADDR_OWVAR 21
25356: PUSH
25357: LD_INT 2
25359: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25360: LD_ADDR_OWVAR 37
25364: PUSH
25365: LD_INT 14
25367: ST_TO_ADDR
// vc_engine := engine_siberite ;
25368: LD_ADDR_OWVAR 39
25372: PUSH
25373: LD_INT 3
25375: ST_TO_ADDR
// vc_control := control_apeman ;
25376: LD_ADDR_OWVAR 38
25380: PUSH
25381: LD_INT 5
25383: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25384: LD_ADDR_OWVAR 40
25388: PUSH
25389: LD_INT 29
25391: ST_TO_ADDR
// un := CreateVehicle ;
25392: LD_ADDR_VAR 0 2
25396: PUSH
25397: CALL_OW 45
25401: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25402: LD_VAR 0 2
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25414: LD_INT 35
25416: PPUSH
25417: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25421: LD_VAR 0 2
25425: PPUSH
25426: LD_INT 22
25428: PUSH
25429: LD_OWVAR 2
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PPUSH
25438: CALL_OW 69
25442: PPUSH
25443: LD_VAR 0 2
25447: PPUSH
25448: CALL_OW 74
25452: PPUSH
25453: CALL_OW 115
// until IsDead ( un ) ;
25457: LD_VAR 0 2
25461: PPUSH
25462: CALL_OW 301
25466: IFFALSE 25414
// end ;
25468: PPOPN 2
25470: END
// every 0 0$1 trigger StreamModeActive and sStu do
25471: LD_EXP 52
25475: PUSH
25476: LD_EXP 91
25480: AND
25481: IFFALSE 25497
25483: GO 25485
25485: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25486: LD_STRING displayStucuk();
25488: PPUSH
25489: CALL_OW 559
// ResetFog ;
25493: CALL_OW 335
// end ;
25497: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25498: LD_EXP 52
25502: PUSH
25503: LD_EXP 84
25507: AND
25508: IFFALSE 25649
25510: GO 25512
25512: DISABLE
25513: LD_INT 0
25515: PPUSH
25516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25517: LD_ADDR_VAR 0 2
25521: PUSH
25522: LD_INT 22
25524: PUSH
25525: LD_OWVAR 2
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 21
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PPUSH
25548: CALL_OW 69
25552: ST_TO_ADDR
// if not tmp then
25553: LD_VAR 0 2
25557: NOT
25558: IFFALSE 25562
// exit ;
25560: GO 25649
// un := tmp [ rand ( 1 , tmp ) ] ;
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_VAR 0 2
25571: PUSH
25572: LD_INT 1
25574: PPUSH
25575: LD_VAR 0 2
25579: PPUSH
25580: CALL_OW 12
25584: ARRAY
25585: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25586: LD_VAR 0 1
25590: PPUSH
25591: LD_INT 0
25593: PPUSH
25594: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25598: LD_VAR 0 1
25602: PPUSH
25603: LD_OWVAR 3
25607: PUSH
25608: LD_VAR 0 1
25612: DIFF
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 74
25623: PPUSH
25624: CALL_OW 115
// wait ( 0 0$20 ) ;
25628: LD_INT 700
25630: PPUSH
25631: CALL_OW 67
// SetSide ( un , your_side ) ;
25635: LD_VAR 0 1
25639: PPUSH
25640: LD_OWVAR 2
25644: PPUSH
25645: CALL_OW 235
// end ;
25649: PPOPN 2
25651: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25652: LD_EXP 52
25656: PUSH
25657: LD_EXP 85
25661: AND
25662: IFFALSE 25768
25664: GO 25666
25666: DISABLE
25667: LD_INT 0
25669: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25670: LD_ADDR_VAR 0 1
25674: PUSH
25675: LD_INT 22
25677: PUSH
25678: LD_OWVAR 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 30
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 30
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PPUSH
25719: CALL_OW 69
25723: ST_TO_ADDR
// if not depot then
25724: LD_VAR 0 1
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 25768
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25733: LD_VAR 0 1
25737: PUSH
25738: LD_INT 1
25740: ARRAY
25741: PPUSH
25742: CALL_OW 250
25746: PPUSH
25747: LD_VAR 0 1
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: CALL_OW 251
25760: PPUSH
25761: LD_INT 70
25763: PPUSH
25764: CALL_OW 495
// end ;
25768: PPOPN 1
25770: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25771: LD_EXP 52
25775: PUSH
25776: LD_EXP 86
25780: AND
25781: IFFALSE 25992
25783: GO 25785
25785: DISABLE
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
25790: PPUSH
25791: PPUSH
25792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25793: LD_ADDR_VAR 0 5
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_OWVAR 2
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 21
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PPUSH
25824: CALL_OW 69
25828: ST_TO_ADDR
// if not tmp then
25829: LD_VAR 0 5
25833: NOT
25834: IFFALSE 25838
// exit ;
25836: GO 25992
// for i in tmp do
25838: LD_ADDR_VAR 0 1
25842: PUSH
25843: LD_VAR 0 5
25847: PUSH
25848: FOR_IN
25849: IFFALSE 25990
// begin d := rand ( 0 , 5 ) ;
25851: LD_ADDR_VAR 0 4
25855: PUSH
25856: LD_INT 0
25858: PPUSH
25859: LD_INT 5
25861: PPUSH
25862: CALL_OW 12
25866: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25867: LD_ADDR_VAR 0 2
25871: PUSH
25872: LD_VAR 0 1
25876: PPUSH
25877: CALL_OW 250
25881: PPUSH
25882: LD_VAR 0 4
25886: PPUSH
25887: LD_INT 3
25889: PPUSH
25890: LD_INT 12
25892: PPUSH
25893: CALL_OW 12
25897: PPUSH
25898: CALL_OW 272
25902: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_VAR 0 1
25912: PPUSH
25913: CALL_OW 251
25917: PPUSH
25918: LD_VAR 0 4
25922: PPUSH
25923: LD_INT 3
25925: PPUSH
25926: LD_INT 12
25928: PPUSH
25929: CALL_OW 12
25933: PPUSH
25934: CALL_OW 273
25938: ST_TO_ADDR
// if ValidHex ( x , y ) then
25939: LD_VAR 0 2
25943: PPUSH
25944: LD_VAR 0 3
25948: PPUSH
25949: CALL_OW 488
25953: IFFALSE 25988
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25955: LD_VAR 0 1
25959: PPUSH
25960: LD_VAR 0 2
25964: PPUSH
25965: LD_VAR 0 3
25969: PPUSH
25970: LD_INT 3
25972: PPUSH
25973: LD_INT 6
25975: PPUSH
25976: CALL_OW 12
25980: PPUSH
25981: LD_INT 1
25983: PPUSH
25984: CALL_OW 483
// end ;
25988: GO 25848
25990: POP
25991: POP
// end ;
25992: PPOPN 5
25994: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25995: LD_EXP 52
25999: PUSH
26000: LD_EXP 87
26004: AND
26005: IFFALSE 26099
26007: GO 26009
26009: DISABLE
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 32
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 21
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 69
26060: ST_TO_ADDR
// if not tmp then
26061: LD_VAR 0 2
26065: NOT
26066: IFFALSE 26070
// exit ;
26068: GO 26099
// for i in tmp do
26070: LD_ADDR_VAR 0 1
26074: PUSH
26075: LD_VAR 0 2
26079: PUSH
26080: FOR_IN
26081: IFFALSE 26097
// SetFuel ( i , 0 ) ;
26083: LD_VAR 0 1
26087: PPUSH
26088: LD_INT 0
26090: PPUSH
26091: CALL_OW 240
26095: GO 26080
26097: POP
26098: POP
// end ;
26099: PPOPN 2
26101: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26102: LD_EXP 52
26106: PUSH
26107: LD_EXP 88
26111: AND
26112: IFFALSE 26178
26114: GO 26116
26116: DISABLE
26117: LD_INT 0
26119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26120: LD_ADDR_VAR 0 1
26124: PUSH
26125: LD_INT 22
26127: PUSH
26128: LD_OWVAR 2
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 29
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PPUSH
26151: CALL_OW 69
26155: ST_TO_ADDR
// if not tmp then
26156: LD_VAR 0 1
26160: NOT
26161: IFFALSE 26165
// exit ;
26163: GO 26178
// DestroyUnit ( tmp [ 1 ] ) ;
26165: LD_VAR 0 1
26169: PUSH
26170: LD_INT 1
26172: ARRAY
26173: PPUSH
26174: CALL_OW 65
// end ;
26178: PPOPN 1
26180: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26181: LD_EXP 52
26185: PUSH
26186: LD_EXP 90
26190: AND
26191: IFFALSE 26320
26193: GO 26195
26195: DISABLE
26196: LD_INT 0
26198: PPUSH
// begin uc_side := 0 ;
26199: LD_ADDR_OWVAR 20
26203: PUSH
26204: LD_INT 0
26206: ST_TO_ADDR
// uc_nation := nation_arabian ;
26207: LD_ADDR_OWVAR 21
26211: PUSH
26212: LD_INT 2
26214: ST_TO_ADDR
// hc_gallery :=  ;
26215: LD_ADDR_OWVAR 33
26219: PUSH
26220: LD_STRING 
26222: ST_TO_ADDR
// hc_name :=  ;
26223: LD_ADDR_OWVAR 26
26227: PUSH
26228: LD_STRING 
26230: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26231: LD_INT 1
26233: PPUSH
26234: LD_INT 11
26236: PPUSH
26237: LD_INT 10
26239: PPUSH
26240: CALL_OW 380
// un := CreateHuman ;
26244: LD_ADDR_VAR 0 1
26248: PUSH
26249: CALL_OW 44
26253: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: LD_INT 1
26261: PPUSH
26262: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26266: LD_INT 35
26268: PPUSH
26269: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26273: LD_VAR 0 1
26277: PPUSH
26278: LD_INT 22
26280: PUSH
26281: LD_OWVAR 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PPUSH
26290: CALL_OW 69
26294: PPUSH
26295: LD_VAR 0 1
26299: PPUSH
26300: CALL_OW 74
26304: PPUSH
26305: CALL_OW 115
// until IsDead ( un ) ;
26309: LD_VAR 0 1
26313: PPUSH
26314: CALL_OW 301
26318: IFFALSE 26266
// end ;
26320: PPOPN 1
26322: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26323: LD_EXP 52
26327: PUSH
26328: LD_EXP 92
26332: AND
26333: IFFALSE 26345
26335: GO 26337
26337: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26338: LD_STRING earthquake(getX(game), 0, 32)
26340: PPUSH
26341: CALL_OW 559
26345: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26346: LD_EXP 52
26350: PUSH
26351: LD_EXP 93
26355: AND
26356: IFFALSE 26447
26358: GO 26360
26360: DISABLE
26361: LD_INT 0
26363: PPUSH
// begin enable ;
26364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26365: LD_ADDR_VAR 0 1
26369: PUSH
26370: LD_INT 22
26372: PUSH
26373: LD_OWVAR 2
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 21
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 33
26394: PUSH
26395: LD_INT 3
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: PPUSH
26407: CALL_OW 69
26411: ST_TO_ADDR
// if not tmp then
26412: LD_VAR 0 1
26416: NOT
26417: IFFALSE 26421
// exit ;
26419: GO 26447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26421: LD_VAR 0 1
26425: PUSH
26426: LD_INT 1
26428: PPUSH
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 12
26438: ARRAY
26439: PPUSH
26440: LD_INT 1
26442: PPUSH
26443: CALL_OW 234
// end ;
26447: PPOPN 1
26449: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26450: LD_EXP 52
26454: PUSH
26455: LD_EXP 94
26459: AND
26460: IFFALSE 26601
26462: GO 26464
26464: DISABLE
26465: LD_INT 0
26467: PPUSH
26468: PPUSH
26469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26470: LD_ADDR_VAR 0 3
26474: PUSH
26475: LD_INT 22
26477: PUSH
26478: LD_OWVAR 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 25
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PPUSH
26501: CALL_OW 69
26505: ST_TO_ADDR
// if not tmp then
26506: LD_VAR 0 3
26510: NOT
26511: IFFALSE 26515
// exit ;
26513: GO 26601
// un := tmp [ rand ( 1 , tmp ) ] ;
26515: LD_ADDR_VAR 0 2
26519: PUSH
26520: LD_VAR 0 3
26524: PUSH
26525: LD_INT 1
26527: PPUSH
26528: LD_VAR 0 3
26532: PPUSH
26533: CALL_OW 12
26537: ARRAY
26538: ST_TO_ADDR
// if Crawls ( un ) then
26539: LD_VAR 0 2
26543: PPUSH
26544: CALL_OW 318
26548: IFFALSE 26559
// ComWalk ( un ) ;
26550: LD_VAR 0 2
26554: PPUSH
26555: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26559: LD_VAR 0 2
26563: PPUSH
26564: LD_INT 9
26566: PPUSH
26567: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26571: LD_INT 28
26573: PPUSH
26574: LD_OWVAR 2
26578: PPUSH
26579: LD_INT 2
26581: PPUSH
26582: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26586: LD_INT 29
26588: PPUSH
26589: LD_OWVAR 2
26593: PPUSH
26594: LD_INT 2
26596: PPUSH
26597: CALL_OW 322
// end ;
26601: PPOPN 3
26603: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26604: LD_EXP 52
26608: PUSH
26609: LD_EXP 95
26613: AND
26614: IFFALSE 26725
26616: GO 26618
26618: DISABLE
26619: LD_INT 0
26621: PPUSH
26622: PPUSH
26623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 22
26631: PUSH
26632: LD_OWVAR 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 25
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PPUSH
26655: CALL_OW 69
26659: ST_TO_ADDR
// if not tmp then
26660: LD_VAR 0 3
26664: NOT
26665: IFFALSE 26669
// exit ;
26667: GO 26725
// un := tmp [ rand ( 1 , tmp ) ] ;
26669: LD_ADDR_VAR 0 2
26673: PUSH
26674: LD_VAR 0 3
26678: PUSH
26679: LD_INT 1
26681: PPUSH
26682: LD_VAR 0 3
26686: PPUSH
26687: CALL_OW 12
26691: ARRAY
26692: ST_TO_ADDR
// if Crawls ( un ) then
26693: LD_VAR 0 2
26697: PPUSH
26698: CALL_OW 318
26702: IFFALSE 26713
// ComWalk ( un ) ;
26704: LD_VAR 0 2
26708: PPUSH
26709: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26713: LD_VAR 0 2
26717: PPUSH
26718: LD_INT 8
26720: PPUSH
26721: CALL_OW 336
// end ;
26725: PPOPN 3
26727: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26728: LD_EXP 52
26732: PUSH
26733: LD_EXP 96
26737: AND
26738: IFFALSE 26882
26740: GO 26742
26742: DISABLE
26743: LD_INT 0
26745: PPUSH
26746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26747: LD_ADDR_VAR 0 2
26751: PUSH
26752: LD_INT 22
26754: PUSH
26755: LD_OWVAR 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 21
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 34
26779: PUSH
26780: LD_INT 12
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 34
26789: PUSH
26790: LD_INT 51
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 34
26799: PUSH
26800: LD_INT 32
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: PPUSH
26818: CALL_OW 69
26822: ST_TO_ADDR
// if not tmp then
26823: LD_VAR 0 2
26827: NOT
26828: IFFALSE 26832
// exit ;
26830: GO 26882
// for i in tmp do
26832: LD_ADDR_VAR 0 1
26836: PUSH
26837: LD_VAR 0 2
26841: PUSH
26842: FOR_IN
26843: IFFALSE 26880
// if GetCargo ( i , mat_artifact ) = 0 then
26845: LD_VAR 0 1
26849: PPUSH
26850: LD_INT 4
26852: PPUSH
26853: CALL_OW 289
26857: PUSH
26858: LD_INT 0
26860: EQUAL
26861: IFFALSE 26878
// SetCargo ( i , mat_siberit , 100 ) ;
26863: LD_VAR 0 1
26867: PPUSH
26868: LD_INT 3
26870: PPUSH
26871: LD_INT 100
26873: PPUSH
26874: CALL_OW 290
26878: GO 26842
26880: POP
26881: POP
// end ;
26882: PPOPN 2
26884: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26885: LD_EXP 52
26889: PUSH
26890: LD_EXP 97
26894: AND
26895: IFFALSE 27078
26897: GO 26899
26899: DISABLE
26900: LD_INT 0
26902: PPUSH
26903: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26904: LD_ADDR_VAR 0 2
26908: PUSH
26909: LD_INT 22
26911: PUSH
26912: LD_OWVAR 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 69
26925: ST_TO_ADDR
// if not tmp then
26926: LD_VAR 0 2
26930: NOT
26931: IFFALSE 26935
// exit ;
26933: GO 27078
// for i := 1 to 2 do
26935: LD_ADDR_VAR 0 1
26939: PUSH
26940: DOUBLE
26941: LD_INT 1
26943: DEC
26944: ST_TO_ADDR
26945: LD_INT 2
26947: PUSH
26948: FOR_TO
26949: IFFALSE 27076
// begin uc_side := your_side ;
26951: LD_ADDR_OWVAR 20
26955: PUSH
26956: LD_OWVAR 2
26960: ST_TO_ADDR
// uc_nation := nation_american ;
26961: LD_ADDR_OWVAR 21
26965: PUSH
26966: LD_INT 1
26968: ST_TO_ADDR
// vc_chassis := us_morphling ;
26969: LD_ADDR_OWVAR 37
26973: PUSH
26974: LD_INT 5
26976: ST_TO_ADDR
// vc_engine := engine_siberite ;
26977: LD_ADDR_OWVAR 39
26981: PUSH
26982: LD_INT 3
26984: ST_TO_ADDR
// vc_control := control_computer ;
26985: LD_ADDR_OWVAR 38
26989: PUSH
26990: LD_INT 3
26992: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26993: LD_ADDR_OWVAR 40
26997: PUSH
26998: LD_INT 10
27000: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27001: LD_VAR 0 2
27005: PUSH
27006: LD_INT 1
27008: ARRAY
27009: PPUSH
27010: CALL_OW 310
27014: NOT
27015: IFFALSE 27062
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27017: CALL_OW 45
27021: PPUSH
27022: LD_VAR 0 2
27026: PUSH
27027: LD_INT 1
27029: ARRAY
27030: PPUSH
27031: CALL_OW 250
27035: PPUSH
27036: LD_VAR 0 2
27040: PUSH
27041: LD_INT 1
27043: ARRAY
27044: PPUSH
27045: CALL_OW 251
27049: PPUSH
27050: LD_INT 12
27052: PPUSH
27053: LD_INT 1
27055: PPUSH
27056: CALL_OW 50
27060: GO 27074
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27062: CALL_OW 45
27066: PPUSH
27067: LD_INT 1
27069: PPUSH
27070: CALL_OW 51
// end ;
27074: GO 26948
27076: POP
27077: POP
// end ;
27078: PPOPN 2
27080: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27081: LD_EXP 52
27085: PUSH
27086: LD_EXP 98
27090: AND
27091: IFFALSE 27313
27093: GO 27095
27095: DISABLE
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
27102: PPUSH
27103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27104: LD_ADDR_VAR 0 6
27108: PUSH
27109: LD_INT 22
27111: PUSH
27112: LD_OWVAR 2
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 21
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 3
27133: PUSH
27134: LD_INT 23
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: LIST
27152: PPUSH
27153: CALL_OW 69
27157: ST_TO_ADDR
// if not tmp then
27158: LD_VAR 0 6
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27313
// s1 := rand ( 1 , 4 ) ;
27167: LD_ADDR_VAR 0 2
27171: PUSH
27172: LD_INT 1
27174: PPUSH
27175: LD_INT 4
27177: PPUSH
27178: CALL_OW 12
27182: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: LD_VAR 0 6
27192: PUSH
27193: LD_INT 1
27195: ARRAY
27196: PPUSH
27197: LD_VAR 0 2
27201: PPUSH
27202: CALL_OW 259
27206: ST_TO_ADDR
// if s1 = 1 then
27207: LD_VAR 0 2
27211: PUSH
27212: LD_INT 1
27214: EQUAL
27215: IFFALSE 27235
// s2 := rand ( 2 , 4 ) else
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: LD_INT 2
27224: PPUSH
27225: LD_INT 4
27227: PPUSH
27228: CALL_OW 12
27232: ST_TO_ADDR
27233: GO 27243
// s2 := 1 ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_INT 1
27242: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27243: LD_ADDR_VAR 0 5
27247: PUSH
27248: LD_VAR 0 6
27252: PUSH
27253: LD_INT 1
27255: ARRAY
27256: PPUSH
27257: LD_VAR 0 3
27261: PPUSH
27262: CALL_OW 259
27266: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27267: LD_VAR 0 6
27271: PUSH
27272: LD_INT 1
27274: ARRAY
27275: PPUSH
27276: LD_VAR 0 2
27280: PPUSH
27281: LD_VAR 0 5
27285: PPUSH
27286: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27290: LD_VAR 0 6
27294: PUSH
27295: LD_INT 1
27297: ARRAY
27298: PPUSH
27299: LD_VAR 0 3
27303: PPUSH
27304: LD_VAR 0 4
27308: PPUSH
27309: CALL_OW 237
// end ;
27313: PPOPN 6
27315: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27316: LD_EXP 52
27320: PUSH
27321: LD_EXP 99
27325: AND
27326: IFFALSE 27405
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27334: LD_ADDR_VAR 0 1
27338: PUSH
27339: LD_INT 22
27341: PUSH
27342: LD_OWVAR 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 30
27353: PUSH
27354: LD_INT 3
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL_OW 69
27369: ST_TO_ADDR
// if not tmp then
27370: LD_VAR 0 1
27374: NOT
27375: IFFALSE 27379
// exit ;
27377: GO 27405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27379: LD_VAR 0 1
27383: PUSH
27384: LD_INT 1
27386: PPUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 12
27396: ARRAY
27397: PPUSH
27398: LD_INT 1
27400: PPUSH
27401: CALL_OW 234
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27408: LD_EXP 52
27412: PUSH
27413: LD_EXP 100
27417: AND
27418: IFFALSE 27530
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: LD_INT 30
27449: PUSH
27450: LD_INT 27
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 30
27459: PUSH
27460: LD_INT 26
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 30
27469: PUSH
27470: LD_INT 28
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PPUSH
27487: CALL_OW 69
27491: ST_TO_ADDR
// if not tmp then
27492: LD_VAR 0 2
27496: NOT
27497: IFFALSE 27501
// exit ;
27499: GO 27530
// for i in tmp do
27501: LD_ADDR_VAR 0 1
27505: PUSH
27506: LD_VAR 0 2
27510: PUSH
27511: FOR_IN
27512: IFFALSE 27528
// SetLives ( i , 1 ) ;
27514: LD_VAR 0 1
27518: PPUSH
27519: LD_INT 1
27521: PPUSH
27522: CALL_OW 234
27526: GO 27511
27528: POP
27529: POP
// end ;
27530: PPOPN 2
27532: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27533: LD_EXP 52
27537: PUSH
27538: LD_EXP 101
27542: AND
27543: IFFALSE 27830
27545: GO 27547
27547: DISABLE
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
// begin i := rand ( 1 , 7 ) ;
27553: LD_ADDR_VAR 0 1
27557: PUSH
27558: LD_INT 1
27560: PPUSH
27561: LD_INT 7
27563: PPUSH
27564: CALL_OW 12
27568: ST_TO_ADDR
// case i of 1 :
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 1
27576: DOUBLE
27577: EQUAL
27578: IFTRUE 27582
27580: GO 27592
27582: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27583: LD_STRING earthquake(getX(game), 0, 32)
27585: PPUSH
27586: CALL_OW 559
27590: GO 27830
27592: LD_INT 2
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27614
27600: POP
// begin ToLua ( displayStucuk(); ) ;
27601: LD_STRING displayStucuk();
27603: PPUSH
27604: CALL_OW 559
// ResetFog ;
27608: CALL_OW 335
// end ; 3 :
27612: GO 27830
27614: LD_INT 3
27616: DOUBLE
27617: EQUAL
27618: IFTRUE 27622
27620: GO 27726
27622: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27623: LD_ADDR_VAR 0 2
27627: PUSH
27628: LD_INT 22
27630: PUSH
27631: LD_OWVAR 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 25
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PPUSH
27654: CALL_OW 69
27658: ST_TO_ADDR
// if not tmp then
27659: LD_VAR 0 2
27663: NOT
27664: IFFALSE 27668
// exit ;
27666: GO 27830
// un := tmp [ rand ( 1 , tmp ) ] ;
27668: LD_ADDR_VAR 0 3
27672: PUSH
27673: LD_VAR 0 2
27677: PUSH
27678: LD_INT 1
27680: PPUSH
27681: LD_VAR 0 2
27685: PPUSH
27686: CALL_OW 12
27690: ARRAY
27691: ST_TO_ADDR
// if Crawls ( un ) then
27692: LD_VAR 0 3
27696: PPUSH
27697: CALL_OW 318
27701: IFFALSE 27712
// ComWalk ( un ) ;
27703: LD_VAR 0 3
27707: PPUSH
27708: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27712: LD_VAR 0 3
27716: PPUSH
27717: LD_INT 8
27719: PPUSH
27720: CALL_OW 336
// end ; 4 :
27724: GO 27830
27726: LD_INT 4
27728: DOUBLE
27729: EQUAL
27730: IFTRUE 27734
27732: GO 27808
27734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27735: LD_ADDR_VAR 0 2
27739: PUSH
27740: LD_INT 22
27742: PUSH
27743: LD_OWVAR 2
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 30
27754: PUSH
27755: LD_INT 29
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PPUSH
27766: CALL_OW 69
27770: ST_TO_ADDR
// if not tmp then
27771: LD_VAR 0 2
27775: NOT
27776: IFFALSE 27780
// exit ;
27778: GO 27830
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27780: LD_VAR 0 2
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: PPUSH
27789: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27793: LD_VAR 0 2
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: PPUSH
27802: CALL_OW 65
// end ; 5 .. 7 :
27806: GO 27830
27808: LD_INT 5
27810: DOUBLE
27811: GREATEREQUAL
27812: IFFALSE 27820
27814: LD_INT 7
27816: DOUBLE
27817: LESSEQUAL
27818: IFTRUE 27822
27820: GO 27829
27822: POP
// StreamSibBomb ; end ;
27823: CALL 24067 0 0
27827: GO 27830
27829: POP
// end ;
27830: PPOPN 3
27832: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27833: LD_EXP 52
27837: PUSH
27838: LD_EXP 102
27842: AND
27843: IFFALSE 27999
27845: GO 27847
27847: DISABLE
27848: LD_INT 0
27850: PPUSH
27851: PPUSH
27852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27853: LD_ADDR_VAR 0 2
27857: PUSH
27858: LD_INT 81
27860: PUSH
27861: LD_OWVAR 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: LD_INT 21
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 21
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PPUSH
27902: CALL_OW 69
27906: ST_TO_ADDR
// if not tmp then
27907: LD_VAR 0 2
27911: NOT
27912: IFFALSE 27916
// exit ;
27914: GO 27999
// p := 0 ;
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: LD_INT 0
27923: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27924: LD_INT 35
27926: PPUSH
27927: CALL_OW 67
// p := p + 1 ;
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: LD_VAR 0 3
27940: PUSH
27941: LD_INT 1
27943: PLUS
27944: ST_TO_ADDR
// for i in tmp do
27945: LD_ADDR_VAR 0 1
27949: PUSH
27950: LD_VAR 0 2
27954: PUSH
27955: FOR_IN
27956: IFFALSE 27987
// if GetLives ( i ) < 1000 then
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 256
27967: PUSH
27968: LD_INT 1000
27970: LESS
27971: IFFALSE 27985
// SetLives ( i , 1000 ) ;
27973: LD_VAR 0 1
27977: PPUSH
27978: LD_INT 1000
27980: PPUSH
27981: CALL_OW 234
27985: GO 27955
27987: POP
27988: POP
// until p > 20 ;
27989: LD_VAR 0 3
27993: PUSH
27994: LD_INT 20
27996: GREATER
27997: IFFALSE 27924
// end ;
27999: PPOPN 3
28001: END
// every 0 0$1 trigger StreamModeActive and sTime do
28002: LD_EXP 52
28006: PUSH
28007: LD_EXP 103
28011: AND
28012: IFFALSE 28047
28014: GO 28016
28016: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28017: LD_INT 28
28019: PPUSH
28020: LD_OWVAR 2
28024: PPUSH
28025: LD_INT 2
28027: PPUSH
28028: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28032: LD_INT 30
28034: PPUSH
28035: LD_OWVAR 2
28039: PPUSH
28040: LD_INT 2
28042: PPUSH
28043: CALL_OW 322
// end ;
28047: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28048: LD_EXP 52
28052: PUSH
28053: LD_EXP 104
28057: AND
28058: IFFALSE 28179
28060: GO 28062
28062: DISABLE
28063: LD_INT 0
28065: PPUSH
28066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_INT 22
28074: PUSH
28075: LD_OWVAR 2
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 21
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: LD_INT 23
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 2
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28179
// for i in tmp do
28130: LD_ADDR_VAR 0 1
28134: PUSH
28135: LD_VAR 0 2
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28177
// begin if Crawls ( i ) then
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 318
28152: IFFALSE 28163
// ComWalk ( i ) ;
28154: LD_VAR 0 1
28158: PPUSH
28159: CALL_OW 138
// SetClass ( i , 2 ) ;
28163: LD_VAR 0 1
28167: PPUSH
28168: LD_INT 2
28170: PPUSH
28171: CALL_OW 336
// end ;
28175: GO 28140
28177: POP
28178: POP
// end ;
28179: PPOPN 2
28181: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28182: LD_EXP 52
28186: PUSH
28187: LD_EXP 105
28191: AND
28192: IFFALSE 28480
28194: GO 28196
28196: DISABLE
28197: LD_INT 0
28199: PPUSH
28200: PPUSH
28201: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28202: LD_OWVAR 2
28206: PPUSH
28207: LD_INT 9
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: LD_INT 1
28215: PPUSH
28216: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28220: LD_INT 9
28222: PPUSH
28223: LD_OWVAR 2
28227: PPUSH
28228: CALL_OW 343
// uc_side := 9 ;
28232: LD_ADDR_OWVAR 20
28236: PUSH
28237: LD_INT 9
28239: ST_TO_ADDR
// uc_nation := 2 ;
28240: LD_ADDR_OWVAR 21
28244: PUSH
28245: LD_INT 2
28247: ST_TO_ADDR
// hc_name := Dark Warrior ;
28248: LD_ADDR_OWVAR 26
28252: PUSH
28253: LD_STRING Dark Warrior
28255: ST_TO_ADDR
// hc_gallery :=  ;
28256: LD_ADDR_OWVAR 33
28260: PUSH
28261: LD_STRING 
28263: ST_TO_ADDR
// hc_noskilllimit := true ;
28264: LD_ADDR_OWVAR 76
28268: PUSH
28269: LD_INT 1
28271: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28272: LD_ADDR_OWVAR 31
28276: PUSH
28277: LD_INT 30
28279: PUSH
28280: LD_INT 30
28282: PUSH
28283: LD_INT 30
28285: PUSH
28286: LD_INT 30
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: ST_TO_ADDR
// un := CreateHuman ;
28295: LD_ADDR_VAR 0 3
28299: PUSH
28300: CALL_OW 44
28304: ST_TO_ADDR
// hc_noskilllimit := false ;
28305: LD_ADDR_OWVAR 76
28309: PUSH
28310: LD_INT 0
28312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28313: LD_VAR 0 3
28317: PPUSH
28318: LD_INT 1
28320: PPUSH
28321: CALL_OW 51
// ToLua ( playRanger() ) ;
28325: LD_STRING playRanger()
28327: PPUSH
28328: CALL_OW 559
// p := 0 ;
28332: LD_ADDR_VAR 0 2
28336: PUSH
28337: LD_INT 0
28339: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28340: LD_INT 35
28342: PPUSH
28343: CALL_OW 67
// p := p + 1 ;
28347: LD_ADDR_VAR 0 2
28351: PUSH
28352: LD_VAR 0 2
28356: PUSH
28357: LD_INT 1
28359: PLUS
28360: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28361: LD_VAR 0 3
28365: PPUSH
28366: CALL_OW 256
28370: PUSH
28371: LD_INT 1000
28373: LESS
28374: IFFALSE 28388
// SetLives ( un , 1000 ) ;
28376: LD_VAR 0 3
28380: PPUSH
28381: LD_INT 1000
28383: PPUSH
28384: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28388: LD_VAR 0 3
28392: PPUSH
28393: LD_INT 81
28395: PUSH
28396: LD_OWVAR 2
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 91
28407: PUSH
28408: LD_VAR 0 3
28412: PUSH
28413: LD_INT 30
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PPUSH
28425: CALL_OW 69
28429: PPUSH
28430: LD_VAR 0 3
28434: PPUSH
28435: CALL_OW 74
28439: PPUSH
28440: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28444: LD_VAR 0 2
28448: PUSH
28449: LD_INT 80
28451: GREATER
28452: PUSH
28453: LD_VAR 0 3
28457: PPUSH
28458: CALL_OW 301
28462: OR
28463: IFFALSE 28340
// if un then
28465: LD_VAR 0 3
28469: IFFALSE 28480
// RemoveUnit ( un ) ;
28471: LD_VAR 0 3
28475: PPUSH
28476: CALL_OW 64
// end ;
28480: PPOPN 3
28482: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28483: LD_EXP 106
28487: IFFALSE 28603
28489: GO 28491
28491: DISABLE
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
28496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28497: LD_ADDR_VAR 0 2
28501: PUSH
28502: LD_INT 81
28504: PUSH
28505: LD_OWVAR 2
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 21
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PPUSH
28528: CALL_OW 69
28532: ST_TO_ADDR
// if not tmp then
28533: LD_VAR 0 2
28537: NOT
28538: IFFALSE 28542
// exit ;
28540: GO 28603
// ToLua ( playComputer() ) ;
28542: LD_STRING playComputer()
28544: PPUSH
28545: CALL_OW 559
// for i in tmp do
28549: LD_ADDR_VAR 0 1
28553: PUSH
28554: LD_VAR 0 2
28558: PUSH
28559: FOR_IN
28560: IFFALSE 28601
// for j := 1 to 4 do
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: DOUBLE
28568: LD_INT 1
28570: DEC
28571: ST_TO_ADDR
28572: LD_INT 4
28574: PUSH
28575: FOR_TO
28576: IFFALSE 28597
// SetSkill ( i , j , 10 ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_VAR 0 3
28587: PPUSH
28588: LD_INT 10
28590: PPUSH
28591: CALL_OW 237
28595: GO 28575
28597: POP
28598: POP
28599: GO 28559
28601: POP
28602: POP
// end ;
28603: PPOPN 3
28605: END
// every 0 0$1 trigger s30 do var i , tmp ;
28606: LD_EXP 107
28610: IFFALSE 28679
28612: GO 28614
28614: DISABLE
28615: LD_INT 0
28617: PPUSH
28618: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28619: LD_ADDR_VAR 0 2
28623: PUSH
28624: LD_INT 22
28626: PUSH
28627: LD_OWVAR 2
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PPUSH
28636: CALL_OW 69
28640: ST_TO_ADDR
// if not tmp then
28641: LD_VAR 0 2
28645: NOT
28646: IFFALSE 28650
// exit ;
28648: GO 28679
// for i in tmp do
28650: LD_ADDR_VAR 0 1
28654: PUSH
28655: LD_VAR 0 2
28659: PUSH
28660: FOR_IN
28661: IFFALSE 28677
// SetLives ( i , 300 ) ;
28663: LD_VAR 0 1
28667: PPUSH
28668: LD_INT 300
28670: PPUSH
28671: CALL_OW 234
28675: GO 28660
28677: POP
28678: POP
// end ;
28679: PPOPN 2
28681: END
// every 0 0$1 trigger s60 do var i , tmp ;
28682: LD_EXP 108
28686: IFFALSE 28755
28688: GO 28690
28690: DISABLE
28691: LD_INT 0
28693: PPUSH
28694: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28695: LD_ADDR_VAR 0 2
28699: PUSH
28700: LD_INT 22
28702: PUSH
28703: LD_OWVAR 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PPUSH
28712: CALL_OW 69
28716: ST_TO_ADDR
// if not tmp then
28717: LD_VAR 0 2
28721: NOT
28722: IFFALSE 28726
// exit ;
28724: GO 28755
// for i in tmp do
28726: LD_ADDR_VAR 0 1
28730: PUSH
28731: LD_VAR 0 2
28735: PUSH
28736: FOR_IN
28737: IFFALSE 28753
// SetLives ( i , 600 ) ;
28739: LD_VAR 0 1
28743: PPUSH
28744: LD_INT 600
28746: PPUSH
28747: CALL_OW 234
28751: GO 28736
28753: POP
28754: POP
// end ;
28755: PPOPN 2
28757: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28758: LD_INT 0
28760: PPUSH
// case cmd of 301 :
28761: LD_VAR 0 1
28765: PUSH
28766: LD_INT 301
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28806
28774: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28775: LD_VAR 0 6
28779: PPUSH
28780: LD_VAR 0 7
28784: PPUSH
28785: LD_VAR 0 8
28789: PPUSH
28790: LD_VAR 0 4
28794: PPUSH
28795: LD_VAR 0 5
28799: PPUSH
28800: CALL 30007 0 5
28804: GO 28927
28806: LD_INT 302
28808: DOUBLE
28809: EQUAL
28810: IFTRUE 28814
28812: GO 28851
28814: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28815: LD_VAR 0 6
28819: PPUSH
28820: LD_VAR 0 7
28824: PPUSH
28825: LD_VAR 0 8
28829: PPUSH
28830: LD_VAR 0 9
28834: PPUSH
28835: LD_VAR 0 4
28839: PPUSH
28840: LD_VAR 0 5
28844: PPUSH
28845: CALL 30098 0 6
28849: GO 28927
28851: LD_INT 303
28853: DOUBLE
28854: EQUAL
28855: IFTRUE 28859
28857: GO 28896
28859: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28860: LD_VAR 0 6
28864: PPUSH
28865: LD_VAR 0 7
28869: PPUSH
28870: LD_VAR 0 8
28874: PPUSH
28875: LD_VAR 0 9
28879: PPUSH
28880: LD_VAR 0 4
28884: PPUSH
28885: LD_VAR 0 5
28889: PPUSH
28890: CALL 28932 0 6
28894: GO 28927
28896: LD_INT 304
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28926
28904: POP
// hHackTeleport ( unit , x , y ) ; end ;
28905: LD_VAR 0 2
28909: PPUSH
28910: LD_VAR 0 4
28914: PPUSH
28915: LD_VAR 0 5
28919: PPUSH
28920: CALL 30691 0 3
28924: GO 28927
28926: POP
// end ;
28927: LD_VAR 0 12
28931: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28932: LD_INT 0
28934: PPUSH
28935: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28936: LD_VAR 0 1
28940: PUSH
28941: LD_INT 1
28943: LESS
28944: PUSH
28945: LD_VAR 0 1
28949: PUSH
28950: LD_INT 3
28952: GREATER
28953: OR
28954: PUSH
28955: LD_VAR 0 5
28959: PPUSH
28960: LD_VAR 0 6
28964: PPUSH
28965: CALL_OW 428
28969: OR
28970: IFFALSE 28974
// exit ;
28972: GO 29694
// uc_side := your_side ;
28974: LD_ADDR_OWVAR 20
28978: PUSH
28979: LD_OWVAR 2
28983: ST_TO_ADDR
// uc_nation := nation ;
28984: LD_ADDR_OWVAR 21
28988: PUSH
28989: LD_VAR 0 1
28993: ST_TO_ADDR
// bc_level = 1 ;
28994: LD_ADDR_OWVAR 43
28998: PUSH
28999: LD_INT 1
29001: ST_TO_ADDR
// case btype of 1 :
29002: LD_VAR 0 2
29006: PUSH
29007: LD_INT 1
29009: DOUBLE
29010: EQUAL
29011: IFTRUE 29015
29013: GO 29026
29015: POP
// bc_type := b_depot ; 2 :
29016: LD_ADDR_OWVAR 42
29020: PUSH
29021: LD_INT 0
29023: ST_TO_ADDR
29024: GO 29638
29026: LD_INT 2
29028: DOUBLE
29029: EQUAL
29030: IFTRUE 29034
29032: GO 29045
29034: POP
// bc_type := b_warehouse ; 3 :
29035: LD_ADDR_OWVAR 42
29039: PUSH
29040: LD_INT 1
29042: ST_TO_ADDR
29043: GO 29638
29045: LD_INT 3
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 29064
29053: POP
// bc_type := b_lab ; 4 .. 9 :
29054: LD_ADDR_OWVAR 42
29058: PUSH
29059: LD_INT 6
29061: ST_TO_ADDR
29062: GO 29638
29064: LD_INT 4
29066: DOUBLE
29067: GREATEREQUAL
29068: IFFALSE 29076
29070: LD_INT 9
29072: DOUBLE
29073: LESSEQUAL
29074: IFTRUE 29078
29076: GO 29130
29078: POP
// begin bc_type := b_lab_half ;
29079: LD_ADDR_OWVAR 42
29083: PUSH
29084: LD_INT 7
29086: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29087: LD_ADDR_OWVAR 44
29091: PUSH
29092: LD_INT 10
29094: PUSH
29095: LD_INT 11
29097: PUSH
29098: LD_INT 12
29100: PUSH
29101: LD_INT 15
29103: PUSH
29104: LD_INT 14
29106: PUSH
29107: LD_INT 13
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: PUSH
29118: LD_VAR 0 2
29122: PUSH
29123: LD_INT 3
29125: MINUS
29126: ARRAY
29127: ST_TO_ADDR
// end ; 10 .. 13 :
29128: GO 29638
29130: LD_INT 10
29132: DOUBLE
29133: GREATEREQUAL
29134: IFFALSE 29142
29136: LD_INT 13
29138: DOUBLE
29139: LESSEQUAL
29140: IFTRUE 29144
29142: GO 29221
29144: POP
// begin bc_type := b_lab_full ;
29145: LD_ADDR_OWVAR 42
29149: PUSH
29150: LD_INT 8
29152: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29153: LD_ADDR_OWVAR 44
29157: PUSH
29158: LD_INT 10
29160: PUSH
29161: LD_INT 12
29163: PUSH
29164: LD_INT 14
29166: PUSH
29167: LD_INT 13
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: PUSH
29176: LD_VAR 0 2
29180: PUSH
29181: LD_INT 9
29183: MINUS
29184: ARRAY
29185: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29186: LD_ADDR_OWVAR 45
29190: PUSH
29191: LD_INT 11
29193: PUSH
29194: LD_INT 15
29196: PUSH
29197: LD_INT 12
29199: PUSH
29200: LD_INT 15
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: PUSH
29209: LD_VAR 0 2
29213: PUSH
29214: LD_INT 9
29216: MINUS
29217: ARRAY
29218: ST_TO_ADDR
// end ; 14 :
29219: GO 29638
29221: LD_INT 14
29223: DOUBLE
29224: EQUAL
29225: IFTRUE 29229
29227: GO 29240
29229: POP
// bc_type := b_workshop ; 15 :
29230: LD_ADDR_OWVAR 42
29234: PUSH
29235: LD_INT 2
29237: ST_TO_ADDR
29238: GO 29638
29240: LD_INT 15
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29259
29248: POP
// bc_type := b_factory ; 16 :
29249: LD_ADDR_OWVAR 42
29253: PUSH
29254: LD_INT 3
29256: ST_TO_ADDR
29257: GO 29638
29259: LD_INT 16
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29278
29267: POP
// bc_type := b_ext_gun ; 17 :
29268: LD_ADDR_OWVAR 42
29272: PUSH
29273: LD_INT 17
29275: ST_TO_ADDR
29276: GO 29638
29278: LD_INT 17
29280: DOUBLE
29281: EQUAL
29282: IFTRUE 29286
29284: GO 29314
29286: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29287: LD_ADDR_OWVAR 42
29291: PUSH
29292: LD_INT 19
29294: PUSH
29295: LD_INT 23
29297: PUSH
29298: LD_INT 19
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: PUSH
29306: LD_VAR 0 1
29310: ARRAY
29311: ST_TO_ADDR
29312: GO 29638
29314: LD_INT 18
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29333
29322: POP
// bc_type := b_ext_radar ; 19 :
29323: LD_ADDR_OWVAR 42
29327: PUSH
29328: LD_INT 20
29330: ST_TO_ADDR
29331: GO 29638
29333: LD_INT 19
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29341
29339: GO 29352
29341: POP
// bc_type := b_ext_radio ; 20 :
29342: LD_ADDR_OWVAR 42
29346: PUSH
29347: LD_INT 22
29349: ST_TO_ADDR
29350: GO 29638
29352: LD_INT 20
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29371
29360: POP
// bc_type := b_ext_siberium ; 21 :
29361: LD_ADDR_OWVAR 42
29365: PUSH
29366: LD_INT 21
29368: ST_TO_ADDR
29369: GO 29638
29371: LD_INT 21
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29390
29379: POP
// bc_type := b_ext_computer ; 22 :
29380: LD_ADDR_OWVAR 42
29384: PUSH
29385: LD_INT 24
29387: ST_TO_ADDR
29388: GO 29638
29390: LD_INT 22
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29409
29398: POP
// bc_type := b_ext_track ; 23 :
29399: LD_ADDR_OWVAR 42
29403: PUSH
29404: LD_INT 16
29406: ST_TO_ADDR
29407: GO 29638
29409: LD_INT 23
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29428
29417: POP
// bc_type := b_ext_laser ; 24 :
29418: LD_ADDR_OWVAR 42
29422: PUSH
29423: LD_INT 25
29425: ST_TO_ADDR
29426: GO 29638
29428: LD_INT 24
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29447
29436: POP
// bc_type := b_control_tower ; 25 :
29437: LD_ADDR_OWVAR 42
29441: PUSH
29442: LD_INT 36
29444: ST_TO_ADDR
29445: GO 29638
29447: LD_INT 25
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29466
29455: POP
// bc_type := b_breastwork ; 26 :
29456: LD_ADDR_OWVAR 42
29460: PUSH
29461: LD_INT 31
29463: ST_TO_ADDR
29464: GO 29638
29466: LD_INT 26
29468: DOUBLE
29469: EQUAL
29470: IFTRUE 29474
29472: GO 29485
29474: POP
// bc_type := b_bunker ; 27 :
29475: LD_ADDR_OWVAR 42
29479: PUSH
29480: LD_INT 32
29482: ST_TO_ADDR
29483: GO 29638
29485: LD_INT 27
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29504
29493: POP
// bc_type := b_turret ; 28 :
29494: LD_ADDR_OWVAR 42
29498: PUSH
29499: LD_INT 33
29501: ST_TO_ADDR
29502: GO 29638
29504: LD_INT 28
29506: DOUBLE
29507: EQUAL
29508: IFTRUE 29512
29510: GO 29523
29512: POP
// bc_type := b_armoury ; 29 :
29513: LD_ADDR_OWVAR 42
29517: PUSH
29518: LD_INT 4
29520: ST_TO_ADDR
29521: GO 29638
29523: LD_INT 29
29525: DOUBLE
29526: EQUAL
29527: IFTRUE 29531
29529: GO 29542
29531: POP
// bc_type := b_barracks ; 30 :
29532: LD_ADDR_OWVAR 42
29536: PUSH
29537: LD_INT 5
29539: ST_TO_ADDR
29540: GO 29638
29542: LD_INT 30
29544: DOUBLE
29545: EQUAL
29546: IFTRUE 29550
29548: GO 29561
29550: POP
// bc_type := b_solar_power ; 31 :
29551: LD_ADDR_OWVAR 42
29555: PUSH
29556: LD_INT 27
29558: ST_TO_ADDR
29559: GO 29638
29561: LD_INT 31
29563: DOUBLE
29564: EQUAL
29565: IFTRUE 29569
29567: GO 29580
29569: POP
// bc_type := b_oil_power ; 32 :
29570: LD_ADDR_OWVAR 42
29574: PUSH
29575: LD_INT 26
29577: ST_TO_ADDR
29578: GO 29638
29580: LD_INT 32
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29599
29588: POP
// bc_type := b_siberite_power ; 33 :
29589: LD_ADDR_OWVAR 42
29593: PUSH
29594: LD_INT 28
29596: ST_TO_ADDR
29597: GO 29638
29599: LD_INT 33
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29607
29605: GO 29618
29607: POP
// bc_type := b_oil_mine ; 34 :
29608: LD_ADDR_OWVAR 42
29612: PUSH
29613: LD_INT 29
29615: ST_TO_ADDR
29616: GO 29638
29618: LD_INT 34
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29637
29626: POP
// bc_type := b_siberite_mine ; end ;
29627: LD_ADDR_OWVAR 42
29631: PUSH
29632: LD_INT 30
29634: ST_TO_ADDR
29635: GO 29638
29637: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29638: LD_ADDR_VAR 0 8
29642: PUSH
29643: LD_VAR 0 5
29647: PPUSH
29648: LD_VAR 0 6
29652: PPUSH
29653: LD_VAR 0 3
29657: PPUSH
29658: CALL_OW 47
29662: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29663: LD_OWVAR 42
29667: PUSH
29668: LD_INT 32
29670: PUSH
29671: LD_INT 33
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: IN
29678: IFFALSE 29694
// PlaceWeaponTurret ( b , weapon ) ;
29680: LD_VAR 0 8
29684: PPUSH
29685: LD_VAR 0 4
29689: PPUSH
29690: CALL_OW 431
// end ;
29694: LD_VAR 0 7
29698: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29699: LD_INT 0
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29705: LD_ADDR_VAR 0 4
29709: PUSH
29710: LD_INT 22
29712: PUSH
29713: LD_OWVAR 2
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: LD_INT 30
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 30
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 69
29758: ST_TO_ADDR
// if not tmp then
29759: LD_VAR 0 4
29763: NOT
29764: IFFALSE 29768
// exit ;
29766: GO 29827
// for i in tmp do
29768: LD_ADDR_VAR 0 2
29772: PUSH
29773: LD_VAR 0 4
29777: PUSH
29778: FOR_IN
29779: IFFALSE 29825
// for j = 1 to 3 do
29781: LD_ADDR_VAR 0 3
29785: PUSH
29786: DOUBLE
29787: LD_INT 1
29789: DEC
29790: ST_TO_ADDR
29791: LD_INT 3
29793: PUSH
29794: FOR_TO
29795: IFFALSE 29821
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29797: LD_VAR 0 2
29801: PPUSH
29802: CALL_OW 274
29806: PPUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: LD_INT 99999
29814: PPUSH
29815: CALL_OW 277
29819: GO 29794
29821: POP
29822: POP
29823: GO 29778
29825: POP
29826: POP
// end ;
29827: LD_VAR 0 1
29831: RET
// export function hHackSetLevel10 ; var i , j ; begin
29832: LD_INT 0
29834: PPUSH
29835: PPUSH
29836: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29837: LD_ADDR_VAR 0 2
29841: PUSH
29842: LD_INT 21
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PPUSH
29852: CALL_OW 69
29856: PUSH
29857: FOR_IN
29858: IFFALSE 29910
// if IsSelected ( i ) then
29860: LD_VAR 0 2
29864: PPUSH
29865: CALL_OW 306
29869: IFFALSE 29908
// begin for j := 1 to 4 do
29871: LD_ADDR_VAR 0 3
29875: PUSH
29876: DOUBLE
29877: LD_INT 1
29879: DEC
29880: ST_TO_ADDR
29881: LD_INT 4
29883: PUSH
29884: FOR_TO
29885: IFFALSE 29906
// SetSkill ( i , j , 10 ) ;
29887: LD_VAR 0 2
29891: PPUSH
29892: LD_VAR 0 3
29896: PPUSH
29897: LD_INT 10
29899: PPUSH
29900: CALL_OW 237
29904: GO 29884
29906: POP
29907: POP
// end ;
29908: GO 29857
29910: POP
29911: POP
// end ;
29912: LD_VAR 0 1
29916: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29917: LD_INT 0
29919: PPUSH
29920: PPUSH
29921: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29922: LD_ADDR_VAR 0 2
29926: PUSH
29927: LD_INT 22
29929: PUSH
29930: LD_OWVAR 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 21
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PPUSH
29953: CALL_OW 69
29957: PUSH
29958: FOR_IN
29959: IFFALSE 30000
// begin for j := 1 to 4 do
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: DOUBLE
29967: LD_INT 1
29969: DEC
29970: ST_TO_ADDR
29971: LD_INT 4
29973: PUSH
29974: FOR_TO
29975: IFFALSE 29996
// SetSkill ( i , j , 10 ) ;
29977: LD_VAR 0 2
29981: PPUSH
29982: LD_VAR 0 3
29986: PPUSH
29987: LD_INT 10
29989: PPUSH
29990: CALL_OW 237
29994: GO 29974
29996: POP
29997: POP
// end ;
29998: GO 29958
30000: POP
30001: POP
// end ;
30002: LD_VAR 0 1
30006: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30007: LD_INT 0
30009: PPUSH
// uc_side := your_side ;
30010: LD_ADDR_OWVAR 20
30014: PUSH
30015: LD_OWVAR 2
30019: ST_TO_ADDR
// uc_nation := nation ;
30020: LD_ADDR_OWVAR 21
30024: PUSH
30025: LD_VAR 0 1
30029: ST_TO_ADDR
// InitHc ;
30030: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30034: LD_INT 0
30036: PPUSH
30037: LD_VAR 0 2
30041: PPUSH
30042: LD_VAR 0 3
30046: PPUSH
30047: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30051: LD_VAR 0 4
30055: PPUSH
30056: LD_VAR 0 5
30060: PPUSH
30061: CALL_OW 428
30065: PUSH
30066: LD_INT 0
30068: EQUAL
30069: IFFALSE 30093
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30071: CALL_OW 44
30075: PPUSH
30076: LD_VAR 0 4
30080: PPUSH
30081: LD_VAR 0 5
30085: PPUSH
30086: LD_INT 1
30088: PPUSH
30089: CALL_OW 48
// end ;
30093: LD_VAR 0 6
30097: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30098: LD_INT 0
30100: PPUSH
30101: PPUSH
// uc_side := your_side ;
30102: LD_ADDR_OWVAR 20
30106: PUSH
30107: LD_OWVAR 2
30111: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30112: LD_VAR 0 1
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: LD_INT 2
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: LD_INT 5
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: IN
30139: IFFALSE 30151
// uc_nation := nation_american else
30141: LD_ADDR_OWVAR 21
30145: PUSH
30146: LD_INT 1
30148: ST_TO_ADDR
30149: GO 30194
// if chassis in [ 11 , 12 , 13 , 14 ] then
30151: LD_VAR 0 1
30155: PUSH
30156: LD_INT 11
30158: PUSH
30159: LD_INT 12
30161: PUSH
30162: LD_INT 13
30164: PUSH
30165: LD_INT 14
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: IN
30174: IFFALSE 30186
// uc_nation := nation_arabian else
30176: LD_ADDR_OWVAR 21
30180: PUSH
30181: LD_INT 2
30183: ST_TO_ADDR
30184: GO 30194
// uc_nation := nation_russian ;
30186: LD_ADDR_OWVAR 21
30190: PUSH
30191: LD_INT 3
30193: ST_TO_ADDR
// vc_chassis := chassis ;
30194: LD_ADDR_OWVAR 37
30198: PUSH
30199: LD_VAR 0 1
30203: ST_TO_ADDR
// vc_engine := engine ;
30204: LD_ADDR_OWVAR 39
30208: PUSH
30209: LD_VAR 0 2
30213: ST_TO_ADDR
// vc_control := control ;
30214: LD_ADDR_OWVAR 38
30218: PUSH
30219: LD_VAR 0 3
30223: ST_TO_ADDR
// vc_weapon := weapon ;
30224: LD_ADDR_OWVAR 40
30228: PUSH
30229: LD_VAR 0 4
30233: ST_TO_ADDR
// un := CreateVehicle ;
30234: LD_ADDR_VAR 0 8
30238: PUSH
30239: CALL_OW 45
30243: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30244: LD_VAR 0 8
30248: PPUSH
30249: LD_INT 0
30251: PPUSH
30252: LD_INT 5
30254: PPUSH
30255: CALL_OW 12
30259: PPUSH
30260: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30264: LD_VAR 0 8
30268: PPUSH
30269: LD_VAR 0 5
30273: PPUSH
30274: LD_VAR 0 6
30278: PPUSH
30279: LD_INT 1
30281: PPUSH
30282: CALL_OW 48
// end ;
30286: LD_VAR 0 7
30290: RET
// export hInvincible ; every 1 do
30291: GO 30293
30293: DISABLE
// hInvincible := [ ] ;
30294: LD_ADDR_EXP 109
30298: PUSH
30299: EMPTY
30300: ST_TO_ADDR
30301: END
// every 10 do var i ;
30302: GO 30304
30304: DISABLE
30305: LD_INT 0
30307: PPUSH
// begin enable ;
30308: ENABLE
// if not hInvincible then
30309: LD_EXP 109
30313: NOT
30314: IFFALSE 30318
// exit ;
30316: GO 30362
// for i in hInvincible do
30318: LD_ADDR_VAR 0 1
30322: PUSH
30323: LD_EXP 109
30327: PUSH
30328: FOR_IN
30329: IFFALSE 30360
// if GetLives ( i ) < 1000 then
30331: LD_VAR 0 1
30335: PPUSH
30336: CALL_OW 256
30340: PUSH
30341: LD_INT 1000
30343: LESS
30344: IFFALSE 30358
// SetLives ( i , 1000 ) ;
30346: LD_VAR 0 1
30350: PPUSH
30351: LD_INT 1000
30353: PPUSH
30354: CALL_OW 234
30358: GO 30328
30360: POP
30361: POP
// end ;
30362: PPOPN 1
30364: END
// export function hHackInvincible ; var i ; begin
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30369: LD_ADDR_VAR 0 2
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 21
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 21
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: PPUSH
30402: CALL_OW 69
30406: PUSH
30407: FOR_IN
30408: IFFALSE 30469
// if IsSelected ( i ) then
30410: LD_VAR 0 2
30414: PPUSH
30415: CALL_OW 306
30419: IFFALSE 30467
// begin if i in hInvincible then
30421: LD_VAR 0 2
30425: PUSH
30426: LD_EXP 109
30430: IN
30431: IFFALSE 30451
// hInvincible := hInvincible diff i else
30433: LD_ADDR_EXP 109
30437: PUSH
30438: LD_EXP 109
30442: PUSH
30443: LD_VAR 0 2
30447: DIFF
30448: ST_TO_ADDR
30449: GO 30467
// hInvincible := hInvincible union i ;
30451: LD_ADDR_EXP 109
30455: PUSH
30456: LD_EXP 109
30460: PUSH
30461: LD_VAR 0 2
30465: UNION
30466: ST_TO_ADDR
// end ;
30467: GO 30407
30469: POP
30470: POP
// end ;
30471: LD_VAR 0 1
30475: RET
// export function hHackInvisible ; var i , j ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
30480: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30481: LD_ADDR_VAR 0 2
30485: PUSH
30486: LD_INT 21
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PPUSH
30496: CALL_OW 69
30500: PUSH
30501: FOR_IN
30502: IFFALSE 30526
// if IsSelected ( i ) then
30504: LD_VAR 0 2
30508: PPUSH
30509: CALL_OW 306
30513: IFFALSE 30524
// ComForceInvisible ( i ) ;
30515: LD_VAR 0 2
30519: PPUSH
30520: CALL_OW 496
30524: GO 30501
30526: POP
30527: POP
// end ;
30528: LD_VAR 0 1
30532: RET
// export function hHackChangeYourSide ; begin
30533: LD_INT 0
30535: PPUSH
// if your_side = 8 then
30536: LD_OWVAR 2
30540: PUSH
30541: LD_INT 8
30543: EQUAL
30544: IFFALSE 30556
// your_side := 0 else
30546: LD_ADDR_OWVAR 2
30550: PUSH
30551: LD_INT 0
30553: ST_TO_ADDR
30554: GO 30570
// your_side := your_side + 1 ;
30556: LD_ADDR_OWVAR 2
30560: PUSH
30561: LD_OWVAR 2
30565: PUSH
30566: LD_INT 1
30568: PLUS
30569: ST_TO_ADDR
// end ;
30570: LD_VAR 0 1
30574: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30575: LD_INT 0
30577: PPUSH
30578: PPUSH
30579: PPUSH
// for i in all_units do
30580: LD_ADDR_VAR 0 2
30584: PUSH
30585: LD_OWVAR 3
30589: PUSH
30590: FOR_IN
30591: IFFALSE 30669
// if IsSelected ( i ) then
30593: LD_VAR 0 2
30597: PPUSH
30598: CALL_OW 306
30602: IFFALSE 30667
// begin j := GetSide ( i ) ;
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_VAR 0 2
30613: PPUSH
30614: CALL_OW 255
30618: ST_TO_ADDR
// if j = 8 then
30619: LD_VAR 0 3
30623: PUSH
30624: LD_INT 8
30626: EQUAL
30627: IFFALSE 30639
// j := 0 else
30629: LD_ADDR_VAR 0 3
30633: PUSH
30634: LD_INT 0
30636: ST_TO_ADDR
30637: GO 30653
// j := j + 1 ;
30639: LD_ADDR_VAR 0 3
30643: PUSH
30644: LD_VAR 0 3
30648: PUSH
30649: LD_INT 1
30651: PLUS
30652: ST_TO_ADDR
// SetSide ( i , j ) ;
30653: LD_VAR 0 2
30657: PPUSH
30658: LD_VAR 0 3
30662: PPUSH
30663: CALL_OW 235
// end ;
30667: GO 30590
30669: POP
30670: POP
// end ;
30671: LD_VAR 0 1
30675: RET
// export function hHackFog ; begin
30676: LD_INT 0
30678: PPUSH
// FogOff ( true ) ;
30679: LD_INT 1
30681: PPUSH
30682: CALL_OW 344
// end ;
30686: LD_VAR 0 1
30690: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30691: LD_INT 0
30693: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30694: LD_VAR 0 1
30698: PPUSH
30699: LD_VAR 0 2
30703: PPUSH
30704: LD_VAR 0 3
30708: PPUSH
30709: LD_INT 1
30711: PPUSH
30712: LD_INT 1
30714: PPUSH
30715: CALL_OW 483
// CenterOnXY ( x , y ) ;
30719: LD_VAR 0 2
30723: PPUSH
30724: LD_VAR 0 3
30728: PPUSH
30729: CALL_OW 84
// end ; end_of_file
30733: LD_VAR 0 4
30737: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30738: LD_VAR 0 1
30742: PUSH
30743: LD_INT 200
30745: DOUBLE
30746: GREATEREQUAL
30747: IFFALSE 30755
30749: LD_INT 299
30751: DOUBLE
30752: LESSEQUAL
30753: IFTRUE 30757
30755: GO 30789
30757: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30758: LD_VAR 0 1
30762: PPUSH
30763: LD_VAR 0 2
30767: PPUSH
30768: LD_VAR 0 3
30772: PPUSH
30773: LD_VAR 0 4
30777: PPUSH
30778: LD_VAR 0 5
30782: PPUSH
30783: CALL 31023 0 5
30787: GO 30866
30789: LD_INT 300
30791: DOUBLE
30792: GREATEREQUAL
30793: IFFALSE 30801
30795: LD_INT 399
30797: DOUBLE
30798: LESSEQUAL
30799: IFTRUE 30803
30801: GO 30865
30803: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30804: LD_VAR 0 1
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: LD_VAR 0 4
30823: PPUSH
30824: LD_VAR 0 5
30828: PPUSH
30829: LD_VAR 0 6
30833: PPUSH
30834: LD_VAR 0 7
30838: PPUSH
30839: LD_VAR 0 8
30843: PPUSH
30844: LD_VAR 0 9
30848: PPUSH
30849: LD_VAR 0 10
30853: PPUSH
30854: LD_VAR 0 11
30858: PPUSH
30859: CALL 28758 0 11
30863: GO 30866
30865: POP
// end ;
30866: PPOPN 11
30868: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
30869: LD_VAR 0 1
30873: PPUSH
30874: LD_VAR 0 2
30878: PPUSH
30879: LD_VAR 0 3
30883: PPUSH
30884: LD_VAR 0 4
30888: PPUSH
30889: LD_VAR 0 5
30893: PPUSH
30894: CALL 31015 0 5
// end ; end_of_file
30898: PPOPN 5
30900: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30901: LD_INT 0
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 264
30916: PUSH
30917: LD_EXP 126
30921: EQUAL
30922: IFFALSE 30994
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30924: LD_INT 68
30926: PPUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 255
30936: PPUSH
30937: CALL_OW 321
30941: PUSH
30942: LD_INT 2
30944: EQUAL
30945: IFFALSE 30957
// eff := 70 else
30947: LD_ADDR_VAR 0 4
30951: PUSH
30952: LD_INT 70
30954: ST_TO_ADDR
30955: GO 30965
// eff := 30 ;
30957: LD_ADDR_VAR 0 4
30961: PUSH
30962: LD_INT 30
30964: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30965: LD_VAR 0 1
30969: PPUSH
30970: CALL_OW 250
30974: PPUSH
30975: LD_VAR 0 1
30979: PPUSH
30980: CALL_OW 251
30984: PPUSH
30985: LD_VAR 0 4
30989: PPUSH
30990: CALL_OW 495
// end ; end ;
30994: LD_VAR 0 2
30998: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30999: LD_INT 0
31001: PPUSH
// end ;
31002: LD_VAR 0 4
31006: RET
// export function SOS_Command ( cmd ) ; begin
31007: LD_INT 0
31009: PPUSH
// end ;
31010: LD_VAR 0 2
31014: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31015: LD_INT 0
31017: PPUSH
// end ;
31018: LD_VAR 0 6
31022: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31023: LD_INT 0
31025: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31026: LD_VAR 0 1
31030: PUSH
31031: LD_INT 250
31033: EQUAL
31034: PUSH
31035: LD_VAR 0 2
31039: PPUSH
31040: CALL_OW 264
31044: PUSH
31045: LD_EXP 129
31049: EQUAL
31050: AND
31051: IFFALSE 31072
// MinerPlaceMine ( unit , x , y ) ;
31053: LD_VAR 0 2
31057: PPUSH
31058: LD_VAR 0 4
31062: PPUSH
31063: LD_VAR 0 5
31067: PPUSH
31068: CALL 33421 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31072: LD_VAR 0 1
31076: PUSH
31077: LD_INT 251
31079: EQUAL
31080: PUSH
31081: LD_VAR 0 2
31085: PPUSH
31086: CALL_OW 264
31090: PUSH
31091: LD_EXP 129
31095: EQUAL
31096: AND
31097: IFFALSE 31118
// MinerDetonateMine ( unit , x , y ) ;
31099: LD_VAR 0 2
31103: PPUSH
31104: LD_VAR 0 4
31108: PPUSH
31109: LD_VAR 0 5
31113: PPUSH
31114: CALL 33698 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31118: LD_VAR 0 1
31122: PUSH
31123: LD_INT 252
31125: EQUAL
31126: PUSH
31127: LD_VAR 0 2
31131: PPUSH
31132: CALL_OW 264
31136: PUSH
31137: LD_EXP 129
31141: EQUAL
31142: AND
31143: IFFALSE 31164
// MinerCreateMinefield ( unit , x , y ) ;
31145: LD_VAR 0 2
31149: PPUSH
31150: LD_VAR 0 4
31154: PPUSH
31155: LD_VAR 0 5
31159: PPUSH
31160: CALL 34115 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31164: LD_VAR 0 1
31168: PUSH
31169: LD_INT 253
31171: EQUAL
31172: PUSH
31173: LD_VAR 0 2
31177: PPUSH
31178: CALL_OW 257
31182: PUSH
31183: LD_INT 5
31185: EQUAL
31186: AND
31187: IFFALSE 31208
// ComBinocular ( unit , x , y ) ;
31189: LD_VAR 0 2
31193: PPUSH
31194: LD_VAR 0 4
31198: PPUSH
31199: LD_VAR 0 5
31203: PPUSH
31204: CALL 34486 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31208: LD_VAR 0 1
31212: PUSH
31213: LD_INT 254
31215: EQUAL
31216: PUSH
31217: LD_VAR 0 2
31221: PPUSH
31222: CALL_OW 264
31226: PUSH
31227: LD_EXP 124
31231: EQUAL
31232: AND
31233: PUSH
31234: LD_VAR 0 3
31238: PPUSH
31239: CALL_OW 263
31243: PUSH
31244: LD_INT 3
31246: EQUAL
31247: AND
31248: IFFALSE 31264
// HackDestroyVehicle ( unit , selectedUnit ) ;
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 3
31259: PPUSH
31260: CALL 32781 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31264: LD_VAR 0 1
31268: PUSH
31269: LD_INT 255
31271: EQUAL
31272: PUSH
31273: LD_VAR 0 2
31277: PPUSH
31278: CALL_OW 264
31282: PUSH
31283: LD_INT 14
31285: PUSH
31286: LD_INT 53
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: IN
31293: AND
31294: PUSH
31295: LD_VAR 0 4
31299: PPUSH
31300: LD_VAR 0 5
31304: PPUSH
31305: CALL_OW 488
31309: AND
31310: IFFALSE 31334
// CutTreeXYR ( unit , x , y , 12 ) ;
31312: LD_VAR 0 2
31316: PPUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: LD_VAR 0 5
31326: PPUSH
31327: LD_INT 12
31329: PPUSH
31330: CALL 31347 0 4
// end ;
31334: LD_VAR 0 6
31338: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
31339: LD_INT 0
31341: PPUSH
// end ;
31342: LD_VAR 0 4
31346: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31347: LD_INT 0
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31358: LD_VAR 0 1
31362: NOT
31363: PUSH
31364: LD_VAR 0 2
31368: PPUSH
31369: LD_VAR 0 3
31373: PPUSH
31374: CALL_OW 488
31378: NOT
31379: OR
31380: PUSH
31381: LD_VAR 0 4
31385: NOT
31386: OR
31387: IFFALSE 31391
// exit ;
31389: GO 31731
// list := [ ] ;
31391: LD_ADDR_VAR 0 13
31395: PUSH
31396: EMPTY
31397: ST_TO_ADDR
// if x - r < 0 then
31398: LD_VAR 0 2
31402: PUSH
31403: LD_VAR 0 4
31407: MINUS
31408: PUSH
31409: LD_INT 0
31411: LESS
31412: IFFALSE 31424
// min_x := 0 else
31414: LD_ADDR_VAR 0 7
31418: PUSH
31419: LD_INT 0
31421: ST_TO_ADDR
31422: GO 31440
// min_x := x - r ;
31424: LD_ADDR_VAR 0 7
31428: PUSH
31429: LD_VAR 0 2
31433: PUSH
31434: LD_VAR 0 4
31438: MINUS
31439: ST_TO_ADDR
// if y - r < 0 then
31440: LD_VAR 0 3
31444: PUSH
31445: LD_VAR 0 4
31449: MINUS
31450: PUSH
31451: LD_INT 0
31453: LESS
31454: IFFALSE 31466
// min_y := 0 else
31456: LD_ADDR_VAR 0 8
31460: PUSH
31461: LD_INT 0
31463: ST_TO_ADDR
31464: GO 31482
// min_y := y - r ;
31466: LD_ADDR_VAR 0 8
31470: PUSH
31471: LD_VAR 0 3
31475: PUSH
31476: LD_VAR 0 4
31480: MINUS
31481: ST_TO_ADDR
// max_x := x + r ;
31482: LD_ADDR_VAR 0 9
31486: PUSH
31487: LD_VAR 0 2
31491: PUSH
31492: LD_VAR 0 4
31496: PLUS
31497: ST_TO_ADDR
// max_y := y + r ;
31498: LD_ADDR_VAR 0 10
31502: PUSH
31503: LD_VAR 0 3
31507: PUSH
31508: LD_VAR 0 4
31512: PLUS
31513: ST_TO_ADDR
// for _x = min_x to max_x do
31514: LD_ADDR_VAR 0 11
31518: PUSH
31519: DOUBLE
31520: LD_VAR 0 7
31524: DEC
31525: ST_TO_ADDR
31526: LD_VAR 0 9
31530: PUSH
31531: FOR_TO
31532: IFFALSE 31649
// for _y = min_y to max_y do
31534: LD_ADDR_VAR 0 12
31538: PUSH
31539: DOUBLE
31540: LD_VAR 0 8
31544: DEC
31545: ST_TO_ADDR
31546: LD_VAR 0 10
31550: PUSH
31551: FOR_TO
31552: IFFALSE 31645
// begin if not ValidHex ( _x , _y ) then
31554: LD_VAR 0 11
31558: PPUSH
31559: LD_VAR 0 12
31563: PPUSH
31564: CALL_OW 488
31568: NOT
31569: IFFALSE 31573
// continue ;
31571: GO 31551
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31573: LD_VAR 0 11
31577: PPUSH
31578: LD_VAR 0 12
31582: PPUSH
31583: CALL_OW 351
31587: PUSH
31588: LD_VAR 0 11
31592: PPUSH
31593: LD_VAR 0 12
31597: PPUSH
31598: CALL_OW 554
31602: AND
31603: IFFALSE 31643
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31605: LD_ADDR_VAR 0 13
31609: PUSH
31610: LD_VAR 0 13
31614: PPUSH
31615: LD_VAR 0 13
31619: PUSH
31620: LD_INT 1
31622: PLUS
31623: PPUSH
31624: LD_VAR 0 11
31628: PUSH
31629: LD_VAR 0 12
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PPUSH
31638: CALL_OW 2
31642: ST_TO_ADDR
// end ;
31643: GO 31551
31645: POP
31646: POP
31647: GO 31531
31649: POP
31650: POP
// if not list then
31651: LD_VAR 0 13
31655: NOT
31656: IFFALSE 31660
// exit ;
31658: GO 31731
// for i in list do
31660: LD_ADDR_VAR 0 6
31664: PUSH
31665: LD_VAR 0 13
31669: PUSH
31670: FOR_IN
31671: IFFALSE 31729
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31673: LD_VAR 0 1
31677: PPUSH
31678: LD_STRING M
31680: PUSH
31681: LD_VAR 0 6
31685: PUSH
31686: LD_INT 1
31688: ARRAY
31689: PUSH
31690: LD_VAR 0 6
31694: PUSH
31695: LD_INT 2
31697: ARRAY
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: PPUSH
31723: CALL_OW 447
31727: GO 31670
31729: POP
31730: POP
// end ;
31731: LD_VAR 0 5
31735: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31736: LD_EXP 112
31740: NOT
31741: IFFALSE 31791
31743: GO 31745
31745: DISABLE
// begin initHack := true ;
31746: LD_ADDR_EXP 112
31750: PUSH
31751: LD_INT 1
31753: ST_TO_ADDR
// hackTanks := [ ] ;
31754: LD_ADDR_EXP 113
31758: PUSH
31759: EMPTY
31760: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31761: LD_ADDR_EXP 114
31765: PUSH
31766: EMPTY
31767: ST_TO_ADDR
// hackLimit := 3 ;
31768: LD_ADDR_EXP 115
31772: PUSH
31773: LD_INT 3
31775: ST_TO_ADDR
// hackDist := 12 ;
31776: LD_ADDR_EXP 116
31780: PUSH
31781: LD_INT 12
31783: ST_TO_ADDR
// hackCounter := [ ] ;
31784: LD_ADDR_EXP 117
31788: PUSH
31789: EMPTY
31790: ST_TO_ADDR
// end ;
31791: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31792: LD_EXP 112
31796: PUSH
31797: LD_INT 34
31799: PUSH
31800: LD_EXP 124
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PPUSH
31809: CALL_OW 69
31813: AND
31814: IFFALSE 32069
31816: GO 31818
31818: DISABLE
31819: LD_INT 0
31821: PPUSH
31822: PPUSH
// begin enable ;
31823: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31824: LD_ADDR_VAR 0 1
31828: PUSH
31829: LD_INT 34
31831: PUSH
31832: LD_EXP 124
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PPUSH
31841: CALL_OW 69
31845: PUSH
31846: FOR_IN
31847: IFFALSE 32067
// begin if not i in hackTanks then
31849: LD_VAR 0 1
31853: PUSH
31854: LD_EXP 113
31858: IN
31859: NOT
31860: IFFALSE 31943
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31862: LD_ADDR_EXP 113
31866: PUSH
31867: LD_EXP 113
31871: PPUSH
31872: LD_EXP 113
31876: PUSH
31877: LD_INT 1
31879: PLUS
31880: PPUSH
31881: LD_VAR 0 1
31885: PPUSH
31886: CALL_OW 1
31890: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31891: LD_ADDR_EXP 114
31895: PUSH
31896: LD_EXP 114
31900: PPUSH
31901: LD_EXP 114
31905: PUSH
31906: LD_INT 1
31908: PLUS
31909: PPUSH
31910: EMPTY
31911: PPUSH
31912: CALL_OW 1
31916: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31917: LD_ADDR_EXP 117
31921: PUSH
31922: LD_EXP 117
31926: PPUSH
31927: LD_EXP 117
31931: PUSH
31932: LD_INT 1
31934: PLUS
31935: PPUSH
31936: EMPTY
31937: PPUSH
31938: CALL_OW 1
31942: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31943: LD_VAR 0 1
31947: PPUSH
31948: CALL_OW 302
31952: NOT
31953: IFFALSE 31966
// begin HackUnlinkAll ( i ) ;
31955: LD_VAR 0 1
31959: PPUSH
31960: CALL 32072 0 1
// continue ;
31964: GO 31846
// end ; HackCheckCapturedStatus ( i ) ;
31966: LD_VAR 0 1
31970: PPUSH
31971: CALL 32515 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31975: LD_ADDR_VAR 0 2
31979: PUSH
31980: LD_INT 81
31982: PUSH
31983: LD_VAR 0 1
31987: PPUSH
31988: CALL_OW 255
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 33
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 91
32009: PUSH
32010: LD_VAR 0 1
32014: PUSH
32015: LD_EXP 116
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 50
32027: PUSH
32028: EMPTY
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: PPUSH
32037: CALL_OW 69
32041: ST_TO_ADDR
// if not tmp then
32042: LD_VAR 0 2
32046: NOT
32047: IFFALSE 32051
// continue ;
32049: GO 31846
// HackLink ( i , tmp ) ;
32051: LD_VAR 0 1
32055: PPUSH
32056: LD_VAR 0 2
32060: PPUSH
32061: CALL 32208 0 2
// end ;
32065: GO 31846
32067: POP
32068: POP
// end ;
32069: PPOPN 2
32071: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
// if not hack in hackTanks then
32077: LD_VAR 0 1
32081: PUSH
32082: LD_EXP 113
32086: IN
32087: NOT
32088: IFFALSE 32092
// exit ;
32090: GO 32203
// index := GetElementIndex ( hackTanks , hack ) ;
32092: LD_ADDR_VAR 0 4
32096: PUSH
32097: LD_EXP 113
32101: PPUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL 39845 0 2
32111: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32112: LD_EXP 114
32116: PUSH
32117: LD_VAR 0 4
32121: ARRAY
32122: IFFALSE 32203
// begin for i in hackTanksCaptured [ index ] do
32124: LD_ADDR_VAR 0 3
32128: PUSH
32129: LD_EXP 114
32133: PUSH
32134: LD_VAR 0 4
32138: ARRAY
32139: PUSH
32140: FOR_IN
32141: IFFALSE 32167
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32143: LD_VAR 0 3
32147: PUSH
32148: LD_INT 1
32150: ARRAY
32151: PPUSH
32152: LD_VAR 0 3
32156: PUSH
32157: LD_INT 2
32159: ARRAY
32160: PPUSH
32161: CALL_OW 235
32165: GO 32140
32167: POP
32168: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32169: LD_ADDR_EXP 114
32173: PUSH
32174: LD_EXP 114
32178: PPUSH
32179: LD_VAR 0 4
32183: PPUSH
32184: EMPTY
32185: PPUSH
32186: CALL_OW 1
32190: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32191: LD_VAR 0 1
32195: PPUSH
32196: LD_INT 0
32198: PPUSH
32199: CALL_OW 505
// end ; end ;
32203: LD_VAR 0 2
32207: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
32212: PPUSH
// if not hack in hackTanks or not vehicles then
32213: LD_VAR 0 1
32217: PUSH
32218: LD_EXP 113
32222: IN
32223: NOT
32224: PUSH
32225: LD_VAR 0 2
32229: NOT
32230: OR
32231: IFFALSE 32235
// exit ;
32233: GO 32510
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32235: LD_ADDR_VAR 0 2
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: LD_VAR 0 2
32249: PPUSH
32250: LD_INT 1
32252: PPUSH
32253: LD_INT 1
32255: PPUSH
32256: CALL 40495 0 4
32260: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32261: LD_ADDR_VAR 0 5
32265: PUSH
32266: LD_EXP 113
32270: PPUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL 39845 0 2
32280: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32281: LD_EXP 114
32285: PUSH
32286: LD_VAR 0 5
32290: ARRAY
32291: PUSH
32292: LD_EXP 115
32296: LESS
32297: IFFALSE 32486
// begin for i := 1 to vehicles do
32299: LD_ADDR_VAR 0 4
32303: PUSH
32304: DOUBLE
32305: LD_INT 1
32307: DEC
32308: ST_TO_ADDR
32309: LD_VAR 0 2
32313: PUSH
32314: FOR_TO
32315: IFFALSE 32484
// begin if hackTanksCaptured [ index ] = hackLimit then
32317: LD_EXP 114
32321: PUSH
32322: LD_VAR 0 5
32326: ARRAY
32327: PUSH
32328: LD_EXP 115
32332: EQUAL
32333: IFFALSE 32337
// break ;
32335: GO 32484
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32337: LD_ADDR_EXP 117
32341: PUSH
32342: LD_EXP 117
32346: PPUSH
32347: LD_VAR 0 5
32351: PPUSH
32352: LD_EXP 117
32356: PUSH
32357: LD_VAR 0 5
32361: ARRAY
32362: PUSH
32363: LD_INT 1
32365: PLUS
32366: PPUSH
32367: CALL_OW 1
32371: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32372: LD_ADDR_EXP 114
32376: PUSH
32377: LD_EXP 114
32381: PPUSH
32382: LD_VAR 0 5
32386: PUSH
32387: LD_EXP 114
32391: PUSH
32392: LD_VAR 0 5
32396: ARRAY
32397: PUSH
32398: LD_INT 1
32400: PLUS
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PPUSH
32406: LD_VAR 0 2
32410: PUSH
32411: LD_VAR 0 4
32415: ARRAY
32416: PUSH
32417: LD_VAR 0 2
32421: PUSH
32422: LD_VAR 0 4
32426: ARRAY
32427: PPUSH
32428: CALL_OW 255
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PPUSH
32437: CALL 40060 0 3
32441: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32442: LD_VAR 0 2
32446: PUSH
32447: LD_VAR 0 4
32451: ARRAY
32452: PPUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 255
32462: PPUSH
32463: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32467: LD_VAR 0 2
32471: PUSH
32472: LD_VAR 0 4
32476: ARRAY
32477: PPUSH
32478: CALL_OW 141
// end ;
32482: GO 32314
32484: POP
32485: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32486: LD_VAR 0 1
32490: PPUSH
32491: LD_EXP 114
32495: PUSH
32496: LD_VAR 0 5
32500: ARRAY
32501: PUSH
32502: LD_INT 0
32504: PLUS
32505: PPUSH
32506: CALL_OW 505
// end ;
32510: LD_VAR 0 3
32514: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
32519: PPUSH
32520: PPUSH
// if not hack in hackTanks then
32521: LD_VAR 0 1
32525: PUSH
32526: LD_EXP 113
32530: IN
32531: NOT
32532: IFFALSE 32536
// exit ;
32534: GO 32776
// index := GetElementIndex ( hackTanks , hack ) ;
32536: LD_ADDR_VAR 0 4
32540: PUSH
32541: LD_EXP 113
32545: PPUSH
32546: LD_VAR 0 1
32550: PPUSH
32551: CALL 39845 0 2
32555: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: DOUBLE
32562: LD_EXP 114
32566: PUSH
32567: LD_VAR 0 4
32571: ARRAY
32572: INC
32573: ST_TO_ADDR
32574: LD_INT 1
32576: PUSH
32577: FOR_DOWNTO
32578: IFFALSE 32750
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32580: LD_ADDR_VAR 0 5
32584: PUSH
32585: LD_EXP 114
32589: PUSH
32590: LD_VAR 0 4
32594: ARRAY
32595: PUSH
32596: LD_VAR 0 3
32600: ARRAY
32601: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32602: LD_VAR 0 5
32606: PUSH
32607: LD_INT 1
32609: ARRAY
32610: PPUSH
32611: CALL_OW 302
32615: NOT
32616: PUSH
32617: LD_VAR 0 5
32621: PUSH
32622: LD_INT 1
32624: ARRAY
32625: PPUSH
32626: CALL_OW 255
32630: PUSH
32631: LD_VAR 0 1
32635: PPUSH
32636: CALL_OW 255
32640: NONEQUAL
32641: OR
32642: IFFALSE 32748
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32644: LD_VAR 0 5
32648: PUSH
32649: LD_INT 1
32651: ARRAY
32652: PPUSH
32653: CALL_OW 305
32657: PUSH
32658: LD_VAR 0 5
32662: PUSH
32663: LD_INT 1
32665: ARRAY
32666: PPUSH
32667: CALL_OW 255
32671: PUSH
32672: LD_VAR 0 1
32676: PPUSH
32677: CALL_OW 255
32681: EQUAL
32682: AND
32683: IFFALSE 32707
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32685: LD_VAR 0 5
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PPUSH
32694: LD_VAR 0 5
32698: PUSH
32699: LD_INT 2
32701: ARRAY
32702: PPUSH
32703: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32707: LD_ADDR_EXP 114
32711: PUSH
32712: LD_EXP 114
32716: PPUSH
32717: LD_VAR 0 4
32721: PPUSH
32722: LD_EXP 114
32726: PUSH
32727: LD_VAR 0 4
32731: ARRAY
32732: PPUSH
32733: LD_VAR 0 3
32737: PPUSH
32738: CALL_OW 3
32742: PPUSH
32743: CALL_OW 1
32747: ST_TO_ADDR
// end ; end ;
32748: GO 32577
32750: POP
32751: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32752: LD_VAR 0 1
32756: PPUSH
32757: LD_EXP 114
32761: PUSH
32762: LD_VAR 0 4
32766: ARRAY
32767: PUSH
32768: LD_INT 0
32770: PLUS
32771: PPUSH
32772: CALL_OW 505
// end ;
32776: LD_VAR 0 2
32780: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32781: LD_INT 0
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
// if not hack in hackTanks then
32787: LD_VAR 0 1
32791: PUSH
32792: LD_EXP 113
32796: IN
32797: NOT
32798: IFFALSE 32802
// exit ;
32800: GO 32887
// index := GetElementIndex ( hackTanks , hack ) ;
32802: LD_ADDR_VAR 0 5
32806: PUSH
32807: LD_EXP 113
32811: PPUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL 39845 0 2
32821: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32822: LD_ADDR_VAR 0 4
32826: PUSH
32827: DOUBLE
32828: LD_INT 1
32830: DEC
32831: ST_TO_ADDR
32832: LD_EXP 114
32836: PUSH
32837: LD_VAR 0 5
32841: ARRAY
32842: PUSH
32843: FOR_TO
32844: IFFALSE 32885
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32846: LD_EXP 114
32850: PUSH
32851: LD_VAR 0 5
32855: ARRAY
32856: PUSH
32857: LD_VAR 0 4
32861: ARRAY
32862: PUSH
32863: LD_INT 1
32865: ARRAY
32866: PUSH
32867: LD_VAR 0 2
32871: EQUAL
32872: IFFALSE 32883
// KillUnit ( vehicle ) ;
32874: LD_VAR 0 2
32878: PPUSH
32879: CALL_OW 66
32883: GO 32843
32885: POP
32886: POP
// end ;
32887: LD_VAR 0 3
32891: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32892: LD_EXP 118
32896: NOT
32897: IFFALSE 32932
32899: GO 32901
32901: DISABLE
// begin initMiner := true ;
32902: LD_ADDR_EXP 118
32906: PUSH
32907: LD_INT 1
32909: ST_TO_ADDR
// minersList := [ ] ;
32910: LD_ADDR_EXP 119
32914: PUSH
32915: EMPTY
32916: ST_TO_ADDR
// minerMinesList := [ ] ;
32917: LD_ADDR_EXP 120
32921: PUSH
32922: EMPTY
32923: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32924: LD_ADDR_EXP 121
32928: PUSH
32929: LD_INT 5
32931: ST_TO_ADDR
// end ;
32932: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32933: LD_EXP 118
32937: PUSH
32938: LD_INT 34
32940: PUSH
32941: LD_EXP 129
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PPUSH
32950: CALL_OW 69
32954: AND
32955: IFFALSE 33418
32957: GO 32959
32959: DISABLE
32960: LD_INT 0
32962: PPUSH
32963: PPUSH
32964: PPUSH
32965: PPUSH
// begin enable ;
32966: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32967: LD_ADDR_VAR 0 1
32971: PUSH
32972: LD_INT 34
32974: PUSH
32975: LD_EXP 129
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PPUSH
32984: CALL_OW 69
32988: PUSH
32989: FOR_IN
32990: IFFALSE 33062
// begin if not i in minersList then
32992: LD_VAR 0 1
32996: PUSH
32997: LD_EXP 119
33001: IN
33002: NOT
33003: IFFALSE 33060
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33005: LD_ADDR_EXP 119
33009: PUSH
33010: LD_EXP 119
33014: PPUSH
33015: LD_EXP 119
33019: PUSH
33020: LD_INT 1
33022: PLUS
33023: PPUSH
33024: LD_VAR 0 1
33028: PPUSH
33029: CALL_OW 1
33033: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33034: LD_ADDR_EXP 120
33038: PUSH
33039: LD_EXP 120
33043: PPUSH
33044: LD_EXP 120
33048: PUSH
33049: LD_INT 1
33051: PLUS
33052: PPUSH
33053: EMPTY
33054: PPUSH
33055: CALL_OW 1
33059: ST_TO_ADDR
// end end ;
33060: GO 32989
33062: POP
33063: POP
// for i := minerMinesList downto 1 do
33064: LD_ADDR_VAR 0 1
33068: PUSH
33069: DOUBLE
33070: LD_EXP 120
33074: INC
33075: ST_TO_ADDR
33076: LD_INT 1
33078: PUSH
33079: FOR_DOWNTO
33080: IFFALSE 33416
// begin if IsLive ( minersList [ i ] ) then
33082: LD_EXP 119
33086: PUSH
33087: LD_VAR 0 1
33091: ARRAY
33092: PPUSH
33093: CALL_OW 300
33097: IFFALSE 33125
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33099: LD_EXP 119
33103: PUSH
33104: LD_VAR 0 1
33108: ARRAY
33109: PPUSH
33110: LD_EXP 120
33114: PUSH
33115: LD_VAR 0 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 505
// if not minerMinesList [ i ] then
33125: LD_EXP 120
33129: PUSH
33130: LD_VAR 0 1
33134: ARRAY
33135: NOT
33136: IFFALSE 33140
// continue ;
33138: GO 33079
// for j := minerMinesList [ i ] downto 1 do
33140: LD_ADDR_VAR 0 2
33144: PUSH
33145: DOUBLE
33146: LD_EXP 120
33150: PUSH
33151: LD_VAR 0 1
33155: ARRAY
33156: INC
33157: ST_TO_ADDR
33158: LD_INT 1
33160: PUSH
33161: FOR_DOWNTO
33162: IFFALSE 33412
// begin side := GetSide ( minersList [ i ] ) ;
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_EXP 119
33173: PUSH
33174: LD_VAR 0 1
33178: ARRAY
33179: PPUSH
33180: CALL_OW 255
33184: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33185: LD_ADDR_VAR 0 4
33189: PUSH
33190: LD_EXP 120
33194: PUSH
33195: LD_VAR 0 1
33199: ARRAY
33200: PUSH
33201: LD_VAR 0 2
33205: ARRAY
33206: PUSH
33207: LD_INT 1
33209: ARRAY
33210: PPUSH
33211: LD_EXP 120
33215: PUSH
33216: LD_VAR 0 1
33220: ARRAY
33221: PUSH
33222: LD_VAR 0 2
33226: ARRAY
33227: PUSH
33228: LD_INT 2
33230: ARRAY
33231: PPUSH
33232: CALL_OW 428
33236: ST_TO_ADDR
// if not tmp then
33237: LD_VAR 0 4
33241: NOT
33242: IFFALSE 33246
// continue ;
33244: GO 33161
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33246: LD_VAR 0 4
33250: PUSH
33251: LD_INT 81
33253: PUSH
33254: LD_VAR 0 3
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PPUSH
33263: CALL_OW 69
33267: IN
33268: PUSH
33269: LD_EXP 120
33273: PUSH
33274: LD_VAR 0 1
33278: ARRAY
33279: PUSH
33280: LD_VAR 0 2
33284: ARRAY
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: PPUSH
33290: LD_EXP 120
33294: PUSH
33295: LD_VAR 0 1
33299: ARRAY
33300: PUSH
33301: LD_VAR 0 2
33305: ARRAY
33306: PUSH
33307: LD_INT 2
33309: ARRAY
33310: PPUSH
33311: CALL_OW 458
33315: AND
33316: IFFALSE 33410
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33318: LD_EXP 120
33322: PUSH
33323: LD_VAR 0 1
33327: ARRAY
33328: PUSH
33329: LD_VAR 0 2
33333: ARRAY
33334: PUSH
33335: LD_INT 1
33337: ARRAY
33338: PPUSH
33339: LD_EXP 120
33343: PUSH
33344: LD_VAR 0 1
33348: ARRAY
33349: PUSH
33350: LD_VAR 0 2
33354: ARRAY
33355: PUSH
33356: LD_INT 2
33358: ARRAY
33359: PPUSH
33360: LD_VAR 0 3
33364: PPUSH
33365: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33369: LD_ADDR_EXP 120
33373: PUSH
33374: LD_EXP 120
33378: PPUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: LD_EXP 120
33388: PUSH
33389: LD_VAR 0 1
33393: ARRAY
33394: PPUSH
33395: LD_VAR 0 2
33399: PPUSH
33400: CALL_OW 3
33404: PPUSH
33405: CALL_OW 1
33409: ST_TO_ADDR
// end ; end ;
33410: GO 33161
33412: POP
33413: POP
// end ;
33414: GO 33079
33416: POP
33417: POP
// end ;
33418: PPOPN 4
33420: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33421: LD_INT 0
33423: PPUSH
33424: PPUSH
// result := false ;
33425: LD_ADDR_VAR 0 4
33429: PUSH
33430: LD_INT 0
33432: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 264
33442: PUSH
33443: LD_EXP 129
33447: EQUAL
33448: NOT
33449: IFFALSE 33453
// exit ;
33451: GO 33693
// index := GetElementIndex ( minersList , unit ) ;
33453: LD_ADDR_VAR 0 5
33457: PUSH
33458: LD_EXP 119
33462: PPUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: CALL 39845 0 2
33472: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33473: LD_EXP 120
33477: PUSH
33478: LD_VAR 0 5
33482: ARRAY
33483: PUSH
33484: LD_EXP 121
33488: GREATEREQUAL
33489: IFFALSE 33493
// exit ;
33491: GO 33693
// ComMoveXY ( unit , x , y ) ;
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_VAR 0 2
33502: PPUSH
33503: LD_VAR 0 3
33507: PPUSH
33508: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33512: LD_INT 35
33514: PPUSH
33515: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33519: LD_VAR 0 1
33523: PPUSH
33524: LD_VAR 0 2
33528: PPUSH
33529: LD_VAR 0 3
33533: PPUSH
33534: CALL 70617 0 3
33538: NOT
33539: PUSH
33540: LD_VAR 0 1
33544: PPUSH
33545: CALL_OW 314
33549: AND
33550: IFFALSE 33554
// exit ;
33552: GO 33693
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33554: LD_VAR 0 2
33558: PPUSH
33559: LD_VAR 0 3
33563: PPUSH
33564: CALL_OW 428
33568: PUSH
33569: LD_VAR 0 1
33573: EQUAL
33574: PUSH
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 314
33584: NOT
33585: AND
33586: IFFALSE 33512
// PlaySoundXY ( x , y , PlantMine ) ;
33588: LD_VAR 0 2
33592: PPUSH
33593: LD_VAR 0 3
33597: PPUSH
33598: LD_STRING PlantMine
33600: PPUSH
33601: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33605: LD_VAR 0 2
33609: PPUSH
33610: LD_VAR 0 3
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 255
33624: PPUSH
33625: LD_INT 0
33627: PPUSH
33628: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33632: LD_ADDR_EXP 120
33636: PUSH
33637: LD_EXP 120
33641: PPUSH
33642: LD_VAR 0 5
33646: PUSH
33647: LD_EXP 120
33651: PUSH
33652: LD_VAR 0 5
33656: ARRAY
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PPUSH
33666: LD_VAR 0 2
33670: PUSH
33671: LD_VAR 0 3
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL 40060 0 3
33684: ST_TO_ADDR
// result := true ;
33685: LD_ADDR_VAR 0 4
33689: PUSH
33690: LD_INT 1
33692: ST_TO_ADDR
// end ;
33693: LD_VAR 0 4
33697: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33698: LD_INT 0
33700: PPUSH
33701: PPUSH
33702: PPUSH
// if not unit in minersList then
33703: LD_VAR 0 1
33707: PUSH
33708: LD_EXP 119
33712: IN
33713: NOT
33714: IFFALSE 33718
// exit ;
33716: GO 34110
// index := GetElementIndex ( minersList , unit ) ;
33718: LD_ADDR_VAR 0 6
33722: PUSH
33723: LD_EXP 119
33727: PPUSH
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL 39845 0 2
33737: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33738: LD_ADDR_VAR 0 5
33742: PUSH
33743: DOUBLE
33744: LD_EXP 120
33748: PUSH
33749: LD_VAR 0 6
33753: ARRAY
33754: INC
33755: ST_TO_ADDR
33756: LD_INT 1
33758: PUSH
33759: FOR_DOWNTO
33760: IFFALSE 33921
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33762: LD_EXP 120
33766: PUSH
33767: LD_VAR 0 6
33771: ARRAY
33772: PUSH
33773: LD_VAR 0 5
33777: ARRAY
33778: PUSH
33779: LD_INT 1
33781: ARRAY
33782: PUSH
33783: LD_VAR 0 2
33787: EQUAL
33788: PUSH
33789: LD_EXP 120
33793: PUSH
33794: LD_VAR 0 6
33798: ARRAY
33799: PUSH
33800: LD_VAR 0 5
33804: ARRAY
33805: PUSH
33806: LD_INT 2
33808: ARRAY
33809: PUSH
33810: LD_VAR 0 3
33814: EQUAL
33815: AND
33816: IFFALSE 33919
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33818: LD_EXP 120
33822: PUSH
33823: LD_VAR 0 6
33827: ARRAY
33828: PUSH
33829: LD_VAR 0 5
33833: ARRAY
33834: PUSH
33835: LD_INT 1
33837: ARRAY
33838: PPUSH
33839: LD_EXP 120
33843: PUSH
33844: LD_VAR 0 6
33848: ARRAY
33849: PUSH
33850: LD_VAR 0 5
33854: ARRAY
33855: PUSH
33856: LD_INT 2
33858: ARRAY
33859: PPUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 255
33869: PPUSH
33870: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33874: LD_ADDR_EXP 120
33878: PUSH
33879: LD_EXP 120
33883: PPUSH
33884: LD_VAR 0 6
33888: PPUSH
33889: LD_EXP 120
33893: PUSH
33894: LD_VAR 0 6
33898: ARRAY
33899: PPUSH
33900: LD_VAR 0 5
33904: PPUSH
33905: CALL_OW 3
33909: PPUSH
33910: CALL_OW 1
33914: ST_TO_ADDR
// exit ;
33915: POP
33916: POP
33917: GO 34110
// end ; end ;
33919: GO 33759
33921: POP
33922: POP
// for i := minerMinesList [ index ] downto 1 do
33923: LD_ADDR_VAR 0 5
33927: PUSH
33928: DOUBLE
33929: LD_EXP 120
33933: PUSH
33934: LD_VAR 0 6
33938: ARRAY
33939: INC
33940: ST_TO_ADDR
33941: LD_INT 1
33943: PUSH
33944: FOR_DOWNTO
33945: IFFALSE 34108
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33947: LD_EXP 120
33951: PUSH
33952: LD_VAR 0 6
33956: ARRAY
33957: PUSH
33958: LD_VAR 0 5
33962: ARRAY
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PPUSH
33968: LD_EXP 120
33972: PUSH
33973: LD_VAR 0 6
33977: ARRAY
33978: PUSH
33979: LD_VAR 0 5
33983: ARRAY
33984: PUSH
33985: LD_INT 2
33987: ARRAY
33988: PPUSH
33989: LD_VAR 0 2
33993: PPUSH
33994: LD_VAR 0 3
33998: PPUSH
33999: CALL_OW 298
34003: PUSH
34004: LD_INT 6
34006: LESS
34007: IFFALSE 34106
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34009: LD_EXP 120
34013: PUSH
34014: LD_VAR 0 6
34018: ARRAY
34019: PUSH
34020: LD_VAR 0 5
34024: ARRAY
34025: PUSH
34026: LD_INT 1
34028: ARRAY
34029: PPUSH
34030: LD_EXP 120
34034: PUSH
34035: LD_VAR 0 6
34039: ARRAY
34040: PUSH
34041: LD_VAR 0 5
34045: ARRAY
34046: PUSH
34047: LD_INT 2
34049: ARRAY
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 255
34060: PPUSH
34061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34065: LD_ADDR_EXP 120
34069: PUSH
34070: LD_EXP 120
34074: PPUSH
34075: LD_VAR 0 6
34079: PPUSH
34080: LD_EXP 120
34084: PUSH
34085: LD_VAR 0 6
34089: ARRAY
34090: PPUSH
34091: LD_VAR 0 5
34095: PPUSH
34096: CALL_OW 3
34100: PPUSH
34101: CALL_OW 1
34105: ST_TO_ADDR
// end ; end ;
34106: GO 33944
34108: POP
34109: POP
// end ;
34110: LD_VAR 0 4
34114: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34115: LD_INT 0
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
34125: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34126: LD_VAR 0 1
34130: PPUSH
34131: CALL_OW 264
34135: PUSH
34136: LD_EXP 129
34140: EQUAL
34141: NOT
34142: PUSH
34143: LD_VAR 0 1
34147: PUSH
34148: LD_EXP 119
34152: IN
34153: NOT
34154: OR
34155: IFFALSE 34159
// exit ;
34157: GO 34481
// index := GetElementIndex ( minersList , unit ) ;
34159: LD_ADDR_VAR 0 6
34163: PUSH
34164: LD_EXP 119
34168: PPUSH
34169: LD_VAR 0 1
34173: PPUSH
34174: CALL 39845 0 2
34178: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34179: LD_ADDR_VAR 0 8
34183: PUSH
34184: LD_EXP 121
34188: PUSH
34189: LD_EXP 120
34193: PUSH
34194: LD_VAR 0 6
34198: ARRAY
34199: MINUS
34200: ST_TO_ADDR
// if not minesFreeAmount then
34201: LD_VAR 0 8
34205: NOT
34206: IFFALSE 34210
// exit ;
34208: GO 34481
// tmp := [ ] ;
34210: LD_ADDR_VAR 0 7
34214: PUSH
34215: EMPTY
34216: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34217: LD_ADDR_VAR 0 5
34221: PUSH
34222: DOUBLE
34223: LD_INT 1
34225: DEC
34226: ST_TO_ADDR
34227: LD_VAR 0 8
34231: PUSH
34232: FOR_TO
34233: IFFALSE 34428
// begin _d := rand ( 0 , 5 ) ;
34235: LD_ADDR_VAR 0 11
34239: PUSH
34240: LD_INT 0
34242: PPUSH
34243: LD_INT 5
34245: PPUSH
34246: CALL_OW 12
34250: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34251: LD_ADDR_VAR 0 12
34255: PUSH
34256: LD_INT 2
34258: PPUSH
34259: LD_INT 6
34261: PPUSH
34262: CALL_OW 12
34266: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: LD_VAR 0 2
34276: PPUSH
34277: LD_VAR 0 11
34281: PPUSH
34282: LD_VAR 0 12
34286: PPUSH
34287: CALL_OW 272
34291: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34292: LD_ADDR_VAR 0 10
34296: PUSH
34297: LD_VAR 0 3
34301: PPUSH
34302: LD_VAR 0 11
34306: PPUSH
34307: LD_VAR 0 12
34311: PPUSH
34312: CALL_OW 273
34316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34317: LD_VAR 0 9
34321: PPUSH
34322: LD_VAR 0 10
34326: PPUSH
34327: CALL_OW 488
34331: PUSH
34332: LD_VAR 0 9
34336: PUSH
34337: LD_VAR 0 10
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_VAR 0 7
34350: IN
34351: NOT
34352: AND
34353: PUSH
34354: LD_VAR 0 9
34358: PPUSH
34359: LD_VAR 0 10
34363: PPUSH
34364: CALL_OW 458
34368: NOT
34369: AND
34370: IFFALSE 34412
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34372: LD_ADDR_VAR 0 7
34376: PUSH
34377: LD_VAR 0 7
34381: PPUSH
34382: LD_VAR 0 7
34386: PUSH
34387: LD_INT 1
34389: PLUS
34390: PPUSH
34391: LD_VAR 0 9
34395: PUSH
34396: LD_VAR 0 10
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 1
34409: ST_TO_ADDR
34410: GO 34426
// i := i - 1 ;
34412: LD_ADDR_VAR 0 5
34416: PUSH
34417: LD_VAR 0 5
34421: PUSH
34422: LD_INT 1
34424: MINUS
34425: ST_TO_ADDR
// end ;
34426: GO 34232
34428: POP
34429: POP
// for i in tmp do
34430: LD_ADDR_VAR 0 5
34434: PUSH
34435: LD_VAR 0 7
34439: PUSH
34440: FOR_IN
34441: IFFALSE 34479
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34443: LD_VAR 0 1
34447: PPUSH
34448: LD_VAR 0 5
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PPUSH
34457: LD_VAR 0 5
34461: PUSH
34462: LD_INT 2
34464: ARRAY
34465: PPUSH
34466: CALL 33421 0 3
34470: NOT
34471: IFFALSE 34477
// exit ;
34473: POP
34474: POP
34475: GO 34481
34477: GO 34440
34479: POP
34480: POP
// end ;
34481: LD_VAR 0 4
34485: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
// if not GetClass ( unit ) = class_sniper then
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 257
34504: PUSH
34505: LD_INT 5
34507: EQUAL
34508: NOT
34509: IFFALSE 34513
// exit ;
34511: GO 34901
// dist := 8 ;
34513: LD_ADDR_VAR 0 5
34517: PUSH
34518: LD_INT 8
34520: ST_TO_ADDR
// viewRange := 12 ;
34521: LD_ADDR_VAR 0 7
34525: PUSH
34526: LD_INT 12
34528: ST_TO_ADDR
// side := GetSide ( unit ) ;
34529: LD_ADDR_VAR 0 6
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: CALL_OW 255
34543: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34544: LD_INT 61
34546: PPUSH
34547: LD_VAR 0 6
34551: PPUSH
34552: CALL_OW 321
34556: PUSH
34557: LD_INT 2
34559: EQUAL
34560: IFFALSE 34570
// viewRange := 16 ;
34562: LD_ADDR_VAR 0 7
34566: PUSH
34567: LD_INT 16
34569: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34570: LD_VAR 0 1
34574: PPUSH
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_VAR 0 3
34584: PPUSH
34585: CALL_OW 297
34589: PUSH
34590: LD_VAR 0 5
34594: GREATER
34595: IFFALSE 34674
// begin ComMoveXY ( unit , x , y ) ;
34597: LD_VAR 0 1
34601: PPUSH
34602: LD_VAR 0 2
34606: PPUSH
34607: LD_VAR 0 3
34611: PPUSH
34612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34616: LD_INT 35
34618: PPUSH
34619: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34623: LD_VAR 0 1
34627: PPUSH
34628: LD_VAR 0 2
34632: PPUSH
34633: LD_VAR 0 3
34637: PPUSH
34638: CALL 70617 0 3
34642: NOT
34643: IFFALSE 34647
// exit ;
34645: GO 34901
// until GetDistUnitXY ( unit , x , y ) < dist ;
34647: LD_VAR 0 1
34651: PPUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: LD_VAR 0 3
34661: PPUSH
34662: CALL_OW 297
34666: PUSH
34667: LD_VAR 0 5
34671: LESS
34672: IFFALSE 34616
// end ; ComTurnXY ( unit , x , y ) ;
34674: LD_VAR 0 1
34678: PPUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: LD_VAR 0 3
34688: PPUSH
34689: CALL_OW 118
// wait ( 5 ) ;
34693: LD_INT 5
34695: PPUSH
34696: CALL_OW 67
// _d := GetDir ( unit ) ;
34700: LD_ADDR_VAR 0 10
34704: PUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 254
34714: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34715: LD_ADDR_VAR 0 8
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 250
34729: PPUSH
34730: LD_VAR 0 10
34734: PPUSH
34735: LD_VAR 0 5
34739: PPUSH
34740: CALL_OW 272
34744: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34745: LD_ADDR_VAR 0 9
34749: PUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 251
34759: PPUSH
34760: LD_VAR 0 10
34764: PPUSH
34765: LD_VAR 0 5
34769: PPUSH
34770: CALL_OW 273
34774: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34775: LD_VAR 0 8
34779: PPUSH
34780: LD_VAR 0 9
34784: PPUSH
34785: CALL_OW 488
34789: NOT
34790: IFFALSE 34794
// exit ;
34792: GO 34901
// ComAnimCustom ( unit , 1 ) ;
34794: LD_VAR 0 1
34798: PPUSH
34799: LD_INT 1
34801: PPUSH
34802: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34806: LD_VAR 0 8
34810: PPUSH
34811: LD_VAR 0 9
34815: PPUSH
34816: LD_VAR 0 6
34820: PPUSH
34821: LD_VAR 0 7
34825: PPUSH
34826: CALL_OW 330
// repeat wait ( 1 ) ;
34830: LD_INT 1
34832: PPUSH
34833: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 316
34846: PUSH
34847: LD_VAR 0 1
34851: PPUSH
34852: CALL_OW 314
34856: OR
34857: PUSH
34858: LD_VAR 0 1
34862: PPUSH
34863: CALL_OW 302
34867: NOT
34868: OR
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 301
34879: OR
34880: IFFALSE 34830
// RemoveSeeing ( _x , _y , side ) ;
34882: LD_VAR 0 8
34886: PPUSH
34887: LD_VAR 0 9
34891: PPUSH
34892: LD_VAR 0 6
34896: PPUSH
34897: CALL_OW 331
// end ; end_of_file
34901: LD_VAR 0 4
34905: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34906: LD_INT 0
34908: PPUSH
// ar_miner := 81 ;
34909: LD_ADDR_EXP 129
34913: PUSH
34914: LD_INT 81
34916: ST_TO_ADDR
// ar_crane := 88 ;
34917: LD_ADDR_EXP 128
34921: PUSH
34922: LD_INT 88
34924: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34925: LD_ADDR_EXP 123
34929: PUSH
34930: LD_INT 89
34932: ST_TO_ADDR
// us_hack := 99 ;
34933: LD_ADDR_EXP 124
34937: PUSH
34938: LD_INT 99
34940: ST_TO_ADDR
// us_artillery := 97 ;
34941: LD_ADDR_EXP 125
34945: PUSH
34946: LD_INT 97
34948: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34949: LD_ADDR_EXP 126
34953: PUSH
34954: LD_INT 91
34956: ST_TO_ADDR
// ar_mortar := 92 ;
34957: LD_ADDR_EXP 127
34961: PUSH
34962: LD_INT 92
34964: ST_TO_ADDR
// ru_radar := 98 ;
34965: LD_ADDR_EXP 122
34969: PUSH
34970: LD_INT 98
34972: ST_TO_ADDR
// tech_Artillery := 80 ;
34973: LD_ADDR_EXP 130
34977: PUSH
34978: LD_INT 80
34980: ST_TO_ADDR
// tech_RadMat := 81 ;
34981: LD_ADDR_EXP 131
34985: PUSH
34986: LD_INT 81
34988: ST_TO_ADDR
// tech_BasicTools := 82 ;
34989: LD_ADDR_EXP 132
34993: PUSH
34994: LD_INT 82
34996: ST_TO_ADDR
// tech_Cargo := 83 ;
34997: LD_ADDR_EXP 133
35001: PUSH
35002: LD_INT 83
35004: ST_TO_ADDR
// tech_Track := 84 ;
35005: LD_ADDR_EXP 134
35009: PUSH
35010: LD_INT 84
35012: ST_TO_ADDR
// tech_Crane := 85 ;
35013: LD_ADDR_EXP 135
35017: PUSH
35018: LD_INT 85
35020: ST_TO_ADDR
// tech_Bulldozer := 86 ;
35021: LD_ADDR_EXP 136
35025: PUSH
35026: LD_INT 86
35028: ST_TO_ADDR
// tech_Hovercraft := 87 ;
35029: LD_ADDR_EXP 137
35033: PUSH
35034: LD_INT 87
35036: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
35037: LD_ADDR_EXP 138
35041: PUSH
35042: LD_INT 88
35044: ST_TO_ADDR
// class_mastodont := 31 ;
35045: LD_ADDR_EXP 139
35049: PUSH
35050: LD_INT 31
35052: ST_TO_ADDR
// class_horse := 21 ;
35053: LD_ADDR_EXP 140
35057: PUSH
35058: LD_INT 21
35060: ST_TO_ADDR
// end ;
35061: LD_VAR 0 1
35065: RET
// every 1 do
35066: GO 35068
35068: DISABLE
// InitGlobalVariables ; end_of_file
35069: CALL 34906 0 0
35073: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35074: LD_INT 0
35076: PPUSH
35077: PPUSH
// if exist_mode then
35078: LD_VAR 0 2
35082: IFFALSE 35107
// unit := CreateCharacter ( prefix & ident ) else
35084: LD_ADDR_VAR 0 5
35088: PUSH
35089: LD_VAR 0 3
35093: PUSH
35094: LD_VAR 0 1
35098: STR
35099: PPUSH
35100: CALL_OW 34
35104: ST_TO_ADDR
35105: GO 35122
// unit := NewCharacter ( ident ) ;
35107: LD_ADDR_VAR 0 5
35111: PUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 25
35121: ST_TO_ADDR
// result := unit ;
35122: LD_ADDR_VAR 0 4
35126: PUSH
35127: LD_VAR 0 5
35131: ST_TO_ADDR
// end ;
35132: LD_VAR 0 4
35136: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35137: LD_INT 0
35139: PPUSH
35140: PPUSH
// if not side or not nation then
35141: LD_VAR 0 1
35145: NOT
35146: PUSH
35147: LD_VAR 0 2
35151: NOT
35152: OR
35153: IFFALSE 35157
// exit ;
35155: GO 35925
// case nation of nation_american :
35157: LD_VAR 0 2
35161: PUSH
35162: LD_INT 1
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35170
35168: GO 35384
35170: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35171: LD_ADDR_VAR 0 4
35175: PUSH
35176: LD_INT 35
35178: PUSH
35179: LD_INT 45
35181: PUSH
35182: LD_INT 46
35184: PUSH
35185: LD_INT 47
35187: PUSH
35188: LD_INT 82
35190: PUSH
35191: LD_INT 83
35193: PUSH
35194: LD_INT 84
35196: PUSH
35197: LD_INT 85
35199: PUSH
35200: LD_INT 86
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 6
35211: PUSH
35212: LD_INT 15
35214: PUSH
35215: LD_INT 16
35217: PUSH
35218: LD_INT 7
35220: PUSH
35221: LD_INT 12
35223: PUSH
35224: LD_INT 13
35226: PUSH
35227: LD_INT 10
35229: PUSH
35230: LD_INT 14
35232: PUSH
35233: LD_INT 20
35235: PUSH
35236: LD_INT 21
35238: PUSH
35239: LD_INT 22
35241: PUSH
35242: LD_INT 25
35244: PUSH
35245: LD_INT 32
35247: PUSH
35248: LD_INT 27
35250: PUSH
35251: LD_INT 36
35253: PUSH
35254: LD_INT 69
35256: PUSH
35257: LD_INT 39
35259: PUSH
35260: LD_INT 34
35262: PUSH
35263: LD_INT 40
35265: PUSH
35266: LD_INT 48
35268: PUSH
35269: LD_INT 49
35271: PUSH
35272: LD_INT 50
35274: PUSH
35275: LD_INT 51
35277: PUSH
35278: LD_INT 52
35280: PUSH
35281: LD_INT 53
35283: PUSH
35284: LD_INT 54
35286: PUSH
35287: LD_INT 55
35289: PUSH
35290: LD_INT 56
35292: PUSH
35293: LD_INT 57
35295: PUSH
35296: LD_INT 58
35298: PUSH
35299: LD_INT 59
35301: PUSH
35302: LD_INT 60
35304: PUSH
35305: LD_INT 61
35307: PUSH
35308: LD_INT 62
35310: PUSH
35311: LD_INT 80
35313: PUSH
35314: LD_INT 82
35316: PUSH
35317: LD_INT 83
35319: PUSH
35320: LD_INT 84
35322: PUSH
35323: LD_INT 85
35325: PUSH
35326: LD_INT 86
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: ST_TO_ADDR
35382: GO 35849
35384: LD_INT 2
35386: DOUBLE
35387: EQUAL
35388: IFTRUE 35392
35390: GO 35618
35392: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35393: LD_ADDR_VAR 0 4
35397: PUSH
35398: LD_INT 35
35400: PUSH
35401: LD_INT 45
35403: PUSH
35404: LD_INT 46
35406: PUSH
35407: LD_INT 47
35409: PUSH
35410: LD_INT 82
35412: PUSH
35413: LD_INT 83
35415: PUSH
35416: LD_INT 84
35418: PUSH
35419: LD_INT 85
35421: PUSH
35422: LD_INT 87
35424: PUSH
35425: LD_INT 70
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 11
35433: PUSH
35434: LD_INT 3
35436: PUSH
35437: LD_INT 4
35439: PUSH
35440: LD_INT 5
35442: PUSH
35443: LD_INT 6
35445: PUSH
35446: LD_INT 15
35448: PUSH
35449: LD_INT 18
35451: PUSH
35452: LD_INT 7
35454: PUSH
35455: LD_INT 17
35457: PUSH
35458: LD_INT 8
35460: PUSH
35461: LD_INT 20
35463: PUSH
35464: LD_INT 21
35466: PUSH
35467: LD_INT 22
35469: PUSH
35470: LD_INT 72
35472: PUSH
35473: LD_INT 26
35475: PUSH
35476: LD_INT 69
35478: PUSH
35479: LD_INT 39
35481: PUSH
35482: LD_INT 40
35484: PUSH
35485: LD_INT 41
35487: PUSH
35488: LD_INT 42
35490: PUSH
35491: LD_INT 43
35493: PUSH
35494: LD_INT 48
35496: PUSH
35497: LD_INT 49
35499: PUSH
35500: LD_INT 50
35502: PUSH
35503: LD_INT 51
35505: PUSH
35506: LD_INT 52
35508: PUSH
35509: LD_INT 53
35511: PUSH
35512: LD_INT 54
35514: PUSH
35515: LD_INT 55
35517: PUSH
35518: LD_INT 56
35520: PUSH
35521: LD_INT 60
35523: PUSH
35524: LD_INT 61
35526: PUSH
35527: LD_INT 62
35529: PUSH
35530: LD_INT 66
35532: PUSH
35533: LD_INT 67
35535: PUSH
35536: LD_INT 68
35538: PUSH
35539: LD_INT 81
35541: PUSH
35542: LD_INT 82
35544: PUSH
35545: LD_INT 83
35547: PUSH
35548: LD_INT 84
35550: PUSH
35551: LD_INT 85
35553: PUSH
35554: LD_INT 87
35556: PUSH
35557: LD_INT 88
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
35616: GO 35849
35618: LD_INT 3
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35626
35624: GO 35848
35626: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35627: LD_ADDR_VAR 0 4
35631: PUSH
35632: LD_INT 46
35634: PUSH
35635: LD_INT 47
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 82
35646: PUSH
35647: LD_INT 83
35649: PUSH
35650: LD_INT 84
35652: PUSH
35653: LD_INT 85
35655: PUSH
35656: LD_INT 86
35658: PUSH
35659: LD_INT 11
35661: PUSH
35662: LD_INT 9
35664: PUSH
35665: LD_INT 20
35667: PUSH
35668: LD_INT 19
35670: PUSH
35671: LD_INT 21
35673: PUSH
35674: LD_INT 24
35676: PUSH
35677: LD_INT 22
35679: PUSH
35680: LD_INT 25
35682: PUSH
35683: LD_INT 28
35685: PUSH
35686: LD_INT 29
35688: PUSH
35689: LD_INT 30
35691: PUSH
35692: LD_INT 31
35694: PUSH
35695: LD_INT 37
35697: PUSH
35698: LD_INT 38
35700: PUSH
35701: LD_INT 32
35703: PUSH
35704: LD_INT 27
35706: PUSH
35707: LD_INT 33
35709: PUSH
35710: LD_INT 69
35712: PUSH
35713: LD_INT 39
35715: PUSH
35716: LD_INT 34
35718: PUSH
35719: LD_INT 40
35721: PUSH
35722: LD_INT 71
35724: PUSH
35725: LD_INT 23
35727: PUSH
35728: LD_INT 44
35730: PUSH
35731: LD_INT 48
35733: PUSH
35734: LD_INT 49
35736: PUSH
35737: LD_INT 50
35739: PUSH
35740: LD_INT 51
35742: PUSH
35743: LD_INT 52
35745: PUSH
35746: LD_INT 53
35748: PUSH
35749: LD_INT 54
35751: PUSH
35752: LD_INT 55
35754: PUSH
35755: LD_INT 56
35757: PUSH
35758: LD_INT 57
35760: PUSH
35761: LD_INT 58
35763: PUSH
35764: LD_INT 59
35766: PUSH
35767: LD_INT 63
35769: PUSH
35770: LD_INT 64
35772: PUSH
35773: LD_INT 65
35775: PUSH
35776: LD_INT 82
35778: PUSH
35779: LD_INT 83
35781: PUSH
35782: LD_INT 84
35784: PUSH
35785: LD_INT 85
35787: PUSH
35788: LD_INT 86
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
35846: GO 35849
35848: POP
// if state > - 1 and state < 3 then
35849: LD_VAR 0 3
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: GREATER
35858: PUSH
35859: LD_VAR 0 3
35863: PUSH
35864: LD_INT 3
35866: LESS
35867: AND
35868: IFFALSE 35925
// for i in result do
35870: LD_ADDR_VAR 0 5
35874: PUSH
35875: LD_VAR 0 4
35879: PUSH
35880: FOR_IN
35881: IFFALSE 35923
// if GetTech ( i , side ) <> state then
35883: LD_VAR 0 5
35887: PPUSH
35888: LD_VAR 0 1
35892: PPUSH
35893: CALL_OW 321
35897: PUSH
35898: LD_VAR 0 3
35902: NONEQUAL
35903: IFFALSE 35921
// result := result diff i ;
35905: LD_ADDR_VAR 0 4
35909: PUSH
35910: LD_VAR 0 4
35914: PUSH
35915: LD_VAR 0 5
35919: DIFF
35920: ST_TO_ADDR
35921: GO 35880
35923: POP
35924: POP
// end ;
35925: LD_VAR 0 4
35929: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35930: LD_INT 0
35932: PPUSH
35933: PPUSH
35934: PPUSH
// result := true ;
35935: LD_ADDR_VAR 0 3
35939: PUSH
35940: LD_INT 1
35942: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_VAR 0 2
35952: PPUSH
35953: CALL_OW 480
35957: ST_TO_ADDR
// if not tmp then
35958: LD_VAR 0 5
35962: NOT
35963: IFFALSE 35967
// exit ;
35965: GO 36016
// for i in tmp do
35967: LD_ADDR_VAR 0 4
35971: PUSH
35972: LD_VAR 0 5
35976: PUSH
35977: FOR_IN
35978: IFFALSE 36014
// if GetTech ( i , side ) <> state_researched then
35980: LD_VAR 0 4
35984: PPUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 321
35994: PUSH
35995: LD_INT 2
35997: NONEQUAL
35998: IFFALSE 36012
// begin result := false ;
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: LD_INT 0
36007: ST_TO_ADDR
// exit ;
36008: POP
36009: POP
36010: GO 36016
// end ;
36012: GO 35977
36014: POP
36015: POP
// end ;
36016: LD_VAR 0 3
36020: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36021: LD_INT 0
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36036: LD_VAR 0 1
36040: NOT
36041: PUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: CALL_OW 257
36051: PUSH
36052: LD_INT 9
36054: NONEQUAL
36055: OR
36056: IFFALSE 36060
// exit ;
36058: GO 36633
// side := GetSide ( unit ) ;
36060: LD_ADDR_VAR 0 9
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: CALL_OW 255
36074: ST_TO_ADDR
// tech_space := tech_spacanom ;
36075: LD_ADDR_VAR 0 12
36079: PUSH
36080: LD_INT 29
36082: ST_TO_ADDR
// tech_time := tech_taurad ;
36083: LD_ADDR_VAR 0 13
36087: PUSH
36088: LD_INT 28
36090: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36091: LD_ADDR_VAR 0 11
36095: PUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 310
36105: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36106: LD_VAR 0 11
36110: PPUSH
36111: CALL_OW 247
36115: PUSH
36116: LD_INT 2
36118: EQUAL
36119: IFFALSE 36123
// exit ;
36121: GO 36633
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36123: LD_ADDR_VAR 0 8
36127: PUSH
36128: LD_INT 81
36130: PUSH
36131: LD_VAR 0 9
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: LD_INT 21
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL_OW 69
36165: ST_TO_ADDR
// if not tmp then
36166: LD_VAR 0 8
36170: NOT
36171: IFFALSE 36175
// exit ;
36173: GO 36633
// if in_unit then
36175: LD_VAR 0 11
36179: IFFALSE 36203
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36181: LD_ADDR_VAR 0 10
36185: PUSH
36186: LD_VAR 0 8
36190: PPUSH
36191: LD_VAR 0 11
36195: PPUSH
36196: CALL_OW 74
36200: ST_TO_ADDR
36201: GO 36223
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36203: LD_ADDR_VAR 0 10
36207: PUSH
36208: LD_VAR 0 8
36212: PPUSH
36213: LD_VAR 0 1
36217: PPUSH
36218: CALL_OW 74
36222: ST_TO_ADDR
// if not enemy then
36223: LD_VAR 0 10
36227: NOT
36228: IFFALSE 36232
// exit ;
36230: GO 36633
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36232: LD_VAR 0 11
36236: PUSH
36237: LD_VAR 0 11
36241: PPUSH
36242: LD_VAR 0 10
36246: PPUSH
36247: CALL_OW 296
36251: PUSH
36252: LD_INT 13
36254: GREATER
36255: AND
36256: PUSH
36257: LD_VAR 0 1
36261: PPUSH
36262: LD_VAR 0 10
36266: PPUSH
36267: CALL_OW 296
36271: PUSH
36272: LD_INT 12
36274: GREATER
36275: OR
36276: IFFALSE 36280
// exit ;
36278: GO 36633
// missile := [ 1 ] ;
36280: LD_ADDR_VAR 0 14
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36291: LD_VAR 0 9
36295: PPUSH
36296: LD_VAR 0 12
36300: PPUSH
36301: CALL_OW 325
36305: IFFALSE 36334
// missile := Insert ( missile , missile + 1 , 2 ) ;
36307: LD_ADDR_VAR 0 14
36311: PUSH
36312: LD_VAR 0 14
36316: PPUSH
36317: LD_VAR 0 14
36321: PUSH
36322: LD_INT 1
36324: PLUS
36325: PPUSH
36326: LD_INT 2
36328: PPUSH
36329: CALL_OW 2
36333: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36334: LD_VAR 0 9
36338: PPUSH
36339: LD_VAR 0 13
36343: PPUSH
36344: CALL_OW 325
36348: PUSH
36349: LD_VAR 0 10
36353: PPUSH
36354: CALL_OW 255
36358: PPUSH
36359: LD_VAR 0 13
36363: PPUSH
36364: CALL_OW 325
36368: NOT
36369: AND
36370: IFFALSE 36399
// missile := Insert ( missile , missile + 1 , 3 ) ;
36372: LD_ADDR_VAR 0 14
36376: PUSH
36377: LD_VAR 0 14
36381: PPUSH
36382: LD_VAR 0 14
36386: PUSH
36387: LD_INT 1
36389: PLUS
36390: PPUSH
36391: LD_INT 3
36393: PPUSH
36394: CALL_OW 2
36398: ST_TO_ADDR
// if missile < 2 then
36399: LD_VAR 0 14
36403: PUSH
36404: LD_INT 2
36406: LESS
36407: IFFALSE 36411
// exit ;
36409: GO 36633
// x := GetX ( enemy ) ;
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: LD_VAR 0 10
36420: PPUSH
36421: CALL_OW 250
36425: ST_TO_ADDR
// y := GetY ( enemy ) ;
36426: LD_ADDR_VAR 0 5
36430: PUSH
36431: LD_VAR 0 10
36435: PPUSH
36436: CALL_OW 251
36440: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36441: LD_ADDR_VAR 0 6
36445: PUSH
36446: LD_VAR 0 4
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PPUSH
36455: LD_INT 1
36457: PPUSH
36458: CALL_OW 12
36462: PLUS
36463: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36464: LD_ADDR_VAR 0 7
36468: PUSH
36469: LD_VAR 0 5
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PPUSH
36478: LD_INT 1
36480: PPUSH
36481: CALL_OW 12
36485: PLUS
36486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36487: LD_VAR 0 6
36491: PPUSH
36492: LD_VAR 0 7
36496: PPUSH
36497: CALL_OW 488
36501: NOT
36502: IFFALSE 36524
// begin _x := x ;
36504: LD_ADDR_VAR 0 6
36508: PUSH
36509: LD_VAR 0 4
36513: ST_TO_ADDR
// _y := y ;
36514: LD_ADDR_VAR 0 7
36518: PUSH
36519: LD_VAR 0 5
36523: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36524: LD_ADDR_VAR 0 3
36528: PUSH
36529: LD_INT 1
36531: PPUSH
36532: LD_VAR 0 14
36536: PPUSH
36537: CALL_OW 12
36541: ST_TO_ADDR
// case i of 1 :
36542: LD_VAR 0 3
36546: PUSH
36547: LD_INT 1
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36555
36553: GO 36572
36555: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36556: LD_VAR 0 1
36560: PPUSH
36561: LD_VAR 0 10
36565: PPUSH
36566: CALL_OW 115
36570: GO 36633
36572: LD_INT 2
36574: DOUBLE
36575: EQUAL
36576: IFTRUE 36580
36578: GO 36602
36580: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36581: LD_VAR 0 1
36585: PPUSH
36586: LD_VAR 0 6
36590: PPUSH
36591: LD_VAR 0 7
36595: PPUSH
36596: CALL_OW 153
36600: GO 36633
36602: LD_INT 3
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36632
36610: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_VAR 0 6
36620: PPUSH
36621: LD_VAR 0 7
36625: PPUSH
36626: CALL_OW 154
36630: GO 36633
36632: POP
// end ;
36633: LD_VAR 0 2
36637: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36638: LD_INT 0
36640: PPUSH
36641: PPUSH
36642: PPUSH
36643: PPUSH
36644: PPUSH
36645: PPUSH
// if not unit or not building then
36646: LD_VAR 0 1
36650: NOT
36651: PUSH
36652: LD_VAR 0 2
36656: NOT
36657: OR
36658: IFFALSE 36662
// exit ;
36660: GO 36820
// x := GetX ( building ) ;
36662: LD_ADDR_VAR 0 5
36666: PUSH
36667: LD_VAR 0 2
36671: PPUSH
36672: CALL_OW 250
36676: ST_TO_ADDR
// y := GetY ( building ) ;
36677: LD_ADDR_VAR 0 6
36681: PUSH
36682: LD_VAR 0 2
36686: PPUSH
36687: CALL_OW 251
36691: ST_TO_ADDR
// for i = 0 to 5 do
36692: LD_ADDR_VAR 0 4
36696: PUSH
36697: DOUBLE
36698: LD_INT 0
36700: DEC
36701: ST_TO_ADDR
36702: LD_INT 5
36704: PUSH
36705: FOR_TO
36706: IFFALSE 36818
// begin _x := ShiftX ( x , i , 3 ) ;
36708: LD_ADDR_VAR 0 7
36712: PUSH
36713: LD_VAR 0 5
36717: PPUSH
36718: LD_VAR 0 4
36722: PPUSH
36723: LD_INT 3
36725: PPUSH
36726: CALL_OW 272
36730: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36731: LD_ADDR_VAR 0 8
36735: PUSH
36736: LD_VAR 0 6
36740: PPUSH
36741: LD_VAR 0 4
36745: PPUSH
36746: LD_INT 3
36748: PPUSH
36749: CALL_OW 273
36753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36754: LD_VAR 0 7
36758: PPUSH
36759: LD_VAR 0 8
36763: PPUSH
36764: CALL_OW 488
36768: NOT
36769: IFFALSE 36773
// continue ;
36771: GO 36705
// if HexInfo ( _x , _y ) = 0 then
36773: LD_VAR 0 7
36777: PPUSH
36778: LD_VAR 0 8
36782: PPUSH
36783: CALL_OW 428
36787: PUSH
36788: LD_INT 0
36790: EQUAL
36791: IFFALSE 36816
// begin ComMoveXY ( unit , _x , _y ) ;
36793: LD_VAR 0 1
36797: PPUSH
36798: LD_VAR 0 7
36802: PPUSH
36803: LD_VAR 0 8
36807: PPUSH
36808: CALL_OW 111
// exit ;
36812: POP
36813: POP
36814: GO 36820
// end ; end ;
36816: GO 36705
36818: POP
36819: POP
// end ;
36820: LD_VAR 0 3
36824: RET
// export function ScanBase ( side , base_area ) ; begin
36825: LD_INT 0
36827: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: LD_VAR 0 2
36837: PPUSH
36838: LD_INT 81
36840: PUSH
36841: LD_VAR 0 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PPUSH
36850: CALL_OW 70
36854: ST_TO_ADDR
// end ;
36855: LD_VAR 0 3
36859: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36860: LD_INT 0
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
// result := false ;
36866: LD_ADDR_VAR 0 2
36870: PUSH
36871: LD_INT 0
36873: ST_TO_ADDR
// side := GetSide ( unit ) ;
36874: LD_ADDR_VAR 0 3
36878: PUSH
36879: LD_VAR 0 1
36883: PPUSH
36884: CALL_OW 255
36888: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36889: LD_ADDR_VAR 0 4
36893: PUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 248
36903: ST_TO_ADDR
// case nat of 1 :
36904: LD_VAR 0 4
36908: PUSH
36909: LD_INT 1
36911: DOUBLE
36912: EQUAL
36913: IFTRUE 36917
36915: GO 36928
36917: POP
// tech := tech_lassight ; 2 :
36918: LD_ADDR_VAR 0 5
36922: PUSH
36923: LD_INT 12
36925: ST_TO_ADDR
36926: GO 36967
36928: LD_INT 2
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 36947
36936: POP
// tech := tech_mortar ; 3 :
36937: LD_ADDR_VAR 0 5
36941: PUSH
36942: LD_INT 41
36944: ST_TO_ADDR
36945: GO 36967
36947: LD_INT 3
36949: DOUBLE
36950: EQUAL
36951: IFTRUE 36955
36953: GO 36966
36955: POP
// tech := tech_bazooka ; end ;
36956: LD_ADDR_VAR 0 5
36960: PUSH
36961: LD_INT 44
36963: ST_TO_ADDR
36964: GO 36967
36966: POP
// if Researched ( side , tech ) then
36967: LD_VAR 0 3
36971: PPUSH
36972: LD_VAR 0 5
36976: PPUSH
36977: CALL_OW 325
36981: IFFALSE 37008
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36983: LD_ADDR_VAR 0 2
36987: PUSH
36988: LD_INT 5
36990: PUSH
36991: LD_INT 8
36993: PUSH
36994: LD_INT 9
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: PUSH
37002: LD_VAR 0 4
37006: ARRAY
37007: ST_TO_ADDR
// end ;
37008: LD_VAR 0 2
37012: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
37017: PPUSH
// if not mines then
37018: LD_VAR 0 2
37022: NOT
37023: IFFALSE 37027
// exit ;
37025: GO 37171
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37027: LD_ADDR_VAR 0 5
37031: PUSH
37032: LD_INT 81
37034: PUSH
37035: LD_VAR 0 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: LD_INT 21
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PPUSH
37065: CALL_OW 69
37069: ST_TO_ADDR
// for i in mines do
37070: LD_ADDR_VAR 0 4
37074: PUSH
37075: LD_VAR 0 2
37079: PUSH
37080: FOR_IN
37081: IFFALSE 37169
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37083: LD_VAR 0 4
37087: PUSH
37088: LD_INT 1
37090: ARRAY
37091: PPUSH
37092: LD_VAR 0 4
37096: PUSH
37097: LD_INT 2
37099: ARRAY
37100: PPUSH
37101: CALL_OW 458
37105: NOT
37106: IFFALSE 37110
// continue ;
37108: GO 37080
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37110: LD_VAR 0 4
37114: PUSH
37115: LD_INT 1
37117: ARRAY
37118: PPUSH
37119: LD_VAR 0 4
37123: PUSH
37124: LD_INT 2
37126: ARRAY
37127: PPUSH
37128: CALL_OW 428
37132: PUSH
37133: LD_VAR 0 5
37137: IN
37138: IFFALSE 37167
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37140: LD_VAR 0 4
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: PPUSH
37149: LD_VAR 0 4
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: CALL_OW 456
// end ;
37167: GO 37080
37169: POP
37170: POP
// end ;
37171: LD_VAR 0 3
37175: RET
// export function Count ( array ) ; var i ; begin
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
// result := 0 ;
37180: LD_ADDR_VAR 0 2
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// for i in array do
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_VAR 0 1
37197: PUSH
37198: FOR_IN
37199: IFFALSE 37223
// if i then
37201: LD_VAR 0 3
37205: IFFALSE 37221
// result := result + 1 ;
37207: LD_ADDR_VAR 0 2
37211: PUSH
37212: LD_VAR 0 2
37216: PUSH
37217: LD_INT 1
37219: PLUS
37220: ST_TO_ADDR
37221: GO 37198
37223: POP
37224: POP
// end ;
37225: LD_VAR 0 2
37229: RET
// export function IsEmpty ( building ) ; begin
37230: LD_INT 0
37232: PPUSH
// if not building then
37233: LD_VAR 0 1
37237: NOT
37238: IFFALSE 37242
// exit ;
37240: GO 37285
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37242: LD_ADDR_VAR 0 2
37246: PUSH
37247: LD_VAR 0 1
37251: PUSH
37252: LD_INT 22
37254: PUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 255
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 58
37271: PUSH
37272: EMPTY
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PPUSH
37279: CALL_OW 69
37283: IN
37284: ST_TO_ADDR
// end ;
37285: LD_VAR 0 2
37289: RET
// export function IsNotFull ( building ) ; begin
37290: LD_INT 0
37292: PPUSH
// if not building then
37293: LD_VAR 0 1
37297: NOT
37298: IFFALSE 37302
// exit ;
37300: GO 37321
// result := UnitsInside ( building ) < 6 ;
37302: LD_ADDR_VAR 0 2
37306: PUSH
37307: LD_VAR 0 1
37311: PPUSH
37312: CALL_OW 313
37316: PUSH
37317: LD_INT 6
37319: LESS
37320: ST_TO_ADDR
// end ;
37321: LD_VAR 0 2
37325: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37326: LD_INT 0
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
// tmp := [ ] ;
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: EMPTY
37338: ST_TO_ADDR
// list := [ ] ;
37339: LD_ADDR_VAR 0 5
37343: PUSH
37344: EMPTY
37345: ST_TO_ADDR
// for i = 16 to 25 do
37346: LD_ADDR_VAR 0 4
37350: PUSH
37351: DOUBLE
37352: LD_INT 16
37354: DEC
37355: ST_TO_ADDR
37356: LD_INT 25
37358: PUSH
37359: FOR_TO
37360: IFFALSE 37433
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37362: LD_ADDR_VAR 0 3
37366: PUSH
37367: LD_VAR 0 3
37371: PUSH
37372: LD_INT 22
37374: PUSH
37375: LD_VAR 0 1
37379: PPUSH
37380: CALL_OW 255
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 91
37391: PUSH
37392: LD_VAR 0 1
37396: PUSH
37397: LD_INT 6
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 30
37407: PUSH
37408: LD_VAR 0 4
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: PUSH
37422: EMPTY
37423: LIST
37424: PPUSH
37425: CALL_OW 69
37429: ADD
37430: ST_TO_ADDR
37431: GO 37359
37433: POP
37434: POP
// for i = 1 to tmp do
37435: LD_ADDR_VAR 0 4
37439: PUSH
37440: DOUBLE
37441: LD_INT 1
37443: DEC
37444: ST_TO_ADDR
37445: LD_VAR 0 3
37449: PUSH
37450: FOR_TO
37451: IFFALSE 37539
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_VAR 0 5
37462: PUSH
37463: LD_VAR 0 3
37467: PUSH
37468: LD_VAR 0 4
37472: ARRAY
37473: PPUSH
37474: CALL_OW 266
37478: PUSH
37479: LD_VAR 0 3
37483: PUSH
37484: LD_VAR 0 4
37488: ARRAY
37489: PPUSH
37490: CALL_OW 250
37494: PUSH
37495: LD_VAR 0 3
37499: PUSH
37500: LD_VAR 0 4
37504: ARRAY
37505: PPUSH
37506: CALL_OW 251
37510: PUSH
37511: LD_VAR 0 3
37515: PUSH
37516: LD_VAR 0 4
37520: ARRAY
37521: PPUSH
37522: CALL_OW 254
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: ADD
37536: ST_TO_ADDR
37537: GO 37450
37539: POP
37540: POP
// result := list ;
37541: LD_ADDR_VAR 0 2
37545: PUSH
37546: LD_VAR 0 5
37550: ST_TO_ADDR
// end ;
37551: LD_VAR 0 2
37555: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37556: LD_INT 0
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
// if not factory then
37565: LD_VAR 0 1
37569: NOT
37570: IFFALSE 37574
// exit ;
37572: GO 38167
// if control = control_apeman then
37574: LD_VAR 0 4
37578: PUSH
37579: LD_INT 5
37581: EQUAL
37582: IFFALSE 37691
// begin tmp := UnitsInside ( factory ) ;
37584: LD_ADDR_VAR 0 8
37588: PUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 313
37598: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37599: LD_VAR 0 8
37603: PPUSH
37604: LD_INT 25
37606: PUSH
37607: LD_INT 12
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PPUSH
37614: CALL_OW 72
37618: NOT
37619: IFFALSE 37629
// control := control_manual ;
37621: LD_ADDR_VAR 0 4
37625: PUSH
37626: LD_INT 1
37628: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37629: LD_ADDR_VAR 0 8
37633: PUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL 37326 0 1
37643: ST_TO_ADDR
// if tmp then
37644: LD_VAR 0 8
37648: IFFALSE 37691
// begin for i in tmp do
37650: LD_ADDR_VAR 0 7
37654: PUSH
37655: LD_VAR 0 8
37659: PUSH
37660: FOR_IN
37661: IFFALSE 37689
// if i [ 1 ] = b_ext_radio then
37663: LD_VAR 0 7
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PUSH
37672: LD_INT 22
37674: EQUAL
37675: IFFALSE 37687
// begin control := control_remote ;
37677: LD_ADDR_VAR 0 4
37681: PUSH
37682: LD_INT 2
37684: ST_TO_ADDR
// break ;
37685: GO 37689
// end ;
37687: GO 37660
37689: POP
37690: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37691: LD_VAR 0 1
37695: PPUSH
37696: LD_VAR 0 2
37700: PPUSH
37701: LD_VAR 0 3
37705: PPUSH
37706: LD_VAR 0 4
37710: PPUSH
37711: LD_VAR 0 5
37715: PPUSH
37716: CALL_OW 448
37720: IFFALSE 37755
// begin result := [ chassis , engine , control , weapon ] ;
37722: LD_ADDR_VAR 0 6
37726: PUSH
37727: LD_VAR 0 2
37731: PUSH
37732: LD_VAR 0 3
37736: PUSH
37737: LD_VAR 0 4
37741: PUSH
37742: LD_VAR 0 5
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// exit ;
37753: GO 38167
// end ; _chassis := AvailableChassisList ( factory ) ;
37755: LD_ADDR_VAR 0 9
37759: PUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 475
37769: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37770: LD_ADDR_VAR 0 11
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 476
37784: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37785: LD_ADDR_VAR 0 12
37789: PUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 477
37799: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37800: LD_ADDR_VAR 0 10
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 478
37814: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37815: LD_VAR 0 9
37819: NOT
37820: PUSH
37821: LD_VAR 0 11
37825: NOT
37826: OR
37827: PUSH
37828: LD_VAR 0 12
37832: NOT
37833: OR
37834: PUSH
37835: LD_VAR 0 10
37839: NOT
37840: OR
37841: IFFALSE 37876
// begin result := [ chassis , engine , control , weapon ] ;
37843: LD_ADDR_VAR 0 6
37847: PUSH
37848: LD_VAR 0 2
37852: PUSH
37853: LD_VAR 0 3
37857: PUSH
37858: LD_VAR 0 4
37862: PUSH
37863: LD_VAR 0 5
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// exit ;
37874: GO 38167
// end ; if not chassis in _chassis then
37876: LD_VAR 0 2
37880: PUSH
37881: LD_VAR 0 9
37885: IN
37886: NOT
37887: IFFALSE 37913
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37889: LD_ADDR_VAR 0 2
37893: PUSH
37894: LD_VAR 0 9
37898: PUSH
37899: LD_INT 1
37901: PPUSH
37902: LD_VAR 0 9
37906: PPUSH
37907: CALL_OW 12
37911: ARRAY
37912: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37913: LD_VAR 0 2
37917: PPUSH
37918: LD_VAR 0 3
37922: PPUSH
37923: CALL 38172 0 2
37927: NOT
37928: IFFALSE 37987
// repeat engine := _engine [ 1 ] ;
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_VAR 0 11
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37944: LD_ADDR_VAR 0 11
37948: PUSH
37949: LD_VAR 0 11
37953: PPUSH
37954: LD_INT 1
37956: PPUSH
37957: CALL_OW 3
37961: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37962: LD_VAR 0 2
37966: PPUSH
37967: LD_VAR 0 3
37971: PPUSH
37972: CALL 38172 0 2
37976: PUSH
37977: LD_VAR 0 11
37981: PUSH
37982: EMPTY
37983: EQUAL
37984: OR
37985: IFFALSE 37930
// if not control in _control then
37987: LD_VAR 0 4
37991: PUSH
37992: LD_VAR 0 12
37996: IN
37997: NOT
37998: IFFALSE 38024
// control := _control [ rand ( 1 , _control ) ] ;
38000: LD_ADDR_VAR 0 4
38004: PUSH
38005: LD_VAR 0 12
38009: PUSH
38010: LD_INT 1
38012: PPUSH
38013: LD_VAR 0 12
38017: PPUSH
38018: CALL_OW 12
38022: ARRAY
38023: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38024: LD_VAR 0 2
38028: PPUSH
38029: LD_VAR 0 5
38033: PPUSH
38034: CALL 38392 0 2
38038: NOT
38039: IFFALSE 38098
// repeat weapon := _weapon [ 1 ] ;
38041: LD_ADDR_VAR 0 5
38045: PUSH
38046: LD_VAR 0 10
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38055: LD_ADDR_VAR 0 10
38059: PUSH
38060: LD_VAR 0 10
38064: PPUSH
38065: LD_INT 1
38067: PPUSH
38068: CALL_OW 3
38072: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38073: LD_VAR 0 2
38077: PPUSH
38078: LD_VAR 0 5
38082: PPUSH
38083: CALL 38392 0 2
38087: PUSH
38088: LD_VAR 0 10
38092: PUSH
38093: EMPTY
38094: EQUAL
38095: OR
38096: IFFALSE 38041
// result := [ ] ;
38098: LD_ADDR_VAR 0 6
38102: PUSH
38103: EMPTY
38104: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38105: LD_VAR 0 1
38109: PPUSH
38110: LD_VAR 0 2
38114: PPUSH
38115: LD_VAR 0 3
38119: PPUSH
38120: LD_VAR 0 4
38124: PPUSH
38125: LD_VAR 0 5
38129: PPUSH
38130: CALL_OW 448
38134: IFFALSE 38167
// result := [ chassis , engine , control , weapon ] ;
38136: LD_ADDR_VAR 0 6
38140: PUSH
38141: LD_VAR 0 2
38145: PUSH
38146: LD_VAR 0 3
38150: PUSH
38151: LD_VAR 0 4
38155: PUSH
38156: LD_VAR 0 5
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: ST_TO_ADDR
// end ;
38167: LD_VAR 0 6
38171: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38172: LD_INT 0
38174: PPUSH
// if not chassis or not engine then
38175: LD_VAR 0 1
38179: NOT
38180: PUSH
38181: LD_VAR 0 2
38185: NOT
38186: OR
38187: IFFALSE 38191
// exit ;
38189: GO 38387
// case engine of engine_solar :
38191: LD_VAR 0 2
38195: PUSH
38196: LD_INT 2
38198: DOUBLE
38199: EQUAL
38200: IFTRUE 38204
38202: GO 38242
38204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38205: LD_ADDR_VAR 0 3
38209: PUSH
38210: LD_INT 11
38212: PUSH
38213: LD_INT 12
38215: PUSH
38216: LD_INT 13
38218: PUSH
38219: LD_INT 14
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
38240: GO 38371
38242: LD_INT 1
38244: DOUBLE
38245: EQUAL
38246: IFTRUE 38250
38248: GO 38312
38250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: LD_INT 11
38258: PUSH
38259: LD_INT 12
38261: PUSH
38262: LD_INT 13
38264: PUSH
38265: LD_INT 14
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 3
38276: PUSH
38277: LD_INT 4
38279: PUSH
38280: LD_INT 5
38282: PUSH
38283: LD_INT 21
38285: PUSH
38286: LD_INT 23
38288: PUSH
38289: LD_INT 22
38291: PUSH
38292: LD_INT 24
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
38310: GO 38371
38312: LD_INT 3
38314: DOUBLE
38315: EQUAL
38316: IFTRUE 38320
38318: GO 38370
38320: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_INT 13
38328: PUSH
38329: LD_INT 14
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 4
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: LD_INT 21
38346: PUSH
38347: LD_INT 22
38349: PUSH
38350: LD_INT 23
38352: PUSH
38353: LD_INT 24
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: ST_TO_ADDR
38368: GO 38371
38370: POP
// result := ( chassis in result ) ;
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: LD_VAR 0 1
38380: PUSH
38381: LD_VAR 0 3
38385: IN
38386: ST_TO_ADDR
// end ;
38387: LD_VAR 0 3
38391: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38392: LD_INT 0
38394: PPUSH
// if not chassis or not weapon then
38395: LD_VAR 0 1
38399: NOT
38400: PUSH
38401: LD_VAR 0 2
38405: NOT
38406: OR
38407: IFFALSE 38411
// exit ;
38409: GO 39473
// case weapon of us_machine_gun :
38411: LD_VAR 0 2
38415: PUSH
38416: LD_INT 2
38418: DOUBLE
38419: EQUAL
38420: IFTRUE 38424
38422: GO 38454
38424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38425: LD_ADDR_VAR 0 3
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: LD_INT 4
38441: PUSH
38442: LD_INT 5
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
38452: GO 39457
38454: LD_INT 3
38456: DOUBLE
38457: EQUAL
38458: IFTRUE 38462
38460: GO 38492
38462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38463: LD_ADDR_VAR 0 3
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 3
38476: PUSH
38477: LD_INT 4
38479: PUSH
38480: LD_INT 5
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
38490: GO 39457
38492: LD_INT 11
38494: DOUBLE
38495: EQUAL
38496: IFTRUE 38500
38498: GO 38530
38500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38501: LD_ADDR_VAR 0 3
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: LD_INT 4
38517: PUSH
38518: LD_INT 5
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
38528: GO 39457
38530: LD_INT 4
38532: DOUBLE
38533: EQUAL
38534: IFTRUE 38538
38536: GO 38564
38538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38539: LD_ADDR_VAR 0 3
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 3
38549: PUSH
38550: LD_INT 4
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: ST_TO_ADDR
38562: GO 39457
38564: LD_INT 5
38566: DOUBLE
38567: EQUAL
38568: IFTRUE 38572
38570: GO 38598
38572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38573: LD_ADDR_VAR 0 3
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: LD_INT 4
38586: PUSH
38587: LD_INT 5
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
38596: GO 39457
38598: LD_INT 9
38600: DOUBLE
38601: EQUAL
38602: IFTRUE 38606
38604: GO 38632
38606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38607: LD_ADDR_VAR 0 3
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: LD_INT 4
38620: PUSH
38621: LD_INT 5
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
38630: GO 39457
38632: LD_INT 7
38634: DOUBLE
38635: EQUAL
38636: IFTRUE 38640
38638: GO 38666
38640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38641: LD_ADDR_VAR 0 3
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: LD_INT 4
38654: PUSH
38655: LD_INT 5
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: ST_TO_ADDR
38664: GO 39457
38666: LD_INT 12
38668: DOUBLE
38669: EQUAL
38670: IFTRUE 38674
38672: GO 38700
38674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38675: LD_ADDR_VAR 0 3
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: LD_INT 4
38688: PUSH
38689: LD_INT 5
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: ST_TO_ADDR
38698: GO 39457
38700: LD_INT 13
38702: DOUBLE
38703: EQUAL
38704: IFTRUE 38708
38706: GO 38734
38708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38709: LD_ADDR_VAR 0 3
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 3
38719: PUSH
38720: LD_INT 4
38722: PUSH
38723: LD_INT 5
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: ST_TO_ADDR
38732: GO 39457
38734: LD_INT 14
38736: DOUBLE
38737: EQUAL
38738: IFTRUE 38742
38740: GO 38760
38742: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_INT 4
38750: PUSH
38751: LD_INT 5
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: ST_TO_ADDR
38758: GO 39457
38760: LD_INT 6
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38768
38766: GO 38786
38768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: ST_TO_ADDR
38784: GO 39457
38786: LD_INT 10
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38794
38792: GO 38812
38794: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38795: LD_ADDR_VAR 0 3
38799: PUSH
38800: LD_INT 4
38802: PUSH
38803: LD_INT 5
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: ST_TO_ADDR
38810: GO 39457
38812: LD_INT 22
38814: DOUBLE
38815: EQUAL
38816: IFTRUE 38820
38818: GO 38846
38820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38821: LD_ADDR_VAR 0 3
38825: PUSH
38826: LD_INT 11
38828: PUSH
38829: LD_INT 12
38831: PUSH
38832: LD_INT 13
38834: PUSH
38835: LD_INT 14
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: ST_TO_ADDR
38844: GO 39457
38846: LD_INT 23
38848: DOUBLE
38849: EQUAL
38850: IFTRUE 38854
38852: GO 38880
38854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38855: LD_ADDR_VAR 0 3
38859: PUSH
38860: LD_INT 11
38862: PUSH
38863: LD_INT 12
38865: PUSH
38866: LD_INT 13
38868: PUSH
38869: LD_INT 14
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: ST_TO_ADDR
38878: GO 39457
38880: LD_INT 24
38882: DOUBLE
38883: EQUAL
38884: IFTRUE 38888
38886: GO 38914
38888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: LD_INT 11
38896: PUSH
38897: LD_INT 12
38899: PUSH
38900: LD_INT 13
38902: PUSH
38903: LD_INT 14
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: ST_TO_ADDR
38912: GO 39457
38914: LD_INT 30
38916: DOUBLE
38917: EQUAL
38918: IFTRUE 38922
38920: GO 38948
38922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38923: LD_ADDR_VAR 0 3
38927: PUSH
38928: LD_INT 11
38930: PUSH
38931: LD_INT 12
38933: PUSH
38934: LD_INT 13
38936: PUSH
38937: LD_INT 14
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
38946: GO 39457
38948: LD_INT 25
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38956
38954: GO 38974
38956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38957: LD_ADDR_VAR 0 3
38961: PUSH
38962: LD_INT 13
38964: PUSH
38965: LD_INT 14
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: ST_TO_ADDR
38972: GO 39457
38974: LD_INT 27
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 38982
38980: GO 39000
38982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 13
38990: PUSH
38991: LD_INT 14
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: ST_TO_ADDR
38998: GO 39457
39000: LD_EXP 127
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39010
39008: GO 39036
39010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39011: LD_ADDR_VAR 0 3
39015: PUSH
39016: LD_INT 11
39018: PUSH
39019: LD_INT 12
39021: PUSH
39022: LD_INT 13
39024: PUSH
39025: LD_INT 14
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: ST_TO_ADDR
39034: GO 39457
39036: LD_INT 28
39038: DOUBLE
39039: EQUAL
39040: IFTRUE 39044
39042: GO 39062
39044: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39045: LD_ADDR_VAR 0 3
39049: PUSH
39050: LD_INT 13
39052: PUSH
39053: LD_INT 14
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: ST_TO_ADDR
39060: GO 39457
39062: LD_INT 29
39064: DOUBLE
39065: EQUAL
39066: IFTRUE 39070
39068: GO 39088
39070: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: LD_INT 13
39078: PUSH
39079: LD_INT 14
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: ST_TO_ADDR
39086: GO 39457
39088: LD_INT 31
39090: DOUBLE
39091: EQUAL
39092: IFTRUE 39096
39094: GO 39114
39096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39097: LD_ADDR_VAR 0 3
39101: PUSH
39102: LD_INT 13
39104: PUSH
39105: LD_INT 14
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: ST_TO_ADDR
39112: GO 39457
39114: LD_INT 26
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39122
39120: GO 39140
39122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39123: LD_ADDR_VAR 0 3
39127: PUSH
39128: LD_INT 13
39130: PUSH
39131: LD_INT 14
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: ST_TO_ADDR
39138: GO 39457
39140: LD_INT 42
39142: DOUBLE
39143: EQUAL
39144: IFTRUE 39148
39146: GO 39174
39148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39149: LD_ADDR_VAR 0 3
39153: PUSH
39154: LD_INT 21
39156: PUSH
39157: LD_INT 22
39159: PUSH
39160: LD_INT 23
39162: PUSH
39163: LD_INT 24
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: ST_TO_ADDR
39172: GO 39457
39174: LD_INT 43
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39182
39180: GO 39208
39182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39183: LD_ADDR_VAR 0 3
39187: PUSH
39188: LD_INT 21
39190: PUSH
39191: LD_INT 22
39193: PUSH
39194: LD_INT 23
39196: PUSH
39197: LD_INT 24
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
39206: GO 39457
39208: LD_INT 44
39210: DOUBLE
39211: EQUAL
39212: IFTRUE 39216
39214: GO 39242
39216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_INT 21
39224: PUSH
39225: LD_INT 22
39227: PUSH
39228: LD_INT 23
39230: PUSH
39231: LD_INT 24
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: ST_TO_ADDR
39240: GO 39457
39242: LD_INT 45
39244: DOUBLE
39245: EQUAL
39246: IFTRUE 39250
39248: GO 39276
39250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_INT 21
39258: PUSH
39259: LD_INT 22
39261: PUSH
39262: LD_INT 23
39264: PUSH
39265: LD_INT 24
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: ST_TO_ADDR
39274: GO 39457
39276: LD_INT 49
39278: DOUBLE
39279: EQUAL
39280: IFTRUE 39284
39282: GO 39310
39284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: LD_INT 21
39292: PUSH
39293: LD_INT 22
39295: PUSH
39296: LD_INT 23
39298: PUSH
39299: LD_INT 24
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
39308: GO 39457
39310: LD_INT 51
39312: DOUBLE
39313: EQUAL
39314: IFTRUE 39318
39316: GO 39344
39318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39319: LD_ADDR_VAR 0 3
39323: PUSH
39324: LD_INT 21
39326: PUSH
39327: LD_INT 22
39329: PUSH
39330: LD_INT 23
39332: PUSH
39333: LD_INT 24
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: ST_TO_ADDR
39342: GO 39457
39344: LD_INT 52
39346: DOUBLE
39347: EQUAL
39348: IFTRUE 39352
39350: GO 39378
39352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39353: LD_ADDR_VAR 0 3
39357: PUSH
39358: LD_INT 21
39360: PUSH
39361: LD_INT 22
39363: PUSH
39364: LD_INT 23
39366: PUSH
39367: LD_INT 24
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
39376: GO 39457
39378: LD_INT 53
39380: DOUBLE
39381: EQUAL
39382: IFTRUE 39386
39384: GO 39404
39386: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_INT 23
39394: PUSH
39395: LD_INT 24
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: ST_TO_ADDR
39402: GO 39457
39404: LD_INT 46
39406: DOUBLE
39407: EQUAL
39408: IFTRUE 39412
39410: GO 39430
39412: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39413: LD_ADDR_VAR 0 3
39417: PUSH
39418: LD_INT 23
39420: PUSH
39421: LD_INT 24
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: ST_TO_ADDR
39428: GO 39457
39430: LD_INT 47
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39438
39436: GO 39456
39438: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39439: LD_ADDR_VAR 0 3
39443: PUSH
39444: LD_INT 23
39446: PUSH
39447: LD_INT 24
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: ST_TO_ADDR
39454: GO 39457
39456: POP
// result := ( chassis in result ) ;
39457: LD_ADDR_VAR 0 3
39461: PUSH
39462: LD_VAR 0 1
39466: PUSH
39467: LD_VAR 0 3
39471: IN
39472: ST_TO_ADDR
// end ;
39473: LD_VAR 0 3
39477: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39478: LD_INT 0
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
// result := array ;
39487: LD_ADDR_VAR 0 5
39491: PUSH
39492: LD_VAR 0 1
39496: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39497: LD_VAR 0 1
39501: NOT
39502: PUSH
39503: LD_VAR 0 2
39507: NOT
39508: OR
39509: PUSH
39510: LD_VAR 0 3
39514: NOT
39515: OR
39516: PUSH
39517: LD_VAR 0 2
39521: PUSH
39522: LD_VAR 0 1
39526: GREATER
39527: OR
39528: PUSH
39529: LD_VAR 0 3
39533: PUSH
39534: LD_VAR 0 1
39538: GREATER
39539: OR
39540: IFFALSE 39544
// exit ;
39542: GO 39840
// if direction then
39544: LD_VAR 0 4
39548: IFFALSE 39612
// begin d := 1 ;
39550: LD_ADDR_VAR 0 9
39554: PUSH
39555: LD_INT 1
39557: ST_TO_ADDR
// if i_from > i_to then
39558: LD_VAR 0 2
39562: PUSH
39563: LD_VAR 0 3
39567: GREATER
39568: IFFALSE 39594
// length := ( array - i_from ) + i_to else
39570: LD_ADDR_VAR 0 11
39574: PUSH
39575: LD_VAR 0 1
39579: PUSH
39580: LD_VAR 0 2
39584: MINUS
39585: PUSH
39586: LD_VAR 0 3
39590: PLUS
39591: ST_TO_ADDR
39592: GO 39610
// length := i_to - i_from ;
39594: LD_ADDR_VAR 0 11
39598: PUSH
39599: LD_VAR 0 3
39603: PUSH
39604: LD_VAR 0 2
39608: MINUS
39609: ST_TO_ADDR
// end else
39610: GO 39673
// begin d := - 1 ;
39612: LD_ADDR_VAR 0 9
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: ST_TO_ADDR
// if i_from > i_to then
39621: LD_VAR 0 2
39625: PUSH
39626: LD_VAR 0 3
39630: GREATER
39631: IFFALSE 39651
// length := i_from - i_to else
39633: LD_ADDR_VAR 0 11
39637: PUSH
39638: LD_VAR 0 2
39642: PUSH
39643: LD_VAR 0 3
39647: MINUS
39648: ST_TO_ADDR
39649: GO 39673
// length := ( array - i_to ) + i_from ;
39651: LD_ADDR_VAR 0 11
39655: PUSH
39656: LD_VAR 0 1
39660: PUSH
39661: LD_VAR 0 3
39665: MINUS
39666: PUSH
39667: LD_VAR 0 2
39671: PLUS
39672: ST_TO_ADDR
// end ; if not length then
39673: LD_VAR 0 11
39677: NOT
39678: IFFALSE 39682
// exit ;
39680: GO 39840
// tmp := array ;
39682: LD_ADDR_VAR 0 10
39686: PUSH
39687: LD_VAR 0 1
39691: ST_TO_ADDR
// for i = 1 to length do
39692: LD_ADDR_VAR 0 6
39696: PUSH
39697: DOUBLE
39698: LD_INT 1
39700: DEC
39701: ST_TO_ADDR
39702: LD_VAR 0 11
39706: PUSH
39707: FOR_TO
39708: IFFALSE 39828
// begin for j = 1 to array do
39710: LD_ADDR_VAR 0 7
39714: PUSH
39715: DOUBLE
39716: LD_INT 1
39718: DEC
39719: ST_TO_ADDR
39720: LD_VAR 0 1
39724: PUSH
39725: FOR_TO
39726: IFFALSE 39814
// begin k := j + d ;
39728: LD_ADDR_VAR 0 8
39732: PUSH
39733: LD_VAR 0 7
39737: PUSH
39738: LD_VAR 0 9
39742: PLUS
39743: ST_TO_ADDR
// if k > array then
39744: LD_VAR 0 8
39748: PUSH
39749: LD_VAR 0 1
39753: GREATER
39754: IFFALSE 39764
// k := 1 ;
39756: LD_ADDR_VAR 0 8
39760: PUSH
39761: LD_INT 1
39763: ST_TO_ADDR
// if not k then
39764: LD_VAR 0 8
39768: NOT
39769: IFFALSE 39781
// k := array ;
39771: LD_ADDR_VAR 0 8
39775: PUSH
39776: LD_VAR 0 1
39780: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39781: LD_ADDR_VAR 0 10
39785: PUSH
39786: LD_VAR 0 10
39790: PPUSH
39791: LD_VAR 0 8
39795: PPUSH
39796: LD_VAR 0 1
39800: PUSH
39801: LD_VAR 0 7
39805: ARRAY
39806: PPUSH
39807: CALL_OW 1
39811: ST_TO_ADDR
// end ;
39812: GO 39725
39814: POP
39815: POP
// array := tmp ;
39816: LD_ADDR_VAR 0 1
39820: PUSH
39821: LD_VAR 0 10
39825: ST_TO_ADDR
// end ;
39826: GO 39707
39828: POP
39829: POP
// result := array ;
39830: LD_ADDR_VAR 0 5
39834: PUSH
39835: LD_VAR 0 1
39839: ST_TO_ADDR
// end ;
39840: LD_VAR 0 5
39844: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39845: LD_INT 0
39847: PPUSH
39848: PPUSH
// result := 0 ;
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_INT 0
39856: ST_TO_ADDR
// if not array or not value in array then
39857: LD_VAR 0 1
39861: NOT
39862: PUSH
39863: LD_VAR 0 2
39867: PUSH
39868: LD_VAR 0 1
39872: IN
39873: NOT
39874: OR
39875: IFFALSE 39879
// exit ;
39877: GO 39933
// for i = 1 to array do
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: DOUBLE
39885: LD_INT 1
39887: DEC
39888: ST_TO_ADDR
39889: LD_VAR 0 1
39893: PUSH
39894: FOR_TO
39895: IFFALSE 39931
// if value = array [ i ] then
39897: LD_VAR 0 2
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_VAR 0 4
39911: ARRAY
39912: EQUAL
39913: IFFALSE 39929
// begin result := i ;
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_VAR 0 4
39924: ST_TO_ADDR
// exit ;
39925: POP
39926: POP
39927: GO 39933
// end ;
39929: GO 39894
39931: POP
39932: POP
// end ;
39933: LD_VAR 0 3
39937: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39938: LD_INT 0
39940: PPUSH
// vc_chassis := chassis ;
39941: LD_ADDR_OWVAR 37
39945: PUSH
39946: LD_VAR 0 1
39950: ST_TO_ADDR
// vc_engine := engine ;
39951: LD_ADDR_OWVAR 39
39955: PUSH
39956: LD_VAR 0 2
39960: ST_TO_ADDR
// vc_control := control ;
39961: LD_ADDR_OWVAR 38
39965: PUSH
39966: LD_VAR 0 3
39970: ST_TO_ADDR
// vc_weapon := weapon ;
39971: LD_ADDR_OWVAR 40
39975: PUSH
39976: LD_VAR 0 4
39980: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39981: LD_ADDR_OWVAR 41
39985: PUSH
39986: LD_VAR 0 5
39990: ST_TO_ADDR
// end ;
39991: LD_VAR 0 6
39995: RET
// export function WantPlant ( unit ) ; var task ; begin
39996: LD_INT 0
39998: PPUSH
39999: PPUSH
// result := false ;
40000: LD_ADDR_VAR 0 2
40004: PUSH
40005: LD_INT 0
40007: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40008: LD_ADDR_VAR 0 3
40012: PUSH
40013: LD_VAR 0 1
40017: PPUSH
40018: CALL_OW 437
40022: ST_TO_ADDR
// if task then
40023: LD_VAR 0 3
40027: IFFALSE 40055
// if task [ 1 ] [ 1 ] = p then
40029: LD_VAR 0 3
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: PUSH
40038: LD_INT 1
40040: ARRAY
40041: PUSH
40042: LD_STRING p
40044: EQUAL
40045: IFFALSE 40055
// result := true ;
40047: LD_ADDR_VAR 0 2
40051: PUSH
40052: LD_INT 1
40054: ST_TO_ADDR
// end ;
40055: LD_VAR 0 2
40059: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40060: LD_INT 0
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
// if pos < 1 then
40066: LD_VAR 0 2
40070: PUSH
40071: LD_INT 1
40073: LESS
40074: IFFALSE 40078
// exit ;
40076: GO 40381
// if pos = 1 then
40078: LD_VAR 0 2
40082: PUSH
40083: LD_INT 1
40085: EQUAL
40086: IFFALSE 40119
// result := Replace ( arr , pos [ 1 ] , value ) else
40088: LD_ADDR_VAR 0 4
40092: PUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: LD_VAR 0 2
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PPUSH
40107: LD_VAR 0 3
40111: PPUSH
40112: CALL_OW 1
40116: ST_TO_ADDR
40117: GO 40381
// begin tmp := arr ;
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_VAR 0 1
40128: ST_TO_ADDR
// s_arr := [ tmp ] ;
40129: LD_ADDR_VAR 0 7
40133: PUSH
40134: LD_VAR 0 6
40138: PUSH
40139: EMPTY
40140: LIST
40141: ST_TO_ADDR
// for i = 1 to pos - 1 do
40142: LD_ADDR_VAR 0 5
40146: PUSH
40147: DOUBLE
40148: LD_INT 1
40150: DEC
40151: ST_TO_ADDR
40152: LD_VAR 0 2
40156: PUSH
40157: LD_INT 1
40159: MINUS
40160: PUSH
40161: FOR_TO
40162: IFFALSE 40207
// begin tmp := tmp [ pos [ i ] ] ;
40164: LD_ADDR_VAR 0 6
40168: PUSH
40169: LD_VAR 0 6
40173: PUSH
40174: LD_VAR 0 2
40178: PUSH
40179: LD_VAR 0 5
40183: ARRAY
40184: ARRAY
40185: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40186: LD_ADDR_VAR 0 7
40190: PUSH
40191: LD_VAR 0 7
40195: PUSH
40196: LD_VAR 0 6
40200: PUSH
40201: EMPTY
40202: LIST
40203: ADD
40204: ST_TO_ADDR
// end ;
40205: GO 40161
40207: POP
40208: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40209: LD_ADDR_VAR 0 6
40213: PUSH
40214: LD_VAR 0 6
40218: PPUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_VAR 0 2
40228: ARRAY
40229: PPUSH
40230: LD_VAR 0 3
40234: PPUSH
40235: CALL_OW 1
40239: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40240: LD_ADDR_VAR 0 7
40244: PUSH
40245: LD_VAR 0 7
40249: PPUSH
40250: LD_VAR 0 7
40254: PPUSH
40255: LD_VAR 0 6
40259: PPUSH
40260: CALL_OW 1
40264: ST_TO_ADDR
// for i = s_arr downto 2 do
40265: LD_ADDR_VAR 0 5
40269: PUSH
40270: DOUBLE
40271: LD_VAR 0 7
40275: INC
40276: ST_TO_ADDR
40277: LD_INT 2
40279: PUSH
40280: FOR_DOWNTO
40281: IFFALSE 40365
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40283: LD_ADDR_VAR 0 6
40287: PUSH
40288: LD_VAR 0 7
40292: PUSH
40293: LD_VAR 0 5
40297: PUSH
40298: LD_INT 1
40300: MINUS
40301: ARRAY
40302: PPUSH
40303: LD_VAR 0 2
40307: PUSH
40308: LD_VAR 0 5
40312: PUSH
40313: LD_INT 1
40315: MINUS
40316: ARRAY
40317: PPUSH
40318: LD_VAR 0 7
40322: PUSH
40323: LD_VAR 0 5
40327: ARRAY
40328: PPUSH
40329: CALL_OW 1
40333: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40334: LD_ADDR_VAR 0 7
40338: PUSH
40339: LD_VAR 0 7
40343: PPUSH
40344: LD_VAR 0 5
40348: PUSH
40349: LD_INT 1
40351: MINUS
40352: PPUSH
40353: LD_VAR 0 6
40357: PPUSH
40358: CALL_OW 1
40362: ST_TO_ADDR
// end ;
40363: GO 40280
40365: POP
40366: POP
// result := s_arr [ 1 ] ;
40367: LD_ADDR_VAR 0 4
40371: PUSH
40372: LD_VAR 0 7
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: ST_TO_ADDR
// end ; end ;
40381: LD_VAR 0 4
40385: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40386: LD_INT 0
40388: PPUSH
40389: PPUSH
// if not list then
40390: LD_VAR 0 1
40394: NOT
40395: IFFALSE 40399
// exit ;
40397: GO 40490
// i := list [ pos1 ] ;
40399: LD_ADDR_VAR 0 5
40403: PUSH
40404: LD_VAR 0 1
40408: PUSH
40409: LD_VAR 0 2
40413: ARRAY
40414: ST_TO_ADDR
// if not i then
40415: LD_VAR 0 5
40419: NOT
40420: IFFALSE 40424
// exit ;
40422: GO 40490
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40424: LD_ADDR_VAR 0 1
40428: PUSH
40429: LD_VAR 0 1
40433: PPUSH
40434: LD_VAR 0 2
40438: PPUSH
40439: LD_VAR 0 1
40443: PUSH
40444: LD_VAR 0 3
40448: ARRAY
40449: PPUSH
40450: CALL_OW 1
40454: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40455: LD_ADDR_VAR 0 1
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: LD_VAR 0 3
40469: PPUSH
40470: LD_VAR 0 5
40474: PPUSH
40475: CALL_OW 1
40479: ST_TO_ADDR
// result := list ;
40480: LD_ADDR_VAR 0 4
40484: PUSH
40485: LD_VAR 0 1
40489: ST_TO_ADDR
// end ;
40490: LD_VAR 0 4
40494: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40495: LD_INT 0
40497: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: LD_VAR 0 1
40507: PPUSH
40508: CALL_OW 250
40512: PPUSH
40513: LD_VAR 0 1
40517: PPUSH
40518: CALL_OW 251
40522: PPUSH
40523: LD_VAR 0 2
40527: PPUSH
40528: LD_VAR 0 3
40532: PPUSH
40533: LD_VAR 0 4
40537: PPUSH
40538: CALL 40548 0 5
40542: ST_TO_ADDR
// end ;
40543: LD_VAR 0 5
40547: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40548: LD_INT 0
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
// if not list then
40554: LD_VAR 0 3
40558: NOT
40559: IFFALSE 40563
// exit ;
40561: GO 40951
// result := [ ] ;
40563: LD_ADDR_VAR 0 6
40567: PUSH
40568: EMPTY
40569: ST_TO_ADDR
// for i in list do
40570: LD_ADDR_VAR 0 7
40574: PUSH
40575: LD_VAR 0 3
40579: PUSH
40580: FOR_IN
40581: IFFALSE 40783
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40583: LD_ADDR_VAR 0 9
40587: PUSH
40588: LD_VAR 0 7
40592: PPUSH
40593: LD_VAR 0 1
40597: PPUSH
40598: LD_VAR 0 2
40602: PPUSH
40603: CALL_OW 297
40607: ST_TO_ADDR
// if not result then
40608: LD_VAR 0 6
40612: NOT
40613: IFFALSE 40639
// result := [ [ i , tmp ] ] else
40615: LD_ADDR_VAR 0 6
40619: PUSH
40620: LD_VAR 0 7
40624: PUSH
40625: LD_VAR 0 9
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: ST_TO_ADDR
40637: GO 40781
// begin if result [ result ] [ 2 ] < tmp then
40639: LD_VAR 0 6
40643: PUSH
40644: LD_VAR 0 6
40648: ARRAY
40649: PUSH
40650: LD_INT 2
40652: ARRAY
40653: PUSH
40654: LD_VAR 0 9
40658: LESS
40659: IFFALSE 40701
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40661: LD_ADDR_VAR 0 6
40665: PUSH
40666: LD_VAR 0 6
40670: PPUSH
40671: LD_VAR 0 6
40675: PUSH
40676: LD_INT 1
40678: PLUS
40679: PPUSH
40680: LD_VAR 0 7
40684: PUSH
40685: LD_VAR 0 9
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PPUSH
40694: CALL_OW 2
40698: ST_TO_ADDR
40699: GO 40781
// for j = 1 to result do
40701: LD_ADDR_VAR 0 8
40705: PUSH
40706: DOUBLE
40707: LD_INT 1
40709: DEC
40710: ST_TO_ADDR
40711: LD_VAR 0 6
40715: PUSH
40716: FOR_TO
40717: IFFALSE 40779
// begin if tmp < result [ j ] [ 2 ] then
40719: LD_VAR 0 9
40723: PUSH
40724: LD_VAR 0 6
40728: PUSH
40729: LD_VAR 0 8
40733: ARRAY
40734: PUSH
40735: LD_INT 2
40737: ARRAY
40738: LESS
40739: IFFALSE 40777
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40741: LD_ADDR_VAR 0 6
40745: PUSH
40746: LD_VAR 0 6
40750: PPUSH
40751: LD_VAR 0 8
40755: PPUSH
40756: LD_VAR 0 7
40760: PUSH
40761: LD_VAR 0 9
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 2
40774: ST_TO_ADDR
// break ;
40775: GO 40779
// end ; end ;
40777: GO 40716
40779: POP
40780: POP
// end ; end ;
40781: GO 40580
40783: POP
40784: POP
// if result and not asc then
40785: LD_VAR 0 6
40789: PUSH
40790: LD_VAR 0 4
40794: NOT
40795: AND
40796: IFFALSE 40871
// begin tmp := result ;
40798: LD_ADDR_VAR 0 9
40802: PUSH
40803: LD_VAR 0 6
40807: ST_TO_ADDR
// for i = tmp downto 1 do
40808: LD_ADDR_VAR 0 7
40812: PUSH
40813: DOUBLE
40814: LD_VAR 0 9
40818: INC
40819: ST_TO_ADDR
40820: LD_INT 1
40822: PUSH
40823: FOR_DOWNTO
40824: IFFALSE 40869
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40826: LD_ADDR_VAR 0 6
40830: PUSH
40831: LD_VAR 0 6
40835: PPUSH
40836: LD_VAR 0 9
40840: PUSH
40841: LD_VAR 0 7
40845: MINUS
40846: PUSH
40847: LD_INT 1
40849: PLUS
40850: PPUSH
40851: LD_VAR 0 9
40855: PUSH
40856: LD_VAR 0 7
40860: ARRAY
40861: PPUSH
40862: CALL_OW 1
40866: ST_TO_ADDR
40867: GO 40823
40869: POP
40870: POP
// end ; tmp := [ ] ;
40871: LD_ADDR_VAR 0 9
40875: PUSH
40876: EMPTY
40877: ST_TO_ADDR
// if mode then
40878: LD_VAR 0 5
40882: IFFALSE 40951
// begin for i = 1 to result do
40884: LD_ADDR_VAR 0 7
40888: PUSH
40889: DOUBLE
40890: LD_INT 1
40892: DEC
40893: ST_TO_ADDR
40894: LD_VAR 0 6
40898: PUSH
40899: FOR_TO
40900: IFFALSE 40939
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40902: LD_ADDR_VAR 0 9
40906: PUSH
40907: LD_VAR 0 9
40911: PPUSH
40912: LD_VAR 0 7
40916: PPUSH
40917: LD_VAR 0 6
40921: PUSH
40922: LD_VAR 0 7
40926: ARRAY
40927: PUSH
40928: LD_INT 1
40930: ARRAY
40931: PPUSH
40932: CALL_OW 1
40936: ST_TO_ADDR
40937: GO 40899
40939: POP
40940: POP
// result := tmp ;
40941: LD_ADDR_VAR 0 6
40945: PUSH
40946: LD_VAR 0 9
40950: ST_TO_ADDR
// end ; end ;
40951: LD_VAR 0 6
40955: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40956: LD_INT 0
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40964: LD_ADDR_VAR 0 5
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
// if not x or not y then
40986: LD_VAR 0 2
40990: NOT
40991: PUSH
40992: LD_VAR 0 3
40996: NOT
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 42654
// if not range then
41002: LD_VAR 0 4
41006: NOT
41007: IFFALSE 41017
// range := 10 ;
41009: LD_ADDR_VAR 0 4
41013: PUSH
41014: LD_INT 10
41016: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41017: LD_ADDR_VAR 0 8
41021: PUSH
41022: LD_INT 81
41024: PUSH
41025: LD_VAR 0 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 92
41036: PUSH
41037: LD_VAR 0 2
41041: PUSH
41042: LD_VAR 0 3
41046: PUSH
41047: LD_VAR 0 4
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 21
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: PPUSH
41080: CALL_OW 69
41084: ST_TO_ADDR
// if not tmp then
41085: LD_VAR 0 8
41089: NOT
41090: IFFALSE 41094
// exit ;
41092: GO 42654
// for i in tmp do
41094: LD_ADDR_VAR 0 6
41098: PUSH
41099: LD_VAR 0 8
41103: PUSH
41104: FOR_IN
41105: IFFALSE 42629
// begin points := [ 0 , 0 , 0 ] ;
41107: LD_ADDR_VAR 0 9
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// bpoints := 1 ;
41126: LD_ADDR_VAR 0 10
41130: PUSH
41131: LD_INT 1
41133: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41134: LD_VAR 0 6
41138: PPUSH
41139: CALL_OW 247
41143: PUSH
41144: LD_INT 1
41146: DOUBLE
41147: EQUAL
41148: IFTRUE 41152
41150: GO 41730
41152: POP
// begin if GetClass ( i ) = 1 then
41153: LD_VAR 0 6
41157: PPUSH
41158: CALL_OW 257
41162: PUSH
41163: LD_INT 1
41165: EQUAL
41166: IFFALSE 41187
// points := [ 10 , 5 , 3 ] ;
41168: LD_ADDR_VAR 0 9
41172: PUSH
41173: LD_INT 10
41175: PUSH
41176: LD_INT 5
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41187: LD_VAR 0 6
41191: PPUSH
41192: CALL_OW 257
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 3
41202: PUSH
41203: LD_INT 4
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: IN
41211: IFFALSE 41232
// points := [ 3 , 2 , 1 ] ;
41213: LD_ADDR_VAR 0 9
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41232: LD_VAR 0 6
41236: PPUSH
41237: CALL_OW 257
41241: PUSH
41242: LD_INT 5
41244: EQUAL
41245: IFFALSE 41266
// points := [ 130 , 5 , 2 ] ;
41247: LD_ADDR_VAR 0 9
41251: PUSH
41252: LD_INT 130
41254: PUSH
41255: LD_INT 5
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41266: LD_VAR 0 6
41270: PPUSH
41271: CALL_OW 257
41275: PUSH
41276: LD_INT 8
41278: EQUAL
41279: IFFALSE 41300
// points := [ 35 , 35 , 30 ] ;
41281: LD_ADDR_VAR 0 9
41285: PUSH
41286: LD_INT 35
41288: PUSH
41289: LD_INT 35
41291: PUSH
41292: LD_INT 30
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41300: LD_VAR 0 6
41304: PPUSH
41305: CALL_OW 257
41309: PUSH
41310: LD_INT 9
41312: EQUAL
41313: IFFALSE 41334
// points := [ 20 , 55 , 40 ] ;
41315: LD_ADDR_VAR 0 9
41319: PUSH
41320: LD_INT 20
41322: PUSH
41323: LD_INT 55
41325: PUSH
41326: LD_INT 40
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41334: LD_VAR 0 6
41338: PPUSH
41339: CALL_OW 257
41343: PUSH
41344: LD_INT 12
41346: PUSH
41347: LD_INT 16
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: IN
41354: IFFALSE 41375
// points := [ 5 , 3 , 2 ] ;
41356: LD_ADDR_VAR 0 9
41360: PUSH
41361: LD_INT 5
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41375: LD_VAR 0 6
41379: PPUSH
41380: CALL_OW 257
41384: PUSH
41385: LD_INT 17
41387: EQUAL
41388: IFFALSE 41409
// points := [ 100 , 50 , 75 ] ;
41390: LD_ADDR_VAR 0 9
41394: PUSH
41395: LD_INT 100
41397: PUSH
41398: LD_INT 50
41400: PUSH
41401: LD_INT 75
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41409: LD_VAR 0 6
41413: PPUSH
41414: CALL_OW 257
41418: PUSH
41419: LD_INT 15
41421: EQUAL
41422: IFFALSE 41443
// points := [ 10 , 5 , 3 ] ;
41424: LD_ADDR_VAR 0 9
41428: PUSH
41429: LD_INT 10
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: LD_INT 3
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41443: LD_VAR 0 6
41447: PPUSH
41448: CALL_OW 257
41452: PUSH
41453: LD_INT 14
41455: EQUAL
41456: IFFALSE 41477
// points := [ 10 , 0 , 0 ] ;
41458: LD_ADDR_VAR 0 9
41462: PUSH
41463: LD_INT 10
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41477: LD_VAR 0 6
41481: PPUSH
41482: CALL_OW 257
41486: PUSH
41487: LD_INT 11
41489: EQUAL
41490: IFFALSE 41511
// points := [ 30 , 10 , 5 ] ;
41492: LD_ADDR_VAR 0 9
41496: PUSH
41497: LD_INT 30
41499: PUSH
41500: LD_INT 10
41502: PUSH
41503: LD_INT 5
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41511: LD_VAR 0 1
41515: PPUSH
41516: LD_INT 5
41518: PPUSH
41519: CALL_OW 321
41523: PUSH
41524: LD_INT 2
41526: EQUAL
41527: IFFALSE 41544
// bpoints := bpoints * 1.8 ;
41529: LD_ADDR_VAR 0 10
41533: PUSH
41534: LD_VAR 0 10
41538: PUSH
41539: LD_REAL  1.80000000000000E+0000
41542: MUL
41543: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41544: LD_VAR 0 6
41548: PPUSH
41549: CALL_OW 257
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: LD_INT 3
41562: PUSH
41563: LD_INT 4
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: IN
41572: PUSH
41573: LD_VAR 0 1
41577: PPUSH
41578: LD_INT 51
41580: PPUSH
41581: CALL_OW 321
41585: PUSH
41586: LD_INT 2
41588: EQUAL
41589: AND
41590: IFFALSE 41607
// bpoints := bpoints * 1.2 ;
41592: LD_ADDR_VAR 0 10
41596: PUSH
41597: LD_VAR 0 10
41601: PUSH
41602: LD_REAL  1.20000000000000E+0000
41605: MUL
41606: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41607: LD_VAR 0 6
41611: PPUSH
41612: CALL_OW 257
41616: PUSH
41617: LD_INT 5
41619: PUSH
41620: LD_INT 7
41622: PUSH
41623: LD_INT 9
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: IN
41631: PUSH
41632: LD_VAR 0 1
41636: PPUSH
41637: LD_INT 52
41639: PPUSH
41640: CALL_OW 321
41644: PUSH
41645: LD_INT 2
41647: EQUAL
41648: AND
41649: IFFALSE 41666
// bpoints := bpoints * 1.5 ;
41651: LD_ADDR_VAR 0 10
41655: PUSH
41656: LD_VAR 0 10
41660: PUSH
41661: LD_REAL  1.50000000000000E+0000
41664: MUL
41665: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41666: LD_VAR 0 1
41670: PPUSH
41671: LD_INT 66
41673: PPUSH
41674: CALL_OW 321
41678: PUSH
41679: LD_INT 2
41681: EQUAL
41682: IFFALSE 41699
// bpoints := bpoints * 1.1 ;
41684: LD_ADDR_VAR 0 10
41688: PUSH
41689: LD_VAR 0 10
41693: PUSH
41694: LD_REAL  1.10000000000000E+0000
41697: MUL
41698: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41699: LD_ADDR_VAR 0 10
41703: PUSH
41704: LD_VAR 0 10
41708: PUSH
41709: LD_VAR 0 6
41713: PPUSH
41714: LD_INT 1
41716: PPUSH
41717: CALL_OW 259
41721: PUSH
41722: LD_REAL  1.15000000000000E+0000
41725: MUL
41726: MUL
41727: ST_TO_ADDR
// end ; unit_vehicle :
41728: GO 42558
41730: LD_INT 2
41732: DOUBLE
41733: EQUAL
41734: IFTRUE 41738
41736: GO 42546
41738: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41739: LD_VAR 0 6
41743: PPUSH
41744: CALL_OW 264
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: LD_INT 42
41754: PUSH
41755: LD_INT 24
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: LIST
41762: IN
41763: IFFALSE 41784
// points := [ 25 , 5 , 3 ] ;
41765: LD_ADDR_VAR 0 9
41769: PUSH
41770: LD_INT 25
41772: PUSH
41773: LD_INT 5
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41784: LD_VAR 0 6
41788: PPUSH
41789: CALL_OW 264
41793: PUSH
41794: LD_INT 4
41796: PUSH
41797: LD_INT 43
41799: PUSH
41800: LD_INT 25
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: IN
41808: IFFALSE 41829
// points := [ 40 , 15 , 5 ] ;
41810: LD_ADDR_VAR 0 9
41814: PUSH
41815: LD_INT 40
41817: PUSH
41818: LD_INT 15
41820: PUSH
41821: LD_INT 5
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41829: LD_VAR 0 6
41833: PPUSH
41834: CALL_OW 264
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 23
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: IN
41849: IFFALSE 41870
// points := [ 7 , 25 , 8 ] ;
41851: LD_ADDR_VAR 0 9
41855: PUSH
41856: LD_INT 7
41858: PUSH
41859: LD_INT 25
41861: PUSH
41862: LD_INT 8
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41870: LD_VAR 0 6
41874: PPUSH
41875: CALL_OW 264
41879: PUSH
41880: LD_INT 5
41882: PUSH
41883: LD_INT 27
41885: PUSH
41886: LD_INT 44
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: IN
41894: IFFALSE 41915
// points := [ 14 , 50 , 16 ] ;
41896: LD_ADDR_VAR 0 9
41900: PUSH
41901: LD_INT 14
41903: PUSH
41904: LD_INT 50
41906: PUSH
41907: LD_INT 16
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41915: LD_VAR 0 6
41919: PPUSH
41920: CALL_OW 264
41924: PUSH
41925: LD_INT 6
41927: PUSH
41928: LD_INT 46
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: IN
41935: IFFALSE 41956
// points := [ 32 , 120 , 70 ] ;
41937: LD_ADDR_VAR 0 9
41941: PUSH
41942: LD_INT 32
41944: PUSH
41945: LD_INT 120
41947: PUSH
41948: LD_INT 70
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41956: LD_VAR 0 6
41960: PPUSH
41961: CALL_OW 264
41965: PUSH
41966: LD_INT 7
41968: PUSH
41969: LD_INT 28
41971: PUSH
41972: LD_INT 45
41974: PUSH
41975: LD_EXP 127
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: IN
41986: IFFALSE 42007
// points := [ 35 , 20 , 45 ] ;
41988: LD_ADDR_VAR 0 9
41992: PUSH
41993: LD_INT 35
41995: PUSH
41996: LD_INT 20
41998: PUSH
41999: LD_INT 45
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42007: LD_VAR 0 6
42011: PPUSH
42012: CALL_OW 264
42016: PUSH
42017: LD_INT 47
42019: PUSH
42020: EMPTY
42021: LIST
42022: IN
42023: IFFALSE 42044
// points := [ 67 , 45 , 75 ] ;
42025: LD_ADDR_VAR 0 9
42029: PUSH
42030: LD_INT 67
42032: PUSH
42033: LD_INT 45
42035: PUSH
42036: LD_INT 75
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42044: LD_VAR 0 6
42048: PPUSH
42049: CALL_OW 264
42053: PUSH
42054: LD_INT 26
42056: PUSH
42057: EMPTY
42058: LIST
42059: IN
42060: IFFALSE 42081
// points := [ 120 , 30 , 80 ] ;
42062: LD_ADDR_VAR 0 9
42066: PUSH
42067: LD_INT 120
42069: PUSH
42070: LD_INT 30
42072: PUSH
42073: LD_INT 80
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42081: LD_VAR 0 6
42085: PPUSH
42086: CALL_OW 264
42090: PUSH
42091: LD_INT 22
42093: PUSH
42094: EMPTY
42095: LIST
42096: IN
42097: IFFALSE 42118
// points := [ 40 , 1 , 1 ] ;
42099: LD_ADDR_VAR 0 9
42103: PUSH
42104: LD_INT 40
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42118: LD_VAR 0 6
42122: PPUSH
42123: CALL_OW 264
42127: PUSH
42128: LD_INT 29
42130: PUSH
42131: EMPTY
42132: LIST
42133: IN
42134: IFFALSE 42155
// points := [ 70 , 200 , 400 ] ;
42136: LD_ADDR_VAR 0 9
42140: PUSH
42141: LD_INT 70
42143: PUSH
42144: LD_INT 200
42146: PUSH
42147: LD_INT 400
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42155: LD_VAR 0 6
42159: PPUSH
42160: CALL_OW 264
42164: PUSH
42165: LD_INT 14
42167: PUSH
42168: LD_INT 53
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: IN
42175: IFFALSE 42196
// points := [ 40 , 10 , 20 ] ;
42177: LD_ADDR_VAR 0 9
42181: PUSH
42182: LD_INT 40
42184: PUSH
42185: LD_INT 10
42187: PUSH
42188: LD_INT 20
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42196: LD_VAR 0 6
42200: PPUSH
42201: CALL_OW 264
42205: PUSH
42206: LD_INT 9
42208: PUSH
42209: EMPTY
42210: LIST
42211: IN
42212: IFFALSE 42233
// points := [ 5 , 70 , 20 ] ;
42214: LD_ADDR_VAR 0 9
42218: PUSH
42219: LD_INT 5
42221: PUSH
42222: LD_INT 70
42224: PUSH
42225: LD_INT 20
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42233: LD_VAR 0 6
42237: PPUSH
42238: CALL_OW 264
42242: PUSH
42243: LD_INT 10
42245: PUSH
42246: EMPTY
42247: LIST
42248: IN
42249: IFFALSE 42270
// points := [ 35 , 110 , 70 ] ;
42251: LD_ADDR_VAR 0 9
42255: PUSH
42256: LD_INT 35
42258: PUSH
42259: LD_INT 110
42261: PUSH
42262: LD_INT 70
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42270: LD_VAR 0 6
42274: PPUSH
42275: CALL_OW 265
42279: PUSH
42280: LD_INT 25
42282: EQUAL
42283: IFFALSE 42304
// points := [ 80 , 65 , 100 ] ;
42285: LD_ADDR_VAR 0 9
42289: PUSH
42290: LD_INT 80
42292: PUSH
42293: LD_INT 65
42295: PUSH
42296: LD_INT 100
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42304: LD_VAR 0 6
42308: PPUSH
42309: CALL_OW 263
42313: PUSH
42314: LD_INT 1
42316: EQUAL
42317: IFFALSE 42352
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42319: LD_ADDR_VAR 0 10
42323: PUSH
42324: LD_VAR 0 10
42328: PUSH
42329: LD_VAR 0 6
42333: PPUSH
42334: CALL_OW 311
42338: PPUSH
42339: LD_INT 3
42341: PPUSH
42342: CALL_OW 259
42346: PUSH
42347: LD_INT 4
42349: MUL
42350: MUL
42351: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42352: LD_VAR 0 6
42356: PPUSH
42357: CALL_OW 263
42361: PUSH
42362: LD_INT 2
42364: EQUAL
42365: IFFALSE 42416
// begin j := IsControledBy ( i ) ;
42367: LD_ADDR_VAR 0 7
42371: PUSH
42372: LD_VAR 0 6
42376: PPUSH
42377: CALL_OW 312
42381: ST_TO_ADDR
// if j then
42382: LD_VAR 0 7
42386: IFFALSE 42416
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42388: LD_ADDR_VAR 0 10
42392: PUSH
42393: LD_VAR 0 10
42397: PUSH
42398: LD_VAR 0 7
42402: PPUSH
42403: LD_INT 3
42405: PPUSH
42406: CALL_OW 259
42410: PUSH
42411: LD_INT 3
42413: MUL
42414: MUL
42415: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42416: LD_VAR 0 6
42420: PPUSH
42421: CALL_OW 264
42425: PUSH
42426: LD_INT 5
42428: PUSH
42429: LD_INT 6
42431: PUSH
42432: LD_INT 46
42434: PUSH
42435: LD_INT 44
42437: PUSH
42438: LD_INT 47
42440: PUSH
42441: LD_INT 45
42443: PUSH
42444: LD_INT 28
42446: PUSH
42447: LD_INT 7
42449: PUSH
42450: LD_INT 27
42452: PUSH
42453: LD_INT 29
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: IN
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: LD_INT 52
42476: PPUSH
42477: CALL_OW 321
42481: PUSH
42482: LD_INT 2
42484: EQUAL
42485: AND
42486: IFFALSE 42503
// bpoints := bpoints * 1.2 ;
42488: LD_ADDR_VAR 0 10
42492: PUSH
42493: LD_VAR 0 10
42497: PUSH
42498: LD_REAL  1.20000000000000E+0000
42501: MUL
42502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42503: LD_VAR 0 6
42507: PPUSH
42508: CALL_OW 264
42512: PUSH
42513: LD_INT 6
42515: PUSH
42516: LD_INT 46
42518: PUSH
42519: LD_INT 47
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: IN
42527: IFFALSE 42544
// bpoints := bpoints * 1.2 ;
42529: LD_ADDR_VAR 0 10
42533: PUSH
42534: LD_VAR 0 10
42538: PUSH
42539: LD_REAL  1.20000000000000E+0000
42542: MUL
42543: ST_TO_ADDR
// end ; unit_building :
42544: GO 42558
42546: LD_INT 3
42548: DOUBLE
42549: EQUAL
42550: IFTRUE 42554
42552: GO 42557
42554: POP
// ; end ;
42555: GO 42558
42557: POP
// for j = 1 to 3 do
42558: LD_ADDR_VAR 0 7
42562: PUSH
42563: DOUBLE
42564: LD_INT 1
42566: DEC
42567: ST_TO_ADDR
42568: LD_INT 3
42570: PUSH
42571: FOR_TO
42572: IFFALSE 42625
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42574: LD_ADDR_VAR 0 5
42578: PUSH
42579: LD_VAR 0 5
42583: PPUSH
42584: LD_VAR 0 7
42588: PPUSH
42589: LD_VAR 0 5
42593: PUSH
42594: LD_VAR 0 7
42598: ARRAY
42599: PUSH
42600: LD_VAR 0 9
42604: PUSH
42605: LD_VAR 0 7
42609: ARRAY
42610: PUSH
42611: LD_VAR 0 10
42615: MUL
42616: PLUS
42617: PPUSH
42618: CALL_OW 1
42622: ST_TO_ADDR
42623: GO 42571
42625: POP
42626: POP
// end ;
42627: GO 41104
42629: POP
42630: POP
// result := Replace ( result , 4 , tmp ) ;
42631: LD_ADDR_VAR 0 5
42635: PUSH
42636: LD_VAR 0 5
42640: PPUSH
42641: LD_INT 4
42643: PPUSH
42644: LD_VAR 0 8
42648: PPUSH
42649: CALL_OW 1
42653: ST_TO_ADDR
// end ;
42654: LD_VAR 0 5
42658: RET
// export function DangerAtRange ( unit , range ) ; begin
42659: LD_INT 0
42661: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42662: LD_ADDR_VAR 0 3
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL_OW 255
42676: PPUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: CALL_OW 250
42686: PPUSH
42687: LD_VAR 0 1
42691: PPUSH
42692: CALL_OW 251
42696: PPUSH
42697: LD_VAR 0 2
42701: PPUSH
42702: CALL 40956 0 4
42706: ST_TO_ADDR
// end ;
42707: LD_VAR 0 3
42711: RET
// export function DangerInArea ( side , area ) ; begin
42712: LD_INT 0
42714: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_VAR 0 2
42724: PPUSH
42725: LD_INT 81
42727: PUSH
42728: LD_VAR 0 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PPUSH
42737: CALL_OW 70
42741: ST_TO_ADDR
// end ;
42742: LD_VAR 0 3
42746: RET
// export function IsExtension ( b ) ; begin
42747: LD_INT 0
42749: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42750: LD_ADDR_VAR 0 2
42754: PUSH
42755: LD_VAR 0 1
42759: PUSH
42760: LD_INT 23
42762: PUSH
42763: LD_INT 20
42765: PUSH
42766: LD_INT 22
42768: PUSH
42769: LD_INT 17
42771: PUSH
42772: LD_INT 24
42774: PUSH
42775: LD_INT 21
42777: PUSH
42778: LD_INT 19
42780: PUSH
42781: LD_INT 16
42783: PUSH
42784: LD_INT 25
42786: PUSH
42787: LD_INT 18
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: IN
42802: ST_TO_ADDR
// end ;
42803: LD_VAR 0 2
42807: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42808: LD_INT 0
42810: PPUSH
42811: PPUSH
42812: PPUSH
// result := [ ] ;
42813: LD_ADDR_VAR 0 4
42817: PUSH
42818: EMPTY
42819: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42820: LD_ADDR_VAR 0 5
42824: PUSH
42825: LD_VAR 0 2
42829: PPUSH
42830: LD_INT 21
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PPUSH
42840: CALL_OW 70
42844: ST_TO_ADDR
// if not tmp then
42845: LD_VAR 0 5
42849: NOT
42850: IFFALSE 42854
// exit ;
42852: GO 42918
// if checkLink then
42854: LD_VAR 0 3
42858: IFFALSE 42908
// begin for i in tmp do
42860: LD_ADDR_VAR 0 6
42864: PUSH
42865: LD_VAR 0 5
42869: PUSH
42870: FOR_IN
42871: IFFALSE 42906
// if GetBase ( i ) <> base then
42873: LD_VAR 0 6
42877: PPUSH
42878: CALL_OW 274
42882: PUSH
42883: LD_VAR 0 1
42887: NONEQUAL
42888: IFFALSE 42904
// ComLinkToBase ( base , i ) ;
42890: LD_VAR 0 1
42894: PPUSH
42895: LD_VAR 0 6
42899: PPUSH
42900: CALL_OW 169
42904: GO 42870
42906: POP
42907: POP
// end ; result := tmp ;
42908: LD_ADDR_VAR 0 4
42912: PUSH
42913: LD_VAR 0 5
42917: ST_TO_ADDR
// end ;
42918: LD_VAR 0 4
42922: RET
// export function ComComplete ( units , b ) ; var i ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
// if not units then
42927: LD_VAR 0 1
42931: NOT
42932: IFFALSE 42936
// exit ;
42934: GO 43026
// for i in units do
42936: LD_ADDR_VAR 0 4
42940: PUSH
42941: LD_VAR 0 1
42945: PUSH
42946: FOR_IN
42947: IFFALSE 43024
// if BuildingStatus ( b ) = bs_build then
42949: LD_VAR 0 2
42953: PPUSH
42954: CALL_OW 461
42958: PUSH
42959: LD_INT 1
42961: EQUAL
42962: IFFALSE 43022
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42964: LD_VAR 0 4
42968: PPUSH
42969: LD_STRING h
42971: PUSH
42972: LD_VAR 0 2
42976: PPUSH
42977: CALL_OW 250
42981: PUSH
42982: LD_VAR 0 2
42986: PPUSH
42987: CALL_OW 251
42991: PUSH
42992: LD_VAR 0 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: PPUSH
43018: CALL_OW 446
43022: GO 42946
43024: POP
43025: POP
// end ;
43026: LD_VAR 0 3
43030: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43031: LD_INT 0
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43039: LD_VAR 0 1
43043: NOT
43044: PUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 263
43054: PUSH
43055: LD_INT 2
43057: NONEQUAL
43058: OR
43059: IFFALSE 43063
// exit ;
43061: GO 43379
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43063: LD_ADDR_VAR 0 6
43067: PUSH
43068: LD_INT 22
43070: PUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 255
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 30
43090: PUSH
43091: LD_INT 36
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 34
43100: PUSH
43101: LD_INT 31
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PPUSH
43117: CALL_OW 69
43121: ST_TO_ADDR
// if not tmp then
43122: LD_VAR 0 6
43126: NOT
43127: IFFALSE 43131
// exit ;
43129: GO 43379
// result := [ ] ;
43131: LD_ADDR_VAR 0 2
43135: PUSH
43136: EMPTY
43137: ST_TO_ADDR
// for i in tmp do
43138: LD_ADDR_VAR 0 3
43142: PUSH
43143: LD_VAR 0 6
43147: PUSH
43148: FOR_IN
43149: IFFALSE 43220
// begin t := UnitsInside ( i ) ;
43151: LD_ADDR_VAR 0 4
43155: PUSH
43156: LD_VAR 0 3
43160: PPUSH
43161: CALL_OW 313
43165: ST_TO_ADDR
// if t then
43166: LD_VAR 0 4
43170: IFFALSE 43218
// for j in t do
43172: LD_ADDR_VAR 0 7
43176: PUSH
43177: LD_VAR 0 4
43181: PUSH
43182: FOR_IN
43183: IFFALSE 43216
// result := Replace ( result , result + 1 , j ) ;
43185: LD_ADDR_VAR 0 2
43189: PUSH
43190: LD_VAR 0 2
43194: PPUSH
43195: LD_VAR 0 2
43199: PUSH
43200: LD_INT 1
43202: PLUS
43203: PPUSH
43204: LD_VAR 0 7
43208: PPUSH
43209: CALL_OW 1
43213: ST_TO_ADDR
43214: GO 43182
43216: POP
43217: POP
// end ;
43218: GO 43148
43220: POP
43221: POP
// if not result then
43222: LD_VAR 0 2
43226: NOT
43227: IFFALSE 43231
// exit ;
43229: GO 43379
// mech := result [ 1 ] ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_VAR 0 2
43240: PUSH
43241: LD_INT 1
43243: ARRAY
43244: ST_TO_ADDR
// if result > 1 then
43245: LD_VAR 0 2
43249: PUSH
43250: LD_INT 1
43252: GREATER
43253: IFFALSE 43365
// begin for i = 2 to result do
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: DOUBLE
43261: LD_INT 2
43263: DEC
43264: ST_TO_ADDR
43265: LD_VAR 0 2
43269: PUSH
43270: FOR_TO
43271: IFFALSE 43363
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43273: LD_ADDR_VAR 0 4
43277: PUSH
43278: LD_VAR 0 2
43282: PUSH
43283: LD_VAR 0 3
43287: ARRAY
43288: PPUSH
43289: LD_INT 3
43291: PPUSH
43292: CALL_OW 259
43296: PUSH
43297: LD_VAR 0 2
43301: PUSH
43302: LD_VAR 0 3
43306: ARRAY
43307: PPUSH
43308: CALL_OW 432
43312: MINUS
43313: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43314: LD_VAR 0 4
43318: PUSH
43319: LD_VAR 0 5
43323: PPUSH
43324: LD_INT 3
43326: PPUSH
43327: CALL_OW 259
43331: PUSH
43332: LD_VAR 0 5
43336: PPUSH
43337: CALL_OW 432
43341: MINUS
43342: GREATEREQUAL
43343: IFFALSE 43361
// mech := result [ i ] ;
43345: LD_ADDR_VAR 0 5
43349: PUSH
43350: LD_VAR 0 2
43354: PUSH
43355: LD_VAR 0 3
43359: ARRAY
43360: ST_TO_ADDR
// end ;
43361: GO 43270
43363: POP
43364: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43365: LD_VAR 0 1
43369: PPUSH
43370: LD_VAR 0 5
43374: PPUSH
43375: CALL_OW 135
// end ;
43379: LD_VAR 0 2
43383: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43384: LD_INT 0
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
// result := [ ] ;
43399: LD_ADDR_VAR 0 7
43403: PUSH
43404: EMPTY
43405: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43406: LD_VAR 0 1
43410: PPUSH
43411: CALL_OW 266
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: IN
43426: NOT
43427: IFFALSE 43431
// exit ;
43429: GO 45065
// if name then
43431: LD_VAR 0 3
43435: IFFALSE 43451
// SetBName ( base_dep , name ) ;
43437: LD_VAR 0 1
43441: PPUSH
43442: LD_VAR 0 3
43446: PPUSH
43447: CALL_OW 500
// base := GetBase ( base_dep ) ;
43451: LD_ADDR_VAR 0 15
43455: PUSH
43456: LD_VAR 0 1
43460: PPUSH
43461: CALL_OW 274
43465: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43466: LD_ADDR_VAR 0 16
43470: PUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 255
43480: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43481: LD_ADDR_VAR 0 17
43485: PUSH
43486: LD_VAR 0 1
43490: PPUSH
43491: CALL_OW 248
43495: ST_TO_ADDR
// if sources then
43496: LD_VAR 0 5
43500: IFFALSE 43547
// for i = 1 to 3 do
43502: LD_ADDR_VAR 0 8
43506: PUSH
43507: DOUBLE
43508: LD_INT 1
43510: DEC
43511: ST_TO_ADDR
43512: LD_INT 3
43514: PUSH
43515: FOR_TO
43516: IFFALSE 43545
// AddResourceType ( base , i , sources [ i ] ) ;
43518: LD_VAR 0 15
43522: PPUSH
43523: LD_VAR 0 8
43527: PPUSH
43528: LD_VAR 0 5
43532: PUSH
43533: LD_VAR 0 8
43537: ARRAY
43538: PPUSH
43539: CALL_OW 276
43543: GO 43515
43545: POP
43546: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43547: LD_ADDR_VAR 0 18
43551: PUSH
43552: LD_VAR 0 15
43556: PPUSH
43557: LD_VAR 0 2
43561: PPUSH
43562: LD_INT 1
43564: PPUSH
43565: CALL 42808 0 3
43569: ST_TO_ADDR
// InitHc ;
43570: CALL_OW 19
// InitUc ;
43574: CALL_OW 18
// uc_side := side ;
43578: LD_ADDR_OWVAR 20
43582: PUSH
43583: LD_VAR 0 16
43587: ST_TO_ADDR
// uc_nation := nation ;
43588: LD_ADDR_OWVAR 21
43592: PUSH
43593: LD_VAR 0 17
43597: ST_TO_ADDR
// if buildings then
43598: LD_VAR 0 18
43602: IFFALSE 44924
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43604: LD_ADDR_VAR 0 19
43608: PUSH
43609: LD_VAR 0 18
43613: PPUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 30
43619: PUSH
43620: LD_INT 29
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 30
43629: PUSH
43630: LD_INT 30
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: PPUSH
43642: CALL_OW 72
43646: ST_TO_ADDR
// if tmp then
43647: LD_VAR 0 19
43651: IFFALSE 43699
// for i in tmp do
43653: LD_ADDR_VAR 0 8
43657: PUSH
43658: LD_VAR 0 19
43662: PUSH
43663: FOR_IN
43664: IFFALSE 43697
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43666: LD_VAR 0 8
43670: PPUSH
43671: CALL_OW 250
43675: PPUSH
43676: LD_VAR 0 8
43680: PPUSH
43681: CALL_OW 251
43685: PPUSH
43686: LD_VAR 0 16
43690: PPUSH
43691: CALL_OW 441
43695: GO 43663
43697: POP
43698: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43699: LD_VAR 0 18
43703: PPUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 30
43709: PUSH
43710: LD_INT 32
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 30
43719: PUSH
43720: LD_INT 33
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: PPUSH
43732: CALL_OW 72
43736: IFFALSE 43824
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43738: LD_ADDR_VAR 0 8
43742: PUSH
43743: LD_VAR 0 18
43747: PPUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 30
43753: PUSH
43754: LD_INT 32
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 30
43763: PUSH
43764: LD_INT 33
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: PPUSH
43776: CALL_OW 72
43780: PUSH
43781: FOR_IN
43782: IFFALSE 43822
// begin if not GetBWeapon ( i ) then
43784: LD_VAR 0 8
43788: PPUSH
43789: CALL_OW 269
43793: NOT
43794: IFFALSE 43820
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43796: LD_VAR 0 8
43800: PPUSH
43801: LD_VAR 0 8
43805: PPUSH
43806: LD_VAR 0 2
43810: PPUSH
43811: CALL 45070 0 2
43815: PPUSH
43816: CALL_OW 431
// end ;
43820: GO 43781
43822: POP
43823: POP
// end ; for i = 1 to personel do
43824: LD_ADDR_VAR 0 8
43828: PUSH
43829: DOUBLE
43830: LD_INT 1
43832: DEC
43833: ST_TO_ADDR
43834: LD_VAR 0 6
43838: PUSH
43839: FOR_TO
43840: IFFALSE 44904
// begin if i > 4 then
43842: LD_VAR 0 8
43846: PUSH
43847: LD_INT 4
43849: GREATER
43850: IFFALSE 43854
// break ;
43852: GO 44904
// case i of 1 :
43854: LD_VAR 0 8
43858: PUSH
43859: LD_INT 1
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 43947
43867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43868: LD_ADDR_VAR 0 12
43872: PUSH
43873: LD_VAR 0 18
43877: PPUSH
43878: LD_INT 22
43880: PUSH
43881: LD_VAR 0 16
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 58
43892: PUSH
43893: EMPTY
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: LD_INT 30
43901: PUSH
43902: LD_INT 32
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 30
43911: PUSH
43912: LD_INT 4
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 30
43921: PUSH
43922: LD_INT 5
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: PPUSH
43940: CALL_OW 72
43944: ST_TO_ADDR
43945: GO 44169
43947: LD_INT 2
43949: DOUBLE
43950: EQUAL
43951: IFTRUE 43955
43953: GO 44017
43955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43956: LD_ADDR_VAR 0 12
43960: PUSH
43961: LD_VAR 0 18
43965: PPUSH
43966: LD_INT 22
43968: PUSH
43969: LD_VAR 0 16
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 30
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 30
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PPUSH
44010: CALL_OW 72
44014: ST_TO_ADDR
44015: GO 44169
44017: LD_INT 3
44019: DOUBLE
44020: EQUAL
44021: IFTRUE 44025
44023: GO 44087
44025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44026: LD_ADDR_VAR 0 12
44030: PUSH
44031: LD_VAR 0 18
44035: PPUSH
44036: LD_INT 22
44038: PUSH
44039: LD_VAR 0 16
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 30
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 30
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PPUSH
44080: CALL_OW 72
44084: ST_TO_ADDR
44085: GO 44169
44087: LD_INT 4
44089: DOUBLE
44090: EQUAL
44091: IFTRUE 44095
44093: GO 44168
44095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44096: LD_ADDR_VAR 0 12
44100: PUSH
44101: LD_VAR 0 18
44105: PPUSH
44106: LD_INT 22
44108: PUSH
44109: LD_VAR 0 16
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 30
44123: PUSH
44124: LD_INT 6
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 30
44133: PUSH
44134: LD_INT 7
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 30
44143: PUSH
44144: LD_INT 8
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PPUSH
44161: CALL_OW 72
44165: ST_TO_ADDR
44166: GO 44169
44168: POP
// if i = 1 then
44169: LD_VAR 0 8
44173: PUSH
44174: LD_INT 1
44176: EQUAL
44177: IFFALSE 44288
// begin tmp := [ ] ;
44179: LD_ADDR_VAR 0 19
44183: PUSH
44184: EMPTY
44185: ST_TO_ADDR
// for j in f do
44186: LD_ADDR_VAR 0 9
44190: PUSH
44191: LD_VAR 0 12
44195: PUSH
44196: FOR_IN
44197: IFFALSE 44270
// if GetBType ( j ) = b_bunker then
44199: LD_VAR 0 9
44203: PPUSH
44204: CALL_OW 266
44208: PUSH
44209: LD_INT 32
44211: EQUAL
44212: IFFALSE 44239
// tmp := Insert ( tmp , 1 , j ) else
44214: LD_ADDR_VAR 0 19
44218: PUSH
44219: LD_VAR 0 19
44223: PPUSH
44224: LD_INT 1
44226: PPUSH
44227: LD_VAR 0 9
44231: PPUSH
44232: CALL_OW 2
44236: ST_TO_ADDR
44237: GO 44268
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44239: LD_ADDR_VAR 0 19
44243: PUSH
44244: LD_VAR 0 19
44248: PPUSH
44249: LD_VAR 0 19
44253: PUSH
44254: LD_INT 1
44256: PLUS
44257: PPUSH
44258: LD_VAR 0 9
44262: PPUSH
44263: CALL_OW 2
44267: ST_TO_ADDR
44268: GO 44196
44270: POP
44271: POP
// if tmp then
44272: LD_VAR 0 19
44276: IFFALSE 44288
// f := tmp ;
44278: LD_ADDR_VAR 0 12
44282: PUSH
44283: LD_VAR 0 19
44287: ST_TO_ADDR
// end ; x := personel [ i ] ;
44288: LD_ADDR_VAR 0 13
44292: PUSH
44293: LD_VAR 0 6
44297: PUSH
44298: LD_VAR 0 8
44302: ARRAY
44303: ST_TO_ADDR
// if x = - 1 then
44304: LD_VAR 0 13
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: EQUAL
44313: IFFALSE 44522
// begin for j in f do
44315: LD_ADDR_VAR 0 9
44319: PUSH
44320: LD_VAR 0 12
44324: PUSH
44325: FOR_IN
44326: IFFALSE 44518
// repeat InitHc ;
44328: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44332: LD_VAR 0 9
44336: PPUSH
44337: CALL_OW 266
44341: PUSH
44342: LD_INT 5
44344: EQUAL
44345: IFFALSE 44415
// begin if UnitsInside ( j ) < 3 then
44347: LD_VAR 0 9
44351: PPUSH
44352: CALL_OW 313
44356: PUSH
44357: LD_INT 3
44359: LESS
44360: IFFALSE 44396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44362: LD_INT 0
44364: PPUSH
44365: LD_INT 5
44367: PUSH
44368: LD_INT 8
44370: PUSH
44371: LD_INT 9
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: PUSH
44379: LD_VAR 0 17
44383: ARRAY
44384: PPUSH
44385: LD_VAR 0 4
44389: PPUSH
44390: CALL_OW 380
44394: GO 44413
// PrepareHuman ( false , i , skill ) ;
44396: LD_INT 0
44398: PPUSH
44399: LD_VAR 0 8
44403: PPUSH
44404: LD_VAR 0 4
44408: PPUSH
44409: CALL_OW 380
// end else
44413: GO 44432
// PrepareHuman ( false , i , skill ) ;
44415: LD_INT 0
44417: PPUSH
44418: LD_VAR 0 8
44422: PPUSH
44423: LD_VAR 0 4
44427: PPUSH
44428: CALL_OW 380
// un := CreateHuman ;
44432: LD_ADDR_VAR 0 14
44436: PUSH
44437: CALL_OW 44
44441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44442: LD_ADDR_VAR 0 7
44446: PUSH
44447: LD_VAR 0 7
44451: PPUSH
44452: LD_INT 1
44454: PPUSH
44455: LD_VAR 0 14
44459: PPUSH
44460: CALL_OW 2
44464: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44465: LD_VAR 0 14
44469: PPUSH
44470: LD_VAR 0 9
44474: PPUSH
44475: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44479: LD_VAR 0 9
44483: PPUSH
44484: CALL_OW 313
44488: PUSH
44489: LD_INT 6
44491: EQUAL
44492: PUSH
44493: LD_VAR 0 9
44497: PPUSH
44498: CALL_OW 266
44502: PUSH
44503: LD_INT 32
44505: PUSH
44506: LD_INT 31
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: IN
44513: OR
44514: IFFALSE 44328
44516: GO 44325
44518: POP
44519: POP
// end else
44520: GO 44902
// for j = 1 to x do
44522: LD_ADDR_VAR 0 9
44526: PUSH
44527: DOUBLE
44528: LD_INT 1
44530: DEC
44531: ST_TO_ADDR
44532: LD_VAR 0 13
44536: PUSH
44537: FOR_TO
44538: IFFALSE 44900
// begin InitHc ;
44540: CALL_OW 19
// if not f then
44544: LD_VAR 0 12
44548: NOT
44549: IFFALSE 44638
// begin PrepareHuman ( false , i , skill ) ;
44551: LD_INT 0
44553: PPUSH
44554: LD_VAR 0 8
44558: PPUSH
44559: LD_VAR 0 4
44563: PPUSH
44564: CALL_OW 380
// un := CreateHuman ;
44568: LD_ADDR_VAR 0 14
44572: PUSH
44573: CALL_OW 44
44577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44578: LD_ADDR_VAR 0 7
44582: PUSH
44583: LD_VAR 0 7
44587: PPUSH
44588: LD_INT 1
44590: PPUSH
44591: LD_VAR 0 14
44595: PPUSH
44596: CALL_OW 2
44600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44601: LD_VAR 0 14
44605: PPUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 250
44615: PPUSH
44616: LD_VAR 0 1
44620: PPUSH
44621: CALL_OW 251
44625: PPUSH
44626: LD_INT 10
44628: PPUSH
44629: LD_INT 0
44631: PPUSH
44632: CALL_OW 50
// continue ;
44636: GO 44537
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44638: LD_VAR 0 12
44642: PUSH
44643: LD_INT 1
44645: ARRAY
44646: PPUSH
44647: CALL_OW 313
44651: PUSH
44652: LD_VAR 0 12
44656: PUSH
44657: LD_INT 1
44659: ARRAY
44660: PPUSH
44661: CALL_OW 266
44665: PUSH
44666: LD_INT 32
44668: PUSH
44669: LD_INT 31
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: IN
44676: AND
44677: PUSH
44678: LD_VAR 0 12
44682: PUSH
44683: LD_INT 1
44685: ARRAY
44686: PPUSH
44687: CALL_OW 313
44691: PUSH
44692: LD_INT 6
44694: EQUAL
44695: OR
44696: IFFALSE 44716
// f := Delete ( f , 1 ) ;
44698: LD_ADDR_VAR 0 12
44702: PUSH
44703: LD_VAR 0 12
44707: PPUSH
44708: LD_INT 1
44710: PPUSH
44711: CALL_OW 3
44715: ST_TO_ADDR
// if not f then
44716: LD_VAR 0 12
44720: NOT
44721: IFFALSE 44739
// begin x := x + 2 ;
44723: LD_ADDR_VAR 0 13
44727: PUSH
44728: LD_VAR 0 13
44732: PUSH
44733: LD_INT 2
44735: PLUS
44736: ST_TO_ADDR
// continue ;
44737: GO 44537
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44739: LD_VAR 0 12
44743: PUSH
44744: LD_INT 1
44746: ARRAY
44747: PPUSH
44748: CALL_OW 266
44752: PUSH
44753: LD_INT 5
44755: EQUAL
44756: IFFALSE 44830
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44758: LD_VAR 0 12
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: PPUSH
44767: CALL_OW 313
44771: PUSH
44772: LD_INT 3
44774: LESS
44775: IFFALSE 44811
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44777: LD_INT 0
44779: PPUSH
44780: LD_INT 5
44782: PUSH
44783: LD_INT 8
44785: PUSH
44786: LD_INT 9
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: PUSH
44794: LD_VAR 0 17
44798: ARRAY
44799: PPUSH
44800: LD_VAR 0 4
44804: PPUSH
44805: CALL_OW 380
44809: GO 44828
// PrepareHuman ( false , i , skill ) ;
44811: LD_INT 0
44813: PPUSH
44814: LD_VAR 0 8
44818: PPUSH
44819: LD_VAR 0 4
44823: PPUSH
44824: CALL_OW 380
// end else
44828: GO 44847
// PrepareHuman ( false , i , skill ) ;
44830: LD_INT 0
44832: PPUSH
44833: LD_VAR 0 8
44837: PPUSH
44838: LD_VAR 0 4
44842: PPUSH
44843: CALL_OW 380
// un := CreateHuman ;
44847: LD_ADDR_VAR 0 14
44851: PUSH
44852: CALL_OW 44
44856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44857: LD_ADDR_VAR 0 7
44861: PUSH
44862: LD_VAR 0 7
44866: PPUSH
44867: LD_INT 1
44869: PPUSH
44870: LD_VAR 0 14
44874: PPUSH
44875: CALL_OW 2
44879: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44880: LD_VAR 0 14
44884: PPUSH
44885: LD_VAR 0 12
44889: PUSH
44890: LD_INT 1
44892: ARRAY
44893: PPUSH
44894: CALL_OW 52
// end ;
44898: GO 44537
44900: POP
44901: POP
// end ;
44902: GO 43839
44904: POP
44905: POP
// result := result ^ buildings ;
44906: LD_ADDR_VAR 0 7
44910: PUSH
44911: LD_VAR 0 7
44915: PUSH
44916: LD_VAR 0 18
44920: ADD
44921: ST_TO_ADDR
// end else
44922: GO 45065
// begin for i = 1 to personel do
44924: LD_ADDR_VAR 0 8
44928: PUSH
44929: DOUBLE
44930: LD_INT 1
44932: DEC
44933: ST_TO_ADDR
44934: LD_VAR 0 6
44938: PUSH
44939: FOR_TO
44940: IFFALSE 45063
// begin if i > 4 then
44942: LD_VAR 0 8
44946: PUSH
44947: LD_INT 4
44949: GREATER
44950: IFFALSE 44954
// break ;
44952: GO 45063
// x := personel [ i ] ;
44954: LD_ADDR_VAR 0 13
44958: PUSH
44959: LD_VAR 0 6
44963: PUSH
44964: LD_VAR 0 8
44968: ARRAY
44969: ST_TO_ADDR
// if x = - 1 then
44970: LD_VAR 0 13
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: EQUAL
44979: IFFALSE 44983
// continue ;
44981: GO 44939
// PrepareHuman ( false , i , skill ) ;
44983: LD_INT 0
44985: PPUSH
44986: LD_VAR 0 8
44990: PPUSH
44991: LD_VAR 0 4
44995: PPUSH
44996: CALL_OW 380
// un := CreateHuman ;
45000: LD_ADDR_VAR 0 14
45004: PUSH
45005: CALL_OW 44
45009: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45010: LD_VAR 0 14
45014: PPUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 250
45024: PPUSH
45025: LD_VAR 0 1
45029: PPUSH
45030: CALL_OW 251
45034: PPUSH
45035: LD_INT 10
45037: PPUSH
45038: LD_INT 0
45040: PPUSH
45041: CALL_OW 50
// result := result ^ un ;
45045: LD_ADDR_VAR 0 7
45049: PUSH
45050: LD_VAR 0 7
45054: PUSH
45055: LD_VAR 0 14
45059: ADD
45060: ST_TO_ADDR
// end ;
45061: GO 44939
45063: POP
45064: POP
// end ; end ;
45065: LD_VAR 0 7
45069: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45070: LD_INT 0
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
// result := false ;
45088: LD_ADDR_VAR 0 3
45092: PUSH
45093: LD_INT 0
45095: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45096: LD_VAR 0 1
45100: NOT
45101: PUSH
45102: LD_VAR 0 1
45106: PPUSH
45107: CALL_OW 266
45111: PUSH
45112: LD_INT 32
45114: PUSH
45115: LD_INT 33
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: IN
45122: NOT
45123: OR
45124: IFFALSE 45128
// exit ;
45126: GO 46237
// nat := GetNation ( tower ) ;
45128: LD_ADDR_VAR 0 12
45132: PUSH
45133: LD_VAR 0 1
45137: PPUSH
45138: CALL_OW 248
45142: ST_TO_ADDR
// side := GetSide ( tower ) ;
45143: LD_ADDR_VAR 0 16
45147: PUSH
45148: LD_VAR 0 1
45152: PPUSH
45153: CALL_OW 255
45157: ST_TO_ADDR
// x := GetX ( tower ) ;
45158: LD_ADDR_VAR 0 10
45162: PUSH
45163: LD_VAR 0 1
45167: PPUSH
45168: CALL_OW 250
45172: ST_TO_ADDR
// y := GetY ( tower ) ;
45173: LD_ADDR_VAR 0 11
45177: PUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: CALL_OW 251
45187: ST_TO_ADDR
// if not x or not y then
45188: LD_VAR 0 10
45192: NOT
45193: PUSH
45194: LD_VAR 0 11
45198: NOT
45199: OR
45200: IFFALSE 45204
// exit ;
45202: GO 46237
// weapon := 0 ;
45204: LD_ADDR_VAR 0 18
45208: PUSH
45209: LD_INT 0
45211: ST_TO_ADDR
// fac_list := [ ] ;
45212: LD_ADDR_VAR 0 17
45216: PUSH
45217: EMPTY
45218: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45219: LD_ADDR_VAR 0 6
45223: PUSH
45224: LD_VAR 0 1
45228: PPUSH
45229: CALL_OW 274
45233: PPUSH
45234: LD_VAR 0 2
45238: PPUSH
45239: LD_INT 0
45241: PPUSH
45242: CALL 42808 0 3
45246: PPUSH
45247: LD_INT 30
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PPUSH
45257: CALL_OW 72
45261: ST_TO_ADDR
// if not factories then
45262: LD_VAR 0 6
45266: NOT
45267: IFFALSE 45271
// exit ;
45269: GO 46237
// for i in factories do
45271: LD_ADDR_VAR 0 8
45275: PUSH
45276: LD_VAR 0 6
45280: PUSH
45281: FOR_IN
45282: IFFALSE 45307
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45284: LD_ADDR_VAR 0 17
45288: PUSH
45289: LD_VAR 0 17
45293: PUSH
45294: LD_VAR 0 8
45298: PPUSH
45299: CALL_OW 478
45303: UNION
45304: ST_TO_ADDR
45305: GO 45281
45307: POP
45308: POP
// if not fac_list then
45309: LD_VAR 0 17
45313: NOT
45314: IFFALSE 45318
// exit ;
45316: GO 46237
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45318: LD_ADDR_VAR 0 5
45322: PUSH
45323: LD_INT 4
45325: PUSH
45326: LD_INT 5
45328: PUSH
45329: LD_INT 9
45331: PUSH
45332: LD_INT 10
45334: PUSH
45335: LD_INT 6
45337: PUSH
45338: LD_INT 7
45340: PUSH
45341: LD_INT 11
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 27
45355: PUSH
45356: LD_INT 28
45358: PUSH
45359: LD_INT 26
45361: PUSH
45362: LD_INT 30
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 43
45373: PUSH
45374: LD_INT 44
45376: PUSH
45377: LD_INT 46
45379: PUSH
45380: LD_INT 45
45382: PUSH
45383: LD_INT 47
45385: PUSH
45386: LD_INT 49
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: PUSH
45402: LD_VAR 0 12
45406: ARRAY
45407: ST_TO_ADDR
// list := list isect fac_list ;
45408: LD_ADDR_VAR 0 5
45412: PUSH
45413: LD_VAR 0 5
45417: PUSH
45418: LD_VAR 0 17
45422: ISECT
45423: ST_TO_ADDR
// if not list then
45424: LD_VAR 0 5
45428: NOT
45429: IFFALSE 45433
// exit ;
45431: GO 46237
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45433: LD_VAR 0 12
45437: PUSH
45438: LD_INT 3
45440: EQUAL
45441: PUSH
45442: LD_INT 49
45444: PUSH
45445: LD_VAR 0 5
45449: IN
45450: AND
45451: PUSH
45452: LD_INT 31
45454: PPUSH
45455: LD_VAR 0 16
45459: PPUSH
45460: CALL_OW 321
45464: PUSH
45465: LD_INT 2
45467: EQUAL
45468: AND
45469: IFFALSE 45529
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45471: LD_INT 22
45473: PUSH
45474: LD_VAR 0 16
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 35
45485: PUSH
45486: LD_INT 49
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 91
45495: PUSH
45496: LD_VAR 0 1
45500: PUSH
45501: LD_INT 10
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: PPUSH
45514: CALL_OW 69
45518: NOT
45519: IFFALSE 45529
// weapon := ru_time_lapser ;
45521: LD_ADDR_VAR 0 18
45525: PUSH
45526: LD_INT 49
45528: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45529: LD_VAR 0 12
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: IN
45544: PUSH
45545: LD_INT 11
45547: PUSH
45548: LD_VAR 0 5
45552: IN
45553: PUSH
45554: LD_INT 30
45556: PUSH
45557: LD_VAR 0 5
45561: IN
45562: OR
45563: AND
45564: PUSH
45565: LD_INT 6
45567: PPUSH
45568: LD_VAR 0 16
45572: PPUSH
45573: CALL_OW 321
45577: PUSH
45578: LD_INT 2
45580: EQUAL
45581: AND
45582: IFFALSE 45747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45584: LD_INT 22
45586: PUSH
45587: LD_VAR 0 16
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 35
45601: PUSH
45602: LD_INT 11
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 35
45611: PUSH
45612: LD_INT 30
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 91
45626: PUSH
45627: LD_VAR 0 1
45631: PUSH
45632: LD_INT 18
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: LIST
45644: PPUSH
45645: CALL_OW 69
45649: NOT
45650: PUSH
45651: LD_INT 22
45653: PUSH
45654: LD_VAR 0 16
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 30
45668: PUSH
45669: LD_INT 32
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 30
45678: PUSH
45679: LD_INT 33
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 91
45693: PUSH
45694: LD_VAR 0 1
45698: PUSH
45699: LD_INT 12
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: PPUSH
45715: CALL_OW 69
45719: PUSH
45720: LD_INT 2
45722: GREATER
45723: AND
45724: IFFALSE 45747
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45726: LD_ADDR_VAR 0 18
45730: PUSH
45731: LD_INT 11
45733: PUSH
45734: LD_INT 30
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_VAR 0 12
45745: ARRAY
45746: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45747: LD_VAR 0 18
45751: NOT
45752: PUSH
45753: LD_INT 40
45755: PPUSH
45756: LD_VAR 0 16
45760: PPUSH
45761: CALL_OW 321
45765: PUSH
45766: LD_INT 2
45768: EQUAL
45769: AND
45770: PUSH
45771: LD_INT 7
45773: PUSH
45774: LD_VAR 0 5
45778: IN
45779: PUSH
45780: LD_INT 28
45782: PUSH
45783: LD_VAR 0 5
45787: IN
45788: OR
45789: PUSH
45790: LD_INT 45
45792: PUSH
45793: LD_VAR 0 5
45797: IN
45798: OR
45799: AND
45800: IFFALSE 46054
// begin hex := GetHexInfo ( x , y ) ;
45802: LD_ADDR_VAR 0 4
45806: PUSH
45807: LD_VAR 0 10
45811: PPUSH
45812: LD_VAR 0 11
45816: PPUSH
45817: CALL_OW 546
45821: ST_TO_ADDR
// if hex [ 1 ] then
45822: LD_VAR 0 4
45826: PUSH
45827: LD_INT 1
45829: ARRAY
45830: IFFALSE 45834
// exit ;
45832: GO 46237
// height := hex [ 2 ] ;
45834: LD_ADDR_VAR 0 15
45838: PUSH
45839: LD_VAR 0 4
45843: PUSH
45844: LD_INT 2
45846: ARRAY
45847: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45848: LD_ADDR_VAR 0 14
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: LD_INT 5
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// for i in tmp do
45871: LD_ADDR_VAR 0 8
45875: PUSH
45876: LD_VAR 0 14
45880: PUSH
45881: FOR_IN
45882: IFFALSE 46052
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45884: LD_ADDR_VAR 0 9
45888: PUSH
45889: LD_VAR 0 10
45893: PPUSH
45894: LD_VAR 0 8
45898: PPUSH
45899: LD_INT 5
45901: PPUSH
45902: CALL_OW 272
45906: PUSH
45907: LD_VAR 0 11
45911: PPUSH
45912: LD_VAR 0 8
45916: PPUSH
45917: LD_INT 5
45919: PPUSH
45920: CALL_OW 273
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45929: LD_VAR 0 9
45933: PUSH
45934: LD_INT 1
45936: ARRAY
45937: PPUSH
45938: LD_VAR 0 9
45942: PUSH
45943: LD_INT 2
45945: ARRAY
45946: PPUSH
45947: CALL_OW 488
45951: IFFALSE 46050
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45953: LD_ADDR_VAR 0 4
45957: PUSH
45958: LD_VAR 0 9
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PPUSH
45967: LD_VAR 0 9
45971: PUSH
45972: LD_INT 2
45974: ARRAY
45975: PPUSH
45976: CALL_OW 546
45980: ST_TO_ADDR
// if hex [ 1 ] then
45981: LD_VAR 0 4
45985: PUSH
45986: LD_INT 1
45988: ARRAY
45989: IFFALSE 45993
// continue ;
45991: GO 45881
// h := hex [ 2 ] ;
45993: LD_ADDR_VAR 0 13
45997: PUSH
45998: LD_VAR 0 4
46002: PUSH
46003: LD_INT 2
46005: ARRAY
46006: ST_TO_ADDR
// if h + 7 < height then
46007: LD_VAR 0 13
46011: PUSH
46012: LD_INT 7
46014: PLUS
46015: PUSH
46016: LD_VAR 0 15
46020: LESS
46021: IFFALSE 46050
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46023: LD_ADDR_VAR 0 18
46027: PUSH
46028: LD_INT 7
46030: PUSH
46031: LD_INT 28
46033: PUSH
46034: LD_INT 45
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: PUSH
46042: LD_VAR 0 12
46046: ARRAY
46047: ST_TO_ADDR
// break ;
46048: GO 46052
// end ; end ; end ;
46050: GO 45881
46052: POP
46053: POP
// end ; if not weapon then
46054: LD_VAR 0 18
46058: NOT
46059: IFFALSE 46119
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46061: LD_ADDR_VAR 0 5
46065: PUSH
46066: LD_VAR 0 5
46070: PUSH
46071: LD_INT 11
46073: PUSH
46074: LD_INT 30
46076: PUSH
46077: LD_INT 49
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: DIFF
46085: ST_TO_ADDR
// if not list then
46086: LD_VAR 0 5
46090: NOT
46091: IFFALSE 46095
// exit ;
46093: GO 46237
// weapon := list [ rand ( 1 , list ) ] ;
46095: LD_ADDR_VAR 0 18
46099: PUSH
46100: LD_VAR 0 5
46104: PUSH
46105: LD_INT 1
46107: PPUSH
46108: LD_VAR 0 5
46112: PPUSH
46113: CALL_OW 12
46117: ARRAY
46118: ST_TO_ADDR
// end ; if weapon then
46119: LD_VAR 0 18
46123: IFFALSE 46237
// begin tmp := CostOfWeapon ( weapon ) ;
46125: LD_ADDR_VAR 0 14
46129: PUSH
46130: LD_VAR 0 18
46134: PPUSH
46135: CALL_OW 451
46139: ST_TO_ADDR
// j := GetBase ( tower ) ;
46140: LD_ADDR_VAR 0 9
46144: PUSH
46145: LD_VAR 0 1
46149: PPUSH
46150: CALL_OW 274
46154: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46155: LD_VAR 0 9
46159: PPUSH
46160: LD_INT 1
46162: PPUSH
46163: CALL_OW 275
46167: PUSH
46168: LD_VAR 0 14
46172: PUSH
46173: LD_INT 1
46175: ARRAY
46176: GREATEREQUAL
46177: PUSH
46178: LD_VAR 0 9
46182: PPUSH
46183: LD_INT 2
46185: PPUSH
46186: CALL_OW 275
46190: PUSH
46191: LD_VAR 0 14
46195: PUSH
46196: LD_INT 2
46198: ARRAY
46199: GREATEREQUAL
46200: AND
46201: PUSH
46202: LD_VAR 0 9
46206: PPUSH
46207: LD_INT 3
46209: PPUSH
46210: CALL_OW 275
46214: PUSH
46215: LD_VAR 0 14
46219: PUSH
46220: LD_INT 3
46222: ARRAY
46223: GREATEREQUAL
46224: AND
46225: IFFALSE 46237
// result := weapon ;
46227: LD_ADDR_VAR 0 3
46231: PUSH
46232: LD_VAR 0 18
46236: ST_TO_ADDR
// end ; end ;
46237: LD_VAR 0 3
46241: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46242: LD_INT 0
46244: PPUSH
46245: PPUSH
// result := true ;
46246: LD_ADDR_VAR 0 3
46250: PUSH
46251: LD_INT 1
46253: ST_TO_ADDR
// if array1 = array2 then
46254: LD_VAR 0 1
46258: PUSH
46259: LD_VAR 0 2
46263: EQUAL
46264: IFFALSE 46324
// begin for i = 1 to array1 do
46266: LD_ADDR_VAR 0 4
46270: PUSH
46271: DOUBLE
46272: LD_INT 1
46274: DEC
46275: ST_TO_ADDR
46276: LD_VAR 0 1
46280: PUSH
46281: FOR_TO
46282: IFFALSE 46320
// if array1 [ i ] <> array2 [ i ] then
46284: LD_VAR 0 1
46288: PUSH
46289: LD_VAR 0 4
46293: ARRAY
46294: PUSH
46295: LD_VAR 0 2
46299: PUSH
46300: LD_VAR 0 4
46304: ARRAY
46305: NONEQUAL
46306: IFFALSE 46318
// begin result := false ;
46308: LD_ADDR_VAR 0 3
46312: PUSH
46313: LD_INT 0
46315: ST_TO_ADDR
// break ;
46316: GO 46320
// end ;
46318: GO 46281
46320: POP
46321: POP
// end else
46322: GO 46332
// result := false ;
46324: LD_ADDR_VAR 0 3
46328: PUSH
46329: LD_INT 0
46331: ST_TO_ADDR
// end ;
46332: LD_VAR 0 3
46336: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46337: LD_INT 0
46339: PPUSH
46340: PPUSH
// if not array1 or not array2 then
46341: LD_VAR 0 1
46345: NOT
46346: PUSH
46347: LD_VAR 0 2
46351: NOT
46352: OR
46353: IFFALSE 46357
// exit ;
46355: GO 46421
// result := true ;
46357: LD_ADDR_VAR 0 3
46361: PUSH
46362: LD_INT 1
46364: ST_TO_ADDR
// for i = 1 to array1 do
46365: LD_ADDR_VAR 0 4
46369: PUSH
46370: DOUBLE
46371: LD_INT 1
46373: DEC
46374: ST_TO_ADDR
46375: LD_VAR 0 1
46379: PUSH
46380: FOR_TO
46381: IFFALSE 46419
// if array1 [ i ] <> array2 [ i ] then
46383: LD_VAR 0 1
46387: PUSH
46388: LD_VAR 0 4
46392: ARRAY
46393: PUSH
46394: LD_VAR 0 2
46398: PUSH
46399: LD_VAR 0 4
46403: ARRAY
46404: NONEQUAL
46405: IFFALSE 46417
// begin result := false ;
46407: LD_ADDR_VAR 0 3
46411: PUSH
46412: LD_INT 0
46414: ST_TO_ADDR
// break ;
46415: GO 46419
// end ;
46417: GO 46380
46419: POP
46420: POP
// end ;
46421: LD_VAR 0 3
46425: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46426: LD_INT 0
46428: PPUSH
46429: PPUSH
46430: PPUSH
// pom := GetBase ( fac ) ;
46431: LD_ADDR_VAR 0 5
46435: PUSH
46436: LD_VAR 0 1
46440: PPUSH
46441: CALL_OW 274
46445: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46446: LD_ADDR_VAR 0 4
46450: PUSH
46451: LD_VAR 0 2
46455: PUSH
46456: LD_INT 1
46458: ARRAY
46459: PPUSH
46460: LD_VAR 0 2
46464: PUSH
46465: LD_INT 2
46467: ARRAY
46468: PPUSH
46469: LD_VAR 0 2
46473: PUSH
46474: LD_INT 3
46476: ARRAY
46477: PPUSH
46478: LD_VAR 0 2
46482: PUSH
46483: LD_INT 4
46485: ARRAY
46486: PPUSH
46487: CALL_OW 449
46491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46492: LD_ADDR_VAR 0 3
46496: PUSH
46497: LD_VAR 0 5
46501: PPUSH
46502: LD_INT 1
46504: PPUSH
46505: CALL_OW 275
46509: PUSH
46510: LD_VAR 0 4
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: GREATEREQUAL
46519: PUSH
46520: LD_VAR 0 5
46524: PPUSH
46525: LD_INT 2
46527: PPUSH
46528: CALL_OW 275
46532: PUSH
46533: LD_VAR 0 4
46537: PUSH
46538: LD_INT 2
46540: ARRAY
46541: GREATEREQUAL
46542: AND
46543: PUSH
46544: LD_VAR 0 5
46548: PPUSH
46549: LD_INT 3
46551: PPUSH
46552: CALL_OW 275
46556: PUSH
46557: LD_VAR 0 4
46561: PUSH
46562: LD_INT 3
46564: ARRAY
46565: GREATEREQUAL
46566: AND
46567: ST_TO_ADDR
// end ;
46568: LD_VAR 0 3
46572: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46573: LD_INT 0
46575: PPUSH
46576: PPUSH
46577: PPUSH
46578: PPUSH
// pom := GetBase ( building ) ;
46579: LD_ADDR_VAR 0 3
46583: PUSH
46584: LD_VAR 0 1
46588: PPUSH
46589: CALL_OW 274
46593: ST_TO_ADDR
// if not pom then
46594: LD_VAR 0 3
46598: NOT
46599: IFFALSE 46603
// exit ;
46601: GO 46773
// btype := GetBType ( building ) ;
46603: LD_ADDR_VAR 0 5
46607: PUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 266
46617: ST_TO_ADDR
// if btype = b_armoury then
46618: LD_VAR 0 5
46622: PUSH
46623: LD_INT 4
46625: EQUAL
46626: IFFALSE 46636
// btype := b_barracks ;
46628: LD_ADDR_VAR 0 5
46632: PUSH
46633: LD_INT 5
46635: ST_TO_ADDR
// if btype = b_depot then
46636: LD_VAR 0 5
46640: PUSH
46641: LD_INT 0
46643: EQUAL
46644: IFFALSE 46654
// btype := b_warehouse ;
46646: LD_ADDR_VAR 0 5
46650: PUSH
46651: LD_INT 1
46653: ST_TO_ADDR
// if btype = b_workshop then
46654: LD_VAR 0 5
46658: PUSH
46659: LD_INT 2
46661: EQUAL
46662: IFFALSE 46672
// btype := b_factory ;
46664: LD_ADDR_VAR 0 5
46668: PUSH
46669: LD_INT 3
46671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46672: LD_ADDR_VAR 0 4
46676: PUSH
46677: LD_VAR 0 5
46681: PPUSH
46682: LD_VAR 0 1
46686: PPUSH
46687: CALL_OW 248
46691: PPUSH
46692: CALL_OW 450
46696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46697: LD_ADDR_VAR 0 2
46701: PUSH
46702: LD_VAR 0 3
46706: PPUSH
46707: LD_INT 1
46709: PPUSH
46710: CALL_OW 275
46714: PUSH
46715: LD_VAR 0 4
46719: PUSH
46720: LD_INT 1
46722: ARRAY
46723: GREATEREQUAL
46724: PUSH
46725: LD_VAR 0 3
46729: PPUSH
46730: LD_INT 2
46732: PPUSH
46733: CALL_OW 275
46737: PUSH
46738: LD_VAR 0 4
46742: PUSH
46743: LD_INT 2
46745: ARRAY
46746: GREATEREQUAL
46747: AND
46748: PUSH
46749: LD_VAR 0 3
46753: PPUSH
46754: LD_INT 3
46756: PPUSH
46757: CALL_OW 275
46761: PUSH
46762: LD_VAR 0 4
46766: PUSH
46767: LD_INT 3
46769: ARRAY
46770: GREATEREQUAL
46771: AND
46772: ST_TO_ADDR
// end ;
46773: LD_VAR 0 2
46777: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46778: LD_INT 0
46780: PPUSH
46781: PPUSH
46782: PPUSH
// pom := GetBase ( building ) ;
46783: LD_ADDR_VAR 0 4
46787: PUSH
46788: LD_VAR 0 1
46792: PPUSH
46793: CALL_OW 274
46797: ST_TO_ADDR
// if not pom then
46798: LD_VAR 0 4
46802: NOT
46803: IFFALSE 46807
// exit ;
46805: GO 46908
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46807: LD_ADDR_VAR 0 5
46811: PUSH
46812: LD_VAR 0 2
46816: PPUSH
46817: LD_VAR 0 1
46821: PPUSH
46822: CALL_OW 248
46826: PPUSH
46827: CALL_OW 450
46831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46832: LD_ADDR_VAR 0 3
46836: PUSH
46837: LD_VAR 0 4
46841: PPUSH
46842: LD_INT 1
46844: PPUSH
46845: CALL_OW 275
46849: PUSH
46850: LD_VAR 0 5
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: GREATEREQUAL
46859: PUSH
46860: LD_VAR 0 4
46864: PPUSH
46865: LD_INT 2
46867: PPUSH
46868: CALL_OW 275
46872: PUSH
46873: LD_VAR 0 5
46877: PUSH
46878: LD_INT 2
46880: ARRAY
46881: GREATEREQUAL
46882: AND
46883: PUSH
46884: LD_VAR 0 4
46888: PPUSH
46889: LD_INT 3
46891: PPUSH
46892: CALL_OW 275
46896: PUSH
46897: LD_VAR 0 5
46901: PUSH
46902: LD_INT 3
46904: ARRAY
46905: GREATEREQUAL
46906: AND
46907: ST_TO_ADDR
// end ;
46908: LD_VAR 0 3
46912: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46913: LD_INT 0
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
// result := false ;
46926: LD_ADDR_VAR 0 8
46930: PUSH
46931: LD_INT 0
46933: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46934: LD_VAR 0 5
46938: NOT
46939: PUSH
46940: LD_VAR 0 1
46944: NOT
46945: OR
46946: PUSH
46947: LD_VAR 0 2
46951: NOT
46952: OR
46953: PUSH
46954: LD_VAR 0 3
46958: NOT
46959: OR
46960: IFFALSE 46964
// exit ;
46962: GO 47778
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46964: LD_ADDR_VAR 0 14
46968: PUSH
46969: LD_VAR 0 1
46973: PPUSH
46974: LD_VAR 0 2
46978: PPUSH
46979: LD_VAR 0 3
46983: PPUSH
46984: LD_VAR 0 4
46988: PPUSH
46989: LD_VAR 0 5
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: PPUSH
46998: CALL_OW 248
47002: PPUSH
47003: LD_INT 0
47005: PPUSH
47006: CALL 49015 0 6
47010: ST_TO_ADDR
// if not hexes then
47011: LD_VAR 0 14
47015: NOT
47016: IFFALSE 47020
// exit ;
47018: GO 47778
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47020: LD_ADDR_VAR 0 17
47024: PUSH
47025: LD_VAR 0 5
47029: PPUSH
47030: LD_INT 22
47032: PUSH
47033: LD_VAR 0 13
47037: PPUSH
47038: CALL_OW 255
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 30
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 30
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PPUSH
47079: CALL_OW 72
47083: ST_TO_ADDR
// for i = 1 to hexes do
47084: LD_ADDR_VAR 0 9
47088: PUSH
47089: DOUBLE
47090: LD_INT 1
47092: DEC
47093: ST_TO_ADDR
47094: LD_VAR 0 14
47098: PUSH
47099: FOR_TO
47100: IFFALSE 47776
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47102: LD_ADDR_VAR 0 13
47106: PUSH
47107: LD_VAR 0 14
47111: PUSH
47112: LD_VAR 0 9
47116: ARRAY
47117: PUSH
47118: LD_INT 1
47120: ARRAY
47121: PPUSH
47122: LD_VAR 0 14
47126: PUSH
47127: LD_VAR 0 9
47131: ARRAY
47132: PUSH
47133: LD_INT 2
47135: ARRAY
47136: PPUSH
47137: CALL_OW 428
47141: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47142: LD_VAR 0 14
47146: PUSH
47147: LD_VAR 0 9
47151: ARRAY
47152: PUSH
47153: LD_INT 1
47155: ARRAY
47156: PPUSH
47157: LD_VAR 0 14
47161: PUSH
47162: LD_VAR 0 9
47166: ARRAY
47167: PUSH
47168: LD_INT 2
47170: ARRAY
47171: PPUSH
47172: CALL_OW 351
47176: PUSH
47177: LD_VAR 0 14
47181: PUSH
47182: LD_VAR 0 9
47186: ARRAY
47187: PUSH
47188: LD_INT 1
47190: ARRAY
47191: PPUSH
47192: LD_VAR 0 14
47196: PUSH
47197: LD_VAR 0 9
47201: ARRAY
47202: PUSH
47203: LD_INT 2
47205: ARRAY
47206: PPUSH
47207: CALL_OW 488
47211: NOT
47212: OR
47213: PUSH
47214: LD_VAR 0 13
47218: PPUSH
47219: CALL_OW 247
47223: PUSH
47224: LD_INT 3
47226: EQUAL
47227: OR
47228: IFFALSE 47234
// exit ;
47230: POP
47231: POP
47232: GO 47778
// if not tmp then
47234: LD_VAR 0 13
47238: NOT
47239: IFFALSE 47243
// continue ;
47241: GO 47099
// result := true ;
47243: LD_ADDR_VAR 0 8
47247: PUSH
47248: LD_INT 1
47250: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47251: LD_VAR 0 6
47255: PUSH
47256: LD_VAR 0 13
47260: PPUSH
47261: CALL_OW 247
47265: PUSH
47266: LD_INT 2
47268: EQUAL
47269: AND
47270: PUSH
47271: LD_VAR 0 13
47275: PPUSH
47276: CALL_OW 263
47280: PUSH
47281: LD_INT 1
47283: EQUAL
47284: AND
47285: IFFALSE 47449
// begin if IsDrivenBy ( tmp ) then
47287: LD_VAR 0 13
47291: PPUSH
47292: CALL_OW 311
47296: IFFALSE 47300
// continue ;
47298: GO 47099
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47300: LD_VAR 0 6
47304: PPUSH
47305: LD_INT 3
47307: PUSH
47308: LD_INT 60
47310: PUSH
47311: EMPTY
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: LD_INT 55
47323: PUSH
47324: EMPTY
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PPUSH
47335: CALL_OW 72
47339: IFFALSE 47447
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47341: LD_ADDR_VAR 0 18
47345: PUSH
47346: LD_VAR 0 6
47350: PPUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 60
47356: PUSH
47357: EMPTY
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 55
47369: PUSH
47370: EMPTY
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PPUSH
47381: CALL_OW 72
47385: PUSH
47386: LD_INT 1
47388: ARRAY
47389: ST_TO_ADDR
// if IsInUnit ( driver ) then
47390: LD_VAR 0 18
47394: PPUSH
47395: CALL_OW 310
47399: IFFALSE 47410
// ComExit ( driver ) ;
47401: LD_VAR 0 18
47405: PPUSH
47406: CALL 72199 0 1
// AddComEnterUnit ( driver , tmp ) ;
47410: LD_VAR 0 18
47414: PPUSH
47415: LD_VAR 0 13
47419: PPUSH
47420: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47424: LD_VAR 0 18
47428: PPUSH
47429: LD_VAR 0 7
47433: PPUSH
47434: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47438: LD_VAR 0 18
47442: PPUSH
47443: CALL_OW 181
// end ; continue ;
47447: GO 47099
// end ; if not cleaners or not tmp in cleaners then
47449: LD_VAR 0 6
47453: NOT
47454: PUSH
47455: LD_VAR 0 13
47459: PUSH
47460: LD_VAR 0 6
47464: IN
47465: NOT
47466: OR
47467: IFFALSE 47774
// begin if dep then
47469: LD_VAR 0 17
47473: IFFALSE 47609
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47475: LD_ADDR_VAR 0 16
47479: PUSH
47480: LD_VAR 0 17
47484: PUSH
47485: LD_INT 1
47487: ARRAY
47488: PPUSH
47489: CALL_OW 250
47493: PPUSH
47494: LD_VAR 0 17
47498: PUSH
47499: LD_INT 1
47501: ARRAY
47502: PPUSH
47503: CALL_OW 254
47507: PPUSH
47508: LD_INT 5
47510: PPUSH
47511: CALL_OW 272
47515: PUSH
47516: LD_VAR 0 17
47520: PUSH
47521: LD_INT 1
47523: ARRAY
47524: PPUSH
47525: CALL_OW 251
47529: PPUSH
47530: LD_VAR 0 17
47534: PUSH
47535: LD_INT 1
47537: ARRAY
47538: PPUSH
47539: CALL_OW 254
47543: PPUSH
47544: LD_INT 5
47546: PPUSH
47547: CALL_OW 273
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47556: LD_VAR 0 16
47560: PUSH
47561: LD_INT 1
47563: ARRAY
47564: PPUSH
47565: LD_VAR 0 16
47569: PUSH
47570: LD_INT 2
47572: ARRAY
47573: PPUSH
47574: CALL_OW 488
47578: IFFALSE 47609
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47580: LD_VAR 0 13
47584: PPUSH
47585: LD_VAR 0 16
47589: PUSH
47590: LD_INT 1
47592: ARRAY
47593: PPUSH
47594: LD_VAR 0 16
47598: PUSH
47599: LD_INT 2
47601: ARRAY
47602: PPUSH
47603: CALL_OW 111
// continue ;
47607: GO 47099
// end ; end ; r := GetDir ( tmp ) ;
47609: LD_ADDR_VAR 0 15
47613: PUSH
47614: LD_VAR 0 13
47618: PPUSH
47619: CALL_OW 254
47623: ST_TO_ADDR
// if r = 5 then
47624: LD_VAR 0 15
47628: PUSH
47629: LD_INT 5
47631: EQUAL
47632: IFFALSE 47642
// r := 0 ;
47634: LD_ADDR_VAR 0 15
47638: PUSH
47639: LD_INT 0
47641: ST_TO_ADDR
// for j = r to 5 do
47642: LD_ADDR_VAR 0 10
47646: PUSH
47647: DOUBLE
47648: LD_VAR 0 15
47652: DEC
47653: ST_TO_ADDR
47654: LD_INT 5
47656: PUSH
47657: FOR_TO
47658: IFFALSE 47772
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47660: LD_ADDR_VAR 0 11
47664: PUSH
47665: LD_VAR 0 13
47669: PPUSH
47670: CALL_OW 250
47674: PPUSH
47675: LD_VAR 0 10
47679: PPUSH
47680: LD_INT 2
47682: PPUSH
47683: CALL_OW 272
47687: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47688: LD_ADDR_VAR 0 12
47692: PUSH
47693: LD_VAR 0 13
47697: PPUSH
47698: CALL_OW 251
47702: PPUSH
47703: LD_VAR 0 10
47707: PPUSH
47708: LD_INT 2
47710: PPUSH
47711: CALL_OW 273
47715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47716: LD_VAR 0 11
47720: PPUSH
47721: LD_VAR 0 12
47725: PPUSH
47726: CALL_OW 488
47730: PUSH
47731: LD_VAR 0 11
47735: PPUSH
47736: LD_VAR 0 12
47740: PPUSH
47741: CALL_OW 428
47745: NOT
47746: AND
47747: IFFALSE 47770
// begin ComMoveXY ( tmp , _x , _y ) ;
47749: LD_VAR 0 13
47753: PPUSH
47754: LD_VAR 0 11
47758: PPUSH
47759: LD_VAR 0 12
47763: PPUSH
47764: CALL_OW 111
// break ;
47768: GO 47772
// end ; end ;
47770: GO 47657
47772: POP
47773: POP
// end ; end ;
47774: GO 47099
47776: POP
47777: POP
// end ;
47778: LD_VAR 0 8
47782: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47783: LD_INT 0
47785: PPUSH
// result := true ;
47786: LD_ADDR_VAR 0 3
47790: PUSH
47791: LD_INT 1
47793: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47794: LD_VAR 0 2
47798: PUSH
47799: LD_INT 24
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47813
47805: LD_INT 33
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47813
47811: GO 47838
47813: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47814: LD_ADDR_VAR 0 3
47818: PUSH
47819: LD_INT 32
47821: PPUSH
47822: LD_VAR 0 1
47826: PPUSH
47827: CALL_OW 321
47831: PUSH
47832: LD_INT 2
47834: EQUAL
47835: ST_TO_ADDR
47836: GO 48158
47838: LD_INT 20
47840: DOUBLE
47841: EQUAL
47842: IFTRUE 47846
47844: GO 47871
47846: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47847: LD_ADDR_VAR 0 3
47851: PUSH
47852: LD_INT 6
47854: PPUSH
47855: LD_VAR 0 1
47859: PPUSH
47860: CALL_OW 321
47864: PUSH
47865: LD_INT 2
47867: EQUAL
47868: ST_TO_ADDR
47869: GO 48158
47871: LD_INT 22
47873: DOUBLE
47874: EQUAL
47875: IFTRUE 47885
47877: LD_INT 36
47879: DOUBLE
47880: EQUAL
47881: IFTRUE 47885
47883: GO 47910
47885: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47886: LD_ADDR_VAR 0 3
47890: PUSH
47891: LD_INT 15
47893: PPUSH
47894: LD_VAR 0 1
47898: PPUSH
47899: CALL_OW 321
47903: PUSH
47904: LD_INT 2
47906: EQUAL
47907: ST_TO_ADDR
47908: GO 48158
47910: LD_INT 30
47912: DOUBLE
47913: EQUAL
47914: IFTRUE 47918
47916: GO 47943
47918: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_INT 20
47926: PPUSH
47927: LD_VAR 0 1
47931: PPUSH
47932: CALL_OW 321
47936: PUSH
47937: LD_INT 2
47939: EQUAL
47940: ST_TO_ADDR
47941: GO 48158
47943: LD_INT 28
47945: DOUBLE
47946: EQUAL
47947: IFTRUE 47957
47949: LD_INT 21
47951: DOUBLE
47952: EQUAL
47953: IFTRUE 47957
47955: GO 47982
47957: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47958: LD_ADDR_VAR 0 3
47962: PUSH
47963: LD_INT 21
47965: PPUSH
47966: LD_VAR 0 1
47970: PPUSH
47971: CALL_OW 321
47975: PUSH
47976: LD_INT 2
47978: EQUAL
47979: ST_TO_ADDR
47980: GO 48158
47982: LD_INT 16
47984: DOUBLE
47985: EQUAL
47986: IFTRUE 47990
47988: GO 48017
47990: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47991: LD_ADDR_VAR 0 3
47995: PUSH
47996: LD_EXP 134
48000: PPUSH
48001: LD_VAR 0 1
48005: PPUSH
48006: CALL_OW 321
48010: PUSH
48011: LD_INT 2
48013: EQUAL
48014: ST_TO_ADDR
48015: GO 48158
48017: LD_INT 19
48019: DOUBLE
48020: EQUAL
48021: IFTRUE 48031
48023: LD_INT 23
48025: DOUBLE
48026: EQUAL
48027: IFTRUE 48031
48029: GO 48058
48031: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48032: LD_ADDR_VAR 0 3
48036: PUSH
48037: LD_EXP 133
48041: PPUSH
48042: LD_VAR 0 1
48046: PPUSH
48047: CALL_OW 321
48051: PUSH
48052: LD_INT 2
48054: EQUAL
48055: ST_TO_ADDR
48056: GO 48158
48058: LD_INT 17
48060: DOUBLE
48061: EQUAL
48062: IFTRUE 48066
48064: GO 48091
48066: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48067: LD_ADDR_VAR 0 3
48071: PUSH
48072: LD_INT 39
48074: PPUSH
48075: LD_VAR 0 1
48079: PPUSH
48080: CALL_OW 321
48084: PUSH
48085: LD_INT 2
48087: EQUAL
48088: ST_TO_ADDR
48089: GO 48158
48091: LD_INT 18
48093: DOUBLE
48094: EQUAL
48095: IFTRUE 48099
48097: GO 48124
48099: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48100: LD_ADDR_VAR 0 3
48104: PUSH
48105: LD_INT 40
48107: PPUSH
48108: LD_VAR 0 1
48112: PPUSH
48113: CALL_OW 321
48117: PUSH
48118: LD_INT 2
48120: EQUAL
48121: ST_TO_ADDR
48122: GO 48158
48124: LD_INT 27
48126: DOUBLE
48127: EQUAL
48128: IFTRUE 48132
48130: GO 48157
48132: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48133: LD_ADDR_VAR 0 3
48137: PUSH
48138: LD_INT 35
48140: PPUSH
48141: LD_VAR 0 1
48145: PPUSH
48146: CALL_OW 321
48150: PUSH
48151: LD_INT 2
48153: EQUAL
48154: ST_TO_ADDR
48155: GO 48158
48157: POP
// end ;
48158: LD_VAR 0 3
48162: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48163: LD_INT 0
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
// result := false ;
48176: LD_ADDR_VAR 0 6
48180: PUSH
48181: LD_INT 0
48183: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48184: LD_VAR 0 1
48188: NOT
48189: PUSH
48190: LD_VAR 0 1
48194: PPUSH
48195: CALL_OW 266
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: IN
48210: NOT
48211: OR
48212: PUSH
48213: LD_VAR 0 2
48217: NOT
48218: OR
48219: PUSH
48220: LD_VAR 0 5
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: LD_INT 4
48239: PUSH
48240: LD_INT 5
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: IN
48251: NOT
48252: OR
48253: PUSH
48254: LD_VAR 0 3
48258: PPUSH
48259: LD_VAR 0 4
48263: PPUSH
48264: CALL_OW 488
48268: NOT
48269: OR
48270: IFFALSE 48274
// exit ;
48272: GO 49010
// side := GetSide ( depot ) ;
48274: LD_ADDR_VAR 0 9
48278: PUSH
48279: LD_VAR 0 1
48283: PPUSH
48284: CALL_OW 255
48288: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48289: LD_VAR 0 9
48293: PPUSH
48294: LD_VAR 0 2
48298: PPUSH
48299: CALL 47783 0 2
48303: NOT
48304: IFFALSE 48308
// exit ;
48306: GO 49010
// pom := GetBase ( depot ) ;
48308: LD_ADDR_VAR 0 10
48312: PUSH
48313: LD_VAR 0 1
48317: PPUSH
48318: CALL_OW 274
48322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48323: LD_ADDR_VAR 0 11
48327: PUSH
48328: LD_VAR 0 2
48332: PPUSH
48333: LD_VAR 0 1
48337: PPUSH
48338: CALL_OW 248
48342: PPUSH
48343: CALL_OW 450
48347: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48348: LD_VAR 0 10
48352: PPUSH
48353: LD_INT 1
48355: PPUSH
48356: CALL_OW 275
48360: PUSH
48361: LD_VAR 0 11
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: GREATEREQUAL
48370: PUSH
48371: LD_VAR 0 10
48375: PPUSH
48376: LD_INT 2
48378: PPUSH
48379: CALL_OW 275
48383: PUSH
48384: LD_VAR 0 11
48388: PUSH
48389: LD_INT 2
48391: ARRAY
48392: GREATEREQUAL
48393: AND
48394: PUSH
48395: LD_VAR 0 10
48399: PPUSH
48400: LD_INT 3
48402: PPUSH
48403: CALL_OW 275
48407: PUSH
48408: LD_VAR 0 11
48412: PUSH
48413: LD_INT 3
48415: ARRAY
48416: GREATEREQUAL
48417: AND
48418: NOT
48419: IFFALSE 48423
// exit ;
48421: GO 49010
// if GetBType ( depot ) = b_depot then
48423: LD_VAR 0 1
48427: PPUSH
48428: CALL_OW 266
48432: PUSH
48433: LD_INT 0
48435: EQUAL
48436: IFFALSE 48448
// dist := 28 else
48438: LD_ADDR_VAR 0 14
48442: PUSH
48443: LD_INT 28
48445: ST_TO_ADDR
48446: GO 48456
// dist := 36 ;
48448: LD_ADDR_VAR 0 14
48452: PUSH
48453: LD_INT 36
48455: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48456: LD_VAR 0 1
48460: PPUSH
48461: LD_VAR 0 3
48465: PPUSH
48466: LD_VAR 0 4
48470: PPUSH
48471: CALL_OW 297
48475: PUSH
48476: LD_VAR 0 14
48480: GREATER
48481: IFFALSE 48485
// exit ;
48483: GO 49010
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48485: LD_ADDR_VAR 0 12
48489: PUSH
48490: LD_VAR 0 2
48494: PPUSH
48495: LD_VAR 0 3
48499: PPUSH
48500: LD_VAR 0 4
48504: PPUSH
48505: LD_VAR 0 5
48509: PPUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: CALL_OW 248
48519: PPUSH
48520: LD_INT 0
48522: PPUSH
48523: CALL 49015 0 6
48527: ST_TO_ADDR
// if not hexes then
48528: LD_VAR 0 12
48532: NOT
48533: IFFALSE 48537
// exit ;
48535: GO 49010
// hex := GetHexInfo ( x , y ) ;
48537: LD_ADDR_VAR 0 15
48541: PUSH
48542: LD_VAR 0 3
48546: PPUSH
48547: LD_VAR 0 4
48551: PPUSH
48552: CALL_OW 546
48556: ST_TO_ADDR
// if hex [ 1 ] then
48557: LD_VAR 0 15
48561: PUSH
48562: LD_INT 1
48564: ARRAY
48565: IFFALSE 48569
// exit ;
48567: GO 49010
// height := hex [ 2 ] ;
48569: LD_ADDR_VAR 0 13
48573: PUSH
48574: LD_VAR 0 15
48578: PUSH
48579: LD_INT 2
48581: ARRAY
48582: ST_TO_ADDR
// for i = 1 to hexes do
48583: LD_ADDR_VAR 0 7
48587: PUSH
48588: DOUBLE
48589: LD_INT 1
48591: DEC
48592: ST_TO_ADDR
48593: LD_VAR 0 12
48597: PUSH
48598: FOR_TO
48599: IFFALSE 48929
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48601: LD_VAR 0 12
48605: PUSH
48606: LD_VAR 0 7
48610: ARRAY
48611: PUSH
48612: LD_INT 1
48614: ARRAY
48615: PPUSH
48616: LD_VAR 0 12
48620: PUSH
48621: LD_VAR 0 7
48625: ARRAY
48626: PUSH
48627: LD_INT 2
48629: ARRAY
48630: PPUSH
48631: CALL_OW 488
48635: NOT
48636: PUSH
48637: LD_VAR 0 12
48641: PUSH
48642: LD_VAR 0 7
48646: ARRAY
48647: PUSH
48648: LD_INT 1
48650: ARRAY
48651: PPUSH
48652: LD_VAR 0 12
48656: PUSH
48657: LD_VAR 0 7
48661: ARRAY
48662: PUSH
48663: LD_INT 2
48665: ARRAY
48666: PPUSH
48667: CALL_OW 428
48671: PUSH
48672: LD_INT 0
48674: GREATER
48675: OR
48676: PUSH
48677: LD_VAR 0 12
48681: PUSH
48682: LD_VAR 0 7
48686: ARRAY
48687: PUSH
48688: LD_INT 1
48690: ARRAY
48691: PPUSH
48692: LD_VAR 0 12
48696: PUSH
48697: LD_VAR 0 7
48701: ARRAY
48702: PUSH
48703: LD_INT 2
48705: ARRAY
48706: PPUSH
48707: CALL_OW 351
48711: OR
48712: IFFALSE 48718
// exit ;
48714: POP
48715: POP
48716: GO 49010
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48718: LD_ADDR_VAR 0 8
48722: PUSH
48723: LD_VAR 0 12
48727: PUSH
48728: LD_VAR 0 7
48732: ARRAY
48733: PUSH
48734: LD_INT 1
48736: ARRAY
48737: PPUSH
48738: LD_VAR 0 12
48742: PUSH
48743: LD_VAR 0 7
48747: ARRAY
48748: PUSH
48749: LD_INT 2
48751: ARRAY
48752: PPUSH
48753: CALL_OW 546
48757: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48758: LD_VAR 0 8
48762: PUSH
48763: LD_INT 1
48765: ARRAY
48766: PUSH
48767: LD_VAR 0 8
48771: PUSH
48772: LD_INT 2
48774: ARRAY
48775: PUSH
48776: LD_VAR 0 13
48780: PUSH
48781: LD_INT 2
48783: PLUS
48784: GREATER
48785: OR
48786: PUSH
48787: LD_VAR 0 8
48791: PUSH
48792: LD_INT 2
48794: ARRAY
48795: PUSH
48796: LD_VAR 0 13
48800: PUSH
48801: LD_INT 2
48803: MINUS
48804: LESS
48805: OR
48806: PUSH
48807: LD_VAR 0 8
48811: PUSH
48812: LD_INT 3
48814: ARRAY
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 8
48821: PUSH
48822: LD_INT 9
48824: PUSH
48825: LD_INT 10
48827: PUSH
48828: LD_INT 11
48830: PUSH
48831: LD_INT 12
48833: PUSH
48834: LD_INT 13
48836: PUSH
48837: LD_INT 16
48839: PUSH
48840: LD_INT 17
48842: PUSH
48843: LD_INT 18
48845: PUSH
48846: LD_INT 19
48848: PUSH
48849: LD_INT 20
48851: PUSH
48852: LD_INT 21
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: IN
48870: NOT
48871: OR
48872: PUSH
48873: LD_VAR 0 8
48877: PUSH
48878: LD_INT 5
48880: ARRAY
48881: NOT
48882: OR
48883: PUSH
48884: LD_VAR 0 8
48888: PUSH
48889: LD_INT 6
48891: ARRAY
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 7
48901: PUSH
48902: LD_INT 9
48904: PUSH
48905: LD_INT 10
48907: PUSH
48908: LD_INT 11
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: IN
48919: NOT
48920: OR
48921: IFFALSE 48927
// exit ;
48923: POP
48924: POP
48925: GO 49010
// end ;
48927: GO 48598
48929: POP
48930: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48931: LD_VAR 0 9
48935: PPUSH
48936: LD_VAR 0 3
48940: PPUSH
48941: LD_VAR 0 4
48945: PPUSH
48946: LD_INT 20
48948: PPUSH
48949: CALL 40956 0 4
48953: PUSH
48954: LD_INT 4
48956: ARRAY
48957: IFFALSE 48961
// exit ;
48959: GO 49010
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48961: LD_VAR 0 2
48965: PUSH
48966: LD_INT 29
48968: PUSH
48969: LD_INT 30
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: IN
48976: PUSH
48977: LD_VAR 0 3
48981: PPUSH
48982: LD_VAR 0 4
48986: PPUSH
48987: LD_VAR 0 9
48991: PPUSH
48992: CALL_OW 440
48996: NOT
48997: AND
48998: IFFALSE 49002
// exit ;
49000: GO 49010
// result := true ;
49002: LD_ADDR_VAR 0 6
49006: PUSH
49007: LD_INT 1
49009: ST_TO_ADDR
// end ;
49010: LD_VAR 0 6
49014: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49015: LD_INT 0
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
// result = [ ] ;
49075: LD_ADDR_VAR 0 7
49079: PUSH
49080: EMPTY
49081: ST_TO_ADDR
// temp_list = [ ] ;
49082: LD_ADDR_VAR 0 9
49086: PUSH
49087: EMPTY
49088: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49089: LD_VAR 0 4
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: LD_INT 4
49108: PUSH
49109: LD_INT 5
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: IN
49120: NOT
49121: PUSH
49122: LD_VAR 0 1
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: IN
49137: PUSH
49138: LD_VAR 0 5
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 3
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: IN
49157: NOT
49158: AND
49159: OR
49160: IFFALSE 49164
// exit ;
49162: GO 67555
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49164: LD_VAR 0 1
49168: PUSH
49169: LD_INT 6
49171: PUSH
49172: LD_INT 7
49174: PUSH
49175: LD_INT 8
49177: PUSH
49178: LD_INT 13
49180: PUSH
49181: LD_INT 12
49183: PUSH
49184: LD_INT 15
49186: PUSH
49187: LD_INT 11
49189: PUSH
49190: LD_INT 14
49192: PUSH
49193: LD_INT 10
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: IN
49207: IFFALSE 49217
// btype = b_lab ;
49209: LD_ADDR_VAR 0 1
49213: PUSH
49214: LD_INT 6
49216: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49217: LD_VAR 0 6
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: IN
49236: NOT
49237: PUSH
49238: LD_VAR 0 1
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: LD_INT 6
49257: PUSH
49258: LD_INT 36
49260: PUSH
49261: LD_INT 4
49263: PUSH
49264: LD_INT 5
49266: PUSH
49267: LD_INT 31
49269: PUSH
49270: LD_INT 32
49272: PUSH
49273: LD_INT 33
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: IN
49289: NOT
49290: PUSH
49291: LD_VAR 0 6
49295: PUSH
49296: LD_INT 1
49298: EQUAL
49299: AND
49300: OR
49301: PUSH
49302: LD_VAR 0 1
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: IN
49317: NOT
49318: PUSH
49319: LD_VAR 0 6
49323: PUSH
49324: LD_INT 2
49326: EQUAL
49327: AND
49328: OR
49329: IFFALSE 49339
// mode = 0 ;
49331: LD_ADDR_VAR 0 6
49335: PUSH
49336: LD_INT 0
49338: ST_TO_ADDR
// case mode of 0 :
49339: LD_VAR 0 6
49343: PUSH
49344: LD_INT 0
49346: DOUBLE
49347: EQUAL
49348: IFTRUE 49352
49350: GO 60805
49352: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49353: LD_ADDR_VAR 0 11
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49546: LD_ADDR_VAR 0 12
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49742: LD_ADDR_VAR 0 13
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49941: LD_ADDR_VAR 0 14
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 3
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50137: LD_ADDR_VAR 0 15
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50330: LD_ADDR_VAR 0 16
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 3
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50523: LD_ADDR_VAR 0 17
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50753: LD_ADDR_VAR 0 18
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50983: LD_ADDR_VAR 0 19
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51213: LD_ADDR_VAR 0 20
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51443: LD_ADDR_VAR 0 21
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51673: LD_ADDR_VAR 0 22
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51903: LD_ADDR_VAR 0 23
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52183: LD_ADDR_VAR 0 24
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52459: LD_ADDR_VAR 0 25
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52733: LD_ADDR_VAR 0 26
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53009: LD_ADDR_VAR 0 27
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53289: LD_ADDR_VAR 0 28
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53571: LD_ADDR_VAR 0 29
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53850: LD_ADDR_VAR 0 30
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54128: LD_ADDR_VAR 0 31
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 3
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 3
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54406: LD_ADDR_VAR 0 32
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54684: LD_ADDR_VAR 0 33
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54963: LD_ADDR_VAR 0 34
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55243: LD_ADDR_VAR 0 35
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55355: LD_ADDR_VAR 0 36
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55467: LD_ADDR_VAR 0 37
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55579: LD_ADDR_VAR 0 38
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55691: LD_ADDR_VAR 0 39
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55803: LD_ADDR_VAR 0 40
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55915: LD_ADDR_VAR 0 41
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 3
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56265: LD_ADDR_VAR 0 42
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56615: LD_ADDR_VAR 0 43
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 3
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56963: LD_ADDR_VAR 0 44
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57313: LD_ADDR_VAR 0 45
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 2
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 3
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57663: LD_ADDR_VAR 0 46
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 3
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 3
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58011: LD_ADDR_VAR 0 47
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58162: LD_ADDR_VAR 0 48
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58309: LD_ADDR_VAR 0 49
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58453: LD_ADDR_VAR 0 50
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58597: LD_ADDR_VAR 0 51
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58744: LD_ADDR_VAR 0 52
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58895: LD_ADDR_VAR 0 53
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59125: LD_ADDR_VAR 0 54
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59355: LD_ADDR_VAR 0 55
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59585: LD_ADDR_VAR 0 56
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59815: LD_ADDR_VAR 0 57
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60045: LD_ADDR_VAR 0 58
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60275: LD_ADDR_VAR 0 59
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60363: LD_ADDR_VAR 0 60
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60451: LD_ADDR_VAR 0 61
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60539: LD_ADDR_VAR 0 62
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60627: LD_ADDR_VAR 0 63
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60715: LD_ADDR_VAR 0 64
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: ST_TO_ADDR
// end ; 1 :
60803: GO 66700
60805: LD_INT 1
60807: DOUBLE
60808: EQUAL
60809: IFTRUE 60813
60811: GO 63436
60813: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60814: LD_ADDR_VAR 0 11
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: LIST
60857: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60858: LD_ADDR_VAR 0 12
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60899: LD_ADDR_VAR 0 13
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: LD_INT 3
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 3
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: LIST
60938: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60939: LD_ADDR_VAR 0 14
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60980: LD_ADDR_VAR 0 15
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: LIST
61023: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61024: LD_ADDR_VAR 0 16
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61070: LD_ADDR_VAR 0 17
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61114: LD_ADDR_VAR 0 18
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 3
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61155: LD_ADDR_VAR 0 19
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: LD_INT 3
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61195: LD_ADDR_VAR 0 20
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61236: LD_ADDR_VAR 0 21
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61280: LD_ADDR_VAR 0 22
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61326: LD_ADDR_VAR 0 23
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: LIST
61369: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61370: LD_ADDR_VAR 0 24
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 4
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61411: LD_ADDR_VAR 0 25
61415: PUSH
61416: LD_INT 3
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 4
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: LD_INT 4
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61451: LD_ADDR_VAR 0 26
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61492: LD_ADDR_VAR 0 27
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61536: LD_ADDR_VAR 0 28
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: NEG
61556: PUSH
61557: LD_INT 4
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 4
61567: NEG
61568: PUSH
61569: LD_INT 3
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61582: LD_ADDR_VAR 0 29
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: LD_INT 2
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 4
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 4
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 5
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 5
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 4
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 6
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 6
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 5
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61737: LD_ADDR_VAR 0 30
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 4
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 4
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 4
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 5
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 5
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 5
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 6
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 6
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61880: LD_ADDR_VAR 0 31
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: PUSH
61928: LD_INT 4
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 4
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 5
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 5
61957: PUSH
61958: LD_INT 5
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 4
61967: PUSH
61968: LD_INT 5
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 6
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 6
61987: PUSH
61988: LD_INT 6
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 5
61997: PUSH
61998: LD_INT 6
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62019: LD_ADDR_VAR 0 32
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 3
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 4
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 4
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 5
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 5
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 6
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 6
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 5
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62162: LD_ADDR_VAR 0 33
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 4
62214: NEG
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 4
62225: NEG
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 4
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 5
62248: NEG
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 5
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 5
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 6
62282: NEG
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 6
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62317: LD_ADDR_VAR 0 34
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 4
62372: NEG
62373: PUSH
62374: LD_INT 3
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 4
62384: NEG
62385: PUSH
62386: LD_INT 4
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 4
62396: NEG
62397: PUSH
62398: LD_INT 5
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 5
62408: NEG
62409: PUSH
62410: LD_INT 4
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 5
62420: NEG
62421: PUSH
62422: LD_INT 5
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 5
62432: NEG
62433: PUSH
62434: LD_INT 6
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 6
62444: NEG
62445: PUSH
62446: LD_INT 5
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 6
62456: NEG
62457: PUSH
62458: LD_INT 6
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62480: LD_ADDR_VAR 0 41
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62524: LD_ADDR_VAR 0 42
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62565: LD_ADDR_VAR 0 43
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: LIST
62604: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62605: LD_ADDR_VAR 0 44
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62646: LD_ADDR_VAR 0 45
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62690: LD_ADDR_VAR 0 46
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62736: LD_ADDR_VAR 0 47
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: LD_INT 3
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62769: LD_ADDR_VAR 0 48
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62800: LD_ADDR_VAR 0 49
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62829: LD_ADDR_VAR 0 50
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62858: LD_ADDR_VAR 0 51
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62889: LD_ADDR_VAR 0 52
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62922: LD_ADDR_VAR 0 53
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62966: LD_ADDR_VAR 0 54
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63007: LD_ADDR_VAR 0 55
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: PUSH
63025: LD_INT 3
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: LD_INT 3
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63047: LD_ADDR_VAR 0 56
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 3
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: LD_INT 3
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63088: LD_ADDR_VAR 0 57
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63132: LD_ADDR_VAR 0 58
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 3
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: LD_INT 3
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: LIST
63177: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63178: LD_ADDR_VAR 0 59
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63222: LD_ADDR_VAR 0 60
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63263: LD_ADDR_VAR 0 61
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63303: LD_ADDR_VAR 0 62
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63344: LD_ADDR_VAR 0 63
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63388: LD_ADDR_VAR 0 64
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: LD_INT 2
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// end ; 2 :
63434: GO 66700
63436: LD_INT 2
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63444
63442: GO 66699
63444: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63445: LD_ADDR_VAR 0 29
63449: PUSH
63450: LD_INT 4
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 4
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 5
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 5
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 4
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 5
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 4
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 4
63575: PUSH
63576: LD_INT 4
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: LD_INT 4
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 3
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 2
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 4
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 2
63625: PUSH
63626: LD_INT 4
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 4
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 3
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: LD_INT 4
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 5
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 5
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: LD_INT 4
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: LD_INT 5
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 3
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: NEG
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 3
63773: NEG
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 4
63784: NEG
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 4
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 4
63807: NEG
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: NEG
63831: PUSH
63832: LD_INT 4
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 4
63842: NEG
63843: PUSH
63844: LD_INT 5
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: LD_INT 4
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 5
63890: NEG
63891: PUSH
63892: LD_INT 4
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 5
63902: NEG
63903: PUSH
63904: LD_INT 5
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 5
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 5
63926: NEG
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63983: LD_ADDR_VAR 0 30
63987: PUSH
63988: LD_INT 4
63990: PUSH
63991: LD_INT 4
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 4
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 5
64010: PUSH
64011: LD_INT 4
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 5
64020: PUSH
64021: LD_INT 5
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 4
64030: PUSH
64031: LD_INT 5
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 5
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: LD_INT 5
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: LD_INT 3
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 4
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 4
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 4
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 4
64173: NEG
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 3
64207: NEG
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 4
64218: NEG
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 5
64229: NEG
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 5
64240: NEG
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 5
64252: NEG
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: LD_INT 3
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 3
64287: NEG
64288: PUSH
64289: LD_INT 4
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 4
64335: NEG
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: NEG
64348: PUSH
64349: LD_INT 4
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: LD_INT 4
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 4
64371: NEG
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 4
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 5
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: LD_INT 4
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 4
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 5
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: LD_INT 3
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: LD_INT 5
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64530: LD_ADDR_VAR 0 31
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 4
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 4
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: LD_INT 5
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 5
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: LD_INT 4
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 5
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: NEG
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 3
64641: NEG
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 3
64675: NEG
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 4
64686: NEG
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 4
64697: NEG
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 4
64709: NEG
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 4
64732: NEG
64733: PUSH
64734: LD_INT 4
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 4
64744: NEG
64745: PUSH
64746: LD_INT 5
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 3
64756: NEG
64757: PUSH
64758: LD_INT 4
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 4
64780: NEG
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 5
64792: NEG
64793: PUSH
64794: LD_INT 4
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 5
64804: NEG
64805: PUSH
64806: LD_INT 5
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 5
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 5
64828: NEG
64829: PUSH
64830: LD_INT 3
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 3
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 4
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 2
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 3
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: LD_INT 4
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: LD_INT 2
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 4
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 4
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 4
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 5
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 5
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 4
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 3
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 3
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 5
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65080: LD_ADDR_VAR 0 32
65084: PUSH
65085: LD_INT 4
65087: NEG
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 4
65132: NEG
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 5
65143: NEG
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 5
65166: NEG
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: LD_INT 2
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 3
65189: NEG
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: NEG
65202: PUSH
65203: LD_INT 4
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 4
65249: NEG
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: LD_INT 4
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: LD_INT 4
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 4
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 4
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 5
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 4
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 3
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 4
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 5
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 2
65376: PUSH
65377: LD_INT 3
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: NEG
65388: PUSH
65389: LD_INT 5
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 3
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 4
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 4
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 4
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 4
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 4
65502: PUSH
65503: LD_INT 3
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 5
65512: PUSH
65513: LD_INT 4
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 5
65522: PUSH
65523: LD_INT 5
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 4
65532: PUSH
65533: LD_INT 5
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: LD_INT 4
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 3
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 5
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: LD_INT 5
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65627: LD_ADDR_VAR 0 33
65631: PUSH
65632: LD_INT 4
65634: NEG
65635: PUSH
65636: LD_INT 4
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 4
65646: NEG
65647: PUSH
65648: LD_INT 5
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: LD_INT 4
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 3
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 4
65682: NEG
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 5
65694: NEG
65695: PUSH
65696: LD_INT 4
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 5
65706: NEG
65707: PUSH
65708: LD_INT 5
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: LD_INT 5
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 5
65730: NEG
65731: PUSH
65732: LD_INT 3
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: LD_INT 3
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 4
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 2
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: LD_INT 3
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: LD_INT 4
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: LD_INT 4
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 4
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 4
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 5
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 5
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 4
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 5
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 4
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 4
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 3
65977: PUSH
65978: LD_INT 4
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: LD_INT 3
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: LD_INT 2
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: LD_INT 4
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 3
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 4
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: LD_INT 5
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 5
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 1
66077: NEG
66078: PUSH
66079: LD_INT 4
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 5
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 3
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66165: LD_ADDR_VAR 0 34
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 4
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: LD_INT 5
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: LD_INT 4
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: LD_INT 4
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 5
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: NEG
66263: PUSH
66264: LD_INT 5
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 3
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 3
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 4
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 4
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 3
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 2
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 4
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 4
66367: PUSH
66368: LD_INT 4
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 4
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 5
66387: PUSH
66388: LD_INT 4
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 5
66397: PUSH
66398: LD_INT 5
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 4
66407: PUSH
66408: LD_INT 5
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 3
66417: PUSH
66418: LD_INT 4
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 3
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 5
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: LD_INT 5
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 2
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 4
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: LD_INT 4
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: LD_INT 3
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: LD_INT 4
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 2
66539: NEG
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 4
66550: NEG
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 4
66561: NEG
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 3
66573: NEG
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 4
66595: NEG
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 5
66606: NEG
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 5
66617: NEG
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 5
66629: NEG
66630: PUSH
66631: LD_INT 2
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: ST_TO_ADDR
// end ; end ;
66697: GO 66700
66699: POP
// case btype of b_depot , b_warehouse :
66700: LD_VAR 0 1
66704: PUSH
66705: LD_INT 0
66707: DOUBLE
66708: EQUAL
66709: IFTRUE 66719
66711: LD_INT 1
66713: DOUBLE
66714: EQUAL
66715: IFTRUE 66719
66717: GO 66920
66719: POP
// case nation of nation_american :
66720: LD_VAR 0 5
66724: PUSH
66725: LD_INT 1
66727: DOUBLE
66728: EQUAL
66729: IFTRUE 66733
66731: GO 66789
66733: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66734: LD_ADDR_VAR 0 9
66738: PUSH
66739: LD_VAR 0 11
66743: PUSH
66744: LD_VAR 0 12
66748: PUSH
66749: LD_VAR 0 13
66753: PUSH
66754: LD_VAR 0 14
66758: PUSH
66759: LD_VAR 0 15
66763: PUSH
66764: LD_VAR 0 16
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: PUSH
66777: LD_VAR 0 4
66781: PUSH
66782: LD_INT 1
66784: PLUS
66785: ARRAY
66786: ST_TO_ADDR
66787: GO 66918
66789: LD_INT 2
66791: DOUBLE
66792: EQUAL
66793: IFTRUE 66797
66795: GO 66853
66797: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66798: LD_ADDR_VAR 0 9
66802: PUSH
66803: LD_VAR 0 17
66807: PUSH
66808: LD_VAR 0 18
66812: PUSH
66813: LD_VAR 0 19
66817: PUSH
66818: LD_VAR 0 20
66822: PUSH
66823: LD_VAR 0 21
66827: PUSH
66828: LD_VAR 0 22
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: LD_VAR 0 4
66845: PUSH
66846: LD_INT 1
66848: PLUS
66849: ARRAY
66850: ST_TO_ADDR
66851: GO 66918
66853: LD_INT 3
66855: DOUBLE
66856: EQUAL
66857: IFTRUE 66861
66859: GO 66917
66861: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66862: LD_ADDR_VAR 0 9
66866: PUSH
66867: LD_VAR 0 23
66871: PUSH
66872: LD_VAR 0 24
66876: PUSH
66877: LD_VAR 0 25
66881: PUSH
66882: LD_VAR 0 26
66886: PUSH
66887: LD_VAR 0 27
66891: PUSH
66892: LD_VAR 0 28
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: PUSH
66905: LD_VAR 0 4
66909: PUSH
66910: LD_INT 1
66912: PLUS
66913: ARRAY
66914: ST_TO_ADDR
66915: GO 66918
66917: POP
66918: GO 67473
66920: LD_INT 2
66922: DOUBLE
66923: EQUAL
66924: IFTRUE 66934
66926: LD_INT 3
66928: DOUBLE
66929: EQUAL
66930: IFTRUE 66934
66932: GO 66990
66934: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66935: LD_ADDR_VAR 0 9
66939: PUSH
66940: LD_VAR 0 29
66944: PUSH
66945: LD_VAR 0 30
66949: PUSH
66950: LD_VAR 0 31
66954: PUSH
66955: LD_VAR 0 32
66959: PUSH
66960: LD_VAR 0 33
66964: PUSH
66965: LD_VAR 0 34
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: PUSH
66978: LD_VAR 0 4
66982: PUSH
66983: LD_INT 1
66985: PLUS
66986: ARRAY
66987: ST_TO_ADDR
66988: GO 67473
66990: LD_INT 16
66992: DOUBLE
66993: EQUAL
66994: IFTRUE 67052
66996: LD_INT 17
66998: DOUBLE
66999: EQUAL
67000: IFTRUE 67052
67002: LD_INT 18
67004: DOUBLE
67005: EQUAL
67006: IFTRUE 67052
67008: LD_INT 19
67010: DOUBLE
67011: EQUAL
67012: IFTRUE 67052
67014: LD_INT 22
67016: DOUBLE
67017: EQUAL
67018: IFTRUE 67052
67020: LD_INT 20
67022: DOUBLE
67023: EQUAL
67024: IFTRUE 67052
67026: LD_INT 21
67028: DOUBLE
67029: EQUAL
67030: IFTRUE 67052
67032: LD_INT 23
67034: DOUBLE
67035: EQUAL
67036: IFTRUE 67052
67038: LD_INT 24
67040: DOUBLE
67041: EQUAL
67042: IFTRUE 67052
67044: LD_INT 25
67046: DOUBLE
67047: EQUAL
67048: IFTRUE 67052
67050: GO 67108
67052: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67053: LD_ADDR_VAR 0 9
67057: PUSH
67058: LD_VAR 0 35
67062: PUSH
67063: LD_VAR 0 36
67067: PUSH
67068: LD_VAR 0 37
67072: PUSH
67073: LD_VAR 0 38
67077: PUSH
67078: LD_VAR 0 39
67082: PUSH
67083: LD_VAR 0 40
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_VAR 0 4
67100: PUSH
67101: LD_INT 1
67103: PLUS
67104: ARRAY
67105: ST_TO_ADDR
67106: GO 67473
67108: LD_INT 6
67110: DOUBLE
67111: EQUAL
67112: IFTRUE 67164
67114: LD_INT 7
67116: DOUBLE
67117: EQUAL
67118: IFTRUE 67164
67120: LD_INT 8
67122: DOUBLE
67123: EQUAL
67124: IFTRUE 67164
67126: LD_INT 13
67128: DOUBLE
67129: EQUAL
67130: IFTRUE 67164
67132: LD_INT 12
67134: DOUBLE
67135: EQUAL
67136: IFTRUE 67164
67138: LD_INT 15
67140: DOUBLE
67141: EQUAL
67142: IFTRUE 67164
67144: LD_INT 11
67146: DOUBLE
67147: EQUAL
67148: IFTRUE 67164
67150: LD_INT 14
67152: DOUBLE
67153: EQUAL
67154: IFTRUE 67164
67156: LD_INT 10
67158: DOUBLE
67159: EQUAL
67160: IFTRUE 67164
67162: GO 67220
67164: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67165: LD_ADDR_VAR 0 9
67169: PUSH
67170: LD_VAR 0 41
67174: PUSH
67175: LD_VAR 0 42
67179: PUSH
67180: LD_VAR 0 43
67184: PUSH
67185: LD_VAR 0 44
67189: PUSH
67190: LD_VAR 0 45
67194: PUSH
67195: LD_VAR 0 46
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: PUSH
67208: LD_VAR 0 4
67212: PUSH
67213: LD_INT 1
67215: PLUS
67216: ARRAY
67217: ST_TO_ADDR
67218: GO 67473
67220: LD_INT 36
67222: DOUBLE
67223: EQUAL
67224: IFTRUE 67228
67226: GO 67284
67228: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67229: LD_ADDR_VAR 0 9
67233: PUSH
67234: LD_VAR 0 47
67238: PUSH
67239: LD_VAR 0 48
67243: PUSH
67244: LD_VAR 0 49
67248: PUSH
67249: LD_VAR 0 50
67253: PUSH
67254: LD_VAR 0 51
67258: PUSH
67259: LD_VAR 0 52
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: PUSH
67272: LD_VAR 0 4
67276: PUSH
67277: LD_INT 1
67279: PLUS
67280: ARRAY
67281: ST_TO_ADDR
67282: GO 67473
67284: LD_INT 4
67286: DOUBLE
67287: EQUAL
67288: IFTRUE 67310
67290: LD_INT 5
67292: DOUBLE
67293: EQUAL
67294: IFTRUE 67310
67296: LD_INT 34
67298: DOUBLE
67299: EQUAL
67300: IFTRUE 67310
67302: LD_INT 37
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67310
67308: GO 67366
67310: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67311: LD_ADDR_VAR 0 9
67315: PUSH
67316: LD_VAR 0 53
67320: PUSH
67321: LD_VAR 0 54
67325: PUSH
67326: LD_VAR 0 55
67330: PUSH
67331: LD_VAR 0 56
67335: PUSH
67336: LD_VAR 0 57
67340: PUSH
67341: LD_VAR 0 58
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: PUSH
67354: LD_VAR 0 4
67358: PUSH
67359: LD_INT 1
67361: PLUS
67362: ARRAY
67363: ST_TO_ADDR
67364: GO 67473
67366: LD_INT 31
67368: DOUBLE
67369: EQUAL
67370: IFTRUE 67416
67372: LD_INT 32
67374: DOUBLE
67375: EQUAL
67376: IFTRUE 67416
67378: LD_INT 33
67380: DOUBLE
67381: EQUAL
67382: IFTRUE 67416
67384: LD_INT 27
67386: DOUBLE
67387: EQUAL
67388: IFTRUE 67416
67390: LD_INT 26
67392: DOUBLE
67393: EQUAL
67394: IFTRUE 67416
67396: LD_INT 28
67398: DOUBLE
67399: EQUAL
67400: IFTRUE 67416
67402: LD_INT 29
67404: DOUBLE
67405: EQUAL
67406: IFTRUE 67416
67408: LD_INT 30
67410: DOUBLE
67411: EQUAL
67412: IFTRUE 67416
67414: GO 67472
67416: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67417: LD_ADDR_VAR 0 9
67421: PUSH
67422: LD_VAR 0 59
67426: PUSH
67427: LD_VAR 0 60
67431: PUSH
67432: LD_VAR 0 61
67436: PUSH
67437: LD_VAR 0 62
67441: PUSH
67442: LD_VAR 0 63
67446: PUSH
67447: LD_VAR 0 64
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: PUSH
67460: LD_VAR 0 4
67464: PUSH
67465: LD_INT 1
67467: PLUS
67468: ARRAY
67469: ST_TO_ADDR
67470: GO 67473
67472: POP
// temp_list2 = [ ] ;
67473: LD_ADDR_VAR 0 10
67477: PUSH
67478: EMPTY
67479: ST_TO_ADDR
// for i in temp_list do
67480: LD_ADDR_VAR 0 8
67484: PUSH
67485: LD_VAR 0 9
67489: PUSH
67490: FOR_IN
67491: IFFALSE 67543
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67493: LD_ADDR_VAR 0 10
67497: PUSH
67498: LD_VAR 0 10
67502: PUSH
67503: LD_VAR 0 8
67507: PUSH
67508: LD_INT 1
67510: ARRAY
67511: PUSH
67512: LD_VAR 0 2
67516: PLUS
67517: PUSH
67518: LD_VAR 0 8
67522: PUSH
67523: LD_INT 2
67525: ARRAY
67526: PUSH
67527: LD_VAR 0 3
67531: PLUS
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: EMPTY
67538: LIST
67539: ADD
67540: ST_TO_ADDR
67541: GO 67490
67543: POP
67544: POP
// result = temp_list2 ;
67545: LD_ADDR_VAR 0 7
67549: PUSH
67550: LD_VAR 0 10
67554: ST_TO_ADDR
// end ;
67555: LD_VAR 0 7
67559: RET
// export function EnemyInRange ( unit , dist ) ; begin
67560: LD_INT 0
67562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67563: LD_ADDR_VAR 0 3
67567: PUSH
67568: LD_VAR 0 1
67572: PPUSH
67573: CALL_OW 255
67577: PPUSH
67578: LD_VAR 0 1
67582: PPUSH
67583: CALL_OW 250
67587: PPUSH
67588: LD_VAR 0 1
67592: PPUSH
67593: CALL_OW 251
67597: PPUSH
67598: LD_VAR 0 2
67602: PPUSH
67603: CALL 40956 0 4
67607: PUSH
67608: LD_INT 4
67610: ARRAY
67611: ST_TO_ADDR
// end ;
67612: LD_VAR 0 3
67616: RET
// export function PlayerSeeMe ( unit ) ; begin
67617: LD_INT 0
67619: PPUSH
// result := See ( your_side , unit ) ;
67620: LD_ADDR_VAR 0 2
67624: PUSH
67625: LD_OWVAR 2
67629: PPUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: CALL_OW 292
67639: ST_TO_ADDR
// end ;
67640: LD_VAR 0 2
67644: RET
// export function ReverseDir ( unit ) ; begin
67645: LD_INT 0
67647: PPUSH
// if not unit then
67648: LD_VAR 0 1
67652: NOT
67653: IFFALSE 67657
// exit ;
67655: GO 67680
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67657: LD_ADDR_VAR 0 2
67661: PUSH
67662: LD_VAR 0 1
67666: PPUSH
67667: CALL_OW 254
67671: PUSH
67672: LD_INT 3
67674: PLUS
67675: PUSH
67676: LD_INT 6
67678: MOD
67679: ST_TO_ADDR
// end ;
67680: LD_VAR 0 2
67684: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67685: LD_INT 0
67687: PPUSH
67688: PPUSH
67689: PPUSH
67690: PPUSH
67691: PPUSH
// if not hexes then
67692: LD_VAR 0 2
67696: NOT
67697: IFFALSE 67701
// exit ;
67699: GO 67849
// dist := 9999 ;
67701: LD_ADDR_VAR 0 5
67705: PUSH
67706: LD_INT 9999
67708: ST_TO_ADDR
// for i = 1 to hexes do
67709: LD_ADDR_VAR 0 4
67713: PUSH
67714: DOUBLE
67715: LD_INT 1
67717: DEC
67718: ST_TO_ADDR
67719: LD_VAR 0 2
67723: PUSH
67724: FOR_TO
67725: IFFALSE 67837
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67727: LD_VAR 0 1
67731: PPUSH
67732: LD_VAR 0 2
67736: PUSH
67737: LD_VAR 0 4
67741: ARRAY
67742: PUSH
67743: LD_INT 1
67745: ARRAY
67746: PPUSH
67747: LD_VAR 0 2
67751: PUSH
67752: LD_VAR 0 4
67756: ARRAY
67757: PUSH
67758: LD_INT 2
67760: ARRAY
67761: PPUSH
67762: CALL_OW 297
67766: PUSH
67767: LD_VAR 0 5
67771: LESS
67772: IFFALSE 67835
// begin hex := hexes [ i ] ;
67774: LD_ADDR_VAR 0 7
67778: PUSH
67779: LD_VAR 0 2
67783: PUSH
67784: LD_VAR 0 4
67788: ARRAY
67789: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67790: LD_ADDR_VAR 0 5
67794: PUSH
67795: LD_VAR 0 1
67799: PPUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_VAR 0 4
67809: ARRAY
67810: PUSH
67811: LD_INT 1
67813: ARRAY
67814: PPUSH
67815: LD_VAR 0 2
67819: PUSH
67820: LD_VAR 0 4
67824: ARRAY
67825: PUSH
67826: LD_INT 2
67828: ARRAY
67829: PPUSH
67830: CALL_OW 297
67834: ST_TO_ADDR
// end ; end ;
67835: GO 67724
67837: POP
67838: POP
// result := hex ;
67839: LD_ADDR_VAR 0 3
67843: PUSH
67844: LD_VAR 0 7
67848: ST_TO_ADDR
// end ;
67849: LD_VAR 0 3
67853: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67854: LD_INT 0
67856: PPUSH
67857: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67858: LD_VAR 0 1
67862: NOT
67863: PUSH
67864: LD_VAR 0 1
67868: PUSH
67869: LD_INT 21
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 23
67881: PUSH
67882: LD_INT 2
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PPUSH
67893: CALL_OW 69
67897: IN
67898: NOT
67899: OR
67900: IFFALSE 67904
// exit ;
67902: GO 67951
// for i = 1 to 3 do
67904: LD_ADDR_VAR 0 3
67908: PUSH
67909: DOUBLE
67910: LD_INT 1
67912: DEC
67913: ST_TO_ADDR
67914: LD_INT 3
67916: PUSH
67917: FOR_TO
67918: IFFALSE 67949
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67920: LD_VAR 0 1
67924: PPUSH
67925: CALL_OW 250
67929: PPUSH
67930: LD_VAR 0 1
67934: PPUSH
67935: CALL_OW 251
67939: PPUSH
67940: LD_INT 1
67942: PPUSH
67943: CALL_OW 453
67947: GO 67917
67949: POP
67950: POP
// end ;
67951: LD_VAR 0 2
67955: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67956: LD_INT 0
67958: PPUSH
67959: PPUSH
67960: PPUSH
67961: PPUSH
67962: PPUSH
67963: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67964: LD_VAR 0 1
67968: NOT
67969: PUSH
67970: LD_VAR 0 2
67974: NOT
67975: OR
67976: PUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 314
67986: OR
67987: IFFALSE 67991
// exit ;
67989: GO 68432
// x := GetX ( enemy_unit ) ;
67991: LD_ADDR_VAR 0 7
67995: PUSH
67996: LD_VAR 0 2
68000: PPUSH
68001: CALL_OW 250
68005: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68006: LD_ADDR_VAR 0 8
68010: PUSH
68011: LD_VAR 0 2
68015: PPUSH
68016: CALL_OW 251
68020: ST_TO_ADDR
// if not x or not y then
68021: LD_VAR 0 7
68025: NOT
68026: PUSH
68027: LD_VAR 0 8
68031: NOT
68032: OR
68033: IFFALSE 68037
// exit ;
68035: GO 68432
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68037: LD_ADDR_VAR 0 6
68041: PUSH
68042: LD_VAR 0 7
68046: PPUSH
68047: LD_INT 0
68049: PPUSH
68050: LD_INT 4
68052: PPUSH
68053: CALL_OW 272
68057: PUSH
68058: LD_VAR 0 8
68062: PPUSH
68063: LD_INT 0
68065: PPUSH
68066: LD_INT 4
68068: PPUSH
68069: CALL_OW 273
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_VAR 0 7
68082: PPUSH
68083: LD_INT 1
68085: PPUSH
68086: LD_INT 4
68088: PPUSH
68089: CALL_OW 272
68093: PUSH
68094: LD_VAR 0 8
68098: PPUSH
68099: LD_INT 1
68101: PPUSH
68102: LD_INT 4
68104: PPUSH
68105: CALL_OW 273
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_VAR 0 7
68118: PPUSH
68119: LD_INT 2
68121: PPUSH
68122: LD_INT 4
68124: PPUSH
68125: CALL_OW 272
68129: PUSH
68130: LD_VAR 0 8
68134: PPUSH
68135: LD_INT 2
68137: PPUSH
68138: LD_INT 4
68140: PPUSH
68141: CALL_OW 273
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_VAR 0 7
68154: PPUSH
68155: LD_INT 3
68157: PPUSH
68158: LD_INT 4
68160: PPUSH
68161: CALL_OW 272
68165: PUSH
68166: LD_VAR 0 8
68170: PPUSH
68171: LD_INT 3
68173: PPUSH
68174: LD_INT 4
68176: PPUSH
68177: CALL_OW 273
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_VAR 0 7
68190: PPUSH
68191: LD_INT 4
68193: PPUSH
68194: LD_INT 4
68196: PPUSH
68197: CALL_OW 272
68201: PUSH
68202: LD_VAR 0 8
68206: PPUSH
68207: LD_INT 4
68209: PPUSH
68210: LD_INT 4
68212: PPUSH
68213: CALL_OW 273
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_VAR 0 7
68226: PPUSH
68227: LD_INT 5
68229: PPUSH
68230: LD_INT 4
68232: PPUSH
68233: CALL_OW 272
68237: PUSH
68238: LD_VAR 0 8
68242: PPUSH
68243: LD_INT 5
68245: PPUSH
68246: LD_INT 4
68248: PPUSH
68249: CALL_OW 273
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: ST_TO_ADDR
// for i = tmp downto 1 do
68266: LD_ADDR_VAR 0 4
68270: PUSH
68271: DOUBLE
68272: LD_VAR 0 6
68276: INC
68277: ST_TO_ADDR
68278: LD_INT 1
68280: PUSH
68281: FOR_DOWNTO
68282: IFFALSE 68383
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68284: LD_VAR 0 6
68288: PUSH
68289: LD_VAR 0 4
68293: ARRAY
68294: PUSH
68295: LD_INT 1
68297: ARRAY
68298: PPUSH
68299: LD_VAR 0 6
68303: PUSH
68304: LD_VAR 0 4
68308: ARRAY
68309: PUSH
68310: LD_INT 2
68312: ARRAY
68313: PPUSH
68314: CALL_OW 488
68318: NOT
68319: PUSH
68320: LD_VAR 0 6
68324: PUSH
68325: LD_VAR 0 4
68329: ARRAY
68330: PUSH
68331: LD_INT 1
68333: ARRAY
68334: PPUSH
68335: LD_VAR 0 6
68339: PUSH
68340: LD_VAR 0 4
68344: ARRAY
68345: PUSH
68346: LD_INT 2
68348: ARRAY
68349: PPUSH
68350: CALL_OW 428
68354: PUSH
68355: LD_INT 0
68357: NONEQUAL
68358: OR
68359: IFFALSE 68381
// tmp := Delete ( tmp , i ) ;
68361: LD_ADDR_VAR 0 6
68365: PUSH
68366: LD_VAR 0 6
68370: PPUSH
68371: LD_VAR 0 4
68375: PPUSH
68376: CALL_OW 3
68380: ST_TO_ADDR
68381: GO 68281
68383: POP
68384: POP
// j := GetClosestHex ( unit , tmp ) ;
68385: LD_ADDR_VAR 0 5
68389: PUSH
68390: LD_VAR 0 1
68394: PPUSH
68395: LD_VAR 0 6
68399: PPUSH
68400: CALL 67685 0 2
68404: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68405: LD_VAR 0 1
68409: PPUSH
68410: LD_VAR 0 5
68414: PUSH
68415: LD_INT 1
68417: ARRAY
68418: PPUSH
68419: LD_VAR 0 5
68423: PUSH
68424: LD_INT 2
68426: ARRAY
68427: PPUSH
68428: CALL_OW 111
// end ;
68432: LD_VAR 0 3
68436: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68437: LD_INT 0
68439: PPUSH
68440: PPUSH
68441: PPUSH
// uc_side = 0 ;
68442: LD_ADDR_OWVAR 20
68446: PUSH
68447: LD_INT 0
68449: ST_TO_ADDR
// uc_nation = 0 ;
68450: LD_ADDR_OWVAR 21
68454: PUSH
68455: LD_INT 0
68457: ST_TO_ADDR
// InitHc_All ( ) ;
68458: CALL_OW 584
// InitVc ;
68462: CALL_OW 20
// if mastodonts then
68466: LD_VAR 0 6
68470: IFFALSE 68537
// for i = 1 to mastodonts do
68472: LD_ADDR_VAR 0 11
68476: PUSH
68477: DOUBLE
68478: LD_INT 1
68480: DEC
68481: ST_TO_ADDR
68482: LD_VAR 0 6
68486: PUSH
68487: FOR_TO
68488: IFFALSE 68535
// begin vc_chassis := 31 ;
68490: LD_ADDR_OWVAR 37
68494: PUSH
68495: LD_INT 31
68497: ST_TO_ADDR
// vc_control := control_rider ;
68498: LD_ADDR_OWVAR 38
68502: PUSH
68503: LD_INT 4
68505: ST_TO_ADDR
// animal := CreateVehicle ;
68506: LD_ADDR_VAR 0 12
68510: PUSH
68511: CALL_OW 45
68515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68516: LD_VAR 0 12
68520: PPUSH
68521: LD_VAR 0 8
68525: PPUSH
68526: LD_INT 0
68528: PPUSH
68529: CALL 70725 0 3
// end ;
68533: GO 68487
68535: POP
68536: POP
// if horses then
68537: LD_VAR 0 5
68541: IFFALSE 68608
// for i = 1 to horses do
68543: LD_ADDR_VAR 0 11
68547: PUSH
68548: DOUBLE
68549: LD_INT 1
68551: DEC
68552: ST_TO_ADDR
68553: LD_VAR 0 5
68557: PUSH
68558: FOR_TO
68559: IFFALSE 68606
// begin hc_class := 21 ;
68561: LD_ADDR_OWVAR 28
68565: PUSH
68566: LD_INT 21
68568: ST_TO_ADDR
// hc_gallery :=  ;
68569: LD_ADDR_OWVAR 33
68573: PUSH
68574: LD_STRING 
68576: ST_TO_ADDR
// animal := CreateHuman ;
68577: LD_ADDR_VAR 0 12
68581: PUSH
68582: CALL_OW 44
68586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68587: LD_VAR 0 12
68591: PPUSH
68592: LD_VAR 0 8
68596: PPUSH
68597: LD_INT 0
68599: PPUSH
68600: CALL 70725 0 3
// end ;
68604: GO 68558
68606: POP
68607: POP
// if birds then
68608: LD_VAR 0 1
68612: IFFALSE 68679
// for i = 1 to birds do
68614: LD_ADDR_VAR 0 11
68618: PUSH
68619: DOUBLE
68620: LD_INT 1
68622: DEC
68623: ST_TO_ADDR
68624: LD_VAR 0 1
68628: PUSH
68629: FOR_TO
68630: IFFALSE 68677
// begin hc_class = 18 ;
68632: LD_ADDR_OWVAR 28
68636: PUSH
68637: LD_INT 18
68639: ST_TO_ADDR
// hc_gallery =  ;
68640: LD_ADDR_OWVAR 33
68644: PUSH
68645: LD_STRING 
68647: ST_TO_ADDR
// animal := CreateHuman ;
68648: LD_ADDR_VAR 0 12
68652: PUSH
68653: CALL_OW 44
68657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68658: LD_VAR 0 12
68662: PPUSH
68663: LD_VAR 0 8
68667: PPUSH
68668: LD_INT 0
68670: PPUSH
68671: CALL 70725 0 3
// end ;
68675: GO 68629
68677: POP
68678: POP
// if tigers then
68679: LD_VAR 0 2
68683: IFFALSE 68767
// for i = 1 to tigers do
68685: LD_ADDR_VAR 0 11
68689: PUSH
68690: DOUBLE
68691: LD_INT 1
68693: DEC
68694: ST_TO_ADDR
68695: LD_VAR 0 2
68699: PUSH
68700: FOR_TO
68701: IFFALSE 68765
// begin hc_class = class_tiger ;
68703: LD_ADDR_OWVAR 28
68707: PUSH
68708: LD_INT 14
68710: ST_TO_ADDR
// hc_gallery =  ;
68711: LD_ADDR_OWVAR 33
68715: PUSH
68716: LD_STRING 
68718: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68719: LD_ADDR_OWVAR 35
68723: PUSH
68724: LD_INT 7
68726: NEG
68727: PPUSH
68728: LD_INT 7
68730: PPUSH
68731: CALL_OW 12
68735: ST_TO_ADDR
// animal := CreateHuman ;
68736: LD_ADDR_VAR 0 12
68740: PUSH
68741: CALL_OW 44
68745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68746: LD_VAR 0 12
68750: PPUSH
68751: LD_VAR 0 8
68755: PPUSH
68756: LD_INT 0
68758: PPUSH
68759: CALL 70725 0 3
// end ;
68763: GO 68700
68765: POP
68766: POP
// if apemans then
68767: LD_VAR 0 3
68771: IFFALSE 68894
// for i = 1 to apemans do
68773: LD_ADDR_VAR 0 11
68777: PUSH
68778: DOUBLE
68779: LD_INT 1
68781: DEC
68782: ST_TO_ADDR
68783: LD_VAR 0 3
68787: PUSH
68788: FOR_TO
68789: IFFALSE 68892
// begin hc_class = class_apeman ;
68791: LD_ADDR_OWVAR 28
68795: PUSH
68796: LD_INT 12
68798: ST_TO_ADDR
// hc_gallery =  ;
68799: LD_ADDR_OWVAR 33
68803: PUSH
68804: LD_STRING 
68806: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68807: LD_ADDR_OWVAR 35
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PPUSH
68816: LD_INT 2
68818: PPUSH
68819: CALL_OW 12
68823: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68824: LD_ADDR_OWVAR 31
68828: PUSH
68829: LD_INT 1
68831: PPUSH
68832: LD_INT 3
68834: PPUSH
68835: CALL_OW 12
68839: PUSH
68840: LD_INT 1
68842: PPUSH
68843: LD_INT 3
68845: PPUSH
68846: CALL_OW 12
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// animal := CreateHuman ;
68863: LD_ADDR_VAR 0 12
68867: PUSH
68868: CALL_OW 44
68872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68873: LD_VAR 0 12
68877: PPUSH
68878: LD_VAR 0 8
68882: PPUSH
68883: LD_INT 0
68885: PPUSH
68886: CALL 70725 0 3
// end ;
68890: GO 68788
68892: POP
68893: POP
// if enchidnas then
68894: LD_VAR 0 4
68898: IFFALSE 68965
// for i = 1 to enchidnas do
68900: LD_ADDR_VAR 0 11
68904: PUSH
68905: DOUBLE
68906: LD_INT 1
68908: DEC
68909: ST_TO_ADDR
68910: LD_VAR 0 4
68914: PUSH
68915: FOR_TO
68916: IFFALSE 68963
// begin hc_class = 13 ;
68918: LD_ADDR_OWVAR 28
68922: PUSH
68923: LD_INT 13
68925: ST_TO_ADDR
// hc_gallery =  ;
68926: LD_ADDR_OWVAR 33
68930: PUSH
68931: LD_STRING 
68933: ST_TO_ADDR
// animal := CreateHuman ;
68934: LD_ADDR_VAR 0 12
68938: PUSH
68939: CALL_OW 44
68943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68944: LD_VAR 0 12
68948: PPUSH
68949: LD_VAR 0 8
68953: PPUSH
68954: LD_INT 0
68956: PPUSH
68957: CALL 70725 0 3
// end ;
68961: GO 68915
68963: POP
68964: POP
// if fishes then
68965: LD_VAR 0 7
68969: IFFALSE 69036
// for i = 1 to fishes do
68971: LD_ADDR_VAR 0 11
68975: PUSH
68976: DOUBLE
68977: LD_INT 1
68979: DEC
68980: ST_TO_ADDR
68981: LD_VAR 0 7
68985: PUSH
68986: FOR_TO
68987: IFFALSE 69034
// begin hc_class = 20 ;
68989: LD_ADDR_OWVAR 28
68993: PUSH
68994: LD_INT 20
68996: ST_TO_ADDR
// hc_gallery =  ;
68997: LD_ADDR_OWVAR 33
69001: PUSH
69002: LD_STRING 
69004: ST_TO_ADDR
// animal := CreateHuman ;
69005: LD_ADDR_VAR 0 12
69009: PUSH
69010: CALL_OW 44
69014: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69015: LD_VAR 0 12
69019: PPUSH
69020: LD_VAR 0 9
69024: PPUSH
69025: LD_INT 0
69027: PPUSH
69028: CALL 70725 0 3
// end ;
69032: GO 68986
69034: POP
69035: POP
// end ;
69036: LD_VAR 0 10
69040: RET
// export function WantHeal ( sci , unit ) ; begin
69041: LD_INT 0
69043: PPUSH
// if GetTaskList ( sci ) > 0 then
69044: LD_VAR 0 1
69048: PPUSH
69049: CALL_OW 437
69053: PUSH
69054: LD_INT 0
69056: GREATER
69057: IFFALSE 69127
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69059: LD_VAR 0 1
69063: PPUSH
69064: CALL_OW 437
69068: PUSH
69069: LD_INT 1
69071: ARRAY
69072: PUSH
69073: LD_INT 1
69075: ARRAY
69076: PUSH
69077: LD_STRING l
69079: EQUAL
69080: PUSH
69081: LD_VAR 0 1
69085: PPUSH
69086: CALL_OW 437
69090: PUSH
69091: LD_INT 1
69093: ARRAY
69094: PUSH
69095: LD_INT 4
69097: ARRAY
69098: PUSH
69099: LD_VAR 0 2
69103: EQUAL
69104: AND
69105: IFFALSE 69117
// result := true else
69107: LD_ADDR_VAR 0 3
69111: PUSH
69112: LD_INT 1
69114: ST_TO_ADDR
69115: GO 69125
// result := false ;
69117: LD_ADDR_VAR 0 3
69121: PUSH
69122: LD_INT 0
69124: ST_TO_ADDR
// end else
69125: GO 69135
// result := false ;
69127: LD_ADDR_VAR 0 3
69131: PUSH
69132: LD_INT 0
69134: ST_TO_ADDR
// end ;
69135: LD_VAR 0 3
69139: RET
// export function HealTarget ( sci ) ; begin
69140: LD_INT 0
69142: PPUSH
// if not sci then
69143: LD_VAR 0 1
69147: NOT
69148: IFFALSE 69152
// exit ;
69150: GO 69217
// result := 0 ;
69152: LD_ADDR_VAR 0 2
69156: PUSH
69157: LD_INT 0
69159: ST_TO_ADDR
// if GetTaskList ( sci ) then
69160: LD_VAR 0 1
69164: PPUSH
69165: CALL_OW 437
69169: IFFALSE 69217
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69171: LD_VAR 0 1
69175: PPUSH
69176: CALL_OW 437
69180: PUSH
69181: LD_INT 1
69183: ARRAY
69184: PUSH
69185: LD_INT 1
69187: ARRAY
69188: PUSH
69189: LD_STRING l
69191: EQUAL
69192: IFFALSE 69217
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69194: LD_ADDR_VAR 0 2
69198: PUSH
69199: LD_VAR 0 1
69203: PPUSH
69204: CALL_OW 437
69208: PUSH
69209: LD_INT 1
69211: ARRAY
69212: PUSH
69213: LD_INT 4
69215: ARRAY
69216: ST_TO_ADDR
// end ;
69217: LD_VAR 0 2
69221: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69222: LD_INT 0
69224: PPUSH
69225: PPUSH
69226: PPUSH
69227: PPUSH
// if not base_units then
69228: LD_VAR 0 1
69232: NOT
69233: IFFALSE 69237
// exit ;
69235: GO 69324
// result := false ;
69237: LD_ADDR_VAR 0 2
69241: PUSH
69242: LD_INT 0
69244: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69245: LD_ADDR_VAR 0 5
69249: PUSH
69250: LD_VAR 0 1
69254: PPUSH
69255: LD_INT 21
69257: PUSH
69258: LD_INT 3
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PPUSH
69265: CALL_OW 72
69269: ST_TO_ADDR
// if not tmp then
69270: LD_VAR 0 5
69274: NOT
69275: IFFALSE 69279
// exit ;
69277: GO 69324
// for i in tmp do
69279: LD_ADDR_VAR 0 3
69283: PUSH
69284: LD_VAR 0 5
69288: PUSH
69289: FOR_IN
69290: IFFALSE 69322
// begin result := EnemyInRange ( i , 22 ) ;
69292: LD_ADDR_VAR 0 2
69296: PUSH
69297: LD_VAR 0 3
69301: PPUSH
69302: LD_INT 22
69304: PPUSH
69305: CALL 67560 0 2
69309: ST_TO_ADDR
// if result then
69310: LD_VAR 0 2
69314: IFFALSE 69320
// exit ;
69316: POP
69317: POP
69318: GO 69324
// end ;
69320: GO 69289
69322: POP
69323: POP
// end ;
69324: LD_VAR 0 2
69328: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69329: LD_INT 0
69331: PPUSH
69332: PPUSH
// if not units then
69333: LD_VAR 0 1
69337: NOT
69338: IFFALSE 69342
// exit ;
69340: GO 69412
// result := [ ] ;
69342: LD_ADDR_VAR 0 3
69346: PUSH
69347: EMPTY
69348: ST_TO_ADDR
// for i in units do
69349: LD_ADDR_VAR 0 4
69353: PUSH
69354: LD_VAR 0 1
69358: PUSH
69359: FOR_IN
69360: IFFALSE 69410
// if GetTag ( i ) = tag then
69362: LD_VAR 0 4
69366: PPUSH
69367: CALL_OW 110
69371: PUSH
69372: LD_VAR 0 2
69376: EQUAL
69377: IFFALSE 69408
// result := Replace ( result , result + 1 , i ) ;
69379: LD_ADDR_VAR 0 3
69383: PUSH
69384: LD_VAR 0 3
69388: PPUSH
69389: LD_VAR 0 3
69393: PUSH
69394: LD_INT 1
69396: PLUS
69397: PPUSH
69398: LD_VAR 0 4
69402: PPUSH
69403: CALL_OW 1
69407: ST_TO_ADDR
69408: GO 69359
69410: POP
69411: POP
// end ;
69412: LD_VAR 0 3
69416: RET
// export function IsDriver ( un ) ; begin
69417: LD_INT 0
69419: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69420: LD_ADDR_VAR 0 2
69424: PUSH
69425: LD_VAR 0 1
69429: PUSH
69430: LD_INT 55
69432: PUSH
69433: EMPTY
69434: LIST
69435: PPUSH
69436: CALL_OW 69
69440: IN
69441: ST_TO_ADDR
// end ;
69442: LD_VAR 0 2
69446: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69447: LD_INT 0
69449: PPUSH
69450: PPUSH
// list := [ ] ;
69451: LD_ADDR_VAR 0 5
69455: PUSH
69456: EMPTY
69457: ST_TO_ADDR
// case d of 0 :
69458: LD_VAR 0 3
69462: PUSH
69463: LD_INT 0
69465: DOUBLE
69466: EQUAL
69467: IFTRUE 69471
69469: GO 69604
69471: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69472: LD_ADDR_VAR 0 5
69476: PUSH
69477: LD_VAR 0 1
69481: PUSH
69482: LD_INT 4
69484: MINUS
69485: PUSH
69486: LD_VAR 0 2
69490: PUSH
69491: LD_INT 4
69493: MINUS
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: LIST
69502: PUSH
69503: LD_VAR 0 1
69507: PUSH
69508: LD_INT 3
69510: MINUS
69511: PUSH
69512: LD_VAR 0 2
69516: PUSH
69517: LD_INT 1
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: PUSH
69525: LD_VAR 0 1
69529: PUSH
69530: LD_INT 4
69532: PLUS
69533: PUSH
69534: LD_VAR 0 2
69538: PUSH
69539: LD_INT 4
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: LIST
69546: PUSH
69547: LD_VAR 0 1
69551: PUSH
69552: LD_INT 3
69554: PLUS
69555: PUSH
69556: LD_VAR 0 2
69560: PUSH
69561: LD_INT 3
69563: PLUS
69564: PUSH
69565: LD_INT 5
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: LIST
69572: PUSH
69573: LD_VAR 0 1
69577: PUSH
69578: LD_VAR 0 2
69582: PUSH
69583: LD_INT 4
69585: PLUS
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// end ; 1 :
69602: GO 70302
69604: LD_INT 1
69606: DOUBLE
69607: EQUAL
69608: IFTRUE 69612
69610: GO 69745
69612: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69613: LD_ADDR_VAR 0 5
69617: PUSH
69618: LD_VAR 0 1
69622: PUSH
69623: LD_VAR 0 2
69627: PUSH
69628: LD_INT 4
69630: MINUS
69631: PUSH
69632: LD_INT 3
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: PUSH
69640: LD_VAR 0 1
69644: PUSH
69645: LD_INT 3
69647: MINUS
69648: PUSH
69649: LD_VAR 0 2
69653: PUSH
69654: LD_INT 3
69656: MINUS
69657: PUSH
69658: LD_INT 2
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: PUSH
69666: LD_VAR 0 1
69670: PUSH
69671: LD_INT 4
69673: MINUS
69674: PUSH
69675: LD_VAR 0 2
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: PUSH
69688: LD_VAR 0 1
69692: PUSH
69693: LD_VAR 0 2
69697: PUSH
69698: LD_INT 3
69700: PLUS
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: PUSH
69710: LD_VAR 0 1
69714: PUSH
69715: LD_INT 4
69717: PLUS
69718: PUSH
69719: LD_VAR 0 2
69723: PUSH
69724: LD_INT 4
69726: PLUS
69727: PUSH
69728: LD_INT 5
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: LIST
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: ST_TO_ADDR
// end ; 2 :
69743: GO 70302
69745: LD_INT 2
69747: DOUBLE
69748: EQUAL
69749: IFTRUE 69753
69751: GO 69882
69753: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69754: LD_ADDR_VAR 0 5
69758: PUSH
69759: LD_VAR 0 1
69763: PUSH
69764: LD_VAR 0 2
69768: PUSH
69769: LD_INT 3
69771: MINUS
69772: PUSH
69773: LD_INT 3
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: PUSH
69781: LD_VAR 0 1
69785: PUSH
69786: LD_INT 4
69788: PLUS
69789: PUSH
69790: LD_VAR 0 2
69794: PUSH
69795: LD_INT 4
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: LIST
69802: PUSH
69803: LD_VAR 0 1
69807: PUSH
69808: LD_VAR 0 2
69812: PUSH
69813: LD_INT 4
69815: PLUS
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: PUSH
69825: LD_VAR 0 1
69829: PUSH
69830: LD_INT 3
69832: MINUS
69833: PUSH
69834: LD_VAR 0 2
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: PUSH
69847: LD_VAR 0 1
69851: PUSH
69852: LD_INT 4
69854: MINUS
69855: PUSH
69856: LD_VAR 0 2
69860: PUSH
69861: LD_INT 4
69863: MINUS
69864: PUSH
69865: LD_INT 2
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: ST_TO_ADDR
// end ; 3 :
69880: GO 70302
69882: LD_INT 3
69884: DOUBLE
69885: EQUAL
69886: IFTRUE 69890
69888: GO 70023
69890: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69891: LD_ADDR_VAR 0 5
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_INT 3
69903: PLUS
69904: PUSH
69905: LD_VAR 0 2
69909: PUSH
69910: LD_INT 4
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: PUSH
69918: LD_VAR 0 1
69922: PUSH
69923: LD_INT 4
69925: PLUS
69926: PUSH
69927: LD_VAR 0 2
69931: PUSH
69932: LD_INT 4
69934: PLUS
69935: PUSH
69936: LD_INT 5
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: LIST
69943: PUSH
69944: LD_VAR 0 1
69948: PUSH
69949: LD_INT 4
69951: MINUS
69952: PUSH
69953: LD_VAR 0 2
69957: PUSH
69958: LD_INT 1
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: PUSH
69966: LD_VAR 0 1
69970: PUSH
69971: LD_VAR 0 2
69975: PUSH
69976: LD_INT 4
69978: MINUS
69979: PUSH
69980: LD_INT 3
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: PUSH
69988: LD_VAR 0 1
69992: PUSH
69993: LD_INT 3
69995: MINUS
69996: PUSH
69997: LD_VAR 0 2
70001: PUSH
70002: LD_INT 3
70004: MINUS
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: LIST
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: ST_TO_ADDR
// end ; 4 :
70021: GO 70302
70023: LD_INT 4
70025: DOUBLE
70026: EQUAL
70027: IFTRUE 70031
70029: GO 70164
70031: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70032: LD_ADDR_VAR 0 5
70036: PUSH
70037: LD_VAR 0 1
70041: PUSH
70042: LD_VAR 0 2
70046: PUSH
70047: LD_INT 4
70049: PLUS
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: LIST
70058: PUSH
70059: LD_VAR 0 1
70063: PUSH
70064: LD_INT 3
70066: PLUS
70067: PUSH
70068: LD_VAR 0 2
70072: PUSH
70073: LD_INT 3
70075: PLUS
70076: PUSH
70077: LD_INT 5
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: PUSH
70085: LD_VAR 0 1
70089: PUSH
70090: LD_INT 4
70092: PLUS
70093: PUSH
70094: LD_VAR 0 2
70098: PUSH
70099: LD_INT 4
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: PUSH
70107: LD_VAR 0 1
70111: PUSH
70112: LD_VAR 0 2
70116: PUSH
70117: LD_INT 3
70119: MINUS
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: PUSH
70129: LD_VAR 0 1
70133: PUSH
70134: LD_INT 4
70136: MINUS
70137: PUSH
70138: LD_VAR 0 2
70142: PUSH
70143: LD_INT 4
70145: MINUS
70146: PUSH
70147: LD_INT 2
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: LIST
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: ST_TO_ADDR
// end ; 5 :
70162: GO 70302
70164: LD_INT 5
70166: DOUBLE
70167: EQUAL
70168: IFTRUE 70172
70170: GO 70301
70172: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70173: LD_ADDR_VAR 0 5
70177: PUSH
70178: LD_VAR 0 1
70182: PUSH
70183: LD_INT 4
70185: MINUS
70186: PUSH
70187: LD_VAR 0 2
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: PUSH
70200: LD_VAR 0 1
70204: PUSH
70205: LD_VAR 0 2
70209: PUSH
70210: LD_INT 4
70212: MINUS
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: LIST
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: LD_INT 4
70229: PLUS
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: LD_INT 4
70238: PLUS
70239: PUSH
70240: LD_INT 5
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: PUSH
70248: LD_VAR 0 1
70252: PUSH
70253: LD_INT 3
70255: PLUS
70256: PUSH
70257: LD_VAR 0 2
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_VAR 0 2
70279: PUSH
70280: LD_INT 3
70282: PLUS
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: ST_TO_ADDR
// end ; end ;
70299: GO 70302
70301: POP
// result := list ;
70302: LD_ADDR_VAR 0 4
70306: PUSH
70307: LD_VAR 0 5
70311: ST_TO_ADDR
// end ;
70312: LD_VAR 0 4
70316: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70317: LD_INT 0
70319: PPUSH
70320: PPUSH
70321: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70322: LD_VAR 0 1
70326: NOT
70327: PUSH
70328: LD_VAR 0 2
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: LD_INT 2
70338: PUSH
70339: LD_INT 3
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: IN
70351: NOT
70352: OR
70353: IFFALSE 70357
// exit ;
70355: GO 70449
// tmp := [ ] ;
70357: LD_ADDR_VAR 0 5
70361: PUSH
70362: EMPTY
70363: ST_TO_ADDR
// for i in units do
70364: LD_ADDR_VAR 0 4
70368: PUSH
70369: LD_VAR 0 1
70373: PUSH
70374: FOR_IN
70375: IFFALSE 70418
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70377: LD_ADDR_VAR 0 5
70381: PUSH
70382: LD_VAR 0 5
70386: PPUSH
70387: LD_VAR 0 5
70391: PUSH
70392: LD_INT 1
70394: PLUS
70395: PPUSH
70396: LD_VAR 0 4
70400: PPUSH
70401: LD_VAR 0 2
70405: PPUSH
70406: CALL_OW 259
70410: PPUSH
70411: CALL_OW 2
70415: ST_TO_ADDR
70416: GO 70374
70418: POP
70419: POP
// if not tmp then
70420: LD_VAR 0 5
70424: NOT
70425: IFFALSE 70429
// exit ;
70427: GO 70449
// result := SortListByListDesc ( units , tmp ) ;
70429: LD_ADDR_VAR 0 3
70433: PUSH
70434: LD_VAR 0 1
70438: PPUSH
70439: LD_VAR 0 5
70443: PPUSH
70444: CALL_OW 77
70448: ST_TO_ADDR
// end ;
70449: LD_VAR 0 3
70453: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70454: LD_INT 0
70456: PPUSH
70457: PPUSH
70458: PPUSH
// result := false ;
70459: LD_ADDR_VAR 0 3
70463: PUSH
70464: LD_INT 0
70466: ST_TO_ADDR
// x := GetX ( building ) ;
70467: LD_ADDR_VAR 0 4
70471: PUSH
70472: LD_VAR 0 2
70476: PPUSH
70477: CALL_OW 250
70481: ST_TO_ADDR
// y := GetY ( building ) ;
70482: LD_ADDR_VAR 0 5
70486: PUSH
70487: LD_VAR 0 2
70491: PPUSH
70492: CALL_OW 251
70496: ST_TO_ADDR
// if not building or not x or not y then
70497: LD_VAR 0 2
70501: NOT
70502: PUSH
70503: LD_VAR 0 4
70507: NOT
70508: OR
70509: PUSH
70510: LD_VAR 0 5
70514: NOT
70515: OR
70516: IFFALSE 70520
// exit ;
70518: GO 70612
// if GetTaskList ( unit ) then
70520: LD_VAR 0 1
70524: PPUSH
70525: CALL_OW 437
70529: IFFALSE 70612
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70531: LD_STRING e
70533: PUSH
70534: LD_VAR 0 1
70538: PPUSH
70539: CALL_OW 437
70543: PUSH
70544: LD_INT 1
70546: ARRAY
70547: PUSH
70548: LD_INT 1
70550: ARRAY
70551: EQUAL
70552: PUSH
70553: LD_VAR 0 4
70557: PUSH
70558: LD_VAR 0 1
70562: PPUSH
70563: CALL_OW 437
70567: PUSH
70568: LD_INT 1
70570: ARRAY
70571: PUSH
70572: LD_INT 2
70574: ARRAY
70575: EQUAL
70576: AND
70577: PUSH
70578: LD_VAR 0 5
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 437
70592: PUSH
70593: LD_INT 1
70595: ARRAY
70596: PUSH
70597: LD_INT 3
70599: ARRAY
70600: EQUAL
70601: AND
70602: IFFALSE 70612
// result := true end ;
70604: LD_ADDR_VAR 0 3
70608: PUSH
70609: LD_INT 1
70611: ST_TO_ADDR
// end ;
70612: LD_VAR 0 3
70616: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70617: LD_INT 0
70619: PPUSH
// result := false ;
70620: LD_ADDR_VAR 0 4
70624: PUSH
70625: LD_INT 0
70627: ST_TO_ADDR
// if GetTaskList ( unit ) then
70628: LD_VAR 0 1
70632: PPUSH
70633: CALL_OW 437
70637: IFFALSE 70720
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70639: LD_STRING M
70641: PUSH
70642: LD_VAR 0 1
70646: PPUSH
70647: CALL_OW 437
70651: PUSH
70652: LD_INT 1
70654: ARRAY
70655: PUSH
70656: LD_INT 1
70658: ARRAY
70659: EQUAL
70660: PUSH
70661: LD_VAR 0 2
70665: PUSH
70666: LD_VAR 0 1
70670: PPUSH
70671: CALL_OW 437
70675: PUSH
70676: LD_INT 1
70678: ARRAY
70679: PUSH
70680: LD_INT 2
70682: ARRAY
70683: EQUAL
70684: AND
70685: PUSH
70686: LD_VAR 0 3
70690: PUSH
70691: LD_VAR 0 1
70695: PPUSH
70696: CALL_OW 437
70700: PUSH
70701: LD_INT 1
70703: ARRAY
70704: PUSH
70705: LD_INT 3
70707: ARRAY
70708: EQUAL
70709: AND
70710: IFFALSE 70720
// result := true ;
70712: LD_ADDR_VAR 0 4
70716: PUSH
70717: LD_INT 1
70719: ST_TO_ADDR
// end ; end ;
70720: LD_VAR 0 4
70724: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70725: LD_INT 0
70727: PPUSH
70728: PPUSH
70729: PPUSH
70730: PPUSH
// if not unit or not area then
70731: LD_VAR 0 1
70735: NOT
70736: PUSH
70737: LD_VAR 0 2
70741: NOT
70742: OR
70743: IFFALSE 70747
// exit ;
70745: GO 70911
// tmp := AreaToList ( area , i ) ;
70747: LD_ADDR_VAR 0 6
70751: PUSH
70752: LD_VAR 0 2
70756: PPUSH
70757: LD_VAR 0 5
70761: PPUSH
70762: CALL_OW 517
70766: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70767: LD_ADDR_VAR 0 5
70771: PUSH
70772: DOUBLE
70773: LD_INT 1
70775: DEC
70776: ST_TO_ADDR
70777: LD_VAR 0 6
70781: PUSH
70782: LD_INT 1
70784: ARRAY
70785: PUSH
70786: FOR_TO
70787: IFFALSE 70909
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70789: LD_ADDR_VAR 0 7
70793: PUSH
70794: LD_VAR 0 6
70798: PUSH
70799: LD_INT 1
70801: ARRAY
70802: PUSH
70803: LD_VAR 0 5
70807: ARRAY
70808: PUSH
70809: LD_VAR 0 6
70813: PUSH
70814: LD_INT 2
70816: ARRAY
70817: PUSH
70818: LD_VAR 0 5
70822: ARRAY
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70828: LD_VAR 0 7
70832: PUSH
70833: LD_INT 1
70835: ARRAY
70836: PPUSH
70837: LD_VAR 0 7
70841: PUSH
70842: LD_INT 2
70844: ARRAY
70845: PPUSH
70846: CALL_OW 428
70850: PUSH
70851: LD_INT 0
70853: EQUAL
70854: IFFALSE 70907
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70856: LD_VAR 0 1
70860: PPUSH
70861: LD_VAR 0 7
70865: PUSH
70866: LD_INT 1
70868: ARRAY
70869: PPUSH
70870: LD_VAR 0 7
70874: PUSH
70875: LD_INT 2
70877: ARRAY
70878: PPUSH
70879: LD_VAR 0 3
70883: PPUSH
70884: CALL_OW 48
// result := IsPlaced ( unit ) ;
70888: LD_ADDR_VAR 0 4
70892: PUSH
70893: LD_VAR 0 1
70897: PPUSH
70898: CALL_OW 305
70902: ST_TO_ADDR
// exit ;
70903: POP
70904: POP
70905: GO 70911
// end ; end ;
70907: GO 70786
70909: POP
70910: POP
// end ;
70911: LD_VAR 0 4
70915: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70916: LD_INT 0
70918: PPUSH
70919: PPUSH
70920: PPUSH
// if not side or side > 8 then
70921: LD_VAR 0 1
70925: NOT
70926: PUSH
70927: LD_VAR 0 1
70931: PUSH
70932: LD_INT 8
70934: GREATER
70935: OR
70936: IFFALSE 70940
// exit ;
70938: GO 71127
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70940: LD_ADDR_VAR 0 4
70944: PUSH
70945: LD_INT 22
70947: PUSH
70948: LD_VAR 0 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 21
70959: PUSH
70960: LD_INT 3
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PPUSH
70971: CALL_OW 69
70975: ST_TO_ADDR
// if not tmp then
70976: LD_VAR 0 4
70980: NOT
70981: IFFALSE 70985
// exit ;
70983: GO 71127
// enable_addtolog := true ;
70985: LD_ADDR_OWVAR 81
70989: PUSH
70990: LD_INT 1
70992: ST_TO_ADDR
// AddToLog ( [ ) ;
70993: LD_STRING [
70995: PPUSH
70996: CALL_OW 561
// for i in tmp do
71000: LD_ADDR_VAR 0 3
71004: PUSH
71005: LD_VAR 0 4
71009: PUSH
71010: FOR_IN
71011: IFFALSE 71118
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71013: LD_STRING [
71015: PUSH
71016: LD_VAR 0 3
71020: PPUSH
71021: CALL_OW 266
71025: STR
71026: PUSH
71027: LD_STRING , 
71029: STR
71030: PUSH
71031: LD_VAR 0 3
71035: PPUSH
71036: CALL_OW 250
71040: STR
71041: PUSH
71042: LD_STRING , 
71044: STR
71045: PUSH
71046: LD_VAR 0 3
71050: PPUSH
71051: CALL_OW 251
71055: STR
71056: PUSH
71057: LD_STRING , 
71059: STR
71060: PUSH
71061: LD_VAR 0 3
71065: PPUSH
71066: CALL_OW 254
71070: STR
71071: PUSH
71072: LD_STRING , 
71074: STR
71075: PUSH
71076: LD_VAR 0 3
71080: PPUSH
71081: LD_INT 1
71083: PPUSH
71084: CALL_OW 268
71088: STR
71089: PUSH
71090: LD_STRING , 
71092: STR
71093: PUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: LD_INT 2
71101: PPUSH
71102: CALL_OW 268
71106: STR
71107: PUSH
71108: LD_STRING ],
71110: STR
71111: PPUSH
71112: CALL_OW 561
// end ;
71116: GO 71010
71118: POP
71119: POP
// AddToLog ( ]; ) ;
71120: LD_STRING ];
71122: PPUSH
71123: CALL_OW 561
// end ;
71127: LD_VAR 0 2
71131: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71132: LD_INT 0
71134: PPUSH
71135: PPUSH
71136: PPUSH
71137: PPUSH
71138: PPUSH
// if not area or not rate or not max then
71139: LD_VAR 0 1
71143: NOT
71144: PUSH
71145: LD_VAR 0 2
71149: NOT
71150: OR
71151: PUSH
71152: LD_VAR 0 4
71156: NOT
71157: OR
71158: IFFALSE 71162
// exit ;
71160: GO 71354
// while 1 do
71162: LD_INT 1
71164: IFFALSE 71354
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71166: LD_ADDR_VAR 0 9
71170: PUSH
71171: LD_VAR 0 1
71175: PPUSH
71176: LD_INT 1
71178: PPUSH
71179: CALL_OW 287
71183: PUSH
71184: LD_INT 10
71186: MUL
71187: ST_TO_ADDR
// r := rate / 10 ;
71188: LD_ADDR_VAR 0 7
71192: PUSH
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 10
71200: DIVREAL
71201: ST_TO_ADDR
// time := 1 1$00 ;
71202: LD_ADDR_VAR 0 8
71206: PUSH
71207: LD_INT 2100
71209: ST_TO_ADDR
// if amount < min then
71210: LD_VAR 0 9
71214: PUSH
71215: LD_VAR 0 3
71219: LESS
71220: IFFALSE 71238
// r := r * 2 else
71222: LD_ADDR_VAR 0 7
71226: PUSH
71227: LD_VAR 0 7
71231: PUSH
71232: LD_INT 2
71234: MUL
71235: ST_TO_ADDR
71236: GO 71264
// if amount > max then
71238: LD_VAR 0 9
71242: PUSH
71243: LD_VAR 0 4
71247: GREATER
71248: IFFALSE 71264
// r := r / 2 ;
71250: LD_ADDR_VAR 0 7
71254: PUSH
71255: LD_VAR 0 7
71259: PUSH
71260: LD_INT 2
71262: DIVREAL
71263: ST_TO_ADDR
// time := time / r ;
71264: LD_ADDR_VAR 0 8
71268: PUSH
71269: LD_VAR 0 8
71273: PUSH
71274: LD_VAR 0 7
71278: DIVREAL
71279: ST_TO_ADDR
// if time < 0 then
71280: LD_VAR 0 8
71284: PUSH
71285: LD_INT 0
71287: LESS
71288: IFFALSE 71305
// time := time * - 1 ;
71290: LD_ADDR_VAR 0 8
71294: PUSH
71295: LD_VAR 0 8
71299: PUSH
71300: LD_INT 1
71302: NEG
71303: MUL
71304: ST_TO_ADDR
// wait ( time ) ;
71305: LD_VAR 0 8
71309: PPUSH
71310: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71314: LD_INT 35
71316: PPUSH
71317: LD_INT 875
71319: PPUSH
71320: CALL_OW 12
71324: PPUSH
71325: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71329: LD_INT 1
71331: PPUSH
71332: LD_INT 5
71334: PPUSH
71335: CALL_OW 12
71339: PPUSH
71340: LD_VAR 0 1
71344: PPUSH
71345: LD_INT 1
71347: PPUSH
71348: CALL_OW 55
// end ;
71352: GO 71162
// end ;
71354: LD_VAR 0 5
71358: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71359: LD_INT 0
71361: PPUSH
71362: PPUSH
71363: PPUSH
71364: PPUSH
71365: PPUSH
71366: PPUSH
71367: PPUSH
71368: PPUSH
// if not turrets or not factories then
71369: LD_VAR 0 1
71373: NOT
71374: PUSH
71375: LD_VAR 0 2
71379: NOT
71380: OR
71381: IFFALSE 71385
// exit ;
71383: GO 71692
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71385: LD_ADDR_VAR 0 10
71389: PUSH
71390: LD_INT 5
71392: PUSH
71393: LD_INT 6
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: LD_INT 4
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 3
71412: PUSH
71413: LD_INT 5
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 24
71427: PUSH
71428: LD_INT 25
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 23
71437: PUSH
71438: LD_INT 27
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 42
71451: PUSH
71452: LD_INT 43
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 44
71461: PUSH
71462: LD_INT 46
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 45
71471: PUSH
71472: LD_INT 47
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: ST_TO_ADDR
// result := [ ] ;
71489: LD_ADDR_VAR 0 3
71493: PUSH
71494: EMPTY
71495: ST_TO_ADDR
// for i in turrets do
71496: LD_ADDR_VAR 0 4
71500: PUSH
71501: LD_VAR 0 1
71505: PUSH
71506: FOR_IN
71507: IFFALSE 71690
// begin nat := GetNation ( i ) ;
71509: LD_ADDR_VAR 0 7
71513: PUSH
71514: LD_VAR 0 4
71518: PPUSH
71519: CALL_OW 248
71523: ST_TO_ADDR
// weapon := 0 ;
71524: LD_ADDR_VAR 0 8
71528: PUSH
71529: LD_INT 0
71531: ST_TO_ADDR
// if not nat then
71532: LD_VAR 0 7
71536: NOT
71537: IFFALSE 71541
// continue ;
71539: GO 71506
// for j in list [ nat ] do
71541: LD_ADDR_VAR 0 5
71545: PUSH
71546: LD_VAR 0 10
71550: PUSH
71551: LD_VAR 0 7
71555: ARRAY
71556: PUSH
71557: FOR_IN
71558: IFFALSE 71599
// if GetBWeapon ( i ) = j [ 1 ] then
71560: LD_VAR 0 4
71564: PPUSH
71565: CALL_OW 269
71569: PUSH
71570: LD_VAR 0 5
71574: PUSH
71575: LD_INT 1
71577: ARRAY
71578: EQUAL
71579: IFFALSE 71597
// begin weapon := j [ 2 ] ;
71581: LD_ADDR_VAR 0 8
71585: PUSH
71586: LD_VAR 0 5
71590: PUSH
71591: LD_INT 2
71593: ARRAY
71594: ST_TO_ADDR
// break ;
71595: GO 71599
// end ;
71597: GO 71557
71599: POP
71600: POP
// if not weapon then
71601: LD_VAR 0 8
71605: NOT
71606: IFFALSE 71610
// continue ;
71608: GO 71506
// for k in factories do
71610: LD_ADDR_VAR 0 6
71614: PUSH
71615: LD_VAR 0 2
71619: PUSH
71620: FOR_IN
71621: IFFALSE 71686
// begin weapons := AvailableWeaponList ( k ) ;
71623: LD_ADDR_VAR 0 9
71627: PUSH
71628: LD_VAR 0 6
71632: PPUSH
71633: CALL_OW 478
71637: ST_TO_ADDR
// if not weapons then
71638: LD_VAR 0 9
71642: NOT
71643: IFFALSE 71647
// continue ;
71645: GO 71620
// if weapon in weapons then
71647: LD_VAR 0 8
71651: PUSH
71652: LD_VAR 0 9
71656: IN
71657: IFFALSE 71684
// begin result := [ i , weapon ] ;
71659: LD_ADDR_VAR 0 3
71663: PUSH
71664: LD_VAR 0 4
71668: PUSH
71669: LD_VAR 0 8
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: ST_TO_ADDR
// exit ;
71678: POP
71679: POP
71680: POP
71681: POP
71682: GO 71692
// end ; end ;
71684: GO 71620
71686: POP
71687: POP
// end ;
71688: GO 71506
71690: POP
71691: POP
// end ;
71692: LD_VAR 0 3
71696: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71697: LD_INT 0
71699: PPUSH
// if not side or side > 8 then
71700: LD_VAR 0 3
71704: NOT
71705: PUSH
71706: LD_VAR 0 3
71710: PUSH
71711: LD_INT 8
71713: GREATER
71714: OR
71715: IFFALSE 71719
// exit ;
71717: GO 71778
// if not range then
71719: LD_VAR 0 4
71723: NOT
71724: IFFALSE 71735
// range := - 12 ;
71726: LD_ADDR_VAR 0 4
71730: PUSH
71731: LD_INT 12
71733: NEG
71734: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71735: LD_VAR 0 1
71739: PPUSH
71740: LD_VAR 0 2
71744: PPUSH
71745: LD_VAR 0 3
71749: PPUSH
71750: LD_VAR 0 4
71754: PPUSH
71755: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71759: LD_VAR 0 1
71763: PPUSH
71764: LD_VAR 0 2
71768: PPUSH
71769: LD_VAR 0 3
71773: PPUSH
71774: CALL_OW 331
// end ;
71778: LD_VAR 0 5
71782: RET
// export function Video ( mode ) ; begin
71783: LD_INT 0
71785: PPUSH
// ingame_video = mode ;
71786: LD_ADDR_OWVAR 52
71790: PUSH
71791: LD_VAR 0 1
71795: ST_TO_ADDR
// interface_hidden = mode ;
71796: LD_ADDR_OWVAR 54
71800: PUSH
71801: LD_VAR 0 1
71805: ST_TO_ADDR
// end ;
71806: LD_VAR 0 2
71810: RET
// export function Join ( array , element ) ; begin
71811: LD_INT 0
71813: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71814: LD_ADDR_VAR 0 3
71818: PUSH
71819: LD_VAR 0 1
71823: PPUSH
71824: LD_VAR 0 1
71828: PUSH
71829: LD_INT 1
71831: PLUS
71832: PPUSH
71833: LD_VAR 0 2
71837: PPUSH
71838: CALL_OW 1
71842: ST_TO_ADDR
// end ;
71843: LD_VAR 0 3
71847: RET
// export function JoinUnion ( array , element ) ; begin
71848: LD_INT 0
71850: PPUSH
// result := array union element ;
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: LD_VAR 0 1
71860: PUSH
71861: LD_VAR 0 2
71865: UNION
71866: ST_TO_ADDR
// end ;
71867: LD_VAR 0 3
71871: RET
// export function GetBehemoths ( side ) ; begin
71872: LD_INT 0
71874: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71875: LD_ADDR_VAR 0 2
71879: PUSH
71880: LD_INT 22
71882: PUSH
71883: LD_VAR 0 1
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 31
71894: PUSH
71895: LD_INT 25
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PPUSH
71906: CALL_OW 69
71910: ST_TO_ADDR
// end ;
71911: LD_VAR 0 2
71915: RET
// export function Shuffle ( array ) ; var i , index ; begin
71916: LD_INT 0
71918: PPUSH
71919: PPUSH
71920: PPUSH
// result := [ ] ;
71921: LD_ADDR_VAR 0 2
71925: PUSH
71926: EMPTY
71927: ST_TO_ADDR
// if not array then
71928: LD_VAR 0 1
71932: NOT
71933: IFFALSE 71937
// exit ;
71935: GO 72036
// Randomize ;
71937: CALL_OW 10
// for i = array downto 1 do
71941: LD_ADDR_VAR 0 3
71945: PUSH
71946: DOUBLE
71947: LD_VAR 0 1
71951: INC
71952: ST_TO_ADDR
71953: LD_INT 1
71955: PUSH
71956: FOR_DOWNTO
71957: IFFALSE 72034
// begin index := rand ( 1 , array ) ;
71959: LD_ADDR_VAR 0 4
71963: PUSH
71964: LD_INT 1
71966: PPUSH
71967: LD_VAR 0 1
71971: PPUSH
71972: CALL_OW 12
71976: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71977: LD_ADDR_VAR 0 2
71981: PUSH
71982: LD_VAR 0 2
71986: PPUSH
71987: LD_VAR 0 2
71991: PUSH
71992: LD_INT 1
71994: PLUS
71995: PPUSH
71996: LD_VAR 0 1
72000: PUSH
72001: LD_VAR 0 4
72005: ARRAY
72006: PPUSH
72007: CALL_OW 2
72011: ST_TO_ADDR
// array := Delete ( array , index ) ;
72012: LD_ADDR_VAR 0 1
72016: PUSH
72017: LD_VAR 0 1
72021: PPUSH
72022: LD_VAR 0 4
72026: PPUSH
72027: CALL_OW 3
72031: ST_TO_ADDR
// end ;
72032: GO 71956
72034: POP
72035: POP
// end ;
72036: LD_VAR 0 2
72040: RET
// export function GetBaseMaterials ( base ) ; begin
72041: LD_INT 0
72043: PPUSH
// result := [ 0 , 0 , 0 ] ;
72044: LD_ADDR_VAR 0 2
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: LD_INT 0
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: ST_TO_ADDR
// if not base then
72063: LD_VAR 0 1
72067: NOT
72068: IFFALSE 72072
// exit ;
72070: GO 72121
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72072: LD_ADDR_VAR 0 2
72076: PUSH
72077: LD_VAR 0 1
72081: PPUSH
72082: LD_INT 1
72084: PPUSH
72085: CALL_OW 275
72089: PUSH
72090: LD_VAR 0 1
72094: PPUSH
72095: LD_INT 2
72097: PPUSH
72098: CALL_OW 275
72102: PUSH
72103: LD_VAR 0 1
72107: PPUSH
72108: LD_INT 3
72110: PPUSH
72111: CALL_OW 275
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: LIST
72120: ST_TO_ADDR
// end ;
72121: LD_VAR 0 2
72125: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72126: LD_INT 0
72128: PPUSH
72129: PPUSH
// result := array ;
72130: LD_ADDR_VAR 0 3
72134: PUSH
72135: LD_VAR 0 1
72139: ST_TO_ADDR
// if size > 0 then
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 0
72147: GREATER
72148: IFFALSE 72194
// for i := array downto size do
72150: LD_ADDR_VAR 0 4
72154: PUSH
72155: DOUBLE
72156: LD_VAR 0 1
72160: INC
72161: ST_TO_ADDR
72162: LD_VAR 0 2
72166: PUSH
72167: FOR_DOWNTO
72168: IFFALSE 72192
// result := Delete ( result , result ) ;
72170: LD_ADDR_VAR 0 3
72174: PUSH
72175: LD_VAR 0 3
72179: PPUSH
72180: LD_VAR 0 3
72184: PPUSH
72185: CALL_OW 3
72189: ST_TO_ADDR
72190: GO 72167
72192: POP
72193: POP
// end ;
72194: LD_VAR 0 3
72198: RET
// export function ComExit ( unit ) ; var tmp ; begin
72199: LD_INT 0
72201: PPUSH
72202: PPUSH
// if not IsInUnit ( unit ) then
72203: LD_VAR 0 1
72207: PPUSH
72208: CALL_OW 310
72212: NOT
72213: IFFALSE 72217
// exit ;
72215: GO 72277
// tmp := IsInUnit ( unit ) ;
72217: LD_ADDR_VAR 0 3
72221: PUSH
72222: LD_VAR 0 1
72226: PPUSH
72227: CALL_OW 310
72231: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72232: LD_VAR 0 3
72236: PPUSH
72237: CALL_OW 247
72241: PUSH
72242: LD_INT 2
72244: EQUAL
72245: IFFALSE 72258
// ComExitVehicle ( unit ) else
72247: LD_VAR 0 1
72251: PPUSH
72252: CALL_OW 121
72256: GO 72267
// ComExitBuilding ( unit ) ;
72258: LD_VAR 0 1
72262: PPUSH
72263: CALL_OW 122
// result := tmp ;
72267: LD_ADDR_VAR 0 2
72271: PUSH
72272: LD_VAR 0 3
72276: ST_TO_ADDR
// end ;
72277: LD_VAR 0 2
72281: RET
// export function ComExitAll ( units ) ; var i ; begin
72282: LD_INT 0
72284: PPUSH
72285: PPUSH
// if not units then
72286: LD_VAR 0 1
72290: NOT
72291: IFFALSE 72295
// exit ;
72293: GO 72321
// for i in units do
72295: LD_ADDR_VAR 0 3
72299: PUSH
72300: LD_VAR 0 1
72304: PUSH
72305: FOR_IN
72306: IFFALSE 72319
// ComExit ( i ) ;
72308: LD_VAR 0 3
72312: PPUSH
72313: CALL 72199 0 1
72317: GO 72305
72319: POP
72320: POP
// end ;
72321: LD_VAR 0 2
72325: RET
// export function ResetHc ; begin
72326: LD_INT 0
72328: PPUSH
// InitHc ;
72329: CALL_OW 19
// hc_importance := 0 ;
72333: LD_ADDR_OWVAR 32
72337: PUSH
72338: LD_INT 0
72340: ST_TO_ADDR
// end ;
72341: LD_VAR 0 1
72345: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72346: LD_INT 0
72348: PPUSH
72349: PPUSH
72350: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72351: LD_ADDR_VAR 0 6
72355: PUSH
72356: LD_VAR 0 1
72360: PUSH
72361: LD_VAR 0 3
72365: PLUS
72366: PUSH
72367: LD_INT 2
72369: DIV
72370: ST_TO_ADDR
// if _x < 0 then
72371: LD_VAR 0 6
72375: PUSH
72376: LD_INT 0
72378: LESS
72379: IFFALSE 72396
// _x := _x * - 1 ;
72381: LD_ADDR_VAR 0 6
72385: PUSH
72386: LD_VAR 0 6
72390: PUSH
72391: LD_INT 1
72393: NEG
72394: MUL
72395: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72396: LD_ADDR_VAR 0 7
72400: PUSH
72401: LD_VAR 0 2
72405: PUSH
72406: LD_VAR 0 4
72410: PLUS
72411: PUSH
72412: LD_INT 2
72414: DIV
72415: ST_TO_ADDR
// if _y < 0 then
72416: LD_VAR 0 7
72420: PUSH
72421: LD_INT 0
72423: LESS
72424: IFFALSE 72441
// _y := _y * - 1 ;
72426: LD_ADDR_VAR 0 7
72430: PUSH
72431: LD_VAR 0 7
72435: PUSH
72436: LD_INT 1
72438: NEG
72439: MUL
72440: ST_TO_ADDR
// result := [ _x , _y ] ;
72441: LD_ADDR_VAR 0 5
72445: PUSH
72446: LD_VAR 0 6
72450: PUSH
72451: LD_VAR 0 7
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: ST_TO_ADDR
// end ;
72460: LD_VAR 0 5
72464: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72465: LD_INT 0
72467: PPUSH
72468: PPUSH
72469: PPUSH
72470: PPUSH
// task := GetTaskList ( unit ) ;
72471: LD_ADDR_VAR 0 7
72475: PUSH
72476: LD_VAR 0 1
72480: PPUSH
72481: CALL_OW 437
72485: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72486: LD_VAR 0 7
72490: NOT
72491: PUSH
72492: LD_VAR 0 1
72496: PPUSH
72497: LD_VAR 0 2
72501: PPUSH
72502: CALL_OW 308
72506: NOT
72507: AND
72508: IFFALSE 72512
// exit ;
72510: GO 72630
// if IsInArea ( unit , area ) then
72512: LD_VAR 0 1
72516: PPUSH
72517: LD_VAR 0 2
72521: PPUSH
72522: CALL_OW 308
72526: IFFALSE 72544
// begin ComMoveToArea ( unit , goAway ) ;
72528: LD_VAR 0 1
72532: PPUSH
72533: LD_VAR 0 3
72537: PPUSH
72538: CALL_OW 113
// exit ;
72542: GO 72630
// end ; if task [ 1 ] [ 1 ] <> M then
72544: LD_VAR 0 7
72548: PUSH
72549: LD_INT 1
72551: ARRAY
72552: PUSH
72553: LD_INT 1
72555: ARRAY
72556: PUSH
72557: LD_STRING M
72559: NONEQUAL
72560: IFFALSE 72564
// exit ;
72562: GO 72630
// x := task [ 1 ] [ 2 ] ;
72564: LD_ADDR_VAR 0 5
72568: PUSH
72569: LD_VAR 0 7
72573: PUSH
72574: LD_INT 1
72576: ARRAY
72577: PUSH
72578: LD_INT 2
72580: ARRAY
72581: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72582: LD_ADDR_VAR 0 6
72586: PUSH
72587: LD_VAR 0 7
72591: PUSH
72592: LD_INT 1
72594: ARRAY
72595: PUSH
72596: LD_INT 3
72598: ARRAY
72599: ST_TO_ADDR
// if InArea ( x , y , area ) then
72600: LD_VAR 0 5
72604: PPUSH
72605: LD_VAR 0 6
72609: PPUSH
72610: LD_VAR 0 2
72614: PPUSH
72615: CALL_OW 309
72619: IFFALSE 72630
// ComStop ( unit ) ;
72621: LD_VAR 0 1
72625: PPUSH
72626: CALL_OW 141
// end ;
72630: LD_VAR 0 4
72634: RET
// export function Abs ( value ) ; begin
72635: LD_INT 0
72637: PPUSH
// result := value ;
72638: LD_ADDR_VAR 0 2
72642: PUSH
72643: LD_VAR 0 1
72647: ST_TO_ADDR
// if value < 0 then
72648: LD_VAR 0 1
72652: PUSH
72653: LD_INT 0
72655: LESS
72656: IFFALSE 72673
// result := value * - 1 ;
72658: LD_ADDR_VAR 0 2
72662: PUSH
72663: LD_VAR 0 1
72667: PUSH
72668: LD_INT 1
72670: NEG
72671: MUL
72672: ST_TO_ADDR
// end ;
72673: LD_VAR 0 2
72677: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72678: LD_INT 0
72680: PPUSH
72681: PPUSH
72682: PPUSH
72683: PPUSH
72684: PPUSH
72685: PPUSH
72686: PPUSH
72687: PPUSH
// if not unit or not building then
72688: LD_VAR 0 1
72692: NOT
72693: PUSH
72694: LD_VAR 0 2
72698: NOT
72699: OR
72700: IFFALSE 72704
// exit ;
72702: GO 72930
// x := GetX ( building ) ;
72704: LD_ADDR_VAR 0 4
72708: PUSH
72709: LD_VAR 0 2
72713: PPUSH
72714: CALL_OW 250
72718: ST_TO_ADDR
// y := GetY ( building ) ;
72719: LD_ADDR_VAR 0 6
72723: PUSH
72724: LD_VAR 0 2
72728: PPUSH
72729: CALL_OW 251
72733: ST_TO_ADDR
// d := GetDir ( building ) ;
72734: LD_ADDR_VAR 0 8
72738: PUSH
72739: LD_VAR 0 2
72743: PPUSH
72744: CALL_OW 254
72748: ST_TO_ADDR
// r := 4 ;
72749: LD_ADDR_VAR 0 9
72753: PUSH
72754: LD_INT 4
72756: ST_TO_ADDR
// for i := 1 to 5 do
72757: LD_ADDR_VAR 0 10
72761: PUSH
72762: DOUBLE
72763: LD_INT 1
72765: DEC
72766: ST_TO_ADDR
72767: LD_INT 5
72769: PUSH
72770: FOR_TO
72771: IFFALSE 72928
// begin _x := ShiftX ( x , d , r + i ) ;
72773: LD_ADDR_VAR 0 5
72777: PUSH
72778: LD_VAR 0 4
72782: PPUSH
72783: LD_VAR 0 8
72787: PPUSH
72788: LD_VAR 0 9
72792: PUSH
72793: LD_VAR 0 10
72797: PLUS
72798: PPUSH
72799: CALL_OW 272
72803: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72804: LD_ADDR_VAR 0 7
72808: PUSH
72809: LD_VAR 0 6
72813: PPUSH
72814: LD_VAR 0 8
72818: PPUSH
72819: LD_VAR 0 9
72823: PUSH
72824: LD_VAR 0 10
72828: PLUS
72829: PPUSH
72830: CALL_OW 273
72834: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72835: LD_VAR 0 5
72839: PPUSH
72840: LD_VAR 0 7
72844: PPUSH
72845: CALL_OW 488
72849: PUSH
72850: LD_VAR 0 5
72854: PPUSH
72855: LD_VAR 0 7
72859: PPUSH
72860: CALL_OW 428
72864: PPUSH
72865: CALL_OW 247
72869: PUSH
72870: LD_INT 3
72872: PUSH
72873: LD_INT 2
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: IN
72880: NOT
72881: AND
72882: IFFALSE 72926
// begin ComMoveXY ( unit , _x , _y ) ;
72884: LD_VAR 0 1
72888: PPUSH
72889: LD_VAR 0 5
72893: PPUSH
72894: LD_VAR 0 7
72898: PPUSH
72899: CALL_OW 111
// result := [ _x , _y ] ;
72903: LD_ADDR_VAR 0 3
72907: PUSH
72908: LD_VAR 0 5
72912: PUSH
72913: LD_VAR 0 7
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: ST_TO_ADDR
// exit ;
72922: POP
72923: POP
72924: GO 72930
// end ; end ;
72926: GO 72770
72928: POP
72929: POP
// end ;
72930: LD_VAR 0 3
72934: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72935: LD_INT 0
72937: PPUSH
72938: PPUSH
72939: PPUSH
// result := 0 ;
72940: LD_ADDR_VAR 0 3
72944: PUSH
72945: LD_INT 0
72947: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72948: LD_VAR 0 1
72952: PUSH
72953: LD_INT 0
72955: LESS
72956: PUSH
72957: LD_VAR 0 1
72961: PUSH
72962: LD_INT 8
72964: GREATER
72965: OR
72966: PUSH
72967: LD_VAR 0 2
72971: PUSH
72972: LD_INT 0
72974: LESS
72975: OR
72976: PUSH
72977: LD_VAR 0 2
72981: PUSH
72982: LD_INT 8
72984: GREATER
72985: OR
72986: IFFALSE 72990
// exit ;
72988: GO 73065
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72990: LD_ADDR_VAR 0 4
72994: PUSH
72995: LD_INT 22
72997: PUSH
72998: LD_VAR 0 2
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PPUSH
73007: CALL_OW 69
73011: PUSH
73012: FOR_IN
73013: IFFALSE 73063
// begin un := UnitShoot ( i ) ;
73015: LD_ADDR_VAR 0 5
73019: PUSH
73020: LD_VAR 0 4
73024: PPUSH
73025: CALL_OW 504
73029: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73030: LD_VAR 0 5
73034: PPUSH
73035: CALL_OW 255
73039: PUSH
73040: LD_VAR 0 1
73044: EQUAL
73045: IFFALSE 73061
// begin result := un ;
73047: LD_ADDR_VAR 0 3
73051: PUSH
73052: LD_VAR 0 5
73056: ST_TO_ADDR
// exit ;
73057: POP
73058: POP
73059: GO 73065
// end ; end ;
73061: GO 73012
73063: POP
73064: POP
// end ;
73065: LD_VAR 0 3
73069: RET
// export function GetCargoBay ( units ) ; begin
73070: LD_INT 0
73072: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73073: LD_ADDR_VAR 0 2
73077: PUSH
73078: LD_VAR 0 1
73082: PPUSH
73083: LD_INT 2
73085: PUSH
73086: LD_INT 34
73088: PUSH
73089: LD_INT 12
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 34
73098: PUSH
73099: LD_INT 51
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 34
73108: PUSH
73109: LD_INT 32
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 34
73118: PUSH
73119: LD_EXP 123
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: PPUSH
73135: CALL_OW 72
73139: ST_TO_ADDR
// end ;
73140: LD_VAR 0 2
73144: RET
// export function Negate ( value ) ; begin
73145: LD_INT 0
73147: PPUSH
// result := not value ;
73148: LD_ADDR_VAR 0 2
73152: PUSH
73153: LD_VAR 0 1
73157: NOT
73158: ST_TO_ADDR
// end ;
73159: LD_VAR 0 2
73163: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
73164: LD_INT 0
73166: PPUSH
// if x1 = x2 then
73167: LD_VAR 0 1
73171: PUSH
73172: LD_VAR 0 3
73176: EQUAL
73177: IFFALSE 73211
// begin if y1 > y2 then
73179: LD_VAR 0 2
73183: PUSH
73184: LD_VAR 0 4
73188: GREATER
73189: IFFALSE 73201
// result := 0 else
73191: LD_ADDR_VAR 0 5
73195: PUSH
73196: LD_INT 0
73198: ST_TO_ADDR
73199: GO 73209
// result := 3 ;
73201: LD_ADDR_VAR 0 5
73205: PUSH
73206: LD_INT 3
73208: ST_TO_ADDR
// exit ;
73209: GO 73297
// end ; if y1 = y2 then
73211: LD_VAR 0 2
73215: PUSH
73216: LD_VAR 0 4
73220: EQUAL
73221: IFFALSE 73255
// begin if x1 > x2 then
73223: LD_VAR 0 1
73227: PUSH
73228: LD_VAR 0 3
73232: GREATER
73233: IFFALSE 73245
// result := 1 else
73235: LD_ADDR_VAR 0 5
73239: PUSH
73240: LD_INT 1
73242: ST_TO_ADDR
73243: GO 73253
// result := 4 ;
73245: LD_ADDR_VAR 0 5
73249: PUSH
73250: LD_INT 4
73252: ST_TO_ADDR
// exit ;
73253: GO 73297
// end ; if x1 > x2 and y1 > y2 then
73255: LD_VAR 0 1
73259: PUSH
73260: LD_VAR 0 3
73264: GREATER
73265: PUSH
73266: LD_VAR 0 2
73270: PUSH
73271: LD_VAR 0 4
73275: GREATER
73276: AND
73277: IFFALSE 73289
// result := 2 else
73279: LD_ADDR_VAR 0 5
73283: PUSH
73284: LD_INT 2
73286: ST_TO_ADDR
73287: GO 73297
// result := 5 ;
73289: LD_ADDR_VAR 0 5
73293: PUSH
73294: LD_INT 5
73296: ST_TO_ADDR
// end ;
73297: LD_VAR 0 5
73301: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73302: LD_INT 0
73304: PPUSH
73305: PPUSH
// if not driver or not IsInUnit ( driver ) then
73306: LD_VAR 0 1
73310: NOT
73311: PUSH
73312: LD_VAR 0 1
73316: PPUSH
73317: CALL_OW 310
73321: NOT
73322: OR
73323: IFFALSE 73327
// exit ;
73325: GO 73417
// vehicle := IsInUnit ( driver ) ;
73327: LD_ADDR_VAR 0 3
73331: PUSH
73332: LD_VAR 0 1
73336: PPUSH
73337: CALL_OW 310
73341: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73342: LD_VAR 0 1
73346: PPUSH
73347: LD_STRING \
73349: PUSH
73350: LD_INT 0
73352: PUSH
73353: LD_INT 0
73355: PUSH
73356: LD_INT 0
73358: PUSH
73359: LD_INT 0
73361: PUSH
73362: LD_INT 0
73364: PUSH
73365: LD_INT 0
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: PUSH
73377: LD_STRING E
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: LD_VAR 0 3
73390: PUSH
73391: LD_INT 0
73393: PUSH
73394: LD_INT 0
73396: PUSH
73397: LD_INT 0
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PPUSH
73413: CALL_OW 446
// end ;
73417: LD_VAR 0 2
73421: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73422: LD_INT 0
73424: PPUSH
73425: PPUSH
// if not driver or not IsInUnit ( driver ) then
73426: LD_VAR 0 1
73430: NOT
73431: PUSH
73432: LD_VAR 0 1
73436: PPUSH
73437: CALL_OW 310
73441: NOT
73442: OR
73443: IFFALSE 73447
// exit ;
73445: GO 73537
// vehicle := IsInUnit ( driver ) ;
73447: LD_ADDR_VAR 0 3
73451: PUSH
73452: LD_VAR 0 1
73456: PPUSH
73457: CALL_OW 310
73461: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73462: LD_VAR 0 1
73466: PPUSH
73467: LD_STRING \
73469: PUSH
73470: LD_INT 0
73472: PUSH
73473: LD_INT 0
73475: PUSH
73476: LD_INT 0
73478: PUSH
73479: LD_INT 0
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: PUSH
73497: LD_STRING E
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: LD_INT 0
73505: PUSH
73506: LD_VAR 0 3
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: LD_INT 0
73516: PUSH
73517: LD_INT 0
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PPUSH
73533: CALL_OW 447
// end ;
73537: LD_VAR 0 2
73541: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73542: LD_INT 0
73544: PPUSH
73545: PPUSH
73546: PPUSH
// tmp := [ ] ;
73547: LD_ADDR_VAR 0 5
73551: PUSH
73552: EMPTY
73553: ST_TO_ADDR
// for i in units do
73554: LD_ADDR_VAR 0 4
73558: PUSH
73559: LD_VAR 0 1
73563: PUSH
73564: FOR_IN
73565: IFFALSE 73603
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73567: LD_ADDR_VAR 0 5
73571: PUSH
73572: LD_VAR 0 5
73576: PPUSH
73577: LD_VAR 0 5
73581: PUSH
73582: LD_INT 1
73584: PLUS
73585: PPUSH
73586: LD_VAR 0 4
73590: PPUSH
73591: CALL_OW 256
73595: PPUSH
73596: CALL_OW 2
73600: ST_TO_ADDR
73601: GO 73564
73603: POP
73604: POP
// if not tmp then
73605: LD_VAR 0 5
73609: NOT
73610: IFFALSE 73614
// exit ;
73612: GO 73662
// if asc then
73614: LD_VAR 0 2
73618: IFFALSE 73642
// result := SortListByListAsc ( units , tmp ) else
73620: LD_ADDR_VAR 0 3
73624: PUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: LD_VAR 0 5
73634: PPUSH
73635: CALL_OW 76
73639: ST_TO_ADDR
73640: GO 73662
// result := SortListByListDesc ( units , tmp ) ;
73642: LD_ADDR_VAR 0 3
73646: PUSH
73647: LD_VAR 0 1
73651: PPUSH
73652: LD_VAR 0 5
73656: PPUSH
73657: CALL_OW 77
73661: ST_TO_ADDR
// end ;
73662: LD_VAR 0 3
73666: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73667: LD_INT 0
73669: PPUSH
73670: PPUSH
// task := GetTaskList ( mech ) ;
73671: LD_ADDR_VAR 0 4
73675: PUSH
73676: LD_VAR 0 1
73680: PPUSH
73681: CALL_OW 437
73685: ST_TO_ADDR
// if not task then
73686: LD_VAR 0 4
73690: NOT
73691: IFFALSE 73695
// exit ;
73693: GO 73737
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73695: LD_ADDR_VAR 0 3
73699: PUSH
73700: LD_VAR 0 4
73704: PUSH
73705: LD_INT 1
73707: ARRAY
73708: PUSH
73709: LD_INT 1
73711: ARRAY
73712: PUSH
73713: LD_STRING r
73715: EQUAL
73716: PUSH
73717: LD_VAR 0 4
73721: PUSH
73722: LD_INT 1
73724: ARRAY
73725: PUSH
73726: LD_INT 4
73728: ARRAY
73729: PUSH
73730: LD_VAR 0 2
73734: EQUAL
73735: AND
73736: ST_TO_ADDR
// end ;
73737: LD_VAR 0 3
73741: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73742: LD_INT 0
73744: PPUSH
// SetDir ( unit , d ) ;
73745: LD_VAR 0 1
73749: PPUSH
73750: LD_VAR 0 4
73754: PPUSH
73755: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73759: LD_VAR 0 1
73763: PPUSH
73764: LD_VAR 0 2
73768: PPUSH
73769: LD_VAR 0 3
73773: PPUSH
73774: LD_VAR 0 5
73778: PPUSH
73779: CALL_OW 48
// end ;
73783: LD_VAR 0 6
73787: RET
// export function ToNaturalNumber ( number ) ; begin
73788: LD_INT 0
73790: PPUSH
// result := number div 1 ;
73791: LD_ADDR_VAR 0 2
73795: PUSH
73796: LD_VAR 0 1
73800: PUSH
73801: LD_INT 1
73803: DIV
73804: ST_TO_ADDR
// if number < 0 then
73805: LD_VAR 0 1
73809: PUSH
73810: LD_INT 0
73812: LESS
73813: IFFALSE 73823
// result := 0 ;
73815: LD_ADDR_VAR 0 2
73819: PUSH
73820: LD_INT 0
73822: ST_TO_ADDR
// end ;
73823: LD_VAR 0 2
73827: RET
// export function SortByClass ( units , class ) ; var un ; begin
73828: LD_INT 0
73830: PPUSH
73831: PPUSH
// if not units or not class then
73832: LD_VAR 0 1
73836: NOT
73837: PUSH
73838: LD_VAR 0 2
73842: NOT
73843: OR
73844: IFFALSE 73848
// exit ;
73846: GO 73943
// result := [ ] ;
73848: LD_ADDR_VAR 0 3
73852: PUSH
73853: EMPTY
73854: ST_TO_ADDR
// for un in units do
73855: LD_ADDR_VAR 0 4
73859: PUSH
73860: LD_VAR 0 1
73864: PUSH
73865: FOR_IN
73866: IFFALSE 73941
// if GetClass ( un ) = class then
73868: LD_VAR 0 4
73872: PPUSH
73873: CALL_OW 257
73877: PUSH
73878: LD_VAR 0 2
73882: EQUAL
73883: IFFALSE 73910
// result := Insert ( result , 1 , un ) else
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: LD_VAR 0 3
73894: PPUSH
73895: LD_INT 1
73897: PPUSH
73898: LD_VAR 0 4
73902: PPUSH
73903: CALL_OW 2
73907: ST_TO_ADDR
73908: GO 73939
// result := Replace ( result , result + 1 , un ) ;
73910: LD_ADDR_VAR 0 3
73914: PUSH
73915: LD_VAR 0 3
73919: PPUSH
73920: LD_VAR 0 3
73924: PUSH
73925: LD_INT 1
73927: PLUS
73928: PPUSH
73929: LD_VAR 0 4
73933: PPUSH
73934: CALL_OW 1
73938: ST_TO_ADDR
73939: GO 73865
73941: POP
73942: POP
// end ;
73943: LD_VAR 0 3
73947: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73948: LD_INT 0
73950: PPUSH
73951: PPUSH
73952: PPUSH
73953: PPUSH
73954: PPUSH
73955: PPUSH
73956: PPUSH
// result := [ ] ;
73957: LD_ADDR_VAR 0 4
73961: PUSH
73962: EMPTY
73963: ST_TO_ADDR
// if x - r < 0 then
73964: LD_VAR 0 1
73968: PUSH
73969: LD_VAR 0 3
73973: MINUS
73974: PUSH
73975: LD_INT 0
73977: LESS
73978: IFFALSE 73990
// min_x := 0 else
73980: LD_ADDR_VAR 0 8
73984: PUSH
73985: LD_INT 0
73987: ST_TO_ADDR
73988: GO 74006
// min_x := x - r ;
73990: LD_ADDR_VAR 0 8
73994: PUSH
73995: LD_VAR 0 1
73999: PUSH
74000: LD_VAR 0 3
74004: MINUS
74005: ST_TO_ADDR
// if y - r < 0 then
74006: LD_VAR 0 2
74010: PUSH
74011: LD_VAR 0 3
74015: MINUS
74016: PUSH
74017: LD_INT 0
74019: LESS
74020: IFFALSE 74032
// min_y := 0 else
74022: LD_ADDR_VAR 0 7
74026: PUSH
74027: LD_INT 0
74029: ST_TO_ADDR
74030: GO 74048
// min_y := y - r ;
74032: LD_ADDR_VAR 0 7
74036: PUSH
74037: LD_VAR 0 2
74041: PUSH
74042: LD_VAR 0 3
74046: MINUS
74047: ST_TO_ADDR
// max_x := x + r ;
74048: LD_ADDR_VAR 0 9
74052: PUSH
74053: LD_VAR 0 1
74057: PUSH
74058: LD_VAR 0 3
74062: PLUS
74063: ST_TO_ADDR
// max_y := y + r ;
74064: LD_ADDR_VAR 0 10
74068: PUSH
74069: LD_VAR 0 2
74073: PUSH
74074: LD_VAR 0 3
74078: PLUS
74079: ST_TO_ADDR
// for _x = min_x to max_x do
74080: LD_ADDR_VAR 0 5
74084: PUSH
74085: DOUBLE
74086: LD_VAR 0 8
74090: DEC
74091: ST_TO_ADDR
74092: LD_VAR 0 9
74096: PUSH
74097: FOR_TO
74098: IFFALSE 74199
// for _y = min_y to max_y do
74100: LD_ADDR_VAR 0 6
74104: PUSH
74105: DOUBLE
74106: LD_VAR 0 7
74110: DEC
74111: ST_TO_ADDR
74112: LD_VAR 0 10
74116: PUSH
74117: FOR_TO
74118: IFFALSE 74195
// begin if not ValidHex ( _x , _y ) then
74120: LD_VAR 0 5
74124: PPUSH
74125: LD_VAR 0 6
74129: PPUSH
74130: CALL_OW 488
74134: NOT
74135: IFFALSE 74139
// continue ;
74137: GO 74117
// if GetResourceTypeXY ( _x , _y ) then
74139: LD_VAR 0 5
74143: PPUSH
74144: LD_VAR 0 6
74148: PPUSH
74149: CALL_OW 283
74153: IFFALSE 74193
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74155: LD_ADDR_VAR 0 4
74159: PUSH
74160: LD_VAR 0 4
74164: PPUSH
74165: LD_VAR 0 4
74169: PUSH
74170: LD_INT 1
74172: PLUS
74173: PPUSH
74174: LD_VAR 0 5
74178: PUSH
74179: LD_VAR 0 6
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PPUSH
74188: CALL_OW 1
74192: ST_TO_ADDR
// end ;
74193: GO 74117
74195: POP
74196: POP
74197: GO 74097
74199: POP
74200: POP
// end ;
74201: LD_VAR 0 4
74205: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
74206: LD_INT 0
74208: PPUSH
74209: PPUSH
74210: PPUSH
74211: PPUSH
74212: PPUSH
74213: PPUSH
// if not units then
74214: LD_VAR 0 1
74218: NOT
74219: IFFALSE 74223
// exit ;
74221: GO 74624
// result := UnitFilter ( units , [ f_ok ] ) ;
74223: LD_ADDR_VAR 0 3
74227: PUSH
74228: LD_VAR 0 1
74232: PPUSH
74233: LD_INT 50
74235: PUSH
74236: EMPTY
74237: LIST
74238: PPUSH
74239: CALL_OW 72
74243: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74244: LD_ADDR_VAR 0 7
74248: PUSH
74249: LD_VAR 0 1
74253: PUSH
74254: LD_INT 1
74256: ARRAY
74257: PPUSH
74258: CALL_OW 255
74262: ST_TO_ADDR
// if not result then
74263: LD_VAR 0 3
74267: NOT
74268: IFFALSE 74272
// exit ;
74270: GO 74624
// for i in result do
74272: LD_ADDR_VAR 0 4
74276: PUSH
74277: LD_VAR 0 3
74281: PUSH
74282: FOR_IN
74283: IFFALSE 74622
// begin tag := GetTag ( i ) + 1 ;
74285: LD_ADDR_VAR 0 8
74289: PUSH
74290: LD_VAR 0 4
74294: PPUSH
74295: CALL_OW 110
74299: PUSH
74300: LD_INT 1
74302: PLUS
74303: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74304: LD_ADDR_VAR 0 6
74308: PUSH
74309: LD_VAR 0 4
74313: PPUSH
74314: CALL_OW 250
74318: PPUSH
74319: LD_VAR 0 4
74323: PPUSH
74324: CALL_OW 251
74328: PPUSH
74329: LD_INT 6
74331: PPUSH
74332: CALL 73948 0 3
74336: ST_TO_ADDR
// if cr then
74337: LD_VAR 0 6
74341: IFFALSE 74380
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74343: LD_VAR 0 4
74347: PPUSH
74348: LD_VAR 0 6
74352: PUSH
74353: LD_INT 1
74355: ARRAY
74356: PUSH
74357: LD_INT 1
74359: ARRAY
74360: PPUSH
74361: LD_VAR 0 6
74365: PUSH
74366: LD_INT 1
74368: ARRAY
74369: PUSH
74370: LD_INT 2
74372: ARRAY
74373: PPUSH
74374: CALL_OW 116
74378: GO 74620
// if path > tag then
74380: LD_VAR 0 2
74384: PUSH
74385: LD_VAR 0 8
74389: GREATER
74390: IFFALSE 74568
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
74392: LD_ADDR_VAR 0 5
74396: PUSH
74397: LD_INT 81
74399: PUSH
74400: LD_VAR 0 7
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 91
74411: PUSH
74412: LD_VAR 0 4
74416: PUSH
74417: LD_INT 12
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PPUSH
74429: CALL_OW 69
74433: ST_TO_ADDR
// if enemy then
74434: LD_VAR 0 5
74438: IFFALSE 74466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74440: LD_VAR 0 4
74444: PPUSH
74445: LD_VAR 0 5
74449: PPUSH
74450: LD_VAR 0 4
74454: PPUSH
74455: CALL_OW 74
74459: PPUSH
74460: CALL_OW 115
74464: GO 74566
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74466: LD_VAR 0 4
74470: PPUSH
74471: LD_VAR 0 2
74475: PUSH
74476: LD_VAR 0 8
74480: ARRAY
74481: PUSH
74482: LD_INT 1
74484: ARRAY
74485: PPUSH
74486: LD_VAR 0 2
74490: PUSH
74491: LD_VAR 0 8
74495: ARRAY
74496: PUSH
74497: LD_INT 2
74499: ARRAY
74500: PPUSH
74501: CALL_OW 297
74505: PUSH
74506: LD_INT 6
74508: GREATER
74509: IFFALSE 74552
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74511: LD_VAR 0 4
74515: PPUSH
74516: LD_VAR 0 2
74520: PUSH
74521: LD_VAR 0 8
74525: ARRAY
74526: PUSH
74527: LD_INT 1
74529: ARRAY
74530: PPUSH
74531: LD_VAR 0 2
74535: PUSH
74536: LD_VAR 0 8
74540: ARRAY
74541: PUSH
74542: LD_INT 2
74544: ARRAY
74545: PPUSH
74546: CALL_OW 114
74550: GO 74566
// SetTag ( i , tag ) ;
74552: LD_VAR 0 4
74556: PPUSH
74557: LD_VAR 0 8
74561: PPUSH
74562: CALL_OW 109
// end else
74566: GO 74620
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74568: LD_ADDR_VAR 0 5
74572: PUSH
74573: LD_INT 81
74575: PUSH
74576: LD_VAR 0 7
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PPUSH
74585: CALL_OW 69
74589: ST_TO_ADDR
// if enemy then
74590: LD_VAR 0 5
74594: IFFALSE 74620
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74596: LD_VAR 0 4
74600: PPUSH
74601: LD_VAR 0 5
74605: PPUSH
74606: LD_VAR 0 4
74610: PPUSH
74611: CALL_OW 74
74615: PPUSH
74616: CALL_OW 115
// end ; end ;
74620: GO 74282
74622: POP
74623: POP
// end ; end_of_file
74624: LD_VAR 0 3
74628: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74629: LD_VAR 0 1
74633: PPUSH
74634: LD_VAR 0 2
74638: PPUSH
74639: LD_VAR 0 3
74643: PPUSH
74644: LD_VAR 0 4
74648: PPUSH
74649: LD_VAR 0 5
74653: PPUSH
74654: LD_VAR 0 6
74658: PPUSH
74659: CALL 16953 0 6
// end ;
74663: PPOPN 6
74665: END
