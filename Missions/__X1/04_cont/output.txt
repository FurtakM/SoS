// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1760 0 0
// PrepareArabian ;
  12: CALL 1949 0 0
// PrepareAmerican ;
  16: CALL 6495 0 0
// PrepareRussian ;
  20: CALL 2870 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8055 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 22 22$00 , 21 21$00 , 20 20$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 46200
 180: PUSH
 181: LD_INT 44100
 183: PUSH
 184: LD_INT 42000
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// end ; end_of_file
 261: LD_VAR 0 1
 265: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// if exist_mode then
 270: LD_VAR 0 2
 274: IFFALSE 299
// unit := CreateCharacter ( prefix & ident ) else
 276: LD_ADDR_VAR 0 5
 280: PUSH
 281: LD_VAR 0 3
 285: PUSH
 286: LD_VAR 0 1
 290: STR
 291: PPUSH
 292: CALL_OW 34
 296: ST_TO_ADDR
 297: GO 314
// unit := NewCharacter ( ident ) ;
 299: LD_ADDR_VAR 0 5
 303: PUSH
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 25
 313: ST_TO_ADDR
// result := unit ;
 314: LD_ADDR_VAR 0 4
 318: PUSH
 319: LD_VAR 0 5
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 4
 328: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 329: LD_INT 0
 331: PPUSH
// uc_side := side ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_VAR 0 1
 341: ST_TO_ADDR
// uc_nation := nation ;
 342: LD_ADDR_OWVAR 21
 346: PUSH
 347: LD_VAR 0 2
 351: ST_TO_ADDR
// vc_chassis := chassis ;
 352: LD_ADDR_OWVAR 37
 356: PUSH
 357: LD_VAR 0 3
 361: ST_TO_ADDR
// vc_engine := engine ;
 362: LD_ADDR_OWVAR 39
 366: PUSH
 367: LD_VAR 0 4
 371: ST_TO_ADDR
// vc_control := control ;
 372: LD_ADDR_OWVAR 38
 376: PUSH
 377: LD_VAR 0 5
 381: ST_TO_ADDR
// vc_weapon := weapon ;
 382: LD_ADDR_OWVAR 40
 386: PUSH
 387: LD_VAR 0 6
 391: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 392: LD_ADDR_OWVAR 41
 396: PUSH
 397: LD_VAR 0 7
 401: ST_TO_ADDR
// result := CreateVehicle ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: CALL_OW 45
 411: ST_TO_ADDR
// end ;
 412: LD_VAR 0 8
 416: RET
// export function SayX ( units , ident ) ; var i ; begin
 417: LD_INT 0
 419: PPUSH
 420: PPUSH
// result := false ;
 421: LD_ADDR_VAR 0 3
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// if not units then
 429: LD_VAR 0 1
 433: NOT
 434: IFFALSE 438
// exit ;
 436: GO 492
// for i in units do
 438: LD_ADDR_VAR 0 4
 442: PUSH
 443: LD_VAR 0 1
 447: PUSH
 448: FOR_IN
 449: IFFALSE 490
// if IsOk ( i ) then
 451: LD_VAR 0 4
 455: PPUSH
 456: CALL_OW 302
 460: IFFALSE 488
// begin Say ( i , ident ) ;
 462: LD_VAR 0 4
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: CALL_OW 88
// result := i ;
 476: LD_ADDR_VAR 0 3
 480: PUSH
 481: LD_VAR 0 4
 485: ST_TO_ADDR
// break ;
 486: GO 490
// end ;
 488: GO 448
 490: POP
 491: POP
// end ;
 492: LD_VAR 0 3
 496: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 497: LD_INT 0
 499: PPUSH
 500: PPUSH
 501: PPUSH
// if not observer or not unit then
 502: LD_VAR 0 1
 506: NOT
 507: PUSH
 508: LD_VAR 0 2
 512: NOT
 513: OR
 514: IFFALSE 518
// exit ;
 516: GO 566
// if not See ( GetSide ( observer ) , unit ) then
 518: LD_VAR 0 1
 522: PPUSH
 523: CALL_OW 255
 527: PPUSH
 528: LD_VAR 0 2
 532: PPUSH
 533: CALL_OW 292
 537: NOT
 538: IFFALSE 542
// exit ;
 540: GO 566
// result := GetDistUnits ( observer , unit ) < 12 ;
 542: LD_ADDR_VAR 0 3
 546: PUSH
 547: LD_VAR 0 1
 551: PPUSH
 552: LD_VAR 0 2
 556: PPUSH
 557: CALL_OW 296
 561: PUSH
 562: LD_INT 12
 564: LESS
 565: ST_TO_ADDR
// end ;
 566: LD_VAR 0 3
 570: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 571: LD_INT 0
 573: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 574: LD_VAR 0 2
 578: PUSH
 579: LD_INT 1
 581: ARRAY
 582: PPUSH
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: CALL_OW 488
 596: PUSH
 597: LD_VAR 0 2
 601: PUSH
 602: LD_INT 1
 604: ARRAY
 605: PPUSH
 606: LD_VAR 0 2
 610: PUSH
 611: LD_INT 2
 613: ARRAY
 614: PPUSH
 615: CALL_OW 428
 619: PUSH
 620: LD_INT 0
 622: EQUAL
 623: AND
 624: IFFALSE 658
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 626: LD_VAR 0 1
 630: PPUSH
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: LD_VAR 0 3
 653: PPUSH
 654: CALL_OW 48
// end ;
 658: LD_VAR 0 4
 662: RET
// export function Video ( mode ) ; begin
 663: LD_INT 0
 665: PPUSH
// ingame_video = mode ;
 666: LD_ADDR_OWVAR 52
 670: PUSH
 671: LD_VAR 0 1
 675: ST_TO_ADDR
// interface_hidden = mode ;
 676: LD_ADDR_OWVAR 54
 680: PUSH
 681: LD_VAR 0 1
 685: ST_TO_ADDR
// end ;
 686: LD_VAR 0 2
 690: RET
// export function ReverseArray ( array ) ; var i ; begin
 691: LD_INT 0
 693: PPUSH
 694: PPUSH
// if not array then
 695: LD_VAR 0 1
 699: NOT
 700: IFFALSE 704
// exit ;
 702: GO 762
// result := [ ] ;
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: EMPTY
 710: ST_TO_ADDR
// for i := 1 to array do
 711: LD_ADDR_VAR 0 3
 715: PUSH
 716: DOUBLE
 717: LD_INT 1
 719: DEC
 720: ST_TO_ADDR
 721: LD_VAR 0 1
 725: PUSH
 726: FOR_TO
 727: IFFALSE 760
// result := Insert ( result , 1 , array [ i ] ) ;
 729: LD_ADDR_VAR 0 2
 733: PUSH
 734: LD_VAR 0 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_VAR 0 1
 746: PUSH
 747: LD_VAR 0 3
 751: ARRAY
 752: PPUSH
 753: CALL_OW 2
 757: ST_TO_ADDR
 758: GO 726
 760: POP
 761: POP
// end ;
 762: LD_VAR 0 2
 766: RET
// export function ComExit ( unit ) ; begin
 767: LD_INT 0
 769: PPUSH
// result := IsInUnit ( unit ) ;
 770: LD_ADDR_VAR 0 2
 774: PUSH
 775: LD_VAR 0 1
 779: PPUSH
 780: CALL_OW 310
 784: ST_TO_ADDR
// if not result then
 785: LD_VAR 0 2
 789: NOT
 790: IFFALSE 794
// exit ;
 792: GO 829
// if GetType ( result ) = unit_vehicle then
 794: LD_VAR 0 2
 798: PPUSH
 799: CALL_OW 247
 803: PUSH
 804: LD_INT 2
 806: EQUAL
 807: IFFALSE 820
// ComExitVehicle ( unit ) else
 809: LD_VAR 0 1
 813: PPUSH
 814: CALL_OW 121
 818: GO 829
// ComExitBuilding ( unit ) ;
 820: LD_VAR 0 1
 824: PPUSH
 825: CALL_OW 122
// end ;
 829: LD_VAR 0 2
 833: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
// if not side or not nation then
 838: LD_VAR 0 1
 842: NOT
 843: PUSH
 844: LD_VAR 0 2
 848: NOT
 849: OR
 850: IFFALSE 854
// exit ;
 852: GO 1618
// case nation of nation_american :
 854: LD_VAR 0 2
 858: PUSH
 859: LD_INT 1
 861: DOUBLE
 862: EQUAL
 863: IFTRUE 867
 865: GO 1081
 867: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 868: LD_ADDR_VAR 0 4
 872: PUSH
 873: LD_INT 35
 875: PUSH
 876: LD_INT 45
 878: PUSH
 879: LD_INT 46
 881: PUSH
 882: LD_INT 47
 884: PUSH
 885: LD_INT 82
 887: PUSH
 888: LD_INT 83
 890: PUSH
 891: LD_INT 84
 893: PUSH
 894: LD_INT 85
 896: PUSH
 897: LD_INT 86
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: LD_INT 6
 908: PUSH
 909: LD_INT 15
 911: PUSH
 912: LD_INT 16
 914: PUSH
 915: LD_INT 7
 917: PUSH
 918: LD_INT 12
 920: PUSH
 921: LD_INT 13
 923: PUSH
 924: LD_INT 10
 926: PUSH
 927: LD_INT 14
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 21
 935: PUSH
 936: LD_INT 22
 938: PUSH
 939: LD_INT 25
 941: PUSH
 942: LD_INT 32
 944: PUSH
 945: LD_INT 27
 947: PUSH
 948: LD_INT 36
 950: PUSH
 951: LD_INT 69
 953: PUSH
 954: LD_INT 39
 956: PUSH
 957: LD_INT 34
 959: PUSH
 960: LD_INT 40
 962: PUSH
 963: LD_INT 48
 965: PUSH
 966: LD_INT 49
 968: PUSH
 969: LD_INT 50
 971: PUSH
 972: LD_INT 51
 974: PUSH
 975: LD_INT 52
 977: PUSH
 978: LD_INT 53
 980: PUSH
 981: LD_INT 54
 983: PUSH
 984: LD_INT 55
 986: PUSH
 987: LD_INT 56
 989: PUSH
 990: LD_INT 57
 992: PUSH
 993: LD_INT 58
 995: PUSH
 996: LD_INT 59
 998: PUSH
 999: LD_INT 60
1001: PUSH
1002: LD_INT 61
1004: PUSH
1005: LD_INT 62
1007: PUSH
1008: LD_INT 80
1010: PUSH
1011: LD_INT 82
1013: PUSH
1014: LD_INT 83
1016: PUSH
1017: LD_INT 84
1019: PUSH
1020: LD_INT 85
1022: PUSH
1023: LD_INT 86
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
1079: GO 1542
1081: LD_INT 2
1083: DOUBLE
1084: EQUAL
1085: IFTRUE 1089
1087: GO 1311
1089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 35
1097: PUSH
1098: LD_INT 45
1100: PUSH
1101: LD_INT 46
1103: PUSH
1104: LD_INT 47
1106: PUSH
1107: LD_INT 82
1109: PUSH
1110: LD_INT 83
1112: PUSH
1113: LD_INT 84
1115: PUSH
1116: LD_INT 85
1118: PUSH
1119: LD_INT 87
1121: PUSH
1122: LD_INT 70
1124: PUSH
1125: LD_INT 1
1127: PUSH
1128: LD_INT 11
1130: PUSH
1131: LD_INT 3
1133: PUSH
1134: LD_INT 4
1136: PUSH
1137: LD_INT 5
1139: PUSH
1140: LD_INT 6
1142: PUSH
1143: LD_INT 15
1145: PUSH
1146: LD_INT 18
1148: PUSH
1149: LD_INT 7
1151: PUSH
1152: LD_INT 17
1154: PUSH
1155: LD_INT 8
1157: PUSH
1158: LD_INT 20
1160: PUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 22
1166: PUSH
1167: LD_INT 72
1169: PUSH
1170: LD_INT 26
1172: PUSH
1173: LD_INT 69
1175: PUSH
1176: LD_INT 39
1178: PUSH
1179: LD_INT 40
1181: PUSH
1182: LD_INT 41
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: LD_INT 43
1190: PUSH
1191: LD_INT 48
1193: PUSH
1194: LD_INT 49
1196: PUSH
1197: LD_INT 50
1199: PUSH
1200: LD_INT 51
1202: PUSH
1203: LD_INT 52
1205: PUSH
1206: LD_INT 53
1208: PUSH
1209: LD_INT 54
1211: PUSH
1212: LD_INT 55
1214: PUSH
1215: LD_INT 56
1217: PUSH
1218: LD_INT 60
1220: PUSH
1221: LD_INT 61
1223: PUSH
1224: LD_INT 62
1226: PUSH
1227: LD_INT 66
1229: PUSH
1230: LD_INT 67
1232: PUSH
1233: LD_INT 68
1235: PUSH
1236: LD_INT 81
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 83
1244: PUSH
1245: LD_INT 84
1247: PUSH
1248: LD_INT 85
1250: PUSH
1251: LD_INT 87
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
1309: GO 1542
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1541
1319: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 46
1327: PUSH
1328: LD_INT 47
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 82
1339: PUSH
1340: LD_INT 83
1342: PUSH
1343: LD_INT 84
1345: PUSH
1346: LD_INT 85
1348: PUSH
1349: LD_INT 86
1351: PUSH
1352: LD_INT 11
1354: PUSH
1355: LD_INT 9
1357: PUSH
1358: LD_INT 20
1360: PUSH
1361: LD_INT 19
1363: PUSH
1364: LD_INT 21
1366: PUSH
1367: LD_INT 24
1369: PUSH
1370: LD_INT 22
1372: PUSH
1373: LD_INT 25
1375: PUSH
1376: LD_INT 28
1378: PUSH
1379: LD_INT 29
1381: PUSH
1382: LD_INT 30
1384: PUSH
1385: LD_INT 31
1387: PUSH
1388: LD_INT 37
1390: PUSH
1391: LD_INT 38
1393: PUSH
1394: LD_INT 32
1396: PUSH
1397: LD_INT 27
1399: PUSH
1400: LD_INT 33
1402: PUSH
1403: LD_INT 69
1405: PUSH
1406: LD_INT 39
1408: PUSH
1409: LD_INT 34
1411: PUSH
1412: LD_INT 40
1414: PUSH
1415: LD_INT 71
1417: PUSH
1418: LD_INT 23
1420: PUSH
1421: LD_INT 44
1423: PUSH
1424: LD_INT 48
1426: PUSH
1427: LD_INT 49
1429: PUSH
1430: LD_INT 50
1432: PUSH
1433: LD_INT 51
1435: PUSH
1436: LD_INT 52
1438: PUSH
1439: LD_INT 53
1441: PUSH
1442: LD_INT 54
1444: PUSH
1445: LD_INT 55
1447: PUSH
1448: LD_INT 56
1450: PUSH
1451: LD_INT 57
1453: PUSH
1454: LD_INT 58
1456: PUSH
1457: LD_INT 59
1459: PUSH
1460: LD_INT 63
1462: PUSH
1463: LD_INT 64
1465: PUSH
1466: LD_INT 65
1468: PUSH
1469: LD_INT 82
1471: PUSH
1472: LD_INT 83
1474: PUSH
1475: LD_INT 84
1477: PUSH
1478: LD_INT 85
1480: PUSH
1481: LD_INT 86
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: ST_TO_ADDR
1539: GO 1542
1541: POP
// if state > - 1 and state < 3 then
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 1
1549: NEG
1550: GREATER
1551: PUSH
1552: LD_VAR 0 3
1556: PUSH
1557: LD_INT 3
1559: LESS
1560: AND
1561: IFFALSE 1618
// for i in result do
1563: LD_ADDR_VAR 0 5
1567: PUSH
1568: LD_VAR 0 4
1572: PUSH
1573: FOR_IN
1574: IFFALSE 1616
// if GetTech ( i , side ) <> state then
1576: LD_VAR 0 5
1580: PPUSH
1581: LD_VAR 0 1
1585: PPUSH
1586: CALL_OW 321
1590: PUSH
1591: LD_VAR 0 3
1595: NONEQUAL
1596: IFFALSE 1614
// result := result diff i ;
1598: LD_ADDR_VAR 0 4
1602: PUSH
1603: LD_VAR 0 4
1607: PUSH
1608: LD_VAR 0 5
1612: DIFF
1613: ST_TO_ADDR
1614: GO 1573
1616: POP
1617: POP
// end ;
1618: LD_VAR 0 4
1622: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1623: LD_INT 0
1625: PPUSH
1626: PPUSH
// InitUc ;
1627: CALL_OW 18
// InitHc ;
1631: CALL_OW 19
// uc_side := 0 ;
1635: LD_ADDR_OWVAR 20
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// uc_nation := 0 ;
1643: LD_ADDR_OWVAR 21
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// for i = 1 to amount do
1651: LD_ADDR_VAR 0 4
1655: PUSH
1656: DOUBLE
1657: LD_INT 1
1659: DEC
1660: ST_TO_ADDR
1661: LD_VAR 0 2
1665: PUSH
1666: FOR_TO
1667: IFFALSE 1749
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1669: LD_ADDR_OWVAR 29
1673: PUSH
1674: LD_INT 9
1676: PPUSH
1677: LD_INT 12
1679: PPUSH
1680: CALL_OW 12
1684: PUSH
1685: LD_INT 9
1687: PPUSH
1688: LD_INT 12
1690: PPUSH
1691: CALL_OW 12
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1700: LD_ADDR_OWVAR 35
1704: PUSH
1705: LD_INT 1
1707: NEG
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: CALL_OW 12
1716: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 12
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1730: CALL_OW 44
1734: PPUSH
1735: LD_VAR 0 1
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// end ;
1747: GO 1666
1749: POP
1750: POP
// InitHc ;
1751: CALL_OW 19
// end ;
1755: LD_VAR 0 3
1759: RET
// export function PrepareNature ; var i ; begin
1760: LD_INT 0
1762: PPUSH
1763: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1764: LD_INT 18
1766: PPUSH
1767: LD_INT 5
1769: PUSH
1770: LD_INT 4
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_OWVAR 67
1785: ARRAY
1786: PPUSH
1787: CALL 1623 0 2
// for i := 1 to 3 do
1791: LD_ADDR_VAR 0 2
1795: PUSH
1796: DOUBLE
1797: LD_INT 1
1799: DEC
1800: ST_TO_ADDR
1801: LD_INT 3
1803: PUSH
1804: FOR_TO
1805: IFFALSE 1840
// begin hc_class := 21 ;
1807: LD_ADDR_OWVAR 28
1811: PUSH
1812: LD_INT 21
1814: ST_TO_ADDR
// hc_gallery :=  ;
1815: LD_ADDR_OWVAR 33
1819: PUSH
1820: LD_STRING 
1822: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1823: CALL_OW 44
1827: PPUSH
1828: LD_INT 18
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 49
// end ;
1838: GO 1804
1840: POP
1841: POP
// for i := 1 to 2 do
1842: LD_ADDR_VAR 0 2
1846: PUSH
1847: DOUBLE
1848: LD_INT 1
1850: DEC
1851: ST_TO_ADDR
1852: LD_INT 2
1854: PUSH
1855: FOR_TO
1856: IFFALSE 1891
// begin hc_class := 18 ;
1858: LD_ADDR_OWVAR 28
1862: PUSH
1863: LD_INT 18
1865: ST_TO_ADDR
// hc_gallery :=  ;
1866: LD_ADDR_OWVAR 33
1870: PUSH
1871: LD_STRING 
1873: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1874: CALL_OW 44
1878: PPUSH
1879: LD_INT 18
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// end ;
1889: GO 1855
1891: POP
1892: POP
// for i := 1 to 2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: DOUBLE
1899: LD_INT 1
1901: DEC
1902: ST_TO_ADDR
1903: LD_INT 2
1905: PUSH
1906: FOR_TO
1907: IFFALSE 1942
// begin hc_class := 13 ;
1909: LD_ADDR_OWVAR 28
1913: PUSH
1914: LD_INT 13
1916: ST_TO_ADDR
// hc_gallery :=  ;
1917: LD_ADDR_OWVAR 33
1921: PUSH
1922: LD_STRING 
1924: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1925: CALL_OW 44
1929: PPUSH
1930: LD_INT 18
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 49
// end ;
1940: GO 1906
1942: POP
1943: POP
// end ; end_of_file
1944: LD_VAR 0 1
1948: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1949: LD_INT 0
1951: PPUSH
1952: PPUSH
// uc_side := 2 ;
1953: LD_ADDR_OWVAR 20
1957: PUSH
1958: LD_INT 2
1960: ST_TO_ADDR
// uc_nation := 2 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 2
1968: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1969: LD_ADDR_EXP 23
1973: PUSH
1974: LD_STRING Heike
1976: PPUSH
1977: LD_EXP 1
1981: NOT
1982: PPUSH
1983: LD_EXP 2
1987: PPUSH
1988: CALL 266 0 3
1992: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1993: LD_ADDR_EXP 26
1997: PUSH
1998: LD_STRING Ibrahim
2000: PPUSH
2001: LD_EXP 1
2005: NOT
2006: PPUSH
2007: LD_EXP 2
2011: PPUSH
2012: CALL 266 0 3
2016: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2017: LD_ADDR_EXP 24
2021: PUSH
2022: LD_STRING Givi
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_EXP 2
2035: PPUSH
2036: CALL 266 0 3
2040: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2041: LD_ADDR_EXP 27
2045: PUSH
2046: LD_STRING Kamil
2048: PPUSH
2049: LD_EXP 1
2053: NOT
2054: PPUSH
2055: LD_EXP 2
2059: PPUSH
2060: CALL 266 0 3
2064: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2065: LD_ADDR_EXP 28
2069: PUSH
2070: LD_STRING Kaia
2072: PPUSH
2073: LD_EXP 1
2077: NOT
2078: PPUSH
2079: LD_EXP 2
2083: PPUSH
2084: CALL 266 0 3
2088: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2089: LD_ADDR_EXP 29
2093: PUSH
2094: LD_STRING Sophia
2096: PPUSH
2097: LD_EXP 1
2101: NOT
2102: PPUSH
2103: LD_EXP 2
2107: PPUSH
2108: CALL 266 0 3
2112: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2113: LD_ADDR_EXP 30
2117: PUSH
2118: LD_STRING Markov
2120: PPUSH
2121: LD_EXP 1
2125: NOT
2126: PPUSH
2127: LD_EXP 2
2131: PPUSH
2132: CALL 266 0 3
2136: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2137: LD_ADDR_EXP 33
2141: PUSH
2142: LD_STRING Aviradze
2144: PPUSH
2145: LD_EXP 1
2149: NOT
2150: PPUSH
2151: LD_EXP 2
2155: PPUSH
2156: CALL 266 0 3
2160: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2161: LD_ADDR_EXP 36
2165: PUSH
2166: EMPTY
2167: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2168: LD_ADDR_EXP 34
2172: PUSH
2173: LD_STRING 03_others
2175: PPUSH
2176: CALL_OW 31
2180: ST_TO_ADDR
// uc_side := 5 ;
2181: LD_ADDR_OWVAR 20
2185: PUSH
2186: LD_INT 5
2188: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2189: LD_ADDR_EXP 32
2193: PUSH
2194: LD_STRING Kurt
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: LD_STRING 
2202: PPUSH
2203: CALL 266 0 3
2207: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2208: LD_ADDR_EXP 25
2212: PUSH
2213: LD_STRING Mike
2215: PPUSH
2216: LD_EXP 1
2220: NOT
2221: PPUSH
2222: LD_EXP 2
2226: PPUSH
2227: CALL 266 0 3
2231: ST_TO_ADDR
// if Mike then
2232: LD_EXP 25
2236: IFFALSE 2259
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2238: LD_EXP 25
2242: PPUSH
2243: LD_INT 142
2245: PPUSH
2246: LD_INT 63
2248: PPUSH
2249: LD_INT 2
2251: PPUSH
2252: LD_INT 0
2254: PPUSH
2255: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2259: LD_EXP 32
2263: PPUSH
2264: LD_INT 142
2266: PPUSH
2267: LD_INT 63
2269: PPUSH
2270: LD_INT 3
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2280: LD_EXP 32
2284: PUSH
2285: LD_EXP 25
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 140
// end ;
2298: LD_VAR 0 1
2302: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2303: LD_INT 0
2305: PPUSH
2306: PPUSH
2307: PPUSH
2308: PPUSH
// uc_side := 5 ;
2309: LD_ADDR_OWVAR 20
2313: PUSH
2314: LD_INT 5
2316: ST_TO_ADDR
// uc_nation := 2 ;
2317: LD_ADDR_OWVAR 21
2321: PUSH
2322: LD_INT 2
2324: ST_TO_ADDR
// InitHc ;
2325: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2329: LD_ADDR_EXP 31
2333: PUSH
2334: LD_STRING Omar
2336: PPUSH
2337: LD_INT 0
2339: PPUSH
2340: LD_STRING 
2342: PPUSH
2343: CALL 266 0 3
2347: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2348: LD_EXP 31
2352: PPUSH
2353: LD_INT 284
2355: PPUSH
2356: LD_INT 163
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2366: LD_EXP 31
2370: PPUSH
2371: LD_INT 256
2373: PPUSH
2374: LD_INT 129
2376: PPUSH
2377: CALL_OW 111
// wait ( 0 0$2 ) ;
2381: LD_INT 70
2383: PPUSH
2384: CALL_OW 67
// omarSquad := [ ] ;
2388: LD_ADDR_EXP 35
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// for i := 1 to 5 do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: DOUBLE
2401: LD_INT 1
2403: DEC
2404: ST_TO_ADDR
2405: LD_INT 5
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2615
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2411: LD_INT 5
2413: PPUSH
2414: LD_INT 2
2416: PPUSH
2417: LD_INT 13
2419: PUSH
2420: LD_INT 14
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_VAR 0 2
2431: PUSH
2432: LD_INT 2
2434: MOD
2435: PUSH
2436: LD_INT 1
2438: PLUS
2439: ARRAY
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: LD_INT 25
2449: PUSH
2450: LD_INT 27
2452: PUSH
2453: LD_INT 26
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_VAR 0 2
2465: PUSH
2466: LD_INT 3
2468: MOD
2469: PUSH
2470: LD_INT 1
2472: PLUS
2473: ARRAY
2474: PPUSH
2475: LD_INT 100
2477: PPUSH
2478: CALL 329 0 7
// veh := CreateVehicle ;
2482: LD_ADDR_VAR 0 4
2486: PUSH
2487: CALL_OW 45
2491: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2492: LD_VAR 0 4
2496: PPUSH
2497: LD_INT 5
2499: PPUSH
2500: CALL_OW 233
// omarSquad := omarSquad union veh ;
2504: LD_ADDR_EXP 35
2508: PUSH
2509: LD_EXP 35
2513: PUSH
2514: LD_VAR 0 4
2518: UNION
2519: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 284
2527: PPUSH
2528: LD_INT 163
2530: PPUSH
2531: LD_INT 0
2533: PPUSH
2534: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2538: LD_INT 0
2540: PPUSH
2541: LD_INT 3
2543: PPUSH
2544: LD_INT 3
2546: PPUSH
2547: CALL_OW 380
// un := CreateHuman ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: CALL_OW 44
2560: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2561: LD_ADDR_EXP 35
2565: PUSH
2566: LD_EXP 35
2570: PUSH
2571: LD_VAR 0 3
2575: UNION
2576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2591: LD_VAR 0 3
2595: PPUSH
2596: LD_INT 271
2598: PPUSH
2599: LD_INT 144
2601: PPUSH
2602: CALL_OW 111
// wait ( 0 0$2 ) ;
2606: LD_INT 70
2608: PPUSH
2609: CALL_OW 67
// end ;
2613: GO 2408
2615: POP
2616: POP
// for i := 1 to 3 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 3
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2714
// begin PrepareHuman ( false , 1 , 3 ) ;
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 3
2641: PPUSH
2642: CALL_OW 380
// un := CreateHuman ;
2646: LD_ADDR_VAR 0 3
2650: PUSH
2651: CALL_OW 44
2655: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2656: LD_ADDR_EXP 35
2660: PUSH
2661: LD_EXP 35
2665: PUSH
2666: LD_VAR 0 3
2670: UNION
2671: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2672: LD_VAR 0 3
2676: PPUSH
2677: LD_INT 284
2679: PPUSH
2680: LD_INT 163
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2690: LD_VAR 0 3
2694: PPUSH
2695: LD_INT 257
2697: PPUSH
2698: LD_INT 138
2700: PPUSH
2701: CALL_OW 111
// wait ( 0 0$1 ) ;
2705: LD_INT 35
2707: PPUSH
2708: CALL_OW 67
// end ;
2712: GO 2630
2714: POP
2715: POP
// for i := 1 to 6 do
2716: LD_ADDR_VAR 0 2
2720: PUSH
2721: DOUBLE
2722: LD_INT 1
2724: DEC
2725: ST_TO_ADDR
2726: LD_INT 6
2728: PUSH
2729: FOR_TO
2730: IFFALSE 2863
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2732: LD_INT 0
2734: PPUSH
2735: LD_INT 1
2737: PUSH
2738: LD_INT 1
2740: PUSH
2741: LD_INT 4
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: PUSH
2749: LD_VAR 0 2
2753: PUSH
2754: LD_INT 3
2756: MOD
2757: PUSH
2758: LD_INT 1
2760: PLUS
2761: ARRAY
2762: PPUSH
2763: LD_INT 3
2765: PPUSH
2766: CALL_OW 380
// un := CreateHuman ;
2770: LD_ADDR_VAR 0 3
2774: PUSH
2775: CALL_OW 44
2779: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2780: LD_ADDR_EXP 35
2784: PUSH
2785: LD_EXP 35
2789: PUSH
2790: LD_VAR 0 3
2794: UNION
2795: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2796: LD_VAR 0 3
2800: PPUSH
2801: LD_INT 225
2803: PPUSH
2804: LD_INT 163
2806: PPUSH
2807: LD_INT 0
2809: PPUSH
2810: CALL_OW 48
// if i = 1 then
2814: LD_VAR 0 2
2818: PUSH
2819: LD_INT 1
2821: EQUAL
2822: IFFALSE 2839
// SetAttr ( un , attr_speed , 12 ) ;
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 2
2831: PPUSH
2832: LD_INT 12
2834: PPUSH
2835: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2839: LD_VAR 0 3
2843: PPUSH
2844: LD_INT 222
2846: PPUSH
2847: LD_INT 157
2849: PPUSH
2850: CALL_OW 111
// wait ( 0 0$1 ) ;
2854: LD_INT 35
2856: PPUSH
2857: CALL_OW 67
// end ;
2861: GO 2729
2863: POP
2864: POP
// end ; end_of_file
2865: LD_VAR 0 1
2869: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2870: LD_INT 0
2872: PPUSH
2873: PPUSH
2874: PPUSH
2875: PPUSH
2876: PPUSH
2877: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2878: LD_ADDR_EXP 47
2882: PUSH
2883: LD_INT 22
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 30
2895: PUSH
2896: LD_INT 7
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PPUSH
2907: CALL_OW 69
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2916: LD_ADDR_VAR 0 2
2920: PUSH
2921: LD_INT 21
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 23
2933: PUSH
2934: LD_INT 3
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PPUSH
2945: CALL_OW 69
2949: PUSH
2950: FOR_IN
2951: IFFALSE 2967
// SetBLevel ( i , 5 ) ;
2953: LD_VAR 0 2
2957: PPUSH
2958: LD_INT 5
2960: PPUSH
2961: CALL_OW 241
2965: GO 2950
2967: POP
2968: POP
// SetBName ( kirov , kirov ) ;
2969: LD_INT 71
2971: PPUSH
2972: LD_STRING kirov
2974: PPUSH
2975: CALL_OW 500
// SetBName ( beria , beria ) ;
2979: LD_INT 106
2981: PPUSH
2982: LD_STRING beria
2984: PPUSH
2985: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2989: LD_INT 112
2991: PPUSH
2992: LD_STRING kagan
2994: PPUSH
2995: CALL_OW 500
// uc_side := 6 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 6
3006: ST_TO_ADDR
// uc_nation := 3 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 3
3014: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3015: LD_ADDR_VAR 0 5
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 6
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 30
3032: PUSH
3033: LD_INT 5
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3053: LD_ADDR_VAR 0 4
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 6
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 30
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3091: LD_ADDR_EXP 41
3095: PUSH
3096: EMPTY
3097: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3098: LD_ADDR_EXP 42
3102: PUSH
3103: EMPTY
3104: ST_TO_ADDR
// russianPatrol := [ ] ;
3105: LD_ADDR_EXP 44
3109: PUSH
3110: EMPTY
3111: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3112: LD_ADDR_EXP 37
3116: PUSH
3117: LD_STRING Kurin
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: LD_STRING 
3125: PPUSH
3126: CALL 266 0 3
3130: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3131: LD_EXP 37
3135: PPUSH
3136: LD_INT 71
3138: PPUSH
3139: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3143: LD_ADDR_EXP 39
3147: PUSH
3148: LD_STRING Popov
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: LD_STRING 
3156: PPUSH
3157: CALL 266 0 3
3161: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3162: LD_EXP 39
3166: PPUSH
3167: LD_INT 71
3169: PPUSH
3170: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3174: LD_ADDR_EXP 38
3178: PUSH
3179: LD_STRING Grishko
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: LD_STRING 
3187: PPUSH
3188: CALL 266 0 3
3192: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3193: LD_EXP 38
3197: PPUSH
3198: LD_INT 207
3200: PPUSH
3201: LD_INT 106
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3211: LD_EXP 38
3215: PPUSH
3216: LD_INT 209
3218: PPUSH
3219: LD_INT 106
3221: PPUSH
3222: CALL_OW 118
// for i := 1 to 2 do
3226: LD_ADDR_VAR 0 2
3230: PUSH
3231: DOUBLE
3232: LD_INT 1
3234: DEC
3235: ST_TO_ADDR
3236: LD_INT 2
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3295
// begin PrepareHuman ( false , 2 , 2 ) ;
3242: LD_INT 0
3244: PPUSH
3245: LD_INT 2
3247: PPUSH
3248: LD_INT 2
3250: PPUSH
3251: CALL_OW 380
// un := CreateHuman ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: CALL_OW 44
3264: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3265: LD_VAR 0 3
3269: PPUSH
3270: LD_INT 71
3272: PPUSH
3273: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3277: LD_ADDR_EXP 41
3281: PUSH
3282: LD_EXP 41
3286: PUSH
3287: LD_VAR 0 3
3291: UNION
3292: ST_TO_ADDR
// end ;
3293: GO 3239
3295: POP
3296: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3297: LD_ADDR_VAR 0 2
3301: PUSH
3302: DOUBLE
3303: LD_INT 1
3305: DEC
3306: ST_TO_ADDR
3307: LD_INT 5
3309: PUSH
3310: LD_INT 6
3312: PUSH
3313: LD_INT 6
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: LIST
3320: PUSH
3321: LD_OWVAR 67
3325: ARRAY
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3402
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3330: LD_INT 0
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: PUSH
3350: LD_OWVAR 67
3354: ARRAY
3355: PPUSH
3356: CALL_OW 380
// un := CreateHuman ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: CALL_OW 44
3369: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3370: LD_VAR 0 3
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3384: LD_ADDR_EXP 41
3388: PUSH
3389: LD_EXP 41
3393: PUSH
3394: LD_VAR 0 3
3398: UNION
3399: ST_TO_ADDR
// end ;
3400: GO 3327
3402: POP
3403: POP
// for i := 1 to 3 do
3404: LD_ADDR_VAR 0 2
3408: PUSH
3409: DOUBLE
3410: LD_INT 1
3412: DEC
3413: ST_TO_ADDR
3414: LD_INT 3
3416: PUSH
3417: FOR_TO
3418: IFFALSE 3473
// begin PrepareHuman ( false , 3 , 3 ) ;
3420: LD_INT 0
3422: PPUSH
3423: LD_INT 3
3425: PPUSH
3426: LD_INT 3
3428: PPUSH
3429: CALL_OW 380
// un := CreateHuman ;
3433: LD_ADDR_VAR 0 3
3437: PUSH
3438: CALL_OW 44
3442: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3443: LD_VAR 0 3
3447: PPUSH
3448: LD_INT 92
3450: PPUSH
3451: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3455: LD_ADDR_EXP 41
3459: PUSH
3460: LD_EXP 41
3464: PUSH
3465: LD_VAR 0 3
3469: UNION
3470: ST_TO_ADDR
// end ;
3471: GO 3417
3473: POP
3474: POP
// for i := 1 to 2 do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: DOUBLE
3481: LD_INT 1
3483: DEC
3484: ST_TO_ADDR
3485: LD_INT 2
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3544
// begin PrepareHuman ( false , 4 , 3 ) ;
3491: LD_INT 0
3493: PPUSH
3494: LD_INT 4
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: CALL_OW 380
// un := CreateHuman ;
3504: LD_ADDR_VAR 0 3
3508: PUSH
3509: CALL_OW 44
3513: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3514: LD_VAR 0 3
3518: PPUSH
3519: LD_INT 83
3521: PPUSH
3522: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3526: LD_ADDR_EXP 41
3530: PUSH
3531: LD_EXP 41
3535: PUSH
3536: LD_VAR 0 3
3540: UNION
3541: ST_TO_ADDR
// end ;
3542: GO 3488
3544: POP
3545: POP
// for i := 1 to 5 do
3546: LD_ADDR_VAR 0 2
3550: PUSH
3551: DOUBLE
3552: LD_INT 1
3554: DEC
3555: ST_TO_ADDR
3556: LD_INT 5
3558: PUSH
3559: FOR_TO
3560: IFFALSE 3617
// begin PrepareHuman ( false , 1 , 3 ) ;
3562: LD_INT 0
3564: PPUSH
3565: LD_INT 1
3567: PPUSH
3568: LD_INT 3
3570: PPUSH
3571: CALL_OW 380
// un := CreateHuman ;
3575: LD_ADDR_VAR 0 3
3579: PUSH
3580: CALL_OW 44
3584: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_VAR 0 4
3594: PPUSH
3595: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3599: LD_ADDR_EXP 43
3603: PUSH
3604: LD_EXP 43
3608: PUSH
3609: LD_VAR 0 3
3613: UNION
3614: ST_TO_ADDR
// end ;
3615: GO 3559
3617: POP
3618: POP
// russianCargo := [ ] ;
3619: LD_ADDR_EXP 46
3623: PUSH
3624: EMPTY
3625: ST_TO_ADDR
// for i := 1 to 2 do
3626: LD_ADDR_VAR 0 2
3630: PUSH
3631: DOUBLE
3632: LD_INT 1
3634: DEC
3635: ST_TO_ADDR
3636: LD_INT 2
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3772
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3642: LD_INT 6
3644: PPUSH
3645: LD_INT 3
3647: PPUSH
3648: LD_INT 21
3650: PPUSH
3651: LD_INT 1
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: LD_INT 51
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL 329 0 7
// un := CreateVehicle ;
3667: LD_ADDR_VAR 0 3
3671: PUSH
3672: CALL_OW 45
3676: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3677: LD_ADDR_EXP 46
3681: PUSH
3682: LD_EXP 46
3686: PUSH
3687: LD_VAR 0 3
3691: UNION
3692: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: LD_INT 100
3703: PPUSH
3704: CALL_OW 290
// SetDir ( un , 4 ) ;
3708: LD_VAR 0 3
3712: PPUSH
3713: LD_INT 4
3715: PPUSH
3716: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_INT 147
3727: PPUSH
3728: LD_INT 103
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3741: LD_INT 0
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_OWVAR 67
3751: PPUSH
3752: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3756: CALL_OW 44
3760: PPUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: CALL_OW 52
// end ;
3770: GO 3639
3772: POP
3773: POP
// uc_side := 3 ;
3774: LD_ADDR_OWVAR 20
3778: PUSH
3779: LD_INT 3
3781: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3782: LD_ADDR_EXP 40
3786: PUSH
3787: LD_STRING Burlak
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: LD_STRING 
3795: PPUSH
3796: CALL 266 0 3
3800: ST_TO_ADDR
// for i := 1 to 2 do
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: DOUBLE
3807: LD_INT 1
3809: DEC
3810: ST_TO_ADDR
3811: LD_INT 2
3813: PUSH
3814: FOR_TO
3815: IFFALSE 3908
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3817: LD_INT 0
3819: PPUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_OWVAR 67
3827: PUSH
3828: LD_INT 1
3830: PLUS
3831: PPUSH
3832: CALL_OW 380
// un := CreateHuman ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: CALL_OW 44
3845: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3846: LD_VAR 0 3
3850: PPUSH
3851: LD_INT 22
3853: PUSH
3854: LD_INT 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 30
3863: PUSH
3864: LD_INT 32
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PPUSH
3875: CALL_OW 69
3879: PUSH
3880: LD_VAR 0 2
3884: ARRAY
3885: PPUSH
3886: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3890: LD_ADDR_EXP 42
3894: PUSH
3895: LD_EXP 42
3899: PUSH
3900: LD_VAR 0 3
3904: UNION
3905: ST_TO_ADDR
// end ;
3906: GO 3814
3908: POP
3909: POP
// for i := 1 to 2 do
3910: LD_ADDR_VAR 0 2
3914: PUSH
3915: DOUBLE
3916: LD_INT 1
3918: DEC
3919: ST_TO_ADDR
3920: LD_INT 2
3922: PUSH
3923: FOR_TO
3924: IFFALSE 4015
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3926: LD_INT 0
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: CALL_OW 380
// un := CreateHuman ;
3945: LD_ADDR_VAR 0 3
3949: PUSH
3950: CALL_OW 44
3954: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 22
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: LD_INT 30
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 69
3988: PUSH
3989: LD_INT 1
3991: ARRAY
3992: PPUSH
3993: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3997: LD_ADDR_EXP 42
4001: PUSH
4002: LD_EXP 42
4006: PUSH
4007: LD_VAR 0 3
4011: UNION
4012: ST_TO_ADDR
// end ;
4013: GO 3923
4015: POP
4016: POP
// for i := 1 to 2 do
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: DOUBLE
4023: LD_INT 1
4025: DEC
4026: ST_TO_ADDR
4027: LD_INT 2
4029: PUSH
4030: FOR_TO
4031: IFFALSE 4118
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4033: LD_INT 0
4035: PPUSH
4036: LD_INT 4
4038: PPUSH
4039: LD_OWVAR 67
4043: PPUSH
4044: CALL_OW 380
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4058: LD_VAR 0 3
4062: PPUSH
4063: LD_INT 22
4065: PUSH
4066: LD_INT 3
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 30
4075: PUSH
4076: LD_INT 7
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 69
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PPUSH
4096: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4100: LD_ADDR_EXP 42
4104: PUSH
4105: LD_EXP 42
4109: PUSH
4110: LD_VAR 0 3
4114: UNION
4115: ST_TO_ADDR
// end ;
4116: GO 4030
4118: POP
4119: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4120: LD_INT 0
4122: PPUSH
4123: LD_INT 2
4125: PPUSH
4126: LD_OWVAR 67
4130: PPUSH
4131: CALL_OW 380
// un := CreateHuman ;
4135: LD_ADDR_VAR 0 3
4139: PUSH
4140: CALL_OW 44
4144: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4145: LD_VAR 0 3
4149: PPUSH
4150: LD_INT 106
4152: PPUSH
4153: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4157: LD_ADDR_EXP 42
4161: PUSH
4162: LD_EXP 42
4166: PUSH
4167: LD_VAR 0 3
4171: UNION
4172: ST_TO_ADDR
// for i := 1 to 3 do
4173: LD_ADDR_VAR 0 2
4177: PUSH
4178: DOUBLE
4179: LD_INT 1
4181: DEC
4182: ST_TO_ADDR
4183: LD_INT 3
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4309
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4189: LD_ADDR_VAR 0 6
4193: PUSH
4194: LD_INT 22
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 30
4206: PUSH
4207: LD_INT 31
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 69
4222: PUSH
4223: LD_VAR 0 2
4227: ARRAY
4228: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4229: LD_INT 0
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_OWVAR 67
4239: PPUSH
4240: CALL_OW 380
// un := CreateHuman ;
4244: LD_ADDR_VAR 0 3
4248: PUSH
4249: CALL_OW 44
4253: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4254: LD_VAR 0 3
4258: PPUSH
4259: LD_VAR 0 6
4263: PPUSH
4264: CALL_OW 254
4268: PUSH
4269: LD_INT 3
4271: PLUS
4272: PPUSH
4273: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4277: LD_VAR 0 3
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4291: LD_ADDR_EXP 42
4295: PUSH
4296: LD_EXP 42
4300: PUSH
4301: LD_VAR 0 3
4305: UNION
4306: ST_TO_ADDR
// end ;
4307: GO 4186
4309: POP
4310: POP
// russianOmicronAttackers := [ ] ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// for i := 1 to 6 do
4318: LD_ADDR_VAR 0 2
4322: PUSH
4323: DOUBLE
4324: LD_INT 1
4326: DEC
4327: ST_TO_ADDR
4328: LD_INT 6
4330: PUSH
4331: FOR_TO
4332: IFFALSE 4556
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4334: LD_INT 3
4336: PPUSH
4337: LD_INT 3
4339: PPUSH
4340: LD_INT 21
4342: PUSH
4343: LD_INT 23
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_VAR 0 2
4354: PUSH
4355: LD_INT 2
4357: MOD
4358: PUSH
4359: LD_INT 1
4361: PLUS
4362: ARRAY
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: LD_INT 1
4369: PPUSH
4370: LD_INT 43
4372: PUSH
4373: LD_INT 44
4375: PUSH
4376: LD_INT 42
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_VAR 0 2
4388: PUSH
4389: LD_INT 3
4391: MOD
4392: PUSH
4393: LD_INT 1
4395: PLUS
4396: ARRAY
4397: PPUSH
4398: LD_INT 100
4400: PPUSH
4401: CALL 329 0 7
// un := CreateVehicle ;
4405: LD_ADDR_VAR 0 3
4409: PUSH
4410: CALL_OW 45
4414: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4415: LD_VAR 0 3
4419: PPUSH
4420: LD_INT 0
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_INT 2
4435: PPUSH
4436: CALL_OW 12
4440: ARRAY
4441: PPUSH
4442: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4446: LD_ADDR_EXP 45
4450: PUSH
4451: LD_EXP 45
4455: PUSH
4456: LD_VAR 0 3
4460: UNION
4461: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4462: LD_VAR 0 3
4466: PPUSH
4467: LD_INT 127
4469: PPUSH
4470: LD_INT 89
4472: PPUSH
4473: LD_INT 7
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: CALL_OW 50
// uc_side := 3 ;
4483: LD_ADDR_OWVAR 20
4487: PUSH
4488: LD_INT 3
4490: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4491: LD_INT 0
4493: PPUSH
4494: LD_INT 3
4496: PPUSH
4497: LD_INT 3
4499: PPUSH
4500: CALL_OW 380
// un := CreateHuman ;
4504: LD_ADDR_VAR 0 3
4508: PUSH
4509: CALL_OW 44
4513: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4514: LD_ADDR_EXP 45
4518: PUSH
4519: LD_EXP 45
4523: PUSH
4524: LD_VAR 0 3
4528: UNION
4529: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: LD_EXP 45
4539: PUSH
4540: LD_EXP 45
4544: PUSH
4545: LD_INT 1
4547: MINUS
4548: ARRAY
4549: PPUSH
4550: CALL_OW 52
// end ;
4554: GO 4331
4556: POP
4557: POP
// for i := 1 to 3 do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_INT 3
4570: PUSH
4571: FOR_TO
4572: IFFALSE 4638
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4574: LD_INT 0
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: LD_OWVAR 67
4584: PPUSH
4585: CALL_OW 380
// un := CreateHuman ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: CALL_OW 44
4598: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4599: LD_ADDR_EXP 45
4603: PUSH
4604: LD_EXP 45
4608: PUSH
4609: LD_VAR 0 3
4613: UNION
4614: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4615: LD_VAR 0 3
4619: PPUSH
4620: LD_INT 91
4622: PPUSH
4623: LD_INT 60
4625: PPUSH
4626: LD_INT 3
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 50
// end ;
4636: GO 4571
4638: POP
4639: POP
// end ;
4640: LD_VAR 0 1
4644: RET
// every 0 0$3 do var i ;
4645: GO 4647
4647: DISABLE
4648: LD_INT 0
4650: PPUSH
// begin for i := 1 to 4 do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_INT 4
4663: PUSH
4664: FOR_TO
4665: IFFALSE 4684
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4667: LD_EXP 43
4671: PUSH
4672: LD_VAR 0 1
4676: ARRAY
4677: PPUSH
4678: CALL_OW 122
4682: GO 4664
4684: POP
4685: POP
// wait ( 3 ) ;
4686: LD_INT 3
4688: PPUSH
4689: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4693: LD_EXP 43
4697: PUSH
4698: LD_INT 1
4700: ARRAY
4701: PPUSH
4702: LD_INT 22
4704: PUSH
4705: LD_INT 6
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 30
4714: PUSH
4715: LD_INT 31
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PPUSH
4731: LD_EXP 43
4735: PUSH
4736: LD_INT 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 74
4744: PPUSH
4745: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4749: LD_EXP 43
4753: PUSH
4754: LD_INT 2
4756: ARRAY
4757: PPUSH
4758: LD_INT 211
4760: PPUSH
4761: LD_INT 107
4763: PPUSH
4764: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4768: LD_EXP 43
4772: PUSH
4773: LD_INT 2
4775: ARRAY
4776: PPUSH
4777: LD_INT 209
4779: PPUSH
4780: LD_INT 106
4782: PPUSH
4783: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4787: LD_EXP 43
4791: PUSH
4792: LD_INT 3
4794: ARRAY
4795: PPUSH
4796: LD_INT 209
4798: PPUSH
4799: LD_INT 103
4801: PPUSH
4802: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4806: LD_EXP 43
4810: PUSH
4811: LD_INT 3
4813: ARRAY
4814: PPUSH
4815: LD_INT 209
4817: PPUSH
4818: LD_INT 106
4820: PPUSH
4821: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4825: LD_EXP 43
4829: PUSH
4830: LD_INT 4
4832: ARRAY
4833: PPUSH
4834: LD_INT 227
4836: PPUSH
4837: LD_INT 117
4839: PPUSH
4840: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4844: LD_EXP 43
4848: PUSH
4849: LD_INT 4
4851: ARRAY
4852: PPUSH
4853: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4857: LD_INT 700
4859: PPUSH
4860: CALL_OW 67
// for i := 3 downto 2 do
4864: LD_ADDR_VAR 0 1
4868: PUSH
4869: DOUBLE
4870: LD_INT 3
4872: INC
4873: ST_TO_ADDR
4874: LD_INT 2
4876: PUSH
4877: FOR_DOWNTO
4878: IFFALSE 5045
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4880: LD_EXP 43
4884: PUSH
4885: LD_VAR 0 1
4889: ARRAY
4890: PPUSH
4891: LD_INT 200
4893: PPUSH
4894: LD_INT 91
4896: PPUSH
4897: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4901: LD_EXP 43
4905: PUSH
4906: LD_VAR 0 1
4910: ARRAY
4911: PPUSH
4912: LD_INT 210
4914: PPUSH
4915: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4919: LD_EXP 43
4923: PUSH
4924: LD_VAR 0 1
4928: ARRAY
4929: PPUSH
4930: LD_INT 224
4932: PPUSH
4933: LD_INT 93
4935: PPUSH
4936: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4940: LD_EXP 43
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PPUSH
4951: LD_INT 210
4953: PPUSH
4954: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4958: LD_EXP 43
4962: PUSH
4963: LD_VAR 0 1
4967: ARRAY
4968: PPUSH
4969: LD_INT 239
4971: PPUSH
4972: LD_INT 123
4974: PPUSH
4975: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4979: LD_EXP 43
4983: PUSH
4984: LD_VAR 0 1
4988: ARRAY
4989: PPUSH
4990: LD_INT 210
4992: PPUSH
4993: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4997: LD_EXP 43
5001: PUSH
5002: LD_VAR 0 1
5006: ARRAY
5007: PPUSH
5008: LD_INT 212
5010: PPUSH
5011: LD_INT 105
5013: PPUSH
5014: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5018: LD_EXP 43
5022: PUSH
5023: LD_VAR 0 1
5027: ARRAY
5028: PPUSH
5029: LD_INT 700
5031: PPUSH
5032: CALL_OW 202
// wait ( 0 0$30 ) ;
5036: LD_INT 1050
5038: PPUSH
5039: CALL_OW 67
// end ;
5043: GO 4877
5045: POP
5046: POP
// until not activeGrishkoAI ;
5047: LD_EXP 10
5051: NOT
5052: IFFALSE 4857
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5054: LD_EXP 43
5058: PPUSH
5059: LD_INT 221
5061: PPUSH
5062: LD_INT 110
5064: PPUSH
5065: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5069: LD_EXP 43
5073: PPUSH
5074: LD_INT 228
5076: PPUSH
5077: LD_INT 115
5079: PPUSH
5080: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5084: LD_EXP 43
5088: PPUSH
5089: CALL_OW 200
// end ;
5093: PPOPN 1
5095: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5096: LD_EXP 12
5100: IFFALSE 5718
5102: GO 5104
5104: DISABLE
5105: LD_INT 0
5107: PPUSH
5108: PPUSH
5109: PPUSH
5110: PPUSH
// begin uc_side := 6 ;
5111: LD_ADDR_OWVAR 20
5115: PUSH
5116: LD_INT 6
5118: ST_TO_ADDR
// uc_nation := 3 ;
5119: LD_ADDR_OWVAR 21
5123: PUSH
5124: LD_INT 3
5126: ST_TO_ADDR
// for i := 1 to 3 do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: DOUBLE
5133: LD_INT 1
5135: DEC
5136: ST_TO_ADDR
5137: LD_INT 3
5139: PUSH
5140: FOR_TO
5141: IFFALSE 5250
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5143: LD_INT 0
5145: PPUSH
5146: LD_INT 1
5148: PPUSH
5149: LD_INT 2
5151: PUSH
5152: LD_INT 3
5154: PUSH
5155: LD_INT 4
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PUSH
5163: LD_OWVAR 67
5167: ARRAY
5168: PPUSH
5169: CALL_OW 380
// un := CreateHuman ;
5173: LD_ADDR_VAR 0 1
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5183: LD_ADDR_EXP 44
5187: PUSH
5188: LD_EXP 44
5192: PUSH
5193: LD_VAR 0 1
5197: UNION
5198: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5199: LD_VAR 0 1
5203: PPUSH
5204: LD_INT 1
5206: PPUSH
5207: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5211: LD_VAR 0 1
5215: PPUSH
5216: LD_INT 11
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5226: LD_VAR 0 1
5230: PPUSH
5231: LD_INT 210
5233: PPUSH
5234: LD_INT 159
5236: PPUSH
5237: CALL_OW 111
// wait ( 0 0$2 ) ;
5241: LD_INT 70
5243: PPUSH
5244: CALL_OW 67
// end ;
5248: GO 5140
5250: POP
5251: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5252: LD_ADDR_VAR 0 4
5256: PUSH
5257: LD_INT 172
5259: PUSH
5260: LD_INT 76
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 150
5269: PUSH
5270: LD_INT 38
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 148
5279: PUSH
5280: LD_INT 9
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 165
5289: PUSH
5290: LD_INT 38
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 191
5305: PUSH
5306: LD_INT 77
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 168
5315: PUSH
5316: LD_INT 42
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 166
5325: PUSH
5326: LD_INT 11
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 151
5335: PUSH
5336: LD_INT 12
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 221
5351: PUSH
5352: LD_INT 88
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 217
5361: PUSH
5362: LD_INT 64
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 232
5371: PUSH
5372: LD_INT 66
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: LD_INT 200
5381: PUSH
5382: LD_INT 56
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5400: LD_INT 35
5402: PPUSH
5403: CALL_OW 67
// for i := 1 to patrol do
5407: LD_ADDR_VAR 0 2
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_VAR 0 4
5421: PUSH
5422: FOR_TO
5423: IFFALSE 5682
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5425: LD_EXP 44
5429: PUSH
5430: LD_VAR 0 2
5434: ARRAY
5435: PPUSH
5436: CALL_OW 256
5440: PUSH
5441: LD_INT 990
5443: LESS
5444: PUSH
5445: LD_EXP 44
5449: PUSH
5450: LD_VAR 0 2
5454: ARRAY
5455: PPUSH
5456: CALL_OW 110
5460: PUSH
5461: LD_INT 1
5463: EQUAL
5464: AND
5465: IFFALSE 5493
// begin spottedByPatrol := true ;
5467: LD_ADDR_EXP 7
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5475: LD_EXP 44
5479: PUSH
5480: LD_VAR 0 2
5484: ARRAY
5485: PPUSH
5486: LD_INT 2
5488: PPUSH
5489: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5493: LD_EXP 44
5497: PUSH
5498: LD_VAR 0 2
5502: ARRAY
5503: PPUSH
5504: CALL_OW 110
5508: PUSH
5509: LD_INT 2
5511: EQUAL
5512: IFFALSE 5580
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5514: LD_EXP 44
5518: PUSH
5519: LD_VAR 0 2
5523: ARRAY
5524: PPUSH
5525: LD_INT 166
5527: PPUSH
5528: LD_INT 101
5530: PPUSH
5531: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5535: LD_EXP 44
5539: PUSH
5540: LD_VAR 0 2
5544: ARRAY
5545: PPUSH
5546: LD_INT 71
5548: PPUSH
5549: CALL_OW 296
5553: PUSH
5554: LD_INT 10
5556: LESS
5557: IFFALSE 5578
// russianAlert := [ russianPatrol [ i ] ] ;
5559: LD_ADDR_EXP 9
5563: PUSH
5564: LD_EXP 44
5568: PUSH
5569: LD_VAR 0 2
5573: ARRAY
5574: PUSH
5575: EMPTY
5576: LIST
5577: ST_TO_ADDR
// continue ;
5578: GO 5422
// end ; if not HasTask ( russianPatrol [ i ] ) then
5580: LD_EXP 44
5584: PUSH
5585: LD_VAR 0 2
5589: ARRAY
5590: PPUSH
5591: CALL_OW 314
5595: NOT
5596: IFFALSE 5680
// for j in patrol [ i ] do
5598: LD_ADDR_VAR 0 3
5602: PUSH
5603: LD_VAR 0 4
5607: PUSH
5608: LD_VAR 0 2
5612: ARRAY
5613: PUSH
5614: FOR_IN
5615: IFFALSE 5678
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5617: LD_EXP 44
5621: PUSH
5622: LD_VAR 0 2
5626: ARRAY
5627: PPUSH
5628: LD_INT 35
5630: PPUSH
5631: LD_INT 175
5633: PPUSH
5634: CALL_OW 12
5638: PPUSH
5639: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5643: LD_EXP 44
5647: PUSH
5648: LD_VAR 0 2
5652: ARRAY
5653: PPUSH
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PPUSH
5663: LD_VAR 0 3
5667: PUSH
5668: LD_INT 2
5670: ARRAY
5671: PPUSH
5672: CALL_OW 174
// end ;
5676: GO 5614
5678: POP
5679: POP
// end ;
5680: GO 5422
5682: POP
5683: POP
// until not russianPatrol or russianAlert ;
5684: LD_EXP 44
5688: NOT
5689: PUSH
5690: LD_EXP 9
5694: OR
5695: IFFALSE 5400
// if russianPatrol then
5697: LD_EXP 44
5701: IFFALSE 5718
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5703: LD_EXP 44
5707: PPUSH
5708: LD_INT 161
5710: PPUSH
5711: LD_INT 107
5713: PPUSH
5714: CALL_OW 114
// end ;
5718: PPOPN 4
5720: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5721: LD_EXP 6
5725: PUSH
5726: LD_EXP 13
5730: NOT
5731: AND
5732: IFFALSE 6173
5734: GO 5736
5736: DISABLE
5737: LD_INT 0
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
// begin enable ;
5744: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_EXP 45
5754: PPUSH
5755: LD_INT 21
5757: PUSH
5758: LD_INT 2
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PPUSH
5765: CALL_OW 72
5769: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5770: LD_ADDR_VAR 0 4
5774: PUSH
5775: LD_INT 22
5777: PUSH
5778: LD_INT 4
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PPUSH
5785: CALL_OW 69
5789: ST_TO_ADDR
// for i in filter do
5790: LD_ADDR_VAR 0 1
5794: PUSH
5795: LD_VAR 0 2
5799: PUSH
5800: FOR_IN
5801: IFFALSE 6171
// begin tmp := IsDrivenBy ( i ) ;
5803: LD_ADDR_VAR 0 3
5807: PUSH
5808: LD_VAR 0 1
5812: PPUSH
5813: CALL_OW 311
5817: ST_TO_ADDR
// if not tmp then
5818: LD_VAR 0 3
5822: NOT
5823: IFFALSE 5827
// continue ;
5825: GO 5800
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 261
5836: PUSH
5837: LD_INT 90
5839: GREATER
5840: PUSH
5841: LD_VAR 0 1
5845: PPUSH
5846: CALL_OW 110
5850: PUSH
5851: LD_INT 2
5853: EQUAL
5854: AND
5855: IFFALSE 5871
// SetTag ( i , 0 ) else
5857: LD_VAR 0 1
5861: PPUSH
5862: LD_INT 0
5864: PPUSH
5865: CALL_OW 109
5869: GO 5922
// if GetTag ( i ) = 2 then
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 110
5880: PUSH
5881: LD_INT 2
5883: EQUAL
5884: IFFALSE 5922
// begin x := rand ( 1 , 2 ) ;
5886: LD_ADDR_VAR 0 5
5890: PUSH
5891: LD_INT 1
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL_OW 12
5901: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5902: LD_VAR 0 1
5906: PPUSH
5907: LD_EXP 46
5911: PUSH
5912: LD_VAR 0 5
5916: ARRAY
5917: PPUSH
5918: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5922: LD_VAR 0 1
5926: PPUSH
5927: CALL_OW 256
5931: PUSH
5932: LD_INT 600
5934: GREATEREQUAL
5935: PUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: CALL_OW 110
5945: NOT
5946: AND
5947: IFFALSE 5973
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5949: LD_VAR 0 1
5953: PPUSH
5954: LD_VAR 0 4
5958: PPUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: CALL_OW 74
5968: PPUSH
5969: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5973: LD_VAR 0 1
5977: PPUSH
5978: CALL_OW 256
5982: PUSH
5983: LD_INT 600
5985: LESS
5986: PUSH
5987: LD_VAR 0 1
5991: PPUSH
5992: CALL_OW 110
5996: NOT
5997: AND
5998: IFFALSE 6027
// begin SetTag ( i , 1 ) ;
6000: LD_VAR 0 1
6004: PPUSH
6005: LD_INT 1
6007: PPUSH
6008: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6012: LD_VAR 0 1
6016: PPUSH
6017: LD_INT 62
6019: PPUSH
6020: LD_INT 22
6022: PPUSH
6023: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6027: LD_VAR 0 1
6031: PPUSH
6032: CALL_OW 110
6036: PUSH
6037: LD_INT 1
6039: EQUAL
6040: PUSH
6041: LD_VAR 0 1
6045: PPUSH
6046: LD_INT 62
6048: PPUSH
6049: LD_INT 22
6051: PPUSH
6052: CALL_OW 297
6056: PUSH
6057: LD_INT 6
6059: LESS
6060: AND
6061: PUSH
6062: LD_VAR 0 3
6066: AND
6067: IFFALSE 6169
// begin ComExitVehicle ( tmp ) ;
6069: LD_VAR 0 3
6073: PPUSH
6074: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6078: LD_VAR 0 3
6082: PPUSH
6083: LD_VAR 0 1
6087: PPUSH
6088: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6092: LD_INT 35
6094: PPUSH
6095: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6099: LD_VAR 0 1
6103: PPUSH
6104: CALL_OW 256
6108: PUSH
6109: LD_INT 1000
6111: EQUAL
6112: IFFALSE 6092
// ComEnterUnit ( tmp , i ) ;
6114: LD_VAR 0 3
6118: PPUSH
6119: LD_VAR 0 1
6123: PPUSH
6124: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 261
6137: PUSH
6138: LD_INT 90
6140: LESSEQUAL
6141: IFFALSE 6157
// SetTag ( i , 2 ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_INT 2
6150: PPUSH
6151: CALL_OW 109
6155: GO 6169
// SetTag ( i , 0 ) ;
6157: LD_VAR 0 1
6161: PPUSH
6162: LD_INT 0
6164: PPUSH
6165: CALL_OW 109
// end ; end ;
6169: GO 5800
6171: POP
6172: POP
// end ;
6173: PPOPN 5
6175: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6176: LD_EXP 20
6180: IFFALSE 6382
6182: GO 6184
6184: DISABLE
6185: LD_INT 0
6187: PPUSH
6188: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6189: LD_EXP 46
6193: PPUSH
6194: LD_INT 79
6196: PPUSH
6197: LD_INT 155
6199: PPUSH
6200: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6204: LD_EXP 46
6208: PPUSH
6209: LD_INT 16
6211: PPUSH
6212: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: LD_EXP 45
6225: PPUSH
6226: LD_INT 50
6228: PUSH
6229: EMPTY
6230: LIST
6231: PPUSH
6232: CALL_OW 72
6236: ST_TO_ADDR
// for i in tmp do
6237: LD_ADDR_VAR 0 1
6241: PUSH
6242: LD_VAR 0 2
6246: PUSH
6247: FOR_IN
6248: IFFALSE 6282
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6250: LD_VAR 0 1
6254: PPUSH
6255: LD_INT 123
6257: PPUSH
6258: LD_INT 60
6260: PPUSH
6261: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 153
6272: PPUSH
6273: LD_INT 103
6275: PPUSH
6276: CALL_OW 174
// end ;
6280: GO 6247
6282: POP
6283: POP
// repeat wait ( 0 0$1 ) ;
6284: LD_INT 35
6286: PPUSH
6287: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6291: LD_ADDR_VAR 0 2
6295: PUSH
6296: LD_EXP 45
6300: PPUSH
6301: LD_INT 50
6303: PUSH
6304: EMPTY
6305: LIST
6306: PPUSH
6307: CALL_OW 72
6311: ST_TO_ADDR
// for i in tmp do
6312: LD_ADDR_VAR 0 1
6316: PUSH
6317: LD_VAR 0 2
6321: PUSH
6322: FOR_IN
6323: IFFALSE 6373
// if not HasTask ( i ) then
6325: LD_VAR 0 1
6329: PPUSH
6330: CALL_OW 314
6334: NOT
6335: IFFALSE 6371
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6337: LD_VAR 0 1
6341: PPUSH
6342: LD_INT 81
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: PPUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 74
6366: PPUSH
6367: CALL_OW 115
6371: GO 6322
6373: POP
6374: POP
6375: LD_VAR 0 2
6379: NOT
6380: IFFALSE 6284
// end ;
6382: PPOPN 2
6384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6385: LD_INT 22
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 32
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL_OW 69
6413: IFFALSE 6492
6415: GO 6417
6417: DISABLE
6418: LD_INT 0
6420: PPUSH
// begin enable ;
6421: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_INT 22
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 32
6439: PUSH
6440: LD_INT 1
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 69
6455: PUSH
6456: FOR_IN
6457: IFFALSE 6490
// if GetFuel ( i ) < 1 then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 261
6468: PUSH
6469: LD_INT 1
6471: LESS
6472: IFFALSE 6488
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 311
6483: PPUSH
6484: CALL_OW 121
6488: GO 6456
6490: POP
6491: POP
// end ; end_of_file
6492: PPOPN 1
6494: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6495: LD_INT 0
6497: PPUSH
6498: PPUSH
6499: PPUSH
// SetBName ( omikron , omikron ) ;
6500: LD_INT 64
6502: PPUSH
6503: LD_STRING omikron
6505: PPUSH
6506: CALL_OW 500
// uc_side := 4 ;
6510: LD_ADDR_OWVAR 20
6514: PUSH
6515: LD_INT 4
6517: ST_TO_ADDR
// uc_nation := 1 ;
6518: LD_ADDR_OWVAR 21
6522: PUSH
6523: LD_INT 1
6525: ST_TO_ADDR
// omicronSquad := [ ] ;
6526: LD_ADDR_EXP 48
6530: PUSH
6531: EMPTY
6532: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6533: LD_ADDR_VAR 0 2
6537: PUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 4
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 32
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 31
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PPUSH
6580: CALL_OW 69
6584: PUSH
6585: FOR_IN
6586: IFFALSE 6643
// begin PrepareHuman ( false , 1 , 1 ) ;
6588: LD_INT 0
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: CALL_OW 380
// un := CreateHuman ;
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: CALL_OW 44
6610: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6611: LD_ADDR_EXP 48
6615: PUSH
6616: LD_EXP 48
6620: PUSH
6621: LD_VAR 0 3
6625: UNION
6626: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6627: LD_VAR 0 3
6631: PPUSH
6632: LD_VAR 0 2
6636: PPUSH
6637: CALL_OW 52
// end ;
6641: GO 6585
6643: POP
6644: POP
// for i := 1 to 3 do
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: DOUBLE
6651: LD_INT 1
6653: DEC
6654: ST_TO_ADDR
6655: LD_INT 3
6657: PUSH
6658: FOR_TO
6659: IFFALSE 6714
// begin PrepareHuman ( false , 2 , 2 ) ;
6661: LD_INT 0
6663: PPUSH
6664: LD_INT 2
6666: PPUSH
6667: LD_INT 2
6669: PPUSH
6670: CALL_OW 380
// un := CreateHuman ;
6674: LD_ADDR_VAR 0 3
6678: PUSH
6679: CALL_OW 44
6683: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6684: LD_ADDR_EXP 48
6688: PUSH
6689: LD_EXP 48
6693: PUSH
6694: LD_VAR 0 3
6698: UNION
6699: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6700: LD_VAR 0 3
6704: PPUSH
6705: LD_INT 64
6707: PPUSH
6708: CALL_OW 52
// end ;
6712: GO 6658
6714: POP
6715: POP
// for i := 1 to 2 do
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: DOUBLE
6722: LD_INT 1
6724: DEC
6725: ST_TO_ADDR
6726: LD_INT 2
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6869
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6732: LD_INT 4
6734: PPUSH
6735: LD_INT 1
6737: PPUSH
6738: LD_INT 2
6740: PPUSH
6741: LD_INT 2
6743: PPUSH
6744: LD_INT 1
6746: PPUSH
6747: LD_INT 3
6749: PPUSH
6750: LD_INT 100
6752: PPUSH
6753: CALL 329 0 7
// un := CreateVehicle ;
6757: LD_ADDR_VAR 0 3
6761: PUSH
6762: CALL_OW 45
6766: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6767: LD_ADDR_EXP 48
6771: PUSH
6772: LD_EXP 48
6776: PUSH
6777: LD_VAR 0 3
6781: UNION
6782: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6783: LD_VAR 0 3
6787: PPUSH
6788: LD_INT 28
6790: PPUSH
6791: LD_INT 37
6793: PPUSH
6794: LD_INT 6
6796: PPUSH
6797: LD_INT 0
6799: PPUSH
6800: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6804: LD_INT 0
6806: PPUSH
6807: LD_INT 3
6809: PPUSH
6810: LD_INT 2
6812: PPUSH
6813: CALL_OW 380
// un := CreateHuman ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: CALL_OW 44
6826: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6827: LD_ADDR_EXP 48
6831: PUSH
6832: LD_EXP 48
6836: PUSH
6837: LD_VAR 0 3
6841: UNION
6842: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6843: LD_VAR 0 3
6847: PPUSH
6848: LD_EXP 48
6852: PUSH
6853: LD_EXP 48
6857: PUSH
6858: LD_INT 1
6860: MINUS
6861: ARRAY
6862: PPUSH
6863: CALL_OW 52
// end ;
6867: GO 6729
6869: POP
6870: POP
// end ;
6871: LD_VAR 0 1
6875: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
// uc_side := 4 ;
6882: LD_ADDR_OWVAR 20
6886: PUSH
6887: LD_INT 4
6889: ST_TO_ADDR
// uc_nation := 1 ;
6890: LD_ADDR_OWVAR 21
6894: PUSH
6895: LD_INT 1
6897: ST_TO_ADDR
// tmp := [ ] ;
6898: LD_ADDR_VAR 0 4
6902: PUSH
6903: EMPTY
6904: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6905: LD_INT 4
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 2
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: LD_INT 1
6919: PPUSH
6920: LD_INT 4
6922: PPUSH
6923: LD_INT 77
6925: PPUSH
6926: CALL 329 0 7
// un := CreateVehicle ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: CALL_OW 45
6939: ST_TO_ADDR
// tmp := tmp union un ;
6940: LD_ADDR_VAR 0 4
6944: PUSH
6945: LD_VAR 0 4
6949: PUSH
6950: LD_VAR 0 3
6954: UNION
6955: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 2
6963: PPUSH
6964: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 106
6975: PPUSH
6976: LD_INT 3
6978: PPUSH
6979: LD_INT 0
6981: PPUSH
6982: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6986: LD_INT 0
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: LD_INT 2
6994: PPUSH
6995: CALL_OW 380
// un := CreateHuman ;
6999: LD_ADDR_VAR 0 3
7003: PUSH
7004: CALL_OW 44
7008: ST_TO_ADDR
// tmp := tmp union un ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: LD_VAR 0 4
7018: PUSH
7019: LD_VAR 0 3
7023: UNION
7024: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7025: LD_VAR 0 3
7029: PPUSH
7030: LD_VAR 0 4
7034: PUSH
7035: LD_VAR 0 4
7039: PUSH
7040: LD_INT 1
7042: MINUS
7043: ARRAY
7044: PPUSH
7045: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_INT 109
7056: PPUSH
7057: LD_INT 9
7059: PPUSH
7060: CALL_OW 111
// wait ( 0 0$1 ) ;
7064: LD_INT 35
7066: PPUSH
7067: CALL_OW 67
// for i := 1 to 2 do
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: DOUBLE
7077: LD_INT 1
7079: DEC
7080: ST_TO_ADDR
7081: LD_INT 2
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7149
// begin PrepareHuman ( false , 1 , 2 ) ;
7087: LD_INT 0
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: CALL_OW 380
// un := CreateHuman ;
7100: LD_ADDR_VAR 0 3
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// tmp := tmp union un ;
7110: LD_ADDR_VAR 0 4
7114: PUSH
7115: LD_VAR 0 4
7119: PUSH
7120: LD_VAR 0 3
7124: UNION
7125: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7126: LD_VAR 0 3
7130: PPUSH
7131: LD_INT 105
7133: PPUSH
7134: LD_INT 2
7136: PPUSH
7137: LD_INT 2
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 50
// end ;
7147: GO 7084
7149: POP
7150: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7151: LD_VAR 0 4
7155: PPUSH
7156: LD_INT 26
7158: PPUSH
7159: LD_INT 35
7161: PPUSH
7162: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7166: LD_INT 35
7168: PPUSH
7169: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_INT 50
7180: PUSH
7181: EMPTY
7182: LIST
7183: PPUSH
7184: CALL_OW 72
7188: NOT
7189: IFFALSE 7193
// exit ;
7191: GO 7320
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7193: LD_VAR 0 4
7197: PPUSH
7198: LD_INT 91
7200: PUSH
7201: LD_INT 64
7203: PUSH
7204: LD_INT 12
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 72
7216: PUSH
7217: LD_VAR 0 4
7221: EQUAL
7222: IFFALSE 7166
// omicronSquad := omicronSquad union tmp ;
7224: LD_ADDR_EXP 48
7228: PUSH
7229: LD_EXP 48
7233: PUSH
7234: LD_VAR 0 4
7238: UNION
7239: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 4
7249: PPUSH
7250: LD_INT 25
7252: PUSH
7253: LD_INT 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PPUSH
7260: CALL_OW 72
7264: PUSH
7265: FOR_IN
7266: IFFALSE 7318
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 4
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 30
7285: PUSH
7286: LD_INT 4
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: PPUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: CALL_OW 74
7311: PPUSH
7312: CALL_OW 120
7316: GO 7265
7318: POP
7319: POP
// end ;
7320: LD_VAR 0 1
7324: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7325: LD_EXP 13
7329: NOT
7330: IFFALSE 7901
7332: GO 7334
7334: DISABLE
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// begin enable ;
7341: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_INT 22
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 21
7359: PUSH
7360: LD_INT 3
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 24
7372: PUSH
7373: LD_INT 1000
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 69
7393: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_EXP 48
7403: PPUSH
7404: LD_INT 25
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 72
7418: ST_TO_ADDR
// if filter and tmp then
7419: LD_VAR 0 2
7423: PUSH
7424: LD_VAR 0 3
7428: AND
7429: IFFALSE 7502
// begin for i in tmp do
7431: LD_ADDR_VAR 0 1
7435: PUSH
7436: LD_VAR 0 3
7440: PUSH
7441: FOR_IN
7442: IFFALSE 7498
// if IsInUnit ( i ) then
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 310
7453: IFFALSE 7466
// ComExitBuilding ( i ) else
7455: LD_VAR 0 1
7459: PPUSH
7460: CALL_OW 122
7464: GO 7496
// if not HasTask ( i ) then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 314
7475: NOT
7476: IFFALSE 7496
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 2
7487: PUSH
7488: LD_INT 1
7490: ARRAY
7491: PPUSH
7492: CALL_OW 130
7496: GO 7441
7498: POP
7499: POP
// end else
7500: GO 7573
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7502: LD_VAR 0 3
7506: PPUSH
7507: LD_INT 3
7509: PUSH
7510: LD_INT 54
7512: PUSH
7513: EMPTY
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 72
7524: IFFALSE 7573
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7526: LD_ADDR_VAR 0 1
7530: PUSH
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_INT 3
7538: PUSH
7539: LD_INT 54
7541: PUSH
7542: EMPTY
7543: LIST
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PPUSH
7549: CALL_OW 72
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7571
// ComEnterUnit ( i , omikron ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 64
7564: PPUSH
7565: CALL_OW 120
7569: GO 7554
7571: POP
7572: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7573: LD_ADDR_VAR 0 2
7577: PUSH
7578: LD_EXP 48
7582: PPUSH
7583: LD_INT 21
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 72
7597: ST_TO_ADDR
// if not filter then
7598: LD_VAR 0 2
7602: NOT
7603: IFFALSE 7607
// exit ;
7605: GO 7901
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7607: LD_ADDR_VAR 0 4
7611: PUSH
7612: LD_INT 13
7614: PPUSH
7615: LD_INT 81
7617: PUSH
7618: LD_INT 4
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 70
7629: ST_TO_ADDR
// if enemy then
7630: LD_VAR 0 4
7634: IFFALSE 7901
// begin for i in filter do
7636: LD_ADDR_VAR 0 1
7640: PUSH
7641: LD_VAR 0 2
7645: PUSH
7646: FOR_IN
7647: IFFALSE 7899
// begin tmp := IsDrivenBy ( i ) ;
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: LD_VAR 0 1
7658: PPUSH
7659: CALL_OW 311
7663: ST_TO_ADDR
// if not tmp then
7664: LD_VAR 0 3
7668: NOT
7669: IFFALSE 7673
// continue ;
7671: GO 7646
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7673: LD_VAR 0 1
7677: PPUSH
7678: CALL_OW 256
7682: PUSH
7683: LD_INT 600
7685: GREATEREQUAL
7686: PUSH
7687: LD_VAR 0 1
7691: PPUSH
7692: CALL_OW 110
7696: PUSH
7697: LD_INT 1
7699: NONEQUAL
7700: AND
7701: IFFALSE 7727
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7703: LD_VAR 0 1
7707: PPUSH
7708: LD_VAR 0 4
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 256
7736: PUSH
7737: LD_INT 600
7739: LESS
7740: PUSH
7741: LD_VAR 0 1
7745: PPUSH
7746: CALL_OW 110
7750: PUSH
7751: LD_INT 1
7753: NONEQUAL
7754: AND
7755: IFFALSE 7784
// begin SetTag ( i , 1 ) ;
7757: LD_VAR 0 1
7761: PPUSH
7762: LD_INT 1
7764: PPUSH
7765: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7769: LD_VAR 0 1
7773: PPUSH
7774: LD_INT 27
7776: PPUSH
7777: LD_INT 35
7779: PPUSH
7780: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7784: LD_VAR 0 1
7788: PPUSH
7789: CALL_OW 110
7793: PUSH
7794: LD_INT 1
7796: EQUAL
7797: PUSH
7798: LD_VAR 0 1
7802: PPUSH
7803: LD_INT 27
7805: PPUSH
7806: LD_INT 35
7808: PPUSH
7809: CALL_OW 297
7813: PUSH
7814: LD_INT 6
7816: LESS
7817: AND
7818: PUSH
7819: LD_VAR 0 3
7823: AND
7824: IFFALSE 7897
// begin ComExitVehicle ( tmp ) ;
7826: LD_VAR 0 3
7830: PPUSH
7831: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7835: LD_VAR 0 3
7839: PPUSH
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7849: LD_INT 35
7851: PPUSH
7852: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7856: LD_VAR 0 1
7860: PPUSH
7861: CALL_OW 256
7865: PUSH
7866: LD_INT 1000
7868: EQUAL
7869: IFFALSE 7849
// ComEnterUnit ( tmp , i ) ;
7871: LD_VAR 0 3
7875: PPUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 120
// SetTag ( i , 0 ) ;
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 0
7892: PPUSH
7893: CALL_OW 109
// end ; end ;
7897: GO 7646
7899: POP
7900: POP
// end ; end ;
7901: PPOPN 4
7903: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7904: LD_EXP 13
7908: IFFALSE 8052
7910: GO 7912
7912: DISABLE
7913: LD_INT 0
7915: PPUSH
7916: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7917: LD_ADDR_VAR 0 2
7921: PUSH
7922: LD_EXP 48
7926: PPUSH
7927: LD_INT 21
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 50
7939: PUSH
7940: EMPTY
7941: LIST
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 72
7951: ST_TO_ADDR
// if not tmp then
7952: LD_VAR 0 2
7956: NOT
7957: IFFALSE 7961
// exit ;
7959: GO 8052
// repeat wait ( 0 0$1 ) ;
7961: LD_INT 35
7963: PPUSH
7964: CALL_OW 67
// for i in tmp do
7968: LD_ADDR_VAR 0 1
7972: PUSH
7973: LD_VAR 0 2
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8043
// begin ComExit ( i ) ;
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL 767 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_INT 14
7997: PPUSH
7998: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8002: LD_VAR 0 1
8006: PPUSH
8007: LD_INT 14
8009: PPUSH
8010: CALL_OW 308
8014: IFFALSE 8041
// begin tmp := tmp diff i ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_VAR 0 1
8030: DIFF
8031: ST_TO_ADDR
// RemoveUnit ( i ) ;
8032: LD_VAR 0 1
8036: PPUSH
8037: CALL_OW 64
// end ; end ;
8041: GO 7978
8043: POP
8044: POP
// until not tmp ;
8045: LD_VAR 0 2
8049: NOT
8050: IFFALSE 7961
// end ; end_of_file
8052: PPOPN 2
8054: END
// export function Action ; var i , un , veh , tmp ; begin
8055: LD_INT 0
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
// InGameOn ;
8062: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8066: LD_INT 179
8068: PPUSH
8069: LD_INT 5
8071: PPUSH
8072: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_INT 2
8083: PPUSH
8084: LD_INT 2
8086: PPUSH
8087: LD_INT 12
8089: PPUSH
8090: LD_INT 1
8092: PPUSH
8093: LD_INT 1
8095: PPUSH
8096: LD_INT 24
8098: PPUSH
8099: LD_INT 33
8101: PPUSH
8102: CALL 329 0 7
8106: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8107: LD_VAR 0 4
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8119: LD_VAR 0 4
8123: PPUSH
8124: LD_INT 178
8126: PPUSH
8127: LD_INT 2
8129: PPUSH
8130: LD_INT 0
8132: PPUSH
8133: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8137: LD_EXP 23
8141: PPUSH
8142: LD_VAR 0 4
8146: PPUSH
8147: CALL_OW 52
// if Kamil then
8151: LD_EXP 27
8155: IFFALSE 8190
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8157: LD_EXP 27
8161: PPUSH
8162: LD_INT 207
8164: PPUSH
8165: LD_INT 37
8167: PPUSH
8168: LD_INT 0
8170: PPUSH
8171: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8175: LD_EXP 27
8179: PPUSH
8180: LD_INT 211
8182: PPUSH
8183: LD_INT 38
8185: PPUSH
8186: CALL_OW 118
// end ; if Sophia then
8190: LD_EXP 29
8194: IFFALSE 8229
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8196: LD_EXP 29
8200: PPUSH
8201: LD_INT 209
8203: PPUSH
8204: LD_INT 40
8206: PPUSH
8207: LD_INT 0
8209: PPUSH
8210: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8214: LD_EXP 29
8218: PPUSH
8219: LD_INT 211
8221: PPUSH
8222: LD_INT 38
8224: PPUSH
8225: CALL_OW 118
// end ; if Givi then
8229: LD_EXP 24
8233: IFFALSE 8268
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8235: LD_EXP 24
8239: PPUSH
8240: LD_INT 201
8242: PPUSH
8243: LD_INT 34
8245: PPUSH
8246: LD_INT 0
8248: PPUSH
8249: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8253: LD_EXP 24
8257: PPUSH
8258: LD_INT 206
8260: PPUSH
8261: LD_INT 36
8263: PPUSH
8264: CALL_OW 118
// end ; if Ibrahim then
8268: LD_EXP 26
8272: IFFALSE 8307
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8274: LD_EXP 26
8278: PPUSH
8279: LD_INT 202
8281: PPUSH
8282: LD_INT 39
8284: PPUSH
8285: LD_INT 0
8287: PPUSH
8288: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8292: LD_EXP 26
8296: PPUSH
8297: LD_INT 206
8299: PPUSH
8300: LD_INT 36
8302: PPUSH
8303: CALL_OW 118
// end ; if Markov then
8307: LD_EXP 30
8311: IFFALSE 8398
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8313: LD_ADDR_VAR 0 4
8317: PUSH
8318: LD_INT 2
8320: PPUSH
8321: LD_INT 2
8323: PPUSH
8324: LD_INT 13
8326: PPUSH
8327: LD_INT 1
8329: PPUSH
8330: LD_INT 1
8332: PPUSH
8333: LD_INT 25
8335: PPUSH
8336: LD_INT 80
8338: PUSH
8339: LD_INT 20
8341: PUSH
8342: LD_OWVAR 67
8346: MUL
8347: MINUS
8348: PPUSH
8349: CALL 329 0 7
8353: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8354: LD_VAR 0 4
8358: PPUSH
8359: LD_INT 2
8361: PPUSH
8362: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8366: LD_VAR 0 4
8370: PPUSH
8371: LD_INT 197
8373: PPUSH
8374: LD_INT 35
8376: PPUSH
8377: LD_INT 0
8379: PPUSH
8380: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8384: LD_EXP 30
8388: PPUSH
8389: LD_VAR 0 4
8393: PPUSH
8394: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8398: LD_ADDR_VAR 0 5
8402: PUSH
8403: LD_EXP 28
8407: PUSH
8408: LD_EXP 34
8412: UNION
8413: ST_TO_ADDR
// for i in tmp do
8414: LD_ADDR_VAR 0 2
8418: PUSH
8419: LD_VAR 0 5
8423: PUSH
8424: FOR_IN
8425: IFFALSE 8459
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8427: LD_VAR 0 2
8431: PPUSH
8432: LD_INT 203
8434: PPUSH
8435: LD_INT 41
8437: PPUSH
8438: LD_INT 6
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 50
// ComHold ( i ) ;
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 140
// end ;
8457: GO 8424
8459: POP
8460: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8461: LD_INT 22
8463: PUSH
8464: LD_INT 2
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 25
8473: PUSH
8474: LD_INT 2
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PPUSH
8485: CALL_OW 69
8489: NOT
8490: IFFALSE 8504
// SetClass ( Heike , 2 ) ;
8492: LD_EXP 23
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8504: LD_EXP 23
8508: PPUSH
8509: LD_INT 183
8511: PPUSH
8512: LD_INT 12
8514: PPUSH
8515: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8519: LD_EXP 23
8523: PPUSH
8524: LD_INT 188
8526: PPUSH
8527: LD_INT 20
8529: PPUSH
8530: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8534: LD_EXP 23
8538: PPUSH
8539: LD_INT 191
8541: PPUSH
8542: LD_INT 25
8544: PPUSH
8545: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8549: LD_EXP 23
8553: PPUSH
8554: LD_INT 203
8556: PPUSH
8557: LD_INT 29
8559: PPUSH
8560: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8564: LD_EXP 23
8568: PPUSH
8569: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8580: LD_EXP 23
8584: PPUSH
8585: CALL_OW 310
8589: NOT
8590: IFFALSE 8573
// CenterOnUnits ( Heike ) ;
8592: LD_EXP 23
8596: PPUSH
8597: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8601: LD_ADDR_VAR 0 5
8605: PUSH
8606: LD_INT 22
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 21
8618: PUSH
8619: LD_INT 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PPUSH
8630: CALL_OW 69
8634: PUSH
8635: LD_EXP 23
8639: PUSH
8640: LD_EXP 30
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: DIFF
8649: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8650: LD_VAR 0 5
8654: PPUSH
8655: LD_EXP 23
8659: PPUSH
8660: CALL_OW 119
// if Givi then
8664: LD_EXP 24
8668: IFFALSE 8686
// ComTurnUnit ( Heike , Givi ) else
8670: LD_EXP 23
8674: PPUSH
8675: LD_EXP 24
8679: PPUSH
8680: CALL_OW 119
8684: GO 8704
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8686: LD_EXP 23
8690: PPUSH
8691: LD_VAR 0 5
8695: PUSH
8696: LD_INT 1
8698: ARRAY
8699: PPUSH
8700: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8704: LD_EXP 23
8708: PPUSH
8709: LD_STRING DH-Start-1
8711: PPUSH
8712: CALL_OW 88
// if Givi then
8716: LD_EXP 24
8720: IFFALSE 8767
// begin Say ( Givi , DG-Start-2 ) ;
8722: LD_EXP 24
8726: PPUSH
8727: LD_STRING DG-Start-2
8729: PPUSH
8730: CALL_OW 88
// if not Mike then
8734: LD_EXP 25
8738: NOT
8739: IFFALSE 8765
// begin Say ( Givi , DG-Start-b-3 ) ;
8741: LD_EXP 24
8745: PPUSH
8746: LD_STRING DG-Start-b-3
8748: PPUSH
8749: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8753: LD_EXP 23
8757: PPUSH
8758: LD_STRING DH-Start-b-4
8760: PPUSH
8761: CALL_OW 88
// end ; end else
8765: GO 8832
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8767: LD_EXP 34
8771: PPUSH
8772: LD_INT 26
8774: PUSH
8775: LD_INT 1
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PPUSH
8782: CALL_OW 72
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: PPUSH
8791: LD_STRING DArm-Start-a-2
8793: PPUSH
8794: CALL_OW 88
8798: NOT
8799: IFFALSE 8832
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8801: LD_EXP 34
8805: PPUSH
8806: LD_INT 26
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PPUSH
8816: CALL_OW 72
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: LD_STRING DArf-Start-a-2
8827: PPUSH
8828: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8832: LD_EXP 23
8836: PPUSH
8837: LD_INT 211
8839: PPUSH
8840: LD_INT 38
8842: PPUSH
8843: CALL_OW 118
// wait ( 0 0$1 ) ;
8847: LD_INT 35
8849: PPUSH
8850: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8854: LD_EXP 23
8858: PPUSH
8859: LD_STRING DH-Start-3
8861: PPUSH
8862: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8866: LD_EXP 23
8870: PPUSH
8871: LD_STRING DH-Start-4
8873: PPUSH
8874: CALL_OW 88
// InGameOff ;
8878: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8882: LD_STRING Prepare
8884: PPUSH
8885: CALL_OW 337
// SaveForQuickRestart ;
8889: CALL_OW 22
// wait ( 0 0$10 ) ;
8893: LD_INT 350
8895: PPUSH
8896: CALL_OW 67
// if not Aviradze then
8900: LD_EXP 33
8904: NOT
8905: IFFALSE 8909
// exit ;
8907: GO 9113
// SetDir ( Aviradze , 4 ) ;
8909: LD_EXP 33
8913: PPUSH
8914: LD_INT 4
8916: PPUSH
8917: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8921: LD_EXP 33
8925: PPUSH
8926: LD_INT 225
8928: PPUSH
8929: LD_INT 33
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 48
// for i := 1 to 2 do
8939: LD_ADDR_VAR 0 2
8943: PUSH
8944: DOUBLE
8945: LD_INT 1
8947: DEC
8948: ST_TO_ADDR
8949: LD_INT 2
8951: PUSH
8952: FOR_TO
8953: IFFALSE 9084
// begin uc_side := 2 ;
8955: LD_ADDR_OWVAR 20
8959: PUSH
8960: LD_INT 2
8962: ST_TO_ADDR
// uc_nation := 0 ;
8963: LD_ADDR_OWVAR 21
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8971: LD_INT 0
8973: PPUSH
8974: LD_INT 12
8976: PPUSH
8977: LD_INT 1
8979: PPUSH
8980: CALL_OW 380
// hc_gallery :=  ;
8984: LD_ADDR_OWVAR 33
8988: PUSH
8989: LD_STRING 
8991: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8992: LD_ADDR_OWVAR 26
8996: PUSH
8997: LD_STRING Artudito
8999: PUSH
9000: LD_STRING Textur
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_VAR 0 2
9011: ARRAY
9012: ST_TO_ADDR
// un := CreateHuman ;
9013: LD_ADDR_VAR 0 3
9017: PUSH
9018: CALL_OW 44
9022: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 224
9030: PUSH
9031: LD_INT 226
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_VAR 0 2
9042: ARRAY
9043: PPUSH
9044: LD_INT 31
9046: PUSH
9047: LD_INT 35
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_VAR 0 2
9058: ARRAY
9059: PPUSH
9060: LD_INT 0
9062: PPUSH
9063: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 215
9074: PPUSH
9075: LD_INT 36
9077: PPUSH
9078: CALL_OW 111
// end ;
9082: GO 8952
9084: POP
9085: POP
// hc_name :=  ;
9086: LD_ADDR_OWVAR 26
9090: PUSH
9091: LD_STRING 
9093: ST_TO_ADDR
// InitHc ;
9094: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9098: LD_EXP 33
9102: PPUSH
9103: LD_INT 215
9105: PPUSH
9106: LD_INT 36
9108: PPUSH
9109: CALL_OW 111
// end ;
9113: LD_VAR 0 1
9117: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9118: LD_EXP 3
9122: IFFALSE 10431
9124: GO 9126
9126: DISABLE
9127: LD_INT 0
9129: PPUSH
9130: PPUSH
9131: PPUSH
// begin DialogueOn ;
9132: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9136: LD_EXP 23
9140: PPUSH
9141: LD_STRING DH-base-1
9143: PPUSH
9144: CALL_OW 88
// if Markov then
9148: LD_EXP 30
9152: IFFALSE 9204
// begin Say ( Markov , DMar-base-2 ) ;
9154: LD_EXP 30
9158: PPUSH
9159: LD_STRING DMar-base-2
9161: PPUSH
9162: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9166: LD_EXP 30
9170: PPUSH
9171: LD_STRING DMar-base-3
9173: PPUSH
9174: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9178: LD_EXP 23
9182: PPUSH
9183: LD_STRING DH-base-4
9185: PPUSH
9186: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9190: LD_EXP 30
9194: PPUSH
9195: LD_STRING DMar-base-5
9197: PPUSH
9198: CALL_OW 88
// end else
9202: GO 9281
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9204: LD_EXP 34
9208: PPUSH
9209: LD_INT 26
9211: PUSH
9212: LD_INT 1
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PPUSH
9219: CALL_OW 72
9223: PUSH
9224: LD_INT 1
9226: ARRAY
9227: PPUSH
9228: LD_STRING DArm-base-a-2
9230: PPUSH
9231: CALL_OW 88
9235: NOT
9236: IFFALSE 9269
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 26
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PPUSH
9253: CALL_OW 72
9257: PUSH
9258: LD_INT 1
9260: ARRAY
9261: PPUSH
9262: LD_STRING DArf-base-a-2
9264: PPUSH
9265: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9269: LD_EXP 23
9273: PPUSH
9274: LD_STRING DH-base-a-3
9276: PPUSH
9277: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9281: LD_EXP 33
9285: PPUSH
9286: LD_STRING DA-base-6
9288: PPUSH
9289: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9293: LD_EXP 33
9297: PPUSH
9298: LD_STRING DA-base-7
9300: PPUSH
9301: CALL_OW 88
// DialogueOff ;
9305: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9309: LD_STRING Flamethrower
9311: PPUSH
9312: CALL_OW 337
// wait ( 2 2$00 ) ;
9316: LD_INT 4200
9318: PPUSH
9319: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9323: LD_EXP 32
9327: PUSH
9328: LD_EXP 25
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: LD_INT 203
9339: PPUSH
9340: LD_INT 37
9342: PPUSH
9343: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9347: LD_INT 22
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 92
9359: PUSH
9360: LD_INT 203
9362: PUSH
9363: LD_INT 37
9365: PUSH
9366: LD_INT 10
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PPUSH
9379: CALL_OW 69
9383: NOT
9384: IFFALSE 9424
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9386: LD_EXP 32
9390: PUSH
9391: LD_EXP 25
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 23
9404: PPUSH
9405: CALL_OW 250
9409: PPUSH
9410: LD_EXP 23
9414: PPUSH
9415: CALL_OW 251
9419: PPUSH
9420: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9431: LD_INT 2
9433: PPUSH
9434: LD_EXP 32
9438: PPUSH
9439: CALL_OW 292
9443: PUSH
9444: LD_EXP 32
9448: PPUSH
9449: LD_EXP 23
9453: PPUSH
9454: CALL_OW 296
9458: PUSH
9459: LD_INT 8
9461: LESS
9462: PUSH
9463: LD_EXP 32
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_INT 2
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 21
9480: PUSH
9481: LD_INT 3
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 69
9496: PPUSH
9497: LD_EXP 32
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 296
9511: PUSH
9512: LD_INT 7
9514: LESS
9515: OR
9516: AND
9517: PUSH
9518: LD_EXP 32
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 308
9530: NOT
9531: AND
9532: IFFALSE 9424
// InGameOn ;
9534: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9538: LD_EXP 32
9542: PPUSH
9543: CALL_OW 87
// if IsInUnit ( Heike ) then
9547: LD_EXP 23
9551: PPUSH
9552: CALL_OW 310
9556: IFFALSE 9567
// ComExitBuilding ( Heike ) ;
9558: LD_EXP 23
9562: PPUSH
9563: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9567: LD_EXP 32
9571: PUSH
9572: LD_EXP 25
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: LD_EXP 23
9585: PPUSH
9586: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9590: LD_EXP 23
9594: PPUSH
9595: LD_EXP 32
9599: PPUSH
9600: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9604: LD_INT 22
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 91
9616: PUSH
9617: LD_EXP 32
9621: PUSH
9622: LD_INT 10
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 3
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PPUSH
9645: CALL_OW 69
9649: IFFALSE 9675
// begin Say ( Kurt , DKs-scout-1 ) ;
9651: LD_EXP 32
9655: PPUSH
9656: LD_STRING DKs-scout-1
9658: PPUSH
9659: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9663: LD_EXP 23
9667: PPUSH
9668: LD_STRING DH-scout-2
9670: PPUSH
9671: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9675: LD_INT 35
9677: PPUSH
9678: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9682: LD_EXP 23
9686: PPUSH
9687: LD_EXP 32
9691: PPUSH
9692: CALL_OW 296
9696: PUSH
9697: LD_INT 6
9699: LESS
9700: IFFALSE 9675
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9702: LD_EXP 32
9706: PUSH
9707: LD_EXP 25
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: LD_EXP 23
9720: PPUSH
9721: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9725: LD_EXP 32
9729: PPUSH
9730: LD_STRING DKs-scout-3
9732: PPUSH
9733: CALL_OW 88
// if Kaia then
9737: LD_EXP 28
9741: IFFALSE 9924
// begin if IsInUnit ( Kaia ) then
9743: LD_EXP 28
9747: PPUSH
9748: CALL_OW 310
9752: IFFALSE 9763
// ComExitBuilding ( Kaia ) ;
9754: LD_EXP 28
9758: PPUSH
9759: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9763: LD_EXP 28
9767: PPUSH
9768: LD_EXP 32
9772: PPUSH
9773: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9777: LD_INT 35
9779: PPUSH
9780: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9784: LD_EXP 28
9788: PPUSH
9789: LD_EXP 32
9793: PPUSH
9794: CALL_OW 296
9798: PUSH
9799: LD_INT 6
9801: LESS
9802: IFFALSE 9777
// ComTurnUnit ( Kaia , Kurt ) ;
9804: LD_EXP 28
9808: PPUSH
9809: LD_EXP 32
9813: PPUSH
9814: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9818: LD_EXP 28
9822: PPUSH
9823: LD_STRING DK-scout-4
9825: PPUSH
9826: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9830: LD_EXP 32
9834: PPUSH
9835: LD_EXP 28
9839: PPUSH
9840: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9844: LD_EXP 32
9848: PPUSH
9849: LD_STRING DKs-scout-5
9851: PPUSH
9852: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9856: LD_EXP 28
9860: PPUSH
9861: LD_STRING DK-scout-6
9863: PPUSH
9864: CALL_OW 88
// if Mike then
9868: LD_EXP 25
9872: IFFALSE 9924
// begin Say ( Mike , DM-scout-7 ) ;
9874: LD_EXP 25
9878: PPUSH
9879: LD_STRING DM-scout-7
9881: PPUSH
9882: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9886: LD_EXP 28
9890: PPUSH
9891: LD_EXP 25
9895: PPUSH
9896: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9900: LD_EXP 28
9904: PPUSH
9905: LD_STRING DK-scout-8
9907: PPUSH
9908: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9912: LD_EXP 25
9916: PPUSH
9917: LD_STRING DM-scout-9
9919: PPUSH
9920: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9924: LD_INT 184
9926: PPUSH
9927: LD_INT 100
9929: PPUSH
9930: LD_INT 2
9932: PPUSH
9933: LD_INT 12
9935: NEG
9936: PPUSH
9937: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9941: LD_INT 184
9943: PPUSH
9944: LD_INT 100
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9954: LD_INT 184
9956: PPUSH
9957: LD_INT 100
9959: PPUSH
9960: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9964: LD_EXP 32
9968: PPUSH
9969: LD_STRING DKs-scout-10
9971: PPUSH
9972: CALL_OW 88
// wait ( 0 0$1 ) ;
9976: LD_INT 35
9978: PPUSH
9979: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9983: LD_INT 144
9985: PPUSH
9986: LD_INT 65
9988: PPUSH
9989: LD_INT 2
9991: PPUSH
9992: LD_INT 12
9994: NEG
9995: PPUSH
9996: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10000: LD_INT 144
10002: PPUSH
10003: LD_INT 65
10005: PPUSH
10006: LD_INT 2
10008: PPUSH
10009: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10013: LD_INT 144
10015: PPUSH
10016: LD_INT 65
10018: PPUSH
10019: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10023: LD_EXP 32
10027: PPUSH
10028: LD_STRING DKs-scout-11
10030: PPUSH
10031: CALL_OW 88
// wait ( 0 0$1 ) ;
10035: LD_INT 35
10037: PPUSH
10038: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10042: LD_EXP 32
10046: PPUSH
10047: CALL_OW 87
// if Mike and not Givi then
10051: LD_EXP 25
10055: PUSH
10056: LD_EXP 24
10060: NOT
10061: AND
10062: IFFALSE 10088
// begin Say ( Mike , DM-scout-a-1 ) ;
10064: LD_EXP 25
10068: PPUSH
10069: LD_STRING DM-scout-a-1
10071: PPUSH
10072: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10076: LD_EXP 23
10080: PPUSH
10081: LD_STRING DH-scout-a-2
10083: PPUSH
10084: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10088: LD_EXP 32
10092: PUSH
10093: LD_EXP 25
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: LD_INT 2
10104: PPUSH
10105: CALL_OW 235
// InGameOff ;
10109: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10113: LD_STRING Hill
10115: PPUSH
10116: CALL_OW 337
// allowToPatrol := true ;
10120: LD_ADDR_EXP 12
10124: PUSH
10125: LD_INT 1
10127: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10128: LD_INT 3150
10130: PPUSH
10131: CALL_OW 67
// InitHc ;
10135: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10139: LD_ADDR_VAR 0 1
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_INT 3
10151: PUSH
10152: LD_INT 3
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: LD_OWVAR 67
10167: ARRAY
10168: PUSH
10169: FOR_TO
10170: IFFALSE 10429
// begin uc_side := 2 ;
10172: LD_ADDR_OWVAR 20
10176: PUSH
10177: LD_INT 2
10179: ST_TO_ADDR
// uc_nation := 2 ;
10180: LD_ADDR_OWVAR 21
10184: PUSH
10185: LD_INT 2
10187: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10188: LD_INT 0
10190: PPUSH
10191: LD_INT 1
10193: PUSH
10194: LD_INT 3
10196: PUSH
10197: LD_INT 1
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: LD_VAR 0 1
10209: PUSH
10210: LD_INT 3
10212: MOD
10213: PUSH
10214: LD_INT 1
10216: PLUS
10217: ARRAY
10218: PPUSH
10219: LD_INT 3
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: PUSH
10233: LD_OWVAR 67
10237: ARRAY
10238: PPUSH
10239: CALL_OW 380
// un := CreateHuman ;
10243: LD_ADDR_VAR 0 2
10247: PUSH
10248: CALL_OW 44
10252: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10253: LD_ADDR_EXP 34
10257: PUSH
10258: LD_EXP 34
10262: PUSH
10263: LD_VAR 0 2
10267: UNION
10268: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10269: LD_INT 2
10271: PPUSH
10272: LD_INT 2
10274: PPUSH
10275: LD_INT 13
10277: PPUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_VAR 0 1
10292: PUSH
10293: LD_INT 2
10295: MOD
10296: PUSH
10297: LD_INT 1
10299: PLUS
10300: ARRAY
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: LD_INT 27
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 27
10313: PUSH
10314: LD_INT 23
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_OWVAR 67
10327: PUSH
10328: LD_INT 0
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 12
10338: PLUS
10339: ARRAY
10340: PPUSH
10341: LD_INT 77
10343: PPUSH
10344: CALL 329 0 7
// veh := CreateVehicle ;
10348: LD_ADDR_VAR 0 3
10352: PUSH
10353: CALL_OW 45
10357: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_INT 2
10365: PPUSH
10366: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10370: LD_VAR 0 3
10374: PPUSH
10375: LD_INT 178
10377: PPUSH
10378: LD_INT 2
10380: PPUSH
10381: LD_INT 2
10383: PPUSH
10384: LD_INT 0
10386: PPUSH
10387: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10391: LD_VAR 0 2
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10405: LD_VAR 0 2
10409: PPUSH
10410: LD_INT 183
10412: PPUSH
10413: LD_INT 11
10415: PPUSH
10416: CALL_OW 111
// wait ( 0 0$2 ) ;
10420: LD_INT 70
10422: PPUSH
10423: CALL_OW 67
// end ;
10427: GO 10169
10429: POP
10430: POP
// end ;
10431: PPOPN 3
10433: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10434: LD_EXP 4
10438: PUSH
10439: LD_EXP 33
10443: PPUSH
10444: CALL_OW 302
10448: AND
10449: IFFALSE 10498
10451: GO 10453
10453: DISABLE
// begin DialogueOn ;
10454: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10458: LD_EXP 33
10462: PPUSH
10463: LD_STRING DA-lab-1
10465: PPUSH
10466: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10470: LD_EXP 33
10474: PPUSH
10475: LD_STRING DA-lab-2
10477: PPUSH
10478: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10482: LD_EXP 23
10486: PPUSH
10487: LD_STRING DH-lab-3
10489: PPUSH
10490: CALL_OW 88
// DialogueOff ;
10494: CALL_OW 7
// end ;
10498: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10499: LD_INT 17
10501: PPUSH
10502: LD_INT 2
10504: PPUSH
10505: CALL_OW 321
10509: PUSH
10510: LD_INT 2
10512: EQUAL
10513: IFFALSE 10645
10515: GO 10517
10517: DISABLE
10518: LD_INT 0
10520: PPUSH
// begin DialogueOn ;
10521: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10525: LD_EXP 33
10529: PPUSH
10530: LD_STRING DA-Cam-1
10532: PPUSH
10533: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10537: LD_EXP 33
10541: PPUSH
10542: LD_STRING DA-Cam-2
10544: PPUSH
10545: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10549: LD_EXP 33
10553: PPUSH
10554: LD_STRING DA-Cam-3
10556: PPUSH
10557: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10561: LD_EXP 23
10565: PPUSH
10566: LD_STRING DH-Cam-4
10568: PPUSH
10569: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10573: LD_EXP 28
10577: PPUSH
10578: LD_STRING DK-Cam-5
10580: PPUSH
10581: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10585: LD_EXP 28
10589: PPUSH
10590: LD_STRING DK-Cam-6
10592: PPUSH
10593: CALL_OW 88
// DialogueOff ;
10597: CALL_OW 7
// Query ( Camera ) ;
10601: LD_STRING Camera
10603: PPUSH
10604: CALL_OW 97
// hiddenCameraAllowed := true ;
10608: LD_ADDR_EXP 5
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
// for i in camAreas do
10616: LD_ADDR_VAR 0 1
10620: PUSH
10621: LD_EXP 8
10625: PUSH
10626: FOR_IN
10627: IFFALSE 10643
// SetAreaMapShow ( i , 1 ) ;
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 424
10641: GO 10626
10643: POP
10644: POP
// end ;
10645: PPOPN 1
10647: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10648: LD_EXP 8
10652: NOT
10653: PUSH
10654: LD_EXP 5
10658: AND
10659: IFFALSE 10757
10661: GO 10663
10663: DISABLE
10664: LD_INT 0
10666: PPUSH
// begin stop_talking := true ;
10667: LD_ADDR_OWVAR 56
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10675: LD_ADDR_VAR 0 1
10679: PUSH
10680: LD_INT 22
10682: PUSH
10683: LD_INT 2
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 21
10692: PUSH
10693: LD_INT 1
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 23
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: PPUSH
10715: CALL_OW 69
10719: PUSH
10720: FOR_IN
10721: IFFALSE 10740
// AddExperience ( i , 2 , 450 ) ;
10723: LD_VAR 0 1
10727: PPUSH
10728: LD_INT 2
10730: PPUSH
10731: LD_INT 450
10733: PPUSH
10734: CALL_OW 492
10738: GO 10720
10740: POP
10741: POP
// stop_talking := false ;
10742: LD_ADDR_OWVAR 56
10746: PUSH
10747: LD_INT 0
10749: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10750: LD_STRING ACH_CAMERA
10752: PPUSH
10753: CALL_OW 543
// end ;
10757: PPOPN 1
10759: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10760: LD_EXP 9
10764: PUSH
10765: LD_EXP 11
10769: NOT
10770: AND
10771: IFFALSE 10864
10773: GO 10775
10775: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
10776: LD_EXP 9
10780: PUSH
10781: LD_INT 1
10783: ARRAY
10784: PPUSH
10785: CALL_OW 250
10789: PPUSH
10790: LD_EXP 9
10794: PUSH
10795: LD_INT 1
10797: ARRAY
10798: PPUSH
10799: CALL_OW 251
10803: PPUSH
10804: LD_INT 2
10806: PPUSH
10807: LD_INT 6
10809: NEG
10810: PPUSH
10811: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
10815: LD_EXP 9
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: CALL_OW 87
// DialogueOn ;
10828: CALL_OW 6
// if spottedByPatrol then
10832: LD_EXP 7
10836: IFFALSE 10850
// Say ( Heike , DH-Spot-f-3 ) ;
10838: LD_EXP 23
10842: PPUSH
10843: LD_STRING DH-Spot-f-3
10845: PPUSH
10846: CALL_OW 88
// dwait ( 0 0$2 ) ;
10850: LD_INT 70
10852: PPUSH
10853: CALL_OW 68
// YouLost ( Spotted ) ;
10857: LD_STRING Spotted
10859: PPUSH
10860: CALL_OW 104
// end ;
10864: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] , [ f_side , 2 ] ] ) diff russianPatrol do
10865: LD_INT 2
10867: PUSH
10868: LD_INT 101
10870: PUSH
10871: LD_INT 3
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 101
10880: PUSH
10881: LD_INT 6
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 22
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PPUSH
10907: CALL_OW 69
10911: PUSH
10912: LD_EXP 44
10916: DIFF
10917: IFFALSE 10987
10919: GO 10921
10921: DISABLE
// russianAlert := [ FilterAllUnits ( [ [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] , [ f_side , 2 ] ] ) diff russianPatrol ] [ 1 ] ;
10922: LD_ADDR_EXP 9
10926: PUSH
10927: LD_INT 2
10929: PUSH
10930: LD_INT 101
10932: PUSH
10933: LD_INT 3
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 101
10942: PUSH
10943: LD_INT 6
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: LD_INT 22
10957: PUSH
10958: LD_INT 2
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PPUSH
10969: CALL_OW 69
10973: PUSH
10974: LD_EXP 44
10978: DIFF
10979: PUSH
10980: EMPTY
10981: LIST
10982: PUSH
10983: LD_INT 1
10985: ARRAY
10986: ST_TO_ADDR
10987: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10988: LD_EXP 9
10992: IFFALSE 11289
10994: GO 10996
10996: DISABLE
10997: LD_INT 0
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11003: LD_ADDR_VAR 0 2
11007: PUSH
11008: LD_EXP 41
11012: PPUSH
11013: LD_INT 25
11015: PUSH
11016: LD_INT 1
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 54
11025: PUSH
11026: EMPTY
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PPUSH
11033: CALL_OW 72
11037: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11038: LD_ADDR_VAR 0 3
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_INT 6
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 30
11055: PUSH
11056: LD_INT 32
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: ST_TO_ADDR
// for i := 1 to tmp do
11072: LD_ADDR_VAR 0 1
11076: PUSH
11077: DOUBLE
11078: LD_INT 1
11080: DEC
11081: ST_TO_ADDR
11082: LD_VAR 0 2
11086: PUSH
11087: FOR_TO
11088: IFFALSE 11133
// begin ComExitBuilding ( tmp [ i ] ) ;
11090: LD_VAR 0 2
11094: PUSH
11095: LD_VAR 0 1
11099: ARRAY
11100: PPUSH
11101: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11105: LD_VAR 0 2
11109: PUSH
11110: LD_VAR 0 1
11114: ARRAY
11115: PPUSH
11116: LD_VAR 0 3
11120: PUSH
11121: LD_VAR 0 1
11125: ARRAY
11126: PPUSH
11127: CALL_OW 180
// end ;
11131: GO 11087
11133: POP
11134: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11135: LD_ADDR_VAR 0 4
11139: PUSH
11140: LD_EXP 39
11144: PUSH
11145: LD_EXP 41
11149: PUSH
11150: LD_EXP 42
11154: UNION
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 72
11177: UNION
11178: ST_TO_ADDR
// for i in noncombat do
11179: LD_ADDR_VAR 0 1
11183: PUSH
11184: LD_VAR 0 4
11188: PUSH
11189: FOR_IN
11190: IFFALSE 11226
// begin if IsInUnit ( i ) then
11192: LD_VAR 0 1
11196: PPUSH
11197: CALL_OW 310
11201: IFFALSE 11212
// ComExitBuilding ( i ) ;
11203: LD_VAR 0 1
11207: PPUSH
11208: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_INT 16
11219: PPUSH
11220: CALL_OW 173
// end ;
11224: GO 11189
11226: POP
11227: POP
// if not allowHeikeAttack then
11228: LD_EXP 11
11232: NOT
11233: IFFALSE 11237
// exit ;
11235: GO 11289
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11237: LD_EXP 37
11241: PPUSH
11242: LD_STRING D9a-Kur-1
11244: PPUSH
11245: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11249: LD_EXP 40
11253: PPUSH
11254: LD_STRING D9a-Bur-1
11256: PPUSH
11257: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11261: LD_EXP 37
11265: PPUSH
11266: LD_STRING D9a-Kur-2
11268: PPUSH
11269: CALL_OW 94
// omicronFall := true ;
11273: LD_ADDR_EXP 13
11277: PUSH
11278: LD_INT 1
11280: ST_TO_ADDR
// retreatFromOmicron := true ;
11281: LD_ADDR_EXP 20
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// end ;
11289: PPOPN 4
11291: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11292: LD_INT 16
11294: PPUSH
11295: LD_INT 3
11297: PUSH
11298: LD_INT 22
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 23
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 70
11330: IFFALSE 11413
11332: GO 11334
11334: DISABLE
11335: LD_INT 0
11337: PPUSH
// begin enable ;
11338: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11339: LD_ADDR_VAR 0 1
11343: PUSH
11344: LD_INT 16
11346: PPUSH
11347: LD_INT 3
11349: PUSH
11350: LD_INT 22
11352: PUSH
11353: LD_INT 2
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 23
11366: PUSH
11367: LD_INT 3
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 70
11382: PUSH
11383: FOR_IN
11384: IFFALSE 11411
// begin escapeCounter := escapeCounter + 1 ;
11386: LD_ADDR_EXP 19
11390: PUSH
11391: LD_EXP 19
11395: PUSH
11396: LD_INT 1
11398: PLUS
11399: ST_TO_ADDR
// RemoveUnit ( i ) ;
11400: LD_VAR 0 1
11404: PPUSH
11405: CALL_OW 64
// end ;
11409: GO 11383
11411: POP
11412: POP
// end ;
11413: PPOPN 1
11415: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11416: LD_OWVAR 1
11420: PUSH
11421: LD_INT 13650
11423: PUSH
11424: LD_INT 0
11426: PPUSH
11427: LD_INT 3150
11429: PPUSH
11430: CALL_OW 12
11434: PLUS
11435: GREATEREQUAL
11436: IFFALSE 11445
11438: GO 11440
11440: DISABLE
// SmallAmericanReinforcements ;
11441: CALL 6876 0 0
11445: END
// every 0 0$1 trigger tick >= 9 9$15 do
11446: LD_OWVAR 1
11450: PUSH
11451: LD_INT 19425
11453: GREATEREQUAL
11454: IFFALSE 11519
11456: GO 11458
11458: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11459: LD_EXP 45
11463: PPUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 72
11478: PPUSH
11479: LD_INT 62
11481: PPUSH
11482: LD_INT 22
11484: PPUSH
11485: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11489: LD_EXP 46
11493: PPUSH
11494: LD_INT 69
11496: PPUSH
11497: LD_INT 27
11499: PPUSH
11500: CALL_OW 111
// wait ( 1 1$00 ) ;
11504: LD_INT 2100
11506: PPUSH
11507: CALL_OW 67
// startAttackOnOmicron := true ;
11511: LD_ADDR_EXP 6
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// end ;
11519: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11520: LD_EXP 22
11524: PUSH
11525: LD_INT 0
11527: EQUAL
11528: IFFALSE 13401
11530: GO 11532
11532: DISABLE
11533: LD_INT 0
11535: PPUSH
11536: PPUSH
11537: PPUSH
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11542: LD_INT 5
11544: PPUSH
11545: LD_INT 2
11547: PPUSH
11548: CALL_OW 343
// PrepareOmarForces ;
11552: CALL 2303 0 0
// wait ( 0 0$03 ) ;
11556: LD_INT 105
11558: PPUSH
11559: CALL_OW 67
// allowHeikeAttack := true ;
11563: LD_ADDR_EXP 11
11567: PUSH
11568: LD_INT 1
11570: ST_TO_ADDR
// activeGrishkoAI := false ;
11571: LD_ADDR_EXP 10
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// if not hillBase then
11579: LD_EXP 15
11583: NOT
11584: IFFALSE 11593
// ChangeMissionObjectives ( HillDone ) ;
11586: LD_STRING HillDone
11588: PPUSH
11589: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11593: LD_EXP 31
11597: PPUSH
11598: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11602: LD_ADDR_VAR 0 1
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 21
11619: PUSH
11620: LD_INT 1
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: PUSH
11636: FOR_IN
11637: IFFALSE 11661
// if HasTask ( i ) then
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 314
11648: IFFALSE 11659
// ComHold ( i ) ;
11650: LD_VAR 0 1
11654: PPUSH
11655: CALL_OW 140
11659: GO 11636
11661: POP
11662: POP
// DialogueOn ;
11663: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11667: LD_EXP 31
11671: PPUSH
11672: LD_STRING DO-assault-1
11674: PPUSH
11675: CALL_OW 94
// DialogueOff ;
11679: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11683: LD_ADDR_VAR 0 1
11687: PUSH
11688: LD_EXP 43
11692: PPUSH
11693: LD_INT 3
11695: PUSH
11696: LD_INT 54
11698: PUSH
11699: EMPTY
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 72
11710: PUSH
11711: FOR_IN
11712: IFFALSE 11731
// ComMoveXY ( i , 226 , 114 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 226
11721: PPUSH
11722: LD_INT 114
11724: PPUSH
11725: CALL_OW 111
11729: GO 11711
11731: POP
11732: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11733: LD_EXP 38
11737: PPUSH
11738: LD_INT 22
11740: PUSH
11741: LD_INT 6
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 30
11750: PUSH
11751: LD_INT 4
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 69
11766: PPUSH
11767: LD_EXP 38
11771: PPUSH
11772: CALL_OW 74
11776: PPUSH
11777: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11781: LD_STRING Attack
11783: PPUSH
11784: CALL_OW 337
// music_class := music_combat ;
11788: LD_ADDR_OWVAR 72
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// music_nat := 4 ;
11796: LD_ADDR_OWVAR 71
11800: PUSH
11801: LD_INT 4
11803: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11804: LD_INT 5
11806: PPUSH
11807: LD_EXP 38
11811: PPUSH
11812: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11816: LD_INT 6
11818: PPUSH
11819: LD_EXP 35
11823: PPUSH
11824: LD_INT 25
11826: PUSH
11827: LD_INT 1
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: PUSH
11839: LD_INT 4
11841: ARRAY
11842: PPUSH
11843: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_EXP 35
11856: PPUSH
11857: LD_INT 3
11859: PUSH
11860: LD_INT 25
11862: PUSH
11863: LD_INT 4
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 72
11878: PUSH
11879: FOR_IN
11880: IFFALSE 11899
// ComAgressiveMove ( i , 221 , 110 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 221
11889: PPUSH
11890: LD_INT 110
11892: PPUSH
11893: CALL_OW 114
11897: GO 11879
11899: POP
11900: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11901: LD_EXP 35
11905: PPUSH
11906: LD_INT 25
11908: PUSH
11909: LD_INT 4
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL_OW 72
11920: PPUSH
11921: LD_INT 214
11923: PPUSH
11924: LD_INT 124
11926: PPUSH
11927: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11931: LD_EXP 35
11935: PPUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 1
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 72
11950: PUSH
11951: LD_INT 4
11953: ARRAY
11954: PPUSH
11955: LD_INT 214
11957: PPUSH
11958: LD_INT 114
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11968: LD_EXP 38
11972: PPUSH
11973: LD_STRING D9-Gri-1
11975: PPUSH
11976: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11980: LD_EXP 37
11984: PPUSH
11985: LD_STRING D9-Kur-1
11987: PPUSH
11988: CALL_OW 94
// wait ( 0 0$1 ) ;
11992: LD_INT 35
11994: PPUSH
11995: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11999: LD_EXP 31
12003: PPUSH
12004: LD_INT 233
12006: PPUSH
12007: LD_INT 130
12009: PPUSH
12010: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12014: LD_EXP 38
12018: PPUSH
12019: LD_STRING D9-Gri-2
12021: PPUSH
12022: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12026: LD_EXP 37
12030: PPUSH
12031: LD_STRING D9-Kur-2
12033: PPUSH
12034: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12038: LD_EXP 38
12042: PPUSH
12043: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12047: LD_EXP 38
12051: PPUSH
12052: LD_INT 211
12054: PPUSH
12055: LD_INT 104
12057: PPUSH
12058: CALL_OW 171
// AddComHold ( Grishko ) ;
12062: LD_EXP 38
12066: PPUSH
12067: CALL_OW 200
// repeat wait ( 3 ) ;
12071: LD_INT 3
12073: PPUSH
12074: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12078: LD_EXP 38
12082: PPUSH
12083: CALL_OW 310
12087: NOT
12088: IFFALSE 12071
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12090: LD_EXP 35
12094: PPUSH
12095: LD_INT 34
12097: PUSH
12098: LD_INT 26
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: PPUSH
12110: LD_EXP 38
12114: PPUSH
12115: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12119: LD_EXP 35
12123: PPUSH
12124: LD_INT 34
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PPUSH
12134: CALL_OW 72
12138: PPUSH
12139: LD_INT 215
12141: PPUSH
12142: LD_INT 106
12144: PPUSH
12145: CALL_OW 174
// repeat wait ( 3 ) ;
12149: LD_INT 3
12151: PPUSH
12152: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12156: LD_EXP 38
12160: PPUSH
12161: CALL_OW 256
12165: PUSH
12166: LD_INT 1000
12168: LESS
12169: IFFALSE 12149
// NormalAttack ( 5 , Grishko ) ;
12171: LD_INT 5
12173: PPUSH
12174: LD_EXP 38
12178: PPUSH
12179: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12183: LD_INT 6
12185: PPUSH
12186: LD_EXP 35
12190: PPUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: PUSH
12206: LD_INT 4
12208: ARRAY
12209: PPUSH
12210: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12214: LD_EXP 38
12218: PPUSH
12219: LD_STRING D9-Gri-3
12221: PPUSH
12222: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12226: LD_EXP 37
12230: PPUSH
12231: LD_STRING D9-Kur-3
12233: PPUSH
12234: CALL_OW 94
// music_class := music_auto ;
12238: LD_ADDR_OWVAR 72
12242: PUSH
12243: LD_INT 0
12245: ST_TO_ADDR
// music_nat := music_auto ;
12246: LD_ADDR_OWVAR 71
12250: PUSH
12251: LD_INT 0
12253: ST_TO_ADDR
// for i in omarSquad do
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: LD_EXP 35
12263: PUSH
12264: FOR_IN
12265: IFFALSE 12407
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12267: LD_VAR 0 1
12271: PPUSH
12272: CALL_OW 247
12276: PUSH
12277: LD_INT 2
12279: EQUAL
12280: PUSH
12281: LD_VAR 0 1
12285: PPUSH
12286: CALL_OW 256
12290: PUSH
12291: LD_INT 1000
12293: LESS
12294: AND
12295: IFFALSE 12361
// begin driver := IsDrivenBy ( i ) ;
12297: LD_ADDR_VAR 0 2
12301: PUSH
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 311
12311: ST_TO_ADDR
// veh := i ;
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_VAR 0 1
12321: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12331: LD_VAR 0 2
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12345: LD_VAR 0 2
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: CALL_OW 180
// end else
12359: GO 12405
// if GetLives ( i ) < 500 then
12361: LD_VAR 0 1
12365: PPUSH
12366: CALL_OW 256
12370: PUSH
12371: LD_INT 500
12373: LESS
12374: IFFALSE 12405
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12376: LD_EXP 35
12380: PPUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 4
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 72
12395: PPUSH
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 188
// end ; end ;
12405: GO 12264
12407: POP
12408: POP
// repeat wait ( 0 0$1 ) ;
12409: LD_INT 35
12411: PPUSH
12412: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12416: LD_EXP 35
12420: PPUSH
12421: LD_INT 3
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 1000
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 21
12440: PUSH
12441: LD_INT 2
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: NOT
12457: PUSH
12458: LD_EXP 35
12462: PPUSH
12463: LD_INT 3
12465: PUSH
12466: LD_INT 24
12468: PUSH
12469: LD_INT 250
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 72
12484: NOT
12485: AND
12486: IFFALSE 12409
// wait ( 0 0$2 ) ;
12488: LD_INT 70
12490: PPUSH
12491: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12495: LD_ADDR_VAR 0 5
12499: PUSH
12500: LD_EXP 35
12504: PPUSH
12505: LD_INT 58
12507: PUSH
12508: EMPTY
12509: LIST
12510: PUSH
12511: LD_INT 21
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PPUSH
12525: CALL_OW 72
12529: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12530: LD_ADDR_VAR 0 6
12534: PUSH
12535: LD_EXP 35
12539: PPUSH
12540: LD_INT 25
12542: PUSH
12543: LD_INT 3
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 3
12552: PUSH
12553: LD_INT 55
12555: PUSH
12556: EMPTY
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 72
12571: ST_TO_ADDR
// for i := 1 to tmp do
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: DOUBLE
12578: LD_INT 1
12580: DEC
12581: ST_TO_ADDR
12582: LD_VAR 0 5
12586: PUSH
12587: FOR_TO
12588: IFFALSE 12618
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12590: LD_VAR 0 6
12594: PUSH
12595: LD_VAR 0 1
12599: ARRAY
12600: PPUSH
12601: LD_VAR 0 5
12605: PUSH
12606: LD_VAR 0 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 120
12616: GO 12587
12618: POP
12619: POP
// wait ( 0 0$5 ) ;
12620: LD_INT 175
12622: PPUSH
12623: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12627: LD_EXP 35
12631: PPUSH
12632: LD_INT 199
12634: PPUSH
12635: LD_INT 141
12637: PPUSH
12638: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12642: LD_EXP 31
12646: PPUSH
12647: LD_INT 190
12649: PPUSH
12650: LD_INT 143
12652: PPUSH
12653: CALL_OW 111
// AddComHold ( Omar ) ;
12657: LD_EXP 31
12661: PPUSH
12662: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12666: LD_EXP 35
12670: PPUSH
12671: LD_INT 2
12673: PUSH
12674: LD_INT 25
12676: PUSH
12677: LD_INT 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 4
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 72
12703: PPUSH
12704: LD_INT 161
12706: PPUSH
12707: LD_INT 130
12709: PPUSH
12710: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12714: LD_EXP 35
12718: PPUSH
12719: LD_INT 25
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PPUSH
12729: CALL_OW 72
12733: PPUSH
12734: LD_INT 163
12736: PPUSH
12737: LD_INT 122
12739: PPUSH
12740: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12744: LD_EXP 35
12748: PPUSH
12749: LD_INT 25
12751: PUSH
12752: LD_INT 1
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 72
12763: PUSH
12764: LD_INT 4
12766: ARRAY
12767: PPUSH
12768: LD_INT 165
12770: PPUSH
12771: LD_INT 118
12773: PPUSH
12774: LD_INT 0
12776: PPUSH
12777: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12781: LD_EXP 35
12785: PPUSH
12786: LD_INT 25
12788: PUSH
12789: LD_INT 1
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 72
12800: PUSH
12801: LD_INT 4
12803: ARRAY
12804: PPUSH
12805: LD_INT 159
12807: PPUSH
12808: LD_INT 116
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12818: LD_EXP 35
12822: PPUSH
12823: LD_INT 21
12825: PUSH
12826: LD_INT 2
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PPUSH
12833: CALL_OW 72
12837: PPUSH
12838: LD_INT 169
12840: PPUSH
12841: LD_INT 114
12843: PPUSH
12844: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12848: LD_INT 35
12850: PPUSH
12851: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12855: LD_ADDR_VAR 0 5
12859: PUSH
12860: LD_EXP 35
12864: PPUSH
12865: LD_INT 25
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PPUSH
12875: CALL_OW 72
12879: ST_TO_ADDR
// for i in tmp do
12880: LD_ADDR_VAR 0 1
12884: PUSH
12885: LD_VAR 0 5
12889: PUSH
12890: FOR_IN
12891: IFFALSE 12988
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 256
12902: PUSH
12903: LD_INT 600
12905: LESS
12906: PUSH
12907: LD_VAR 0 1
12911: PPUSH
12912: LD_INT 161
12914: PPUSH
12915: LD_INT 130
12917: PPUSH
12918: CALL_OW 297
12922: PUSH
12923: LD_INT 6
12925: GREATER
12926: AND
12927: IFFALSE 12944
// ComMoveXY ( i , 161 , 130 ) ;
12929: LD_VAR 0 1
12933: PPUSH
12934: LD_INT 161
12936: PPUSH
12937: LD_INT 130
12939: PPUSH
12940: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12944: LD_VAR 0 1
12948: PPUSH
12949: CALL_OW 256
12953: PUSH
12954: LD_INT 1000
12956: EQUAL
12957: PUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 314
12967: NOT
12968: AND
12969: IFFALSE 12986
// ComAgressiveMove ( i , 160 , 109 ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_INT 160
12978: PPUSH
12979: LD_INT 109
12981: PPUSH
12982: CALL_OW 114
// end ;
12986: GO 12890
12988: POP
12989: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12990: LD_ADDR_VAR 0 5
12994: PUSH
12995: LD_EXP 35
12999: PPUSH
13000: LD_INT 21
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 72
13014: ST_TO_ADDR
// for i in tmp do
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: LD_VAR 0 5
13024: PUSH
13025: FOR_IN
13026: IFFALSE 13292
// begin tmp2 := IsDrivenBy ( i ) ;
13028: LD_ADDR_VAR 0 6
13032: PUSH
13033: LD_VAR 0 1
13037: PPUSH
13038: CALL_OW 311
13042: ST_TO_ADDR
// if not tmp2 then
13043: LD_VAR 0 6
13047: NOT
13048: IFFALSE 13052
// continue ;
13050: GO 13025
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 256
13061: PUSH
13062: LD_INT 600
13064: GREATEREQUAL
13065: PUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 110
13075: PUSH
13076: LD_INT 1
13078: EQUAL
13079: AND
13080: IFFALSE 13094
// SetTag ( i , 0 ) ;
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_INT 0
13089: PPUSH
13090: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13094: LD_VAR 0 1
13098: PPUSH
13099: CALL_OW 256
13103: PUSH
13104: LD_INT 600
13106: GREATEREQUAL
13107: PUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 110
13117: NOT
13118: AND
13119: IFFALSE 13145
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13121: LD_VAR 0 1
13125: PPUSH
13126: LD_VAR 0 7
13130: PPUSH
13131: LD_VAR 0 1
13135: PPUSH
13136: CALL_OW 74
13140: PPUSH
13141: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13145: LD_VAR 0 1
13149: PPUSH
13150: CALL_OW 256
13154: PUSH
13155: LD_INT 600
13157: LESS
13158: PUSH
13159: LD_VAR 0 1
13163: PPUSH
13164: CALL_OW 110
13168: NOT
13169: AND
13170: IFFALSE 13199
// begin SetTag ( i , 1 ) ;
13172: LD_VAR 0 1
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13184: LD_VAR 0 1
13188: PPUSH
13189: LD_INT 202
13191: PPUSH
13192: LD_INT 150
13194: PPUSH
13195: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13199: LD_VAR 0 1
13203: PPUSH
13204: CALL_OW 110
13208: PUSH
13209: LD_INT 1
13211: EQUAL
13212: PUSH
13213: LD_VAR 0 1
13217: PPUSH
13218: LD_INT 202
13220: PPUSH
13221: LD_INT 150
13223: PPUSH
13224: CALL_OW 297
13228: PUSH
13229: LD_INT 6
13231: LESS
13232: AND
13233: PUSH
13234: LD_VAR 0 6
13238: AND
13239: IFFALSE 13290
// begin ComExitVehicle ( tmp2 ) ;
13241: LD_VAR 0 6
13245: PPUSH
13246: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13250: LD_VAR 0 6
13254: PPUSH
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13264: LD_VAR 0 6
13268: PPUSH
13269: LD_INT 700
13271: PPUSH
13272: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13276: LD_VAR 0 6
13280: PPUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 180
// end ; end ;
13290: GO 13025
13292: POP
13293: POP
// until kirovDestroyed ;
13294: LD_EXP 16
13298: IFFALSE 12848
// repeat wait ( 0 0$1 ) ;
13300: LD_INT 35
13302: PPUSH
13303: CALL_OW 67
// for i in omarSquad union Omar do
13307: LD_ADDR_VAR 0 1
13311: PUSH
13312: LD_EXP 35
13316: PUSH
13317: LD_EXP 31
13321: UNION
13322: PUSH
13323: FOR_IN
13324: IFFALSE 13368
// if IsInArea ( i , southRoadArea ) then
13326: LD_VAR 0 1
13330: PPUSH
13331: LD_INT 15
13333: PPUSH
13334: CALL_OW 308
13338: IFFALSE 13351
// RemoveUnit ( i ) else
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 64
13349: GO 13366
// ComMoveXY ( i , 208 , 162 ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_INT 208
13358: PPUSH
13359: LD_INT 162
13361: PPUSH
13362: CALL_OW 111
13366: GO 13323
13368: POP
13369: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13370: LD_INT 22
13372: PUSH
13373: LD_INT 5
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 21
13382: PUSH
13383: LD_INT 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PPUSH
13394: CALL_OW 69
13398: NOT
13399: IFFALSE 13300
// end ;
13401: PPOPN 7
13403: END
// every 0 0$1 trigger IsDead ( kirov ) do
13404: LD_INT 71
13406: PPUSH
13407: CALL_OW 301
13411: IFFALSE 13428
13413: GO 13415
13415: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13416: LD_EXP 23
13420: PPUSH
13421: LD_STRING DH-1-Kirov
13423: PPUSH
13424: CALL_OW 88
13428: END
// every 0 0$1 trigger See ( 2 , beria ) do
13429: LD_INT 2
13431: PPUSH
13432: LD_INT 106
13434: PPUSH
13435: CALL_OW 292
13439: IFFALSE 13456
13441: GO 13443
13443: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13444: LD_EXP 23
13448: PPUSH
13449: LD_STRING DH-1-Beria
13451: PPUSH
13452: CALL_OW 88
13456: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13457: LD_INT 2
13459: PPUSH
13460: LD_INT 112
13462: PPUSH
13463: CALL_OW 292
13467: IFFALSE 13484
13469: GO 13471
13471: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
13472: LD_EXP 23
13476: PPUSH
13477: LD_STRING DH-1-Kagan
13479: PPUSH
13480: CALL_OW 88
13484: END
// every 0 0$3 trigger debug and IsPlaced ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13485: LD_EXP 1
13489: PUSH
13490: LD_EXP 33
13494: PPUSH
13495: CALL_OW 305
13499: AND
13500: IFFALSE 14066
13502: GO 13504
13504: DISABLE
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
13509: PPUSH
13510: PPUSH
13511: PPUSH
// begin DialogueOn ;
13512: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13516: LD_INT 111
13518: PPUSH
13519: LD_INT 90
13521: PPUSH
13522: LD_INT 2
13524: PPUSH
13525: LD_INT 6
13527: NEG
13528: PPUSH
13529: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13533: LD_INT 111
13535: PPUSH
13536: LD_INT 90
13538: PPUSH
13539: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13543: LD_EXP 33
13547: PPUSH
13548: LD_STRING DA-Cap-1
13550: PPUSH
13551: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13555: LD_EXP 23
13559: PPUSH
13560: LD_STRING DH-Cap-2
13562: PPUSH
13563: CALL_OW 88
// DialogueOff ;
13567: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13571: LD_INT 35
13573: PPUSH
13574: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
13578: LD_EXP 17
13582: PUSH
13583: LD_EXP 47
13587: PPUSH
13588: CALL_OW 302
13592: AND
13593: PUSH
13594: LD_EXP 33
13598: PPUSH
13599: CALL_OW 302
13603: AND
13604: IFFALSE 13571
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13606: LD_ADDR_VAR 0 2
13610: PUSH
13611: LD_EXP 34
13615: PUSH
13616: LD_EXP 26
13620: PUSH
13621: LD_EXP 27
13625: PUSH
13626: LD_EXP 29
13630: PUSH
13631: LD_EXP 28
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: UNION
13642: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_VAR 0 2
13652: PPUSH
13653: LD_INT 50
13655: PUSH
13656: EMPTY
13657: LIST
13658: PPUSH
13659: CALL_OW 72
13663: ST_TO_ADDR
// if tmp < 2 then
13664: LD_VAR 0 2
13668: PUSH
13669: LD_INT 2
13671: LESS
13672: IFFALSE 13684
// q := 2 else
13674: LD_ADDR_VAR 0 4
13678: PUSH
13679: LD_INT 2
13681: ST_TO_ADDR
13682: GO 13697
// q := Query ( LabCap ) ;
13684: LD_ADDR_VAR 0 4
13688: PUSH
13689: LD_STRING LabCap
13691: PPUSH
13692: CALL_OW 97
13696: ST_TO_ADDR
// case q of 1 :
13697: LD_VAR 0 4
13701: PUSH
13702: LD_INT 1
13704: DOUBLE
13705: EQUAL
13706: IFTRUE 13710
13708: GO 14030
13710: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13711: LD_INT 2
13713: PPUSH
13714: LD_EXP 47
13718: PPUSH
13719: CALL_OW 471
// labCaptured := true ;
13723: LD_ADDR_EXP 21
13727: PUSH
13728: LD_INT 1
13730: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13731: LD_EXP 23
13735: PPUSH
13736: LD_STRING DH-Cap-a-1
13738: PPUSH
13739: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13743: LD_EXP 33
13747: PPUSH
13748: LD_STRING DA-Cap-a-2
13750: PPUSH
13751: CALL_OW 88
// settings := [ Heike , sel_not_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ^ [ ] ;
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: LD_EXP 23
13764: PUSH
13765: LD_INT -4
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_VAR 0 2
13776: ADD
13777: PUSH
13778: LD_INT -2
13780: PUSH
13781: LD_INT -4
13783: PUSH
13784: LD_EXP 33
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: ADD
13794: PUSH
13795: EMPTY
13796: ADD
13797: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
13798: LD_ADDR_VAR 0 3
13802: PUSH
13803: LD_STRING Select two characters to go with Aviradze
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: LD_VAR 0 5
13816: PPUSH
13817: EMPTY
13818: PPUSH
13819: CALL_OW 42
13823: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
13824: LD_EXP 47
13828: PPUSH
13829: LD_INT 8
13831: PPUSH
13832: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
13836: LD_EXP 33
13840: PPUSH
13841: LD_INT 8
13843: PPUSH
13844: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13848: LD_ADDR_EXP 36
13852: PUSH
13853: LD_EXP 33
13857: PUSH
13858: EMPTY
13859: LIST
13860: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
13861: LD_EXP 33
13865: PPUSH
13866: CALL_OW 310
13870: IFFALSE 13881
// ComExit ( Aviradze ) ;
13872: LD_EXP 33
13876: PPUSH
13877: CALL 767 0 1
// wait ( 3 ) ;
13881: LD_INT 3
13883: PPUSH
13884: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
13888: LD_EXP 33
13892: PPUSH
13893: LD_EXP 47
13897: PPUSH
13898: CALL_OW 120
// for i := 1 to 2 do
13902: LD_ADDR_VAR 0 1
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_INT 2
13914: PUSH
13915: FOR_TO
13916: IFFALSE 14019
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
13918: LD_ADDR_EXP 36
13922: PUSH
13923: LD_EXP 36
13927: PUSH
13928: LD_VAR 0 3
13932: PUSH
13933: LD_VAR 0 1
13937: ARRAY
13938: UNION
13939: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
13940: LD_VAR 0 3
13944: PUSH
13945: LD_VAR 0 1
13949: ARRAY
13950: PPUSH
13951: LD_INT 8
13953: PPUSH
13954: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
13958: LD_VAR 0 3
13962: PUSH
13963: LD_VAR 0 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 310
13973: IFFALSE 13990
// ComExit ( tmp2 [ i ] ) ;
13975: LD_VAR 0 3
13979: PUSH
13980: LD_VAR 0 1
13984: ARRAY
13985: PPUSH
13986: CALL 767 0 1
// wait ( 3 ) ;
13990: LD_INT 3
13992: PPUSH
13993: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
13997: LD_VAR 0 3
14001: PUSH
14002: LD_VAR 0 1
14006: ARRAY
14007: PPUSH
14008: LD_EXP 47
14012: PPUSH
14013: CALL_OW 120
// end ;
14017: GO 13915
14019: POP
14020: POP
// SetAchievement ( ACH_LAB ) ;
14021: LD_STRING ACH_LAB
14023: PPUSH
14024: CALL_OW 543
// end ; 2 :
14028: GO 14066
14030: LD_INT 2
14032: DOUBLE
14033: EQUAL
14034: IFTRUE 14038
14036: GO 14065
14038: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14039: LD_EXP 23
14043: PPUSH
14044: LD_STRING DH-Cap-b-1
14046: PPUSH
14047: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14051: LD_EXP 33
14055: PPUSH
14056: LD_STRING DA-Cap-b-2
14058: PPUSH
14059: CALL_OW 88
// end ; end ;
14063: GO 14066
14065: POP
// end ;
14066: PPOPN 5
14068: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14069: LD_INT 10
14071: PPUSH
14072: LD_INT 22
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 30
14084: PUSH
14085: LD_INT 31
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 70
14100: PUSH
14101: LD_INT 2
14103: GREATEREQUAL
14104: IFFALSE 14116
14106: GO 14108
14108: DISABLE
// SetAchievement ( ACH_KING ) ;
14109: LD_STRING ACH_KING
14111: PPUSH
14112: CALL_OW 543
14116: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14117: LD_EXP 11
14121: NOT
14122: PUSH
14123: LD_INT 10
14125: PPUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 2
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: LD_INT 30
14141: PUSH
14142: LD_INT 31
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 30
14151: PUSH
14152: LD_INT 4
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 70
14172: AND
14173: IFFALSE 14193
14175: GO 14177
14177: DISABLE
// begin hillBase := true ;
14178: LD_ADDR_EXP 15
14182: PUSH
14183: LD_INT 1
14185: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14186: LD_STRING HillDone
14188: PPUSH
14189: CALL_OW 337
// end ;
14193: END
// every 0 0$1 trigger debug or ( kirovDestroyed and beriaDestroyed and kaganDestroyed ) do var i , tmp , tmp2 , cargo ;
14194: LD_EXP 1
14198: PUSH
14199: LD_EXP 16
14203: PUSH
14204: LD_EXP 17
14208: AND
14209: PUSH
14210: LD_EXP 18
14214: AND
14215: OR
14216: IFFALSE 15373
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14227: LD_STRING GoToWest
14229: PPUSH
14230: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14234: LD_INT 17
14236: PPUSH
14237: LD_INT 1
14239: PPUSH
14240: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14244: LD_INT 35
14246: PPUSH
14247: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14251: LD_ADDR_VAR 0 2
14255: PUSH
14256: LD_INT 17
14258: PPUSH
14259: LD_INT 22
14261: PUSH
14262: LD_INT 2
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 2
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 21
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 3
14294: PUSH
14295: LD_INT 58
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 70
14322: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 3
14340: PUSH
14341: LD_INT 55
14343: PUSH
14344: EMPTY
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 3
14376: PUSH
14377: LD_INT 58
14379: PUSH
14380: EMPTY
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: PPUSH
14401: CALL_OW 69
14405: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
14406: LD_VAR 0 2
14410: PUSH
14411: LD_INT 0
14413: PLUS
14414: PUSH
14415: LD_VAR 0 3
14419: PUSH
14420: LD_INT 0
14422: PLUS
14423: EQUAL
14424: IFFALSE 14244
// SaveCharacters ( Heike , 04_1_Heike ) ;
14426: LD_EXP 23
14430: PPUSH
14431: LD_STRING 04_1_Heike
14433: PPUSH
14434: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
14438: LD_EXP 33
14442: PUSH
14443: LD_EXP 33
14447: PUSH
14448: LD_EXP 36
14452: IN
14453: NOT
14454: AND
14455: IFFALSE 14471
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
14457: LD_EXP 33
14461: PPUSH
14462: LD_STRING 04_1_Aviradze
14464: PPUSH
14465: CALL_OW 38
14469: GO 14489
// if Aviradze then
14471: LD_EXP 33
14475: IFFALSE 14489
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
14477: LD_EXP 33
14481: PPUSH
14482: LD_STRING 04_1_Aviradze_L
14484: PPUSH
14485: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
14489: LD_EXP 26
14493: PUSH
14494: LD_EXP 26
14498: PUSH
14499: LD_EXP 36
14503: IN
14504: NOT
14505: AND
14506: IFFALSE 14522
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
14508: LD_EXP 26
14512: PPUSH
14513: LD_STRING 04_1_Ibrahim
14515: PPUSH
14516: CALL_OW 38
14520: GO 14540
// if Ibrahim then
14522: LD_EXP 26
14526: IFFALSE 14540
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
14528: LD_EXP 26
14532: PPUSH
14533: LD_STRING 04_1_Ibrahim_L
14535: PPUSH
14536: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
14540: LD_EXP 27
14544: PUSH
14545: LD_EXP 27
14549: PUSH
14550: LD_EXP 36
14554: IN
14555: NOT
14556: AND
14557: IFFALSE 14573
// SaveCharacters ( Kamil , 04_1_Kamil ) else
14559: LD_EXP 27
14563: PPUSH
14564: LD_STRING 04_1_Kamil
14566: PPUSH
14567: CALL_OW 38
14571: GO 14591
// if Kamil then
14573: LD_EXP 27
14577: IFFALSE 14591
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
14579: LD_EXP 27
14583: PPUSH
14584: LD_STRING 04_1_Kamil_L
14586: PPUSH
14587: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
14591: LD_EXP 29
14595: PUSH
14596: LD_EXP 29
14600: PUSH
14601: LD_EXP 36
14605: IN
14606: NOT
14607: AND
14608: IFFALSE 14624
// SaveCharacters ( Sophia , 04_1_Sophia ) else
14610: LD_EXP 29
14614: PPUSH
14615: LD_STRING 04_1_Sophia
14617: PPUSH
14618: CALL_OW 38
14622: GO 14642
// if Sophia then
14624: LD_EXP 29
14628: IFFALSE 14642
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
14630: LD_EXP 29
14634: PPUSH
14635: LD_STRING 04_1_Sophia_L
14637: PPUSH
14638: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
14642: LD_EXP 28
14646: PUSH
14647: LD_EXP 28
14651: PUSH
14652: LD_EXP 36
14656: IN
14657: NOT
14658: AND
14659: IFFALSE 14675
// SaveCharacters ( Kaia , 04_1_Kaia ) else
14661: LD_EXP 28
14665: PPUSH
14666: LD_STRING 04_1_Kaia
14668: PPUSH
14669: CALL_OW 38
14673: GO 14693
// if Kaia then
14675: LD_EXP 28
14679: IFFALSE 14693
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
14681: LD_EXP 28
14685: PPUSH
14686: LD_STRING 04_1_Kaia_L
14688: PPUSH
14689: CALL_OW 38
// if Givi then
14693: LD_EXP 24
14697: IFFALSE 14711
// SaveCharacters ( Givi , 04_1_Givi ) ;
14699: LD_EXP 24
14703: PPUSH
14704: LD_STRING 04_1_Givi
14706: PPUSH
14707: CALL_OW 38
// if Mike then
14711: LD_EXP 25
14715: IFFALSE 14729
// SaveCharacters ( Mike , 04_1_Mike ) ;
14717: LD_EXP 25
14721: PPUSH
14722: LD_STRING 04_1_Mike
14724: PPUSH
14725: CALL_OW 38
// if Markov then
14729: LD_EXP 30
14733: IFFALSE 14747
// SaveCharacters ( Markov , 04_1_Markov ) ;
14735: LD_EXP 30
14739: PPUSH
14740: LD_STRING 04_1_Markov
14742: PPUSH
14743: CALL_OW 38
// if Kurt then
14747: LD_EXP 32
14751: IFFALSE 14765
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
14753: LD_EXP 32
14757: PPUSH
14758: LD_STRING 04_1_Kurt
14760: PPUSH
14761: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
14765: LD_EXP 34
14769: PUSH
14770: LD_EXP 36
14774: DIFF
14775: IFFALSE 14795
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
14777: LD_EXP 34
14781: PUSH
14782: LD_EXP 36
14786: DIFF
14787: PPUSH
14788: LD_STRING 04_1_others
14790: PPUSH
14791: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
14795: LD_EXP 36
14799: PUSH
14800: LD_EXP 34
14804: AND
14805: IFFALSE 14890
// begin tmp := [ ] ;
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: EMPTY
14813: ST_TO_ADDR
// for i in heikeSecondSquad do
14814: LD_ADDR_VAR 0 1
14818: PUSH
14819: LD_EXP 34
14823: PUSH
14824: FOR_IN
14825: IFFALSE 14870
// if i in aviradzeSquad then
14827: LD_VAR 0 1
14831: PUSH
14832: LD_EXP 36
14836: IN
14837: IFFALSE 14868
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14839: LD_ADDR_VAR 0 2
14843: PUSH
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_VAR 0 2
14853: PUSH
14854: LD_INT 1
14856: PLUS
14857: PPUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 1
14867: ST_TO_ADDR
14868: GO 14824
14870: POP
14871: POP
// if tmp then
14872: LD_VAR 0 2
14876: IFFALSE 14890
// SaveCharacters ( tmp , 04_1_others_L ) ;
14878: LD_VAR 0 2
14882: PPUSH
14883: LD_STRING 04_1_others_L
14885: PPUSH
14886: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14890: LD_ADDR_VAR 0 2
14894: PUSH
14895: LD_INT 22
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 23
14907: PUSH
14908: LD_INT 0
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: ST_TO_ADDR
// if tmp then
14924: LD_VAR 0 2
14928: IFFALSE 14942
// SaveCharacters ( tmp , 04_1_apes ) ;
14930: LD_VAR 0 2
14934: PPUSH
14935: LD_STRING 04_1_apes
14937: PPUSH
14938: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_INT 17
14949: PPUSH
14950: LD_INT 21
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 70
14964: ST_TO_ADDR
// if tmp then
14965: LD_VAR 0 2
14969: IFFALSE 15263
// begin tmp2 := [ ] ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: EMPTY
14977: ST_TO_ADDR
// for i in tmp do
14978: LD_ADDR_VAR 0 1
14982: PUSH
14983: LD_VAR 0 2
14987: PUSH
14988: FOR_IN
14989: IFFALSE 15249
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 264
15000: PUSH
15001: LD_INT 32
15003: PUSH
15004: LD_INT 12
15006: PUSH
15007: LD_INT 51
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: IN
15015: IFFALSE 15152
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15017: LD_ADDR_VAR 0 4
15021: PUSH
15022: LD_VAR 0 1
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 289
15034: PUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_INT 2
15042: PPUSH
15043: CALL_OW 289
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: LD_VAR 0 3
15066: PUSH
15067: LD_INT 1
15069: PLUS
15070: PPUSH
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 265
15080: PUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 262
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: CALL_OW 263
15100: PUSH
15101: LD_VAR 0 1
15105: PPUSH
15106: CALL_OW 264
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 248
15120: PUSH
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 256
15130: PUSH
15131: LD_VAR 0 4
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 1
15149: ST_TO_ADDR
// end else
15150: GO 15247
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15152: LD_ADDR_VAR 0 3
15156: PUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_VAR 0 3
15166: PUSH
15167: LD_INT 1
15169: PLUS
15170: PPUSH
15171: LD_VAR 0 1
15175: PPUSH
15176: CALL_OW 265
15180: PUSH
15181: LD_VAR 0 1
15185: PPUSH
15186: CALL_OW 262
15190: PUSH
15191: LD_VAR 0 1
15195: PPUSH
15196: CALL_OW 263
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 264
15210: PUSH
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 248
15220: PUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 256
15230: PUSH
15231: EMPTY
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 1
15246: ST_TO_ADDR
15247: GO 14988
15249: POP
15250: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15251: LD_VAR 0 3
15255: PPUSH
15256: LD_STRING 04_1_Vehicles
15258: PPUSH
15259: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15263: LD_EXP 21
15267: PPUSH
15268: LD_STRING 04_1_RuLabCaptured
15270: PPUSH
15271: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15275: LD_EXP 19
15279: PPUSH
15280: LD_STRING 04_1_EscapeCounter
15282: PPUSH
15283: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15287: LD_EXP 15
15291: PPUSH
15292: LD_STRING 04_1_BaseHill
15294: PPUSH
15295: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15299: LD_OWVAR 1
15303: PPUSH
15304: LD_STRING 04_1_Time
15306: PPUSH
15307: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15311: LD_EXP 14
15315: PPUSH
15316: LD_STRING 04_1_DeadCounter
15318: PPUSH
15319: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15323: LD_INT 22
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 34
15335: PUSH
15336: LD_INT 26
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 69
15351: PUSH
15352: LD_INT 0
15354: PLUS
15355: PPUSH
15356: LD_STRING 04_1_Flamethrower
15358: PPUSH
15359: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
15363: LD_INT 1
15365: PPUSH
15366: LD_STRING __x1\04_cont2
15368: PPUSH
15369: CALL_OW 340
// end ; end_of_file
15373: PPOPN 4
15375: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 266
15385: PUSH
15386: LD_INT 0
15388: EQUAL
15389: PUSH
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 255
15399: PUSH
15400: LD_INT 2
15402: EQUAL
15403: AND
15404: IFFALSE 15414
// baseConstructed := true ;
15406: LD_ADDR_EXP 3
15410: PUSH
15411: LD_INT 1
15413: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
15414: LD_VAR 0 1
15418: PPUSH
15419: CALL_OW 266
15423: PUSH
15424: LD_INT 6
15426: EQUAL
15427: PUSH
15428: LD_VAR 0 1
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 2
15440: EQUAL
15441: AND
15442: IFFALSE 15452
// labConstructed := true ;
15444: LD_ADDR_EXP 4
15448: PUSH
15449: LD_INT 1
15451: ST_TO_ADDR
// end ;
15452: PPOPN 1
15454: END
// on UnitDestroyed ( un ) do begin if un = Heike then
15455: LD_VAR 0 1
15459: PUSH
15460: LD_EXP 23
15464: EQUAL
15465: IFFALSE 15474
// YouLost ( Heike ) ;
15467: LD_STRING Heike
15469: PPUSH
15470: CALL_OW 104
// if un = Omar then
15474: LD_VAR 0 1
15478: PUSH
15479: LD_EXP 31
15483: EQUAL
15484: IFFALSE 15493
// YouLost ( Omar ) ;
15486: LD_STRING Omar
15488: PPUSH
15489: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
15493: LD_VAR 0 1
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_INT 2
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 23
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 21
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: PPUSH
15533: CALL_OW 69
15537: IN
15538: IFFALSE 15554
// loseCounter := loseCounter + 1 ;
15540: LD_ADDR_EXP 14
15544: PUSH
15545: LD_EXP 14
15549: PUSH
15550: LD_INT 1
15552: PLUS
15553: ST_TO_ADDR
// if un = omikron then
15554: LD_VAR 0 1
15558: PUSH
15559: LD_INT 64
15561: EQUAL
15562: IFFALSE 15572
// omicronFall := true ;
15564: LD_ADDR_EXP 13
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// if un = kirov then
15572: LD_VAR 0 1
15576: PUSH
15577: LD_INT 71
15579: EQUAL
15580: IFFALSE 15597
// begin ChangeMissionObjectives ( KirovDone ) ;
15582: LD_STRING KirovDone
15584: PPUSH
15585: CALL_OW 337
// kirovDestroyed := true ;
15589: LD_ADDR_EXP 16
15593: PUSH
15594: LD_INT 1
15596: ST_TO_ADDR
// end ; if un = beria then
15597: LD_VAR 0 1
15601: PUSH
15602: LD_INT 106
15604: EQUAL
15605: IFFALSE 15622
// begin ChangeMissionObjectives ( BeriaDone ) ;
15607: LD_STRING BeriaDone
15609: PPUSH
15610: CALL_OW 337
// beriaDestroyed := true ;
15614: LD_ADDR_EXP 17
15618: PUSH
15619: LD_INT 1
15621: ST_TO_ADDR
// end ; if un = kagan then
15622: LD_VAR 0 1
15626: PUSH
15627: LD_INT 112
15629: EQUAL
15630: IFFALSE 15647
// begin ChangeMissionObjectives ( KaganDone ) ;
15632: LD_STRING KaganDone
15634: PPUSH
15635: CALL_OW 337
// kaganDestroyed := true ;
15639: LD_ADDR_EXP 18
15643: PUSH
15644: LD_INT 1
15646: ST_TO_ADDR
// end ; if un in russianPatrol then
15647: LD_VAR 0 1
15651: PUSH
15652: LD_EXP 44
15656: IN
15657: IFFALSE 15698
// begin if GetTag ( un ) = 2 then
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 110
15668: PUSH
15669: LD_INT 2
15671: EQUAL
15672: IFFALSE 15682
// spottedByPatrol := false ;
15674: LD_ADDR_EXP 7
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
15682: LD_ADDR_EXP 44
15686: PUSH
15687: LD_EXP 44
15691: PUSH
15692: LD_VAR 0 1
15696: DIFF
15697: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
15698: LD_VAR 0 1
15702: PUSH
15703: LD_EXP 45
15707: IN
15708: IFFALSE 15726
// russianOmicronAttackers := russianOmicronAttackers diff un ;
15710: LD_ADDR_EXP 45
15714: PUSH
15715: LD_EXP 45
15719: PUSH
15720: LD_VAR 0 1
15724: DIFF
15725: ST_TO_ADDR
// end ;
15726: PPOPN 1
15728: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
15729: LD_INT 0
15731: PPUSH
15732: PPUSH
15733: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
15734: LD_VAR 0 1
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: LD_INT 22
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 22
15754: PUSH
15755: LD_INT 4
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_INT 6
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 32
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PPUSH
15792: CALL_OW 69
15796: IN
15797: IFFALSE 15970
// begin sol := UnitsInside ( un ) ;
15799: LD_ADDR_VAR 0 3
15803: PUSH
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 313
15813: ST_TO_ADDR
// if not sol then
15814: LD_VAR 0 3
15818: NOT
15819: IFFALSE 15823
// exit ;
15821: GO 15970
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15823: LD_ADDR_VAR 0 4
15827: PUSH
15828: LD_INT 22
15830: PUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 255
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: LD_INT 30
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 30
15860: PUSH
15861: LD_INT 5
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: ST_TO_ADDR
// if not nearestBarracks then
15882: LD_VAR 0 4
15886: NOT
15887: IFFALSE 15891
// exit ;
15889: GO 15970
// for i in nearestBarracks do
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_VAR 0 4
15900: PUSH
15901: FOR_IN
15902: IFFALSE 15937
// if UnitsInside ( i ) = 6 then
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 313
15913: PUSH
15914: LD_INT 6
15916: EQUAL
15917: IFFALSE 15935
// nearestBarracks := nearestBarracks diff i ;
15919: LD_ADDR_VAR 0 4
15923: PUSH
15924: LD_VAR 0 4
15928: PUSH
15929: LD_VAR 0 2
15933: DIFF
15934: ST_TO_ADDR
15935: GO 15901
15937: POP
15938: POP
// if not nearestBarracks then
15939: LD_VAR 0 4
15943: NOT
15944: IFFALSE 15948
// exit ;
15946: GO 15970
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15948: LD_VAR 0 3
15952: PUSH
15953: LD_INT 1
15955: ARRAY
15956: PPUSH
15957: LD_VAR 0 4
15961: PUSH
15962: LD_INT 1
15964: ARRAY
15965: PPUSH
15966: CALL_OW 120
// end ; end ;
15970: PPOPN 4
15972: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15973: LD_INT 0
15975: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15976: LD_EXP 8
15980: NOT
15981: PUSH
15982: LD_EXP 5
15986: NOT
15987: OR
15988: IFFALSE 15992
// exit ;
15990: GO 16060
// for i in camAreas do
15992: LD_ADDR_VAR 0 5
15996: PUSH
15997: LD_EXP 8
16001: PUSH
16002: FOR_IN
16003: IFFALSE 16058
// if InArea ( x , y , i ) then
16005: LD_VAR 0 3
16009: PPUSH
16010: LD_VAR 0 4
16014: PPUSH
16015: LD_VAR 0 5
16019: PPUSH
16020: CALL_OW 309
16024: IFFALSE 16056
// begin SetAreaMapShow ( i , 0 ) ;
16026: LD_VAR 0 5
16030: PPUSH
16031: LD_INT 0
16033: PPUSH
16034: CALL_OW 424
// camAreas := camAreas diff i ;
16038: LD_ADDR_EXP 8
16042: PUSH
16043: LD_EXP 8
16047: PUSH
16048: LD_VAR 0 5
16052: DIFF
16053: ST_TO_ADDR
// break ;
16054: GO 16058
// end ;
16056: GO 16002
16058: POP
16059: POP
// end ;
16060: PPOPN 5
16062: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16063: LD_VAR 0 1
16067: PUSH
16068: LD_INT 2
16070: EQUAL
16071: PUSH
16072: LD_VAR 0 2
16076: PUSH
16077: LD_INT 5
16079: PUSH
16080: LD_INT 8
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: IN
16087: AND
16088: IFFALSE 16097
// YouLost ( Ally ) ;
16090: LD_STRING Ally
16092: PPUSH
16093: CALL_OW 104
// end ; end_of_file
16097: PPOPN 2
16099: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
16100: LD_EXP 11
16104: NOT
16105: PUSH
16106: LD_INT 12
16108: PPUSH
16109: LD_INT 1
16111: PPUSH
16112: CALL_OW 287
16116: PUSH
16117: LD_INT 200
16119: PUSH
16120: LD_INT 160
16122: PUSH
16123: LD_INT 120
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: LD_OWVAR 67
16135: ARRAY
16136: LESS
16137: AND
16138: IFFALSE 16165
16140: GO 16142
16142: DISABLE
// begin enable ;
16143: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16144: LD_INT 1
16146: PPUSH
16147: LD_INT 5
16149: PPUSH
16150: CALL_OW 12
16154: PPUSH
16155: LD_INT 12
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 55
// end ; end_of_file
16165: END
// every 0 0$1 trigger omarCountdown do
16166: LD_EXP 22
16170: IFFALSE 16222
16172: GO 16174
16174: DISABLE
// begin enable ;
16175: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16176: LD_ADDR_OWVAR 47
16180: PUSH
16181: LD_STRING #X104-1
16183: PUSH
16184: LD_EXP 22
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16193: LD_ADDR_EXP 22
16197: PUSH
16198: LD_EXP 22
16202: PUSH
16203: LD_INT 35
16205: MINUS
16206: ST_TO_ADDR
// if not omarCountdown then
16207: LD_EXP 22
16211: NOT
16212: IFFALSE 16222
// display_strings :=  ;
16214: LD_ADDR_OWVAR 47
16218: PUSH
16219: LD_STRING 
16221: ST_TO_ADDR
// end ;
16222: END
