// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37680 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37680 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37680 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37680 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37680 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37680 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37680 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37680 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37680 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37680 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37680 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37680 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37680 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37680 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37680 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37680 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75527 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9371: LD_EXP 3
9375: IFFALSE 10783
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
// begin DialogueOn ;
9385: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9389: LD_EXP 25
9393: PPUSH
9394: LD_STRING DH-base-1
9396: PPUSH
9397: CALL_OW 88
// if Markov then
9401: LD_EXP 32
9405: IFFALSE 9457
// begin Say ( Markov , DMar-base-2 ) ;
9407: LD_EXP 32
9411: PPUSH
9412: LD_STRING DMar-base-2
9414: PPUSH
9415: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9419: LD_EXP 32
9423: PPUSH
9424: LD_STRING DMar-base-3
9426: PPUSH
9427: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING DH-base-4
9438: PPUSH
9439: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9443: LD_EXP 32
9447: PPUSH
9448: LD_STRING DMar-base-5
9450: PPUSH
9451: CALL_OW 88
// end else
9455: GO 9534
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9457: LD_EXP 37
9461: PPUSH
9462: LD_INT 26
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 72
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PPUSH
9481: LD_STRING DArm-base-a-2
9483: PPUSH
9484: CALL_OW 88
9488: NOT
9489: IFFALSE 9522
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9491: LD_EXP 37
9495: PPUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 72
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_STRING DArf-base-a-2
9517: PPUSH
9518: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9522: LD_EXP 25
9526: PPUSH
9527: LD_STRING DH-base-a-3
9529: PPUSH
9530: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9534: LD_EXP 35
9538: PPUSH
9539: LD_STRING DA-base-6
9541: PPUSH
9542: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9546: LD_EXP 35
9550: PPUSH
9551: LD_STRING DA-base-7
9553: PPUSH
9554: CALL_OW 88
// DialogueOff ;
9558: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9562: LD_STRING Flamethrower
9564: PPUSH
9565: CALL_OW 337
// wait ( 2 2$00 ) ;
9569: LD_INT 4200
9571: PPUSH
9572: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9576: LD_EXP 34
9580: PUSH
9581: LD_EXP 27
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: LD_INT 203
9592: PPUSH
9593: LD_INT 37
9595: PPUSH
9596: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 92
9612: PUSH
9613: LD_INT 203
9615: PUSH
9616: LD_INT 37
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: NOT
9637: IFFALSE 9677
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9639: LD_EXP 34
9643: PUSH
9644: LD_EXP 27
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: LD_EXP 25
9657: PPUSH
9658: CALL_OW 250
9662: PPUSH
9663: LD_EXP 25
9667: PPUSH
9668: CALL_OW 251
9672: PPUSH
9673: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9677: LD_INT 35
9679: PPUSH
9680: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9684: LD_INT 2
9686: PPUSH
9687: LD_EXP 34
9691: PPUSH
9692: CALL_OW 292
9696: PUSH
9697: LD_EXP 34
9701: PPUSH
9702: LD_EXP 25
9706: PPUSH
9707: CALL_OW 296
9711: PUSH
9712: LD_INT 8
9714: LESS
9715: PUSH
9716: LD_EXP 34
9720: PPUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 3
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PPUSH
9750: LD_EXP 34
9754: PPUSH
9755: CALL_OW 74
9759: PPUSH
9760: CALL_OW 296
9764: PUSH
9765: LD_INT 7
9767: LESS
9768: OR
9769: AND
9770: PUSH
9771: LD_EXP 34
9775: PPUSH
9776: LD_INT 10
9778: PPUSH
9779: CALL_OW 308
9783: NOT
9784: AND
9785: IFFALSE 9677
// InGameOn ;
9787: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9791: LD_EXP 34
9795: PPUSH
9796: CALL_OW 87
// if IsInUnit ( Heike ) then
9800: LD_EXP 25
9804: PPUSH
9805: CALL_OW 310
9809: IFFALSE 9820
// ComExitBuilding ( Heike ) ;
9811: LD_EXP 25
9815: PPUSH
9816: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9820: LD_EXP 34
9824: PUSH
9825: LD_EXP 27
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: LD_EXP 25
9838: PPUSH
9839: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9843: LD_EXP 25
9847: PPUSH
9848: LD_EXP 34
9852: PPUSH
9853: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 91
9869: PUSH
9870: LD_EXP 34
9874: PUSH
9875: LD_INT 10
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 21
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: IFFALSE 9928
// begin Say ( Kurt , DKs-scout-1 ) ;
9904: LD_EXP 34
9908: PPUSH
9909: LD_STRING DKs-scout-1
9911: PPUSH
9912: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9916: LD_EXP 25
9920: PPUSH
9921: LD_STRING DH-scout-2
9923: PPUSH
9924: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9928: LD_EXP 25
9932: PPUSH
9933: CALL_OW 85
// if IsInUnit ( Heike ) then
9937: LD_EXP 25
9941: PPUSH
9942: CALL_OW 310
9946: IFFALSE 9957
// ComExit ( Heike ) ;
9948: LD_EXP 25
9952: PPUSH
9953: CALL 75527 0 1
// repeat wait ( 0 0$1 ) ;
9957: LD_INT 35
9959: PPUSH
9960: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9964: LD_EXP 25
9968: PPUSH
9969: LD_EXP 34
9973: PPUSH
9974: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9978: LD_EXP 25
9982: PPUSH
9983: LD_EXP 34
9987: PPUSH
9988: CALL_OW 296
9992: PUSH
9993: LD_INT 6
9995: LESS
9996: IFFALSE 9957
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9998: LD_EXP 34
10002: PUSH
10003: LD_EXP 27
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PPUSH
10012: LD_EXP 25
10016: PPUSH
10017: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10021: LD_EXP 34
10025: PPUSH
10026: LD_STRING DKs-scout-3
10028: PPUSH
10029: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10033: LD_EXP 30
10037: PUSH
10038: LD_EXP 30
10042: PPUSH
10043: LD_EXP 34
10047: PPUSH
10048: CALL_OW 296
10052: PUSH
10053: LD_INT 15
10055: LESS
10056: AND
10057: IFFALSE 10247
// begin if IsInUnit ( Kaia ) then
10059: LD_EXP 30
10063: PPUSH
10064: CALL_OW 310
10068: IFFALSE 10079
// ComExitBuilding ( Kaia ) ;
10070: LD_EXP 30
10074: PPUSH
10075: CALL_OW 122
// wait ( 0 0$1 ) ;
10079: LD_INT 35
10081: PPUSH
10082: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_EXP 34
10095: PPUSH
10096: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10100: LD_INT 35
10102: PPUSH
10103: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10107: LD_EXP 30
10111: PPUSH
10112: LD_EXP 34
10116: PPUSH
10117: CALL_OW 296
10121: PUSH
10122: LD_INT 6
10124: LESS
10125: IFFALSE 10100
// ComTurnUnit ( Kaia , Kurt ) ;
10127: LD_EXP 30
10131: PPUSH
10132: LD_EXP 34
10136: PPUSH
10137: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10141: LD_EXP 30
10145: PPUSH
10146: LD_STRING DK-scout-4
10148: PPUSH
10149: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_EXP 30
10162: PPUSH
10163: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10167: LD_EXP 34
10171: PPUSH
10172: LD_STRING DKs-scout-5
10174: PPUSH
10175: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10179: LD_EXP 30
10183: PPUSH
10184: LD_STRING DK-scout-6
10186: PPUSH
10187: CALL_OW 88
// if Mike then
10191: LD_EXP 27
10195: IFFALSE 10247
// begin Say ( Mike , DM-scout-7 ) ;
10197: LD_EXP 27
10201: PPUSH
10202: LD_STRING DM-scout-7
10204: PPUSH
10205: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10209: LD_EXP 30
10213: PPUSH
10214: LD_EXP 27
10218: PPUSH
10219: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10223: LD_EXP 30
10227: PPUSH
10228: LD_STRING DK-scout-8
10230: PPUSH
10231: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10235: LD_EXP 27
10239: PPUSH
10240: LD_STRING DM-scout-9
10242: PPUSH
10243: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10247: LD_INT 184
10249: PPUSH
10250: LD_INT 100
10252: PPUSH
10253: LD_INT 2
10255: PPUSH
10256: LD_INT 12
10258: NEG
10259: PPUSH
10260: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10264: LD_INT 184
10266: PPUSH
10267: LD_INT 100
10269: PPUSH
10270: LD_INT 2
10272: PPUSH
10273: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10277: LD_INT 184
10279: PPUSH
10280: LD_INT 100
10282: PPUSH
10283: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10287: LD_EXP 34
10291: PPUSH
10292: LD_STRING DKs-scout-10
10294: PPUSH
10295: CALL_OW 88
// wait ( 0 0$1 ) ;
10299: LD_INT 35
10301: PPUSH
10302: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10306: LD_INT 144
10308: PPUSH
10309: LD_INT 65
10311: PPUSH
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 12
10317: NEG
10318: PPUSH
10319: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10323: LD_INT 144
10325: PPUSH
10326: LD_INT 65
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10336: LD_INT 144
10338: PPUSH
10339: LD_INT 65
10341: PPUSH
10342: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10346: LD_EXP 34
10350: PPUSH
10351: LD_STRING DKs-scout-11
10353: PPUSH
10354: CALL_OW 88
// wait ( 0 0$1 ) ;
10358: LD_INT 35
10360: PPUSH
10361: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10365: LD_EXP 34
10369: PPUSH
10370: CALL_OW 87
// if Mike and not Givi then
10374: LD_EXP 27
10378: PUSH
10379: LD_EXP 26
10383: NOT
10384: AND
10385: IFFALSE 10411
// begin Say ( Mike , DM-scout-a-1 ) ;
10387: LD_EXP 27
10391: PPUSH
10392: LD_STRING DM-scout-a-1
10394: PPUSH
10395: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10399: LD_EXP 25
10403: PPUSH
10404: LD_STRING DH-scout-a-2
10406: PPUSH
10407: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10411: LD_EXP 34
10415: PUSH
10416: LD_EXP 27
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 2
10427: PPUSH
10428: CALL_OW 235
// InGameOff ;
10432: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10436: LD_STRING Hill
10438: PPUSH
10439: CALL_OW 337
// Hint ( BunkerHill ) ;
10443: LD_STRING BunkerHill
10445: PPUSH
10446: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10450: LD_INT 20
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 424
// allowToPatrol := true ;
10460: LD_ADDR_EXP 12
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10468: LD_INT 3150
10470: PPUSH
10471: CALL_OW 67
// InitHc ;
10475: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 3
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_OWVAR 67
10511: ARRAY
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10781
// begin uc_side := 2 ;
10516: LD_ADDR_OWVAR 20
10520: PUSH
10521: LD_INT 2
10523: ST_TO_ADDR
// uc_nation := 2 ;
10524: LD_ADDR_OWVAR 21
10528: PUSH
10529: LD_INT 2
10531: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10532: LD_INT 0
10534: PPUSH
10535: LD_INT 1
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_VAR 0 1
10553: PUSH
10554: LD_INT 3
10556: MOD
10557: PUSH
10558: LD_INT 1
10560: PLUS
10561: ARRAY
10562: PPUSH
10563: LD_INT 3
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: LD_OWVAR 67
10585: ARRAY
10586: PPUSH
10587: CALL_OW 380
// un := CreateHuman ;
10591: LD_ADDR_VAR 0 2
10595: PUSH
10596: CALL_OW 44
10600: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10601: LD_ADDR_EXP 37
10605: PUSH
10606: LD_EXP 37
10610: PUSH
10611: LD_VAR 0 2
10615: UNION
10616: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10617: LD_INT 2
10619: PPUSH
10620: LD_INT 2
10622: PPUSH
10623: LD_INT 13
10625: PPUSH
10626: LD_INT 2
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_VAR 0 1
10640: PUSH
10641: LD_INT 2
10643: MOD
10644: PUSH
10645: LD_INT 1
10647: PLUS
10648: ARRAY
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: LD_INT 27
10655: PUSH
10656: LD_INT 25
10658: PUSH
10659: LD_INT 27
10661: PUSH
10662: LD_INT 23
10664: PUSH
10665: LD_INT 23
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_OWVAR 67
10679: PUSH
10680: LD_INT 0
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 12
10690: PLUS
10691: ARRAY
10692: PPUSH
10693: LD_INT 77
10695: PPUSH
10696: CALL 370 0 7
// veh := CreateVehicle ;
10700: LD_ADDR_VAR 0 3
10704: PUSH
10705: CALL_OW 45
10709: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 178
10729: PPUSH
10730: LD_INT 2
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10743: LD_VAR 0 2
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10757: LD_VAR 0 2
10761: PPUSH
10762: LD_INT 183
10764: PPUSH
10765: LD_INT 11
10767: PPUSH
10768: CALL_OW 111
// wait ( 0 0$2 ) ;
10772: LD_INT 70
10774: PPUSH
10775: CALL_OW 67
// end ;
10779: GO 10513
10781: POP
10782: POP
// end ;
10783: PPOPN 3
10785: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10786: LD_EXP 4
10790: PUSH
10791: LD_EXP 35
10795: PPUSH
10796: CALL_OW 302
10800: AND
10801: IFFALSE 10850
10803: GO 10805
10805: DISABLE
// begin DialogueOn ;
10806: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10810: LD_EXP 35
10814: PPUSH
10815: LD_STRING DA-lab-1
10817: PPUSH
10818: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10822: LD_EXP 35
10826: PPUSH
10827: LD_STRING DA-lab-2
10829: PPUSH
10830: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10834: LD_EXP 25
10838: PPUSH
10839: LD_STRING DH-lab-3
10841: PPUSH
10842: CALL_OW 88
// DialogueOff ;
10846: CALL_OW 7
// end ;
10850: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10851: LD_INT 17
10853: PPUSH
10854: LD_INT 2
10856: PPUSH
10857: CALL_OW 321
10861: PUSH
10862: LD_INT 2
10864: EQUAL
10865: IFFALSE 10997
10867: GO 10869
10869: DISABLE
10870: LD_INT 0
10872: PPUSH
// begin DialogueOn ;
10873: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10877: LD_EXP 35
10881: PPUSH
10882: LD_STRING DA-Cam-1
10884: PPUSH
10885: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10889: LD_EXP 35
10893: PPUSH
10894: LD_STRING DA-Cam-2
10896: PPUSH
10897: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10901: LD_EXP 35
10905: PPUSH
10906: LD_STRING DA-Cam-3
10908: PPUSH
10909: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10913: LD_EXP 25
10917: PPUSH
10918: LD_STRING DH-Cam-4
10920: PPUSH
10921: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10925: LD_EXP 30
10929: PPUSH
10930: LD_STRING DK-Cam-5
10932: PPUSH
10933: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10937: LD_EXP 30
10941: PPUSH
10942: LD_STRING DK-Cam-6
10944: PPUSH
10945: CALL_OW 88
// DialogueOff ;
10949: CALL_OW 7
// Query ( Camera ) ;
10953: LD_STRING Camera
10955: PPUSH
10956: CALL_OW 97
// hiddenCameraAllowed := true ;
10960: LD_ADDR_EXP 5
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// for i in camAreas do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_EXP 8
10977: PUSH
10978: FOR_IN
10979: IFFALSE 10995
// SetAreaMapShow ( i , 1 ) ;
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 424
10993: GO 10978
10995: POP
10996: POP
// end ;
10997: PPOPN 1
10999: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11000: LD_EXP 8
11004: NOT
11005: PUSH
11006: LD_EXP 5
11010: AND
11011: IFFALSE 11109
11013: GO 11015
11015: DISABLE
11016: LD_INT 0
11018: PPUSH
// begin stop_talking := true ;
11019: LD_ADDR_OWVAR 56
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11027: LD_ADDR_VAR 0 1
11031: PUSH
11032: LD_INT 22
11034: PUSH
11035: LD_INT 2
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 23
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: PUSH
11072: FOR_IN
11073: IFFALSE 11092
// AddExperience ( i , 2 , 450 ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: LD_INT 2
11082: PPUSH
11083: LD_INT 450
11085: PPUSH
11086: CALL_OW 492
11090: GO 11072
11092: POP
11093: POP
// stop_talking := false ;
11094: LD_ADDR_OWVAR 56
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11102: LD_STRING ACH_CAMERA
11104: PPUSH
11105: CALL_OW 543
// end ;
11109: PPOPN 1
11111: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11112: LD_EXP 9
11116: PUSH
11117: LD_EXP 11
11121: NOT
11122: AND
11123: IFFALSE 11182
11125: GO 11127
11127: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11128: LD_EXP 9
11132: PPUSH
11133: CALL_OW 250
11137: PPUSH
11138: LD_EXP 9
11142: PPUSH
11143: CALL_OW 251
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: LD_INT 6
11153: NEG
11154: PPUSH
11155: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11159: LD_EXP 9
11163: PPUSH
11164: CALL_OW 87
// wait ( 0 0$1 ) ;
11168: LD_INT 35
11170: PPUSH
11171: CALL_OW 67
// YouLost ( Spotted ) ;
11175: LD_STRING Spotted
11177: PPUSH
11178: CALL_OW 104
// end ;
11182: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11183: LD_INT 3
11185: PUSH
11186: LD_INT 6
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: LD_INT 2
11195: PPUSH
11196: LD_EXP 47
11200: PPUSH
11201: CALL 1034 0 3
11205: IFFALSE 11238
11207: GO 11209
11209: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11210: LD_ADDR_EXP 9
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: LD_INT 6
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: LD_INT 2
11227: PPUSH
11228: LD_EXP 47
11232: PPUSH
11233: CALL 1034 0 3
11237: ST_TO_ADDR
11238: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11239: LD_INT 22
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 32
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 3
11261: PUSH
11262: LD_INT 24
11264: PUSH
11265: LD_INT 1000
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PPUSH
11281: CALL_OW 69
11285: IFFALSE 11346
11287: GO 11289
11289: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11290: LD_ADDR_EXP 9
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 6
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 24
11320: PUSH
11321: LD_INT 1000
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 69
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: ST_TO_ADDR
11346: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11347: LD_EXP 9
11351: PUSH
11352: LD_INT 21
11354: PPUSH
11355: LD_INT 21
11357: PUSH
11358: LD_INT 3
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 3
11367: PUSH
11368: LD_INT 24
11370: PUSH
11371: LD_INT 1000
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 70
11390: AND
11391: IFFALSE 11630
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_EXP 42
11411: PUSH
11412: LD_EXP 44
11416: PUSH
11417: LD_EXP 45
11421: UNION
11422: PPUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 72
11444: UNION
11445: ST_TO_ADDR
// for i in noncombat do
11446: LD_ADDR_VAR 0 1
11450: PUSH
11451: LD_VAR 0 4
11455: PUSH
11456: FOR_IN
11457: IFFALSE 11553
// begin if IsInUnit ( i ) then
11459: LD_VAR 0 1
11463: PPUSH
11464: CALL_OW 310
11468: IFFALSE 11479
// ComExitBuilding ( i ) ;
11470: LD_VAR 0 1
11474: PPUSH
11475: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_INT 114
11486: PPUSH
11487: LD_INT 97
11489: PPUSH
11490: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_INT 99
11501: PPUSH
11502: LD_INT 128
11504: PPUSH
11505: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11509: LD_VAR 0 1
11513: PPUSH
11514: LD_INT 91
11516: PPUSH
11517: LD_INT 145
11519: PPUSH
11520: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11524: LD_VAR 0 1
11528: PPUSH
11529: LD_INT 82
11531: PPUSH
11532: LD_INT 153
11534: PPUSH
11535: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_INT 16
11546: PPUSH
11547: CALL_OW 173
// end ;
11551: GO 11456
11553: POP
11554: POP
// if not allowHeikeAttack then
11555: LD_EXP 11
11559: NOT
11560: IFFALSE 11564
// exit ;
11562: GO 11630
// wait ( 0 0$05 ) ;
11564: LD_INT 175
11566: PPUSH
11567: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11571: LD_EXP 40
11575: PPUSH
11576: LD_STRING D9a-Kur-1
11578: PPUSH
11579: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11583: LD_EXP 43
11587: PPUSH
11588: LD_STRING D9a-Bur-1
11590: PPUSH
11591: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11595: LD_EXP 40
11599: PPUSH
11600: LD_STRING D9a-Kur-2
11602: PPUSH
11603: CALL_OW 94
// omicronFall := true ;
11607: LD_ADDR_EXP 13
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11615: LD_INT 105
11617: PPUSH
11618: CALL_OW 67
// retreatFromOmicron := true ;
11622: LD_ADDR_EXP 20
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// end ;
11630: PPOPN 4
11632: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11633: LD_INT 16
11635: PPUSH
11636: LD_INT 3
11638: PUSH
11639: LD_INT 22
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 23
11655: PUSH
11656: LD_INT 3
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 70
11671: IFFALSE 11754
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
// begin enable ;
11679: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11680: LD_ADDR_VAR 0 1
11684: PUSH
11685: LD_INT 16
11687: PPUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 22
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 3
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL_OW 70
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11752
// begin escapeCounter := escapeCounter + 1 ;
11727: LD_ADDR_EXP 19
11731: PUSH
11732: LD_EXP 19
11736: PUSH
11737: LD_INT 1
11739: PLUS
11740: ST_TO_ADDR
// RemoveUnit ( i ) ;
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 64
// end ;
11750: GO 11724
11752: POP
11753: POP
// end ;
11754: PPOPN 1
11756: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11757: LD_OWVAR 1
11761: PUSH
11762: LD_INT 13650
11764: PUSH
11765: LD_INT 0
11767: PPUSH
11768: LD_INT 3150
11770: PPUSH
11771: CALL_OW 12
11775: PLUS
11776: GREATEREQUAL
11777: IFFALSE 11786
11779: GO 11781
11781: DISABLE
// SmallAmericanReinforcements ;
11782: CALL 7093 0 0
11786: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11787: LD_OWVAR 1
11791: PUSH
11792: LD_INT 31500
11794: PUSH
11795: LD_INT 29400
11797: PUSH
11798: LD_INT 27300
11800: PUSH
11801: LD_INT 25200
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: PUSH
11810: LD_OWVAR 67
11814: ARRAY
11815: GREATEREQUAL
11816: IFFALSE 11881
11818: GO 11820
11820: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11821: LD_EXP 48
11825: PPUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PPUSH
11841: LD_INT 62
11843: PPUSH
11844: LD_INT 22
11846: PPUSH
11847: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11851: LD_EXP 49
11855: PPUSH
11856: LD_INT 69
11858: PPUSH
11859: LD_INT 27
11861: PPUSH
11862: CALL_OW 111
// wait ( 1 1$00 ) ;
11866: LD_INT 2100
11868: PPUSH
11869: CALL_OW 67
// startAttackOnOmicron := true ;
11873: LD_ADDR_EXP 6
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// end ;
11881: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11882: LD_EXP 22
11886: PUSH
11887: LD_INT 0
11889: EQUAL
11890: IFFALSE 13907
11892: GO 11894
11894: DISABLE
11895: LD_INT 0
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11904: LD_INT 5
11906: PPUSH
11907: LD_INT 2
11909: PPUSH
11910: CALL_OW 343
// PrepareOmarForces ;
11914: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11918: LD_INT 105
11920: PPUSH
11921: CALL_OW 67
// allowHeikeAttack := true ;
11925: LD_ADDR_EXP 11
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// activeGrishkoAI := false ;
11933: LD_ADDR_EXP 10
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11941: LD_INT 20
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 424
// if not hillBase then
11951: LD_EXP 15
11955: NOT
11956: IFFALSE 11965
// ChangeMissionObjectives ( HillDone ) ;
11958: LD_STRING HillDone
11960: PPUSH
11961: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11965: LD_EXP 33
11969: PPUSH
11970: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12033
// if HasTask ( i ) then
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 314
12020: IFFALSE 12031
// ComHold ( i ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 140
12031: GO 12008
12033: POP
12034: POP
// DialogueOn ;
12035: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12039: LD_EXP 33
12043: PPUSH
12044: LD_STRING DO-assault-1
12046: PPUSH
12047: CALL_OW 94
// DialogueOff ;
12051: CALL_OW 7
// game_speed := 4 ;
12055: LD_ADDR_OWVAR 65
12059: PUSH
12060: LD_INT 4
12062: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12063: LD_ADDR_VAR 0 1
12067: PUSH
12068: LD_EXP 46
12072: PPUSH
12073: LD_INT 3
12075: PUSH
12076: LD_INT 54
12078: PUSH
12079: EMPTY
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PPUSH
12086: CALL_OW 72
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12111
// ComMoveXY ( i , 226 , 114 ) ;
12094: LD_VAR 0 1
12098: PPUSH
12099: LD_INT 226
12101: PPUSH
12102: LD_INT 114
12104: PPUSH
12105: CALL_OW 111
12109: GO 12091
12111: POP
12112: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12113: LD_EXP 41
12117: PPUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 4
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: PPUSH
12147: LD_EXP 41
12151: PPUSH
12152: CALL_OW 74
12156: PPUSH
12157: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12161: LD_STRING Attack
12163: PPUSH
12164: CALL_OW 337
// music_class := music_combat ;
12168: LD_ADDR_OWVAR 72
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// music_nat := 4 ;
12176: LD_ADDR_OWVAR 71
12180: PUSH
12181: LD_INT 4
12183: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12184: LD_INT 5
12186: PPUSH
12187: LD_EXP 41
12191: PPUSH
12192: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12196: LD_INT 6
12198: PPUSH
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: PUSH
12219: LD_INT 4
12221: ARRAY
12222: PPUSH
12223: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12227: LD_ADDR_VAR 0 1
12231: PUSH
12232: LD_EXP 38
12236: PPUSH
12237: LD_INT 3
12239: PUSH
12240: LD_INT 25
12242: PUSH
12243: LD_INT 4
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 72
12258: PUSH
12259: FOR_IN
12260: IFFALSE 12279
// ComAgressiveMove ( i , 221 , 110 ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: LD_INT 221
12269: PPUSH
12270: LD_INT 110
12272: PPUSH
12273: CALL_OW 114
12277: GO 12259
12279: POP
12280: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12281: LD_EXP 38
12285: PPUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 72
12300: PPUSH
12301: LD_INT 214
12303: PPUSH
12304: LD_INT 124
12306: PPUSH
12307: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12311: LD_EXP 38
12315: PPUSH
12316: LD_INT 25
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 72
12330: PUSH
12331: LD_INT 4
12333: ARRAY
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 114
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12348: LD_EXP 41
12352: PPUSH
12353: LD_STRING D9-Gri-1
12355: PPUSH
12356: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12360: LD_EXP 40
12364: PPUSH
12365: LD_STRING D9-Kur-1
12367: PPUSH
12368: CALL_OW 94
// wait ( 0 0$1 ) ;
12372: LD_INT 35
12374: PPUSH
12375: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12379: LD_EXP 33
12383: PPUSH
12384: LD_INT 233
12386: PPUSH
12387: LD_INT 130
12389: PPUSH
12390: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12394: LD_EXP 41
12398: PPUSH
12399: LD_STRING D9-Gri-2
12401: PPUSH
12402: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12406: LD_EXP 40
12410: PPUSH
12411: LD_STRING D9-Kur-2
12413: PPUSH
12414: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12418: LD_EXP 41
12422: PPUSH
12423: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12427: LD_EXP 41
12431: PPUSH
12432: LD_INT 211
12434: PPUSH
12435: LD_INT 104
12437: PPUSH
12438: CALL_OW 171
// AddComHold ( Grishko ) ;
12442: LD_EXP 41
12446: PPUSH
12447: CALL_OW 200
// repeat wait ( 3 ) ;
12451: LD_INT 3
12453: PPUSH
12454: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12458: LD_EXP 41
12462: PPUSH
12463: CALL_OW 310
12467: NOT
12468: IFFALSE 12451
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12470: LD_EXP 38
12474: PPUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 26
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 72
12489: PPUSH
12490: LD_EXP 41
12494: PPUSH
12495: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12499: LD_EXP 38
12503: PPUSH
12504: LD_INT 34
12506: PUSH
12507: LD_INT 26
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 72
12518: PPUSH
12519: LD_INT 215
12521: PPUSH
12522: LD_INT 106
12524: PPUSH
12525: CALL_OW 174
// repeat wait ( 3 ) ;
12529: LD_INT 3
12531: PPUSH
12532: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12536: LD_EXP 41
12540: PPUSH
12541: CALL_OW 256
12545: PUSH
12546: LD_INT 1000
12548: LESS
12549: IFFALSE 12529
// NormalAttack ( 5 , Grishko ) ;
12551: LD_INT 5
12553: PPUSH
12554: LD_EXP 41
12558: PPUSH
12559: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12563: LD_INT 6
12565: PPUSH
12566: LD_EXP 38
12570: PPUSH
12571: LD_INT 25
12573: PUSH
12574: LD_INT 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 72
12585: PUSH
12586: LD_INT 4
12588: ARRAY
12589: PPUSH
12590: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12594: LD_EXP 41
12598: PPUSH
12599: LD_STRING D9-Gri-3
12601: PPUSH
12602: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12606: LD_EXP 40
12610: PPUSH
12611: LD_STRING D9-Kur-3
12613: PPUSH
12614: CALL_OW 94
// music_class := music_auto ;
12618: LD_ADDR_OWVAR 72
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// music_nat := music_auto ;
12626: LD_ADDR_OWVAR 71
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// for i in omarSquad do
12634: LD_ADDR_VAR 0 1
12638: PUSH
12639: LD_EXP 38
12643: PUSH
12644: FOR_IN
12645: IFFALSE 12787
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 247
12656: PUSH
12657: LD_INT 2
12659: EQUAL
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 256
12670: PUSH
12671: LD_INT 1000
12673: LESS
12674: AND
12675: IFFALSE 12741
// begin driver := IsDrivenBy ( i ) ;
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 311
12691: ST_TO_ADDR
// veh := i ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_VAR 0 1
12701: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12702: LD_VAR 0 2
12706: PPUSH
12707: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12711: LD_VAR 0 2
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12725: LD_VAR 0 2
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: CALL_OW 180
// end else
12739: GO 12785
// if GetLives ( i ) < 500 then
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 256
12750: PUSH
12751: LD_INT 500
12753: LESS
12754: IFFALSE 12785
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12756: LD_EXP 38
12760: PPUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 72
12775: PPUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 188
// end ; end ;
12785: GO 12644
12787: POP
12788: POP
// repeat wait ( 0 0$1 ) ;
12789: LD_INT 35
12791: PPUSH
12792: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12796: LD_EXP 38
12800: PPUSH
12801: LD_INT 3
12803: PUSH
12804: LD_INT 24
12806: PUSH
12807: LD_INT 1000
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 21
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 72
12836: NOT
12837: PUSH
12838: LD_EXP 38
12842: PPUSH
12843: LD_INT 3
12845: PUSH
12846: LD_INT 24
12848: PUSH
12849: LD_INT 250
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 72
12864: NOT
12865: AND
12866: IFFALSE 12789
// wait ( 0 0$2 ) ;
12868: LD_INT 70
12870: PPUSH
12871: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12875: LD_ADDR_VAR 0 5
12879: PUSH
12880: LD_EXP 38
12884: PPUSH
12885: LD_INT 58
12887: PUSH
12888: EMPTY
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 72
12909: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12910: LD_ADDR_VAR 0 6
12914: PUSH
12915: LD_EXP 38
12919: PPUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: LD_INT 55
12935: PUSH
12936: EMPTY
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 72
12951: ST_TO_ADDR
// for i := 1 to tmp do
12952: LD_ADDR_VAR 0 1
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 5
12966: PUSH
12967: FOR_TO
12968: IFFALSE 12998
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12970: LD_VAR 0 6
12974: PUSH
12975: LD_VAR 0 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 5
12985: PUSH
12986: LD_VAR 0 1
12990: ARRAY
12991: PPUSH
12992: CALL_OW 120
12996: GO 12967
12998: POP
12999: POP
// wait ( 0 0$5 ) ;
13000: LD_INT 175
13002: PPUSH
13003: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13007: LD_EXP 38
13011: PPUSH
13012: LD_INT 199
13014: PPUSH
13015: LD_INT 141
13017: PPUSH
13018: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13022: LD_EXP 33
13026: PPUSH
13027: LD_INT 190
13029: PPUSH
13030: LD_INT 143
13032: PPUSH
13033: CALL_OW 114
// AddComHold ( Omar ) ;
13037: LD_EXP 33
13041: PPUSH
13042: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13046: LD_EXP 38
13050: PPUSH
13051: LD_INT 2
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 25
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 72
13083: PPUSH
13084: LD_INT 161
13086: PPUSH
13087: LD_INT 130
13089: PPUSH
13090: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13094: LD_EXP 38
13098: PPUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PPUSH
13114: LD_INT 163
13116: PPUSH
13117: LD_INT 122
13119: PPUSH
13120: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13124: LD_EXP 38
13128: PPUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PUSH
13144: LD_INT 4
13146: ARRAY
13147: PPUSH
13148: LD_INT 165
13150: PPUSH
13151: LD_INT 118
13153: PPUSH
13154: LD_INT 0
13156: PPUSH
13157: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PUSH
13181: LD_INT 4
13183: ARRAY
13184: PPUSH
13185: LD_INT 159
13187: PPUSH
13188: LD_INT 116
13190: PPUSH
13191: LD_INT 0
13193: PPUSH
13194: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13198: LD_EXP 38
13202: PPUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 72
13217: PPUSH
13218: LD_INT 169
13220: PPUSH
13221: LD_INT 114
13223: PPUSH
13224: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13228: LD_INT 35
13230: PPUSH
13231: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13235: LD_ADDR_VAR 0 5
13239: PUSH
13240: LD_EXP 38
13244: PPUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 72
13259: ST_TO_ADDR
// for i in tmp do
13260: LD_ADDR_VAR 0 1
13264: PUSH
13265: LD_VAR 0 5
13269: PUSH
13270: FOR_IN
13271: IFFALSE 13368
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 256
13282: PUSH
13283: LD_INT 600
13285: LESS
13286: PUSH
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_INT 161
13294: PPUSH
13295: LD_INT 130
13297: PPUSH
13298: CALL_OW 297
13302: PUSH
13303: LD_INT 6
13305: GREATER
13306: AND
13307: IFFALSE 13324
// ComMoveXY ( i , 161 , 130 ) ;
13309: LD_VAR 0 1
13313: PPUSH
13314: LD_INT 161
13316: PPUSH
13317: LD_INT 130
13319: PPUSH
13320: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 256
13333: PUSH
13334: LD_INT 1000
13336: EQUAL
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 314
13347: NOT
13348: AND
13349: IFFALSE 13366
// ComAgressiveMove ( i , 160 , 109 ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_INT 160
13358: PPUSH
13359: LD_INT 109
13361: PPUSH
13362: CALL_OW 114
// end ;
13366: GO 13270
13368: POP
13369: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13370: LD_ADDR_VAR 0 5
13374: PUSH
13375: LD_EXP 38
13379: PPUSH
13380: LD_INT 21
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 72
13394: ST_TO_ADDR
// for i in tmp do
13395: LD_ADDR_VAR 0 1
13399: PUSH
13400: LD_VAR 0 5
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13672
// begin tmp2 := IsDrivenBy ( i ) ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_VAR 0 1
13417: PPUSH
13418: CALL_OW 311
13422: ST_TO_ADDR
// if not tmp2 then
13423: LD_VAR 0 6
13427: NOT
13428: IFFALSE 13432
// continue ;
13430: GO 13405
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 256
13441: PUSH
13442: LD_INT 600
13444: GREATEREQUAL
13445: PUSH
13446: LD_VAR 0 1
13450: PPUSH
13451: CALL_OW 110
13455: PUSH
13456: LD_INT 1
13458: EQUAL
13459: AND
13460: IFFALSE 13474
// SetTag ( i , 0 ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_INT 0
13469: PPUSH
13470: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 256
13483: PUSH
13484: LD_INT 600
13486: GREATEREQUAL
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 110
13497: NOT
13498: AND
13499: IFFALSE 13525
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_VAR 0 7
13510: PPUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 74
13520: PPUSH
13521: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 256
13534: PUSH
13535: LD_INT 600
13537: LESS
13538: PUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 110
13548: NOT
13549: AND
13550: IFFALSE 13579
// begin SetTag ( i , 1 ) ;
13552: LD_VAR 0 1
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13564: LD_VAR 0 1
13568: PPUSH
13569: LD_INT 202
13571: PPUSH
13572: LD_INT 150
13574: PPUSH
13575: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 110
13588: PUSH
13589: LD_INT 1
13591: EQUAL
13592: PUSH
13593: LD_VAR 0 1
13597: PPUSH
13598: LD_INT 202
13600: PPUSH
13601: LD_INT 150
13603: PPUSH
13604: CALL_OW 297
13608: PUSH
13609: LD_INT 6
13611: LESS
13612: AND
13613: PUSH
13614: LD_VAR 0 6
13618: AND
13619: IFFALSE 13670
// begin ComExitVehicle ( tmp2 ) ;
13621: LD_VAR 0 6
13625: PPUSH
13626: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13630: LD_VAR 0 6
13634: PPUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13644: LD_VAR 0 6
13648: PPUSH
13649: LD_INT 700
13651: PPUSH
13652: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13656: LD_VAR 0 6
13660: PPUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 180
// end ; end ;
13670: GO 13405
13672: POP
13673: POP
// until kirovDestroyed ;
13674: LD_EXP 16
13678: IFFALSE 13228
// repeat wait ( 0 0$1 ) ;
13680: LD_INT 35
13682: PPUSH
13683: CALL_OW 67
// for i in omarSquad union Omar do
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: LD_EXP 38
13696: PUSH
13697: LD_EXP 33
13701: UNION
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13874
// if IsInArea ( i , southRoadArea ) then
13706: LD_VAR 0 1
13710: PPUSH
13711: LD_INT 15
13713: PPUSH
13714: CALL_OW 308
13718: IFFALSE 13731
// RemoveUnit ( i ) else
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 64
13729: GO 13872
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13731: LD_VAR 0 1
13735: PPUSH
13736: CALL_OW 257
13740: PUSH
13741: LD_INT 3
13743: EQUAL
13744: PUSH
13745: LD_VAR 0 1
13749: PPUSH
13750: CALL_OW 310
13754: NOT
13755: AND
13756: PUSH
13757: LD_INT 22
13759: PUSH
13760: LD_INT 5
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 24
13769: PUSH
13770: LD_INT 251
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 58
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: AND
13804: IFFALSE 13857
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 22
13813: PUSH
13814: LD_INT 5
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 21
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 58
13833: PUSH
13834: EMPTY
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: CALL_OW 120
13855: GO 13872
// ComMoveXY ( i , 208 , 162 ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_INT 208
13864: PPUSH
13865: LD_INT 162
13867: PPUSH
13868: CALL_OW 111
// end ;
13872: GO 13703
13874: POP
13875: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13876: LD_INT 22
13878: PUSH
13879: LD_INT 5
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 21
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: NOT
13905: IFFALSE 13680
// end ;
13907: PPOPN 7
13909: END
// every 0 0$1 trigger IsDead ( kirov ) do
13910: LD_INT 71
13912: PPUSH
13913: CALL_OW 301
13917: IFFALSE 13934
13919: GO 13921
13921: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13922: LD_EXP 25
13926: PPUSH
13927: LD_STRING DH-1-Kirov
13929: PPUSH
13930: CALL_OW 88
13934: END
// every 0 0$1 trigger See ( 2 , beria ) do
13935: LD_INT 2
13937: PPUSH
13938: LD_INT 106
13940: PPUSH
13941: CALL_OW 292
13945: IFFALSE 13962
13947: GO 13949
13949: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13950: LD_EXP 25
13954: PPUSH
13955: LD_STRING DH-1-Beria
13957: PPUSH
13958: CALL_OW 88
13962: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13963: LD_INT 2
13965: PPUSH
13966: LD_INT 112
13968: PPUSH
13969: CALL_OW 292
13973: IFFALSE 14240
13975: GO 13977
13977: DISABLE
// begin DialogueOn ;
13978: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13982: LD_INT 112
13984: PPUSH
13985: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kagan
13996: PPUSH
13997: CALL_OW 88
// if Kamil then
14001: LD_EXP 29
14005: IFFALSE 14043
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14007: LD_EXP 29
14011: PPUSH
14012: LD_STRING DKam-Kagan-2
14014: PPUSH
14015: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14019: LD_EXP 26
14023: PPUSH
14024: LD_STRING DG-Kagan-3
14026: PPUSH
14027: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14031: LD_EXP 26
14035: PPUSH
14036: LD_STRING DG-Kagan-4
14038: PPUSH
14039: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14043: LD_STRING KaganBase
14045: PPUSH
14046: CALL_OW 97
14050: PUSH
14051: LD_INT 1
14053: DOUBLE
14054: EQUAL
14055: IFTRUE 14059
14057: GO 14154
14059: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14060: LD_EXP 25
14064: PPUSH
14065: LD_STRING DH-Kagan-5
14067: PPUSH
14068: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14072: LD_EXP 25
14076: PPUSH
14077: LD_STRING DH-Kagan-6
14079: PPUSH
14080: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14084: LD_EXP 36
14088: PPUSH
14089: LD_STRING DShar-Kagan-7
14091: PPUSH
14092: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14096: LD_EXP 25
14100: PPUSH
14101: LD_STRING DH-Kagan-8
14103: PPUSH
14104: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14108: LD_EXP 25
14112: PPUSH
14113: LD_STRING DH-Kagan-9
14115: PPUSH
14116: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14120: LD_EXP 36
14124: PPUSH
14125: LD_STRING DShar-Kagan-10
14127: PPUSH
14128: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14132: LD_EXP 25
14136: PPUSH
14137: LD_STRING DH-Kagan-11
14139: PPUSH
14140: CALL_OW 88
// kaganCaptured := true ;
14144: LD_ADDR_EXP 24
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// end ; 2 :
14152: GO 14236
14154: LD_INT 2
14156: DOUBLE
14157: EQUAL
14158: IFTRUE 14162
14160: GO 14235
14162: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14163: LD_INT 22
14165: PUSH
14166: LD_INT 8
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PUSH
14178: LD_EXP 35
14182: AND
14183: IFFALSE 14197
// Say ( Heike , DH-Kagan-a-5 ) ;
14185: LD_EXP 25
14189: PPUSH
14190: LD_STRING DH-Kagan-a-5
14192: PPUSH
14193: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14197: LD_EXP 25
14201: PPUSH
14202: LD_STRING DH-Kagan-a-6
14204: PPUSH
14205: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14209: LD_EXP 25
14213: PPUSH
14214: LD_STRING DH-Kagan-a-7
14216: PPUSH
14217: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14221: LD_EXP 26
14225: PPUSH
14226: LD_STRING DG-Kagan-a-8
14228: PPUSH
14229: CALL_OW 88
// end ; end ;
14233: GO 14236
14235: POP
// DialogueOff ;
14236: CALL_OW 7
// end ;
14240: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14241: LD_EXP 18
14245: PUSH
14246: LD_INT 112
14248: PPUSH
14249: CALL_OW 255
14253: PUSH
14254: LD_INT 2
14256: EQUAL
14257: OR
14258: IFFALSE 14270
14260: GO 14262
14262: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14263: LD_STRING KaganDone
14265: PPUSH
14266: CALL_OW 337
14270: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14271: LD_EXP 6
14275: PUSH
14276: LD_EXP 48
14280: PPUSH
14281: LD_INT 95
14283: PUSH
14284: LD_INT 19
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: AND
14296: IFFALSE 14373
14298: GO 14300
14300: DISABLE
// begin DialogueOn ;
14301: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14305: LD_INT 63
14307: PPUSH
14308: LD_INT 32
14310: PPUSH
14311: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14315: LD_INT 63
14317: PPUSH
14318: LD_INT 32
14320: PPUSH
14321: LD_INT 2
14323: PPUSH
14324: LD_INT 12
14326: NEG
14327: PPUSH
14328: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14332: LD_EXP 25
14336: PPUSH
14337: LD_STRING DH-Omicron-1
14339: PPUSH
14340: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14344: LD_EXP 27
14348: PPUSH
14349: LD_STRING DM-Omicron-2
14351: PPUSH
14352: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14356: LD_INT 63
14358: PPUSH
14359: LD_INT 32
14361: PPUSH
14362: LD_INT 2
14364: PPUSH
14365: CALL_OW 331
// DialogueOff ;
14369: CALL_OW 7
// end ;
14373: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14374: LD_INT 2
14376: PPUSH
14377: LD_EXP 50
14381: PPUSH
14382: CALL_OW 292
14386: PUSH
14387: LD_EXP 50
14391: PPUSH
14392: CALL_OW 255
14396: PUSH
14397: LD_INT 2
14399: EQUAL
14400: OR
14401: PUSH
14402: LD_INT 106
14404: PPUSH
14405: CALL_OW 255
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: OR
14414: PUSH
14415: LD_EXP 50
14419: PPUSH
14420: CALL_OW 302
14424: AND
14425: PUSH
14426: LD_EXP 25
14430: PPUSH
14431: CALL_OW 302
14435: AND
14436: PUSH
14437: LD_EXP 35
14441: PPUSH
14442: CALL_OW 302
14446: AND
14447: IFFALSE 15168
14449: GO 14451
14451: DISABLE
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
// begin DialogueOn ;
14459: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14463: LD_INT 111
14465: PPUSH
14466: LD_INT 90
14468: PPUSH
14469: LD_INT 2
14471: PPUSH
14472: LD_INT 6
14474: NEG
14475: PPUSH
14476: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14480: LD_INT 111
14482: PPUSH
14483: LD_INT 90
14485: PPUSH
14486: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14490: LD_EXP 35
14494: PPUSH
14495: LD_STRING DA-Cap-1
14497: PPUSH
14498: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14502: LD_EXP 25
14506: PPUSH
14507: LD_STRING DH-Cap-2
14509: PPUSH
14510: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14514: LD_INT 111
14516: PPUSH
14517: LD_INT 90
14519: PPUSH
14520: LD_INT 2
14522: PPUSH
14523: CALL_OW 331
// DialogueOff ;
14527: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14531: LD_INT 35
14533: PPUSH
14534: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14538: LD_EXP 17
14542: PUSH
14543: LD_INT 106
14545: PPUSH
14546: CALL_OW 255
14550: PUSH
14551: LD_INT 2
14553: EQUAL
14554: OR
14555: PUSH
14556: LD_EXP 50
14560: PPUSH
14561: CALL_OW 255
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: OR
14570: PUSH
14571: LD_EXP 50
14575: PPUSH
14576: CALL_OW 302
14580: AND
14581: PUSH
14582: LD_EXP 35
14586: PPUSH
14587: CALL_OW 302
14591: AND
14592: PUSH
14593: LD_INT 2
14595: PPUSH
14596: CALL_OW 463
14600: NOT
14601: AND
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 1
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 92
14625: PUSH
14626: LD_INT 110
14628: PUSH
14629: LD_INT 95
14631: PUSH
14632: LD_INT 12
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: NOT
14651: AND
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 30
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 92
14675: PUSH
14676: LD_INT 110
14678: PUSH
14679: LD_INT 95
14681: PUSH
14682: LD_INT 12
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: NOT
14701: AND
14702: IFFALSE 14531
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: LD_EXP 37
14713: PUSH
14714: LD_EXP 28
14718: PUSH
14719: LD_EXP 29
14723: PUSH
14724: LD_EXP 31
14728: PUSH
14729: LD_EXP 30
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: UNION
14740: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14741: LD_ADDR_VAR 0 2
14745: PUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_INT 50
14753: PUSH
14754: EMPTY
14755: LIST
14756: PPUSH
14757: CALL_OW 72
14761: ST_TO_ADDR
// if tmp < 2 then
14762: LD_VAR 0 2
14766: PUSH
14767: LD_INT 2
14769: LESS
14770: IFFALSE 14782
// q := 2 else
14772: LD_ADDR_VAR 0 4
14776: PUSH
14777: LD_INT 2
14779: ST_TO_ADDR
14780: GO 14795
// q := Query ( LabCap ) ;
14782: LD_ADDR_VAR 0 4
14786: PUSH
14787: LD_STRING LabCap
14789: PPUSH
14790: CALL_OW 97
14794: ST_TO_ADDR
// case q of 1 :
14795: LD_VAR 0 4
14799: PUSH
14800: LD_INT 1
14802: DOUBLE
14803: EQUAL
14804: IFTRUE 14808
14806: GO 15132
14808: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14809: LD_INT 2
14811: PPUSH
14812: LD_EXP 50
14816: PPUSH
14817: CALL_OW 471
// labCaptured := true ;
14821: LD_ADDR_EXP 21
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14829: LD_EXP 25
14833: PPUSH
14834: LD_STRING DH-Cap-a-1
14836: PPUSH
14837: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14841: LD_EXP 35
14845: PPUSH
14846: LD_STRING DA-Cap-a-2
14848: PPUSH
14849: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14853: LD_ADDR_VAR 0 5
14857: PUSH
14858: LD_EXP 35
14862: PUSH
14863: LD_INT -3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT -2
14872: PUSH
14873: LD_INT -4
14875: PUSH
14876: LD_EXP 25
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: ADD
14886: PUSH
14887: LD_INT -3
14889: PUSH
14890: EMPTY
14891: LIST
14892: ADD
14893: PUSH
14894: LD_VAR 0 2
14898: ADD
14899: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14900: LD_ADDR_VAR 0 3
14904: PUSH
14905: LD_STRING Select two characters to go with Aviradze
14907: PPUSH
14908: LD_INT 2
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: LD_VAR 0 5
14918: PPUSH
14919: EMPTY
14920: PPUSH
14921: CALL_OW 42
14925: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14926: LD_EXP 50
14930: PPUSH
14931: LD_INT 8
14933: PPUSH
14934: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14938: LD_EXP 35
14942: PPUSH
14943: LD_INT 8
14945: PPUSH
14946: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14950: LD_ADDR_EXP 39
14954: PUSH
14955: LD_EXP 35
14959: PUSH
14960: EMPTY
14961: LIST
14962: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14963: LD_EXP 35
14967: PPUSH
14968: CALL_OW 310
14972: IFFALSE 14983
// ComExit ( Aviradze ) ;
14974: LD_EXP 35
14978: PPUSH
14979: CALL 75527 0 1
// wait ( 3 ) ;
14983: LD_INT 3
14985: PPUSH
14986: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14990: LD_EXP 35
14994: PPUSH
14995: LD_EXP 50
14999: PPUSH
15000: CALL_OW 120
// for i := 1 to 2 do
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: DOUBLE
15010: LD_INT 1
15012: DEC
15013: ST_TO_ADDR
15014: LD_INT 2
15016: PUSH
15017: FOR_TO
15018: IFFALSE 15121
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15020: LD_ADDR_EXP 39
15024: PUSH
15025: LD_EXP 39
15029: PUSH
15030: LD_VAR 0 3
15034: PUSH
15035: LD_VAR 0 1
15039: ARRAY
15040: UNION
15041: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15042: LD_VAR 0 3
15046: PUSH
15047: LD_VAR 0 1
15051: ARRAY
15052: PPUSH
15053: LD_INT 8
15055: PPUSH
15056: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15060: LD_VAR 0 3
15064: PUSH
15065: LD_VAR 0 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 310
15075: IFFALSE 15092
// ComExit ( tmp2 [ i ] ) ;
15077: LD_VAR 0 3
15081: PUSH
15082: LD_VAR 0 1
15086: ARRAY
15087: PPUSH
15088: CALL 75527 0 1
// wait ( 3 ) ;
15092: LD_INT 3
15094: PPUSH
15095: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15099: LD_VAR 0 3
15103: PUSH
15104: LD_VAR 0 1
15108: ARRAY
15109: PPUSH
15110: LD_EXP 50
15114: PPUSH
15115: CALL_OW 120
// end ;
15119: GO 15017
15121: POP
15122: POP
// SetAchievement ( ACH_LAB ) ;
15123: LD_STRING ACH_LAB
15125: PPUSH
15126: CALL_OW 543
// end ; 2 :
15130: GO 15168
15132: LD_INT 2
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15167
15140: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15141: LD_EXP 25
15145: PPUSH
15146: LD_STRING DH-Cap-b-1
15148: PPUSH
15149: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15153: LD_EXP 35
15157: PPUSH
15158: LD_STRING DA-Cap-b-2
15160: PPUSH
15161: CALL_OW 88
// end ; end ;
15165: GO 15168
15167: POP
// end ;
15168: PPOPN 5
15170: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15171: LD_INT 10
15173: PPUSH
15174: LD_INT 22
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 31
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 70
15202: PUSH
15203: LD_INT 2
15205: GREATEREQUAL
15206: IFFALSE 15218
15208: GO 15210
15210: DISABLE
// SetAchievement ( ACH_KING ) ;
15211: LD_STRING ACH_KING
15213: PPUSH
15214: CALL_OW 543
15218: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15219: LD_EXP 11
15223: NOT
15224: PUSH
15225: LD_INT 10
15227: PPUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 30
15243: PUSH
15244: LD_INT 31
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 4
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 70
15274: AND
15275: IFFALSE 15295
15277: GO 15279
15279: DISABLE
// begin hillBase := true ;
15280: LD_ADDR_EXP 15
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15288: LD_STRING HillDone
15290: PPUSH
15291: CALL_OW 337
// end ;
15295: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15296: LD_EXP 30
15300: PUSH
15301: LD_EXP 30
15305: PPUSH
15306: CALL_OW 256
15310: PUSH
15311: LD_INT 3
15313: LESS
15314: AND
15315: IFFALSE 15361
15317: GO 15319
15319: DISABLE
// begin DialogueOn ;
15320: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15324: LD_EXP 30
15328: PPUSH
15329: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15333: LD_EXP 30
15337: PPUSH
15338: LD_STRING DK-Kkilled-1
15340: PPUSH
15341: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15345: LD_EXP 25
15349: PPUSH
15350: LD_STRING DH-Kkilled-2
15352: PPUSH
15353: CALL_OW 88
// DialogueOff ;
15357: CALL_OW 7
// end ;
15361: END
// every 0 0$1 trigger kaiaKilledByRussian do
15362: LD_EXP 23
15366: IFFALSE 15383
15368: GO 15370
15370: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15371: LD_EXP 25
15375: PPUSH
15376: LD_STRING DH-Kkilled-3
15378: PPUSH
15379: CALL_OW 88
15383: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15384: LD_EXP 16
15388: PUSH
15389: LD_INT 106
15391: PPUSH
15392: CALL_OW 255
15396: PUSH
15397: LD_INT 2
15399: EQUAL
15400: PUSH
15401: LD_EXP 17
15405: OR
15406: AND
15407: PUSH
15408: LD_EXP 18
15412: PUSH
15413: LD_EXP 24
15417: PUSH
15418: LD_INT 112
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 2
15428: EQUAL
15429: AND
15430: OR
15431: AND
15432: IFFALSE 16668
15434: GO 15436
15436: DISABLE
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15444: LD_STRING GoToWest
15446: PPUSH
15447: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15451: LD_INT 17
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15461: LD_INT 35
15463: PPUSH
15464: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15468: LD_ADDR_VAR 0 2
15472: PUSH
15473: LD_INT 17
15475: PPUSH
15476: LD_INT 22
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 2
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 3
15511: PUSH
15512: LD_INT 58
15514: PUSH
15515: EMPTY
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 70
15539: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: LD_INT 22
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: LD_INT 55
15560: PUSH
15561: EMPTY
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: LD_INT 21
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 21
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 3
15593: PUSH
15594: LD_INT 58
15596: PUSH
15597: EMPTY
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15623: LD_VAR 0 2
15627: PUSH
15628: LD_INT 0
15630: PLUS
15631: PUSH
15632: LD_VAR 0 3
15636: PUSH
15637: LD_INT 0
15639: PLUS
15640: EQUAL
15641: IFFALSE 15461
// SaveCharacters ( Heike , 04_1_Heike ) ;
15643: LD_EXP 25
15647: PPUSH
15648: LD_STRING 04_1_Heike
15650: PPUSH
15651: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15655: LD_EXP 35
15659: PUSH
15660: LD_EXP 35
15664: PUSH
15665: LD_EXP 39
15669: IN
15670: NOT
15671: AND
15672: IFFALSE 15688
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15674: LD_EXP 35
15678: PPUSH
15679: LD_STRING 04_1_Aviradze
15681: PPUSH
15682: CALL_OW 38
15686: GO 15706
// if Aviradze then
15688: LD_EXP 35
15692: IFFALSE 15706
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15694: LD_EXP 35
15698: PPUSH
15699: LD_STRING 04_1_Aviradze_L
15701: PPUSH
15702: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15706: LD_EXP 28
15710: PUSH
15711: LD_EXP 28
15715: PUSH
15716: LD_EXP 39
15720: IN
15721: NOT
15722: AND
15723: IFFALSE 15739
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15725: LD_EXP 28
15729: PPUSH
15730: LD_STRING 04_1_Ibrahim
15732: PPUSH
15733: CALL_OW 38
15737: GO 15757
// if Ibrahim then
15739: LD_EXP 28
15743: IFFALSE 15757
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15745: LD_EXP 28
15749: PPUSH
15750: LD_STRING 04_1_Ibrahim_L
15752: PPUSH
15753: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15757: LD_EXP 29
15761: PUSH
15762: LD_EXP 29
15766: PUSH
15767: LD_EXP 39
15771: IN
15772: NOT
15773: AND
15774: IFFALSE 15790
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15776: LD_EXP 29
15780: PPUSH
15781: LD_STRING 04_1_Kamil
15783: PPUSH
15784: CALL_OW 38
15788: GO 15808
// if Kamil then
15790: LD_EXP 29
15794: IFFALSE 15808
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15796: LD_EXP 29
15800: PPUSH
15801: LD_STRING 04_1_Kamil_L
15803: PPUSH
15804: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15808: LD_EXP 31
15812: PUSH
15813: LD_EXP 31
15817: PUSH
15818: LD_EXP 39
15822: IN
15823: NOT
15824: AND
15825: IFFALSE 15841
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15827: LD_EXP 31
15831: PPUSH
15832: LD_STRING 04_1_Sophia
15834: PPUSH
15835: CALL_OW 38
15839: GO 15859
// if Sophia then
15841: LD_EXP 31
15845: IFFALSE 15859
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15847: LD_EXP 31
15851: PPUSH
15852: LD_STRING 04_1_Sophia_L
15854: PPUSH
15855: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15859: LD_EXP 30
15863: PUSH
15864: LD_EXP 30
15868: PUSH
15869: LD_EXP 39
15873: IN
15874: NOT
15875: AND
15876: IFFALSE 15892
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15878: LD_EXP 30
15882: PPUSH
15883: LD_STRING 04_1_Kaia
15885: PPUSH
15886: CALL_OW 38
15890: GO 15910
// if Kaia then
15892: LD_EXP 30
15896: IFFALSE 15910
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15898: LD_EXP 30
15902: PPUSH
15903: LD_STRING 04_1_Kaia_L
15905: PPUSH
15906: CALL_OW 38
// if Givi then
15910: LD_EXP 26
15914: IFFALSE 15928
// SaveCharacters ( Givi , 04_1_Givi ) ;
15916: LD_EXP 26
15920: PPUSH
15921: LD_STRING 04_1_Givi
15923: PPUSH
15924: CALL_OW 38
// if Mike then
15928: LD_EXP 27
15932: IFFALSE 15946
// SaveCharacters ( Mike , 04_1_Mike ) ;
15934: LD_EXP 27
15938: PPUSH
15939: LD_STRING 04_1_Mike
15941: PPUSH
15942: CALL_OW 38
// if Markov then
15946: LD_EXP 32
15950: IFFALSE 15964
// SaveCharacters ( Markov , 04_1_Markov ) ;
15952: LD_EXP 32
15956: PPUSH
15957: LD_STRING 04_1_Markov
15959: PPUSH
15960: CALL_OW 38
// if Kurt then
15964: LD_EXP 34
15968: IFFALSE 15989
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15970: LD_EXP 34
15974: PPUSH
15975: LD_STRING 04_1_Kurt
15977: PPUSH
15978: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15982: LD_STRING enableBioCharacter(BIO_KURT)
15984: PPUSH
15985: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15989: LD_EXP 37
15993: PUSH
15994: LD_EXP 39
15998: DIFF
15999: IFFALSE 16019
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16001: LD_EXP 37
16005: PUSH
16006: LD_EXP 39
16010: DIFF
16011: PPUSH
16012: LD_STRING 04_1_others
16014: PPUSH
16015: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16019: LD_EXP 39
16023: PUSH
16024: LD_EXP 37
16028: AND
16029: IFFALSE 16114
// begin tmp := [ ] ;
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i in heikeSecondSquad do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: LD_EXP 37
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16094
// if i in aviradzeSquad then
16051: LD_VAR 0 1
16055: PUSH
16056: LD_EXP 39
16060: IN
16061: IFFALSE 16092
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_VAR 0 2
16072: PPUSH
16073: LD_VAR 0 2
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL_OW 1
16091: ST_TO_ADDR
16092: GO 16048
16094: POP
16095: POP
// if tmp then
16096: LD_VAR 0 2
16100: IFFALSE 16114
// SaveCharacters ( tmp , 04_1_others_L ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: LD_STRING 04_1_others_L
16109: PPUSH
16110: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16114: LD_ADDR_VAR 0 2
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 23
16131: PUSH
16132: LD_INT 0
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PPUSH
16143: CALL_OW 69
16147: ST_TO_ADDR
// if tmp then
16148: LD_VAR 0 2
16152: IFFALSE 16166
// SaveCharacters ( tmp , 04_1_apes ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_STRING 04_1_apes
16161: PPUSH
16162: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16166: LD_ADDR_VAR 0 2
16170: PUSH
16171: LD_INT 17
16173: PPUSH
16174: LD_INT 21
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 70
16188: ST_TO_ADDR
// if tmp then
16189: LD_VAR 0 2
16193: IFFALSE 16533
// begin tmp2 := [ ] ;
16195: LD_ADDR_VAR 0 3
16199: PUSH
16200: EMPTY
16201: ST_TO_ADDR
// for i in tmp do
16202: LD_ADDR_VAR 0 1
16206: PUSH
16207: LD_VAR 0 2
16211: PUSH
16212: FOR_IN
16213: IFFALSE 16519
// begin driver := IsDrivenBy ( i ) ;
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 311
16229: ST_TO_ADDR
// if not driver then
16230: LD_VAR 0 5
16234: NOT
16235: IFFALSE 16239
// continue ;
16237: GO 16212
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16239: LD_VAR 0 1
16243: PPUSH
16244: CALL_OW 264
16248: PUSH
16249: LD_INT 32
16251: PUSH
16252: LD_INT 12
16254: PUSH
16255: LD_INT 51
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: IN
16263: IFFALSE 16411
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16265: LD_ADDR_VAR 0 4
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: LD_INT 1
16277: PPUSH
16278: CALL_OW 289
16282: PUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: LD_INT 2
16290: PPUSH
16291: CALL_OW 289
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: LD_VAR 0 3
16309: PPUSH
16310: LD_VAR 0 3
16314: PUSH
16315: LD_INT 1
16317: PLUS
16318: PPUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 265
16328: PUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 262
16338: PUSH
16339: LD_VAR 0 1
16343: PPUSH
16344: CALL_OW 263
16348: PUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 264
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL_OW 248
16368: PUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 256
16378: PUSH
16379: LD_VAR 0 4
16383: PUSH
16384: LD_VAR 0 5
16388: PPUSH
16389: CALL_OW 257
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PPUSH
16404: CALL_OW 1
16408: ST_TO_ADDR
// end else
16409: GO 16517
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16411: LD_ADDR_VAR 0 3
16415: PUSH
16416: LD_VAR 0 3
16420: PPUSH
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 1
16428: PLUS
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 265
16439: PUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: CALL_OW 262
16449: PUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 263
16459: PUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 264
16469: PUSH
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 248
16479: PUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 256
16489: PUSH
16490: EMPTY
16491: PUSH
16492: LD_VAR 0 5
16496: PPUSH
16497: CALL_OW 257
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 1
16516: ST_TO_ADDR
// end ;
16517: GO 16212
16519: POP
16520: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16521: LD_VAR 0 3
16525: PPUSH
16526: LD_STRING 04_1_Vehicles
16528: PPUSH
16529: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16533: LD_EXP 21
16537: PPUSH
16538: LD_STRING 04_1_RuLabCaptured
16540: PPUSH
16541: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16545: LD_EXP 19
16549: PPUSH
16550: LD_STRING 04_1_EscapeCounter
16552: PPUSH
16553: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16557: LD_EXP 15
16561: PPUSH
16562: LD_STRING 04_1_BaseHill
16564: PPUSH
16565: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16569: LD_OWVAR 1
16573: PPUSH
16574: LD_STRING 04_1_Time
16576: PPUSH
16577: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16581: LD_EXP 14
16585: PPUSH
16586: LD_STRING 04_1_DeadCounter
16588: PPUSH
16589: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16593: LD_EXP 24
16597: PUSH
16598: LD_INT 112
16600: PPUSH
16601: CALL_OW 255
16605: MUL
16606: PUSH
16607: LD_INT 2
16609: EQUAL
16610: PPUSH
16611: LD_STRING 04_1_KaganCaptured
16613: PPUSH
16614: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16618: LD_INT 22
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 34
16630: PUSH
16631: LD_INT 26
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 69
16646: PUSH
16647: LD_INT 0
16649: PLUS
16650: PPUSH
16651: LD_STRING 04_1_Flamethrower
16653: PPUSH
16654: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16658: LD_INT 1
16660: PPUSH
16661: LD_STRING __x1\04_cont2
16663: PPUSH
16664: CALL_OW 340
// end ; end_of_file
16668: PPOPN 5
16670: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 266
16680: PUSH
16681: LD_INT 0
16683: EQUAL
16684: PUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 255
16694: PUSH
16695: LD_INT 2
16697: EQUAL
16698: AND
16699: IFFALSE 16709
// baseConstructed := true ;
16701: LD_ADDR_EXP 3
16705: PUSH
16706: LD_INT 1
16708: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 266
16718: PUSH
16719: LD_INT 6
16721: EQUAL
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 255
16732: PUSH
16733: LD_INT 2
16735: EQUAL
16736: AND
16737: IFFALSE 16747
// labConstructed := true ;
16739: LD_ADDR_EXP 4
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// end ;
16747: PPOPN 1
16749: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL 33391 0 1
// if un = Heike then
16759: LD_VAR 0 1
16763: PUSH
16764: LD_EXP 25
16768: EQUAL
16769: IFFALSE 16778
// YouLost ( Heike ) ;
16771: LD_STRING Heike
16773: PPUSH
16774: CALL_OW 104
// if un = Omar then
16778: LD_VAR 0 1
16782: PUSH
16783: LD_EXP 33
16787: EQUAL
16788: IFFALSE 16797
// YouLost ( Omar ) ;
16790: LD_STRING Omar
16792: PPUSH
16793: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 23
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 21
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: IN
16842: IFFALSE 16858
// loseCounter := loseCounter + 1 ;
16844: LD_ADDR_EXP 14
16848: PUSH
16849: LD_EXP 14
16853: PUSH
16854: LD_INT 1
16856: PLUS
16857: ST_TO_ADDR
// if un = omikron then
16858: LD_VAR 0 1
16862: PUSH
16863: LD_INT 64
16865: EQUAL
16866: IFFALSE 16876
// omicronFall := true ;
16868: LD_ADDR_EXP 13
16872: PUSH
16873: LD_INT 1
16875: ST_TO_ADDR
// if un = kirov then
16876: LD_VAR 0 1
16880: PUSH
16881: LD_INT 71
16883: EQUAL
16884: IFFALSE 16901
// begin ChangeMissionObjectives ( KirovDone ) ;
16886: LD_STRING KirovDone
16888: PPUSH
16889: CALL_OW 337
// kirovDestroyed := true ;
16893: LD_ADDR_EXP 16
16897: PUSH
16898: LD_INT 1
16900: ST_TO_ADDR
// end ; if un = beria then
16901: LD_VAR 0 1
16905: PUSH
16906: LD_INT 106
16908: EQUAL
16909: IFFALSE 16926
// begin ChangeMissionObjectives ( BeriaDone ) ;
16911: LD_STRING BeriaDone
16913: PPUSH
16914: CALL_OW 337
// beriaDestroyed := true ;
16918: LD_ADDR_EXP 17
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// end ; if un = kagan then
16926: LD_VAR 0 1
16930: PUSH
16931: LD_INT 112
16933: EQUAL
16934: IFFALSE 16944
// kaganDestroyed := true ;
16936: LD_ADDR_EXP 18
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// if un in russianPatrol then
16944: LD_VAR 0 1
16948: PUSH
16949: LD_EXP 47
16953: IN
16954: IFFALSE 16972
// russianPatrol := russianPatrol diff un ;
16956: LD_ADDR_EXP 47
16960: PUSH
16961: LD_EXP 47
16965: PUSH
16966: LD_VAR 0 1
16970: DIFF
16971: ST_TO_ADDR
// if un in russianOmicronAttackers then
16972: LD_VAR 0 1
16976: PUSH
16977: LD_EXP 48
16981: IN
16982: IFFALSE 17000
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16984: LD_ADDR_EXP 48
16988: PUSH
16989: LD_EXP 48
16993: PUSH
16994: LD_VAR 0 1
16998: DIFF
16999: ST_TO_ADDR
// end ;
17000: PPOPN 1
17002: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 22
17028: PUSH
17029: LD_INT 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_INT 6
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 30
17054: PUSH
17055: LD_INT 32
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: IN
17071: IFFALSE 17244
// begin sol := UnitsInside ( un ) ;
17073: LD_ADDR_VAR 0 3
17077: PUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 313
17087: ST_TO_ADDR
// if not sol then
17088: LD_VAR 0 3
17092: NOT
17093: IFFALSE 17097
// exit ;
17095: GO 17244
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 255
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 5
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: ST_TO_ADDR
// if not nearestBarracks then
17156: LD_VAR 0 4
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17244
// for i in nearestBarracks do
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_VAR 0 4
17174: PUSH
17175: FOR_IN
17176: IFFALSE 17211
// if UnitsInside ( i ) = 6 then
17178: LD_VAR 0 2
17182: PPUSH
17183: CALL_OW 313
17187: PUSH
17188: LD_INT 6
17190: EQUAL
17191: IFFALSE 17209
// nearestBarracks := nearestBarracks diff i ;
17193: LD_ADDR_VAR 0 4
17197: PUSH
17198: LD_VAR 0 4
17202: PUSH
17203: LD_VAR 0 2
17207: DIFF
17208: ST_TO_ADDR
17209: GO 17175
17211: POP
17212: POP
// if not nearestBarracks then
17213: LD_VAR 0 4
17217: NOT
17218: IFFALSE 17222
// exit ;
17220: GO 17244
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17222: LD_VAR 0 3
17226: PUSH
17227: LD_INT 1
17229: ARRAY
17230: PPUSH
17231: LD_VAR 0 4
17235: PUSH
17236: LD_INT 1
17238: ARRAY
17239: PPUSH
17240: CALL_OW 120
// end ; end ;
17244: PPOPN 4
17246: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17247: LD_INT 0
17249: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17250: LD_EXP 8
17254: NOT
17255: PUSH
17256: LD_EXP 5
17260: NOT
17261: OR
17262: IFFALSE 17266
// exit ;
17264: GO 17334
// for i in camAreas do
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: LD_EXP 8
17275: PUSH
17276: FOR_IN
17277: IFFALSE 17332
// if InArea ( x , y , i ) then
17279: LD_VAR 0 3
17283: PPUSH
17284: LD_VAR 0 4
17288: PPUSH
17289: LD_VAR 0 5
17293: PPUSH
17294: CALL_OW 309
17298: IFFALSE 17330
// begin SetAreaMapShow ( i , 0 ) ;
17300: LD_VAR 0 5
17304: PPUSH
17305: LD_INT 0
17307: PPUSH
17308: CALL_OW 424
// camAreas := camAreas diff i ;
17312: LD_ADDR_EXP 8
17316: PUSH
17317: LD_EXP 8
17321: PUSH
17322: LD_VAR 0 5
17326: DIFF
17327: ST_TO_ADDR
// break ;
17328: GO 17332
// end ;
17330: GO 17276
17332: POP
17333: POP
// end ;
17334: PPOPN 5
17336: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_INT 2
17344: EQUAL
17345: PUSH
17346: LD_VAR 0 2
17350: PUSH
17351: LD_INT 5
17353: PUSH
17354: LD_INT 8
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: IN
17361: AND
17362: IFFALSE 17371
// YouLost ( Ally ) ;
17364: LD_STRING Ally
17366: PPUSH
17367: CALL_OW 104
// end ;
17371: PPOPN 2
17373: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17374: LD_VAR 0 1
17378: PUSH
17379: LD_EXP 30
17383: EQUAL
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: LD_INT 6
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: IN
17400: AND
17401: IFFALSE 17432
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17403: LD_ADDR_EXP 23
17407: PUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 250
17417: PUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 251
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: ST_TO_ADDR
// end ;
17432: PPOPN 3
17434: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17435: LD_VAR 0 1
17439: PPUSH
17440: LD_VAR 0 2
17444: PPUSH
17445: CALL 33511 0 2
// end ; end_of_file
17449: PPOPN 2
17451: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17452: LD_EXP 11
17456: NOT
17457: PUSH
17458: LD_INT 12
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: CALL_OW 287
17468: PUSH
17469: LD_INT 20
17471: PUSH
17472: LD_INT 16
17474: PUSH
17475: LD_INT 12
17477: PUSH
17478: LD_INT 10
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: LD_OWVAR 67
17491: ARRAY
17492: LESS
17493: AND
17494: IFFALSE 17521
17496: GO 17498
17498: DISABLE
// begin enable ;
17499: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17500: LD_INT 1
17502: PPUSH
17503: LD_INT 5
17505: PPUSH
17506: CALL_OW 12
17510: PPUSH
17511: LD_INT 12
17513: PPUSH
17514: LD_INT 1
17516: PPUSH
17517: CALL_OW 55
// end ; end_of_file
17521: END
// every 0 0$1 trigger omarCountdown do
17522: LD_EXP 22
17526: IFFALSE 17578
17528: GO 17530
17530: DISABLE
// begin enable ;
17531: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17532: LD_ADDR_OWVAR 47
17536: PUSH
17537: LD_STRING #X104-1
17539: PUSH
17540: LD_EXP 22
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17549: LD_ADDR_EXP 22
17553: PUSH
17554: LD_EXP 22
17558: PUSH
17559: LD_INT 35
17561: MINUS
17562: ST_TO_ADDR
// if not omarCountdown then
17563: LD_EXP 22
17567: NOT
17568: IFFALSE 17578
// display_strings :=  ;
17570: LD_ADDR_OWVAR 47
17574: PUSH
17575: LD_STRING 
17577: ST_TO_ADDR
// end ; end_of_file
17578: END
// every 0 0$1 do
17579: GO 17581
17581: DISABLE
// begin enable ;
17582: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17583: LD_STRING updateTimer(
17585: PUSH
17586: LD_OWVAR 1
17590: STR
17591: PUSH
17592: LD_STRING );
17594: STR
17595: PPUSH
17596: CALL_OW 559
// end ;
17600: END
// export function SOS_MapStart ( ) ; begin
17601: LD_INT 0
17603: PPUSH
// if streamModeActive then
17604: LD_EXP 52
17608: IFFALSE 17617
// DefineStreamItems ( true ) ;
17610: LD_INT 1
17612: PPUSH
17613: CALL 19271 0 1
// UpdateFactoryWaypoints ( ) ;
17617: CALL 32132 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17621: CALL 32389 0 0
// end ;
17625: LD_VAR 0 1
17629: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17630: LD_INT 0
17632: PPUSH
// if p2 = hack_mode then
17633: LD_VAR 0 2
17637: PUSH
17638: LD_INT 100
17640: EQUAL
17641: IFFALSE 18644
// begin if not StreamModeActive then
17643: LD_EXP 52
17647: NOT
17648: IFFALSE 17658
// StreamModeActive := true ;
17650: LD_ADDR_EXP 52
17654: PUSH
17655: LD_INT 1
17657: ST_TO_ADDR
// if p3 = 0 then
17658: LD_VAR 0 3
17662: PUSH
17663: LD_INT 0
17665: EQUAL
17666: IFFALSE 17672
// InitStreamMode ;
17668: CALL 18807 0 0
// if p3 = 1 then
17672: LD_VAR 0 3
17676: PUSH
17677: LD_INT 1
17679: EQUAL
17680: IFFALSE 17690
// sRocket := true ;
17682: LD_ADDR_EXP 57
17686: PUSH
17687: LD_INT 1
17689: ST_TO_ADDR
// if p3 = 2 then
17690: LD_VAR 0 3
17694: PUSH
17695: LD_INT 2
17697: EQUAL
17698: IFFALSE 17708
// sSpeed := true ;
17700: LD_ADDR_EXP 56
17704: PUSH
17705: LD_INT 1
17707: ST_TO_ADDR
// if p3 = 3 then
17708: LD_VAR 0 3
17712: PUSH
17713: LD_INT 3
17715: EQUAL
17716: IFFALSE 17726
// sEngine := true ;
17718: LD_ADDR_EXP 58
17722: PUSH
17723: LD_INT 1
17725: ST_TO_ADDR
// if p3 = 4 then
17726: LD_VAR 0 3
17730: PUSH
17731: LD_INT 4
17733: EQUAL
17734: IFFALSE 17744
// sSpec := true ;
17736: LD_ADDR_EXP 55
17740: PUSH
17741: LD_INT 1
17743: ST_TO_ADDR
// if p3 = 5 then
17744: LD_VAR 0 3
17748: PUSH
17749: LD_INT 5
17751: EQUAL
17752: IFFALSE 17762
// sLevel := true ;
17754: LD_ADDR_EXP 59
17758: PUSH
17759: LD_INT 1
17761: ST_TO_ADDR
// if p3 = 6 then
17762: LD_VAR 0 3
17766: PUSH
17767: LD_INT 6
17769: EQUAL
17770: IFFALSE 17780
// sArmoury := true ;
17772: LD_ADDR_EXP 60
17776: PUSH
17777: LD_INT 1
17779: ST_TO_ADDR
// if p3 = 7 then
17780: LD_VAR 0 3
17784: PUSH
17785: LD_INT 7
17787: EQUAL
17788: IFFALSE 17798
// sRadar := true ;
17790: LD_ADDR_EXP 61
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// if p3 = 8 then
17798: LD_VAR 0 3
17802: PUSH
17803: LD_INT 8
17805: EQUAL
17806: IFFALSE 17816
// sBunker := true ;
17808: LD_ADDR_EXP 62
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// if p3 = 9 then
17816: LD_VAR 0 3
17820: PUSH
17821: LD_INT 9
17823: EQUAL
17824: IFFALSE 17834
// sHack := true ;
17826: LD_ADDR_EXP 63
17830: PUSH
17831: LD_INT 1
17833: ST_TO_ADDR
// if p3 = 10 then
17834: LD_VAR 0 3
17838: PUSH
17839: LD_INT 10
17841: EQUAL
17842: IFFALSE 17852
// sFire := true ;
17844: LD_ADDR_EXP 64
17848: PUSH
17849: LD_INT 1
17851: ST_TO_ADDR
// if p3 = 11 then
17852: LD_VAR 0 3
17856: PUSH
17857: LD_INT 11
17859: EQUAL
17860: IFFALSE 17870
// sRefresh := true ;
17862: LD_ADDR_EXP 65
17866: PUSH
17867: LD_INT 1
17869: ST_TO_ADDR
// if p3 = 12 then
17870: LD_VAR 0 3
17874: PUSH
17875: LD_INT 12
17877: EQUAL
17878: IFFALSE 17888
// sExp := true ;
17880: LD_ADDR_EXP 66
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// if p3 = 13 then
17888: LD_VAR 0 3
17892: PUSH
17893: LD_INT 13
17895: EQUAL
17896: IFFALSE 17906
// sDepot := true ;
17898: LD_ADDR_EXP 67
17902: PUSH
17903: LD_INT 1
17905: ST_TO_ADDR
// if p3 = 14 then
17906: LD_VAR 0 3
17910: PUSH
17911: LD_INT 14
17913: EQUAL
17914: IFFALSE 17924
// sFlag := true ;
17916: LD_ADDR_EXP 68
17920: PUSH
17921: LD_INT 1
17923: ST_TO_ADDR
// if p3 = 15 then
17924: LD_VAR 0 3
17928: PUSH
17929: LD_INT 15
17931: EQUAL
17932: IFFALSE 17942
// sKamikadze := true ;
17934: LD_ADDR_EXP 76
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// if p3 = 16 then
17942: LD_VAR 0 3
17946: PUSH
17947: LD_INT 16
17949: EQUAL
17950: IFFALSE 17960
// sTroll := true ;
17952: LD_ADDR_EXP 77
17956: PUSH
17957: LD_INT 1
17959: ST_TO_ADDR
// if p3 = 17 then
17960: LD_VAR 0 3
17964: PUSH
17965: LD_INT 17
17967: EQUAL
17968: IFFALSE 17978
// sSlow := true ;
17970: LD_ADDR_EXP 78
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// if p3 = 18 then
17978: LD_VAR 0 3
17982: PUSH
17983: LD_INT 18
17985: EQUAL
17986: IFFALSE 17996
// sLack := true ;
17988: LD_ADDR_EXP 79
17992: PUSH
17993: LD_INT 1
17995: ST_TO_ADDR
// if p3 = 19 then
17996: LD_VAR 0 3
18000: PUSH
18001: LD_INT 19
18003: EQUAL
18004: IFFALSE 18014
// sTank := true ;
18006: LD_ADDR_EXP 81
18010: PUSH
18011: LD_INT 1
18013: ST_TO_ADDR
// if p3 = 20 then
18014: LD_VAR 0 3
18018: PUSH
18019: LD_INT 20
18021: EQUAL
18022: IFFALSE 18032
// sRemote := true ;
18024: LD_ADDR_EXP 82
18028: PUSH
18029: LD_INT 1
18031: ST_TO_ADDR
// if p3 = 21 then
18032: LD_VAR 0 3
18036: PUSH
18037: LD_INT 21
18039: EQUAL
18040: IFFALSE 18050
// sPowell := true ;
18042: LD_ADDR_EXP 83
18046: PUSH
18047: LD_INT 1
18049: ST_TO_ADDR
// if p3 = 22 then
18050: LD_VAR 0 3
18054: PUSH
18055: LD_INT 22
18057: EQUAL
18058: IFFALSE 18068
// sTeleport := true ;
18060: LD_ADDR_EXP 86
18064: PUSH
18065: LD_INT 1
18067: ST_TO_ADDR
// if p3 = 23 then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_INT 23
18075: EQUAL
18076: IFFALSE 18086
// sOilTower := true ;
18078: LD_ADDR_EXP 88
18082: PUSH
18083: LD_INT 1
18085: ST_TO_ADDR
// if p3 = 24 then
18086: LD_VAR 0 3
18090: PUSH
18091: LD_INT 24
18093: EQUAL
18094: IFFALSE 18104
// sShovel := true ;
18096: LD_ADDR_EXP 89
18100: PUSH
18101: LD_INT 1
18103: ST_TO_ADDR
// if p3 = 25 then
18104: LD_VAR 0 3
18108: PUSH
18109: LD_INT 25
18111: EQUAL
18112: IFFALSE 18122
// sSheik := true ;
18114: LD_ADDR_EXP 90
18118: PUSH
18119: LD_INT 1
18121: ST_TO_ADDR
// if p3 = 26 then
18122: LD_VAR 0 3
18126: PUSH
18127: LD_INT 26
18129: EQUAL
18130: IFFALSE 18140
// sEarthquake := true ;
18132: LD_ADDR_EXP 92
18136: PUSH
18137: LD_INT 1
18139: ST_TO_ADDR
// if p3 = 27 then
18140: LD_VAR 0 3
18144: PUSH
18145: LD_INT 27
18147: EQUAL
18148: IFFALSE 18158
// sAI := true ;
18150: LD_ADDR_EXP 93
18154: PUSH
18155: LD_INT 1
18157: ST_TO_ADDR
// if p3 = 28 then
18158: LD_VAR 0 3
18162: PUSH
18163: LD_INT 28
18165: EQUAL
18166: IFFALSE 18176
// sCargo := true ;
18168: LD_ADDR_EXP 96
18172: PUSH
18173: LD_INT 1
18175: ST_TO_ADDR
// if p3 = 29 then
18176: LD_VAR 0 3
18180: PUSH
18181: LD_INT 29
18183: EQUAL
18184: IFFALSE 18194
// sDLaser := true ;
18186: LD_ADDR_EXP 97
18190: PUSH
18191: LD_INT 1
18193: ST_TO_ADDR
// if p3 = 30 then
18194: LD_VAR 0 3
18198: PUSH
18199: LD_INT 30
18201: EQUAL
18202: IFFALSE 18212
// sExchange := true ;
18204: LD_ADDR_EXP 98
18208: PUSH
18209: LD_INT 1
18211: ST_TO_ADDR
// if p3 = 31 then
18212: LD_VAR 0 3
18216: PUSH
18217: LD_INT 31
18219: EQUAL
18220: IFFALSE 18230
// sFac := true ;
18222: LD_ADDR_EXP 99
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// if p3 = 32 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 32
18237: EQUAL
18238: IFFALSE 18248
// sPower := true ;
18240: LD_ADDR_EXP 100
18244: PUSH
18245: LD_INT 1
18247: ST_TO_ADDR
// if p3 = 33 then
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 33
18255: EQUAL
18256: IFFALSE 18266
// sRandom := true ;
18258: LD_ADDR_EXP 101
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// if p3 = 34 then
18266: LD_VAR 0 3
18270: PUSH
18271: LD_INT 34
18273: EQUAL
18274: IFFALSE 18284
// sShield := true ;
18276: LD_ADDR_EXP 102
18280: PUSH
18281: LD_INT 1
18283: ST_TO_ADDR
// if p3 = 35 then
18284: LD_VAR 0 3
18288: PUSH
18289: LD_INT 35
18291: EQUAL
18292: IFFALSE 18302
// sTime := true ;
18294: LD_ADDR_EXP 103
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// if p3 = 36 then
18302: LD_VAR 0 3
18306: PUSH
18307: LD_INT 36
18309: EQUAL
18310: IFFALSE 18320
// sTools := true ;
18312: LD_ADDR_EXP 104
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// if p3 = 101 then
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 101
18327: EQUAL
18328: IFFALSE 18338
// sSold := true ;
18330: LD_ADDR_EXP 69
18334: PUSH
18335: LD_INT 1
18337: ST_TO_ADDR
// if p3 = 102 then
18338: LD_VAR 0 3
18342: PUSH
18343: LD_INT 102
18345: EQUAL
18346: IFFALSE 18356
// sDiff := true ;
18348: LD_ADDR_EXP 70
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if p3 = 103 then
18356: LD_VAR 0 3
18360: PUSH
18361: LD_INT 103
18363: EQUAL
18364: IFFALSE 18374
// sFog := true ;
18366: LD_ADDR_EXP 73
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// if p3 = 104 then
18374: LD_VAR 0 3
18378: PUSH
18379: LD_INT 104
18381: EQUAL
18382: IFFALSE 18392
// sReset := true ;
18384: LD_ADDR_EXP 74
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// if p3 = 105 then
18392: LD_VAR 0 3
18396: PUSH
18397: LD_INT 105
18399: EQUAL
18400: IFFALSE 18410
// sSun := true ;
18402: LD_ADDR_EXP 75
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
// if p3 = 106 then
18410: LD_VAR 0 3
18414: PUSH
18415: LD_INT 106
18417: EQUAL
18418: IFFALSE 18428
// sTiger := true ;
18420: LD_ADDR_EXP 71
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// if p3 = 107 then
18428: LD_VAR 0 3
18432: PUSH
18433: LD_INT 107
18435: EQUAL
18436: IFFALSE 18446
// sBomb := true ;
18438: LD_ADDR_EXP 72
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// if p3 = 108 then
18446: LD_VAR 0 3
18450: PUSH
18451: LD_INT 108
18453: EQUAL
18454: IFFALSE 18464
// sWound := true ;
18456: LD_ADDR_EXP 80
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// if p3 = 109 then
18464: LD_VAR 0 3
18468: PUSH
18469: LD_INT 109
18471: EQUAL
18472: IFFALSE 18482
// sBetray := true ;
18474: LD_ADDR_EXP 84
18478: PUSH
18479: LD_INT 1
18481: ST_TO_ADDR
// if p3 = 110 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_INT 110
18489: EQUAL
18490: IFFALSE 18500
// sContamin := true ;
18492: LD_ADDR_EXP 85
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// if p3 = 111 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 111
18507: EQUAL
18508: IFFALSE 18518
// sOil := true ;
18510: LD_ADDR_EXP 87
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// if p3 = 112 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 112
18525: EQUAL
18526: IFFALSE 18536
// sStu := true ;
18528: LD_ADDR_EXP 91
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// if p3 = 113 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 113
18543: EQUAL
18544: IFFALSE 18554
// sBazooka := true ;
18546: LD_ADDR_EXP 94
18550: PUSH
18551: LD_INT 1
18553: ST_TO_ADDR
// if p3 = 114 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 114
18561: EQUAL
18562: IFFALSE 18572
// sMortar := true ;
18564: LD_ADDR_EXP 95
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if p3 = 115 then
18572: LD_VAR 0 3
18576: PUSH
18577: LD_INT 115
18579: EQUAL
18580: IFFALSE 18590
// sRanger := true ;
18582: LD_ADDR_EXP 105
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if p3 = 116 then
18590: LD_VAR 0 3
18594: PUSH
18595: LD_INT 116
18597: EQUAL
18598: IFFALSE 18608
// sComputer := true ;
18600: LD_ADDR_EXP 106
18604: PUSH
18605: LD_INT 1
18607: ST_TO_ADDR
// if p3 = 117 then
18608: LD_VAR 0 3
18612: PUSH
18613: LD_INT 117
18615: EQUAL
18616: IFFALSE 18626
// s30 := true ;
18618: LD_ADDR_EXP 107
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// if p3 = 118 then
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 118
18633: EQUAL
18634: IFFALSE 18644
// s60 := true ;
18636: LD_ADDR_EXP 108
18640: PUSH
18641: LD_INT 1
18643: ST_TO_ADDR
// end ; if p2 = stream_mode then
18644: LD_VAR 0 2
18648: PUSH
18649: LD_INT 101
18651: EQUAL
18652: IFFALSE 18780
// begin case p3 of 1 :
18654: LD_VAR 0 3
18658: PUSH
18659: LD_INT 1
18661: DOUBLE
18662: EQUAL
18663: IFTRUE 18667
18665: GO 18674
18667: POP
// hHackUnlimitedResources ; 2 :
18668: CALL 30878 0 0
18672: GO 18780
18674: LD_INT 2
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18689
18682: POP
// hHackSetLevel10 ; 3 :
18683: CALL 31011 0 0
18687: GO 18780
18689: LD_INT 3
18691: DOUBLE
18692: EQUAL
18693: IFTRUE 18697
18695: GO 18704
18697: POP
// hHackSetLevel10YourUnits ; 4 :
18698: CALL 31096 0 0
18702: GO 18780
18704: LD_INT 4
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18719
18712: POP
// hHackInvincible ; 5 :
18713: CALL 31544 0 0
18717: GO 18780
18719: LD_INT 5
18721: DOUBLE
18722: EQUAL
18723: IFTRUE 18727
18725: GO 18734
18727: POP
// hHackInvisible ; 6 :
18728: CALL 31655 0 0
18732: GO 18780
18734: LD_INT 6
18736: DOUBLE
18737: EQUAL
18738: IFTRUE 18742
18740: GO 18749
18742: POP
// hHackChangeYourSide ; 7 :
18743: CALL 31712 0 0
18747: GO 18780
18749: LD_INT 7
18751: DOUBLE
18752: EQUAL
18753: IFTRUE 18757
18755: GO 18764
18757: POP
// hHackChangeUnitSide ; 8 :
18758: CALL 31754 0 0
18762: GO 18780
18764: LD_INT 8
18766: DOUBLE
18767: EQUAL
18768: IFTRUE 18772
18770: GO 18779
18772: POP
// hHackFog ; end ;
18773: CALL 31855 0 0
18777: GO 18780
18779: POP
// end ; end ;
18780: LD_VAR 0 7
18784: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18785: GO 18787
18787: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18788: LD_STRING initStreamRollete();
18790: PPUSH
18791: CALL_OW 559
// InitStreamMode ;
18795: CALL 18807 0 0
// DefineStreamItems ( false ) ;
18799: LD_INT 0
18801: PPUSH
18802: CALL 19271 0 1
// end ;
18806: END
// function InitStreamMode ; begin
18807: LD_INT 0
18809: PPUSH
// streamModeActive := false ;
18810: LD_ADDR_EXP 52
18814: PUSH
18815: LD_INT 0
18817: ST_TO_ADDR
// normalCounter := 36 ;
18818: LD_ADDR_EXP 53
18822: PUSH
18823: LD_INT 36
18825: ST_TO_ADDR
// hardcoreCounter := 18 ;
18826: LD_ADDR_EXP 54
18830: PUSH
18831: LD_INT 18
18833: ST_TO_ADDR
// sRocket := false ;
18834: LD_ADDR_EXP 57
18838: PUSH
18839: LD_INT 0
18841: ST_TO_ADDR
// sSpeed := false ;
18842: LD_ADDR_EXP 56
18846: PUSH
18847: LD_INT 0
18849: ST_TO_ADDR
// sEngine := false ;
18850: LD_ADDR_EXP 58
18854: PUSH
18855: LD_INT 0
18857: ST_TO_ADDR
// sSpec := false ;
18858: LD_ADDR_EXP 55
18862: PUSH
18863: LD_INT 0
18865: ST_TO_ADDR
// sLevel := false ;
18866: LD_ADDR_EXP 59
18870: PUSH
18871: LD_INT 0
18873: ST_TO_ADDR
// sArmoury := false ;
18874: LD_ADDR_EXP 60
18878: PUSH
18879: LD_INT 0
18881: ST_TO_ADDR
// sRadar := false ;
18882: LD_ADDR_EXP 61
18886: PUSH
18887: LD_INT 0
18889: ST_TO_ADDR
// sBunker := false ;
18890: LD_ADDR_EXP 62
18894: PUSH
18895: LD_INT 0
18897: ST_TO_ADDR
// sHack := false ;
18898: LD_ADDR_EXP 63
18902: PUSH
18903: LD_INT 0
18905: ST_TO_ADDR
// sFire := false ;
18906: LD_ADDR_EXP 64
18910: PUSH
18911: LD_INT 0
18913: ST_TO_ADDR
// sRefresh := false ;
18914: LD_ADDR_EXP 65
18918: PUSH
18919: LD_INT 0
18921: ST_TO_ADDR
// sExp := false ;
18922: LD_ADDR_EXP 66
18926: PUSH
18927: LD_INT 0
18929: ST_TO_ADDR
// sDepot := false ;
18930: LD_ADDR_EXP 67
18934: PUSH
18935: LD_INT 0
18937: ST_TO_ADDR
// sFlag := false ;
18938: LD_ADDR_EXP 68
18942: PUSH
18943: LD_INT 0
18945: ST_TO_ADDR
// sKamikadze := false ;
18946: LD_ADDR_EXP 76
18950: PUSH
18951: LD_INT 0
18953: ST_TO_ADDR
// sTroll := false ;
18954: LD_ADDR_EXP 77
18958: PUSH
18959: LD_INT 0
18961: ST_TO_ADDR
// sSlow := false ;
18962: LD_ADDR_EXP 78
18966: PUSH
18967: LD_INT 0
18969: ST_TO_ADDR
// sLack := false ;
18970: LD_ADDR_EXP 79
18974: PUSH
18975: LD_INT 0
18977: ST_TO_ADDR
// sTank := false ;
18978: LD_ADDR_EXP 81
18982: PUSH
18983: LD_INT 0
18985: ST_TO_ADDR
// sRemote := false ;
18986: LD_ADDR_EXP 82
18990: PUSH
18991: LD_INT 0
18993: ST_TO_ADDR
// sPowell := false ;
18994: LD_ADDR_EXP 83
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// sTeleport := false ;
19002: LD_ADDR_EXP 86
19006: PUSH
19007: LD_INT 0
19009: ST_TO_ADDR
// sOilTower := false ;
19010: LD_ADDR_EXP 88
19014: PUSH
19015: LD_INT 0
19017: ST_TO_ADDR
// sShovel := false ;
19018: LD_ADDR_EXP 89
19022: PUSH
19023: LD_INT 0
19025: ST_TO_ADDR
// sSheik := false ;
19026: LD_ADDR_EXP 90
19030: PUSH
19031: LD_INT 0
19033: ST_TO_ADDR
// sEarthquake := false ;
19034: LD_ADDR_EXP 92
19038: PUSH
19039: LD_INT 0
19041: ST_TO_ADDR
// sAI := false ;
19042: LD_ADDR_EXP 93
19046: PUSH
19047: LD_INT 0
19049: ST_TO_ADDR
// sCargo := false ;
19050: LD_ADDR_EXP 96
19054: PUSH
19055: LD_INT 0
19057: ST_TO_ADDR
// sDLaser := false ;
19058: LD_ADDR_EXP 97
19062: PUSH
19063: LD_INT 0
19065: ST_TO_ADDR
// sExchange := false ;
19066: LD_ADDR_EXP 98
19070: PUSH
19071: LD_INT 0
19073: ST_TO_ADDR
// sFac := false ;
19074: LD_ADDR_EXP 99
19078: PUSH
19079: LD_INT 0
19081: ST_TO_ADDR
// sPower := false ;
19082: LD_ADDR_EXP 100
19086: PUSH
19087: LD_INT 0
19089: ST_TO_ADDR
// sRandom := false ;
19090: LD_ADDR_EXP 101
19094: PUSH
19095: LD_INT 0
19097: ST_TO_ADDR
// sShield := false ;
19098: LD_ADDR_EXP 102
19102: PUSH
19103: LD_INT 0
19105: ST_TO_ADDR
// sTime := false ;
19106: LD_ADDR_EXP 103
19110: PUSH
19111: LD_INT 0
19113: ST_TO_ADDR
// sTools := false ;
19114: LD_ADDR_EXP 104
19118: PUSH
19119: LD_INT 0
19121: ST_TO_ADDR
// sSold := false ;
19122: LD_ADDR_EXP 69
19126: PUSH
19127: LD_INT 0
19129: ST_TO_ADDR
// sDiff := false ;
19130: LD_ADDR_EXP 70
19134: PUSH
19135: LD_INT 0
19137: ST_TO_ADDR
// sFog := false ;
19138: LD_ADDR_EXP 73
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// sReset := false ;
19146: LD_ADDR_EXP 74
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// sSun := false ;
19154: LD_ADDR_EXP 75
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
// sTiger := false ;
19162: LD_ADDR_EXP 71
19166: PUSH
19167: LD_INT 0
19169: ST_TO_ADDR
// sBomb := false ;
19170: LD_ADDR_EXP 72
19174: PUSH
19175: LD_INT 0
19177: ST_TO_ADDR
// sWound := false ;
19178: LD_ADDR_EXP 80
19182: PUSH
19183: LD_INT 0
19185: ST_TO_ADDR
// sBetray := false ;
19186: LD_ADDR_EXP 84
19190: PUSH
19191: LD_INT 0
19193: ST_TO_ADDR
// sContamin := false ;
19194: LD_ADDR_EXP 85
19198: PUSH
19199: LD_INT 0
19201: ST_TO_ADDR
// sOil := false ;
19202: LD_ADDR_EXP 87
19206: PUSH
19207: LD_INT 0
19209: ST_TO_ADDR
// sStu := false ;
19210: LD_ADDR_EXP 91
19214: PUSH
19215: LD_INT 0
19217: ST_TO_ADDR
// sBazooka := false ;
19218: LD_ADDR_EXP 94
19222: PUSH
19223: LD_INT 0
19225: ST_TO_ADDR
// sMortar := false ;
19226: LD_ADDR_EXP 95
19230: PUSH
19231: LD_INT 0
19233: ST_TO_ADDR
// sRanger := false ;
19234: LD_ADDR_EXP 105
19238: PUSH
19239: LD_INT 0
19241: ST_TO_ADDR
// sComputer := false ;
19242: LD_ADDR_EXP 106
19246: PUSH
19247: LD_INT 0
19249: ST_TO_ADDR
// s30 := false ;
19250: LD_ADDR_EXP 107
19254: PUSH
19255: LD_INT 0
19257: ST_TO_ADDR
// s60 := false ;
19258: LD_ADDR_EXP 108
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
// end ;
19266: LD_VAR 0 1
19270: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19271: LD_INT 0
19273: PPUSH
19274: PPUSH
19275: PPUSH
19276: PPUSH
19277: PPUSH
19278: PPUSH
19279: PPUSH
// result := [ ] ;
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: EMPTY
19286: ST_TO_ADDR
// if campaign_id = 1 then
19287: LD_OWVAR 69
19291: PUSH
19292: LD_INT 1
19294: EQUAL
19295: IFFALSE 22461
// begin case mission_number of 1 :
19297: LD_OWVAR 70
19301: PUSH
19302: LD_INT 1
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19386
19310: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19311: LD_ADDR_VAR 0 2
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 4
19321: PUSH
19322: LD_INT 11
19324: PUSH
19325: LD_INT 12
19327: PUSH
19328: LD_INT 15
19330: PUSH
19331: LD_INT 16
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_INT 23
19339: PUSH
19340: LD_INT 26
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 101
19356: PUSH
19357: LD_INT 102
19359: PUSH
19360: LD_INT 106
19362: PUSH
19363: LD_INT 116
19365: PUSH
19366: LD_INT 117
19368: PUSH
19369: LD_INT 118
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: ST_TO_ADDR
19384: GO 22459
19386: LD_INT 2
19388: DOUBLE
19389: EQUAL
19390: IFTRUE 19394
19392: GO 19478
19394: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19395: LD_ADDR_VAR 0 2
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: LD_INT 4
19405: PUSH
19406: LD_INT 11
19408: PUSH
19409: LD_INT 12
19411: PUSH
19412: LD_INT 15
19414: PUSH
19415: LD_INT 16
19417: PUSH
19418: LD_INT 22
19420: PUSH
19421: LD_INT 23
19423: PUSH
19424: LD_INT 26
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 101
19440: PUSH
19441: LD_INT 102
19443: PUSH
19444: LD_INT 105
19446: PUSH
19447: LD_INT 106
19449: PUSH
19450: LD_INT 108
19452: PUSH
19453: LD_INT 116
19455: PUSH
19456: LD_INT 117
19458: PUSH
19459: LD_INT 118
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: ST_TO_ADDR
19476: GO 22459
19478: LD_INT 3
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19574
19486: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19487: LD_ADDR_VAR 0 2
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 4
19497: PUSH
19498: LD_INT 5
19500: PUSH
19501: LD_INT 11
19503: PUSH
19504: LD_INT 12
19506: PUSH
19507: LD_INT 15
19509: PUSH
19510: LD_INT 16
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_INT 26
19518: PUSH
19519: LD_INT 36
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 101
19536: PUSH
19537: LD_INT 102
19539: PUSH
19540: LD_INT 105
19542: PUSH
19543: LD_INT 106
19545: PUSH
19546: LD_INT 108
19548: PUSH
19549: LD_INT 116
19551: PUSH
19552: LD_INT 117
19554: PUSH
19555: LD_INT 118
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: ST_TO_ADDR
19572: GO 22459
19574: LD_INT 4
19576: DOUBLE
19577: EQUAL
19578: IFTRUE 19582
19580: GO 19678
19582: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19583: LD_ADDR_VAR 0 2
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: LD_INT 4
19593: PUSH
19594: LD_INT 5
19596: PUSH
19597: LD_INT 8
19599: PUSH
19600: LD_INT 11
19602: PUSH
19603: LD_INT 12
19605: PUSH
19606: LD_INT 15
19608: PUSH
19609: LD_INT 16
19611: PUSH
19612: LD_INT 22
19614: PUSH
19615: LD_INT 23
19617: PUSH
19618: LD_INT 26
19620: PUSH
19621: LD_INT 36
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 101
19640: PUSH
19641: LD_INT 102
19643: PUSH
19644: LD_INT 105
19646: PUSH
19647: LD_INT 106
19649: PUSH
19650: LD_INT 108
19652: PUSH
19653: LD_INT 116
19655: PUSH
19656: LD_INT 117
19658: PUSH
19659: LD_INT 118
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: ST_TO_ADDR
19676: GO 22459
19678: LD_INT 5
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19798
19686: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19687: LD_ADDR_VAR 0 2
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 4
19697: PUSH
19698: LD_INT 5
19700: PUSH
19701: LD_INT 6
19703: PUSH
19704: LD_INT 8
19706: PUSH
19707: LD_INT 11
19709: PUSH
19710: LD_INT 12
19712: PUSH
19713: LD_INT 15
19715: PUSH
19716: LD_INT 16
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_INT 23
19724: PUSH
19725: LD_INT 25
19727: PUSH
19728: LD_INT 26
19730: PUSH
19731: LD_INT 36
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 101
19752: PUSH
19753: LD_INT 102
19755: PUSH
19756: LD_INT 105
19758: PUSH
19759: LD_INT 106
19761: PUSH
19762: LD_INT 108
19764: PUSH
19765: LD_INT 109
19767: PUSH
19768: LD_INT 112
19770: PUSH
19771: LD_INT 116
19773: PUSH
19774: LD_INT 117
19776: PUSH
19777: LD_INT 118
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 22459
19798: LD_INT 6
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19938
19806: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19807: LD_ADDR_VAR 0 2
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: LD_INT 4
19817: PUSH
19818: LD_INT 5
19820: PUSH
19821: LD_INT 6
19823: PUSH
19824: LD_INT 8
19826: PUSH
19827: LD_INT 11
19829: PUSH
19830: LD_INT 12
19832: PUSH
19833: LD_INT 15
19835: PUSH
19836: LD_INT 16
19838: PUSH
19839: LD_INT 20
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 22
19847: PUSH
19848: LD_INT 23
19850: PUSH
19851: LD_INT 25
19853: PUSH
19854: LD_INT 26
19856: PUSH
19857: LD_INT 30
19859: PUSH
19860: LD_INT 31
19862: PUSH
19863: LD_INT 32
19865: PUSH
19866: LD_INT 36
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 101
19892: PUSH
19893: LD_INT 102
19895: PUSH
19896: LD_INT 105
19898: PUSH
19899: LD_INT 106
19901: PUSH
19902: LD_INT 108
19904: PUSH
19905: LD_INT 109
19907: PUSH
19908: LD_INT 112
19910: PUSH
19911: LD_INT 116
19913: PUSH
19914: LD_INT 117
19916: PUSH
19917: LD_INT 118
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: ST_TO_ADDR
19936: GO 22459
19938: LD_INT 7
19940: DOUBLE
19941: EQUAL
19942: IFTRUE 19946
19944: GO 20058
19946: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19947: LD_ADDR_VAR 0 2
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: LD_INT 7
19963: PUSH
19964: LD_INT 11
19966: PUSH
19967: LD_INT 12
19969: PUSH
19970: LD_INT 15
19972: PUSH
19973: LD_INT 16
19975: PUSH
19976: LD_INT 20
19978: PUSH
19979: LD_INT 21
19981: PUSH
19982: LD_INT 22
19984: PUSH
19985: LD_INT 23
19987: PUSH
19988: LD_INT 25
19990: PUSH
19991: LD_INT 26
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 101
20012: PUSH
20013: LD_INT 102
20015: PUSH
20016: LD_INT 103
20018: PUSH
20019: LD_INT 105
20021: PUSH
20022: LD_INT 106
20024: PUSH
20025: LD_INT 108
20027: PUSH
20028: LD_INT 112
20030: PUSH
20031: LD_INT 116
20033: PUSH
20034: LD_INT 117
20036: PUSH
20037: LD_INT 118
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: ST_TO_ADDR
20056: GO 22459
20058: LD_INT 8
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20206
20066: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20067: LD_ADDR_VAR 0 2
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: LD_INT 4
20077: PUSH
20078: LD_INT 5
20080: PUSH
20081: LD_INT 6
20083: PUSH
20084: LD_INT 7
20086: PUSH
20087: LD_INT 8
20089: PUSH
20090: LD_INT 11
20092: PUSH
20093: LD_INT 12
20095: PUSH
20096: LD_INT 15
20098: PUSH
20099: LD_INT 16
20101: PUSH
20102: LD_INT 20
20104: PUSH
20105: LD_INT 21
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_INT 23
20113: PUSH
20114: LD_INT 25
20116: PUSH
20117: LD_INT 26
20119: PUSH
20120: LD_INT 30
20122: PUSH
20123: LD_INT 31
20125: PUSH
20126: LD_INT 32
20128: PUSH
20129: LD_INT 36
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 101
20156: PUSH
20157: LD_INT 102
20159: PUSH
20160: LD_INT 103
20162: PUSH
20163: LD_INT 105
20165: PUSH
20166: LD_INT 106
20168: PUSH
20169: LD_INT 108
20171: PUSH
20172: LD_INT 109
20174: PUSH
20175: LD_INT 112
20177: PUSH
20178: LD_INT 116
20180: PUSH
20181: LD_INT 117
20183: PUSH
20184: LD_INT 118
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: ST_TO_ADDR
20204: GO 22459
20206: LD_INT 9
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20362
20214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20215: LD_ADDR_VAR 0 2
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: LD_INT 4
20225: PUSH
20226: LD_INT 5
20228: PUSH
20229: LD_INT 6
20231: PUSH
20232: LD_INT 7
20234: PUSH
20235: LD_INT 8
20237: PUSH
20238: LD_INT 11
20240: PUSH
20241: LD_INT 12
20243: PUSH
20244: LD_INT 15
20246: PUSH
20247: LD_INT 16
20249: PUSH
20250: LD_INT 20
20252: PUSH
20253: LD_INT 21
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_INT 23
20261: PUSH
20262: LD_INT 25
20264: PUSH
20265: LD_INT 26
20267: PUSH
20268: LD_INT 28
20270: PUSH
20271: LD_INT 30
20273: PUSH
20274: LD_INT 31
20276: PUSH
20277: LD_INT 32
20279: PUSH
20280: LD_INT 36
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 101
20308: PUSH
20309: LD_INT 102
20311: PUSH
20312: LD_INT 103
20314: PUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 106
20320: PUSH
20321: LD_INT 108
20323: PUSH
20324: LD_INT 109
20326: PUSH
20327: LD_INT 112
20329: PUSH
20330: LD_INT 114
20332: PUSH
20333: LD_INT 116
20335: PUSH
20336: LD_INT 117
20338: PUSH
20339: LD_INT 118
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
20360: GO 22459
20362: LD_INT 10
20364: DOUBLE
20365: EQUAL
20366: IFTRUE 20370
20368: GO 20566
20370: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: LD_INT 4
20381: PUSH
20382: LD_INT 5
20384: PUSH
20385: LD_INT 6
20387: PUSH
20388: LD_INT 7
20390: PUSH
20391: LD_INT 8
20393: PUSH
20394: LD_INT 9
20396: PUSH
20397: LD_INT 10
20399: PUSH
20400: LD_INT 11
20402: PUSH
20403: LD_INT 12
20405: PUSH
20406: LD_INT 13
20408: PUSH
20409: LD_INT 14
20411: PUSH
20412: LD_INT 15
20414: PUSH
20415: LD_INT 16
20417: PUSH
20418: LD_INT 17
20420: PUSH
20421: LD_INT 18
20423: PUSH
20424: LD_INT 19
20426: PUSH
20427: LD_INT 20
20429: PUSH
20430: LD_INT 21
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 23
20438: PUSH
20439: LD_INT 24
20441: PUSH
20442: LD_INT 25
20444: PUSH
20445: LD_INT 26
20447: PUSH
20448: LD_INT 28
20450: PUSH
20451: LD_INT 30
20453: PUSH
20454: LD_INT 31
20456: PUSH
20457: LD_INT 32
20459: PUSH
20460: LD_INT 36
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 101
20496: PUSH
20497: LD_INT 102
20499: PUSH
20500: LD_INT 103
20502: PUSH
20503: LD_INT 104
20505: PUSH
20506: LD_INT 105
20508: PUSH
20509: LD_INT 106
20511: PUSH
20512: LD_INT 107
20514: PUSH
20515: LD_INT 108
20517: PUSH
20518: LD_INT 109
20520: PUSH
20521: LD_INT 110
20523: PUSH
20524: LD_INT 111
20526: PUSH
20527: LD_INT 112
20529: PUSH
20530: LD_INT 114
20532: PUSH
20533: LD_INT 116
20535: PUSH
20536: LD_INT 117
20538: PUSH
20539: LD_INT 118
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: ST_TO_ADDR
20564: GO 22459
20566: LD_INT 11
20568: DOUBLE
20569: EQUAL
20570: IFTRUE 20574
20572: GO 20778
20574: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20575: LD_ADDR_VAR 0 2
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: LD_INT 3
20585: PUSH
20586: LD_INT 4
20588: PUSH
20589: LD_INT 5
20591: PUSH
20592: LD_INT 6
20594: PUSH
20595: LD_INT 7
20597: PUSH
20598: LD_INT 8
20600: PUSH
20601: LD_INT 9
20603: PUSH
20604: LD_INT 10
20606: PUSH
20607: LD_INT 11
20609: PUSH
20610: LD_INT 12
20612: PUSH
20613: LD_INT 13
20615: PUSH
20616: LD_INT 14
20618: PUSH
20619: LD_INT 15
20621: PUSH
20622: LD_INT 16
20624: PUSH
20625: LD_INT 17
20627: PUSH
20628: LD_INT 18
20630: PUSH
20631: LD_INT 19
20633: PUSH
20634: LD_INT 20
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 23
20645: PUSH
20646: LD_INT 24
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 26
20654: PUSH
20655: LD_INT 28
20657: PUSH
20658: LD_INT 30
20660: PUSH
20661: LD_INT 31
20663: PUSH
20664: LD_INT 32
20666: PUSH
20667: LD_INT 34
20669: PUSH
20670: LD_INT 36
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 101
20708: PUSH
20709: LD_INT 102
20711: PUSH
20712: LD_INT 103
20714: PUSH
20715: LD_INT 104
20717: PUSH
20718: LD_INT 105
20720: PUSH
20721: LD_INT 106
20723: PUSH
20724: LD_INT 107
20726: PUSH
20727: LD_INT 108
20729: PUSH
20730: LD_INT 109
20732: PUSH
20733: LD_INT 110
20735: PUSH
20736: LD_INT 111
20738: PUSH
20739: LD_INT 112
20741: PUSH
20742: LD_INT 114
20744: PUSH
20745: LD_INT 116
20747: PUSH
20748: LD_INT 117
20750: PUSH
20751: LD_INT 118
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: ST_TO_ADDR
20776: GO 22459
20778: LD_INT 12
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 21006
20786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20787: LD_ADDR_VAR 0 2
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: LD_INT 4
20803: PUSH
20804: LD_INT 5
20806: PUSH
20807: LD_INT 6
20809: PUSH
20810: LD_INT 7
20812: PUSH
20813: LD_INT 8
20815: PUSH
20816: LD_INT 9
20818: PUSH
20819: LD_INT 10
20821: PUSH
20822: LD_INT 11
20824: PUSH
20825: LD_INT 12
20827: PUSH
20828: LD_INT 13
20830: PUSH
20831: LD_INT 14
20833: PUSH
20834: LD_INT 15
20836: PUSH
20837: LD_INT 16
20839: PUSH
20840: LD_INT 17
20842: PUSH
20843: LD_INT 18
20845: PUSH
20846: LD_INT 19
20848: PUSH
20849: LD_INT 20
20851: PUSH
20852: LD_INT 21
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: LD_INT 23
20860: PUSH
20861: LD_INT 24
20863: PUSH
20864: LD_INT 25
20866: PUSH
20867: LD_INT 26
20869: PUSH
20870: LD_INT 27
20872: PUSH
20873: LD_INT 28
20875: PUSH
20876: LD_INT 30
20878: PUSH
20879: LD_INT 31
20881: PUSH
20882: LD_INT 32
20884: PUSH
20885: LD_INT 33
20887: PUSH
20888: LD_INT 34
20890: PUSH
20891: LD_INT 36
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 101
20932: PUSH
20933: LD_INT 102
20935: PUSH
20936: LD_INT 103
20938: PUSH
20939: LD_INT 104
20941: PUSH
20942: LD_INT 105
20944: PUSH
20945: LD_INT 106
20947: PUSH
20948: LD_INT 107
20950: PUSH
20951: LD_INT 108
20953: PUSH
20954: LD_INT 109
20956: PUSH
20957: LD_INT 110
20959: PUSH
20960: LD_INT 111
20962: PUSH
20963: LD_INT 112
20965: PUSH
20966: LD_INT 113
20968: PUSH
20969: LD_INT 114
20971: PUSH
20972: LD_INT 116
20974: PUSH
20975: LD_INT 117
20977: PUSH
20978: LD_INT 118
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 22459
21006: LD_INT 13
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21222
21014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21015: LD_ADDR_VAR 0 2
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: LD_INT 3
21028: PUSH
21029: LD_INT 4
21031: PUSH
21032: LD_INT 5
21034: PUSH
21035: LD_INT 8
21037: PUSH
21038: LD_INT 9
21040: PUSH
21041: LD_INT 10
21043: PUSH
21044: LD_INT 11
21046: PUSH
21047: LD_INT 12
21049: PUSH
21050: LD_INT 14
21052: PUSH
21053: LD_INT 15
21055: PUSH
21056: LD_INT 16
21058: PUSH
21059: LD_INT 17
21061: PUSH
21062: LD_INT 18
21064: PUSH
21065: LD_INT 19
21067: PUSH
21068: LD_INT 20
21070: PUSH
21071: LD_INT 21
21073: PUSH
21074: LD_INT 22
21076: PUSH
21077: LD_INT 23
21079: PUSH
21080: LD_INT 24
21082: PUSH
21083: LD_INT 25
21085: PUSH
21086: LD_INT 26
21088: PUSH
21089: LD_INT 27
21091: PUSH
21092: LD_INT 28
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 31
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: LD_INT 33
21106: PUSH
21107: LD_INT 34
21109: PUSH
21110: LD_INT 36
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 101
21148: PUSH
21149: LD_INT 102
21151: PUSH
21152: LD_INT 103
21154: PUSH
21155: LD_INT 104
21157: PUSH
21158: LD_INT 105
21160: PUSH
21161: LD_INT 106
21163: PUSH
21164: LD_INT 107
21166: PUSH
21167: LD_INT 108
21169: PUSH
21170: LD_INT 109
21172: PUSH
21173: LD_INT 110
21175: PUSH
21176: LD_INT 111
21178: PUSH
21179: LD_INT 112
21181: PUSH
21182: LD_INT 113
21184: PUSH
21185: LD_INT 114
21187: PUSH
21188: LD_INT 116
21190: PUSH
21191: LD_INT 117
21193: PUSH
21194: LD_INT 118
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: ST_TO_ADDR
21220: GO 22459
21222: LD_INT 14
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21454
21230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21231: LD_ADDR_VAR 0 2
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: LD_INT 4
21247: PUSH
21248: LD_INT 5
21250: PUSH
21251: LD_INT 6
21253: PUSH
21254: LD_INT 7
21256: PUSH
21257: LD_INT 8
21259: PUSH
21260: LD_INT 9
21262: PUSH
21263: LD_INT 10
21265: PUSH
21266: LD_INT 11
21268: PUSH
21269: LD_INT 12
21271: PUSH
21272: LD_INT 13
21274: PUSH
21275: LD_INT 14
21277: PUSH
21278: LD_INT 15
21280: PUSH
21281: LD_INT 16
21283: PUSH
21284: LD_INT 17
21286: PUSH
21287: LD_INT 18
21289: PUSH
21290: LD_INT 19
21292: PUSH
21293: LD_INT 20
21295: PUSH
21296: LD_INT 21
21298: PUSH
21299: LD_INT 22
21301: PUSH
21302: LD_INT 23
21304: PUSH
21305: LD_INT 24
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 26
21313: PUSH
21314: LD_INT 27
21316: PUSH
21317: LD_INT 28
21319: PUSH
21320: LD_INT 29
21322: PUSH
21323: LD_INT 30
21325: PUSH
21326: LD_INT 31
21328: PUSH
21329: LD_INT 32
21331: PUSH
21332: LD_INT 33
21334: PUSH
21335: LD_INT 34
21337: PUSH
21338: LD_INT 36
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 101
21380: PUSH
21381: LD_INT 102
21383: PUSH
21384: LD_INT 103
21386: PUSH
21387: LD_INT 104
21389: PUSH
21390: LD_INT 105
21392: PUSH
21393: LD_INT 106
21395: PUSH
21396: LD_INT 107
21398: PUSH
21399: LD_INT 108
21401: PUSH
21402: LD_INT 109
21404: PUSH
21405: LD_INT 110
21407: PUSH
21408: LD_INT 111
21410: PUSH
21411: LD_INT 112
21413: PUSH
21414: LD_INT 113
21416: PUSH
21417: LD_INT 114
21419: PUSH
21420: LD_INT 116
21422: PUSH
21423: LD_INT 117
21425: PUSH
21426: LD_INT 118
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: ST_TO_ADDR
21452: GO 22459
21454: LD_INT 15
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21686
21462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21463: LD_ADDR_VAR 0 2
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: LD_INT 2
21473: PUSH
21474: LD_INT 3
21476: PUSH
21477: LD_INT 4
21479: PUSH
21480: LD_INT 5
21482: PUSH
21483: LD_INT 6
21485: PUSH
21486: LD_INT 7
21488: PUSH
21489: LD_INT 8
21491: PUSH
21492: LD_INT 9
21494: PUSH
21495: LD_INT 10
21497: PUSH
21498: LD_INT 11
21500: PUSH
21501: LD_INT 12
21503: PUSH
21504: LD_INT 13
21506: PUSH
21507: LD_INT 14
21509: PUSH
21510: LD_INT 15
21512: PUSH
21513: LD_INT 16
21515: PUSH
21516: LD_INT 17
21518: PUSH
21519: LD_INT 18
21521: PUSH
21522: LD_INT 19
21524: PUSH
21525: LD_INT 20
21527: PUSH
21528: LD_INT 21
21530: PUSH
21531: LD_INT 22
21533: PUSH
21534: LD_INT 23
21536: PUSH
21537: LD_INT 24
21539: PUSH
21540: LD_INT 25
21542: PUSH
21543: LD_INT 26
21545: PUSH
21546: LD_INT 27
21548: PUSH
21549: LD_INT 28
21551: PUSH
21552: LD_INT 29
21554: PUSH
21555: LD_INT 30
21557: PUSH
21558: LD_INT 31
21560: PUSH
21561: LD_INT 32
21563: PUSH
21564: LD_INT 33
21566: PUSH
21567: LD_INT 34
21569: PUSH
21570: LD_INT 36
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 101
21612: PUSH
21613: LD_INT 102
21615: PUSH
21616: LD_INT 103
21618: PUSH
21619: LD_INT 104
21621: PUSH
21622: LD_INT 105
21624: PUSH
21625: LD_INT 106
21627: PUSH
21628: LD_INT 107
21630: PUSH
21631: LD_INT 108
21633: PUSH
21634: LD_INT 109
21636: PUSH
21637: LD_INT 110
21639: PUSH
21640: LD_INT 111
21642: PUSH
21643: LD_INT 112
21645: PUSH
21646: LD_INT 113
21648: PUSH
21649: LD_INT 114
21651: PUSH
21652: LD_INT 116
21654: PUSH
21655: LD_INT 117
21657: PUSH
21658: LD_INT 118
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: ST_TO_ADDR
21684: GO 22459
21686: LD_INT 16
21688: DOUBLE
21689: EQUAL
21690: IFTRUE 21694
21692: GO 21830
21694: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21695: LD_ADDR_VAR 0 2
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: LD_INT 4
21705: PUSH
21706: LD_INT 5
21708: PUSH
21709: LD_INT 7
21711: PUSH
21712: LD_INT 11
21714: PUSH
21715: LD_INT 12
21717: PUSH
21718: LD_INT 15
21720: PUSH
21721: LD_INT 16
21723: PUSH
21724: LD_INT 20
21726: PUSH
21727: LD_INT 21
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_INT 23
21735: PUSH
21736: LD_INT 25
21738: PUSH
21739: LD_INT 26
21741: PUSH
21742: LD_INT 30
21744: PUSH
21745: LD_INT 31
21747: PUSH
21748: LD_INT 32
21750: PUSH
21751: LD_INT 33
21753: PUSH
21754: LD_INT 34
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 101
21780: PUSH
21781: LD_INT 102
21783: PUSH
21784: LD_INT 103
21786: PUSH
21787: LD_INT 106
21789: PUSH
21790: LD_INT 108
21792: PUSH
21793: LD_INT 112
21795: PUSH
21796: LD_INT 113
21798: PUSH
21799: LD_INT 114
21801: PUSH
21802: LD_INT 116
21804: PUSH
21805: LD_INT 117
21807: PUSH
21808: LD_INT 118
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: ST_TO_ADDR
21828: GO 22459
21830: LD_INT 17
21832: DOUBLE
21833: EQUAL
21834: IFTRUE 21838
21836: GO 22062
21838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21839: LD_ADDR_VAR 0 2
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: LD_INT 4
21855: PUSH
21856: LD_INT 5
21858: PUSH
21859: LD_INT 6
21861: PUSH
21862: LD_INT 7
21864: PUSH
21865: LD_INT 8
21867: PUSH
21868: LD_INT 9
21870: PUSH
21871: LD_INT 10
21873: PUSH
21874: LD_INT 11
21876: PUSH
21877: LD_INT 12
21879: PUSH
21880: LD_INT 13
21882: PUSH
21883: LD_INT 14
21885: PUSH
21886: LD_INT 15
21888: PUSH
21889: LD_INT 16
21891: PUSH
21892: LD_INT 17
21894: PUSH
21895: LD_INT 18
21897: PUSH
21898: LD_INT 19
21900: PUSH
21901: LD_INT 20
21903: PUSH
21904: LD_INT 21
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_INT 23
21912: PUSH
21913: LD_INT 24
21915: PUSH
21916: LD_INT 25
21918: PUSH
21919: LD_INT 26
21921: PUSH
21922: LD_INT 27
21924: PUSH
21925: LD_INT 28
21927: PUSH
21928: LD_INT 29
21930: PUSH
21931: LD_INT 30
21933: PUSH
21934: LD_INT 31
21936: PUSH
21937: LD_INT 32
21939: PUSH
21940: LD_INT 33
21942: PUSH
21943: LD_INT 34
21945: PUSH
21946: LD_INT 36
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 101
21988: PUSH
21989: LD_INT 102
21991: PUSH
21992: LD_INT 103
21994: PUSH
21995: LD_INT 104
21997: PUSH
21998: LD_INT 105
22000: PUSH
22001: LD_INT 106
22003: PUSH
22004: LD_INT 107
22006: PUSH
22007: LD_INT 108
22009: PUSH
22010: LD_INT 109
22012: PUSH
22013: LD_INT 110
22015: PUSH
22016: LD_INT 111
22018: PUSH
22019: LD_INT 112
22021: PUSH
22022: LD_INT 113
22024: PUSH
22025: LD_INT 114
22027: PUSH
22028: LD_INT 116
22030: PUSH
22031: LD_INT 117
22033: PUSH
22034: LD_INT 118
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: ST_TO_ADDR
22060: GO 22459
22062: LD_INT 18
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22070
22068: GO 22218
22070: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_INT 2
22078: PUSH
22079: LD_INT 4
22081: PUSH
22082: LD_INT 5
22084: PUSH
22085: LD_INT 7
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 26
22117: PUSH
22118: LD_INT 30
22120: PUSH
22121: LD_INT 31
22123: PUSH
22124: LD_INT 32
22126: PUSH
22127: LD_INT 33
22129: PUSH
22130: LD_INT 34
22132: PUSH
22133: LD_INT 35
22135: PUSH
22136: LD_INT 36
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 101
22164: PUSH
22165: LD_INT 102
22167: PUSH
22168: LD_INT 103
22170: PUSH
22171: LD_INT 106
22173: PUSH
22174: LD_INT 108
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 113
22182: PUSH
22183: LD_INT 114
22185: PUSH
22186: LD_INT 115
22188: PUSH
22189: LD_INT 116
22191: PUSH
22192: LD_INT 117
22194: PUSH
22195: LD_INT 118
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: ST_TO_ADDR
22216: GO 22459
22218: LD_INT 19
22220: DOUBLE
22221: EQUAL
22222: IFTRUE 22226
22224: GO 22458
22226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22227: LD_ADDR_VAR 0 2
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: LD_INT 2
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: LD_INT 4
22243: PUSH
22244: LD_INT 5
22246: PUSH
22247: LD_INT 6
22249: PUSH
22250: LD_INT 7
22252: PUSH
22253: LD_INT 8
22255: PUSH
22256: LD_INT 9
22258: PUSH
22259: LD_INT 10
22261: PUSH
22262: LD_INT 11
22264: PUSH
22265: LD_INT 12
22267: PUSH
22268: LD_INT 13
22270: PUSH
22271: LD_INT 14
22273: PUSH
22274: LD_INT 15
22276: PUSH
22277: LD_INT 16
22279: PUSH
22280: LD_INT 17
22282: PUSH
22283: LD_INT 18
22285: PUSH
22286: LD_INT 19
22288: PUSH
22289: LD_INT 20
22291: PUSH
22292: LD_INT 21
22294: PUSH
22295: LD_INT 22
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 24
22303: PUSH
22304: LD_INT 25
22306: PUSH
22307: LD_INT 26
22309: PUSH
22310: LD_INT 27
22312: PUSH
22313: LD_INT 28
22315: PUSH
22316: LD_INT 29
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 31
22324: PUSH
22325: LD_INT 32
22327: PUSH
22328: LD_INT 33
22330: PUSH
22331: LD_INT 34
22333: PUSH
22334: LD_INT 35
22336: PUSH
22337: LD_INT 36
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 101
22380: PUSH
22381: LD_INT 102
22383: PUSH
22384: LD_INT 103
22386: PUSH
22387: LD_INT 104
22389: PUSH
22390: LD_INT 105
22392: PUSH
22393: LD_INT 106
22395: PUSH
22396: LD_INT 107
22398: PUSH
22399: LD_INT 108
22401: PUSH
22402: LD_INT 109
22404: PUSH
22405: LD_INT 110
22407: PUSH
22408: LD_INT 111
22410: PUSH
22411: LD_INT 112
22413: PUSH
22414: LD_INT 113
22416: PUSH
22417: LD_INT 114
22419: PUSH
22420: LD_INT 115
22422: PUSH
22423: LD_INT 116
22425: PUSH
22426: LD_INT 117
22428: PUSH
22429: LD_INT 118
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: ST_TO_ADDR
22456: GO 22459
22458: POP
// end else
22459: GO 22690
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 3
22474: PUSH
22475: LD_INT 4
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 9
22492: PUSH
22493: LD_INT 10
22495: PUSH
22496: LD_INT 11
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: LD_INT 13
22504: PUSH
22505: LD_INT 14
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 17
22516: PUSH
22517: LD_INT 18
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 24
22537: PUSH
22538: LD_INT 25
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: LD_INT 27
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 29
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 31
22558: PUSH
22559: LD_INT 32
22561: PUSH
22562: LD_INT 33
22564: PUSH
22565: LD_INT 34
22567: PUSH
22568: LD_INT 35
22570: PUSH
22571: LD_INT 36
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 101
22614: PUSH
22615: LD_INT 102
22617: PUSH
22618: LD_INT 103
22620: PUSH
22621: LD_INT 104
22623: PUSH
22624: LD_INT 105
22626: PUSH
22627: LD_INT 106
22629: PUSH
22630: LD_INT 107
22632: PUSH
22633: LD_INT 108
22635: PUSH
22636: LD_INT 109
22638: PUSH
22639: LD_INT 110
22641: PUSH
22642: LD_INT 111
22644: PUSH
22645: LD_INT 112
22647: PUSH
22648: LD_INT 113
22650: PUSH
22651: LD_INT 114
22653: PUSH
22654: LD_INT 115
22656: PUSH
22657: LD_INT 116
22659: PUSH
22660: LD_INT 117
22662: PUSH
22663: LD_INT 118
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
// if result then
22690: LD_VAR 0 2
22694: IFFALSE 23480
// begin normal :=  ;
22696: LD_ADDR_VAR 0 5
22700: PUSH
22701: LD_STRING 
22703: ST_TO_ADDR
// hardcore :=  ;
22704: LD_ADDR_VAR 0 6
22708: PUSH
22709: LD_STRING 
22711: ST_TO_ADDR
// active :=  ;
22712: LD_ADDR_VAR 0 7
22716: PUSH
22717: LD_STRING 
22719: ST_TO_ADDR
// for i = 1 to normalCounter do
22720: LD_ADDR_VAR 0 8
22724: PUSH
22725: DOUBLE
22726: LD_INT 1
22728: DEC
22729: ST_TO_ADDR
22730: LD_EXP 53
22734: PUSH
22735: FOR_TO
22736: IFFALSE 22837
// begin tmp := 0 ;
22738: LD_ADDR_VAR 0 3
22742: PUSH
22743: LD_STRING 0
22745: ST_TO_ADDR
// if result [ 1 ] then
22746: LD_VAR 0 2
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: IFFALSE 22819
// if result [ 1 ] [ 1 ] = i then
22756: LD_VAR 0 2
22760: PUSH
22761: LD_INT 1
22763: ARRAY
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: PUSH
22769: LD_VAR 0 8
22773: EQUAL
22774: IFFALSE 22819
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22776: LD_ADDR_VAR 0 2
22780: PUSH
22781: LD_VAR 0 2
22785: PPUSH
22786: LD_INT 1
22788: PPUSH
22789: LD_VAR 0 2
22793: PUSH
22794: LD_INT 1
22796: ARRAY
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 3
22805: PPUSH
22806: CALL_OW 1
22810: ST_TO_ADDR
// tmp := 1 ;
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_STRING 1
22818: ST_TO_ADDR
// end ; normal := normal & tmp ;
22819: LD_ADDR_VAR 0 5
22823: PUSH
22824: LD_VAR 0 5
22828: PUSH
22829: LD_VAR 0 3
22833: STR
22834: ST_TO_ADDR
// end ;
22835: GO 22735
22837: POP
22838: POP
// for i = 1 to hardcoreCounter do
22839: LD_ADDR_VAR 0 8
22843: PUSH
22844: DOUBLE
22845: LD_INT 1
22847: DEC
22848: ST_TO_ADDR
22849: LD_EXP 54
22853: PUSH
22854: FOR_TO
22855: IFFALSE 22960
// begin tmp := 0 ;
22857: LD_ADDR_VAR 0 3
22861: PUSH
22862: LD_STRING 0
22864: ST_TO_ADDR
// if result [ 2 ] then
22865: LD_VAR 0 2
22869: PUSH
22870: LD_INT 2
22872: ARRAY
22873: IFFALSE 22942
// if result [ 2 ] [ 1 ] = 100 + i then
22875: LD_VAR 0 2
22879: PUSH
22880: LD_INT 2
22882: ARRAY
22883: PUSH
22884: LD_INT 1
22886: ARRAY
22887: PUSH
22888: LD_INT 100
22890: PUSH
22891: LD_VAR 0 8
22895: PLUS
22896: EQUAL
22897: IFFALSE 22942
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 2
22911: PPUSH
22912: LD_VAR 0 2
22916: PUSH
22917: LD_INT 2
22919: ARRAY
22920: PPUSH
22921: LD_INT 1
22923: PPUSH
22924: CALL_OW 3
22928: PPUSH
22929: CALL_OW 1
22933: ST_TO_ADDR
// tmp := 1 ;
22934: LD_ADDR_VAR 0 3
22938: PUSH
22939: LD_STRING 1
22941: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22942: LD_ADDR_VAR 0 6
22946: PUSH
22947: LD_VAR 0 6
22951: PUSH
22952: LD_VAR 0 3
22956: STR
22957: ST_TO_ADDR
// end ;
22958: GO 22854
22960: POP
22961: POP
// if isGameLoad then
22962: LD_VAR 0 1
22966: IFFALSE 23441
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22968: LD_ADDR_VAR 0 4
22972: PUSH
22973: LD_EXP 57
22977: PUSH
22978: LD_EXP 56
22982: PUSH
22983: LD_EXP 58
22987: PUSH
22988: LD_EXP 55
22992: PUSH
22993: LD_EXP 59
22997: PUSH
22998: LD_EXP 60
23002: PUSH
23003: LD_EXP 61
23007: PUSH
23008: LD_EXP 62
23012: PUSH
23013: LD_EXP 63
23017: PUSH
23018: LD_EXP 64
23022: PUSH
23023: LD_EXP 65
23027: PUSH
23028: LD_EXP 66
23032: PUSH
23033: LD_EXP 67
23037: PUSH
23038: LD_EXP 68
23042: PUSH
23043: LD_EXP 76
23047: PUSH
23048: LD_EXP 77
23052: PUSH
23053: LD_EXP 78
23057: PUSH
23058: LD_EXP 79
23062: PUSH
23063: LD_EXP 81
23067: PUSH
23068: LD_EXP 82
23072: PUSH
23073: LD_EXP 83
23077: PUSH
23078: LD_EXP 86
23082: PUSH
23083: LD_EXP 88
23087: PUSH
23088: LD_EXP 89
23092: PUSH
23093: LD_EXP 90
23097: PUSH
23098: LD_EXP 92
23102: PUSH
23103: LD_EXP 93
23107: PUSH
23108: LD_EXP 96
23112: PUSH
23113: LD_EXP 97
23117: PUSH
23118: LD_EXP 98
23122: PUSH
23123: LD_EXP 99
23127: PUSH
23128: LD_EXP 100
23132: PUSH
23133: LD_EXP 101
23137: PUSH
23138: LD_EXP 102
23142: PUSH
23143: LD_EXP 103
23147: PUSH
23148: LD_EXP 104
23152: PUSH
23153: LD_EXP 69
23157: PUSH
23158: LD_EXP 70
23162: PUSH
23163: LD_EXP 73
23167: PUSH
23168: LD_EXP 74
23172: PUSH
23173: LD_EXP 75
23177: PUSH
23178: LD_EXP 71
23182: PUSH
23183: LD_EXP 72
23187: PUSH
23188: LD_EXP 80
23192: PUSH
23193: LD_EXP 84
23197: PUSH
23198: LD_EXP 85
23202: PUSH
23203: LD_EXP 87
23207: PUSH
23208: LD_EXP 91
23212: PUSH
23213: LD_EXP 94
23217: PUSH
23218: LD_EXP 95
23222: PUSH
23223: LD_EXP 105
23227: PUSH
23228: LD_EXP 106
23232: PUSH
23233: LD_EXP 107
23237: PUSH
23238: LD_EXP 108
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: ST_TO_ADDR
// tmp :=  ;
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_STRING 
23306: ST_TO_ADDR
// for i = 1 to normalCounter do
23307: LD_ADDR_VAR 0 8
23311: PUSH
23312: DOUBLE
23313: LD_INT 1
23315: DEC
23316: ST_TO_ADDR
23317: LD_EXP 53
23321: PUSH
23322: FOR_TO
23323: IFFALSE 23359
// begin if flags [ i ] then
23325: LD_VAR 0 4
23329: PUSH
23330: LD_VAR 0 8
23334: ARRAY
23335: IFFALSE 23357
// tmp := tmp & i & ; ;
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_VAR 0 3
23346: PUSH
23347: LD_VAR 0 8
23351: STR
23352: PUSH
23353: LD_STRING ;
23355: STR
23356: ST_TO_ADDR
// end ;
23357: GO 23322
23359: POP
23360: POP
// for i = 1 to hardcoreCounter do
23361: LD_ADDR_VAR 0 8
23365: PUSH
23366: DOUBLE
23367: LD_INT 1
23369: DEC
23370: ST_TO_ADDR
23371: LD_EXP 54
23375: PUSH
23376: FOR_TO
23377: IFFALSE 23423
// begin if flags [ normalCounter + i ] then
23379: LD_VAR 0 4
23383: PUSH
23384: LD_EXP 53
23388: PUSH
23389: LD_VAR 0 8
23393: PLUS
23394: ARRAY
23395: IFFALSE 23421
// tmp := tmp & ( 100 + i ) & ; ;
23397: LD_ADDR_VAR 0 3
23401: PUSH
23402: LD_VAR 0 3
23406: PUSH
23407: LD_INT 100
23409: PUSH
23410: LD_VAR 0 8
23414: PLUS
23415: STR
23416: PUSH
23417: LD_STRING ;
23419: STR
23420: ST_TO_ADDR
// end ;
23421: GO 23376
23423: POP
23424: POP
// if tmp then
23425: LD_VAR 0 3
23429: IFFALSE 23441
// active := tmp ;
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_VAR 0 3
23440: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23441: LD_STRING getStreamItemsFromMission("
23443: PUSH
23444: LD_VAR 0 5
23448: STR
23449: PUSH
23450: LD_STRING ","
23452: STR
23453: PUSH
23454: LD_VAR 0 6
23458: STR
23459: PUSH
23460: LD_STRING ","
23462: STR
23463: PUSH
23464: LD_VAR 0 7
23468: STR
23469: PUSH
23470: LD_STRING ")
23472: STR
23473: PPUSH
23474: CALL_OW 559
// end else
23478: GO 23487
// ToLua ( getStreamItemsFromMission("","","") ) ;
23480: LD_STRING getStreamItemsFromMission("","","")
23482: PPUSH
23483: CALL_OW 559
// end ;
23487: LD_VAR 0 2
23491: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23492: LD_EXP 52
23496: PUSH
23497: LD_EXP 57
23501: AND
23502: IFFALSE 23626
23504: GO 23506
23506: DISABLE
23507: LD_INT 0
23509: PPUSH
23510: PPUSH
// begin enable ;
23511: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_INT 22
23519: PUSH
23520: LD_OWVAR 2
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: PUSH
23532: LD_INT 34
23534: PUSH
23535: LD_INT 7
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 34
23544: PUSH
23545: LD_INT 45
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 34
23554: PUSH
23555: LD_INT 28
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 34
23564: PUSH
23565: LD_INT 47
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PPUSH
23583: CALL_OW 69
23587: ST_TO_ADDR
// if not tmp then
23588: LD_VAR 0 2
23592: NOT
23593: IFFALSE 23597
// exit ;
23595: GO 23626
// for i in tmp do
23597: LD_ADDR_VAR 0 1
23601: PUSH
23602: LD_VAR 0 2
23606: PUSH
23607: FOR_IN
23608: IFFALSE 23624
// begin SetLives ( i , 0 ) ;
23610: LD_VAR 0 1
23614: PPUSH
23615: LD_INT 0
23617: PPUSH
23618: CALL_OW 234
// end ;
23622: GO 23607
23624: POP
23625: POP
// end ;
23626: PPOPN 2
23628: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23629: LD_EXP 52
23633: PUSH
23634: LD_EXP 58
23638: AND
23639: IFFALSE 23723
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
// begin enable ;
23648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_OWVAR 2
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 32
23668: PUSH
23669: LD_INT 3
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PPUSH
23680: CALL_OW 69
23684: ST_TO_ADDR
// if not tmp then
23685: LD_VAR 0 2
23689: NOT
23690: IFFALSE 23694
// exit ;
23692: GO 23723
// for i in tmp do
23694: LD_ADDR_VAR 0 1
23698: PUSH
23699: LD_VAR 0 2
23703: PUSH
23704: FOR_IN
23705: IFFALSE 23721
// begin SetLives ( i , 0 ) ;
23707: LD_VAR 0 1
23711: PPUSH
23712: LD_INT 0
23714: PPUSH
23715: CALL_OW 234
// end ;
23719: GO 23704
23721: POP
23722: POP
// end ;
23723: PPOPN 2
23725: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23726: LD_EXP 52
23730: PUSH
23731: LD_EXP 55
23735: AND
23736: IFFALSE 23829
23738: GO 23740
23740: DISABLE
23741: LD_INT 0
23743: PPUSH
// begin enable ;
23744: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23745: LD_ADDR_VAR 0 1
23749: PUSH
23750: LD_INT 22
23752: PUSH
23753: LD_OWVAR 2
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 25
23767: PUSH
23768: LD_INT 5
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 25
23777: PUSH
23778: LD_INT 9
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 25
23787: PUSH
23788: LD_INT 8
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PPUSH
23805: CALL_OW 69
23809: PUSH
23810: FOR_IN
23811: IFFALSE 23827
// begin SetClass ( i , 1 ) ;
23813: LD_VAR 0 1
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 336
// end ;
23825: GO 23810
23827: POP
23828: POP
// end ;
23829: PPOPN 1
23831: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23832: LD_EXP 52
23836: PUSH
23837: LD_EXP 56
23841: AND
23842: PUSH
23843: LD_OWVAR 65
23847: PUSH
23848: LD_INT 7
23850: LESS
23851: AND
23852: IFFALSE 23866
23854: GO 23856
23856: DISABLE
// begin enable ;
23857: ENABLE
// game_speed := 7 ;
23858: LD_ADDR_OWVAR 65
23862: PUSH
23863: LD_INT 7
23865: ST_TO_ADDR
// end ;
23866: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23867: LD_EXP 52
23871: PUSH
23872: LD_EXP 59
23876: AND
23877: IFFALSE 24079
23879: GO 23881
23881: DISABLE
23882: LD_INT 0
23884: PPUSH
23885: PPUSH
23886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23887: LD_ADDR_VAR 0 3
23891: PUSH
23892: LD_INT 81
23894: PUSH
23895: LD_OWVAR 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 21
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PPUSH
23918: CALL_OW 69
23922: ST_TO_ADDR
// if not tmp then
23923: LD_VAR 0 3
23927: NOT
23928: IFFALSE 23932
// exit ;
23930: GO 24079
// if tmp > 5 then
23932: LD_VAR 0 3
23936: PUSH
23937: LD_INT 5
23939: GREATER
23940: IFFALSE 23952
// k := 5 else
23942: LD_ADDR_VAR 0 2
23946: PUSH
23947: LD_INT 5
23949: ST_TO_ADDR
23950: GO 23962
// k := tmp ;
23952: LD_ADDR_VAR 0 2
23956: PUSH
23957: LD_VAR 0 3
23961: ST_TO_ADDR
// for i := 1 to k do
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: DOUBLE
23968: LD_INT 1
23970: DEC
23971: ST_TO_ADDR
23972: LD_VAR 0 2
23976: PUSH
23977: FOR_TO
23978: IFFALSE 24077
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23980: LD_VAR 0 3
23984: PUSH
23985: LD_VAR 0 1
23989: ARRAY
23990: PPUSH
23991: LD_VAR 0 1
23995: PUSH
23996: LD_INT 4
23998: MOD
23999: PUSH
24000: LD_INT 1
24002: PLUS
24003: PPUSH
24004: CALL_OW 259
24008: PUSH
24009: LD_INT 10
24011: LESS
24012: IFFALSE 24075
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24014: LD_VAR 0 3
24018: PUSH
24019: LD_VAR 0 1
24023: ARRAY
24024: PPUSH
24025: LD_VAR 0 1
24029: PUSH
24030: LD_INT 4
24032: MOD
24033: PUSH
24034: LD_INT 1
24036: PLUS
24037: PPUSH
24038: LD_VAR 0 3
24042: PUSH
24043: LD_VAR 0 1
24047: ARRAY
24048: PPUSH
24049: LD_VAR 0 1
24053: PUSH
24054: LD_INT 4
24056: MOD
24057: PUSH
24058: LD_INT 1
24060: PLUS
24061: PPUSH
24062: CALL_OW 259
24066: PUSH
24067: LD_INT 1
24069: PLUS
24070: PPUSH
24071: CALL_OW 237
24075: GO 23977
24077: POP
24078: POP
// end ;
24079: PPOPN 3
24081: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24082: LD_EXP 52
24086: PUSH
24087: LD_EXP 60
24091: AND
24092: IFFALSE 24112
24094: GO 24096
24096: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24097: LD_INT 4
24099: PPUSH
24100: LD_OWVAR 2
24104: PPUSH
24105: LD_INT 0
24107: PPUSH
24108: CALL_OW 324
24112: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24113: LD_EXP 52
24117: PUSH
24118: LD_EXP 89
24122: AND
24123: IFFALSE 24143
24125: GO 24127
24127: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24128: LD_INT 19
24130: PPUSH
24131: LD_OWVAR 2
24135: PPUSH
24136: LD_INT 0
24138: PPUSH
24139: CALL_OW 324
24143: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24144: LD_EXP 52
24148: PUSH
24149: LD_EXP 61
24153: AND
24154: IFFALSE 24256
24156: GO 24158
24158: DISABLE
24159: LD_INT 0
24161: PPUSH
24162: PPUSH
// begin enable ;
24163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24164: LD_ADDR_VAR 0 2
24168: PUSH
24169: LD_INT 22
24171: PUSH
24172: LD_OWVAR 2
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 34
24186: PUSH
24187: LD_INT 11
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 34
24196: PUSH
24197: LD_INT 30
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PPUSH
24213: CALL_OW 69
24217: ST_TO_ADDR
// if not tmp then
24218: LD_VAR 0 2
24222: NOT
24223: IFFALSE 24227
// exit ;
24225: GO 24256
// for i in tmp do
24227: LD_ADDR_VAR 0 1
24231: PUSH
24232: LD_VAR 0 2
24236: PUSH
24237: FOR_IN
24238: IFFALSE 24254
// begin SetLives ( i , 0 ) ;
24240: LD_VAR 0 1
24244: PPUSH
24245: LD_INT 0
24247: PPUSH
24248: CALL_OW 234
// end ;
24252: GO 24237
24254: POP
24255: POP
// end ;
24256: PPOPN 2
24258: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24259: LD_EXP 52
24263: PUSH
24264: LD_EXP 62
24268: AND
24269: IFFALSE 24289
24271: GO 24273
24273: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24274: LD_INT 32
24276: PPUSH
24277: LD_OWVAR 2
24281: PPUSH
24282: LD_INT 0
24284: PPUSH
24285: CALL_OW 324
24289: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24290: LD_EXP 52
24294: PUSH
24295: LD_EXP 63
24299: AND
24300: IFFALSE 24481
24302: GO 24304
24304: DISABLE
24305: LD_INT 0
24307: PPUSH
24308: PPUSH
24309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24310: LD_ADDR_VAR 0 2
24314: PUSH
24315: LD_INT 22
24317: PUSH
24318: LD_OWVAR 2
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 33
24329: PUSH
24330: LD_INT 3
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PPUSH
24341: CALL_OW 69
24345: ST_TO_ADDR
// if not tmp then
24346: LD_VAR 0 2
24350: NOT
24351: IFFALSE 24355
// exit ;
24353: GO 24481
// side := 0 ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_INT 0
24362: ST_TO_ADDR
// for i := 1 to 8 do
24363: LD_ADDR_VAR 0 1
24367: PUSH
24368: DOUBLE
24369: LD_INT 1
24371: DEC
24372: ST_TO_ADDR
24373: LD_INT 8
24375: PUSH
24376: FOR_TO
24377: IFFALSE 24425
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24379: LD_OWVAR 2
24383: PUSH
24384: LD_VAR 0 1
24388: NONEQUAL
24389: PUSH
24390: LD_OWVAR 2
24394: PPUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 81
24404: PUSH
24405: LD_INT 2
24407: EQUAL
24408: AND
24409: IFFALSE 24423
// begin side := i ;
24411: LD_ADDR_VAR 0 3
24415: PUSH
24416: LD_VAR 0 1
24420: ST_TO_ADDR
// break ;
24421: GO 24425
// end ;
24423: GO 24376
24425: POP
24426: POP
// if not side then
24427: LD_VAR 0 3
24431: NOT
24432: IFFALSE 24436
// exit ;
24434: GO 24481
// for i := 1 to tmp do
24436: LD_ADDR_VAR 0 1
24440: PUSH
24441: DOUBLE
24442: LD_INT 1
24444: DEC
24445: ST_TO_ADDR
24446: LD_VAR 0 2
24450: PUSH
24451: FOR_TO
24452: IFFALSE 24479
// if Prob ( 60 ) then
24454: LD_INT 60
24456: PPUSH
24457: CALL_OW 13
24461: IFFALSE 24477
// SetSide ( i , side ) ;
24463: LD_VAR 0 1
24467: PPUSH
24468: LD_VAR 0 3
24472: PPUSH
24473: CALL_OW 235
24477: GO 24451
24479: POP
24480: POP
// end ;
24481: PPOPN 3
24483: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24484: LD_EXP 52
24488: PUSH
24489: LD_EXP 65
24493: AND
24494: IFFALSE 24613
24496: GO 24498
24498: DISABLE
24499: LD_INT 0
24501: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_INT 22
24509: PUSH
24510: LD_OWVAR 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 21
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: LD_INT 23
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: PPUSH
24551: CALL_OW 69
24555: PUSH
24556: FOR_IN
24557: IFFALSE 24611
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24559: LD_VAR 0 1
24563: PPUSH
24564: CALL_OW 257
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: LD_INT 4
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: IN
24587: IFFALSE 24609
// SetClass ( un , rand ( 1 , 4 ) ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_INT 1
24596: PPUSH
24597: LD_INT 4
24599: PPUSH
24600: CALL_OW 12
24604: PPUSH
24605: CALL_OW 336
24609: GO 24556
24611: POP
24612: POP
// end ;
24613: PPOPN 1
24615: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24616: LD_EXP 52
24620: PUSH
24621: LD_EXP 64
24625: AND
24626: IFFALSE 24705
24628: GO 24630
24630: DISABLE
24631: LD_INT 0
24633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24634: LD_ADDR_VAR 0 1
24638: PUSH
24639: LD_INT 22
24641: PUSH
24642: LD_OWVAR 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 21
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 69
24669: ST_TO_ADDR
// if not tmp then
24670: LD_VAR 0 1
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24679: LD_VAR 0 1
24683: PUSH
24684: LD_INT 1
24686: PPUSH
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 12
24696: ARRAY
24697: PPUSH
24698: LD_INT 100
24700: PPUSH
24701: CALL_OW 234
// end ;
24705: PPOPN 1
24707: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24708: LD_EXP 52
24712: PUSH
24713: LD_EXP 66
24717: AND
24718: IFFALSE 24816
24720: GO 24722
24722: DISABLE
24723: LD_INT 0
24725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24726: LD_ADDR_VAR 0 1
24730: PUSH
24731: LD_INT 22
24733: PUSH
24734: LD_OWVAR 2
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 21
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PPUSH
24757: CALL_OW 69
24761: ST_TO_ADDR
// if not tmp then
24762: LD_VAR 0 1
24766: NOT
24767: IFFALSE 24771
// exit ;
24769: GO 24816
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24771: LD_VAR 0 1
24775: PUSH
24776: LD_INT 1
24778: PPUSH
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL_OW 12
24788: ARRAY
24789: PPUSH
24790: LD_INT 1
24792: PPUSH
24793: LD_INT 4
24795: PPUSH
24796: CALL_OW 12
24800: PPUSH
24801: LD_INT 3000
24803: PPUSH
24804: LD_INT 9000
24806: PPUSH
24807: CALL_OW 12
24811: PPUSH
24812: CALL_OW 492
// end ;
24816: PPOPN 1
24818: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24819: LD_EXP 52
24823: PUSH
24824: LD_EXP 67
24828: AND
24829: IFFALSE 24849
24831: GO 24833
24833: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24834: LD_INT 1
24836: PPUSH
24837: LD_OWVAR 2
24841: PPUSH
24842: LD_INT 0
24844: PPUSH
24845: CALL_OW 324
24849: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24850: LD_EXP 52
24854: PUSH
24855: LD_EXP 68
24859: AND
24860: IFFALSE 24943
24862: GO 24864
24864: DISABLE
24865: LD_INT 0
24867: PPUSH
24868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24869: LD_ADDR_VAR 0 2
24873: PUSH
24874: LD_INT 22
24876: PUSH
24877: LD_OWVAR 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 21
24888: PUSH
24889: LD_INT 3
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: CALL_OW 69
24904: ST_TO_ADDR
// if not tmp then
24905: LD_VAR 0 2
24909: NOT
24910: IFFALSE 24914
// exit ;
24912: GO 24943
// for i in tmp do
24914: LD_ADDR_VAR 0 1
24918: PUSH
24919: LD_VAR 0 2
24923: PUSH
24924: FOR_IN
24925: IFFALSE 24941
// SetBLevel ( i , 10 ) ;
24927: LD_VAR 0 1
24931: PPUSH
24932: LD_INT 10
24934: PPUSH
24935: CALL_OW 241
24939: GO 24924
24941: POP
24942: POP
// end ;
24943: PPOPN 2
24945: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24946: LD_EXP 52
24950: PUSH
24951: LD_EXP 69
24955: AND
24956: IFFALSE 25067
24958: GO 24960
24960: DISABLE
24961: LD_INT 0
24963: PPUSH
24964: PPUSH
24965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24966: LD_ADDR_VAR 0 3
24970: PUSH
24971: LD_INT 22
24973: PUSH
24974: LD_OWVAR 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 25
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PPUSH
24997: CALL_OW 69
25001: ST_TO_ADDR
// if not tmp then
25002: LD_VAR 0 3
25006: NOT
25007: IFFALSE 25011
// exit ;
25009: GO 25067
// un := tmp [ rand ( 1 , tmp ) ] ;
25011: LD_ADDR_VAR 0 2
25015: PUSH
25016: LD_VAR 0 3
25020: PUSH
25021: LD_INT 1
25023: PPUSH
25024: LD_VAR 0 3
25028: PPUSH
25029: CALL_OW 12
25033: ARRAY
25034: ST_TO_ADDR
// if Crawls ( un ) then
25035: LD_VAR 0 2
25039: PPUSH
25040: CALL_OW 318
25044: IFFALSE 25055
// ComWalk ( un ) ;
25046: LD_VAR 0 2
25050: PPUSH
25051: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25055: LD_VAR 0 2
25059: PPUSH
25060: LD_INT 5
25062: PPUSH
25063: CALL_OW 336
// end ;
25067: PPOPN 3
25069: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25070: LD_EXP 52
25074: PUSH
25075: LD_EXP 70
25079: AND
25080: PUSH
25081: LD_OWVAR 67
25085: PUSH
25086: LD_INT 4
25088: LESS
25089: AND
25090: IFFALSE 25109
25092: GO 25094
25094: DISABLE
// begin Difficulty := Difficulty + 1 ;
25095: LD_ADDR_OWVAR 67
25099: PUSH
25100: LD_OWVAR 67
25104: PUSH
25105: LD_INT 1
25107: PLUS
25108: ST_TO_ADDR
// end ;
25109: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25110: LD_EXP 52
25114: PUSH
25115: LD_EXP 71
25119: AND
25120: IFFALSE 25223
25122: GO 25124
25124: DISABLE
25125: LD_INT 0
25127: PPUSH
// begin for i := 1 to 5 do
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_INT 5
25140: PUSH
25141: FOR_TO
25142: IFFALSE 25221
// begin uc_nation := nation_nature ;
25144: LD_ADDR_OWVAR 21
25148: PUSH
25149: LD_INT 0
25151: ST_TO_ADDR
// uc_side := 0 ;
25152: LD_ADDR_OWVAR 20
25156: PUSH
25157: LD_INT 0
25159: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25160: LD_ADDR_OWVAR 29
25164: PUSH
25165: LD_INT 12
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: ST_TO_ADDR
// hc_agressivity := 20 ;
25175: LD_ADDR_OWVAR 35
25179: PUSH
25180: LD_INT 20
25182: ST_TO_ADDR
// hc_class := class_tiger ;
25183: LD_ADDR_OWVAR 28
25187: PUSH
25188: LD_INT 14
25190: ST_TO_ADDR
// hc_gallery :=  ;
25191: LD_ADDR_OWVAR 33
25195: PUSH
25196: LD_STRING 
25198: ST_TO_ADDR
// hc_name :=  ;
25199: LD_ADDR_OWVAR 26
25203: PUSH
25204: LD_STRING 
25206: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25207: CALL_OW 44
25211: PPUSH
25212: LD_INT 0
25214: PPUSH
25215: CALL_OW 51
// end ;
25219: GO 25141
25221: POP
25222: POP
// end ;
25223: PPOPN 1
25225: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25226: LD_EXP 52
25230: PUSH
25231: LD_EXP 72
25235: AND
25236: IFFALSE 25245
25238: GO 25240
25240: DISABLE
// StreamSibBomb ;
25241: CALL 25246 0 0
25245: END
// export function StreamSibBomb ; var i , x , y ; begin
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
// result := false ;
25252: LD_ADDR_VAR 0 1
25256: PUSH
25257: LD_INT 0
25259: ST_TO_ADDR
// for i := 1 to 16 do
25260: LD_ADDR_VAR 0 2
25264: PUSH
25265: DOUBLE
25266: LD_INT 1
25268: DEC
25269: ST_TO_ADDR
25270: LD_INT 16
25272: PUSH
25273: FOR_TO
25274: IFFALSE 25473
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_INT 10
25283: PUSH
25284: LD_INT 20
25286: PUSH
25287: LD_INT 30
25289: PUSH
25290: LD_INT 40
25292: PUSH
25293: LD_INT 50
25295: PUSH
25296: LD_INT 60
25298: PUSH
25299: LD_INT 70
25301: PUSH
25302: LD_INT 80
25304: PUSH
25305: LD_INT 90
25307: PUSH
25308: LD_INT 100
25310: PUSH
25311: LD_INT 110
25313: PUSH
25314: LD_INT 120
25316: PUSH
25317: LD_INT 130
25319: PUSH
25320: LD_INT 140
25322: PUSH
25323: LD_INT 150
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PPUSH
25346: LD_INT 15
25348: PPUSH
25349: CALL_OW 12
25353: ARRAY
25354: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25355: LD_ADDR_VAR 0 4
25359: PUSH
25360: LD_INT 10
25362: PUSH
25363: LD_INT 20
25365: PUSH
25366: LD_INT 30
25368: PUSH
25369: LD_INT 40
25371: PUSH
25372: LD_INT 50
25374: PUSH
25375: LD_INT 60
25377: PUSH
25378: LD_INT 70
25380: PUSH
25381: LD_INT 80
25383: PUSH
25384: LD_INT 90
25386: PUSH
25387: LD_INT 100
25389: PUSH
25390: LD_INT 110
25392: PUSH
25393: LD_INT 120
25395: PUSH
25396: LD_INT 130
25398: PUSH
25399: LD_INT 140
25401: PUSH
25402: LD_INT 150
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PPUSH
25425: LD_INT 15
25427: PPUSH
25428: CALL_OW 12
25432: ARRAY
25433: ST_TO_ADDR
// if ValidHex ( x , y ) then
25434: LD_VAR 0 3
25438: PPUSH
25439: LD_VAR 0 4
25443: PPUSH
25444: CALL_OW 488
25448: IFFALSE 25471
// begin result := [ x , y ] ;
25450: LD_ADDR_VAR 0 1
25454: PUSH
25455: LD_VAR 0 3
25459: PUSH
25460: LD_VAR 0 4
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: ST_TO_ADDR
// break ;
25469: GO 25473
// end ; end ;
25471: GO 25273
25473: POP
25474: POP
// if result then
25475: LD_VAR 0 1
25479: IFFALSE 25539
// begin ToLua ( playSibBomb() ) ;
25481: LD_STRING playSibBomb()
25483: PPUSH
25484: CALL_OW 559
// wait ( 0 0$14 ) ;
25488: LD_INT 490
25490: PPUSH
25491: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25495: LD_VAR 0 1
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: PPUSH
25504: LD_VAR 0 1
25508: PUSH
25509: LD_INT 2
25511: ARRAY
25512: PPUSH
25513: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25517: LD_VAR 0 1
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: PPUSH
25526: LD_VAR 0 1
25530: PUSH
25531: LD_INT 2
25533: ARRAY
25534: PPUSH
25535: CALL_OW 429
// end ; end ;
25539: LD_VAR 0 1
25543: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25544: LD_EXP 52
25548: PUSH
25549: LD_EXP 74
25553: AND
25554: IFFALSE 25566
25556: GO 25558
25558: DISABLE
// YouLost (  ) ;
25559: LD_STRING 
25561: PPUSH
25562: CALL_OW 104
25566: END
// every 0 0$1 trigger StreamModeActive and sFog do
25567: LD_EXP 52
25571: PUSH
25572: LD_EXP 73
25576: AND
25577: IFFALSE 25591
25579: GO 25581
25581: DISABLE
// FogOff ( your_side ) ;
25582: LD_OWVAR 2
25586: PPUSH
25587: CALL_OW 344
25591: END
// every 0 0$1 trigger StreamModeActive and sSun do
25592: LD_EXP 52
25596: PUSH
25597: LD_EXP 75
25601: AND
25602: IFFALSE 25630
25604: GO 25606
25606: DISABLE
// begin solar_recharge_percent := 0 ;
25607: LD_ADDR_OWVAR 79
25611: PUSH
25612: LD_INT 0
25614: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25615: LD_INT 10500
25617: PPUSH
25618: CALL_OW 67
// solar_recharge_percent := 100 ;
25622: LD_ADDR_OWVAR 79
25626: PUSH
25627: LD_INT 100
25629: ST_TO_ADDR
// end ;
25630: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25631: LD_EXP 52
25635: PUSH
25636: LD_EXP 76
25640: AND
25641: IFFALSE 25880
25643: GO 25645
25645: DISABLE
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
25650: PPUSH
// begin tmp := [ ] ;
25651: LD_ADDR_VAR 0 3
25655: PUSH
25656: EMPTY
25657: ST_TO_ADDR
// for i := 1 to 6 do
25658: LD_ADDR_VAR 0 1
25662: PUSH
25663: DOUBLE
25664: LD_INT 1
25666: DEC
25667: ST_TO_ADDR
25668: LD_INT 6
25670: PUSH
25671: FOR_TO
25672: IFFALSE 25777
// begin uc_nation := nation_nature ;
25674: LD_ADDR_OWVAR 21
25678: PUSH
25679: LD_INT 0
25681: ST_TO_ADDR
// uc_side := 0 ;
25682: LD_ADDR_OWVAR 20
25686: PUSH
25687: LD_INT 0
25689: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25690: LD_ADDR_OWVAR 29
25694: PUSH
25695: LD_INT 12
25697: PUSH
25698: LD_INT 12
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: ST_TO_ADDR
// hc_agressivity := 20 ;
25705: LD_ADDR_OWVAR 35
25709: PUSH
25710: LD_INT 20
25712: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25713: LD_ADDR_OWVAR 28
25717: PUSH
25718: LD_INT 17
25720: ST_TO_ADDR
// hc_gallery :=  ;
25721: LD_ADDR_OWVAR 33
25725: PUSH
25726: LD_STRING 
25728: ST_TO_ADDR
// hc_name :=  ;
25729: LD_ADDR_OWVAR 26
25733: PUSH
25734: LD_STRING 
25736: ST_TO_ADDR
// un := CreateHuman ;
25737: LD_ADDR_VAR 0 2
25741: PUSH
25742: CALL_OW 44
25746: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25747: LD_VAR 0 2
25751: PPUSH
25752: LD_INT 1
25754: PPUSH
25755: CALL_OW 51
// tmp := tmp ^ un ;
25759: LD_ADDR_VAR 0 3
25763: PUSH
25764: LD_VAR 0 3
25768: PUSH
25769: LD_VAR 0 2
25773: ADD
25774: ST_TO_ADDR
// end ;
25775: GO 25671
25777: POP
25778: POP
// repeat wait ( 0 0$1 ) ;
25779: LD_INT 35
25781: PPUSH
25782: CALL_OW 67
// for un in tmp do
25786: LD_ADDR_VAR 0 2
25790: PUSH
25791: LD_VAR 0 3
25795: PUSH
25796: FOR_IN
25797: IFFALSE 25871
// begin if IsDead ( un ) then
25799: LD_VAR 0 2
25803: PPUSH
25804: CALL_OW 301
25808: IFFALSE 25828
// begin tmp := tmp diff un ;
25810: LD_ADDR_VAR 0 3
25814: PUSH
25815: LD_VAR 0 3
25819: PUSH
25820: LD_VAR 0 2
25824: DIFF
25825: ST_TO_ADDR
// continue ;
25826: GO 25796
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25828: LD_VAR 0 2
25832: PPUSH
25833: LD_INT 3
25835: PUSH
25836: LD_INT 22
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: PPUSH
25855: LD_VAR 0 2
25859: PPUSH
25860: CALL_OW 74
25864: PPUSH
25865: CALL_OW 115
// end ;
25869: GO 25796
25871: POP
25872: POP
// until not tmp ;
25873: LD_VAR 0 3
25877: NOT
25878: IFFALSE 25779
// end ;
25880: PPOPN 3
25882: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25883: LD_EXP 52
25887: PUSH
25888: LD_EXP 77
25892: AND
25893: IFFALSE 25947
25895: GO 25897
25897: DISABLE
// begin ToLua ( displayTroll(); ) ;
25898: LD_STRING displayTroll();
25900: PPUSH
25901: CALL_OW 559
// wait ( 3 3$00 ) ;
25905: LD_INT 6300
25907: PPUSH
25908: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25912: LD_STRING hideTroll();
25914: PPUSH
25915: CALL_OW 559
// wait ( 1 1$00 ) ;
25919: LD_INT 2100
25921: PPUSH
25922: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25926: LD_STRING displayTroll();
25928: PPUSH
25929: CALL_OW 559
// wait ( 1 1$00 ) ;
25933: LD_INT 2100
25935: PPUSH
25936: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25940: LD_STRING hideTroll();
25942: PPUSH
25943: CALL_OW 559
// end ;
25947: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25948: LD_EXP 52
25952: PUSH
25953: LD_EXP 78
25957: AND
25958: IFFALSE 26021
25960: GO 25962
25962: DISABLE
25963: LD_INT 0
25965: PPUSH
// begin p := 0 ;
25966: LD_ADDR_VAR 0 1
25970: PUSH
25971: LD_INT 0
25973: ST_TO_ADDR
// repeat game_speed := 1 ;
25974: LD_ADDR_OWVAR 65
25978: PUSH
25979: LD_INT 1
25981: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25982: LD_INT 35
25984: PPUSH
25985: CALL_OW 67
// p := p + 1 ;
25989: LD_ADDR_VAR 0 1
25993: PUSH
25994: LD_VAR 0 1
25998: PUSH
25999: LD_INT 1
26001: PLUS
26002: ST_TO_ADDR
// until p >= 60 ;
26003: LD_VAR 0 1
26007: PUSH
26008: LD_INT 60
26010: GREATEREQUAL
26011: IFFALSE 25974
// game_speed := 4 ;
26013: LD_ADDR_OWVAR 65
26017: PUSH
26018: LD_INT 4
26020: ST_TO_ADDR
// end ;
26021: PPOPN 1
26023: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26024: LD_EXP 52
26028: PUSH
26029: LD_EXP 79
26033: AND
26034: IFFALSE 26180
26036: GO 26038
26038: DISABLE
26039: LD_INT 0
26041: PPUSH
26042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26043: LD_ADDR_VAR 0 1
26047: PUSH
26048: LD_INT 22
26050: PUSH
26051: LD_OWVAR 2
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 30
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 30
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL_OW 69
26096: ST_TO_ADDR
// if not depot then
26097: LD_VAR 0 1
26101: NOT
26102: IFFALSE 26106
// exit ;
26104: GO 26180
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26106: LD_ADDR_VAR 0 2
26110: PUSH
26111: LD_VAR 0 1
26115: PUSH
26116: LD_INT 1
26118: PPUSH
26119: LD_VAR 0 1
26123: PPUSH
26124: CALL_OW 12
26128: ARRAY
26129: PPUSH
26130: CALL_OW 274
26134: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_INT 1
26142: PPUSH
26143: LD_INT 0
26145: PPUSH
26146: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26150: LD_VAR 0 2
26154: PPUSH
26155: LD_INT 2
26157: PPUSH
26158: LD_INT 0
26160: PPUSH
26161: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26165: LD_VAR 0 2
26169: PPUSH
26170: LD_INT 3
26172: PPUSH
26173: LD_INT 0
26175: PPUSH
26176: CALL_OW 277
// end ;
26180: PPOPN 2
26182: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26183: LD_EXP 52
26187: PUSH
26188: LD_EXP 80
26192: AND
26193: IFFALSE 26290
26195: GO 26197
26197: DISABLE
26198: LD_INT 0
26200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26201: LD_ADDR_VAR 0 1
26205: PUSH
26206: LD_INT 22
26208: PUSH
26209: LD_OWVAR 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: LD_INT 23
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 69
26254: ST_TO_ADDR
// if not tmp then
26255: LD_VAR 0 1
26259: NOT
26260: IFFALSE 26264
// exit ;
26262: GO 26290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26264: LD_VAR 0 1
26268: PUSH
26269: LD_INT 1
26271: PPUSH
26272: LD_VAR 0 1
26276: PPUSH
26277: CALL_OW 12
26281: ARRAY
26282: PPUSH
26283: LD_INT 200
26285: PPUSH
26286: CALL_OW 234
// end ;
26290: PPOPN 1
26292: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26293: LD_EXP 52
26297: PUSH
26298: LD_EXP 81
26302: AND
26303: IFFALSE 26382
26305: GO 26307
26307: DISABLE
26308: LD_INT 0
26310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26311: LD_ADDR_VAR 0 1
26315: PUSH
26316: LD_INT 22
26318: PUSH
26319: LD_OWVAR 2
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 21
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PPUSH
26342: CALL_OW 69
26346: ST_TO_ADDR
// if not tmp then
26347: LD_VAR 0 1
26351: NOT
26352: IFFALSE 26356
// exit ;
26354: GO 26382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26356: LD_VAR 0 1
26360: PUSH
26361: LD_INT 1
26363: PPUSH
26364: LD_VAR 0 1
26368: PPUSH
26369: CALL_OW 12
26373: ARRAY
26374: PPUSH
26375: LD_INT 60
26377: PPUSH
26378: CALL_OW 234
// end ;
26382: PPOPN 1
26384: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26385: LD_EXP 52
26389: PUSH
26390: LD_EXP 82
26394: AND
26395: IFFALSE 26494
26397: GO 26399
26399: DISABLE
26400: LD_INT 0
26402: PPUSH
26403: PPUSH
// begin enable ;
26404: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26405: LD_ADDR_VAR 0 1
26409: PUSH
26410: LD_INT 22
26412: PUSH
26413: LD_OWVAR 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 61
26424: PUSH
26425: EMPTY
26426: LIST
26427: PUSH
26428: LD_INT 33
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: PPUSH
26443: CALL_OW 69
26447: ST_TO_ADDR
// if not tmp then
26448: LD_VAR 0 1
26452: NOT
26453: IFFALSE 26457
// exit ;
26455: GO 26494
// for i in tmp do
26457: LD_ADDR_VAR 0 2
26461: PUSH
26462: LD_VAR 0 1
26466: PUSH
26467: FOR_IN
26468: IFFALSE 26492
// if IsControledBy ( i ) then
26470: LD_VAR 0 2
26474: PPUSH
26475: CALL_OW 312
26479: IFFALSE 26490
// ComUnlink ( i ) ;
26481: LD_VAR 0 2
26485: PPUSH
26486: CALL_OW 136
26490: GO 26467
26492: POP
26493: POP
// end ;
26494: PPOPN 2
26496: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26497: LD_EXP 52
26501: PUSH
26502: LD_EXP 83
26506: AND
26507: IFFALSE 26647
26509: GO 26511
26511: DISABLE
26512: LD_INT 0
26514: PPUSH
26515: PPUSH
// begin ToLua ( displayPowell(); ) ;
26516: LD_STRING displayPowell();
26518: PPUSH
26519: CALL_OW 559
// uc_side := 0 ;
26523: LD_ADDR_OWVAR 20
26527: PUSH
26528: LD_INT 0
26530: ST_TO_ADDR
// uc_nation := 2 ;
26531: LD_ADDR_OWVAR 21
26535: PUSH
26536: LD_INT 2
26538: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26539: LD_ADDR_OWVAR 37
26543: PUSH
26544: LD_INT 14
26546: ST_TO_ADDR
// vc_engine := engine_siberite ;
26547: LD_ADDR_OWVAR 39
26551: PUSH
26552: LD_INT 3
26554: ST_TO_ADDR
// vc_control := control_apeman ;
26555: LD_ADDR_OWVAR 38
26559: PUSH
26560: LD_INT 5
26562: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26563: LD_ADDR_OWVAR 40
26567: PUSH
26568: LD_INT 29
26570: ST_TO_ADDR
// un := CreateVehicle ;
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: CALL_OW 45
26580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26581: LD_VAR 0 2
26585: PPUSH
26586: LD_INT 1
26588: PPUSH
26589: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26593: LD_INT 35
26595: PPUSH
26596: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26600: LD_VAR 0 2
26604: PPUSH
26605: LD_INT 22
26607: PUSH
26608: LD_OWVAR 2
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PPUSH
26617: CALL_OW 69
26621: PPUSH
26622: LD_VAR 0 2
26626: PPUSH
26627: CALL_OW 74
26631: PPUSH
26632: CALL_OW 115
// until IsDead ( un ) ;
26636: LD_VAR 0 2
26640: PPUSH
26641: CALL_OW 301
26645: IFFALSE 26593
// end ;
26647: PPOPN 2
26649: END
// every 0 0$1 trigger StreamModeActive and sStu do
26650: LD_EXP 52
26654: PUSH
26655: LD_EXP 91
26659: AND
26660: IFFALSE 26676
26662: GO 26664
26664: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26665: LD_STRING displayStucuk();
26667: PPUSH
26668: CALL_OW 559
// ResetFog ;
26672: CALL_OW 335
// end ;
26676: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26677: LD_EXP 52
26681: PUSH
26682: LD_EXP 84
26686: AND
26687: IFFALSE 26828
26689: GO 26691
26691: DISABLE
26692: LD_INT 0
26694: PPUSH
26695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26696: LD_ADDR_VAR 0 2
26700: PUSH
26701: LD_INT 22
26703: PUSH
26704: LD_OWVAR 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 21
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PPUSH
26727: CALL_OW 69
26731: ST_TO_ADDR
// if not tmp then
26732: LD_VAR 0 2
26736: NOT
26737: IFFALSE 26741
// exit ;
26739: GO 26828
// un := tmp [ rand ( 1 , tmp ) ] ;
26741: LD_ADDR_VAR 0 1
26745: PUSH
26746: LD_VAR 0 2
26750: PUSH
26751: LD_INT 1
26753: PPUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: CALL_OW 12
26763: ARRAY
26764: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26765: LD_VAR 0 1
26769: PPUSH
26770: LD_INT 0
26772: PPUSH
26773: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_OWVAR 3
26786: PUSH
26787: LD_VAR 0 1
26791: DIFF
26792: PPUSH
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 74
26802: PPUSH
26803: CALL_OW 115
// wait ( 0 0$20 ) ;
26807: LD_INT 700
26809: PPUSH
26810: CALL_OW 67
// SetSide ( un , your_side ) ;
26814: LD_VAR 0 1
26818: PPUSH
26819: LD_OWVAR 2
26823: PPUSH
26824: CALL_OW 235
// end ;
26828: PPOPN 2
26830: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26831: LD_EXP 52
26835: PUSH
26836: LD_EXP 85
26840: AND
26841: IFFALSE 26947
26843: GO 26845
26845: DISABLE
26846: LD_INT 0
26848: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26849: LD_ADDR_VAR 0 1
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_OWVAR 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 30
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 30
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PPUSH
26898: CALL_OW 69
26902: ST_TO_ADDR
// if not depot then
26903: LD_VAR 0 1
26907: NOT
26908: IFFALSE 26912
// exit ;
26910: GO 26947
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26912: LD_VAR 0 1
26916: PUSH
26917: LD_INT 1
26919: ARRAY
26920: PPUSH
26921: CALL_OW 250
26925: PPUSH
26926: LD_VAR 0 1
26930: PUSH
26931: LD_INT 1
26933: ARRAY
26934: PPUSH
26935: CALL_OW 251
26939: PPUSH
26940: LD_INT 70
26942: PPUSH
26943: CALL_OW 495
// end ;
26947: PPOPN 1
26949: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26950: LD_EXP 52
26954: PUSH
26955: LD_EXP 86
26959: AND
26960: IFFALSE 27171
26962: GO 26964
26964: DISABLE
26965: LD_INT 0
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26972: LD_ADDR_VAR 0 5
26976: PUSH
26977: LD_INT 22
26979: PUSH
26980: LD_OWVAR 2
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 21
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PPUSH
27003: CALL_OW 69
27007: ST_TO_ADDR
// if not tmp then
27008: LD_VAR 0 5
27012: NOT
27013: IFFALSE 27017
// exit ;
27015: GO 27171
// for i in tmp do
27017: LD_ADDR_VAR 0 1
27021: PUSH
27022: LD_VAR 0 5
27026: PUSH
27027: FOR_IN
27028: IFFALSE 27169
// begin d := rand ( 0 , 5 ) ;
27030: LD_ADDR_VAR 0 4
27034: PUSH
27035: LD_INT 0
27037: PPUSH
27038: LD_INT 5
27040: PPUSH
27041: CALL_OW 12
27045: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27046: LD_ADDR_VAR 0 2
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 250
27060: PPUSH
27061: LD_VAR 0 4
27065: PPUSH
27066: LD_INT 3
27068: PPUSH
27069: LD_INT 12
27071: PPUSH
27072: CALL_OW 12
27076: PPUSH
27077: CALL_OW 272
27081: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27082: LD_ADDR_VAR 0 3
27086: PUSH
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 251
27096: PPUSH
27097: LD_VAR 0 4
27101: PPUSH
27102: LD_INT 3
27104: PPUSH
27105: LD_INT 12
27107: PPUSH
27108: CALL_OW 12
27112: PPUSH
27113: CALL_OW 273
27117: ST_TO_ADDR
// if ValidHex ( x , y ) then
27118: LD_VAR 0 2
27122: PPUSH
27123: LD_VAR 0 3
27127: PPUSH
27128: CALL_OW 488
27132: IFFALSE 27167
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27134: LD_VAR 0 1
27138: PPUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_VAR 0 3
27148: PPUSH
27149: LD_INT 3
27151: PPUSH
27152: LD_INT 6
27154: PPUSH
27155: CALL_OW 12
27159: PPUSH
27160: LD_INT 1
27162: PPUSH
27163: CALL_OW 483
// end ;
27167: GO 27027
27169: POP
27170: POP
// end ;
27171: PPOPN 5
27173: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27174: LD_EXP 52
27178: PUSH
27179: LD_EXP 87
27183: AND
27184: IFFALSE 27278
27186: GO 27188
27188: DISABLE
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27193: LD_ADDR_VAR 0 2
27197: PUSH
27198: LD_INT 22
27200: PUSH
27201: LD_OWVAR 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 32
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 21
27222: PUSH
27223: LD_INT 2
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: PPUSH
27235: CALL_OW 69
27239: ST_TO_ADDR
// if not tmp then
27240: LD_VAR 0 2
27244: NOT
27245: IFFALSE 27249
// exit ;
27247: GO 27278
// for i in tmp do
27249: LD_ADDR_VAR 0 1
27253: PUSH
27254: LD_VAR 0 2
27258: PUSH
27259: FOR_IN
27260: IFFALSE 27276
// SetFuel ( i , 0 ) ;
27262: LD_VAR 0 1
27266: PPUSH
27267: LD_INT 0
27269: PPUSH
27270: CALL_OW 240
27274: GO 27259
27276: POP
27277: POP
// end ;
27278: PPOPN 2
27280: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27281: LD_EXP 52
27285: PUSH
27286: LD_EXP 88
27290: AND
27291: IFFALSE 27357
27293: GO 27295
27295: DISABLE
27296: LD_INT 0
27298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27299: LD_ADDR_VAR 0 1
27303: PUSH
27304: LD_INT 22
27306: PUSH
27307: LD_OWVAR 2
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 30
27318: PUSH
27319: LD_INT 29
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 69
27334: ST_TO_ADDR
// if not tmp then
27335: LD_VAR 0 1
27339: NOT
27340: IFFALSE 27344
// exit ;
27342: GO 27357
// DestroyUnit ( tmp [ 1 ] ) ;
27344: LD_VAR 0 1
27348: PUSH
27349: LD_INT 1
27351: ARRAY
27352: PPUSH
27353: CALL_OW 65
// end ;
27357: PPOPN 1
27359: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27360: LD_EXP 52
27364: PUSH
27365: LD_EXP 90
27369: AND
27370: IFFALSE 27499
27372: GO 27374
27374: DISABLE
27375: LD_INT 0
27377: PPUSH
// begin uc_side := 0 ;
27378: LD_ADDR_OWVAR 20
27382: PUSH
27383: LD_INT 0
27385: ST_TO_ADDR
// uc_nation := nation_arabian ;
27386: LD_ADDR_OWVAR 21
27390: PUSH
27391: LD_INT 2
27393: ST_TO_ADDR
// hc_gallery :=  ;
27394: LD_ADDR_OWVAR 33
27398: PUSH
27399: LD_STRING 
27401: ST_TO_ADDR
// hc_name :=  ;
27402: LD_ADDR_OWVAR 26
27406: PUSH
27407: LD_STRING 
27409: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27410: LD_INT 1
27412: PPUSH
27413: LD_INT 11
27415: PPUSH
27416: LD_INT 10
27418: PPUSH
27419: CALL_OW 380
// un := CreateHuman ;
27423: LD_ADDR_VAR 0 1
27427: PUSH
27428: CALL_OW 44
27432: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27433: LD_VAR 0 1
27437: PPUSH
27438: LD_INT 1
27440: PPUSH
27441: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27445: LD_INT 35
27447: PPUSH
27448: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_INT 22
27459: PUSH
27460: LD_OWVAR 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 74
27483: PPUSH
27484: CALL_OW 115
// until IsDead ( un ) ;
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 301
27497: IFFALSE 27445
// end ;
27499: PPOPN 1
27501: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27502: LD_EXP 52
27506: PUSH
27507: LD_EXP 92
27511: AND
27512: IFFALSE 27524
27514: GO 27516
27516: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27517: LD_STRING earthquake(getX(game), 0, 32)
27519: PPUSH
27520: CALL_OW 559
27524: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27525: LD_EXP 52
27529: PUSH
27530: LD_EXP 93
27534: AND
27535: IFFALSE 27626
27537: GO 27539
27539: DISABLE
27540: LD_INT 0
27542: PPUSH
// begin enable ;
27543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27544: LD_ADDR_VAR 0 1
27548: PUSH
27549: LD_INT 22
27551: PUSH
27552: LD_OWVAR 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 21
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 33
27573: PUSH
27574: LD_INT 3
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 69
27590: ST_TO_ADDR
// if not tmp then
27591: LD_VAR 0 1
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27600: LD_VAR 0 1
27604: PUSH
27605: LD_INT 1
27607: PPUSH
27608: LD_VAR 0 1
27612: PPUSH
27613: CALL_OW 12
27617: ARRAY
27618: PPUSH
27619: LD_INT 1
27621: PPUSH
27622: CALL_OW 234
// end ;
27626: PPOPN 1
27628: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27629: LD_EXP 52
27633: PUSH
27634: LD_EXP 94
27638: AND
27639: IFFALSE 27780
27641: GO 27643
27643: DISABLE
27644: LD_INT 0
27646: PPUSH
27647: PPUSH
27648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27649: LD_ADDR_VAR 0 3
27653: PUSH
27654: LD_INT 22
27656: PUSH
27657: LD_OWVAR 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 25
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PPUSH
27680: CALL_OW 69
27684: ST_TO_ADDR
// if not tmp then
27685: LD_VAR 0 3
27689: NOT
27690: IFFALSE 27694
// exit ;
27692: GO 27780
// un := tmp [ rand ( 1 , tmp ) ] ;
27694: LD_ADDR_VAR 0 2
27698: PUSH
27699: LD_VAR 0 3
27703: PUSH
27704: LD_INT 1
27706: PPUSH
27707: LD_VAR 0 3
27711: PPUSH
27712: CALL_OW 12
27716: ARRAY
27717: ST_TO_ADDR
// if Crawls ( un ) then
27718: LD_VAR 0 2
27722: PPUSH
27723: CALL_OW 318
27727: IFFALSE 27738
// ComWalk ( un ) ;
27729: LD_VAR 0 2
27733: PPUSH
27734: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27738: LD_VAR 0 2
27742: PPUSH
27743: LD_INT 9
27745: PPUSH
27746: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27750: LD_INT 28
27752: PPUSH
27753: LD_OWVAR 2
27757: PPUSH
27758: LD_INT 2
27760: PPUSH
27761: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27765: LD_INT 29
27767: PPUSH
27768: LD_OWVAR 2
27772: PPUSH
27773: LD_INT 2
27775: PPUSH
27776: CALL_OW 322
// end ;
27780: PPOPN 3
27782: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27783: LD_EXP 52
27787: PUSH
27788: LD_EXP 95
27792: AND
27793: IFFALSE 27904
27795: GO 27797
27797: DISABLE
27798: LD_INT 0
27800: PPUSH
27801: PPUSH
27802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27803: LD_ADDR_VAR 0 3
27807: PUSH
27808: LD_INT 22
27810: PUSH
27811: LD_OWVAR 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 25
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 69
27838: ST_TO_ADDR
// if not tmp then
27839: LD_VAR 0 3
27843: NOT
27844: IFFALSE 27848
// exit ;
27846: GO 27904
// un := tmp [ rand ( 1 , tmp ) ] ;
27848: LD_ADDR_VAR 0 2
27852: PUSH
27853: LD_VAR 0 3
27857: PUSH
27858: LD_INT 1
27860: PPUSH
27861: LD_VAR 0 3
27865: PPUSH
27866: CALL_OW 12
27870: ARRAY
27871: ST_TO_ADDR
// if Crawls ( un ) then
27872: LD_VAR 0 2
27876: PPUSH
27877: CALL_OW 318
27881: IFFALSE 27892
// ComWalk ( un ) ;
27883: LD_VAR 0 2
27887: PPUSH
27888: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_INT 8
27899: PPUSH
27900: CALL_OW 336
// end ;
27904: PPOPN 3
27906: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27907: LD_EXP 52
27911: PUSH
27912: LD_EXP 96
27916: AND
27917: IFFALSE 28061
27919: GO 27921
27921: DISABLE
27922: LD_INT 0
27924: PPUSH
27925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27926: LD_ADDR_VAR 0 2
27930: PUSH
27931: LD_INT 22
27933: PUSH
27934: LD_OWVAR 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 21
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 34
27958: PUSH
27959: LD_INT 12
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 34
27968: PUSH
27969: LD_INT 51
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 34
27978: PUSH
27979: LD_INT 32
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: ST_TO_ADDR
// if not tmp then
28002: LD_VAR 0 2
28006: NOT
28007: IFFALSE 28011
// exit ;
28009: GO 28061
// for i in tmp do
28011: LD_ADDR_VAR 0 1
28015: PUSH
28016: LD_VAR 0 2
28020: PUSH
28021: FOR_IN
28022: IFFALSE 28059
// if GetCargo ( i , mat_artifact ) = 0 then
28024: LD_VAR 0 1
28028: PPUSH
28029: LD_INT 4
28031: PPUSH
28032: CALL_OW 289
28036: PUSH
28037: LD_INT 0
28039: EQUAL
28040: IFFALSE 28057
// SetCargo ( i , mat_siberit , 100 ) ;
28042: LD_VAR 0 1
28046: PPUSH
28047: LD_INT 3
28049: PPUSH
28050: LD_INT 100
28052: PPUSH
28053: CALL_OW 290
28057: GO 28021
28059: POP
28060: POP
// end ;
28061: PPOPN 2
28063: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28064: LD_EXP 52
28068: PUSH
28069: LD_EXP 97
28073: AND
28074: IFFALSE 28257
28076: GO 28078
28078: DISABLE
28079: LD_INT 0
28081: PPUSH
28082: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28083: LD_ADDR_VAR 0 2
28087: PUSH
28088: LD_INT 22
28090: PUSH
28091: LD_OWVAR 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 69
28104: ST_TO_ADDR
// if not tmp then
28105: LD_VAR 0 2
28109: NOT
28110: IFFALSE 28114
// exit ;
28112: GO 28257
// for i := 1 to 2 do
28114: LD_ADDR_VAR 0 1
28118: PUSH
28119: DOUBLE
28120: LD_INT 1
28122: DEC
28123: ST_TO_ADDR
28124: LD_INT 2
28126: PUSH
28127: FOR_TO
28128: IFFALSE 28255
// begin uc_side := your_side ;
28130: LD_ADDR_OWVAR 20
28134: PUSH
28135: LD_OWVAR 2
28139: ST_TO_ADDR
// uc_nation := nation_american ;
28140: LD_ADDR_OWVAR 21
28144: PUSH
28145: LD_INT 1
28147: ST_TO_ADDR
// vc_chassis := us_morphling ;
28148: LD_ADDR_OWVAR 37
28152: PUSH
28153: LD_INT 5
28155: ST_TO_ADDR
// vc_engine := engine_siberite ;
28156: LD_ADDR_OWVAR 39
28160: PUSH
28161: LD_INT 3
28163: ST_TO_ADDR
// vc_control := control_computer ;
28164: LD_ADDR_OWVAR 38
28168: PUSH
28169: LD_INT 3
28171: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28172: LD_ADDR_OWVAR 40
28176: PUSH
28177: LD_INT 10
28179: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28180: LD_VAR 0 2
28184: PUSH
28185: LD_INT 1
28187: ARRAY
28188: PPUSH
28189: CALL_OW 310
28193: NOT
28194: IFFALSE 28241
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28196: CALL_OW 45
28200: PPUSH
28201: LD_VAR 0 2
28205: PUSH
28206: LD_INT 1
28208: ARRAY
28209: PPUSH
28210: CALL_OW 250
28214: PPUSH
28215: LD_VAR 0 2
28219: PUSH
28220: LD_INT 1
28222: ARRAY
28223: PPUSH
28224: CALL_OW 251
28228: PPUSH
28229: LD_INT 12
28231: PPUSH
28232: LD_INT 1
28234: PPUSH
28235: CALL_OW 50
28239: GO 28253
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28241: CALL_OW 45
28245: PPUSH
28246: LD_INT 1
28248: PPUSH
28249: CALL_OW 51
// end ;
28253: GO 28127
28255: POP
28256: POP
// end ;
28257: PPOPN 2
28259: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28260: LD_EXP 52
28264: PUSH
28265: LD_EXP 98
28269: AND
28270: IFFALSE 28492
28272: GO 28274
28274: DISABLE
28275: LD_INT 0
28277: PPUSH
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28283: LD_ADDR_VAR 0 6
28287: PUSH
28288: LD_INT 22
28290: PUSH
28291: LD_OWVAR 2
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 21
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 3
28312: PUSH
28313: LD_INT 23
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: PPUSH
28332: CALL_OW 69
28336: ST_TO_ADDR
// if not tmp then
28337: LD_VAR 0 6
28341: NOT
28342: IFFALSE 28346
// exit ;
28344: GO 28492
// s1 := rand ( 1 , 4 ) ;
28346: LD_ADDR_VAR 0 2
28350: PUSH
28351: LD_INT 1
28353: PPUSH
28354: LD_INT 4
28356: PPUSH
28357: CALL_OW 12
28361: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28362: LD_ADDR_VAR 0 4
28366: PUSH
28367: LD_VAR 0 6
28371: PUSH
28372: LD_INT 1
28374: ARRAY
28375: PPUSH
28376: LD_VAR 0 2
28380: PPUSH
28381: CALL_OW 259
28385: ST_TO_ADDR
// if s1 = 1 then
28386: LD_VAR 0 2
28390: PUSH
28391: LD_INT 1
28393: EQUAL
28394: IFFALSE 28414
// s2 := rand ( 2 , 4 ) else
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 2
28403: PPUSH
28404: LD_INT 4
28406: PPUSH
28407: CALL_OW 12
28411: ST_TO_ADDR
28412: GO 28422
// s2 := 1 ;
28414: LD_ADDR_VAR 0 3
28418: PUSH
28419: LD_INT 1
28421: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_VAR 0 6
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PPUSH
28436: LD_VAR 0 3
28440: PPUSH
28441: CALL_OW 259
28445: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28446: LD_VAR 0 6
28450: PUSH
28451: LD_INT 1
28453: ARRAY
28454: PPUSH
28455: LD_VAR 0 2
28459: PPUSH
28460: LD_VAR 0 5
28464: PPUSH
28465: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28469: LD_VAR 0 6
28473: PUSH
28474: LD_INT 1
28476: ARRAY
28477: PPUSH
28478: LD_VAR 0 3
28482: PPUSH
28483: LD_VAR 0 4
28487: PPUSH
28488: CALL_OW 237
// end ;
28492: PPOPN 6
28494: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28495: LD_EXP 52
28499: PUSH
28500: LD_EXP 99
28504: AND
28505: IFFALSE 28584
28507: GO 28509
28509: DISABLE
28510: LD_INT 0
28512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28513: LD_ADDR_VAR 0 1
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_OWVAR 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 30
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PPUSH
28544: CALL_OW 69
28548: ST_TO_ADDR
// if not tmp then
28549: LD_VAR 0 1
28553: NOT
28554: IFFALSE 28558
// exit ;
28556: GO 28584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28558: LD_VAR 0 1
28562: PUSH
28563: LD_INT 1
28565: PPUSH
28566: LD_VAR 0 1
28570: PPUSH
28571: CALL_OW 12
28575: ARRAY
28576: PPUSH
28577: LD_INT 1
28579: PPUSH
28580: CALL_OW 234
// end ;
28584: PPOPN 1
28586: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28587: LD_EXP 52
28591: PUSH
28592: LD_EXP 100
28596: AND
28597: IFFALSE 28709
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28606: LD_ADDR_VAR 0 2
28610: PUSH
28611: LD_INT 22
28613: PUSH
28614: LD_OWVAR 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: LD_INT 30
28628: PUSH
28629: LD_INT 27
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 30
28638: PUSH
28639: LD_INT 26
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 30
28648: PUSH
28649: LD_INT 28
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PPUSH
28666: CALL_OW 69
28670: ST_TO_ADDR
// if not tmp then
28671: LD_VAR 0 2
28675: NOT
28676: IFFALSE 28680
// exit ;
28678: GO 28709
// for i in tmp do
28680: LD_ADDR_VAR 0 1
28684: PUSH
28685: LD_VAR 0 2
28689: PUSH
28690: FOR_IN
28691: IFFALSE 28707
// SetLives ( i , 1 ) ;
28693: LD_VAR 0 1
28697: PPUSH
28698: LD_INT 1
28700: PPUSH
28701: CALL_OW 234
28705: GO 28690
28707: POP
28708: POP
// end ;
28709: PPOPN 2
28711: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28712: LD_EXP 52
28716: PUSH
28717: LD_EXP 101
28721: AND
28722: IFFALSE 29009
28724: GO 28726
28726: DISABLE
28727: LD_INT 0
28729: PPUSH
28730: PPUSH
28731: PPUSH
// begin i := rand ( 1 , 7 ) ;
28732: LD_ADDR_VAR 0 1
28736: PUSH
28737: LD_INT 1
28739: PPUSH
28740: LD_INT 7
28742: PPUSH
28743: CALL_OW 12
28747: ST_TO_ADDR
// case i of 1 :
28748: LD_VAR 0 1
28752: PUSH
28753: LD_INT 1
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28771
28761: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28762: LD_STRING earthquake(getX(game), 0, 32)
28764: PPUSH
28765: CALL_OW 559
28769: GO 29009
28771: LD_INT 2
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28793
28779: POP
// begin ToLua ( displayStucuk(); ) ;
28780: LD_STRING displayStucuk();
28782: PPUSH
28783: CALL_OW 559
// ResetFog ;
28787: CALL_OW 335
// end ; 3 :
28791: GO 29009
28793: LD_INT 3
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28905
28801: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28802: LD_ADDR_VAR 0 2
28806: PUSH
28807: LD_INT 22
28809: PUSH
28810: LD_OWVAR 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 25
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PPUSH
28833: CALL_OW 69
28837: ST_TO_ADDR
// if not tmp then
28838: LD_VAR 0 2
28842: NOT
28843: IFFALSE 28847
// exit ;
28845: GO 29009
// un := tmp [ rand ( 1 , tmp ) ] ;
28847: LD_ADDR_VAR 0 3
28851: PUSH
28852: LD_VAR 0 2
28856: PUSH
28857: LD_INT 1
28859: PPUSH
28860: LD_VAR 0 2
28864: PPUSH
28865: CALL_OW 12
28869: ARRAY
28870: ST_TO_ADDR
// if Crawls ( un ) then
28871: LD_VAR 0 3
28875: PPUSH
28876: CALL_OW 318
28880: IFFALSE 28891
// ComWalk ( un ) ;
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28891: LD_VAR 0 3
28895: PPUSH
28896: LD_INT 8
28898: PPUSH
28899: CALL_OW 336
// end ; 4 :
28903: GO 29009
28905: LD_INT 4
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 28987
28913: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28914: LD_ADDR_VAR 0 2
28918: PUSH
28919: LD_INT 22
28921: PUSH
28922: LD_OWVAR 2
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 30
28933: PUSH
28934: LD_INT 29
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PPUSH
28945: CALL_OW 69
28949: ST_TO_ADDR
// if not tmp then
28950: LD_VAR 0 2
28954: NOT
28955: IFFALSE 28959
// exit ;
28957: GO 29009
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28959: LD_VAR 0 2
28963: PUSH
28964: LD_INT 1
28966: ARRAY
28967: PPUSH
28968: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28972: LD_VAR 0 2
28976: PUSH
28977: LD_INT 1
28979: ARRAY
28980: PPUSH
28981: CALL_OW 65
// end ; 5 .. 7 :
28985: GO 29009
28987: LD_INT 5
28989: DOUBLE
28990: GREATEREQUAL
28991: IFFALSE 28999
28993: LD_INT 7
28995: DOUBLE
28996: LESSEQUAL
28997: IFTRUE 29001
28999: GO 29008
29001: POP
// StreamSibBomb ; end ;
29002: CALL 25246 0 0
29006: GO 29009
29008: POP
// end ;
29009: PPOPN 3
29011: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29012: LD_EXP 52
29016: PUSH
29017: LD_EXP 102
29021: AND
29022: IFFALSE 29178
29024: GO 29026
29026: DISABLE
29027: LD_INT 0
29029: PPUSH
29030: PPUSH
29031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_INT 81
29039: PUSH
29040: LD_OWVAR 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 21
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 21
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: ST_TO_ADDR
// if not tmp then
29086: LD_VAR 0 2
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29178
// p := 0 ;
29095: LD_ADDR_VAR 0 3
29099: PUSH
29100: LD_INT 0
29102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29103: LD_INT 35
29105: PPUSH
29106: CALL_OW 67
// p := p + 1 ;
29110: LD_ADDR_VAR 0 3
29114: PUSH
29115: LD_VAR 0 3
29119: PUSH
29120: LD_INT 1
29122: PLUS
29123: ST_TO_ADDR
// for i in tmp do
29124: LD_ADDR_VAR 0 1
29128: PUSH
29129: LD_VAR 0 2
29133: PUSH
29134: FOR_IN
29135: IFFALSE 29166
// if GetLives ( i ) < 1000 then
29137: LD_VAR 0 1
29141: PPUSH
29142: CALL_OW 256
29146: PUSH
29147: LD_INT 1000
29149: LESS
29150: IFFALSE 29164
// SetLives ( i , 1000 ) ;
29152: LD_VAR 0 1
29156: PPUSH
29157: LD_INT 1000
29159: PPUSH
29160: CALL_OW 234
29164: GO 29134
29166: POP
29167: POP
// until p > 20 ;
29168: LD_VAR 0 3
29172: PUSH
29173: LD_INT 20
29175: GREATER
29176: IFFALSE 29103
// end ;
29178: PPOPN 3
29180: END
// every 0 0$1 trigger StreamModeActive and sTime do
29181: LD_EXP 52
29185: PUSH
29186: LD_EXP 103
29190: AND
29191: IFFALSE 29226
29193: GO 29195
29195: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29196: LD_INT 28
29198: PPUSH
29199: LD_OWVAR 2
29203: PPUSH
29204: LD_INT 2
29206: PPUSH
29207: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29211: LD_INT 30
29213: PPUSH
29214: LD_OWVAR 2
29218: PPUSH
29219: LD_INT 2
29221: PPUSH
29222: CALL_OW 322
// end ;
29226: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29227: LD_EXP 52
29231: PUSH
29232: LD_EXP 104
29236: AND
29237: IFFALSE 29358
29239: GO 29241
29241: DISABLE
29242: LD_INT 0
29244: PPUSH
29245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: LD_INT 22
29253: PUSH
29254: LD_OWVAR 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 21
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 3
29275: PUSH
29276: LD_INT 23
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: PPUSH
29295: CALL_OW 69
29299: ST_TO_ADDR
// if not tmp then
29300: LD_VAR 0 2
29304: NOT
29305: IFFALSE 29309
// exit ;
29307: GO 29358
// for i in tmp do
29309: LD_ADDR_VAR 0 1
29313: PUSH
29314: LD_VAR 0 2
29318: PUSH
29319: FOR_IN
29320: IFFALSE 29356
// begin if Crawls ( i ) then
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL_OW 318
29331: IFFALSE 29342
// ComWalk ( i ) ;
29333: LD_VAR 0 1
29337: PPUSH
29338: CALL_OW 138
// SetClass ( i , 2 ) ;
29342: LD_VAR 0 1
29346: PPUSH
29347: LD_INT 2
29349: PPUSH
29350: CALL_OW 336
// end ;
29354: GO 29319
29356: POP
29357: POP
// end ;
29358: PPOPN 2
29360: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29361: LD_EXP 52
29365: PUSH
29366: LD_EXP 105
29370: AND
29371: IFFALSE 29659
29373: GO 29375
29375: DISABLE
29376: LD_INT 0
29378: PPUSH
29379: PPUSH
29380: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29381: LD_OWVAR 2
29385: PPUSH
29386: LD_INT 9
29388: PPUSH
29389: LD_INT 1
29391: PPUSH
29392: LD_INT 1
29394: PPUSH
29395: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29399: LD_INT 9
29401: PPUSH
29402: LD_OWVAR 2
29406: PPUSH
29407: CALL_OW 343
// uc_side := 9 ;
29411: LD_ADDR_OWVAR 20
29415: PUSH
29416: LD_INT 9
29418: ST_TO_ADDR
// uc_nation := 2 ;
29419: LD_ADDR_OWVAR 21
29423: PUSH
29424: LD_INT 2
29426: ST_TO_ADDR
// hc_name := Dark Warrior ;
29427: LD_ADDR_OWVAR 26
29431: PUSH
29432: LD_STRING Dark Warrior
29434: ST_TO_ADDR
// hc_gallery :=  ;
29435: LD_ADDR_OWVAR 33
29439: PUSH
29440: LD_STRING 
29442: ST_TO_ADDR
// hc_noskilllimit := true ;
29443: LD_ADDR_OWVAR 76
29447: PUSH
29448: LD_INT 1
29450: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29451: LD_ADDR_OWVAR 31
29455: PUSH
29456: LD_INT 30
29458: PUSH
29459: LD_INT 30
29461: PUSH
29462: LD_INT 30
29464: PUSH
29465: LD_INT 30
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// un := CreateHuman ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: CALL_OW 44
29483: ST_TO_ADDR
// hc_noskilllimit := false ;
29484: LD_ADDR_OWVAR 76
29488: PUSH
29489: LD_INT 0
29491: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29492: LD_VAR 0 3
29496: PPUSH
29497: LD_INT 1
29499: PPUSH
29500: CALL_OW 51
// ToLua ( playRanger() ) ;
29504: LD_STRING playRanger()
29506: PPUSH
29507: CALL_OW 559
// p := 0 ;
29511: LD_ADDR_VAR 0 2
29515: PUSH
29516: LD_INT 0
29518: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29519: LD_INT 35
29521: PPUSH
29522: CALL_OW 67
// p := p + 1 ;
29526: LD_ADDR_VAR 0 2
29530: PUSH
29531: LD_VAR 0 2
29535: PUSH
29536: LD_INT 1
29538: PLUS
29539: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29540: LD_VAR 0 3
29544: PPUSH
29545: CALL_OW 256
29549: PUSH
29550: LD_INT 1000
29552: LESS
29553: IFFALSE 29567
// SetLives ( un , 1000 ) ;
29555: LD_VAR 0 3
29559: PPUSH
29560: LD_INT 1000
29562: PPUSH
29563: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29567: LD_VAR 0 3
29571: PPUSH
29572: LD_INT 81
29574: PUSH
29575: LD_OWVAR 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 91
29586: PUSH
29587: LD_VAR 0 3
29591: PUSH
29592: LD_INT 30
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 69
29608: PPUSH
29609: LD_VAR 0 3
29613: PPUSH
29614: CALL_OW 74
29618: PPUSH
29619: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29623: LD_VAR 0 2
29627: PUSH
29628: LD_INT 80
29630: GREATER
29631: PUSH
29632: LD_VAR 0 3
29636: PPUSH
29637: CALL_OW 301
29641: OR
29642: IFFALSE 29519
// if un then
29644: LD_VAR 0 3
29648: IFFALSE 29659
// RemoveUnit ( un ) ;
29650: LD_VAR 0 3
29654: PPUSH
29655: CALL_OW 64
// end ;
29659: PPOPN 3
29661: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29662: LD_EXP 106
29666: IFFALSE 29782
29668: GO 29670
29670: DISABLE
29671: LD_INT 0
29673: PPUSH
29674: PPUSH
29675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29676: LD_ADDR_VAR 0 2
29680: PUSH
29681: LD_INT 81
29683: PUSH
29684: LD_OWVAR 2
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 21
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PPUSH
29707: CALL_OW 69
29711: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29712: LD_STRING playComputer()
29714: PPUSH
29715: CALL_OW 559
// if not tmp then
29719: LD_VAR 0 2
29723: NOT
29724: IFFALSE 29728
// exit ;
29726: GO 29782
// for i in tmp do
29728: LD_ADDR_VAR 0 1
29732: PUSH
29733: LD_VAR 0 2
29737: PUSH
29738: FOR_IN
29739: IFFALSE 29780
// for j := 1 to 4 do
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: DOUBLE
29747: LD_INT 1
29749: DEC
29750: ST_TO_ADDR
29751: LD_INT 4
29753: PUSH
29754: FOR_TO
29755: IFFALSE 29776
// SetSkill ( i , j , 10 ) ;
29757: LD_VAR 0 1
29761: PPUSH
29762: LD_VAR 0 3
29766: PPUSH
29767: LD_INT 10
29769: PPUSH
29770: CALL_OW 237
29774: GO 29754
29776: POP
29777: POP
29778: GO 29738
29780: POP
29781: POP
// end ;
29782: PPOPN 3
29784: END
// every 0 0$1 trigger s30 do var i , tmp ;
29785: LD_EXP 107
29789: IFFALSE 29858
29791: GO 29793
29793: DISABLE
29794: LD_INT 0
29796: PPUSH
29797: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29798: LD_ADDR_VAR 0 2
29802: PUSH
29803: LD_INT 22
29805: PUSH
29806: LD_OWVAR 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: ST_TO_ADDR
// if not tmp then
29820: LD_VAR 0 2
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 29858
// for i in tmp do
29829: LD_ADDR_VAR 0 1
29833: PUSH
29834: LD_VAR 0 2
29838: PUSH
29839: FOR_IN
29840: IFFALSE 29856
// SetLives ( i , 300 ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_INT 300
29849: PPUSH
29850: CALL_OW 234
29854: GO 29839
29856: POP
29857: POP
// end ;
29858: PPOPN 2
29860: END
// every 0 0$1 trigger s60 do var i , tmp ;
29861: LD_EXP 108
29865: IFFALSE 29934
29867: GO 29869
29869: DISABLE
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_OWVAR 2
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PPUSH
29891: CALL_OW 69
29895: ST_TO_ADDR
// if not tmp then
29896: LD_VAR 0 2
29900: NOT
29901: IFFALSE 29905
// exit ;
29903: GO 29934
// for i in tmp do
29905: LD_ADDR_VAR 0 1
29909: PUSH
29910: LD_VAR 0 2
29914: PUSH
29915: FOR_IN
29916: IFFALSE 29932
// SetLives ( i , 600 ) ;
29918: LD_VAR 0 1
29922: PPUSH
29923: LD_INT 600
29925: PPUSH
29926: CALL_OW 234
29930: GO 29915
29932: POP
29933: POP
// end ;
29934: PPOPN 2
29936: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29937: LD_INT 0
29939: PPUSH
// case cmd of 301 :
29940: LD_VAR 0 1
29944: PUSH
29945: LD_INT 301
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 29985
29953: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29954: LD_VAR 0 6
29958: PPUSH
29959: LD_VAR 0 7
29963: PPUSH
29964: LD_VAR 0 8
29968: PPUSH
29969: LD_VAR 0 4
29973: PPUSH
29974: LD_VAR 0 5
29978: PPUSH
29979: CALL 31186 0 5
29983: GO 30106
29985: LD_INT 302
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30030
29993: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29994: LD_VAR 0 6
29998: PPUSH
29999: LD_VAR 0 7
30003: PPUSH
30004: LD_VAR 0 8
30008: PPUSH
30009: LD_VAR 0 9
30013: PPUSH
30014: LD_VAR 0 4
30018: PPUSH
30019: LD_VAR 0 5
30023: PPUSH
30024: CALL 31277 0 6
30028: GO 30106
30030: LD_INT 303
30032: DOUBLE
30033: EQUAL
30034: IFTRUE 30038
30036: GO 30075
30038: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30039: LD_VAR 0 6
30043: PPUSH
30044: LD_VAR 0 7
30048: PPUSH
30049: LD_VAR 0 8
30053: PPUSH
30054: LD_VAR 0 9
30058: PPUSH
30059: LD_VAR 0 4
30063: PPUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: CALL 30111 0 6
30073: GO 30106
30075: LD_INT 304
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30105
30083: POP
// hHackTeleport ( unit , x , y ) ; end ;
30084: LD_VAR 0 2
30088: PPUSH
30089: LD_VAR 0 4
30093: PPUSH
30094: LD_VAR 0 5
30098: PPUSH
30099: CALL 31870 0 3
30103: GO 30106
30105: POP
// end ;
30106: LD_VAR 0 12
30110: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30111: LD_INT 0
30113: PPUSH
30114: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30115: LD_VAR 0 1
30119: PUSH
30120: LD_INT 1
30122: LESS
30123: PUSH
30124: LD_VAR 0 1
30128: PUSH
30129: LD_INT 3
30131: GREATER
30132: OR
30133: PUSH
30134: LD_VAR 0 5
30138: PPUSH
30139: LD_VAR 0 6
30143: PPUSH
30144: CALL_OW 428
30148: OR
30149: IFFALSE 30153
// exit ;
30151: GO 30873
// uc_side := your_side ;
30153: LD_ADDR_OWVAR 20
30157: PUSH
30158: LD_OWVAR 2
30162: ST_TO_ADDR
// uc_nation := nation ;
30163: LD_ADDR_OWVAR 21
30167: PUSH
30168: LD_VAR 0 1
30172: ST_TO_ADDR
// bc_level = 1 ;
30173: LD_ADDR_OWVAR 43
30177: PUSH
30178: LD_INT 1
30180: ST_TO_ADDR
// case btype of 1 :
30181: LD_VAR 0 2
30185: PUSH
30186: LD_INT 1
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30205
30194: POP
// bc_type := b_depot ; 2 :
30195: LD_ADDR_OWVAR 42
30199: PUSH
30200: LD_INT 0
30202: ST_TO_ADDR
30203: GO 30817
30205: LD_INT 2
30207: DOUBLE
30208: EQUAL
30209: IFTRUE 30213
30211: GO 30224
30213: POP
// bc_type := b_warehouse ; 3 :
30214: LD_ADDR_OWVAR 42
30218: PUSH
30219: LD_INT 1
30221: ST_TO_ADDR
30222: GO 30817
30224: LD_INT 3
30226: DOUBLE
30227: EQUAL
30228: IFTRUE 30232
30230: GO 30243
30232: POP
// bc_type := b_lab ; 4 .. 9 :
30233: LD_ADDR_OWVAR 42
30237: PUSH
30238: LD_INT 6
30240: ST_TO_ADDR
30241: GO 30817
30243: LD_INT 4
30245: DOUBLE
30246: GREATEREQUAL
30247: IFFALSE 30255
30249: LD_INT 9
30251: DOUBLE
30252: LESSEQUAL
30253: IFTRUE 30257
30255: GO 30309
30257: POP
// begin bc_type := b_lab_half ;
30258: LD_ADDR_OWVAR 42
30262: PUSH
30263: LD_INT 7
30265: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30266: LD_ADDR_OWVAR 44
30270: PUSH
30271: LD_INT 10
30273: PUSH
30274: LD_INT 11
30276: PUSH
30277: LD_INT 12
30279: PUSH
30280: LD_INT 15
30282: PUSH
30283: LD_INT 14
30285: PUSH
30286: LD_INT 13
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: PUSH
30297: LD_VAR 0 2
30301: PUSH
30302: LD_INT 3
30304: MINUS
30305: ARRAY
30306: ST_TO_ADDR
// end ; 10 .. 13 :
30307: GO 30817
30309: LD_INT 10
30311: DOUBLE
30312: GREATEREQUAL
30313: IFFALSE 30321
30315: LD_INT 13
30317: DOUBLE
30318: LESSEQUAL
30319: IFTRUE 30323
30321: GO 30400
30323: POP
// begin bc_type := b_lab_full ;
30324: LD_ADDR_OWVAR 42
30328: PUSH
30329: LD_INT 8
30331: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30332: LD_ADDR_OWVAR 44
30336: PUSH
30337: LD_INT 10
30339: PUSH
30340: LD_INT 12
30342: PUSH
30343: LD_INT 14
30345: PUSH
30346: LD_INT 13
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: LD_INT 9
30362: MINUS
30363: ARRAY
30364: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30365: LD_ADDR_OWVAR 45
30369: PUSH
30370: LD_INT 11
30372: PUSH
30373: LD_INT 15
30375: PUSH
30376: LD_INT 12
30378: PUSH
30379: LD_INT 15
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: LD_VAR 0 2
30392: PUSH
30393: LD_INT 9
30395: MINUS
30396: ARRAY
30397: ST_TO_ADDR
// end ; 14 :
30398: GO 30817
30400: LD_INT 14
30402: DOUBLE
30403: EQUAL
30404: IFTRUE 30408
30406: GO 30419
30408: POP
// bc_type := b_workshop ; 15 :
30409: LD_ADDR_OWVAR 42
30413: PUSH
30414: LD_INT 2
30416: ST_TO_ADDR
30417: GO 30817
30419: LD_INT 15
30421: DOUBLE
30422: EQUAL
30423: IFTRUE 30427
30425: GO 30438
30427: POP
// bc_type := b_factory ; 16 :
30428: LD_ADDR_OWVAR 42
30432: PUSH
30433: LD_INT 3
30435: ST_TO_ADDR
30436: GO 30817
30438: LD_INT 16
30440: DOUBLE
30441: EQUAL
30442: IFTRUE 30446
30444: GO 30457
30446: POP
// bc_type := b_ext_gun ; 17 :
30447: LD_ADDR_OWVAR 42
30451: PUSH
30452: LD_INT 17
30454: ST_TO_ADDR
30455: GO 30817
30457: LD_INT 17
30459: DOUBLE
30460: EQUAL
30461: IFTRUE 30465
30463: GO 30493
30465: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30466: LD_ADDR_OWVAR 42
30470: PUSH
30471: LD_INT 19
30473: PUSH
30474: LD_INT 23
30476: PUSH
30477: LD_INT 19
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: PUSH
30485: LD_VAR 0 1
30489: ARRAY
30490: ST_TO_ADDR
30491: GO 30817
30493: LD_INT 18
30495: DOUBLE
30496: EQUAL
30497: IFTRUE 30501
30499: GO 30512
30501: POP
// bc_type := b_ext_radar ; 19 :
30502: LD_ADDR_OWVAR 42
30506: PUSH
30507: LD_INT 20
30509: ST_TO_ADDR
30510: GO 30817
30512: LD_INT 19
30514: DOUBLE
30515: EQUAL
30516: IFTRUE 30520
30518: GO 30531
30520: POP
// bc_type := b_ext_radio ; 20 :
30521: LD_ADDR_OWVAR 42
30525: PUSH
30526: LD_INT 22
30528: ST_TO_ADDR
30529: GO 30817
30531: LD_INT 20
30533: DOUBLE
30534: EQUAL
30535: IFTRUE 30539
30537: GO 30550
30539: POP
// bc_type := b_ext_siberium ; 21 :
30540: LD_ADDR_OWVAR 42
30544: PUSH
30545: LD_INT 21
30547: ST_TO_ADDR
30548: GO 30817
30550: LD_INT 21
30552: DOUBLE
30553: EQUAL
30554: IFTRUE 30558
30556: GO 30569
30558: POP
// bc_type := b_ext_computer ; 22 :
30559: LD_ADDR_OWVAR 42
30563: PUSH
30564: LD_INT 24
30566: ST_TO_ADDR
30567: GO 30817
30569: LD_INT 22
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30588
30577: POP
// bc_type := b_ext_track ; 23 :
30578: LD_ADDR_OWVAR 42
30582: PUSH
30583: LD_INT 16
30585: ST_TO_ADDR
30586: GO 30817
30588: LD_INT 23
30590: DOUBLE
30591: EQUAL
30592: IFTRUE 30596
30594: GO 30607
30596: POP
// bc_type := b_ext_laser ; 24 :
30597: LD_ADDR_OWVAR 42
30601: PUSH
30602: LD_INT 25
30604: ST_TO_ADDR
30605: GO 30817
30607: LD_INT 24
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30626
30615: POP
// bc_type := b_control_tower ; 25 :
30616: LD_ADDR_OWVAR 42
30620: PUSH
30621: LD_INT 36
30623: ST_TO_ADDR
30624: GO 30817
30626: LD_INT 25
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30645
30634: POP
// bc_type := b_breastwork ; 26 :
30635: LD_ADDR_OWVAR 42
30639: PUSH
30640: LD_INT 31
30642: ST_TO_ADDR
30643: GO 30817
30645: LD_INT 26
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30664
30653: POP
// bc_type := b_bunker ; 27 :
30654: LD_ADDR_OWVAR 42
30658: PUSH
30659: LD_INT 32
30661: ST_TO_ADDR
30662: GO 30817
30664: LD_INT 27
30666: DOUBLE
30667: EQUAL
30668: IFTRUE 30672
30670: GO 30683
30672: POP
// bc_type := b_turret ; 28 :
30673: LD_ADDR_OWVAR 42
30677: PUSH
30678: LD_INT 33
30680: ST_TO_ADDR
30681: GO 30817
30683: LD_INT 28
30685: DOUBLE
30686: EQUAL
30687: IFTRUE 30691
30689: GO 30702
30691: POP
// bc_type := b_armoury ; 29 :
30692: LD_ADDR_OWVAR 42
30696: PUSH
30697: LD_INT 4
30699: ST_TO_ADDR
30700: GO 30817
30702: LD_INT 29
30704: DOUBLE
30705: EQUAL
30706: IFTRUE 30710
30708: GO 30721
30710: POP
// bc_type := b_barracks ; 30 :
30711: LD_ADDR_OWVAR 42
30715: PUSH
30716: LD_INT 5
30718: ST_TO_ADDR
30719: GO 30817
30721: LD_INT 30
30723: DOUBLE
30724: EQUAL
30725: IFTRUE 30729
30727: GO 30740
30729: POP
// bc_type := b_solar_power ; 31 :
30730: LD_ADDR_OWVAR 42
30734: PUSH
30735: LD_INT 27
30737: ST_TO_ADDR
30738: GO 30817
30740: LD_INT 31
30742: DOUBLE
30743: EQUAL
30744: IFTRUE 30748
30746: GO 30759
30748: POP
// bc_type := b_oil_power ; 32 :
30749: LD_ADDR_OWVAR 42
30753: PUSH
30754: LD_INT 26
30756: ST_TO_ADDR
30757: GO 30817
30759: LD_INT 32
30761: DOUBLE
30762: EQUAL
30763: IFTRUE 30767
30765: GO 30778
30767: POP
// bc_type := b_siberite_power ; 33 :
30768: LD_ADDR_OWVAR 42
30772: PUSH
30773: LD_INT 28
30775: ST_TO_ADDR
30776: GO 30817
30778: LD_INT 33
30780: DOUBLE
30781: EQUAL
30782: IFTRUE 30786
30784: GO 30797
30786: POP
// bc_type := b_oil_mine ; 34 :
30787: LD_ADDR_OWVAR 42
30791: PUSH
30792: LD_INT 29
30794: ST_TO_ADDR
30795: GO 30817
30797: LD_INT 34
30799: DOUBLE
30800: EQUAL
30801: IFTRUE 30805
30803: GO 30816
30805: POP
// bc_type := b_siberite_mine ; end ;
30806: LD_ADDR_OWVAR 42
30810: PUSH
30811: LD_INT 30
30813: ST_TO_ADDR
30814: GO 30817
30816: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30817: LD_ADDR_VAR 0 8
30821: PUSH
30822: LD_VAR 0 5
30826: PPUSH
30827: LD_VAR 0 6
30831: PPUSH
30832: LD_VAR 0 3
30836: PPUSH
30837: CALL_OW 47
30841: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30842: LD_OWVAR 42
30846: PUSH
30847: LD_INT 32
30849: PUSH
30850: LD_INT 33
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: IN
30857: IFFALSE 30873
// PlaceWeaponTurret ( b , weapon ) ;
30859: LD_VAR 0 8
30863: PPUSH
30864: LD_VAR 0 4
30868: PPUSH
30869: CALL_OW 431
// end ;
30873: LD_VAR 0 7
30877: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30878: LD_INT 0
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30884: LD_ADDR_VAR 0 4
30888: PUSH
30889: LD_INT 22
30891: PUSH
30892: LD_OWVAR 2
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: PUSH
30904: LD_INT 30
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 30
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: ST_TO_ADDR
// if not tmp then
30938: LD_VAR 0 4
30942: NOT
30943: IFFALSE 30947
// exit ;
30945: GO 31006
// for i in tmp do
30947: LD_ADDR_VAR 0 2
30951: PUSH
30952: LD_VAR 0 4
30956: PUSH
30957: FOR_IN
30958: IFFALSE 31004
// for j = 1 to 3 do
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: DOUBLE
30966: LD_INT 1
30968: DEC
30969: ST_TO_ADDR
30970: LD_INT 3
30972: PUSH
30973: FOR_TO
30974: IFFALSE 31000
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30976: LD_VAR 0 2
30980: PPUSH
30981: CALL_OW 274
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: LD_INT 99999
30993: PPUSH
30994: CALL_OW 277
30998: GO 30973
31000: POP
31001: POP
31002: GO 30957
31004: POP
31005: POP
// end ;
31006: LD_VAR 0 1
31010: RET
// export function hHackSetLevel10 ; var i , j ; begin
31011: LD_INT 0
31013: PPUSH
31014: PPUSH
31015: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31016: LD_ADDR_VAR 0 2
31020: PUSH
31021: LD_INT 21
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PPUSH
31031: CALL_OW 69
31035: PUSH
31036: FOR_IN
31037: IFFALSE 31089
// if IsSelected ( i ) then
31039: LD_VAR 0 2
31043: PPUSH
31044: CALL_OW 306
31048: IFFALSE 31087
// begin for j := 1 to 4 do
31050: LD_ADDR_VAR 0 3
31054: PUSH
31055: DOUBLE
31056: LD_INT 1
31058: DEC
31059: ST_TO_ADDR
31060: LD_INT 4
31062: PUSH
31063: FOR_TO
31064: IFFALSE 31085
// SetSkill ( i , j , 10 ) ;
31066: LD_VAR 0 2
31070: PPUSH
31071: LD_VAR 0 3
31075: PPUSH
31076: LD_INT 10
31078: PPUSH
31079: CALL_OW 237
31083: GO 31063
31085: POP
31086: POP
// end ;
31087: GO 31036
31089: POP
31090: POP
// end ;
31091: LD_VAR 0 1
31095: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31096: LD_INT 0
31098: PPUSH
31099: PPUSH
31100: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31101: LD_ADDR_VAR 0 2
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_OWVAR 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 21
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 69
31136: PUSH
31137: FOR_IN
31138: IFFALSE 31179
// begin for j := 1 to 4 do
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: DOUBLE
31146: LD_INT 1
31148: DEC
31149: ST_TO_ADDR
31150: LD_INT 4
31152: PUSH
31153: FOR_TO
31154: IFFALSE 31175
// SetSkill ( i , j , 10 ) ;
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: LD_INT 10
31168: PPUSH
31169: CALL_OW 237
31173: GO 31153
31175: POP
31176: POP
// end ;
31177: GO 31137
31179: POP
31180: POP
// end ;
31181: LD_VAR 0 1
31185: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31186: LD_INT 0
31188: PPUSH
// uc_side := your_side ;
31189: LD_ADDR_OWVAR 20
31193: PUSH
31194: LD_OWVAR 2
31198: ST_TO_ADDR
// uc_nation := nation ;
31199: LD_ADDR_OWVAR 21
31203: PUSH
31204: LD_VAR 0 1
31208: ST_TO_ADDR
// InitHc ;
31209: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31213: LD_INT 0
31215: PPUSH
31216: LD_VAR 0 2
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31230: LD_VAR 0 4
31234: PPUSH
31235: LD_VAR 0 5
31239: PPUSH
31240: CALL_OW 428
31244: PUSH
31245: LD_INT 0
31247: EQUAL
31248: IFFALSE 31272
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31250: CALL_OW 44
31254: PPUSH
31255: LD_VAR 0 4
31259: PPUSH
31260: LD_VAR 0 5
31264: PPUSH
31265: LD_INT 1
31267: PPUSH
31268: CALL_OW 48
// end ;
31272: LD_VAR 0 6
31276: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
// uc_side := your_side ;
31281: LD_ADDR_OWVAR 20
31285: PUSH
31286: LD_OWVAR 2
31290: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31291: LD_VAR 0 1
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 4
31307: PUSH
31308: LD_INT 5
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: IN
31318: IFFALSE 31330
// uc_nation := nation_american else
31320: LD_ADDR_OWVAR 21
31324: PUSH
31325: LD_INT 1
31327: ST_TO_ADDR
31328: GO 31373
// if chassis in [ 11 , 12 , 13 , 14 ] then
31330: LD_VAR 0 1
31334: PUSH
31335: LD_INT 11
31337: PUSH
31338: LD_INT 12
31340: PUSH
31341: LD_INT 13
31343: PUSH
31344: LD_INT 14
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: IN
31353: IFFALSE 31365
// uc_nation := nation_arabian else
31355: LD_ADDR_OWVAR 21
31359: PUSH
31360: LD_INT 2
31362: ST_TO_ADDR
31363: GO 31373
// uc_nation := nation_russian ;
31365: LD_ADDR_OWVAR 21
31369: PUSH
31370: LD_INT 3
31372: ST_TO_ADDR
// vc_chassis := chassis ;
31373: LD_ADDR_OWVAR 37
31377: PUSH
31378: LD_VAR 0 1
31382: ST_TO_ADDR
// vc_engine := engine ;
31383: LD_ADDR_OWVAR 39
31387: PUSH
31388: LD_VAR 0 2
31392: ST_TO_ADDR
// vc_control := control ;
31393: LD_ADDR_OWVAR 38
31397: PUSH
31398: LD_VAR 0 3
31402: ST_TO_ADDR
// vc_weapon := weapon ;
31403: LD_ADDR_OWVAR 40
31407: PUSH
31408: LD_VAR 0 4
31412: ST_TO_ADDR
// un := CreateVehicle ;
31413: LD_ADDR_VAR 0 8
31417: PUSH
31418: CALL_OW 45
31422: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31423: LD_VAR 0 8
31427: PPUSH
31428: LD_INT 0
31430: PPUSH
31431: LD_INT 5
31433: PPUSH
31434: CALL_OW 12
31438: PPUSH
31439: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31443: LD_VAR 0 8
31447: PPUSH
31448: LD_VAR 0 5
31452: PPUSH
31453: LD_VAR 0 6
31457: PPUSH
31458: LD_INT 1
31460: PPUSH
31461: CALL_OW 48
// end ;
31465: LD_VAR 0 7
31469: RET
// export hInvincible ; every 1 do
31470: GO 31472
31472: DISABLE
// hInvincible := [ ] ;
31473: LD_ADDR_EXP 109
31477: PUSH
31478: EMPTY
31479: ST_TO_ADDR
31480: END
// every 10 do var i ;
31481: GO 31483
31483: DISABLE
31484: LD_INT 0
31486: PPUSH
// begin enable ;
31487: ENABLE
// if not hInvincible then
31488: LD_EXP 109
31492: NOT
31493: IFFALSE 31497
// exit ;
31495: GO 31541
// for i in hInvincible do
31497: LD_ADDR_VAR 0 1
31501: PUSH
31502: LD_EXP 109
31506: PUSH
31507: FOR_IN
31508: IFFALSE 31539
// if GetLives ( i ) < 1000 then
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 256
31519: PUSH
31520: LD_INT 1000
31522: LESS
31523: IFFALSE 31537
// SetLives ( i , 1000 ) ;
31525: LD_VAR 0 1
31529: PPUSH
31530: LD_INT 1000
31532: PPUSH
31533: CALL_OW 234
31537: GO 31507
31539: POP
31540: POP
// end ;
31541: PPOPN 1
31543: END
// export function hHackInvincible ; var i ; begin
31544: LD_INT 0
31546: PPUSH
31547: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31548: LD_ADDR_VAR 0 2
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: LD_INT 21
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 21
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: PPUSH
31581: CALL_OW 69
31585: PUSH
31586: FOR_IN
31587: IFFALSE 31648
// if IsSelected ( i ) then
31589: LD_VAR 0 2
31593: PPUSH
31594: CALL_OW 306
31598: IFFALSE 31646
// begin if i in hInvincible then
31600: LD_VAR 0 2
31604: PUSH
31605: LD_EXP 109
31609: IN
31610: IFFALSE 31630
// hInvincible := hInvincible diff i else
31612: LD_ADDR_EXP 109
31616: PUSH
31617: LD_EXP 109
31621: PUSH
31622: LD_VAR 0 2
31626: DIFF
31627: ST_TO_ADDR
31628: GO 31646
// hInvincible := hInvincible union i ;
31630: LD_ADDR_EXP 109
31634: PUSH
31635: LD_EXP 109
31639: PUSH
31640: LD_VAR 0 2
31644: UNION
31645: ST_TO_ADDR
// end ;
31646: GO 31586
31648: POP
31649: POP
// end ;
31650: LD_VAR 0 1
31654: RET
// export function hHackInvisible ; var i , j ; begin
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 21
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PPUSH
31675: CALL_OW 69
31679: PUSH
31680: FOR_IN
31681: IFFALSE 31705
// if IsSelected ( i ) then
31683: LD_VAR 0 2
31687: PPUSH
31688: CALL_OW 306
31692: IFFALSE 31703
// ComForceInvisible ( i ) ;
31694: LD_VAR 0 2
31698: PPUSH
31699: CALL_OW 496
31703: GO 31680
31705: POP
31706: POP
// end ;
31707: LD_VAR 0 1
31711: RET
// export function hHackChangeYourSide ; begin
31712: LD_INT 0
31714: PPUSH
// if your_side = 8 then
31715: LD_OWVAR 2
31719: PUSH
31720: LD_INT 8
31722: EQUAL
31723: IFFALSE 31735
// your_side := 0 else
31725: LD_ADDR_OWVAR 2
31729: PUSH
31730: LD_INT 0
31732: ST_TO_ADDR
31733: GO 31749
// your_side := your_side + 1 ;
31735: LD_ADDR_OWVAR 2
31739: PUSH
31740: LD_OWVAR 2
31744: PUSH
31745: LD_INT 1
31747: PLUS
31748: ST_TO_ADDR
// end ;
31749: LD_VAR 0 1
31753: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31754: LD_INT 0
31756: PPUSH
31757: PPUSH
31758: PPUSH
// for i in all_units do
31759: LD_ADDR_VAR 0 2
31763: PUSH
31764: LD_OWVAR 3
31768: PUSH
31769: FOR_IN
31770: IFFALSE 31848
// if IsSelected ( i ) then
31772: LD_VAR 0 2
31776: PPUSH
31777: CALL_OW 306
31781: IFFALSE 31846
// begin j := GetSide ( i ) ;
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_VAR 0 2
31792: PPUSH
31793: CALL_OW 255
31797: ST_TO_ADDR
// if j = 8 then
31798: LD_VAR 0 3
31802: PUSH
31803: LD_INT 8
31805: EQUAL
31806: IFFALSE 31818
// j := 0 else
31808: LD_ADDR_VAR 0 3
31812: PUSH
31813: LD_INT 0
31815: ST_TO_ADDR
31816: GO 31832
// j := j + 1 ;
31818: LD_ADDR_VAR 0 3
31822: PUSH
31823: LD_VAR 0 3
31827: PUSH
31828: LD_INT 1
31830: PLUS
31831: ST_TO_ADDR
// SetSide ( i , j ) ;
31832: LD_VAR 0 2
31836: PPUSH
31837: LD_VAR 0 3
31841: PPUSH
31842: CALL_OW 235
// end ;
31846: GO 31769
31848: POP
31849: POP
// end ;
31850: LD_VAR 0 1
31854: RET
// export function hHackFog ; begin
31855: LD_INT 0
31857: PPUSH
// FogOff ( true ) ;
31858: LD_INT 1
31860: PPUSH
31861: CALL_OW 344
// end ;
31865: LD_VAR 0 1
31869: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31870: LD_INT 0
31872: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31873: LD_VAR 0 1
31877: PPUSH
31878: LD_VAR 0 2
31882: PPUSH
31883: LD_VAR 0 3
31887: PPUSH
31888: LD_INT 1
31890: PPUSH
31891: LD_INT 1
31893: PPUSH
31894: CALL_OW 483
// CenterOnXY ( x , y ) ;
31898: LD_VAR 0 2
31902: PPUSH
31903: LD_VAR 0 3
31907: PPUSH
31908: CALL_OW 84
// end ;
31912: LD_VAR 0 4
31916: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31917: LD_INT 0
31919: PPUSH
31920: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31921: LD_VAR 0 1
31925: NOT
31926: PUSH
31927: LD_VAR 0 2
31931: PPUSH
31932: LD_VAR 0 3
31936: PPUSH
31937: CALL_OW 488
31941: NOT
31942: OR
31943: PUSH
31944: LD_VAR 0 1
31948: PPUSH
31949: CALL_OW 266
31953: PUSH
31954: LD_INT 3
31956: NONEQUAL
31957: PUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL_OW 247
31967: PUSH
31968: LD_INT 1
31970: EQUAL
31971: NOT
31972: AND
31973: OR
31974: IFFALSE 31978
// exit ;
31976: GO 32127
// if GetType ( factory ) = unit_human then
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 247
31987: PUSH
31988: LD_INT 1
31990: EQUAL
31991: IFFALSE 32008
// factory := IsInUnit ( factory ) ;
31993: LD_ADDR_VAR 0 1
31997: PUSH
31998: LD_VAR 0 1
32002: PPUSH
32003: CALL_OW 310
32007: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 266
32017: PUSH
32018: LD_INT 3
32020: NONEQUAL
32021: IFFALSE 32025
// exit ;
32023: GO 32127
// if HexInfo ( x , y ) = factory then
32025: LD_VAR 0 2
32029: PPUSH
32030: LD_VAR 0 3
32034: PPUSH
32035: CALL_OW 428
32039: PUSH
32040: LD_VAR 0 1
32044: EQUAL
32045: IFFALSE 32072
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32047: LD_ADDR_EXP 110
32051: PUSH
32052: LD_EXP 110
32056: PPUSH
32057: LD_VAR 0 1
32061: PPUSH
32062: LD_INT 0
32064: PPUSH
32065: CALL_OW 1
32069: ST_TO_ADDR
32070: GO 32123
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32072: LD_ADDR_EXP 110
32076: PUSH
32077: LD_EXP 110
32081: PPUSH
32082: LD_VAR 0 1
32086: PPUSH
32087: LD_VAR 0 1
32091: PPUSH
32092: CALL_OW 255
32096: PUSH
32097: LD_VAR 0 1
32101: PUSH
32102: LD_VAR 0 2
32106: PUSH
32107: LD_VAR 0 3
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: PPUSH
32118: CALL_OW 1
32122: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32123: CALL 32132 0 0
// end ;
32127: LD_VAR 0 4
32131: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32132: LD_INT 0
32134: PPUSH
32135: PPUSH
32136: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32137: LD_STRING resetFactoryWaypoint();
32139: PPUSH
32140: CALL_OW 559
// if factoryWaypoints then
32144: LD_EXP 110
32148: IFFALSE 32274
// begin list := PrepareArray ( factoryWaypoints ) ;
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_EXP 110
32159: PPUSH
32160: CALL 78887 0 1
32164: ST_TO_ADDR
// for i := 1 to list do
32165: LD_ADDR_VAR 0 2
32169: PUSH
32170: DOUBLE
32171: LD_INT 1
32173: DEC
32174: ST_TO_ADDR
32175: LD_VAR 0 3
32179: PUSH
32180: FOR_TO
32181: IFFALSE 32272
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32183: LD_STRING setFactoryWaypointXY(
32185: PUSH
32186: LD_VAR 0 3
32190: PUSH
32191: LD_VAR 0 2
32195: ARRAY
32196: PUSH
32197: LD_INT 1
32199: ARRAY
32200: STR
32201: PUSH
32202: LD_STRING ,
32204: STR
32205: PUSH
32206: LD_VAR 0 3
32210: PUSH
32211: LD_VAR 0 2
32215: ARRAY
32216: PUSH
32217: LD_INT 2
32219: ARRAY
32220: STR
32221: PUSH
32222: LD_STRING ,
32224: STR
32225: PUSH
32226: LD_VAR 0 3
32230: PUSH
32231: LD_VAR 0 2
32235: ARRAY
32236: PUSH
32237: LD_INT 3
32239: ARRAY
32240: STR
32241: PUSH
32242: LD_STRING ,
32244: STR
32245: PUSH
32246: LD_VAR 0 3
32250: PUSH
32251: LD_VAR 0 2
32255: ARRAY
32256: PUSH
32257: LD_INT 4
32259: ARRAY
32260: STR
32261: PUSH
32262: LD_STRING )
32264: STR
32265: PPUSH
32266: CALL_OW 559
32270: GO 32180
32272: POP
32273: POP
// end ; end ;
32274: LD_VAR 0 1
32278: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32279: LD_INT 0
32281: PPUSH
// if HexInfo ( x , y ) = warehouse then
32282: LD_VAR 0 2
32286: PPUSH
32287: LD_VAR 0 3
32291: PPUSH
32292: CALL_OW 428
32296: PUSH
32297: LD_VAR 0 1
32301: EQUAL
32302: IFFALSE 32329
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32304: LD_ADDR_EXP 111
32308: PUSH
32309: LD_EXP 111
32313: PPUSH
32314: LD_VAR 0 1
32318: PPUSH
32319: LD_INT 0
32321: PPUSH
32322: CALL_OW 1
32326: ST_TO_ADDR
32327: GO 32380
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32329: LD_ADDR_EXP 111
32333: PUSH
32334: LD_EXP 111
32338: PPUSH
32339: LD_VAR 0 1
32343: PPUSH
32344: LD_VAR 0 1
32348: PPUSH
32349: CALL_OW 255
32353: PUSH
32354: LD_VAR 0 1
32358: PUSH
32359: LD_VAR 0 2
32363: PUSH
32364: LD_VAR 0 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: PPUSH
32375: CALL_OW 1
32379: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32380: CALL 32389 0 0
// end ;
32384: LD_VAR 0 4
32388: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
32393: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32394: LD_STRING resetWarehouseGatheringPoints();
32396: PPUSH
32397: CALL_OW 559
// if warehouseGatheringPoints then
32401: LD_EXP 111
32405: IFFALSE 32531
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_EXP 111
32416: PPUSH
32417: CALL 78887 0 1
32421: ST_TO_ADDR
// for i := 1 to list do
32422: LD_ADDR_VAR 0 2
32426: PUSH
32427: DOUBLE
32428: LD_INT 1
32430: DEC
32431: ST_TO_ADDR
32432: LD_VAR 0 3
32436: PUSH
32437: FOR_TO
32438: IFFALSE 32529
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32440: LD_STRING setWarehouseGatheringPointXY(
32442: PUSH
32443: LD_VAR 0 3
32447: PUSH
32448: LD_VAR 0 2
32452: ARRAY
32453: PUSH
32454: LD_INT 1
32456: ARRAY
32457: STR
32458: PUSH
32459: LD_STRING ,
32461: STR
32462: PUSH
32463: LD_VAR 0 3
32467: PUSH
32468: LD_VAR 0 2
32472: ARRAY
32473: PUSH
32474: LD_INT 2
32476: ARRAY
32477: STR
32478: PUSH
32479: LD_STRING ,
32481: STR
32482: PUSH
32483: LD_VAR 0 3
32487: PUSH
32488: LD_VAR 0 2
32492: ARRAY
32493: PUSH
32494: LD_INT 3
32496: ARRAY
32497: STR
32498: PUSH
32499: LD_STRING ,
32501: STR
32502: PUSH
32503: LD_VAR 0 3
32507: PUSH
32508: LD_VAR 0 2
32512: ARRAY
32513: PUSH
32514: LD_INT 4
32516: ARRAY
32517: STR
32518: PUSH
32519: LD_STRING )
32521: STR
32522: PPUSH
32523: CALL_OW 559
32527: GO 32437
32529: POP
32530: POP
// end ; end ;
32531: LD_VAR 0 1
32535: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32536: LD_EXP 111
32540: IFFALSE 33225
32542: GO 32544
32544: DISABLE
32545: LD_INT 0
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
// begin enable ;
32556: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_EXP 111
32566: PPUSH
32567: CALL 78887 0 1
32571: ST_TO_ADDR
// if not list then
32572: LD_VAR 0 3
32576: NOT
32577: IFFALSE 32581
// exit ;
32579: GO 33225
// for i := 1 to list do
32581: LD_ADDR_VAR 0 1
32585: PUSH
32586: DOUBLE
32587: LD_INT 1
32589: DEC
32590: ST_TO_ADDR
32591: LD_VAR 0 3
32595: PUSH
32596: FOR_TO
32597: IFFALSE 33223
// begin depot := list [ i ] [ 2 ] ;
32599: LD_ADDR_VAR 0 8
32603: PUSH
32604: LD_VAR 0 3
32608: PUSH
32609: LD_VAR 0 1
32613: ARRAY
32614: PUSH
32615: LD_INT 2
32617: ARRAY
32618: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32619: LD_ADDR_VAR 0 5
32623: PUSH
32624: LD_VAR 0 3
32628: PUSH
32629: LD_VAR 0 1
32633: ARRAY
32634: PUSH
32635: LD_INT 1
32637: ARRAY
32638: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32639: LD_VAR 0 8
32643: PPUSH
32644: CALL_OW 301
32648: PUSH
32649: LD_VAR 0 5
32653: PUSH
32654: LD_VAR 0 8
32658: PPUSH
32659: CALL_OW 255
32663: NONEQUAL
32664: OR
32665: IFFALSE 32694
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32667: LD_ADDR_EXP 111
32671: PUSH
32672: LD_EXP 111
32676: PPUSH
32677: LD_VAR 0 8
32681: PPUSH
32682: LD_INT 0
32684: PPUSH
32685: CALL_OW 1
32689: ST_TO_ADDR
// exit ;
32690: POP
32691: POP
32692: GO 33225
// end ; x := list [ i ] [ 3 ] ;
32694: LD_ADDR_VAR 0 6
32698: PUSH
32699: LD_VAR 0 3
32703: PUSH
32704: LD_VAR 0 1
32708: ARRAY
32709: PUSH
32710: LD_INT 3
32712: ARRAY
32713: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32714: LD_ADDR_VAR 0 7
32718: PUSH
32719: LD_VAR 0 3
32723: PUSH
32724: LD_VAR 0 1
32728: ARRAY
32729: PUSH
32730: LD_INT 4
32732: ARRAY
32733: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32734: LD_ADDR_VAR 0 9
32738: PUSH
32739: LD_VAR 0 6
32743: PPUSH
32744: LD_VAR 0 7
32748: PPUSH
32749: LD_INT 16
32751: PPUSH
32752: CALL 77475 0 3
32756: ST_TO_ADDR
// if not cratesNearbyPoint then
32757: LD_VAR 0 9
32761: NOT
32762: IFFALSE 32768
// exit ;
32764: POP
32765: POP
32766: GO 33225
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32768: LD_ADDR_VAR 0 4
32772: PUSH
32773: LD_INT 22
32775: PUSH
32776: LD_VAR 0 5
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: LD_INT 60
32790: PUSH
32791: EMPTY
32792: LIST
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 91
32800: PUSH
32801: LD_VAR 0 8
32805: PUSH
32806: LD_INT 6
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 25
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 25
32829: PUSH
32830: LD_INT 16
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: PPUSH
32848: CALL_OW 69
32852: PUSH
32853: LD_VAR 0 8
32857: PPUSH
32858: CALL_OW 313
32862: PPUSH
32863: LD_INT 3
32865: PUSH
32866: LD_INT 60
32868: PUSH
32869: EMPTY
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 25
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 25
32891: PUSH
32892: LD_INT 16
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PPUSH
32908: CALL_OW 72
32912: UNION
32913: ST_TO_ADDR
// if tmp then
32914: LD_VAR 0 4
32918: IFFALSE 32998
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32920: LD_ADDR_VAR 0 4
32924: PUSH
32925: LD_VAR 0 4
32929: PPUSH
32930: LD_INT 3
32932: PPUSH
32933: CALL 75444 0 2
32937: ST_TO_ADDR
// for j in tmp do
32938: LD_ADDR_VAR 0 2
32942: PUSH
32943: LD_VAR 0 4
32947: PUSH
32948: FOR_IN
32949: IFFALSE 32992
// begin if IsInUnit ( j ) then
32951: LD_VAR 0 2
32955: PPUSH
32956: CALL_OW 310
32960: IFFALSE 32971
// ComExit ( j ) ;
32962: LD_VAR 0 2
32966: PPUSH
32967: CALL 75527 0 1
// AddComCollect ( j , x , y ) ;
32971: LD_VAR 0 2
32975: PPUSH
32976: LD_VAR 0 6
32980: PPUSH
32981: LD_VAR 0 7
32985: PPUSH
32986: CALL_OW 177
// end ;
32990: GO 32948
32992: POP
32993: POP
// exit ;
32994: POP
32995: POP
32996: GO 33225
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32998: LD_ADDR_VAR 0 4
33002: PUSH
33003: LD_INT 22
33005: PUSH
33006: LD_VAR 0 5
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 91
33017: PUSH
33018: LD_VAR 0 8
33022: PUSH
33023: LD_INT 8
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 34
33036: PUSH
33037: LD_INT 12
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 34
33046: PUSH
33047: LD_INT 51
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 34
33056: PUSH
33057: LD_INT 32
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 34
33066: PUSH
33067: LD_INT 89
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: PPUSH
33086: CALL_OW 69
33090: ST_TO_ADDR
// if tmp then
33091: LD_VAR 0 4
33095: IFFALSE 33221
// begin for j in tmp do
33097: LD_ADDR_VAR 0 2
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: FOR_IN
33108: IFFALSE 33219
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33110: LD_VAR 0 2
33114: PPUSH
33115: CALL_OW 262
33119: PUSH
33120: LD_INT 3
33122: EQUAL
33123: PUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: CALL_OW 261
33133: PUSH
33134: LD_INT 20
33136: GREATER
33137: OR
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: CALL_OW 314
33148: NOT
33149: AND
33150: PUSH
33151: LD_VAR 0 2
33155: PPUSH
33156: CALL_OW 263
33160: PUSH
33161: LD_INT 1
33163: NONEQUAL
33164: PUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: CALL_OW 311
33174: OR
33175: AND
33176: IFFALSE 33217
// begin ComCollect ( j , x , y ) ;
33178: LD_VAR 0 2
33182: PPUSH
33183: LD_VAR 0 6
33187: PPUSH
33188: LD_VAR 0 7
33192: PPUSH
33193: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33197: LD_VAR 0 2
33201: PPUSH
33202: LD_VAR 0 8
33206: PPUSH
33207: CALL_OW 172
// exit ;
33211: POP
33212: POP
33213: POP
33214: POP
33215: GO 33225
// end ;
33217: GO 33107
33219: POP
33220: POP
// end ; end ;
33221: GO 32596
33223: POP
33224: POP
// end ; end_of_file
33225: PPOPN 9
33227: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33228: LD_VAR 0 1
33232: PUSH
33233: LD_INT 200
33235: DOUBLE
33236: GREATEREQUAL
33237: IFFALSE 33245
33239: LD_INT 299
33241: DOUBLE
33242: LESSEQUAL
33243: IFTRUE 33247
33245: GO 33279
33247: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33248: LD_VAR 0 1
33252: PPUSH
33253: LD_VAR 0 2
33257: PPUSH
33258: LD_VAR 0 3
33262: PPUSH
33263: LD_VAR 0 4
33267: PPUSH
33268: LD_VAR 0 5
33272: PPUSH
33273: CALL 33767 0 5
33277: GO 33356
33279: LD_INT 300
33281: DOUBLE
33282: GREATEREQUAL
33283: IFFALSE 33291
33285: LD_INT 399
33287: DOUBLE
33288: LESSEQUAL
33289: IFTRUE 33293
33291: GO 33355
33293: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33294: LD_VAR 0 1
33298: PPUSH
33299: LD_VAR 0 2
33303: PPUSH
33304: LD_VAR 0 3
33308: PPUSH
33309: LD_VAR 0 4
33313: PPUSH
33314: LD_VAR 0 5
33318: PPUSH
33319: LD_VAR 0 6
33323: PPUSH
33324: LD_VAR 0 7
33328: PPUSH
33329: LD_VAR 0 8
33333: PPUSH
33334: LD_VAR 0 9
33338: PPUSH
33339: LD_VAR 0 10
33343: PPUSH
33344: LD_VAR 0 11
33348: PPUSH
33349: CALL 29937 0 11
33353: GO 33356
33355: POP
// end ;
33356: PPOPN 11
33358: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33359: LD_VAR 0 1
33363: PPUSH
33364: LD_VAR 0 2
33368: PPUSH
33369: LD_VAR 0 3
33373: PPUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: LD_VAR 0 5
33383: PPUSH
33384: CALL 33503 0 5
// end ; end_of_file
33388: PPOPN 5
33390: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33391: LD_INT 0
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 264
33406: PUSH
33407: LD_INT 91
33409: EQUAL
33410: IFFALSE 33482
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33412: LD_INT 68
33414: PPUSH
33415: LD_VAR 0 1
33419: PPUSH
33420: CALL_OW 255
33424: PPUSH
33425: CALL_OW 321
33429: PUSH
33430: LD_INT 2
33432: EQUAL
33433: IFFALSE 33445
// eff := 70 else
33435: LD_ADDR_VAR 0 4
33439: PUSH
33440: LD_INT 70
33442: ST_TO_ADDR
33443: GO 33453
// eff := 30 ;
33445: LD_ADDR_VAR 0 4
33449: PUSH
33450: LD_INT 30
33452: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33453: LD_VAR 0 1
33457: PPUSH
33458: CALL_OW 250
33462: PPUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: CALL_OW 251
33472: PPUSH
33473: LD_VAR 0 4
33477: PPUSH
33478: CALL_OW 495
// end ; end ;
33482: LD_VAR 0 2
33486: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33487: LD_INT 0
33489: PPUSH
// end ;
33490: LD_VAR 0 4
33494: RET
// export function SOS_Command ( cmd ) ; begin
33495: LD_INT 0
33497: PPUSH
// end ;
33498: LD_VAR 0 2
33502: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33503: LD_INT 0
33505: PPUSH
// end ;
33506: LD_VAR 0 6
33510: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
// if not vehicle or not factory then
33515: LD_VAR 0 1
33519: NOT
33520: PUSH
33521: LD_VAR 0 2
33525: NOT
33526: OR
33527: IFFALSE 33531
// exit ;
33529: GO 33762
// if factoryWaypoints >= factory then
33531: LD_EXP 110
33535: PUSH
33536: LD_VAR 0 2
33540: GREATEREQUAL
33541: IFFALSE 33762
// if factoryWaypoints [ factory ] then
33543: LD_EXP 110
33547: PUSH
33548: LD_VAR 0 2
33552: ARRAY
33553: IFFALSE 33762
// begin if GetControl ( vehicle ) = control_manual then
33555: LD_VAR 0 1
33559: PPUSH
33560: CALL_OW 263
33564: PUSH
33565: LD_INT 1
33567: EQUAL
33568: IFFALSE 33649
// begin driver := IsDrivenBy ( vehicle ) ;
33570: LD_ADDR_VAR 0 4
33574: PUSH
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 311
33584: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33585: LD_VAR 0 4
33589: PPUSH
33590: LD_EXP 110
33594: PUSH
33595: LD_VAR 0 2
33599: ARRAY
33600: PUSH
33601: LD_INT 3
33603: ARRAY
33604: PPUSH
33605: LD_EXP 110
33609: PUSH
33610: LD_VAR 0 2
33614: ARRAY
33615: PUSH
33616: LD_INT 4
33618: ARRAY
33619: PPUSH
33620: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33624: LD_VAR 0 4
33628: PPUSH
33629: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33633: LD_VAR 0 4
33637: PPUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: CALL_OW 180
// end else
33647: GO 33762
// if GetControl ( vehicle ) = control_remote then
33649: LD_VAR 0 1
33653: PPUSH
33654: CALL_OW 263
33658: PUSH
33659: LD_INT 2
33661: EQUAL
33662: IFFALSE 33723
// begin wait ( 0 0$2 ) ;
33664: LD_INT 70
33666: PPUSH
33667: CALL_OW 67
// if Connect ( vehicle ) then
33671: LD_VAR 0 1
33675: PPUSH
33676: CALL 45786 0 1
33680: IFFALSE 33721
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33682: LD_VAR 0 1
33686: PPUSH
33687: LD_EXP 110
33691: PUSH
33692: LD_VAR 0 2
33696: ARRAY
33697: PUSH
33698: LD_INT 3
33700: ARRAY
33701: PPUSH
33702: LD_EXP 110
33706: PUSH
33707: LD_VAR 0 2
33711: ARRAY
33712: PUSH
33713: LD_INT 4
33715: ARRAY
33716: PPUSH
33717: CALL_OW 171
// end else
33721: GO 33762
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_EXP 110
33732: PUSH
33733: LD_VAR 0 2
33737: ARRAY
33738: PUSH
33739: LD_INT 3
33741: ARRAY
33742: PPUSH
33743: LD_EXP 110
33747: PUSH
33748: LD_VAR 0 2
33752: ARRAY
33753: PUSH
33754: LD_INT 4
33756: ARRAY
33757: PPUSH
33758: CALL_OW 171
// end ; end ;
33762: LD_VAR 0 3
33766: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33767: LD_INT 0
33769: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33770: LD_VAR 0 1
33774: PUSH
33775: LD_INT 250
33777: EQUAL
33778: PUSH
33779: LD_VAR 0 2
33783: PPUSH
33784: CALL_OW 264
33788: PUSH
33789: LD_INT 81
33791: EQUAL
33792: AND
33793: IFFALSE 33814
// MinerPlaceMine ( unit , x , y ) ;
33795: LD_VAR 0 2
33799: PPUSH
33800: LD_VAR 0 4
33804: PPUSH
33805: LD_VAR 0 5
33809: PPUSH
33810: CALL 36199 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33814: LD_VAR 0 1
33818: PUSH
33819: LD_INT 251
33821: EQUAL
33822: PUSH
33823: LD_VAR 0 2
33827: PPUSH
33828: CALL_OW 264
33832: PUSH
33833: LD_INT 81
33835: EQUAL
33836: AND
33837: IFFALSE 33858
// MinerDetonateMine ( unit , x , y ) ;
33839: LD_VAR 0 2
33843: PPUSH
33844: LD_VAR 0 4
33848: PPUSH
33849: LD_VAR 0 5
33853: PPUSH
33854: CALL 36474 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33858: LD_VAR 0 1
33862: PUSH
33863: LD_INT 252
33865: EQUAL
33866: PUSH
33867: LD_VAR 0 2
33871: PPUSH
33872: CALL_OW 264
33876: PUSH
33877: LD_INT 81
33879: EQUAL
33880: AND
33881: IFFALSE 33902
// MinerCreateMinefield ( unit , x , y ) ;
33883: LD_VAR 0 2
33887: PPUSH
33888: LD_VAR 0 4
33892: PPUSH
33893: LD_VAR 0 5
33897: PPUSH
33898: CALL 36891 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33902: LD_VAR 0 1
33906: PUSH
33907: LD_INT 253
33909: EQUAL
33910: PUSH
33911: LD_VAR 0 2
33915: PPUSH
33916: CALL_OW 257
33920: PUSH
33921: LD_INT 5
33923: EQUAL
33924: AND
33925: IFFALSE 33946
// ComBinocular ( unit , x , y ) ;
33927: LD_VAR 0 2
33931: PPUSH
33932: LD_VAR 0 4
33936: PPUSH
33937: LD_VAR 0 5
33941: PPUSH
33942: CALL 37260 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33946: LD_VAR 0 1
33950: PUSH
33951: LD_INT 254
33953: EQUAL
33954: PUSH
33955: LD_VAR 0 2
33959: PPUSH
33960: CALL_OW 264
33964: PUSH
33965: LD_INT 99
33967: EQUAL
33968: AND
33969: PUSH
33970: LD_VAR 0 3
33974: PPUSH
33975: CALL_OW 263
33979: PUSH
33980: LD_INT 3
33982: EQUAL
33983: AND
33984: IFFALSE 34000
// HackDestroyVehicle ( unit , selectedUnit ) ;
33986: LD_VAR 0 2
33990: PPUSH
33991: LD_VAR 0 3
33995: PPUSH
33996: CALL 35563 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34000: LD_VAR 0 1
34004: PUSH
34005: LD_INT 255
34007: EQUAL
34008: PUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: CALL_OW 264
34018: PUSH
34019: LD_INT 14
34021: PUSH
34022: LD_INT 53
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: IN
34029: AND
34030: PUSH
34031: LD_VAR 0 4
34035: PPUSH
34036: LD_VAR 0 5
34040: PPUSH
34041: CALL_OW 488
34045: AND
34046: IFFALSE 34070
// CutTreeXYR ( unit , x , y , 12 ) ;
34048: LD_VAR 0 2
34052: PPUSH
34053: LD_VAR 0 4
34057: PPUSH
34058: LD_VAR 0 5
34062: PPUSH
34063: LD_INT 12
34065: PPUSH
34066: CALL 34133 0 4
// if cmd = 256 then
34070: LD_VAR 0 1
34074: PUSH
34075: LD_INT 256
34077: EQUAL
34078: IFFALSE 34099
// SetFactoryWaypoint ( unit , x , y ) ;
34080: LD_VAR 0 2
34084: PPUSH
34085: LD_VAR 0 4
34089: PPUSH
34090: LD_VAR 0 5
34094: PPUSH
34095: CALL 31917 0 3
// if cmd = 257 then
34099: LD_VAR 0 1
34103: PUSH
34104: LD_INT 257
34106: EQUAL
34107: IFFALSE 34128
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34109: LD_VAR 0 2
34113: PPUSH
34114: LD_VAR 0 4
34118: PPUSH
34119: LD_VAR 0 5
34123: PPUSH
34124: CALL 32279 0 3
// end ;
34128: LD_VAR 0 6
34132: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34133: LD_INT 0
34135: PPUSH
34136: PPUSH
34137: PPUSH
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34144: LD_VAR 0 1
34148: NOT
34149: PUSH
34150: LD_VAR 0 2
34154: PPUSH
34155: LD_VAR 0 3
34159: PPUSH
34160: CALL_OW 488
34164: NOT
34165: OR
34166: PUSH
34167: LD_VAR 0 4
34171: NOT
34172: OR
34173: IFFALSE 34177
// exit ;
34175: GO 34517
// list := [ ] ;
34177: LD_ADDR_VAR 0 13
34181: PUSH
34182: EMPTY
34183: ST_TO_ADDR
// if x - r < 0 then
34184: LD_VAR 0 2
34188: PUSH
34189: LD_VAR 0 4
34193: MINUS
34194: PUSH
34195: LD_INT 0
34197: LESS
34198: IFFALSE 34210
// min_x := 0 else
34200: LD_ADDR_VAR 0 7
34204: PUSH
34205: LD_INT 0
34207: ST_TO_ADDR
34208: GO 34226
// min_x := x - r ;
34210: LD_ADDR_VAR 0 7
34214: PUSH
34215: LD_VAR 0 2
34219: PUSH
34220: LD_VAR 0 4
34224: MINUS
34225: ST_TO_ADDR
// if y - r < 0 then
34226: LD_VAR 0 3
34230: PUSH
34231: LD_VAR 0 4
34235: MINUS
34236: PUSH
34237: LD_INT 0
34239: LESS
34240: IFFALSE 34252
// min_y := 0 else
34242: LD_ADDR_VAR 0 8
34246: PUSH
34247: LD_INT 0
34249: ST_TO_ADDR
34250: GO 34268
// min_y := y - r ;
34252: LD_ADDR_VAR 0 8
34256: PUSH
34257: LD_VAR 0 3
34261: PUSH
34262: LD_VAR 0 4
34266: MINUS
34267: ST_TO_ADDR
// max_x := x + r ;
34268: LD_ADDR_VAR 0 9
34272: PUSH
34273: LD_VAR 0 2
34277: PUSH
34278: LD_VAR 0 4
34282: PLUS
34283: ST_TO_ADDR
// max_y := y + r ;
34284: LD_ADDR_VAR 0 10
34288: PUSH
34289: LD_VAR 0 3
34293: PUSH
34294: LD_VAR 0 4
34298: PLUS
34299: ST_TO_ADDR
// for _x = min_x to max_x do
34300: LD_ADDR_VAR 0 11
34304: PUSH
34305: DOUBLE
34306: LD_VAR 0 7
34310: DEC
34311: ST_TO_ADDR
34312: LD_VAR 0 9
34316: PUSH
34317: FOR_TO
34318: IFFALSE 34435
// for _y = min_y to max_y do
34320: LD_ADDR_VAR 0 12
34324: PUSH
34325: DOUBLE
34326: LD_VAR 0 8
34330: DEC
34331: ST_TO_ADDR
34332: LD_VAR 0 10
34336: PUSH
34337: FOR_TO
34338: IFFALSE 34431
// begin if not ValidHex ( _x , _y ) then
34340: LD_VAR 0 11
34344: PPUSH
34345: LD_VAR 0 12
34349: PPUSH
34350: CALL_OW 488
34354: NOT
34355: IFFALSE 34359
// continue ;
34357: GO 34337
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34359: LD_VAR 0 11
34363: PPUSH
34364: LD_VAR 0 12
34368: PPUSH
34369: CALL_OW 351
34373: PUSH
34374: LD_VAR 0 11
34378: PPUSH
34379: LD_VAR 0 12
34383: PPUSH
34384: CALL_OW 554
34388: AND
34389: IFFALSE 34429
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34391: LD_ADDR_VAR 0 13
34395: PUSH
34396: LD_VAR 0 13
34400: PPUSH
34401: LD_VAR 0 13
34405: PUSH
34406: LD_INT 1
34408: PLUS
34409: PPUSH
34410: LD_VAR 0 11
34414: PUSH
34415: LD_VAR 0 12
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PPUSH
34424: CALL_OW 2
34428: ST_TO_ADDR
// end ;
34429: GO 34337
34431: POP
34432: POP
34433: GO 34317
34435: POP
34436: POP
// if not list then
34437: LD_VAR 0 13
34441: NOT
34442: IFFALSE 34446
// exit ;
34444: GO 34517
// for i in list do
34446: LD_ADDR_VAR 0 6
34450: PUSH
34451: LD_VAR 0 13
34455: PUSH
34456: FOR_IN
34457: IFFALSE 34515
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_STRING M
34466: PUSH
34467: LD_VAR 0 6
34471: PUSH
34472: LD_INT 1
34474: ARRAY
34475: PUSH
34476: LD_VAR 0 6
34480: PUSH
34481: LD_INT 2
34483: ARRAY
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: PUSH
34506: EMPTY
34507: LIST
34508: PPUSH
34509: CALL_OW 447
34513: GO 34456
34515: POP
34516: POP
// end ;
34517: LD_VAR 0 5
34521: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34522: LD_EXP 113
34526: NOT
34527: IFFALSE 34577
34529: GO 34531
34531: DISABLE
// begin initHack := true ;
34532: LD_ADDR_EXP 113
34536: PUSH
34537: LD_INT 1
34539: ST_TO_ADDR
// hackTanks := [ ] ;
34540: LD_ADDR_EXP 114
34544: PUSH
34545: EMPTY
34546: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34547: LD_ADDR_EXP 115
34551: PUSH
34552: EMPTY
34553: ST_TO_ADDR
// hackLimit := 3 ;
34554: LD_ADDR_EXP 116
34558: PUSH
34559: LD_INT 3
34561: ST_TO_ADDR
// hackDist := 12 ;
34562: LD_ADDR_EXP 117
34566: PUSH
34567: LD_INT 12
34569: ST_TO_ADDR
// hackCounter := [ ] ;
34570: LD_ADDR_EXP 118
34574: PUSH
34575: EMPTY
34576: ST_TO_ADDR
// end ;
34577: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34578: LD_EXP 113
34582: PUSH
34583: LD_INT 34
34585: PUSH
34586: LD_INT 99
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PPUSH
34593: CALL_OW 69
34597: AND
34598: IFFALSE 34851
34600: GO 34602
34602: DISABLE
34603: LD_INT 0
34605: PPUSH
34606: PPUSH
// begin enable ;
34607: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34608: LD_ADDR_VAR 0 1
34612: PUSH
34613: LD_INT 34
34615: PUSH
34616: LD_INT 99
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PPUSH
34623: CALL_OW 69
34627: PUSH
34628: FOR_IN
34629: IFFALSE 34849
// begin if not i in hackTanks then
34631: LD_VAR 0 1
34635: PUSH
34636: LD_EXP 114
34640: IN
34641: NOT
34642: IFFALSE 34725
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34644: LD_ADDR_EXP 114
34648: PUSH
34649: LD_EXP 114
34653: PPUSH
34654: LD_EXP 114
34658: PUSH
34659: LD_INT 1
34661: PLUS
34662: PPUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 1
34672: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34673: LD_ADDR_EXP 115
34677: PUSH
34678: LD_EXP 115
34682: PPUSH
34683: LD_EXP 115
34687: PUSH
34688: LD_INT 1
34690: PLUS
34691: PPUSH
34692: EMPTY
34693: PPUSH
34694: CALL_OW 1
34698: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34699: LD_ADDR_EXP 118
34703: PUSH
34704: LD_EXP 118
34708: PPUSH
34709: LD_EXP 118
34713: PUSH
34714: LD_INT 1
34716: PLUS
34717: PPUSH
34718: EMPTY
34719: PPUSH
34720: CALL_OW 1
34724: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34725: LD_VAR 0 1
34729: PPUSH
34730: CALL_OW 302
34734: NOT
34735: IFFALSE 34748
// begin HackUnlinkAll ( i ) ;
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL 34854 0 1
// continue ;
34746: GO 34628
// end ; HackCheckCapturedStatus ( i ) ;
34748: LD_VAR 0 1
34752: PPUSH
34753: CALL 35297 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34757: LD_ADDR_VAR 0 2
34761: PUSH
34762: LD_INT 81
34764: PUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 255
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 33
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 91
34791: PUSH
34792: LD_VAR 0 1
34796: PUSH
34797: LD_EXP 117
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 50
34809: PUSH
34810: EMPTY
34811: LIST
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: PPUSH
34819: CALL_OW 69
34823: ST_TO_ADDR
// if not tmp then
34824: LD_VAR 0 2
34828: NOT
34829: IFFALSE 34833
// continue ;
34831: GO 34628
// HackLink ( i , tmp ) ;
34833: LD_VAR 0 1
34837: PPUSH
34838: LD_VAR 0 2
34842: PPUSH
34843: CALL 34990 0 2
// end ;
34847: GO 34628
34849: POP
34850: POP
// end ;
34851: PPOPN 2
34853: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34854: LD_INT 0
34856: PPUSH
34857: PPUSH
34858: PPUSH
// if not hack in hackTanks then
34859: LD_VAR 0 1
34863: PUSH
34864: LD_EXP 114
34868: IN
34869: NOT
34870: IFFALSE 34874
// exit ;
34872: GO 34985
// index := GetElementIndex ( hackTanks , hack ) ;
34874: LD_ADDR_VAR 0 4
34878: PUSH
34879: LD_EXP 114
34883: PPUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL 42602 0 2
34893: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34894: LD_EXP 115
34898: PUSH
34899: LD_VAR 0 4
34903: ARRAY
34904: IFFALSE 34985
// begin for i in hackTanksCaptured [ index ] do
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_EXP 115
34915: PUSH
34916: LD_VAR 0 4
34920: ARRAY
34921: PUSH
34922: FOR_IN
34923: IFFALSE 34949
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34925: LD_VAR 0 3
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: PPUSH
34934: LD_VAR 0 3
34938: PUSH
34939: LD_INT 2
34941: ARRAY
34942: PPUSH
34943: CALL_OW 235
34947: GO 34922
34949: POP
34950: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34951: LD_ADDR_EXP 115
34955: PUSH
34956: LD_EXP 115
34960: PPUSH
34961: LD_VAR 0 4
34965: PPUSH
34966: EMPTY
34967: PPUSH
34968: CALL_OW 1
34972: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34973: LD_VAR 0 1
34977: PPUSH
34978: LD_INT 0
34980: PPUSH
34981: CALL_OW 505
// end ; end ;
34985: LD_VAR 0 2
34989: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34990: LD_INT 0
34992: PPUSH
34993: PPUSH
34994: PPUSH
// if not hack in hackTanks or not vehicles then
34995: LD_VAR 0 1
34999: PUSH
35000: LD_EXP 114
35004: IN
35005: NOT
35006: PUSH
35007: LD_VAR 0 2
35011: NOT
35012: OR
35013: IFFALSE 35017
// exit ;
35015: GO 35292
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35017: LD_ADDR_VAR 0 2
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: LD_INT 1
35034: PPUSH
35035: LD_INT 1
35037: PPUSH
35038: CALL 43252 0 4
35042: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35043: LD_ADDR_VAR 0 5
35047: PUSH
35048: LD_EXP 114
35052: PPUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL 42602 0 2
35062: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35063: LD_EXP 115
35067: PUSH
35068: LD_VAR 0 5
35072: ARRAY
35073: PUSH
35074: LD_EXP 116
35078: LESS
35079: IFFALSE 35268
// begin for i := 1 to vehicles do
35081: LD_ADDR_VAR 0 4
35085: PUSH
35086: DOUBLE
35087: LD_INT 1
35089: DEC
35090: ST_TO_ADDR
35091: LD_VAR 0 2
35095: PUSH
35096: FOR_TO
35097: IFFALSE 35266
// begin if hackTanksCaptured [ index ] = hackLimit then
35099: LD_EXP 115
35103: PUSH
35104: LD_VAR 0 5
35108: ARRAY
35109: PUSH
35110: LD_EXP 116
35114: EQUAL
35115: IFFALSE 35119
// break ;
35117: GO 35266
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35119: LD_ADDR_EXP 118
35123: PUSH
35124: LD_EXP 118
35128: PPUSH
35129: LD_VAR 0 5
35133: PPUSH
35134: LD_EXP 118
35138: PUSH
35139: LD_VAR 0 5
35143: ARRAY
35144: PUSH
35145: LD_INT 1
35147: PLUS
35148: PPUSH
35149: CALL_OW 1
35153: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35154: LD_ADDR_EXP 115
35158: PUSH
35159: LD_EXP 115
35163: PPUSH
35164: LD_VAR 0 5
35168: PUSH
35169: LD_EXP 115
35173: PUSH
35174: LD_VAR 0 5
35178: ARRAY
35179: PUSH
35180: LD_INT 1
35182: PLUS
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PPUSH
35188: LD_VAR 0 2
35192: PUSH
35193: LD_VAR 0 4
35197: ARRAY
35198: PUSH
35199: LD_VAR 0 2
35203: PUSH
35204: LD_VAR 0 4
35208: ARRAY
35209: PPUSH
35210: CALL_OW 255
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PPUSH
35219: CALL 42817 0 3
35223: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35224: LD_VAR 0 2
35228: PUSH
35229: LD_VAR 0 4
35233: ARRAY
35234: PPUSH
35235: LD_VAR 0 1
35239: PPUSH
35240: CALL_OW 255
35244: PPUSH
35245: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35249: LD_VAR 0 2
35253: PUSH
35254: LD_VAR 0 4
35258: ARRAY
35259: PPUSH
35260: CALL_OW 141
// end ;
35264: GO 35096
35266: POP
35267: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35268: LD_VAR 0 1
35272: PPUSH
35273: LD_EXP 115
35277: PUSH
35278: LD_VAR 0 5
35282: ARRAY
35283: PUSH
35284: LD_INT 0
35286: PLUS
35287: PPUSH
35288: CALL_OW 505
// end ;
35292: LD_VAR 0 3
35296: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35297: LD_INT 0
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
// if not hack in hackTanks then
35303: LD_VAR 0 1
35307: PUSH
35308: LD_EXP 114
35312: IN
35313: NOT
35314: IFFALSE 35318
// exit ;
35316: GO 35558
// index := GetElementIndex ( hackTanks , hack ) ;
35318: LD_ADDR_VAR 0 4
35322: PUSH
35323: LD_EXP 114
35327: PPUSH
35328: LD_VAR 0 1
35332: PPUSH
35333: CALL 42602 0 2
35337: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: DOUBLE
35344: LD_EXP 115
35348: PUSH
35349: LD_VAR 0 4
35353: ARRAY
35354: INC
35355: ST_TO_ADDR
35356: LD_INT 1
35358: PUSH
35359: FOR_DOWNTO
35360: IFFALSE 35532
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35362: LD_ADDR_VAR 0 5
35366: PUSH
35367: LD_EXP 115
35371: PUSH
35372: LD_VAR 0 4
35376: ARRAY
35377: PUSH
35378: LD_VAR 0 3
35382: ARRAY
35383: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35384: LD_VAR 0 5
35388: PUSH
35389: LD_INT 1
35391: ARRAY
35392: PPUSH
35393: CALL_OW 302
35397: NOT
35398: PUSH
35399: LD_VAR 0 5
35403: PUSH
35404: LD_INT 1
35406: ARRAY
35407: PPUSH
35408: CALL_OW 255
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 255
35422: NONEQUAL
35423: OR
35424: IFFALSE 35530
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35426: LD_VAR 0 5
35430: PUSH
35431: LD_INT 1
35433: ARRAY
35434: PPUSH
35435: CALL_OW 305
35439: PUSH
35440: LD_VAR 0 5
35444: PUSH
35445: LD_INT 1
35447: ARRAY
35448: PPUSH
35449: CALL_OW 255
35453: PUSH
35454: LD_VAR 0 1
35458: PPUSH
35459: CALL_OW 255
35463: EQUAL
35464: AND
35465: IFFALSE 35489
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35467: LD_VAR 0 5
35471: PUSH
35472: LD_INT 1
35474: ARRAY
35475: PPUSH
35476: LD_VAR 0 5
35480: PUSH
35481: LD_INT 2
35483: ARRAY
35484: PPUSH
35485: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35489: LD_ADDR_EXP 115
35493: PUSH
35494: LD_EXP 115
35498: PPUSH
35499: LD_VAR 0 4
35503: PPUSH
35504: LD_EXP 115
35508: PUSH
35509: LD_VAR 0 4
35513: ARRAY
35514: PPUSH
35515: LD_VAR 0 3
35519: PPUSH
35520: CALL_OW 3
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// end ; end ;
35530: GO 35359
35532: POP
35533: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35534: LD_VAR 0 1
35538: PPUSH
35539: LD_EXP 115
35543: PUSH
35544: LD_VAR 0 4
35548: ARRAY
35549: PUSH
35550: LD_INT 0
35552: PLUS
35553: PPUSH
35554: CALL_OW 505
// end ;
35558: LD_VAR 0 2
35562: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35563: LD_INT 0
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
// if not hack in hackTanks then
35569: LD_VAR 0 1
35573: PUSH
35574: LD_EXP 114
35578: IN
35579: NOT
35580: IFFALSE 35584
// exit ;
35582: GO 35669
// index := GetElementIndex ( hackTanks , hack ) ;
35584: LD_ADDR_VAR 0 5
35588: PUSH
35589: LD_EXP 114
35593: PPUSH
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL 42602 0 2
35603: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35604: LD_ADDR_VAR 0 4
35608: PUSH
35609: DOUBLE
35610: LD_INT 1
35612: DEC
35613: ST_TO_ADDR
35614: LD_EXP 115
35618: PUSH
35619: LD_VAR 0 5
35623: ARRAY
35624: PUSH
35625: FOR_TO
35626: IFFALSE 35667
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35628: LD_EXP 115
35632: PUSH
35633: LD_VAR 0 5
35637: ARRAY
35638: PUSH
35639: LD_VAR 0 4
35643: ARRAY
35644: PUSH
35645: LD_INT 1
35647: ARRAY
35648: PUSH
35649: LD_VAR 0 2
35653: EQUAL
35654: IFFALSE 35665
// KillUnit ( vehicle ) ;
35656: LD_VAR 0 2
35660: PPUSH
35661: CALL_OW 66
35665: GO 35625
35667: POP
35668: POP
// end ;
35669: LD_VAR 0 3
35673: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35674: LD_EXP 119
35678: NOT
35679: IFFALSE 35714
35681: GO 35683
35683: DISABLE
// begin initMiner := true ;
35684: LD_ADDR_EXP 119
35688: PUSH
35689: LD_INT 1
35691: ST_TO_ADDR
// minersList := [ ] ;
35692: LD_ADDR_EXP 120
35696: PUSH
35697: EMPTY
35698: ST_TO_ADDR
// minerMinesList := [ ] ;
35699: LD_ADDR_EXP 121
35703: PUSH
35704: EMPTY
35705: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35706: LD_ADDR_EXP 122
35710: PUSH
35711: LD_INT 5
35713: ST_TO_ADDR
// end ;
35714: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35715: LD_EXP 119
35719: PUSH
35720: LD_INT 34
35722: PUSH
35723: LD_INT 81
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PPUSH
35730: CALL_OW 69
35734: AND
35735: IFFALSE 36196
35737: GO 35739
35739: DISABLE
35740: LD_INT 0
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
// begin enable ;
35746: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35747: LD_ADDR_VAR 0 1
35751: PUSH
35752: LD_INT 34
35754: PUSH
35755: LD_INT 81
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PPUSH
35762: CALL_OW 69
35766: PUSH
35767: FOR_IN
35768: IFFALSE 35840
// begin if not i in minersList then
35770: LD_VAR 0 1
35774: PUSH
35775: LD_EXP 120
35779: IN
35780: NOT
35781: IFFALSE 35838
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35783: LD_ADDR_EXP 120
35787: PUSH
35788: LD_EXP 120
35792: PPUSH
35793: LD_EXP 120
35797: PUSH
35798: LD_INT 1
35800: PLUS
35801: PPUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: CALL_OW 1
35811: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35812: LD_ADDR_EXP 121
35816: PUSH
35817: LD_EXP 121
35821: PPUSH
35822: LD_EXP 121
35826: PUSH
35827: LD_INT 1
35829: PLUS
35830: PPUSH
35831: EMPTY
35832: PPUSH
35833: CALL_OW 1
35837: ST_TO_ADDR
// end end ;
35838: GO 35767
35840: POP
35841: POP
// for i := minerMinesList downto 1 do
35842: LD_ADDR_VAR 0 1
35846: PUSH
35847: DOUBLE
35848: LD_EXP 121
35852: INC
35853: ST_TO_ADDR
35854: LD_INT 1
35856: PUSH
35857: FOR_DOWNTO
35858: IFFALSE 36194
// begin if IsLive ( minersList [ i ] ) then
35860: LD_EXP 120
35864: PUSH
35865: LD_VAR 0 1
35869: ARRAY
35870: PPUSH
35871: CALL_OW 300
35875: IFFALSE 35903
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35877: LD_EXP 120
35881: PUSH
35882: LD_VAR 0 1
35886: ARRAY
35887: PPUSH
35888: LD_EXP 121
35892: PUSH
35893: LD_VAR 0 1
35897: ARRAY
35898: PPUSH
35899: CALL_OW 505
// if not minerMinesList [ i ] then
35903: LD_EXP 121
35907: PUSH
35908: LD_VAR 0 1
35912: ARRAY
35913: NOT
35914: IFFALSE 35918
// continue ;
35916: GO 35857
// for j := minerMinesList [ i ] downto 1 do
35918: LD_ADDR_VAR 0 2
35922: PUSH
35923: DOUBLE
35924: LD_EXP 121
35928: PUSH
35929: LD_VAR 0 1
35933: ARRAY
35934: INC
35935: ST_TO_ADDR
35936: LD_INT 1
35938: PUSH
35939: FOR_DOWNTO
35940: IFFALSE 36190
// begin side := GetSide ( minersList [ i ] ) ;
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_EXP 120
35951: PUSH
35952: LD_VAR 0 1
35956: ARRAY
35957: PPUSH
35958: CALL_OW 255
35962: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35963: LD_ADDR_VAR 0 4
35967: PUSH
35968: LD_EXP 121
35972: PUSH
35973: LD_VAR 0 1
35977: ARRAY
35978: PUSH
35979: LD_VAR 0 2
35983: ARRAY
35984: PUSH
35985: LD_INT 1
35987: ARRAY
35988: PPUSH
35989: LD_EXP 121
35993: PUSH
35994: LD_VAR 0 1
35998: ARRAY
35999: PUSH
36000: LD_VAR 0 2
36004: ARRAY
36005: PUSH
36006: LD_INT 2
36008: ARRAY
36009: PPUSH
36010: CALL_OW 428
36014: ST_TO_ADDR
// if not tmp then
36015: LD_VAR 0 4
36019: NOT
36020: IFFALSE 36024
// continue ;
36022: GO 35939
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36024: LD_VAR 0 4
36028: PUSH
36029: LD_INT 81
36031: PUSH
36032: LD_VAR 0 3
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PPUSH
36041: CALL_OW 69
36045: IN
36046: PUSH
36047: LD_EXP 121
36051: PUSH
36052: LD_VAR 0 1
36056: ARRAY
36057: PUSH
36058: LD_VAR 0 2
36062: ARRAY
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: PPUSH
36068: LD_EXP 121
36072: PUSH
36073: LD_VAR 0 1
36077: ARRAY
36078: PUSH
36079: LD_VAR 0 2
36083: ARRAY
36084: PUSH
36085: LD_INT 2
36087: ARRAY
36088: PPUSH
36089: CALL_OW 458
36093: AND
36094: IFFALSE 36188
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36096: LD_EXP 121
36100: PUSH
36101: LD_VAR 0 1
36105: ARRAY
36106: PUSH
36107: LD_VAR 0 2
36111: ARRAY
36112: PUSH
36113: LD_INT 1
36115: ARRAY
36116: PPUSH
36117: LD_EXP 121
36121: PUSH
36122: LD_VAR 0 1
36126: ARRAY
36127: PUSH
36128: LD_VAR 0 2
36132: ARRAY
36133: PUSH
36134: LD_INT 2
36136: ARRAY
36137: PPUSH
36138: LD_VAR 0 3
36142: PPUSH
36143: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36147: LD_ADDR_EXP 121
36151: PUSH
36152: LD_EXP 121
36156: PPUSH
36157: LD_VAR 0 1
36161: PPUSH
36162: LD_EXP 121
36166: PUSH
36167: LD_VAR 0 1
36171: ARRAY
36172: PPUSH
36173: LD_VAR 0 2
36177: PPUSH
36178: CALL_OW 3
36182: PPUSH
36183: CALL_OW 1
36187: ST_TO_ADDR
// end ; end ;
36188: GO 35939
36190: POP
36191: POP
// end ;
36192: GO 35857
36194: POP
36195: POP
// end ;
36196: PPOPN 4
36198: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36199: LD_INT 0
36201: PPUSH
36202: PPUSH
// result := false ;
36203: LD_ADDR_VAR 0 4
36207: PUSH
36208: LD_INT 0
36210: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 264
36220: PUSH
36221: LD_INT 81
36223: EQUAL
36224: NOT
36225: IFFALSE 36229
// exit ;
36227: GO 36469
// index := GetElementIndex ( minersList , unit ) ;
36229: LD_ADDR_VAR 0 5
36233: PUSH
36234: LD_EXP 120
36238: PPUSH
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL 42602 0 2
36248: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36249: LD_EXP 121
36253: PUSH
36254: LD_VAR 0 5
36258: ARRAY
36259: PUSH
36260: LD_EXP 122
36264: GREATEREQUAL
36265: IFFALSE 36269
// exit ;
36267: GO 36469
// ComMoveXY ( unit , x , y ) ;
36269: LD_VAR 0 1
36273: PPUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: LD_VAR 0 3
36283: PPUSH
36284: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36288: LD_INT 35
36290: PPUSH
36291: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36295: LD_VAR 0 1
36299: PPUSH
36300: LD_VAR 0 2
36304: PPUSH
36305: LD_VAR 0 3
36309: PPUSH
36310: CALL 73938 0 3
36314: NOT
36315: PUSH
36316: LD_VAR 0 1
36320: PPUSH
36321: CALL_OW 314
36325: AND
36326: IFFALSE 36330
// exit ;
36328: GO 36469
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36330: LD_VAR 0 2
36334: PPUSH
36335: LD_VAR 0 3
36339: PPUSH
36340: CALL_OW 428
36344: PUSH
36345: LD_VAR 0 1
36349: EQUAL
36350: PUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 314
36360: NOT
36361: AND
36362: IFFALSE 36288
// PlaySoundXY ( x , y , PlantMine ) ;
36364: LD_VAR 0 2
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_STRING PlantMine
36376: PPUSH
36377: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36381: LD_VAR 0 2
36385: PPUSH
36386: LD_VAR 0 3
36390: PPUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL_OW 255
36400: PPUSH
36401: LD_INT 0
36403: PPUSH
36404: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36408: LD_ADDR_EXP 121
36412: PUSH
36413: LD_EXP 121
36417: PPUSH
36418: LD_VAR 0 5
36422: PUSH
36423: LD_EXP 121
36427: PUSH
36428: LD_VAR 0 5
36432: ARRAY
36433: PUSH
36434: LD_INT 1
36436: PLUS
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: LD_VAR 0 2
36446: PUSH
36447: LD_VAR 0 3
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PPUSH
36456: CALL 42817 0 3
36460: ST_TO_ADDR
// result := true ;
36461: LD_ADDR_VAR 0 4
36465: PUSH
36466: LD_INT 1
36468: ST_TO_ADDR
// end ;
36469: LD_VAR 0 4
36473: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36474: LD_INT 0
36476: PPUSH
36477: PPUSH
36478: PPUSH
// if not unit in minersList then
36479: LD_VAR 0 1
36483: PUSH
36484: LD_EXP 120
36488: IN
36489: NOT
36490: IFFALSE 36494
// exit ;
36492: GO 36886
// index := GetElementIndex ( minersList , unit ) ;
36494: LD_ADDR_VAR 0 6
36498: PUSH
36499: LD_EXP 120
36503: PPUSH
36504: LD_VAR 0 1
36508: PPUSH
36509: CALL 42602 0 2
36513: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36514: LD_ADDR_VAR 0 5
36518: PUSH
36519: DOUBLE
36520: LD_EXP 121
36524: PUSH
36525: LD_VAR 0 6
36529: ARRAY
36530: INC
36531: ST_TO_ADDR
36532: LD_INT 1
36534: PUSH
36535: FOR_DOWNTO
36536: IFFALSE 36697
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36538: LD_EXP 121
36542: PUSH
36543: LD_VAR 0 6
36547: ARRAY
36548: PUSH
36549: LD_VAR 0 5
36553: ARRAY
36554: PUSH
36555: LD_INT 1
36557: ARRAY
36558: PUSH
36559: LD_VAR 0 2
36563: EQUAL
36564: PUSH
36565: LD_EXP 121
36569: PUSH
36570: LD_VAR 0 6
36574: ARRAY
36575: PUSH
36576: LD_VAR 0 5
36580: ARRAY
36581: PUSH
36582: LD_INT 2
36584: ARRAY
36585: PUSH
36586: LD_VAR 0 3
36590: EQUAL
36591: AND
36592: IFFALSE 36695
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36594: LD_EXP 121
36598: PUSH
36599: LD_VAR 0 6
36603: ARRAY
36604: PUSH
36605: LD_VAR 0 5
36609: ARRAY
36610: PUSH
36611: LD_INT 1
36613: ARRAY
36614: PPUSH
36615: LD_EXP 121
36619: PUSH
36620: LD_VAR 0 6
36624: ARRAY
36625: PUSH
36626: LD_VAR 0 5
36630: ARRAY
36631: PUSH
36632: LD_INT 2
36634: ARRAY
36635: PPUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 255
36645: PPUSH
36646: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36650: LD_ADDR_EXP 121
36654: PUSH
36655: LD_EXP 121
36659: PPUSH
36660: LD_VAR 0 6
36664: PPUSH
36665: LD_EXP 121
36669: PUSH
36670: LD_VAR 0 6
36674: ARRAY
36675: PPUSH
36676: LD_VAR 0 5
36680: PPUSH
36681: CALL_OW 3
36685: PPUSH
36686: CALL_OW 1
36690: ST_TO_ADDR
// exit ;
36691: POP
36692: POP
36693: GO 36886
// end ; end ;
36695: GO 36535
36697: POP
36698: POP
// for i := minerMinesList [ index ] downto 1 do
36699: LD_ADDR_VAR 0 5
36703: PUSH
36704: DOUBLE
36705: LD_EXP 121
36709: PUSH
36710: LD_VAR 0 6
36714: ARRAY
36715: INC
36716: ST_TO_ADDR
36717: LD_INT 1
36719: PUSH
36720: FOR_DOWNTO
36721: IFFALSE 36884
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36723: LD_EXP 121
36727: PUSH
36728: LD_VAR 0 6
36732: ARRAY
36733: PUSH
36734: LD_VAR 0 5
36738: ARRAY
36739: PUSH
36740: LD_INT 1
36742: ARRAY
36743: PPUSH
36744: LD_EXP 121
36748: PUSH
36749: LD_VAR 0 6
36753: ARRAY
36754: PUSH
36755: LD_VAR 0 5
36759: ARRAY
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: PPUSH
36765: LD_VAR 0 2
36769: PPUSH
36770: LD_VAR 0 3
36774: PPUSH
36775: CALL_OW 298
36779: PUSH
36780: LD_INT 6
36782: LESS
36783: IFFALSE 36882
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36785: LD_EXP 121
36789: PUSH
36790: LD_VAR 0 6
36794: ARRAY
36795: PUSH
36796: LD_VAR 0 5
36800: ARRAY
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PPUSH
36806: LD_EXP 121
36810: PUSH
36811: LD_VAR 0 6
36815: ARRAY
36816: PUSH
36817: LD_VAR 0 5
36821: ARRAY
36822: PUSH
36823: LD_INT 2
36825: ARRAY
36826: PPUSH
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL_OW 255
36836: PPUSH
36837: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36841: LD_ADDR_EXP 121
36845: PUSH
36846: LD_EXP 121
36850: PPUSH
36851: LD_VAR 0 6
36855: PPUSH
36856: LD_EXP 121
36860: PUSH
36861: LD_VAR 0 6
36865: ARRAY
36866: PPUSH
36867: LD_VAR 0 5
36871: PPUSH
36872: CALL_OW 3
36876: PPUSH
36877: CALL_OW 1
36881: ST_TO_ADDR
// end ; end ;
36882: GO 36720
36884: POP
36885: POP
// end ;
36886: LD_VAR 0 4
36890: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36891: LD_INT 0
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 264
36911: PUSH
36912: LD_INT 81
36914: EQUAL
36915: NOT
36916: PUSH
36917: LD_VAR 0 1
36921: PUSH
36922: LD_EXP 120
36926: IN
36927: NOT
36928: OR
36929: IFFALSE 36933
// exit ;
36931: GO 37255
// index := GetElementIndex ( minersList , unit ) ;
36933: LD_ADDR_VAR 0 6
36937: PUSH
36938: LD_EXP 120
36942: PPUSH
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL 42602 0 2
36952: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36953: LD_ADDR_VAR 0 8
36957: PUSH
36958: LD_EXP 122
36962: PUSH
36963: LD_EXP 121
36967: PUSH
36968: LD_VAR 0 6
36972: ARRAY
36973: MINUS
36974: ST_TO_ADDR
// if not minesFreeAmount then
36975: LD_VAR 0 8
36979: NOT
36980: IFFALSE 36984
// exit ;
36982: GO 37255
// tmp := [ ] ;
36984: LD_ADDR_VAR 0 7
36988: PUSH
36989: EMPTY
36990: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: DOUBLE
36997: LD_INT 1
36999: DEC
37000: ST_TO_ADDR
37001: LD_VAR 0 8
37005: PUSH
37006: FOR_TO
37007: IFFALSE 37202
// begin _d := rand ( 0 , 5 ) ;
37009: LD_ADDR_VAR 0 11
37013: PUSH
37014: LD_INT 0
37016: PPUSH
37017: LD_INT 5
37019: PPUSH
37020: CALL_OW 12
37024: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37025: LD_ADDR_VAR 0 12
37029: PUSH
37030: LD_INT 2
37032: PPUSH
37033: LD_INT 6
37035: PPUSH
37036: CALL_OW 12
37040: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37041: LD_ADDR_VAR 0 9
37045: PUSH
37046: LD_VAR 0 2
37050: PPUSH
37051: LD_VAR 0 11
37055: PPUSH
37056: LD_VAR 0 12
37060: PPUSH
37061: CALL_OW 272
37065: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37066: LD_ADDR_VAR 0 10
37070: PUSH
37071: LD_VAR 0 3
37075: PPUSH
37076: LD_VAR 0 11
37080: PPUSH
37081: LD_VAR 0 12
37085: PPUSH
37086: CALL_OW 273
37090: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37091: LD_VAR 0 9
37095: PPUSH
37096: LD_VAR 0 10
37100: PPUSH
37101: CALL_OW 488
37105: PUSH
37106: LD_VAR 0 9
37110: PUSH
37111: LD_VAR 0 10
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_VAR 0 7
37124: IN
37125: NOT
37126: AND
37127: PUSH
37128: LD_VAR 0 9
37132: PPUSH
37133: LD_VAR 0 10
37137: PPUSH
37138: CALL_OW 458
37142: NOT
37143: AND
37144: IFFALSE 37186
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37146: LD_ADDR_VAR 0 7
37150: PUSH
37151: LD_VAR 0 7
37155: PPUSH
37156: LD_VAR 0 7
37160: PUSH
37161: LD_INT 1
37163: PLUS
37164: PPUSH
37165: LD_VAR 0 9
37169: PUSH
37170: LD_VAR 0 10
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PPUSH
37179: CALL_OW 1
37183: ST_TO_ADDR
37184: GO 37200
// i := i - 1 ;
37186: LD_ADDR_VAR 0 5
37190: PUSH
37191: LD_VAR 0 5
37195: PUSH
37196: LD_INT 1
37198: MINUS
37199: ST_TO_ADDR
// end ;
37200: GO 37006
37202: POP
37203: POP
// for i in tmp do
37204: LD_ADDR_VAR 0 5
37208: PUSH
37209: LD_VAR 0 7
37213: PUSH
37214: FOR_IN
37215: IFFALSE 37253
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37217: LD_VAR 0 1
37221: PPUSH
37222: LD_VAR 0 5
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PPUSH
37231: LD_VAR 0 5
37235: PUSH
37236: LD_INT 2
37238: ARRAY
37239: PPUSH
37240: CALL 36199 0 3
37244: NOT
37245: IFFALSE 37251
// exit ;
37247: POP
37248: POP
37249: GO 37255
37251: GO 37214
37253: POP
37254: POP
// end ;
37255: LD_VAR 0 4
37259: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37260: LD_INT 0
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
// if not GetClass ( unit ) = class_sniper then
37269: LD_VAR 0 1
37273: PPUSH
37274: CALL_OW 257
37278: PUSH
37279: LD_INT 5
37281: EQUAL
37282: NOT
37283: IFFALSE 37287
// exit ;
37285: GO 37675
// dist := 8 ;
37287: LD_ADDR_VAR 0 5
37291: PUSH
37292: LD_INT 8
37294: ST_TO_ADDR
// viewRange := 12 ;
37295: LD_ADDR_VAR 0 7
37299: PUSH
37300: LD_INT 12
37302: ST_TO_ADDR
// side := GetSide ( unit ) ;
37303: LD_ADDR_VAR 0 6
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 255
37317: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37318: LD_INT 61
37320: PPUSH
37321: LD_VAR 0 6
37325: PPUSH
37326: CALL_OW 321
37330: PUSH
37331: LD_INT 2
37333: EQUAL
37334: IFFALSE 37344
// viewRange := 16 ;
37336: LD_ADDR_VAR 0 7
37340: PUSH
37341: LD_INT 16
37343: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37344: LD_VAR 0 1
37348: PPUSH
37349: LD_VAR 0 2
37353: PPUSH
37354: LD_VAR 0 3
37358: PPUSH
37359: CALL_OW 297
37363: PUSH
37364: LD_VAR 0 5
37368: GREATER
37369: IFFALSE 37448
// begin ComMoveXY ( unit , x , y ) ;
37371: LD_VAR 0 1
37375: PPUSH
37376: LD_VAR 0 2
37380: PPUSH
37381: LD_VAR 0 3
37385: PPUSH
37386: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37390: LD_INT 35
37392: PPUSH
37393: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37397: LD_VAR 0 1
37401: PPUSH
37402: LD_VAR 0 2
37406: PPUSH
37407: LD_VAR 0 3
37411: PPUSH
37412: CALL 73938 0 3
37416: NOT
37417: IFFALSE 37421
// exit ;
37419: GO 37675
// until GetDistUnitXY ( unit , x , y ) < dist ;
37421: LD_VAR 0 1
37425: PPUSH
37426: LD_VAR 0 2
37430: PPUSH
37431: LD_VAR 0 3
37435: PPUSH
37436: CALL_OW 297
37440: PUSH
37441: LD_VAR 0 5
37445: LESS
37446: IFFALSE 37390
// end ; ComTurnXY ( unit , x , y ) ;
37448: LD_VAR 0 1
37452: PPUSH
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_VAR 0 3
37462: PPUSH
37463: CALL_OW 118
// wait ( 5 ) ;
37467: LD_INT 5
37469: PPUSH
37470: CALL_OW 67
// _d := GetDir ( unit ) ;
37474: LD_ADDR_VAR 0 10
37478: PUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 254
37488: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37489: LD_ADDR_VAR 0 8
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL_OW 250
37503: PPUSH
37504: LD_VAR 0 10
37508: PPUSH
37509: LD_VAR 0 5
37513: PPUSH
37514: CALL_OW 272
37518: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37519: LD_ADDR_VAR 0 9
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 251
37533: PPUSH
37534: LD_VAR 0 10
37538: PPUSH
37539: LD_VAR 0 5
37543: PPUSH
37544: CALL_OW 273
37548: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37549: LD_VAR 0 8
37553: PPUSH
37554: LD_VAR 0 9
37558: PPUSH
37559: CALL_OW 488
37563: NOT
37564: IFFALSE 37568
// exit ;
37566: GO 37675
// ComAnimCustom ( unit , 1 ) ;
37568: LD_VAR 0 1
37572: PPUSH
37573: LD_INT 1
37575: PPUSH
37576: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37580: LD_VAR 0 8
37584: PPUSH
37585: LD_VAR 0 9
37589: PPUSH
37590: LD_VAR 0 6
37594: PPUSH
37595: LD_VAR 0 7
37599: PPUSH
37600: CALL_OW 330
// repeat wait ( 1 ) ;
37604: LD_INT 1
37606: PPUSH
37607: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL_OW 316
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: CALL_OW 314
37630: OR
37631: PUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: CALL_OW 302
37641: NOT
37642: OR
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 301
37653: OR
37654: IFFALSE 37604
// RemoveSeeing ( _x , _y , side ) ;
37656: LD_VAR 0 8
37660: PPUSH
37661: LD_VAR 0 9
37665: PPUSH
37666: LD_VAR 0 6
37670: PPUSH
37671: CALL_OW 331
// end ; end_of_file
37675: LD_VAR 0 4
37679: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37680: LD_INT 0
37682: PPUSH
37683: PPUSH
// if exist_mode then
37684: LD_VAR 0 2
37688: IFFALSE 37713
// unit := CreateCharacter ( prefix & ident ) else
37690: LD_ADDR_VAR 0 5
37694: PUSH
37695: LD_VAR 0 3
37699: PUSH
37700: LD_VAR 0 1
37704: STR
37705: PPUSH
37706: CALL_OW 34
37710: ST_TO_ADDR
37711: GO 37728
// unit := NewCharacter ( ident ) ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 25
37727: ST_TO_ADDR
// result := unit ;
37728: LD_ADDR_VAR 0 4
37732: PUSH
37733: LD_VAR 0 5
37737: ST_TO_ADDR
// end ;
37738: LD_VAR 0 4
37742: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37743: LD_INT 0
37745: PPUSH
37746: PPUSH
// if not side or not nation then
37747: LD_VAR 0 1
37751: NOT
37752: PUSH
37753: LD_VAR 0 2
37757: NOT
37758: OR
37759: IFFALSE 37763
// exit ;
37761: GO 38531
// case nation of nation_american :
37763: LD_VAR 0 2
37767: PUSH
37768: LD_INT 1
37770: DOUBLE
37771: EQUAL
37772: IFTRUE 37776
37774: GO 37990
37776: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37777: LD_ADDR_VAR 0 4
37781: PUSH
37782: LD_INT 35
37784: PUSH
37785: LD_INT 45
37787: PUSH
37788: LD_INT 46
37790: PUSH
37791: LD_INT 47
37793: PUSH
37794: LD_INT 82
37796: PUSH
37797: LD_INT 83
37799: PUSH
37800: LD_INT 84
37802: PUSH
37803: LD_INT 85
37805: PUSH
37806: LD_INT 86
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 6
37817: PUSH
37818: LD_INT 15
37820: PUSH
37821: LD_INT 16
37823: PUSH
37824: LD_INT 7
37826: PUSH
37827: LD_INT 12
37829: PUSH
37830: LD_INT 13
37832: PUSH
37833: LD_INT 10
37835: PUSH
37836: LD_INT 14
37838: PUSH
37839: LD_INT 20
37841: PUSH
37842: LD_INT 21
37844: PUSH
37845: LD_INT 22
37847: PUSH
37848: LD_INT 25
37850: PUSH
37851: LD_INT 32
37853: PUSH
37854: LD_INT 27
37856: PUSH
37857: LD_INT 36
37859: PUSH
37860: LD_INT 69
37862: PUSH
37863: LD_INT 39
37865: PUSH
37866: LD_INT 34
37868: PUSH
37869: LD_INT 40
37871: PUSH
37872: LD_INT 48
37874: PUSH
37875: LD_INT 49
37877: PUSH
37878: LD_INT 50
37880: PUSH
37881: LD_INT 51
37883: PUSH
37884: LD_INT 52
37886: PUSH
37887: LD_INT 53
37889: PUSH
37890: LD_INT 54
37892: PUSH
37893: LD_INT 55
37895: PUSH
37896: LD_INT 56
37898: PUSH
37899: LD_INT 57
37901: PUSH
37902: LD_INT 58
37904: PUSH
37905: LD_INT 59
37907: PUSH
37908: LD_INT 60
37910: PUSH
37911: LD_INT 61
37913: PUSH
37914: LD_INT 62
37916: PUSH
37917: LD_INT 80
37919: PUSH
37920: LD_INT 82
37922: PUSH
37923: LD_INT 83
37925: PUSH
37926: LD_INT 84
37928: PUSH
37929: LD_INT 85
37931: PUSH
37932: LD_INT 86
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
37988: GO 38455
37990: LD_INT 2
37992: DOUBLE
37993: EQUAL
37994: IFTRUE 37998
37996: GO 38224
37998: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37999: LD_ADDR_VAR 0 4
38003: PUSH
38004: LD_INT 35
38006: PUSH
38007: LD_INT 45
38009: PUSH
38010: LD_INT 46
38012: PUSH
38013: LD_INT 47
38015: PUSH
38016: LD_INT 82
38018: PUSH
38019: LD_INT 83
38021: PUSH
38022: LD_INT 84
38024: PUSH
38025: LD_INT 85
38027: PUSH
38028: LD_INT 87
38030: PUSH
38031: LD_INT 70
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 11
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: LD_INT 4
38045: PUSH
38046: LD_INT 5
38048: PUSH
38049: LD_INT 6
38051: PUSH
38052: LD_INT 15
38054: PUSH
38055: LD_INT 18
38057: PUSH
38058: LD_INT 7
38060: PUSH
38061: LD_INT 17
38063: PUSH
38064: LD_INT 8
38066: PUSH
38067: LD_INT 20
38069: PUSH
38070: LD_INT 21
38072: PUSH
38073: LD_INT 22
38075: PUSH
38076: LD_INT 72
38078: PUSH
38079: LD_INT 26
38081: PUSH
38082: LD_INT 69
38084: PUSH
38085: LD_INT 39
38087: PUSH
38088: LD_INT 40
38090: PUSH
38091: LD_INT 41
38093: PUSH
38094: LD_INT 42
38096: PUSH
38097: LD_INT 43
38099: PUSH
38100: LD_INT 48
38102: PUSH
38103: LD_INT 49
38105: PUSH
38106: LD_INT 50
38108: PUSH
38109: LD_INT 51
38111: PUSH
38112: LD_INT 52
38114: PUSH
38115: LD_INT 53
38117: PUSH
38118: LD_INT 54
38120: PUSH
38121: LD_INT 55
38123: PUSH
38124: LD_INT 56
38126: PUSH
38127: LD_INT 60
38129: PUSH
38130: LD_INT 61
38132: PUSH
38133: LD_INT 62
38135: PUSH
38136: LD_INT 66
38138: PUSH
38139: LD_INT 67
38141: PUSH
38142: LD_INT 68
38144: PUSH
38145: LD_INT 81
38147: PUSH
38148: LD_INT 82
38150: PUSH
38151: LD_INT 83
38153: PUSH
38154: LD_INT 84
38156: PUSH
38157: LD_INT 85
38159: PUSH
38160: LD_INT 87
38162: PUSH
38163: LD_INT 88
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
38222: GO 38455
38224: LD_INT 3
38226: DOUBLE
38227: EQUAL
38228: IFTRUE 38232
38230: GO 38454
38232: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38233: LD_ADDR_VAR 0 4
38237: PUSH
38238: LD_INT 46
38240: PUSH
38241: LD_INT 47
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 82
38252: PUSH
38253: LD_INT 83
38255: PUSH
38256: LD_INT 84
38258: PUSH
38259: LD_INT 85
38261: PUSH
38262: LD_INT 86
38264: PUSH
38265: LD_INT 11
38267: PUSH
38268: LD_INT 9
38270: PUSH
38271: LD_INT 20
38273: PUSH
38274: LD_INT 19
38276: PUSH
38277: LD_INT 21
38279: PUSH
38280: LD_INT 24
38282: PUSH
38283: LD_INT 22
38285: PUSH
38286: LD_INT 25
38288: PUSH
38289: LD_INT 28
38291: PUSH
38292: LD_INT 29
38294: PUSH
38295: LD_INT 30
38297: PUSH
38298: LD_INT 31
38300: PUSH
38301: LD_INT 37
38303: PUSH
38304: LD_INT 38
38306: PUSH
38307: LD_INT 32
38309: PUSH
38310: LD_INT 27
38312: PUSH
38313: LD_INT 33
38315: PUSH
38316: LD_INT 69
38318: PUSH
38319: LD_INT 39
38321: PUSH
38322: LD_INT 34
38324: PUSH
38325: LD_INT 40
38327: PUSH
38328: LD_INT 71
38330: PUSH
38331: LD_INT 23
38333: PUSH
38334: LD_INT 44
38336: PUSH
38337: LD_INT 48
38339: PUSH
38340: LD_INT 49
38342: PUSH
38343: LD_INT 50
38345: PUSH
38346: LD_INT 51
38348: PUSH
38349: LD_INT 52
38351: PUSH
38352: LD_INT 53
38354: PUSH
38355: LD_INT 54
38357: PUSH
38358: LD_INT 55
38360: PUSH
38361: LD_INT 56
38363: PUSH
38364: LD_INT 57
38366: PUSH
38367: LD_INT 58
38369: PUSH
38370: LD_INT 59
38372: PUSH
38373: LD_INT 63
38375: PUSH
38376: LD_INT 64
38378: PUSH
38379: LD_INT 65
38381: PUSH
38382: LD_INT 82
38384: PUSH
38385: LD_INT 83
38387: PUSH
38388: LD_INT 84
38390: PUSH
38391: LD_INT 85
38393: PUSH
38394: LD_INT 86
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
38452: GO 38455
38454: POP
// if state > - 1 and state < 3 then
38455: LD_VAR 0 3
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: GREATER
38464: PUSH
38465: LD_VAR 0 3
38469: PUSH
38470: LD_INT 3
38472: LESS
38473: AND
38474: IFFALSE 38531
// for i in result do
38476: LD_ADDR_VAR 0 5
38480: PUSH
38481: LD_VAR 0 4
38485: PUSH
38486: FOR_IN
38487: IFFALSE 38529
// if GetTech ( i , side ) <> state then
38489: LD_VAR 0 5
38493: PPUSH
38494: LD_VAR 0 1
38498: PPUSH
38499: CALL_OW 321
38503: PUSH
38504: LD_VAR 0 3
38508: NONEQUAL
38509: IFFALSE 38527
// result := result diff i ;
38511: LD_ADDR_VAR 0 4
38515: PUSH
38516: LD_VAR 0 4
38520: PUSH
38521: LD_VAR 0 5
38525: DIFF
38526: ST_TO_ADDR
38527: GO 38486
38529: POP
38530: POP
// end ;
38531: LD_VAR 0 4
38535: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38536: LD_INT 0
38538: PPUSH
38539: PPUSH
38540: PPUSH
// result := true ;
38541: LD_ADDR_VAR 0 3
38545: PUSH
38546: LD_INT 1
38548: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38549: LD_ADDR_VAR 0 5
38553: PUSH
38554: LD_VAR 0 2
38558: PPUSH
38559: CALL_OW 480
38563: ST_TO_ADDR
// if not tmp then
38564: LD_VAR 0 5
38568: NOT
38569: IFFALSE 38573
// exit ;
38571: GO 38622
// for i in tmp do
38573: LD_ADDR_VAR 0 4
38577: PUSH
38578: LD_VAR 0 5
38582: PUSH
38583: FOR_IN
38584: IFFALSE 38620
// if GetTech ( i , side ) <> state_researched then
38586: LD_VAR 0 4
38590: PPUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 321
38600: PUSH
38601: LD_INT 2
38603: NONEQUAL
38604: IFFALSE 38618
// begin result := false ;
38606: LD_ADDR_VAR 0 3
38610: PUSH
38611: LD_INT 0
38613: ST_TO_ADDR
// exit ;
38614: POP
38615: POP
38616: GO 38622
// end ;
38618: GO 38583
38620: POP
38621: POP
// end ;
38622: LD_VAR 0 3
38626: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38627: LD_INT 0
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38642: LD_VAR 0 1
38646: NOT
38647: PUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: CALL_OW 257
38657: PUSH
38658: LD_INT 9
38660: NONEQUAL
38661: OR
38662: IFFALSE 38666
// exit ;
38664: GO 39239
// side := GetSide ( unit ) ;
38666: LD_ADDR_VAR 0 9
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 255
38680: ST_TO_ADDR
// tech_space := tech_spacanom ;
38681: LD_ADDR_VAR 0 12
38685: PUSH
38686: LD_INT 29
38688: ST_TO_ADDR
// tech_time := tech_taurad ;
38689: LD_ADDR_VAR 0 13
38693: PUSH
38694: LD_INT 28
38696: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38697: LD_ADDR_VAR 0 11
38701: PUSH
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 310
38711: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38712: LD_VAR 0 11
38716: PPUSH
38717: CALL_OW 247
38721: PUSH
38722: LD_INT 2
38724: EQUAL
38725: IFFALSE 38729
// exit ;
38727: GO 39239
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38729: LD_ADDR_VAR 0 8
38733: PUSH
38734: LD_INT 81
38736: PUSH
38737: LD_VAR 0 9
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: LD_INT 21
38751: PUSH
38752: LD_INT 3
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PPUSH
38767: CALL_OW 69
38771: ST_TO_ADDR
// if not tmp then
38772: LD_VAR 0 8
38776: NOT
38777: IFFALSE 38781
// exit ;
38779: GO 39239
// if in_unit then
38781: LD_VAR 0 11
38785: IFFALSE 38809
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38787: LD_ADDR_VAR 0 10
38791: PUSH
38792: LD_VAR 0 8
38796: PPUSH
38797: LD_VAR 0 11
38801: PPUSH
38802: CALL_OW 74
38806: ST_TO_ADDR
38807: GO 38829
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38809: LD_ADDR_VAR 0 10
38813: PUSH
38814: LD_VAR 0 8
38818: PPUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: CALL_OW 74
38828: ST_TO_ADDR
// if not enemy then
38829: LD_VAR 0 10
38833: NOT
38834: IFFALSE 38838
// exit ;
38836: GO 39239
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38838: LD_VAR 0 11
38842: PUSH
38843: LD_VAR 0 11
38847: PPUSH
38848: LD_VAR 0 10
38852: PPUSH
38853: CALL_OW 296
38857: PUSH
38858: LD_INT 13
38860: GREATER
38861: AND
38862: PUSH
38863: LD_VAR 0 1
38867: PPUSH
38868: LD_VAR 0 10
38872: PPUSH
38873: CALL_OW 296
38877: PUSH
38878: LD_INT 12
38880: GREATER
38881: OR
38882: IFFALSE 38886
// exit ;
38884: GO 39239
// missile := [ 1 ] ;
38886: LD_ADDR_VAR 0 14
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38897: LD_VAR 0 9
38901: PPUSH
38902: LD_VAR 0 12
38906: PPUSH
38907: CALL_OW 325
38911: IFFALSE 38940
// missile := Replace ( missile , missile + 1 , 2 ) ;
38913: LD_ADDR_VAR 0 14
38917: PUSH
38918: LD_VAR 0 14
38922: PPUSH
38923: LD_VAR 0 14
38927: PUSH
38928: LD_INT 1
38930: PLUS
38931: PPUSH
38932: LD_INT 2
38934: PPUSH
38935: CALL_OW 1
38939: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38940: LD_VAR 0 9
38944: PPUSH
38945: LD_VAR 0 13
38949: PPUSH
38950: CALL_OW 325
38954: PUSH
38955: LD_VAR 0 10
38959: PPUSH
38960: CALL_OW 255
38964: PPUSH
38965: LD_VAR 0 13
38969: PPUSH
38970: CALL_OW 325
38974: NOT
38975: AND
38976: IFFALSE 39005
// missile := Replace ( missile , missile + 1 , 3 ) ;
38978: LD_ADDR_VAR 0 14
38982: PUSH
38983: LD_VAR 0 14
38987: PPUSH
38988: LD_VAR 0 14
38992: PUSH
38993: LD_INT 1
38995: PLUS
38996: PPUSH
38997: LD_INT 3
38999: PPUSH
39000: CALL_OW 1
39004: ST_TO_ADDR
// if missile < 2 then
39005: LD_VAR 0 14
39009: PUSH
39010: LD_INT 2
39012: LESS
39013: IFFALSE 39017
// exit ;
39015: GO 39239
// x := GetX ( enemy ) ;
39017: LD_ADDR_VAR 0 4
39021: PUSH
39022: LD_VAR 0 10
39026: PPUSH
39027: CALL_OW 250
39031: ST_TO_ADDR
// y := GetY ( enemy ) ;
39032: LD_ADDR_VAR 0 5
39036: PUSH
39037: LD_VAR 0 10
39041: PPUSH
39042: CALL_OW 251
39046: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39047: LD_ADDR_VAR 0 6
39051: PUSH
39052: LD_VAR 0 4
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PPUSH
39061: LD_INT 1
39063: PPUSH
39064: CALL_OW 12
39068: PLUS
39069: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39070: LD_ADDR_VAR 0 7
39074: PUSH
39075: LD_VAR 0 5
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PPUSH
39084: LD_INT 1
39086: PPUSH
39087: CALL_OW 12
39091: PLUS
39092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39093: LD_VAR 0 6
39097: PPUSH
39098: LD_VAR 0 7
39102: PPUSH
39103: CALL_OW 488
39107: NOT
39108: IFFALSE 39130
// begin _x := x ;
39110: LD_ADDR_VAR 0 6
39114: PUSH
39115: LD_VAR 0 4
39119: ST_TO_ADDR
// _y := y ;
39120: LD_ADDR_VAR 0 7
39124: PUSH
39125: LD_VAR 0 5
39129: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_INT 1
39137: PPUSH
39138: LD_VAR 0 14
39142: PPUSH
39143: CALL_OW 12
39147: ST_TO_ADDR
// case i of 1 :
39148: LD_VAR 0 3
39152: PUSH
39153: LD_INT 1
39155: DOUBLE
39156: EQUAL
39157: IFTRUE 39161
39159: GO 39178
39161: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39162: LD_VAR 0 1
39166: PPUSH
39167: LD_VAR 0 10
39171: PPUSH
39172: CALL_OW 115
39176: GO 39239
39178: LD_INT 2
39180: DOUBLE
39181: EQUAL
39182: IFTRUE 39186
39184: GO 39208
39186: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39187: LD_VAR 0 1
39191: PPUSH
39192: LD_VAR 0 6
39196: PPUSH
39197: LD_VAR 0 7
39201: PPUSH
39202: CALL_OW 153
39206: GO 39239
39208: LD_INT 3
39210: DOUBLE
39211: EQUAL
39212: IFTRUE 39216
39214: GO 39238
39216: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_VAR 0 6
39226: PPUSH
39227: LD_VAR 0 7
39231: PPUSH
39232: CALL_OW 154
39236: GO 39239
39238: POP
// end ;
39239: LD_VAR 0 2
39243: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39244: LD_INT 0
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
// if not unit or not building then
39252: LD_VAR 0 1
39256: NOT
39257: PUSH
39258: LD_VAR 0 2
39262: NOT
39263: OR
39264: IFFALSE 39268
// exit ;
39266: GO 39426
// x := GetX ( building ) ;
39268: LD_ADDR_VAR 0 5
39272: PUSH
39273: LD_VAR 0 2
39277: PPUSH
39278: CALL_OW 250
39282: ST_TO_ADDR
// y := GetY ( building ) ;
39283: LD_ADDR_VAR 0 6
39287: PUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: CALL_OW 251
39297: ST_TO_ADDR
// for i = 0 to 5 do
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: DOUBLE
39304: LD_INT 0
39306: DEC
39307: ST_TO_ADDR
39308: LD_INT 5
39310: PUSH
39311: FOR_TO
39312: IFFALSE 39424
// begin _x := ShiftX ( x , i , 3 ) ;
39314: LD_ADDR_VAR 0 7
39318: PUSH
39319: LD_VAR 0 5
39323: PPUSH
39324: LD_VAR 0 4
39328: PPUSH
39329: LD_INT 3
39331: PPUSH
39332: CALL_OW 272
39336: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39337: LD_ADDR_VAR 0 8
39341: PUSH
39342: LD_VAR 0 6
39346: PPUSH
39347: LD_VAR 0 4
39351: PPUSH
39352: LD_INT 3
39354: PPUSH
39355: CALL_OW 273
39359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39360: LD_VAR 0 7
39364: PPUSH
39365: LD_VAR 0 8
39369: PPUSH
39370: CALL_OW 488
39374: NOT
39375: IFFALSE 39379
// continue ;
39377: GO 39311
// if HexInfo ( _x , _y ) = 0 then
39379: LD_VAR 0 7
39383: PPUSH
39384: LD_VAR 0 8
39388: PPUSH
39389: CALL_OW 428
39393: PUSH
39394: LD_INT 0
39396: EQUAL
39397: IFFALSE 39422
// begin ComMoveXY ( unit , _x , _y ) ;
39399: LD_VAR 0 1
39403: PPUSH
39404: LD_VAR 0 7
39408: PPUSH
39409: LD_VAR 0 8
39413: PPUSH
39414: CALL_OW 111
// exit ;
39418: POP
39419: POP
39420: GO 39426
// end ; end ;
39422: GO 39311
39424: POP
39425: POP
// end ;
39426: LD_VAR 0 3
39430: RET
// export function ScanBase ( side , base_area ) ; begin
39431: LD_INT 0
39433: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_VAR 0 2
39443: PPUSH
39444: LD_INT 81
39446: PUSH
39447: LD_VAR 0 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PPUSH
39456: CALL_OW 70
39460: ST_TO_ADDR
// end ;
39461: LD_VAR 0 3
39465: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
// result := false ;
39472: LD_ADDR_VAR 0 2
39476: PUSH
39477: LD_INT 0
39479: ST_TO_ADDR
// side := GetSide ( unit ) ;
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 255
39494: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39495: LD_ADDR_VAR 0 4
39499: PUSH
39500: LD_VAR 0 1
39504: PPUSH
39505: CALL_OW 248
39509: ST_TO_ADDR
// case nat of 1 :
39510: LD_VAR 0 4
39514: PUSH
39515: LD_INT 1
39517: DOUBLE
39518: EQUAL
39519: IFTRUE 39523
39521: GO 39534
39523: POP
// tech := tech_lassight ; 2 :
39524: LD_ADDR_VAR 0 5
39528: PUSH
39529: LD_INT 12
39531: ST_TO_ADDR
39532: GO 39573
39534: LD_INT 2
39536: DOUBLE
39537: EQUAL
39538: IFTRUE 39542
39540: GO 39553
39542: POP
// tech := tech_mortar ; 3 :
39543: LD_ADDR_VAR 0 5
39547: PUSH
39548: LD_INT 41
39550: ST_TO_ADDR
39551: GO 39573
39553: LD_INT 3
39555: DOUBLE
39556: EQUAL
39557: IFTRUE 39561
39559: GO 39572
39561: POP
// tech := tech_bazooka ; end ;
39562: LD_ADDR_VAR 0 5
39566: PUSH
39567: LD_INT 44
39569: ST_TO_ADDR
39570: GO 39573
39572: POP
// if Researched ( side , tech ) then
39573: LD_VAR 0 3
39577: PPUSH
39578: LD_VAR 0 5
39582: PPUSH
39583: CALL_OW 325
39587: IFFALSE 39614
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39589: LD_ADDR_VAR 0 2
39593: PUSH
39594: LD_INT 5
39596: PUSH
39597: LD_INT 8
39599: PUSH
39600: LD_INT 9
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PUSH
39608: LD_VAR 0 4
39612: ARRAY
39613: ST_TO_ADDR
// end ;
39614: LD_VAR 0 2
39618: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39619: LD_INT 0
39621: PPUSH
39622: PPUSH
39623: PPUSH
// if not mines then
39624: LD_VAR 0 2
39628: NOT
39629: IFFALSE 39633
// exit ;
39631: GO 39777
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39633: LD_ADDR_VAR 0 5
39637: PUSH
39638: LD_INT 81
39640: PUSH
39641: LD_VAR 0 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: LD_INT 21
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PPUSH
39671: CALL_OW 69
39675: ST_TO_ADDR
// for i in mines do
39676: LD_ADDR_VAR 0 4
39680: PUSH
39681: LD_VAR 0 2
39685: PUSH
39686: FOR_IN
39687: IFFALSE 39775
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39689: LD_VAR 0 4
39693: PUSH
39694: LD_INT 1
39696: ARRAY
39697: PPUSH
39698: LD_VAR 0 4
39702: PUSH
39703: LD_INT 2
39705: ARRAY
39706: PPUSH
39707: CALL_OW 458
39711: NOT
39712: IFFALSE 39716
// continue ;
39714: GO 39686
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39716: LD_VAR 0 4
39720: PUSH
39721: LD_INT 1
39723: ARRAY
39724: PPUSH
39725: LD_VAR 0 4
39729: PUSH
39730: LD_INT 2
39732: ARRAY
39733: PPUSH
39734: CALL_OW 428
39738: PUSH
39739: LD_VAR 0 5
39743: IN
39744: IFFALSE 39773
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39746: LD_VAR 0 4
39750: PUSH
39751: LD_INT 1
39753: ARRAY
39754: PPUSH
39755: LD_VAR 0 4
39759: PUSH
39760: LD_INT 2
39762: ARRAY
39763: PPUSH
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 456
// end ;
39773: GO 39686
39775: POP
39776: POP
// end ;
39777: LD_VAR 0 3
39781: RET
// export function Count ( array ) ; var i ; begin
39782: LD_INT 0
39784: PPUSH
39785: PPUSH
// result := 0 ;
39786: LD_ADDR_VAR 0 2
39790: PUSH
39791: LD_INT 0
39793: ST_TO_ADDR
// for i in array do
39794: LD_ADDR_VAR 0 3
39798: PUSH
39799: LD_VAR 0 1
39803: PUSH
39804: FOR_IN
39805: IFFALSE 39829
// if i then
39807: LD_VAR 0 3
39811: IFFALSE 39827
// result := result + 1 ;
39813: LD_ADDR_VAR 0 2
39817: PUSH
39818: LD_VAR 0 2
39822: PUSH
39823: LD_INT 1
39825: PLUS
39826: ST_TO_ADDR
39827: GO 39804
39829: POP
39830: POP
// end ;
39831: LD_VAR 0 2
39835: RET
// export function IsEmpty ( building ) ; begin
39836: LD_INT 0
39838: PPUSH
// if not building then
39839: LD_VAR 0 1
39843: NOT
39844: IFFALSE 39848
// exit ;
39846: GO 39891
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39848: LD_ADDR_VAR 0 2
39852: PUSH
39853: LD_VAR 0 1
39857: PUSH
39858: LD_INT 22
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 255
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 58
39877: PUSH
39878: EMPTY
39879: LIST
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PPUSH
39885: CALL_OW 69
39889: IN
39890: ST_TO_ADDR
// end ;
39891: LD_VAR 0 2
39895: RET
// export function IsNotFull ( building ) ; var places ; begin
39896: LD_INT 0
39898: PPUSH
39899: PPUSH
// if not building then
39900: LD_VAR 0 1
39904: NOT
39905: IFFALSE 39909
// exit ;
39907: GO 40080
// result := false ;
39909: LD_ADDR_VAR 0 2
39913: PUSH
39914: LD_INT 0
39916: ST_TO_ADDR
// places := 0 ;
39917: LD_ADDR_VAR 0 3
39921: PUSH
39922: LD_INT 0
39924: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
39925: LD_VAR 0 1
39929: PPUSH
39930: CALL_OW 266
39934: PUSH
39935: LD_INT 0
39937: DOUBLE
39938: EQUAL
39939: IFTRUE 39997
39941: LD_INT 1
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39997
39947: LD_INT 6
39949: DOUBLE
39950: EQUAL
39951: IFTRUE 39997
39953: LD_INT 7
39955: DOUBLE
39956: EQUAL
39957: IFTRUE 39997
39959: LD_INT 8
39961: DOUBLE
39962: EQUAL
39963: IFTRUE 39997
39965: LD_INT 4
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39997
39971: LD_INT 5
39973: DOUBLE
39974: EQUAL
39975: IFTRUE 39997
39977: LD_INT 2
39979: DOUBLE
39980: EQUAL
39981: IFTRUE 39997
39983: LD_INT 3
39985: DOUBLE
39986: EQUAL
39987: IFTRUE 39997
39989: LD_INT 35
39991: DOUBLE
39992: EQUAL
39993: IFTRUE 39997
39995: GO 40008
39997: POP
// places := 6 ; b_bunker , b_breastwork :
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: LD_INT 6
40005: ST_TO_ADDR
40006: GO 40053
40008: LD_INT 32
40010: DOUBLE
40011: EQUAL
40012: IFTRUE 40022
40014: LD_INT 31
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40033
40022: POP
// places := 1 ; b_control_tower :
40023: LD_ADDR_VAR 0 3
40027: PUSH
40028: LD_INT 1
40030: ST_TO_ADDR
40031: GO 40053
40033: LD_INT 36
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40041
40039: GO 40052
40041: POP
// places := 3 ; end ;
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_INT 3
40049: ST_TO_ADDR
40050: GO 40053
40052: POP
// if places then
40053: LD_VAR 0 3
40057: IFFALSE 40080
// result := UnitsInside ( building ) < places ;
40059: LD_ADDR_VAR 0 2
40063: PUSH
40064: LD_VAR 0 1
40068: PPUSH
40069: CALL_OW 313
40073: PUSH
40074: LD_VAR 0 3
40078: LESS
40079: ST_TO_ADDR
// end ;
40080: LD_VAR 0 2
40084: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40085: LD_INT 0
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
// tmp := [ ] ;
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: EMPTY
40097: ST_TO_ADDR
// list := [ ] ;
40098: LD_ADDR_VAR 0 5
40102: PUSH
40103: EMPTY
40104: ST_TO_ADDR
// for i = 16 to 25 do
40105: LD_ADDR_VAR 0 4
40109: PUSH
40110: DOUBLE
40111: LD_INT 16
40113: DEC
40114: ST_TO_ADDR
40115: LD_INT 25
40117: PUSH
40118: FOR_TO
40119: IFFALSE 40192
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40121: LD_ADDR_VAR 0 3
40125: PUSH
40126: LD_VAR 0 3
40130: PUSH
40131: LD_INT 22
40133: PUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 255
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 91
40150: PUSH
40151: LD_VAR 0 1
40155: PUSH
40156: LD_INT 6
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 30
40166: PUSH
40167: LD_VAR 0 4
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: PPUSH
40184: CALL_OW 69
40188: ADD
40189: ST_TO_ADDR
40190: GO 40118
40192: POP
40193: POP
// for i = 1 to tmp do
40194: LD_ADDR_VAR 0 4
40198: PUSH
40199: DOUBLE
40200: LD_INT 1
40202: DEC
40203: ST_TO_ADDR
40204: LD_VAR 0 3
40208: PUSH
40209: FOR_TO
40210: IFFALSE 40298
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40212: LD_ADDR_VAR 0 5
40216: PUSH
40217: LD_VAR 0 5
40221: PUSH
40222: LD_VAR 0 3
40226: PUSH
40227: LD_VAR 0 4
40231: ARRAY
40232: PPUSH
40233: CALL_OW 266
40237: PUSH
40238: LD_VAR 0 3
40242: PUSH
40243: LD_VAR 0 4
40247: ARRAY
40248: PPUSH
40249: CALL_OW 250
40253: PUSH
40254: LD_VAR 0 3
40258: PUSH
40259: LD_VAR 0 4
40263: ARRAY
40264: PPUSH
40265: CALL_OW 251
40269: PUSH
40270: LD_VAR 0 3
40274: PUSH
40275: LD_VAR 0 4
40279: ARRAY
40280: PPUSH
40281: CALL_OW 254
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: ADD
40295: ST_TO_ADDR
40296: GO 40209
40298: POP
40299: POP
// result := list ;
40300: LD_ADDR_VAR 0 2
40304: PUSH
40305: LD_VAR 0 5
40309: ST_TO_ADDR
// end ;
40310: LD_VAR 0 2
40314: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40315: LD_INT 0
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
// if not factory then
40324: LD_VAR 0 1
40328: NOT
40329: IFFALSE 40333
// exit ;
40331: GO 40926
// if control = control_apeman then
40333: LD_VAR 0 4
40337: PUSH
40338: LD_INT 5
40340: EQUAL
40341: IFFALSE 40450
// begin tmp := UnitsInside ( factory ) ;
40343: LD_ADDR_VAR 0 8
40347: PUSH
40348: LD_VAR 0 1
40352: PPUSH
40353: CALL_OW 313
40357: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40358: LD_VAR 0 8
40362: PPUSH
40363: LD_INT 25
40365: PUSH
40366: LD_INT 12
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PPUSH
40373: CALL_OW 72
40377: NOT
40378: IFFALSE 40388
// control := control_manual ;
40380: LD_ADDR_VAR 0 4
40384: PUSH
40385: LD_INT 1
40387: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40388: LD_ADDR_VAR 0 8
40392: PUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL 40085 0 1
40402: ST_TO_ADDR
// if tmp then
40403: LD_VAR 0 8
40407: IFFALSE 40450
// begin for i in tmp do
40409: LD_ADDR_VAR 0 7
40413: PUSH
40414: LD_VAR 0 8
40418: PUSH
40419: FOR_IN
40420: IFFALSE 40448
// if i [ 1 ] = b_ext_radio then
40422: LD_VAR 0 7
40426: PUSH
40427: LD_INT 1
40429: ARRAY
40430: PUSH
40431: LD_INT 22
40433: EQUAL
40434: IFFALSE 40446
// begin control := control_remote ;
40436: LD_ADDR_VAR 0 4
40440: PUSH
40441: LD_INT 2
40443: ST_TO_ADDR
// break ;
40444: GO 40448
// end ;
40446: GO 40419
40448: POP
40449: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40450: LD_VAR 0 1
40454: PPUSH
40455: LD_VAR 0 2
40459: PPUSH
40460: LD_VAR 0 3
40464: PPUSH
40465: LD_VAR 0 4
40469: PPUSH
40470: LD_VAR 0 5
40474: PPUSH
40475: CALL_OW 448
40479: IFFALSE 40514
// begin result := [ chassis , engine , control , weapon ] ;
40481: LD_ADDR_VAR 0 6
40485: PUSH
40486: LD_VAR 0 2
40490: PUSH
40491: LD_VAR 0 3
40495: PUSH
40496: LD_VAR 0 4
40500: PUSH
40501: LD_VAR 0 5
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: ST_TO_ADDR
// exit ;
40512: GO 40926
// end ; _chassis := AvailableChassisList ( factory ) ;
40514: LD_ADDR_VAR 0 9
40518: PUSH
40519: LD_VAR 0 1
40523: PPUSH
40524: CALL_OW 475
40528: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40529: LD_ADDR_VAR 0 11
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 476
40543: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40544: LD_ADDR_VAR 0 12
40548: PUSH
40549: LD_VAR 0 1
40553: PPUSH
40554: CALL_OW 477
40558: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40559: LD_ADDR_VAR 0 10
40563: PUSH
40564: LD_VAR 0 1
40568: PPUSH
40569: CALL_OW 478
40573: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40574: LD_VAR 0 9
40578: NOT
40579: PUSH
40580: LD_VAR 0 11
40584: NOT
40585: OR
40586: PUSH
40587: LD_VAR 0 12
40591: NOT
40592: OR
40593: PUSH
40594: LD_VAR 0 10
40598: NOT
40599: OR
40600: IFFALSE 40635
// begin result := [ chassis , engine , control , weapon ] ;
40602: LD_ADDR_VAR 0 6
40606: PUSH
40607: LD_VAR 0 2
40611: PUSH
40612: LD_VAR 0 3
40616: PUSH
40617: LD_VAR 0 4
40621: PUSH
40622: LD_VAR 0 5
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// exit ;
40633: GO 40926
// end ; if not chassis in _chassis then
40635: LD_VAR 0 2
40639: PUSH
40640: LD_VAR 0 9
40644: IN
40645: NOT
40646: IFFALSE 40672
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40648: LD_ADDR_VAR 0 2
40652: PUSH
40653: LD_VAR 0 9
40657: PUSH
40658: LD_INT 1
40660: PPUSH
40661: LD_VAR 0 9
40665: PPUSH
40666: CALL_OW 12
40670: ARRAY
40671: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40672: LD_VAR 0 2
40676: PPUSH
40677: LD_VAR 0 3
40681: PPUSH
40682: CALL 40931 0 2
40686: NOT
40687: IFFALSE 40746
// repeat engine := _engine [ 1 ] ;
40689: LD_ADDR_VAR 0 3
40693: PUSH
40694: LD_VAR 0 11
40698: PUSH
40699: LD_INT 1
40701: ARRAY
40702: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40703: LD_ADDR_VAR 0 11
40707: PUSH
40708: LD_VAR 0 11
40712: PPUSH
40713: LD_INT 1
40715: PPUSH
40716: CALL_OW 3
40720: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40721: LD_VAR 0 2
40725: PPUSH
40726: LD_VAR 0 3
40730: PPUSH
40731: CALL 40931 0 2
40735: PUSH
40736: LD_VAR 0 11
40740: PUSH
40741: EMPTY
40742: EQUAL
40743: OR
40744: IFFALSE 40689
// if not control in _control then
40746: LD_VAR 0 4
40750: PUSH
40751: LD_VAR 0 12
40755: IN
40756: NOT
40757: IFFALSE 40783
// control := _control [ rand ( 1 , _control ) ] ;
40759: LD_ADDR_VAR 0 4
40763: PUSH
40764: LD_VAR 0 12
40768: PUSH
40769: LD_INT 1
40771: PPUSH
40772: LD_VAR 0 12
40776: PPUSH
40777: CALL_OW 12
40781: ARRAY
40782: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40783: LD_VAR 0 2
40787: PPUSH
40788: LD_VAR 0 5
40792: PPUSH
40793: CALL 41151 0 2
40797: NOT
40798: IFFALSE 40857
// repeat weapon := _weapon [ 1 ] ;
40800: LD_ADDR_VAR 0 5
40804: PUSH
40805: LD_VAR 0 10
40809: PUSH
40810: LD_INT 1
40812: ARRAY
40813: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40814: LD_ADDR_VAR 0 10
40818: PUSH
40819: LD_VAR 0 10
40823: PPUSH
40824: LD_INT 1
40826: PPUSH
40827: CALL_OW 3
40831: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40832: LD_VAR 0 2
40836: PPUSH
40837: LD_VAR 0 5
40841: PPUSH
40842: CALL 41151 0 2
40846: PUSH
40847: LD_VAR 0 10
40851: PUSH
40852: EMPTY
40853: EQUAL
40854: OR
40855: IFFALSE 40800
// result := [ ] ;
40857: LD_ADDR_VAR 0 6
40861: PUSH
40862: EMPTY
40863: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40864: LD_VAR 0 1
40868: PPUSH
40869: LD_VAR 0 2
40873: PPUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: LD_VAR 0 4
40883: PPUSH
40884: LD_VAR 0 5
40888: PPUSH
40889: CALL_OW 448
40893: IFFALSE 40926
// result := [ chassis , engine , control , weapon ] ;
40895: LD_ADDR_VAR 0 6
40899: PUSH
40900: LD_VAR 0 2
40904: PUSH
40905: LD_VAR 0 3
40909: PUSH
40910: LD_VAR 0 4
40914: PUSH
40915: LD_VAR 0 5
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
// end ;
40926: LD_VAR 0 6
40930: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40931: LD_INT 0
40933: PPUSH
// if not chassis or not engine then
40934: LD_VAR 0 1
40938: NOT
40939: PUSH
40940: LD_VAR 0 2
40944: NOT
40945: OR
40946: IFFALSE 40950
// exit ;
40948: GO 41146
// case engine of engine_solar :
40950: LD_VAR 0 2
40954: PUSH
40955: LD_INT 2
40957: DOUBLE
40958: EQUAL
40959: IFTRUE 40963
40961: GO 41001
40963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_INT 11
40971: PUSH
40972: LD_INT 12
40974: PUSH
40975: LD_INT 13
40977: PUSH
40978: LD_INT 14
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 3
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
40999: GO 41130
41001: LD_INT 1
41003: DOUBLE
41004: EQUAL
41005: IFTRUE 41009
41007: GO 41071
41009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_INT 11
41017: PUSH
41018: LD_INT 12
41020: PUSH
41021: LD_INT 13
41023: PUSH
41024: LD_INT 14
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: LD_INT 4
41038: PUSH
41039: LD_INT 5
41041: PUSH
41042: LD_INT 21
41044: PUSH
41045: LD_INT 23
41047: PUSH
41048: LD_INT 22
41050: PUSH
41051: LD_INT 24
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: ST_TO_ADDR
41069: GO 41130
41071: LD_INT 3
41073: DOUBLE
41074: EQUAL
41075: IFTRUE 41079
41077: GO 41129
41079: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_INT 13
41087: PUSH
41088: LD_INT 14
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 3
41096: PUSH
41097: LD_INT 4
41099: PUSH
41100: LD_INT 5
41102: PUSH
41103: LD_INT 21
41105: PUSH
41106: LD_INT 22
41108: PUSH
41109: LD_INT 23
41111: PUSH
41112: LD_INT 24
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
41127: GO 41130
41129: POP
// result := ( chassis in result ) ;
41130: LD_ADDR_VAR 0 3
41134: PUSH
41135: LD_VAR 0 1
41139: PUSH
41140: LD_VAR 0 3
41144: IN
41145: ST_TO_ADDR
// end ;
41146: LD_VAR 0 3
41150: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41151: LD_INT 0
41153: PPUSH
// if not chassis or not weapon then
41154: LD_VAR 0 1
41158: NOT
41159: PUSH
41160: LD_VAR 0 2
41164: NOT
41165: OR
41166: IFFALSE 41170
// exit ;
41168: GO 42230
// case weapon of us_machine_gun :
41170: LD_VAR 0 2
41174: PUSH
41175: LD_INT 2
41177: DOUBLE
41178: EQUAL
41179: IFTRUE 41183
41181: GO 41213
41183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: LD_INT 5
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
41211: GO 42214
41213: LD_INT 3
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41251
41221: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: LD_INT 4
41238: PUSH
41239: LD_INT 5
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: ST_TO_ADDR
41249: GO 42214
41251: LD_INT 11
41253: DOUBLE
41254: EQUAL
41255: IFTRUE 41259
41257: GO 41289
41259: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41260: LD_ADDR_VAR 0 3
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: LD_INT 4
41276: PUSH
41277: LD_INT 5
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: ST_TO_ADDR
41287: GO 42214
41289: LD_INT 4
41291: DOUBLE
41292: EQUAL
41293: IFTRUE 41297
41295: GO 41323
41297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41298: LD_ADDR_VAR 0 3
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: LD_INT 4
41311: PUSH
41312: LD_INT 5
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: ST_TO_ADDR
41321: GO 42214
41323: LD_INT 5
41325: DOUBLE
41326: EQUAL
41327: IFTRUE 41331
41329: GO 41357
41331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 4
41345: PUSH
41346: LD_INT 5
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
41355: GO 42214
41357: LD_INT 9
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41391
41365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: LD_INT 4
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: ST_TO_ADDR
41389: GO 42214
41391: LD_INT 7
41393: DOUBLE
41394: EQUAL
41395: IFTRUE 41399
41397: GO 41425
41399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41400: LD_ADDR_VAR 0 3
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: LD_INT 4
41413: PUSH
41414: LD_INT 5
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: ST_TO_ADDR
41423: GO 42214
41425: LD_INT 12
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41433
41431: GO 41459
41433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 4
41447: PUSH
41448: LD_INT 5
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: ST_TO_ADDR
41457: GO 42214
41459: LD_INT 13
41461: DOUBLE
41462: EQUAL
41463: IFTRUE 41467
41465: GO 41493
41467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41468: LD_ADDR_VAR 0 3
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 3
41478: PUSH
41479: LD_INT 4
41481: PUSH
41482: LD_INT 5
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: ST_TO_ADDR
41491: GO 42214
41493: LD_INT 14
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41519
41501: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_INT 4
41509: PUSH
41510: LD_INT 5
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: ST_TO_ADDR
41517: GO 42214
41519: LD_INT 6
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41527
41525: GO 41545
41527: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_INT 4
41535: PUSH
41536: LD_INT 5
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: ST_TO_ADDR
41543: GO 42214
41545: LD_INT 10
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41553
41551: GO 41571
41553: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 4
41561: PUSH
41562: LD_INT 5
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: ST_TO_ADDR
41569: GO 42214
41571: LD_INT 22
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41579
41577: GO 41605
41579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41580: LD_ADDR_VAR 0 3
41584: PUSH
41585: LD_INT 11
41587: PUSH
41588: LD_INT 12
41590: PUSH
41591: LD_INT 13
41593: PUSH
41594: LD_INT 14
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
41603: GO 42214
41605: LD_INT 23
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41613
41611: GO 41639
41613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41614: LD_ADDR_VAR 0 3
41618: PUSH
41619: LD_INT 11
41621: PUSH
41622: LD_INT 12
41624: PUSH
41625: LD_INT 13
41627: PUSH
41628: LD_INT 14
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: ST_TO_ADDR
41637: GO 42214
41639: LD_INT 24
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41673
41647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_INT 11
41655: PUSH
41656: LD_INT 12
41658: PUSH
41659: LD_INT 13
41661: PUSH
41662: LD_INT 14
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: ST_TO_ADDR
41671: GO 42214
41673: LD_INT 30
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41707
41681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_INT 11
41689: PUSH
41690: LD_INT 12
41692: PUSH
41693: LD_INT 13
41695: PUSH
41696: LD_INT 14
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
41705: GO 42214
41707: LD_INT 25
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41715
41713: GO 41733
41715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 13
41723: PUSH
41724: LD_INT 14
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: ST_TO_ADDR
41731: GO 42214
41733: LD_INT 27
41735: DOUBLE
41736: EQUAL
41737: IFTRUE 41741
41739: GO 41759
41741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_INT 13
41749: PUSH
41750: LD_INT 14
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: ST_TO_ADDR
41757: GO 42214
41759: LD_INT 92
41761: DOUBLE
41762: EQUAL
41763: IFTRUE 41767
41765: GO 41793
41767: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41768: LD_ADDR_VAR 0 3
41772: PUSH
41773: LD_INT 11
41775: PUSH
41776: LD_INT 12
41778: PUSH
41779: LD_INT 13
41781: PUSH
41782: LD_INT 14
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
41791: GO 42214
41793: LD_INT 28
41795: DOUBLE
41796: EQUAL
41797: IFTRUE 41801
41799: GO 41819
41801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41802: LD_ADDR_VAR 0 3
41806: PUSH
41807: LD_INT 13
41809: PUSH
41810: LD_INT 14
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: ST_TO_ADDR
41817: GO 42214
41819: LD_INT 29
41821: DOUBLE
41822: EQUAL
41823: IFTRUE 41827
41825: GO 41845
41827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_INT 13
41835: PUSH
41836: LD_INT 14
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: ST_TO_ADDR
41843: GO 42214
41845: LD_INT 31
41847: DOUBLE
41848: EQUAL
41849: IFTRUE 41853
41851: GO 41871
41853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41854: LD_ADDR_VAR 0 3
41858: PUSH
41859: LD_INT 13
41861: PUSH
41862: LD_INT 14
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: ST_TO_ADDR
41869: GO 42214
41871: LD_INT 26
41873: DOUBLE
41874: EQUAL
41875: IFTRUE 41879
41877: GO 41897
41879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41880: LD_ADDR_VAR 0 3
41884: PUSH
41885: LD_INT 13
41887: PUSH
41888: LD_INT 14
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: ST_TO_ADDR
41895: GO 42214
41897: LD_INT 42
41899: DOUBLE
41900: EQUAL
41901: IFTRUE 41905
41903: GO 41931
41905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: LD_INT 21
41913: PUSH
41914: LD_INT 22
41916: PUSH
41917: LD_INT 23
41919: PUSH
41920: LD_INT 24
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: ST_TO_ADDR
41929: GO 42214
41931: LD_INT 43
41933: DOUBLE
41934: EQUAL
41935: IFTRUE 41939
41937: GO 41965
41939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41940: LD_ADDR_VAR 0 3
41944: PUSH
41945: LD_INT 21
41947: PUSH
41948: LD_INT 22
41950: PUSH
41951: LD_INT 23
41953: PUSH
41954: LD_INT 24
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: ST_TO_ADDR
41963: GO 42214
41965: LD_INT 44
41967: DOUBLE
41968: EQUAL
41969: IFTRUE 41973
41971: GO 41999
41973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41974: LD_ADDR_VAR 0 3
41978: PUSH
41979: LD_INT 21
41981: PUSH
41982: LD_INT 22
41984: PUSH
41985: LD_INT 23
41987: PUSH
41988: LD_INT 24
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
41997: GO 42214
41999: LD_INT 45
42001: DOUBLE
42002: EQUAL
42003: IFTRUE 42007
42005: GO 42033
42007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42008: LD_ADDR_VAR 0 3
42012: PUSH
42013: LD_INT 21
42015: PUSH
42016: LD_INT 22
42018: PUSH
42019: LD_INT 23
42021: PUSH
42022: LD_INT 24
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
42031: GO 42214
42033: LD_INT 49
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42041
42039: GO 42067
42041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42042: LD_ADDR_VAR 0 3
42046: PUSH
42047: LD_INT 21
42049: PUSH
42050: LD_INT 22
42052: PUSH
42053: LD_INT 23
42055: PUSH
42056: LD_INT 24
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
42065: GO 42214
42067: LD_INT 51
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42075
42073: GO 42101
42075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42076: LD_ADDR_VAR 0 3
42080: PUSH
42081: LD_INT 21
42083: PUSH
42084: LD_INT 22
42086: PUSH
42087: LD_INT 23
42089: PUSH
42090: LD_INT 24
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
42099: GO 42214
42101: LD_INT 52
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42135
42109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42110: LD_ADDR_VAR 0 3
42114: PUSH
42115: LD_INT 21
42117: PUSH
42118: LD_INT 22
42120: PUSH
42121: LD_INT 23
42123: PUSH
42124: LD_INT 24
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: ST_TO_ADDR
42133: GO 42214
42135: LD_INT 53
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42161
42143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_INT 23
42151: PUSH
42152: LD_INT 24
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: ST_TO_ADDR
42159: GO 42214
42161: LD_INT 46
42163: DOUBLE
42164: EQUAL
42165: IFTRUE 42169
42167: GO 42187
42169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42170: LD_ADDR_VAR 0 3
42174: PUSH
42175: LD_INT 23
42177: PUSH
42178: LD_INT 24
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: ST_TO_ADDR
42185: GO 42214
42187: LD_INT 47
42189: DOUBLE
42190: EQUAL
42191: IFTRUE 42195
42193: GO 42213
42195: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42196: LD_ADDR_VAR 0 3
42200: PUSH
42201: LD_INT 23
42203: PUSH
42204: LD_INT 24
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: ST_TO_ADDR
42211: GO 42214
42213: POP
// result := ( chassis in result ) ;
42214: LD_ADDR_VAR 0 3
42218: PUSH
42219: LD_VAR 0 1
42223: PUSH
42224: LD_VAR 0 3
42228: IN
42229: ST_TO_ADDR
// end ;
42230: LD_VAR 0 3
42234: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42235: LD_INT 0
42237: PPUSH
42238: PPUSH
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
// result := array ;
42244: LD_ADDR_VAR 0 5
42248: PUSH
42249: LD_VAR 0 1
42253: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42254: LD_VAR 0 1
42258: NOT
42259: PUSH
42260: LD_VAR 0 2
42264: NOT
42265: OR
42266: PUSH
42267: LD_VAR 0 3
42271: NOT
42272: OR
42273: PUSH
42274: LD_VAR 0 2
42278: PUSH
42279: LD_VAR 0 1
42283: GREATER
42284: OR
42285: PUSH
42286: LD_VAR 0 3
42290: PUSH
42291: LD_VAR 0 1
42295: GREATER
42296: OR
42297: IFFALSE 42301
// exit ;
42299: GO 42597
// if direction then
42301: LD_VAR 0 4
42305: IFFALSE 42369
// begin d := 1 ;
42307: LD_ADDR_VAR 0 9
42311: PUSH
42312: LD_INT 1
42314: ST_TO_ADDR
// if i_from > i_to then
42315: LD_VAR 0 2
42319: PUSH
42320: LD_VAR 0 3
42324: GREATER
42325: IFFALSE 42351
// length := ( array - i_from ) + i_to else
42327: LD_ADDR_VAR 0 11
42331: PUSH
42332: LD_VAR 0 1
42336: PUSH
42337: LD_VAR 0 2
42341: MINUS
42342: PUSH
42343: LD_VAR 0 3
42347: PLUS
42348: ST_TO_ADDR
42349: GO 42367
// length := i_to - i_from ;
42351: LD_ADDR_VAR 0 11
42355: PUSH
42356: LD_VAR 0 3
42360: PUSH
42361: LD_VAR 0 2
42365: MINUS
42366: ST_TO_ADDR
// end else
42367: GO 42430
// begin d := - 1 ;
42369: LD_ADDR_VAR 0 9
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: ST_TO_ADDR
// if i_from > i_to then
42378: LD_VAR 0 2
42382: PUSH
42383: LD_VAR 0 3
42387: GREATER
42388: IFFALSE 42408
// length := i_from - i_to else
42390: LD_ADDR_VAR 0 11
42394: PUSH
42395: LD_VAR 0 2
42399: PUSH
42400: LD_VAR 0 3
42404: MINUS
42405: ST_TO_ADDR
42406: GO 42430
// length := ( array - i_to ) + i_from ;
42408: LD_ADDR_VAR 0 11
42412: PUSH
42413: LD_VAR 0 1
42417: PUSH
42418: LD_VAR 0 3
42422: MINUS
42423: PUSH
42424: LD_VAR 0 2
42428: PLUS
42429: ST_TO_ADDR
// end ; if not length then
42430: LD_VAR 0 11
42434: NOT
42435: IFFALSE 42439
// exit ;
42437: GO 42597
// tmp := array ;
42439: LD_ADDR_VAR 0 10
42443: PUSH
42444: LD_VAR 0 1
42448: ST_TO_ADDR
// for i = 1 to length do
42449: LD_ADDR_VAR 0 6
42453: PUSH
42454: DOUBLE
42455: LD_INT 1
42457: DEC
42458: ST_TO_ADDR
42459: LD_VAR 0 11
42463: PUSH
42464: FOR_TO
42465: IFFALSE 42585
// begin for j = 1 to array do
42467: LD_ADDR_VAR 0 7
42471: PUSH
42472: DOUBLE
42473: LD_INT 1
42475: DEC
42476: ST_TO_ADDR
42477: LD_VAR 0 1
42481: PUSH
42482: FOR_TO
42483: IFFALSE 42571
// begin k := j + d ;
42485: LD_ADDR_VAR 0 8
42489: PUSH
42490: LD_VAR 0 7
42494: PUSH
42495: LD_VAR 0 9
42499: PLUS
42500: ST_TO_ADDR
// if k > array then
42501: LD_VAR 0 8
42505: PUSH
42506: LD_VAR 0 1
42510: GREATER
42511: IFFALSE 42521
// k := 1 ;
42513: LD_ADDR_VAR 0 8
42517: PUSH
42518: LD_INT 1
42520: ST_TO_ADDR
// if not k then
42521: LD_VAR 0 8
42525: NOT
42526: IFFALSE 42538
// k := array ;
42528: LD_ADDR_VAR 0 8
42532: PUSH
42533: LD_VAR 0 1
42537: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42538: LD_ADDR_VAR 0 10
42542: PUSH
42543: LD_VAR 0 10
42547: PPUSH
42548: LD_VAR 0 8
42552: PPUSH
42553: LD_VAR 0 1
42557: PUSH
42558: LD_VAR 0 7
42562: ARRAY
42563: PPUSH
42564: CALL_OW 1
42568: ST_TO_ADDR
// end ;
42569: GO 42482
42571: POP
42572: POP
// array := tmp ;
42573: LD_ADDR_VAR 0 1
42577: PUSH
42578: LD_VAR 0 10
42582: ST_TO_ADDR
// end ;
42583: GO 42464
42585: POP
42586: POP
// result := array ;
42587: LD_ADDR_VAR 0 5
42591: PUSH
42592: LD_VAR 0 1
42596: ST_TO_ADDR
// end ;
42597: LD_VAR 0 5
42601: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42602: LD_INT 0
42604: PPUSH
42605: PPUSH
// result := 0 ;
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 0
42613: ST_TO_ADDR
// if not array or not value in array then
42614: LD_VAR 0 1
42618: NOT
42619: PUSH
42620: LD_VAR 0 2
42624: PUSH
42625: LD_VAR 0 1
42629: IN
42630: NOT
42631: OR
42632: IFFALSE 42636
// exit ;
42634: GO 42690
// for i = 1 to array do
42636: LD_ADDR_VAR 0 4
42640: PUSH
42641: DOUBLE
42642: LD_INT 1
42644: DEC
42645: ST_TO_ADDR
42646: LD_VAR 0 1
42650: PUSH
42651: FOR_TO
42652: IFFALSE 42688
// if value = array [ i ] then
42654: LD_VAR 0 2
42658: PUSH
42659: LD_VAR 0 1
42663: PUSH
42664: LD_VAR 0 4
42668: ARRAY
42669: EQUAL
42670: IFFALSE 42686
// begin result := i ;
42672: LD_ADDR_VAR 0 3
42676: PUSH
42677: LD_VAR 0 4
42681: ST_TO_ADDR
// exit ;
42682: POP
42683: POP
42684: GO 42690
// end ;
42686: GO 42651
42688: POP
42689: POP
// end ;
42690: LD_VAR 0 3
42694: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42695: LD_INT 0
42697: PPUSH
// vc_chassis := chassis ;
42698: LD_ADDR_OWVAR 37
42702: PUSH
42703: LD_VAR 0 1
42707: ST_TO_ADDR
// vc_engine := engine ;
42708: LD_ADDR_OWVAR 39
42712: PUSH
42713: LD_VAR 0 2
42717: ST_TO_ADDR
// vc_control := control ;
42718: LD_ADDR_OWVAR 38
42722: PUSH
42723: LD_VAR 0 3
42727: ST_TO_ADDR
// vc_weapon := weapon ;
42728: LD_ADDR_OWVAR 40
42732: PUSH
42733: LD_VAR 0 4
42737: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42738: LD_ADDR_OWVAR 41
42742: PUSH
42743: LD_VAR 0 5
42747: ST_TO_ADDR
// end ;
42748: LD_VAR 0 6
42752: RET
// export function WantPlant ( unit ) ; var task ; begin
42753: LD_INT 0
42755: PPUSH
42756: PPUSH
// result := false ;
42757: LD_ADDR_VAR 0 2
42761: PUSH
42762: LD_INT 0
42764: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_VAR 0 1
42774: PPUSH
42775: CALL_OW 437
42779: ST_TO_ADDR
// if task then
42780: LD_VAR 0 3
42784: IFFALSE 42812
// if task [ 1 ] [ 1 ] = p then
42786: LD_VAR 0 3
42790: PUSH
42791: LD_INT 1
42793: ARRAY
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: PUSH
42799: LD_STRING p
42801: EQUAL
42802: IFFALSE 42812
// result := true ;
42804: LD_ADDR_VAR 0 2
42808: PUSH
42809: LD_INT 1
42811: ST_TO_ADDR
// end ;
42812: LD_VAR 0 2
42816: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42817: LD_INT 0
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
// if pos < 1 then
42823: LD_VAR 0 2
42827: PUSH
42828: LD_INT 1
42830: LESS
42831: IFFALSE 42835
// exit ;
42833: GO 43138
// if pos = 1 then
42835: LD_VAR 0 2
42839: PUSH
42840: LD_INT 1
42842: EQUAL
42843: IFFALSE 42876
// result := Replace ( arr , pos [ 1 ] , value ) else
42845: LD_ADDR_VAR 0 4
42849: PUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: LD_VAR 0 2
42859: PUSH
42860: LD_INT 1
42862: ARRAY
42863: PPUSH
42864: LD_VAR 0 3
42868: PPUSH
42869: CALL_OW 1
42873: ST_TO_ADDR
42874: GO 43138
// begin tmp := arr ;
42876: LD_ADDR_VAR 0 6
42880: PUSH
42881: LD_VAR 0 1
42885: ST_TO_ADDR
// s_arr := [ tmp ] ;
42886: LD_ADDR_VAR 0 7
42890: PUSH
42891: LD_VAR 0 6
42895: PUSH
42896: EMPTY
42897: LIST
42898: ST_TO_ADDR
// for i = 1 to pos - 1 do
42899: LD_ADDR_VAR 0 5
42903: PUSH
42904: DOUBLE
42905: LD_INT 1
42907: DEC
42908: ST_TO_ADDR
42909: LD_VAR 0 2
42913: PUSH
42914: LD_INT 1
42916: MINUS
42917: PUSH
42918: FOR_TO
42919: IFFALSE 42964
// begin tmp := tmp [ pos [ i ] ] ;
42921: LD_ADDR_VAR 0 6
42925: PUSH
42926: LD_VAR 0 6
42930: PUSH
42931: LD_VAR 0 2
42935: PUSH
42936: LD_VAR 0 5
42940: ARRAY
42941: ARRAY
42942: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42943: LD_ADDR_VAR 0 7
42947: PUSH
42948: LD_VAR 0 7
42952: PUSH
42953: LD_VAR 0 6
42957: PUSH
42958: EMPTY
42959: LIST
42960: ADD
42961: ST_TO_ADDR
// end ;
42962: GO 42918
42964: POP
42965: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42966: LD_ADDR_VAR 0 6
42970: PUSH
42971: LD_VAR 0 6
42975: PPUSH
42976: LD_VAR 0 2
42980: PUSH
42981: LD_VAR 0 2
42985: ARRAY
42986: PPUSH
42987: LD_VAR 0 3
42991: PPUSH
42992: CALL_OW 1
42996: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42997: LD_ADDR_VAR 0 7
43001: PUSH
43002: LD_VAR 0 7
43006: PPUSH
43007: LD_VAR 0 7
43011: PPUSH
43012: LD_VAR 0 6
43016: PPUSH
43017: CALL_OW 1
43021: ST_TO_ADDR
// for i = s_arr downto 2 do
43022: LD_ADDR_VAR 0 5
43026: PUSH
43027: DOUBLE
43028: LD_VAR 0 7
43032: INC
43033: ST_TO_ADDR
43034: LD_INT 2
43036: PUSH
43037: FOR_DOWNTO
43038: IFFALSE 43122
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43040: LD_ADDR_VAR 0 6
43044: PUSH
43045: LD_VAR 0 7
43049: PUSH
43050: LD_VAR 0 5
43054: PUSH
43055: LD_INT 1
43057: MINUS
43058: ARRAY
43059: PPUSH
43060: LD_VAR 0 2
43064: PUSH
43065: LD_VAR 0 5
43069: PUSH
43070: LD_INT 1
43072: MINUS
43073: ARRAY
43074: PPUSH
43075: LD_VAR 0 7
43079: PUSH
43080: LD_VAR 0 5
43084: ARRAY
43085: PPUSH
43086: CALL_OW 1
43090: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43091: LD_ADDR_VAR 0 7
43095: PUSH
43096: LD_VAR 0 7
43100: PPUSH
43101: LD_VAR 0 5
43105: PUSH
43106: LD_INT 1
43108: MINUS
43109: PPUSH
43110: LD_VAR 0 6
43114: PPUSH
43115: CALL_OW 1
43119: ST_TO_ADDR
// end ;
43120: GO 43037
43122: POP
43123: POP
// result := s_arr [ 1 ] ;
43124: LD_ADDR_VAR 0 4
43128: PUSH
43129: LD_VAR 0 7
43133: PUSH
43134: LD_INT 1
43136: ARRAY
43137: ST_TO_ADDR
// end ; end ;
43138: LD_VAR 0 4
43142: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43143: LD_INT 0
43145: PPUSH
43146: PPUSH
// if not list then
43147: LD_VAR 0 1
43151: NOT
43152: IFFALSE 43156
// exit ;
43154: GO 43247
// i := list [ pos1 ] ;
43156: LD_ADDR_VAR 0 5
43160: PUSH
43161: LD_VAR 0 1
43165: PUSH
43166: LD_VAR 0 2
43170: ARRAY
43171: ST_TO_ADDR
// if not i then
43172: LD_VAR 0 5
43176: NOT
43177: IFFALSE 43181
// exit ;
43179: GO 43247
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43181: LD_ADDR_VAR 0 1
43185: PUSH
43186: LD_VAR 0 1
43190: PPUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: LD_VAR 0 1
43200: PUSH
43201: LD_VAR 0 3
43205: ARRAY
43206: PPUSH
43207: CALL_OW 1
43211: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43212: LD_ADDR_VAR 0 1
43216: PUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: LD_VAR 0 3
43226: PPUSH
43227: LD_VAR 0 5
43231: PPUSH
43232: CALL_OW 1
43236: ST_TO_ADDR
// result := list ;
43237: LD_ADDR_VAR 0 4
43241: PUSH
43242: LD_VAR 0 1
43246: ST_TO_ADDR
// end ;
43247: LD_VAR 0 4
43251: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43252: LD_INT 0
43254: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43255: LD_ADDR_VAR 0 5
43259: PUSH
43260: LD_VAR 0 1
43264: PPUSH
43265: CALL_OW 250
43269: PPUSH
43270: LD_VAR 0 1
43274: PPUSH
43275: CALL_OW 251
43279: PPUSH
43280: LD_VAR 0 2
43284: PPUSH
43285: LD_VAR 0 3
43289: PPUSH
43290: LD_VAR 0 4
43294: PPUSH
43295: CALL 43305 0 5
43299: ST_TO_ADDR
// end ;
43300: LD_VAR 0 5
43304: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43305: LD_INT 0
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
// if not list then
43311: LD_VAR 0 3
43315: NOT
43316: IFFALSE 43320
// exit ;
43318: GO 43708
// result := [ ] ;
43320: LD_ADDR_VAR 0 6
43324: PUSH
43325: EMPTY
43326: ST_TO_ADDR
// for i in list do
43327: LD_ADDR_VAR 0 7
43331: PUSH
43332: LD_VAR 0 3
43336: PUSH
43337: FOR_IN
43338: IFFALSE 43540
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43340: LD_ADDR_VAR 0 9
43344: PUSH
43345: LD_VAR 0 7
43349: PPUSH
43350: LD_VAR 0 1
43354: PPUSH
43355: LD_VAR 0 2
43359: PPUSH
43360: CALL_OW 297
43364: ST_TO_ADDR
// if not result then
43365: LD_VAR 0 6
43369: NOT
43370: IFFALSE 43396
// result := [ [ i , tmp ] ] else
43372: LD_ADDR_VAR 0 6
43376: PUSH
43377: LD_VAR 0 7
43381: PUSH
43382: LD_VAR 0 9
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: EMPTY
43392: LIST
43393: ST_TO_ADDR
43394: GO 43538
// begin if result [ result ] [ 2 ] < tmp then
43396: LD_VAR 0 6
43400: PUSH
43401: LD_VAR 0 6
43405: ARRAY
43406: PUSH
43407: LD_INT 2
43409: ARRAY
43410: PUSH
43411: LD_VAR 0 9
43415: LESS
43416: IFFALSE 43458
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43418: LD_ADDR_VAR 0 6
43422: PUSH
43423: LD_VAR 0 6
43427: PPUSH
43428: LD_VAR 0 6
43432: PUSH
43433: LD_INT 1
43435: PLUS
43436: PPUSH
43437: LD_VAR 0 7
43441: PUSH
43442: LD_VAR 0 9
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PPUSH
43451: CALL_OW 2
43455: ST_TO_ADDR
43456: GO 43538
// for j = 1 to result do
43458: LD_ADDR_VAR 0 8
43462: PUSH
43463: DOUBLE
43464: LD_INT 1
43466: DEC
43467: ST_TO_ADDR
43468: LD_VAR 0 6
43472: PUSH
43473: FOR_TO
43474: IFFALSE 43536
// begin if tmp < result [ j ] [ 2 ] then
43476: LD_VAR 0 9
43480: PUSH
43481: LD_VAR 0 6
43485: PUSH
43486: LD_VAR 0 8
43490: ARRAY
43491: PUSH
43492: LD_INT 2
43494: ARRAY
43495: LESS
43496: IFFALSE 43534
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43498: LD_ADDR_VAR 0 6
43502: PUSH
43503: LD_VAR 0 6
43507: PPUSH
43508: LD_VAR 0 8
43512: PPUSH
43513: LD_VAR 0 7
43517: PUSH
43518: LD_VAR 0 9
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PPUSH
43527: CALL_OW 2
43531: ST_TO_ADDR
// break ;
43532: GO 43536
// end ; end ;
43534: GO 43473
43536: POP
43537: POP
// end ; end ;
43538: GO 43337
43540: POP
43541: POP
// if result and not asc then
43542: LD_VAR 0 6
43546: PUSH
43547: LD_VAR 0 4
43551: NOT
43552: AND
43553: IFFALSE 43628
// begin tmp := result ;
43555: LD_ADDR_VAR 0 9
43559: PUSH
43560: LD_VAR 0 6
43564: ST_TO_ADDR
// for i = tmp downto 1 do
43565: LD_ADDR_VAR 0 7
43569: PUSH
43570: DOUBLE
43571: LD_VAR 0 9
43575: INC
43576: ST_TO_ADDR
43577: LD_INT 1
43579: PUSH
43580: FOR_DOWNTO
43581: IFFALSE 43626
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43583: LD_ADDR_VAR 0 6
43587: PUSH
43588: LD_VAR 0 6
43592: PPUSH
43593: LD_VAR 0 9
43597: PUSH
43598: LD_VAR 0 7
43602: MINUS
43603: PUSH
43604: LD_INT 1
43606: PLUS
43607: PPUSH
43608: LD_VAR 0 9
43612: PUSH
43613: LD_VAR 0 7
43617: ARRAY
43618: PPUSH
43619: CALL_OW 1
43623: ST_TO_ADDR
43624: GO 43580
43626: POP
43627: POP
// end ; tmp := [ ] ;
43628: LD_ADDR_VAR 0 9
43632: PUSH
43633: EMPTY
43634: ST_TO_ADDR
// if mode then
43635: LD_VAR 0 5
43639: IFFALSE 43708
// begin for i = 1 to result do
43641: LD_ADDR_VAR 0 7
43645: PUSH
43646: DOUBLE
43647: LD_INT 1
43649: DEC
43650: ST_TO_ADDR
43651: LD_VAR 0 6
43655: PUSH
43656: FOR_TO
43657: IFFALSE 43696
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43659: LD_ADDR_VAR 0 9
43663: PUSH
43664: LD_VAR 0 9
43668: PPUSH
43669: LD_VAR 0 7
43673: PPUSH
43674: LD_VAR 0 6
43678: PUSH
43679: LD_VAR 0 7
43683: ARRAY
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: PPUSH
43689: CALL_OW 1
43693: ST_TO_ADDR
43694: GO 43656
43696: POP
43697: POP
// result := tmp ;
43698: LD_ADDR_VAR 0 6
43702: PUSH
43703: LD_VAR 0 9
43707: ST_TO_ADDR
// end ; end ;
43708: LD_VAR 0 6
43712: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43713: LD_INT 0
43715: PPUSH
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
43720: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43721: LD_ADDR_VAR 0 5
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// if not x or not y then
43743: LD_VAR 0 2
43747: NOT
43748: PUSH
43749: LD_VAR 0 3
43753: NOT
43754: OR
43755: IFFALSE 43759
// exit ;
43757: GO 45409
// if not range then
43759: LD_VAR 0 4
43763: NOT
43764: IFFALSE 43774
// range := 10 ;
43766: LD_ADDR_VAR 0 4
43770: PUSH
43771: LD_INT 10
43773: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43774: LD_ADDR_VAR 0 8
43778: PUSH
43779: LD_INT 81
43781: PUSH
43782: LD_VAR 0 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 92
43793: PUSH
43794: LD_VAR 0 2
43798: PUSH
43799: LD_VAR 0 3
43803: PUSH
43804: LD_VAR 0 4
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 21
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: PPUSH
43837: CALL_OW 69
43841: ST_TO_ADDR
// if not tmp then
43842: LD_VAR 0 8
43846: NOT
43847: IFFALSE 43851
// exit ;
43849: GO 45409
// for i in tmp do
43851: LD_ADDR_VAR 0 6
43855: PUSH
43856: LD_VAR 0 8
43860: PUSH
43861: FOR_IN
43862: IFFALSE 45384
// begin points := [ 0 , 0 , 0 ] ;
43864: LD_ADDR_VAR 0 9
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// bpoints := 1 ;
43883: LD_ADDR_VAR 0 10
43887: PUSH
43888: LD_INT 1
43890: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43891: LD_VAR 0 6
43895: PPUSH
43896: CALL_OW 247
43900: PUSH
43901: LD_INT 1
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43909
43907: GO 44487
43909: POP
// begin if GetClass ( i ) = 1 then
43910: LD_VAR 0 6
43914: PPUSH
43915: CALL_OW 257
43919: PUSH
43920: LD_INT 1
43922: EQUAL
43923: IFFALSE 43944
// points := [ 10 , 5 , 3 ] ;
43925: LD_ADDR_VAR 0 9
43929: PUSH
43930: LD_INT 10
43932: PUSH
43933: LD_INT 5
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43944: LD_VAR 0 6
43948: PPUSH
43949: CALL_OW 257
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 4
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: IN
43968: IFFALSE 43989
// points := [ 3 , 2 , 1 ] ;
43970: LD_ADDR_VAR 0 9
43974: PUSH
43975: LD_INT 3
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43989: LD_VAR 0 6
43993: PPUSH
43994: CALL_OW 257
43998: PUSH
43999: LD_INT 5
44001: EQUAL
44002: IFFALSE 44023
// points := [ 130 , 5 , 2 ] ;
44004: LD_ADDR_VAR 0 9
44008: PUSH
44009: LD_INT 130
44011: PUSH
44012: LD_INT 5
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44023: LD_VAR 0 6
44027: PPUSH
44028: CALL_OW 257
44032: PUSH
44033: LD_INT 8
44035: EQUAL
44036: IFFALSE 44057
// points := [ 35 , 35 , 30 ] ;
44038: LD_ADDR_VAR 0 9
44042: PUSH
44043: LD_INT 35
44045: PUSH
44046: LD_INT 35
44048: PUSH
44049: LD_INT 30
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44057: LD_VAR 0 6
44061: PPUSH
44062: CALL_OW 257
44066: PUSH
44067: LD_INT 9
44069: EQUAL
44070: IFFALSE 44091
// points := [ 20 , 55 , 40 ] ;
44072: LD_ADDR_VAR 0 9
44076: PUSH
44077: LD_INT 20
44079: PUSH
44080: LD_INT 55
44082: PUSH
44083: LD_INT 40
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 257
44100: PUSH
44101: LD_INT 12
44103: PUSH
44104: LD_INT 16
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: IN
44111: IFFALSE 44132
// points := [ 5 , 3 , 2 ] ;
44113: LD_ADDR_VAR 0 9
44117: PUSH
44118: LD_INT 5
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44132: LD_VAR 0 6
44136: PPUSH
44137: CALL_OW 257
44141: PUSH
44142: LD_INT 17
44144: EQUAL
44145: IFFALSE 44166
// points := [ 100 , 50 , 75 ] ;
44147: LD_ADDR_VAR 0 9
44151: PUSH
44152: LD_INT 100
44154: PUSH
44155: LD_INT 50
44157: PUSH
44158: LD_INT 75
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44166: LD_VAR 0 6
44170: PPUSH
44171: CALL_OW 257
44175: PUSH
44176: LD_INT 15
44178: EQUAL
44179: IFFALSE 44200
// points := [ 10 , 5 , 3 ] ;
44181: LD_ADDR_VAR 0 9
44185: PUSH
44186: LD_INT 10
44188: PUSH
44189: LD_INT 5
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44200: LD_VAR 0 6
44204: PPUSH
44205: CALL_OW 257
44209: PUSH
44210: LD_INT 14
44212: EQUAL
44213: IFFALSE 44234
// points := [ 10 , 0 , 0 ] ;
44215: LD_ADDR_VAR 0 9
44219: PUSH
44220: LD_INT 10
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44234: LD_VAR 0 6
44238: PPUSH
44239: CALL_OW 257
44243: PUSH
44244: LD_INT 11
44246: EQUAL
44247: IFFALSE 44268
// points := [ 30 , 10 , 5 ] ;
44249: LD_ADDR_VAR 0 9
44253: PUSH
44254: LD_INT 30
44256: PUSH
44257: LD_INT 10
44259: PUSH
44260: LD_INT 5
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44268: LD_VAR 0 1
44272: PPUSH
44273: LD_INT 5
44275: PPUSH
44276: CALL_OW 321
44280: PUSH
44281: LD_INT 2
44283: EQUAL
44284: IFFALSE 44301
// bpoints := bpoints * 1.8 ;
44286: LD_ADDR_VAR 0 10
44290: PUSH
44291: LD_VAR 0 10
44295: PUSH
44296: LD_REAL  1.80000000000000E+0000
44299: MUL
44300: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44301: LD_VAR 0 6
44305: PPUSH
44306: CALL_OW 257
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: LD_INT 4
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: IN
44329: PUSH
44330: LD_VAR 0 1
44334: PPUSH
44335: LD_INT 51
44337: PPUSH
44338: CALL_OW 321
44342: PUSH
44343: LD_INT 2
44345: EQUAL
44346: AND
44347: IFFALSE 44364
// bpoints := bpoints * 1.2 ;
44349: LD_ADDR_VAR 0 10
44353: PUSH
44354: LD_VAR 0 10
44358: PUSH
44359: LD_REAL  1.20000000000000E+0000
44362: MUL
44363: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44364: LD_VAR 0 6
44368: PPUSH
44369: CALL_OW 257
44373: PUSH
44374: LD_INT 5
44376: PUSH
44377: LD_INT 7
44379: PUSH
44380: LD_INT 9
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: IN
44388: PUSH
44389: LD_VAR 0 1
44393: PPUSH
44394: LD_INT 52
44396: PPUSH
44397: CALL_OW 321
44401: PUSH
44402: LD_INT 2
44404: EQUAL
44405: AND
44406: IFFALSE 44423
// bpoints := bpoints * 1.5 ;
44408: LD_ADDR_VAR 0 10
44412: PUSH
44413: LD_VAR 0 10
44417: PUSH
44418: LD_REAL  1.50000000000000E+0000
44421: MUL
44422: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44423: LD_VAR 0 1
44427: PPUSH
44428: LD_INT 66
44430: PPUSH
44431: CALL_OW 321
44435: PUSH
44436: LD_INT 2
44438: EQUAL
44439: IFFALSE 44456
// bpoints := bpoints * 1.1 ;
44441: LD_ADDR_VAR 0 10
44445: PUSH
44446: LD_VAR 0 10
44450: PUSH
44451: LD_REAL  1.10000000000000E+0000
44454: MUL
44455: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44456: LD_ADDR_VAR 0 10
44460: PUSH
44461: LD_VAR 0 10
44465: PUSH
44466: LD_VAR 0 6
44470: PPUSH
44471: LD_INT 1
44473: PPUSH
44474: CALL_OW 259
44478: PUSH
44479: LD_REAL  1.15000000000000E+0000
44482: MUL
44483: MUL
44484: ST_TO_ADDR
// end ; unit_vehicle :
44485: GO 45313
44487: LD_INT 2
44489: DOUBLE
44490: EQUAL
44491: IFTRUE 44495
44493: GO 45301
44495: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44496: LD_VAR 0 6
44500: PPUSH
44501: CALL_OW 264
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 42
44511: PUSH
44512: LD_INT 24
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: IN
44520: IFFALSE 44541
// points := [ 25 , 5 , 3 ] ;
44522: LD_ADDR_VAR 0 9
44526: PUSH
44527: LD_INT 25
44529: PUSH
44530: LD_INT 5
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44541: LD_VAR 0 6
44545: PPUSH
44546: CALL_OW 264
44550: PUSH
44551: LD_INT 4
44553: PUSH
44554: LD_INT 43
44556: PUSH
44557: LD_INT 25
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: IN
44565: IFFALSE 44586
// points := [ 40 , 15 , 5 ] ;
44567: LD_ADDR_VAR 0 9
44571: PUSH
44572: LD_INT 40
44574: PUSH
44575: LD_INT 15
44577: PUSH
44578: LD_INT 5
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44586: LD_VAR 0 6
44590: PPUSH
44591: CALL_OW 264
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 23
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: IN
44606: IFFALSE 44627
// points := [ 7 , 25 , 8 ] ;
44608: LD_ADDR_VAR 0 9
44612: PUSH
44613: LD_INT 7
44615: PUSH
44616: LD_INT 25
44618: PUSH
44619: LD_INT 8
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44627: LD_VAR 0 6
44631: PPUSH
44632: CALL_OW 264
44636: PUSH
44637: LD_INT 5
44639: PUSH
44640: LD_INT 27
44642: PUSH
44643: LD_INT 44
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: IN
44651: IFFALSE 44672
// points := [ 14 , 50 , 16 ] ;
44653: LD_ADDR_VAR 0 9
44657: PUSH
44658: LD_INT 14
44660: PUSH
44661: LD_INT 50
44663: PUSH
44664: LD_INT 16
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44672: LD_VAR 0 6
44676: PPUSH
44677: CALL_OW 264
44681: PUSH
44682: LD_INT 6
44684: PUSH
44685: LD_INT 46
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: IN
44692: IFFALSE 44713
// points := [ 32 , 120 , 70 ] ;
44694: LD_ADDR_VAR 0 9
44698: PUSH
44699: LD_INT 32
44701: PUSH
44702: LD_INT 120
44704: PUSH
44705: LD_INT 70
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44713: LD_VAR 0 6
44717: PPUSH
44718: CALL_OW 264
44722: PUSH
44723: LD_INT 7
44725: PUSH
44726: LD_INT 28
44728: PUSH
44729: LD_INT 45
44731: PUSH
44732: LD_INT 92
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: IN
44741: IFFALSE 44762
// points := [ 35 , 20 , 45 ] ;
44743: LD_ADDR_VAR 0 9
44747: PUSH
44748: LD_INT 35
44750: PUSH
44751: LD_INT 20
44753: PUSH
44754: LD_INT 45
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44762: LD_VAR 0 6
44766: PPUSH
44767: CALL_OW 264
44771: PUSH
44772: LD_INT 47
44774: PUSH
44775: EMPTY
44776: LIST
44777: IN
44778: IFFALSE 44799
// points := [ 67 , 45 , 75 ] ;
44780: LD_ADDR_VAR 0 9
44784: PUSH
44785: LD_INT 67
44787: PUSH
44788: LD_INT 45
44790: PUSH
44791: LD_INT 75
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44799: LD_VAR 0 6
44803: PPUSH
44804: CALL_OW 264
44808: PUSH
44809: LD_INT 26
44811: PUSH
44812: EMPTY
44813: LIST
44814: IN
44815: IFFALSE 44836
// points := [ 120 , 30 , 80 ] ;
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: LD_INT 120
44824: PUSH
44825: LD_INT 30
44827: PUSH
44828: LD_INT 80
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44836: LD_VAR 0 6
44840: PPUSH
44841: CALL_OW 264
44845: PUSH
44846: LD_INT 22
44848: PUSH
44849: EMPTY
44850: LIST
44851: IN
44852: IFFALSE 44873
// points := [ 40 , 1 , 1 ] ;
44854: LD_ADDR_VAR 0 9
44858: PUSH
44859: LD_INT 40
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44873: LD_VAR 0 6
44877: PPUSH
44878: CALL_OW 264
44882: PUSH
44883: LD_INT 29
44885: PUSH
44886: EMPTY
44887: LIST
44888: IN
44889: IFFALSE 44910
// points := [ 70 , 200 , 400 ] ;
44891: LD_ADDR_VAR 0 9
44895: PUSH
44896: LD_INT 70
44898: PUSH
44899: LD_INT 200
44901: PUSH
44902: LD_INT 400
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44910: LD_VAR 0 6
44914: PPUSH
44915: CALL_OW 264
44919: PUSH
44920: LD_INT 14
44922: PUSH
44923: LD_INT 53
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: IN
44930: IFFALSE 44951
// points := [ 40 , 10 , 20 ] ;
44932: LD_ADDR_VAR 0 9
44936: PUSH
44937: LD_INT 40
44939: PUSH
44940: LD_INT 10
44942: PUSH
44943: LD_INT 20
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44951: LD_VAR 0 6
44955: PPUSH
44956: CALL_OW 264
44960: PUSH
44961: LD_INT 9
44963: PUSH
44964: EMPTY
44965: LIST
44966: IN
44967: IFFALSE 44988
// points := [ 5 , 70 , 20 ] ;
44969: LD_ADDR_VAR 0 9
44973: PUSH
44974: LD_INT 5
44976: PUSH
44977: LD_INT 70
44979: PUSH
44980: LD_INT 20
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44988: LD_VAR 0 6
44992: PPUSH
44993: CALL_OW 264
44997: PUSH
44998: LD_INT 10
45000: PUSH
45001: EMPTY
45002: LIST
45003: IN
45004: IFFALSE 45025
// points := [ 35 , 110 , 70 ] ;
45006: LD_ADDR_VAR 0 9
45010: PUSH
45011: LD_INT 35
45013: PUSH
45014: LD_INT 110
45016: PUSH
45017: LD_INT 70
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45025: LD_VAR 0 6
45029: PPUSH
45030: CALL_OW 265
45034: PUSH
45035: LD_INT 25
45037: EQUAL
45038: IFFALSE 45059
// points := [ 80 , 65 , 100 ] ;
45040: LD_ADDR_VAR 0 9
45044: PUSH
45045: LD_INT 80
45047: PUSH
45048: LD_INT 65
45050: PUSH
45051: LD_INT 100
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45059: LD_VAR 0 6
45063: PPUSH
45064: CALL_OW 263
45068: PUSH
45069: LD_INT 1
45071: EQUAL
45072: IFFALSE 45107
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45074: LD_ADDR_VAR 0 10
45078: PUSH
45079: LD_VAR 0 10
45083: PUSH
45084: LD_VAR 0 6
45088: PPUSH
45089: CALL_OW 311
45093: PPUSH
45094: LD_INT 3
45096: PPUSH
45097: CALL_OW 259
45101: PUSH
45102: LD_INT 4
45104: MUL
45105: MUL
45106: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45107: LD_VAR 0 6
45111: PPUSH
45112: CALL_OW 263
45116: PUSH
45117: LD_INT 2
45119: EQUAL
45120: IFFALSE 45171
// begin j := IsControledBy ( i ) ;
45122: LD_ADDR_VAR 0 7
45126: PUSH
45127: LD_VAR 0 6
45131: PPUSH
45132: CALL_OW 312
45136: ST_TO_ADDR
// if j then
45137: LD_VAR 0 7
45141: IFFALSE 45171
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45143: LD_ADDR_VAR 0 10
45147: PUSH
45148: LD_VAR 0 10
45152: PUSH
45153: LD_VAR 0 7
45157: PPUSH
45158: LD_INT 3
45160: PPUSH
45161: CALL_OW 259
45165: PUSH
45166: LD_INT 3
45168: MUL
45169: MUL
45170: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45171: LD_VAR 0 6
45175: PPUSH
45176: CALL_OW 264
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: LD_INT 6
45186: PUSH
45187: LD_INT 46
45189: PUSH
45190: LD_INT 44
45192: PUSH
45193: LD_INT 47
45195: PUSH
45196: LD_INT 45
45198: PUSH
45199: LD_INT 28
45201: PUSH
45202: LD_INT 7
45204: PUSH
45205: LD_INT 27
45207: PUSH
45208: LD_INT 29
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: IN
45223: PUSH
45224: LD_VAR 0 1
45228: PPUSH
45229: LD_INT 52
45231: PPUSH
45232: CALL_OW 321
45236: PUSH
45237: LD_INT 2
45239: EQUAL
45240: AND
45241: IFFALSE 45258
// bpoints := bpoints * 1.2 ;
45243: LD_ADDR_VAR 0 10
45247: PUSH
45248: LD_VAR 0 10
45252: PUSH
45253: LD_REAL  1.20000000000000E+0000
45256: MUL
45257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45258: LD_VAR 0 6
45262: PPUSH
45263: CALL_OW 264
45267: PUSH
45268: LD_INT 6
45270: PUSH
45271: LD_INT 46
45273: PUSH
45274: LD_INT 47
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: IN
45282: IFFALSE 45299
// bpoints := bpoints * 1.2 ;
45284: LD_ADDR_VAR 0 10
45288: PUSH
45289: LD_VAR 0 10
45293: PUSH
45294: LD_REAL  1.20000000000000E+0000
45297: MUL
45298: ST_TO_ADDR
// end ; unit_building :
45299: GO 45313
45301: LD_INT 3
45303: DOUBLE
45304: EQUAL
45305: IFTRUE 45309
45307: GO 45312
45309: POP
// ; end ;
45310: GO 45313
45312: POP
// for j = 1 to 3 do
45313: LD_ADDR_VAR 0 7
45317: PUSH
45318: DOUBLE
45319: LD_INT 1
45321: DEC
45322: ST_TO_ADDR
45323: LD_INT 3
45325: PUSH
45326: FOR_TO
45327: IFFALSE 45380
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45329: LD_ADDR_VAR 0 5
45333: PUSH
45334: LD_VAR 0 5
45338: PPUSH
45339: LD_VAR 0 7
45343: PPUSH
45344: LD_VAR 0 5
45348: PUSH
45349: LD_VAR 0 7
45353: ARRAY
45354: PUSH
45355: LD_VAR 0 9
45359: PUSH
45360: LD_VAR 0 7
45364: ARRAY
45365: PUSH
45366: LD_VAR 0 10
45370: MUL
45371: PLUS
45372: PPUSH
45373: CALL_OW 1
45377: ST_TO_ADDR
45378: GO 45326
45380: POP
45381: POP
// end ;
45382: GO 43861
45384: POP
45385: POP
// result := Replace ( result , 4 , tmp ) ;
45386: LD_ADDR_VAR 0 5
45390: PUSH
45391: LD_VAR 0 5
45395: PPUSH
45396: LD_INT 4
45398: PPUSH
45399: LD_VAR 0 8
45403: PPUSH
45404: CALL_OW 1
45408: ST_TO_ADDR
// end ;
45409: LD_VAR 0 5
45413: RET
// export function DangerAtRange ( unit , range ) ; begin
45414: LD_INT 0
45416: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45417: LD_ADDR_VAR 0 3
45421: PUSH
45422: LD_VAR 0 1
45426: PPUSH
45427: CALL_OW 255
45431: PPUSH
45432: LD_VAR 0 1
45436: PPUSH
45437: CALL_OW 250
45441: PPUSH
45442: LD_VAR 0 1
45446: PPUSH
45447: CALL_OW 251
45451: PPUSH
45452: LD_VAR 0 2
45456: PPUSH
45457: CALL 43713 0 4
45461: ST_TO_ADDR
// end ;
45462: LD_VAR 0 3
45466: RET
// export function DangerInArea ( side , area ) ; begin
45467: LD_INT 0
45469: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_VAR 0 2
45479: PPUSH
45480: LD_INT 81
45482: PUSH
45483: LD_VAR 0 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PPUSH
45492: CALL_OW 70
45496: ST_TO_ADDR
// end ;
45497: LD_VAR 0 3
45501: RET
// export function IsExtension ( b ) ; begin
45502: LD_INT 0
45504: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45505: LD_ADDR_VAR 0 2
45509: PUSH
45510: LD_VAR 0 1
45514: PUSH
45515: LD_INT 23
45517: PUSH
45518: LD_INT 20
45520: PUSH
45521: LD_INT 22
45523: PUSH
45524: LD_INT 17
45526: PUSH
45527: LD_INT 24
45529: PUSH
45530: LD_INT 21
45532: PUSH
45533: LD_INT 19
45535: PUSH
45536: LD_INT 16
45538: PUSH
45539: LD_INT 25
45541: PUSH
45542: LD_INT 18
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: IN
45557: ST_TO_ADDR
// end ;
45558: LD_VAR 0 2
45562: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45563: LD_INT 0
45565: PPUSH
45566: PPUSH
45567: PPUSH
// result := [ ] ;
45568: LD_ADDR_VAR 0 4
45572: PUSH
45573: EMPTY
45574: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45575: LD_ADDR_VAR 0 5
45579: PUSH
45580: LD_VAR 0 2
45584: PPUSH
45585: LD_INT 21
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PPUSH
45595: CALL_OW 70
45599: ST_TO_ADDR
// if not tmp then
45600: LD_VAR 0 5
45604: NOT
45605: IFFALSE 45609
// exit ;
45607: GO 45673
// if checkLink then
45609: LD_VAR 0 3
45613: IFFALSE 45663
// begin for i in tmp do
45615: LD_ADDR_VAR 0 6
45619: PUSH
45620: LD_VAR 0 5
45624: PUSH
45625: FOR_IN
45626: IFFALSE 45661
// if GetBase ( i ) <> base then
45628: LD_VAR 0 6
45632: PPUSH
45633: CALL_OW 274
45637: PUSH
45638: LD_VAR 0 1
45642: NONEQUAL
45643: IFFALSE 45659
// ComLinkToBase ( base , i ) ;
45645: LD_VAR 0 1
45649: PPUSH
45650: LD_VAR 0 6
45654: PPUSH
45655: CALL_OW 169
45659: GO 45625
45661: POP
45662: POP
// end ; result := tmp ;
45663: LD_ADDR_VAR 0 4
45667: PUSH
45668: LD_VAR 0 5
45672: ST_TO_ADDR
// end ;
45673: LD_VAR 0 4
45677: RET
// export function ComComplete ( units , b ) ; var i ; begin
45678: LD_INT 0
45680: PPUSH
45681: PPUSH
// if not units then
45682: LD_VAR 0 1
45686: NOT
45687: IFFALSE 45691
// exit ;
45689: GO 45781
// for i in units do
45691: LD_ADDR_VAR 0 4
45695: PUSH
45696: LD_VAR 0 1
45700: PUSH
45701: FOR_IN
45702: IFFALSE 45779
// if BuildingStatus ( b ) = bs_build then
45704: LD_VAR 0 2
45708: PPUSH
45709: CALL_OW 461
45713: PUSH
45714: LD_INT 1
45716: EQUAL
45717: IFFALSE 45777
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45719: LD_VAR 0 4
45723: PPUSH
45724: LD_STRING h
45726: PUSH
45727: LD_VAR 0 2
45731: PPUSH
45732: CALL_OW 250
45736: PUSH
45737: LD_VAR 0 2
45741: PPUSH
45742: CALL_OW 251
45746: PUSH
45747: LD_VAR 0 2
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: PUSH
45770: EMPTY
45771: LIST
45772: PPUSH
45773: CALL_OW 446
45777: GO 45701
45779: POP
45780: POP
// end ;
45781: LD_VAR 0 3
45785: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45786: LD_INT 0
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45794: LD_VAR 0 1
45798: NOT
45799: PUSH
45800: LD_VAR 0 1
45804: PPUSH
45805: CALL_OW 263
45809: PUSH
45810: LD_INT 2
45812: NONEQUAL
45813: OR
45814: IFFALSE 45818
// exit ;
45816: GO 46134
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45818: LD_ADDR_VAR 0 6
45822: PUSH
45823: LD_INT 22
45825: PUSH
45826: LD_VAR 0 1
45830: PPUSH
45831: CALL_OW 255
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 30
45845: PUSH
45846: LD_INT 36
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 34
45855: PUSH
45856: LD_INT 31
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PPUSH
45872: CALL_OW 69
45876: ST_TO_ADDR
// if not tmp then
45877: LD_VAR 0 6
45881: NOT
45882: IFFALSE 45886
// exit ;
45884: GO 46134
// result := [ ] ;
45886: LD_ADDR_VAR 0 2
45890: PUSH
45891: EMPTY
45892: ST_TO_ADDR
// for i in tmp do
45893: LD_ADDR_VAR 0 3
45897: PUSH
45898: LD_VAR 0 6
45902: PUSH
45903: FOR_IN
45904: IFFALSE 45975
// begin t := UnitsInside ( i ) ;
45906: LD_ADDR_VAR 0 4
45910: PUSH
45911: LD_VAR 0 3
45915: PPUSH
45916: CALL_OW 313
45920: ST_TO_ADDR
// if t then
45921: LD_VAR 0 4
45925: IFFALSE 45973
// for j in t do
45927: LD_ADDR_VAR 0 7
45931: PUSH
45932: LD_VAR 0 4
45936: PUSH
45937: FOR_IN
45938: IFFALSE 45971
// result := Replace ( result , result + 1 , j ) ;
45940: LD_ADDR_VAR 0 2
45944: PUSH
45945: LD_VAR 0 2
45949: PPUSH
45950: LD_VAR 0 2
45954: PUSH
45955: LD_INT 1
45957: PLUS
45958: PPUSH
45959: LD_VAR 0 7
45963: PPUSH
45964: CALL_OW 1
45968: ST_TO_ADDR
45969: GO 45937
45971: POP
45972: POP
// end ;
45973: GO 45903
45975: POP
45976: POP
// if not result then
45977: LD_VAR 0 2
45981: NOT
45982: IFFALSE 45986
// exit ;
45984: GO 46134
// mech := result [ 1 ] ;
45986: LD_ADDR_VAR 0 5
45990: PUSH
45991: LD_VAR 0 2
45995: PUSH
45996: LD_INT 1
45998: ARRAY
45999: ST_TO_ADDR
// if result > 1 then
46000: LD_VAR 0 2
46004: PUSH
46005: LD_INT 1
46007: GREATER
46008: IFFALSE 46120
// begin for i = 2 to result do
46010: LD_ADDR_VAR 0 3
46014: PUSH
46015: DOUBLE
46016: LD_INT 2
46018: DEC
46019: ST_TO_ADDR
46020: LD_VAR 0 2
46024: PUSH
46025: FOR_TO
46026: IFFALSE 46118
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46028: LD_ADDR_VAR 0 4
46032: PUSH
46033: LD_VAR 0 2
46037: PUSH
46038: LD_VAR 0 3
46042: ARRAY
46043: PPUSH
46044: LD_INT 3
46046: PPUSH
46047: CALL_OW 259
46051: PUSH
46052: LD_VAR 0 2
46056: PUSH
46057: LD_VAR 0 3
46061: ARRAY
46062: PPUSH
46063: CALL_OW 432
46067: MINUS
46068: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46069: LD_VAR 0 4
46073: PUSH
46074: LD_VAR 0 5
46078: PPUSH
46079: LD_INT 3
46081: PPUSH
46082: CALL_OW 259
46086: PUSH
46087: LD_VAR 0 5
46091: PPUSH
46092: CALL_OW 432
46096: MINUS
46097: GREATEREQUAL
46098: IFFALSE 46116
// mech := result [ i ] ;
46100: LD_ADDR_VAR 0 5
46104: PUSH
46105: LD_VAR 0 2
46109: PUSH
46110: LD_VAR 0 3
46114: ARRAY
46115: ST_TO_ADDR
// end ;
46116: GO 46025
46118: POP
46119: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46120: LD_VAR 0 1
46124: PPUSH
46125: LD_VAR 0 5
46129: PPUSH
46130: CALL_OW 135
// end ;
46134: LD_VAR 0 2
46138: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46139: LD_INT 0
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
46145: PPUSH
46146: PPUSH
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
46151: PPUSH
46152: PPUSH
46153: PPUSH
// result := [ ] ;
46154: LD_ADDR_VAR 0 7
46158: PUSH
46159: EMPTY
46160: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46161: LD_VAR 0 1
46165: PPUSH
46166: CALL_OW 266
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: IN
46181: NOT
46182: IFFALSE 46186
// exit ;
46184: GO 47820
// if name then
46186: LD_VAR 0 3
46190: IFFALSE 46206
// SetBName ( base_dep , name ) ;
46192: LD_VAR 0 1
46196: PPUSH
46197: LD_VAR 0 3
46201: PPUSH
46202: CALL_OW 500
// base := GetBase ( base_dep ) ;
46206: LD_ADDR_VAR 0 15
46210: PUSH
46211: LD_VAR 0 1
46215: PPUSH
46216: CALL_OW 274
46220: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46221: LD_ADDR_VAR 0 16
46225: PUSH
46226: LD_VAR 0 1
46230: PPUSH
46231: CALL_OW 255
46235: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46236: LD_ADDR_VAR 0 17
46240: PUSH
46241: LD_VAR 0 1
46245: PPUSH
46246: CALL_OW 248
46250: ST_TO_ADDR
// if sources then
46251: LD_VAR 0 5
46255: IFFALSE 46302
// for i = 1 to 3 do
46257: LD_ADDR_VAR 0 8
46261: PUSH
46262: DOUBLE
46263: LD_INT 1
46265: DEC
46266: ST_TO_ADDR
46267: LD_INT 3
46269: PUSH
46270: FOR_TO
46271: IFFALSE 46300
// AddResourceType ( base , i , sources [ i ] ) ;
46273: LD_VAR 0 15
46277: PPUSH
46278: LD_VAR 0 8
46282: PPUSH
46283: LD_VAR 0 5
46287: PUSH
46288: LD_VAR 0 8
46292: ARRAY
46293: PPUSH
46294: CALL_OW 276
46298: GO 46270
46300: POP
46301: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46302: LD_ADDR_VAR 0 18
46306: PUSH
46307: LD_VAR 0 15
46311: PPUSH
46312: LD_VAR 0 2
46316: PPUSH
46317: LD_INT 1
46319: PPUSH
46320: CALL 45563 0 3
46324: ST_TO_ADDR
// InitHc ;
46325: CALL_OW 19
// InitUc ;
46329: CALL_OW 18
// uc_side := side ;
46333: LD_ADDR_OWVAR 20
46337: PUSH
46338: LD_VAR 0 16
46342: ST_TO_ADDR
// uc_nation := nation ;
46343: LD_ADDR_OWVAR 21
46347: PUSH
46348: LD_VAR 0 17
46352: ST_TO_ADDR
// if buildings then
46353: LD_VAR 0 18
46357: IFFALSE 47679
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46359: LD_ADDR_VAR 0 19
46363: PUSH
46364: LD_VAR 0 18
46368: PPUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 30
46374: PUSH
46375: LD_INT 29
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 30
46384: PUSH
46385: LD_INT 30
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: PPUSH
46397: CALL_OW 72
46401: ST_TO_ADDR
// if tmp then
46402: LD_VAR 0 19
46406: IFFALSE 46454
// for i in tmp do
46408: LD_ADDR_VAR 0 8
46412: PUSH
46413: LD_VAR 0 19
46417: PUSH
46418: FOR_IN
46419: IFFALSE 46452
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46421: LD_VAR 0 8
46425: PPUSH
46426: CALL_OW 250
46430: PPUSH
46431: LD_VAR 0 8
46435: PPUSH
46436: CALL_OW 251
46440: PPUSH
46441: LD_VAR 0 16
46445: PPUSH
46446: CALL_OW 441
46450: GO 46418
46452: POP
46453: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46454: LD_VAR 0 18
46458: PPUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 30
46464: PUSH
46465: LD_INT 32
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 30
46474: PUSH
46475: LD_INT 33
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: PPUSH
46487: CALL_OW 72
46491: IFFALSE 46579
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46493: LD_ADDR_VAR 0 8
46497: PUSH
46498: LD_VAR 0 18
46502: PPUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 30
46508: PUSH
46509: LD_INT 32
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 30
46518: PUSH
46519: LD_INT 33
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: PPUSH
46531: CALL_OW 72
46535: PUSH
46536: FOR_IN
46537: IFFALSE 46577
// begin if not GetBWeapon ( i ) then
46539: LD_VAR 0 8
46543: PPUSH
46544: CALL_OW 269
46548: NOT
46549: IFFALSE 46575
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46551: LD_VAR 0 8
46555: PPUSH
46556: LD_VAR 0 8
46560: PPUSH
46561: LD_VAR 0 2
46565: PPUSH
46566: CALL 47825 0 2
46570: PPUSH
46571: CALL_OW 431
// end ;
46575: GO 46536
46577: POP
46578: POP
// end ; for i = 1 to personel do
46579: LD_ADDR_VAR 0 8
46583: PUSH
46584: DOUBLE
46585: LD_INT 1
46587: DEC
46588: ST_TO_ADDR
46589: LD_VAR 0 6
46593: PUSH
46594: FOR_TO
46595: IFFALSE 47659
// begin if i > 4 then
46597: LD_VAR 0 8
46601: PUSH
46602: LD_INT 4
46604: GREATER
46605: IFFALSE 46609
// break ;
46607: GO 47659
// case i of 1 :
46609: LD_VAR 0 8
46613: PUSH
46614: LD_INT 1
46616: DOUBLE
46617: EQUAL
46618: IFTRUE 46622
46620: GO 46702
46622: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46623: LD_ADDR_VAR 0 12
46627: PUSH
46628: LD_VAR 0 18
46632: PPUSH
46633: LD_INT 22
46635: PUSH
46636: LD_VAR 0 16
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 58
46647: PUSH
46648: EMPTY
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 30
46656: PUSH
46657: LD_INT 32
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 30
46666: PUSH
46667: LD_INT 4
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 30
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: PPUSH
46695: CALL_OW 72
46699: ST_TO_ADDR
46700: GO 46924
46702: LD_INT 2
46704: DOUBLE
46705: EQUAL
46706: IFTRUE 46710
46708: GO 46772
46710: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46711: LD_ADDR_VAR 0 12
46715: PUSH
46716: LD_VAR 0 18
46720: PPUSH
46721: LD_INT 22
46723: PUSH
46724: LD_VAR 0 16
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 30
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 30
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PPUSH
46765: CALL_OW 72
46769: ST_TO_ADDR
46770: GO 46924
46772: LD_INT 3
46774: DOUBLE
46775: EQUAL
46776: IFTRUE 46780
46778: GO 46842
46780: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46781: LD_ADDR_VAR 0 12
46785: PUSH
46786: LD_VAR 0 18
46790: PPUSH
46791: LD_INT 22
46793: PUSH
46794: LD_VAR 0 16
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: LD_INT 30
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 30
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PPUSH
46835: CALL_OW 72
46839: ST_TO_ADDR
46840: GO 46924
46842: LD_INT 4
46844: DOUBLE
46845: EQUAL
46846: IFTRUE 46850
46848: GO 46923
46850: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46851: LD_ADDR_VAR 0 12
46855: PUSH
46856: LD_VAR 0 18
46860: PPUSH
46861: LD_INT 22
46863: PUSH
46864: LD_VAR 0 16
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 30
46878: PUSH
46879: LD_INT 6
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 7
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 30
46898: PUSH
46899: LD_INT 8
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PPUSH
46916: CALL_OW 72
46920: ST_TO_ADDR
46921: GO 46924
46923: POP
// if i = 1 then
46924: LD_VAR 0 8
46928: PUSH
46929: LD_INT 1
46931: EQUAL
46932: IFFALSE 47043
// begin tmp := [ ] ;
46934: LD_ADDR_VAR 0 19
46938: PUSH
46939: EMPTY
46940: ST_TO_ADDR
// for j in f do
46941: LD_ADDR_VAR 0 9
46945: PUSH
46946: LD_VAR 0 12
46950: PUSH
46951: FOR_IN
46952: IFFALSE 47025
// if GetBType ( j ) = b_bunker then
46954: LD_VAR 0 9
46958: PPUSH
46959: CALL_OW 266
46963: PUSH
46964: LD_INT 32
46966: EQUAL
46967: IFFALSE 46994
// tmp := Insert ( tmp , 1 , j ) else
46969: LD_ADDR_VAR 0 19
46973: PUSH
46974: LD_VAR 0 19
46978: PPUSH
46979: LD_INT 1
46981: PPUSH
46982: LD_VAR 0 9
46986: PPUSH
46987: CALL_OW 2
46991: ST_TO_ADDR
46992: GO 47023
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46994: LD_ADDR_VAR 0 19
46998: PUSH
46999: LD_VAR 0 19
47003: PPUSH
47004: LD_VAR 0 19
47008: PUSH
47009: LD_INT 1
47011: PLUS
47012: PPUSH
47013: LD_VAR 0 9
47017: PPUSH
47018: CALL_OW 2
47022: ST_TO_ADDR
47023: GO 46951
47025: POP
47026: POP
// if tmp then
47027: LD_VAR 0 19
47031: IFFALSE 47043
// f := tmp ;
47033: LD_ADDR_VAR 0 12
47037: PUSH
47038: LD_VAR 0 19
47042: ST_TO_ADDR
// end ; x := personel [ i ] ;
47043: LD_ADDR_VAR 0 13
47047: PUSH
47048: LD_VAR 0 6
47052: PUSH
47053: LD_VAR 0 8
47057: ARRAY
47058: ST_TO_ADDR
// if x = - 1 then
47059: LD_VAR 0 13
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: EQUAL
47068: IFFALSE 47277
// begin for j in f do
47070: LD_ADDR_VAR 0 9
47074: PUSH
47075: LD_VAR 0 12
47079: PUSH
47080: FOR_IN
47081: IFFALSE 47273
// repeat InitHc ;
47083: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47087: LD_VAR 0 9
47091: PPUSH
47092: CALL_OW 266
47096: PUSH
47097: LD_INT 5
47099: EQUAL
47100: IFFALSE 47170
// begin if UnitsInside ( j ) < 3 then
47102: LD_VAR 0 9
47106: PPUSH
47107: CALL_OW 313
47111: PUSH
47112: LD_INT 3
47114: LESS
47115: IFFALSE 47151
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47117: LD_INT 0
47119: PPUSH
47120: LD_INT 5
47122: PUSH
47123: LD_INT 8
47125: PUSH
47126: LD_INT 9
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: PUSH
47134: LD_VAR 0 17
47138: ARRAY
47139: PPUSH
47140: LD_VAR 0 4
47144: PPUSH
47145: CALL_OW 380
47149: GO 47168
// PrepareHuman ( false , i , skill ) ;
47151: LD_INT 0
47153: PPUSH
47154: LD_VAR 0 8
47158: PPUSH
47159: LD_VAR 0 4
47163: PPUSH
47164: CALL_OW 380
// end else
47168: GO 47187
// PrepareHuman ( false , i , skill ) ;
47170: LD_INT 0
47172: PPUSH
47173: LD_VAR 0 8
47177: PPUSH
47178: LD_VAR 0 4
47182: PPUSH
47183: CALL_OW 380
// un := CreateHuman ;
47187: LD_ADDR_VAR 0 14
47191: PUSH
47192: CALL_OW 44
47196: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47197: LD_ADDR_VAR 0 7
47201: PUSH
47202: LD_VAR 0 7
47206: PPUSH
47207: LD_INT 1
47209: PPUSH
47210: LD_VAR 0 14
47214: PPUSH
47215: CALL_OW 2
47219: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47220: LD_VAR 0 14
47224: PPUSH
47225: LD_VAR 0 9
47229: PPUSH
47230: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47234: LD_VAR 0 9
47238: PPUSH
47239: CALL_OW 313
47243: PUSH
47244: LD_INT 6
47246: EQUAL
47247: PUSH
47248: LD_VAR 0 9
47252: PPUSH
47253: CALL_OW 266
47257: PUSH
47258: LD_INT 32
47260: PUSH
47261: LD_INT 31
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: IN
47268: OR
47269: IFFALSE 47083
47271: GO 47080
47273: POP
47274: POP
// end else
47275: GO 47657
// for j = 1 to x do
47277: LD_ADDR_VAR 0 9
47281: PUSH
47282: DOUBLE
47283: LD_INT 1
47285: DEC
47286: ST_TO_ADDR
47287: LD_VAR 0 13
47291: PUSH
47292: FOR_TO
47293: IFFALSE 47655
// begin InitHc ;
47295: CALL_OW 19
// if not f then
47299: LD_VAR 0 12
47303: NOT
47304: IFFALSE 47393
// begin PrepareHuman ( false , i , skill ) ;
47306: LD_INT 0
47308: PPUSH
47309: LD_VAR 0 8
47313: PPUSH
47314: LD_VAR 0 4
47318: PPUSH
47319: CALL_OW 380
// un := CreateHuman ;
47323: LD_ADDR_VAR 0 14
47327: PUSH
47328: CALL_OW 44
47332: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47333: LD_ADDR_VAR 0 7
47337: PUSH
47338: LD_VAR 0 7
47342: PPUSH
47343: LD_INT 1
47345: PPUSH
47346: LD_VAR 0 14
47350: PPUSH
47351: CALL_OW 2
47355: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47356: LD_VAR 0 14
47360: PPUSH
47361: LD_VAR 0 1
47365: PPUSH
47366: CALL_OW 250
47370: PPUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: CALL_OW 251
47380: PPUSH
47381: LD_INT 10
47383: PPUSH
47384: LD_INT 0
47386: PPUSH
47387: CALL_OW 50
// continue ;
47391: GO 47292
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47393: LD_VAR 0 12
47397: PUSH
47398: LD_INT 1
47400: ARRAY
47401: PPUSH
47402: CALL_OW 313
47406: PUSH
47407: LD_VAR 0 12
47411: PUSH
47412: LD_INT 1
47414: ARRAY
47415: PPUSH
47416: CALL_OW 266
47420: PUSH
47421: LD_INT 32
47423: PUSH
47424: LD_INT 31
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: IN
47431: AND
47432: PUSH
47433: LD_VAR 0 12
47437: PUSH
47438: LD_INT 1
47440: ARRAY
47441: PPUSH
47442: CALL_OW 313
47446: PUSH
47447: LD_INT 6
47449: EQUAL
47450: OR
47451: IFFALSE 47471
// f := Delete ( f , 1 ) ;
47453: LD_ADDR_VAR 0 12
47457: PUSH
47458: LD_VAR 0 12
47462: PPUSH
47463: LD_INT 1
47465: PPUSH
47466: CALL_OW 3
47470: ST_TO_ADDR
// if not f then
47471: LD_VAR 0 12
47475: NOT
47476: IFFALSE 47494
// begin x := x + 2 ;
47478: LD_ADDR_VAR 0 13
47482: PUSH
47483: LD_VAR 0 13
47487: PUSH
47488: LD_INT 2
47490: PLUS
47491: ST_TO_ADDR
// continue ;
47492: GO 47292
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47494: LD_VAR 0 12
47498: PUSH
47499: LD_INT 1
47501: ARRAY
47502: PPUSH
47503: CALL_OW 266
47507: PUSH
47508: LD_INT 5
47510: EQUAL
47511: IFFALSE 47585
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47513: LD_VAR 0 12
47517: PUSH
47518: LD_INT 1
47520: ARRAY
47521: PPUSH
47522: CALL_OW 313
47526: PUSH
47527: LD_INT 3
47529: LESS
47530: IFFALSE 47566
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47532: LD_INT 0
47534: PPUSH
47535: LD_INT 5
47537: PUSH
47538: LD_INT 8
47540: PUSH
47541: LD_INT 9
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: PUSH
47549: LD_VAR 0 17
47553: ARRAY
47554: PPUSH
47555: LD_VAR 0 4
47559: PPUSH
47560: CALL_OW 380
47564: GO 47583
// PrepareHuman ( false , i , skill ) ;
47566: LD_INT 0
47568: PPUSH
47569: LD_VAR 0 8
47573: PPUSH
47574: LD_VAR 0 4
47578: PPUSH
47579: CALL_OW 380
// end else
47583: GO 47602
// PrepareHuman ( false , i , skill ) ;
47585: LD_INT 0
47587: PPUSH
47588: LD_VAR 0 8
47592: PPUSH
47593: LD_VAR 0 4
47597: PPUSH
47598: CALL_OW 380
// un := CreateHuman ;
47602: LD_ADDR_VAR 0 14
47606: PUSH
47607: CALL_OW 44
47611: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47612: LD_ADDR_VAR 0 7
47616: PUSH
47617: LD_VAR 0 7
47621: PPUSH
47622: LD_INT 1
47624: PPUSH
47625: LD_VAR 0 14
47629: PPUSH
47630: CALL_OW 2
47634: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47635: LD_VAR 0 14
47639: PPUSH
47640: LD_VAR 0 12
47644: PUSH
47645: LD_INT 1
47647: ARRAY
47648: PPUSH
47649: CALL_OW 52
// end ;
47653: GO 47292
47655: POP
47656: POP
// end ;
47657: GO 46594
47659: POP
47660: POP
// result := result ^ buildings ;
47661: LD_ADDR_VAR 0 7
47665: PUSH
47666: LD_VAR 0 7
47670: PUSH
47671: LD_VAR 0 18
47675: ADD
47676: ST_TO_ADDR
// end else
47677: GO 47820
// begin for i = 1 to personel do
47679: LD_ADDR_VAR 0 8
47683: PUSH
47684: DOUBLE
47685: LD_INT 1
47687: DEC
47688: ST_TO_ADDR
47689: LD_VAR 0 6
47693: PUSH
47694: FOR_TO
47695: IFFALSE 47818
// begin if i > 4 then
47697: LD_VAR 0 8
47701: PUSH
47702: LD_INT 4
47704: GREATER
47705: IFFALSE 47709
// break ;
47707: GO 47818
// x := personel [ i ] ;
47709: LD_ADDR_VAR 0 13
47713: PUSH
47714: LD_VAR 0 6
47718: PUSH
47719: LD_VAR 0 8
47723: ARRAY
47724: ST_TO_ADDR
// if x = - 1 then
47725: LD_VAR 0 13
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: EQUAL
47734: IFFALSE 47738
// continue ;
47736: GO 47694
// PrepareHuman ( false , i , skill ) ;
47738: LD_INT 0
47740: PPUSH
47741: LD_VAR 0 8
47745: PPUSH
47746: LD_VAR 0 4
47750: PPUSH
47751: CALL_OW 380
// un := CreateHuman ;
47755: LD_ADDR_VAR 0 14
47759: PUSH
47760: CALL_OW 44
47764: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47765: LD_VAR 0 14
47769: PPUSH
47770: LD_VAR 0 1
47774: PPUSH
47775: CALL_OW 250
47779: PPUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: CALL_OW 251
47789: PPUSH
47790: LD_INT 10
47792: PPUSH
47793: LD_INT 0
47795: PPUSH
47796: CALL_OW 50
// result := result ^ un ;
47800: LD_ADDR_VAR 0 7
47804: PUSH
47805: LD_VAR 0 7
47809: PUSH
47810: LD_VAR 0 14
47814: ADD
47815: ST_TO_ADDR
// end ;
47816: GO 47694
47818: POP
47819: POP
// end ; end ;
47820: LD_VAR 0 7
47824: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47825: LD_INT 0
47827: PPUSH
47828: PPUSH
47829: PPUSH
47830: PPUSH
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
47837: PPUSH
47838: PPUSH
47839: PPUSH
47840: PPUSH
47841: PPUSH
47842: PPUSH
// result := false ;
47843: LD_ADDR_VAR 0 3
47847: PUSH
47848: LD_INT 0
47850: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47851: LD_VAR 0 1
47855: NOT
47856: PUSH
47857: LD_VAR 0 1
47861: PPUSH
47862: CALL_OW 266
47866: PUSH
47867: LD_INT 32
47869: PUSH
47870: LD_INT 33
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: IN
47877: NOT
47878: OR
47879: IFFALSE 47883
// exit ;
47881: GO 48992
// nat := GetNation ( tower ) ;
47883: LD_ADDR_VAR 0 12
47887: PUSH
47888: LD_VAR 0 1
47892: PPUSH
47893: CALL_OW 248
47897: ST_TO_ADDR
// side := GetSide ( tower ) ;
47898: LD_ADDR_VAR 0 16
47902: PUSH
47903: LD_VAR 0 1
47907: PPUSH
47908: CALL_OW 255
47912: ST_TO_ADDR
// x := GetX ( tower ) ;
47913: LD_ADDR_VAR 0 10
47917: PUSH
47918: LD_VAR 0 1
47922: PPUSH
47923: CALL_OW 250
47927: ST_TO_ADDR
// y := GetY ( tower ) ;
47928: LD_ADDR_VAR 0 11
47932: PUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 251
47942: ST_TO_ADDR
// if not x or not y then
47943: LD_VAR 0 10
47947: NOT
47948: PUSH
47949: LD_VAR 0 11
47953: NOT
47954: OR
47955: IFFALSE 47959
// exit ;
47957: GO 48992
// weapon := 0 ;
47959: LD_ADDR_VAR 0 18
47963: PUSH
47964: LD_INT 0
47966: ST_TO_ADDR
// fac_list := [ ] ;
47967: LD_ADDR_VAR 0 17
47971: PUSH
47972: EMPTY
47973: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47974: LD_ADDR_VAR 0 6
47978: PUSH
47979: LD_VAR 0 1
47983: PPUSH
47984: CALL_OW 274
47988: PPUSH
47989: LD_VAR 0 2
47993: PPUSH
47994: LD_INT 0
47996: PPUSH
47997: CALL 45563 0 3
48001: PPUSH
48002: LD_INT 30
48004: PUSH
48005: LD_INT 3
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PPUSH
48012: CALL_OW 72
48016: ST_TO_ADDR
// if not factories then
48017: LD_VAR 0 6
48021: NOT
48022: IFFALSE 48026
// exit ;
48024: GO 48992
// for i in factories do
48026: LD_ADDR_VAR 0 8
48030: PUSH
48031: LD_VAR 0 6
48035: PUSH
48036: FOR_IN
48037: IFFALSE 48062
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48039: LD_ADDR_VAR 0 17
48043: PUSH
48044: LD_VAR 0 17
48048: PUSH
48049: LD_VAR 0 8
48053: PPUSH
48054: CALL_OW 478
48058: UNION
48059: ST_TO_ADDR
48060: GO 48036
48062: POP
48063: POP
// if not fac_list then
48064: LD_VAR 0 17
48068: NOT
48069: IFFALSE 48073
// exit ;
48071: GO 48992
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48073: LD_ADDR_VAR 0 5
48077: PUSH
48078: LD_INT 4
48080: PUSH
48081: LD_INT 5
48083: PUSH
48084: LD_INT 9
48086: PUSH
48087: LD_INT 10
48089: PUSH
48090: LD_INT 6
48092: PUSH
48093: LD_INT 7
48095: PUSH
48096: LD_INT 11
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 27
48110: PUSH
48111: LD_INT 28
48113: PUSH
48114: LD_INT 26
48116: PUSH
48117: LD_INT 30
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 43
48128: PUSH
48129: LD_INT 44
48131: PUSH
48132: LD_INT 46
48134: PUSH
48135: LD_INT 45
48137: PUSH
48138: LD_INT 47
48140: PUSH
48141: LD_INT 49
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: PUSH
48157: LD_VAR 0 12
48161: ARRAY
48162: ST_TO_ADDR
// list := list isect fac_list ;
48163: LD_ADDR_VAR 0 5
48167: PUSH
48168: LD_VAR 0 5
48172: PUSH
48173: LD_VAR 0 17
48177: ISECT
48178: ST_TO_ADDR
// if not list then
48179: LD_VAR 0 5
48183: NOT
48184: IFFALSE 48188
// exit ;
48186: GO 48992
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48188: LD_VAR 0 12
48192: PUSH
48193: LD_INT 3
48195: EQUAL
48196: PUSH
48197: LD_INT 49
48199: PUSH
48200: LD_VAR 0 5
48204: IN
48205: AND
48206: PUSH
48207: LD_INT 31
48209: PPUSH
48210: LD_VAR 0 16
48214: PPUSH
48215: CALL_OW 321
48219: PUSH
48220: LD_INT 2
48222: EQUAL
48223: AND
48224: IFFALSE 48284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48226: LD_INT 22
48228: PUSH
48229: LD_VAR 0 16
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 35
48240: PUSH
48241: LD_INT 49
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 91
48250: PUSH
48251: LD_VAR 0 1
48255: PUSH
48256: LD_INT 10
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: PPUSH
48269: CALL_OW 69
48273: NOT
48274: IFFALSE 48284
// weapon := ru_time_lapser ;
48276: LD_ADDR_VAR 0 18
48280: PUSH
48281: LD_INT 49
48283: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48284: LD_VAR 0 12
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: IN
48299: PUSH
48300: LD_INT 11
48302: PUSH
48303: LD_VAR 0 5
48307: IN
48308: PUSH
48309: LD_INT 30
48311: PUSH
48312: LD_VAR 0 5
48316: IN
48317: OR
48318: AND
48319: PUSH
48320: LD_INT 6
48322: PPUSH
48323: LD_VAR 0 16
48327: PPUSH
48328: CALL_OW 321
48332: PUSH
48333: LD_INT 2
48335: EQUAL
48336: AND
48337: IFFALSE 48502
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48339: LD_INT 22
48341: PUSH
48342: LD_VAR 0 16
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 35
48356: PUSH
48357: LD_INT 11
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 35
48366: PUSH
48367: LD_INT 30
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 91
48381: PUSH
48382: LD_VAR 0 1
48386: PUSH
48387: LD_INT 18
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: PPUSH
48400: CALL_OW 69
48404: NOT
48405: PUSH
48406: LD_INT 22
48408: PUSH
48409: LD_VAR 0 16
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 30
48423: PUSH
48424: LD_INT 32
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 30
48433: PUSH
48434: LD_INT 33
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 91
48448: PUSH
48449: LD_VAR 0 1
48453: PUSH
48454: LD_INT 12
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: PPUSH
48470: CALL_OW 69
48474: PUSH
48475: LD_INT 2
48477: GREATER
48478: AND
48479: IFFALSE 48502
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48481: LD_ADDR_VAR 0 18
48485: PUSH
48486: LD_INT 11
48488: PUSH
48489: LD_INT 30
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_VAR 0 12
48500: ARRAY
48501: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48502: LD_VAR 0 18
48506: NOT
48507: PUSH
48508: LD_INT 40
48510: PPUSH
48511: LD_VAR 0 16
48515: PPUSH
48516: CALL_OW 321
48520: PUSH
48521: LD_INT 2
48523: EQUAL
48524: AND
48525: PUSH
48526: LD_INT 7
48528: PUSH
48529: LD_VAR 0 5
48533: IN
48534: PUSH
48535: LD_INT 28
48537: PUSH
48538: LD_VAR 0 5
48542: IN
48543: OR
48544: PUSH
48545: LD_INT 45
48547: PUSH
48548: LD_VAR 0 5
48552: IN
48553: OR
48554: AND
48555: IFFALSE 48809
// begin hex := GetHexInfo ( x , y ) ;
48557: LD_ADDR_VAR 0 4
48561: PUSH
48562: LD_VAR 0 10
48566: PPUSH
48567: LD_VAR 0 11
48571: PPUSH
48572: CALL_OW 546
48576: ST_TO_ADDR
// if hex [ 1 ] then
48577: LD_VAR 0 4
48581: PUSH
48582: LD_INT 1
48584: ARRAY
48585: IFFALSE 48589
// exit ;
48587: GO 48992
// height := hex [ 2 ] ;
48589: LD_ADDR_VAR 0 15
48593: PUSH
48594: LD_VAR 0 4
48598: PUSH
48599: LD_INT 2
48601: ARRAY
48602: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48603: LD_ADDR_VAR 0 14
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: LD_INT 5
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// for i in tmp do
48626: LD_ADDR_VAR 0 8
48630: PUSH
48631: LD_VAR 0 14
48635: PUSH
48636: FOR_IN
48637: IFFALSE 48807
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48639: LD_ADDR_VAR 0 9
48643: PUSH
48644: LD_VAR 0 10
48648: PPUSH
48649: LD_VAR 0 8
48653: PPUSH
48654: LD_INT 5
48656: PPUSH
48657: CALL_OW 272
48661: PUSH
48662: LD_VAR 0 11
48666: PPUSH
48667: LD_VAR 0 8
48671: PPUSH
48672: LD_INT 5
48674: PPUSH
48675: CALL_OW 273
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48684: LD_VAR 0 9
48688: PUSH
48689: LD_INT 1
48691: ARRAY
48692: PPUSH
48693: LD_VAR 0 9
48697: PUSH
48698: LD_INT 2
48700: ARRAY
48701: PPUSH
48702: CALL_OW 488
48706: IFFALSE 48805
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48708: LD_ADDR_VAR 0 4
48712: PUSH
48713: LD_VAR 0 9
48717: PUSH
48718: LD_INT 1
48720: ARRAY
48721: PPUSH
48722: LD_VAR 0 9
48726: PUSH
48727: LD_INT 2
48729: ARRAY
48730: PPUSH
48731: CALL_OW 546
48735: ST_TO_ADDR
// if hex [ 1 ] then
48736: LD_VAR 0 4
48740: PUSH
48741: LD_INT 1
48743: ARRAY
48744: IFFALSE 48748
// continue ;
48746: GO 48636
// h := hex [ 2 ] ;
48748: LD_ADDR_VAR 0 13
48752: PUSH
48753: LD_VAR 0 4
48757: PUSH
48758: LD_INT 2
48760: ARRAY
48761: ST_TO_ADDR
// if h + 7 < height then
48762: LD_VAR 0 13
48766: PUSH
48767: LD_INT 7
48769: PLUS
48770: PUSH
48771: LD_VAR 0 15
48775: LESS
48776: IFFALSE 48805
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48778: LD_ADDR_VAR 0 18
48782: PUSH
48783: LD_INT 7
48785: PUSH
48786: LD_INT 28
48788: PUSH
48789: LD_INT 45
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: PUSH
48797: LD_VAR 0 12
48801: ARRAY
48802: ST_TO_ADDR
// break ;
48803: GO 48807
// end ; end ; end ;
48805: GO 48636
48807: POP
48808: POP
// end ; if not weapon then
48809: LD_VAR 0 18
48813: NOT
48814: IFFALSE 48874
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48816: LD_ADDR_VAR 0 5
48820: PUSH
48821: LD_VAR 0 5
48825: PUSH
48826: LD_INT 11
48828: PUSH
48829: LD_INT 30
48831: PUSH
48832: LD_INT 49
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: DIFF
48840: ST_TO_ADDR
// if not list then
48841: LD_VAR 0 5
48845: NOT
48846: IFFALSE 48850
// exit ;
48848: GO 48992
// weapon := list [ rand ( 1 , list ) ] ;
48850: LD_ADDR_VAR 0 18
48854: PUSH
48855: LD_VAR 0 5
48859: PUSH
48860: LD_INT 1
48862: PPUSH
48863: LD_VAR 0 5
48867: PPUSH
48868: CALL_OW 12
48872: ARRAY
48873: ST_TO_ADDR
// end ; if weapon then
48874: LD_VAR 0 18
48878: IFFALSE 48992
// begin tmp := CostOfWeapon ( weapon ) ;
48880: LD_ADDR_VAR 0 14
48884: PUSH
48885: LD_VAR 0 18
48889: PPUSH
48890: CALL_OW 451
48894: ST_TO_ADDR
// j := GetBase ( tower ) ;
48895: LD_ADDR_VAR 0 9
48899: PUSH
48900: LD_VAR 0 1
48904: PPUSH
48905: CALL_OW 274
48909: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48910: LD_VAR 0 9
48914: PPUSH
48915: LD_INT 1
48917: PPUSH
48918: CALL_OW 275
48922: PUSH
48923: LD_VAR 0 14
48927: PUSH
48928: LD_INT 1
48930: ARRAY
48931: GREATEREQUAL
48932: PUSH
48933: LD_VAR 0 9
48937: PPUSH
48938: LD_INT 2
48940: PPUSH
48941: CALL_OW 275
48945: PUSH
48946: LD_VAR 0 14
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: GREATEREQUAL
48955: AND
48956: PUSH
48957: LD_VAR 0 9
48961: PPUSH
48962: LD_INT 3
48964: PPUSH
48965: CALL_OW 275
48969: PUSH
48970: LD_VAR 0 14
48974: PUSH
48975: LD_INT 3
48977: ARRAY
48978: GREATEREQUAL
48979: AND
48980: IFFALSE 48992
// result := weapon ;
48982: LD_ADDR_VAR 0 3
48986: PUSH
48987: LD_VAR 0 18
48991: ST_TO_ADDR
// end ; end ;
48992: LD_VAR 0 3
48996: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48997: LD_INT 0
48999: PPUSH
49000: PPUSH
// result := true ;
49001: LD_ADDR_VAR 0 3
49005: PUSH
49006: LD_INT 1
49008: ST_TO_ADDR
// if array1 = array2 then
49009: LD_VAR 0 1
49013: PUSH
49014: LD_VAR 0 2
49018: EQUAL
49019: IFFALSE 49079
// begin for i = 1 to array1 do
49021: LD_ADDR_VAR 0 4
49025: PUSH
49026: DOUBLE
49027: LD_INT 1
49029: DEC
49030: ST_TO_ADDR
49031: LD_VAR 0 1
49035: PUSH
49036: FOR_TO
49037: IFFALSE 49075
// if array1 [ i ] <> array2 [ i ] then
49039: LD_VAR 0 1
49043: PUSH
49044: LD_VAR 0 4
49048: ARRAY
49049: PUSH
49050: LD_VAR 0 2
49054: PUSH
49055: LD_VAR 0 4
49059: ARRAY
49060: NONEQUAL
49061: IFFALSE 49073
// begin result := false ;
49063: LD_ADDR_VAR 0 3
49067: PUSH
49068: LD_INT 0
49070: ST_TO_ADDR
// break ;
49071: GO 49075
// end ;
49073: GO 49036
49075: POP
49076: POP
// end else
49077: GO 49087
// result := false ;
49079: LD_ADDR_VAR 0 3
49083: PUSH
49084: LD_INT 0
49086: ST_TO_ADDR
// end ;
49087: LD_VAR 0 3
49091: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49092: LD_INT 0
49094: PPUSH
49095: PPUSH
// if not array1 or not array2 then
49096: LD_VAR 0 1
49100: NOT
49101: PUSH
49102: LD_VAR 0 2
49106: NOT
49107: OR
49108: IFFALSE 49112
// exit ;
49110: GO 49176
// result := true ;
49112: LD_ADDR_VAR 0 3
49116: PUSH
49117: LD_INT 1
49119: ST_TO_ADDR
// for i = 1 to array1 do
49120: LD_ADDR_VAR 0 4
49124: PUSH
49125: DOUBLE
49126: LD_INT 1
49128: DEC
49129: ST_TO_ADDR
49130: LD_VAR 0 1
49134: PUSH
49135: FOR_TO
49136: IFFALSE 49174
// if array1 [ i ] <> array2 [ i ] then
49138: LD_VAR 0 1
49142: PUSH
49143: LD_VAR 0 4
49147: ARRAY
49148: PUSH
49149: LD_VAR 0 2
49153: PUSH
49154: LD_VAR 0 4
49158: ARRAY
49159: NONEQUAL
49160: IFFALSE 49172
// begin result := false ;
49162: LD_ADDR_VAR 0 3
49166: PUSH
49167: LD_INT 0
49169: ST_TO_ADDR
// break ;
49170: GO 49174
// end ;
49172: GO 49135
49174: POP
49175: POP
// end ;
49176: LD_VAR 0 3
49180: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49181: LD_INT 0
49183: PPUSH
49184: PPUSH
49185: PPUSH
// pom := GetBase ( fac ) ;
49186: LD_ADDR_VAR 0 5
49190: PUSH
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL_OW 274
49200: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49201: LD_ADDR_VAR 0 4
49205: PUSH
49206: LD_VAR 0 2
49210: PUSH
49211: LD_INT 1
49213: ARRAY
49214: PPUSH
49215: LD_VAR 0 2
49219: PUSH
49220: LD_INT 2
49222: ARRAY
49223: PPUSH
49224: LD_VAR 0 2
49228: PUSH
49229: LD_INT 3
49231: ARRAY
49232: PPUSH
49233: LD_VAR 0 2
49237: PUSH
49238: LD_INT 4
49240: ARRAY
49241: PPUSH
49242: CALL_OW 449
49246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49247: LD_ADDR_VAR 0 3
49251: PUSH
49252: LD_VAR 0 5
49256: PPUSH
49257: LD_INT 1
49259: PPUSH
49260: CALL_OW 275
49264: PUSH
49265: LD_VAR 0 4
49269: PUSH
49270: LD_INT 1
49272: ARRAY
49273: GREATEREQUAL
49274: PUSH
49275: LD_VAR 0 5
49279: PPUSH
49280: LD_INT 2
49282: PPUSH
49283: CALL_OW 275
49287: PUSH
49288: LD_VAR 0 4
49292: PUSH
49293: LD_INT 2
49295: ARRAY
49296: GREATEREQUAL
49297: AND
49298: PUSH
49299: LD_VAR 0 5
49303: PPUSH
49304: LD_INT 3
49306: PPUSH
49307: CALL_OW 275
49311: PUSH
49312: LD_VAR 0 4
49316: PUSH
49317: LD_INT 3
49319: ARRAY
49320: GREATEREQUAL
49321: AND
49322: ST_TO_ADDR
// end ;
49323: LD_VAR 0 3
49327: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49328: LD_INT 0
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
// pom := GetBase ( building ) ;
49334: LD_ADDR_VAR 0 3
49338: PUSH
49339: LD_VAR 0 1
49343: PPUSH
49344: CALL_OW 274
49348: ST_TO_ADDR
// if not pom then
49349: LD_VAR 0 3
49353: NOT
49354: IFFALSE 49358
// exit ;
49356: GO 49528
// btype := GetBType ( building ) ;
49358: LD_ADDR_VAR 0 5
49362: PUSH
49363: LD_VAR 0 1
49367: PPUSH
49368: CALL_OW 266
49372: ST_TO_ADDR
// if btype = b_armoury then
49373: LD_VAR 0 5
49377: PUSH
49378: LD_INT 4
49380: EQUAL
49381: IFFALSE 49391
// btype := b_barracks ;
49383: LD_ADDR_VAR 0 5
49387: PUSH
49388: LD_INT 5
49390: ST_TO_ADDR
// if btype = b_depot then
49391: LD_VAR 0 5
49395: PUSH
49396: LD_INT 0
49398: EQUAL
49399: IFFALSE 49409
// btype := b_warehouse ;
49401: LD_ADDR_VAR 0 5
49405: PUSH
49406: LD_INT 1
49408: ST_TO_ADDR
// if btype = b_workshop then
49409: LD_VAR 0 5
49413: PUSH
49414: LD_INT 2
49416: EQUAL
49417: IFFALSE 49427
// btype := b_factory ;
49419: LD_ADDR_VAR 0 5
49423: PUSH
49424: LD_INT 3
49426: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49427: LD_ADDR_VAR 0 4
49431: PUSH
49432: LD_VAR 0 5
49436: PPUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: CALL_OW 248
49446: PPUSH
49447: CALL_OW 450
49451: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49452: LD_ADDR_VAR 0 2
49456: PUSH
49457: LD_VAR 0 3
49461: PPUSH
49462: LD_INT 1
49464: PPUSH
49465: CALL_OW 275
49469: PUSH
49470: LD_VAR 0 4
49474: PUSH
49475: LD_INT 1
49477: ARRAY
49478: GREATEREQUAL
49479: PUSH
49480: LD_VAR 0 3
49484: PPUSH
49485: LD_INT 2
49487: PPUSH
49488: CALL_OW 275
49492: PUSH
49493: LD_VAR 0 4
49497: PUSH
49498: LD_INT 2
49500: ARRAY
49501: GREATEREQUAL
49502: AND
49503: PUSH
49504: LD_VAR 0 3
49508: PPUSH
49509: LD_INT 3
49511: PPUSH
49512: CALL_OW 275
49516: PUSH
49517: LD_VAR 0 4
49521: PUSH
49522: LD_INT 3
49524: ARRAY
49525: GREATEREQUAL
49526: AND
49527: ST_TO_ADDR
// end ;
49528: LD_VAR 0 2
49532: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49533: LD_INT 0
49535: PPUSH
49536: PPUSH
49537: PPUSH
// pom := GetBase ( building ) ;
49538: LD_ADDR_VAR 0 4
49542: PUSH
49543: LD_VAR 0 1
49547: PPUSH
49548: CALL_OW 274
49552: ST_TO_ADDR
// if not pom then
49553: LD_VAR 0 4
49557: NOT
49558: IFFALSE 49562
// exit ;
49560: GO 49663
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49562: LD_ADDR_VAR 0 5
49566: PUSH
49567: LD_VAR 0 2
49571: PPUSH
49572: LD_VAR 0 1
49576: PPUSH
49577: CALL_OW 248
49581: PPUSH
49582: CALL_OW 450
49586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49587: LD_ADDR_VAR 0 3
49591: PUSH
49592: LD_VAR 0 4
49596: PPUSH
49597: LD_INT 1
49599: PPUSH
49600: CALL_OW 275
49604: PUSH
49605: LD_VAR 0 5
49609: PUSH
49610: LD_INT 1
49612: ARRAY
49613: GREATEREQUAL
49614: PUSH
49615: LD_VAR 0 4
49619: PPUSH
49620: LD_INT 2
49622: PPUSH
49623: CALL_OW 275
49627: PUSH
49628: LD_VAR 0 5
49632: PUSH
49633: LD_INT 2
49635: ARRAY
49636: GREATEREQUAL
49637: AND
49638: PUSH
49639: LD_VAR 0 4
49643: PPUSH
49644: LD_INT 3
49646: PPUSH
49647: CALL_OW 275
49651: PUSH
49652: LD_VAR 0 5
49656: PUSH
49657: LD_INT 3
49659: ARRAY
49660: GREATEREQUAL
49661: AND
49662: ST_TO_ADDR
// end ;
49663: LD_VAR 0 3
49667: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49668: LD_INT 0
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
49674: PPUSH
49675: PPUSH
49676: PPUSH
49677: PPUSH
49678: PPUSH
49679: PPUSH
49680: PPUSH
// result := false ;
49681: LD_ADDR_VAR 0 8
49685: PUSH
49686: LD_INT 0
49688: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49689: LD_VAR 0 5
49693: NOT
49694: PUSH
49695: LD_VAR 0 1
49699: NOT
49700: OR
49701: PUSH
49702: LD_VAR 0 2
49706: NOT
49707: OR
49708: PUSH
49709: LD_VAR 0 3
49713: NOT
49714: OR
49715: IFFALSE 49719
// exit ;
49717: GO 50533
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49719: LD_ADDR_VAR 0 14
49723: PUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: LD_VAR 0 2
49733: PPUSH
49734: LD_VAR 0 3
49738: PPUSH
49739: LD_VAR 0 4
49743: PPUSH
49744: LD_VAR 0 5
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PPUSH
49753: CALL_OW 248
49757: PPUSH
49758: LD_INT 0
49760: PPUSH
49761: CALL 51766 0 6
49765: ST_TO_ADDR
// if not hexes then
49766: LD_VAR 0 14
49770: NOT
49771: IFFALSE 49775
// exit ;
49773: GO 50533
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49775: LD_ADDR_VAR 0 17
49779: PUSH
49780: LD_VAR 0 5
49784: PPUSH
49785: LD_INT 22
49787: PUSH
49788: LD_VAR 0 13
49792: PPUSH
49793: CALL_OW 255
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 30
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 30
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PPUSH
49834: CALL_OW 72
49838: ST_TO_ADDR
// for i = 1 to hexes do
49839: LD_ADDR_VAR 0 9
49843: PUSH
49844: DOUBLE
49845: LD_INT 1
49847: DEC
49848: ST_TO_ADDR
49849: LD_VAR 0 14
49853: PUSH
49854: FOR_TO
49855: IFFALSE 50531
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49857: LD_ADDR_VAR 0 13
49861: PUSH
49862: LD_VAR 0 14
49866: PUSH
49867: LD_VAR 0 9
49871: ARRAY
49872: PUSH
49873: LD_INT 1
49875: ARRAY
49876: PPUSH
49877: LD_VAR 0 14
49881: PUSH
49882: LD_VAR 0 9
49886: ARRAY
49887: PUSH
49888: LD_INT 2
49890: ARRAY
49891: PPUSH
49892: CALL_OW 428
49896: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49897: LD_VAR 0 14
49901: PUSH
49902: LD_VAR 0 9
49906: ARRAY
49907: PUSH
49908: LD_INT 1
49910: ARRAY
49911: PPUSH
49912: LD_VAR 0 14
49916: PUSH
49917: LD_VAR 0 9
49921: ARRAY
49922: PUSH
49923: LD_INT 2
49925: ARRAY
49926: PPUSH
49927: CALL_OW 351
49931: PUSH
49932: LD_VAR 0 14
49936: PUSH
49937: LD_VAR 0 9
49941: ARRAY
49942: PUSH
49943: LD_INT 1
49945: ARRAY
49946: PPUSH
49947: LD_VAR 0 14
49951: PUSH
49952: LD_VAR 0 9
49956: ARRAY
49957: PUSH
49958: LD_INT 2
49960: ARRAY
49961: PPUSH
49962: CALL_OW 488
49966: NOT
49967: OR
49968: PUSH
49969: LD_VAR 0 13
49973: PPUSH
49974: CALL_OW 247
49978: PUSH
49979: LD_INT 3
49981: EQUAL
49982: OR
49983: IFFALSE 49989
// exit ;
49985: POP
49986: POP
49987: GO 50533
// if not tmp then
49989: LD_VAR 0 13
49993: NOT
49994: IFFALSE 49998
// continue ;
49996: GO 49854
// result := true ;
49998: LD_ADDR_VAR 0 8
50002: PUSH
50003: LD_INT 1
50005: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50006: LD_VAR 0 6
50010: PUSH
50011: LD_VAR 0 13
50015: PPUSH
50016: CALL_OW 247
50020: PUSH
50021: LD_INT 2
50023: EQUAL
50024: AND
50025: PUSH
50026: LD_VAR 0 13
50030: PPUSH
50031: CALL_OW 263
50035: PUSH
50036: LD_INT 1
50038: EQUAL
50039: AND
50040: IFFALSE 50204
// begin if IsDrivenBy ( tmp ) then
50042: LD_VAR 0 13
50046: PPUSH
50047: CALL_OW 311
50051: IFFALSE 50055
// continue ;
50053: GO 49854
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50055: LD_VAR 0 6
50059: PPUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 60
50065: PUSH
50066: EMPTY
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: LD_INT 55
50078: PUSH
50079: EMPTY
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PPUSH
50090: CALL_OW 72
50094: IFFALSE 50202
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50096: LD_ADDR_VAR 0 18
50100: PUSH
50101: LD_VAR 0 6
50105: PPUSH
50106: LD_INT 3
50108: PUSH
50109: LD_INT 60
50111: PUSH
50112: EMPTY
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: PUSH
50122: LD_INT 55
50124: PUSH
50125: EMPTY
50126: LIST
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PPUSH
50136: CALL_OW 72
50140: PUSH
50141: LD_INT 1
50143: ARRAY
50144: ST_TO_ADDR
// if IsInUnit ( driver ) then
50145: LD_VAR 0 18
50149: PPUSH
50150: CALL_OW 310
50154: IFFALSE 50165
// ComExit ( driver ) ;
50156: LD_VAR 0 18
50160: PPUSH
50161: CALL 75527 0 1
// AddComEnterUnit ( driver , tmp ) ;
50165: LD_VAR 0 18
50169: PPUSH
50170: LD_VAR 0 13
50174: PPUSH
50175: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50179: LD_VAR 0 18
50183: PPUSH
50184: LD_VAR 0 7
50188: PPUSH
50189: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50193: LD_VAR 0 18
50197: PPUSH
50198: CALL_OW 181
// end ; continue ;
50202: GO 49854
// end ; if not cleaners or not tmp in cleaners then
50204: LD_VAR 0 6
50208: NOT
50209: PUSH
50210: LD_VAR 0 13
50214: PUSH
50215: LD_VAR 0 6
50219: IN
50220: NOT
50221: OR
50222: IFFALSE 50529
// begin if dep then
50224: LD_VAR 0 17
50228: IFFALSE 50364
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50230: LD_ADDR_VAR 0 16
50234: PUSH
50235: LD_VAR 0 17
50239: PUSH
50240: LD_INT 1
50242: ARRAY
50243: PPUSH
50244: CALL_OW 250
50248: PPUSH
50249: LD_VAR 0 17
50253: PUSH
50254: LD_INT 1
50256: ARRAY
50257: PPUSH
50258: CALL_OW 254
50262: PPUSH
50263: LD_INT 5
50265: PPUSH
50266: CALL_OW 272
50270: PUSH
50271: LD_VAR 0 17
50275: PUSH
50276: LD_INT 1
50278: ARRAY
50279: PPUSH
50280: CALL_OW 251
50284: PPUSH
50285: LD_VAR 0 17
50289: PUSH
50290: LD_INT 1
50292: ARRAY
50293: PPUSH
50294: CALL_OW 254
50298: PPUSH
50299: LD_INT 5
50301: PPUSH
50302: CALL_OW 273
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50311: LD_VAR 0 16
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: PPUSH
50320: LD_VAR 0 16
50324: PUSH
50325: LD_INT 2
50327: ARRAY
50328: PPUSH
50329: CALL_OW 488
50333: IFFALSE 50364
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50335: LD_VAR 0 13
50339: PPUSH
50340: LD_VAR 0 16
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: PPUSH
50349: LD_VAR 0 16
50353: PUSH
50354: LD_INT 2
50356: ARRAY
50357: PPUSH
50358: CALL_OW 111
// continue ;
50362: GO 49854
// end ; end ; r := GetDir ( tmp ) ;
50364: LD_ADDR_VAR 0 15
50368: PUSH
50369: LD_VAR 0 13
50373: PPUSH
50374: CALL_OW 254
50378: ST_TO_ADDR
// if r = 5 then
50379: LD_VAR 0 15
50383: PUSH
50384: LD_INT 5
50386: EQUAL
50387: IFFALSE 50397
// r := 0 ;
50389: LD_ADDR_VAR 0 15
50393: PUSH
50394: LD_INT 0
50396: ST_TO_ADDR
// for j = r to 5 do
50397: LD_ADDR_VAR 0 10
50401: PUSH
50402: DOUBLE
50403: LD_VAR 0 15
50407: DEC
50408: ST_TO_ADDR
50409: LD_INT 5
50411: PUSH
50412: FOR_TO
50413: IFFALSE 50527
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50415: LD_ADDR_VAR 0 11
50419: PUSH
50420: LD_VAR 0 13
50424: PPUSH
50425: CALL_OW 250
50429: PPUSH
50430: LD_VAR 0 10
50434: PPUSH
50435: LD_INT 2
50437: PPUSH
50438: CALL_OW 272
50442: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50443: LD_ADDR_VAR 0 12
50447: PUSH
50448: LD_VAR 0 13
50452: PPUSH
50453: CALL_OW 251
50457: PPUSH
50458: LD_VAR 0 10
50462: PPUSH
50463: LD_INT 2
50465: PPUSH
50466: CALL_OW 273
50470: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50471: LD_VAR 0 11
50475: PPUSH
50476: LD_VAR 0 12
50480: PPUSH
50481: CALL_OW 488
50485: PUSH
50486: LD_VAR 0 11
50490: PPUSH
50491: LD_VAR 0 12
50495: PPUSH
50496: CALL_OW 428
50500: NOT
50501: AND
50502: IFFALSE 50525
// begin ComMoveXY ( tmp , _x , _y ) ;
50504: LD_VAR 0 13
50508: PPUSH
50509: LD_VAR 0 11
50513: PPUSH
50514: LD_VAR 0 12
50518: PPUSH
50519: CALL_OW 111
// break ;
50523: GO 50527
// end ; end ;
50525: GO 50412
50527: POP
50528: POP
// end ; end ;
50529: GO 49854
50531: POP
50532: POP
// end ;
50533: LD_VAR 0 8
50537: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50538: LD_INT 0
50540: PPUSH
// result := true ;
50541: LD_ADDR_VAR 0 3
50545: PUSH
50546: LD_INT 1
50548: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50549: LD_VAR 0 2
50553: PUSH
50554: LD_INT 24
50556: DOUBLE
50557: EQUAL
50558: IFTRUE 50568
50560: LD_INT 33
50562: DOUBLE
50563: EQUAL
50564: IFTRUE 50568
50566: GO 50593
50568: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50569: LD_ADDR_VAR 0 3
50573: PUSH
50574: LD_INT 32
50576: PPUSH
50577: LD_VAR 0 1
50581: PPUSH
50582: CALL_OW 321
50586: PUSH
50587: LD_INT 2
50589: EQUAL
50590: ST_TO_ADDR
50591: GO 50909
50593: LD_INT 20
50595: DOUBLE
50596: EQUAL
50597: IFTRUE 50601
50599: GO 50626
50601: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50602: LD_ADDR_VAR 0 3
50606: PUSH
50607: LD_INT 6
50609: PPUSH
50610: LD_VAR 0 1
50614: PPUSH
50615: CALL_OW 321
50619: PUSH
50620: LD_INT 2
50622: EQUAL
50623: ST_TO_ADDR
50624: GO 50909
50626: LD_INT 22
50628: DOUBLE
50629: EQUAL
50630: IFTRUE 50640
50632: LD_INT 36
50634: DOUBLE
50635: EQUAL
50636: IFTRUE 50640
50638: GO 50665
50640: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50641: LD_ADDR_VAR 0 3
50645: PUSH
50646: LD_INT 15
50648: PPUSH
50649: LD_VAR 0 1
50653: PPUSH
50654: CALL_OW 321
50658: PUSH
50659: LD_INT 2
50661: EQUAL
50662: ST_TO_ADDR
50663: GO 50909
50665: LD_INT 30
50667: DOUBLE
50668: EQUAL
50669: IFTRUE 50673
50671: GO 50698
50673: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50674: LD_ADDR_VAR 0 3
50678: PUSH
50679: LD_INT 20
50681: PPUSH
50682: LD_VAR 0 1
50686: PPUSH
50687: CALL_OW 321
50691: PUSH
50692: LD_INT 2
50694: EQUAL
50695: ST_TO_ADDR
50696: GO 50909
50698: LD_INT 28
50700: DOUBLE
50701: EQUAL
50702: IFTRUE 50712
50704: LD_INT 21
50706: DOUBLE
50707: EQUAL
50708: IFTRUE 50712
50710: GO 50737
50712: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50713: LD_ADDR_VAR 0 3
50717: PUSH
50718: LD_INT 21
50720: PPUSH
50721: LD_VAR 0 1
50725: PPUSH
50726: CALL_OW 321
50730: PUSH
50731: LD_INT 2
50733: EQUAL
50734: ST_TO_ADDR
50735: GO 50909
50737: LD_INT 16
50739: DOUBLE
50740: EQUAL
50741: IFTRUE 50745
50743: GO 50770
50745: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50746: LD_ADDR_VAR 0 3
50750: PUSH
50751: LD_INT 84
50753: PPUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 321
50763: PUSH
50764: LD_INT 2
50766: EQUAL
50767: ST_TO_ADDR
50768: GO 50909
50770: LD_INT 19
50772: DOUBLE
50773: EQUAL
50774: IFTRUE 50784
50776: LD_INT 23
50778: DOUBLE
50779: EQUAL
50780: IFTRUE 50784
50782: GO 50809
50784: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50785: LD_ADDR_VAR 0 3
50789: PUSH
50790: LD_INT 83
50792: PPUSH
50793: LD_VAR 0 1
50797: PPUSH
50798: CALL_OW 321
50802: PUSH
50803: LD_INT 2
50805: EQUAL
50806: ST_TO_ADDR
50807: GO 50909
50809: LD_INT 17
50811: DOUBLE
50812: EQUAL
50813: IFTRUE 50817
50815: GO 50842
50817: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50818: LD_ADDR_VAR 0 3
50822: PUSH
50823: LD_INT 39
50825: PPUSH
50826: LD_VAR 0 1
50830: PPUSH
50831: CALL_OW 321
50835: PUSH
50836: LD_INT 2
50838: EQUAL
50839: ST_TO_ADDR
50840: GO 50909
50842: LD_INT 18
50844: DOUBLE
50845: EQUAL
50846: IFTRUE 50850
50848: GO 50875
50850: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50851: LD_ADDR_VAR 0 3
50855: PUSH
50856: LD_INT 40
50858: PPUSH
50859: LD_VAR 0 1
50863: PPUSH
50864: CALL_OW 321
50868: PUSH
50869: LD_INT 2
50871: EQUAL
50872: ST_TO_ADDR
50873: GO 50909
50875: LD_INT 27
50877: DOUBLE
50878: EQUAL
50879: IFTRUE 50883
50881: GO 50908
50883: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50884: LD_ADDR_VAR 0 3
50888: PUSH
50889: LD_INT 35
50891: PPUSH
50892: LD_VAR 0 1
50896: PPUSH
50897: CALL_OW 321
50901: PUSH
50902: LD_INT 2
50904: EQUAL
50905: ST_TO_ADDR
50906: GO 50909
50908: POP
// end ;
50909: LD_VAR 0 3
50913: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50914: LD_INT 0
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
50920: PPUSH
50921: PPUSH
50922: PPUSH
50923: PPUSH
50924: PPUSH
50925: PPUSH
50926: PPUSH
// result := false ;
50927: LD_ADDR_VAR 0 6
50931: PUSH
50932: LD_INT 0
50934: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50935: LD_VAR 0 1
50939: NOT
50940: PUSH
50941: LD_VAR 0 1
50945: PPUSH
50946: CALL_OW 266
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: IN
50961: NOT
50962: OR
50963: PUSH
50964: LD_VAR 0 2
50968: NOT
50969: OR
50970: PUSH
50971: LD_VAR 0 5
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: LD_INT 5
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: IN
51002: NOT
51003: OR
51004: PUSH
51005: LD_VAR 0 3
51009: PPUSH
51010: LD_VAR 0 4
51014: PPUSH
51015: CALL_OW 488
51019: NOT
51020: OR
51021: IFFALSE 51025
// exit ;
51023: GO 51761
// side := GetSide ( depot ) ;
51025: LD_ADDR_VAR 0 9
51029: PUSH
51030: LD_VAR 0 1
51034: PPUSH
51035: CALL_OW 255
51039: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51040: LD_VAR 0 9
51044: PPUSH
51045: LD_VAR 0 2
51049: PPUSH
51050: CALL 50538 0 2
51054: NOT
51055: IFFALSE 51059
// exit ;
51057: GO 51761
// pom := GetBase ( depot ) ;
51059: LD_ADDR_VAR 0 10
51063: PUSH
51064: LD_VAR 0 1
51068: PPUSH
51069: CALL_OW 274
51073: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51074: LD_ADDR_VAR 0 11
51078: PUSH
51079: LD_VAR 0 2
51083: PPUSH
51084: LD_VAR 0 1
51088: PPUSH
51089: CALL_OW 248
51093: PPUSH
51094: CALL_OW 450
51098: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51099: LD_VAR 0 10
51103: PPUSH
51104: LD_INT 1
51106: PPUSH
51107: CALL_OW 275
51111: PUSH
51112: LD_VAR 0 11
51116: PUSH
51117: LD_INT 1
51119: ARRAY
51120: GREATEREQUAL
51121: PUSH
51122: LD_VAR 0 10
51126: PPUSH
51127: LD_INT 2
51129: PPUSH
51130: CALL_OW 275
51134: PUSH
51135: LD_VAR 0 11
51139: PUSH
51140: LD_INT 2
51142: ARRAY
51143: GREATEREQUAL
51144: AND
51145: PUSH
51146: LD_VAR 0 10
51150: PPUSH
51151: LD_INT 3
51153: PPUSH
51154: CALL_OW 275
51158: PUSH
51159: LD_VAR 0 11
51163: PUSH
51164: LD_INT 3
51166: ARRAY
51167: GREATEREQUAL
51168: AND
51169: NOT
51170: IFFALSE 51174
// exit ;
51172: GO 51761
// if GetBType ( depot ) = b_depot then
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 266
51183: PUSH
51184: LD_INT 0
51186: EQUAL
51187: IFFALSE 51199
// dist := 28 else
51189: LD_ADDR_VAR 0 14
51193: PUSH
51194: LD_INT 28
51196: ST_TO_ADDR
51197: GO 51207
// dist := 36 ;
51199: LD_ADDR_VAR 0 14
51203: PUSH
51204: LD_INT 36
51206: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51207: LD_VAR 0 1
51211: PPUSH
51212: LD_VAR 0 3
51216: PPUSH
51217: LD_VAR 0 4
51221: PPUSH
51222: CALL_OW 297
51226: PUSH
51227: LD_VAR 0 14
51231: GREATER
51232: IFFALSE 51236
// exit ;
51234: GO 51761
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51236: LD_ADDR_VAR 0 12
51240: PUSH
51241: LD_VAR 0 2
51245: PPUSH
51246: LD_VAR 0 3
51250: PPUSH
51251: LD_VAR 0 4
51255: PPUSH
51256: LD_VAR 0 5
51260: PPUSH
51261: LD_VAR 0 1
51265: PPUSH
51266: CALL_OW 248
51270: PPUSH
51271: LD_INT 0
51273: PPUSH
51274: CALL 51766 0 6
51278: ST_TO_ADDR
// if not hexes then
51279: LD_VAR 0 12
51283: NOT
51284: IFFALSE 51288
// exit ;
51286: GO 51761
// hex := GetHexInfo ( x , y ) ;
51288: LD_ADDR_VAR 0 15
51292: PUSH
51293: LD_VAR 0 3
51297: PPUSH
51298: LD_VAR 0 4
51302: PPUSH
51303: CALL_OW 546
51307: ST_TO_ADDR
// if hex [ 1 ] then
51308: LD_VAR 0 15
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: IFFALSE 51320
// exit ;
51318: GO 51761
// height := hex [ 2 ] ;
51320: LD_ADDR_VAR 0 13
51324: PUSH
51325: LD_VAR 0 15
51329: PUSH
51330: LD_INT 2
51332: ARRAY
51333: ST_TO_ADDR
// for i = 1 to hexes do
51334: LD_ADDR_VAR 0 7
51338: PUSH
51339: DOUBLE
51340: LD_INT 1
51342: DEC
51343: ST_TO_ADDR
51344: LD_VAR 0 12
51348: PUSH
51349: FOR_TO
51350: IFFALSE 51680
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51352: LD_VAR 0 12
51356: PUSH
51357: LD_VAR 0 7
51361: ARRAY
51362: PUSH
51363: LD_INT 1
51365: ARRAY
51366: PPUSH
51367: LD_VAR 0 12
51371: PUSH
51372: LD_VAR 0 7
51376: ARRAY
51377: PUSH
51378: LD_INT 2
51380: ARRAY
51381: PPUSH
51382: CALL_OW 488
51386: NOT
51387: PUSH
51388: LD_VAR 0 12
51392: PUSH
51393: LD_VAR 0 7
51397: ARRAY
51398: PUSH
51399: LD_INT 1
51401: ARRAY
51402: PPUSH
51403: LD_VAR 0 12
51407: PUSH
51408: LD_VAR 0 7
51412: ARRAY
51413: PUSH
51414: LD_INT 2
51416: ARRAY
51417: PPUSH
51418: CALL_OW 428
51422: PUSH
51423: LD_INT 0
51425: GREATER
51426: OR
51427: PUSH
51428: LD_VAR 0 12
51432: PUSH
51433: LD_VAR 0 7
51437: ARRAY
51438: PUSH
51439: LD_INT 1
51441: ARRAY
51442: PPUSH
51443: LD_VAR 0 12
51447: PUSH
51448: LD_VAR 0 7
51452: ARRAY
51453: PUSH
51454: LD_INT 2
51456: ARRAY
51457: PPUSH
51458: CALL_OW 351
51462: OR
51463: IFFALSE 51469
// exit ;
51465: POP
51466: POP
51467: GO 51761
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51469: LD_ADDR_VAR 0 8
51473: PUSH
51474: LD_VAR 0 12
51478: PUSH
51479: LD_VAR 0 7
51483: ARRAY
51484: PUSH
51485: LD_INT 1
51487: ARRAY
51488: PPUSH
51489: LD_VAR 0 12
51493: PUSH
51494: LD_VAR 0 7
51498: ARRAY
51499: PUSH
51500: LD_INT 2
51502: ARRAY
51503: PPUSH
51504: CALL_OW 546
51508: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51509: LD_VAR 0 8
51513: PUSH
51514: LD_INT 1
51516: ARRAY
51517: PUSH
51518: LD_VAR 0 8
51522: PUSH
51523: LD_INT 2
51525: ARRAY
51526: PUSH
51527: LD_VAR 0 13
51531: PUSH
51532: LD_INT 2
51534: PLUS
51535: GREATER
51536: OR
51537: PUSH
51538: LD_VAR 0 8
51542: PUSH
51543: LD_INT 2
51545: ARRAY
51546: PUSH
51547: LD_VAR 0 13
51551: PUSH
51552: LD_INT 2
51554: MINUS
51555: LESS
51556: OR
51557: PUSH
51558: LD_VAR 0 8
51562: PUSH
51563: LD_INT 3
51565: ARRAY
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 8
51572: PUSH
51573: LD_INT 9
51575: PUSH
51576: LD_INT 10
51578: PUSH
51579: LD_INT 11
51581: PUSH
51582: LD_INT 12
51584: PUSH
51585: LD_INT 13
51587: PUSH
51588: LD_INT 16
51590: PUSH
51591: LD_INT 17
51593: PUSH
51594: LD_INT 18
51596: PUSH
51597: LD_INT 19
51599: PUSH
51600: LD_INT 20
51602: PUSH
51603: LD_INT 21
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: IN
51621: NOT
51622: OR
51623: PUSH
51624: LD_VAR 0 8
51628: PUSH
51629: LD_INT 5
51631: ARRAY
51632: NOT
51633: OR
51634: PUSH
51635: LD_VAR 0 8
51639: PUSH
51640: LD_INT 6
51642: ARRAY
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 7
51652: PUSH
51653: LD_INT 9
51655: PUSH
51656: LD_INT 10
51658: PUSH
51659: LD_INT 11
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: IN
51670: NOT
51671: OR
51672: IFFALSE 51678
// exit ;
51674: POP
51675: POP
51676: GO 51761
// end ;
51678: GO 51349
51680: POP
51681: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51682: LD_VAR 0 9
51686: PPUSH
51687: LD_VAR 0 3
51691: PPUSH
51692: LD_VAR 0 4
51696: PPUSH
51697: LD_INT 20
51699: PPUSH
51700: CALL 43713 0 4
51704: PUSH
51705: LD_INT 4
51707: ARRAY
51708: IFFALSE 51712
// exit ;
51710: GO 51761
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51712: LD_VAR 0 2
51716: PUSH
51717: LD_INT 29
51719: PUSH
51720: LD_INT 30
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: IN
51727: PUSH
51728: LD_VAR 0 3
51732: PPUSH
51733: LD_VAR 0 4
51737: PPUSH
51738: LD_VAR 0 9
51742: PPUSH
51743: CALL_OW 440
51747: NOT
51748: AND
51749: IFFALSE 51753
// exit ;
51751: GO 51761
// result := true ;
51753: LD_ADDR_VAR 0 6
51757: PUSH
51758: LD_INT 1
51760: ST_TO_ADDR
// end ;
51761: LD_VAR 0 6
51765: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51766: LD_INT 0
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
51775: PPUSH
51776: PPUSH
51777: PPUSH
51778: PPUSH
51779: PPUSH
51780: PPUSH
51781: PPUSH
51782: PPUSH
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
51789: PPUSH
51790: PPUSH
51791: PPUSH
51792: PPUSH
51793: PPUSH
51794: PPUSH
51795: PPUSH
51796: PPUSH
51797: PPUSH
51798: PPUSH
51799: PPUSH
51800: PPUSH
51801: PPUSH
51802: PPUSH
51803: PPUSH
51804: PPUSH
51805: PPUSH
51806: PPUSH
51807: PPUSH
51808: PPUSH
51809: PPUSH
51810: PPUSH
51811: PPUSH
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
51816: PPUSH
51817: PPUSH
51818: PPUSH
51819: PPUSH
51820: PPUSH
51821: PPUSH
51822: PPUSH
51823: PPUSH
51824: PPUSH
51825: PPUSH
// result = [ ] ;
51826: LD_ADDR_VAR 0 7
51830: PUSH
51831: EMPTY
51832: ST_TO_ADDR
// temp_list = [ ] ;
51833: LD_ADDR_VAR 0 9
51837: PUSH
51838: EMPTY
51839: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51840: LD_VAR 0 4
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 4
51859: PUSH
51860: LD_INT 5
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: IN
51871: NOT
51872: PUSH
51873: LD_VAR 0 1
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: IN
51888: PUSH
51889: LD_VAR 0 5
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: IN
51908: NOT
51909: AND
51910: OR
51911: IFFALSE 51915
// exit ;
51913: GO 70306
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51915: LD_VAR 0 1
51919: PUSH
51920: LD_INT 6
51922: PUSH
51923: LD_INT 7
51925: PUSH
51926: LD_INT 8
51928: PUSH
51929: LD_INT 13
51931: PUSH
51932: LD_INT 12
51934: PUSH
51935: LD_INT 15
51937: PUSH
51938: LD_INT 11
51940: PUSH
51941: LD_INT 14
51943: PUSH
51944: LD_INT 10
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: IN
51958: IFFALSE 51968
// btype = b_lab ;
51960: LD_ADDR_VAR 0 1
51964: PUSH
51965: LD_INT 6
51967: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51968: LD_VAR 0 6
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: IN
51987: NOT
51988: PUSH
51989: LD_VAR 0 1
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: LD_INT 6
52008: PUSH
52009: LD_INT 36
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: LD_INT 5
52017: PUSH
52018: LD_INT 31
52020: PUSH
52021: LD_INT 32
52023: PUSH
52024: LD_INT 33
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: IN
52040: NOT
52041: PUSH
52042: LD_VAR 0 6
52046: PUSH
52047: LD_INT 1
52049: EQUAL
52050: AND
52051: OR
52052: PUSH
52053: LD_VAR 0 1
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: IN
52068: NOT
52069: PUSH
52070: LD_VAR 0 6
52074: PUSH
52075: LD_INT 2
52077: EQUAL
52078: AND
52079: OR
52080: IFFALSE 52090
// mode = 0 ;
52082: LD_ADDR_VAR 0 6
52086: PUSH
52087: LD_INT 0
52089: ST_TO_ADDR
// case mode of 0 :
52090: LD_VAR 0 6
52094: PUSH
52095: LD_INT 0
52097: DOUBLE
52098: EQUAL
52099: IFTRUE 52103
52101: GO 63556
52103: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52104: LD_ADDR_VAR 0 11
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52297: LD_ADDR_VAR 0 12
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52493: LD_ADDR_VAR 0 13
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52692: LD_ADDR_VAR 0 14
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52888: LD_ADDR_VAR 0 15
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53081: LD_ADDR_VAR 0 16
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 3
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53274: LD_ADDR_VAR 0 17
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53504: LD_ADDR_VAR 0 18
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53734: LD_ADDR_VAR 0 19
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53964: LD_ADDR_VAR 0 20
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54194: LD_ADDR_VAR 0 21
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54424: LD_ADDR_VAR 0 22
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54654: LD_ADDR_VAR 0 23
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54934: LD_ADDR_VAR 0 24
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55210: LD_ADDR_VAR 0 25
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55484: LD_ADDR_VAR 0 26
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55760: LD_ADDR_VAR 0 27
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56040: LD_ADDR_VAR 0 28
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56322: LD_ADDR_VAR 0 29
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56601: LD_ADDR_VAR 0 30
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56879: LD_ADDR_VAR 0 31
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57157: LD_ADDR_VAR 0 32
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57435: LD_ADDR_VAR 0 33
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: NEG
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57714: LD_ADDR_VAR 0 34
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57994: LD_ADDR_VAR 0 35
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58106: LD_ADDR_VAR 0 36
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58218: LD_ADDR_VAR 0 37
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58330: LD_ADDR_VAR 0 38
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58442: LD_ADDR_VAR 0 39
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58554: LD_ADDR_VAR 0 40
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58666: LD_ADDR_VAR 0 41
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59016: LD_ADDR_VAR 0 42
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59366: LD_ADDR_VAR 0 43
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59714: LD_ADDR_VAR 0 44
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: LD_INT 3
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60064: LD_ADDR_VAR 0 45
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60414: LD_ADDR_VAR 0 46
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60762: LD_ADDR_VAR 0 47
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60913: LD_ADDR_VAR 0 48
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61060: LD_ADDR_VAR 0 49
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61204: LD_ADDR_VAR 0 50
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61348: LD_ADDR_VAR 0 51
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61495: LD_ADDR_VAR 0 52
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61646: LD_ADDR_VAR 0 53
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61876: LD_ADDR_VAR 0 54
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62106: LD_ADDR_VAR 0 55
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62336: LD_ADDR_VAR 0 56
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62566: LD_ADDR_VAR 0 57
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62796: LD_ADDR_VAR 0 58
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63026: LD_ADDR_VAR 0 59
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63114: LD_ADDR_VAR 0 60
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63202: LD_ADDR_VAR 0 61
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63290: LD_ADDR_VAR 0 62
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63378: LD_ADDR_VAR 0 63
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63466: LD_ADDR_VAR 0 64
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: ST_TO_ADDR
// end ; 1 :
63554: GO 69451
63556: LD_INT 1
63558: DOUBLE
63559: EQUAL
63560: IFTRUE 63564
63562: GO 66187
63564: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63565: LD_ADDR_VAR 0 11
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: LD_INT 3
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: LD_INT 3
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63609: LD_ADDR_VAR 0 12
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63650: LD_ADDR_VAR 0 13
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: LD_INT 3
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: LIST
63689: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63690: LD_ADDR_VAR 0 14
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63731: LD_ADDR_VAR 0 15
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63775: LD_ADDR_VAR 0 16
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: LD_INT 3
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 3
63794: NEG
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 3
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63821: LD_ADDR_VAR 0 17
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 3
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63865: LD_ADDR_VAR 0 18
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: LIST
63905: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63906: LD_ADDR_VAR 0 19
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 3
63923: PUSH
63924: LD_INT 3
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 3
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63946: LD_ADDR_VAR 0 20
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: LD_INT 3
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63987: LD_ADDR_VAR 0 21
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64031: LD_ADDR_VAR 0 22
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: LD_INT 3
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 3
64050: NEG
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: LD_INT 3
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64077: LD_ADDR_VAR 0 23
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 3
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: LD_INT 4
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: LIST
64120: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64121: LD_ADDR_VAR 0 24
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 4
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64162: LD_ADDR_VAR 0 25
64166: PUSH
64167: LD_INT 3
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 4
64179: PUSH
64180: LD_INT 3
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: PUSH
64190: LD_INT 4
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64202: LD_ADDR_VAR 0 26
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: LD_INT 4
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64243: LD_ADDR_VAR 0 27
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 3
64261: NEG
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 4
64272: NEG
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64287: LD_ADDR_VAR 0 28
64291: PUSH
64292: LD_INT 3
64294: NEG
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: NEG
64307: PUSH
64308: LD_INT 4
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 4
64318: NEG
64319: PUSH
64320: LD_INT 3
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64333: LD_ADDR_VAR 0 29
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 3
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 4
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 4
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: LD_INT 3
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 5
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 5
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 4
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 6
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 6
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: LD_INT 5
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64488: LD_ADDR_VAR 0 30
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 5
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 5
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 5
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 6
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 6
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64631: LD_ADDR_VAR 0 31
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 4
64668: PUSH
64669: LD_INT 3
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: LD_INT 4
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 5
64698: PUSH
64699: LD_INT 4
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 5
64708: PUSH
64709: LD_INT 5
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 4
64718: PUSH
64719: LD_INT 5
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 6
64728: PUSH
64729: LD_INT 5
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 6
64738: PUSH
64739: LD_INT 6
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 5
64748: PUSH
64749: LD_INT 6
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64770: LD_ADDR_VAR 0 32
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 4
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 4
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: LD_INT 5
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 5
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 4
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 6
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 6
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: LD_INT 5
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64913: LD_ADDR_VAR 0 33
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 3
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 4
64965: NEG
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 4
64976: NEG
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 4
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 5
64999: NEG
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 5
65010: NEG
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 5
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 6
65033: NEG
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 6
65044: NEG
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65068: LD_ADDR_VAR 0 34
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 3
65087: NEG
65088: PUSH
65089: LD_INT 2
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 3
65099: NEG
65100: PUSH
65101: LD_INT 3
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 3
65111: NEG
65112: PUSH
65113: LD_INT 4
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 4
65123: NEG
65124: PUSH
65125: LD_INT 3
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 4
65135: NEG
65136: PUSH
65137: LD_INT 4
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 4
65147: NEG
65148: PUSH
65149: LD_INT 5
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 5
65159: NEG
65160: PUSH
65161: LD_INT 4
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 5
65171: NEG
65172: PUSH
65173: LD_INT 5
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 5
65183: NEG
65184: PUSH
65185: LD_INT 6
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 6
65195: NEG
65196: PUSH
65197: LD_INT 5
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 6
65207: NEG
65208: PUSH
65209: LD_INT 6
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65231: LD_ADDR_VAR 0 41
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65275: LD_ADDR_VAR 0 42
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65316: LD_ADDR_VAR 0 43
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: LD_INT 2
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65356: LD_ADDR_VAR 0 44
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65397: LD_ADDR_VAR 0 45
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65441: LD_ADDR_VAR 0 46
65445: PUSH
65446: LD_INT 2
65448: NEG
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 3
65472: NEG
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: LIST
65486: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65487: LD_ADDR_VAR 0 47
65491: PUSH
65492: LD_INT 2
65494: NEG
65495: PUSH
65496: LD_INT 3
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: LD_INT 3
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65520: LD_ADDR_VAR 0 48
65524: PUSH
65525: LD_INT 1
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65551: LD_ADDR_VAR 0 49
65555: PUSH
65556: LD_INT 3
65558: PUSH
65559: LD_INT 1
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65580: LD_ADDR_VAR 0 50
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65609: LD_ADDR_VAR 0 51
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65640: LD_ADDR_VAR 0 52
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: LD_INT 2
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65673: LD_ADDR_VAR 0 53
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: LD_INT 3
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 3
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: LD_INT 2
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65717: LD_ADDR_VAR 0 54
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 3
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 3
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65758: LD_ADDR_VAR 0 55
65762: PUSH
65763: LD_INT 3
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 3
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65798: LD_ADDR_VAR 0 56
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65839: LD_ADDR_VAR 0 57
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 3
65868: NEG
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65883: LD_ADDR_VAR 0 58
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: NEG
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: LIST
65928: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65929: LD_ADDR_VAR 0 59
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: LD_INT 2
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 2
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65973: LD_ADDR_VAR 0 60
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66014: LD_ADDR_VAR 0 61
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: LD_INT 2
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66054: LD_ADDR_VAR 0 62
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 1
66081: NEG
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66095: LD_ADDR_VAR 0 63
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66139: LD_ADDR_VAR 0 64
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 2
66158: NEG
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: NEG
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: ST_TO_ADDR
// end ; 2 :
66185: GO 69451
66187: LD_INT 2
66189: DOUBLE
66190: EQUAL
66191: IFTRUE 66195
66193: GO 69450
66195: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66196: LD_ADDR_VAR 0 29
66200: PUSH
66201: LD_INT 4
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 4
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 5
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 5
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 5
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 4
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 4
66326: PUSH
66327: LD_INT 4
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: LD_INT 4
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: LD_INT 2
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 4
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: LD_INT 4
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 4
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 5
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 5
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 4
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 3
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: LD_INT 5
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 3
66490: NEG
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 2
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 4
66558: NEG
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 4
66581: NEG
66582: PUSH
66583: LD_INT 4
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: NEG
66594: PUSH
66595: LD_INT 5
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: LD_INT 4
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: LD_INT 3
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 4
66629: NEG
66630: PUSH
66631: LD_INT 3
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 5
66641: NEG
66642: PUSH
66643: LD_INT 4
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 5
66653: NEG
66654: PUSH
66655: LD_INT 5
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 3
66665: NEG
66666: PUSH
66667: LD_INT 5
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 5
66677: NEG
66678: PUSH
66679: LD_INT 3
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66734: LD_ADDR_VAR 0 30
66738: PUSH
66739: LD_INT 4
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 4
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 5
66761: PUSH
66762: LD_INT 4
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 5
66771: PUSH
66772: LD_INT 5
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 4
66781: PUSH
66782: LD_INT 5
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 3
66791: PUSH
66792: LD_INT 4
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: PUSH
66802: LD_INT 3
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 5
66811: PUSH
66812: LD_INT 3
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: LD_INT 5
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: LD_INT 4
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: LD_INT 3
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: LD_INT 2
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 2
66903: PUSH
66904: LD_INT 4
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: LD_INT 2
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 4
66924: NEG
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 4
66935: NEG
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 3
66958: NEG
66959: PUSH
66960: LD_INT 1
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 4
66969: NEG
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 5
66980: NEG
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 5
66991: NEG
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 5
67003: NEG
67004: PUSH
67005: LD_INT 2
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: LD_INT 2
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 3
67026: NEG
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: NEG
67039: PUSH
67040: LD_INT 4
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: LD_INT 2
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: NEG
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 4
67086: NEG
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 4
67098: NEG
67099: PUSH
67100: LD_INT 4
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 4
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 4
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: LD_INT 4
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: LD_INT 5
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: LD_INT 4
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: LD_INT 3
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: LD_INT 4
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 5
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: NEG
67225: PUSH
67226: LD_INT 5
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67281: LD_ADDR_VAR 0 31
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 4
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: LD_INT 3
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: LD_INT 4
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 5
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 5
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 4
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: LD_INT 3
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: LD_INT 5
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 2
67370: NEG
67371: PUSH
67372: LD_INT 3
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 3
67392: NEG
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 4
67437: NEG
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 4
67448: NEG
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 4
67460: NEG
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 4
67483: NEG
67484: PUSH
67485: LD_INT 4
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 4
67495: NEG
67496: PUSH
67497: LD_INT 5
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: LD_INT 4
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: NEG
67520: PUSH
67521: LD_INT 3
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 4
67531: NEG
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 5
67543: NEG
67544: PUSH
67545: LD_INT 4
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 5
67555: NEG
67556: PUSH
67557: LD_INT 5
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: NEG
67568: PUSH
67569: LD_INT 5
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 5
67579: NEG
67580: PUSH
67581: LD_INT 3
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 0
67602: PUSH
67603: LD_INT 4
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: LD_INT 2
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: LD_INT 4
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: LD_INT 2
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: LD_INT 4
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 4
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 5
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 5
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 4
67734: PUSH
67735: LD_INT 1
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67831: LD_ADDR_VAR 0 32
67835: PUSH
67836: LD_INT 4
67838: NEG
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 4
67849: NEG
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 3
67861: NEG
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 3
67872: NEG
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 4
67883: NEG
67884: PUSH
67885: LD_INT 1
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 5
67894: NEG
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 5
67905: NEG
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 5
67917: NEG
67918: PUSH
67919: LD_INT 2
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 3
67940: NEG
67941: PUSH
67942: LD_INT 3
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: LD_INT 4
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: LD_INT 3
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 2
67976: NEG
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 3
67988: NEG
67989: PUSH
67990: LD_INT 2
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: NEG
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 4
68012: NEG
68013: PUSH
68014: LD_INT 4
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: LD_INT 4
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 4
68036: NEG
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 4
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 5
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: LD_INT 4
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: LD_INT 5
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 3
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: LD_INT 5
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 3
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 2
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: LD_INT 2
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: PUSH
68234: LD_INT 2
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 4
68243: PUSH
68244: LD_INT 4
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 4
68253: PUSH
68254: LD_INT 3
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 5
68263: PUSH
68264: LD_INT 4
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 5
68273: PUSH
68274: LD_INT 5
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 4
68283: PUSH
68284: LD_INT 5
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 3
68293: PUSH
68294: LD_INT 4
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 5
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 3
68323: PUSH
68324: LD_INT 5
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68378: LD_ADDR_VAR 0 33
68382: PUSH
68383: LD_INT 4
68385: NEG
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 4
68397: NEG
68398: PUSH
68399: LD_INT 5
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 3
68409: NEG
68410: PUSH
68411: LD_INT 4
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: LD_INT 3
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: LD_INT 3
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 5
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 5
68457: NEG
68458: PUSH
68459: LD_INT 5
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 3
68469: NEG
68470: PUSH
68471: LD_INT 5
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 5
68481: NEG
68482: PUSH
68483: LD_INT 3
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: LD_INT 2
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 2
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: NEG
68549: PUSH
68550: LD_INT 3
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: LD_INT 4
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: PUSH
68573: LD_INT 2
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: LD_INT 4
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 4
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 4
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 5
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 5
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 4
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 3
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: LD_INT 1
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: LD_INT 2
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 5
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 3
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 3
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: PUSH
68709: LD_INT 3
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 4
68718: PUSH
68719: LD_INT 4
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 3
68728: PUSH
68729: LD_INT 4
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 2
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: LD_INT 2
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 4
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: LD_INT 4
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: LD_INT 4
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: LD_INT 5
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: LD_INT 5
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 1
68828: NEG
68829: PUSH
68830: LD_INT 4
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 1
68839: NEG
68840: PUSH
68841: LD_INT 3
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 2
68850: PUSH
68851: LD_INT 5
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: LD_INT 3
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68916: LD_ADDR_VAR 0 34
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: LD_INT 4
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 5
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 1
68945: PUSH
68946: LD_INT 4
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: LD_INT 3
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: LD_INT 3
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 4
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 1
68990: NEG
68991: PUSH
68992: LD_INT 5
68994: NEG
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 2
69002: PUSH
69003: LD_INT 3
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 2
69013: NEG
69014: PUSH
69015: LD_INT 5
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 3
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 4
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 4
69056: PUSH
69057: LD_INT 1
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 3
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 2
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 4
69108: PUSH
69109: LD_INT 2
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 4
69118: PUSH
69119: LD_INT 4
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: LD_INT 3
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 5
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 5
69148: PUSH
69149: LD_INT 5
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 4
69158: PUSH
69159: LD_INT 5
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 3
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: LD_INT 3
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 5
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: LD_INT 5
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: LD_INT 3
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 1
69238: PUSH
69239: LD_INT 4
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: LD_INT 4
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: NEG
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: LD_INT 2
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: LD_INT 4
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 4
69301: NEG
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 4
69312: NEG
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 3
69335: NEG
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 4
69346: NEG
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 5
69357: NEG
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 5
69368: NEG
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 5
69380: NEG
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: ST_TO_ADDR
// end ; end ;
69448: GO 69451
69450: POP
// case btype of b_depot , b_warehouse :
69451: LD_VAR 0 1
69455: PUSH
69456: LD_INT 0
69458: DOUBLE
69459: EQUAL
69460: IFTRUE 69470
69462: LD_INT 1
69464: DOUBLE
69465: EQUAL
69466: IFTRUE 69470
69468: GO 69671
69470: POP
// case nation of nation_american :
69471: LD_VAR 0 5
69475: PUSH
69476: LD_INT 1
69478: DOUBLE
69479: EQUAL
69480: IFTRUE 69484
69482: GO 69540
69484: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69485: LD_ADDR_VAR 0 9
69489: PUSH
69490: LD_VAR 0 11
69494: PUSH
69495: LD_VAR 0 12
69499: PUSH
69500: LD_VAR 0 13
69504: PUSH
69505: LD_VAR 0 14
69509: PUSH
69510: LD_VAR 0 15
69514: PUSH
69515: LD_VAR 0 16
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: PUSH
69528: LD_VAR 0 4
69532: PUSH
69533: LD_INT 1
69535: PLUS
69536: ARRAY
69537: ST_TO_ADDR
69538: GO 69669
69540: LD_INT 2
69542: DOUBLE
69543: EQUAL
69544: IFTRUE 69548
69546: GO 69604
69548: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69549: LD_ADDR_VAR 0 9
69553: PUSH
69554: LD_VAR 0 17
69558: PUSH
69559: LD_VAR 0 18
69563: PUSH
69564: LD_VAR 0 19
69568: PUSH
69569: LD_VAR 0 20
69573: PUSH
69574: LD_VAR 0 21
69578: PUSH
69579: LD_VAR 0 22
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: PUSH
69592: LD_VAR 0 4
69596: PUSH
69597: LD_INT 1
69599: PLUS
69600: ARRAY
69601: ST_TO_ADDR
69602: GO 69669
69604: LD_INT 3
69606: DOUBLE
69607: EQUAL
69608: IFTRUE 69612
69610: GO 69668
69612: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69613: LD_ADDR_VAR 0 9
69617: PUSH
69618: LD_VAR 0 23
69622: PUSH
69623: LD_VAR 0 24
69627: PUSH
69628: LD_VAR 0 25
69632: PUSH
69633: LD_VAR 0 26
69637: PUSH
69638: LD_VAR 0 27
69642: PUSH
69643: LD_VAR 0 28
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: PUSH
69656: LD_VAR 0 4
69660: PUSH
69661: LD_INT 1
69663: PLUS
69664: ARRAY
69665: ST_TO_ADDR
69666: GO 69669
69668: POP
69669: GO 70224
69671: LD_INT 2
69673: DOUBLE
69674: EQUAL
69675: IFTRUE 69685
69677: LD_INT 3
69679: DOUBLE
69680: EQUAL
69681: IFTRUE 69685
69683: GO 69741
69685: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69686: LD_ADDR_VAR 0 9
69690: PUSH
69691: LD_VAR 0 29
69695: PUSH
69696: LD_VAR 0 30
69700: PUSH
69701: LD_VAR 0 31
69705: PUSH
69706: LD_VAR 0 32
69710: PUSH
69711: LD_VAR 0 33
69715: PUSH
69716: LD_VAR 0 34
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: PUSH
69729: LD_VAR 0 4
69733: PUSH
69734: LD_INT 1
69736: PLUS
69737: ARRAY
69738: ST_TO_ADDR
69739: GO 70224
69741: LD_INT 16
69743: DOUBLE
69744: EQUAL
69745: IFTRUE 69803
69747: LD_INT 17
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69803
69753: LD_INT 18
69755: DOUBLE
69756: EQUAL
69757: IFTRUE 69803
69759: LD_INT 19
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69803
69765: LD_INT 22
69767: DOUBLE
69768: EQUAL
69769: IFTRUE 69803
69771: LD_INT 20
69773: DOUBLE
69774: EQUAL
69775: IFTRUE 69803
69777: LD_INT 21
69779: DOUBLE
69780: EQUAL
69781: IFTRUE 69803
69783: LD_INT 23
69785: DOUBLE
69786: EQUAL
69787: IFTRUE 69803
69789: LD_INT 24
69791: DOUBLE
69792: EQUAL
69793: IFTRUE 69803
69795: LD_INT 25
69797: DOUBLE
69798: EQUAL
69799: IFTRUE 69803
69801: GO 69859
69803: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69804: LD_ADDR_VAR 0 9
69808: PUSH
69809: LD_VAR 0 35
69813: PUSH
69814: LD_VAR 0 36
69818: PUSH
69819: LD_VAR 0 37
69823: PUSH
69824: LD_VAR 0 38
69828: PUSH
69829: LD_VAR 0 39
69833: PUSH
69834: LD_VAR 0 40
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: PUSH
69847: LD_VAR 0 4
69851: PUSH
69852: LD_INT 1
69854: PLUS
69855: ARRAY
69856: ST_TO_ADDR
69857: GO 70224
69859: LD_INT 6
69861: DOUBLE
69862: EQUAL
69863: IFTRUE 69915
69865: LD_INT 7
69867: DOUBLE
69868: EQUAL
69869: IFTRUE 69915
69871: LD_INT 8
69873: DOUBLE
69874: EQUAL
69875: IFTRUE 69915
69877: LD_INT 13
69879: DOUBLE
69880: EQUAL
69881: IFTRUE 69915
69883: LD_INT 12
69885: DOUBLE
69886: EQUAL
69887: IFTRUE 69915
69889: LD_INT 15
69891: DOUBLE
69892: EQUAL
69893: IFTRUE 69915
69895: LD_INT 11
69897: DOUBLE
69898: EQUAL
69899: IFTRUE 69915
69901: LD_INT 14
69903: DOUBLE
69904: EQUAL
69905: IFTRUE 69915
69907: LD_INT 10
69909: DOUBLE
69910: EQUAL
69911: IFTRUE 69915
69913: GO 69971
69915: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69916: LD_ADDR_VAR 0 9
69920: PUSH
69921: LD_VAR 0 41
69925: PUSH
69926: LD_VAR 0 42
69930: PUSH
69931: LD_VAR 0 43
69935: PUSH
69936: LD_VAR 0 44
69940: PUSH
69941: LD_VAR 0 45
69945: PUSH
69946: LD_VAR 0 46
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: PUSH
69959: LD_VAR 0 4
69963: PUSH
69964: LD_INT 1
69966: PLUS
69967: ARRAY
69968: ST_TO_ADDR
69969: GO 70224
69971: LD_INT 36
69973: DOUBLE
69974: EQUAL
69975: IFTRUE 69979
69977: GO 70035
69979: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69980: LD_ADDR_VAR 0 9
69984: PUSH
69985: LD_VAR 0 47
69989: PUSH
69990: LD_VAR 0 48
69994: PUSH
69995: LD_VAR 0 49
69999: PUSH
70000: LD_VAR 0 50
70004: PUSH
70005: LD_VAR 0 51
70009: PUSH
70010: LD_VAR 0 52
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: PUSH
70023: LD_VAR 0 4
70027: PUSH
70028: LD_INT 1
70030: PLUS
70031: ARRAY
70032: ST_TO_ADDR
70033: GO 70224
70035: LD_INT 4
70037: DOUBLE
70038: EQUAL
70039: IFTRUE 70061
70041: LD_INT 5
70043: DOUBLE
70044: EQUAL
70045: IFTRUE 70061
70047: LD_INT 34
70049: DOUBLE
70050: EQUAL
70051: IFTRUE 70061
70053: LD_INT 37
70055: DOUBLE
70056: EQUAL
70057: IFTRUE 70061
70059: GO 70117
70061: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70062: LD_ADDR_VAR 0 9
70066: PUSH
70067: LD_VAR 0 53
70071: PUSH
70072: LD_VAR 0 54
70076: PUSH
70077: LD_VAR 0 55
70081: PUSH
70082: LD_VAR 0 56
70086: PUSH
70087: LD_VAR 0 57
70091: PUSH
70092: LD_VAR 0 58
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: PUSH
70105: LD_VAR 0 4
70109: PUSH
70110: LD_INT 1
70112: PLUS
70113: ARRAY
70114: ST_TO_ADDR
70115: GO 70224
70117: LD_INT 31
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70167
70123: LD_INT 32
70125: DOUBLE
70126: EQUAL
70127: IFTRUE 70167
70129: LD_INT 33
70131: DOUBLE
70132: EQUAL
70133: IFTRUE 70167
70135: LD_INT 27
70137: DOUBLE
70138: EQUAL
70139: IFTRUE 70167
70141: LD_INT 26
70143: DOUBLE
70144: EQUAL
70145: IFTRUE 70167
70147: LD_INT 28
70149: DOUBLE
70150: EQUAL
70151: IFTRUE 70167
70153: LD_INT 29
70155: DOUBLE
70156: EQUAL
70157: IFTRUE 70167
70159: LD_INT 30
70161: DOUBLE
70162: EQUAL
70163: IFTRUE 70167
70165: GO 70223
70167: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70168: LD_ADDR_VAR 0 9
70172: PUSH
70173: LD_VAR 0 59
70177: PUSH
70178: LD_VAR 0 60
70182: PUSH
70183: LD_VAR 0 61
70187: PUSH
70188: LD_VAR 0 62
70192: PUSH
70193: LD_VAR 0 63
70197: PUSH
70198: LD_VAR 0 64
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: PUSH
70211: LD_VAR 0 4
70215: PUSH
70216: LD_INT 1
70218: PLUS
70219: ARRAY
70220: ST_TO_ADDR
70221: GO 70224
70223: POP
// temp_list2 = [ ] ;
70224: LD_ADDR_VAR 0 10
70228: PUSH
70229: EMPTY
70230: ST_TO_ADDR
// for i in temp_list do
70231: LD_ADDR_VAR 0 8
70235: PUSH
70236: LD_VAR 0 9
70240: PUSH
70241: FOR_IN
70242: IFFALSE 70294
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70244: LD_ADDR_VAR 0 10
70248: PUSH
70249: LD_VAR 0 10
70253: PUSH
70254: LD_VAR 0 8
70258: PUSH
70259: LD_INT 1
70261: ARRAY
70262: PUSH
70263: LD_VAR 0 2
70267: PLUS
70268: PUSH
70269: LD_VAR 0 8
70273: PUSH
70274: LD_INT 2
70276: ARRAY
70277: PUSH
70278: LD_VAR 0 3
70282: PLUS
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: EMPTY
70289: LIST
70290: ADD
70291: ST_TO_ADDR
70292: GO 70241
70294: POP
70295: POP
// result = temp_list2 ;
70296: LD_ADDR_VAR 0 7
70300: PUSH
70301: LD_VAR 0 10
70305: ST_TO_ADDR
// end ;
70306: LD_VAR 0 7
70310: RET
// export function EnemyInRange ( unit , dist ) ; begin
70311: LD_INT 0
70313: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70314: LD_ADDR_VAR 0 3
70318: PUSH
70319: LD_VAR 0 1
70323: PPUSH
70324: CALL_OW 255
70328: PPUSH
70329: LD_VAR 0 1
70333: PPUSH
70334: CALL_OW 250
70338: PPUSH
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 251
70348: PPUSH
70349: LD_VAR 0 2
70353: PPUSH
70354: CALL 43713 0 4
70358: PUSH
70359: LD_INT 4
70361: ARRAY
70362: ST_TO_ADDR
// end ;
70363: LD_VAR 0 3
70367: RET
// export function PlayerSeeMe ( unit ) ; begin
70368: LD_INT 0
70370: PPUSH
// result := See ( your_side , unit ) ;
70371: LD_ADDR_VAR 0 2
70375: PUSH
70376: LD_OWVAR 2
70380: PPUSH
70381: LD_VAR 0 1
70385: PPUSH
70386: CALL_OW 292
70390: ST_TO_ADDR
// end ;
70391: LD_VAR 0 2
70395: RET
// export function ReverseDir ( unit ) ; begin
70396: LD_INT 0
70398: PPUSH
// if not unit then
70399: LD_VAR 0 1
70403: NOT
70404: IFFALSE 70408
// exit ;
70406: GO 70431
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70408: LD_ADDR_VAR 0 2
70412: PUSH
70413: LD_VAR 0 1
70417: PPUSH
70418: CALL_OW 254
70422: PUSH
70423: LD_INT 3
70425: PLUS
70426: PUSH
70427: LD_INT 6
70429: MOD
70430: ST_TO_ADDR
// end ;
70431: LD_VAR 0 2
70435: RET
// export function ReverseArray ( array ) ; var i ; begin
70436: LD_INT 0
70438: PPUSH
70439: PPUSH
// if not array then
70440: LD_VAR 0 1
70444: NOT
70445: IFFALSE 70449
// exit ;
70447: GO 70504
// result := [ ] ;
70449: LD_ADDR_VAR 0 2
70453: PUSH
70454: EMPTY
70455: ST_TO_ADDR
// for i := array downto 1 do
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: DOUBLE
70462: LD_VAR 0 1
70466: INC
70467: ST_TO_ADDR
70468: LD_INT 1
70470: PUSH
70471: FOR_DOWNTO
70472: IFFALSE 70502
// result := Join ( result , array [ i ] ) ;
70474: LD_ADDR_VAR 0 2
70478: PUSH
70479: LD_VAR 0 2
70483: PPUSH
70484: LD_VAR 0 1
70488: PUSH
70489: LD_VAR 0 3
70493: ARRAY
70494: PPUSH
70495: CALL 75129 0 2
70499: ST_TO_ADDR
70500: GO 70471
70502: POP
70503: POP
// end ;
70504: LD_VAR 0 2
70508: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70509: LD_INT 0
70511: PPUSH
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
70516: PPUSH
// if not unit or not hexes then
70517: LD_VAR 0 1
70521: NOT
70522: PUSH
70523: LD_VAR 0 2
70527: NOT
70528: OR
70529: IFFALSE 70533
// exit ;
70531: GO 70656
// dist := 9999 ;
70533: LD_ADDR_VAR 0 5
70537: PUSH
70538: LD_INT 9999
70540: ST_TO_ADDR
// for i = 1 to hexes do
70541: LD_ADDR_VAR 0 4
70545: PUSH
70546: DOUBLE
70547: LD_INT 1
70549: DEC
70550: ST_TO_ADDR
70551: LD_VAR 0 2
70555: PUSH
70556: FOR_TO
70557: IFFALSE 70644
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70559: LD_ADDR_VAR 0 6
70563: PUSH
70564: LD_VAR 0 1
70568: PPUSH
70569: LD_VAR 0 2
70573: PUSH
70574: LD_VAR 0 4
70578: ARRAY
70579: PUSH
70580: LD_INT 1
70582: ARRAY
70583: PPUSH
70584: LD_VAR 0 2
70588: PUSH
70589: LD_VAR 0 4
70593: ARRAY
70594: PUSH
70595: LD_INT 2
70597: ARRAY
70598: PPUSH
70599: CALL_OW 297
70603: ST_TO_ADDR
// if tdist < dist then
70604: LD_VAR 0 6
70608: PUSH
70609: LD_VAR 0 5
70613: LESS
70614: IFFALSE 70642
// begin hex := hexes [ i ] ;
70616: LD_ADDR_VAR 0 8
70620: PUSH
70621: LD_VAR 0 2
70625: PUSH
70626: LD_VAR 0 4
70630: ARRAY
70631: ST_TO_ADDR
// dist := tdist ;
70632: LD_ADDR_VAR 0 5
70636: PUSH
70637: LD_VAR 0 6
70641: ST_TO_ADDR
// end ; end ;
70642: GO 70556
70644: POP
70645: POP
// result := hex ;
70646: LD_ADDR_VAR 0 3
70650: PUSH
70651: LD_VAR 0 8
70655: ST_TO_ADDR
// end ;
70656: LD_VAR 0 3
70660: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70661: LD_INT 0
70663: PPUSH
70664: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70665: LD_VAR 0 1
70669: NOT
70670: PUSH
70671: LD_VAR 0 1
70675: PUSH
70676: LD_INT 21
70678: PUSH
70679: LD_INT 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 23
70688: PUSH
70689: LD_INT 2
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PPUSH
70700: CALL_OW 69
70704: IN
70705: NOT
70706: OR
70707: IFFALSE 70711
// exit ;
70709: GO 70758
// for i = 1 to 3 do
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: DOUBLE
70717: LD_INT 1
70719: DEC
70720: ST_TO_ADDR
70721: LD_INT 3
70723: PUSH
70724: FOR_TO
70725: IFFALSE 70756
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70727: LD_VAR 0 1
70731: PPUSH
70732: CALL_OW 250
70736: PPUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: CALL_OW 251
70746: PPUSH
70747: LD_INT 1
70749: PPUSH
70750: CALL_OW 453
70754: GO 70724
70756: POP
70757: POP
// end ;
70758: LD_VAR 0 2
70762: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70763: LD_INT 0
70765: PPUSH
70766: PPUSH
70767: PPUSH
70768: PPUSH
70769: PPUSH
70770: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70771: LD_VAR 0 1
70775: NOT
70776: PUSH
70777: LD_VAR 0 2
70781: NOT
70782: OR
70783: PUSH
70784: LD_VAR 0 1
70788: PPUSH
70789: CALL_OW 314
70793: OR
70794: IFFALSE 70798
// exit ;
70796: GO 71239
// x := GetX ( enemy_unit ) ;
70798: LD_ADDR_VAR 0 7
70802: PUSH
70803: LD_VAR 0 2
70807: PPUSH
70808: CALL_OW 250
70812: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70813: LD_ADDR_VAR 0 8
70817: PUSH
70818: LD_VAR 0 2
70822: PPUSH
70823: CALL_OW 251
70827: ST_TO_ADDR
// if not x or not y then
70828: LD_VAR 0 7
70832: NOT
70833: PUSH
70834: LD_VAR 0 8
70838: NOT
70839: OR
70840: IFFALSE 70844
// exit ;
70842: GO 71239
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70844: LD_ADDR_VAR 0 6
70848: PUSH
70849: LD_VAR 0 7
70853: PPUSH
70854: LD_INT 0
70856: PPUSH
70857: LD_INT 4
70859: PPUSH
70860: CALL_OW 272
70864: PUSH
70865: LD_VAR 0 8
70869: PPUSH
70870: LD_INT 0
70872: PPUSH
70873: LD_INT 4
70875: PPUSH
70876: CALL_OW 273
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_VAR 0 7
70889: PPUSH
70890: LD_INT 1
70892: PPUSH
70893: LD_INT 4
70895: PPUSH
70896: CALL_OW 272
70900: PUSH
70901: LD_VAR 0 8
70905: PPUSH
70906: LD_INT 1
70908: PPUSH
70909: LD_INT 4
70911: PPUSH
70912: CALL_OW 273
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 7
70925: PPUSH
70926: LD_INT 2
70928: PPUSH
70929: LD_INT 4
70931: PPUSH
70932: CALL_OW 272
70936: PUSH
70937: LD_VAR 0 8
70941: PPUSH
70942: LD_INT 2
70944: PPUSH
70945: LD_INT 4
70947: PPUSH
70948: CALL_OW 273
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_VAR 0 7
70961: PPUSH
70962: LD_INT 3
70964: PPUSH
70965: LD_INT 4
70967: PPUSH
70968: CALL_OW 272
70972: PUSH
70973: LD_VAR 0 8
70977: PPUSH
70978: LD_INT 3
70980: PPUSH
70981: LD_INT 4
70983: PPUSH
70984: CALL_OW 273
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_VAR 0 7
70997: PPUSH
70998: LD_INT 4
71000: PPUSH
71001: LD_INT 4
71003: PPUSH
71004: CALL_OW 272
71008: PUSH
71009: LD_VAR 0 8
71013: PPUSH
71014: LD_INT 4
71016: PPUSH
71017: LD_INT 4
71019: PPUSH
71020: CALL_OW 273
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_VAR 0 7
71033: PPUSH
71034: LD_INT 5
71036: PPUSH
71037: LD_INT 4
71039: PPUSH
71040: CALL_OW 272
71044: PUSH
71045: LD_VAR 0 8
71049: PPUSH
71050: LD_INT 5
71052: PPUSH
71053: LD_INT 4
71055: PPUSH
71056: CALL_OW 273
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: ST_TO_ADDR
// for i = tmp downto 1 do
71073: LD_ADDR_VAR 0 4
71077: PUSH
71078: DOUBLE
71079: LD_VAR 0 6
71083: INC
71084: ST_TO_ADDR
71085: LD_INT 1
71087: PUSH
71088: FOR_DOWNTO
71089: IFFALSE 71190
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71091: LD_VAR 0 6
71095: PUSH
71096: LD_VAR 0 4
71100: ARRAY
71101: PUSH
71102: LD_INT 1
71104: ARRAY
71105: PPUSH
71106: LD_VAR 0 6
71110: PUSH
71111: LD_VAR 0 4
71115: ARRAY
71116: PUSH
71117: LD_INT 2
71119: ARRAY
71120: PPUSH
71121: CALL_OW 488
71125: NOT
71126: PUSH
71127: LD_VAR 0 6
71131: PUSH
71132: LD_VAR 0 4
71136: ARRAY
71137: PUSH
71138: LD_INT 1
71140: ARRAY
71141: PPUSH
71142: LD_VAR 0 6
71146: PUSH
71147: LD_VAR 0 4
71151: ARRAY
71152: PUSH
71153: LD_INT 2
71155: ARRAY
71156: PPUSH
71157: CALL_OW 428
71161: PUSH
71162: LD_INT 0
71164: NONEQUAL
71165: OR
71166: IFFALSE 71188
// tmp := Delete ( tmp , i ) ;
71168: LD_ADDR_VAR 0 6
71172: PUSH
71173: LD_VAR 0 6
71177: PPUSH
71178: LD_VAR 0 4
71182: PPUSH
71183: CALL_OW 3
71187: ST_TO_ADDR
71188: GO 71088
71190: POP
71191: POP
// j := GetClosestHex ( unit , tmp ) ;
71192: LD_ADDR_VAR 0 5
71196: PUSH
71197: LD_VAR 0 1
71201: PPUSH
71202: LD_VAR 0 6
71206: PPUSH
71207: CALL 70509 0 2
71211: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71212: LD_VAR 0 1
71216: PPUSH
71217: LD_VAR 0 5
71221: PUSH
71222: LD_INT 1
71224: ARRAY
71225: PPUSH
71226: LD_VAR 0 5
71230: PUSH
71231: LD_INT 2
71233: ARRAY
71234: PPUSH
71235: CALL_OW 111
// end ;
71239: LD_VAR 0 3
71243: RET
// export function PrepareApemanSoldier ( ) ; begin
71244: LD_INT 0
71246: PPUSH
// uc_nation := 0 ;
71247: LD_ADDR_OWVAR 21
71251: PUSH
71252: LD_INT 0
71254: ST_TO_ADDR
// hc_sex := sex_male ;
71255: LD_ADDR_OWVAR 27
71259: PUSH
71260: LD_INT 1
71262: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71263: LD_ADDR_OWVAR 28
71267: PUSH
71268: LD_INT 15
71270: ST_TO_ADDR
// hc_gallery :=  ;
71271: LD_ADDR_OWVAR 33
71275: PUSH
71276: LD_STRING 
71278: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71279: LD_ADDR_OWVAR 31
71283: PUSH
71284: LD_INT 0
71286: PPUSH
71287: LD_INT 3
71289: PPUSH
71290: CALL_OW 12
71294: PUSH
71295: LD_INT 0
71297: PPUSH
71298: LD_INT 3
71300: PPUSH
71301: CALL_OW 12
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: ST_TO_ADDR
// end ;
71318: LD_VAR 0 1
71322: RET
// export function PrepareApemanEngineer ( ) ; begin
71323: LD_INT 0
71325: PPUSH
// uc_nation := 0 ;
71326: LD_ADDR_OWVAR 21
71330: PUSH
71331: LD_INT 0
71333: ST_TO_ADDR
// hc_sex := sex_male ;
71334: LD_ADDR_OWVAR 27
71338: PUSH
71339: LD_INT 1
71341: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71342: LD_ADDR_OWVAR 28
71346: PUSH
71347: LD_INT 16
71349: ST_TO_ADDR
// hc_gallery :=  ;
71350: LD_ADDR_OWVAR 33
71354: PUSH
71355: LD_STRING 
71357: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71358: LD_ADDR_OWVAR 31
71362: PUSH
71363: LD_INT 0
71365: PPUSH
71366: LD_INT 3
71368: PPUSH
71369: CALL_OW 12
71373: PUSH
71374: LD_INT 0
71376: PPUSH
71377: LD_INT 3
71379: PPUSH
71380: CALL_OW 12
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_INT 0
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: ST_TO_ADDR
// end ;
71397: LD_VAR 0 1
71401: RET
// export function PrepareApeman ( agressivity ) ; begin
71402: LD_INT 0
71404: PPUSH
// uc_side := 0 ;
71405: LD_ADDR_OWVAR 20
71409: PUSH
71410: LD_INT 0
71412: ST_TO_ADDR
// uc_nation := 0 ;
71413: LD_ADDR_OWVAR 21
71417: PUSH
71418: LD_INT 0
71420: ST_TO_ADDR
// hc_sex := sex_male ;
71421: LD_ADDR_OWVAR 27
71425: PUSH
71426: LD_INT 1
71428: ST_TO_ADDR
// hc_class := class_apeman ;
71429: LD_ADDR_OWVAR 28
71433: PUSH
71434: LD_INT 12
71436: ST_TO_ADDR
// hc_gallery :=  ;
71437: LD_ADDR_OWVAR 33
71441: PUSH
71442: LD_STRING 
71444: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71445: LD_ADDR_OWVAR 35
71449: PUSH
71450: LD_VAR 0 1
71454: NEG
71455: PPUSH
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 12
71465: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71466: LD_ADDR_OWVAR 31
71470: PUSH
71471: LD_INT 0
71473: PPUSH
71474: LD_INT 3
71476: PPUSH
71477: CALL_OW 12
71481: PUSH
71482: LD_INT 0
71484: PPUSH
71485: LD_INT 3
71487: PPUSH
71488: CALL_OW 12
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: ST_TO_ADDR
// end ;
71505: LD_VAR 0 2
71509: RET
// export function PrepareTiger ( agressivity ) ; begin
71510: LD_INT 0
71512: PPUSH
// uc_side := 0 ;
71513: LD_ADDR_OWVAR 20
71517: PUSH
71518: LD_INT 0
71520: ST_TO_ADDR
// uc_nation := 0 ;
71521: LD_ADDR_OWVAR 21
71525: PUSH
71526: LD_INT 0
71528: ST_TO_ADDR
// hc_class := class_tiger ;
71529: LD_ADDR_OWVAR 28
71533: PUSH
71534: LD_INT 14
71536: ST_TO_ADDR
// hc_gallery :=  ;
71537: LD_ADDR_OWVAR 33
71541: PUSH
71542: LD_STRING 
71544: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71545: LD_ADDR_OWVAR 35
71549: PUSH
71550: LD_VAR 0 1
71554: NEG
71555: PPUSH
71556: LD_VAR 0 1
71560: PPUSH
71561: CALL_OW 12
71565: ST_TO_ADDR
// end ;
71566: LD_VAR 0 2
71570: RET
// export function PrepareEnchidna ( ) ; begin
71571: LD_INT 0
71573: PPUSH
// uc_side := 0 ;
71574: LD_ADDR_OWVAR 20
71578: PUSH
71579: LD_INT 0
71581: ST_TO_ADDR
// uc_nation := 0 ;
71582: LD_ADDR_OWVAR 21
71586: PUSH
71587: LD_INT 0
71589: ST_TO_ADDR
// hc_class := class_baggie ;
71590: LD_ADDR_OWVAR 28
71594: PUSH
71595: LD_INT 13
71597: ST_TO_ADDR
// hc_gallery :=  ;
71598: LD_ADDR_OWVAR 33
71602: PUSH
71603: LD_STRING 
71605: ST_TO_ADDR
// end ;
71606: LD_VAR 0 1
71610: RET
// export function PrepareFrog ( ) ; begin
71611: LD_INT 0
71613: PPUSH
// uc_side := 0 ;
71614: LD_ADDR_OWVAR 20
71618: PUSH
71619: LD_INT 0
71621: ST_TO_ADDR
// uc_nation := 0 ;
71622: LD_ADDR_OWVAR 21
71626: PUSH
71627: LD_INT 0
71629: ST_TO_ADDR
// hc_class := class_frog ;
71630: LD_ADDR_OWVAR 28
71634: PUSH
71635: LD_INT 19
71637: ST_TO_ADDR
// hc_gallery :=  ;
71638: LD_ADDR_OWVAR 33
71642: PUSH
71643: LD_STRING 
71645: ST_TO_ADDR
// end ;
71646: LD_VAR 0 1
71650: RET
// export function PrepareFish ( ) ; begin
71651: LD_INT 0
71653: PPUSH
// uc_side := 0 ;
71654: LD_ADDR_OWVAR 20
71658: PUSH
71659: LD_INT 0
71661: ST_TO_ADDR
// uc_nation := 0 ;
71662: LD_ADDR_OWVAR 21
71666: PUSH
71667: LD_INT 0
71669: ST_TO_ADDR
// hc_class := class_fish ;
71670: LD_ADDR_OWVAR 28
71674: PUSH
71675: LD_INT 20
71677: ST_TO_ADDR
// hc_gallery :=  ;
71678: LD_ADDR_OWVAR 33
71682: PUSH
71683: LD_STRING 
71685: ST_TO_ADDR
// end ;
71686: LD_VAR 0 1
71690: RET
// export function PrepareBird ( ) ; begin
71691: LD_INT 0
71693: PPUSH
// uc_side := 0 ;
71694: LD_ADDR_OWVAR 20
71698: PUSH
71699: LD_INT 0
71701: ST_TO_ADDR
// uc_nation := 0 ;
71702: LD_ADDR_OWVAR 21
71706: PUSH
71707: LD_INT 0
71709: ST_TO_ADDR
// hc_class := class_phororhacos ;
71710: LD_ADDR_OWVAR 28
71714: PUSH
71715: LD_INT 18
71717: ST_TO_ADDR
// hc_gallery :=  ;
71718: LD_ADDR_OWVAR 33
71722: PUSH
71723: LD_STRING 
71725: ST_TO_ADDR
// end ;
71726: LD_VAR 0 1
71730: RET
// export function PrepareHorse ( ) ; begin
71731: LD_INT 0
71733: PPUSH
// uc_side := 0 ;
71734: LD_ADDR_OWVAR 20
71738: PUSH
71739: LD_INT 0
71741: ST_TO_ADDR
// uc_nation := 0 ;
71742: LD_ADDR_OWVAR 21
71746: PUSH
71747: LD_INT 0
71749: ST_TO_ADDR
// hc_class := class_horse ;
71750: LD_ADDR_OWVAR 28
71754: PUSH
71755: LD_INT 21
71757: ST_TO_ADDR
// hc_gallery :=  ;
71758: LD_ADDR_OWVAR 33
71762: PUSH
71763: LD_STRING 
71765: ST_TO_ADDR
// end ;
71766: LD_VAR 0 1
71770: RET
// export function PrepareMastodont ( ) ; begin
71771: LD_INT 0
71773: PPUSH
// uc_side := 0 ;
71774: LD_ADDR_OWVAR 20
71778: PUSH
71779: LD_INT 0
71781: ST_TO_ADDR
// uc_nation := 0 ;
71782: LD_ADDR_OWVAR 21
71786: PUSH
71787: LD_INT 0
71789: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71790: LD_ADDR_OWVAR 37
71794: PUSH
71795: LD_INT 31
71797: ST_TO_ADDR
// vc_control := control_rider ;
71798: LD_ADDR_OWVAR 38
71802: PUSH
71803: LD_INT 4
71805: ST_TO_ADDR
// end ;
71806: LD_VAR 0 1
71810: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71811: LD_INT 0
71813: PPUSH
71814: PPUSH
71815: PPUSH
// uc_side = 0 ;
71816: LD_ADDR_OWVAR 20
71820: PUSH
71821: LD_INT 0
71823: ST_TO_ADDR
// uc_nation = 0 ;
71824: LD_ADDR_OWVAR 21
71828: PUSH
71829: LD_INT 0
71831: ST_TO_ADDR
// InitHc_All ( ) ;
71832: CALL_OW 584
// InitVc ;
71836: CALL_OW 20
// if mastodonts then
71840: LD_VAR 0 6
71844: IFFALSE 71911
// for i = 1 to mastodonts do
71846: LD_ADDR_VAR 0 11
71850: PUSH
71851: DOUBLE
71852: LD_INT 1
71854: DEC
71855: ST_TO_ADDR
71856: LD_VAR 0 6
71860: PUSH
71861: FOR_TO
71862: IFFALSE 71909
// begin vc_chassis := 31 ;
71864: LD_ADDR_OWVAR 37
71868: PUSH
71869: LD_INT 31
71871: ST_TO_ADDR
// vc_control := control_rider ;
71872: LD_ADDR_OWVAR 38
71876: PUSH
71877: LD_INT 4
71879: ST_TO_ADDR
// animal := CreateVehicle ;
71880: LD_ADDR_VAR 0 12
71884: PUSH
71885: CALL_OW 45
71889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71890: LD_VAR 0 12
71894: PPUSH
71895: LD_VAR 0 8
71899: PPUSH
71900: LD_INT 0
71902: PPUSH
71903: CALL 74046 0 3
// end ;
71907: GO 71861
71909: POP
71910: POP
// if horses then
71911: LD_VAR 0 5
71915: IFFALSE 71982
// for i = 1 to horses do
71917: LD_ADDR_VAR 0 11
71921: PUSH
71922: DOUBLE
71923: LD_INT 1
71925: DEC
71926: ST_TO_ADDR
71927: LD_VAR 0 5
71931: PUSH
71932: FOR_TO
71933: IFFALSE 71980
// begin hc_class := 21 ;
71935: LD_ADDR_OWVAR 28
71939: PUSH
71940: LD_INT 21
71942: ST_TO_ADDR
// hc_gallery :=  ;
71943: LD_ADDR_OWVAR 33
71947: PUSH
71948: LD_STRING 
71950: ST_TO_ADDR
// animal := CreateHuman ;
71951: LD_ADDR_VAR 0 12
71955: PUSH
71956: CALL_OW 44
71960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71961: LD_VAR 0 12
71965: PPUSH
71966: LD_VAR 0 8
71970: PPUSH
71971: LD_INT 0
71973: PPUSH
71974: CALL 74046 0 3
// end ;
71978: GO 71932
71980: POP
71981: POP
// if birds then
71982: LD_VAR 0 1
71986: IFFALSE 72053
// for i = 1 to birds do
71988: LD_ADDR_VAR 0 11
71992: PUSH
71993: DOUBLE
71994: LD_INT 1
71996: DEC
71997: ST_TO_ADDR
71998: LD_VAR 0 1
72002: PUSH
72003: FOR_TO
72004: IFFALSE 72051
// begin hc_class = 18 ;
72006: LD_ADDR_OWVAR 28
72010: PUSH
72011: LD_INT 18
72013: ST_TO_ADDR
// hc_gallery =  ;
72014: LD_ADDR_OWVAR 33
72018: PUSH
72019: LD_STRING 
72021: ST_TO_ADDR
// animal := CreateHuman ;
72022: LD_ADDR_VAR 0 12
72026: PUSH
72027: CALL_OW 44
72031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72032: LD_VAR 0 12
72036: PPUSH
72037: LD_VAR 0 8
72041: PPUSH
72042: LD_INT 0
72044: PPUSH
72045: CALL 74046 0 3
// end ;
72049: GO 72003
72051: POP
72052: POP
// if tigers then
72053: LD_VAR 0 2
72057: IFFALSE 72141
// for i = 1 to tigers do
72059: LD_ADDR_VAR 0 11
72063: PUSH
72064: DOUBLE
72065: LD_INT 1
72067: DEC
72068: ST_TO_ADDR
72069: LD_VAR 0 2
72073: PUSH
72074: FOR_TO
72075: IFFALSE 72139
// begin hc_class = class_tiger ;
72077: LD_ADDR_OWVAR 28
72081: PUSH
72082: LD_INT 14
72084: ST_TO_ADDR
// hc_gallery =  ;
72085: LD_ADDR_OWVAR 33
72089: PUSH
72090: LD_STRING 
72092: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72093: LD_ADDR_OWVAR 35
72097: PUSH
72098: LD_INT 7
72100: NEG
72101: PPUSH
72102: LD_INT 7
72104: PPUSH
72105: CALL_OW 12
72109: ST_TO_ADDR
// animal := CreateHuman ;
72110: LD_ADDR_VAR 0 12
72114: PUSH
72115: CALL_OW 44
72119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72120: LD_VAR 0 12
72124: PPUSH
72125: LD_VAR 0 8
72129: PPUSH
72130: LD_INT 0
72132: PPUSH
72133: CALL 74046 0 3
// end ;
72137: GO 72074
72139: POP
72140: POP
// if apemans then
72141: LD_VAR 0 3
72145: IFFALSE 72268
// for i = 1 to apemans do
72147: LD_ADDR_VAR 0 11
72151: PUSH
72152: DOUBLE
72153: LD_INT 1
72155: DEC
72156: ST_TO_ADDR
72157: LD_VAR 0 3
72161: PUSH
72162: FOR_TO
72163: IFFALSE 72266
// begin hc_class = class_apeman ;
72165: LD_ADDR_OWVAR 28
72169: PUSH
72170: LD_INT 12
72172: ST_TO_ADDR
// hc_gallery =  ;
72173: LD_ADDR_OWVAR 33
72177: PUSH
72178: LD_STRING 
72180: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72181: LD_ADDR_OWVAR 35
72185: PUSH
72186: LD_INT 2
72188: NEG
72189: PPUSH
72190: LD_INT 2
72192: PPUSH
72193: CALL_OW 12
72197: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72198: LD_ADDR_OWVAR 31
72202: PUSH
72203: LD_INT 1
72205: PPUSH
72206: LD_INT 3
72208: PPUSH
72209: CALL_OW 12
72213: PUSH
72214: LD_INT 1
72216: PPUSH
72217: LD_INT 3
72219: PPUSH
72220: CALL_OW 12
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: ST_TO_ADDR
// animal := CreateHuman ;
72237: LD_ADDR_VAR 0 12
72241: PUSH
72242: CALL_OW 44
72246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72247: LD_VAR 0 12
72251: PPUSH
72252: LD_VAR 0 8
72256: PPUSH
72257: LD_INT 0
72259: PPUSH
72260: CALL 74046 0 3
// end ;
72264: GO 72162
72266: POP
72267: POP
// if enchidnas then
72268: LD_VAR 0 4
72272: IFFALSE 72339
// for i = 1 to enchidnas do
72274: LD_ADDR_VAR 0 11
72278: PUSH
72279: DOUBLE
72280: LD_INT 1
72282: DEC
72283: ST_TO_ADDR
72284: LD_VAR 0 4
72288: PUSH
72289: FOR_TO
72290: IFFALSE 72337
// begin hc_class = 13 ;
72292: LD_ADDR_OWVAR 28
72296: PUSH
72297: LD_INT 13
72299: ST_TO_ADDR
// hc_gallery =  ;
72300: LD_ADDR_OWVAR 33
72304: PUSH
72305: LD_STRING 
72307: ST_TO_ADDR
// animal := CreateHuman ;
72308: LD_ADDR_VAR 0 12
72312: PUSH
72313: CALL_OW 44
72317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72318: LD_VAR 0 12
72322: PPUSH
72323: LD_VAR 0 8
72327: PPUSH
72328: LD_INT 0
72330: PPUSH
72331: CALL 74046 0 3
// end ;
72335: GO 72289
72337: POP
72338: POP
// if fishes then
72339: LD_VAR 0 7
72343: IFFALSE 72410
// for i = 1 to fishes do
72345: LD_ADDR_VAR 0 11
72349: PUSH
72350: DOUBLE
72351: LD_INT 1
72353: DEC
72354: ST_TO_ADDR
72355: LD_VAR 0 7
72359: PUSH
72360: FOR_TO
72361: IFFALSE 72408
// begin hc_class = 20 ;
72363: LD_ADDR_OWVAR 28
72367: PUSH
72368: LD_INT 20
72370: ST_TO_ADDR
// hc_gallery =  ;
72371: LD_ADDR_OWVAR 33
72375: PUSH
72376: LD_STRING 
72378: ST_TO_ADDR
// animal := CreateHuman ;
72379: LD_ADDR_VAR 0 12
72383: PUSH
72384: CALL_OW 44
72388: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72389: LD_VAR 0 12
72393: PPUSH
72394: LD_VAR 0 9
72398: PPUSH
72399: LD_INT 0
72401: PPUSH
72402: CALL 74046 0 3
// end ;
72406: GO 72360
72408: POP
72409: POP
// end ;
72410: LD_VAR 0 10
72414: RET
// export function WantHeal ( sci , unit ) ; begin
72415: LD_INT 0
72417: PPUSH
// if GetTaskList ( sci ) > 0 then
72418: LD_VAR 0 1
72422: PPUSH
72423: CALL_OW 437
72427: PUSH
72428: LD_INT 0
72430: GREATER
72431: IFFALSE 72501
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72433: LD_VAR 0 1
72437: PPUSH
72438: CALL_OW 437
72442: PUSH
72443: LD_INT 1
72445: ARRAY
72446: PUSH
72447: LD_INT 1
72449: ARRAY
72450: PUSH
72451: LD_STRING l
72453: EQUAL
72454: PUSH
72455: LD_VAR 0 1
72459: PPUSH
72460: CALL_OW 437
72464: PUSH
72465: LD_INT 1
72467: ARRAY
72468: PUSH
72469: LD_INT 4
72471: ARRAY
72472: PUSH
72473: LD_VAR 0 2
72477: EQUAL
72478: AND
72479: IFFALSE 72491
// result := true else
72481: LD_ADDR_VAR 0 3
72485: PUSH
72486: LD_INT 1
72488: ST_TO_ADDR
72489: GO 72499
// result := false ;
72491: LD_ADDR_VAR 0 3
72495: PUSH
72496: LD_INT 0
72498: ST_TO_ADDR
// end else
72499: GO 72509
// result := false ;
72501: LD_ADDR_VAR 0 3
72505: PUSH
72506: LD_INT 0
72508: ST_TO_ADDR
// end ;
72509: LD_VAR 0 3
72513: RET
// export function HealTarget ( sci ) ; begin
72514: LD_INT 0
72516: PPUSH
// if not sci then
72517: LD_VAR 0 1
72521: NOT
72522: IFFALSE 72526
// exit ;
72524: GO 72591
// result := 0 ;
72526: LD_ADDR_VAR 0 2
72530: PUSH
72531: LD_INT 0
72533: ST_TO_ADDR
// if GetTaskList ( sci ) then
72534: LD_VAR 0 1
72538: PPUSH
72539: CALL_OW 437
72543: IFFALSE 72591
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72545: LD_VAR 0 1
72549: PPUSH
72550: CALL_OW 437
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: PUSH
72559: LD_INT 1
72561: ARRAY
72562: PUSH
72563: LD_STRING l
72565: EQUAL
72566: IFFALSE 72591
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72568: LD_ADDR_VAR 0 2
72572: PUSH
72573: LD_VAR 0 1
72577: PPUSH
72578: CALL_OW 437
72582: PUSH
72583: LD_INT 1
72585: ARRAY
72586: PUSH
72587: LD_INT 4
72589: ARRAY
72590: ST_TO_ADDR
// end ;
72591: LD_VAR 0 2
72595: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72596: LD_INT 0
72598: PPUSH
72599: PPUSH
72600: PPUSH
72601: PPUSH
// if not base_units then
72602: LD_VAR 0 1
72606: NOT
72607: IFFALSE 72611
// exit ;
72609: GO 72698
// result := false ;
72611: LD_ADDR_VAR 0 2
72615: PUSH
72616: LD_INT 0
72618: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72619: LD_ADDR_VAR 0 5
72623: PUSH
72624: LD_VAR 0 1
72628: PPUSH
72629: LD_INT 21
72631: PUSH
72632: LD_INT 3
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PPUSH
72639: CALL_OW 72
72643: ST_TO_ADDR
// if not tmp then
72644: LD_VAR 0 5
72648: NOT
72649: IFFALSE 72653
// exit ;
72651: GO 72698
// for i in tmp do
72653: LD_ADDR_VAR 0 3
72657: PUSH
72658: LD_VAR 0 5
72662: PUSH
72663: FOR_IN
72664: IFFALSE 72696
// begin result := EnemyInRange ( i , 22 ) ;
72666: LD_ADDR_VAR 0 2
72670: PUSH
72671: LD_VAR 0 3
72675: PPUSH
72676: LD_INT 22
72678: PPUSH
72679: CALL 70311 0 2
72683: ST_TO_ADDR
// if result then
72684: LD_VAR 0 2
72688: IFFALSE 72694
// exit ;
72690: POP
72691: POP
72692: GO 72698
// end ;
72694: GO 72663
72696: POP
72697: POP
// end ;
72698: LD_VAR 0 2
72702: RET
// export function FilterByTag ( units , tag ) ; begin
72703: LD_INT 0
72705: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72706: LD_ADDR_VAR 0 3
72710: PUSH
72711: LD_VAR 0 1
72715: PPUSH
72716: LD_INT 120
72718: PUSH
72719: LD_VAR 0 2
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PPUSH
72728: CALL_OW 72
72732: ST_TO_ADDR
// end ;
72733: LD_VAR 0 3
72737: RET
// export function IsDriver ( un ) ; begin
72738: LD_INT 0
72740: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72741: LD_ADDR_VAR 0 2
72745: PUSH
72746: LD_VAR 0 1
72750: PUSH
72751: LD_INT 55
72753: PUSH
72754: EMPTY
72755: LIST
72756: PPUSH
72757: CALL_OW 69
72761: IN
72762: ST_TO_ADDR
// end ;
72763: LD_VAR 0 2
72767: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72768: LD_INT 0
72770: PPUSH
72771: PPUSH
// list := [ ] ;
72772: LD_ADDR_VAR 0 5
72776: PUSH
72777: EMPTY
72778: ST_TO_ADDR
// case d of 0 :
72779: LD_VAR 0 3
72783: PUSH
72784: LD_INT 0
72786: DOUBLE
72787: EQUAL
72788: IFTRUE 72792
72790: GO 72925
72792: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72793: LD_ADDR_VAR 0 5
72797: PUSH
72798: LD_VAR 0 1
72802: PUSH
72803: LD_INT 4
72805: MINUS
72806: PUSH
72807: LD_VAR 0 2
72811: PUSH
72812: LD_INT 4
72814: MINUS
72815: PUSH
72816: LD_INT 2
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: PUSH
72824: LD_VAR 0 1
72828: PUSH
72829: LD_INT 3
72831: MINUS
72832: PUSH
72833: LD_VAR 0 2
72837: PUSH
72838: LD_INT 1
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: LD_VAR 0 1
72850: PUSH
72851: LD_INT 4
72853: PLUS
72854: PUSH
72855: LD_VAR 0 2
72859: PUSH
72860: LD_INT 4
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: LIST
72867: PUSH
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 3
72875: PLUS
72876: PUSH
72877: LD_VAR 0 2
72881: PUSH
72882: LD_INT 3
72884: PLUS
72885: PUSH
72886: LD_INT 5
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: PUSH
72894: LD_VAR 0 1
72898: PUSH
72899: LD_VAR 0 2
72903: PUSH
72904: LD_INT 4
72906: PLUS
72907: PUSH
72908: LD_INT 0
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: LIST
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: ST_TO_ADDR
// end ; 1 :
72923: GO 73623
72925: LD_INT 1
72927: DOUBLE
72928: EQUAL
72929: IFTRUE 72933
72931: GO 73066
72933: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72934: LD_ADDR_VAR 0 5
72938: PUSH
72939: LD_VAR 0 1
72943: PUSH
72944: LD_VAR 0 2
72948: PUSH
72949: LD_INT 4
72951: MINUS
72952: PUSH
72953: LD_INT 3
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: LIST
72960: PUSH
72961: LD_VAR 0 1
72965: PUSH
72966: LD_INT 3
72968: MINUS
72969: PUSH
72970: LD_VAR 0 2
72974: PUSH
72975: LD_INT 3
72977: MINUS
72978: PUSH
72979: LD_INT 2
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: PUSH
72987: LD_VAR 0 1
72991: PUSH
72992: LD_INT 4
72994: MINUS
72995: PUSH
72996: LD_VAR 0 2
73000: PUSH
73001: LD_INT 1
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: LIST
73008: PUSH
73009: LD_VAR 0 1
73013: PUSH
73014: LD_VAR 0 2
73018: PUSH
73019: LD_INT 3
73021: PLUS
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: LIST
73030: PUSH
73031: LD_VAR 0 1
73035: PUSH
73036: LD_INT 4
73038: PLUS
73039: PUSH
73040: LD_VAR 0 2
73044: PUSH
73045: LD_INT 4
73047: PLUS
73048: PUSH
73049: LD_INT 5
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: LIST
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: ST_TO_ADDR
// end ; 2 :
73064: GO 73623
73066: LD_INT 2
73068: DOUBLE
73069: EQUAL
73070: IFTRUE 73074
73072: GO 73203
73074: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73075: LD_ADDR_VAR 0 5
73079: PUSH
73080: LD_VAR 0 1
73084: PUSH
73085: LD_VAR 0 2
73089: PUSH
73090: LD_INT 3
73092: MINUS
73093: PUSH
73094: LD_INT 3
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: LIST
73101: PUSH
73102: LD_VAR 0 1
73106: PUSH
73107: LD_INT 4
73109: PLUS
73110: PUSH
73111: LD_VAR 0 2
73115: PUSH
73116: LD_INT 4
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: LD_VAR 0 2
73133: PUSH
73134: LD_INT 4
73136: PLUS
73137: PUSH
73138: LD_INT 0
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: LIST
73145: PUSH
73146: LD_VAR 0 1
73150: PUSH
73151: LD_INT 3
73153: MINUS
73154: PUSH
73155: LD_VAR 0 2
73159: PUSH
73160: LD_INT 1
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: PUSH
73168: LD_VAR 0 1
73172: PUSH
73173: LD_INT 4
73175: MINUS
73176: PUSH
73177: LD_VAR 0 2
73181: PUSH
73182: LD_INT 4
73184: MINUS
73185: PUSH
73186: LD_INT 2
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: LIST
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: ST_TO_ADDR
// end ; 3 :
73201: GO 73623
73203: LD_INT 3
73205: DOUBLE
73206: EQUAL
73207: IFTRUE 73211
73209: GO 73344
73211: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73212: LD_ADDR_VAR 0 5
73216: PUSH
73217: LD_VAR 0 1
73221: PUSH
73222: LD_INT 3
73224: PLUS
73225: PUSH
73226: LD_VAR 0 2
73230: PUSH
73231: LD_INT 4
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: LIST
73238: PUSH
73239: LD_VAR 0 1
73243: PUSH
73244: LD_INT 4
73246: PLUS
73247: PUSH
73248: LD_VAR 0 2
73252: PUSH
73253: LD_INT 4
73255: PLUS
73256: PUSH
73257: LD_INT 5
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: LIST
73264: PUSH
73265: LD_VAR 0 1
73269: PUSH
73270: LD_INT 4
73272: MINUS
73273: PUSH
73274: LD_VAR 0 2
73278: PUSH
73279: LD_INT 1
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: LIST
73286: PUSH
73287: LD_VAR 0 1
73291: PUSH
73292: LD_VAR 0 2
73296: PUSH
73297: LD_INT 4
73299: MINUS
73300: PUSH
73301: LD_INT 3
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: LIST
73308: PUSH
73309: LD_VAR 0 1
73313: PUSH
73314: LD_INT 3
73316: MINUS
73317: PUSH
73318: LD_VAR 0 2
73322: PUSH
73323: LD_INT 3
73325: MINUS
73326: PUSH
73327: LD_INT 2
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: LIST
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: ST_TO_ADDR
// end ; 4 :
73342: GO 73623
73344: LD_INT 4
73346: DOUBLE
73347: EQUAL
73348: IFTRUE 73352
73350: GO 73485
73352: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73353: LD_ADDR_VAR 0 5
73357: PUSH
73358: LD_VAR 0 1
73362: PUSH
73363: LD_VAR 0 2
73367: PUSH
73368: LD_INT 4
73370: PLUS
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: LIST
73379: PUSH
73380: LD_VAR 0 1
73384: PUSH
73385: LD_INT 3
73387: PLUS
73388: PUSH
73389: LD_VAR 0 2
73393: PUSH
73394: LD_INT 3
73396: PLUS
73397: PUSH
73398: LD_INT 5
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: LIST
73405: PUSH
73406: LD_VAR 0 1
73410: PUSH
73411: LD_INT 4
73413: PLUS
73414: PUSH
73415: LD_VAR 0 2
73419: PUSH
73420: LD_INT 4
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: LIST
73427: PUSH
73428: LD_VAR 0 1
73432: PUSH
73433: LD_VAR 0 2
73437: PUSH
73438: LD_INT 3
73440: MINUS
73441: PUSH
73442: LD_INT 3
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: LIST
73449: PUSH
73450: LD_VAR 0 1
73454: PUSH
73455: LD_INT 4
73457: MINUS
73458: PUSH
73459: LD_VAR 0 2
73463: PUSH
73464: LD_INT 4
73466: MINUS
73467: PUSH
73468: LD_INT 2
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: LIST
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: ST_TO_ADDR
// end ; 5 :
73483: GO 73623
73485: LD_INT 5
73487: DOUBLE
73488: EQUAL
73489: IFTRUE 73493
73491: GO 73622
73493: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73494: LD_ADDR_VAR 0 5
73498: PUSH
73499: LD_VAR 0 1
73503: PUSH
73504: LD_INT 4
73506: MINUS
73507: PUSH
73508: LD_VAR 0 2
73512: PUSH
73513: LD_INT 1
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: PUSH
73521: LD_VAR 0 1
73525: PUSH
73526: LD_VAR 0 2
73530: PUSH
73531: LD_INT 4
73533: MINUS
73534: PUSH
73535: LD_INT 3
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: LIST
73542: PUSH
73543: LD_VAR 0 1
73547: PUSH
73548: LD_INT 4
73550: PLUS
73551: PUSH
73552: LD_VAR 0 2
73556: PUSH
73557: LD_INT 4
73559: PLUS
73560: PUSH
73561: LD_INT 5
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: LIST
73568: PUSH
73569: LD_VAR 0 1
73573: PUSH
73574: LD_INT 3
73576: PLUS
73577: PUSH
73578: LD_VAR 0 2
73582: PUSH
73583: LD_INT 4
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: PUSH
73591: LD_VAR 0 1
73595: PUSH
73596: LD_VAR 0 2
73600: PUSH
73601: LD_INT 3
73603: PLUS
73604: PUSH
73605: LD_INT 0
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: LIST
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: ST_TO_ADDR
// end ; end ;
73620: GO 73623
73622: POP
// result := list ;
73623: LD_ADDR_VAR 0 4
73627: PUSH
73628: LD_VAR 0 5
73632: ST_TO_ADDR
// end ;
73633: LD_VAR 0 4
73637: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73638: LD_INT 0
73640: PPUSH
73641: PPUSH
73642: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73643: LD_VAR 0 1
73647: NOT
73648: PUSH
73649: LD_VAR 0 2
73653: PUSH
73654: LD_INT 1
73656: PUSH
73657: LD_INT 2
73659: PUSH
73660: LD_INT 3
73662: PUSH
73663: LD_INT 4
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: IN
73672: NOT
73673: OR
73674: IFFALSE 73678
// exit ;
73676: GO 73770
// tmp := [ ] ;
73678: LD_ADDR_VAR 0 5
73682: PUSH
73683: EMPTY
73684: ST_TO_ADDR
// for i in units do
73685: LD_ADDR_VAR 0 4
73689: PUSH
73690: LD_VAR 0 1
73694: PUSH
73695: FOR_IN
73696: IFFALSE 73739
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73698: LD_ADDR_VAR 0 5
73702: PUSH
73703: LD_VAR 0 5
73707: PPUSH
73708: LD_VAR 0 5
73712: PUSH
73713: LD_INT 1
73715: PLUS
73716: PPUSH
73717: LD_VAR 0 4
73721: PPUSH
73722: LD_VAR 0 2
73726: PPUSH
73727: CALL_OW 259
73731: PPUSH
73732: CALL_OW 2
73736: ST_TO_ADDR
73737: GO 73695
73739: POP
73740: POP
// if not tmp then
73741: LD_VAR 0 5
73745: NOT
73746: IFFALSE 73750
// exit ;
73748: GO 73770
// result := SortListByListDesc ( units , tmp ) ;
73750: LD_ADDR_VAR 0 3
73754: PUSH
73755: LD_VAR 0 1
73759: PPUSH
73760: LD_VAR 0 5
73764: PPUSH
73765: CALL_OW 77
73769: ST_TO_ADDR
// end ;
73770: LD_VAR 0 3
73774: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73775: LD_INT 0
73777: PPUSH
73778: PPUSH
73779: PPUSH
// result := false ;
73780: LD_ADDR_VAR 0 3
73784: PUSH
73785: LD_INT 0
73787: ST_TO_ADDR
// x := GetX ( building ) ;
73788: LD_ADDR_VAR 0 4
73792: PUSH
73793: LD_VAR 0 2
73797: PPUSH
73798: CALL_OW 250
73802: ST_TO_ADDR
// y := GetY ( building ) ;
73803: LD_ADDR_VAR 0 5
73807: PUSH
73808: LD_VAR 0 2
73812: PPUSH
73813: CALL_OW 251
73817: ST_TO_ADDR
// if not building or not x or not y then
73818: LD_VAR 0 2
73822: NOT
73823: PUSH
73824: LD_VAR 0 4
73828: NOT
73829: OR
73830: PUSH
73831: LD_VAR 0 5
73835: NOT
73836: OR
73837: IFFALSE 73841
// exit ;
73839: GO 73933
// if GetTaskList ( unit ) then
73841: LD_VAR 0 1
73845: PPUSH
73846: CALL_OW 437
73850: IFFALSE 73933
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73852: LD_STRING e
73854: PUSH
73855: LD_VAR 0 1
73859: PPUSH
73860: CALL_OW 437
73864: PUSH
73865: LD_INT 1
73867: ARRAY
73868: PUSH
73869: LD_INT 1
73871: ARRAY
73872: EQUAL
73873: PUSH
73874: LD_VAR 0 4
73878: PUSH
73879: LD_VAR 0 1
73883: PPUSH
73884: CALL_OW 437
73888: PUSH
73889: LD_INT 1
73891: ARRAY
73892: PUSH
73893: LD_INT 2
73895: ARRAY
73896: EQUAL
73897: AND
73898: PUSH
73899: LD_VAR 0 5
73903: PUSH
73904: LD_VAR 0 1
73908: PPUSH
73909: CALL_OW 437
73913: PUSH
73914: LD_INT 1
73916: ARRAY
73917: PUSH
73918: LD_INT 3
73920: ARRAY
73921: EQUAL
73922: AND
73923: IFFALSE 73933
// result := true end ;
73925: LD_ADDR_VAR 0 3
73929: PUSH
73930: LD_INT 1
73932: ST_TO_ADDR
// end ;
73933: LD_VAR 0 3
73937: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73938: LD_INT 0
73940: PPUSH
// result := false ;
73941: LD_ADDR_VAR 0 4
73945: PUSH
73946: LD_INT 0
73948: ST_TO_ADDR
// if GetTaskList ( unit ) then
73949: LD_VAR 0 1
73953: PPUSH
73954: CALL_OW 437
73958: IFFALSE 74041
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73960: LD_STRING M
73962: PUSH
73963: LD_VAR 0 1
73967: PPUSH
73968: CALL_OW 437
73972: PUSH
73973: LD_INT 1
73975: ARRAY
73976: PUSH
73977: LD_INT 1
73979: ARRAY
73980: EQUAL
73981: PUSH
73982: LD_VAR 0 2
73986: PUSH
73987: LD_VAR 0 1
73991: PPUSH
73992: CALL_OW 437
73996: PUSH
73997: LD_INT 1
73999: ARRAY
74000: PUSH
74001: LD_INT 2
74003: ARRAY
74004: EQUAL
74005: AND
74006: PUSH
74007: LD_VAR 0 3
74011: PUSH
74012: LD_VAR 0 1
74016: PPUSH
74017: CALL_OW 437
74021: PUSH
74022: LD_INT 1
74024: ARRAY
74025: PUSH
74026: LD_INT 3
74028: ARRAY
74029: EQUAL
74030: AND
74031: IFFALSE 74041
// result := true ;
74033: LD_ADDR_VAR 0 4
74037: PUSH
74038: LD_INT 1
74040: ST_TO_ADDR
// end ; end ;
74041: LD_VAR 0 4
74045: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74046: LD_INT 0
74048: PPUSH
74049: PPUSH
74050: PPUSH
74051: PPUSH
// if not unit or not area then
74052: LD_VAR 0 1
74056: NOT
74057: PUSH
74058: LD_VAR 0 2
74062: NOT
74063: OR
74064: IFFALSE 74068
// exit ;
74066: GO 74232
// tmp := AreaToList ( area , i ) ;
74068: LD_ADDR_VAR 0 6
74072: PUSH
74073: LD_VAR 0 2
74077: PPUSH
74078: LD_VAR 0 5
74082: PPUSH
74083: CALL_OW 517
74087: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74088: LD_ADDR_VAR 0 5
74092: PUSH
74093: DOUBLE
74094: LD_INT 1
74096: DEC
74097: ST_TO_ADDR
74098: LD_VAR 0 6
74102: PUSH
74103: LD_INT 1
74105: ARRAY
74106: PUSH
74107: FOR_TO
74108: IFFALSE 74230
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74110: LD_ADDR_VAR 0 7
74114: PUSH
74115: LD_VAR 0 6
74119: PUSH
74120: LD_INT 1
74122: ARRAY
74123: PUSH
74124: LD_VAR 0 5
74128: ARRAY
74129: PUSH
74130: LD_VAR 0 6
74134: PUSH
74135: LD_INT 2
74137: ARRAY
74138: PUSH
74139: LD_VAR 0 5
74143: ARRAY
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74149: LD_VAR 0 7
74153: PUSH
74154: LD_INT 1
74156: ARRAY
74157: PPUSH
74158: LD_VAR 0 7
74162: PUSH
74163: LD_INT 2
74165: ARRAY
74166: PPUSH
74167: CALL_OW 428
74171: PUSH
74172: LD_INT 0
74174: EQUAL
74175: IFFALSE 74228
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74177: LD_VAR 0 1
74181: PPUSH
74182: LD_VAR 0 7
74186: PUSH
74187: LD_INT 1
74189: ARRAY
74190: PPUSH
74191: LD_VAR 0 7
74195: PUSH
74196: LD_INT 2
74198: ARRAY
74199: PPUSH
74200: LD_VAR 0 3
74204: PPUSH
74205: CALL_OW 48
// result := IsPlaced ( unit ) ;
74209: LD_ADDR_VAR 0 4
74213: PUSH
74214: LD_VAR 0 1
74218: PPUSH
74219: CALL_OW 305
74223: ST_TO_ADDR
// exit ;
74224: POP
74225: POP
74226: GO 74232
// end ; end ;
74228: GO 74107
74230: POP
74231: POP
// end ;
74232: LD_VAR 0 4
74236: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74237: LD_INT 0
74239: PPUSH
74240: PPUSH
74241: PPUSH
// if not side or side > 8 then
74242: LD_VAR 0 1
74246: NOT
74247: PUSH
74248: LD_VAR 0 1
74252: PUSH
74253: LD_INT 8
74255: GREATER
74256: OR
74257: IFFALSE 74261
// exit ;
74259: GO 74448
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74261: LD_ADDR_VAR 0 4
74265: PUSH
74266: LD_INT 22
74268: PUSH
74269: LD_VAR 0 1
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 21
74280: PUSH
74281: LD_INT 3
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PPUSH
74292: CALL_OW 69
74296: ST_TO_ADDR
// if not tmp then
74297: LD_VAR 0 4
74301: NOT
74302: IFFALSE 74306
// exit ;
74304: GO 74448
// enable_addtolog := true ;
74306: LD_ADDR_OWVAR 81
74310: PUSH
74311: LD_INT 1
74313: ST_TO_ADDR
// AddToLog ( [ ) ;
74314: LD_STRING [
74316: PPUSH
74317: CALL_OW 561
// for i in tmp do
74321: LD_ADDR_VAR 0 3
74325: PUSH
74326: LD_VAR 0 4
74330: PUSH
74331: FOR_IN
74332: IFFALSE 74439
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74334: LD_STRING [
74336: PUSH
74337: LD_VAR 0 3
74341: PPUSH
74342: CALL_OW 266
74346: STR
74347: PUSH
74348: LD_STRING , 
74350: STR
74351: PUSH
74352: LD_VAR 0 3
74356: PPUSH
74357: CALL_OW 250
74361: STR
74362: PUSH
74363: LD_STRING , 
74365: STR
74366: PUSH
74367: LD_VAR 0 3
74371: PPUSH
74372: CALL_OW 251
74376: STR
74377: PUSH
74378: LD_STRING , 
74380: STR
74381: PUSH
74382: LD_VAR 0 3
74386: PPUSH
74387: CALL_OW 254
74391: STR
74392: PUSH
74393: LD_STRING , 
74395: STR
74396: PUSH
74397: LD_VAR 0 3
74401: PPUSH
74402: LD_INT 1
74404: PPUSH
74405: CALL_OW 268
74409: STR
74410: PUSH
74411: LD_STRING , 
74413: STR
74414: PUSH
74415: LD_VAR 0 3
74419: PPUSH
74420: LD_INT 2
74422: PPUSH
74423: CALL_OW 268
74427: STR
74428: PUSH
74429: LD_STRING ],
74431: STR
74432: PPUSH
74433: CALL_OW 561
// end ;
74437: GO 74331
74439: POP
74440: POP
// AddToLog ( ]; ) ;
74441: LD_STRING ];
74443: PPUSH
74444: CALL_OW 561
// end ;
74448: LD_VAR 0 2
74452: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74453: LD_INT 0
74455: PPUSH
74456: PPUSH
74457: PPUSH
74458: PPUSH
74459: PPUSH
// if not area or not rate or not max then
74460: LD_VAR 0 1
74464: NOT
74465: PUSH
74466: LD_VAR 0 2
74470: NOT
74471: OR
74472: PUSH
74473: LD_VAR 0 4
74477: NOT
74478: OR
74479: IFFALSE 74483
// exit ;
74481: GO 74672
// while 1 do
74483: LD_INT 1
74485: IFFALSE 74672
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74487: LD_ADDR_VAR 0 9
74491: PUSH
74492: LD_VAR 0 1
74496: PPUSH
74497: LD_INT 1
74499: PPUSH
74500: CALL_OW 287
74504: PUSH
74505: LD_INT 10
74507: MUL
74508: ST_TO_ADDR
// r := rate / 10 ;
74509: LD_ADDR_VAR 0 7
74513: PUSH
74514: LD_VAR 0 2
74518: PUSH
74519: LD_INT 10
74521: DIVREAL
74522: ST_TO_ADDR
// time := 1 1$00 ;
74523: LD_ADDR_VAR 0 8
74527: PUSH
74528: LD_INT 2100
74530: ST_TO_ADDR
// if amount < min then
74531: LD_VAR 0 9
74535: PUSH
74536: LD_VAR 0 3
74540: LESS
74541: IFFALSE 74559
// r := r * 2 else
74543: LD_ADDR_VAR 0 7
74547: PUSH
74548: LD_VAR 0 7
74552: PUSH
74553: LD_INT 2
74555: MUL
74556: ST_TO_ADDR
74557: GO 74585
// if amount > max then
74559: LD_VAR 0 9
74563: PUSH
74564: LD_VAR 0 4
74568: GREATER
74569: IFFALSE 74585
// r := r / 2 ;
74571: LD_ADDR_VAR 0 7
74575: PUSH
74576: LD_VAR 0 7
74580: PUSH
74581: LD_INT 2
74583: DIVREAL
74584: ST_TO_ADDR
// time := time / r ;
74585: LD_ADDR_VAR 0 8
74589: PUSH
74590: LD_VAR 0 8
74594: PUSH
74595: LD_VAR 0 7
74599: DIVREAL
74600: ST_TO_ADDR
// if time < 0 then
74601: LD_VAR 0 8
74605: PUSH
74606: LD_INT 0
74608: LESS
74609: IFFALSE 74626
// time := time * - 1 ;
74611: LD_ADDR_VAR 0 8
74615: PUSH
74616: LD_VAR 0 8
74620: PUSH
74621: LD_INT 1
74623: NEG
74624: MUL
74625: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74626: LD_VAR 0 8
74630: PUSH
74631: LD_INT 35
74633: PPUSH
74634: LD_INT 875
74636: PPUSH
74637: CALL_OW 12
74641: PLUS
74642: PPUSH
74643: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74647: LD_INT 1
74649: PPUSH
74650: LD_INT 5
74652: PPUSH
74653: CALL_OW 12
74657: PPUSH
74658: LD_VAR 0 1
74662: PPUSH
74663: LD_INT 1
74665: PPUSH
74666: CALL_OW 55
// end ;
74670: GO 74483
// end ;
74672: LD_VAR 0 5
74676: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74677: LD_INT 0
74679: PPUSH
74680: PPUSH
74681: PPUSH
74682: PPUSH
74683: PPUSH
74684: PPUSH
74685: PPUSH
74686: PPUSH
// if not turrets or not factories then
74687: LD_VAR 0 1
74691: NOT
74692: PUSH
74693: LD_VAR 0 2
74697: NOT
74698: OR
74699: IFFALSE 74703
// exit ;
74701: GO 75010
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74703: LD_ADDR_VAR 0 10
74707: PUSH
74708: LD_INT 5
74710: PUSH
74711: LD_INT 6
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: PUSH
74718: LD_INT 2
74720: PUSH
74721: LD_INT 4
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 3
74730: PUSH
74731: LD_INT 5
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 24
74745: PUSH
74746: LD_INT 25
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: LD_INT 23
74755: PUSH
74756: LD_INT 27
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: PUSH
74767: LD_INT 42
74769: PUSH
74770: LD_INT 43
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 44
74779: PUSH
74780: LD_INT 46
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PUSH
74787: LD_INT 45
74789: PUSH
74790: LD_INT 47
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: LIST
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: LIST
74806: ST_TO_ADDR
// result := [ ] ;
74807: LD_ADDR_VAR 0 3
74811: PUSH
74812: EMPTY
74813: ST_TO_ADDR
// for i in turrets do
74814: LD_ADDR_VAR 0 4
74818: PUSH
74819: LD_VAR 0 1
74823: PUSH
74824: FOR_IN
74825: IFFALSE 75008
// begin nat := GetNation ( i ) ;
74827: LD_ADDR_VAR 0 7
74831: PUSH
74832: LD_VAR 0 4
74836: PPUSH
74837: CALL_OW 248
74841: ST_TO_ADDR
// weapon := 0 ;
74842: LD_ADDR_VAR 0 8
74846: PUSH
74847: LD_INT 0
74849: ST_TO_ADDR
// if not nat then
74850: LD_VAR 0 7
74854: NOT
74855: IFFALSE 74859
// continue ;
74857: GO 74824
// for j in list [ nat ] do
74859: LD_ADDR_VAR 0 5
74863: PUSH
74864: LD_VAR 0 10
74868: PUSH
74869: LD_VAR 0 7
74873: ARRAY
74874: PUSH
74875: FOR_IN
74876: IFFALSE 74917
// if GetBWeapon ( i ) = j [ 1 ] then
74878: LD_VAR 0 4
74882: PPUSH
74883: CALL_OW 269
74887: PUSH
74888: LD_VAR 0 5
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: EQUAL
74897: IFFALSE 74915
// begin weapon := j [ 2 ] ;
74899: LD_ADDR_VAR 0 8
74903: PUSH
74904: LD_VAR 0 5
74908: PUSH
74909: LD_INT 2
74911: ARRAY
74912: ST_TO_ADDR
// break ;
74913: GO 74917
// end ;
74915: GO 74875
74917: POP
74918: POP
// if not weapon then
74919: LD_VAR 0 8
74923: NOT
74924: IFFALSE 74928
// continue ;
74926: GO 74824
// for k in factories do
74928: LD_ADDR_VAR 0 6
74932: PUSH
74933: LD_VAR 0 2
74937: PUSH
74938: FOR_IN
74939: IFFALSE 75004
// begin weapons := AvailableWeaponList ( k ) ;
74941: LD_ADDR_VAR 0 9
74945: PUSH
74946: LD_VAR 0 6
74950: PPUSH
74951: CALL_OW 478
74955: ST_TO_ADDR
// if not weapons then
74956: LD_VAR 0 9
74960: NOT
74961: IFFALSE 74965
// continue ;
74963: GO 74938
// if weapon in weapons then
74965: LD_VAR 0 8
74969: PUSH
74970: LD_VAR 0 9
74974: IN
74975: IFFALSE 75002
// begin result := [ i , weapon ] ;
74977: LD_ADDR_VAR 0 3
74981: PUSH
74982: LD_VAR 0 4
74986: PUSH
74987: LD_VAR 0 8
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: ST_TO_ADDR
// exit ;
74996: POP
74997: POP
74998: POP
74999: POP
75000: GO 75010
// end ; end ;
75002: GO 74938
75004: POP
75005: POP
// end ;
75006: GO 74824
75008: POP
75009: POP
// end ;
75010: LD_VAR 0 3
75014: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75015: LD_INT 0
75017: PPUSH
// if not side or side > 8 then
75018: LD_VAR 0 3
75022: NOT
75023: PUSH
75024: LD_VAR 0 3
75028: PUSH
75029: LD_INT 8
75031: GREATER
75032: OR
75033: IFFALSE 75037
// exit ;
75035: GO 75096
// if not range then
75037: LD_VAR 0 4
75041: NOT
75042: IFFALSE 75053
// range := - 12 ;
75044: LD_ADDR_VAR 0 4
75048: PUSH
75049: LD_INT 12
75051: NEG
75052: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75053: LD_VAR 0 1
75057: PPUSH
75058: LD_VAR 0 2
75062: PPUSH
75063: LD_VAR 0 3
75067: PPUSH
75068: LD_VAR 0 4
75072: PPUSH
75073: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75077: LD_VAR 0 1
75081: PPUSH
75082: LD_VAR 0 2
75086: PPUSH
75087: LD_VAR 0 3
75091: PPUSH
75092: CALL_OW 331
// end ;
75096: LD_VAR 0 5
75100: RET
// export function Video ( mode ) ; begin
75101: LD_INT 0
75103: PPUSH
// ingame_video = mode ;
75104: LD_ADDR_OWVAR 52
75108: PUSH
75109: LD_VAR 0 1
75113: ST_TO_ADDR
// interface_hidden = mode ;
75114: LD_ADDR_OWVAR 54
75118: PUSH
75119: LD_VAR 0 1
75123: ST_TO_ADDR
// end ;
75124: LD_VAR 0 2
75128: RET
// export function Join ( array , element ) ; begin
75129: LD_INT 0
75131: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75132: LD_ADDR_VAR 0 3
75136: PUSH
75137: LD_VAR 0 1
75141: PPUSH
75142: LD_VAR 0 1
75146: PUSH
75147: LD_INT 1
75149: PLUS
75150: PPUSH
75151: LD_VAR 0 2
75155: PPUSH
75156: CALL_OW 1
75160: ST_TO_ADDR
// end ;
75161: LD_VAR 0 3
75165: RET
// export function JoinUnion ( array , element ) ; begin
75166: LD_INT 0
75168: PPUSH
// result := array union element ;
75169: LD_ADDR_VAR 0 3
75173: PUSH
75174: LD_VAR 0 1
75178: PUSH
75179: LD_VAR 0 2
75183: UNION
75184: ST_TO_ADDR
// end ;
75185: LD_VAR 0 3
75189: RET
// export function GetBehemoths ( side ) ; begin
75190: LD_INT 0
75192: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75193: LD_ADDR_VAR 0 2
75197: PUSH
75198: LD_INT 22
75200: PUSH
75201: LD_VAR 0 1
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 31
75212: PUSH
75213: LD_INT 25
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: PPUSH
75224: CALL_OW 69
75228: ST_TO_ADDR
// end ;
75229: LD_VAR 0 2
75233: RET
// export function Shuffle ( array ) ; var i , index ; begin
75234: LD_INT 0
75236: PPUSH
75237: PPUSH
75238: PPUSH
// result := [ ] ;
75239: LD_ADDR_VAR 0 2
75243: PUSH
75244: EMPTY
75245: ST_TO_ADDR
// if not array then
75246: LD_VAR 0 1
75250: NOT
75251: IFFALSE 75255
// exit ;
75253: GO 75354
// Randomize ;
75255: CALL_OW 10
// for i = array downto 1 do
75259: LD_ADDR_VAR 0 3
75263: PUSH
75264: DOUBLE
75265: LD_VAR 0 1
75269: INC
75270: ST_TO_ADDR
75271: LD_INT 1
75273: PUSH
75274: FOR_DOWNTO
75275: IFFALSE 75352
// begin index := rand ( 1 , array ) ;
75277: LD_ADDR_VAR 0 4
75281: PUSH
75282: LD_INT 1
75284: PPUSH
75285: LD_VAR 0 1
75289: PPUSH
75290: CALL_OW 12
75294: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75295: LD_ADDR_VAR 0 2
75299: PUSH
75300: LD_VAR 0 2
75304: PPUSH
75305: LD_VAR 0 2
75309: PUSH
75310: LD_INT 1
75312: PLUS
75313: PPUSH
75314: LD_VAR 0 1
75318: PUSH
75319: LD_VAR 0 4
75323: ARRAY
75324: PPUSH
75325: CALL_OW 2
75329: ST_TO_ADDR
// array := Delete ( array , index ) ;
75330: LD_ADDR_VAR 0 1
75334: PUSH
75335: LD_VAR 0 1
75339: PPUSH
75340: LD_VAR 0 4
75344: PPUSH
75345: CALL_OW 3
75349: ST_TO_ADDR
// end ;
75350: GO 75274
75352: POP
75353: POP
// end ;
75354: LD_VAR 0 2
75358: RET
// export function GetBaseMaterials ( base ) ; begin
75359: LD_INT 0
75361: PPUSH
// result := [ 0 , 0 , 0 ] ;
75362: LD_ADDR_VAR 0 2
75366: PUSH
75367: LD_INT 0
75369: PUSH
75370: LD_INT 0
75372: PUSH
75373: LD_INT 0
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: LIST
75380: ST_TO_ADDR
// if not base then
75381: LD_VAR 0 1
75385: NOT
75386: IFFALSE 75390
// exit ;
75388: GO 75439
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75390: LD_ADDR_VAR 0 2
75394: PUSH
75395: LD_VAR 0 1
75399: PPUSH
75400: LD_INT 1
75402: PPUSH
75403: CALL_OW 275
75407: PUSH
75408: LD_VAR 0 1
75412: PPUSH
75413: LD_INT 2
75415: PPUSH
75416: CALL_OW 275
75420: PUSH
75421: LD_VAR 0 1
75425: PPUSH
75426: LD_INT 3
75428: PPUSH
75429: CALL_OW 275
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: ST_TO_ADDR
// end ;
75439: LD_VAR 0 2
75443: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75444: LD_INT 0
75446: PPUSH
75447: PPUSH
// result := array ;
75448: LD_ADDR_VAR 0 3
75452: PUSH
75453: LD_VAR 0 1
75457: ST_TO_ADDR
// if size >= result then
75458: LD_VAR 0 2
75462: PUSH
75463: LD_VAR 0 3
75467: GREATEREQUAL
75468: IFFALSE 75472
// exit ;
75470: GO 75522
// if size then
75472: LD_VAR 0 2
75476: IFFALSE 75522
// for i := array downto size do
75478: LD_ADDR_VAR 0 4
75482: PUSH
75483: DOUBLE
75484: LD_VAR 0 1
75488: INC
75489: ST_TO_ADDR
75490: LD_VAR 0 2
75494: PUSH
75495: FOR_DOWNTO
75496: IFFALSE 75520
// result := Delete ( result , result ) ;
75498: LD_ADDR_VAR 0 3
75502: PUSH
75503: LD_VAR 0 3
75507: PPUSH
75508: LD_VAR 0 3
75512: PPUSH
75513: CALL_OW 3
75517: ST_TO_ADDR
75518: GO 75495
75520: POP
75521: POP
// end ;
75522: LD_VAR 0 3
75526: RET
// export function ComExit ( unit ) ; var tmp ; begin
75527: LD_INT 0
75529: PPUSH
75530: PPUSH
// if not IsInUnit ( unit ) then
75531: LD_VAR 0 1
75535: PPUSH
75536: CALL_OW 310
75540: NOT
75541: IFFALSE 75545
// exit ;
75543: GO 75605
// tmp := IsInUnit ( unit ) ;
75545: LD_ADDR_VAR 0 3
75549: PUSH
75550: LD_VAR 0 1
75554: PPUSH
75555: CALL_OW 310
75559: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75560: LD_VAR 0 3
75564: PPUSH
75565: CALL_OW 247
75569: PUSH
75570: LD_INT 2
75572: EQUAL
75573: IFFALSE 75586
// ComExitVehicle ( unit ) else
75575: LD_VAR 0 1
75579: PPUSH
75580: CALL_OW 121
75584: GO 75595
// ComExitBuilding ( unit ) ;
75586: LD_VAR 0 1
75590: PPUSH
75591: CALL_OW 122
// result := tmp ;
75595: LD_ADDR_VAR 0 2
75599: PUSH
75600: LD_VAR 0 3
75604: ST_TO_ADDR
// end ;
75605: LD_VAR 0 2
75609: RET
// export function ComExitAll ( units ) ; var i ; begin
75610: LD_INT 0
75612: PPUSH
75613: PPUSH
// if not units then
75614: LD_VAR 0 1
75618: NOT
75619: IFFALSE 75623
// exit ;
75621: GO 75649
// for i in units do
75623: LD_ADDR_VAR 0 3
75627: PUSH
75628: LD_VAR 0 1
75632: PUSH
75633: FOR_IN
75634: IFFALSE 75647
// ComExit ( i ) ;
75636: LD_VAR 0 3
75640: PPUSH
75641: CALL 75527 0 1
75645: GO 75633
75647: POP
75648: POP
// end ;
75649: LD_VAR 0 2
75653: RET
// export function ResetHc ; begin
75654: LD_INT 0
75656: PPUSH
// InitHc ;
75657: CALL_OW 19
// hc_importance := 0 ;
75661: LD_ADDR_OWVAR 32
75665: PUSH
75666: LD_INT 0
75668: ST_TO_ADDR
// end ;
75669: LD_VAR 0 1
75673: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75674: LD_INT 0
75676: PPUSH
75677: PPUSH
75678: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75679: LD_ADDR_VAR 0 6
75683: PUSH
75684: LD_VAR 0 1
75688: PUSH
75689: LD_VAR 0 3
75693: PLUS
75694: PUSH
75695: LD_INT 2
75697: DIV
75698: ST_TO_ADDR
// if _x < 0 then
75699: LD_VAR 0 6
75703: PUSH
75704: LD_INT 0
75706: LESS
75707: IFFALSE 75724
// _x := _x * - 1 ;
75709: LD_ADDR_VAR 0 6
75713: PUSH
75714: LD_VAR 0 6
75718: PUSH
75719: LD_INT 1
75721: NEG
75722: MUL
75723: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75724: LD_ADDR_VAR 0 7
75728: PUSH
75729: LD_VAR 0 2
75733: PUSH
75734: LD_VAR 0 4
75738: PLUS
75739: PUSH
75740: LD_INT 2
75742: DIV
75743: ST_TO_ADDR
// if _y < 0 then
75744: LD_VAR 0 7
75748: PUSH
75749: LD_INT 0
75751: LESS
75752: IFFALSE 75769
// _y := _y * - 1 ;
75754: LD_ADDR_VAR 0 7
75758: PUSH
75759: LD_VAR 0 7
75763: PUSH
75764: LD_INT 1
75766: NEG
75767: MUL
75768: ST_TO_ADDR
// result := [ _x , _y ] ;
75769: LD_ADDR_VAR 0 5
75773: PUSH
75774: LD_VAR 0 6
75778: PUSH
75779: LD_VAR 0 7
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: ST_TO_ADDR
// end ;
75788: LD_VAR 0 5
75792: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75793: LD_INT 0
75795: PPUSH
75796: PPUSH
75797: PPUSH
75798: PPUSH
// task := GetTaskList ( unit ) ;
75799: LD_ADDR_VAR 0 7
75803: PUSH
75804: LD_VAR 0 1
75808: PPUSH
75809: CALL_OW 437
75813: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75814: LD_VAR 0 7
75818: NOT
75819: PUSH
75820: LD_VAR 0 1
75824: PPUSH
75825: LD_VAR 0 2
75829: PPUSH
75830: CALL_OW 308
75834: NOT
75835: AND
75836: IFFALSE 75840
// exit ;
75838: GO 75958
// if IsInArea ( unit , area ) then
75840: LD_VAR 0 1
75844: PPUSH
75845: LD_VAR 0 2
75849: PPUSH
75850: CALL_OW 308
75854: IFFALSE 75872
// begin ComMoveToArea ( unit , goAway ) ;
75856: LD_VAR 0 1
75860: PPUSH
75861: LD_VAR 0 3
75865: PPUSH
75866: CALL_OW 113
// exit ;
75870: GO 75958
// end ; if task [ 1 ] [ 1 ] <> M then
75872: LD_VAR 0 7
75876: PUSH
75877: LD_INT 1
75879: ARRAY
75880: PUSH
75881: LD_INT 1
75883: ARRAY
75884: PUSH
75885: LD_STRING M
75887: NONEQUAL
75888: IFFALSE 75892
// exit ;
75890: GO 75958
// x := task [ 1 ] [ 2 ] ;
75892: LD_ADDR_VAR 0 5
75896: PUSH
75897: LD_VAR 0 7
75901: PUSH
75902: LD_INT 1
75904: ARRAY
75905: PUSH
75906: LD_INT 2
75908: ARRAY
75909: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75910: LD_ADDR_VAR 0 6
75914: PUSH
75915: LD_VAR 0 7
75919: PUSH
75920: LD_INT 1
75922: ARRAY
75923: PUSH
75924: LD_INT 3
75926: ARRAY
75927: ST_TO_ADDR
// if InArea ( x , y , area ) then
75928: LD_VAR 0 5
75932: PPUSH
75933: LD_VAR 0 6
75937: PPUSH
75938: LD_VAR 0 2
75942: PPUSH
75943: CALL_OW 309
75947: IFFALSE 75958
// ComStop ( unit ) ;
75949: LD_VAR 0 1
75953: PPUSH
75954: CALL_OW 141
// end ;
75958: LD_VAR 0 4
75962: RET
// export function Abs ( value ) ; begin
75963: LD_INT 0
75965: PPUSH
// result := value ;
75966: LD_ADDR_VAR 0 2
75970: PUSH
75971: LD_VAR 0 1
75975: ST_TO_ADDR
// if value < 0 then
75976: LD_VAR 0 1
75980: PUSH
75981: LD_INT 0
75983: LESS
75984: IFFALSE 76001
// result := value * - 1 ;
75986: LD_ADDR_VAR 0 2
75990: PUSH
75991: LD_VAR 0 1
75995: PUSH
75996: LD_INT 1
75998: NEG
75999: MUL
76000: ST_TO_ADDR
// end ;
76001: LD_VAR 0 2
76005: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76006: LD_INT 0
76008: PPUSH
76009: PPUSH
76010: PPUSH
76011: PPUSH
76012: PPUSH
76013: PPUSH
76014: PPUSH
76015: PPUSH
// if not unit or not building then
76016: LD_VAR 0 1
76020: NOT
76021: PUSH
76022: LD_VAR 0 2
76026: NOT
76027: OR
76028: IFFALSE 76032
// exit ;
76030: GO 76258
// x := GetX ( building ) ;
76032: LD_ADDR_VAR 0 4
76036: PUSH
76037: LD_VAR 0 2
76041: PPUSH
76042: CALL_OW 250
76046: ST_TO_ADDR
// y := GetY ( building ) ;
76047: LD_ADDR_VAR 0 6
76051: PUSH
76052: LD_VAR 0 2
76056: PPUSH
76057: CALL_OW 251
76061: ST_TO_ADDR
// d := GetDir ( building ) ;
76062: LD_ADDR_VAR 0 8
76066: PUSH
76067: LD_VAR 0 2
76071: PPUSH
76072: CALL_OW 254
76076: ST_TO_ADDR
// r := 4 ;
76077: LD_ADDR_VAR 0 9
76081: PUSH
76082: LD_INT 4
76084: ST_TO_ADDR
// for i := 1 to 5 do
76085: LD_ADDR_VAR 0 10
76089: PUSH
76090: DOUBLE
76091: LD_INT 1
76093: DEC
76094: ST_TO_ADDR
76095: LD_INT 5
76097: PUSH
76098: FOR_TO
76099: IFFALSE 76256
// begin _x := ShiftX ( x , d , r + i ) ;
76101: LD_ADDR_VAR 0 5
76105: PUSH
76106: LD_VAR 0 4
76110: PPUSH
76111: LD_VAR 0 8
76115: PPUSH
76116: LD_VAR 0 9
76120: PUSH
76121: LD_VAR 0 10
76125: PLUS
76126: PPUSH
76127: CALL_OW 272
76131: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76132: LD_ADDR_VAR 0 7
76136: PUSH
76137: LD_VAR 0 6
76141: PPUSH
76142: LD_VAR 0 8
76146: PPUSH
76147: LD_VAR 0 9
76151: PUSH
76152: LD_VAR 0 10
76156: PLUS
76157: PPUSH
76158: CALL_OW 273
76162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76163: LD_VAR 0 5
76167: PPUSH
76168: LD_VAR 0 7
76172: PPUSH
76173: CALL_OW 488
76177: PUSH
76178: LD_VAR 0 5
76182: PPUSH
76183: LD_VAR 0 7
76187: PPUSH
76188: CALL_OW 428
76192: PPUSH
76193: CALL_OW 247
76197: PUSH
76198: LD_INT 3
76200: PUSH
76201: LD_INT 2
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: IN
76208: NOT
76209: AND
76210: IFFALSE 76254
// begin ComMoveXY ( unit , _x , _y ) ;
76212: LD_VAR 0 1
76216: PPUSH
76217: LD_VAR 0 5
76221: PPUSH
76222: LD_VAR 0 7
76226: PPUSH
76227: CALL_OW 111
// result := [ _x , _y ] ;
76231: LD_ADDR_VAR 0 3
76235: PUSH
76236: LD_VAR 0 5
76240: PUSH
76241: LD_VAR 0 7
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: ST_TO_ADDR
// exit ;
76250: POP
76251: POP
76252: GO 76258
// end ; end ;
76254: GO 76098
76256: POP
76257: POP
// end ;
76258: LD_VAR 0 3
76262: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76263: LD_INT 0
76265: PPUSH
76266: PPUSH
76267: PPUSH
// result := 0 ;
76268: LD_ADDR_VAR 0 3
76272: PUSH
76273: LD_INT 0
76275: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76276: LD_VAR 0 1
76280: PUSH
76281: LD_INT 0
76283: LESS
76284: PUSH
76285: LD_VAR 0 1
76289: PUSH
76290: LD_INT 8
76292: GREATER
76293: OR
76294: PUSH
76295: LD_VAR 0 2
76299: PUSH
76300: LD_INT 0
76302: LESS
76303: OR
76304: PUSH
76305: LD_VAR 0 2
76309: PUSH
76310: LD_INT 8
76312: GREATER
76313: OR
76314: IFFALSE 76318
// exit ;
76316: GO 76393
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76318: LD_ADDR_VAR 0 4
76322: PUSH
76323: LD_INT 22
76325: PUSH
76326: LD_VAR 0 2
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: PPUSH
76335: CALL_OW 69
76339: PUSH
76340: FOR_IN
76341: IFFALSE 76391
// begin un := UnitShoot ( i ) ;
76343: LD_ADDR_VAR 0 5
76347: PUSH
76348: LD_VAR 0 4
76352: PPUSH
76353: CALL_OW 504
76357: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76358: LD_VAR 0 5
76362: PPUSH
76363: CALL_OW 255
76367: PUSH
76368: LD_VAR 0 1
76372: EQUAL
76373: IFFALSE 76389
// begin result := un ;
76375: LD_ADDR_VAR 0 3
76379: PUSH
76380: LD_VAR 0 5
76384: ST_TO_ADDR
// exit ;
76385: POP
76386: POP
76387: GO 76393
// end ; end ;
76389: GO 76340
76391: POP
76392: POP
// end ;
76393: LD_VAR 0 3
76397: RET
// export function GetCargoBay ( units ) ; begin
76398: LD_INT 0
76400: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76401: LD_ADDR_VAR 0 2
76405: PUSH
76406: LD_VAR 0 1
76410: PPUSH
76411: LD_INT 2
76413: PUSH
76414: LD_INT 34
76416: PUSH
76417: LD_INT 12
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: LD_INT 34
76426: PUSH
76427: LD_INT 51
76429: PUSH
76430: EMPTY
76431: LIST
76432: LIST
76433: PUSH
76434: LD_INT 34
76436: PUSH
76437: LD_INT 32
76439: PUSH
76440: EMPTY
76441: LIST
76442: LIST
76443: PUSH
76444: LD_INT 34
76446: PUSH
76447: LD_INT 89
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: PPUSH
76461: CALL_OW 72
76465: ST_TO_ADDR
// end ;
76466: LD_VAR 0 2
76470: RET
// export function Negate ( value ) ; begin
76471: LD_INT 0
76473: PPUSH
// result := not value ;
76474: LD_ADDR_VAR 0 2
76478: PUSH
76479: LD_VAR 0 1
76483: NOT
76484: ST_TO_ADDR
// end ;
76485: LD_VAR 0 2
76489: RET
// export function Inc ( value ) ; begin
76490: LD_INT 0
76492: PPUSH
// result := value + 1 ;
76493: LD_ADDR_VAR 0 2
76497: PUSH
76498: LD_VAR 0 1
76502: PUSH
76503: LD_INT 1
76505: PLUS
76506: ST_TO_ADDR
// end ;
76507: LD_VAR 0 2
76511: RET
// export function Dec ( value ) ; begin
76512: LD_INT 0
76514: PPUSH
// result := value - 1 ;
76515: LD_ADDR_VAR 0 2
76519: PUSH
76520: LD_VAR 0 1
76524: PUSH
76525: LD_INT 1
76527: MINUS
76528: ST_TO_ADDR
// end ;
76529: LD_VAR 0 2
76533: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76534: LD_INT 0
76536: PPUSH
76537: PPUSH
76538: PPUSH
76539: PPUSH
76540: PPUSH
76541: PPUSH
76542: PPUSH
76543: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76544: LD_VAR 0 1
76548: PPUSH
76549: LD_VAR 0 2
76553: PPUSH
76554: CALL_OW 488
76558: NOT
76559: PUSH
76560: LD_VAR 0 3
76564: PPUSH
76565: LD_VAR 0 4
76569: PPUSH
76570: CALL_OW 488
76574: NOT
76575: OR
76576: IFFALSE 76589
// begin result := - 1 ;
76578: LD_ADDR_VAR 0 5
76582: PUSH
76583: LD_INT 1
76585: NEG
76586: ST_TO_ADDR
// exit ;
76587: GO 76824
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76589: LD_ADDR_VAR 0 12
76593: PUSH
76594: LD_VAR 0 1
76598: PPUSH
76599: LD_VAR 0 2
76603: PPUSH
76604: LD_VAR 0 3
76608: PPUSH
76609: LD_VAR 0 4
76613: PPUSH
76614: CALL 75674 0 4
76618: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76619: LD_ADDR_VAR 0 11
76623: PUSH
76624: LD_VAR 0 1
76628: PPUSH
76629: LD_VAR 0 2
76633: PPUSH
76634: LD_VAR 0 12
76638: PUSH
76639: LD_INT 1
76641: ARRAY
76642: PPUSH
76643: LD_VAR 0 12
76647: PUSH
76648: LD_INT 2
76650: ARRAY
76651: PPUSH
76652: CALL_OW 298
76656: ST_TO_ADDR
// distance := 9999 ;
76657: LD_ADDR_VAR 0 10
76661: PUSH
76662: LD_INT 9999
76664: ST_TO_ADDR
// for i := 0 to 5 do
76665: LD_ADDR_VAR 0 6
76669: PUSH
76670: DOUBLE
76671: LD_INT 0
76673: DEC
76674: ST_TO_ADDR
76675: LD_INT 5
76677: PUSH
76678: FOR_TO
76679: IFFALSE 76822
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76681: LD_ADDR_VAR 0 7
76685: PUSH
76686: LD_VAR 0 1
76690: PPUSH
76691: LD_VAR 0 6
76695: PPUSH
76696: LD_VAR 0 11
76700: PPUSH
76701: CALL_OW 272
76705: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76706: LD_ADDR_VAR 0 8
76710: PUSH
76711: LD_VAR 0 2
76715: PPUSH
76716: LD_VAR 0 6
76720: PPUSH
76721: LD_VAR 0 11
76725: PPUSH
76726: CALL_OW 273
76730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76731: LD_VAR 0 7
76735: PPUSH
76736: LD_VAR 0 8
76740: PPUSH
76741: CALL_OW 488
76745: NOT
76746: IFFALSE 76750
// continue ;
76748: GO 76678
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76750: LD_ADDR_VAR 0 9
76754: PUSH
76755: LD_VAR 0 12
76759: PUSH
76760: LD_INT 1
76762: ARRAY
76763: PPUSH
76764: LD_VAR 0 12
76768: PUSH
76769: LD_INT 2
76771: ARRAY
76772: PPUSH
76773: LD_VAR 0 7
76777: PPUSH
76778: LD_VAR 0 8
76782: PPUSH
76783: CALL_OW 298
76787: ST_TO_ADDR
// if tmp < distance then
76788: LD_VAR 0 9
76792: PUSH
76793: LD_VAR 0 10
76797: LESS
76798: IFFALSE 76820
// begin result := i ;
76800: LD_ADDR_VAR 0 5
76804: PUSH
76805: LD_VAR 0 6
76809: ST_TO_ADDR
// distance := tmp ;
76810: LD_ADDR_VAR 0 10
76814: PUSH
76815: LD_VAR 0 9
76819: ST_TO_ADDR
// end ; end ;
76820: GO 76678
76822: POP
76823: POP
// end ;
76824: LD_VAR 0 5
76828: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76829: LD_INT 0
76831: PPUSH
76832: PPUSH
// if not driver or not IsInUnit ( driver ) then
76833: LD_VAR 0 1
76837: NOT
76838: PUSH
76839: LD_VAR 0 1
76843: PPUSH
76844: CALL_OW 310
76848: NOT
76849: OR
76850: IFFALSE 76854
// exit ;
76852: GO 76944
// vehicle := IsInUnit ( driver ) ;
76854: LD_ADDR_VAR 0 3
76858: PUSH
76859: LD_VAR 0 1
76863: PPUSH
76864: CALL_OW 310
76868: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76869: LD_VAR 0 1
76873: PPUSH
76874: LD_STRING \
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: LD_INT 0
76882: PUSH
76883: LD_INT 0
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: LD_INT 0
76891: PUSH
76892: LD_INT 0
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: LIST
76899: LIST
76900: LIST
76901: LIST
76902: LIST
76903: PUSH
76904: LD_STRING E
76906: PUSH
76907: LD_INT 0
76909: PUSH
76910: LD_INT 0
76912: PUSH
76913: LD_VAR 0 3
76917: PUSH
76918: LD_INT 0
76920: PUSH
76921: LD_INT 0
76923: PUSH
76924: LD_INT 0
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: PPUSH
76940: CALL_OW 446
// end ;
76944: LD_VAR 0 2
76948: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76949: LD_INT 0
76951: PPUSH
76952: PPUSH
// if not driver or not IsInUnit ( driver ) then
76953: LD_VAR 0 1
76957: NOT
76958: PUSH
76959: LD_VAR 0 1
76963: PPUSH
76964: CALL_OW 310
76968: NOT
76969: OR
76970: IFFALSE 76974
// exit ;
76972: GO 77064
// vehicle := IsInUnit ( driver ) ;
76974: LD_ADDR_VAR 0 3
76978: PUSH
76979: LD_VAR 0 1
76983: PPUSH
76984: CALL_OW 310
76988: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76989: LD_VAR 0 1
76993: PPUSH
76994: LD_STRING \
76996: PUSH
76997: LD_INT 0
76999: PUSH
77000: LD_INT 0
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: LD_INT 0
77011: PUSH
77012: LD_INT 0
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: PUSH
77024: LD_STRING E
77026: PUSH
77027: LD_INT 0
77029: PUSH
77030: LD_INT 0
77032: PUSH
77033: LD_VAR 0 3
77037: PUSH
77038: LD_INT 0
77040: PUSH
77041: LD_INT 0
77043: PUSH
77044: LD_INT 0
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: PPUSH
77060: CALL_OW 447
// end ;
77064: LD_VAR 0 2
77068: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77069: LD_INT 0
77071: PPUSH
77072: PPUSH
77073: PPUSH
// tmp := [ ] ;
77074: LD_ADDR_VAR 0 5
77078: PUSH
77079: EMPTY
77080: ST_TO_ADDR
// for i in units do
77081: LD_ADDR_VAR 0 4
77085: PUSH
77086: LD_VAR 0 1
77090: PUSH
77091: FOR_IN
77092: IFFALSE 77130
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77094: LD_ADDR_VAR 0 5
77098: PUSH
77099: LD_VAR 0 5
77103: PPUSH
77104: LD_VAR 0 5
77108: PUSH
77109: LD_INT 1
77111: PLUS
77112: PPUSH
77113: LD_VAR 0 4
77117: PPUSH
77118: CALL_OW 256
77122: PPUSH
77123: CALL_OW 2
77127: ST_TO_ADDR
77128: GO 77091
77130: POP
77131: POP
// if not tmp then
77132: LD_VAR 0 5
77136: NOT
77137: IFFALSE 77141
// exit ;
77139: GO 77189
// if asc then
77141: LD_VAR 0 2
77145: IFFALSE 77169
// result := SortListByListAsc ( units , tmp ) else
77147: LD_ADDR_VAR 0 3
77151: PUSH
77152: LD_VAR 0 1
77156: PPUSH
77157: LD_VAR 0 5
77161: PPUSH
77162: CALL_OW 76
77166: ST_TO_ADDR
77167: GO 77189
// result := SortListByListDesc ( units , tmp ) ;
77169: LD_ADDR_VAR 0 3
77173: PUSH
77174: LD_VAR 0 1
77178: PPUSH
77179: LD_VAR 0 5
77183: PPUSH
77184: CALL_OW 77
77188: ST_TO_ADDR
// end ;
77189: LD_VAR 0 3
77193: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77194: LD_INT 0
77196: PPUSH
77197: PPUSH
// task := GetTaskList ( mech ) ;
77198: LD_ADDR_VAR 0 4
77202: PUSH
77203: LD_VAR 0 1
77207: PPUSH
77208: CALL_OW 437
77212: ST_TO_ADDR
// if not task then
77213: LD_VAR 0 4
77217: NOT
77218: IFFALSE 77222
// exit ;
77220: GO 77264
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77222: LD_ADDR_VAR 0 3
77226: PUSH
77227: LD_VAR 0 4
77231: PUSH
77232: LD_INT 1
77234: ARRAY
77235: PUSH
77236: LD_INT 1
77238: ARRAY
77239: PUSH
77240: LD_STRING r
77242: EQUAL
77243: PUSH
77244: LD_VAR 0 4
77248: PUSH
77249: LD_INT 1
77251: ARRAY
77252: PUSH
77253: LD_INT 4
77255: ARRAY
77256: PUSH
77257: LD_VAR 0 2
77261: EQUAL
77262: AND
77263: ST_TO_ADDR
// end ;
77264: LD_VAR 0 3
77268: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77269: LD_INT 0
77271: PPUSH
// SetDir ( unit , d ) ;
77272: LD_VAR 0 1
77276: PPUSH
77277: LD_VAR 0 4
77281: PPUSH
77282: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77286: LD_VAR 0 1
77290: PPUSH
77291: LD_VAR 0 2
77295: PPUSH
77296: LD_VAR 0 3
77300: PPUSH
77301: LD_VAR 0 5
77305: PPUSH
77306: CALL_OW 48
// end ;
77310: LD_VAR 0 6
77314: RET
// export function ToNaturalNumber ( number ) ; begin
77315: LD_INT 0
77317: PPUSH
// result := number div 1 ;
77318: LD_ADDR_VAR 0 2
77322: PUSH
77323: LD_VAR 0 1
77327: PUSH
77328: LD_INT 1
77330: DIV
77331: ST_TO_ADDR
// if number < 0 then
77332: LD_VAR 0 1
77336: PUSH
77337: LD_INT 0
77339: LESS
77340: IFFALSE 77350
// result := 0 ;
77342: LD_ADDR_VAR 0 2
77346: PUSH
77347: LD_INT 0
77349: ST_TO_ADDR
// end ;
77350: LD_VAR 0 2
77354: RET
// export function SortByClass ( units , class ) ; var un ; begin
77355: LD_INT 0
77357: PPUSH
77358: PPUSH
// if not units or not class then
77359: LD_VAR 0 1
77363: NOT
77364: PUSH
77365: LD_VAR 0 2
77369: NOT
77370: OR
77371: IFFALSE 77375
// exit ;
77373: GO 77470
// result := [ ] ;
77375: LD_ADDR_VAR 0 3
77379: PUSH
77380: EMPTY
77381: ST_TO_ADDR
// for un in units do
77382: LD_ADDR_VAR 0 4
77386: PUSH
77387: LD_VAR 0 1
77391: PUSH
77392: FOR_IN
77393: IFFALSE 77468
// if GetClass ( un ) = class then
77395: LD_VAR 0 4
77399: PPUSH
77400: CALL_OW 257
77404: PUSH
77405: LD_VAR 0 2
77409: EQUAL
77410: IFFALSE 77437
// result := Insert ( result , 1 , un ) else
77412: LD_ADDR_VAR 0 3
77416: PUSH
77417: LD_VAR 0 3
77421: PPUSH
77422: LD_INT 1
77424: PPUSH
77425: LD_VAR 0 4
77429: PPUSH
77430: CALL_OW 2
77434: ST_TO_ADDR
77435: GO 77466
// result := Replace ( result , result + 1 , un ) ;
77437: LD_ADDR_VAR 0 3
77441: PUSH
77442: LD_VAR 0 3
77446: PPUSH
77447: LD_VAR 0 3
77451: PUSH
77452: LD_INT 1
77454: PLUS
77455: PPUSH
77456: LD_VAR 0 4
77460: PPUSH
77461: CALL_OW 1
77465: ST_TO_ADDR
77466: GO 77392
77468: POP
77469: POP
// end ;
77470: LD_VAR 0 3
77474: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77475: LD_INT 0
77477: PPUSH
77478: PPUSH
77479: PPUSH
77480: PPUSH
77481: PPUSH
77482: PPUSH
77483: PPUSH
// result := [ ] ;
77484: LD_ADDR_VAR 0 4
77488: PUSH
77489: EMPTY
77490: ST_TO_ADDR
// if x - r < 0 then
77491: LD_VAR 0 1
77495: PUSH
77496: LD_VAR 0 3
77500: MINUS
77501: PUSH
77502: LD_INT 0
77504: LESS
77505: IFFALSE 77517
// min_x := 0 else
77507: LD_ADDR_VAR 0 8
77511: PUSH
77512: LD_INT 0
77514: ST_TO_ADDR
77515: GO 77533
// min_x := x - r ;
77517: LD_ADDR_VAR 0 8
77521: PUSH
77522: LD_VAR 0 1
77526: PUSH
77527: LD_VAR 0 3
77531: MINUS
77532: ST_TO_ADDR
// if y - r < 0 then
77533: LD_VAR 0 2
77537: PUSH
77538: LD_VAR 0 3
77542: MINUS
77543: PUSH
77544: LD_INT 0
77546: LESS
77547: IFFALSE 77559
// min_y := 0 else
77549: LD_ADDR_VAR 0 7
77553: PUSH
77554: LD_INT 0
77556: ST_TO_ADDR
77557: GO 77575
// min_y := y - r ;
77559: LD_ADDR_VAR 0 7
77563: PUSH
77564: LD_VAR 0 2
77568: PUSH
77569: LD_VAR 0 3
77573: MINUS
77574: ST_TO_ADDR
// max_x := x + r ;
77575: LD_ADDR_VAR 0 9
77579: PUSH
77580: LD_VAR 0 1
77584: PUSH
77585: LD_VAR 0 3
77589: PLUS
77590: ST_TO_ADDR
// max_y := y + r ;
77591: LD_ADDR_VAR 0 10
77595: PUSH
77596: LD_VAR 0 2
77600: PUSH
77601: LD_VAR 0 3
77605: PLUS
77606: ST_TO_ADDR
// for _x = min_x to max_x do
77607: LD_ADDR_VAR 0 5
77611: PUSH
77612: DOUBLE
77613: LD_VAR 0 8
77617: DEC
77618: ST_TO_ADDR
77619: LD_VAR 0 9
77623: PUSH
77624: FOR_TO
77625: IFFALSE 77726
// for _y = min_y to max_y do
77627: LD_ADDR_VAR 0 6
77631: PUSH
77632: DOUBLE
77633: LD_VAR 0 7
77637: DEC
77638: ST_TO_ADDR
77639: LD_VAR 0 10
77643: PUSH
77644: FOR_TO
77645: IFFALSE 77722
// begin if not ValidHex ( _x , _y ) then
77647: LD_VAR 0 5
77651: PPUSH
77652: LD_VAR 0 6
77656: PPUSH
77657: CALL_OW 488
77661: NOT
77662: IFFALSE 77666
// continue ;
77664: GO 77644
// if GetResourceTypeXY ( _x , _y ) then
77666: LD_VAR 0 5
77670: PPUSH
77671: LD_VAR 0 6
77675: PPUSH
77676: CALL_OW 283
77680: IFFALSE 77720
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77682: LD_ADDR_VAR 0 4
77686: PUSH
77687: LD_VAR 0 4
77691: PPUSH
77692: LD_VAR 0 4
77696: PUSH
77697: LD_INT 1
77699: PLUS
77700: PPUSH
77701: LD_VAR 0 5
77705: PUSH
77706: LD_VAR 0 6
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PPUSH
77715: CALL_OW 1
77719: ST_TO_ADDR
// end ;
77720: GO 77644
77722: POP
77723: POP
77724: GO 77624
77726: POP
77727: POP
// end ;
77728: LD_VAR 0 4
77732: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77733: LD_INT 0
77735: PPUSH
77736: PPUSH
77737: PPUSH
77738: PPUSH
77739: PPUSH
77740: PPUSH
77741: PPUSH
77742: PPUSH
// if not units then
77743: LD_VAR 0 1
77747: NOT
77748: IFFALSE 77752
// exit ;
77750: GO 78276
// result := UnitFilter ( units , [ f_ok ] ) ;
77752: LD_ADDR_VAR 0 3
77756: PUSH
77757: LD_VAR 0 1
77761: PPUSH
77762: LD_INT 50
77764: PUSH
77765: EMPTY
77766: LIST
77767: PPUSH
77768: CALL_OW 72
77772: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77773: LD_ADDR_VAR 0 8
77777: PUSH
77778: LD_VAR 0 1
77782: PUSH
77783: LD_INT 1
77785: ARRAY
77786: PPUSH
77787: CALL_OW 255
77791: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77792: LD_ADDR_VAR 0 10
77796: PUSH
77797: LD_INT 29
77799: PUSH
77800: LD_INT 91
77802: PUSH
77803: LD_INT 49
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: LIST
77810: ST_TO_ADDR
// if not result then
77811: LD_VAR 0 3
77815: NOT
77816: IFFALSE 77820
// exit ;
77818: GO 78276
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77820: LD_ADDR_VAR 0 5
77824: PUSH
77825: LD_INT 81
77827: PUSH
77828: LD_VAR 0 8
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PPUSH
77837: CALL_OW 69
77841: ST_TO_ADDR
// for i in result do
77842: LD_ADDR_VAR 0 4
77846: PUSH
77847: LD_VAR 0 3
77851: PUSH
77852: FOR_IN
77853: IFFALSE 78274
// begin tag := GetTag ( i ) + 1 ;
77855: LD_ADDR_VAR 0 9
77859: PUSH
77860: LD_VAR 0 4
77864: PPUSH
77865: CALL_OW 110
77869: PUSH
77870: LD_INT 1
77872: PLUS
77873: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77874: LD_ADDR_VAR 0 7
77878: PUSH
77879: LD_VAR 0 4
77883: PPUSH
77884: CALL_OW 250
77888: PPUSH
77889: LD_VAR 0 4
77893: PPUSH
77894: CALL_OW 251
77898: PPUSH
77899: LD_INT 6
77901: PPUSH
77902: CALL 77475 0 3
77906: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77907: LD_VAR 0 4
77911: PPUSH
77912: CALL_OW 247
77916: PUSH
77917: LD_INT 2
77919: EQUAL
77920: PUSH
77921: LD_VAR 0 7
77925: AND
77926: PUSH
77927: LD_VAR 0 4
77931: PPUSH
77932: CALL_OW 264
77936: PUSH
77937: LD_VAR 0 10
77941: IN
77942: NOT
77943: AND
77944: IFFALSE 77983
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77946: LD_VAR 0 4
77950: PPUSH
77951: LD_VAR 0 7
77955: PUSH
77956: LD_INT 1
77958: ARRAY
77959: PUSH
77960: LD_INT 1
77962: ARRAY
77963: PPUSH
77964: LD_VAR 0 7
77968: PUSH
77969: LD_INT 1
77971: ARRAY
77972: PUSH
77973: LD_INT 2
77975: ARRAY
77976: PPUSH
77977: CALL_OW 116
77981: GO 78272
// if path > tag then
77983: LD_VAR 0 2
77987: PUSH
77988: LD_VAR 0 9
77992: GREATER
77993: IFFALSE 78201
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77995: LD_ADDR_VAR 0 6
77999: PUSH
78000: LD_VAR 0 5
78004: PPUSH
78005: LD_INT 91
78007: PUSH
78008: LD_VAR 0 4
78012: PUSH
78013: LD_INT 8
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: LIST
78020: PPUSH
78021: CALL_OW 72
78025: ST_TO_ADDR
// if nearEnemy then
78026: LD_VAR 0 6
78030: IFFALSE 78099
// begin if GetWeapon ( i ) = ru_time_lapser then
78032: LD_VAR 0 4
78036: PPUSH
78037: CALL_OW 264
78041: PUSH
78042: LD_INT 49
78044: EQUAL
78045: IFFALSE 78073
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78047: LD_VAR 0 4
78051: PPUSH
78052: LD_VAR 0 6
78056: PPUSH
78057: LD_VAR 0 4
78061: PPUSH
78062: CALL_OW 74
78066: PPUSH
78067: CALL_OW 112
78071: GO 78097
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78073: LD_VAR 0 4
78077: PPUSH
78078: LD_VAR 0 6
78082: PPUSH
78083: LD_VAR 0 4
78087: PPUSH
78088: CALL_OW 74
78092: PPUSH
78093: CALL_OW 115
// end else
78097: GO 78199
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78099: LD_VAR 0 4
78103: PPUSH
78104: LD_VAR 0 2
78108: PUSH
78109: LD_VAR 0 9
78113: ARRAY
78114: PUSH
78115: LD_INT 1
78117: ARRAY
78118: PPUSH
78119: LD_VAR 0 2
78123: PUSH
78124: LD_VAR 0 9
78128: ARRAY
78129: PUSH
78130: LD_INT 2
78132: ARRAY
78133: PPUSH
78134: CALL_OW 297
78138: PUSH
78139: LD_INT 6
78141: GREATER
78142: IFFALSE 78185
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78144: LD_VAR 0 4
78148: PPUSH
78149: LD_VAR 0 2
78153: PUSH
78154: LD_VAR 0 9
78158: ARRAY
78159: PUSH
78160: LD_INT 1
78162: ARRAY
78163: PPUSH
78164: LD_VAR 0 2
78168: PUSH
78169: LD_VAR 0 9
78173: ARRAY
78174: PUSH
78175: LD_INT 2
78177: ARRAY
78178: PPUSH
78179: CALL_OW 114
78183: GO 78199
// SetTag ( i , tag ) ;
78185: LD_VAR 0 4
78189: PPUSH
78190: LD_VAR 0 9
78194: PPUSH
78195: CALL_OW 109
// end else
78199: GO 78272
// if enemy then
78201: LD_VAR 0 5
78205: IFFALSE 78272
// begin if GetWeapon ( i ) = ru_time_lapser then
78207: LD_VAR 0 4
78211: PPUSH
78212: CALL_OW 264
78216: PUSH
78217: LD_INT 49
78219: EQUAL
78220: IFFALSE 78248
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78222: LD_VAR 0 4
78226: PPUSH
78227: LD_VAR 0 5
78231: PPUSH
78232: LD_VAR 0 4
78236: PPUSH
78237: CALL_OW 74
78241: PPUSH
78242: CALL_OW 112
78246: GO 78272
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78248: LD_VAR 0 4
78252: PPUSH
78253: LD_VAR 0 5
78257: PPUSH
78258: LD_VAR 0 4
78262: PPUSH
78263: CALL_OW 74
78267: PPUSH
78268: CALL_OW 115
// end ; end ;
78272: GO 77852
78274: POP
78275: POP
// end ;
78276: LD_VAR 0 3
78280: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78281: LD_INT 0
78283: PPUSH
78284: PPUSH
78285: PPUSH
// if not unit or IsInUnit ( unit ) then
78286: LD_VAR 0 1
78290: NOT
78291: PUSH
78292: LD_VAR 0 1
78296: PPUSH
78297: CALL_OW 310
78301: OR
78302: IFFALSE 78306
// exit ;
78304: GO 78397
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78306: LD_ADDR_VAR 0 4
78310: PUSH
78311: LD_VAR 0 1
78315: PPUSH
78316: CALL_OW 250
78320: PPUSH
78321: LD_VAR 0 2
78325: PPUSH
78326: LD_INT 1
78328: PPUSH
78329: CALL_OW 272
78333: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78334: LD_ADDR_VAR 0 5
78338: PUSH
78339: LD_VAR 0 1
78343: PPUSH
78344: CALL_OW 251
78348: PPUSH
78349: LD_VAR 0 2
78353: PPUSH
78354: LD_INT 1
78356: PPUSH
78357: CALL_OW 273
78361: ST_TO_ADDR
// if ValidHex ( x , y ) then
78362: LD_VAR 0 4
78366: PPUSH
78367: LD_VAR 0 5
78371: PPUSH
78372: CALL_OW 488
78376: IFFALSE 78397
// ComTurnXY ( unit , x , y ) ;
78378: LD_VAR 0 1
78382: PPUSH
78383: LD_VAR 0 4
78387: PPUSH
78388: LD_VAR 0 5
78392: PPUSH
78393: CALL_OW 118
// end ;
78397: LD_VAR 0 3
78401: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78402: LD_INT 0
78404: PPUSH
78405: PPUSH
// result := false ;
78406: LD_ADDR_VAR 0 3
78410: PUSH
78411: LD_INT 0
78413: ST_TO_ADDR
// if not units then
78414: LD_VAR 0 2
78418: NOT
78419: IFFALSE 78423
// exit ;
78421: GO 78468
// for i in units do
78423: LD_ADDR_VAR 0 4
78427: PUSH
78428: LD_VAR 0 2
78432: PUSH
78433: FOR_IN
78434: IFFALSE 78466
// if See ( side , i ) then
78436: LD_VAR 0 1
78440: PPUSH
78441: LD_VAR 0 4
78445: PPUSH
78446: CALL_OW 292
78450: IFFALSE 78464
// begin result := true ;
78452: LD_ADDR_VAR 0 3
78456: PUSH
78457: LD_INT 1
78459: ST_TO_ADDR
// exit ;
78460: POP
78461: POP
78462: GO 78468
// end ;
78464: GO 78433
78466: POP
78467: POP
// end ;
78468: LD_VAR 0 3
78472: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78473: LD_INT 0
78475: PPUSH
78476: PPUSH
78477: PPUSH
78478: PPUSH
// if not unit or not points then
78479: LD_VAR 0 1
78483: NOT
78484: PUSH
78485: LD_VAR 0 2
78489: NOT
78490: OR
78491: IFFALSE 78495
// exit ;
78493: GO 78585
// dist := 99999 ;
78495: LD_ADDR_VAR 0 5
78499: PUSH
78500: LD_INT 99999
78502: ST_TO_ADDR
// for i in points do
78503: LD_ADDR_VAR 0 4
78507: PUSH
78508: LD_VAR 0 2
78512: PUSH
78513: FOR_IN
78514: IFFALSE 78583
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78516: LD_ADDR_VAR 0 6
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: LD_VAR 0 4
78530: PUSH
78531: LD_INT 1
78533: ARRAY
78534: PPUSH
78535: LD_VAR 0 4
78539: PUSH
78540: LD_INT 2
78542: ARRAY
78543: PPUSH
78544: CALL_OW 297
78548: ST_TO_ADDR
// if tmpDist < dist then
78549: LD_VAR 0 6
78553: PUSH
78554: LD_VAR 0 5
78558: LESS
78559: IFFALSE 78581
// begin result := i ;
78561: LD_ADDR_VAR 0 3
78565: PUSH
78566: LD_VAR 0 4
78570: ST_TO_ADDR
// dist := tmpDist ;
78571: LD_ADDR_VAR 0 5
78575: PUSH
78576: LD_VAR 0 6
78580: ST_TO_ADDR
// end ; end ;
78581: GO 78513
78583: POP
78584: POP
// end ;
78585: LD_VAR 0 3
78589: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78590: LD_INT 0
78592: PPUSH
// uc_side := side ;
78593: LD_ADDR_OWVAR 20
78597: PUSH
78598: LD_VAR 0 1
78602: ST_TO_ADDR
// uc_nation := 3 ;
78603: LD_ADDR_OWVAR 21
78607: PUSH
78608: LD_INT 3
78610: ST_TO_ADDR
// vc_chassis := 25 ;
78611: LD_ADDR_OWVAR 37
78615: PUSH
78616: LD_INT 25
78618: ST_TO_ADDR
// vc_engine := engine_siberite ;
78619: LD_ADDR_OWVAR 39
78623: PUSH
78624: LD_INT 3
78626: ST_TO_ADDR
// vc_control := control_computer ;
78627: LD_ADDR_OWVAR 38
78631: PUSH
78632: LD_INT 3
78634: ST_TO_ADDR
// vc_weapon := 59 ;
78635: LD_ADDR_OWVAR 40
78639: PUSH
78640: LD_INT 59
78642: ST_TO_ADDR
// result := CreateVehicle ;
78643: LD_ADDR_VAR 0 5
78647: PUSH
78648: CALL_OW 45
78652: ST_TO_ADDR
// SetDir ( result , d ) ;
78653: LD_VAR 0 5
78657: PPUSH
78658: LD_VAR 0 4
78662: PPUSH
78663: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78667: LD_VAR 0 5
78671: PPUSH
78672: LD_VAR 0 2
78676: PPUSH
78677: LD_VAR 0 3
78681: PPUSH
78682: LD_INT 0
78684: PPUSH
78685: CALL_OW 48
// end ;
78689: LD_VAR 0 5
78693: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78694: LD_INT 0
78696: PPUSH
78697: PPUSH
78698: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78699: LD_ADDR_VAR 0 2
78703: PUSH
78704: LD_INT 0
78706: PUSH
78707: LD_INT 0
78709: PUSH
78710: LD_INT 0
78712: PUSH
78713: LD_INT 0
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: LIST
78720: LIST
78721: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78722: LD_VAR 0 1
78726: NOT
78727: PUSH
78728: LD_VAR 0 1
78732: PPUSH
78733: CALL_OW 264
78737: PUSH
78738: LD_INT 12
78740: PUSH
78741: LD_INT 51
78743: PUSH
78744: LD_INT 32
78746: PUSH
78747: LD_INT 89
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: IN
78756: NOT
78757: OR
78758: IFFALSE 78762
// exit ;
78760: GO 78860
// for i := 1 to 3 do
78762: LD_ADDR_VAR 0 3
78766: PUSH
78767: DOUBLE
78768: LD_INT 1
78770: DEC
78771: ST_TO_ADDR
78772: LD_INT 3
78774: PUSH
78775: FOR_TO
78776: IFFALSE 78858
// begin tmp := GetCargo ( cargo , i ) ;
78778: LD_ADDR_VAR 0 4
78782: PUSH
78783: LD_VAR 0 1
78787: PPUSH
78788: LD_VAR 0 3
78792: PPUSH
78793: CALL_OW 289
78797: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78798: LD_ADDR_VAR 0 2
78802: PUSH
78803: LD_VAR 0 2
78807: PPUSH
78808: LD_VAR 0 3
78812: PPUSH
78813: LD_VAR 0 4
78817: PPUSH
78818: CALL_OW 1
78822: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78823: LD_ADDR_VAR 0 2
78827: PUSH
78828: LD_VAR 0 2
78832: PPUSH
78833: LD_INT 4
78835: PPUSH
78836: LD_VAR 0 2
78840: PUSH
78841: LD_INT 4
78843: ARRAY
78844: PUSH
78845: LD_VAR 0 4
78849: PLUS
78850: PPUSH
78851: CALL_OW 1
78855: ST_TO_ADDR
// end ;
78856: GO 78775
78858: POP
78859: POP
// end ;
78860: LD_VAR 0 2
78864: RET
// export function Length ( array ) ; begin
78865: LD_INT 0
78867: PPUSH
// result := array + 0 ;
78868: LD_ADDR_VAR 0 2
78872: PUSH
78873: LD_VAR 0 1
78877: PUSH
78878: LD_INT 0
78880: PLUS
78881: ST_TO_ADDR
// end ;
78882: LD_VAR 0 2
78886: RET
// export function PrepareArray ( array ) ; begin
78887: LD_INT 0
78889: PPUSH
// result := array diff 0 ;
78890: LD_ADDR_VAR 0 2
78894: PUSH
78895: LD_VAR 0 1
78899: PUSH
78900: LD_INT 0
78902: DIFF
78903: ST_TO_ADDR
// if not result [ 1 ] then
78904: LD_VAR 0 2
78908: PUSH
78909: LD_INT 1
78911: ARRAY
78912: NOT
78913: IFFALSE 78933
// result := Delete ( result , 1 ) ;
78915: LD_ADDR_VAR 0 2
78919: PUSH
78920: LD_VAR 0 2
78924: PPUSH
78925: LD_INT 1
78927: PPUSH
78928: CALL_OW 3
78932: ST_TO_ADDR
// end ;
78933: LD_VAR 0 2
78937: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78938: LD_INT 0
78940: PPUSH
78941: PPUSH
78942: PPUSH
78943: PPUSH
// sibRocketRange := 25 ;
78944: LD_ADDR_VAR 0 6
78948: PUSH
78949: LD_INT 25
78951: ST_TO_ADDR
// result := false ;
78952: LD_ADDR_VAR 0 4
78956: PUSH
78957: LD_INT 0
78959: ST_TO_ADDR
// for i := 0 to 5 do
78960: LD_ADDR_VAR 0 5
78964: PUSH
78965: DOUBLE
78966: LD_INT 0
78968: DEC
78969: ST_TO_ADDR
78970: LD_INT 5
78972: PUSH
78973: FOR_TO
78974: IFFALSE 79041
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78976: LD_VAR 0 1
78980: PPUSH
78981: LD_VAR 0 5
78985: PPUSH
78986: LD_VAR 0 6
78990: PPUSH
78991: CALL_OW 272
78995: PPUSH
78996: LD_VAR 0 2
79000: PPUSH
79001: LD_VAR 0 5
79005: PPUSH
79006: LD_VAR 0 6
79010: PPUSH
79011: CALL_OW 273
79015: PPUSH
79016: LD_VAR 0 3
79020: PPUSH
79021: CALL_OW 309
79025: IFFALSE 79039
// begin result := true ;
79027: LD_ADDR_VAR 0 4
79031: PUSH
79032: LD_INT 1
79034: ST_TO_ADDR
// exit ;
79035: POP
79036: POP
79037: GO 79043
// end ;
79039: GO 78973
79041: POP
79042: POP
// end ;
79043: LD_VAR 0 4
79047: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79048: LD_INT 0
79050: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79051: LD_VAR 0 1
79055: PPUSH
79056: LD_VAR 0 2
79060: PPUSH
79061: LD_INT 0
79063: PPUSH
79064: LD_INT 0
79066: PPUSH
79067: LD_INT 1
79069: PPUSH
79070: LD_INT 0
79072: PPUSH
79073: CALL_OW 587
// end ; end_of_file
79077: LD_VAR 0 3
79081: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79082: LD_VAR 0 1
79086: PPUSH
79087: LD_VAR 0 2
79091: PPUSH
79092: LD_VAR 0 3
79096: PPUSH
79097: LD_VAR 0 4
79101: PPUSH
79102: LD_VAR 0 5
79106: PPUSH
79107: LD_VAR 0 6
79111: PPUSH
79112: CALL 17630 0 6
// end ;
79116: PPOPN 6
79118: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79119: LD_INT 0
79121: PPUSH
// begin if not units then
79122: LD_VAR 0 1
79126: NOT
79127: IFFALSE 79131
// exit ;
79129: GO 79131
// end ;
79131: PPOPN 7
79133: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79134: CALL 17601 0 0
// end ;
79138: PPOPN 1
79140: END
